TITLE: Printing Hello World in Go
DESCRIPTION: This snippet initializes a basic Go application to print 'hello' to the console using the fmt package. It includes a main function, which is the entry point of the Go program. The fmt package is required to use the Println function to output text to the console. The program does not take any inputs and outputs the string 'hello' followed by a newline.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_tools_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package main

import "fmt"

func main() {
	fmt.Println("hello")
}
```

----------------------------------------

TITLE: Module Definition with Go 1.20
DESCRIPTION: Defines a Go module named 'example' using Go version 1.20
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pkgconfig_error.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example
go 1.20
```

----------------------------------------

TITLE: Defining Go Module Path in go.mod
DESCRIPTION: This snippet from a `.mod` file declares the module path for the Go project. The `module` directive specifies the canonical import path for the module, which is 'github.com/dmitshur-test/modtest5' in this case.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/github.com_dmitshur-test_modtest5_v0.0.0-20190619020302-197a620e0c9a.txt#2025-04-22_snippet_0

LANGUAGE: go.mod
CODE:
```
-- .mod --
module github.com/dmitshur-test/modtest5
```

----------------------------------------

TITLE: Simple Hello World Go Program
DESCRIPTION: A minimal Go program that prints 'hello, world' to the console. This file is used as part of a Bazaar version control test to demonstrate basic repository operations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/bzr/hello.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

func main() {
	println("hello, world")
}
```

----------------------------------------

TITLE: Simple Hello World Program in Go
DESCRIPTION: A minimal Go program that prints 'hello, world' to the console. This is the file that gets added to the Fossil repository in the example workflow.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/fossil/hello.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

func main() {
	println("hello, world")
}
```

----------------------------------------

TITLE: Defining a Go Module
DESCRIPTION: This snippet defines the module path for a Go project as 'example.com/missingpkg'. This declaration is typically found at the beginning of a `go.mod` file and is essential for Go's dependency management system.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_missingpkg_v1.0.1-beta.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/missingpkg
```

----------------------------------------

TITLE: Defining a Trivial Go Module
DESCRIPTION: A go.mod file defining a simple module named "triv" using Go 1.16. This provides the module context for the installation test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_relative_gobin_fail.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module triv

go 1.16
```

----------------------------------------

TITLE: Simple Hello World Go program
DESCRIPTION: A basic Go program that writes "Hello, world!" to standard output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue47650.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package main

import "os"

func main() {
	os.Stdout.WriteString("Hello, world!")
}
```

----------------------------------------

TITLE: Importing Package in Go
DESCRIPTION: This snippet demonstrates importing a package in a Go file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_of_test_dep.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package lazy

import (
	_ "example.com/a"
)
```

----------------------------------------

TITLE: Setting Up and Testing Go Module Build Info Retrieval via Shell
DESCRIPTION: This shell script configures the Go module environment (`GO111MODULE=on`), navigates directories, modifies `go.mod` for the 'x' module to add a requirement (`rsc.io/quote@v1.5.2`) and a replacement (`rsc.io/quote@v1.5.2=rsc.io/quote@v1.0.0`), tidies dependencies, builds the `x` binary, executes it, and verifies that the standard error output contains the expected module, dependency, and replacement information. It depends on the Go toolchain being available.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_modinfo.txt#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
# Test to ensure runtime/debug.ReadBuildInfo parses
# the modinfo embedded in a binary by the go tool
# when module is enabled.
env GO111MODULE=on

cd x
go mod edit -require=rsc.io/quote@v1.5.2
go mod edit -replace=rsc.io/quote@v1.5.2=rsc.io/quote@v1.0.0
go mod tidy # populate go.sum

# Build a binary and ensure that it can output its own debug info.
# The debug info should be accessible before main starts (golang.org/issue/29628).
go build
exec ./x$GOEXE
stderr 'mod\s+x\s+\(devel\)'
stderr 'dep\s+rsc.io/quote\s+v1.5.2\s+'
stderr '=>\s+rsc.io/quote\s+v1.0.0\s+h1:'
stderr 'Hello, world.'
```

----------------------------------------

TITLE: Defining Go Module Metadata - Go Mod - Go Mod
DESCRIPTION: Declares the module path for the Go package using the 'module' directive, which is required for Go's dependency management system. The go.mod file specifies 'golang.org/toolchain' as the root module and must be present at the repository root for module-aware builds. No dependencies are listed, and the minimal configuration is only the module declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-386.txt#2025-04-22_snippet_0

LANGUAGE: Go Mod
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Testing Quote Package Functions in Go
DESCRIPTION: Unit tests for the quote package, verifying the output of all four functions (Hello, Glass, Go, and Opt) against their expected return values.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.4.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package quote

import "testing"

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory, share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}

func TestOpt(t *testing.T) {
	opt := "If a program is too slow, it must have a loop."
	if out := Opt(); out != opt {
		t.Errorf("Opt() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Defining a Go Module
DESCRIPTION: Creates a minimal go.mod file that declares the module name as 'x'. This establishes the module identity for the package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_domain_root.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module x
```

----------------------------------------

TITLE: Goroutine Hello World Example in Go
DESCRIPTION: Demonstrates printing 'hello, world' using an anonymous function executed as a goroutine.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code6.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go func() {
	fmt.Println("hello, world")
}()
```

----------------------------------------

TITLE: HTTP Path Value Manipulation - net/http - Go
DESCRIPTION: The *Request type gains PathValue and SetPathValue methods to get or set arbitrary key-value pairs tied to the request path. Useful for embedding application-specific values in the request context during HTTP handling.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_23

LANGUAGE: Go
CODE:
```
func (r *Request) PathValue(string) string
func (r *Request) SetPathValue(key string, value string)
```

----------------------------------------

TITLE: Generic Comparison Functions in cmp Package
DESCRIPTION: New generic comparison functions for ordered types. Includes Compare for three-way comparison and Less for two-way comparison of ordered values.
SOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
func Compare[$0 Ordered]($0, $0) int
func Less[$0 Ordered]($0, $0) bool
type Ordered interface {}
```

----------------------------------------

TITLE: File System-backed HTTP Utilities - net/http - Go
DESCRIPTION: Functions FileServerFS, NewFileTransportFS, and ServeFileFS in net/http add support for serving and transporting files via abstract file systems (fs.FS). These enable HTTP-based operations directly over fs.FS implementations, for both server (Handler) and client (RoundTripper) cases. Each function accepts an fs.FS and other relevant parameters.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_22

LANGUAGE: Go
CODE:
```
func FileServerFS(fs.FS) Handler
func NewFileTransportFS(fs.FS) RoundTripper
func ServeFileFS(ResponseWriter, *Request, fs.FS, string)
```

----------------------------------------

TITLE: Declaring a Go Module and Requiring a Dependency - go.mod - Go
DESCRIPTION: This go.mod snippet declares a Go module named 'x' and specifies a dependency on rsc.io/quote v1.2.0. It is used by Go tools for dependency resolution and version management. The module name sets the import path prefix for local packages, and the require statement pins an external package version. Proper formatting and versioning are crucial for correct go tool behavior. No additional parameters are required, but subsequent go mod tidy or go build commands will populate go.sum with checksums.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_upgrade.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module x
require rsc.io/quote v1.2.0
```

----------------------------------------

TITLE: Using Methods and Helper Functions in database/sql - Go
DESCRIPTION: These methods provide the mechanisms to interact with SQL databases in Go using the database/sql package. Includes methods for beginning transactions with options, executing statements with context, pinging for connectivity, preparing statements, and querying with context. Also exposes methods for examining result set metadata, scanning types, and batch operations. Named creates named parameters for prepared queries. Requires compatible DB, Stmt, and Rows objects.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
func Named(string, interface{}) NamedArg
```

LANGUAGE: Go
CODE:
```
method (*ColumnType) DatabaseTypeName() string
method (*ColumnType) DecimalSize() (int64, int64, bool)
method (*ColumnType) Length() (int64, bool)
method (*ColumnType) Name() string
method (*ColumnType) Nullable() (bool, bool)
method (*ColumnType) ScanType() reflect.Type
```

LANGUAGE: Go
CODE:
```
method (*DB) BeginTx(context.Context, *TxOptions) (*Tx, error)
method (*DB) ExecContext(context.Context, string, ...interface{}) (Result, error)
method (*DB) PingContext(context.Context) error
method (*DB) PrepareContext(context.Context, string) (*Stmt, error)
method (*DB) QueryContext(context.Context, string, ...interface{}) (*Rows, error)
method (*DB) QueryRowContext(context.Context, string, ...interface{}) *Row
```

LANGUAGE: Go
CODE:
```
method (*Rows) ColumnTypes() ([]*ColumnType, error)
method (*Rows) NextResultSet() bool
```

LANGUAGE: Go
CODE:
```
method (*Stmt) ExecContext(context.Context, ...interface{}) (Result, error)
```

----------------------------------------

TITLE: Logging Configuration and Utilities in Go
DESCRIPTION: Includes comprehensive logging facility using constants and methods within the log/slog package. Various levels such as LevelDebug, LevelError are defined alongside functions like Debug, Info, Error for structured logging. Handlers like JSONHandler, and types such as Attr and Value are included for detailed log management.
SOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_8

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindAny = 0 #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindAny Kind #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindBool = 1 #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindBool Kind #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindDuration = 2 #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindDuration Kind #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindFloat64 = 3 #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindFloat64 Kind #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindGroup = 8 #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindGroup Kind #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindInt64 = 4 #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindInt64 Kind #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindLogValuer = 9 #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindLogValuer Kind #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindString = 5 #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindString Kind #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindTime = 6 #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindTime Kind #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindUint64 = 7 #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const KindUint64 Kind #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const LevelDebug = -4 #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const LevelDebug Level #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const LevelError = 8 #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const LevelError Level #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const LevelInfo = 0 #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const LevelInfo Level #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const LevelKey ideal-string #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const LevelKey = "level" #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const LevelWarn = 4 #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const LevelWarn Level #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const MessageKey ideal-string #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const MessageKey = "msg" #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const SourceKey ideal-string #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const SourceKey = "source" #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const TimeKey ideal-string #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, const TimeKey = "time" #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Any(string, interface{}) Attr #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func AnyValue(interface{}) Value #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Bool(string, bool) Attr #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func BoolValue(bool) Value #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func DebugContext(context.Context, string, ...interface{}) #61200
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Debug(string, ...interface{}) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Default() *Logger #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Duration(string, time.Duration) Attr #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func DurationValue(time.Duration) Value #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func ErrorContext(context.Context, string, ...interface{}) #61200
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Error(string, ...interface{}) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Float64(string, float64) Attr #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Float64Value(float64) Value #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Group(string, ...interface{}) Attr #59204
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func GroupValue(...Attr) Value #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func InfoContext(context.Context, string, ...interface{}) #61200
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Info(string, ...interface{}) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Int64(string, int64) Attr #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Int64Value(int64) Value #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Int(string, int) Attr #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func IntValue(int) Value #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func LogAttrs(context.Context, Level, string, ...Attr) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Log(context.Context, Level, string, ...interface{}) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func New(Handler) *Logger #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func NewJSONHandler(io.Writer, *HandlerOptions) *JSONHandler #59339
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func NewLogLogger(Handler, Level) *log.Logger #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func NewRecord(time.Time, Level, string, uintptr) Record #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func NewTextHandler(io.Writer, *HandlerOptions) *TextHandler #59339
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func SetDefault(*Logger) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func String(string, string) Attr #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func StringValue(string) Value #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Time(string, time.Time) Attr #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func TimeValue(time.Time) Value #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Uint64(string, uint64) Attr #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Uint64Value(uint64) Value #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func WarnContext(context.Context, string, ...interface{}) #61200
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func Warn(string, ...interface{}) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, func With(...interface{}) *Logger #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Attr) Equal(Attr) bool #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Attr) String() string #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*JSONHandler) Enabled(context.Context, Level) bool #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*JSONHandler) Handle(context.Context, Record) error #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*JSONHandler) WithAttrs([]Attr) Handler #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*JSONHandler) WithGroup(string) Handler #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Kind) String() string #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Level) Level() Level #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Level) MarshalJSON() ([]uint8, error) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Level) MarshalText() ([]uint8, error) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Level) String() string #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Level) UnmarshalJSON([]uint8) error #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Level) UnmarshalText([]uint8) error #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*LevelVar) Level() Level #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*LevelVar) MarshalText() ([]uint8, error) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*LevelVar) Set(Level) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*LevelVar) String() string #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*LevelVar) UnmarshalText([]uint8) error #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Logger) DebugContext(context.Context, string, ...interface{}) #61200
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Logger) Debug(string, ...interface{}) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Logger) Enabled(context.Context, Level) bool #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Logger) ErrorContext(context.Context, string, ...interface{}) #61200
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Logger) Error(string, ...interface{}) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Logger) Handler() Handler #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Logger) InfoContext(context.Context, string, ...interface{}) #61200
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Logger) Info(string, ...interface{}) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Logger) LogAttrs(context.Context, Level, string, ...Attr) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Logger) Log(context.Context, Level, string, ...interface{}) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Logger) WarnContext(context.Context, string, ...interface{}) #61200
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Logger) Warn(string, ...interface{}) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Logger) WithGroup(string) *Logger #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Logger) With(...interface{}) *Logger #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Record) AddAttrs(...Attr) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*Record) Add(...interface{}) #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Record) Attrs(func(Attr) bool) #59060
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Record) Clone() Record #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Record) NumAttrs() int #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*TextHandler) Enabled(context.Context, Level) bool #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*TextHandler) Handle(context.Context, Record) error #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*TextHandler) WithAttrs([]Attr) Handler #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (*TextHandler) WithGroup(string) Handler #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Value) Any() interface{} #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Value) Bool() bool #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Value) Duration() time.Duration #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Value) Equal(Value) bool #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Value) Float64() float64 #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Value) Group() []Attr #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Value) Int64() int64 #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Value) Kind() Kind #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Value) LogValuer() LogValuer #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Value) Resolve() Value #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Value) String() string #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Value) Time() time.Time #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, method (Value) Uint64() uint64 #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type Attr struct #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type Attr struct, Key string #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type Attr struct, Value Value #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type Handler interface, Enabled(context.Context, Level) bool #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type Handler interface { Enabled, Handle, WithAttrs, WithGroup } #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type Handler interface, Handle(context.Context, Record) error #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type Handler interface, WithAttrs([]Attr) Handler #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type Handler interface, WithGroup(string) Handler #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type HandlerOptions struct #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type HandlerOptions struct, AddSource bool #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type HandlerOptions struct, Level Leveler #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type HandlerOptions struct, ReplaceAttr func([]string, Attr) Attr #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type JSONHandler struct #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type Kind int #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type Leveler interface { Level } #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type Leveler interface, Level() Level #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type Level int #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type LevelVar struct #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type Logger struct #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type LogValuer interface { LogValue } #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type LogValuer interface, LogValue() Value #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type Record struct #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type Record struct, Level Level #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type Record struct, Message string #56345
```

LANGUAGE: Go
CODE:
```
pkg log/slog, type Record struct, PC uintptr #56345
```

----------------------------------------

TITLE: Strings package functions in Go
DESCRIPTION: Functions for string manipulation in the strings package, including ReplaceAll for replacing all occurrences of a substring and Builder.Cap method.
SOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
func ReplaceAll(string, string, string) string
method (*Builder) Cap() int
```

----------------------------------------

TITLE: Implementing Generic Map Functions in maps Package
DESCRIPTION: This snippet introduces generic functions for map operations in the maps package. It includes functions for cloning, copying, deleting, and comparing maps with type parameters.
SOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_10

LANGUAGE: Go
CODE:
```
func Clone[$0 interface{ ~map[$1]$2 }, $1 comparable, $2 interface{}]($0) $0

func Copy[$0 interface{ ~map[$2]$3 }, $1 interface{ ~map[$2]$3 }, $2 comparable, $3 interface{}]($0, $1)

func DeleteFunc[$0 interface{ ~map[$1]$2 }, $1 comparable, $2 interface{}]($0, func($1, $2) bool)

func Equal[$0 interface{ ~map[$2]$3 }, $1 interface{ ~map[$2]$3 }, $2 comparable, $3 comparable]($0, $1) bool

func EqualFunc[$0 interface{ ~map[$2]$3 }, $1 interface{ ~map[$2]$4 }, $2 comparable, $3 interface{}, $4 interface{}]($0, $1, func($3, $4) bool) bool
```

----------------------------------------

TITLE: Go File with Standard Library Import
DESCRIPTION: A simple Go program that imports the fmt package and prints "hello, world."
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_outside_module.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package main

import "fmt"

func main() {
	fmt.Println("hello, world.")
}
```

----------------------------------------

TITLE: Incorrect Usage of fmt.Println with Format Directive in Go
DESCRIPTION: This snippet demonstrates a common mistake where fmt.Println is used with a string containing a formatting directive (%s). The go vet tool will flag this as an error because fmt.Println doesn't interpret format directives, unlike fmt.Printf.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vet.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package a

import "fmt"

func A() {
    fmt.Println("%s")
}
```

----------------------------------------

TITLE: Embedding Files in Go
DESCRIPTION: This snippet illustrates the embedding of external text files within a Go application using the 'embed' package. It requires Go version 1.16 or above as a prerequisite. The 'go:embed' directive allows for seamless inclusion of files in the binary.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed_brackets.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
-- [pkg]/x.go --\npackage p\n\nimport _ \"embed\"\n\n//go:embed t.txt\nvar S string
```

----------------------------------------

TITLE: Initializing Main Go Module with Dependency Replacement - Go
DESCRIPTION: Defines the main module 'm' targeting Go version 1.12 and specifies a dependency on 'sub.1' version v1.0.0. The 'replace' directive points 'sub.1' to a local directory, enabling local development and module version overrides. This go.mod file is required for reproducible builds and dependency management using Go modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_mixed.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
-- go.mod --
module m
go 1.12
require (
	sub.1 v1.0.0
)
replace (
	sub.1 => ./sub
)
```

----------------------------------------

TITLE: Running Go Tests with Coverage and Race Detection (Shell)
DESCRIPTION: Executes tests for the Go package 'x' using 'go test'. It includes the '-coverpkg=all' flag for comprehensive coverage analysis and the '-race' flag to enable the Go race detector during the test run. The surrounding script context indicates this command should be skipped if race detection is explicitly disabled (`[!race]`) and expects 'ok' and coverage information in standard output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_runtime.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go test -coverpkg=all -race x
```

----------------------------------------

TITLE: Example module go.mod file
DESCRIPTION: Initial go.mod file for the example module used in testing. It specifies the module name and Go version 1.21.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
module example

go 1.21
```

----------------------------------------

TITLE: Deprecations in go packages
DESCRIPTION: Lists deprecated constants, struct fields, functions, and methods in various go packages.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_23

LANGUAGE: Go
CODE:
```
pkg go/build, const AllowBinary //deprecated
pkg go/doc, type Package struct, Bugs //deprecated
pkg go/importer, func For //deprecated
pkg go/importer, func ForCompiler //deprecated
pkg go/types, func NewInterface //deprecated
pkg go/types, method (*Interface) Embedded //deprecated
```

----------------------------------------

TITLE: Simple Benchmark Function in Go
DESCRIPTION: This Go file defines a simple benchmark function in a standalone package. It's designed to be run outside the standard GOPATH to test benchmark functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_benchmark_labels.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package standalone_benchmark

import "testing"

func Benchmark(b *testing.B) {
}
```

----------------------------------------

TITLE: Main Package with Import Statements
DESCRIPTION: The main package file showing the import statements that trigger the tested behavior. It imports rsc.io/quote/v3 instead of the older version specified in go.mod.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_downgrade_ambiguous.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package use

import (
	_ "old-indirect/empty"

	_ "rsc.io/quote/v3"
)
```

----------------------------------------

TITLE: Configuring go.mod with Tools and Replace Directive - Go
DESCRIPTION: This snippet shows a go.mod file that defines a module, Go version, external tool dependencies, a replace directive redirecting a dependency to a local path, and required module versions. It serves to configure module identity, tool plugins, and local dependency overrides in a Go project. The key parameters are 'module', 'go', 'tool', 'replace', and 'require', which must be set to establish correct build and tooling resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_0

LANGUAGE: ini
CODE:
```
module example.com/foo\n\ngo 1.24\n\ntool example.com/foo/cmd/eg\ntool example.com/dependency/cmd/bar\n\nreplace example.com/dependency => ./dependency\n\nrequire example.com/dependency v1.0.0\n
```

----------------------------------------

TITLE: Go Test File Implementation
DESCRIPTION: This Go test file implements a TestMain function for setup and teardown, and a Test function with subtests. It demonstrates various testing patterns including subtest creation, logging, and custom output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_prints.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package p

import (
	"os"
	"testing"
)

func TestMain(m *testing.M) {
	print("M1")
	code := m.Run()
	print("M2")
	os.Exit(code)
}

func Test(t *testing.T) {
	print("T1")
	t.Run("Sub1", func(t *testing.T) {
		print("Sub1")
		t.Log("SubLog1")
		print("Sub2")
	})
	t.Run("Sub3", func(t *testing.T) {
		print("\x16foo bar\x16baz\n")
	})
	print("T2")
}
```

----------------------------------------

TITLE: I/O testing utilities in testing/iotest package
DESCRIPTION: Provides utilities for testing I/O implementations. Includes ErrReader for creating a reader that returns a specific error and TestReader for verifying reader implementations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
func ErrReader(error) io.Reader
func TestReader(io.Reader, []uint8) error
```

----------------------------------------

TITLE: Testing Boolean Fuzzing in Go
DESCRIPTION: This function tests Go's fuzzing capabilities with boolean inputs. It panics when the input is true.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_12

LANGUAGE: Go
CODE:
```
func FuzzBool(f *testing.F) {
	f.Add(false)
	f.Fuzz(func(t *testing.T, a bool) {
		if a {
			panic("this input caused a crash!")
		}
	})
}
```

----------------------------------------

TITLE: Simple Go Hello World Program
DESCRIPTION: A minimal Go program that prints "Hello, 世界" to standard output. Used to test successful compilation and execution with PIE buildmode and race detection enabled.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pie_race.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

import "fmt"

func main() {
	fmt.Println("Hello, 世界")
}
```

----------------------------------------

TITLE: Sync Map Implementation
DESCRIPTION: Thread-safe map implementation providing atomic operations for concurrent access.
SOURCE: https://github.com/golang/go/blob/master/api/go1.9.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
type Map struct {}

func (m *Map) Delete(key interface{})
func (m *Map) Load(key interface{}) (value interface{}, ok bool)
func (m *Map) Store(key, value interface{})
func (m *Map) LoadOrStore(key, value interface{}) (actual interface{}, loaded bool)
func (m *Map) Range(f func(key, value interface{}) bool)
```

----------------------------------------

TITLE: Nullable Value Handling in SQL - Package database/sql - Go
DESCRIPTION: Adds a generic Null type supporting any interface type, with V $0 and Valid bool fields, and Value/Scan methods for the database/sql package. Enables nullability semantics for arbitrary data types in SQL operations. Value() returns driver.Value and error, Scan accepts any interface and returns error.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_8

LANGUAGE: Go
CODE:
```
type Null[$0 interface{}] struct {
    V $0
    Valid bool
}

func (n *Null[$0]) Scan(interface{}) error
func (n Null[$0]) Value() (driver.Value, error)
```

----------------------------------------

TITLE: HTTP Package Extensions for Server Push and Tracing
DESCRIPTION: Types, methods, and constants for net/http package with support for HTTP/2 server push, connection tracing, and enhanced server lifecycle management including graceful shutdown.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
// net/http constants, methods, and types
const TrailerPrefix = "Trailer:"

func (*Server) Close() error
func (*Server) Shutdown(context.Context) error

type Pusher interface {
    Push(string, *PushOptions) error
}

type PushOptions struct {
    Header Header
    Method string
}

type Request struct {
    GetBody func() (io.ReadCloser, error)
}

type Server struct {
    IdleTimeout time.Duration
    ReadHeaderTimeout time.Duration
}

type Transport struct {
    ProxyConnectHeader Header
}

var ErrAbortHandler error
var ErrServerClosed error
var NoBody noBody

// net/http/httptrace types
type ClientTrace struct {
    TLSHandshakeDone func(tls.ConnectionState, error)
    TLSHandshakeStart func()
}

// net/http/httputil types
type ReverseProxy struct {
    ModifyResponse func(*http.Response) error
}
```

----------------------------------------

TITLE: Defining Module Configuration with Replace and Exclude Directives - Go (go.mod)
DESCRIPTION: This go.mod file sets up a Go module named example.com/printversion, requiring example.com/version at v1.0.0. It includes a replace directive to use a local module ../oops v0.0.0 for example.com/version and excludes v1.0.1 from being selected. This configuration ensures custom dependency resolution during builds and affects the results shown by debug.ReadBuildInfo.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_printversion_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example.com/printversion

require example.com/version v1.0.0
replace example.com/version v1.0.0 => ../oops v0.0.0
exclude example.com/version v1.0.1
```

----------------------------------------

TITLE: Fetching and Listing Go Module Versions
DESCRIPTION: The code snippets show how to use the 'go get' command to fetch specific versions of a module, including pseudo-versions. Then, 'go list -m -u all' is used to list available upgrades. This setup is used to test the upgrade behavior of Go modules with specific versions. Dependencies include an internet connection for fetching the module and access to the Go toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_upgrade_pseudo.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go get example.com/pseudoupgrade@b5426c8
go list -m -u all
stdout '^example.com/pseudoupgrade v0.1.1-0.20190429073117-b5426c86b553$'

go get example.com/pseudoupgrade@v0.0.0-20190430073000-30950c05d534
go list -m -u all
stdout '^example.com/pseudoupgrade v0.0.0-20190430073000-30950c05d534$'
```

----------------------------------------

TITLE: Defining Go Module Configuration
DESCRIPTION: Specifies the module name 'foo' and sets the Go version to 1.20.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cgo_error.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module foo

go 1.20
```

----------------------------------------

TITLE: Error Handling Utilities in errors Package
DESCRIPTION: Error handling utilities for comparing, unwrapping, and inspecting errors. Includes functions for checking if one error is another, unwrapping errors, and checking if an error matches a specific type.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
func As(error, interface{}) bool
func Is(error, error) bool
func Unwrap(error) error
```

----------------------------------------

TITLE: Executing Go Module Commands in Shell
DESCRIPTION: This snippet demonstrates the use of `go list` and `go clean` commands to manage Go modules and dependencies. It requires Go to be installed. The commands show how to list module paths, versions, directories, and how to clean the module cache. Key parameters include `-mod=mod` for module mode and `-f` for formatting the output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
[short] skip

# list {{.Dir}} shows main module and go.mod but not not-yet-downloaded dependency dir.
go list -mod=mod -m -f '{{.Path}} {{.Main}} {{.GoMod}} {{.Dir}}' all
stdout '^x true .*[\\/]src[\\/]go.mod .*[\\/]src$'
stdout '^rsc.io/quote false .*[\\/]v1.5.2.mod $'

# list {{.Dir}} shows dependency after download (and go list without -m downloads it)
go list -mod=mod -f '{{.Dir}}' rsc.io/quote
stdout '.*mod[\\/]rsc.io[\\/]quote@v1.5.2$'

# downloaded dependencies are read-only
exists -readonly $GOPATH/pkg/mod/rsc.io/quote@v1.5.2
exists -readonly $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/buggy

# go clean -modcache can delete read-only dependencies
go clean -modcache
! exists $GOPATH/pkg/mod/rsc.io/quote@v1.5.2

# list {{.Dir}} shows replaced directories
cp go.mod2 go.mod
go list -mod=mod -f {{.Dir}} rsc.io/quote
go list -m -f '{{.Path}} {{.Version}} {{.Dir}}{{with .Replace}} {{.GoMod}} => {{.Version}} {{.Dir}} {{.GoMod}}{{end}}' all
stdout 'mod[\\/]rsc.io[\\/]quote@v1.5.1'
stdout 'v1.3.0.*mod[\\/]rsc.io[\\/]sampler@v1.3.1 .*[\\/]v1.3.1.mod => v1.3.1.*sampler@v1.3.1 .*[\\/]v1.3.1.mod'

# list std should work
go list std
stdout ^math/big

# rsc.io/quote/buggy should be listable as a package,
# even though it is only a test.
go list -mod=mod rsc.io/quote/buggy

# rsc.io/quote/buggy should not be listable as a module
go list -m -e -f '{{.Error.Err}}' nonexist rsc.io/quote/buggy
stdout '^module nonexist: not a known dependency$'
stdout '^module rsc.io/quote/buggy: not a known dependency$'

! go list -m nonexist rsc.io/quote/buggy
stderr '^go: module nonexist: not a known dependency'
stderr '^go: module rsc.io/quote/buggy: not a known dependency'

# Module loader does not interfere with list -e (golang.org/issue/24149).
go list -e -f '{{.Error.Err}}' database
stdout 'package database is not in std'
! go list database
stderr 'package database is not in std'

-- go.mod --
module x
require rsc.io/quote v1.5.2

-- go.mod2 --
module x
require rsc.io/quote v1.5.1
replace rsc.io/sampler v1.3.0 => rsc.io/sampler v1.3.1

-- x.go --
package x
import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Initializing Another Go Module in a Sibling Directory (Shell)
DESCRIPTION: Changes the current directory from 'x' to its sibling directory 'y' using a relative path ('../y'). It then initializes a Go module within the 'y' directory with the module path 'm'. This also requires the Go toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_path.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
cd ../y
go mod init m
```

----------------------------------------

TITLE: Non-CGO Fallback Implementation
DESCRIPTION: Fallback implementation for environments where CGO is not available, using build constraints
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_find_nodeps.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
//go:build !cgo
// +build !cgo

package cgopkg

func F() {
    println(0)
}
```

----------------------------------------

TITLE: Declaring a Go Module with Go Modules - Go
DESCRIPTION: Declares the Go module path as 'example.com/retract/self/prev' with Go version 1.15 in a go.mod file. This snippet is fundamental for managing dependencies and specifying the Go toolchain version. No external dependencies or parameters are referenced, and it relies on Go's modules system for usage through the go command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prev_v1.0.0-bad.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/retract/self/prev

go 1.15
```

----------------------------------------

TITLE: Importing rsc.io/quote/v3 in Go
DESCRIPTION: Imports the rsc.io/quote/v3 package in a Go file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
package replace

import _ "rsc.io/quote/v3"
```

----------------------------------------

TITLE: Implementing SQL Driver Interfaces and Structs - Go
DESCRIPTION: These types, interface definitions, and struct fields specify the required contracts for implementing a database/sql driver. Includes interfaces for beginning transactions, preparing statements, executing and querying with context, pinging, and iterating over rows with column type metadata. NamedValue and TxOptions structs are used to convey named parameter values and transaction options, including isolation level and read-only semantics. These APIs are essential for interoperability with database/sql core.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
type ConnBeginTx interface { BeginTx }
ConnBeginTx.BeginTx(context.Context, TxOptions) (Tx, error)
```

LANGUAGE: Go
CODE:
```
type ConnPrepareContext interface { PrepareContext }
ConnPrepareContext.PrepareContext(context.Context, string) (Stmt, error)
```

LANGUAGE: Go
CODE:
```
type ExecerContext interface { ExecContext }
ExecerContext.ExecContext(context.Context, string, []NamedValue) (Result, error)
```

LANGUAGE: Go
CODE:
```
type IsolationLevel int
```

LANGUAGE: Go
CODE:
```
type NamedValue struct
NamedValue.Name string
NamedValue.Ordinal int
NamedValue.Value Value
```

LANGUAGE: Go
CODE:
```
type Pinger interface { Ping }
Pinger.Ping(context.Context) error
```

LANGUAGE: Go
CODE:
```
type QueryerContext interface { QueryContext }
QueryerContext.QueryContext(context.Context, string, []NamedValue) (Rows, error)
```

LANGUAGE: Go
CODE:
```
type RowsColumnTypeDatabaseTypeName interface { Close, ColumnTypeDatabaseTypeName, Columns, Next }
RowsColumnTypeDatabaseTypeName.Close() error
RowsColumnTypeDatabaseTypeName.Columns() []string
RowsColumnTypeDatabaseTypeName.ColumnTypeDatabaseTypeName(int) string
RowsColumnTypeDatabaseTypeName.Next([]Value) error
```

LANGUAGE: Go
CODE:
```
type RowsColumnTypeLength interface { Close, ColumnTypeLength, Columns, Next }
RowsColumnTypeLength.Close() error
RowsColumnTypeLength.Columns() []string
RowsColumnTypeLength.ColumnTypeLength(int) (int64, bool)
RowsColumnTypeLength.Next([]Value) error
```

LANGUAGE: Go
CODE:
```
type RowsColumnTypeNullable interface { Close, ColumnTypeNullable, Columns, Next }
RowsColumnTypeNullable.Close() error
RowsColumnTypeNullable.Columns() []string
RowsColumnTypeNullable.ColumnTypeNullable(int) (bool, bool)
RowsColumnTypeNullable.Next([]Value) error
```

LANGUAGE: Go
CODE:
```
type RowsColumnTypePrecisionScale interface { Close, ColumnTypePrecisionScale, Columns, Next }
RowsColumnTypePrecisionScale.Close() error
RowsColumnTypePrecisionScale.Columns() []string
RowsColumnTypePrecisionScale.ColumnTypePrecisionScale(int) (int64, int64, bool)
RowsColumnTypePrecisionScale.Next([]Value) error
```

LANGUAGE: Go
CODE:
```
type RowsColumnTypeScanType interface { Close, ColumnTypeScanType, Columns, Next }
RowsColumnTypeScanType.Close() error
RowsColumnTypeScanType.Columns() []string
RowsColumnTypeScanType.ColumnTypeScanType(int) reflect.Type
RowsColumnTypeScanType.Next([]Value) error
```

LANGUAGE: Go
CODE:
```
type RowsNextResultSet interface { Close, Columns, HasNextResultSet, Next, NextResultSet }
RowsNextResultSet.Close() error
RowsNextResultSet.Columns() []string
RowsNextResultSet.HasNextResultSet() bool
RowsNextResultSet.NextResultSet() error
RowsNextResultSet.Next([]Value) error
```

LANGUAGE: Go
CODE:
```
type StmtExecContext interface { ExecContext }
StmtExecContext.ExecContext(context.Context, []NamedValue) (Result, error)
```

LANGUAGE: Go
CODE:
```
type StmtQueryContext interface { QueryContext }
StmtQueryContext.QueryContext(context.Context, []NamedValue) (Rows, error)
```

LANGUAGE: Go
CODE:
```
type TxOptions struct
TxOptions.Isolation IsolationLevel
TxOptions.ReadOnly bool
```

----------------------------------------

TITLE: Go Main Package with Import
DESCRIPTION: Basic Go file that imports the patch.example.com/direct package as a blank import, used for testing module resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_upgrade_patch.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package x
import _ "patch.example.com/direct"
```

----------------------------------------

TITLE: Defining Go Module with Dependency
DESCRIPTION: This Go module definition shows how to specify a module path and declare a dependency on another Go package. The 'require' directive specifies a dependency on the 'rsc.io/quote' package with version 'v1.3.0'. This setup is crucial for module resolution and dependency management in Go.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_latemigrate_v2_v2.0.1.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
-- .mod --
module example.com/latemigrate/v2

require rsc.io/quote v1.3.0
```

LANGUAGE: Go
CODE:
```
-- go.mod --
module example.com/latemigrate/v2

require rsc.io/quote v1.3.0
```

----------------------------------------

TITLE: Testing Go Module Tidy Command
DESCRIPTION: This snippet checks the behavior of 'go mod tidy' command, verifying if it correctly adds indirect tags and removes unnecessary dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_indirect.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
cp $WORK/tmp/usequote.go x.go
go mod tidy
grep 'rsc.io/quote v1.5.2$' go.mod
grep 'golang.org/x/text [v0-9a-f\.-]+ // indirect' go.mod
```

----------------------------------------

TITLE: Defining a Go Module - Go
DESCRIPTION: This code defines the module root using a go.mod file for the Go toolchain, specifying the module name ('m') and the minimum Go version required (1.16). The go.mod is required for Go modules and allows dependency management and proper compilation of the packages in the project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_statements.txt#2025-04-22_snippet_1

LANGUAGE: go.mod
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Defining Simple Go Main Package
DESCRIPTION: This snippet shows a minimal Go main package with an empty main function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Go Module File (go.mod)
DESCRIPTION: Main go.mod file defining module path and dependencies
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_ambiguous_a_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/ambiguous/a

go 1.16

require example.com/ambiguous/a/b v0.0.0-empty
```

----------------------------------------

TITLE: Deprecated AST Package Constructs - go/ast - Go
DESCRIPTION: The functions, types, and interfaces NewPackage, Importer, Object, Package, and Scope in package go/ast are marked deprecated, indicating they should no longer be used and may be removed in future releases. They relate to high-level AST handling and legacy importer functionality.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_11

LANGUAGE: Go
CODE:
```
// Deprecated
func NewPackage
// Deprecated
type Importer
// Deprecated
type Object
// Deprecated
type Package
// Deprecated
type Scope
```

----------------------------------------

TITLE: Listing Module Metadata in JSON Format with go list - Shell
DESCRIPTION: This command lists all modules used in the current Go project in JSON format by executing 'go list -m -json all'. It requires a valid go.mod file in the working directory. Outputs structured information about each dependency, suitable for programmatic parsing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_m.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go list -m -json all
```

----------------------------------------

TITLE: Testing Go Module Replace Directives
DESCRIPTION: Tests the replace directive functionality in go.mod files, including adding, updating and removing replace directives, as well as validation of replacement paths.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
# go mod edit -replace
go mod edit -replace=x.1@v1.3.0=y.1/v2@v2.3.5 -replace=x.1@v1.4.0=y.1/v2@v2.3.5
cmpenv go.mod $WORK/go.mod.edit3
go mod edit -replace=x.1=y.1/v2@v2.3.6
cmpenv go.mod $WORK/go.mod.edit4
go mod edit -dropreplace=x.1
cmpenv go.mod $WORK/go.mod.edit5
go mod edit -replace=x.1=../y.1/@v2
cmpenv go.mod $WORK/go.mod.edit6
! go mod edit -replace=x.1=y.1/@v2
stderr '^go: -replace=x.1=y.1/@v2: invalid new path: malformed import path "y.1/": trailing slash$'
```

----------------------------------------

TITLE: Database SQL Null Types Implementation
DESCRIPTION: Implementation of Null types for database operations that can handle NULL values from SQL databases. Includes NullInt32 and NullTime with Scan and Value methods for database I/O.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
method (*Conn) Raw(func(interface{}) error) error
method (*NullInt32) Scan(interface{}) error
method (NullInt32) Value() (driver.Value, error)
method (*NullTime) Scan(interface{}) error
method (NullTime) Value() (driver.Value, error)
type NullInt32 struct
type NullInt32 struct, Int32 int32
type NullInt32 struct, Valid bool
type NullTime struct
type NullTime struct, Time time.Time
type NullTime struct, Valid bool
```

----------------------------------------

TITLE: Defining Module Path in Go Module - Plaintext
DESCRIPTION: This snippet defines the module path for a Go project using the 'module' directive in a .mod file. No dependencies are directly specified; the 'module' line establishes the base import path for packages in this module. The input file is expected to be named 'go.mod' or similar and is typically required for Go modules management with 'go mod' commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_join_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
-- .mod --\nmodule example.com/join
```

----------------------------------------

TITLE: Populating go.sum and Checking Go Module Upgrades - Go CLI - Bash
DESCRIPTION: This set of Bash commands is used to manage Go module dependencies. It starts by enabling Go modules via the GO111MODULE=on environment variable, then runs go list -m -mod=mod all to resolve and add dependencies to go.sum. The sequence includes go list -m -u all to check for updates to current dependencies, and asserts that version output for rsc.io/quote contains both installed and latest versions. These commands require Go to be installed and should be run in a directory containing a go.mod file. Outputs are shown on stdout, and successful execution ensures module consistency and highlights upgrade paths.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_upgrade.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on

# Populate go.sum
go list -m -mod=mod all

# Check for upgrades.
go list -m -u all
stdout 'rsc.io/quote v1.2.0 \[v1\.5\.2\]'
```

----------------------------------------

TITLE: Encoding Package Methods and Types
DESCRIPTION: Defines methods and types for encoding packages (base64 and json). Includes functions for strict encoding, JSON marshaling, and error handling during unmarshaling operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
// encoding/base64 methods
func (Encoding) Strict() *Encoding

// encoding/json methods and types
func (RawMessage) MarshalJSON() ([]uint8, error)

type UnmarshalTypeError struct {
    Field string
    Struct string
}
```

----------------------------------------

TITLE: Defining Workspace Configuration in Go
DESCRIPTION: This snippet shows the contents of the go.work file, which defines the workspace configuration. It specifies the Go version, the modules to use, and various module replacements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune_all.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go 1.18

use (
	./a
	./p
)

replace example.com/b v1.0.0 => ./b
replace example.com/q v1.0.0 => ./q1_0_0
replace example.com/q v1.0.5 => ./q1_0_5
replace example.com/q v1.1.0 => ./q1_1_0
replace example.com/r v1.0.0 => ./r
replace example.com/w v1.0.0 => ./w
replace example.com/x v1.0.0 => ./x
replace example.com/y v1.0.0 => ./y
replace example.com/z v1.0.0 => ./z1_0_0
replace example.com/z v1.1.0 => ./z1_1_0
```

----------------------------------------

TITLE: Dependency Module Definition
DESCRIPTION: Defines the 'dep' module and its test dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_11

LANGUAGE: Go
CODE:
```
module example.com/dep

require example.com/testdep v0.1.0
```

----------------------------------------

TITLE: Simple Hello World Program
DESCRIPTION: Basic Go program that prints 'hello' to stdout
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_GOTMPDIR.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main
func main() { println("hello") }
```

----------------------------------------

TITLE: Testing Quote Package Functions in Go
DESCRIPTION: Unit tests for the rsc.io/quote package that verify the expected outputs from the Hello(), Glass(), and Go() functions. Each test function compares the function's output against the expected string value.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.2.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package quote

import "testing"

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

// Go returns a Go proverb.
func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory. Share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}
```

----------------------------------------

TITLE: Variable Declarations in Go
DESCRIPTION: Variable declarations with various types including basic types, pointers, and custom types.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p1/golden.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
var Byte uint8
var ByteConv []uint8
var ByteFunc func(uint8) int32
var ChecksumError error
var SIPtr *SI
var StrConv string
var V string
var VError Error
```

----------------------------------------

TITLE: Go Module Declaration in Subdirectory with v2 Versioning
DESCRIPTION: Defines a Go module in a subdirectory with explicit v2 versioning in the module path. This follows Go's semantic import versioning convention for major version 2.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitreposubdirv2.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/go/gitreposubdirv2/v2

go 1.23
```

----------------------------------------

TITLE: Simple Go Main Package
DESCRIPTION: This snippet shows a simple Go main package that prints "Hello, World" to the console.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
package main
import "fmt"
func main() {
	fmt.Println("Hello, World")
}
```

----------------------------------------

TITLE: Testing @latest Version Selection Preferring Compatible Versions
DESCRIPTION: Tests that @latest prefers compatible versions (v1.x) over +incompatible versions (v2.x) when a go.mod file exists in the v1.x version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go list -m github.com/russross/blackfriday@latest
stdout '^github.com/russross/blackfriday v1\.'
```

----------------------------------------

TITLE: Configuring and Querying HTTP2 and Protocol Options - net/http Go
DESCRIPTION: These code snippets introduce struct fields and methods for configuring HTTP2 and protocol settings in net/http, including SetHTTP1, SetHTTP2, SetUnencryptedHTTP2 options and corresponding getter and String methods. There are also extended fields for HTTP2Config (timeouts, limits, error handling) and their integration into Server and Transport. Usage requires awareness of protocol negotiation in HTTP servers/clients, and customization through HTTP2Config affects connection concurrency, buffer sizes, and security properties.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_18

LANGUAGE: Go
CODE:
```
pkg net/http, method (*Protocols) SetHTTP1(bool) #67814
pkg net/http, method (*Protocols) SetHTTP2(bool) #67814
pkg net/http, method (*Protocols) SetUnencryptedHTTP2(bool) #67816
pkg net/http, method (Protocols) HTTP1() bool #67814
pkg net/http, method (Protocols) HTTP2() bool #67814
pkg net/http, method (Protocols) String() string #67814
pkg net/http, method (Protocols) UnencryptedHTTP2() bool #67816
pkg net/http, type HTTP2Config struct #67813
pkg net/http, type HTTP2Config struct, CountError func(string) #67813
pkg net/http, type HTTP2Config struct, MaxConcurrentStreams int #67813
pkg net/http, type HTTP2Config struct, MaxDecoderHeaderTableSize int #67813
pkg net/http, type HTTP2Config struct, MaxEncoderHeaderTableSize int #67813
pkg net/http, type HTTP2Config struct, MaxReadFrameSize int #67813
pkg net/http, type HTTP2Config struct, MaxReceiveBufferPerConnection int #67813
pkg net/http, type HTTP2Config struct, MaxReceiveBufferPerStream int #67813
pkg net/http, type HTTP2Config struct, PermitProhibitedCipherSuites bool #67813
pkg net/http, type HTTP2Config struct, PingTimeout time.Duration #67813
pkg net/http, type HTTP2Config struct, SendPingTimeout time.Duration #67813
pkg net/http, type HTTP2Config struct, WriteByteTimeout time.Duration #67813
pkg net/http, type Protocols struct #67814
pkg net/http, type Server struct, HTTP2 *HTTP2Config #67813
pkg net/http, type Server struct, Protocols *Protocols #67814
pkg net/http, type Transport struct, HTTP2 *HTTP2Config #67813
pkg net/http, type Transport struct, Protocols *Protocols #67814
```

----------------------------------------

TITLE: Executing Go Module Commands
DESCRIPTION: This snippet shows various Go commands for managing and running modules, including downloading specific versions, installing, and executing a module named 'printversion'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_replace.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go mod download example.com/printversion@v0.1.0 example.com/printversion@v1.0.0
go get example.com/printversion@v0.1.0
go install example.com/printversion

go run example.com/printversion
cmp stdout out.txt

go version -m $GOPATH/bin/printversion$GOEXE
stdout '^.*[/\\]bin[/\\]printversion'$GOEXE': .*$'
stdout '^\tpath\texample.com/printversion$'
stdout '^\tmod\texample.com/printversion\tv0.1.0$'
stdout '^\t=>\texample.com/printversion\tv1.0.0\th1:.*$'
stdout '^\tdep\texample.com/version\tv1.0.0$'
stdout '^\t=>\texample.com/version\tv1.0.1\th1:.*$'
```

----------------------------------------

TITLE: Declaring Go Module with Dependencies - Go
DESCRIPTION: Defines a Go module named 'example.com/newcycle/a' and specifies a dependency on 'example.com/newcycle/b' version v1.0.0 using the standard go.mod format. This is essential for managing Go project dependencies and ensuring reproducible builds. No external code dependencies are needed beyond Go modules, inputs are module paths and versions, and output is the go.mod declaration. Cyclic dependencies as illustrated require careful version management.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_newcycle_a_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/newcycle/a

require example.com/newcycle/b v1.0.0
```

----------------------------------------

TITLE: Hello World Go Program
DESCRIPTION: Simple Go main program that prints 'Hello world!' to standard output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_reject_modfile.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main

import "fmt"

func main() {
	fmt.Println("Hello world!")
}
```

----------------------------------------

TITLE: Printing a Greeting Message - Go
DESCRIPTION: This Go snippet is a minimal main program that prints 'hello!' to standard output. It is used as the build target for the cache population test in the corresponding shell script, and has no external dependencies outside of Go's standard library. It takes no input parameters, produces a standard console line of output, and serves purely as a simple artifact to validate build and cache operations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/clean_cache_n.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import "fmt"

func main() {
	fmt.Println("hello!")
}

```

----------------------------------------

TITLE: Updating Logging Functions in Go
DESCRIPTION: New methods and variables for structured logging in the log/slog package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_15

LANGUAGE: Go
CODE:
```
func (*LevelVar) AppendText([]uint8) ([]uint8, error)
func (Level) AppendText([]uint8) ([]uint8, error)
var DiscardHandler Handler
```

----------------------------------------

TITLE: Main Module Configuration
DESCRIPTION: Main go.mod file defining module dependencies and replacements for the example project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_issue60313.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example

go 1.21

require (
	example.net/a v0.1.0
	example.net/b v0.1.0
)

require example.net/outer/inner v0.1.0 // indirect

replace (
	example.net/a v0.1.0 => ./a
	example.net/b v0.1.0 => ./b
	example.net/outer v0.1.0 => ./outer
	example.net/outer/inner v0.1.0 => ./inner
)
```

----------------------------------------

TITLE: Listing Go Test Functions using `go test -list` (Shell)
DESCRIPTION: These shell commands utilize the Go toolchain to list specific types of functions within the Go package based on naming conventions. `go test -list=Test` lists functions matching the pattern `Test.*`. `go test -list=Benchmark` lists functions matching `Benchmark.*`. `go test -list=Example` lists functions matching `Example.*` that potentially have output comments. The `stdout` lines indicate the expected output for each command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_simple.txt#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
# Test
go test -list=Test
stdout TestSimple
```

LANGUAGE: sh
CODE:
```
# Benchmark
go test -list=Benchmark
stdout BenchmarkSimple
```

LANGUAGE: sh
CODE:
```
# Examples
go test -list=Example
stdout Example_simple
stdout Example_withEmptyOutput
```

----------------------------------------

TITLE: Defining Interfaces and Functions in Go
DESCRIPTION: This snippet defines an `Int` interface using generics with a type set constraint of integer types. It also includes a simple function `Bar` that acts as a placeholder for potential generic operations. The `package generics` line specifies the package name, facilitating generic type operations under this module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_generics_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package generics\n\ntype Int interface {\n    \~int\n}\n\nfunc Bar() {}
```

----------------------------------------

TITLE: Defining Go Module Dependencies
DESCRIPTION: This go.mod file defines the module and its dependencies for the project. It specifies required external packages and their versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_concurrent.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module golang.org/issue/26794

require (
	golang.org/x/text v0.3.0
	rsc.io/sampler v1.0.0
)
```

----------------------------------------

TITLE: Defining a Go Module - go.mod File
DESCRIPTION: This go.mod file defines the root of a Go module named m, targeting Go version 1.13. It is a required dependency for module-based builds in Go 1.11 and later, allowing use of go list and go command features shown in the test script. Inputs: none. Outputs: module metadata used for builds. Limitations: Only declares module name and go version; no dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_1

LANGUAGE: go.mod
CODE:
```
module m

go 1.13

```

----------------------------------------

TITLE: Defining Go Module and Dependencies in go.mod - Go
DESCRIPTION: Declares a Go module named 'example' using go version 1.21 and requires an external package 'rsc.io/quote' at version v1.5.1. No parameters are needed; editing this file controls dependency versions for 'go mod' commands and builds. Only usable in the root of a Go module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_m.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example

go 1.21

require rsc.io/quote v1.5.1
```

----------------------------------------

TITLE: Context Package Extensions
DESCRIPTION: New context management functions including AfterFunc for delayed execution, WithDeadlineCause and WithTimeoutCause for error-aware timeouts, and WithoutCancel for cancellation-free contexts.
SOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
func AfterFunc(Context, func()) func() bool
func WithDeadlineCause(Context, time.Time, error) (Context, CancelFunc)
func WithTimeoutCause(Context, time.Duration, error) (Context, CancelFunc)
func WithoutCancel(Context) Context
```

----------------------------------------

TITLE: Iterator-Based String Splitting and Line Processing - strings Go
DESCRIPTION: These code snippets introduce iterator-sequence variants of Fields, Lines, Split, and SplitAfter in the strings package, returning iter.Seq[string] for efficient, lazy string tokenization. All methods accept a string input, with some requiring additional separators or callback functions as arguments, enabling processing of large strings without allocating intermediate slices. Dependencies are iter.Seq and appropriate user-defined lambda functions for FieldsFuncSeq. Inputs and outputs are designed for performance-critical streaming applications.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_20

LANGUAGE: Go
CODE:
```
pkg strings, func FieldsFuncSeq(string, func(int32) bool) iter.Seq[string] #61901
pkg strings, func FieldsSeq(string) iter.Seq[string] #61901
pkg strings, func Lines(string) iter.Seq[string] #61901
pkg strings, func SplitAfterSeq(string, string) iter.Seq[string] #61901
pkg strings, func SplitSeq(string, string) iter.Seq[string] #61901
```

----------------------------------------

TITLE: Defining a Go Module with Module Path - Go
DESCRIPTION: Specifies the module path 'example.com/nest' using the standard Go module declaration. This file is essential for initializing a Go module. It is typically named 'go.mod' and enables dependency management for the package. The main parameter is the module path, which should be globally unique; no imports or additional settings are required here, and the module path directly affects the import paths used within the project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_v1.1.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/nest
```

----------------------------------------

TITLE: Declaring Go Module and Dependencies - Go - plaintext
DESCRIPTION: Specifies the module path and the required dependency in the Go module system. Requires no external dependencies except Go itself. The 'module' directive defines the module's import path, while 'require' lists dependencies and their versions; here, it requires 'rsc.io/quote' version v1.5.2. This file is central to versioned module dependency management in Go projects and should be placed in the project root.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_downgrade_v2_v2.0.1.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
module example.com/downgrade/v2

require rsc.io/quote v1.5.2
```

----------------------------------------

TITLE: Function Declarations in Package p2
DESCRIPTION: Function declarations including string return type, deprecated function, interface return type, and error constructor.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p2/golden.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
func F() string
func F //deprecated
func G() Twoer
func NewError(string) error
```

----------------------------------------

TITLE: Simple Package Declaration Y
DESCRIPTION: Basic Go package declaration for package y
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_find.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package y
```

----------------------------------------

TITLE: P2 Package Declaration
DESCRIPTION: Empty package declaration for p2
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_legacy_mod.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p2
```

----------------------------------------

TITLE: Defining Go Module and Replacements - mod
DESCRIPTION: This go.mod snippet defines the main module, required dependencies (a, b, c), and applies multiple replace directives. The replace directives map module versions and local paths to ensure the test is self-contained. Replacements are used for direct and transitive dependencies, including versioned modules and local modules. This setup enables precise control over dependency versions and sources during testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_1

LANGUAGE: mod
CODE:
```
module main

go 1.13

require (
	a v0.0.0
	b v0.0.0
	c v0.0.0
)

// Apply replacements so that the test can be self-contained.
// (It's easier to see all of the modules here than to go
// rooting around in testdata/mod.)
replace (
	a => ./a
	b => ./b
	c => ./c
	x v0.1.0 => ./x1
	x v0.2.0 => ./x2
	i => ./i
)
```

----------------------------------------

TITLE: Implementing Main Function Using rsc.io/quote in Go
DESCRIPTION: This Go program imports the rsc.io/quote package and prints a greeting using the Hello() function from the package. It demonstrates the basic usage of the imported module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v0.0.1.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main

import "rsc.io/quote"

func main() {
	println(quote.Hello())
}
```

----------------------------------------

TITLE: Runtime Cleanup and Weak Pointer Management - runtime/weak Go
DESCRIPTION: This set introduces runtime cleanup and weak pointer abstractions, improving resource lifecycle management in Go. AddCleanup registers a handler for cleaning up a resource upon function exit, Cleanup.Stop halts further cleanup, weak.Make constructs type-safe weak pointers, and Pointer.Value dereferences them. Dependencies involve Go generics (Go 1.18+), and these utilities help manage memory, resource leaks, and callback lifetimes.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_21

LANGUAGE: Go
CODE:
```
pkg runtime, func AddCleanup[$0 interface{}, $1 interface{}](*$0, func($1), $1) Cleanup #67535
pkg runtime, func GOROOT //deprecated #51473
pkg runtime, method (Cleanup) Stop() #67535
pkg runtime, type Cleanup struct #67535
pkg weak, func Make[$0 interface{}](*$0) Pointer[$0] #67552
pkg weak, method (Pointer[$0]) Value() *$0 #67552
pkg weak, type Pointer[$0 interface{}] struct #67552
```

----------------------------------------

TITLE: Declaring a Go Package - Go
DESCRIPTION: Defines the package named 'x' at the beginning of a Go source file, establishing it as part of the 'x' package. This is a minimal placeholder used as a starting point for further Go code in the package. No dependencies, inputs, or outputs are present at this stage, and it serves as the package declaration for any Go code located in the same directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_v1.1.0.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package x
```

----------------------------------------

TITLE: Running Go Tests with Coverage
DESCRIPTION: This snippet shows how to run Go tests with coverage options in atomic mode using the 'go test' command. It demonstrates testing on specific sub-packages and with race condition checks. The command uses options to specify test coverage mode and target specific tests. Dependencies: Go toolchain. Prerequisites: Import paths for testing functions must be correct. Outputs coverage data and test results.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_sync_atomic_import.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go test -short -cover -covermode=atomic -coverpkg=coverdep/p1 coverdep
```

LANGUAGE: bash
CODE:
```
go test -short -covermode=atomic -run=TestStoreInt64 sync/atomic
```

LANGUAGE: bash
CODE:
```
go test -short -covermode=atomic -run=TestAnd8 internal/runtime/atomic
```

LANGUAGE: bash
CODE:
```
go test -short -cover -race -run=TestStoreInt64 sync/atomic
```

LANGUAGE: bash
CODE:
```
go test -short -cover -race -run=TestAnd8 internal/runtime/atomic
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: Specifies the module name and Go version for the test project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_issue35169.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
module example
go 1.19
```

----------------------------------------

TITLE: Go Main Package with External Library
DESCRIPTION: This snippet demonstrates a Go main package that imports and uses a function from an external library package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
package main

import "example.com/b/lib"

func main() {
	lib.Hello()
}
```

----------------------------------------

TITLE: Implementing Quote Package Functions in Go
DESCRIPTION: Implementation of the quote package which provides two functions: Hello returns a standard greeting, and Glass returns a phrase about eating glass without harm. These functions are simple string returners with descriptive documentation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.1.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

// Hello returns a greeting.
func Hello() string {
	return "Hello, world."
}

// Glass returns a useful phrase for world travelers.
func Glass() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return "I can eat glass and it doesn't hurt me."
}
```

----------------------------------------

TITLE: Simple Hello World Go Program
DESCRIPTION: A minimal Go program that prints 'hello, world' to the console. This is the file being added and committed to the Mercurial repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hello.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

func main() {
	println("hello, world")
}
```

----------------------------------------

TITLE: New fmt Package Buffer Manipulation Functions
DESCRIPTION: New functions added to the fmt package for appending formatted text to byte slices.
SOURCE: https://github.com/golang/go/blob/master/api/go1.19.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
func Append([]uint8, ...interface{}) []uint8
func Appendf([]uint8, string, ...interface{}) []uint8
func Appendln([]uint8, ...interface{}) []uint8
```

----------------------------------------

TITLE: Executing Module Dependency Test in Go
DESCRIPTION: This script performs a series of commands to test module dependency management. It includes copying the go.mod file, running 'go mod tidy', comparing mod files, downgrading a dependency, and listing all modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
cp go.mod go.mod.orig
go mod tidy
cmp go.mod.orig go.mod

# When we downgrade d.2 to d.1, no dependency on e should be added
# because nothing else in the module or import graph requires it.
go get example.net/d@v0.1.0

go list -m all
stdout '^example.net/b v0.2.1-0.20210219000000-000000000000 '
stdout '^example.net/c v0.1.0 '
stdout '^example.net/d v0.1.0 '
! stdout '^example.net/e '
```

----------------------------------------

TITLE: Go Module Configuration with Dependency
DESCRIPTION: Go module configuration file specifying a dependency on rsc.io/breaker version 1.0.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_incompatible.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module x
require rsc.io/breaker v1.0.0
```

----------------------------------------

TITLE: Running Go Parallel Tests with Verbose Output
DESCRIPTION: Shell command to run parallel chatty tests with verbose output and validate that test names are properly displayed between outputs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_parallel_success.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -parallel 3 chatty_parallel_test.go -v
stdout -count=2 '^=== (CONT|NAME)  TestChattyParallel/sub-0\n    chatty_parallel_test.go:32: this is sub-0$'
stdout -count=2 '^=== (CONT|NAME)  TestChattyParallel/sub-1\n    chatty_parallel_test.go:32: this is sub-1$'
stdout -count=2 '^=== (CONT|NAME)  TestChattyParallel/sub-2\n    chatty_parallel_test.go:32: this is sub-2$'
```

----------------------------------------

TITLE: Test Implementation for Package 'deadstuff' in Go
DESCRIPTION: Test for package 'deadstuff' that calls the panic-inducing function but recovers from the panic using defer and recover().
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package deadstuff

import "testing"

func TestMumble(t *testing.T) {
	defer func() {
		if x := recover(); x != nil {
			println("recovered")
		}
	}()
	downStreamOfPanic(10)
}
```

----------------------------------------

TITLE: Adding Multipath TCP Support in net Package
DESCRIPTION: This snippet adds Multipath TCP support to the net package. It introduces methods for Dialer, ListenConfig, and TCPConn to enable and check Multipath TCP functionality.
SOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_11

LANGUAGE: Go
CODE:
```
func (*Dialer) MultipathTCP() bool
func (*Dialer) SetMultipathTCP(bool)
func (*ListenConfig) MultipathTCP() bool
func (*ListenConfig) SetMultipathTCP(bool)
func (*TCPConn) MultipathTCP() (bool, error)
```

----------------------------------------

TITLE: Embedding External Test Files in Go Using `embed` Package
DESCRIPTION: External Go tests use the `embed` package to embed files matching the pattern `z*t*t` into the `Z` variable as a string. This facility allows for easy inclusion of test resources directly in the test binary. It requires the `embed` package from Go 1.16 onwards.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package p_test

import "embed"

//go:embed z*t*t
var Z string
```

----------------------------------------

TITLE: Appending Binary and Text Serialization Methods - Go
DESCRIPTION: These code snippets introduce AppendBinary and AppendText methods to various types in Go's core packages, standardizing efficient serialization into []uint8 slices. Dependencies include correct type imports (e.g., math/big, net/netip, time) and error handling. The methods accept an output byte slice and return the appended result and an error if serialization fails, enhancing interoperability and custom marshaling across big.Int, net addresses, time, and regexp types.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_17

LANGUAGE: Go
CODE:
```
pkg math/big, method (*Int) AppendText([]uint8) ([]uint8, error) #62384
pkg math/big, method (*Rat) AppendText([]uint8) ([]uint8, error) #62384
pkg math/rand/v2, method (*ChaCha8) AppendBinary([]uint8) ([]uint8, error) #62384
pkg math/rand/v2, method (*PCG) AppendBinary([]uint8) ([]uint8, error) #62384
pkg net, method (IP) AppendText([]uint8) ([]uint8, error) #62384
pkg net/netip, method (Addr) AppendBinary([]uint8) ([]uint8, error) #62384
pkg net/netip, method (Addr) AppendText([]uint8) ([]uint8, error) #62384
pkg net/netip, method (AddrPort) AppendBinary([]uint8) ([]uint8, error) #62384
pkg net/netip, method (AddrPort) AppendText([]uint8) ([]uint8, error) #62384
pkg net/netip, method (Prefix) AppendBinary([]uint8) ([]uint8, error) #62384
pkg net/netip, method (Prefix) AppendText([]uint8) ([]uint8, error) #62384
pkg net/url, method (*URL) AppendBinary([]uint8) ([]uint8, error) #62384
pkg regexp, method (*Regexp) AppendText([]uint8) ([]uint8, error) #62384
pkg time, method (Time) AppendBinary([]uint8) ([]uint8, error) #62384
pkg time, method (Time) AppendText([]uint8) ([]uint8, error) #62384
```

----------------------------------------

TITLE: Proposed Go Method for WaitGroup in Golang
DESCRIPTION: This snippet shows the proposed signature for a new Go method on sync.WaitGroup. It would take a function as an argument and internally call Add(1), launch the function as a goroutine, and call Done() when finished.
SOURCE: https://github.com/golang/go/blob/master/api/next/63796.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
(*WaitGroup) Go(func())
```

----------------------------------------

TITLE: Tidy Go Module Definition
DESCRIPTION: Displays a tidy go.mod file with explicit go version and only necessary requirements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_8

LANGUAGE: Go
CODE:
```
module example.com/m

go $goversion

require example.com/dep v0.1.0

replace (
	example.com/dep v0.1.0 => ./dep
	example.com/testdep v0.1.0 => ./testdep
)
```

----------------------------------------

TITLE: Initial Go Program
DESCRIPTION: The initial version of main.go with just a main function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/commit-after-tag.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Empty Package Declaration in dir1.go
DESCRIPTION: A minimal Go file that only declares its package name without any implementation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package dir1
```

----------------------------------------

TITLE: Fetching and Vendoring Dependencies in Go
DESCRIPTION: This snippet shows how to fetch a specific version of a dependency and vendor it. It also sets up environment variables for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getmode_vendor.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

go get rsc.io/quote@v1.5.1
go mod vendor
env GOPATH=$WORK/empty
env GOPROXY=file:///nonexist
```

----------------------------------------

TITLE: Defining Lazy Module
DESCRIPTION: Defines a 'lazy' module with its own dependency on a specific version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
// Module lazy requires example.com/version v1.0.1.
//
// However, since this module is lazy, its dependents
// should not need checksums for that version of the module
// unless they actually import packages from it.
module example.net/lazy

go 1.17

require example.com/version v1.0.1
```

----------------------------------------

TITLE: Implementing Race Condition Test in Go
DESCRIPTION: This test function creates a potential race condition between a goroutine and a cleanup function. It uses channels to synchronize the goroutine and the cleanup function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/testing_issue40908.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package testrace

import "testing"

func TestRace(t *testing.T) {
	helperDone := make(chan struct{})
	go func() {
		t.Logf("Something happened before cleanup.")
		close(helperDone)
	}()

	t.Cleanup(func() {
		<-helperDone
	})
}
```

----------------------------------------

TITLE: Go Work Configuration File
DESCRIPTION: Defines the Go workspace configuration with Go version 1.21.1 and includes the current directory module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_goline_order.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
go 1.21.1
use .
```

----------------------------------------

TITLE: Implementing GoodPlayer Method for ThirdBase Struct in Go
DESCRIPTION: Defines a method 'GoodPlayer' for the ThirdBase struct that returns three integers. This method probably evaluates or retrieves statistics for a good player at third base.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p3/golden.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
func (*ThirdBase) GoodPlayer() (int, int, int)
```

----------------------------------------

TITLE: Go Workspace Configuration with Module Replacements
DESCRIPTION: Go workspace configuration file (go.work) specifying Go version, modules to include, and module replacements to control dependency resolution. It defines replacement paths for various module versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go 1.18

use (
	./a
	./p
)

replace example.com/b v1.0.0 => ./b
replace example.com/q v1.0.0 => ./q1_0_0
replace example.com/q v1.0.5 => ./q1_0_5
replace example.com/q v1.1.0 => ./q1_1_0
replace example.com/r v1.0.0 => ./r
replace example.com/w v1.0.0 => ./w
replace example.com/x v1.0.0 => ./x
replace example.com/y v1.0.0 => ./y
replace example.com/z v1.0.0 => ./z1_0_0
replace example.com/z v1.1.0 => ./z1_1_0
```

----------------------------------------

TITLE: Setting Log Level with Standard Logger - log/slog - Go
DESCRIPTION: SetLogLoggerLevel(Level) Level function allows adjusting and retrieving the log level for slog's compatibility with the standard library log.Logger. Accepts a Level parameter, sets the global or logger level, and returns the previous level.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_18

LANGUAGE: Go
CODE:
```
func SetLogLoggerLevel(Level) Level
```

----------------------------------------

TITLE: Module B v0.2.0 Definition
DESCRIPTION: Module definition and implementation for example.net/b v0.2.0 with dependency on example.net/a
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_wild.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module example.net/b

go 1.16

require example.net/a v0.2.0
```

LANGUAGE: go
CODE:
```
package b
```

LANGUAGE: go
CODE:
```
package b_test

import _ "example.net/a"
```

----------------------------------------

TITLE: Defining a Go Package in a Subdirectory (Go)
DESCRIPTION: This snippet shows the content of `_data/x.go`. It defines a Go package named `p`. This file resides within the `_data` directory, whose permissions are manipulated in one of the test cases to check the behavior of `go list` with unreadable directories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_perm.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
-- _data/x.go --
package p
```

----------------------------------------

TITLE: Declaring a Go Module
DESCRIPTION: This snippet declares a Go module with the name 'example.com/retract/rationale' and specifies the Go version 1.14. The 'module' directive is used to name the module at the root of a project, defining how a package is imported elsewhere. This setup requires a Go toolchain and a compatible version specified.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-multiline2.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/retract/rationale

go 1.14
```

----------------------------------------

TITLE: Module Definition with Dependencies
DESCRIPTION: Go module configuration file specifying module name and required dependencies including indirect and direct patch dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.0.1.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module patch.example.com/direct

require (
	patch.example.com/indirect v1.0.0
	patch.example.com/depofdirectpatch v1.0.0
)
```

----------------------------------------

TITLE: Go Workspace Configuration
DESCRIPTION: A go.work file that defines a workspace containing two modules 'a' and 'b'. This establishes the multi-module workspace for testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_main_module_replaced.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
go 1.21

use (
    a
    b
)
```

----------------------------------------

TITLE: Testing Regular Expression Matching in Go
DESCRIPTION: This snippet represents a series of test cases for regular expression matching in Go. Each test case consists of input strings, regular expressions, and expected match results. The tests cover various aspects of regex functionality including basic matching, anchors, character classes, and complex patterns.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
strings
""
"a"
regexps
"a"
-;-;-;-
0-1;0-1;0-1;0-1
"^(?:a)$"
-;-;-;-
0-1;0-1;0-1;0-1
"^(?:a)"
-;-;-;-
0-1;0-1;0-1;0-1
"(?:a)$"
-;-;-;-
0-1;0-1;0-1;0-1
```

----------------------------------------

TITLE: Declaring a Go Module with Dependency - Go
DESCRIPTION: Declares a Go module named example.com/badchain/a and specifies its dependency on example.com/badchain/b v1.0.0. This snippet demonstrates standard Go module file syntax. Required to manage dependencies via Go tooling. There are no parameters; file expects to be at the project root.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_a_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/badchain/a

require example.com/badchain/b v1.0.0
```

----------------------------------------

TITLE: Declaring the Go Module Path
DESCRIPTION: Defines the Go module path as `golang.org/toolchain` using the `module` directive. This declaration is typically found in a `go.mod` file (represented here also by `.mod`) and establishes the module's identity.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.js-wasm.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Defining Simple Go Module
DESCRIPTION: This snippet shows a simple go.mod file for a command module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module example.net/cmd

go 1.16
```

----------------------------------------

TITLE: Defining a Simple Go Module File (Go Mod)
DESCRIPTION: This snippet shows the content of a minimal `go.mod` file. It defines a module named `m`. This file is used as the basis for the module operations in the preceding shell commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badzip.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
-- go.mod --
module m
```

----------------------------------------

TITLE: Failing Go Test Implementation
DESCRIPTION: Implements a test function TestBar that deliberately fails with a dummy message
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_overlay.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package foo

import "testing"

func TestBar(t *testing.T) {
	t.Fatal("dummy failure")
}
```

----------------------------------------

TITLE: Package Y Implementation
DESCRIPTION: Empty package declaration for y
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_legacy_mod.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package y
```

----------------------------------------

TITLE: Defining Go Module with Go 1.16
DESCRIPTION: A go.mod file that defines a simple module named 'm' using Go 1.16. This sets up the module context for testing the import error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_issue42891.txt#2025-04-22_snippet_1

LANGUAGE: go.mod
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module definition file declaring module 'm'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_edit_toolchain.txt#2025-04-22_snippet_2

LANGUAGE: gomod
CODE:
```
module m
```

----------------------------------------

TITLE: Math Package Extensions for Big Numbers and Random Generation
DESCRIPTION: Functions and methods for math/big and math/rand packages that support big number arithmetic, scanning, and random number generation with 64-bit support.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
// math/big methods
func (*Float) Scan(fmt.ScanState, int32) error
func (*Int) Sqrt(*Int) *Int

// math/rand functions and methods
func Uint64() uint64
func (*Rand) Uint64() uint64

type Source64 interface {
    Int63() int64
    Seed(int64)
    Uint64() uint64
}
```

----------------------------------------

TITLE: Defining Main Package 'm' in Go
DESCRIPTION: This Go source file defines the main package 'm'. It imports packages 'a' and 'x', establishing the initial dependencies for the main module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- m.go --
package m

import (
	_ "a"
	_ "x"
)
```

----------------------------------------

TITLE: Defining Go Module with Dependencies
DESCRIPTION: This snippet shows the contents of a go.mod file, defining the module and its dependency on rsc.io/quote.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_replaced.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module golang.org/issue/27868

require rsc.io/quote v1.5.0
```

----------------------------------------

TITLE: sync/atomic Type Additions
DESCRIPTION: New atomic types and methods for concurrent operations including Bool, Int32, Int64, Uint32, Uint64, Uintptr, and generic Pointer types.
SOURCE: https://github.com/golang/go/blob/master/api/go1.19.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
type Bool struct
type Int32 struct
type Int64 struct
type Pointer[$0 interface{}] struct
type Uint32 struct
type Uint64 struct
type Uintptr struct
```

----------------------------------------

TITLE: Creating Initial Commit and Tag
DESCRIPTION: Adds files to Git, creates the initial commit, renames the default branch to 'main', and creates a version tag v0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
git add pkg go.mod
git commit -a -m 'pkg: add empty package'
git branch -m main
git tag 'v0.1.0'
```

----------------------------------------

TITLE: Module Declaration with Dependency
DESCRIPTION: This go.mod snippet declares the module rsc.io/quote with a dependency requirement on rsc.io/quote/v2 version 2.0.1, facilitating v2 module operations and version management in Go.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_multirepo.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
module rsc.io/quote
require rsc.io/quote/v2 v2.0.1
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file specifying the module name and its dependency on rsc.io/sampler package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.4.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module "rsc.io/quote"

require "rsc.io/sampler" v1.0.0
```

----------------------------------------

TITLE: Base Go Module Definition
DESCRIPTION: Initial go.mod file defining the module and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tool.txt#2025-04-22_snippet_3

LANGUAGE: plaintext
CODE:
```
module example.com/foo
go 1.24
```

----------------------------------------

TITLE: Updating and Listing Go Module Dependencies
DESCRIPTION: This snippet demonstrates updating module dependencies and listing all modules and their dependencies using 'go list all' and 'go list -m all'. It shows how adding a new import should reflect in the 'go.mod' without causing unnecessary updates. The key functionality is ensuring dependency records are up-to-date and matching specified versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_new_import.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
cp lazy.go.new lazy.go
go list all
go list -m all
stdout '^example.com/c v0.1.0'
cmp go.mod go.mod.old
```

----------------------------------------

TITLE: Defining Go Module with Dependencies
DESCRIPTION: This snippet shows the contents of a go.mod file for a module named 'example.net/m'. It specifies Go 1.16 as the version and includes a dependency on 'example.net/x' with a local replacement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_gomod.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example.net/m

go 1.16

require example.net/x v0.1.0

replace example.net/x v0.1.0 => ./x
```

----------------------------------------

TITLE: Defining Go Module x/y with Local Replacement for zz (Go Mod)
DESCRIPTION: This `go.mod` file defines the module `x/y`. It declares a dependency on module `zz` version `v1.0.0` and uses a `replace` directive to map this dependency to the local relative path `../z`, overriding the default dependency resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_local_replace.txt#2025-04-22_snippet_1

LANGUAGE: gomod
CODE:
```
-- x/y/go.mod --
module x/y
require zz v1.0.0
replace zz v1.0.0 => ../z
```

----------------------------------------

TITLE: Fortune Main Program Implementation
DESCRIPTION: Main Go program that imports rsc.io/quote package and prints a hello message
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v1.0.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main

import "rsc.io/quote"

func main() {
	println(quote.Hello())
}
```

----------------------------------------

TITLE: Declaring Go Module with v3 Path
DESCRIPTION: Defines a Go module with explicit v3 path in the module directive and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v3pkg.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/git/v3pkg.git/v3

go 1.13
```

----------------------------------------

TITLE: Constant Declarations in Go
DESCRIPTION: Multiple constant declarations with various types including integers, floats, and strings. Includes both typed and untyped (ideal) constants.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p1/golden.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
const A = 1
const A64 int64
const AIsLowerA = 11
const B0 = 2
const ConstChase2 = 11
const ConversionConst MyInt
const FloatConst = 1.5  // 3/2
const StrConst = "foo"
```

----------------------------------------

TITLE: Testing other Go commands with -pgo=auto flag
DESCRIPTION: Tests the behavior of other Go commands (install, run, test) with the -pgo=auto flag. It verifies that PGO is applied correctly in these contexts.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go install -a -n -pgo=auto ./a/a1
stderr 'compile.*-pgoprofile=.*a1.go'

go run -a -n -pgo=auto ./a/a1
stderr 'compile.*-pgoprofile=.*a1.go'

go test -a -n -pgo=auto ./a/a1
stderr 'compile.*-pgoprofile=.*a1.go.*a1_test.go'
stderr 'compile.*-pgoprofile=.*external_test.go'
```

----------------------------------------

TITLE: Declaring a Go Module with go.mod - Go
DESCRIPTION: This snippet declares a new Go module named 'example.com/noroot' using the go.mod file. There are no additional dependencies listed. The module file is essential for module-aware Go projects, allowing them to be versioned and managed by Go tooling. The snippet is minimal and primarily serves as a module declaration without specifying versions for dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_noroot_v1.0.1.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/noroot
```

----------------------------------------

TITLE: Defining a Go Package in Module Root (Go)
DESCRIPTION: This snippet contains the source code for a Go file named `x.go`. It defines a package named `m`, corresponding to the module name declared in `go.mod`. This file is part of the package structure that the `go list` command is expected to analyze.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_perm.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
-- x.go --
package m
```

----------------------------------------

TITLE: Creating Basic Go Modules and Workspace Configuration
DESCRIPTION: Sets up multiple Go modules with different version requirements (1.22.0, 1.22.1, 1.24rc0) and initializes a workspace. Tests workspace synchronization behavior with version constraints and toolchain settings.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_toolchain.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# Create basic modules and work space.
env TESTGO_VERSION=go1.50
mkdir m1_22_0
go mod init -C m1_22_0
go mod edit -C m1_22_0 -go=1.22.0 -toolchain=go1.99.0
mkdir m1_22_1
go mod init -C m1_22_1
go mod edit -C m1_22_1 -go=1.22.1 -toolchain=go1.99.1
mkdir m1_24_rc0
go mod init -C m1_24_rc0
go mod edit -C m1_24_rc0 -go=1.24rc0 -toolchain=go1.99.2

go work init ./m1_22_0 ./m1_22_1
grep '^go 1.50$' go.work
! grep toolchain go.work
```

----------------------------------------

TITLE: Go Module with Standard Library Dependencies Only
DESCRIPTION: A Go program that only uses standard library packages to print build information. This demonstrates a simple Go application without any external dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"os"
	"runtime/debug"
)

func main() {
	info, ok := debug.ReadBuildInfo()
	if !ok {
		panic("missing build info")
	}
	fmt.Fprintf(os.Stdout, "path is %s\n", info.Path)
	fmt.Fprintf(os.Stdout, "main is %s %s\n", info.Main.Path, info.Main.Version)
	for _, m := range info.Deps {
		fmt.Fprintf(os.Stdout, "using %s %s\n", m.Path, m.Version)
	}
}
```

----------------------------------------

TITLE: Running Go Tests with Race Detector and Coverage (Shell)
DESCRIPTION: Executes Go tests similar to the previous test run, but includes the `-race` flag to enable the race detector. It tests the `encoding/binary` and `errors` packages with coverage analysis enabled (`-cover`), writing the profile to `$WORK/cover.out`. This tests the coverage behavior when the race detector is active.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_modes.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
go test -short -race -cover encoding/binary errors -coverprofile=$WORK/cover.out
```

----------------------------------------

TITLE: Executing go install Command in Go Bash Script
DESCRIPTION: This snippet demonstrates the use of the 'go install' command in various environments, highlighting how the presence of a go.mod file, module proxy behaviors, and module state (on/off) affects installation. It also covers error scenarios including missing dependencies and invalid paths.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_install_pkg_version.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# 'go install pkg@version' works outside a module.
env GO111MODULE=auto
go install example.com/cmd/a@v1.0.0
exists $GOPATH/bin/a$GOEXE
rm $GOPATH/bin

# 'go install pkg@version' reports an error if modules are disabled.
env GO111MODULE=off
! go install example.com/cmd/a@v1.0.0
stderr '^go: modules disabled by GO111MODULE=off; see ''go help modules''$'
env GO111MODULE=auto

# 'go install pkg@version' ignores go.mod in current directory.
cd m
cp go.mod go.mod.orig
! go list -m all
stderr '^go: example.com/cmd@v1.1.0-doesnotexist: reading http.*/mod/example.com/cmd/@v/v1.1.0-doesnotexist.info: 404 Not Found\n\tserver response: 404 page not found$'
stderr '^go: example.com/cmd@v1.1.0-doesnotexist: missing go.sum entry for go.mod file; to add it:\n\tgo mod download example.com/cmd$'
go install example.com/cmd/a@latest
cmp go.mod go.mod.orig
exists $GOPATH/bin/a$GOEXE
go version -m $GOPATH/bin/a$GOEXE
stdout '^\tmod\texample.com/cmd\tv1.0.0\t' # "latest", not from go.mod
rm $GOPATH/bin/a
cd ..

# 'go install -modfile=x.mod pkg@version' reports an error, but only if
# -modfile is specified explicitly on the command line.
cd m
env GOFLAGS=-modfile=go.mod
go install example.com/cmd/a@latest  # same as above
env GOFLAGS=
! go install -modfile=go.mod example.com/cmd/a@latest
stderr '^go: -modfile cannot be used with commands that ignore the current module$'
cd ..

# Every test case requires linking, so we only cover the most important cases
# when -short is set.
[short] stop

# 'go install pkg@version' works on a module that doesn't have a go.mod file
# and with a module whose go.mod file has missing requirements.
# With a proxy, the two cases are indistinguishable.
go install rsc.io/fortune@v1.0.0
stderr '^go: found rsc.io/quote in rsc.io/quote v1.5.2$'
exists $GOPATH/bin/fortune$GOEXE
! exists $GOPATH/pkg/mod/rsc.io/fortune@v1.0.0/go.mod # no go.mod file
go version -m $GOPATH/bin/fortune$GOEXE
stdout '^\tdep\trsc.io/quote\tv1.5.2\t' # latest version of fortune's dependency
rm $GOPATH/bin

# 'go install dir@version' works like a normal 'go install' command if
# dir is a relative or absolute path.
env GO111MODULE=on
go mod download rsc.io/fortune@v1.0.0
! go install $GOPATH/pkg/mod/rsc.io/fortune@v1.0.0
stderr '^go: go\.mod file not found in current directory or any parent directory; see ''go help modules''$'
! go install ../pkg/mod/rsc.io/fortune@v1.0.0
stderr '^go: go\.mod file not found in current directory or any parent directory; see ''go help modules''$'
mkdir tmp
cd tmp
go mod init tmp
go mod edit -require=rsc.io/fortune@v1.0.0
! go install -mod=readonly $GOPATH/pkg/mod/rsc.io/fortune@v1.0.0
stderr '^missing go\.sum entry for module providing package rsc\.io/fortune; to add:\n\tgo mod download rsc\.io/fortune$'
! go install -mod=readonly ../../pkg/mod/rsc.io/fortune@v1.0.0
stderr '^missing go\.sum entry for module providing package rsc\.io/fortune; to add:\n\tgo mod download rsc\.io/fortune$'
go get rsc.io/fortune@v1.0.0
go install -mod=readonly $GOPATH/pkg/mod/rsc.io/fortune@v1.0.0
exists $GOPATH/bin/fortune$GOEXE
cd ..
rm tmp
rm $GOPATH/bin
env GO111MODULE=auto
```

----------------------------------------

TITLE: Declaring Go Package for Renamed Module
DESCRIPTION: This Go source file defines the package `newname`. This package declaration corresponds to the last component of the module path `example.com/retract/newname` defined in the `go.mod` file, establishing the primary package for the code within this renamed module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rename_v1.9.0-new.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package newname
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: This snippet defines a Go module named 'm' using Go version 1.21.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_setup_error.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module m
go 1.21
```

----------------------------------------

TITLE: Go Module Declaration
DESCRIPTION: This snippet declares a Go module named 'coverdep', specifying the Go version required for the module. This file should be placed at the root of the module. Dependencies: Go compiler using a version that supports modules. Includes a required Go version declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_sync_atomic_import.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module coverdep

go 1.16
```

----------------------------------------

TITLE: Go Module Configuration
DESCRIPTION: Module definition file specifying Go version 1.20 requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/script_test_basics.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module main

go 1.20
```

----------------------------------------

TITLE: Go Module Configuration
DESCRIPTION: Specifies the module name and its dependencies using Go modules syntax
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_newcycle_b_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/newcycle/b

require example.com/newcycle/a v1.0.1
```

----------------------------------------

TITLE: Simple Helper Package Implementation
DESCRIPTION: A simple Go package that provides a Hello function which prints a message to stdout. This package is imported by other test files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_local.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package easysub

import "fmt"

func Hello() {
	fmt.Println("easysub.Hello")
}
```

----------------------------------------

TITLE: Go Test Fuzzing Setup
DESCRIPTION: A Go test file that defines a fuzz test function named FuzzFoo which tests string inputs. The function will fail if the input string equals 'fails'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_run.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package x

import "testing"

func FuzzFoo(f *testing.F) {
    f.Add("this is fine")
    f.Fuzz(func(t *testing.T, s string) {
        if s == "fails" {
            t.Error("error here")
        }
    })
}
```

----------------------------------------

TITLE: Module Configuration in go.mod file
DESCRIPTION: Standard go.mod file that defines the module name, Go version requirement (1.23), and three dependencies with specific versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needall_v0.0.1.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module rsc.io/needall
go 1.23

require rsc.io/needgo121 v0.0.1
require rsc.io/needgo122 v0.0.1
require rsc.io/needgo123 v0.0.1
```

----------------------------------------

TITLE: Adding Binary Encoding and Decoding Functions to encoding/binary Package
DESCRIPTION: This snippet adds new functions Append, Decode, and Encode to the encoding/binary package for binary encoding and decoding of data.
SOURCE: https://github.com/golang/go/blob/master/api/go1.23.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
func Append([]uint8, ByteOrder, interface{}) ([]uint8, error)
func Decode([]uint8, ByteOrder, interface{}) (int, error)
func Encode([]uint8, ByteOrder, interface{}) (int, error)
```

----------------------------------------

TITLE: Go Module Configuration
DESCRIPTION: This go.mod file defines a test module that requires a specific version of a Git repository from vcs-test.golang.org.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_git_bareRepository.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module test

go 1.18

require vcs-test.golang.org/git/gitrepo1.git v1.2.3
```

----------------------------------------

TITLE: Defining Go Module Dependencies
DESCRIPTION: Specifies the module name and its dependency on 'rsc.io/sampler' version 1.3.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v2.0.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module "rsc.io/quote"

require "rsc.io/sampler" v1.3.0
```

----------------------------------------

TITLE: Module A Configuration and Main Function
DESCRIPTION: This snippet shows the go.mod file for module 'example.com/a' and its main Go file. It requires and imports 'example.com/b' module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module example.com/a

go 1.18

require example.com/b v1.0.0

replace example.com/b v1.0.0 => ../b
```

LANGUAGE: Go
CODE:
```
package main

import "example.com/b"

func main() {
	b.B()
}
```

----------------------------------------

TITLE: Defining Go Module 'b' and Dependency 'c' (Go Module)
DESCRIPTION: This `go.mod` file declares the module path as `example.com/badchain/b` and specifies that it requires version `v1.0.0` of the module `example.com/badchain/c`. This is fundamental for Go's module system to manage dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_b_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: gomod
CODE:
```
module example.com/badchain/b

require example.com/badchain/c v1.0.0
```

----------------------------------------

TITLE: Defining Go Module with Dependencies
DESCRIPTION: This go.mod file defines the main module 'example.com/a' with its dependencies and replace directives for version resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect_pruned.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
module example.com/a

go 1.17

require (
	example.com/b v0.2.0
	example.com/c v0.1.0
)

replace (
	example.com/b v0.1.0 => ./b1
	example.com/b v0.2.0 => ./b2
	example.com/c v0.1.0 => ./c1
	example.com/c v0.2.0 => ./c2
	example.com/d v0.1.0 => ./d
	example.com/d v0.2.0 => ./d
)
```

----------------------------------------

TITLE: Defining Go Module with Dependencies
DESCRIPTION: This snippet shows the content of a go.mod file defining a module with its dependencies and replacements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.net/m

go 1.15

replace (
	example.net/tools v0.1.0 => ./tools
	example.net/cmd v0.1.0 => ./cmd
	example.net/testonly v0.1.0 => ./testonly
	example.net/missing v0.1.0 => ./missing
)
```

----------------------------------------

TITLE: Defining Go Test Function (Go)
DESCRIPTION: This file (`test_test.go`) defines a simple test function `TestSimple` within the `testlist` package. It uses the `testing` and `fmt` packages and adheres to the `TestXxx(*testing.T)` signature required for test functions recognizable by `go test`. This specific test function calls `fmt.Sprint` but does not perform any assertions using the `*testing.T` parameter.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_simple.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
-- test_test.go --
package testlist

import (
	"fmt"
	"testing"
)

func TestSimple(t *testing.T) {
	_ = fmt.Sprint("Test simple")
}
```

----------------------------------------

TITLE: Example Module Configuration
DESCRIPTION: Configuration and implementation for the dotless 'example' module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_replaced.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example
go 1.16
```

LANGUAGE: go
CODE:
```
package example
```

----------------------------------------

TITLE: Defining a Go Module (gomod)
DESCRIPTION: This snippet declares a Go module named 'example.com/notags'. This is the content of a go.mod file, serving as the root definition for the module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_notags_v0.0.0-20190507143103-cc8cbe209b64.txt#2025-04-22_snippet_0

LANGUAGE: gomod
CODE:
```
-- .mod --
module example.com/notags
```

----------------------------------------

TITLE: Main Module Definition
DESCRIPTION: Defines the main module configuration with version 1.17 and required dependencies including local replacements for lazy and requireincompatible modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_irrelevant.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/m

go 1.17

replace (
	example.net/lazy v0.1.0 => ./lazy
	example.net/requireincompatible v0.1.0 => ./requireincompatible
)

require example.net/lazy v0.1.0
```

----------------------------------------

TITLE: Conditional Inclusion with Build Tag 'extra' - Go
DESCRIPTION: This Go source file uses the '+build extra' tag to restrict its inclusion to builds where the extra tag is supplied. It defines package p and imports extra as a side effect. It depends on the availability of the extra import path in the module. Input: build tag. Output: module import side effect. Limitation: file is ignored unless the extra tag is set.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
// +build extra

package p

import _ "extra"

```

----------------------------------------

TITLE: Simple Package Declaration Z
DESCRIPTION: Basic Go package declaration for package z
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_find.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package z
```

----------------------------------------

TITLE: Defining Go Module in .mod File
DESCRIPTION: Specifies the module name and required Go version for rsc.io/needgo1223.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo1223_v0.0.1.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module rsc.io/needgo1223
go 1.22.3
```

----------------------------------------

TITLE: Initializing and Invoking Generics in Go Main
DESCRIPTION: The `main.go` file imports the generics package and invokes its `Bar` function within the `main` function. The code assumes that the `Bar` function is implemented in the imported package. Designed for command line execution, it illustrates a basic entry point using the generics library developed in Go.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_depends_on_generics_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package main

import "example.com/generics"

func main() {generics.Bar()}
```

----------------------------------------

TITLE: Base Go Module Definition
DESCRIPTION: Basic module definition file with Go 1.16 specification.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_readonly.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Directory traversal with WalkDir in path/filepath package
DESCRIPTION: Recursively walks a directory tree, calling the provided WalkDirFunc for each file or directory encountered. Returns an error if the initial call to the directory fails or if the function returns an error.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
func WalkDir(string, fs.WalkDirFunc) error
```

----------------------------------------

TITLE: Testing Function FooFunc in Package 'foo'
DESCRIPTION: Defines a unit test for the FooFunc in the 'foo' package. It validates that FooFunc returns the expected integer value, using Go's testing package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_pkgselect.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- foo/foo_test.go --
package foo

import "testing"

func TestFoo(t *testing.T) {
	if FooFunc() != 42 {
		t.Fatalf("bad")
	}
}

```

----------------------------------------

TITLE: Printing Version in Go Application
DESCRIPTION: This Go snippet defines a simple main package that prints the module version using fmt.Println(). It requires the fmt package from the Go standard library. The input is hardcoded as a version string that is outputted to the console.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_undeprecated_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package main\n\nimport \"fmt\"\n\nfunc main() { fmt.Println(\"a@v1.0.0\") }
```

----------------------------------------

TITLE: Go Module with Quote Import
DESCRIPTION: Main Go file that imports the rsc.io/quote/v3 module and calls its GoV3() function to print a quote.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"rsc.io/quote/v3"
)

func main() {
	fmt.Println(quote.GoV3())
}
```

----------------------------------------

TITLE: Declaring Generic Pair Type and Methods in Go
DESCRIPTION: Defines a generic Pair type with two type parameters and associated First and Second methods. The type parameters have constraints: $0 must implement the M interface, and $1 must be compatible with int.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p4/golden.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
type Pair[$0 interface{ M }, $1 interface{ ~int }] struct
```

LANGUAGE: Go
CODE:
```
func NewPair[$0 interface{ M }, $1 interface{ ~int }]($0, $1) Pair[$0, $1]
```

LANGUAGE: Go
CODE:
```
method (Pair[$0, $1]) Second() $1
```

LANGUAGE: Go
CODE:
```
method (Pair[$0, $1]) First() $0
```

----------------------------------------

TITLE: Go file with constant definition
DESCRIPTION: A Go file containing a constant definition used by the main program file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_dirs.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package main
const msg = "hello world"
```

----------------------------------------

TITLE: Defining Go Module Metadata with .mod File - Go
DESCRIPTION: Specifies the module path for a Go module and sets the Go version compatibility using the '.mod' format. This file is used by the Go tooling system to identify and manage module dependencies. The key parameter is the module name ('example.com/ambiguous/a/b') and the Go language version required ('go 1.16').
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_ambiguous_a_b_v0.0.0-empty.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/ambiguous/a/b

go 1.16
```

----------------------------------------

TITLE: Main Module Definition
DESCRIPTION: Main module configuration with dependencies and replace directives for test modules a, b, c, d, and e.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_artifact.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/m

go 1.16

require (
	example.com/a v0.1.0
	example.com/b v0.1.0
	example.com/c v0.1.0
	example.com/d v0.1.0
)

replace (
	example.com/a v0.1.0 => ./a1
	example.com/b v0.1.0 => ./b1
	example.com/b v0.2.0 => ./b2
	example.com/c v0.1.0 => ./c
	example.com/c v0.2.0 => ./c
	example.com/d v0.1.0 => ./d
	example.com/d v0.2.0 => ./d
	example.com/e v0.1.0 => ./e
)
```

----------------------------------------

TITLE: Expected Go workspace configuration
DESCRIPTION: The expected go.work file after running 'go work use -r .' command, which replaces 'sub' with the current directory ('.').
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_issue50958.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
go 1.18

use .
```

----------------------------------------

TITLE: Configuring Go Import Path for missingrepo-git Repository in HTML
DESCRIPTION: HTML snippet with go-import metadata tag that maps the import path vcs-test.golang.org/go/missingrepo/missingrepo-git to a Git repository at vcs-test.golang.org/git/missingrepo.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/missingrepo.txt#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<meta name="go-import" content="vcs-test.golang.org/go/missingrepo/missingrepo-git git https://vcs-test.golang.org/git/missingrepo">
```

----------------------------------------

TITLE: Go Module Declaration
DESCRIPTION: This snippet declares a Go module named 'm' and sets the Go version to 1.18, which is required for compatibility with features and syntax of that specific version of Go. It is crucial for managing dependencies and ensuring consistent builds.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getx.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
-- go.mod --
module m

go 1.18
```

----------------------------------------

TITLE: Minimal Go Program (Go)
DESCRIPTION: This is a minimal Go program that defines an empty main function. It serves as the entry point for the 'mycmd' module used in the GOARM test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_arch_mode.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Initial go.mod File
DESCRIPTION: The initial content of the go.mod file, defining the module name as 'x'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
module x
```

----------------------------------------

TITLE: Race Condition Test and Benchmark in Go
DESCRIPTION: This Go code defines a test function and a benchmark function, both designed to trigger race conditions. They create goroutines that access shared variables concurrently.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_cover_mode_issue20435.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package testrace

import "testing"

func TestRace(t *testing.T) {
	for i := 0; i < 10; i++ {
		c := make(chan int)
		x := 1
		go func() {
			x = 2
			c <- 1
		}()
		x = 3
		<-c
		_ = x
	}
}

func BenchmarkRace(b *testing.B) {
	for i := 0; i < b.N; i++ {
		c := make(chan int)
		x := 1
		go func() {
			x = 2
			c <- 1
		}()
		x = 3
		<-c
		_ = x
	}
}
```

----------------------------------------

TITLE: Listing Non-Standard Test Dependencies (Shell/Go)
DESCRIPTION: Executes the 'go list' command to find all non-standard Go package dependencies for the 'pkg' package, including its test dependencies. The '-e' flag allows processing even with errors, '-test' includes test dependencies, '-deps' lists all dependencies, and '-f' formats the output to show only the ImportPath for non-standard packages. This command is central to verifying the recompilation behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_split_main.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go list -e -test -deps -f '{{if not .Standard}}{{.ImportPath}}{{end}}' pkg
```

----------------------------------------

TITLE: Setting Up a Go Workspace with go.work - Go
DESCRIPTION: This go.work file defines a Go workspace for version 1.24, specifying multiple module directories to compose a multi-module development environment. The 'use' block includes both the root and another module, facilitating local development and integration across modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_7

LANGUAGE: ini
CODE:
```
go 1.24\n\nuse (\n    ../\n    ../other\n)\n
```

----------------------------------------

TITLE: Concatenating Slices Generically - slices.Concat - Go
DESCRIPTION: Adds a generic Concat function to the slices package, supporting any type fulfilling ~[]$1 and element $1. Accepts multiple slices as variadics and returns a single concatenated slice. Used for efficient, type-safe slice merging.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_26

LANGUAGE: Go
CODE:
```
func Concat[$0 interface{ ~[]$1 }, $1 interface{}](...$0) $0
```

----------------------------------------

TITLE: Sort Package Generic Slice Functions
DESCRIPTION: Functions for the sort package that provide generic sorting capabilities for slices of any type. Includes sorting, stability checking, and stable sorting operations using custom comparison functions.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_16

LANGUAGE: go
CODE:
```
// sort functions
func Slice(interface{}, func(int, int) bool)
func SliceIsSorted(interface{}, func(int, int) bool) bool
func SliceStable(interface{}, func(int, int) bool)
```

----------------------------------------

TITLE: Package Declaration
DESCRIPTION: Basic Go package declaration file with package name 'b'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_b_v1.9.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package b
```

----------------------------------------

TITLE: Networking Package Extensions with Context Support and URL Handling
DESCRIPTION: Types and methods for net and net/url packages. Adds context-aware DNS operations, URL parsing enhancements, and new buffer types for efficient I/O operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
// net methods and types
func (*Buffers) Read([]uint8) (int, error)
func (*Buffers) WriteTo(io.Writer) (int64, error)
func (*Resolver) LookupAddr(context.Context, string) ([]string, error)
func (*Resolver) LookupCNAME(context.Context, string) (string, error)
func (*Resolver) LookupHost(context.Context, string) ([]string, error)
func (*Resolver) LookupIPAddr(context.Context, string) ([]IPAddr, error)
func (*Resolver) LookupMX(context.Context, string) ([]*MX, error)
func (*Resolver) LookupNS(context.Context, string) ([]*NS, error)
func (*Resolver) LookupPort(context.Context, string, string) (int, error)
func (*Resolver) LookupSRV(context.Context, string, string, string) (string, []*SRV, error)
func (*Resolver) LookupTXT(context.Context, string) ([]string, error)
func (*UnixListener) SetUnlinkOnClose(bool)

type Buffers [][]uint8
type Dialer struct {
    Resolver *Resolver
}
type Resolver struct {
    PreferGo bool
}
var DefaultResolver *Resolver

// net/mail functions
func ParseDate(string) (time.Time, error)

// net/url functions and methods
func PathEscape(string) string
func PathUnescape(string) (string, error)
func (*URL) Hostname() string
func (*URL) MarshalBinary() ([]uint8, error)
func (*URL) Port() string
func (*URL) UnmarshalBinary([]uint8) error
```

----------------------------------------

TITLE: Importing Package with Major Version Suffix in Go
DESCRIPTION: Demonstrates importing a package with a major version suffix to test module resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_direct.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package main

import _ "vcs-test.golang.org/git/v3pkg.git/v3"

func main() {}
```

----------------------------------------

TITLE: Defining Go Module with Replacement
DESCRIPTION: Specifies a Go module with a requirement and a local replacement for rsc.io/quote/v3.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
module example.com/replace

require rsc.io/quote/v3 v3.0.0
replace rsc.io/quote/v3 => ./vendor/not-rsc.io/quote/v3
```

----------------------------------------

TITLE: Declaring a Go Package
DESCRIPTION: This snippet declares a Go package named 'lib'. This line must be the first non-comment line in a Go source file (like 'lib.go') and indicates that the definitions within the file belong to the 'lib' package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_missingpkg_v1.0.1-beta.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package lib
```

----------------------------------------

TITLE: Configuring Go Workspace
DESCRIPTION: Workspace configuration file specifying Go version and included modules
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go 1.18

use (
	./a
	./b
)
```

----------------------------------------

TITLE: Defining Record and Source Structs in log/slog Package
DESCRIPTION: This snippet defines the Record and Source structs in the log/slog package. The Record struct includes a Time field, while the Source struct contains File, Function, and Line fields for logging purposes.
SOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_9

LANGUAGE: Go
CODE:
```
type Record struct {
    Time time.Time
}

type Source struct {
    File     string
    Function string
    Line     int
}
```

----------------------------------------

TITLE: Go Module File with Requirements, Exclusions, Replacements and Retractions
DESCRIPTION: Shows a more complex go.mod file with requirements, exclusions, replacements, and retraction directives. This demonstrates the structure after multiple edit operations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
module x.x/y/z

go $goversion

require x.1 v1.0.0

exclude (
	x.1 v1.2.0
	x.1 v1.2.1
	x.1 v2.0.0+incompatible
)

replace (
	x.1 v1.3.0 => y.1 v1.4.0
	x.1 v1.4.0 => ../z
)

retract (
	v1.6.0
	[v1.3.0, v1.4.0]
	[v1.1.0, v1.2.0]
	v1.0.0
)
```

----------------------------------------

TITLE: Function Declarations in Go
DESCRIPTION: Function declarations with various parameter types and return values, including error handling and callback functions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p1/golden.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
func Bar(int8, int16, int64)
func Bar1(int8, int16, int64) uint64
func Bar2(int8, int16, int64) (uint8, uint64)
func BarE() Error
func Now() Time
func PlainFunc(int, int, string) (*B, error)
func TakesFunc(func(int) int)
```

----------------------------------------

TITLE: Module Definition in go.mod File
DESCRIPTION: Standard go.mod file declaring the module name for the Go toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-loong64.txt#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Defining golang.org/x/text Module in Go
DESCRIPTION: This snippet defines the module name for golang.org/x/text. It's a crucial part of Go's module system, specifying the import path for this package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_text_v0.0.0-20170915032832-14c0d48ead0c.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module golang.org/x/text
```

----------------------------------------

TITLE: Defining a Parallel Benchmark State Struct - Go
DESCRIPTION: Reference to the PB struct in the testing package, which encapsulates the state required for parallel benchmark iterations in Go. This struct is passed to benchmark functions running in parallel, providing the necessary context and helper methods for controlling iteration. There are no required external dependencies, but correct use assumes integration with Go's benchmark framework.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_66

LANGUAGE: Go
CODE:
```
pkg testing, type PB struct
```

----------------------------------------

TITLE: Setting up Git with Test Configuration and Downloading Go Module
DESCRIPTION: This script configures Git to use a test-specific .gitconfig file by setting environment variables, verifies the user identity is properly set, configures GOPRIVATE for private repository access, and runs go mod download with verbose output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_git_bareRepository.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# Redirect git to a test-specific .gitconfig.
# GIT_CONFIG_GLOBAL suffices for git 2.32.0 and newer.
# For older git versions we also set $HOME.
env GIT_CONFIG_GLOBAL=$WORK${/}home${/}gopher${/}.gitconfig
env HOME=$WORK${/}home${/}gopher
exec git config --global --show-origin user.name
stdout 'Go Gopher'

env GOPRIVATE=vcs-test.golang.org

go mod download -x
```

----------------------------------------

TITLE: Defining Go Module Dependencies
DESCRIPTION: This Go module file defines the module 'x' and its dependency on 'rsc.io/quote' version 1.5.1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_file_proxy.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module x
go 1.13
require rsc.io/quote v1.5.1
```

----------------------------------------

TITLE: Simple Go Program Utilizing a Dependency
DESCRIPTION: This is a basic Go program within the `main` package. It imports the standard `fmt` package and the external `rsc.io/quote` package (defined as a dependency in `go.mod`). The `main` function calls `quote.Hello()` and prints the returned string to standard output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/malformed_gosum_issue62345.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- main.go --
package main

import (
	"fmt"

	"rsc.io/quote"
)

func main() {
	fmt.Println(quote.Hello())
}
```

----------------------------------------

TITLE: Running Go Module Tidy and Dependency Checks
DESCRIPTION: This snippet runs 'go mod tidy' and checks the output for specific module behaviors, including removal of unused dependencies and preservation of used ones.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

# tidy removes unused y, but everything else is used
go mod tidy -v
stderr '^unused y.1'
! stderr '^unused [^y]'

grep 'go 1.10' go.mod

go list -m all
! stdout '^y'
stdout '^w.1 v1.2.0'
stdout '^z.1 v1.2.0'

# empty tidy should not crash
cd triv
! grep 'go ' go.mod
go mod tidy

# tidy should add missing go line
grep 'go ' go.mod
```

----------------------------------------

TITLE: Go Workspace Configuration
DESCRIPTION: The go.work file that defines the workspace settings, specifying Go version 1.21 and including the current directory in the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_conditional.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
go 1.21

use .
```

----------------------------------------

TITLE: Database/sql NullByte and NullInt16 Types
DESCRIPTION: New nullable types for byte and int16 values in database/sql package with associated Scan() and Value() methods
SOURCE: https://github.com/golang/go/blob/master/api/go1.17.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
type NullByte struct {
    Byte uint8
    Valid bool
}

type NullInt16 struct {
    Int16 int16
    Valid bool
}
```

----------------------------------------

TITLE: Defining Go Module Path
DESCRIPTION: This snippet defines the module path for a Go project using the `module` directive and specifies the Go version with `go` directive. This setup is crucial for module identification and compatibility enforcement in Go projects.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.1-order.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
module example.com/retract/rationale

go 1.14
```

----------------------------------------

TITLE: Defining Go Module in go.mod
DESCRIPTION: Specifies the Go version and module name for the project. This file is essential for Go's module system to manage dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_build_no_modules.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
go 1.18

module foo
```

----------------------------------------

TITLE: Defining a Basic Test Function in Go Test File - Go
DESCRIPTION: This Go file defines a simple test function 'Test' within a package 'x', using the standard 'testing' package. It serves as the main test target for shell-based and module-based test discovery processes. Dependencies include the Go testing package and a valid Go module. No parameters are taken; running 'go test' will invoke this function, and its presence is necessary for validating test-related outputs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_test.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package x
import "testing"
func Test(t *testing.T) {}
```

----------------------------------------

TITLE: Debugging Go Compiler with Build Flags
DESCRIPTION: Various compiler flags for debugging, optimization info, and visualization of compiler internals
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ go build -gcflags=-m=2
$ go build -gcflags=-d=ssa/check_bce/debug
$ go build -gcflags=-W
$ GOSSAFUNC=Foo go build
$ go build -gcflags=-S
$ go tool compile -bench=out.txt x.go
```

----------------------------------------

TITLE: Main Go Module Configuration
DESCRIPTION: Primary go.mod file defining module dependencies and replacements for example.net/a and example.net/b versions
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_wild.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example

go 1.16

require example.net/a v0.1.0

replace (
	example.net/a v0.1.0 => ./a10
	example.net/a v0.1.1 => ./a11
	example.net/a v0.2.0 => ./a20
	example.net/a v0.2.1 => ./a20
	example.net/b v0.1.0 => ./b1
	example.net/b v0.1.1 => ./b1
	example.net/b v0.2.0 => ./b2
)
```

----------------------------------------

TITLE: Go Workspace Configuration
DESCRIPTION: Workspace configuration file specifying Go version 1.18 and including modules a and b
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_irrelevant_dependency.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go 1.18

use (
	./a
	./b
)
```

----------------------------------------

TITLE: HTTP status codes and client methods in Go
DESCRIPTION: Constant definition for HTTP status code "Too Early" (425) and CloseIdleConnections method for HTTP client.
SOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
const StatusTooEarly = 425
const StatusTooEarly ideal-int
method (*Client) CloseIdleConnections()
```

----------------------------------------

TITLE: Defining Go Module and Dependencies (gomod)
DESCRIPTION: This `go.mod` file defines a Go module named `m`. It declares a single dependency on the module `v.com` at version `v1.0.0`. This file is essential for managing dependencies in Go modules mode.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_trimpath_macro.txt#2025-04-22_snippet_1

LANGUAGE: gomod
CODE:
```
module m

require v.com v1.0.0
```

----------------------------------------

TITLE: Preventing Module Import of Standard Library Internal Packages
DESCRIPTION: Attempts to get the `./fromstd` package (which imports `internal/testenv`) and build it. The build (`! go build`) is expected to fail because standard library internal packages cannot be imported by external modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
# Internal packages in the standard library should not leak into modules.
go get ./fromstd
! go build ./fromstd
stderr 'use of internal package internal/testenv not allowed'
```

----------------------------------------

TITLE: Efficient Buffer Encoding/Decoding with Append Methods - encoding/base32, encoding/base64, encoding/hex - Go
DESCRIPTION: New AppendEncode and AppendDecode methods are provided for *Encoding types in encoding/base32 and encoding/base64, and standalone functions in encoding/hex, supporting encoding/decoding directly into provided buffers. Inputs and outputs are byte slices ([]uint8), and error is returned only for decode methods. These APIs reduce allocations and enable in-place processing.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_10

LANGUAGE: Go
CODE:
```
func (enc *Encoding) AppendDecode(dst []uint8, src []uint8) ([]uint8, error)
func (enc *Encoding) AppendEncode(dst []uint8, src []uint8) []uint8
```

LANGUAGE: Go
CODE:
```
func AppendDecode(dst []uint8, src []uint8) ([]uint8, error)
func AppendEncode(dst []uint8, src []uint8) []uint8
```

----------------------------------------

TITLE: Twoer Interface Definition
DESCRIPTION: Interface definition for Twoer type with PackageTwoMeth method, including deprecated version of the method.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p2/golden.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
type Twoer interface {
    PackageTwoMeth
}

type Twoer interface {
    PackageTwoMeth() //deprecated
}
```

----------------------------------------

TITLE: Go Test File with Subtest Implementation
DESCRIPTION: Implementation of a Go test file containing a main test function with a single subtest named 'Sub'. Demonstrates basic subtest structure using t.Run().
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_subtests.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package standalone_sub_test\n\nimport "testing"\n\nfunc Test(t *testing.T) {\n\tt.Run("Sub", func(t *testing.T) {})\n}
```

----------------------------------------

TITLE: Defining Single Version Module Replacement in go.mod - Go
DESCRIPTION: This go.mod file specifies a replacement for a single version of a module: example.com/deprecated/a v1.0.0 is replaced with example.com/deprecated/b v1.0.0. The module is named m and uses Go 1.17. This configuration is designed to test how deprecation is handled when only one version is replaced.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_deprecated_replace.txt#2025-04-22_snippet_2

LANGUAGE: go.mod
CODE:
```
module m

go 1.17

require example.com/deprecated/a v1.0.0

replace example.com/deprecated/a v1.0.0 => example.com/deprecated/b v1.0.0
```

----------------------------------------

TITLE: Adding TextVar function to Go's flag package
DESCRIPTION: Introduces a new function TextVar in the flag package for handling text-based flag variables using the encoding.TextUnmarshaler and encoding.TextMarshaler interfaces.
SOURCE: https://github.com/golang/go/blob/master/api/go1.19.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
func TextVar(encoding.TextUnmarshaler, string, encoding.TextMarshaler, string)
method (*FlagSet) TextVar(encoding.TextUnmarshaler, string, encoding.TextMarshaler, string)
```

----------------------------------------

TITLE: Module A Configuration
DESCRIPTION: Module definition for example.com/a that requires and replaces module example.com/p.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
module example.com/a

go 1.21

require example.com/p v1.0.0

replace example.com/p v1.0.0 => ../p
```

----------------------------------------

TITLE: Specifying Go Module Name in go.mod File - Plaintext
DESCRIPTION: Defines the module name in the standard go.mod file for the Go toolchain package. The snippet sets 'golang.org/toolchain' as the module's canonical name, which is required for Go module-aware builds. Dependencies are handled via Go tooling. The module path must be correctly formed to ensure proper dependency resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.5.linux-amd64.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: Go Module Update Target Configuration
DESCRIPTION: Updated Go module configuration with newer version requirements
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download.txt#2025-04-22_snippet_3

LANGUAGE: plaintext
CODE:
```
module m

go 1.16

require (
	rsc.io/quote v1.5.2
	rsc.io/sampler v1.3.0 // older version than in build list
)
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module declaration for the test package 'coverasm' specifying Go 1.16 as the required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_asm.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module coverasm

go 1.16
```

----------------------------------------

TITLE: Module Definition with Replace Directive
DESCRIPTION: Go module configuration file defining the module name and a replace directive for rsc.io/quote dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-replace.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/cmd

go 1.16

replace rsc.io/quote => rsc.io/quote v1.5.2
```

----------------------------------------

TITLE: Declaring Go Module Metadata for Builds - Go
DESCRIPTION: This go.mod file declares the Go module path as example.com/a.b.c/v2 and sets the minimum required Go version to 1.12. It provides the module-level dependency metadata for all go build and go test operations and is necessary to enable module-aware builds in the test scenarios. Dependencies: None other than a Go installation compatible with go.mod and modules. Inputs include the module path and Go version, outputs are module resolution for build/test commands. There are no required parameters and no explicit constraints besides Go's module system requirements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/clean_binary.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module example.com/a.b.c/v2

go 1.12
```

----------------------------------------

TITLE: Configuring Main Module 'm' with Dependencies and Replacements
DESCRIPTION: This go.mod file defines the main module 'm'. It sets the initial Go version to 1.15, declares requirements for modules 'a' and 'x' at version v0.1.0, and uses `replace` directives to point these dependencies (and others needed transitively or for different versions) to local directories for the test setup.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- go.mod --
module m

go 1.15

require (
	a v0.1.0
	x v0.1.0
)

replace (
	a v0.1.0 => ./a1
	b v0.1.0 => ./b1
	c v0.1.0 => ./c1
	c v0.2.0 => ./c2
	x v0.1.0 => ./x1
)
```

----------------------------------------

TITLE: Implementing Quote Functions in Go
DESCRIPTION: A Go package that provides functions for returning different quotes and sayings. The package exports three functions: Hello returns a greeting, Glass returns a phrase about eating glass, and Go returns a Go programming proverb.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180214005133-e7a685a342c0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

// Hello returns a greeting.
func Hello() string {
	return "Hello, world."
}

// Glass returns a useful phrase for world travelers.
func Glass() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return "I can eat glass and it doesn't hurt me."
}

// Go returns a Go proverb.
func Go() string {
	return "Don't communicate by sharing memory, share memory by communicating."
}
```

----------------------------------------

TITLE: Defining Main Package Go Module
DESCRIPTION: This snippet shows the contents of a go.mod file for a main package module named 'm'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vcs_missing.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Go Module Initialization and Build Commands
DESCRIPTION: Shell commands to initialize a Go module and build the project with GO111MODULE enabled
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_string_alias.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
GO111MODULE=on
go mod init golang.org/issue/27584
go build .
```

----------------------------------------

TITLE: Implementing QUOTE Package Functions
DESCRIPTION: Main package implementation that provides uppercase versions of quotes by wrapping rsc.io/quote package. Includes functions for hello messages, glass eating quote, Go proverb, and optimization truth.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_!q!u!o!t!e_v1.5.3-!p!r!e.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package QUOTE

import (
	"strings"

	"rsc.io/quote"
)

// HELLO RETURNS A GREETING.
func HELLO() string {
	return strings.ToUpper(quote.Hello())
}

// GLASS RETURNS A USEFUL PHRASE FOR WORLD TRAVELERS.
func GLASS() string {
	return strings.ToUpper(quote.GLASS())
}

// GO RETURNS A GO PROVERB.
func GO() string {
	return strings.ToUpper(quote.GO())
}

// OPT RETURNS AN OPTIMIZATION TRUTH.
func OPT() string {
	return strings.ToUpper(quote.OPT())
}
```

----------------------------------------

TITLE: Setting Git Author and Committer Information in Shell
DESCRIPTION: Sets up Git author and committer environment variables for repository initialization. These commands configure the name and email for both author and committer to be used in commits.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2sub.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GIT_AUTHOR_NAME='Bryan C. Mills'
env GIT_AUTHOR_EMAIL='bcmills@google.com'
env GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
env GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL
```

----------------------------------------

TITLE: Toolchain Version Test Script
DESCRIPTION: Shell script containing test cases for Go toolchain version management, including checks for version upgrades based on go.mod settings and GOTOOLCHAIN environment variable configurations
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_godebug_trace.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
env GODEBUG=toolchaintrace=1
env TESTGO_VERSION=go1.21.0
env TESTGO_VERSION_SWITCH=switch
env GOTOOLCHAIN=auto

go mod init m
go mod edit -go=1.21.1
go version
stderr -count=1 'go: upgrading toolchain to go1.21.1 \(required by go line in go.mod; upgrade allowed by GOTOOLCHAIN=auto\)'
stderr -count=1 'go: using go1.21.1 toolchain from cache located at .*'
stdout 'go version go1.21.1'
rm go.mod
```

----------------------------------------

TITLE: Package Usage Example
DESCRIPTION: Simple Go package that imports rsc.io/quote module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_skip_write.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package use

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Root Module Configuration
DESCRIPTION: Main go.mod file defining module replacements and initial requirements for the project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue65363.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example

replace (
	example.net/a v0.1.0 => ./a
	example.net/b v0.1.0 => ./b1
	example.net/b v0.2.0 => ./b2
	example.net/c v0.1.0 => ./c1
	example.net/c v0.2.0 => ./c2
	example.net/d v0.1.0 => ./d
)

require (
	example.net/b v0.1.0
)
```

----------------------------------------

TITLE: Go Module Definition with Replace Directive
DESCRIPTION: Defines a Go module with a replace directive that points an alpha version to an older release, and requires a package that depends on a beta version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_replace_old.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module golang.org/issue46659

go 1.17

replace example.com/missingpkg v1.0.1-alpha => example.com/missingpkg v1.0.0

require example.com/usemissingpre v1.0.0

require example.com/missingpkg v1.0.1-beta // indirect
```

----------------------------------------

TITLE: Main Module Definition (m1/go.mod)
DESCRIPTION: Defines the primary module 'example.com/m1' with Go 1.21 requirement and local replacement for m2 module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_issue56222.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/m1

go 1.21

require example.com/m2 v1.0.0
replace example.com/m2 => ../m2
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition specifying Go version 1.21.99
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_loop.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m
go 1.21.99
```

----------------------------------------

TITLE: Defining Go Module Configuration
DESCRIPTION: Simple go.mod file that defines a module named 'x' without any dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_nodeps.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module x
```

----------------------------------------

TITLE: Go Work Usage with Error Handling
DESCRIPTION: This snippet demonstrates the usage of the 'go work use' command with error handling for invalid directory paths. It checks for cases where the specified directory does not exist or is not a valid directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_only_dirs.txt#_snippet_0

LANGUAGE: Go
CODE:
```
! go work use foo bar baz
stderr '^go: foo is not a directory'
stderr '^go: directory baz does not exist'
cmp go.work go.work_want
```

----------------------------------------

TITLE: Defining Go Module in go.mod File
DESCRIPTION: This snippet shows the contents of a go.mod file, which defines a module named 'm' and specifies the Go version 1.18 as the minimum required version for this module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_404_meta.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module m

go 1.18
```

----------------------------------------

TITLE: Defining Go Module for Example Test
DESCRIPTION: Declares the Go module 'example' and specifies the Go version 1.20 as a requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_timeout_stdin.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example

go 1.20
```

----------------------------------------

TITLE: Module Definition for Test Package
DESCRIPTION: The go.mod file defining the module gobuild.example.com/x/y/z used in the tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gobuild_import.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module gobuild.example.com/x/y/z
```

----------------------------------------

TITLE: Defining a Basic Go Module
DESCRIPTION: A minimal Go module definition using go.mod. This module is named 'x' and doesn't specify any dependencies or requirements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_case_cgo.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module x
```

----------------------------------------

TITLE: Implementing HKDF Functions with Generic Types in Go
DESCRIPTION: New functions in the crypto/hkdf package using generic types for hash functions.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
func Expand[$0 hash.Hash](func() $0, []uint8, string, int) ([]uint8, error)
func Extract[$0 hash.Hash](func() $0, []uint8, []uint8) ([]uint8, error)
func Key[$0 hash.Hash](func() $0, []uint8, []uint8, string, int) ([]uint8, error)
```

----------------------------------------

TITLE: Module B Configuration
DESCRIPTION: Go module configuration for package b including its dependency on outer package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_issue60313.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.net/b

go 1.21

require example.net/outer v0.1.0
```

----------------------------------------

TITLE: Go Subtest Implementation
DESCRIPTION: Implementation of a Go test file that contains a test with a subtest named 'Sub'. Shows the basic structure of using t.Run() for creating subtests in Go.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_tests_with_subtests.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package standalone_sub_test

import "testing"

func Test(t *testing.T) {
	t.Run("Sub", func(t *testing.T) {})
}
```

----------------------------------------

TITLE: Main Package with Quote Import
DESCRIPTION: Main package demonstrating usage of rsc.io/quote/v3 package for printing a quote.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_replace.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"rsc.io/quote/v3"
)

func main() {
	fmt.Println(quote.GoV3())
}
```

----------------------------------------

TITLE: Defining a Go Package in Golang Module
DESCRIPTION: This Go code snippet defines a basic package within a Go module, demonstrating how packages are structured inside modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path.txt#2025-04-22_snippet_4

LANGUAGE: Golang
CODE:
```
-- mod/foo.go --
package foo
```

----------------------------------------

TITLE: Defining and Using Replace Directives in go.mod - Go
DESCRIPTION: This go.mod snippet sets the module to 'golang.org/issue/root', specifies Go version 1.12, and introduces replace directives mapping external module versions to local directories. It demonstrates how to force certain dependencies to be resolved against local copies, useful for testing edge cases or dependency cycles. Dependencies must exist in the specified folders, and this setup influences the module resolution in downstream Go commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_1

LANGUAGE: go.mod
CODE:
```
module golang.org/issue/root

go 1.12

replace (
	golang.org/issue/mirror v0.1.0 => ./mirror-v0.1.0
	golang.org/issue/pkg v0.1.0 => ./pkg-v0.1.0
	golang.org/issue/root v0.1.0 => ./root-v0.1.0
)

require golang.org/issue/mirror v0.1.0
```

----------------------------------------

TITLE: Filesystem testing utilities in testing/fstest package
DESCRIPTION: Provides utilities for testing implementations of the fs.FS interface. Includes TestFS for checking filesystem compliance and MapFS for creating in-memory filesystems for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
func TestFS(fs.FS, ...string) error
method (MapFS) Glob(string) ([]string, error)
method (MapFS) Open(string) (fs.File, error)
method (MapFS) ReadDir(string) ([]fs.DirEntry, error)
method (MapFS) ReadFile(string) ([]uint8, error)
method (MapFS) Stat(string) (fs.FileInfo, error)
method (MapFS) Sub(string) (fs.FS, error)
type MapFS map[string]*MapFile
type MapFile struct
type MapFile struct, Data []uint8
type MapFile struct, ModTime time.Time
type MapFile struct, Mode fs.FileMode
type MapFile struct, Sys interface{}
```

----------------------------------------

TITLE: Module Definition for Main Package
DESCRIPTION: Go module configuration file for 'example.com/foo' package that defines module dependencies and replacement directives. It requires the internal package and specifies a local replacement path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_files.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/foo
go 1.12
require example.com/internal v0.0.0
replace example.com/internal => ../internal
```

----------------------------------------

TITLE: Implementing a Basic Function in pkg1 - Go
DESCRIPTION: This code snippet defines a simple Go package named 'pkg1' containing a function F that prints 'pkg1' to the standard output. It requires the 'fmt' package and demonstrates basic package and function structure; this function serves as the target for coverage testing. It takes no parameters and returns no values.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_statements.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package pkg1

import "fmt"

func F() {
	fmt.Println("pkg1")
}
```

----------------------------------------

TITLE: Comparing IP Address and Port Structures - net/netip - Go
DESCRIPTION: Adds Compare(AddrPort) int to AddrPort, allowing sorting or comparison of address-port combinations. Returns negative, zero, or positive integer according to relative order.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_24

LANGUAGE: Go
CODE:
```
func (ap AddrPort) Compare(AddrPort) int
```

----------------------------------------

TITLE: Defining Go Workspace Configuration
DESCRIPTION: This snippet shows the content of the go.work file, which specifies the Go version and the modules to be used in the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_module_not_in_go_work.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go 1.18

use ./b
```

----------------------------------------

TITLE: Declaring Go Module Name in .mod File (Go Module)
DESCRIPTION: This snippet shows the content of a go.mod file. It declares the module path as 'example.com/incompatiblewithsub'. This is the root file defining a Go module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_incompatiblewithsub_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: gomod
CODE:
```
module example.com/incompatiblewithsub
```

----------------------------------------

TITLE: Main Package Execution in Go
DESCRIPTION: This Go code defines the `main` package which imports "my.pkg" and prints the value of `pkg.Text`. It requires "pkg.Text" to be set through a build process or default to "unset".
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_link_x_import_path_escape.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- main/main.go --
package main

import "my.pkg"

func main() {
	println(pkg.Text)
}
```

----------------------------------------

TITLE: Fetching a Go Module Dependency (Shell)
DESCRIPTION: Uses 'go get' to download and add the module 'rsc.io/QUOTE' as a dependency to the current module ('m'). This command updates the 'go.mod' file and is expected to update the 'go.sum' file with checksums for the fetched module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_sum_noroot.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go get rsc.io/QUOTE
```

----------------------------------------

TITLE: Testing 'go doc' Command Outside Module
DESCRIPTION: Demonstrates the behavior of 'go doc' when run outside a module context, including success for standard library packages and failure for external packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_7

LANGUAGE: shell
CODE:
```
cd needmod
go doc
cd ..

go doc ./needmod

go doc fmt

! go doc example.com/version
stderr 'doc: no required module provides package example.com/version: go.mod file not found in current directory or any parent directory; see ''go help modules''$'
```

----------------------------------------

TITLE: Struct Type Definitions in Go
DESCRIPTION: Struct type definitions with various field types and embedded structs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p1/golden.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
type ByteStruct struct {
    B uint8
    R int32
}

type Codec struct {
    Func func(int, int) int
}

type S struct {
    Public *int
    PublicTime Time
}

type S2 struct {
    Extra bool
    embedded S
}
```

----------------------------------------

TITLE: Go Module Definition for Race Condition Testing
DESCRIPTION: This snippet defines a Go module named 'testrace' with Go version 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_cover_mode_issue20435.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module testrace

go 1.16
```

----------------------------------------

TITLE: Defining Go Module with Replace Directives for Overlay Testing
DESCRIPTION: The go.mod file defines a module 'm' and specifies Go 1.16 as the minimum supported version. It includes a TODO comment about how overlays work with go.mod, especially in readonly mode.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
// TODO(matloob): how do overlays work with go.mod (especially if mod=readonly)
module m

go 1.16
```

----------------------------------------

TITLE: Defining Go Package with Import
DESCRIPTION: This Go code snippet defines a main package and imports the 'bar' package. It serves as a placeholder or example file for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fileline.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package main; import "bar"
```

----------------------------------------

TITLE: Main Module Configuration
DESCRIPTION: Primary go.mod file defining the module, its Go version requirement, and dependencies including replacement directives
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_indirect.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/tidy

go 1.16

require (
	example.net/incomplete v0.1.0
	example.net/indirect v0.2.0 // indirect
	example.net/toolow v0.1.0
)

replace (
	example.net/incomplete v0.1.0 => ./incomplete
	example.net/indirect v0.1.0 => ./indirect.1
	example.net/indirect v0.2.0 => ./indirect.2
	example.net/toolow v0.1.0 => ./toolow
)
```

----------------------------------------

TITLE: Go Module File with Go Version and Module Path
DESCRIPTION: Shows a basic go.mod file with module path and Go version. This is the initialization template produced by 'go mod init'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
module x.x/y/z

go $goversion
```

----------------------------------------

TITLE: Module Declaration in go.mod File
DESCRIPTION: Declares the module name in the go.mod file for the Go toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-amd64.txt#2025-04-22_snippet_3

LANGUAGE: plaintext
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module named 'm' using Go version 1.17.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_pkgerror.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module m

go 1.17
```

----------------------------------------

TITLE: Declaring Go Module Name - go.mod/Text
DESCRIPTION: This snippet declares the module path for the Go toolchain using the standard module declaration line in a go.mod or related metadata file. The line 'golang.org/toolchain' is the canonical import path used to uniquely identify this module in Go projects and dependency management systems. This line has no side effects or parameters; it serves as a pointer for Go's tooling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.23.9.linux-amd64.txt#2025-04-22_snippet_1

LANGUAGE: text
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file specifying the module path and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/or401.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/auth/or401

go 1.13
```

----------------------------------------

TITLE: Setting Up Go Module
DESCRIPTION: Defines a Go module named 'example.com/cov', essential for organizing the package and managing its dependencies when GO111MODULE is on.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_multiple_mains.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/cov
```

----------------------------------------

TITLE: Adding Second Commit After Tag
DESCRIPTION: Copies new version of main.go, adds it to the repository, and commits the changes with a message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/commit-after-tag.txt#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
at 2019-07-15T17:17:27-04:00
cp _next/main.go main.go
git add main.go
git commit -m 'add init function'
```

----------------------------------------

TITLE: Go Test File with Subtest Implementation
DESCRIPTION: Implementation of a Go test file containing a test with a subtest named 'Sub'. Demonstrates the basic structure for creating subtests using t.Run().
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_subtests.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package standalone_sub_test

import "testing"

func Test(t *testing.T) {
	t.Run("Sub", func(t *testing.T) {})
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines the module name and Go version requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_external_undef.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module issue47993

go 1.16
```

----------------------------------------

TITLE: Quote Package Implementation in Go
DESCRIPTION: Implementation of the rsc.io/quote package which provides functions for retrieving various quotes and sayings. The package contains three functions: Hello(), Glass(), and Go() which return different fixed strings.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.2.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

// Hello returns a greeting.
func Hello() string {
	return "Hello, world."
}

// Glass returns a useful phrase for world travelers.
func Glass() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return "I can eat glass and it doesn't hurt me."
}

// Go returns a Go proverb.
func Go() string {
	return "Don't communicate by sharing memory, share memory by communicating."
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: This snippet defines a Go module configuration with the module name 'x' targeting Go version 1.12. It is foundational for using Go modules in a project and must be present in the root of the module's directory structure. This configuration helps in managing dependencies and versioning.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_upgrade_pseudo.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
-- go.mod --
module x

go 1.12
```

----------------------------------------

TITLE: Defining Go Module and Dependencies in go.mod
DESCRIPTION: This `go.mod` file defines a Go module named 'm' using Go version 1.20. It declares a direct dependency on `rsc.io/quote` version v1.5.2 and lists several indirect dependencies (`golang.org/x/text`, `rsc.io/sampler`, `rsc.io/testonly`) required by the direct dependency or its transitive dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/malformed_gosum_issue62345.txt#2025-04-22_snippet_1

LANGUAGE: gomod
CODE:
```
-- go.mod --
module m

go 1.20

require rsc.io/quote v1.5.2

require (
	golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c // indirect
	rsc.io/sampler v1.3.0 // indirect
	rsc.io/testonly v1.0.0 // indirect
)
```

----------------------------------------

TITLE: Environment Configuration for Go Module Tests
DESCRIPTION: Initial environment setup defining core Go module configuration variables including GO111MODULE, GOSUMDB, and GOPROXY.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_proxy.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
env sumdb=$GOSUMDB
env proxy=$GOPROXY
env GOPROXY GONOPROXY GOSUMDB GONOSUMDB
```

----------------------------------------

TITLE: Archive ZIP Methods
DESCRIPTION: Methods for opening files within ZIP archives using both ReadCloser and Reader types. Returns an fs.File interface and potential error.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
func (*ReadCloser) Open(string) (fs.File, error)
func (*Reader) Open(string) (fs.File, error)
```

----------------------------------------

TITLE: Environment Variable Unsetting API - os and syscall Packages - Go
DESCRIPTION: Adds Unsetenv(string) error functions to os and syscall, removing an environment variable from the process environment. Accepts the name of the variable as input; errors are returned on failure. Commonly needed for testing, shell wrappers, and modified execution environments.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_20

LANGUAGE: Go
CODE:
```
func Unsetenv(string) error // in os
func Unsetenv(string) error // in syscall
```

----------------------------------------

TITLE: Adding Text Generation Function to crypto/rand Package in Go
DESCRIPTION: New function to generate random text in the crypto/rand package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
func Text() string
```

----------------------------------------

TITLE: Defining the Go Module (Go)
DESCRIPTION: This `go.mod` file defines a Go module named 'simple' and specifies the Go language version 1.21. It serves as the root declaration for the Go project, enabling dependency management and proper build behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_swig.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
-- go.mod --
module simple

go 1.21
```

----------------------------------------

TITLE: Implementing Generic Slice Functions in slices Package
DESCRIPTION: This snippet introduces a wide range of generic functions for slice operations in the slices package. It includes functions for searching, cloning, comparing, sorting, and manipulating slices with type parameters.
SOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_12

LANGUAGE: Go
CODE:
```
func BinarySearch[$0 interface{ ~[]$1 }, $1 cmp.Ordered]($0, $1) (int, bool)
func Clone[$0 interface{ ~[]$1 }, $1 interface{}]($0) $0
func Contains[$0 interface{ ~[]$1 }, $1 comparable]($0, $1) bool
func Sort[$0 interface{ ~[]$1 }, $1 cmp.Ordered]($0)
func Reverse[$0 interface{ ~[]$1 }, $1 interface{}]($0)
```

----------------------------------------

TITLE: Minimal Go Program for Module 'x' (Go)
DESCRIPTION: Defines a basic Go program located in 'x/main.go'. It contains the main package declaration and an empty main function, serving as the entry point for an executable. This file is part of the 'example.com/x' module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_path.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
-- x/main.go --
package main

func main() {}
```

----------------------------------------

TITLE: Testing Go Module Dependency Upgrade
DESCRIPTION: This snippet tests the behavior of 'go get -u' command for upgrading dependencies in a Go module. It checks if the command correctly upgrades the 'rsc.io/quote' package when it's used in the code.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_indirect.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go get -u
go list -m all
stdout 'quote v1.5.2$'
grep 'rsc.io/quote v1.5.2$' go.mod
```

----------------------------------------

TITLE: Simple Hello World Program in Go
DESCRIPTION: Basic Go program that prints 'hello, world' using the main function and fmt.Println.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code6.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
func main() {
	fmt.Println("hello, world")
}
```

----------------------------------------

TITLE: Module 'i' Definition
DESCRIPTION: The go.mod file for module 'i' that simply defines the module name and Go version. This module is required by x v0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_tidy.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
module i
go 1.13
```

----------------------------------------

TITLE: Embedding Files in Go Using `embed` Package
DESCRIPTION: The Go file leverages the `embed` package to embed files matching the pattern `x*t*t` into the `X` variable, of type `embed.FS`. This embedded filesystem can be used to read file content during runtime. The pattern captures all files starting with 'x' and ending with 't'. Required dependency is the `embed` package which is built-in from Go 1.16 onward.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package p

import "embed"

//go:embed x*t*t
var X embed.FS
```

----------------------------------------

TITLE: Testing Go Workspace Module Replacement Behavior
DESCRIPTION: This script tests Go's handling of module replacements in a workspace. It checks if replaces of the main module are ignored in workspace modules and if replaces in the go.work file are properly disallowed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_main_module.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
go list example.com/dep

cp replace_main_module.go.work go.work
! go list example.com/dep
stderr 'go: workspace module example.com/mainmoda is replaced at all versions in the go.work file. To fix, remove the replacement from the go.work file or specify the version at which to replace the module.'
```

----------------------------------------

TITLE: Initializing Git Repository with Initial Commit
DESCRIPTION: Creates a new Git repository, adds files, makes an initial commit, and renames the default branch to master.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-old.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
git init

at 2018-04-25T10:59:24-04:00
git add p1 p2
git commit -m 'initial commit'
git branch -m master
```

----------------------------------------

TITLE: Running Go Tests with Coverage (Bash)
DESCRIPTION: This code demonstrates the use of the 'go test' command with different coverage and race detector flags in a Bash environment. It shows how to disable module-aware mode, skip tests based on build tags, and check the standard output for test pass and coverage results. These commands do not require any dependencies other than Go, and are executed on the command line as part of a test workflow.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_atomic_pkgall.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=off

go test -coverpkg=all -covermode=atomic x
stdout ok[\s\S]+?coverage

go test -coverpkg=all -race x
stdout ok[\s\S]+?coverage

```

----------------------------------------

TITLE: Setting GO111MODULE Environment Variable
DESCRIPTION: Sets the GO111MODULE environment variable to 'on' to ensure module-aware mode is enabled for Go commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_import.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Module Version Commands
DESCRIPTION: Shell commands demonstrating Go module version querying and resolution behavior
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

go list -m -versions rsc.io/quote
go list -m rsc.io/quote@latest
go list -m rsc.io/quote@v1
go list -m rsc.io/quote@v1.5
go list -m rsc.io/quote@>v1.5.2
go list -m rsc.io/quote@<v1.5.4
go list -m rsc.io/quote@>v1.5.3
go list -m -e -f '{{.Error.Err}}' rsc.io/quote@>v1.5.3
```

----------------------------------------

TITLE: Go Module A Implementation
DESCRIPTION: Main module that imports and uses module B. Includes go.mod file with dependencies on modules B and Z v1.0.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/a

go 1.18

require example.com/b v1.0.0
require example.com/z v1.0.0
```

LANGUAGE: go
CODE:
```
package main

import "example.com/b"

func main() {
	b.B()
}
```

----------------------------------------

TITLE: Upgrading Go Version and Managing Toolchain
DESCRIPTION: This snippet shows how to upgrade the Go version, add a specific toolchain version, and then remove it. It demonstrates the interaction between Go version and toolchain version management.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go get go@1.22.3
go get toolchain@go1.100.0
go get go@1.22.3 toolchain@1.22.3
```

----------------------------------------

TITLE: Defining Go Module Dependencies and Replacements
DESCRIPTION: This go.mod file defines the module, its Go version requirement, and specifies dependencies and replacements for 'printversion' and 'version' modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_replace.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module golang.org/issue/37392
go 1.14
require (
	example.com/printversion v0.1.0
)
replace (
	example.com/printversion => example.com/printversion v1.0.0
	example.com/version v1.0.0 => example.com/version v1.0.1
)
```

----------------------------------------

TITLE: Unit Testing a Go Function with testing Package (Go)
DESCRIPTION: This code defines a Go test file in the 'x' package which imports the 'testing' package and provides a test function TestF. The test function simply calls F to ensure the function is reachable and compilable, aiding code coverage reports. It relies on Go's standard 'testing' package and requires both x.go and the test file to be in the same package directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_atomic_pkgall.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package x

import "testing"

func TestF(t *testing.T) { F() }

```

----------------------------------------

TITLE: Defining Module and Packages - Go
DESCRIPTION: This Go code defines the module example and encapsulates packages p, q, and r. These snippets illustrate how import cycles can occur, with package files referencing each other indirectly, leading to errors when running tests. The module requires Go version 1.20.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_cycle.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example
go 1.20
```

LANGUAGE: go
CODE:
```
package p
```

LANGUAGE: go
CODE:
```
package p
import "example/q"
```

LANGUAGE: go
CODE:
```
package q
import "example/r"
```

LANGUAGE: go
CODE:
```
package r
import "example/p"
```

----------------------------------------

TITLE: Defining Go Module and Main Function
DESCRIPTION: This snippet shows the basic structure of a Go module definition and a minimal main function. It sets up a module named 'example.com/m' and defines an empty main function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_build_settings.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
-- go.mod --
module example.com/m

go 1.18
-- m.go --
package main

func main() {}
```

----------------------------------------

TITLE: Main Go Application Code
DESCRIPTION: Simple Go application with an empty main function for testing version stamping.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_version_stamping_git.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

func main() {
}
```

----------------------------------------

TITLE: Defining Go Module 'coverdep' (go.mod)
DESCRIPTION: This `go.mod` file declares a Go module named 'coverdep'. It specifies that the module requires Go version 1.16 or later. This file is essential for managing dependencies and build properties within the Go ecosystem.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dash_c.txt#2025-04-22_snippet_1

LANGUAGE: gomod
CODE:
```
-- go.mod --
module coverdep

go 1.16
```

----------------------------------------

TITLE: Implementing Minimal Go Program for gccgo Test
DESCRIPTION: This snippet contains a minimal Go program (main.go) used to test compilation with both default Go compiler and gccgo.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_m.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main
func main() {}
```

----------------------------------------

TITLE: Minimal Go Program for Plugin Testing
DESCRIPTION: A minimal Go program with an empty main function used for testing the plugin build mode functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_plugin_reproducible.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Go Generate Variable Substitution Test
DESCRIPTION: Test file demonstrating variable substitution in go generate commands using built-in variables like $GOARCH, $GOFILE, $GOLINE, and $GOPACKAGE.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test go generate variable substitution.

//go:generate echo $GOARCH $GOFILE:$GOLINE ${GOPACKAGE}abc xyz$GOPACKAGE/$GOFILE/123

package p
```

----------------------------------------

TITLE: Language Preference Management in Go
DESCRIPTION: Functions for managing user language preferences, including environment variable-based defaults and text lookup based on preferences.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.3.1.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
func DefaultUserPrefs() []language.Tag {
	var prefs []language.Tag
	for _, k := range []string{"LC_ALL", "LC_MESSAGES", "LANG"} {
		if env := os.Getenv(k); env != "" {
			prefs = append(prefs, language.Make(env))
		}
	}
	return prefs
}
```

----------------------------------------

TITLE: Crypto Package Interface Definition
DESCRIPTION: Definition of the Decrypter interface in the crypto package, which specifies methods for decryption and public key access.
SOURCE: https://github.com/golang/go/blob/master/api/go1.5.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
type Decrypter interface {
    Decrypt(io.Reader, []uint8, DecrypterOpts) ([]uint8, error)
    Public() PublicKey
}
```

----------------------------------------

TITLE: Module Replacement Commands
DESCRIPTION: Shell commands demonstrating module replacement operations and version management using go mod edit and go get.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_replaced.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
cp go.mod go.mod.orig

env oldGOPROXY=$GOPROXY

go mod edit -replace=example.com/x=./x
go get example.com/x

go list -m example.com/x
go mod edit -replace=example.com/x@v0.1.0=./x
go mod edit -replace=example.com/x@v0.2.0=./x

go get example.com/x
go list -m example.com/x

go get example.com/x@<v0.2.0
go list -m example.com/x
```

----------------------------------------

TITLE: Downloading Go Modules with Specific Versions
DESCRIPTION: This snippet shows how to download specific versions of Go modules using the 'go mod download' command. It demonstrates downloading modules from example.com with different versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_newcycle.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

# Download modules to avoid stderr chatter
go mod download example.com@v1.0.0
go mod download example.com/newcycle/a@v1.0.0
go mod download example.com/newcycle/a@v1.0.1
go mod download example.com/newcycle/b@v1.0.0
```

----------------------------------------

TITLE: Executing Go Tests with CPU Profiling
DESCRIPTION: Demonstrates how to execute Go tests while generating a CPU profile output to a specific file. The command 'go test' is used with the '-cpuprofile' option to generate the profile. It is essential to ensure that the directory specified in the output path exists, and it's writable by the process.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cpu_profile_twice.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -o=$WORK/x.test -cpuprofile=$WORK/cpu_profile_twice.out x
rm $WORK/cpu_profile_twice.out
```

LANGUAGE: shell
CODE:
```
go test -o=$WORK/x.test -cpuprofile=$WORK/cpu_profile_twice.out x
exists $WORK/cpu_profile_twice.out
```

----------------------------------------

TITLE: OS File Mode Constants and Methods in Go
DESCRIPTION: Definitions of file mode constants and methods for the os package, including various file type flags and permission modes.
SOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
type FileMode uint32

const (
    ModeDir FileMode
    ModeAppend FileMode
    ModeExclusive FileMode
    ModeTemporary FileMode
    ModeSymlink FileMode
    ModeDevice FileMode
    ModeNamedPipe FileMode
    ModeSocket FileMode
    ModeSetuid FileMode
    ModeSetgid FileMode
    ModeCharDevice FileMode
    ModeSticky FileMode
    ModeIrregular FileMode
    ModePerm FileMode
)
```

----------------------------------------

TITLE: Defining Opt Function in Go
DESCRIPTION: Returns an optimization truth about programming by calling OptV2() from an imported module. The quote is attributed to Ken Thompson.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
// Opt returns an optimization truth.
func Opt() string {
	// Wisdom from ken.
	return quote.OptV2()
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic go.mod file declaring the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_main.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module rsc.io/quote

go 1.16
```

----------------------------------------

TITLE: Defining Go Module `example.net/pkgadded` v1.1.0 (Test Context .mod)
DESCRIPTION: This snippet represents the content of a `.mod` file used within a test context. It defines the Go module `example.net/pkgadded` and specifies Go version 1.16, corresponding to the module's state at version v1.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.1.0.txt#2025-04-22_snippet_0

LANGUAGE: gomod
CODE:
```
module example.net/pkgadded

go 1.16
```

----------------------------------------

TITLE: Gofmt Formatted Hello World
DESCRIPTION: Hello world message formatted according to Go formatting standards.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/para.txt#2025-04-22_snippet_1

LANGUAGE: text
CODE:
```
Hello, world.
This is a paragraph.
```

----------------------------------------

TITLE: Defining the Go Module (Go Mod)
DESCRIPTION: This `go.mod` file defines the root of the Go module named 'm'. It's a prerequisite for the Go build system to correctly process the packages within this test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path.txt#2025-04-22_snippet_1

LANGUAGE: gomod
CODE:
```
-- go.mod --
module m
```

----------------------------------------

TITLE: Defining Expected Go Work File
DESCRIPTION: This snippet shows the expected content of the go.work file after running the go work commands. It includes the Go version and use directives for multiple directories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_init_path.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
go $goversion

use (
	.
	..
	./foo/bar
)
```

----------------------------------------

TITLE: Running Go Tests with Coverage and Race Detection
DESCRIPTION: This shell script navigates through different package directories and runs Go tests with coverage and race detection. It uses the -cover, -coverpkg, and -race flags to enable comprehensive testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_empty.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
[!race] skip

cd $GOPATH/src/empty/pkg
go test -cover -coverpkg=. -race

[short] stop # Only run first case in short mode

cd $GOPATH/src/empty/test
go test -cover -coverpkg=. -race

cd $GOPATH/src/empty/xtest
go test -cover -coverpkg=. -race

cd $GOPATH/src/empty/pkgtest
go test -cover -coverpkg=. -race

cd $GOPATH/src/empty/pkgxtest
go test -cover -coverpkg=. -race

cd $GOPATH/src/empty/pkgtestxtest
go test -cover -coverpkg=. -race

cd $GOPATH/src/empty/testxtest
go test -cover -coverpkg=. -race
```

----------------------------------------

TITLE: Module C Configuration (c/go.mod)
DESCRIPTION: Configuration file for module c.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module example.com/c

go 1.15
```

----------------------------------------

TITLE: Random Number Generation Suite - math/rand/v2 - Go
DESCRIPTION: math/rand/v2 introduces a broad set of random number generation utilities with new functions, methods, and structures to support various distributions, types, and deterministic sources. This includes functions for creating random sources (ChaCha8, PCG, Zipf), generic randoms, and buffer-based APIs. The additions expand flexibility and type safety for random data generation. Dependencies vary, including definitions for Source, Rand, Zipf, etc. Most functions mimic their v1 analogs but with improved APIs and generics.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_20

LANGUAGE: Go
CODE:
```
func ExpFloat64() float64
func Float32() float32
func Float64() float64
func Int() int
func Int32() int32
func Int32N(int32) int32
func Int64() int64
func Int64N(int64) int64
func IntN(int) int
func N[$0 intType]($0) $0
func New(Source) *Rand
func NewChaCha8([32]uint8) *ChaCha8
func NewPCG(uint64, uint64) *PCG
func NewZipf(*Rand, float64, float64, uint64) *Zipf
func NormFloat64() float64
func Perm(int) []int
func Shuffle(int, func(int, int))
func Uint32() uint32
func Uint32N(uint32) uint32
func Uint64() uint64
func Uint64N(uint64) uint64
func UintN(uint) uint
func (c *ChaCha8) MarshalBinary() ([]uint8, error)
func (c *ChaCha8) Seed([32]uint8)
func (c *ChaCha8) Uint64() uint64
func (c *ChaCha8) UnmarshalBinary([]uint8) error
func (p *PCG) MarshalBinary() ([]uint8, error)
func (p *PCG) Seed(uint64, uint64)
func (p *PCG) Uint64() uint64
func (p *PCG) UnmarshalBinary([]uint8) error
func (r *Rand) ExpFloat64() float64
func (r *Rand) Float32() float32
func (r *Rand) Float64() float64
func (r *Rand) Int() int
func (r *Rand) Int32() int32
func (r *Rand) Int32N(int32) int32
func (r *Rand) Int64() int64
func (r *Rand) Int64N(int64) int64
func (r *Rand) IntN(int) int
func (r *Rand) NormFloat64() float64
func (r *Rand) Perm(int) []int
func (r *Rand) Shuffle(int, func(int, int))
func (r *Rand) Uint32() uint32
func (r *Rand) Uint32N(uint32) uint32
func (r *Rand) Uint64() uint64
func (r *Rand) Uint64N(uint64) uint64
func (r *Rand) UintN(uint) uint
func (z *Zipf) Uint64() uint64
type ChaCha8 struct
type PCG struct
type Rand struct
type Zipf struct
type Source interface { Uint64 }
func (Source) Uint64() uint64
```

----------------------------------------

TITLE: Writing Connection/File Data to Writer - net and os - Go
DESCRIPTION: Adds WriteTo(io.Writer) (int64, error) method to *TCPConn in net and *File in os, allowing direct copying of content to an io.Writer. Accepts the destination writer, returns the number of bytes written and any error.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_21

LANGUAGE: Go
CODE:
```
func (c *TCPConn) WriteTo(w io.Writer) (int64, error)
func (f *File) WriteTo(w io.Writer) (int64, error)
```

----------------------------------------

TITLE: Setting and Testing Go Module Environment - Shell
DESCRIPTION: This shell snippet demonstrates configuring the Go module environment using environment variables and commands to ensure required and indirect dependencies are handled by Go's module system. It uses GO111MODULE=on to enable module mode, GOFLAGS=-mod=readonly to prevent implicit changes, and issues go mod graph, go list -m all, and go list all to validate module graph, build list, and package resolution. Expected outputs (stdout) are checked to verify proper dependency resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

env GOFLAGS=-mod=readonly

go mod graph
stdout i@v0.1.0

go list -m all
stdout '^i v0.1.0'

go list all
stdout '^i$'
```

----------------------------------------

TITLE: Implementing Generic Clone Function in Go
DESCRIPTION: Defines a generic Clone function that works with slice types. The function takes a slice of any type and returns a new slice of the same type. There's also a deprecated version of the Clone function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p4/golden.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
func Clone[$0 interface{ ~[]$1 }, $1 interface{}]($0) $0
```

LANGUAGE: Go
CODE:
```
func Clone //deprecated
```

----------------------------------------

TITLE: Method Declarations in Go
DESCRIPTION: Method declarations for various struct types with different receiver types (pointer and value receivers).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p1/golden.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
method (*B) JustOnB()
method (*B) OnBothTandBPtr()
method (*T) JustOnT()
method (B) OnBothTandBVal()
method (S) StructValueMethod()
method (S2) StructValueMethodNamedRecv()
```

----------------------------------------

TITLE: Initializing a Go Module with go mod init (Bash)
DESCRIPTION: Initializes a new Go module within the current directory. The command `go mod init` creates a `go.mod` file, essential for managing dependencies in Go projects (version 1.11+). The module path is specified as `golang.org/issue/33855`, likely related to a specific issue or test case.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_mod_empty.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
go mod init golang.org/issue/33855
```

----------------------------------------

TITLE: Empty Go Module Definition
DESCRIPTION: A minimal Go module definition for the 'a' module, specifying the module path and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/user/a

go 1.11
```

----------------------------------------

TITLE: Original go.mod File with Module and Replacement Definitions
DESCRIPTION: The original go.mod file that defines the main module with a dependency on module 'a' and multiple replacements for modules a, b, i, and two versions of x. This setup is used to test Go's module resolution behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_tidy.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module main

go 1.13

require a v0.0.0

replace (
	a v0.0.0 => ./a
	b v0.0.0 => ./b
	i v0.0.0 => ./i
	x v0.1.0 => ./x1
	x v0.2.0 => ./x2
)
```

----------------------------------------

TITLE: HTML Templates and IO Formatting in Go
DESCRIPTION: Details constants and functions relevant for handling HTML templates and directory entry formatting. ErrJSTemplate constant is defined along with functions like FormatDirEntry and FormatFileInfo to aid in formatting operations within file systems.
SOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
pkg html/template, const ErrJSTemplate = 12 #59584
```

LANGUAGE: Go
CODE:
```
pkg html/template, const ErrJSTemplate ErrorCode #59584
```

LANGUAGE: Go
CODE:
```
pkg io/fs, func FormatDirEntry(DirEntry) string #54451
```

LANGUAGE: Go
CODE:
```
pkg io/fs, func FormatFileInfo(FileInfo) string #54451
```

----------------------------------------

TITLE: Importing Compatible Packages
DESCRIPTION: Imports packages to ensure compatibility with the module requirements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package compatible

import (
	_ "example.com/version"
	_ "example.net/lazy"
)
```

----------------------------------------

TITLE: Main Package Declaration
DESCRIPTION: Empty main package declaration file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildvcs.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main
```

----------------------------------------

TITLE: Defining Go Module with Replace Directives
DESCRIPTION: This go.mod file defines the main module and includes replace directives for example.net/a, example.net/b, and example.net/c modules, pointing them to local directories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_extra.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module example

go 1.15

replace (
	example.net/a v0.1.0 => ./a1
	example.net/b v0.1.0 => ./b1
	example.net/b v0.2.0 => ./b2
	example.net/c v0.1.0 => ./c1
	example.net/c v0.2.0 => ./c1
)
```

----------------------------------------

TITLE: Running Go Tests with JSON Output
DESCRIPTION: This command runs Go tests and outputs the results in JSON format. The -json flag enables structured JSON output for better parsing and analysis of test results.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_prints.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go test -json
```

----------------------------------------

TITLE: Declaring Module Dependencies and Version - Go
DESCRIPTION: A standard go.mod file that explicitly states the module path ("example.net/ambiguous/nested") and the Go language version. This file is required at the root of any module and directs Go tools for dependency resolution. No external dependencies are specified in this example.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_nested_v0.1.0.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module example.net/ambiguous/nested\n\ngo 1.16
```

----------------------------------------

TITLE: Sync Pool Implementation
DESCRIPTION: Thread-safe pool implementation for storing and retrieving interface{} objects with custom creation function.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
type Pool struct {
    New func() interface{}
}

func (p *Pool) Get() interface{}
func (p *Pool) Put(x interface{})
```

----------------------------------------

TITLE: Referencing Dependency Functions and Types in a Go Package - Go
DESCRIPTION: Implements a Go source file 'x.go' under package 'x', which imports 'sub.1' and demonstrates usage of a dependency function 'F' (with two arguments) and references types 'Alias' and 'Defined' from the dependency. Requires the 'sub.1' module to be present and properly defined. Demonstrates how dependent modules can utilize newer Go type features, even if the main module is set to an older Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_mixed.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
-- x.go --
package x

import "sub.1"

func F() { sub.F(0, 0) }

var A sub.Alias
var D sub.Defined
```

----------------------------------------

TITLE: Linux-Specific File with Side-Effect Import - Go
DESCRIPTION: This file, suffix_linux.go, defines package p and only builds on Linux platforms, as it lacks an explicit build tag but follows Go's filename convention for OS targeting. It imports suffix for side effects. No dependencies other than 'suffix'. Input: GOOS. Output: included only for linux builds. Limitation: ignored on non-linux targets.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package p

import _ "suffix"

```

----------------------------------------

TITLE: Time Package Constants and Methods
DESCRIPTION: Defines time format constants and methods for time manipulation in Go.
SOURCE: https://github.com/golang/go/blob/master/api/go1.17.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
const Layout = "01/02 03:04:05PM '06 -0700"

func UnixMicro(int64) Time
func UnixMilli(int64) Time
method (Time) UnixMicro() int64
method (Time) UnixMilli() int64
method (Time) GoString() string
method (Time) IsDST() bool
```

----------------------------------------

TITLE: Go Test File with Sample Tests and Example
DESCRIPTION: This Go file contains sample test functions and an example. It includes two test functions (Test1 and Test2) and an example function (ExampleTest1). Test2 includes a subtest.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_skip.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package skip_test

import "testing"

func Test1(t *testing.T) {
}

func Test2(t *testing.T) {
	t.Run("3", func(t *testing.T) {})
}

func ExampleTest1() {
	// Output:
}
```

----------------------------------------

TITLE: Creating Initial Git Commit and Master Branch
DESCRIPTION: Creates the initial commit with an empty README file, renames the default branch to master, and tags the commit with version v1.2.3.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
at 2018-04-17T15:43:22-04:00
unquote ''
cp stdout README
git add README
git commit -a -m 'empty README'
git branch -m master
git tag v1.2.3
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Original go.mod file defining the module and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_empty.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/othermodule
go 1.13
```

----------------------------------------

TITLE: Defining a Basic Go Module
DESCRIPTION: This snippet defines a basic go.mod file for a module named 'm', requiring a specific version of a dependency. Essential for setting up Go module dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badmod.txt#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
-- go.mod --
module m
require rsc.io/badmod v1.0.0
```

----------------------------------------

TITLE: Module Declaration and Dependency Requirements in .mod file
DESCRIPTION: Defines the module name, Go version requirement (1.23), and three dependencies with specific versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needall_v0.0.1.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module rsc.io/needall
go 1.23

require rsc.io/needgo121 v0.0.1
require rsc.io/needgo122 v0.0.1
require rsc.io/needgo123 v0.0.1
```

----------------------------------------

TITLE: Module Definition
DESCRIPTION: Module definition file specifying dependency on golang.org/x/text package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.1.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module "rsc.io/sampler"

require "golang.org/x/text" v0.0.0-20170915032832-14c0d48ead0c
```

----------------------------------------

TITLE: Fetching a Go Package with go get (Shell)
DESCRIPTION: Downloads and installs the `rsc.io/fortune` package and its dependencies using the `go get` command. Assumes `GO111MODULE=on` is set or inferred.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_install_versioned.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go get rsc.io/fortune
```

----------------------------------------

TITLE: Module C Configuration (v0.2.0)
DESCRIPTION: Configuration for module C version 0.2.0 requiring module D.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue65363.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.net/c

go 1.18

require example.net/d v0.1.0
```

LANGUAGE: go
CODE:
```
package c
```

LANGUAGE: go
CODE:
```
package c_test

import _ "example.net/d"
```

----------------------------------------

TITLE: Embedding Files from Directory in Go
DESCRIPTION: The Go file uses `embed` to include files from `symdir` directory matching the wildcard pattern. It illustrates directory-based embedding, depending on the existence of a directory structure and files matching the pattern.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
package p

import "embed"

//go:embed symdir/*
var X embed.FS
```

----------------------------------------

TITLE: Defining Go Example Functions (Go)
DESCRIPTION: This file (`example_test.go`) defines example functions within the `testlist` package using the `fmt` package. `Example_simple` prints output and includes a corresponding `// Output:` comment, making it runnable and verifiable by `go test`. `Example_withEmptyOutput` demonstrates an example with empty output. `Example_noOutput` performs an action but lacks the `// Output:` comment, so it serves primarily as documentation and might not be listed by `go test -list=Example` depending on the Go version and exact interpretation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_simple.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- example_test.go --
package testlist

import (
	"fmt"
)

func Example_simple() {
	fmt.Println("Test with Output.")

	// Output: Test with Output.
}

func Example_withEmptyOutput() {
	fmt.Println("")

	// Output:
}

func Example_noOutput() {
	_ = fmt.Sprint("Test with no output")
}
```

----------------------------------------

TITLE: Module Definition with Quote Exclusion
DESCRIPTION: Module definition excluding and requiring specific version of rsc.io/quote.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_require_exclude.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module x

go 1.13

exclude rsc.io/quote v1.5.1
require rsc.io/quote v1.5.1
```

----------------------------------------

TITLE: Defining a Simple Go Package Function
DESCRIPTION: This Go code defines a simple package 'p' with a function 'F' that returns an integer value of 1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_relative_import.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package p

func F() int { return 1 }
```

----------------------------------------

TITLE: Defining Go Module with Dependency Replacement
DESCRIPTION: This snippet shows the go.mod file for a module that requires and replaces a dependency. It demonstrates how to specify a local replacement for a module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module example.com/m

require example.com/dep v1.0.0
replace example.com/dep v1.0.0 => ../dep1
```

----------------------------------------

TITLE: Root-Relative File and Filesystem Operations - os Go
DESCRIPTION: These code snippets add the Root type and root-scoped file operation methods to the os package, enabling secure and controlled filesystem access under a specific root directory. Dependencies are fs.FS, fs.FileInfo, and correct fs.FileMode usage. Methods include opening, creating, removing, and stat-ing files with all paths made relative to the given root, while OpenInRoot, OpenRoot, Root.FS, and Root.Close manage root context and cleanup. This design helps sandbox file operations and reduce risks from path traversal.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_19

LANGUAGE: Go
CODE:
```
pkg os, func OpenInRoot(string, string) (*File, error) #67002
pkg os, func OpenRoot(string) (*Root, error) #67002
pkg os, method (*Root) Close() error #67002
pkg os, method (*Root) Create(string) (*File, error) #67002
pkg os, method (*Root) FS() fs.FS #67002
pkg os, method (*Root) Lstat(string) (fs.FileInfo, error) #67002
pkg os, method (*Root) Mkdir(string, fs.FileMode) error #67002
pkg os, method (*Root) Name() string #67002
pkg os, method (*Root) Open(string) (*File, error) #67002
pkg os, method (*Root) OpenFile(string, int, fs.FileMode) (*File, error) #67002
pkg os, method (*Root) OpenRoot(string) (*Root, error) #67002
pkg os, method (*Root) Remove(string) error #67002
pkg os, method (*Root) Stat(string) (fs.FileInfo, error) #67002
pkg os, type Root struct #67002
```

----------------------------------------

TITLE: Signal handling with NotifyContext in os/signal package
DESCRIPTION: Creates a new context that gets canceled when an OS signal is received. It takes a parent context and a list of OS signals to watch for, returning a new context and a cancel function.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
func NotifyContext(context.Context, ...os.Signal) (context.Context, context.CancelFunc)
```

----------------------------------------

TITLE: Go Module File with Replace Directive
DESCRIPTION: A Go module file for module 'example.com/a' with a replace directive pointing to a local path for module 'b'. This is the starting configuration for the test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_main_module_replaced.txt#2025-04-22_snippet_3

LANGUAGE: plaintext
CODE:
```
module example.com/a

go 1.21

require example.com/b v0.0.0

replace example.com/b => ../b
```

----------------------------------------

TITLE: Improved Testing and Benchmarking Utilities - testing Go
DESCRIPTION: The snippets add Chdir and Context methods to testing types, and extend TB interface for future compatibility. Methods enable setting working directories during tests and provide a context.Context for cancellation or deadlines. Their main parameters are test state receivers and (optionally) filesystem paths. These changes facilitate robust, isolated, and concurrent Go testing, especially when working with dynamic test scaffolding or timeouts.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_22

LANGUAGE: Go
CODE:
```
pkg testing, method (*B) Chdir(string) #62516
pkg testing, method (*B) Context() context.Context #36532
pkg testing, method (*B) Loop() bool #61515
pkg testing, method (*F) Chdir(string) #62516
pkg testing, method (*F) Context() context.Context #36532
pkg testing, method (*T) Chdir(string) #62516
pkg testing, method (*T) Context() context.Context #36532
pkg testing, type TB interface, Chdir(string) #62516
pkg testing, type TB interface, Context() context.Context #36532
```

----------------------------------------

TITLE: HTTP Connection State Constants and Types
DESCRIPTION: HTTP server connection state definitions and related types for managing connection lifecycle states.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
type ConnState int

const (
    StateNew ConnState = iota
    StateActive
    StateIdle
    StateHijacked
    StateClosed
)
```

----------------------------------------

TITLE: Testing Go Module Dependency Management in Go
DESCRIPTION: This snippet shows the test steps for verifying the correct behavior of Go module dependency management. It compares the original and modified go.mod files after running 'go mod tidy' and 'go get -u=patch ./...'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue48511.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
cp go.mod go.mod.orig
go mod tidy
cmp go.mod go.mod.orig

go get -u=patch ./...
cmp go.mod go.mod.want
```

----------------------------------------

TITLE: Main Package Implementation
DESCRIPTION: Simple Go program that imports and uses the quote package to print a hello message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sum.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"rsc.io/quote"
)

func main() {
	fmt.Println(quote.Hello())
}
```

----------------------------------------

TITLE: Configuring Go Module with Version Replacements
DESCRIPTION: This go.mod file sets up the module configuration for the test. It includes version replacements to simulate different versions of the 'example.net/a' module, pointing to local directories for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue37438.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example

go 1.15

require example.net/a v0.1.0

replace (
	example.net/a v0.1.0 => ./a1
	example.net/a v0.2.0 => ./a2
	example.net/a v0.3.0 => ./a1
)
```

----------------------------------------

TITLE: Recording Dependency Checksums (gomod)
DESCRIPTION: This `go.sum` file contains the expected cryptographic checksums for the specified versions of the direct dependency (`v.com`) and its own `go.mod` file. Go uses this file to verify the integrity of downloaded dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_trimpath_macro.txt#2025-04-22_snippet_2

LANGUAGE: gomod
CODE:
```
v.com v1.0.0 h1:xxx
v.com v1.0.0/go.mod h1:xxx
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module named 'gencycle' with Go version 1.16 requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_bad_imports.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module gencycle

go 1.16
```

----------------------------------------

TITLE: Go Module Declaration
DESCRIPTION: Module declaration file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_perm.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com
go 1.15
```

----------------------------------------

TITLE: Defining Go Module Configuration for Module B
DESCRIPTION: This snippet shows the content of the go.mod file for module 'example.com/b', specifying the module name and Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_module_not_in_go_work.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.com/b

go 1.18
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: This snippet defines a Go module named 'm' with Go version 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Defining Go Module Metadata - Go
DESCRIPTION: This snippet shows the definition of a Go module in a go.mod file. It specifies the module path (example.com/retract/missingmod) and the Go version required (1.14). Prerequisite: Go toolchain. This sets up the module namespace and Go version compatibility but does not include dependencies or package implementations. Inputs are static; output is configuration for use by go commands. Limitations: minimal configuration, serves solely as module declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_missingmod_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/retract/missingmod\n\ngo 1.14
```

----------------------------------------

TITLE: Example Go Source File
DESCRIPTION: Simple Go source file importing the rsc.io/sampler package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_goproxy_off.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package example

import _ "rsc.io/sampler"
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: The go.mod file defining the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/commit-after-tag.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/git/commit-after-tag.git

go 1.13
```

----------------------------------------

TITLE: Go Fuzzing Test Module Definition
DESCRIPTION: Module definition file specifying Go version 1.16 requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_deadline.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module fuzz

go 1.16
```

----------------------------------------

TITLE: Defining Go Module Configuration
DESCRIPTION: This snippet defines the module configuration for a Go project. It specifies the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_ignore_leading_bom.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Declaring a Go Module with go.mod
DESCRIPTION: Defines the module path for the project, enabling Go modules within the repository. This go.mod file is required for dependency management and module-scoped development, specifying 'ldflag' as the module name. No dependencies are specified, and no additional configuration is included.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/darwin_lto_library_ldflag.txt#2025-04-22_snippet_0

LANGUAGE: mod
CODE:
```
-- go.mod --\nmodule ldflag
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: This snippet demonstrates the structure of a Go module definition file (go.mod) for the 'example.com/a' module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.com/a
```

----------------------------------------

TITLE: Running Specific Go Subtests with Pattern Matching
DESCRIPTION: Shell command demonstrating how to run only subtests that match a specific pattern using go test -run. Includes assertions about expected stdout and stderr output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_subtests.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -run Test/Sub standalone_sub_test.go
! stdout '^ok.*\[no tests to run\]'
! stderr '^ok.*\[no tests to run\]'
stdout '^ok'
```

----------------------------------------

TITLE: Defining Go Module Dependencies with go.mod - Go
DESCRIPTION: This go.mod snippet specifies the name of the Go module as example.com/retract/ambiguous/other, indicates that it should use Go version 1.16, and declares a dependency on another module example.com/retract/ambiguous at version v1.0.0. The go.mod file is fundamental for managing module dependencies and ensuring consistent builds. It is required for any project using Go modules, and must reside in the module root directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_ambiguous_other_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/retract/ambiguous/other

go 1.16

require example.com/retract/ambiguous v1.0.0
```

----------------------------------------

TITLE: Demonstrating Go Nil Pointer Check Fix
DESCRIPTION: This Go code snippet illustrates a program structure that would execute successfully in Go versions 1.21-1.24 despite using a potentially nil file handle (`f`) before checking the error (`err`). In Go 1.25, this code now correctly panics with a nil-pointer exception, demonstrating the fix for a compiler bug (issue 72860) and emphasizing the importance of checking errors immediately after operations that might return errors.
SOURCE: https://github.com/golang/go/blob/master/doc/next/5-toolchain.md#_snippet_0

LANGUAGE: Go
CODE:
```
package main

import "os"

func main() {
	f, err := os.Open("nonExistentFile")
	name := f.Name()
	if err != nil {
		return
	}
	println(name)
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: This snippet shows the go.mod file content, defining the module and its dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_trimpath.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.com/main

go 1.17

require example.com/stack v1.0.0
```

----------------------------------------

TITLE: Language Tag Implementation and Matching in Go
DESCRIPTION: Implements core language tag functionality including tag creation, string conversion, and matching against preferred languages. Includes a matcher that supports basic language tag comparison with region subtag handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_text_v0.3.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This is a tiny version of golang.org/x/text.

package language

import "strings"

type Tag string

func Make(s string) Tag { return Tag(s) }

func (t Tag) String() string { return string(t) }

func NewMatcher(tags []Tag) Matcher { return &matcher{tags} }

type Matcher interface {
	Match(...Tag) (Tag, int, int)
}

type matcher struct {
	tags []Tag
}

func (m *matcher) Match(prefs ...Tag) (Tag, int, int) {
	for _, pref := range prefs {
		for _, tag := range m.tags {
			if tag == pref || strings.HasPrefix(string(pref), string(tag+"-")) || strings.HasPrefix(string(tag), string(pref+"-")) {
				return tag, 0, 0
			}
		}
	}
	return m.tags[0], 0, 0
}
```

----------------------------------------

TITLE: Executing `go clean -testcache` Tests in Shell
DESCRIPTION: This shell script executes a series of tests for the `go clean -testcache` command. It sets environment variables (`GO111MODULE=off`, `GOCACHE`), navigates directories (`cd x`), runs `go test`, cleans the test cache, re-runs the test to check for caching behavior (`! stdout 'cached'`), and validates error handling for incorrect command usage (`! go clean -testcache ../x`) and non-existent cache directories (`! exists $WORK/nonexistent`). It references Go issues #29757 and #29100. The `[short] skip` directive likely indicates skipping in short test runs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/clean_testcache.txt#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
env GO111MODULE=off
[short] skip

# go clean -testcache
# should work (see golang.org/issue/29757).
cd x
go test x_test.go
go clean -testcache
go test x_test.go
! stdout 'cached'
! go clean -testcache ../x
stderr 'go: clean -testcache cannot be used with package arguments'

# golang.org/issue/29100: 'go clean -testcache' should succeed
# if the cache directory doesn't exist at all.
# It should not write a testexpire.txt file, since there are no
# test results that need to be invalidated in the first place.
env GOCACHE=$WORK/nonexistent
go clean -testcache
! exists $WORK/nonexistent
```

----------------------------------------

TITLE: Defining Go Tests in x_test.go
DESCRIPTION: This Go code defines test and benchmark functions in the x package. It includes TestX with a sub-test Y, and BenchmarkX with a sub-benchmark Y.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_regexps.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package x

import "testing"

func TestX(t *testing.T) {
	t.Logf("LOG: X running")
	t.Run("Y", func(t *testing.T) {
		t.Logf("LOG: Y running")
	})
}

func BenchmarkX(b *testing.B) {
	b.Logf("LOG: X running N=%d", b.N)
	b.Run("Y", func(b *testing.B) {
		b.Logf("LOG: Y running N=%d", b.N)
	})
}
```

----------------------------------------

TITLE: Listing Resolved Go Module Dependencies and Verifying Version (Shell)
DESCRIPTION: Runs `go list -m all` to display the list of modules used in the build, including the main module and all its dependencies with their selected versions. The accompanying `stdout` line specifies the expected output, asserting that the resolved version for `rsc.io/quote` is specifically `v1.5.2`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
go list -m all
stdout 'rsc.io/quote v1.5.2'
```

----------------------------------------

TITLE: Handling Module Dependencies with Go Commands
DESCRIPTION: This shell script sequence utilizes the `go list` and `go mod tidy` commands to check for inconsistent module requirements and resolve them. It ensures that the correct module versions are used and updates the go.mod file as necessary.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_consistency.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# If the root requirements in a lazy module are inconsistent
# (for example, due to a bad hand-edit or git merge),
# they can go unnoticed as long as the module with the violated
# requirement is not used.
# When we load a package from that module, we should spot-check its
# requirements and either emit an error or update the go.mod file.

cp go.mod go.mod.orig


# If we load package x from x.1, we only check the requirements of x,
# which are fine: loading succeeds.

go list -deps ./usex
stdout '^example.net/x$'
cmp go.mod go.mod.orig


# However, if we load needx2, we should load the requirements of needx2.
# Those requirements indicate x.2, not x.1, so the module graph is
# inconsistent and needs to be fixed.

! go list -deps ./useneedx2
stderr '^go: updates to go.mod needed; to update it:\n\tgo mod tidy$'

! go list -deps example.net/needx2
stderr '^go: updates to go.mod needed; to update it:\n\tgo mod tidy$'


# The command printed in the error message should fix the problem.

go mod tidy
go list -deps ./useneedx2
stdout '^example.net/m/useneedx2$'
stdout '^example.net/needx2$'
stdout '^example.net/x$'

go list -m all
stdout '^example.net/needx2 v0\.1\.0 '
stdout '^example.net/x v0\.2\.0 '
```

----------------------------------------

TITLE: Package A Implementation
DESCRIPTION: Valid Go file with package declaration and fmt import
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_parse_err.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package a

import "fmt"
```

----------------------------------------

TITLE: Minimal Go Program for Module 'y' (Go)
DESCRIPTION: Defines a basic Go program located in 'y/main.go'. Similar to the one in 'x', it includes the main package and an empty main function. This file belongs to the 'm' module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_path.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
-- y/main.go --
package main

func main() {}
```

----------------------------------------

TITLE: Main Go Application with Quote Import
DESCRIPTION: Simple Go program that imports and uses the rsc.io/quote package to print a hello message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_diff.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import "rsc.io/quote"

func main() {
	println(quote.Hello())
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: A simple Go module definition file (go.mod) that specifies the module name and Go version requirement. This defines a module named 'example.com/mod' that uses Go 1.20.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_stale.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/mod

go 1.20
```

----------------------------------------

TITLE: Hello World Implementation in Go
DESCRIPTION: Basic Go program that prints 'hello world' to standard output using println function
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_hello.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main
func main() { println("hello world") }
```

----------------------------------------

TITLE: Tidying Go Module Dependencies with go mod tidy - Shell
DESCRIPTION: Runs the 'go mod tidy' command to remove unused dependencies from go.mod and go.sum and add any missing ones required by the current project's source code. No input parameters are required. The working directory should contain a valid go.mod file. Outputs updates directly to go.mod and go.sum; does not print detailed results unless errors are encountered.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_m.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go mod tidy
```

----------------------------------------

TITLE: Implementing Module 'm' Functionality
DESCRIPTION: This Go file implements the functionality for module 'm'. It imports and uses the 'example.com/dep' package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict_override.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package m

import "example.com/dep"

func F() {
	dep.G()
}
```

----------------------------------------

TITLE: Go Module Definition with Go 1.20
DESCRIPTION: Defines a Go module named 'test' using Go 1.20.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module test
go 1.20
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: This snippet defines a basic Go module file (go.mod) with module name and Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_init_path.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example
go 1.18
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: This snippet shows the contents of the go.mod file, defining the module and Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_indirect.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
module example.com/m

go 1.17
```

----------------------------------------

TITLE: Fuzz Test for Coverage Instrumentation in Go
DESCRIPTION: A Go fuzz test that expects the fuzzer to find a specific byte sequence 'hello :)'. When this sequence is found, it panics with a specific message to indicate that the coverage instrumentation is working properly. Without proper instrumentation, finding this specific sequence would be extremely unlikely.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cov.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package cov

import "testing"

func FuzzCov(f *testing.F) {
	f.Fuzz(func(t *testing.T, b []byte) {
		if len(b) == 8 &&
			b[0] == 'h' &&
			b[1] == 'e' &&
			b[2] == 'l' &&
			b[3] == 'l' &&
			b[4] == 'o' &&
			b[5] == ' ' &&
			b[6] == ':' &&
			b[7] == ')' {
			panic("cov instrumentation working")
		}
	})
}
```

----------------------------------------

TITLE: Testing Go Test Command Behavior with Various Flags and Arguments
DESCRIPTION: This snippet demonstrates several test cases for the 'go test' command, checking its behavior with different combinations of flags and arguments. It covers aspects like flag terminator handling, backward compatibility, and flag priority.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flags.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test ./x -- -test.v
stdout '\Aok\s+example.com/x\s+[0-9.s]+\n\z'
! stderr .

! go test --answer=42 ./x
stdout '^FAIL\t. \[setup failed\]'
stderr '^# \.\nno Go files in '$PWD'$'

go test -v -x ./x -timeout 24h -boolflag=true foo -timeout 25h
stdout 'args: foo -timeout 25h'
stdout 'timeout: 24h0m0s$'

go test -v -x ./x -timeout 24h -boolflag foo -timeout 25h
stdout 'args: foo -test\.timeout=25h0m0s'
stdout 'timeout: 24h0m0s$'

go test -v -x ./x -timeout 24h -stringflag foo -timeout 25h
stdout 'args: $'
stdout 'timeout: 25h0m0s$'
```

----------------------------------------

TITLE: Testing Go Commands with File Arguments
DESCRIPTION: A series of commands demonstrating that 'go install', 'go test', and 'go vet' commands work properly with file arguments rather than package paths.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_11

LANGUAGE: bash
CODE:
```
# 'go install' should work with file arguments.
go install ./stdonly/stdonly.go

# 'go test' should work with file arguments.
go test -v ./stdonly/stdonly_test.go
stdout 'stdonly was tested'

# 'go vet' should work with file arguments.
go vet ./stdonly/stdonly.go
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module declaration file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Define Go Module for rsc.io/quote
DESCRIPTION: Defines the Go module 'rsc.io/quote' in a go.mod file, which is required for Go's module system.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module "rsc.io/quote"
```

----------------------------------------

TITLE: Module Definition in Go
DESCRIPTION: This snippet defines a Go module with a specific path and Go version. It's likely a part of a larger application setup. Ensure that the Go toolchain is installed and configured.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-unprintable.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/retract/rationale

go 1.14
```

----------------------------------------

TITLE: Defining Go Module in go.mod
DESCRIPTION: Declares the module name and Go version for the project. This is essential for managing dependencies and ensuring compatibility.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_no_run_example.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module norunexample

go 1.16
```

----------------------------------------

TITLE: Configuring Main Go Module 'm' (Go Module)
DESCRIPTION: Defines the main Go module named `m` using Go version 1.15. It declares a dependency on module `x` (version v0.1.0) and uses `replace` directives to point to local directories `./x` and `./y` for modules `x` and `y` respectively, facilitating local multi-module testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_4

LANGUAGE: gomod
CODE:
```
-- go.mod --
module m

go 1.15

require x v0.1.0

replace (
	x v0.1.0 => ./x
	y v0.1.0 => ./y
)
```

----------------------------------------

TITLE: Defining Go Module Requirements (go.mod)
DESCRIPTION: Module definition file that specifies the module path and its dependencies. It requires rsc.io/quote/v3 v3.0.0 and rsc.io/sampler v1.3.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180710144737-5d9f230bcfba.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module rsc.io/quote

require (
	rsc.io/quote/v3 v3.0.0
	rsc.io/sampler v1.3.0
)
```

----------------------------------------

TITLE: Go Module Declaration
DESCRIPTION: Simple go.mod file declaring a module named 'example' with Go 1.19 compatibility.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_goroot_PATH.txt#2025-04-22_snippet_1

LANGUAGE: go.mod
CODE:
```
module example

go 1.19
```

----------------------------------------

TITLE: Defining Go Module Dependencies
DESCRIPTION: This snippet shows the go.mod file content, which defines the module name, Go version, and required dependencies for the project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_work_versioned.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example

go 1.18

require example.com/printversion v1.0.0
```

----------------------------------------

TITLE: Basic No-op Fuzz Test Implementation in Go
DESCRIPTION: Demonstrates the minimal implementation of a fuzz test function that does nothing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package noop_fuzz

import "testing"

func Fuzz(f *testing.F) {}
```

----------------------------------------

TITLE: Implementing Hello Function in Go Quote Package
DESCRIPTION: Implements a Hello() function in the 'quote' package that returns a simple greeting string 'Hello, world.'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

// Hello returns a greeting.
func Hello() string {
	return "Hello, world."
}
```

----------------------------------------

TITLE: Certificate Policies Field and OID Type - crypto/x509 - Go
DESCRIPTION: The Certificate struct in crypto/x509 is updated to hold a Policies field of []OID, leveraging the new OID type struct. These allow manipulation and inspection of policy object identifiers in X509 certificates. The OID type encapsulates the identifier structure.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
type Certificate struct {
    Policies []OID
}
```

LANGUAGE: Go
CODE:
```
type OID struct
```

----------------------------------------

TITLE: Replacing gopkg.in Module with Incompatible Version in Go
DESCRIPTION: This snippet shows replacing a gopkg.in module with an incompatible version, which is still allowed in certain cases.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
cd ../4-to-incompatible
go list -m gopkg.in/src-d/go-git.v4
```

----------------------------------------

TITLE: Trivial Module Definition
DESCRIPTION: This go.mod file defines a trivial module named 'triv' without any dependencies or version specifications.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module triv
```

----------------------------------------

TITLE: Testing Go Build and Install Cleanup Behavior
DESCRIPTION: A series of shell commands to test how 'go build' and 'go install' handle cleanup of executable files in different scenarios. It checks the behavior when running commands with and without arguments, and in different directories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_cleans_build.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off
[short] skip

# 'go install' with no arguments should clean up after go build
cd mycmd
go build
exists mycmd$GOEXE
go install
! exists mycmd$GOEXE

# 'go install mycmd' does not clean up, even in the mycmd directory
go build
exists mycmd$GOEXE
go install mycmd
exists mycmd$GOEXE

# 'go install mycmd' should not clean up in an unrelated current directory either
cd ..
cp mycmd/mycmd$GOEXE mycmd$GOEXE
go install mycmd
exists mycmd$GOEXE
```

----------------------------------------

TITLE: Defining Types and Functions for database/sql Package in Go
DESCRIPTION: This snippet defines types and functions related to database drivers and connections in the database/sql package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
func OpenDB(driver.Connector) *DB

type Connector interface {
    Connect(context.Context) (Conn, error)
    Driver() Driver
}

type DriverContext interface {
    OpenConnector(string) (Connector, error)
}

type SessionResetter interface {
    ResetSession(context.Context) error
}
```

----------------------------------------

TITLE: Testing Go Workspace Vendoring
DESCRIPTION: Shell commands that test Go workspace vendoring functionality by comparing vendored modules with expected output, checking version resolution, and verifying module directory structures.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go work vendor
cmp vendor/modules.txt modules.txt.want
go list -f '{{with .Module}}{{.Path}}@{{.Version}}{{end}}' all
cmp stdout want_versions

go list -f '{{.Dir}}' example.com/q
stdout $GOPATH[\/]src[\/]vendor[\/]example.com[\/]q
go list -f '{{.Dir}}' example.com/b
stdout $GOPATH[\/]src[\/]vendor[\/]example.com[\/]b
go list -f '{{.Dir}}' example.com/w
stdout $GOPATH[\/]src[\/]vendor[\/]example.com[\/]w
go list -f '{{.Dir}}' example.com/z
stdout $GOPATH[\/]src[\/]vendor[\/]example.com[\/]z

cmp $GOPATH/src/vendor/example.com/q/q.go q1_1_0/q.go
```

----------------------------------------

TITLE: Replacing Go Module Dependencies
DESCRIPTION: A go.mod file that demonstrates dependency replacement for Go modules, useful for local module testing. The file specifies the dependency and its replacement path, crucial for development scenarios.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badmod.txt#2025-04-22_snippet_5

LANGUAGE: text
CODE:
```
-- go.mod.usesub --
module m
require rsc.io/badmod v1.0.0
replace rsc.io/badmod v1.0.0 => ./sub
```

----------------------------------------

TITLE: Main Package Implementation
DESCRIPTION: Simple Go implementation file defining a package main with exported function F and main entry point.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main_archive.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

func F()    {}
func main() {}
```

----------------------------------------

TITLE: Golang Package with Dependencies in needx2
DESCRIPTION: The Go source file for `needx2` imports `example.net/x` and utilizes its features, demonstrating backward compatibility and feature usage with versioned Go modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_consistency.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
// Package needx2 needs x v0.2.0 or higher.
package needx2

import "example.net/x"

var _ = x.AddedInV2
```

----------------------------------------

TITLE: Implementing Parallel Subtests in Go
DESCRIPTION: This Go code demonstrates the implementation of parallel subtests. It creates a main test function that runs a parallel subtest, which in turn runs a nested subtest. The code uses channels to control the execution flow and ensure proper test completion.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_parallel_number.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package standalone_parallel_sub_test

import "testing"

func Test(t *testing.T) {
	ch := make(chan bool, 1)
	t.Run("Sub", func(t *testing.T) {
		t.Parallel()
		<-ch
		t.Run("Nested", func(t *testing.T) {})
	})
	// Ensures that Sub will finish after its t.Run call already returned.
	ch <- true
}
```

----------------------------------------

TITLE: Main Go Program Using Vendored Package
DESCRIPTION: A simple Go program that imports a vendored 'strings' package and prints a message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_vendor.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package main

import (
	"fmt"
	"strings" // really ../vendor/strings
)

func main() {
	fmt.Printf("%s\n", strings.Msg)
}
```

----------------------------------------

TITLE: Testing an External Package from a Test-Only Package - Go
DESCRIPTION: Implements a test in the 'onlytest_test' package that imports 'notest' and executes Foo() in a TestFoo test case. This enables verifying the coverage of 'notest' even when it has no test files of its own, demonstrating -coverpkg=all's ability to include such packages. Dependencies include the testing package and 'example.com/cov/notest'; the input is implicit via testing, and output is coverage data.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_imports.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package onlytest_test

import (
	"testing"

	"example.com/cov/notest"
)

func TestFoo(t *testing.T) {
	notest.Foo()
}
```

----------------------------------------

TITLE: Implementing a Fuzz Test That Always Fails - Go
DESCRIPTION: This Go testing snippet defines a fuzzing function 'FuzzFail' using the built-in 'testing' package. It uses Go 1.18's 'f.Fuzz' method to repeatedly invoke the test with arbitrary byte slices as input, always triggering a fatal error and causing the test to fail with the input bytes rendered as a quoted string. This setup is intended for demonstration or testing of fuzzing infrastructure failure handling. Requires Go 1.18+, and no external dependencies are needed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_fuzzfail_v0.1.0.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package fuzzfail\n\nimport \"testing\"\n\nfunc FuzzFail(f *testing.F) {\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tt.Fatalf(\"oops: %q\", b)\n\t})\n}
```

----------------------------------------

TITLE: Excluded Go File with Build Tags
DESCRIPTION: A Go file with build tags for Windows and MIPS architectures. It imports a version package that will be included in dependencies despite the build tags.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tags.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
// +build windows,mips

package m

import _ "example.com/version"
```

----------------------------------------

TITLE: Defining Go Module and Dependencies
DESCRIPTION: Defines the main module and its dependency in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goline_order.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
module m
go 1.21.1

require m1 v0.0.1

replace m1 => ./m1
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module declaration for coverbad package specifying Go 1.16 version requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_build_failure.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module coverbad

go 1.16
```

----------------------------------------

TITLE: Testing go list JSON Output
DESCRIPTION: Tests the go list command with -json flag to ensure proper JSON output to stdout
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_json_with_f.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list -json ./...
```

----------------------------------------

TITLE: Main Package Implementation in Go
DESCRIPTION: Simple main package that imports and calls a function from the sub package. This is used to test code coverage functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_simple.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import "example/sub"

func main() {
	sub.S()
}
```

----------------------------------------

TITLE: Enabling Go Modules via Environment Variable (Shell)
DESCRIPTION: Sets the GO111MODULE environment variable to 'on'. This explicitly enables Go module support, ensuring that the subsequent Go commands operate in module-aware mode, regardless of the project's location relative to GOPATH.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Implementing Unwrap method for ExecError in text/template package
DESCRIPTION: Declaration of the Unwrap method for the ExecError type in the text/template package. This method supports Go's error unwrapping mechanism introduced in Go 1.13.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_176

LANGUAGE: go
CODE:
```
func (ExecError) Unwrap() error
```

----------------------------------------

TITLE: Go Module Toolchain Tests
DESCRIPTION: Tests toolchain version selection with go.mod file, including version requirements and toolchain directives
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_local.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go mod init m
go mod edit -go=1.700 -toolchain=none
go version
stdout 1.700
```

----------------------------------------

TITLE: Go Submodule Declaration
DESCRIPTION: Module declaration for the baz submodule within foo/bar/baz directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module baz
```

----------------------------------------

TITLE: Unit Testing with Test Function in Go
DESCRIPTION: Defines a Go test within the mainwithtest package, testing the Foo function. It uses the 'testing' package to ensure the Foo function is executed correctly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_multiple_mains.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package main

import "testing"

func TestFoo(t *testing.T) {
  Foo()
}
```

----------------------------------------

TITLE: Defining the `fuzzfail` Go Module
DESCRIPTION: This `go.mod` file formally declares the Go module with the path `example.com/fuzzfail`. It also specifies that the code within the module requires Go version `1.18` or a compatible later version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_fuzzfail_v0.2.0.txt#2025-04-22_snippet_2

LANGUAGE: gomod
CODE:
```
module example.com/fuzzfail

go 1.18
```

----------------------------------------

TITLE: Testing Quote Functions in Go
DESCRIPTION: Test suite for the quote package, validating each function returns the expected quote. Tests the Hello, Glass, Go, and Opt functions by comparing their outputs with the expected strings.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.0.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package quote

import "testing"

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory, share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}

func TestOpt(t *testing.T) {
	opt := "If a program is too slow, it must have a loop."
	if out := Opt(); out != opt {
		t.Errorf("Opt() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Go Module Configuration
DESCRIPTION: Defines the module configuration with dependencies on example.com/version v1.1.0
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_unix_tag.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example

go 1.19

require example.com/version v1.1.0
```

----------------------------------------

TITLE: Defining Go Module Dependencies and Replacements in Go
DESCRIPTION: This go.mod file defines the module, its Go version, dependencies, and replacement directives for different versions of example.net/a, example.net/b, and example.net/c.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module example

go 1.17

require (
	example.net/a v0.1.0
	example.net/b v0.1.0
	example.net/c v0.1.0
)

replace (
	example.net/a v0.1.0 => ./a1
	example.net/a v0.2.0-pre => ./a2p
	example.net/b v0.1.0 => ./b
	example.net/b v0.2.0 => ./b
	example.net/c v0.1.0 => ./c1
	example.net/c v0.2.0 => ./c2
)
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines module dependencies including rsc.io/quote and its indirect dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_skip_write.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.18

require rsc.io/quote v1.5.2

require (
	golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c // indirect
	rsc.io/sampler v1.3.0 // indirect
	rsc.io/testonly v1.0.0 // indirect
)
```

----------------------------------------

TITLE: Configuring Go Module with Replace Directives
DESCRIPTION: This snippet shows a go.mod file configuration with multiple replace directives. It defines module replacements for different versions of 'example.net/pkgremoved' and 'example.net/other'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchmod.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example

go 1.16

replace (
	example.net/other v0.1.0 => ./other

	example.net/pkgremoved v0.1.0 => ./prpkg
	example.net/pkgremoved v0.1.1 => ./prpkg

	example.net/pkgremoved v0.2.0 => ./prmod
	example.net/pkgremoved v0.2.1 => ./prmod

	example.net/pkgremoved v0.3.0 => ./prpkg
	example.net/pkgremoved v0.3.1 => ./prmod

	example.net/pkgremoved v0.4.0 => ./prmod
	example.net/pkgremoved v0.4.1 => ./prpkg
)
```

----------------------------------------

TITLE: Testing Go Build and Vendoring
DESCRIPTION: This snippet tests Go build commands with and without vendoring, and checks the behavior of 'go list' command with different module configurations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

# Without vendoring, a build should succeed unless -mod=vendor is set.
[!short] go build
[!short] ! go build -mod=vendor

# Without vendoring, 'go list' should report the replacement directory for
# a package in a replaced module.
go list -f {{.Dir}} x
stdout 'src[\/]x'

# 'go mod vendor' should copy all replaced modules to the vendor directory.
go mod vendor -v
stderr '^# x v1.0.0 => ./x'
stderr '^x'
stderr '^# y v1.0.0 => ./y'
stderr '^y'
stderr '^# z v1.0.0 => ./z'
stderr '^z'
! stderr '^w'
grep 'a/foo/bar/b\na/foo/bar/c' vendor/modules.txt # must be sorted
```

----------------------------------------

TITLE: Defining Go Module for Tools
DESCRIPTION: This snippet shows the content of a go.mod file for a tools module without explicit requirements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.net/tools

go 1.15

// Requirements intentionally omitted.
```

----------------------------------------

TITLE: Filesystem integration for text/template package
DESCRIPTION: Functions for parsing templates directly from a filesystem (fs.FS). Allows loading templates from any source that implements the fs.FS interface like embedded files, memory filesystems, or real filesystems.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
func ParseFS(fs.FS, ...string) (*Template, error)
method (*Template) ParseFS(fs.FS, ...string) (*Template, error)
```

----------------------------------------

TITLE: Implementing Go test functions
DESCRIPTION: Defines two test functions: TestWriteTmp for writing temporary files and TestReadTestdata for reading from testdata.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_cached.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
package foo_test

import (
	"os"
	"path/filepath"
	"testing"
)

func TestWriteTmp(t *testing.T) {
	dir, err := os.MkdirTemp("", "")
	if err != nil {
		t.Fatal(err)
	}
	defer os.RemoveAll(dir)
	err = os.WriteFile(filepath.Join(dir, "x"), nil, 0666)
	if err != nil {
		t.Fatal(err)
	}
}

func TestReadTestdata(t *testing.T) {
	_, err := os.ReadFile("testdata/foo.txt")
	if err != nil {
		t.Fatal(err)
	}
}
```

----------------------------------------

TITLE: Minimal Go Program
DESCRIPTION: Empty main package implementation with no functionality
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gomod_in_gopath.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Main Module Definition
DESCRIPTION: Go module definition file for the main module specifying dependencies and their versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_goproxy_off.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example

go 1.19

require rsc.io/sampler v1.3.0

require (
	golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c // indirect
	rsc.io/testonly v1.0.0 // indirect
)
```

----------------------------------------

TITLE: Defining Go Module with Dependency
DESCRIPTION: This go.mod file for example.net/b v0.2.0 includes a dependency on example.net/c v0.1.0, demonstrating module versioning and dependency declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_extra.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
module example.net/b

go 1.15

require example.net/c v0.1.0
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module named 'cgocover3' with Go 1.16 as the required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_extra_test.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module cgocover3

go 1.16
```

----------------------------------------

TITLE: Running Go Tests with Coverage for All Packages (Shell)
DESCRIPTION: Executes tests for the Go package 'x' using the 'go test' command. The '-coverpkg=all' flag instructs the tool to calculate test coverage for all packages depended upon, not just the package 'x' being tested. The surrounding script context expects 'ok' and coverage information in standard output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_runtime.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go test -coverpkg=all x
```

----------------------------------------

TITLE: Implementing Coordinated Parallel Tests in Go
DESCRIPTION: Go test implementation with two parallel tests that coordinate their execution using channels to ensure specific output ordering. The tests demonstrate how CONT lines appear in verbose output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_parallel_success_run.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package chatty_parallel_test

import (
	"testing"
)

var (
	afterFirstLog = make(chan struct{})
	afterSubTest  = make(chan struct{})
	afterSecondLog = make(chan struct{})
)

func TestInterruptor(t *testing.T) {
	t.Parallel()

	<-afterFirstLog
	t.Run("interruption", func (t *testing.T) {})
	close(afterSubTest)
	<-afterSecondLog // Delay the "PASS: TestInterruptor" line until after "CONT  TestLog".
}

func TestLog(t *testing.T) {
	t.Parallel()

	t.Logf("this is the first TestLog log")
	close(afterFirstLog)
	<-afterSubTest
	t.Logf("this is the second TestLog log")
	close(afterSecondLog)
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines the Go module name for the test package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_overlay.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module test.pkg
```

----------------------------------------

TITLE: Go Module Version Management
DESCRIPTION: Creates and manages multiple versions of Go modules with appropriate version tags and branch structures.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/vgotest1.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
mkdir pkg
echo 'package p // pkg/p.go'
cp stdout pkg/p.go
git add pkg/p.go
git commit -m 'add pkg/p.go'
git tag v0.0.0
git tag v1.0.0
git tag v2.0.0
git tag mytag

git branch v1
git branch v2
git checkout v2
```

----------------------------------------

TITLE: Initial Go Module Definition
DESCRIPTION: Basic go.mod file defining a module 'm' with Go 1.16 and a dependency on rsc.io/sampler v1.0.0
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_changes.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.16

require rsc.io/sampler v1.0.0
```

----------------------------------------

TITLE: Declaring a Go Module - Go
DESCRIPTION: Defines a new Go module named "example.net/ambiguous/nested" with a declared Go version of 1.16. This file is essential for module initialization and dependency management. Required for any Go project using modules and consumed by the Go toolchain to resolve import paths.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_nested_v0.1.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.net/ambiguous/nested\n\ngo 1.16
```

----------------------------------------

TITLE: Defining Go Module and Version
DESCRIPTION: This snippet shows the contents of a go.mod file, defining the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getmode_vendor.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module x

go 1.16
```

----------------------------------------

TITLE: Testing Basic Go Module Structure
DESCRIPTION: Main module file importing package a, demonstrating basic module structure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_version.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package m

import _ "example.net/a"
```

----------------------------------------

TITLE: Simple Go Program
DESCRIPTION: A minimal Go program with an empty main function, used for testing the build process.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cacheprog_issue70848.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Package P Implementation
DESCRIPTION: Simple package p implementation providing function P()
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_irrelevant_dependency.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p

func P() {}
```

----------------------------------------

TITLE: Testing Localized 'Glass' Function in Go
DESCRIPTION: This snippet contains test cases for the 'Glass' function, checking if it returns the correct localized 'I can eat glass' phrase based on the provided language preferences.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.3.0.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
var glassTests = []struct {
	prefs []language.Tag
	text  string
}{
	{
		[]language.Tag{language.Make("en-US"), language.Make("fr")},
		"I can eat glass and it doesn't hurt me.",
	},
	{
		[]language.Tag{language.Make("fr"), language.Make("en-US")},
		"Je peux manger du verre, ça ne me fait pas mal.",
	},
}

func TestGlass(t *testing.T) {
	for _, tt := range glassTests {
		text := Glass(tt.prefs...)
		if text != tt.text {
			t.Errorf("Glass(%v) = %q, want %q", tt.prefs, text, tt.text)
		}
	}
}
```

----------------------------------------

TITLE: Module Definition with Go Version Requirement
DESCRIPTION: Module file specifying the module name 'rsc.io/needgo121' and requiring Go 1.21 as the minimum version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo121_v0.0.1.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module rsc.io/needgo121
go 1.21
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: A go.mod file that defines the module name and Go version requirement for the fuzzing test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_run.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/x

go 1.16
```

----------------------------------------

TITLE: Main Program with Direct Module Imports
DESCRIPTION: Example Go program demonstrating correct usage of module imports without subdirectory specification. It imports modules from vcs-test.golang.org and prints hello world messages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_subdir.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
    "fmt"
    "vcs-test.golang.org/go/gitreposubdir"
    "vcs-test.golang.org/go/gitreposubdirv2/v2"
)

func main() {
    fmt.Println(greeter.Hello())
    fmt.Println(greeterv2.Hello())
}
```

----------------------------------------

TITLE: Initial Go Module File
DESCRIPTION: Defines the initial content of the go.mod file with module name and Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_toolchain.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
module m
go 1.8
```

----------------------------------------

TITLE: Defining a Simple Go Module (go.mod)
DESCRIPTION: This file defines a Go module named 'example.com' and declares that the code within this module requires Go version 1.16 or higher. This 'go.mod' file provides context for the 'go build' commands executed in the test script.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_gcflags_order.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- m/go.mod --
module example.com

go 1.16
```

----------------------------------------

TITLE: Initializing a Go Module (Shell)
DESCRIPTION: Initializes a new Go module named 'm' in the current directory by creating a 'go.mod' file. This is the first step in setting up the environment for testing module behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_sum_noroot.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go mod init m
```

----------------------------------------

TITLE: Module Configuration
DESCRIPTION: Go module definition file specifying the module name, Go version requirement, and dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-newerself.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/cmd

go 1.16

require example.com/cmd v1.0.0
```

----------------------------------------

TITLE: Testing Mutex Profiling in Go with Default Output
DESCRIPTION: Runs a Go test with mutex profiling enabled on the errors package. It then checks if the default test executable 'errors.test' was created.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_profile.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
go test -mutexprofile errors.prof errors
exists -exec errors.test$GOEXE
```

----------------------------------------

TITLE: Go Module Definition with Local Replacement
DESCRIPTION: A go.mod file defining a module 'example.com/a' that requires 'example.com/b' but replaces it with a local directory path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_replace_file.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/a

require example.com/b v1.0.0

replace example.com/b => ./local/b
```

----------------------------------------

TITLE: Defining and Retracting a Go Module Version in go.mod
DESCRIPTION: This `go.mod` file defines the module `example.com/retract/noupgrade`, requires Go 1.19, and explicitly retracts version `v1.0.0` using the `retract` directive. This prevents new projects from selecting this version while allowing existing dependencies to resolve.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_noupgrade_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: gomod
CODE:
```
module example.com/retract/noupgrade

go 1.19

retract v1.0.0 // bad
```

----------------------------------------

TITLE: Shell Commands for Testing Go Timeout Behavior
DESCRIPTION: Shell commands to demonstrate default and explicit timeout settings in Go tests. Shows how -timeout flag is propagated to test.timeout.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_timeout.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off
cd a

# If no timeout is set explicitly, 'go test' should set
# -test.timeout to its internal deadline.
go test -v . --
stdout '10m0s'

# An explicit -timeout argument should be propagated to -test.timeout.
go test -v -timeout 30m . --
stdout '30m0s'
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a local Go module with dependencies on golang.org/x/text and rsc.io/quote packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_local.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module local

require (
	golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
	rsc.io/quote v1.3.0
)
```

----------------------------------------

TITLE: Initialize Go Module
DESCRIPTION: Command to initialize a new Go module named 'm'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_disabled.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go mod init m
```

----------------------------------------

TITLE: Module B v0.1.0 Definition
DESCRIPTION: Definition for example.net/b module version 0.1.0 with dependency on example.net/a v0.2.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchcycle.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.net/b

go 1.16

require example.net/a v0.2.0
```

LANGUAGE: go
CODE:
```
package b

import _ "example.net/a"
```

----------------------------------------

TITLE: Replacing Module Version and Updating Dependencies in Go
DESCRIPTION: This snippet shows how to replace a module version using 'go mod edit', update dependencies with 'go mod tidy', and verify the changes in go.sum.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_replaced.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go mod edit -replace rsc.io/quote@v1.5.0=rsc.io/quote@v1.5.1
go mod tidy
grep 'rsc.io/quote v1.5.1' go.sum
cp go.sum go.sum.tidy
```

----------------------------------------

TITLE: Testing implicit -pgo=auto behavior (default)
DESCRIPTION: Tests that the -pgo=auto flag is the default behavior. Commands without explicitly specifying -pgo=auto should work the same way as with -pgo=auto.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
go build -a -n -o a1.exe ./a/a1
stderr 'compile.*-pgoprofile=.*a1.go'
stderr 'compile.*-p test/dep.*-pgoprofile=.*'

# check that pgo appears in build info
stderr 'build\\t-pgo=.*default\.pgo'

go build -a -n -o nopgo.exe ./nopgo
stderr 'compile.*nopgo.go'
! stderr 'compile.*-pgoprofile'

# check that pgo doesn't appear in build info
! stderr 'build\\t-pgo='
```

----------------------------------------

TITLE: Creating and Configuring Git Repository
DESCRIPTION: Creates a new Git repository with configuration for author and committer information. Sets up the initial repository structure with an empty README file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
mkdir git
cd git

env GIT_AUTHOR_NAME='Russ Cox'
env GIT_AUTHOR_EMAIL='rsc@golang.org'
env GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
env GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL

git init
```

----------------------------------------

TITLE: Main Module Configuration (go.mod)
DESCRIPTION: Primary module configuration file defining dependencies on modules b and d with version 0.1.0 and including replace directives for local module references.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_newroot.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.net/a

go 1.16

require (
	example.net/b v0.1.0
	example.net/d v0.1.0
)

replace (
	example.net/b v0.1.0 => ./b
	example.net/c v0.1.0 => ./c
	example.net/c v0.2.0 => ./c
	example.net/d v0.1.0 => ./d
)
```

----------------------------------------

TITLE: Inspecting Module with go list
DESCRIPTION: The snippets showcase the use of 'go list' with various flags to inspect module information and handle deprecation warnings in Go. The commands make use of flag combinations like '-m', '-u', and '-f' to demonstrate different outputs and how they correlate with module deprecation status.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_deprecated.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# 'go list pkg' does not show deprecation.
go list example.com/deprecated/a
stdout '^example.com/deprecated/a$'

# 'go list -m' does not show deprecation.
go list -m example.com/deprecated/a
stdout '^example.com/deprecated/a v1.9.0$'

# 'go list -m -versions' does not show deprecation.
go list -m -versions example.com/deprecated/a
stdout '^example.com/deprecated/a v1.0.0 v1.9.0$'

# 'go list -m -u' shows deprecation.
go list -m -u example.com/deprecated/a
stdout '^example.com/deprecated/a v1.9.0 \(deprecated\)$'

# 'go list -m -u -f' exposes the deprecation message.
go list -m -u -f {{.Deprecated}} example.com/deprecated/a
stdout '^in example.com/deprecated/a@v1.9.0$'

# This works even if we use an old version that does not have the deprecation
# message in its go.mod file.
go get example.com/deprecated/a@v1.0.0
! grep Deprecated: $WORK/gopath/pkg/mod/cache/download/example.com/deprecated/a/@v/v1.0.0.mod
go list -m -u -f {{.Deprecated}} example.com/deprecated/a
stdout '^in example.com/deprecated/a@v1.9.0$'

# 'go list -m -u' does not show deprecation for the main module.
go list -m -u
! stdout deprecated
go list -m -u -f '{{if not .Deprecated}}ok{{end}}'
stdout ok

# 'go list -m -u' does not show a deprecation message for a module that is not
# deprecated at the latest version, even if it is deprecated at the current
# version.
go list -m -u example.com/undeprecated
stdout '^example.com/undeprecated v1.0.0 \[v1.0.1\]$'
```

----------------------------------------

TITLE: Listing Available Go Versions
DESCRIPTION: Uses the go list command to display available Go versions. It checks for the presence of specific versions and ensures that version numbers are not prefixed with 'go'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_version.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go list -m -versions go
stdout 1.20.1 # among others
stdout 1.19rc2
! stdout go1.20.1 # no go prefixes
! stdout go1.19rc2
```

----------------------------------------

TITLE: Fetching Next Iteration in Parallel Benchmarks - Go
DESCRIPTION: Documents the Next method on the testing.PB type in Go's testing package. This method is used inside a parallel benchmark to check whether to execute the next iteration, returning true while there are more iterations to run. A typical pattern involves looping while pb.Next() returns true, which ensures the correct execution count in the parallel operation. Proper use is crucial for accurate and reliable parallel benchmark metrics.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_65

LANGUAGE: Go
CODE:
```
pkg testing, method (*PB) Next() bool
```

----------------------------------------

TITLE: Defining Simple Go Module
DESCRIPTION: These go.mod files define simple modules for example.net/b and example.net/c without any dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_extra.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
module example.net/b

go 1.15
```

LANGUAGE: Go
CODE:
```
module example.net/c

go 1.15
```

----------------------------------------

TITLE: Implementing Package with Multiple Module Dependencies
DESCRIPTION: Package file that demonstrates importing from multiple modules and versions. This shows how packages can depend on different modules including legacy paths.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-new.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package p1

import _ "vcs-test.golang.org/git/modlegacy1-old.git/p2"
import _ "vcs-test.golang.org/git/modlegacy1-new.git"
import _ "vcs-test.golang.org/git/modlegacy1-new.git/p2"
```

----------------------------------------

TITLE: Example Main Package for Coverage Testing
DESCRIPTION: A simple Go program that imports the fmt package and prints a message. Used to test coverage instrumentation on command-line specified files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_cmdline_pkgs.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

import "fmt"

func main() {
  fmt.Println("Hi dad")
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module configuration file specifying the module name 'rsc.io/needgo1183' and Go version requirement of 1.18.3
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo1183_v0.0.1.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module rsc.io/needgo1183
go 1.18.3
```

----------------------------------------

TITLE: Original Go Module Definition
DESCRIPTION: Base go.mod file defining the module 'm' with Go 1.13 requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patterns.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

go 1.13

```

----------------------------------------

TITLE: Main Module Configuration (go.mod)
DESCRIPTION: Main module configuration file defining module dependencies and replace directives for module versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/a

go 1.15

require example.com/b v0.2.0

replace (
	example.com/b v0.1.0 => ./b1
	example.com/b v0.2.0 => ./b2
	example.com/c v0.1.0 => ./c
	example.com/d v0.1.0 => ./d
	example.com/d v0.2.0 => ./d
)
```

----------------------------------------

TITLE: Main Package Import (a.go)
DESCRIPTION: Main package file importing module b.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package a

import _ "example.com/b"
```

----------------------------------------

TITLE: Setting Go Module Environment Variable (Shell)
DESCRIPTION: Sets the GO111MODULE environment variable to 'on', explicitly enabling Go module support for the subsequent commands in the script. This ensures the script operates in module-aware mode.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Main Module Definition (go.mod)
DESCRIPTION: The main go.mod file for the test project that defines module requirements. It requires rsc.io/quote v1.5.2 directly and includes a local replacement for the old-indirect module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_downgrade_ambiguous.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module use

go 1.16

require (
	old-indirect v0.0.0
	rsc.io/quote v1.5.2
)

replace old-indirect v0.0.0 => ./old-indirect
```

----------------------------------------

TITLE: Go Workspace Overlay Definition
DESCRIPTION: Go workspace configuration file defining module usage in overlay context
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_overlay.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
use (
    ./a
    ./b
)
```

----------------------------------------

TITLE: Selective File Embedding with Path in Go
DESCRIPTION: Specifying a relative file path `symdir/x.txt`, this Go file demonstrates precise file inclusion into the `Z` string variable. It showcases the ability to embed specific files with direct paths using the `embed` package, appropriate for single file inclusion use cases.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
package p

import "embed"

//go:embed symdir/x.txt
var Z string
```

----------------------------------------

TITLE: Configuring Go Module with Replacement (go.mod)
DESCRIPTION: Defines a Go module named 'm'. It requires version 1.5.2 of 'rsc.io/quote' and specifies a replacement directive, mapping 'rsc.io/quote v1.5.2' to 'example.com/quote v1.5.2'. This configuration sets up the scenario for testing the error handling when the module at 'example.com/quote' declares an inconsistent module path in its own `go.mod`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_replace_mismatch.txt#2025-04-22_snippet_1

LANGUAGE: mod
CODE:
```
-- go.mod --
module m

require rsc.io/quote v1.5.2

replace rsc.io/quote v1.5.2 => example.com/quote v1.5.2

```

----------------------------------------

TITLE: Go Module with Explicit Package Requirement
DESCRIPTION: Modified go.mod file after adding explicit requirement for indirect-with-pkg
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_promote_implicit.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

go 1.16

require (
	direct v1.0.0
	indirect-with-pkg v1.0.0
)

replace (
	direct v1.0.0 => ./direct
	indirect-with-pkg v1.0.0 => ./indirect-with-pkg
	indirect-without-pkg v1.0.0 => ./indirect-without-pkg
)
```

----------------------------------------

TITLE: Initial Go workspace configuration
DESCRIPTION: The initial go.work file that specifies Go 1.18 and uses the 'sub' directory as a workspace module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_issue50958.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
go 1.18

use sub
```

----------------------------------------

TITLE: Workspace Configuration with go.work
DESCRIPTION: Defines a Go workspace configuration that includes two modules 'a' and 'b'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_relevant_dependency.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go 1.18

use (
	./a
	./b
)
```

----------------------------------------

TITLE: Defining Go Module M
DESCRIPTION: Defines the Go module named 'M' and specifies the minimum required Go version as 1.21. This `go.mod` file establishes the root of the test project's module structure, necessary for resolving imports like 'M/a'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_single_vs_multiple.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- go.mod --
module M

go 1.21
```

----------------------------------------

TITLE: Standard Go Module Definition (go.mod)
DESCRIPTION: This standard `go.mod` file defines the module path 'example.com/deprecated/b' and sets the minimum required Go version to '1.17'. This is the canonical file recognized by the Go toolchain for managing module dependencies and versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_b_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/deprecated/b

go 1.17
```

----------------------------------------

TITLE: Defining a Simple Go Module
DESCRIPTION: This snippet shows a basic go.mod file for the 'example.net/pkgremoved' module without any dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchmod.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.net/pkgremoved

go 1.16
```

----------------------------------------

TITLE: Implementing Parallel Subtests in Go
DESCRIPTION: This Go code defines a test function with nested subtests. The outer subtest 'Sub' runs in parallel and waits for a signal from a channel before executing its nested subtest 'Nested'. This structure demonstrates Go's capability for parallel test execution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_subtests_parallel.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package standalone_parallel_sub_test

import "testing"

func Test(t *testing.T) {
	ch := make(chan bool, 1)
	t.Run("Sub", func(t *testing.T) {
		t.Parallel()
		<-ch
		t.Run("Nested", func(t *testing.T) {})
	})
	// Ensures that Sub will finish after its t.Run call already returned.
	ch <- true
}
```

----------------------------------------

TITLE: Main Application Entry Point
DESCRIPTION: Main Go file that imports and uses the dependency package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_disablevendor.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import "example.com/dep"

func main() {
	dep.Dep()
}
```

----------------------------------------

TITLE: Initializing a Go Module in a Subdirectory (Shell)
DESCRIPTION: Changes the current directory to 'x' and then successfully initializes a Go module within that directory. The module path is specified as 'example.com/x'. This requires the Go toolchain to be installed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_path.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
cd x
go mod init example.com/x
```

----------------------------------------

TITLE: Testing Coverage for Go Packages
DESCRIPTION: The snippet runs Go tests with coverage for specific packages using the Go toolchain. It verifies that the coverage for each package is non-zero and has a detectable percentage. Dependencies include Go installed and available on the PATH. Parameters include package names such as strings and regexp. The expected outputs are coverage percentages for each package, which should be greater than zero.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_runs.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -short -coverpkg=strings strings regexp
! stdout '[^0-9]0\.0%'
stdout  'strings.*coverage:.*[1-9][0-9.]+%'
stdout  'regexp.*coverage:.*[1-9][0-9.]+%'
```

LANGUAGE: shell
CODE:
```
go test -short -cover strings math regexp
! stdout '[^0-9]0\.0%'
stdout  'strings.*coverage:.*[1-9][0-9.]+%'
stdout  'math.*coverage:.*[1-9][0-9.]+%'
stdout  'regexp.*coverage:.*[1-9][0-9.]+%'
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: Contents of the go.mod file defining the module 'm' without any go version or toolchain specifications.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/old_tidy_toolchain.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
module m
```

----------------------------------------

TITLE: Go Workspace Definition
DESCRIPTION: Defines a Go workspace with version 1.700 requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_gomod_issue61455.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com

go 1.700
```

----------------------------------------

TITLE: Testing Subtest Deadline Within a Minute in Go
DESCRIPTION: This function tests that t.Deadline() behaves correctly in a subtest context, ensuring that the subtest inherits the deadline from its parent test. It verifies that the deadline is non-zero, after the current time, and within one minute of the subtest start.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_deadline.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
func TestSubtestDeadlineWithinMinute(t *testing.T) {
	t.Run("sub", func(t *testing.T) {
		now := time.Now()
		d, ok := t.Deadline()
		if !ok || d.IsZero() {
			t.Fatalf("t.Deadline() = %v, %v; want nonzero deadline", d, ok)
		}
		if !d.After(now) {
			t.Fatalf("t.Deadline() = %v; want after start of test (%v)", d, now)
		}
		if d.Sub(now) > time.Minute {
			t.Fatalf("t.Deadline() = %v; want within one minute of start of test (%v)", d, now)
		}
	})
}
```

----------------------------------------

TITLE: Go Module Definition File
DESCRIPTION: Go module file that specifies the module name and version requirements for dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module quoter

require rsc.io/quote/v3 v3.0.0
```

----------------------------------------

TITLE: Simple Go Package Implementation
DESCRIPTION: An empty Go package declaration for package 'a'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package a
```

----------------------------------------

TITLE: Listing Go Modules in Workspace
DESCRIPTION: This snippet shows how to list all modules in a Go workspace and demonstrates the behavior of the -mod flag in workspace mode.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go list all # all includes both modules
stdout 'example.com/a'
stdout 'example.com/b'

# -mod can only be set to readonly in workspace mode
go list -mod=readonly all
! go list -mod=mod all
stderr '^go: -mod may only be set to readonly or vendor when in workspace mode'
env GOWORK=off
go list -mod=mod all
env GOWORK=
```

----------------------------------------

TITLE: Display Module Dependencies
DESCRIPTION: Command to show the module dependency graph.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_disabled.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
go mod graph
```

----------------------------------------

TITLE: Specifying Go Module Path in go.mod - Plaintext - Go
DESCRIPTION: This snippet is the standard declaration for the module path at the head of a go.mod file. It allows the Go tooling to associate the source directory with the golang.org/toolchain module. It does not include additional dependencies or requirements; other declarations would typically follow in a complete go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.7.linux-amd64.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: Test Implementation for Main Package in Go
DESCRIPTION: Tests for main package that verify MFunc returns "42" and M2Func returns 0 (sum of 42 from a.AFunc and -42 from b.BFunc).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
package main

import "testing"

func TestMain(t *testing.T) {
	if MFunc() != "42" {
		t.Fatalf("bad!")
	}
	if M2Func() != 0 {
		t.Fatalf("also bad!")
	}
}
```

----------------------------------------

TITLE: Atomic Value Type and Access - sync/atomic Package - Go
DESCRIPTION: Introduces Value struct in sync/atomic for safe concurrent storage, and Load()/Store() methods for reading/writing interface{} values atomically. Value provides a lock-free, thread-safe container for shared data. All reads and writes must use provided methods; improper use may result in panics or race conditions.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_23

LANGUAGE: Go
CODE:
```
type Value struct
method (*Value) Load() interface{}
method (*Value) Store(interface{})
```

----------------------------------------

TITLE: Defining Go Module with Replacements
DESCRIPTION: This snippet shows the content of the go.mod file, which defines the module and includes several replace directives for different versions of modules 'm' and 'm/p'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_arg.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com

go 1.16

replace (
	m v0.1.0 => ./m01
	m v0.2.0 => ./m02
	m v0.3.0 => ./m03
	m/p v0.1.0 => ./mp01
	m/p v0.2.0 => ./mp02
	m/p v0.3.0 => ./mp03
)
```

----------------------------------------

TITLE: Adding time measurement methods to Duration type in time package
DESCRIPTION: Declaration of Microseconds and Milliseconds methods for the Duration type in the time package. These methods convert a duration to microseconds and milliseconds respectively.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_177

LANGUAGE: go
CODE:
```
func (Duration) Microseconds() int64
func (Duration) Milliseconds() int64
```

----------------------------------------

TITLE: Go 1.22 Module Configuration
DESCRIPTION: Module configuration for Go 1.22 testing embedded files with version and replacement directives.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_embed.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/foo
go 1.22

require (
	example.com/a v0.1.0
)

replace (
	example.com/a v0.1.0 => ../a
)
```

----------------------------------------

TITLE: Interface Definitions in Go
DESCRIPTION: Interface type definitions with method signatures and embedded interfaces.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p1/golden.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
type Error interface {
    Error() string
    Temporary() bool
}

type I interface {
    Get(string) int64
    GetNamed(string) int64
    Name() string
    Set(string, int64)
}

type Public interface {
    X()
    Y()
}
```

----------------------------------------

TITLE: Defining Go Module with go.mod
DESCRIPTION: Defines a Go module named 'importmain' with Go 1.16 as the required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_import_main_loop.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module importmain

go 1.16
```

----------------------------------------

TITLE: Go Module Configuration
DESCRIPTION: A go.mod file defining the module dependencies and replacements. The module requires several packages and specifies local filesystem replacements for each dependency, demonstrating module replacement functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module m

require (
	a v1.0.0
	mysite/myname/mypkg v1.0.0
	w v1.0.0 // indirect
	x v1.0.0
	y v1.0.0
	z v1.0.0
)

replace (
	a v1.0.0 => ./a
	mysite/myname/mypkg v1.0.0 => ./mypkg
	w v1.0.0 => ./w
	x v1.0.0 => ./x
	y v1.0.0 => ./y
	z v1.0.0 => ./z
)
```

----------------------------------------

TITLE: Empty PGO Profile (PGO)
DESCRIPTION: This is an empty Profile-Guided Optimization (PGO) profile file named `default.pgo`, located in the `a` directory. Its presence, even empty, signals to the Go toolchain (version 1.21+) to apply PGO-specific build optimizations and behaviors for the corresponding package (`m/a`), which is being tested here.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pgo_issue66218.txt#2025-04-22_snippet_4

LANGUAGE: pgo
CODE:
```

```

----------------------------------------

TITLE: Defining Core FS Functions in io/fs Package
DESCRIPTION: Core filesystem functions for retrieving file info and reading symbolic links in the io/fs package.
SOURCE: https://github.com/golang/go/blob/master/api/next/49580.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
func Lstat(FS, string) (FileInfo, error)
func ReadLink(FS, string) (string, error)
```

----------------------------------------

TITLE: Defining Go Module Configuration (gomod)
DESCRIPTION: This `go.mod` file declares a Go module named `m` and specifies that it requires Go version 1.23 or later. It establishes the root of the module hierarchy for the test project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pgo_issue66218.txt#2025-04-22_snippet_2

LANGUAGE: gomod
CODE:
```
module m

go 1.23
```

----------------------------------------

TITLE: Configuring Go Workspace in go.work
DESCRIPTION: Defines the Go version for the workspace. This file is used to specify module dependencies and workspace configuration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_build_no_modules.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
go 1.18
```

----------------------------------------

TITLE: Archive/zip Package Method Additions
DESCRIPTION: New methods added to archive/zip package including OpenRaw(), Copy(), and CreateRaw() for working with raw zip file data
SOURCE: https://github.com/golang/go/blob/master/api/go1.17.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
func (*File) OpenRaw() (io.Reader, error)
func (*Writer) Copy(*File) error
func (*Writer) CreateRaw(*FileHeader) (io.Writer, error)
```

----------------------------------------

TITLE: Implementing Race Condition Benchmark in Go
DESCRIPTION: This snippet defines a benchmark function BenchmarkRace that creates a race condition similar to TestRace. It's designed to measure the performance impact of the race condition over multiple iterations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
func BenchmarkRace(b *testing.B) {
	for i := 0; i < b.N; i++ {
		c := make(chan int)
		x := 1
		go func() {
			x = 2
			c <- 1
		}()
		x = 3
		<-c
		_ = x
	}
}
```

----------------------------------------

TITLE: Testing the Hello Function in Go Quote Package
DESCRIPTION: Provides a unit test for the Hello() function to ensure it returns the expected greeting string.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package quote

import "testing"

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}
```

----------------------------------------

TITLE: Test Implementation for Package 'b' in Go
DESCRIPTION: Test function for package 'b' that verifies BFunc returns the expected value of -42.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package b

import "testing"

func TestB(t *testing.T) {
	if BFunc() != -42 {
		t.Fatalf("bad!")
	}
}
```

----------------------------------------

TITLE: Running Module Listing, Graph, and Output Comparison with Go CLI - Shell
DESCRIPTION: These shell snippets execute a sequence of Go CLI commands ('go list', 'go list -m', and 'go mod graph') to list dependencies and modules in the project, and then validate their outputs against expected results using 'cmp'. These scripts require the Go toolchain available on the environment, with the working directory properly set up and GO111MODULE set to 'on'. Inputs are the presence of module directories and pre-filled go.mod files; outputs are compared directly to baseline text files to check correctness.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
env GO111MODULE=on
```

LANGUAGE: sh
CODE:
```
go list -f '{{with .Module}}{{.Path}}{{with .Version}} {{.}}{{end}}{{end}}' all
cmp stdout pkgmods.txt
```

LANGUAGE: sh
CODE:
```
go list -m all
cmp stdout mods.txt
```

LANGUAGE: sh
CODE:
```
go mod graph
cmp stdout graph.txt
```

----------------------------------------

TITLE: Running Go Tests with Race Detection and Coverage
DESCRIPTION: This command executes the tests for the 'issue.56370/filter' package. The `-race` flag enables the data race detector, and the `-cover` flag enables code coverage analysis. The preceding lines `[short] skip` and `[!race] skip` are likely build constraints or directives for the test environment.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_race_issue56370.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
[short] skip
[!race] skip

go test -race -cover issue.56370/filter
```

----------------------------------------

TITLE: Executing Go Get Command for Dependency Upgrade in Go
DESCRIPTION: This command runs 'go get' with the -v (verbose) and -u (upgrade) flags to update dependencies for the current module and example.net/b to v0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go get -v -u . example.net/b@v0.1.0
```

----------------------------------------

TITLE: Defining byte manipulation functions in Go
DESCRIPTION: Function signatures for the bytes package, including ReplaceAll which replaces all occurrences of a byte slice with another byte slice.
SOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
func ReplaceAll([]uint8, []uint8, []uint8) []uint8
```

----------------------------------------

TITLE: Go Module Configuration with Retraction
DESCRIPTION: Defines a Go module configuration that retracts version v1.2.0 of the example.com/retract/newergoversion module. Uses Go version 1.23.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_newergoversion_v1.2.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/retract/newergoversion

go 1.23

retract v1.2.0
```

----------------------------------------

TITLE: Go File with Tag2 Build Constraint
DESCRIPTION: A Go file (y.go) that uses the 'tag2' build constraint. This file will only be included in the build when 'tag2' is specified.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_tags.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
// +build tag2

package y
```

----------------------------------------

TITLE: Implementing Language Tag Handling in Go
DESCRIPTION: This snippet defines the core functionality for handling language tags, including creation, string conversion, and matching. It implements a Tag type, a Matcher interface, and a basic matcher struct.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_text_v0.0.0-20170915032832-14c0d48ead0c.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This is a tiny version of golang.org/x/text.

package language

import "strings"

type Tag string

func Make(s string) Tag { return Tag(s) }

func (t Tag) String() string { return string(t) }

func NewMatcher(tags []Tag) Matcher { return &matcher{tags} }

type Matcher interface {
	Match(...Tag) (Tag, int, int)
}

type matcher struct {
	tags []Tag
}

func (m *matcher) Match(prefs ...Tag) (Tag, int, int) {
	for _, pref := range prefs {
		for _, tag := range m.tags {
			if tag == pref || strings.HasPrefix(string(pref), string(tag+"-")) || strings.HasPrefix(string(tag), string(pref+"-")) {
				return tag, 0, 0
			}
		}
	}
	return m.tags[0], 0, 0
}
```

----------------------------------------

TITLE: Testing GOPRIVATE Behavior in Go Module Fetching
DESCRIPTION: Tests the behavior of GOPRIVATE when fetching golang.org/x/text. Verifies that the version from the proxy is not used when the module is marked as private.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gonoproxy.txt#2025-04-22_snippet_7

LANGUAGE: Shell
CODE:
```
[!net:golang.org] skip
env GOSUMDB=
env GONOPROXY=
env GOPRIVATE='*/x'
go get golang.org/x/text
go list -m all
! stdout 'text.*v0.0.0-2017' # should not have the version from the proxy
```

----------------------------------------

TITLE: Testing Buggy Package in Go
DESCRIPTION: This snippet contains a test function for the buggy package. It intentionally fails the test by calling t.Fatal("buggy!").
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162918-a91498bed0a7.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package buggy

import "testing"

func Test(t *testing.T) {
	t.Fatal("buggy!")
}
```

----------------------------------------

TITLE: Go Package Import Example
DESCRIPTION: This snippet demonstrates a simple Go file that imports a package from one of the modules defined in the project. It shows how the package is referenced in the code.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_import.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package importer
import _ "example.net/m/p"
```

----------------------------------------

TITLE: Main Module Configuration
DESCRIPTION: Main go.mod file defining module dependencies and replacements for version control
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchbound.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example

go 1.16

require (
	example.net/a v0.1.0
	example.net/b v0.1.0 // indirect
)

replace (
	example.net/a v0.1.0 => ./a
	example.net/a v0.2.0 => ./a
	example.net/a v0.3.0 => ./a
	example.net/b v0.1.0 => ./b10
	example.net/b v0.1.1 => ./b11
	example.net/b v0.1.2 => ./b12
)
```

----------------------------------------

TITLE: Comparing OIDs and ASN1 Object Identifiers - crypto/x509 - Go
DESCRIPTION: The OID type gains Equal and EqualASN1OID methods for comparing OID instances or with asn1.ObjectIdentifier types. Both return bool indicating equality. Enables direct comparison for cryptographic and certificate purposes.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
func (o OID) Equal(other OID) bool
```

LANGUAGE: Go
CODE:
```
func (o OID) EqualASN1OID(oid asn1.ObjectIdentifier) bool
```

----------------------------------------

TITLE: Go Workspace Configuration
DESCRIPTION: Main workspace configuration file specifying Go version 1.18 and including two modules 'a' and 'b' in the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_why_download_graph.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go 1.18

use (
	./a
	./b
)
```

----------------------------------------

TITLE: Go Package with Embedded File
DESCRIPTION: Defines a Go package 'blah' that uses the embed directive to include a README.md file as a string variable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_module_when_error.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package blah

import _ "embed"

//go:embed README.md
var readme string
```

----------------------------------------

TITLE: Testing Go Module Import Cycle Detection with Shell Commands
DESCRIPTION: A series of shell commands that test how the Go toolchain handles import cycles. It first attempts a normal 'go list all' which should fail with a specific error message, then tests 'go list -e' which should continue despite errors and mark packages as incomplete.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_cycle.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

# 'go list all' should fail with a reasonable error message
! go list all
stderr '^package m\n\timports m/a from m.go\n\timports m/b from a.go\n\timports m/a from b.go: import cycle not allowed'

# 'go list -e' should not print to stderr, but should mark all three
# packages (m, m/a, and m/b) as Incomplete.
go list -e -json all
! stderr .
stdout -count=3 '"Incomplete": true,'
```

----------------------------------------

TITLE: Main Package with Dependency Import
DESCRIPTION: The main package file that imports a dependency and defines a constant using Go 1.13+ syntax.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_10

LANGUAGE: Go
CODE:
```
package m

import _ "example.com/dep"

const x = 1_000
```

----------------------------------------

TITLE: Downloading Go Modules and Verifying Integrity
DESCRIPTION: This snippet demonstrates downloading Go modules, populating go.sum, and verifying module integrity. It also shows how module verification fails when a critical file is deleted.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_partial.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Download modules and populate go.sum.
go get -modcacherw
exists $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/go.mod

# 'go mod verify' should fail if we delete a file.
go mod verify
rm $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/go.mod
! go mod verify
```

----------------------------------------

TITLE: Implementation of Package A with Test
DESCRIPTION: Package 'a' containing a Go implementation and test that imports package 'f'. It has a global variable G and a function AFunc() that returns the result of f.Id().
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_partial.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package a

import "M/f"

var G int

func AFunc() int {
	G = 1
	return f.Id()
}
```

LANGUAGE: go
CODE:
```
package a

import "testing"

func TestA(t *testing.T) {
	if AFunc() != 42 {
		t.Fatalf("bad!")
	}
}
```

----------------------------------------

TITLE: Package Variable Definition in Go
DESCRIPTION: Defines a package named `pkg` with a single variable `Text` initialized to "unset". This variable is intended to be set via the build process using ldflags, showing flexibility in environment configuration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_link_x_import_path_escape.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- pkg.go --
package pkg

var Text = "unset"
```

----------------------------------------

TITLE: Go Module Configuration
DESCRIPTION: A Go module file (go.mod) that defines the module name as 'example', specifies Go version 1.22, and requires the external dependency 'rsc.io/sampler' at version 1.3.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache_vendor.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example
go 1.22
require rsc.io/sampler v1.3.0
```

----------------------------------------

TITLE: Main Package Import
DESCRIPTION: Main package file importing example.net/a module
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_wild.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package example

import _ "example.net/a"
```

----------------------------------------

TITLE: Implementing Minimal Go Program in foo.go
DESCRIPTION: Contains a basic Go program with an empty main function. This serves as the entry point for the Go application.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_build_no_modules.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Defining Go Module with Version and Path - Go
DESCRIPTION: This snippet defines a Go module by specifying its path (example.net/pkgadded) and the required Go version (1.16). Required as a manifest to initialize the module and enable dependency management, it should be included as the root go.mod file of a Go project. The module directive sets the import path, while the go directive specifies the Go toolchain version required.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
-- .mod --
module example.net/pkgadded

go 1.16
```

LANGUAGE: go
CODE:
```
-- go.mod --
module example.net/pkgadded

go 1.16
```

----------------------------------------

TITLE: Go Module Definition for Coverage Testing
DESCRIPTION: Defines a Go module named 'coverdot' with Go 1.16 as the target version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dot_import.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module coverdot

go 1.16
```

----------------------------------------

TITLE: Resolving Dependency with Go Get
DESCRIPTION: This snippet shows how to use 'go get' to resolve the dependency and how it's marked as indirect in go.mod.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_indirect.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go get rsc.io/quote
grep 'rsc.io/quote v\d+\.\d+\.\d+ // indirect$' go.mod
! grep 'rsc.io/quote v\d+\.\d+\.\d+$' go.mod
```

----------------------------------------

TITLE: Go Workspace Configuration
DESCRIPTION: Workspace configuration file specifying Go version and module usage
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_regression_hang.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go 1.16

use (
	./a
)
```

----------------------------------------

TITLE: Initializing and Managing Go Modules - Go mod and go list - Shell
DESCRIPTION: This snippet initializes a new Go module using `go mod init`, edits its dependency using `go mod edit -require`, and then uses various forms of the `go list -m` command with the `-mod=readonly` flag to query for specific module versions as well as available versions. It also verifies correct stdout and stderr output, including triggering and capturing specific error states related to missing or required entries in the `go.sum` file. Dependencies required include Go tools in the shell environment and network access for module fetching. Inputs are Go module paths and versions; outputs are command results and error messages. The test is constrained by current Go tooling behavior, some of which is marked as pending improvements in issue 41297.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_sums.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# https://golang.org/issue/41297: 'go list -m' should not require go.sum with
# -versions or when all args are version queries.

go mod init m
go mod edit -require=rsc.io/quote@v1.5.1

go list -m -mod=readonly rsc.io/quote@latest
stdout '^rsc\.io/quote v1\.5\.2$'
! stderr .

go list -m -mod=readonly -versions rsc.io/quote
stdout 'rsc\.io/quote v1\.0\.0 .* v1\.5\.3-pre1$'
! stderr .

# Incidentally fetching the required version of a module records its checksum,
# just because it happens to be in the build list, and recording the checksum
# triggers an error under -mod=readonly.
#
# TODO(#41297): This should not be an error.
! go list -m -mod=readonly rsc.io/quote@<v1.5.2
stderr '^go: updates to go.sum needed, disabled by -mod=readonly$'
! stderr 'missing go.sum entry'

# Attempting to list the versions of a module that is not a root dependency
# causes the build list to be resolved (so that the selected version can *also*
# be identified, even though it is not relevant to this particular output).
# That, in turn, causes us to need checksums for the go.sum files for the
# modules in the module graph.
#
# TODO(#41297): This should not be an error either.
! go list -m -mod=readonly -versions rsc.io/sampler
stderr '^go: rsc\.io/quote@v1\.5\.1: missing go\.sum entry for go.mod file; to add it:\n\tgo mod download rsc\.io/quote$'

```

----------------------------------------

TITLE: Main Module Definition
DESCRIPTION: Defines the main module 'example.com/m' with its Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_install_submodule.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/m

go 1.18
```

----------------------------------------

TITLE: Empty Go Module Definition
DESCRIPTION: A minimal go.mod file that defines a module named 'm' with Go 1.16 as the required version. This file is used as a template in the test script.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path_dotname.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Running Go Tests Verbosely
DESCRIPTION: Executes Go tests in verbose mode for the current directory. This command provides detailed output for each test run.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_issue45477.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go test -v .
```

----------------------------------------

TITLE: Module P Configuration and Main Function
DESCRIPTION: This snippet shows the go.mod file for module 'example.com/p' and its main Go file. It requires 'example.com/q' v1.0.0 and uses its PrintVersion function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
module example.com/p

go 1.18

require example.com/q v1.0.0

replace example.com/q v1.0.0 => ../q1_0_0
replace example.com/q v1.1.0 => ../q1_1_0
```

LANGUAGE: Go
CODE:
```
package main

import "example.com/q"

func main() {
	q.PrintVersion()
}
```

----------------------------------------

TITLE: Go Vet Dependency Test Script
DESCRIPTION: Shell script commands to test go vet behavior with module dependencies. Sets GO111MODULE=off and verifies that go vet only processes immediate dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_deps.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off

# Issue 30296. Verify that "go vet" uses only immediate dependencies.

# First run fills the cache.
go vet a

go vet -x a
! stderr 'transitive'
```

----------------------------------------

TITLE: Testing Go Generate for Various Scenarios
DESCRIPTION: A series of test commands using 'go generate' to check its behavior in different situations, including directories without Go files, non-existent modules, and files with build constraints.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_invalid.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
! go generate ./nogo
! stdout 'Fail'
stderr 'no Go files'

! go generate foo.bar/nothing
stderr 'no required module provides package foo.bar/nothing'

go generate -v ./excluded
! stdout 'Fail'
! stderr 'go'

go generate ./nopkg
stdout 'Success a'
! stdout 'Fail'

go generate ./inconsistent
stdout 'Success a'
stdout 'Success b'
stdout -count=2 'Success c'
! stdout 'Fail'

go generate ./syntax
stdout 'Success a'
stdout 'Success b'
! stdout 'Fail'

go generate ./importerr
stdout 'Success a'
stdout 'Success b'
stdout 'Success c'
```

----------------------------------------

TITLE: Go Module Dependencies Declaration
DESCRIPTION: Specifies the required module dependency rsc.io/fortune at version 1.0.0
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
rsc.io/fortune v1.0.0
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a basic Go module named 'example.com' using Go version 1.14
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_linkshared.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com

go 1.14
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module definition file declaring module 'x'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_proxy_list.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module x
```

----------------------------------------

TITLE: No PGO main package implementation
DESCRIPTION: A simple main package without PGO file that is used to test behavior when default.pgo is absent.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
package main
func main() {}
```

----------------------------------------

TITLE: Go Workspace Base Configuration
DESCRIPTION: Initial go.work file configuration specifying Go version 1.18 and including foo module and a non-existent foo/bar module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go 1.18

use (
	foo
	foo/bar // doesn't exist
)
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module definition file showing module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_main.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module rsc.io

go 1.13
```

----------------------------------------

TITLE: Direct Usage Module
DESCRIPTION: Go file demonstrating direct import of the lazyupgrade module
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_upgrade_lazy.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package use

import _ "example.com/lazyupgrade"
```

----------------------------------------

TITLE: Defining a Simple Go Module (go.mod)
DESCRIPTION: This `go.mod` file defines a Go module with the path `x`. It serves as the root of the module and is used by Go tools to manage dependencies. Initially, it only declares the module path; dependencies will be added by commands like `go get`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import.txt#2025-04-22_snippet_4

LANGUAGE: go.mod
CODE:
```
-- go.mod --
module x
```

----------------------------------------

TITLE: Testing Vendoring Behavior
DESCRIPTION: Demonstrates that -mod=vendor is not automatically applied without an explicit 'go' directive in go.mod, and shows the error message when vendoring is inconsistent.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
! go list -mod=vendor all
! stderr '^go: inconsistent vendoring'
stderr 'cannot find module providing package example.com/badedit: import lookup disabled by -mod=vendor'
```

----------------------------------------

TITLE: Go Module Definition with Dependencies
DESCRIPTION: Main go.mod file defining module 'm' with dependencies on rsc.io/quote and example.com/r
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_old.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.15

require (
	rsc.io/quote v1.5.2
	example.com/r v0.0.0
)

replace example.com/r => ./r
```

----------------------------------------

TITLE: Executing Go List Commands in Shell
DESCRIPTION: This shell script demonstrates the use of the go list command to list Go import paths under different module settings (GO111MODULE on and off) and for specific versions. It shows how to populate the go.sum file, download specific module versions, and verify the import paths of modules. Dependencies include Go installed with available go list command. Execution depends on the Go environment variables like GOROOT and GOPATH being correctly set.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_dir.txt#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
# populate go.sum\ngo get\n\nenv GO111MODULE=off\ngo list -f '{{.ImportPath}}' $GOROOT/src/math\nstdout ^math$\n\nenv GO111MODULE=on\ngo list -f '{{.ImportPath}}' $GOROOT/src/math\nstdout ^math$\ngo list -f '{{.ImportPath}}' .\nstdout ^x$\n\ngo mod download rsc.io/quote@v1.5.2\ngo list -f '{{.ImportPath}}' $GOPATH/pkg/mod/rsc.io/quote@v1.5.2\nstdout '^rsc.io/quote$'\ngo list -f '{{.ImportPath}}' $GOPATH/pkg/mod/rsc.io/sampler@v1.3.0\nstdout '^rsc.io/sampler$'\ngo get rsc.io/sampler@v1.3.1\ngo list -f '{{.ImportPath}}' $GOPATH/pkg/mod/rsc.io/sampler@v1.3.1\nstdout '^rsc.io/sampler$'\n! go list -f '{{.ImportPath}}' $GOPATH/pkg/mod/rsc.io/sampler@v1.3.0\nstderr 'outside main module or its selected dependencies'\n
```

----------------------------------------

TITLE: Vendoring Dependencies in Go Project
DESCRIPTION: Uses 'go mod vendor' to create a 'vendor' directory containing copies of all dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
go mod vendor
```

----------------------------------------

TITLE: Configuring Module 'm' with Dependencies
DESCRIPTION: This go.mod file for module 'm' specifies its dependencies and includes a replace directive for 'example.com/dep'. However, this replace will be overridden by the one in go.work.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict_override.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/m

require example.com/dep v1.0.0
replace example.com/dep => ./dep1
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_import_error_stack.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module testdep

go 1.16
```

----------------------------------------

TITLE: Running Go Tests with Skip Flag
DESCRIPTION: These commands demonstrate different ways to use the -skip flag with go test. They show how to skip all tests, specific tests, or examples based on different patterns.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_skip.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go test -v -run Test -skip T skip_test.go
```

LANGUAGE: Shell
CODE:
```
go test -v -skip T skip_test.go
```

LANGUAGE: Shell
CODE:
```
go test -v -skip 1 skip_test.go
```

LANGUAGE: Shell
CODE:
```
go test -v -skip 2/3 skip_test.go
```

LANGUAGE: Shell
CODE:
```
go test -v -skip 2/4 skip_test.go
```

LANGUAGE: Shell
CODE:
```
go test -v -skip Example skip_test.go
```

----------------------------------------

TITLE: Querying All Available Module Versions Using go list - Go - Shell
DESCRIPTION: This snippet demonstrates querying all available versions of the specified Go module using the -versions flag. It requires network access and the Go toolchain. The critical parameter is the module path, and the expected output should only display the module path, as no tagged versions are available due to the odd tags being filtered out. This is useful for testing the effect of non-standard tags on module version listing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_odd_tags.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go list -m -versions vcs-test.golang.org/git/odd-tags.git
stdout -count=1 '^.'
stdout '^vcs-test.golang.org/git/odd-tags.git$'  # No versions listed — the odd tags are filtered out.
```

----------------------------------------

TITLE: Go Module Definition with Version 1.22
DESCRIPTION: Main module definition requiring Go 1.22 and depending on example.net/a package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_version_tooold.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example

go 1.22

require example.net/a v0.1.0

replace example.net/a v0.1.0 => ./a
```

----------------------------------------

TITLE: Specifying Go Toolchain Version (Go Module Syntax)
DESCRIPTION: Declares the specific version (`v0.0.1-go1.22.1.linux-amd64`) of the `golang.org/toolchain` to be used. This line likely appears in a Go project's configuration, potentially within a `go.mod` file or a related dependency manifest, indicating the required toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.1.linux-amd64.txt#2025-04-22_snippet_0

LANGUAGE: gomod
CODE:
```
golang.org/toolchain v0.0.1-go1.22.1.linux-amd64
```

----------------------------------------

TITLE: Defining Module Dependencies and Replacements in go.mod
DESCRIPTION: This go.mod file for the main module 'example.com/m' specifies its dependencies and includes a module replacement. It shows how to require specific versions of dependencies and replace them locally.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example.com/m

require example.com/dep v1.0.0
require example.com/other v1.0.0

replace example.com/other v1.0.0 => ./other
```

----------------------------------------

TITLE: Interface and Implementation for Package 'it' in Go
DESCRIPTION: Package 'it' defines a Ctr interface with a Count method, a concrete Conc struct that implements this interface, and utility functions for working with these types.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
package it

type Ctr interface {
	Count() int
}

type Conc struct {
	X int
}

func (c *Conc) Count() int {
	return c.X
}

func DoCall(c *Conc) {
	c2 := Callee(c)
	println(c2.Count())
}

func Callee(ii Ctr) Ctr {
	q := ii.Count()
	return &Conc{X: q}
}
```

----------------------------------------

TITLE: Declaring a Go Module with Self-Retraction - Go
DESCRIPTION: Declares a Go module named example.com/retract/self/prerelease and sets the minimum required Go version to 1.15. It is used to define the module boundary and constraint the toolchain version. The module directive is required for module-aware builds, while the go version restricts compatibility. No additional dependencies are listed. There are no replace or require directives, indicating this module is self-contained.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prerelease_v1.9.1-pre.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/retract/self/prerelease

go 1.15

```

----------------------------------------

TITLE: Go Module Declaration
DESCRIPTION: Declares the Go module used in the test cases. This file sets the module path 'cgo.example' and specifies the Go version as 1.20.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_suspect_flag_force_external.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module cgo.example

go 1.20

```

----------------------------------------

TITLE: Expected Go Module Definition after Adding Import (Go 1.14)
DESCRIPTION: The expected `go.mod` file (`go.mod.new`) after running `go mod tidy` on the modified `m.go` with Go 1.14. It adds a direct requirement for module `b` because `b/y` is now directly imported.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_4

LANGUAGE: gomod
CODE:
```
-- go.mod.new --
module m

go 1.14

require (
	a v0.1.0
	b v0.1.0
)

replace (
	a v0.1.0 => ./a1
	b v0.1.0 => ./b1
	c v0.1.0 => ./c1
	c v0.2.0 => ./c2
)
```

----------------------------------------

TITLE: UTF-8 Validation Function in bytes Package
DESCRIPTION: Function to convert potentially invalid UTF-8 to valid UTF-8 by replacing invalid bytes. Takes source byte slice and replacement byte slice as input, returns a valid UTF-8 byte slice.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
func ToValidUTF8([]uint8, []uint8) []uint8
```

----------------------------------------

TITLE: Defining Go Module with Dependencies
DESCRIPTION: This Go module definition specifies dependencies on two modules (bad114 and need117) and their local replacements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.net/m

go 1.16

require (
	example.net/bad114 v0.1.0
	example.net/need117 v0.1.0
)

replace (
	example.net/bad114 v0.1.0 => ./bad114
	example.net/need117 v0.1.0 => ./need117
)
```

----------------------------------------

TITLE: Module A Definition
DESCRIPTION: Go module configuration for example.com/a requiring rsc.io/fortune v1.0.0
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_sum.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/a
go 1.18
require rsc.io/fortune v1.0.0
```

LANGUAGE: go
CODE:
```
package a
import "rsc.io/fortune"
```

----------------------------------------

TITLE: Declaring a Module Path and Version - go.mod - Go
DESCRIPTION: This go.mod snippet declares the module path ('example.com/retract/rename') and its Go language compatibility (Go 1.16). It is essential for Go module-aware builds, providing the primary module identifier and specifying minimum tooling requirements. Requires Go 1.16+ for full compatibility. No parameters are accepted, and the file is essential input for module initialization and dependency tracking. Limitations: no replace, require, or exclude directives appear in this basic definition.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rename_v1.0.0-bad.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example.com/retract/rename

go 1.16
```

----------------------------------------

TITLE: Defining Subdirectory Module with Dependency in Go
DESCRIPTION: This go.mod file in the 'm1' subdirectory defines a module 'example.net/m' with Go version 1.16 and requires 'example.net/b v0.1.0'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue48511.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
module example.net/m

go 1.16

require example.net/b v0.1.0
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: A minimal Go module definition file that creates a module named 'm' with no dependencies. This is used as the module context for the tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_hash.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Testing Quote Functions in Go
DESCRIPTION: Test suite for the quote package that verifies the output of each quote function. Contains test cases for Hello(), Glass(), Go(), and Opt() functions to ensure they return the expected strings.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.3.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package quote

import "testing"

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory, share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}

func TestOpt(t *testing.T) {
	opt := "If a program is too slow, it must have a loop."
	if out := Opt(); out != opt {
		t.Errorf("Opt() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file specifying Go version 1.20 requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/link/testdata/script/randlayout_option.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module main

go 1.20
```

----------------------------------------

TITLE: Declaring a Go Module (go.mod) - Go - none
DESCRIPTION: This snippet is the go.mod file declaring the module path for Go's dependency management. It acts as the root declaration of the module, critical for Go tooling operations. There are no parameters, outputs, or dependencies besides being a required config for Go modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-riscv64.txt#2025-04-22_snippet_2

LANGUAGE: none
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Empty Go Package Declaration
DESCRIPTION: An empty Go file that declares the package name 'newergoversion', establishing the package identity without implementing any functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_newergoversion_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package newergoversion
```

----------------------------------------

TITLE: Formatted Go Workspace File
DESCRIPTION: Properly formatted version of the go.work file with consistent spacing and alignment
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_edit.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
go 1.18

use (
	a
	b
	c
)

replace (
	x.1 v1.3.0 => y.1 v1.4.0
	x.1 v1.4.0 => ../z
)
```

----------------------------------------

TITLE: Golang Module Definition and Replacement in go.mod
DESCRIPTION: This go.mod file describes the module for `example.net/m` and specifies its dependencies and replacements. It declares the required module versions and provides paths to replacement modules for local development.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_consistency.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
module example.net/m

go 1.17

require (
	example.net/needx2 v0.1.0
	example.net/x v0.1.0
)

replace (
	example.net/needx2 v0.1.0 => ./needx2.1
	example.net/x v0.1.0 => ./x.1
	example.net/x v0.2.0 => ./x.2
)
```

----------------------------------------

TITLE: Implementing Hello World in Go
DESCRIPTION: A simple Go program that prints 'hello, world' to standard output using the built-in println function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_hello_pkg.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

func main() {
	println("hello, world")
}
```

----------------------------------------

TITLE: Sub Package Interface Implementation
DESCRIPTION: Implements an interface type and function F that creates and calls an anonymous function working with interface slices
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue62156.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package sub

type iface interface{ m() }

func F() {
	f := func(rt []iface) []iface {
		return append([]iface{}, rt...)
	}
	f(nil)
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines the module name as rsc.io/fortune
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
module rsc.io/fortune
```

----------------------------------------

TITLE: Go Workspace Configuration File
DESCRIPTION: Workspace configuration file that specifies module usage and replacement directives.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_disablevendor.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
use .
replace example.com/dep => ../dep
```

----------------------------------------

TITLE: Resolving Conflicting Module Replacements in Go Workspace
DESCRIPTION: This snippet demonstrates the process of resolving conflicting module replacements in a Go workspace. It shows the error message when conflicting replacements are detected and the command to resolve the conflict using 'go work edit'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
! go list -m example.com/dep
go work edit -replace example.com/dep@v1.0.0=./dep1
go list -m example.com/dep
```

----------------------------------------

TITLE: Testing Go Build Coverage via Shell Commands - Shell Script
DESCRIPTION: Executes a series of shell commands to build Go binaries with coverage flags, run them with specified GOCOVERDIR directories, and analyze coverage output. Verifies which packages are included in coverage data both by default and with explicit -coverpkg=all, and demonstrates usage of go tool covdata for inspection and selection of coverage results. Requires the Go toolchain available in the environment, with variables such as $WORK and $GOCOVERDIR set up and a Go module matching the provided module context. Inputs are shell environment, outputs are tested coverage results, and constraints include reliance on directory structure and external Go tools.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_pkg_select.txt#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
# Build for coverage.
go build -mod=mod -o $WORK/modex.exe -cover mod.example/main

# Save off old GOCOVERDIR setting
env SAVEGOCOVERDIR=$GOCOVERDIR

# Execute.
mkdir $WORK/covdata
env GOCOVERDIR=$WORK/covdata
exec $WORK/modex.exe

# Restore previous GOCOVERDIR setting
env GOCOVERDIR=$SAVEGOCOVERDIR

# Examine the result.
go tool covdata percent -i=$WORK/covdata
stdout 'coverage: 100.0% of statements'

# By default we want to see packages resident in the module covered,
# but not dependencies.
go tool covdata textfmt -i=$WORK/covdata -o=$WORK/covdata/out.txt
grep 'mode: set' $WORK/covdata/out.txt
grep 'mod.example/main/main.go:' $WORK/covdata/out.txt
grep 'mod.example/sub/sub.go:' $WORK/covdata/out.txt
! grep 'rsc.io' $WORK/covdata/out.txt

rm $WORK/covdata
rm $WORK/modex.exe

#-------------------------------------------

# Repeat the build but with -coverpkg=all

go build -mod=mod -coverpkg=all -o $WORK/modex.exe -cover mod.example/main

# Execute.
mkdir $WORK/covdata
env GOCOVERDIR=$WORK/covdata
exec $WORK/modex.exe

# Restore previous GOCOVERDIR setting
env GOCOVERDIR=$SAVEGOCOVERDIR

# Examine the result.
go tool covdata percent -i=$WORK/covdata
stdout  'coverage:.*[1-9][0-9.]+%'

# The whole enchilada.
go tool covdata textfmt -i=$WORK/covdata -o=$WORK/covdata/out.txt
grep 'mode: set' $WORK/covdata/out.txt
grep 'mod.example/main/main.go:' $WORK/covdata/out.txt
grep 'mod.example/sub/sub.go:' $WORK/covdata/out.txt
grep 'rsc.io' $WORK/covdata/out.txt
grep 'bufio/bufio.go:' $WORK/covdata/out.txt

# Use the covdata tool to select a specific set of module paths
mkdir $WORK/covdata2
go tool covdata merge -pkg=rsc.io/quote -i=$WORK/covdata -o=$WORK/covdata2

# Examine the result.
go tool covdata percent -i=$WORK/covdata2
stdout  'coverage:.*[1-9][0-9.]+%'

# Check for expected packages + check that we don't see things from stdlib.
go tool covdata textfmt -i=$WORK/covdata2 -o=$WORK/covdata2/out.txt
grep 'mode: set' $WORK/covdata2/out.txt
! grep 'mod.example/main/main.go:' $WORK/covdata2/out.txt
! grep 'mod.example/sub/sub.go:' $WORK/covdata2/out.txt
grep 'rsc.io' $WORK/covdata2/out.txt
! grep 'bufio/bufio.go:' $WORK/covdata2/out.txt
```

----------------------------------------

TITLE: Root Module Configuration with Replacements
DESCRIPTION: The go.mod file for the root module defines replacement directives for multiple versions of dependent modules, pointing to local directories. It explicitly requires 'a v0.1.0' and indirectly requires 'b v0.2.0'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module root

go 1.13

replace (
	a v0.1.0 => ./a1
	b v0.1.0 => ./b1
	b v0.2.0 => ./b2
	c v0.1.0 => ./c1
	c v0.2.0 => ./c2
)

require (
	a v0.1.0
	b v0.2.0 // indirect
)
```

----------------------------------------

TITLE: Running Go Module Commands
DESCRIPTION: Commands to run a Go application from different contexts, showing module-based execution and direct directory execution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_hello_pkg.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go run m/hello
stderr 'hello, world'

cd hello
go run .
stderr 'hello, world'
```

----------------------------------------

TITLE: Using `go vet` with Directory Context in Shell
DESCRIPTION: Illustrates `go vet` to analyze and verify Go code with a specified directory using `-C`. It identifies potential issues in the `strings` test code, requiring a configured Go environment.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/chdir.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
go vet -C ../strings -n
stderr strings_test
```

----------------------------------------

TITLE: Go Version Management Test Script
DESCRIPTION: Comprehensive test script for validating Go version management behaviors. Tests version upgrades, downgrades, toolchain specifications, and error handling across different Go versions including release candidates.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_toolchain.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# setup
env TESTGO_VERSION=go1.99rc1
env TESTGO_VERSION_SWITCH=switch

# go get go should use the latest Go 1.23
cp go.mod.orig go.mod
go get go
stderr '^go: upgraded go 1.21 => 1.23.9$'
grep 'go 1.23.9' go.mod
! grep toolchain go.mod

# go get go@1.23 should use the latest Go 1.23
cp go.mod.orig go.mod
go get go@1.23
stderr '^go: upgraded go 1.21 => 1.23.9$'
grep 'go 1.23.9' go.mod
! grep toolchain go.mod

# Additional test cases follow...
```

----------------------------------------

TITLE: Testing go mod graph Command Behavior in Go Modules
DESCRIPTION: A test script that verifies the go mod graph command correctly displays module dependencies. It confirms direct module dependencies are shown, transitive dependencies are properly listed, and checks the -x flag triggers download operations when the cache is cleared.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_graph.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on

go mod graph
stdout '^m rsc.io/quote@v1.5.2$'
stdout '^rsc.io/quote@v1.5.2 rsc.io/sampler@v1.3.0$'
! stdout '^m rsc.io/sampler@v1.3.0$'
! stderr 'get '$GOPROXY

rm $GOPATH/pkg/mod/cache/download/rsc.io/quote
go mod graph -x
stderr 'get '$GOPROXY
```

----------------------------------------

TITLE: Go File Importing rsc.io/quote
DESCRIPTION: This Go file imports the rsc.io/quote package as a blank import, used to test dependency upgrade and module tidying.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_indirect.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
package x
import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Test Output Attribution Test Implementation
DESCRIPTION: Test implementation that creates a parallel subtest while logging messages from the outer test context. Verifies correct output attribution when parallel test execution occurs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_interleaved.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import (
	"testing"
)

func TestWeirdTiming(outer *testing.T) {
	outer.Run("pauser", func(pauser *testing.T) {
		outer.Logf("logging to outer")
		pauser.Parallel()
	})

	outer.Logf("logging to outer again")
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module with replace directives and requirements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_added.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com/m

go 1.17

replace (
	example.net/added v0.1.0 => ./a1
	example.net/added v0.2.0 => ./a2
	example.net/added v0.3.0 => ./a1
	example.net/lazy v0.1.0 => ./lazy
	example.net/pruned v0.1.0 => ./pruned
)

require (
	example.net/added v0.1.0
	example.net/lazy v0.1.0
)
```

----------------------------------------

TITLE: Workspace Module Definition
DESCRIPTION: Go module definition file specifying module path and dependency requirements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_disablevendor.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/mod

go 1.20

require example.com/dep v1.0.0
```

----------------------------------------

TITLE: Defining Go Module `example.net/pkgadded` v1.1.0 (Actual go.mod)
DESCRIPTION: This is the standard `go.mod` file content for the Go module `example.net/pkgadded` at version v1.1.0. It declares the module path and the minimum required Go version (1.16).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.1.0.txt#2025-04-22_snippet_2

LANGUAGE: gomod
CODE:
```
module example.net/pkgadded

go 1.16
```

----------------------------------------

TITLE: Module Declaration in go.mod File
DESCRIPTION: Standard go.mod file declaring the module name.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-mipsx.txt#2025-04-22_snippet_3

LANGUAGE: plaintext
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module named 'mod.com' with Go 1.16 requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_module_when_error.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module mod.com

go 1.16
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic go.mod file defining module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiler_output.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/foo

go 1.20
```

----------------------------------------

TITLE: Defining Module Dependencies for B in Go
DESCRIPTION: This go.mod file for example.net/b module specifies its Go version without additional dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_8

LANGUAGE: Go
CODE:
```
module example.net/b

go 1.17
```

----------------------------------------

TITLE: Define Go Module rsc.io/quote
DESCRIPTION: This snippet defines a basic Go module named rsc.io/quote using a minimal go.mod file. This forms the basis for subsequent operations in the file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_multirepo.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
module rsc.io/quote
```

----------------------------------------

TITLE: Module B Definition
DESCRIPTION: Go module configuration for example.com/b requiring rsc.io/quote v1.0.0 with dependency checksums
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_sum.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/b
go 1.18
require rsc.io/quote v1.0.0
```

LANGUAGE: go
CODE:
```
package b
import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Go Module Configuration for 'm' Directory
DESCRIPTION: Module configuration file for example.com/m with dependency on example.com/dep and Go 1.24
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pattern_work.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/m

go 1.24

require example.com/dep v1.0.0
replace example.com/dep v1.0.0 => ../dep
```

----------------------------------------

TITLE: Example Package Import
DESCRIPTION: Main package importing example.net/a module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchcycle.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package example

import _ "example.net/a"
```

----------------------------------------

TITLE: Package D with Dependent Import
DESCRIPTION: Go package 'd' importing package 'b' which has the non-canonical import
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/noncanonical_import.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package d\n\nimport _ "canonical/b"
```

----------------------------------------

TITLE: Initializing Go Module and Testing Version Listing
DESCRIPTION: Sets up a Go module and tests version listing with and without retracted versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_pseudo_base.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go mod init m

go list -m -versions vcs-test.golang.org/git/retract-pseudo.git
stdout '^vcs-test.golang.org/git/retract-pseudo.git$'
go list -m -versions -retracted vcs-test.golang.org/git/retract-pseudo.git
stdout '^vcs-test.golang.org/git/retract-pseudo.git v1.0.0$'
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: A go.mod file that defines a module named 'example' with Go 1.18 as the required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fail_newline.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example

go 1.18
```

----------------------------------------

TITLE: Setting up Go Work Environment
DESCRIPTION: This snippet sets up the test environment by changing directory and initializing go.work files. It then compares the generated files to ensure they match the expected output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_init_path.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
cd dir

go work init . .. foo/bar
mv go.work go.work.init

go work init
go work use -r ..
cmp go.work go.work.init

cmpenv go.work $WORK/go.work.want
```

----------------------------------------

TITLE: Testing Function F in Package 'p' (Go)
DESCRIPTION: This Go file defines a test function 'Test' for package 'p'. It imports the standard 'testing' package. The 'Test' function simply calls the 'F' function from the package under test ('p'). This test ensures that 'F' can be called and serves as the entry point for coverage analysis when the test binary is executed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dash_c.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
-- p_test.go --
package p

import "testing"

func Test(t *testing.T) {
	F()
}
```

----------------------------------------

TITLE: Implementing Quote Functions in Go
DESCRIPTION: This snippet defines four functions that return different quotes: HelloV2, GlassV2, GoV2, and OptV2. Each function returns a specific quote or saying, with some having additional context provided in comments.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709153244-fd906ed3b100.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

import "rsc.io/sampler"

// Hello returns a greeting.
func HelloV2() string {
	return sampler.Hello()
}

// Glass returns a useful phrase for world travelers.
func GlassV2() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return "I can eat glass and it doesn't hurt me."
}

// Go returns a Go proverb.
func GoV2() string {
	return "Don't communicate by sharing memory, share memory by communicating."
}

// Opt returns an optimization truth.
func OptV2() string {
	// Wisdom from ken.
	return "If a program is too slow, it must have a loop."
}
```

----------------------------------------

TITLE: Configuring Go Module with go.mod
DESCRIPTION: Defines a basic Go module named 'test' using Go version 1.0. The go.mod file is essential for dependency management and module identification in Go projects.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue_65528.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module test

go 1.0
```

----------------------------------------

TITLE: Implementing Fuzzing Test in Go
DESCRIPTION: This Go code implements a basic fuzzing test. It defines a FuzzTarget function that adds an initial seed value and sets up the fuzzing function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_dup_cache.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package fuzz

import "testing"

func FuzzTarget(f *testing.F) {
    f.Add(int(0))
    f.Fuzz(func(t *testing.T, _ int) {})
}
```

----------------------------------------

TITLE: Defining Go Workspace Configuration
DESCRIPTION: This snippet shows the content of the go.work file, which defines the workspace configuration. It specifies the Go version and the modules to be included in the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
go 1.18

use (
	./a
	./p
)
```

----------------------------------------

TITLE: Testing Helper Method Definitions
DESCRIPTION: Defines Helper methods for testing package's B and T types, and TB interface for test helper functionality
SOURCE: https://github.com/golang/go/blob/master/api/go1.9.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
func (*B) Helper()
func (*T) Helper()
type TB interface {
    Helper()
}
```

----------------------------------------

TITLE: Implementing Quote Functions in Go
DESCRIPTION: Core implementation of the quote package providing four functions: Hello(), Glass(), Go(), and Opt(). Each function returns a specific quote or saying. The package depends on rsc.io/sampler for the Hello functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.4.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package quote

import "rsc.io/sampler"

// Hello returns a greeting.
func Hello() string {
	return sampler.Hello()
}

// Glass returns a useful phrase for world travelers.
func Glass() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return "I can eat glass and it doesn't hurt me."
}

// Go returns a Go proverb.
func Go() string {
	return "Don't communicate by sharing memory, share memory by communicating."
}

// Opt returns an optimization truth.
func Opt() string {
	// Wisdom from ken.
	return "If a program is too slow, it must have a loop."
}
```

----------------------------------------

TITLE: Package B Definition (b.go)
DESCRIPTION: Go source file defining package 'b'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_ambiguous_a_v1.0.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package b
```

----------------------------------------

TITLE: Defining Go Module Dependencies
DESCRIPTION: Specifies the module name and its dependency on rsc.io/sampler v1.3.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.2.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module "rsc.io/quote"

require "rsc.io/sampler" v1.3.0
```

----------------------------------------

TITLE: Defining Go module dependencies
DESCRIPTION: go.mod file specifying the module name, Go version, and required dependencies for the test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fileproxy_vcs_missing_issue51589.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module example.com/mod

go 1.17

require rsc.io/quote v1.5.2

require (
	golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c // indirect
	rsc.io/sampler v1.3.0 // indirect
)
```

----------------------------------------

TITLE: Defining Go Module Dependencies
DESCRIPTION: A go.mod file that defines a module named 'm' with a direct dependency on rsc.io/quote version 1.5.2. This file is used by the test script to verify module graph resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_graph.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m
require rsc.io/quote v1.5.2
```

----------------------------------------

TITLE: Module Configuration for Error Testing
DESCRIPTION: Defines a go.mod file with replacements for testing error scenarios, including a non-existent replacement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_import.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
module localhost.fail

replace w => ../w

replace nonexist v0.1.0 => ../nonexist
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a simple Go module with minimum Go version requirement of 1.15
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_GOTMPDIR.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.15
```

----------------------------------------

TITLE: Module B v1.1 Configuration
DESCRIPTION: Module B version 1.1's go.mod file with updated dependency requirements
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchbound.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.net/b

go 1.16

require example.net/a v0.2.0
```

----------------------------------------

TITLE: Main Module Go Files
DESCRIPTION: Defines a minimal go.mod file and an empty m.go file for the main module 'm'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_clean_cache.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
-- go.mod --
module m
-- m.go --
package m
```

----------------------------------------

TITLE: Running Example Tests with Pattern Matching
DESCRIPTION: Test script that verifies go test command can match and run only example functions, ensuring no 'no tests to run' message appears
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_example.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go test -run Example example1_test.go
! stderr '^ok.*\[no tests to run\]'
stdout '^ok'
```

----------------------------------------

TITLE: Minimal Go module definition
DESCRIPTION: A Go module definition file that creates a module named 'bench' with Go 1.16 as the requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_labels.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module bench

go 1.16
```

----------------------------------------

TITLE: Defining Go Module in go.mod File
DESCRIPTION: Official Go module declaration in the go.mod file, identifying the module path as 'rsc.io/badfile3'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile3_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module rsc.io/badfile3
```

----------------------------------------

TITLE: Basic Go Module Setup
DESCRIPTION: Defines a basic Go module named 'm' with a specified Go version of 1.16. This module setup is essential for managing dependencies and module paths in Go projects.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Module A v0.1.1 Definition
DESCRIPTION: Module definition and implementation for example.net/a v0.1.1 with dependency on example.net/b
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_wild.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.net/a

go 1.16

require example.net/b v0.1.0
```

LANGUAGE: go
CODE:
```
package a
```

LANGUAGE: go
CODE:
```
package unimported

import _ "example.net/b"
```

----------------------------------------

TITLE: Defining a Go Module with Dependencies
DESCRIPTION: This snippet shows a go.mod file for the 'example.net/other' module, which requires a specific version of 'example.net/pkgremoved'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchmod.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.net/other

go 1.16

require example.net/pkgremoved v0.2.0
```

----------------------------------------

TITLE: Dependency Package with Further Import - dep/dep.go
DESCRIPTION: Defines a dependency package that imports another dependency, creating a diamond-shaped import graph.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package dep
import _ "test/dep3"
```

----------------------------------------

TITLE: Go Test File with External Dependency
DESCRIPTION: A test file for package 'a' that imports the testing package and rsc.io/quote as a blank import. It defines a simple test function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package a

import "testing"
import _ "rsc.io/quote"

func Test(t *testing.T) {}
```

----------------------------------------

TITLE: Configuring Go Workspace with Module Replacements
DESCRIPTION: This go.work file defines the workspace configuration, specifying module replacements. It demonstrates how to replace modules with local directory paths, which is useful for development and testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
use m

replace example.com/dep => ./dep
replace example.com/other => ./other2
```

----------------------------------------

TITLE: Listing All Modules with go list -m all
DESCRIPTION: Uses 'go list -m all' to show that it covers the packages in 'go list -test -deps all'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_5

LANGUAGE: Bash
CODE:
```
go list -m -f $MODFMT all
```

----------------------------------------

TITLE: Go.mod After Tidy with Go 1.17
DESCRIPTION: The go.mod file for the main module after running 'go mod tidy' with Go 1.17, showing how direct and indirect dependencies are reorganized according to lazy loading rules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_16

LANGUAGE: go
CODE:
```
module example.com/main

// Note: this go.mod file initially specifies go 1.15,
// but includes some redundant roots so that it
// also already obeys the 1.17 lazy loading invariants.
go 1.17

require (
	example.com/a v0.1.0
	example.com/q v0.1.0
	example.com/t v0.1.0
)

require (
	example.com/b v0.1.0 // indirect
	example.com/r v0.1.0 // indirect
	example.com/u v0.1.0 // indirect
)

replace (
	example.com/a v0.1.0 => ./a
	example.com/b v0.1.0 => ./b
	example.com/c v0.1.0 => ./c
	example.com/d v0.1.0 => ./d
	example.com/q v0.1.0 => ./q
	example.com/r v0.1.0 => ./r
	example.com/s v0.1.0 => ./s
	example.com/t v0.1.0 => ./t
	example.com/u v0.1.0 => ./u
	example.com/w v0.1.0 => ./w
	example.com/x v0.1.0 => ./x
)
```

----------------------------------------

TITLE: Defining the Go module `golang.org/toolchain` (go.mod)
DESCRIPTION: This snippet, located in the standard `go.mod` file, formally declares the Go module's path as `golang.org/toolchain`. This is the primary file used by the Go toolchain to identify the module and manage its dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.illumos-amd64.txt#2025-04-22_snippet_2

LANGUAGE: gomod
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Defining Main Go Module with Replacement (Go Module)
DESCRIPTION: This `go.mod` file defines the main module `example.com/m` for the test setup. It specifies Go version 1.16 and includes a `replace` directive to map the module path `example.net/cmd` to a local directory `./cmd`. This is used by the test scripts to resolve the dependency locally.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path_plus.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- go.mod.orig --
module example.com/m

go 1.16

replace (
	example.net/cmd => ./cmd
)
```

----------------------------------------

TITLE: Implementing Quote Package with v2 Dependency in Go
DESCRIPTION: Core implementation of the quote package that provides access to various pithy sayings. The package imports functionality from the v2 version and exposes simplified function calls that delegate to the v2 implementations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162816-fe488b867524.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

import "rsc.io/quote/v2"

// Hello returns a greeting.
func Hello() string {
	return quote.HelloV2()
}

// Glass returns a useful phrase for world travelers.
func Glass() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return quote.GlassV2()
}

// Go returns a Go proverb.
func Go() string {
	return quote.GoV2()
}

// Opt returns an optimization truth.
func Opt() string {
	// Wisdom from ken.
	return quote.OptV2()
}
```

----------------------------------------

TITLE: Implementing FuzzNonCrash Test in Go
DESCRIPTION: This test sends a SIGTERM signal to itself, which should not be interpreted as a crash by the fuzzing framework. It demonstrates handling of non-crash termination signals.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_non_crash_signal.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
func FuzzNonCrash(f *testing.F) {
	f.Fuzz(func(*testing.T, bool) {
		pid := syscall.Getpid()
		if err := syscall.Kill(pid, syscall.SIGTERM); err != nil {
			panic(err)
		}
		// signal may not be received immediately. Wait for it.
		select{}
	})
}
```

----------------------------------------

TITLE: Go Toolchain Module Declaration in .mod File
DESCRIPTION: Defines the module name in the .mod file, specifying that this is the golang.org/toolchain module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-riscv64.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file specifying the module name and its dependency on rsc.io/sampler v1.3.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v3_v3.0.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module rsc.io/quote/v3

require rsc.io/sampler v1.3.0
```

----------------------------------------

TITLE: Sub-module Definition
DESCRIPTION: Go module definition file for the sub-module with its own set of dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_goproxy_off.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example/sub

go 1.19

require rsc.io/quote v1.5.1

require (
	golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c // indirect
	rsc.io/sampler v1.3.1 // indirect
)
```

----------------------------------------

TITLE: Go Workspace Non-Overlay Definition
DESCRIPTION: Standard Go workspace configuration file defining module usage without overlay
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_overlay.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
use (
    ./a
    ./b
    ./c
)
```

----------------------------------------

TITLE: Crypto Package Enhancements - Go
DESCRIPTION: Addition of SHA3 hash constants and new Signer interface with associated methods for cryptographic operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
pkg crypto, const SHA3_224 = 10
pkg crypto, const SHA3_224 Hash
pkg crypto, const SHA3_256 = 11
pkg crypto, const SHA3_256 Hash
pkg crypto, const SHA3_384 = 12
pkg crypto, const SHA3_384 Hash
pkg crypto, const SHA3_512 = 13
pkg crypto, const SHA3_512 Hash

pkg crypto, method (Hash) HashFunc() Hash
pkg crypto, type Signer interface { Public, Sign }
pkg crypto, type Signer interface, Public() PublicKey
pkg crypto, type Signer interface, Sign(io.Reader, []uint8, SignerOpts) ([]uint8, error)
```

----------------------------------------

TITLE: Checking Indirect Dependency Update in Go Modules
DESCRIPTION: This snippet verifies if 'go get -u' updates indirect dependencies (golang.org/x/text) to a version later than required by the direct dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_indirect.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go list -m -f '{{.Path}} {{.Version}}{{if .Indirect}} // indirect{{end}}' all
stdout '^golang.org/x/text [v0-9a-f\.-]+ // indirect'
grep 'golang.org/x/text [v0-9a-f\.-]+ // indirect' go.mod
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition for the coverblank project specifying Go 1.16 as the required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_blank_func_decl.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module coverblank

go 1.16
```

----------------------------------------

TITLE: Go Module Configuration
DESCRIPTION: Module definition file specifying the module name, Go version requirement, and external dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_missing_ziphash.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module use

go 1.16

require rsc.io/quote v1.5.2
```

----------------------------------------

TITLE: Main Function Importing CGO Package in Go
DESCRIPTION: The main package imports the cgo package (pkg) to trigger the init function execution. It is essentially a stub main function that does not perform any additional operations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_syso_issue29253.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main

import _ "pkg"

func main() {}
```

----------------------------------------

TITLE: Testing 'go list' with Indirect Missing Import (Shell)
DESCRIPTION: Tests the 'go list' command on a package ('example.com/indirect') that indirectly depends on a non-existent package via its import of 'example.com/direct'. Similar to the direct import test, this section checks the output format, incompleteness flag, dependency errors, and command success/failure with and without the '-e' and '-deps' flags, asserting specific stdout and stderr content.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_bad_import.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# Listing an otherwise-valid package that imports some *other* package with an
# unsatisfied import should also fail.
# BUG: Today, it succeeds.
go list -f '{{if .Error}}error{{end}} {{if .Incomplete}}incomplete{{end}} {{range .DepsErrors}}bad dep: {{.Err}}{{end}}' example.com/indirect
! stdout ^error
stdout incomplete
stdout 'bad dep: .*example.com/notfound'

# Again, -deps should fail.
! go list -deps example.com/indirect
stderr example.com/notfound

# But -e -deps should succeed.
go list -e -deps example.com/indirect
stdout example.com/notfound
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: A simple Go module definition file (go.mod) that declares the module name as 'x'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_tags.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module x
```

----------------------------------------

TITLE: Testing Package Functionality in Go
DESCRIPTION: The 'd_test.go' file includes a basic test for the package 'd'. Using the 'testing' package, it verifies the 'Get' function from 'd'. The function 'TestD' checks execution without validating any output, focusing on process completeness.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/load_test_pkg_err.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- d_test.go --
package d_test

import "testing"
import "golang.org/fake/d"
func TestD(t *testing.T) { d.Get(); }
```

----------------------------------------

TITLE: Defining AArch64 ELF Relocation Constants - Go Standard Library - Go
DESCRIPTION: These declarations add or document new ELF (Executable and Linkable Format) relocation constants and types in the debug/elf package for AArch64 architecture. Dependencies include Go's standard library and typically pertain to compilers, linkers, or tools that process ELF files. These values serve as symbolic names for relocation codes and as type methods for string representations and formatting, enhancing debugging, readability, and portability.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
const R_AARCH64_TLSDESC_ADD = 568
const R_AARCH64_TLSDESC_ADD_LO12_NC = 564
const R_AARCH64_TLSDESC_ADR_PAGE21 = 562
const R_AARCH64_TLSDESC_ADR_PREL21 = 561
const R_AARCH64_TLSDESC_CALL = 569
const R_AARCH64_TLSDESC_LD64_LO12_NC = 563
const R_AARCH64_TLSDESC_LDR = 567
const R_AARCH64_TLSDESC_LD_PREL19 = 560
const R_AARCH64_TLSDESC_OFF_G0_NC = 566
const R_AARCH64_TLSDESC_OFF_G1 = 565
const R_AARCH64_TLSGD_ADD_LO12_NC = 514
const R_AARCH64_TLSGD_ADR_PAGE21 = 513
const R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21 = 541
const R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC = 542
const R_AARCH64_TLSIE_LD_GOTTPREL_PREL19 = 543
const R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC = 540
const R_AARCH64_TLSIE_MOVW_GOTTPREL_G1 = 539
const R_AARCH64_TLSLE_ADD_TPREL_HI12 = 549
const R_AARCH64_TLSLE_ADD_TPREL_LO12 = 550
const R_AARCH64_TLSLE_ADD_TPREL_LO12_NC = 551
const R_AARCH64_TLSLE_MOVW_TPREL_G0 = 547
const R_AARCH64_TLSLE_MOVW_TPREL_G0_NC = 548
const R_AARCH64_TLSLE_MOVW_TPREL_G1 = 545
const R_AARCH64_TLSLE_MOVW_TPREL_G1_NC = 546
const R_AARCH64_TLSLE_MOVW_TPREL_G2 = 544
const R_AARCH64_TLS_DTPMOD64 = 1028
const R_AARCH64_TLS_DTPREL64 = 1029
const R_AARCH64_TLS_TPREL64 = 1030
const R_AARCH64_TSTBR14 = 279
// ... plus type and method declarations
method (R_AARCH64) GoString() string
method (R_AARCH64) String() string
type R_AARCH64 int
```

----------------------------------------

TITLE: Go Module Declaration in go.mod
DESCRIPTION: Standard go.mod file declaring module name and Go version requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_dotname_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/dotname

go 1.16
```

----------------------------------------

TITLE: Math/bits arithmetic function signatures in Go
DESCRIPTION: Function signatures for various bitwise arithmetic operations in math/bits package, including Add, Sub, Mul, and Div with different bit widths.
SOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
func Add(uint, uint, uint) (uint, uint)
func Add32(uint32, uint32, uint32) (uint32, uint32)
func Add64(uint64, uint64, uint64) (uint64, uint64)
func Div(uint, uint, uint) (uint, uint)
func Div32(uint32, uint32, uint32) (uint32, uint32)
func Div64(uint64, uint64, uint64) (uint64, uint64)
func Mul(uint, uint) (uint, uint)
func Mul32(uint32, uint32) (uint32, uint32)
func Mul64(uint64, uint64) (uint64, uint64)
func Sub(uint, uint, uint) (uint, uint)
func Sub32(uint32, uint32, uint32) (uint32, uint32)
func Sub64(uint64, uint64, uint64) (uint64, uint64)
```

----------------------------------------

TITLE: Main Package Implementation in Go
DESCRIPTION: Main package that imports and uses packages 'a' and 'b', defines functions MFunc and M2Func, and includes an init function and main function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
package main

import (
	"M/a"
	"M/b"
)

func MFunc() string {
	return "42"
}

func M2Func() int {
	return a.AFunc() + b.BFunc()
}

func init() {
	println("package 'main' init")
}

func main() {
	println(a.AFunc() + b.BFunc())
}
```

----------------------------------------

TITLE: Testing Quote Package Functions in Go
DESCRIPTION: Comprehensive test suite for the quote package that verifies each function returns the expected string. Tests include checks for Hello, Glass, Go, and Opt functions with environment setup to ensure consistent results.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162816-fe488b867524.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package quote

import (
	"os"
	"testing"
)

func init() {
	os.Setenv("LC_ALL", "en")
}

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory, share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}

func TestOpt(t *testing.T) {
	opt := "If a program is too slow, it must have a loop."
	if out := Opt(); out != opt {
		t.Errorf("Opt() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Main Module Configuration with Dependency Replacements
DESCRIPTION: The main go.mod file for example.com/m that sets up the module structure for testing. It includes specific replacements for test modules and demonstrates how Go 1.17's pruning behavior affects indirect dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_graph_version.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Module m indirectly imports a package from
// example.com/retract/incompatible. Its selected version of
// that module is lower under Go 1.17 semantics than under Go 1.16.
module example.com/m

go 1.17

replace (
	example.net/lazy v0.1.0 => ./lazy
	example.net/requireincompatible v0.1.0 => ./requireincompatible
)

require (
	example.com/retract/incompatible v1.0.0 // indirect
	example.net/lazy v0.1.0
)
```

----------------------------------------

TITLE: Defining Module Path for Golang Toolchain
DESCRIPTION: Specifies the module path for a golang.org/toolchain module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-ppc64le.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Importing a Go Package for Side Effects - Go
DESCRIPTION: Defines the Go package a and imports example.com/badchain/b for its side effects only (using the blank identifier). This pattern is used when the imported package registers handlers or triggers initialization logic. There are no explicit function calls; all side-effects occur during package initialization.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_a_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package a

import _ \"example.com/badchain/b\"
```

----------------------------------------

TITLE: Go File with External Dependency
DESCRIPTION: A Go program that imports both the standard fmt package and an external package rsc.io/quote. It prints a greeting using the quote.Hello() function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_outside_module.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package main

import (
    "fmt"
    "rsc.io/quote"
)

func main() {
	fmt.Println(quote.Hello())
}
```

----------------------------------------

TITLE: Tools Go File with Build Tag
DESCRIPTION: A Go file with a 'tools' build tag. It imports the 'quote' package, demonstrating how tool dependencies are managed in Go modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tags.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
// +build tools

package tools

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Declaring a Go Module Using go.mod - Go
DESCRIPTION: This snippet defines a Go module by specifying the module path (example.com/fuzzfail) and the Go language version (1.18) required. The go.mod file is essential for dependency management, module resolution, and ensuring reproducible builds in Go projects. No external dependencies are listed beyond the Go version itself; this file must be present in the root of the module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_fuzzfail_v0.1.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/fuzzfail\n\ngo 1.18
```

----------------------------------------

TITLE: Defining Go Module Requirements in go.mod
DESCRIPTION: Defines the module name and its dependency requirements. This Go module is named 'rsc.io/quote' and depends on 'rsc.io/sampler' version 1.3.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module "rsc.io/quote"

require "rsc.io/sampler" v1.3.0
```

----------------------------------------

TITLE: Setting Go Environment Variables for Module and Proxy Testing
DESCRIPTION: Sets up environment variables for Go module proxy and sumdb testing. Includes variables for GO111MODULE, GOSUMDB, GOPROXY, GOPRIVATE, GONOPROXY, GONOSUMDB, and a custom database name.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gonoproxy.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
env sumdb=$GOSUMDB
env proxy=$GOPROXY
env GOPRIVATE GOPROXY GONOPROXY GOSUMDB GONOSUMDB
env dbname=localhost.localdev/sumdb
```

----------------------------------------

TITLE: Implementing Synchronized Parallel Go Tests
DESCRIPTION: Go test implementation that demonstrates a parallel test with synchronized subtests. It uses channels to coordinate execution and ensure round-robin output from parallel subtests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_parallel_success.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package chatty_parallel_test

import (
	"testing"
	"fmt"
	"flag"
)

// This test ensures the order of CONT lines in parallel chatty tests.
func TestChattyParallel(t *testing.T) {
	t.Parallel()

	// The number of concurrent tests running. This is closely tied to the
	// -parallel test flag, so we grab it from the flag rather than setting it
	// to some constant.
	parallel := flag.Lookup("test.parallel").Value.(flag.Getter).Get().(int)

	// ready is a synchronization mechanism that causes subtests to execute
	// round robin.
	ready := make([]chan bool, parallel)
	for i := range ready {
		ready[i] = make(chan bool, 1)
	}
	ready[0] <- true

	for i := range ready {
		i := i
		t.Run(fmt.Sprintf("sub-%d", i), func(t *testing.T) {
			t.Parallel()
			for j := 0; j < 2; j++ {
				<-ready[i]
				t.Logf("this is sub-%d", i)
				ready[(i+1)%len(ready)] <- true
			}
		})
	}
}
```

----------------------------------------

TITLE: Implementing Functions in Package 'foo'
DESCRIPTION: This snippet defines two functions, FooFunc and FooFunc2, which return a constant integer value. It's part of the 'foo' package, providing basic operations that can be imported and utilized by other packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_pkgselect.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- foo/foo.go --
package foo

func FooFunc() int {
	return 42
}
func FooFunc2() int {
	return 42
}

```

----------------------------------------

TITLE: Extending CertPool with AddCertWithConstraint - crypto/x509 - Go
DESCRIPTION: The CertPool type now includes AddCertWithConstraint, a method that allows adding certificates with constraints, where the constraint is defined by a function taking a slice of *Certificate and returning an error. Facilitates custom validation during certificate chain additions.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
func (cp *CertPool) AddCertWithConstraint(cert *Certificate, constraint func([]*Certificate) error)
```

----------------------------------------

TITLE: Defining Root Go Module with Tool Dependency
DESCRIPTION: Go module file that defines the root module 'example.com/foo' with a tool dependency on 'example.com/dep/tooldep' and a regular dependency on 'example.com/dep' with a local replacement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_perpkgflag.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/foo

go 1.24

tool example.com/dep/tooldep

require example.com/dep v1.0.0

replace example.com/dep => ./dep
```

----------------------------------------

TITLE: Empty Go package declaration
DESCRIPTION: This snippet contains an empty Go package declaration for the 'm' module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_hash.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package m
```

----------------------------------------

TITLE: Listing Available Versions for a Go Module (Shell)
DESCRIPTION: Executes `go list -m -versions rsc.io/quote` to query the module proxy or source repository for all known tagged versions of the `rsc.io/quote` module. The `stdout` line provides a regular expression (`^...$`) that matches the expected list of available versions, confirming that the pre-release `v1.5.3-pre1` is known, even if not selected by default.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
# but v1.5.3-pre1 should be a known version
go list -m -versions rsc.io/quote
stdout '^rsc.io/quote v1.0.0 v1.1.0 v1.2.0 v1.2.1 v1.3.0 v1.4.0 v1.5.0 v1.5.1 v1.5.2 v1.5.3-pre1$'
```

----------------------------------------

TITLE: Deprecated Network Configuration Functions
DESCRIPTION: Deprecated functions for network configuration and routing including parsing routing messages, managing routing tables, and handling routing socket addresses. These functions were part of the platform-specific networking implementations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_43

LANGUAGE: go
CODE:
```
func ParseRoutingMessage() //deprecated
func ParseRoutingSockaddr() //deprecated
func RouteRIB() //deprecated
func SetBpf() //deprecated
func StringSlicePtr() //deprecated
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: This snippet shows the contents of a go.mod file for a module named 'example.com/m'. It specifies the module name and the Go version to be used.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_no_mod_root_issue54419.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module example.com/m

go 1.25
```

----------------------------------------

TITLE: Implementing Localized Text Structure in Go
DESCRIPTION: This code defines a 'text' struct and associated methods for handling localized text and finding the appropriate translation based on language preferences.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.0.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
type text struct {
	byTag   map[string]string
	matcher language.Matcher
}

func newText(s string) *text {
	// Implementation details omitted for brevity
}

func (t *text) find(prefs []language.Tag) string {
	// Implementation details omitted for brevity
}
```

----------------------------------------

TITLE: Running Go Tests with Full Coverage
DESCRIPTION: Commands for running Go tests with coverage analysis across all packages using various `-coverpkg` patterns. Each command demonstrates different coverage reporting configurations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_partial.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go test -coverprofile=cov.p -coverpkg=./... ./...
stdout '^ok\s+M/a\s+\S+\s+coverage: 50.0% of statements in ./...'
stdout '^ok\s+M/b\s+\S+\s+coverage: 60.0% of statements in ./...'
stdout '^ok\s+M/c\s+\S+\s+coverage: 30.0% of statements in ./...'
stdout '^\s*M/d\s+coverage: 0.0% of statements'
stdout '^\s*M/f\s+coverage: 0.0% of statements'

# Test just the test-only package ./e but with -coverpkg=./...
# Total number of statements should be 7 (e.g. a/b/d/f but not c)
# and covered percent should be 6/7 (we hit everything in the
# coverpkg pattern except the func in "d").
go test -coverprofile=bar.p -coverpkg=./... ./e
stdout '^ok\s+M/e\s+\S+\s+coverage: 85.7% of statements in ./...'

# Test b and f with -coverpkg set to a/d/f. Total of 6 statements
# in a/d/f, again we hit everything except DFunc.
go test -coverprofile=baz.p -coverpkg=./a,./d,./f ./b ./f
stdout '^ok\s+M/b\s+\S+\s+coverage: 83.3% of statements in ./a, ./d, ./f'
stdout '^\s*M/f\s+coverage: 0.0% of statements'

# This sub-test inspired by issue 65653: if package P is is matched
# via the package pattern supplied as the argument to "go test -cover"
# but P is not part of "-coverpkg", then we don't want coverage for P
# (including the specific case where P has no test files).
go test -coverpkg=./a ./...
stdout '^ok\s+M/a\s+\S+\s+coverage: 100.0% of statements in ./a'
stdout '^\s*\?\s+M/f\s+\[no test files\]'
```

----------------------------------------

TITLE: Shell Script for Testing Go Fuzzing Behavior
DESCRIPTION: A shell script that tests different scenarios of running the fuzz test, including with and without the -run flag, in verbose and non-verbose modes, with different matching patterns.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_run.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
[!fuzz] skip
[short] skip
env GOCACHE=$WORK/cache

# Tests which verify the behavior and command line output when
# running a fuzz target as a unit test.

# Tests without -run.

! go test
stdout FAIL
stdout 'error here'

! go test -v
stdout FAIL
stdout 'error here'
stdout '=== RUN   FuzzFoo/thisfails'
stdout '--- FAIL: FuzzFoo/thisfails'
stdout '=== RUN   FuzzFoo/thispasses'
stdout '--- PASS: FuzzFoo/thispasses'

# Tests where -run matches all seed corpora.

! go test -run FuzzFoo/this
stdout FAIL
stdout 'error here'
! stdout 'no tests to run'

! go test -run /this
stdout FAIL
stdout 'error here'
! stdout 'no tests to run'

! go test -v -run FuzzFoo/this
stdout FAIL
stdout 'error here'
stdout '=== RUN   FuzzFoo/thisfails'
stdout '--- FAIL: FuzzFoo/thisfails'
stdout '=== RUN   FuzzFoo/thispasses'
stdout '--- PASS: FuzzFoo/thispasses'
! stdout 'no tests to run'

! go test -v -run /this
stdout FAIL
stdout 'error here'
stdout '=== RUN   FuzzFoo/thisfails'
stdout '--- FAIL: FuzzFoo/thisfails'
stdout '=== RUN   FuzzFoo/thispasses'
stdout '--- PASS: FuzzFoo/thispasses'
! stdout 'no tests to run'

# Tests where -run only matches one seed corpus which passes.

go test -run FuzzFoo/thispasses
stdout ok
! stdout 'no tests to run'

go test -run /thispasses
stdout ok
! stdout 'no tests to run'

# Same tests in verbose mode
go test -v -run FuzzFoo/thispasses
stdout '=== RUN   FuzzFoo/thispasses'
stdout '--- PASS: FuzzFoo/thispasses'
! stdout '=== RUN   FuzzFoo/thisfails'
! stdout 'no tests to run'

go test -v -run /thispasses
stdout '=== RUN   FuzzFoo/thispasses'
stdout '--- PASS: FuzzFoo/thispasses'
! stdout '=== RUN   FuzzFoo/thisfails'
! stdout 'no tests to run'

# Tests where -run only matches one seed corpus which fails.

! go test -run FuzzFoo/thisfails
stdout FAIL
stdout 'error here'
! stdout 'no tests to run'

! go test -run /thisfails
stdout FAIL
stdout 'error here'
! stdout 'no tests to run'

! go test -v -run FuzzFoo/thisfails
stdout 'error here'
stdout '=== RUN   FuzzFoo/thisfails'
stdout '--- FAIL: FuzzFoo/thisfails'
! stdout '=== RUN   FuzzFoo/thispasses'
! stdout 'no tests to run'

! go test -v -run /thisfails
stdout 'error here'
stdout '=== RUN   FuzzFoo/thisfails'
stdout '--- FAIL: FuzzFoo/thisfails'
! stdout '=== RUN   FuzzFoo/thispasses'
! stdout 'no tests to run'

# Tests where -run doesn't match any seed corpora.

go test -run FuzzFoo/nomatch
stdout ok

go test -run /nomatch
stdout ok

go test -v -run FuzzFoo/nomatch
stdout '=== RUN   FuzzFoo'
stdout '--- PASS: FuzzFoo'
stdout ok
! stdout 'no tests to run'

go test -v -run /nomatch
stdout '=== RUN   FuzzFoo'
stdout '--- PASS: FuzzFoo'
stdout ok
! stdout 'no tests to run'
```

----------------------------------------

TITLE: Importing External Package in Go
DESCRIPTION: This snippet demonstrates a Go file that imports an external package 'example.net/x' using a blank identifier, which is commonly used to include a package for its side effects.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_gomod.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package m

import _ "example.net/x"
```

----------------------------------------

TITLE: Main Go Program Importing Local Dependency (Go)
DESCRIPTION: This snippet defines the content of the `a/a.go` file. It contains the `main` package and `main` function, serving as the entry point for the executable built in the test. It imports a package `a/dep` from the same module and calls the function `dep.D()`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_command_line_arguments.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
-- a/a.go --
package main

import "a/dep"

func main() {
    dep.D()
}
```

----------------------------------------

TITLE: Importing a Dependency in a Basic Go Package - Go
DESCRIPTION: This minimal Go source file defines the 'example' package and imports the 'rsc.io/quote' package for its side-effects. No functions or executable code are provided; primarily demonstrates how an import can be declared to register behavior or effects during program initialization. Requires the dependency to be present in go.mod and fetched by Go tools.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_m.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package example

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Go Module P Implementation
DESCRIPTION: Module P that imports and uses Q's PrintVersion function. Includes go.mod file with local replacements for module Q versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.com/p

go 1.18

require example.com/q v1.0.0

replace example.com/q v1.0.0 => ../q1_0_0
replace example.com/q v1.1.0 => ../q1_1_0
```

LANGUAGE: go
CODE:
```
package main

import "example.com/q"

func main() {
	q.PrintVersion()
}
```

----------------------------------------

TITLE: Root Module Implementation with Imports
DESCRIPTION: The main package of module 'm' that imports both 'm/a' and 'm/b' packages, starting the import chain that will eventually form a cycle.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_cycle.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package m
import (
	_ "m/a"
	_ "m/b"
)
```

----------------------------------------

TITLE: Importing and Using a Replaced Module in Go
DESCRIPTION: This snippet demonstrates how to import and use a module that has been replaced in the go.mod file. It shows a simple function that calls a function from the replaced module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package m

import "example.com/dep"

func F() {
	dep.G()
}
```

----------------------------------------

TITLE: Module Definition with Dependencies
DESCRIPTION: Main module declaration with go version 1.17 and required dependencies including replacements for local modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_implicit.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/m

go 1.17

replace (
	example.net/lazy v0.1.0 => ./lazy
	example.net/requireincompatible v0.1.0 => ./requireincompatible
)

require example.net/lazy v0.1.0
```

----------------------------------------

TITLE: Implementing PBKDF2 with Generic Types in Go
DESCRIPTION: New function in the crypto/pbkdf2 package using generic types for hash functions.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
func Key[$0 hash.Hash](func() $0, string, []uint8, int, int) ([]uint8, error)
```

----------------------------------------

TITLE: Go Library Package Implementation
DESCRIPTION: This snippet shows the implementation of a Go library package that imports and uses a function from another module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package lib

import "example.com/a"

func Hello() {
	a.HelloFromA()
}
```

----------------------------------------

TITLE: Package Q Implementation and Tests
DESCRIPTION: Implementation of package q with test file that imports package p
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_irrelevant_dependency.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package q

func Q() {
}
```

LANGUAGE: go
CODE:
```
package q

import example.com/p

func TestQ(t *testing.T) {
	p.P()
}
```

----------------------------------------

TITLE: Go Program to Print Stack File Information
DESCRIPTION: A Go program that imports the 'example.com/stack' module and prints the file path from stack.TopFile(). Used to verify module version caching.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_trimpath.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
// +build ignore

package main

import (
	"fmt"

	"example.com/stack"
)

func main() {
	fmt.Println(stack.TopFile())
}
```

----------------------------------------

TITLE: Main Package Imports
DESCRIPTION: Main package file importing dependent modules a and b.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_issue60313.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package example

import (
	_ "example.net/a"
	_ "example.net/b"
)
```

----------------------------------------

TITLE: Successful Fuzz Test Implementation in Go
DESCRIPTION: Demonstrates a properly implemented fuzz test that accepts byte slice input.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package success_fuzz

import "testing"

func Fuzz(f *testing.F) {
    f.Fuzz(func (*testing.T, []byte) {})
}
```

----------------------------------------

TITLE: Implementing Fail Fast Test Cases in Go
DESCRIPTION: This snippet contains the implementation of various test cases to verify the fail-fast functionality in Go's testing framework. It includes parallel and non-parallel tests, subtests, and fatal tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fail_fast.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package failfast

import "testing"

func TestA(t *testing.T) {
	// Edge-case testing, mixing unparallel tests too
	t.Logf("LOG: %s", t.Name())
}

func TestFailingA(t *testing.T) {
	t.Errorf("FAIL - %s", t.Name())
}

func TestB(t *testing.T) {
	// Edge-case testing, mixing unparallel tests too
	t.Logf("LOG: %s", t.Name())
}

func TestParallelFailingA(t *testing.T) {
	t.Parallel()
	t.Errorf("FAIL - %s", t.Name())
}

func TestParallelFailingB(t *testing.T) {
	t.Parallel()
	t.Errorf("FAIL - %s", t.Name())
}

func TestParallelFailingSubtestsA(t *testing.T) {
	t.Parallel()
	t.Run("TestFailingSubtestsA1", func(t *testing.T) {
		t.Errorf("FAIL - %s", t.Name())
	})
	t.Run("TestFailingSubtestsA2", func(t *testing.T) {
		t.Errorf("FAIL - %s", t.Name())
	})
}

func TestFailingSubtestsA(t *testing.T) {
	t.Run("TestFailingSubtestsA1", func(t *testing.T) {
		t.Errorf("FAIL - %s", t.Name())
	})
	t.Run("TestFailingSubtestsA2", func(t *testing.T) {
		t.Errorf("FAIL - %s", t.Name())
	})
}

func TestFailingB(t *testing.T) {
	t.Errorf("FAIL - %s", t.Name())
}

func TestFatalC(t *testing.T) {
	t.Fatalf("FAIL - %s", t.Name())
}

func TestFatalD(t *testing.T) {
	t.Fatalf("FAIL - %s", t.Name())
}
```

----------------------------------------

TITLE: Implementing Go Main Package for Coverage Example - Go
DESCRIPTION: Implements the main entry point for the mod.example module, importing both a subpackage and an external dependency, and printing their outputs. The program prints the result of quote.Go() and sub.F() to standard output. Dependencies are mod.example/sub and rsc.io/quote; expected output is the concatenated outputs of these functions, with input being the program invocation and no parameters.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_pkg_select.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"mod.example/sub"

	"rsc.io/quote"
)

func main() {
	fmt.Println(quote.Go(), sub.F())
}
```

----------------------------------------

TITLE: Module C Configuration
DESCRIPTION: Basic module configuration for example.com/c with Go 1.21.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue54372.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.com/c

go 1.21
```

----------------------------------------

TITLE: Implementing SHA-3 and SHAKE Functions in Go
DESCRIPTION: New functions and types for SHA-3 and SHAKE in the crypto/sha3 package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
func New224() *SHA3
func New256() *SHA3
func New384() *SHA3
func New512() *SHA3
func NewCSHAKE128([]uint8, []uint8) *SHAKE
func NewCSHAKE256([]uint8, []uint8) *SHAKE
func NewSHAKE128() *SHAKE
func NewSHAKE256() *SHAKE
func Sum224([]uint8) [28]uint8
func Sum256([]uint8) [32]uint8
func Sum384([]uint8) [48]uint8
func Sum512([]uint8) [64]uint8
func SumSHAKE128([]uint8, int) []uint8
func SumSHAKE256([]uint8, int) []uint8

type SHA3 struct
type SHAKE struct
```

----------------------------------------

TITLE: Updating Module Dependencies in Go
DESCRIPTION: This snippet demonstrates updating module dependencies and checking the results using various go commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_of_test_dep.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
go get -t example.com/b@v0.1.0
go list -test -deps example.com/b
stdout example.com/c

[!short] go test -c -o $devnull example.com/b

go list -m example.com/c
stdout '^example.com/c v0.1.0 '

cmp go.mod go.mod.b
```

----------------------------------------

TITLE: Simple Go Generate Test
DESCRIPTION: Basic test file demonstrating go generate functionality with a simple echo command. Includes a build tag that should be ignored by go generate.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Simple test for go generate.

// We include a build tag that go generate should ignore.

// +build ignore

//go:generate echo Success

package p
```

----------------------------------------

TITLE: Setting up a Go Module with Subpackages
DESCRIPTION: Defines a `go.mod` file and simple Go source files structured in a way to create a module with subpackages, illustrating Go's module and package structuring.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path.txt#2025-04-22_snippet_7

LANGUAGE: Golang
CODE:
```
-- dotname/go.mod --
module example.com/dotname

go 1.16
-- dotname/.dot/dot.go --
package dot
-- dotname/use/use.go --
package use

import _ "example.com/dotname/.dot"
```

----------------------------------------

TITLE: Module Download Commands
DESCRIPTION: Demonstrates usage of 'go mod download' command with different version specifiers including specific versions and @latest tag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_main.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go mod download rsc.io/quote@5d9f230b
go mod download rsc.io/quote@v1.5.2
go mod download rsc.io/quote@latest
```

----------------------------------------

TITLE: Go Source File with External Import
DESCRIPTION: Go source file importing an external package rsc.io/quote
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_readonly.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package x
import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Go 1.20 Module Definition File
DESCRIPTION: A Go 1.20 module definition that declares module m, requires q v1.0.0 with a local replacement, and depends on rsc.io/panicnil v1.0.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_default.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
go 1.20
module m
require q v1.0.0
replace q => ./q
require rsc.io/panicnil v1.0.0
```

----------------------------------------

TITLE: Printing Current Time as JSON in Go
DESCRIPTION: This Go program (`now`) gets the current time using `time.Now()` and encodes it as a JSON string to standard output. It exits with an error code 1 if JSON encoding fails. This utility is used in the main test script to capture timestamps.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue6480.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- now/now.go --
// Writes time.Now() to a file
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"time"
)

func main() {
	if err := json.NewEncoder(os.Stdout).Encode(time.Now()); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: Fetching Go Module Dependencies (Shell)
DESCRIPTION: Executes the `go get` command within the project directory. This command analyzes the `go.mod` file, resolves dependencies according to semantic versioning rules (preferring stable releases over pre-releases by default), downloads them, and updates the `go.mod` and `go.sum` files if necessary.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
# latest rsc.io/quote should be v1.5.2 not v1.5.3-pre1
go get
```

----------------------------------------

TITLE: Main Package Import
DESCRIPTION: Main package file importing required dependencies using blank identifiers
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_indirect.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package tidy

import (
	_ "example.net/incomplete"
	_ "example.net/toolow"
)
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module at vcs-test.golang.org/git/no-tags.git with Go 1.13 compatibility.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/no-tags.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/git/no-tags.git

go 1.13
```

----------------------------------------

TITLE: Go Workspace File with Relative Path
DESCRIPTION: Go workspace file that specifies Go 1.18 as the required version and includes a reference to the './bar/baz' module directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_dot.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
go 1.18

use ./bar/baz
```

----------------------------------------

TITLE: Module A Configuration
DESCRIPTION: Go.mod file for module 'example.com/a' which includes indirect requirements for modules 'b' and 'c'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com/a
require (
	example.com/b v0.1.0 // indirect
	example.com/c v0.1.0 // indirect
)
```

----------------------------------------

TITLE: Go Package Import Example
DESCRIPTION: Demonstrates importing packages that are affected by the replace directive and version constraints in the module definition.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_replace_old.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package m

import (
	_ "example.com/missingpkg/deprecated"
	_ "example.com/usemissingpre"
)
```

----------------------------------------

TITLE: Implementing Fuzz Test for Byte Slice Crash in Go
DESCRIPTION: This function implements a fuzz test that panics when the input byte slice is not 'aa'. It demonstrates basic fuzzing functionality and crash detection.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
func FuzzWithBug(f *testing.F) {
	f.Add([]byte("aa"))
	f.Fuzz(func(t *testing.T, b []byte) {
		if string(b) != "aa" {
			panic("this input caused a crash!")
		}
	})
}
```

----------------------------------------

TITLE: FileInfo Interface Definition in Go
DESCRIPTION: Interface definition for FileInfo in the os package, specifying methods for accessing file metadata.
SOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
type FileInfo interface {
    IsDir() bool
    ModTime() time.Time
    Mode() FileMode
    Name() string
    Size() int64
    Sys() interface{}
}
```

----------------------------------------

TITLE: Testing Quote Package Functions in Go
DESCRIPTION: Test suite for the quote package that verifies the correct output of the Hello and Glass functions. Each test function compares the function's return value against the expected string output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.1.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package quote

import "testing"

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}
```

----------------------------------------

TITLE: Initializing Go Workspace
DESCRIPTION: This snippet shows the process of initializing a Go workspace, including error handling for non-existent directories and successful initialization.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go work init doesnotexist
stderr 'go: directory doesnotexist does not exist'
go env GOWORK
! stdout .

go work init ./a ./b
cmpenv go.work go.work.want
go env GOWORK
stdout '^'$WORK'(\\|/)gopath(\\|/)src(\\|/)go.work$'
```

----------------------------------------

TITLE: New Buffer Methods in bytes Package
DESCRIPTION: New methods added to the bytes.Buffer type for managing buffer capacity and available space. Includes AvailableBuffer() returning unused buffer space and Available() returning available buffer capacity as an integer.
SOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
func (*Buffer) AvailableBuffer() []uint8
func (*Buffer) Available() int
```

----------------------------------------

TITLE: Running Fuzz Tests with Additional Unit Test in Go
DESCRIPTION: This snippet combines a fuzz test with a regular unit test. It shows how both types of tests can coexist in the same file and how they are executed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_chatty.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
package chatty_with_test_fuzz

import "testing"

func TestFoo(t *testing.T) {
    t.Log("logged foo")
}

func Fuzz(f *testing.F) {
    f.Log("all good here")
    f.Fuzz(func(*testing.T, []byte) {})
}
```

----------------------------------------

TITLE: Updating Go Modules for Lazy Loading
DESCRIPTION: Updates all modules to Go 1.17 to enable lazy loading, then runs 'go mod tidy'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_7

LANGUAGE: Bash
CODE:
```
go mod edit -go=1.17 a/go.mod
go mod edit -go=1.17 b/go.mod
go mod edit -go=1.17 c/go.mod
go mod edit -go=1.17 d/go.mod
go mod edit -go=1.17 q/go.mod
go mod edit -go=1.17 r/go.mod
go mod edit -go=1.17 s/go.mod
go mod edit -go=1.17 t/go.mod
go mod edit -go=1.17 u/go.mod
go mod edit -go=1.17 w/go.mod
go mod edit -go=1.17 x/go.mod
go mod edit -go=1.17
cmp go.mod go.mod.beforetidy
go mod tidy
cmp go.mod go.mod.aftertidy
```

----------------------------------------

TITLE: Cgo Package Implementation with C Function
DESCRIPTION: Defines a Go package that uses cgo to interface with a simple C function. It includes a Go function F() that calls the C function and has a conditional branch for coverage testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_xtest.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p

/*
void
f(void)
{
}
*/
import "C"

var b bool

func F() {
	if b {
		for {
		}
	}
	C.f()
}
```

----------------------------------------

TITLE: Initializing Go Module and Running Test
DESCRIPTION: This snippet shows the commands to initialize a Go module named 'foo' and run the test with verbose output. It expects to see '(devel)' in the stdout.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildinfo.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go mod init foo
go test -v
stdout '(devel)'
```

----------------------------------------

TITLE: Defining Go Module in go.mod File
DESCRIPTION: Duplicate of the .mod file, specifying the module name and required Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo1223_v0.0.1.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module rsc.io/needgo1223
go 1.22.3
```

----------------------------------------

TITLE: Go Module Definition File
DESCRIPTION: Module definition file specifying the module name, Go version requirement, and a dependency on example.net/pkgadded at version 1.2.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downgrade_missing.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/m

go 1.16

require example.net/pkgadded v1.2.0
```

----------------------------------------

TITLE: Running Go Tests and Benchmarks with Specific Flags
DESCRIPTION: This command runs Go tests and benchmarks with specific CPU, run, bench, count, and verbosity flags. It targets tests and benchmarks matching the pattern X/Y and runs them twice.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_regexps.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go test -cpu=1 -run=X/Y -bench=X/Y -count=2 -v testregexp
```

----------------------------------------

TITLE: Defining Go Module in go.mod File - Go
DESCRIPTION: Specifies the module path and Go version for the 'example.com/ambiguous/a/b' module using the standard 'go.mod' file which is required for all Go modules. This file enables module support and establishes version requirements for Go. The file has no dependencies beyond the Go toolchain and is used during dependency resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_ambiguous_a_b_v0.0.0-empty.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module example.com/ambiguous/a/b

go 1.16
```

----------------------------------------

TITLE: Defining a Go Module (`go.mod`)
DESCRIPTION: This snippet shows the content of a `go.mod` file. It uses the `module` directive to declare the module path as `example.com/pseudoupgrade`. This file is essential for defining a Go module and managing its dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_pseudoupgrade_v0.0.0-20190430073000-30950c05d534.txt#2025-04-22_snippet_0

LANGUAGE: gomod
CODE:
```
module example.com/pseudoupgrade
```

----------------------------------------

TITLE: Go Module Definition File
DESCRIPTION: Contains the Go module definition with a module path for a test repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/emptytest.txt#2025-04-22_snippet_4

LANGUAGE: plaintext
CODE:
```
module vcs-test.golang.org/git/emptytest.git
```

----------------------------------------

TITLE: Initial Go Module Definition
DESCRIPTION: Basic go.mod file configuration with module name 'm' and minimum Go version 1.1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_get_toolchain.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m
go 1.1
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic go.mod file definition specifying module name and Go version requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_issue46807.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module bug

go 1.21
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: This snippet defines the Go module file (go.mod) for the test project. It specifies the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_info_err.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module m

go 1.13
```

----------------------------------------

TITLE: Module Declaration - Go
DESCRIPTION: This Go snippet declares a module named 'example.com/simple'. Modules are the unit of source code distribution in Go projects, and this declaration is essential for the Go module system to recognize and track the module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_overlay.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example.com/simple
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module declaration file defining the module name 'm' for the test project structure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_set_executable_name.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Initializing Go module
DESCRIPTION: This snippet shows the contents of the go.mod file, which initializes a new Go module named 'm'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_hash.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Outer Module Configuration
DESCRIPTION: Go module configuration for the outer package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_issue60313.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.net/outer

go 1.21
```

----------------------------------------

TITLE: UTF-16 Rune Length Calculator in Go
DESCRIPTION: Function to calculate the UTF-16 encoded length of a given rune value.
SOURCE: https://github.com/golang/go/blob/master/api/go1.23.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
func RuneLen(int32) int
```

----------------------------------------

TITLE: Go Workspace Module Configuration
DESCRIPTION: Defines the Go workspace configuration specifying Go version 1.18 and including modules 'a' and 'p'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go 1.18

use (
	./a
	./p
)
```

----------------------------------------

TITLE: File Path Printer Implementation in Overlay
DESCRIPTION: Go program that uses runtime.Caller to get the filename of the current file and print it. Used to test how overlays affect file paths in runtime information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"path/filepath"
	"runtime"
)

func main() {
	_, file, _, _ := runtime.Caller(0)

	// Since https://golang.org/cl/214286, the runtime's debug paths are
	// slash-separated regardless of platform, so normalize them to system file
	// paths.
	fmt.Println(filepath.FromSlash(file))
}
```

----------------------------------------

TITLE: Main Package Implementation
DESCRIPTION: Main entry point that imports nested packages and prints a hello world message using constants from imported packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_complex.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	_ "complex/nest/sub/test12"
	_ "complex/nest/sub/test23"
	"complex/w"
	"v"
)

func main() {
	println(v.Hello + " " + w.World)
}
```

----------------------------------------

TITLE: Module Definition File for patch.example.com/direct
DESCRIPTION: Defines the module and its dependencies in the .mod file format.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.1.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module patch.example.com/direct

require (
	patch.example.com/indirect v1.0.0
)
```

----------------------------------------

TITLE: SQL Package Architecture Flow
DESCRIPTION: Illustrates the architectural flow between user code, SQL package, and database drivers showing how the components interact through concrete types and interfaces.
SOURCE: https://github.com/golang/go/blob/master/src/database/sql/doc.txt#2025-04-22_snippet_0

LANGUAGE: txt
CODE:
```
User Code ---> sql package (concrete types) ---> sql/driver (interfaces)
Database Driver -> sql (to register) + sql/driver (implement interfaces)
```

----------------------------------------

TITLE: Basic Go Fuzz Test Implementation
DESCRIPTION: Implements a minimal fuzz test function in Go. The test accepts byte array input and implements the basic fuzzing interface requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_match.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package standalone_fuzz

import "testing"

func Fuzz(f *testing.F) {
	f.Fuzz(func (*testing.T, []byte) {})
}
```

----------------------------------------

TITLE: Module Management Commands
DESCRIPTION: Shell commands demonstrating module dependency management including adding dependencies, updating versions, and cleaning up go.sum entries
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_sum.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

# go.sum should list directly used modules and dependencies
go get rsc.io/quote@v1.5.2
go mod tidy
grep rsc.io/sampler go.sum

# go.sum should not normally lose old entries
go get rsc.io/quote@v1.0.0
grep 'rsc.io/quote v1.0.0' go.sum
grep 'rsc.io/quote v1.5.2' go.sum
grep rsc.io/sampler go.sum

# go mod tidy should clear dead entries from go.sum
go mod tidy
grep 'rsc.io/quote v1.0.0' go.sum
! grep 'rsc.io/quote v1.5.2' go.sum
! grep rsc.io/sampler go.sum

# go.sum with no entries is OK to keep
# (better for version control not to delete and recreate.)
cp x.go.noimports x.go
go mod tidy
exists go.sum
! grep . go.sum
```

----------------------------------------

TITLE: Latest Version Go Module Definition
DESCRIPTION: Module definition with replacement and indirect requirement for rsc.io/quote.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_readonly.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

go 1.16

replace rsc.io/quote => ./quote

require rsc.io/quote v1.5.2 // indirect
```

----------------------------------------

TITLE: Main Program Importing Build Info Library and Dependency in Go
DESCRIPTION: This Go program serves as the main entry point for the 'x' binary. It imports the local `x/lib` package (causing its `init` function to run and print build info) and the external `rsc.io/quote` package. The `main` function simply calls `quote.Hello()` and prints its return value, demonstrating the use of a dependency alongside the build info retrieval mechanism.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_modinfo.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
-- x/main.go --
package main

import (
	"rsc.io/quote"
	_ "x/lib"
)

func main() {
	println(quote.Hello())
}
```

----------------------------------------

TITLE: Defining Go Module Path in go.mod
DESCRIPTION: Specifies the module path `golang.org/toolchain` within the `go.mod` file (indicated by context markers `.mod` and `go.mod`). This declaration is fundamental for Go's module system to identify the module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-386.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Go Module Definition with Fixed Version
DESCRIPTION: Go module definition requiring a specific version (v1.5.1) of rsc.io/quote package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module x
require rsc.io/quote v1.5.1
```

----------------------------------------

TITLE: Embedding Test Files in Go Using `embed` Package
DESCRIPTION: This Go test file uses the `embed` package to embed files matching the pattern `y*t*t` into the `Y` variable, of type `string`. This allows test files starting with 'y' and ending with 't' to be embedded and tested against. The embedded content can be accessed as a string. Dependency is the `embed` package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package p

import "embed"

//go:embed y*t*t
var Y string
```

----------------------------------------

TITLE: Module Version Listing Commands
DESCRIPTION: Shows how to use 'go list -m' command to display module versions and available versions using -versions flag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_main.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go list -m rsc.io/quote@5d9f230b
go list -m rsc.io/quote@v1.5.2
go list -m rsc.io/quote@latest
go list -m -versions rsc.io/quote
```

----------------------------------------

TITLE: Defining Module Dependencies for y1
DESCRIPTION: This go.mod file for the y1 module defines its dependencies on specific versions of modules w and x.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence_loop.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
module example.net/y

go 1.16

require (
	example.net/w v0.2.0-pre
	example.net/x v0.2.0-pre
)
```

----------------------------------------

TITLE: Configuring Go Module
DESCRIPTION: Basic Go module configuration file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main_twice.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module multimain

go 1.16
```

----------------------------------------

TITLE: Go Module Declaration
DESCRIPTION: Module declaration file (go.mod) defining the module name as example.com/mod.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_workspace.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/mod
```

----------------------------------------

TITLE: Initial go.mod File
DESCRIPTION: The initial go.mod file used in the tests, specifying the module name and Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_pkg.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module test

go 1.16
```

----------------------------------------

TITLE: Declaring a Go Module Using go.mod - Go
DESCRIPTION: Defines a Go module with the module path 'example.com/join/subpkg' using the go.mod format. This file is required at the root of every Go module. The 'module' directive specifies the import path for the root of the module's packages. There are no other dependencies or requirements declared in this snippet.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_join_subpkg_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/join/subpkg
```

----------------------------------------

TITLE: Querying Module Information Using go list - Go - Shell
DESCRIPTION: This snippet sets the Go proxy to direct mode and invokes go list to retrieve the module and version information for the given module path and pseudo-version tag. It requires Go to be installed and assumes network access to the provided repository. The key parameter is the module path with version (vcs-test.golang.org/git/odd-tags.git@latest), and the expected output is a pseudo-version resolved from repository state. Limitations include relying on the repository being available and supporting direct access.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_odd_tags.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GOPROXY=direct

go list -m vcs-test.golang.org/git/odd-tags.git@latest
stdout -count=1 '^.'
stdout '^vcs-test.golang.org/git/odd-tags.git v0.1.1-0.20220223184835-9d863d525bbf$'
```

----------------------------------------

TITLE: Configuring Go Workspace with Multiple Modules
DESCRIPTION: This snippet shows the contents of a go.work file that configures a workspace with multiple modules. It specifies which modules are part of the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
use m
use n
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a module 'm' that requires Go version 1.21.2.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_goline_order.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m
go 1.21.2
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: Defines a Go module named 'example.com/x' in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_flags.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.com/x
```

----------------------------------------

TITLE: Testing Go Module Dependencies with go get and go list
DESCRIPTION: This snippet demonstrates how 'go get' fetches transitive dependencies and how 'go list' behaves with tag-guarded files and missing dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
go mod edit -require example.net/tools@v0.1.0
! go list -deps example.net/cmd/tool
stderr '^module example\.net/cmd provides package example\.net/cmd/tool and is replaced but not required; to add it:\n\tgo get example\.net/cmd@v0\.1\.0$'
go mod edit -droprequire example.net/tools

go get example.net/tools@v0.1.0
! stderr 'no Go source files'

! go list example.net/tools
stderr '^package example.net/tools: build constraints exclude all Go files in .*[/\\]tools$'

go list -tags=tools -e -deps example.net/tools
stdout '^example.net/cmd/tool$'
stdout '^example.net/missing$'

go list -deps example.net/cmd/tool

! go list example.net/missing
stderr '^no required module provides package example.net/missing; to add it:\n\tgo get example.net/missing$'
```

----------------------------------------

TITLE: Go Test Helper Functions Implementation
DESCRIPTION: Implementation of test helper functions using three different calling patterns: direct *testing.T calls, testing.TB interface calls, and custom TestingT interface calls. Includes a custom interface definition and a test case demonstrating all three approaches.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_issue26995.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package testing_test

import "testing"

type TestingT interface {
	Helper()
	Log(args ...interface{})
}

func directCall(t *testing.T) {
	t.Helper()
	t.Log("directCall")
}

func interfaceTBCall(t testing.TB) {
	t.Helper()
	t.Log("interfaceTBCall")
}

func interfaceCall(t TestingT) {
	t.Helper()
	t.Log("interfaceCall")
}

func TestTesting(t *testing.T) {
	directCall(t)
	interfaceTBCall(t)
	interfaceCall(t)
}
```

----------------------------------------

TITLE: Specifying Retracted Module Versions in go.mod - Go
DESCRIPTION: This go.mod file configures a Go module named "example.com/retract", sets the Go toolchain version to 1.15, and uses the "retract" directive to mark two specific versions (v1.0.0-bad and v1.0.0-unused) as retracted. This tells Go tooling to avoid these versions during module resolution. The comments (// bad) provide context for why each version is retracted. No external dependencies are defined. Users must have Go 1.15+ installed to interpret the directives properly. No code execution occurs in this file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_v1.1.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/retract\n\ngo 1.15\n\nretract v1.0.0-bad // bad\nretract v1.0.0-unused // bad\n
```

----------------------------------------

TITLE: Defining a Go Module with Module Directive - Go
DESCRIPTION: This snippet uses a 'module' directive to specify the module path 'example.com/nest' in a Go module file. It marks the root of a Go module for dependency management. No additional dependencies are included, and the file serves as a starting point for managing source and dependency information in the Go ecosystem. It is required in every root module directory. No explicit relationships are specified with submodules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/nest
```

----------------------------------------

TITLE: Parsing and Saving Go Bug Report URL in Go
DESCRIPTION: This Go program parses a URL from command-line arguments, extracts the 'body' query parameter, and saves its unescaped content to a file named 'browser' in the system's temporary directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/bug.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package main

import (
	"fmt"
	"net/url"
	"os"
	"path/filepath"
)

func main() {
	u, err := url.Parse(os.Args[1])
	if err != nil {
		panic(err)
	}
	body, err := url.PathUnescape(u.Query().Get("body"))
	if err != nil {
		panic(err)
	}
	out := filepath.Join(os.TempDir(), "browser")
	f, err := os.Create(out)
	if err != nil {
		panic(err)
	}
	fmt.Fprintln(f, body)
	if err := f.Close(); err != nil {
		panic(err)
	}
}
```

----------------------------------------

TITLE: Generating Go Test Coverage Profile using go test (Shell)
DESCRIPTION: This shell command executes Go tests defined in `prog_test.go` for the code in `prog.go`. It uses the `-coverprofile` flag to generate a coverage profile and save it to the file `blah.prof`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_localpkg_filepath.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# collect coverage profile in text format
go test -coverprofile=blah.prof prog.go prog_test.go
```

----------------------------------------

TITLE: Parsing Build ID from Command Line File – Go
DESCRIPTION: This Go program ('example/main.go') reads a file path argument (expected to contain a build ID string), splits the ID on '/', checks its structure, and prints the core package build ID segment. It's designed to process Go build IDs (of form X/Y/Z/W), extracting 'Y/Z' part, aiding in the test's ID comparison logic. It depends only on Go's standard library and expects valid file input; returns exit codes 1 (IO error) or 2 (unexpected format). Input: file path as argument; output: extracted package build ID or a process exit.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_list.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
-- example/main.go --\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tprintln(os.Args[1])\n\tcontent, err := os.ReadFile(os.Args[1])\n\tif err != nil {\n\t\tos.Exit(1)\n\t}\n\tfields := strings.Split(strings.TrimSpace(string(content)), \"/\")\n\tif len(fields) != 4 {\n\t\tos.Exit(2)\n\t}\n\tfmt.Println(fields[1] + \"/\" + fields[2])\n}\n
```

----------------------------------------

TITLE: Testing Go Module Security with GOINSECURE Environment Variable
DESCRIPTION: This script tests how 'go mod download' handles insecure HTTP redirects, verifying that downloads fail without proper GOINSECURE settings and succeed when the host is properly included in GOINSECURE. It tests exact host matching, glob patterns, and multiple host specifications.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_insecure_redirect.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on
env GOPROXY=direct
env GOSUMDB=off

! go mod download vcs-test.golang.org/insecure/go/insecure@latest
stderr 'redirected .* to insecure URL'

# insecure host
env GOINSECURE=vcs-test.golang.org
go clean -modcache
go mod download vcs-test.golang.org/insecure/go/insecure@latest

# insecure glob host
env GOINSECURE=*.golang.org
go clean -modcache
go mod download vcs-test.golang.org/insecure/go/insecure@latest

# insecure multiple host
env GOINSECURE=somewhere-else.com,*.golang.org
go clean -modcache
go mod download vcs-test.golang.org/insecure/go/insecure@latest

# different insecure host does not fetch
env GOINSECURE=somewhere-else.com
go clean -modcache
! go mod download vcs-test.golang.org/insecure/go/insecure@latest
stderr 'redirected .* to insecure URL'
```

----------------------------------------

TITLE: Running Race Condition Tests in Go
DESCRIPTION: This snippet shows commands for running Go tests with the -race flag. It demonstrates that -race cannot be used with -covermode=set.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_cover_mode_issue20435.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
# Make sure test is functional.
go test testrace

# Now, check that -race -covermode=set is not allowed.
! go test -race -covermode=set testrace
stderr '-covermode must be "atomic", not "set", when -race is enabled'
! stdout PASS
! stderr PASS
```

----------------------------------------

TITLE: Generating Content-Disposition Header for File Attachments in Go
DESCRIPTION: The FileContentDisposition function takes a filename and fallback name as input and returns a Content-Disposition header string. It handles proper escaping and encoding of the filename for use in multipart MIME messages.
SOURCE: https://github.com/golang/go/blob/master/api/next/46771.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
func FileContentDisposition(string, string) string
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: This Go module definition declares the module name for the test project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_symlink.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module golang.org/issue/28107
```

----------------------------------------

TITLE: Go Module Download with Specific Version
DESCRIPTION: Downloads a specific version of the golang.org/x/text module using 'go mod download'. The -json flag outputs the result in JSON format, and the expected version is verified using 'stdout'. This test ensures that the specified pseudo-version can be downloaded and is correctly identified.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_pseudo_cache.txt#_snippet_0

LANGUAGE: Go
CODE:
```
go mod download -json golang.org/x/text@v0.0.0-20171215141712-a1b916ed6726
stdout '"Version": "v0.0.0-20171215141712-a1b916ed6726",'
```

----------------------------------------

TITLE: Alternative Module Configuration Example with Replace and Exclude - Go (.mod)
DESCRIPTION: The .mod file provides an additional Go module configuration with the same module path and similar dependency resolution rules as go.mod, but with minor version differences in the exclude directive (excludes v1.1.0 instead of v1.0.1). It demonstrates how different versions can be controlled or overridden across builds, affecting dependency selection.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_printversion_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module example.com/printversion

require example.com/version v1.0.0
replace example.com/version v1.0.0 => ../oops v0.0.0
exclude example.com/version v1.1.0
```

----------------------------------------

TITLE: Updating Dependencies with go mod tidy
DESCRIPTION: This snippet uses 'go mod tidy' to update and clean up module dependencies. It shows that the Go version remains unchanged after this operation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_old.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go mod tidy
go list -f '{{.Module.GoVersion}}'
```

----------------------------------------

TITLE: Implementing Parallel Tests with Panic Handling in Go
DESCRIPTION: Demonstrates a test setup with parallel sub-tests where one test deliberately panics while another continues execution. Includes setup and teardown functions managed through TestMain for test initialization and cleanup.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main_panic.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package testmain_parallel_sub_panic_test

import "testing"

func setup()    { println("setup()") }
func teardown() { println("teardown()") }
func TestA(t *testing.T) {
	t.Run("1", func(t *testing.T) {
		t.Run("1", func(t *testing.T) {
			t.Parallel()
			panic("A/1/1 panics")
		})
		t.Run("2", func(t *testing.T) {
			t.Parallel()
			println("A/1/2 is ok")
		})
	})
}

func TestMain(m *testing.M) {
	setup()
	defer teardown()
	m.Run()
}
```

----------------------------------------

TITLE: Defining Go Module with Retraction Directive (go.mod file)
DESCRIPTION: This standard `go.mod` file declares the module path as `example.com/retract/newname`, specifies Go version compatibility (1.16), and includes a `retract` directive. This directive signals to the Go tooling and other developers that version `v1.0.0-bad` of this module should not be used due to issues (indicated by the comment '// bad').
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rename_v1.9.0-new.txt#2025-04-22_snippet_2

LANGUAGE: gomod
CODE:
```
module example.com/retract/newname

go 1.16

// bad
retract v1.0.0-bad
```

----------------------------------------

TITLE: Standalone Go Benchmark Test Definition
DESCRIPTION: Defines a basic empty benchmark function in Go. This is a minimal benchmark test setup that can be used as a template for more complex benchmarking scenarios.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_benchmarks.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package standalone_benchmark

import "testing"

func Benchmark(b *testing.B) {
}
```

----------------------------------------

TITLE: Time Package Duration Calculation
DESCRIPTION: Function for the time package that calculates the duration until a future time. Provides a convenience method for determining time remaining until a specific point.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_19

LANGUAGE: go
CODE:
```
// time functions
func Until(Time) Duration
```

----------------------------------------

TITLE: OS and Signal Handling Types - Go
DESCRIPTION: Operating system related constants and functions for file modes and user directories. Includes signal handling utilities and file mode constants.
SOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
const (
    ModeIrregular FileMode = 524288
    ModeType = 2399666176
)

func UserCacheDir() (string, error)
func Ignored(os.Signal) bool
```

----------------------------------------

TITLE: Listing All Modules in Go
DESCRIPTION: This command lists all modules and checks for the presence of specific modules in the output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_of_test_dep.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go list -m all
stdout '^example.com/b v0.1.0 '
stdout '^example.com/c v0.1.0 '
cmp go.mod go.mod.old
```

----------------------------------------

TITLE: Configuring Module Version Retraction with Go Modules - go.mod - Go
DESCRIPTION: This snippet demonstrates the use of the go.mod file to define a Go module and retract a specified version (v1.9.0) due to it being labeled as 'bad'. No dependencies are required beyond Go itself (minimum version 1.15). Key entries include the module path, Go version, and the 'retract' directive with an inline comment. This configuration prevents consumers from depending on the retracted version, ensuring problematic releases are not used.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_all_v1.9.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/retract/self/all\n\ngo 1.15\n\nretract v1.9.0 // bad\n
```

----------------------------------------

TITLE: Go Module File with Dependency
DESCRIPTION: Defines a Go module named 'x' with a dependency on 'rsc.io/quote' version 1.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_verify.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module x
require rsc.io/quote v1.1.0
```

----------------------------------------

TITLE: Untidy Go Module Definition
DESCRIPTION: Shows an untidy go.mod file with an explicit go version and an indirect requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
module example.com/m

go $goversion

require example.com/dep v0.1.0

require example.com/testdep v0.1.0 // indirect

replace (
	example.com/dep v0.1.0 => ./dep
	example.com/testdep v0.1.0 => ./testdep
)
```

----------------------------------------

TITLE: Go Package with Blank Import
DESCRIPTION: Defines a Go package 'x' with a blank import of 'rsc.io/quote' to ensure the package is included but not directly used.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_verify.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package x
import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Verify Module Dependencies
DESCRIPTION: Command to verify the checksums of module dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_disabled.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
go mod verify
```

----------------------------------------

TITLE: Defining Go Benchmark Function (Go)
DESCRIPTION: This file (`bench_test.go`) defines a benchmark function `BenchmarkSimplefunc` within the `testlist` package. It uses the `testing` package and follows the `BenchmarkXxx(*testing.B)` signature. The function body contains a loop controlled by `b.N` to measure the performance of `fmt.Sprint`. Note the use of `b.StopTimer()` and `b.StartTimer()`, although their placement here has minimal effect.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_simple.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- bench_test.go --
package testlist

import (
	"fmt"
	"testing"
)

func BenchmarkSimplefunc(b *testing.B) {
	b.StopTimer()
	b.StartTimer()
	for i := 0; i < b.N; i++ {
		_ = fmt.Sprint("Test for bench")
	}
}
```

----------------------------------------

TITLE: Testing Go Version Command with Module-Built Binary
DESCRIPTION: Builds a binary in module mode and checks its version and module information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_5

LANGUAGE: Shell
CODE:
```
go get rsc.io/fortune
go build -o fortune.exe rsc.io/fortune
go version fortune.exe
stdout '^fortune.exe: .+'
go version -m fortune.exe
stdout -buildmode=exe
stdout '^\tpath\trsc.io/fortune'
stdout '^\tmod\trsc.io/fortune\tv1.0.0'
```

----------------------------------------

TITLE: Implementing Quote Functions in Go
DESCRIPTION: Core implementation of the quote package providing four functions: Hello(), Glass(), Go(), and Opt(). Each function returns a specific quotation. The package depends on rsc.io/sampler for the Hello functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.1.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package quote

import "rsc.io/sampler"

func Hello() string {
	return sampler.Hello()
}

func Glass() string {
	return "I can eat glass and it doesn't hurt me."
}

func Go() string {
	return "Don't communicate by sharing memory, share memory by communicating."
}

func Opt() string {
	return "If a program is too slow, it must have a loop."
}
```

----------------------------------------

TITLE: Initializing Go Module with go.mod - Go
DESCRIPTION: Defines the module path as 'example.com/retract/rationale' and specifies the Go language version (1.14) used in this module. The go.mod file is essential for Go modules, describing the module's canonical import path and declaring the minimum Go toolchain version for consumers. It enables dependency management and ensures compatibility with specified versions. No external dependencies are directly listed in this snippet.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-blockwithcomment.txt#2025-04-22_snippet_0

LANGUAGE: go.mod
CODE:
```
module example.com/retract/rationale\n\ngo 1.14
```

----------------------------------------

TITLE: Modifying and Unsetting Go Environment Variables
DESCRIPTION: This snippet demonstrates how to modify Go environment variables using 'go env -w' and unset them using 'go env -u'. It also shows how these commands interact with OS environment variables.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
# go env -w changes default setting
env root=
[GOOS:windows] env root=c:
env GOPATH=
go env -w GOPATH=$root/non-exist/gopath
! stderr .+
grep GOPATH=$root/non-exist/gopath $WORK/envdir/go/env
go env GOPATH
stdout /non-exist/gopath

# go env -w does not override OS environment, and warns about that
env GOPATH=$root/other
go env -w GOPATH=$root/non-exist/gopath2
stderr 'warning: go env -w GOPATH=... does not override conflicting OS environment variable'
go env GOPATH
stdout $root/other

# but go env -w does do the update, and unsetting the env var exposes the change
env GOPATH=
go env GOPATH
stdout $root/non-exist/gopath2

# unsetting with go env -u does not warn about OS environment overrides,
# nor does it warn about variables that haven't been set by go env -w.
env GOPATH=$root/other
go env -u GOPATH
! stderr .+
go env -u GOPATH
! stderr .+
```

----------------------------------------

TITLE: Running Go Tests with Default Coverage Analysis (Shell)
DESCRIPTION: Executes Go tests for the `encoding/binary` and `errors` packages using the `-short` flag. It enables coverage analysis (`-cover`) and writes the combined coverage profile to the file specified by the `$WORK/cover.out` variable. This test verifies the default behavior without the race detector.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_modes.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go test -short -cover encoding/binary errors -coverprofile=$WORK/cover.out
```

----------------------------------------

TITLE: Defining a Go Main Executable Entry Point - Go
DESCRIPTION: This Go snippet provides a simple main package with a single entry point, printing 'hello!' to standard output. It is used as the executable code for building and testing Go build scenarios demonstrated in the shell script. Dependencies: Uses the Go standard library only (fmt). Key input is the implicit execution of the main program. Output: Prints to standard output. There are no parameters, limitations, or configuration requirements beyond Go 1.12 compatibility as specified by go.mod.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/clean_binary.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package main

import "fmt"

func main() {
	fmt.Println("hello!")
}
```

----------------------------------------

TITLE: Inspecting Package Target and Asserting Binary Name (v2) (Shell)
DESCRIPTION: Uses `go list` with `{{.Target}}` to get the target binary name for the `rsc.io/fortune/v2` package. The `! stdout` and `stdout` assertions check that the output does *not* match `v2(\.exe)?$` but *does* match `fortune(\.exe)?$`, indicating the binary name remains `fortune` even for the v2 module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_install_versioned.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
go list -f '{{.Target}}' rsc.io/fortune/v2
! stdout 'v2(\.exe)?$'
stdout 'fortune(\.exe)?$'
```

----------------------------------------

TITLE: Installing Go Packages with Race Detection
DESCRIPTION: This shell command creates a temporary package directory and installs Go standard library packages with race detection enabled. It uses a custom package directory specified by $WORKDIR.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_install.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
mkdir $WORKDIR/tmp/pkg
go install -race -pkgdir=$WORKDIR/tmp/pkg std
```

----------------------------------------

TITLE: Defining Go Module with Version Requirement
DESCRIPTION: A go.mod file that defines a module named 'example.com/retract' and specifies Go 1.15 as the required version. This file is essential for Go's module system to manage dependencies and versioning.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_v1.0.0-unused.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/retract

go 1.15
```

----------------------------------------

TITLE: Automating Go Executable and Test Build/Clean Scenarios - Shell
DESCRIPTION: This shell script automates multiple test cases for building, testing, and cleaning Go executables, switching between module-aware and legacy GOPATH modes using GO111MODULE, and validating file presence post-operations. It leverages environment variables, the go build/test/clean commands, and file existence checks to test various executable and test binary naming conventions (file-named, module-named, and directory-named). Dependencies include a shell environment with access to Go SDK, and the script assumes the presence of source files and a defined module. Parameters such as GO111MODULE affect how Go resolves dependencies and output file locations, and test cases require accompanying Go source and test files. Expected outputs are the creation and deletion (by go clean) of appropriately named executables. Limitations: Script assumes Unix shell semantics and presence of corresponding Go files where necessary.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/clean_binary.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
# Build something to create the executable, including several cases
[short] skip

# --------------------- clean executables -------------------------

# case1: test file-named executable 'main'
env GO111MODULE=on

! exists main$GOEXE
go build main.go
exists -exec main$GOEXE
go clean
! exists main$GOEXE

# case2: test module-named executable 'a.b.c'
! exists a.b.c$GOEXE
go build
exists -exec a.b.c$GOEXE
go clean
! exists a.b.c$GOEXE

# case3: directory-named executable 'src'
env GO111MODULE=off

! exists src$GOEXE
go build
exists -exec src$GOEXE
go clean
! exists src$GOEXE

# --------------------- clean test files -------------------------

# case1: test file-named test file
env GO111MODULE=on

! exists main.test$GOEXE
go test -c main_test.go
exists -exec main.test$GOEXE
go clean
! exists main.test$GOEXE

# case2: test module-named test file
! exists a.b.c.test$GOEXE
go test -c
exists -exec a.b.c.test$GOEXE
go clean
! exists a.b.c.test$GOEXE

# case3: test directory-based test file
env GO111MODULE=off

! exists src.test$GOEXE
go test -c
exists -exec src.test$GOEXE
go clean
! exists src.test$GOEXE
```

----------------------------------------

TITLE: Main Package with Crypto Import in Go
DESCRIPTION: Defines a simple main package that imports the crypto/sha256 package, used for testing FIPS 140 builds.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fipssnap.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package main
import _ "crypto/sha256"
func main() {
}
```

----------------------------------------

TITLE: Module Declaration for rsc.io/badzip
DESCRIPTION: Simple module declaration file specifying the module name rsc.io/badzip
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badzip_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module rsc.io/badzip
```

----------------------------------------

TITLE: Defining Go Module for gccgo Compatibility Test
DESCRIPTION: This snippet defines a minimal Go module file (go.mod) for the test project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_m.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module m
```

----------------------------------------

TITLE: Defining Go Module for Syntax Error Test
DESCRIPTION: This snippet defines a Go module named 'syntaxerror' with Go version 1.16. It's used in the syntax error testing scenario.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_syntax_error_says_fail.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module syntaxerror

go 1.16
```

----------------------------------------

TITLE: Defining root module
DESCRIPTION: Defines the main module for testing import behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Testing Quote Functions in Go
DESCRIPTION: Test suite for the quote package functions. Each test verifies that the corresponding function returns the expected string. The tests cover Hello(), Glass(), and Go() functions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180214005133-e7a685a342c0.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package quote

import "testing"

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory. Share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}
```

----------------------------------------

TITLE: Implementing Main Package with Embedded File in Go
DESCRIPTION: This Go code defines the main package, imports the embed package and a local package, and uses the go:embed directive to embed a file into a string variable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_ignore_leading_bom.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
﻿package main

import (
	_ "embed"

	"m/hello"
)

//go:embed file
var s string
```

----------------------------------------

TITLE: Preventing Transitive Internal Leakage via Direct Dependency
DESCRIPTION: In the `golang.org/notx` module context, attempts to get and build the `./baddep` package. `./baddep` imports `golang.org/notx/useinternal` which does *not* exist, but the setup implies a test against incorrect internal usage. The expected build failure (`! go build`) and error message confirm that importing internal packages across module boundaries (`golang.org/x/internal` from `golang.org/notx`) is disallowed, even transitively.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_7

LANGUAGE: shell
CODE:
```
# And transitive dependencies still should not leak.
go get ./baddep
! go build ./baddep
stderr golang.org[/\\]notx[/\\]useinternal
stderr 'use of internal package golang.org/x/.* not allowed'
```

----------------------------------------

TITLE: Checking Out Main Branch and Verifying References
DESCRIPTION: Returns to the main branch and displays all tags and branch references, then compares the output with expected reference list.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
git checkout main

git show-ref --tags --heads
cmp stdout .git-refs
```

----------------------------------------

TITLE: Configurable PNG Compression Levels - image/png Package - Go
DESCRIPTION: Adds constants, types, and fields for configuring PNG encoding compression. New compression level constants, a CompressionLevel int type, and the CompressionLevel field within Encoder struct facilitate custom compression selection. The Encode method on Encoder allows encoding an image to a writer with the given compression setting. Prerequisites: importing image/png, understanding io.Writer, and image.Image interfaces.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_14

LANGUAGE: Go
CODE:
```
const BestCompression = -3
const BestCompression CompressionLevel
const BestSpeed = -2
const BestSpeed CompressionLevel
const DefaultCompression = 0
const DefaultCompression CompressionLevel
const NoCompression = -1
const NoCompression CompressionLevel
type CompressionLevel int
type Encoder struct {
    CompressionLevel CompressionLevel
    // ... other fields
}
method (*Encoder) Encode(io.Writer, image.Image) error
```

----------------------------------------

TITLE: Implementing Quote Functions in Go
DESCRIPTION: Defines four functions (Hello, Glass, Go, Opt) that return different quotes. The Hello function uses an external sampler package while others return hardcoded strings.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180214005840-23179ee8a569.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package quote

import "rsc.io/sampler"

func Hello() string {
	return sampler.Hello()
}

func Glass() string {
	return "I can eat glass and it doesn't hurt me."
}

func Go() string {
	return "Don't communicate by sharing memory, share memory by communicating."
}

func Opt() string {
	return "If a program is too slow, it must have a loop."
}
```

----------------------------------------

TITLE: Configuring go.mod for Auxiliary Module with Tool Dependency - Go
DESCRIPTION: This snippet features a go.mod file for a secondary module that specifies its own module path, Go version, a required tool (dependency/cmd/baz), a local dependency replacement path, and standard require entries. This enables the module to directly invoke external tools and override dependencies locally.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_5

LANGUAGE: ini
CODE:
```
module example.com/other\n\ngo 1.24\n\ntool example.com/dependency/cmd/baz\n\nreplace example.com/dependency => ../dependency\n\nrequire example.com/dependency v1.0.0\n
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: This snippet shows the contents of a go.mod file defining a module named 'example' with Go version 1.18.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_nowork.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example
go 1.18
```

----------------------------------------

TITLE: Go Package Import for Module Use
DESCRIPTION: The use.go file contains a Go package 'use' that imports the module 'rsc.io/quote'. The import is done anonymously to ensure dependencies are correctly initialized.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_replace_dir.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- use.go --
package use

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Module P Configuration
DESCRIPTION: Module definition for example.com/p, which is a dependency of module A.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
module example.com/p

go 1.21
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: Defines a Go module named 'xtestonly' using Go version 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_xtestonly_works.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module xtestonly

go 1.16
```

----------------------------------------

TITLE: Signing and Cipher Suite Constants and Struct Fields in crypto/tls - Go
DESCRIPTION: These constants identify ECDSA, PKCS1, PSS signature schemes and TLS cipher suites, enabling configuration of TLS connections for supported algorithms and key exchange. SignatureScheme denotes algorithm identifier for certificate and handshake use; CurveID (such as X25519) identifies elliptic curves. Struct fields and methods in Config, CertificateRequestInfo, ClientHelloInfo, and Conn provide customization points for certificate selection, protocol versioning, key logging, and connection management. Used in conjunction with crypto/tls APIs and dependent on compatible cryptographic primitives.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
const ECDSAWithP256AndSHA256 = 1027
const ECDSAWithP384AndSHA384 = 1283
const ECDSAWithP521AndSHA512 = 1539
const PKCS1WithSHA1 = 513
const PKCS1WithSHA256 = 1025
const PKCS1WithSHA384 = 1281
const PKCS1WithSHA512 = 1537
const PSSWithSHA256 = 2052
const PSSWithSHA384 = 2053
const PSSWithSHA512 = 2054
const TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = 49187
const TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 = 52393
const TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = 49191
const TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305 = 52392
const TLS_RSA_WITH_AES_128_CBC_SHA256 = 60
const X25519 = 29
```

LANGUAGE: Go
CODE:
```
const ECDSAWithP256AndSHA256 SignatureScheme
const ECDSAWithP384AndSHA384 SignatureScheme
const ECDSAWithP521AndSHA512 SignatureScheme
const PKCS1WithSHA1 SignatureScheme
const PKCS1WithSHA256 SignatureScheme
const PKCS1WithSHA384 SignatureScheme
const PKCS1WithSHA512 SignatureScheme
const PSSWithSHA256 SignatureScheme
const PSSWithSHA384 SignatureScheme
const PSSWithSHA512 SignatureScheme
```

LANGUAGE: Go
CODE:
```
const TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 uint16
const TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 uint16
const TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 uint16
const TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305 uint16
const TLS_RSA_WITH_AES_128_CBC_SHA256 uint16
const X25519 CurveID
```

LANGUAGE: Go
CODE:
```
method (*Config) Clone() *Config
method (*Conn) CloseWrite() error
```

LANGUAGE: Go
CODE:
```
type CertificateRequestInfo struct
CertificateRequestInfo.AcceptableCAs [][]uint8
CertificateRequestInfo.SignatureSchemes []SignatureScheme
```

LANGUAGE: Go
CODE:
```
type ClientHelloInfo struct
ClientHelloInfo.Conn net.Conn
ClientHelloInfo.SignatureSchemes []SignatureScheme
ClientHelloInfo.SupportedProtos []string
ClientHelloInfo.SupportedVersions []uint16
```

LANGUAGE: Go
CODE:
```
type Config struct
Config.GetClientCertificate func(*CertificateRequestInfo) (*Certificate, error)
Config.GetConfigForClient func(*ClientHelloInfo) (*Config, error)
Config.KeyLogWriter io.Writer
Config.VerifyPeerCertificate func([][]uint8, [][]*x509.Certificate) error
```

LANGUAGE: Go
CODE:
```
type SignatureScheme uint16
```

----------------------------------------

TITLE: Testing Version Listing with Legacy Modules
DESCRIPTION: Tests that +incompatible versions are still listed when the latest compatible version does not have a go.mod file, as they might reflect the author's intent.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_7

LANGUAGE: shell
CODE:
```
go list -versions -m github.com/rsc/legacytest
stdout '^github.com/rsc/legacytest v1\.0\.0 v1\.1\.0-pre v1\.2\.0 v2\.0\.0\+incompatible'
```

----------------------------------------

TITLE: Package Usage Example
DESCRIPTION: Go file demonstrating blank import of rsc.io/quote package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_readonly.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package use

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Non-Main Package Pkg2
DESCRIPTION: Second non-main package declaration for testing build behavior with non-executable packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_multi_main.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package pkg2
```

----------------------------------------

TITLE: Testing Go Version Request with go@1.22.1
DESCRIPTION: Tests how 'go get go@1.22.1' uses the exact version 1.22.1 and switches toolchains when GOTOOLCHAIN=auto is set.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_7

LANGUAGE: shell
CODE:
```
# go get go@1.22.1 should use 1.22.1 exactly, not a later release.
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get go@1.22.1
stderr '^go: updating go.mod requires go >= 1.22.1 \(running go 1.21; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp go.mod.new go.mod
go get go@1.22.1
stderr '^go: updating go.mod requires go >= 1.22.1; switching to go1.22.9$'
stderr '^go: upgraded go 1.1 => 1.22.1$'
! stderr '^go: added toolchain$'
```

----------------------------------------

TITLE: Module Definitions for Dependent Packages
DESCRIPTION: These go.mod files define modules for the dependent packages 'w', 'x', 'y', and 'z'. They include various module declarations and requirements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module w
```

LANGUAGE: go
CODE:
```
module x
require w.1 v1.1.0
require z.1 v1.1.0
```

LANGUAGE: go
CODE:
```
module y
require z.1 v1.2.0
```

LANGUAGE: go
CODE:
```
module z
```

----------------------------------------

TITLE: Main Package Importing Dependencies (Go)
DESCRIPTION: Defines the main package that imports the 'example.net/a' package, triggering the dependency chain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue47979.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
package issue

import _ "example.net/a"
```

----------------------------------------

TITLE: Using Go 1.17 Feature: Slice to Array Pointer Conversion
DESCRIPTION: This Go file demonstrates the use of a Go 1.17 feature: converting a slice to an array pointer.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package need117

func init() {
		 s := make([]byte, 4)
		 _ = (*[4]byte)(s)
}
```

----------------------------------------

TITLE: Updating Dependency and Go Version Simultaneously
DESCRIPTION: This snippet shows how to update both a dependency version and the Go version in a single command. It updates example.com/a to v1.0.1 and the Go version to 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_old.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go get example.com/a@v1.0.1 go@1.16
go list -f '{{.Module.GoVersion}}'
```

----------------------------------------

TITLE: Dependency Module Configuration
DESCRIPTION: Module configuration file for example.com/dep using Go 1.24
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pattern_work.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module example.com/dep

go 1.24
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: A minimal Go module definition for the test package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cov.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module test
```

----------------------------------------

TITLE: Confirming GOWORK Environment Variable in Source Directory
DESCRIPTION: This snippet changes to the src directory and confirms that the GOWORK environment variable is set to 'go.work'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_env.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
cd src
go env GOWORK
stdout 'go.work'
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module definition file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue47650.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example

go 1.20
```

----------------------------------------

TITLE: Test Package with Embedded Files
DESCRIPTION: Test file demonstrating embedded file usage in test packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_embed.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package a

import _ "embed"

//go:embed subdir/test/embed.txt
var subderTest string
```

----------------------------------------

TITLE: Testing Go Module Command Failure States with Missing Dependencies
DESCRIPTION: This script tests how 'go mod tidy' and 'go mod vendor' handle missing dependencies. It verifies error messages for direct and indirect dependencies that can't be found, and confirms that these commands fail without modifying go.mod or creating vendor directories when dependencies are missing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_e.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
cp go.mod go.mod.orig


# If a dependency cannot be resolved, 'go mod tidy' fails with an error message
# explaining the problem and does not update the go.mod file.
# TODO(bcmills): Ideally, with less redundancy than these error messages!

! go mod tidy

stderr '^go: example.com/untidy imports\n\texample.net/directnotfound: cannot find module providing package example.net/directnotfound: module example.net/directnotfound: reading http://.*: 404 Not Found$'

stderr '^go: example.com/untidy imports\n\texample.net/m imports\n\texample.net/indirectnotfound: cannot find module providing package example.net/indirectnotfound: module example.net/indirectnotfound: reading http://.*: 404 Not Found$'

stderr '^go: example.com/untidy tested by\n\texample.com/untidy.test imports\n\texample.net/directtestnotfound: cannot find module providing package example.net/directtestnotfound: module example.net/directtestnotfound: reading http://.*: 404 Not Found$'

stderr '^go: example.com/untidy imports\n\texample.net/m tested by\n\texample.net/m.test imports\n\texample.net/indirecttestnotfound: cannot find module providing package example.net/indirecttestnotfound: module example.net/indirecttestnotfound: reading http://.*: 404 Not Found$'

cmp go.mod.orig go.mod


# If a dependency cannot be resolved, 'go mod vendor' fails with an error message
# explaining the problem, does not update the go.mod file, and does not create
# the vendor directory.

! go mod vendor

stderr '^go: example.com/untidy imports\n\texample.net/directnotfound: no required module provides package example.net/directnotfound; to add it:\n\tgo get example.net/directnotfound$'

stderr '^go: example.com/untidy imports\n\texample.net/m: module example.net/m provides package example.net/m and is replaced but not required; to add it:\n\tgo get example.net/m@v0.1.0$'

stderr '^go: example.com/untidy tested by\n\texample.com/untidy.test imports\n\texample.net/directtestnotfound: no required module provides package example.net/directtestnotfound; to add it:\n\tgo get example.net/directtestnotfound$'

! stderr 'indirecttestnotfound'  # Vendor prunes test dependencies.

cmp go.mod.orig go.mod
! exists vendor
```

----------------------------------------

TITLE: Testing Go Packages with Directory Context in Shell
DESCRIPTION: Performs `go test` with the `-C` option to specify directories, illustrating potential errors if the `-C` flag is not in the correct position. It requires Go installed with testable packages available.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/chdir.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go test -C ../strings -n
stderr 'strings\.test'
! go test -n -C ../strings
stderr '^invalid value "../strings" for flag -C: -C flag must be first flag on command line$'
```

----------------------------------------

TITLE: Defining Linux-specific Package q
DESCRIPTION: Creates a Linux-specific implementation of package 'q'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_all_gobuild.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
package q
```

----------------------------------------

TITLE: Implementing Version Printing Function in Go Module
DESCRIPTION: This snippet shows the implementation of the PrintVersion function in the 'q' module (version 1.1.0). It demonstrates how different versions of a module can have different implementations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune_all.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package q

import _ "example.com/w"
import _ "example.com/z"

import "fmt"

func PrintVersion() {
	fmt.Println("version 1.1.0")
}
```

----------------------------------------

TITLE: Go Module File
DESCRIPTION: A Go module definition file specifying the module name 'm' and Go version 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_output.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Defining Go Module Path and Version (gomod)
DESCRIPTION: This snippet defines a Go module named `example.com/retract/self/prev`. It specifies that the module requires Go version 1.15 or later. This is the standard `go.mod` file format used by Go's module system.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prev_v1.1.0.txt#2025-04-22_snippet_0

LANGUAGE: gomod
CODE:
```
-- .mod --
module example.com/retract/self/prev

go 1.15
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: Defines a Go module named 'example.com' with Go version 1.13 in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_major.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module example.com
go 1.13
```

----------------------------------------

TITLE: Comparing Go Module Files
DESCRIPTION: This snippet copies Go module files and compares the contents before and after using 'go mod tidy', which is necessary for syncing module dependencies. It checks if the 'go.mod' file correctly enumerates modules after changes. Key tools include 'cp', 'go list', and 'cmp'. It highlights the steps to ensure packages are properly imported, reflecting accurate dependency management.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_new_import.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
cp go.mod go.mod.old
cp lazy.go lazy.go.old
go mod tidy
cmp go.mod go.mod.old
```

----------------------------------------

TITLE: Module Definition in Go
DESCRIPTION: Basic Go module definition specifying Go version 1.21.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/ws2_32.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.21
```

----------------------------------------

TITLE: CGO Import Test File
DESCRIPTION: Go source file that imports the C package and declares a variable of C.int type to test CGO functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_cgo_excluded.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package cgotest

import "C"

var _ C.int
```

----------------------------------------

TITLE: Calling SWIG-Wrapped C Functions from Go (Go)
DESCRIPTION: This Go program (`main.go`) serves as the main application logic. It imports the standard `fmt` package and calls the C `gcd` function and interacts with the C global variable `Foo` using the Go wrapper functions generated by SWIG (e.g., `Gcd`, `GetFoo`, `SetFoo`). It demonstrates calling the C function, retrieving the global variable's value, modifying it, and verifying the change.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_swig.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- main.go --
package main

import (
	"fmt"
)

func main() {
	// Call our gcd() function
	x := 42
	y := 105
	g := Gcd(x, y)
	fmt.Println("The gcd of", x, "and", y, "is", g)

	// Manipulate the Foo global variable

	// Output its current value
	fmt.Println("Foo =", GetFoo())

	// Change its value
	SetFoo(3.1415926)

	// See if the change took effect
	fmt.Println("Foo =", GetFoo())
}

```

----------------------------------------

TITLE: Go Module JSON Structure
DESCRIPTION: Shows the JSON representation of a module file as produced by 'go mod edit -json'. It contains the module path, Go version, requirements, exclusions, replacements and retractions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_12

LANGUAGE: json
CODE:
```
{
	"Module": {
		"Path": "x.x/y/z"
	},
	"Go": "$goversion",
	"Require": [
		{
			"Path": "x.3",
			"Version": "v1.99.0"
		}
	],
	"Exclude": [
		{
			"Path": "x.1",
			"Version": "v1.2.0"
		}
	],
	"Replace": [
		{
			"Old": {
				"Path": "x.1",
				"Version": "v1.4.0"
			},
			"New": {
				"Path": "../z"
			}
		}
	],
	"Retract": [
		{
			"Low": "v1.6.0",
			"High": "v1.6.0"
		},
		{
			"Low": "v1.3.0",
			"High": "v1.4.0"
		}
	],
	"Tool": null
}
```

----------------------------------------

TITLE: Defining Go Module and Package
DESCRIPTION: Creates a minimal Go module and package structure for the test, including a go.mod file and a Go source file importing the test module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo_prefix.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
-- go.mod --
module x

go 1.12
-- x.go --
package x

import _ "vcs-test.golang.org/prefixtagtests.git/sub"
```

----------------------------------------

TITLE: Testing Deadline Within a Minute in Go
DESCRIPTION: This function tests that t.Deadline() returns a non-zero deadline within one minute of the test start time when a deadline is set. It verifies that the deadline is after the current time but not more than a minute in the future.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_deadline.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
func TestDeadlineWithinMinute(t *testing.T) {
	now := time.Now()
	d, ok := t.Deadline()
	if !ok || d.IsZero() {
		t.Fatalf("t.Deadline() = %v, %v; want nonzero deadline", d, ok)
	}
	if !d.After(now) {
		t.Fatalf("t.Deadline() = %v; want after start of test (%v)", d, now)
	}
	if d.Sub(now) > time.Minute {
		t.Fatalf("t.Deadline() = %v; want within one minute of start of test (%v)", d, now)
	}
}
```

----------------------------------------

TITLE: Testing Go List Command for Darwin Environment
DESCRIPTION: Sets the environment variable for Darwin (macOS) and runs 'go list all' command to verify package building on Darwin.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_all_gobuild.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
env GOOS=darwin
go list all
```

----------------------------------------

TITLE: Listing Dependencies with go list -deps -test
DESCRIPTION: Uses 'go list -deps -test' to list transitive imports of tests and non-tests in the main module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_2

LANGUAGE: Bash
CODE:
```
go list -f $PKGFMT -deps -test ./...
```

----------------------------------------

TITLE: Declaring a Go Module Path Using go.mod - Go
DESCRIPTION: Defines the module path for a Go project using go.mod. The 'module' directive assigns the module's import path, which is essential for dependency management via Go modules. There are no other directives in this snippet; dependencies and versioning are controlled outside this file. Expected usage is for projects using 'go mod' commands, and there are no parameters or external dependencies required.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_incompatible_v2.0.0+incompatible.txt#2025-04-22_snippet_0

LANGUAGE: Plain Text
CODE:
```
module example.com/retract/incompatible
```

----------------------------------------

TITLE: Running Specific Go Tests with Pattern Matching
DESCRIPTION: Shell commands to run Go tests matching 'Test' pattern and verify expected stdout/stderr outputs. Ensures tests run successfully without 'no tests to run' messages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_tests.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -run Test standalone_test.go
! stdout '^ok.*\[no tests to run\]'
! stderr '^ok.*\[no tests to run\]'
stdout '^ok'
```

----------------------------------------

TITLE: Go Workspace Setup Commands
DESCRIPTION: Commands to initialize a Go workspace and add modules to it. Includes workspace initialization and module addition.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_goproxy_off.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go work init
go work use . ./sub
```

----------------------------------------

TITLE: Initial Go Module File
DESCRIPTION: The initial go.mod file for the test, which defines a module named 'example' with Go version 1.17. It doesn't yet contain the required dependency that will be added by 'go run -mod=mod'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_issue52331.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example

go 1.17
```

----------------------------------------

TITLE: Defining Go Module 'a' (Go Module File)
DESCRIPTION: This snippet defines the content of the `a/go.mod` file. It declares a Go module named 'a' and specifies that it uses Go language version 1.17. This file establishes the module context for the test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_command_line_arguments.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- a/go.mod --
module a
go 1.17
```

----------------------------------------

TITLE: Defining Go Module with External Dependency
DESCRIPTION: This snippet defines a Go module named 'testrace' with a dependency on 'rsc.io/sampler'. It specifies Go version 1.18 as the minimum required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_tag.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module testrace

go 1.18

require rsc.io/sampler v1.0.0
```

----------------------------------------

TITLE: Go Module Definition with Retracted Dependency
DESCRIPTION: A go.mod file declaring module 'use' with Go 1.19 as the target version, requiring a dependency on 'example.com/retract/noupgrade' at version v1.0.0, which is a retracted version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_noupgrade.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module use

go 1.19

require example.com/retract/noupgrade v1.0.0
```

----------------------------------------

TITLE: Basic Golang Package Example for Dependency Import
DESCRIPTION: This Go source file within the `usex` package imports the `example.net/x` module, serving as a basic example of dependency management in Go.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_consistency.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package usex

import _ "example.net/x"
```

----------------------------------------

TITLE: Main Package Imports
DESCRIPTION: Main package importing dependent modules a, b, c, and d.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_artifact.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package m

import (
	_ "example.com/a"
	_ "example.com/b"
	_ "example.com/c"
	_ "example.com/d"
)
```

----------------------------------------

TITLE: Testing 'go test -c' Behavior with Shell Script
DESCRIPTION: This shell script tests the `go test -c` command in the Go toolchain. It installs helper utilities, builds test binaries for the 'errors' package with different flags (`-test.bench=XXX`, `-o`), compares the generated binaries using `cmp`, and verifies that the modification times (`mtime`) of the test binaries are updated correctly even when they are rebuilt from cache using helper commands `now`, `mtime`, and `before` to manage and compare timestamps.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue6480.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Install some commands to compare mtimes
env GOBIN=$WORK/tmp/bin
go install m/now m/mtime m/before

# Initial builds
go test -c -test.bench=XXX errors
go test -c -o errors2.test errors
cmp errors.test$GOEXE errors2.test # // errors2.test has no exeSuffix because -o above doesn't have it

# Check errors.test mtime is updated
exec $GOBIN/now
cp stdout start_time.txt
go test -x -c -test.bench=XXX errors
! stderr '[\/]link|gccgo' # make sure up-to-date test binary is not relinked
exec $GOBIN/mtime errors.test$GOEXE
cp stdout errors1_mod_time.txt
exec $GOBIN/before start_time.txt errors1_mod_time.txt
rm start_time.txt errors1_mod_time.txt

# Check errors2.test mtime is updated
exec $GOBIN/now
cp stdout start_time.txt
go test -x -c -o errors2.test errors
! stderr '[\/]link|gccgo' # make sure up-to-date test binary is not relinked
exec $GOBIN/mtime errors2.test
cp stdout errors2_mod_time.txt
exec $GOBIN/before start_time.txt errors2_mod_time.txt
```

----------------------------------------

TITLE: Go module definition with external dependency
DESCRIPTION: A basic go.mod file defining a module named 'mymodule' with a dependency on rsc.io/quote v1.5.2.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_why.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module mymodule
require rsc.io/quote v1.5.2
```

----------------------------------------

TITLE: Defining a Function in Go Package (Go)
DESCRIPTION: This snippet defines a Go package named 'x' with a single function F and imports the 'sync/atomic' package (for side effects only). It demonstrates how to create a simple Go source file with dummy code suitable for coverage and race detector testing. No dependencies are required other than Go's standard library, and no input or output is processed by the function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_atomic_pkgall.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package x

import _ "sync/atomic"

func F() {}

```

----------------------------------------

TITLE: Default Go Implementation for Disabled Fieldtrack
DESCRIPTION: A Go file with a build constraint that only compiles when the fieldtrack experiment is disabled. It outputs a message indicating that fieldtrack is off.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_tag_goexperiment.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// +build !goexperiment.fieldtrack

package main

func main() {
	println("fieldtrack off")
}
```

----------------------------------------

TITLE: Defining Local Replacement Module in Go
DESCRIPTION: Defines a local replacement module for not-rsc.io/quote/v3.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
module not-rsc.io/quote/v3
```

----------------------------------------

TITLE: TLS constants for Go crypto/tls package
DESCRIPTION: Constants defined in the crypto/tls package for TLS 1.3 cipher suites and version information.
SOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
const TLS_AES_128_GCM_SHA256 = 4865
const TLS_AES_128_GCM_SHA256 uint16
const TLS_AES_256_GCM_SHA384 = 4866
const TLS_AES_256_GCM_SHA384 uint16
const TLS_CHACHA20_POLY1305_SHA256 = 4867
const TLS_CHACHA20_POLY1305_SHA256 uint16
const VersionTLS13 = 772
const VersionTLS13 ideal-int
```

----------------------------------------

TITLE: Testing Go Module Patch Updates
DESCRIPTION: A comprehensive test script for Go module patch version updates. Tests various scenarios including upgrading direct and indirect dependencies with @patch version query and -u=patch flag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_upgrade_patch.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
[short] skip

# Initially, we are at v1.0.0 for all dependencies.
go get
cp go.mod go.mod.orig
go list -m all
stdout '^patch.example.com/direct v1.0.0'
stdout '^patch.example.com/indirect v1.0.0'
! stdout '^patch.example.com/depofdirectpatch'

# @patch should be rejected for modules not already in the build list.
! go get patch.example.com/depofdirectpatch@patch
stderr '^go: can\'t query version "patch" of module patch.example.com/depofdirectpatch: no existing version is required$'
cmp go.mod.orig go.mod

# get -u=patch, with no arguments, should patch-update all dependencies
# of the package in the current directory, pulling in transitive dependencies
# and also patching those.
cp go.mod.orig go.mod
go get -u=patch
go list -m all
stdout '^patch.example.com/direct v1.0.1'
stdout '^patch.example.com/indirect v1.0.1'
stdout '^patch.example.com/depofdirectpatch v1.0.0'

# 'get all@patch' should patch the modules that provide packages in 'all'.
cp go.mod.orig go.mod
go get all@patch
go list -m all
stdout '^patch.example.com/direct v1.0.1'
stdout '^patch.example.com/indirect v1.0.1'
stdout '^patch.example.com/depofdirectpatch v1.0.0'

# ...but 'all@patch' should fail if any of the affected modules do not already
# have a selected version.
cp go.mod.orig go.mod
go mod edit -droprequire=patch.example.com/direct
cp go.mod go.mod.dropped
! go get all@patch
stderr '^go: all@patch: can\'t query version "patch" of module patch.example.com/direct: no existing version is required$'
cmp go.mod.dropped go.mod

# Requesting the direct dependency with -u=patch but without an explicit version
# should patch-update it and its dependencies.
cp go.mod.orig go.mod
go get -u=patch patch.example.com/direct
go list -m all
stdout '^patch.example.com/direct v1.0.1'
stdout '^patch.example.com/indirect v1.0.1'
stdout '^patch.example.com/depofdirectpatch v1.0.0'

# Requesting only the indirect dependency should not update the direct one.
cp go.mod.orig go.mod
go get -u=patch patch.example.com/indirect
go list -m all
stdout '^patch.example.com/direct v1.0.0'
stdout '^patch.example.com/indirect v1.0.1'
! stdout '^patch.example.com/depofdirectpatch'

# @patch should apply only to the specific module,
# but the result must reflect its upgraded requirements.
cp go.mod.orig go.mod
go get patch.example.com/direct@patch
go list -m all
stdout '^patch.example.com/direct v1.0.1'
stdout '^patch.example.com/indirect v1.0.0'
stdout '^patch.example.com/depofdirectpatch v1.0.0'

# An explicit @patch should override a general -u.
cp go.mod.orig go.mod
go get -u patch.example.com/direct@patch
go list -m all
stdout '^patch.example.com/direct v1.0.1'
stdout '^patch.example.com/indirect v1.1.0'
stdout '^patch.example.com/depofdirectpatch v1.0.0'

# An explicit @latest should override a general -u=patch.
cp go.mod.orig go.mod
go get -u=patch patch.example.com/direct@latest
go list -m all
stdout '^patch.example.com/direct v1.1.0'
stdout '^patch.example.com/indirect v1.0.1'
! stdout '^patch.example.com/depofdirectpatch'

# Standard library packages cannot be upgraded explicitly.
cp go.mod.orig go.mod
! go get cmd/vet@patch
stderr 'go: can\'t request explicit version "patch" of standard library package cmd/vet$'

# However, standard-library packages without explicit versions are fine.
go get -u=patch cmd/go

# We can upgrade to a new version of a module with no root package.
go get example.com/noroot@v1.0.0
go list -m all
stdout '^example.com/noroot v1.0.0$'
go get example.com/noroot@patch
go list -m all
stdout '^example.com/noroot v1.0.1$'
```

----------------------------------------

TITLE: Listing Module and Displaying Retraction using Go List
DESCRIPTION: Tests 'go list -m -retracted' to verify that retraction details are properly displayed when available for a module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
# 'go list -m -retracted' shows retraction.\ngo list -m -retracted -f '{{with .Retracted}}retracted{{end}}' example.com/retract
```

----------------------------------------

TITLE: Module A Configuration
DESCRIPTION: Module A's go.mod file specifying its dependencies
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchbound.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.net/a

go 1.16

require example.net/b v0.1.0
```

----------------------------------------

TITLE: Listing Dependencies with go list -deps
DESCRIPTION: Uses 'go list -deps' to list packages and tests in the main module along with their transitive dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_1

LANGUAGE: Bash
CODE:
```
go list -f $PKGFMT -deps ./...
```

----------------------------------------

TITLE: Module A Configuration with Quote Dependency
DESCRIPTION: Go module configuration for example.com/a that requires rsc.io/quote v1.5.2 as a dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_why_download_graph.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go 1.18

module example.com/a

require "rsc.io/quote" v1.5.2
```

----------------------------------------

TITLE: Runtime Trace API Implementation in Go
DESCRIPTION: New tracing APIs in the runtime/trace package for task and region management including context-aware tracing functions.
SOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
func NewTask(context.Context, string) (context.Context, *Task)
func StartRegion(context.Context, string) *Region
func WithRegion(context.Context, string, func())
method (*Region) End()
method (*Task) End()
type Region struct
type Task struct
```

----------------------------------------

TITLE: Defining Package 'c' Version 'v0.2.0' in Go
DESCRIPTION: This Go source file defines package 'c' with a constant `Version` set to "v0.2.0". This represents the implementation corresponding to module 'c' version 2, required by module 'b'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
-- c2/c.go --
package c

const Version = "v0.2.0"
```

----------------------------------------

TITLE: Executing Go List Command for Module Verification
DESCRIPTION: This snippet runs the 'go list -m all' command and checks the output for specific module versions. It ensures that the correct versions are selected based on the module graph.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune_all.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go list -m all
stdout 'example.com/w v1.0.0'
stdout 'example.com/q v1.1.0'
stdout 'example.com/z v1.1.0'
stdout 'example.com/x v1.0.0'
! stdout 'example.com/r'
! stdout 'example.com/y'
```

----------------------------------------

TITLE: Generating Coverage Function Profile
DESCRIPTION: Uses 'go tool cover' to generate a detailed function-level coverage report from the coverage profile file. Outputs coverage percentages for functions within the profiled packages. Requires a pre-generated coverage profile.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_nocoverpkg.txt#2025-04-22_snippet_1

LANGUAGE: Golang
CODE:
```
go tool cover -func=cov.p
```

----------------------------------------

TITLE: Main Go Module Definition
DESCRIPTION: Defines the main module with its dependencies including deprecated and undeprecated modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecated.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.17

require (
	example.com/deprecated/a v1.0.0
	example.com/undeprecated v1.0.0
	local v0.0.0
)

replace local v0.0.0 => ./local
```

----------------------------------------

TITLE: Importing Nested Dependency Package - Go
DESCRIPTION: This Go source snippet is the package declaration for a file named other.go, which defines the package other and imports a nested package (example.com/retract/ambiguous/nested) using a blank identifier. Importing via blank identifier ensures that the imported package's init functions execute even if its exported names are not directly referenced. This can be used to trigger side effects such as registration or initialization routines.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_ambiguous_other_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package other

import _ \"example.com/retract/ambiguous/nested\"
```

----------------------------------------

TITLE: Managing Go Toolchain Versions with go get
DESCRIPTION: This snippet demonstrates adding, removing, and switching between different Go toolchain versions using the 'go get' command. It also shows how to verify the changes in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go get toolchain@go1.22.1
go get toolchain@none
go get toolchain@go1.22.1
```

----------------------------------------

TITLE: Explicit Module Upgrade to Resolve Conflict
DESCRIPTION: Demonstrates how to explicitly upgrade a conflicting module to resolve ambiguity.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_pkg.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go get example.net/ambiguous@v0.2.0 example.net/ambiguous/nested/pkg@v0.1.0
go list -m all
stdout '^example.net/ambiguous/nested v0.1.0$'
stdout '^example.net/ambiguous v0.2.0$'
```

----------------------------------------

TITLE: Defining Go Module with Version Retractions using go.mod
DESCRIPTION: This `go.mod` file defines the module `example.com/retract/self/prev` compatible with Go 1.15. It utilizes the `retract` directive to mark versions `v1.0.0-bad` and `v1.9.0` as retracted, making them unavailable for dependency resolution while allowing older versions like v1.1.0 (mentioned in context) to remain usable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prev_v1.9.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/retract/self/prev

go 1.15

retract v1.0.0-bad // bad
retract v1.9.0 // self
```

----------------------------------------

TITLE: Building and Verifying Module Info in Binary (Shell)
DESCRIPTION: This shell snippet first builds an executable (`a.exe`) from the `a.go` source file using `go build`. It then uses `go version -m` to inspect the module information embedded within the compiled binary. It asserts that the main package path is reported as `command-line-arguments`, that the module `a` is listed as a dependency (`dep`), and crucially, that there is no `mod` line indicating a main module for the executable itself.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_command_line_arguments.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
[short] skip

# check that the version of command-line-arguments doesn't include a module
go build -o a.exe a.go
go version -m a.exe
stdout '^\tpath\tcommand-line-arguments$'
stdout '^\tdep\ta\t\(devel\)\t$'
! stdout mod[^e]
```

----------------------------------------

TITLE: Module Definition for Dependency 'a'
DESCRIPTION: The `go.mod` file for module `a`. It requires module `b` at version v0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_6

LANGUAGE: gomod
CODE:
```
-- a1/go.mod --
module a

go 1.17

require b v0.1.0
```

----------------------------------------

TITLE: Importing a Domain Root Package
DESCRIPTION: A Go source file that imports a package from a domain root path (example.com). This tests that Go's module system can correctly resolve imports that are domain roots without subpaths.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_domain_root.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package x
import _ "example.com"
```

----------------------------------------

TITLE: Implementing Standard Go Test Function
DESCRIPTION: Defines a regular test function that writes to stdout. This test will be executed normally during the test run, demonstrating the difference between standard tests and examples.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_no_run_example.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package pkg

import (
	"os"
	"testing"
)

func TestBuilt(t *testing.T) {
	os.Stdout.Write([]byte("A normal test was executed.\n"))
}
```

----------------------------------------

TITLE: Upgrading Module and Verifying Checksum
DESCRIPTION: Upgrades a module and checks if the checksum for the new version is added to go.sum.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go get example.com/upgrade@v0.0.2
grep '^rsc.io/quote v1.5.2 ' go.sum
```

----------------------------------------

TITLE: Checking Environment Variable in Go Subprocess
DESCRIPTION: This Go script checks if the TERM environment variable is set. It exits with status 1 if TERM is not empty, demonstrating that 'go run' should not pass this variable to the subprocess.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_issue11709.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package main

import "os"

func main() {
	if os.Getenv("TERM") != "" {
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: Running Go Test in Dry Run Mode
DESCRIPTION: Shell command demonstrating how to execute go test with the -n flag for a dry run on a specific test file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_minus_n.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -n x_test.go
```

----------------------------------------

TITLE: Example Package with Embed Directive
DESCRIPTION: Demonstrates usage of go:embed directive to embed the source file content into a string variable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_export_embed.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package example

import _ "embed"

//go:embed example.go
var src string
```

----------------------------------------

TITLE: Defining Go Modules with Replacement
DESCRIPTION: This Go module definition replaces the module 'rsc.io/quote' version 1.5.2 with version 1.5.1. Key dependencies are declared in the go.mod file, and a replacement directive ensures the desired version is used.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_replace_dir.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
-- go.mod --
module example.com/quoter

require rsc.io/quote v1.5.2

replace rsc.io/quote => rsc.io/quote v1.5.1
```

----------------------------------------

TITLE: Minimal Go Program
DESCRIPTION: Simple Go program with empty main function for testing build configurations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiler_output.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Go Module Configuration
DESCRIPTION: Module definition file (go.mod) specifying Go version 1.18 and module name 'foo'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_missing_module.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
go 1.18
module foo
```

----------------------------------------

TITLE: Go Module Definition with Version Retraction
DESCRIPTION: Defines a Go module with a retracted version v1.0.0. The retract directive indicates that this version should not be used.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/retract-pseudo.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/git/retract-pseudo.git

go 1.16

retract v1.0.0
```

----------------------------------------

TITLE: Go Workspace Configuration File
DESCRIPTION: This snippet shows the content of a Go workspace configuration file (go.work) with module dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
go $goversion

use (
	./a
	./b
)
```

----------------------------------------

TITLE: Referencing Go Toolchain Module Path in go.mod
DESCRIPTION: Specifies the module path `golang.org/toolchain`, presented as the content of a `go.mod` file snippet. While a full `go.mod` file usually starts with `module ...`, this line alone indicates the identification or reference to the toolchain module path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.9.linux-amd64.txt#2025-04-22_snippet_2

LANGUAGE: gomod
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: Module Definition in go.mod File
DESCRIPTION: Defines the module name in the go.mod file for the Go toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-arm64.txt#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Configuring Go Module Definition
DESCRIPTION: Contains the go.mod file content that defines the module path for the toolchain package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-arm.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Package Y with External Import
DESCRIPTION: Package 'y' importing package 'x' using bare import path
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_resolve.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package y

import _ "x"
```

----------------------------------------

TITLE: Module A Source Code
DESCRIPTION: Source code for module A that imports rsc.io/quote package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue54372.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package a
import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Defining Nested Module Replacements in go.mod - Go
DESCRIPTION: This go.mod variant sets up two replacement rules for module m: all example.com/deprecated/a dependencies are redirected to example.com/deprecated/b v1.0.0; additionally, example.com/deprecated/b v1.9.0 is replaced with a local './b' directory. Designed to test if latest-version content is inferred from the replacement. Assumes Go 1.17 and relevant local and remote modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_deprecated_replace.txt#2025-04-22_snippet_4

LANGUAGE: go.mod
CODE:
```
module m

go 1.17

require example.com/deprecated/a v1.0.0

replace (
	example.com/deprecated/a => example.com/deprecated/b v1.0.0
	example.com/deprecated/b v1.9.0 => ./b
)
```

----------------------------------------

TITLE: Adding new types and methods to go/types package
DESCRIPTION: This snippet introduces several new types and methods to the go/types package, including TypeParam, Union, and Instance types, along with their associated methods.
SOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
pkg go/types, type TypeParam struct
pkg go/types, type Union struct
pkg go/types, type Instance struct
pkg go/types, type Instance struct, Type Type
pkg go/types, type Instance struct, TypeArgs *TypeList
pkg go/types, method (*TypeParam) Constraint() Type
pkg go/types, method (*TypeParam) Index() int
pkg go/types, method (*TypeParam) Obj() *TypeName
pkg go/types, method (*TypeParam) SetConstraint(Type)
pkg go/types, method (*TypeParam) String() string
pkg go/types, method (*TypeParam) Underlying() Type
```

----------------------------------------

TITLE: Configuring Go Module in go.mod
DESCRIPTION: The go.mod file that defines the module name as "rsc.io/quote" and specifies a dependency on "rsc.io/sampler" version 1.3.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.3-pre1.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module "rsc.io/quote"

require "rsc.io/sampler" v1.3.0
```

----------------------------------------

TITLE: Basic Go Test Implementation
DESCRIPTION: Implements a basic test function TestFoo in the foo package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_overlay.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package foo

import "testing"

func TestFoo(t *testing.T) { }
```

----------------------------------------

TITLE: Downloading Go Modules Directly from GitHub
DESCRIPTION: This snippet sets up the environment to download Go modules directly from GitHub. It sets GOSUMDB to 'sum.golang.org' and GOPROXY to 'direct', then uses 'go get' to download a specific version of a module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_golang.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
env GOSUMDB=sum.golang.org
env GOPROXY=direct

go get rsc.io/quote@v1.5.2
cp go.sum saved.sum
```

----------------------------------------

TITLE: Declaring a Package-Level Constant in Go
DESCRIPTION: This snippet defines a package named 'pseudoupgrade' and declares a single package-level constant 'X' with the value 1. It requires the Go programming language with a suitable Go workspace. The constant can be accessed as 'pseudoupgrade.X' from other Go code, and is integer-typed with no parameters or side effects. This minimalist pattern is often used to expose primitives or configuration in Go packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_pseudoupgrade_v0.1.1-0.20190429073117-b5426c86b553.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package pseudoupgrade\n\nconst X = 1
```

----------------------------------------

TITLE: Printing Version Information in Go
DESCRIPTION: This code snippet serves as the main entry point for a Go application, printing the version of the module to the console. It requires importing the "fmt" package to handle output operations. The purpose is to demonstrate module version management and output in a terminal.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_undeprecated_v1.0.1.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package main

import "fmt"

func main() { fmt.Println("a@v1.0.1") }
```

----------------------------------------

TITLE: Go Module Definition for Quote Package
DESCRIPTION: Module definition file (go.mod) for the rsc.io/quote/v2 package, specifying the module name and its dependency on rsc.io/sampler v1.3.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v2_v2.0.1.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
module rsc.io/quote/v2

require rsc.io/sampler v1.3.0
```

----------------------------------------

TITLE: Local Quote Module Definition
DESCRIPTION: Go module file for the local implementation of rsc.io/quote/v3 which specifies its module name and dependency on rsc.io/sampler.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module rsc.io/quote/v3

require rsc.io/sampler v1.3.0
```

----------------------------------------

TITLE: Testing Go Module Path Changes
DESCRIPTION: Tests changing a module's path using 'go mod edit -module', which updates the module directive in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
# go mod edit -module
cd $WORK/m
go mod init a.a/b/c
go mod edit -module x.x/y/z
cmpenv go.mod go.mod.edit
```

----------------------------------------

TITLE: Module Declaration for new/v2
DESCRIPTION: Declares a Go module named 'new/v2'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_legacy_mod.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module "new/v2"
```

----------------------------------------

TITLE: Testing Quote Functions in Go
DESCRIPTION: Contains unit tests for the three functions in the 'quote' package. Each test verifies that the corresponding function returns the expected string value, using Go's testing package to assert the correct output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.2.1.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package quote

import "testing"

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory, share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}
```

----------------------------------------

TITLE: Defining Constants and Types for crypto/tls and crypto/x509 Packages in Go
DESCRIPTION: This snippet defines constants and types related to TLS and X509 cryptography, including signature schemes, certificate validation reasons, and public key algorithms.
SOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
const ECDSAWithSHA1 = 515
const ECDSAWithSHA1 SignatureScheme

const CANotAuthorizedForExtKeyUsage = 9
const CANotAuthorizedForExtKeyUsage InvalidReason

type PublicKeyAlgorithm struct{}
func (PublicKeyAlgorithm) String() string

type Certificate struct {
    ExcludedEmailAddresses []string
    ExcludedIPRanges []*net.IPNet
    ExcludedURIDomains []string
    PermittedEmailAddresses []string
    PermittedIPRanges []*net.IPNet
    PermittedURIDomains []string
    URIs []*url.URL
}
```

----------------------------------------

TITLE: Testing Go Build Cache Behavior via Shell Commands - Shell
DESCRIPTION: This shell snippet orchestrates cache initialization, running builds to populate the Go build cache, and a series of assertions to verify cache state and command-line error handling. It uses environment variables to control GOCACHE, shell commands to run go build and go clean, and checks file system state with exists and expected error output through stderr assertions. Machine-specific caveats such as requiring GOCACHE to be an absolute path are tested. Prerequisites include a working Go installation and shell environment with required utilities (exists, go, etc.). Inputs and outputs are managed through file system side-effects and error messages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/clean_cache_n.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# We're testing cache behavior, so start with a clean GOCACHE.
env GOCACHE=$WORK/cache

# Build something so that the cache gets populates
go build main.go

# Check that cache contains directories before running
exists $GOCACHE/00

# Run go clean -cache -n and ensure that directories weren't deleted
go clean -cache -n
exists $GOCACHE/00

# Re-run go clean cache without the -n flag go ensure that directories were properly removed
go clean -cache
! exists $GOCACHE/00

! go clean -cache .
stderr 'go: clean -cache cannot be used with package arguments'

# GOCACHE must be an absolute path.
env GOCACHE=.
! go clean -cache
stderr 'go: GOCACHE is not an absolute path'

```

----------------------------------------

TITLE: Go Test Runner Implementation
DESCRIPTION: A Go program that executes Go commands with modified GOPATH environment variables. Supports operations like identity, slash replacement, uppercase, and lowercase conversions of GOPATH.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cd_gopath_different.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"os"
	"os/exec"
	"strings"
)

func main() {
	dir := os.Args[1]
	gopath := os.Args[2]
	switch os.Args[3] {
		case "IDENTITY":
		case "REPLACE_SLASH": gopath = strings.ReplaceAll(gopath, `\`, `/`)
		case "UPPER": gopath = strings.ToUpper(gopath)
		case "LOWER": gopath = strings.ToLower(gopath)
		default: fmt.Fprintln(os.Stderr, "bad op"); os.Exit(1)
	}
	cmd := exec.Command("go", os.Args[4:]...)
	cmd.Dir = dir
	cmd.Env = append(os.Environ(), "GOPATH="+gopath)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Run(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: Go Module Definition File
DESCRIPTION: Go module definition file specifying the module name and Go version requirement. This file defines that the code is a module named vcs-test.golang.org/auth/or404 and requires Go 1.13 or later.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/or404.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/auth/or404

go 1.13
```

----------------------------------------

TITLE: Defining a Go Module
DESCRIPTION: This snippet defines a Go module using the 'go.mod' file format, setting the module path to 'example.com/split-incompatible/subpkg' and specifying the Go version as 1.16. This is essential for module versioning and dependency management in Go projects. It depends on the Go toolchain to interpret the module file and manage dependencies accordingly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split-incompatible_subpkg_v0.1.0.txt#2025-04-22_snippet_1

LANGUAGE: Markdown
CODE:
```
module example.com/split-incompatible/subpkg\n\n\ngo 1.16
```

----------------------------------------

TITLE: Defining Go Module Sum File (Text)
DESCRIPTION: Defines the content of the `go.sum` file for the test scenario. It contains cryptographic hashes for specific versions of the modules (`example.com/badchain/a`, `b`, `c`) and their corresponding `go.mod` files, ensuring module authenticity and integrity during dependency resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_9

LANGUAGE: text
CODE:
```
-- go.sum --
example.com/badchain/a v1.0.0 h1:iJDLiHLmpQgr9Zrv+44UqywAE2IG6WkHnH4uG08vf+s=
example.com/badchain/a v1.0.0/go.mod h1:6/gnCYHdVrs6mUgatUYUSbuHxEY+/yWedmTggLz23EI=
example.com/badchain/a v1.1.0 h1:cPxQpsOjaIrn05yDfl4dFFgGSbjYmytLqtIIBfTsEqA=
example.com/badchain/a v1.1.0/go.mod h1:T15b2BEK+RY7h7Lr2dgS38p1pgH5/t7Kf5nQXBlcW/A=
example.com/badchain/b v1.0.0 h1:kjDVlBxpjQavYxHE7ECCyyXhfwsfhWIqvghfRgPktSA=
example.com/badchain/b v1.0.0/go.mod h1:sYsH934pMc3/A2vQZh019qrWmp4+k87l3O0VFUYqL+I=
example.com/badchain/b v1.1.0 h1:iEALV+DRN62FArnYylBR4YwCALn/hCdITvhdagHa0L4=
example.com/badchain/b v1.1.0/go.mod h1:mlCgKO7lRZ+ijwMFIBFRPCGt5r5oqCcHdhSSE0VL4uY=
example.com/badchain/c v1.0.0 h1:lOeUHQKR7SboSH7Bj6eIDWoNHaDQXI0T2GfaH2x9fNA=
example.com/badchain/c v1.0.0/go.mod h1:4U3gzno17SaQ2koSVNxITu9r60CeLSgye9y4/5LnfOE=
example.com/badchain/c v1.1.0 h1:VtTg1g7fOutWKHQf+ag04KLRpdMGSfQ9s9tagVtGW14=
example.com/badchain/c v1.1.0/go.mod h1:tyoJj5qh+qtb48sflwdVvk4R+OjPQEY2UJOoibsVLPk=
```

----------------------------------------

TITLE: Adding String method to IsolationLevel in database/sql package in Go
DESCRIPTION: Adds String method to IsolationLevel type in the database/sql package. The method returns a string.
SOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
method (IsolationLevel) String() string
```

----------------------------------------

TITLE: Generator Program in Go
DESCRIPTION: A Go program that generates a text file with 'Hello World!' content when run through go:generate. Takes output filename as a command line argument and writes the content with 0644 permissions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_workspace.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
//go:generate go run gen.go got.txt

package main

import "os"

func main() {
    outfile := os.Args[1]
    os.WriteFile(outfile, []byte("Hello World!\n"), 0644)
}
```

----------------------------------------

TITLE: Module Declaration in go.mod File
DESCRIPTION: Standard Go module declaration in go.mod file specifying the module name.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_indirect_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module patch.example.com/indirect
```

----------------------------------------

TITLE: Declaring Package in Subdirectory
DESCRIPTION: Definition of a package named 'sub' located in a subdirectory of the main module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_incompatiblewithsub_v2.0.0+incompatible.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package sub
```

----------------------------------------

TITLE: Running Go Test Coverage on Multiple Packages
DESCRIPTION: Executes `go test -count=1 -cover` on packages `a`, `b`, and `main`. Asserts via `stdout` check that the output line for the `main` package shows 'coverage: 75.0% of statements'. This verifies the coverage result when multiple packages are specified.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_single_vs_multiple.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -count=1 -cover ./a ./b ./main
stdout '^ok\s+M/main\s+\S+\s+coverage: 75.0% of statements'
```

----------------------------------------

TITLE: Module Checksum Configurations
DESCRIPTION: Various go.sum configurations for testing different scenarios with module checksums and hashes
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_readonly.txt#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h2:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
rsc.io/quote v1.5.2/go.mod h2:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=
rsc.io/sampler v1.3.0/go.mod h2:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=
```

----------------------------------------

TITLE: Defining Go Module with Indirect Import
DESCRIPTION: Defines a Go module that indirectly imports a package from example.com/retract/incompatible, demonstrating version selection differences between Go 1.16 and 1.17.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_incompatible.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
// Module m indirectly imports a package from
// example.com/retract/incompatible. Its selected version of
// that module is lower under Go 1.17 semantics than under Go 1.16.
module example.com/m

go 1.17

replace (
	example.net/lazy v0.1.0 => ./lazy
	example.net/requireincompatible v0.1.0 => ./requireincompatible
)

require example.net/lazy v0.1.0

require example.com/retract/incompatible v1.0.0 // indirect
```

----------------------------------------

TITLE: Running Go List Command to Check Test Imports
DESCRIPTION: This shell command uses 'go list' with a format flag to display test imports. The script verifies that imports from _test.go files appear in the TestImports field.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/std_vendor.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list -f '{{.TestImports}}'
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: This snippet defines a Go module named 'm' with Go version 1.14.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
module m
go 1.14
```

----------------------------------------

TITLE: Nested Package Implementation
DESCRIPTION: Implementation file for the nested package containing package declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_split.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package nested
```

----------------------------------------

TITLE: Main Package with Import
DESCRIPTION: The main package of example.com/lazy which imports example.com/a, establishing the dependency chain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package lazy

import _ "example.com/a"
```

----------------------------------------

TITLE: Setting Module Cache Write Permissions Test Script
DESCRIPTION: This shell script tests the behavior of the -modcacherw flag for Go modules which makes directories in the module cache writable while keeping files read-only. It verifies proper permissions across different operations like go get, go mod download, and go tool commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_cache_rw.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Regression test for golang.org/issue/31481.

env GO111MODULE=on

# golang.org/issue/31481: an explicit flag should make directories in the module
# cache writable in order to work around the historical inability of 'rm -rf' to
# forcibly remove files in unwritable directories.
go get -modcacherw rsc.io/quote@v1.5.2
cp $WORK/extraneous.txt $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/extraneous_file.go

# After adding an extraneous file, 'go mod verify' should fail.
! go mod verify

# However, files within those directories should still be read-only to avoid
# accidental mutations.
[!root] ! cp $WORK/extraneous.txt $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/go.mod

# If all 'go' commands ran with the flag, the system's 'rm' binary
# should be able to remove the module cache if the '-rf' flags are set.
[!GOOS:windows] [exec:rm] exec rm -rf $GOPATH/pkg/mod
[!GOOS:windows] [!exec:rm] go clean -modcache
[GOOS:windows] [exec:cmd.exe] exec cmd.exe /c rmdir /s /q $GOPATH\pkg\mod
[GOOS:windows] [!exec:cmd.exe] go clean -modcache
! exists $GOPATH/pkg/mod

# The directories in the module cache should by default be unwritable,
# so that tests and tools will not accidentally add extraneous files to them.
# Windows does not respect FILE_ATTRIBUTE_READONLY on directories, according
# to MSDN, so there we disable testing whether the directory itself is
# unwritable.
go get rsc.io/quote@latest
[!root] ! cp $WORK/extraneous.txt $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/go.mod
[!GOOS:windows] [!root] ! cp $WORK/extraneous.txt $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/extraneous_file.go
! exists $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/extraneous_file.go


# Repeat part of the test with 'go mod download' instead of 'go get' to verify
# -modcacherw is supported on 'go mod' subcommands.
go clean -modcache
go mod download -modcacherw rsc.io/quote
cp $WORK/extraneous.txt $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/extraneous_file.go
! go mod verify
[!root] ! cp $WORK/extraneous.txt $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/go.mod

# Repeat part of the test with 'go tool'
go mod edit -tool example.com/tools/cmd/hello -require example.com/tools@v1.0.0
go mod download -modcacherw example.com/tools
go clean -modcache
go tool -modcacherw hello
cp $WORK/extraneous.txt $GOPATH/pkg/mod/example.com/tools@v1.0.0/extraneous_file.go
! go mod verify
[!root] ! cp $WORK/extraneous.txt $GOPATH/pkg/mod/example.com/tools@v1.0.0/cmd/hello/hello.go
```

----------------------------------------

TITLE: Base Package Declaration
DESCRIPTION: Simple package declaration for package p used in the duplicate load test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_vendor_dup_err.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package p
```

----------------------------------------

TITLE: Overlay Directory Function
DESCRIPTION: Go file containing function g definition in package m.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_overlay.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package m

func g() {
}
```

----------------------------------------

TITLE: Go Test File with Simple Test Function
DESCRIPTION: A simple Go test file that prints a message when the test is run. This is used to verify that 'go test' works with file arguments.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_14

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"testing"
)

func Test(t *testing.T) {
	fmt.Println("stdonly was tested")
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_cycle_deps_errors.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

go 1.21
```

----------------------------------------

TITLE: Go Module File Template
DESCRIPTION: Base go.mod file used as template for testing version management scenarios. Specifies a module 'm' with Go 1.21 requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_toolchain.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.21

```

----------------------------------------

TITLE: Testing Go PGO Auto Flag with Multiple Main Packages
DESCRIPTION: This script tests how the `-pgo=auto` flag works when building multiple main packages with different PGO profiles. It verifies that packages with PGO profiles are properly preprocessed and compiled with those profiles, while packages without profiles are built without PGO.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Test go build -pgo=auto flag with multiple main packages.

go install -a -n -pgo=auto ./a ./b ./nopgo

# a/default.pgo and b/default.pgo are both preprocessed
stderr 'preprofile.*-i.*a(/|\\)default\.pgo'
stderr 'preprofile.*-i.*b(/|\\)default\.pgo'

# a and b built once each with PGO.
# Ideally we would check that the passed profile is the expected profile (here
# and for dependencies). Unfortunately there is no nice way to map the expected
# paths after preprocessing.
stderr -count=1 'compile.*-pgoprofile=.*a(/|\\)a\.go'
stderr -count=1 'compile.*-pgoprofile=.*b(/|\\)b\.go'

# nopgo should be built without PGO.
! stderr 'compile.*-pgoprofile=.*nopgo(/|\\)nopgo\.go'

# Dependencies should also be built with and without PGO.
# Here we want to match a compile action without -pgoprofile,
# by matching 3 occurrences of "compile dep.go", among which
# 2 of them have -pgoprofile (therefore one without).
stderr -count=3 'compile.*dep(/|\\)dep.go'
stderr -count=2 'compile.*-pgoprofile=.*dep(/|\\)dep\.go'

stderr -count=3 'compile.*dep2(/|\\)dep2.go'
stderr -count=2 'compile.*-pgoprofile=.*dep2(/|\\)dep2\.go'

stderr -count=3 'compile.*dep3(/|\\)dep3.go'
stderr -count=2 'compile.*-pgoprofile=.*dep3(/|\\)dep3\.go'

# check that pgo appears or not in build info as expected
stderr 'path\\ttest/a\\n.*build\\t-pgo=.*a(/|\\)default\.pgo'
stderr 'path\\ttest/b\\n.*build\\t-pgo=.*b(/|\\)default\.pgo'
! stderr 'path\\ttest/nopgo\\n.*build\\t-pgo='

# go test works the same way
go test -a -n -pgo=auto ./a ./b ./nopgo
stderr -count=1 'compile.*-pgoprofile=.*a(/|\\)a_test\.go'
stderr -count=1 'compile.*-pgoprofile=.*b(/|\\)b_test\.go'
stderr -count=2 'compile.*-pgoprofile=.*dep(/|\\)dep\.go'
! stderr 'compile.*-pgoprofile=.*nopgo(/|\\)nopgo_test\.go'

# test-only dependencies also have profiles attached
stderr -count=2 'compile.*-pgoprofile=.*testdep(/|\\)testdep\.go'
stderr -count=2 'compile.*-pgoprofile=.*testdep2(/|\\)testdep2\.go'

# go list -deps prints packages built multiple times.
go list -pgo=auto -deps ./a ./b ./nopgo
stdout 'test/dep \[test/a\]'
stdout 'test/dep \[test/b\]'
stdout 'test/dep$'
```

----------------------------------------

TITLE: Package B Main Function
DESCRIPTION: Minimal main package implementation in directory 'b'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.9.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Package A Implementation with Loop Variable Capture
DESCRIPTION: Implementation of package 'a' that contains functions with loop variable captures. Includes a direct capture in F() and an indirect capture through package 'b' in Fb().
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_shorten_pkg.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
// Copyright 2023 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

import "inlines/b"

func F() []*int {
	var s []*int
	for i := 0; i < 10; i++ {
		s = append(s, &i)
	}
	return s
}

func Fb() []*int {
	bf, _ := b.F()
	return bf
}
```

----------------------------------------

TITLE: Minimal Go program for testing module path conflict
DESCRIPTION: A minimal Go program that serves as the test subject for the module path conflict test. It contains only the required elements to be a valid Go program without additional functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_path.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main
func main() {}
```

----------------------------------------

TITLE: Go File with Tag1 Build Constraint
DESCRIPTION: A Go file (x.go) that uses the 'tag1' build constraint. This file will only be included in the build when 'tag1' is specified.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_tags.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
// +build tag1

package y
```

----------------------------------------

TITLE: Original Go Module Definition
DESCRIPTION: Initial go.mod file defining module x with dependencies on rsc.io/quote v1.5.1 and example.com/latemigrate/v2 v2.0.1
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downgrade.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module x
require (
	rsc.io/quote v1.5.1
	example.com/latemigrate/v2 v2.0.1
)
```

----------------------------------------

TITLE: Running Go Vendor Command with Expected Error
DESCRIPTION: Executes 'go mod vendor' command which attempts to copy dependencies to a vendor directory, but produces an expected error since there are no dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_nodeps.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go mod vendor
stderr '^go: no dependencies to vendor'
```

----------------------------------------

TITLE: Implementing Chatty Go Tests
DESCRIPTION: A Go test file that defines a test function which generates multiple log messages. The test creates three subtests, each logging two messages and an error, to demonstrate how verbose output is handled in Go's testing framework.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_fail.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package chatty_test

import (
	"testing"
	"fmt"
)

func TestChatty(t *testing.T) {
    for i := 0; i < 3; i++ {
        t.Run(fmt.Sprintf("sub-%d", i), func(t *testing.T) {
            for j := 0; j < 2; j++ {
                t.Logf("this is sub-%d", i)
            }
            t.Errorf("error from sub-%d", i)
        })
    }
}
```

----------------------------------------

TITLE: Implementing Quote Functions in Go
DESCRIPTION: Defines a package 'quote' with three functions: Hello() returns a greeting, Glass() returns a phrase about eating glass, and Go() returns a Go programming proverb.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/not-rsc.io_quote_v0.1.0-nomod.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

// Hello returns a greeting.
func Hello() string {
	return "Hello, world."
}

// Glass returns a useful phrase for world travelers.
func Glass() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return "I can eat glass and it doesn't hurt me."
}

// Go returns a Go proverb.
func Go() string {
	return "Don't communicate by sharing memory, share memory by communicating."
}
```

----------------------------------------

TITLE: Go Module Declaration in .mod
DESCRIPTION: Module declaration file specifying the module name and Go version requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_dotname_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/dotname

go 1.16
```

----------------------------------------

TITLE: Module A Implementation
DESCRIPTION: Main package implementation for module 'a' that imports and uses module 'b'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import "example.com/b"

func main() {
	b.B()
}
```

----------------------------------------

TITLE: Defining a Minimal Go Module (go.mod)
DESCRIPTION: A basic `go.mod` file that declares the module's path as `m`. This file establishes the context for Go module commands executed within the same directory or subdirectories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_install_versioned.txt#2025-04-22_snippet_5

LANGUAGE: go.mod
CODE:
```
-- go.mod --
module m
```

----------------------------------------

TITLE: Package Requiring Build Tag 'extra' - Go
DESCRIPTION: This file, under tagonly/tagonly.go, uses a '+build extra' build constraint. It declares a separate package tagonly, to be included only if the extra build tag is active. Key usage: demonstrates subpackage tag gating in go list tests. Limitation: ignored unless built with -tags=extra.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
// +build extra

package tagonly

```

----------------------------------------

TITLE: Testing SWIG Functionality in Go (Go)
DESCRIPTION: This Go test file (`main_test.go`) contains a single test function `TestSwigFuncs` within the 'main' package. It uses the standard `testing` package. The test simply calls the `main()` function (defined in `main.go`) to exercise the code paths that involve calling the SWIG-wrapped C functions. This is the primary Go file intended to be measured by the `go test -cover` command in this test case.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_swig.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
-- main_test.go --
package main

import "testing"

func TestSwigFuncs(t *testing.T) {
	main()
}

```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module with version 1.20 specification
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue62156.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.20
```

----------------------------------------

TITLE: Root Go Module Definition
DESCRIPTION: Defines the root Go module configuration with Go 1.20 requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue61415.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/git/issue61415.git

go 1.20
```

----------------------------------------

TITLE: Main Program Implementation
DESCRIPTION: Simple main package with empty main function, used for testing build flags.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gcflags_patterns.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package main
func main() {}
```

----------------------------------------

TITLE: Retrieving and Printing Build Info in Go Package Init
DESCRIPTION: This Go package `lib` utilizes an `init` function, which runs before the `main` package's initialization. Inside `init`, it calls `runtime/debug.ReadBuildInfo()` to retrieve build-time module information. If successful, it prints the main module's path and version, followed by the path, version, sum, and any replacement details for each dependency. It depends on the `runtime/debug` standard library package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_modinfo.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- x/lib/lib.go --
// Package lib accesses runtime/debug.modinfo before package main's init
// functions have run.
package lib

import "runtime/debug"

func init() {
	m, ok := debug.ReadBuildInfo()
	if !ok {
		panic("failed debug.ReadBuildInfo")
	}
	println("mod", m.Main.Path, m.Main.Version)
	for _, d := range m.Deps {
		println("dep", d.Path, d.Version, d.Sum)
		if r := d.Replace; r != nil {
			println("=>", r.Path, r.Version, r.Sum)
		}
	}
}
```

----------------------------------------

TITLE: OS package constants and functions in Go
DESCRIPTION: Constants, functions, and methods for the os package, including file mode types, user home directory retrieval, and process state information.
SOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
const ModeType = 2401763328
func UserHomeDir() (string, error)
method (*File) SyscallConn() (syscall.RawConn, error)
method (*ProcessState) ExitCode() int
method (ExitError) ExitCode() int
```

----------------------------------------

TITLE: Defining Go Module with External Dependency
DESCRIPTION: A Go module definition (go.mod) for a module named 'example.com/use' that depends on a retracted version (v1.0.0-bad) of the 'example.com/retract/rename' module. The module specifies Go 1.16 as the required Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rename.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/use

go 1.16

require example.com/retract/rename v1.0.0-bad
```

----------------------------------------

TITLE: Reflection and Runtime Support
DESCRIPTION: Functions and types for reflect and runtime packages. Provides swapping support for arbitrary types, mutex profiling, and memory statistics enhancements.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_15

LANGUAGE: go
CODE:
```
// reflect functions
func Swapper(interface{}) func(int, int)

// runtime functions and types
func MutexProfile([]BlockProfileRecord) (int, bool)
func SetMutexProfileFraction(int) int
type MemStats struct {
    NumForcedGC uint32
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module declaration for the test package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_err_deadlock.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module test
```

----------------------------------------

TITLE: Implementing Quote Package with V3 Dependency Wrapper
DESCRIPTION: Main implementation of the quote package that wraps functions from rsc.io/quote/v3. It provides four functions: Hello, Glass, Go, and Opt, each returning a different quote.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180710144737-5d9f230bcfba.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

import "rsc.io/quote/v3"

// Hello returns a greeting.
func Hello() string {
	return quote.HelloV3()
}

// Glass returns a useful phrase for world travelers.
func Glass() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return quote.GlassV3()
}

// Go returns a Go proverb.
func Go() string {
	return quote.GoV3()
}

// Opt returns an optimization truth.
func Opt() string {
	// Wisdom from ken.
	return quote.OptV3()
}
```

----------------------------------------

TITLE: Go Module Configuration for Replacing gopkg.in v4 with GitHub v4
DESCRIPTION: This go.mod file configures the replacement of a gopkg.in v4 module with a corresponding GitHub v4 module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module golang.org/issue/34254

go 1.13

require gopkg.in/src-d/go-git.v4 v4.13.1

replace gopkg.in/src-d/go-git.v4 v4.13.1 => github.com/src-d/go-git/v4 v4.13.1
```

----------------------------------------

TITLE: Module Definition
DESCRIPTION: Basic module declaration for golang.org/toolchain
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-arm64.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: A simple Go module definition file that specifies the module name 'hello' and requires Go version 1.20.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_static.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module hello

go 1.20
```

----------------------------------------

TITLE: Module Declaration for Go Toolchain
DESCRIPTION: Declares the module name for the Go toolchain package, identifying it as golang.org/toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-amd64.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Go module definition file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_parallel_success_run.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module chatty_parallel

go 1.18
```

----------------------------------------

TITLE: Defining Go Test File with External Import
DESCRIPTION: This snippet demonstrates a Go test file that imports an external package and defines an empty test function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
package testonly_test

import _ "example.net/missing"

func Test(t *testing.T) {}
```

----------------------------------------

TITLE: Defining Go Test File
DESCRIPTION: This snippet defines a simple Go test file with a passing test function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_setup_error.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package t

import "testing"

func TestGood(t *testing.T) {}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file specifying the deprecated module name and Go version requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_b_v1.9.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Deprecated: in example.com/deprecated/b@v1.9.0
module example.com/deprecated/b

go 1.17
```

----------------------------------------

TITLE: Installing Go Binary Without GOBIN Set
DESCRIPTION: Test case to verify that without GOBIN set, binaries are installed into the GOPATH bin directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_install.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GOBIN=
rm $GOPATH/bin/go-cmd-test$GOEXE
go install go-cmd-test
exists $GOPATH/bin/go-cmd-test$GOEXE
```

----------------------------------------

TITLE: Adding NewGCMWithTagSize function to crypto/cipher package in Go
DESCRIPTION: Introduces a new function NewGCMWithTagSize in the crypto/cipher package. It takes a Block and an integer as parameters and returns an AEAD and an error.
SOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
func NewGCMWithTagSize(Block, int) (AEAD, error)
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: This snippet defines a Go module named `my.pkg` with a `go.mod` file specifying Go version 1.16. This module serves as the base for the `main` package and the `pkg` package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_link_x_import_path_escape.txt#2025-04-22_snippet_1

LANGUAGE: text
CODE:
```
-- go.mod --
module my.pkg

go 1.16
```

----------------------------------------

TITLE: Test Implementation for Package 'a' in Go
DESCRIPTION: Test function for package 'a' that verifies AFunc returns the expected value of 42.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package a

import "testing"

func TestA(t *testing.T) {
	if AFunc() != 42 {
		t.Fatalf("bad!")
	}
}
```

----------------------------------------

TITLE: Defining test file with imports
DESCRIPTION: Defines a test file that imports net/http, used to test how Go handles test imports.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
package x
import "testing"
import _ "net/http"
func Test(t *testing.T) {}
```

----------------------------------------

TITLE: Defining Intermediate Go Package with Import (Go)
DESCRIPTION: This Go source file defines a package named `a` (note: file path is `b/b.go`, typically package name would be `b`) located in the `b` directory (`m/b`). It imports package `m/c` using the blank identifier (`_`) for its side effects. This package is imported by `m/a`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pgo_issue66218.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package a

import _ "m/c"
```

----------------------------------------

TITLE: Defining Go Module with Replacement
DESCRIPTION: This go.mod file defines the module 'example.com/mainmodb' and includes a replacement directive for 'example.com/mainmoda'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_main_module.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.com/mainmodb
go 1.18
replace example.com/mainmoda => ../mainmodareplacement
```

----------------------------------------

TITLE: Go Package Implementation
DESCRIPTION: This snippet shows the implementation of a Go package 'a' with imported dependencies and a function definition.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package a

import "fmt"
import "rsc.io/quote"

func HelloFromA() {
	fmt.Println(quote.Hello())
}
```

----------------------------------------

TITLE: Defining Color NYCbCrA Type - Go
DESCRIPTION: Definition of NYCbCrA color type that extends YCbCr with an alpha channel. Includes RGBA conversion method for color transformations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.6.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
type NYCbCrA struct {
    YCbCr   // embedded
    A uint8
}
```

----------------------------------------

TITLE: Defining Image NYCbCrA Type and Methods - Go
DESCRIPTION: Definition of a new NYCbCrA image type and its associated methods for handling images with alpha channel alongside YCbCr color space. Includes methods for color conversion, bounds checking, and pixel access.
SOURCE: https://github.com/golang/go/blob/master/api/go1.6.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
type NYCbCrA struct {
    A []uint8
    AStride int
    YCbCr   // embedded
}
```

----------------------------------------

TITLE: Fuzzing Test Implementation
DESCRIPTION: Implementation of a fuzzing test function that processes byte array inputs and handles duplicate seed values. The test tracks iterations and produces different outputs based on the occurrence of the seed value.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_limit_dup_entry.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package fuzz_test

import (
	"fmt"
	"testing"
)

func FuzzA(f *testing.F) {
	f.Add([]byte("seed"))
	i := 0
	f.Fuzz(func(t *testing.T, b []byte) {
		i++
		if string(b) == "seed" {
			if i == 0 {
				fmt.Println("a")
			} else if i > 1 {
				fmt.Println("b")
			}
		}
	})
}
```

----------------------------------------

TITLE: Go Workspace Multiple Module Configuration
DESCRIPTION: Extended go.work configuration including additional 'other' module alongside existing modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
go 1.18

use (
	./foo
	./foo/bar/baz
	./other
)
```

----------------------------------------

TITLE: Module Definition with Dependencies
DESCRIPTION: Go module definition file specifying the module name and its dependency requirements
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module patch.example.com/direct

require (
	patch.example.com/indirect v1.0.0
)
```

----------------------------------------

TITLE: Go Package Implementation
DESCRIPTION: Main package file that imports the required quote package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_duplicates.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package use

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Defining Dependent Modules with Different Go Versions
DESCRIPTION: These go.mod files define modules for 'example.com/a' and 'example.com/b' with different Go versions, demonstrating how dependencies can have varying Go version requirements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_old.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module example.com/a
go 1.16

require example.com/b v1.0.0
```

LANGUAGE: go
CODE:
```
module example.com/a
go 1.17

require example.com/b v1.0.1
```

LANGUAGE: go
CODE:
```
module example.com/b
go 1.18
```

LANGUAGE: go
CODE:
```
module example.com/b
go 1.19
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module definition file specifying the module name as 'x'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_fossil.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module x
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Standard go.mod file that defines the module path as 'golang.org/toolchain'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-arm.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Testing Quote Package Functions in Go
DESCRIPTION: This snippet contains unit tests for the quote package functions. It sets the LC_ALL environment variable to 'en' and tests the Hello, Glass, Go, and Opt functions for expected outputs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162918-a91498bed0a7.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package quote

import (
	"os"
	"testing"
)

func init() {
	os.Setenv("LC_ALL", "en")
}

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory, share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}

func TestOpt(t *testing.T) {
	opt := "If a program is too slow, it must have a loop."
	if out := Opt(); out != opt {
		t.Errorf("Opt() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Testing Go Function in Go
DESCRIPTION: Tests the Go function by comparing its output to the expected Go proverb about memory sharing. Fails the test if the output doesn't match the expected string.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory, share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}
```

----------------------------------------

TITLE: Defining QUOTE Package with Uppercase Quote Functions in Go
DESCRIPTION: This snippet defines the QUOTE package with four functions that return uppercase versions of quotes from the 'rsc.io/quote' package. It includes HELLO, GLASS, GO, and OPT functions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_!q!u!o!t!e_v1.5.2.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
// PACKAGE QUOTE COLLECTS LOUD SAYINGS.
package QUOTE

import (
	"strings"

	"rsc.io/quote"
)

// HELLO RETURNS A GREETING.
func HELLO() string {
	return strings.ToUpper(quote.Hello())
}

// GLASS RETURNS A USEFUL PHRASE FOR WORLD TRAVELERS.
func GLASS() string {
	return strings.ToUpper(quote.GLASS())
}

// GO RETURNS A GO PROVERB.
func GO() string {
	return strings.ToUpper(quote.GO())
}

// OPT RETURNS AN OPTIMIZATION TRUTH.
func OPT() string {
	return strings.ToUpper(quote.OPT())
}
```

----------------------------------------

TITLE: Simple Go Package with Version Identifier in Return Value
DESCRIPTION: Implements a simple Go package named 'greeterv2' with a Hello function that returns a string indicating it's version 2. This demonstrates a basic Go package implementation with version information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitreposubdirv2.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package greeterv2

func Hello() string {
	return "hello, world v2"
}
```

----------------------------------------

TITLE: Testing Go Checksum Database Usage
DESCRIPTION: This snippet tests the use of the Go checksum database. It removes the existing go.sum file and then uses 'go list' commands to regenerate it, verifying that the checksum database is used for validation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_golang.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
rm go.sum

go list -mod=mod -x -m all  # Add checksums for go.mod files.
go list -mod=mod -x rsc.io/quote  # Add checksums for module source.

cmp go.sum saved.sum
```

----------------------------------------

TITLE: Defining Go Workspace Configuration
DESCRIPTION: This snippet shows the contents of the go.work file, which defines the workspace configuration. It specifies the Go version and the modules to be used in the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_main_module.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go 1.18
use (
    ./mainmoda
    ./mainmodb
)
```

----------------------------------------

TITLE: Command Line Program Implementation
DESCRIPTION: Main package implementing a simple command that prints the module version string
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_a_v1.9.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main

import "fmt"

func main() { fmt.Println("a@v1.9.0") }
```

----------------------------------------

TITLE: Running go vet with printf flag disabled
DESCRIPTION: This snippet demonstrates running go vet with the printf flag explicitly disabled. It expects no error output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
go vet -printf=false m/vetpkg
! stderr .
```

----------------------------------------

TITLE: Go Benchmark Test with Logging in Subtests
DESCRIPTION: A Go test file that defines a benchmark with multiple subtests, each logging messages. Used to test if the logging output appears correctly without generating CONT lines.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_chatty_success.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package chatty_bench

import (
	"testing"
	"fmt"
)

func BenchmarkChatty(b *testing.B) {
    for i := 0; i < 3; i++ {
        b.Run(fmt.Sprintf("sub-%d", i), func(b *testing.B) {
            for j := 0; j < 2; j++ {
                b.Logf("this is sub-%d", i)
            }
        })
    }
}
```

----------------------------------------

TITLE: Go Test File Structure
DESCRIPTION: Basic Go test file containing three test functions and three benchmark functions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_shuffle.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package foo

import "testing"

func TestOne(t *testing.T)   {}
func TestTwo(t *testing.T)   {}
func TestThree(t *testing.T) {}

func BenchmarkOne(b *testing.B)   {}
func BenchmarkTwo(b *testing.B)   {}
func BenchmarkThree(b *testing.B) {}
```

----------------------------------------

TITLE: Querying Go Module Information with go list
DESCRIPTION: This snippet demonstrates how to use the "go list" command to query information about Go modules using JSON format. It is specifically checking for errors related to missing Go files in the module directory. Prerequisite: Go CLI installed and properly configured. Input: a directory path; Output: JSON structure with the error if no Go files are found.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_json_issue64946.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
cd mod
go list -e -json=ImportPath,Error ./foo
stdout '\"Err\": \"no Go files in .*(/|\\\\)src(/|\\\\)mod(/|\\\\)foo\"'
```

----------------------------------------

TITLE: Running Skipped Fuzz Tests in Go
DESCRIPTION: This snippet illustrates a skipped fuzz test. It shows how to use the Skip() function to bypass a fuzz test and how it's reported in the test output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_chatty.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package chatty_skipped_fuzz

import "testing"

func Fuzz(f *testing.F) {
    f.Skip()
}
```

----------------------------------------

TITLE: Database SQL Context Methods and Types
DESCRIPTION: Defines methods and types for database/sql package that support context-aware operations. Includes query methods, transaction operations, and type definitions for database operations with context cancellation support.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
// database/sql methods supporting context operations
func (*Stmt) QueryContext(context.Context, ...interface{}) (*Rows, error)
func (*Stmt) QueryRowContext(context.Context, ...interface{}) *Row
func (*Tx) ExecContext(context.Context, string, ...interface{}) (Result, error)
func (*Tx) PrepareContext(context.Context, string) (*Stmt, error)
func (*Tx) QueryContext(context.Context, string, ...interface{}) (*Rows, error)
func (*Tx) QueryRowContext(context.Context, string, ...interface{}) *Row
func (*Tx) StmtContext(context.Context, *Stmt) *Stmt

// database/sql types
type ColumnType struct
type IsolationLevel int
type NamedArg struct {
    Name string
    Value interface{}
}
type TxOptions struct {
    Isolation IsolationLevel
    ReadOnly bool
}
```

----------------------------------------

TITLE: Sample Go code using external package
DESCRIPTION: A simple Go package that imports and uses the 'rsc.io/quote' package, demonstrating the use of an external dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fileproxy_vcs_missing_issue51589.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package mod

import (
	"fmt"

	"rsc.io/quote"
)

func Echo() {
	fmt.Println(quote.Hello())
}
```

----------------------------------------

TITLE: Fetching and Verifying Module Dependency in Go
DESCRIPTION: This snippet demonstrates fetching a specific version of a module using 'go get' and verifying its checksum in go.sum.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_replaced.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go get rsc.io/quote@v1.5.0
grep 'rsc.io/quote v1.5.0' go.sum
```

----------------------------------------

TITLE: Basic Go Package Declaration with Import Path
DESCRIPTION: A simple Go package declaration with an explicit import path. The package is named 'x' with an import path of 'm/x'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_convert_git.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package x // import "m/x"
```

----------------------------------------

TITLE: Go package z with internal import
DESCRIPTION: A Go package 'z' that imports the 'y' package from the same module, forming an internal dependency chain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_why.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package z
import _ "mymodule/y"
```

----------------------------------------

TITLE: Linux Build Tag and Tagged Import - Go
DESCRIPTION: This Go file includes a '+build linux' tag, so it is only built when GOOS=linux. It defines package p and performs a side-effect import of tag. Depends on 'tag' being resolvable. Takes no parameters. Limitation: ignored except in linux builds.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
// +build linux

package p

import _ "tag"

```

----------------------------------------

TITLE: Go Module Definition for Testing
DESCRIPTION: A go.mod file that specifies Go 1.24 as the required Go version. This module definition is crucial for the test as it verifies behavior specific to Go 1.24 modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_decoratemappings_124.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
go 1.24
module m
```

----------------------------------------

TITLE: Go Build Command Test
DESCRIPTION: Shell command to test building a Go program with output directed to devnull, followed by existence check
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_dash_o_dev_null.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go build -o $devnull hello.go
! exists 'hello'$GOEXE
```

----------------------------------------

TITLE: Minimal Go Test Implementation
DESCRIPTION: Simple Go test file containing a single empty test function. Demonstrates basic test structure in standalone package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_tests.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package standalone_test

import "testing"

func Test(t *testing.T) {
}
```

----------------------------------------

TITLE: Go Checksum File for Dot-Go Suffix Package
DESCRIPTION: This go.sum file contains the checksum for the 'example.com/dotgo.go' package version 1.0.0, ensuring integrity of the dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_trailing_slash.txt#2025-04-22_snippet_3

LANGUAGE: Text
CODE:
```
example.com/dotgo.go v1.0.0 h1:XKJfs0V8x2PvY2tX8bJBCEbCDLnt15ma2onwhVpew/I=
example.com/dotgo.go v1.0.0/go.mod h1:Qi6z/X3AC5vHiuMt6HF2ICx3KhIBGrMdrA7YoPDKqR0=
```

----------------------------------------

TITLE: Defining SQL Transaction Isolation Level Constants - Go
DESCRIPTION: These constants define transaction isolation levels, specifying concurrency and consistency semantics for database transactions in database/sql and database/sql/driver. Used as values for sql.TxOptions and driver.TxOptions.Isolation fields. Enumerates standard SQL isolation guarantees for portability across database engines.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
const LevelDefault = 0
const LevelLinearizable = 7
const LevelReadCommitted = 2
const LevelReadUncommitted = 1
const LevelRepeatableRead = 4
const LevelSerializable = 6
const LevelSnapshot = 5
const LevelWriteCommitted = 3
```

LANGUAGE: Go
CODE:
```
const LevelDefault IsolationLevel
const LevelLinearizable IsolationLevel
const LevelReadCommitted IsolationLevel
const LevelReadUncommitted IsolationLevel
const LevelRepeatableRead IsolationLevel
const LevelSerializable IsolationLevel
const LevelSnapshot IsolationLevel
const LevelWriteCommitted IsolationLevel
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: This snippet defines the Go module 'rsc.io/quote' and specifies its dependency on 'rsc.io/sampler' version 1.3.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709153244-fd906ed3b100.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module "rsc.io/quote"

require "rsc.io/sampler" v1.3.0
```

----------------------------------------

TITLE: Running Go Tests with Fail Fast Options
DESCRIPTION: This snippet demonstrates running Go tests with different combinations of the -failfast flag and test patterns. It checks the output count of failed tests to verify the fail-fast behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fail_fast.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
! go test ./failfast_test.go -run='TestFailingA' -failfast=true
stdout -count=1 'FAIL - '
! go test ./failfast_test.go -run='TestFailing[AB]' -failfast=true
stdout -count=1 'FAIL - '
! go test ./failfast_test.go -run='TestFailing[AB]' -failfast=false
stdout -count=2 'FAIL - '

# mix with non-failing tests
! go test ./failfast_test.go -run='TestA|TestFailing[AB]' -failfast=true
stdout -count=1 'FAIL - '
! go test ./failfast_test.go -run='TestA|TestFailing[AB]' -failfast=false
stdout -count=2 'FAIL - '

# mix with parallel tests
! go test ./failfast_test.go -run='TestFailingB|TestParallelFailingA' -failfast=true
stdout -count=2 'FAIL - '
! go test ./failfast_test.go -run='TestFailingB|TestParallelFailingA' -failfast=false
stdout -count=2 'FAIL - '
! go test ./failfast_test.go -run='TestFailingB|TestParallelFailing[AB]' -failfast=true
stdout -count=3 'FAIL - '
! go test ./failfast_test.go -run='TestFailingB|TestParallelFailing[AB]' -failfast=false
stdout -count=3 'FAIL - '

# mix with parallel sub-tests
! go test ./failfast_test.go -run='TestFailingB|TestParallelFailing[AB]|TestParallelFailingSubtestsA' -failfast=true
stdout -count=3 'FAIL - '
! go test ./failfast_test.go -run='TestFailingB|TestParallelFailing[AB]|TestParallelFailingSubtestsA' -failfast=false
stdout -count=5 'FAIL - '
! go test ./failfast_test.go -run='TestParallelFailingSubtestsA' -failfast=true
stdout -count=1 'FAIL - '

# only parallels
! go test ./failfast_test.go -run='TestParallelFailing[AB]' -failfast=false
stdout -count=2 'FAIL - '

# non-parallel subtests
! go test ./failfast_test.go -run='TestFailingSubtestsA' -failfast=true
stdout -count=1 'FAIL - '
! go test ./failfast_test.go -run='TestFailingSubtestsA' -failfast=false
stdout -count=2 'FAIL - '

# fatal test
! go test ./failfast_test.go -run='TestFatal[CD]' -failfast=true
stdout -count=1 'FAIL - '
! go test ./failfast_test.go -run='TestFatal[CD]' -failfast=false
stdout -count=2 'FAIL - '

# cross package failfast
! go test -p 1 -failfast ./a ./b ./c
stdout -count=1 'FAIL - '
stdout -count=1 'FAIL - TestFailingPkgA'
```

----------------------------------------

TITLE: Defining Git Repository Import Path in HTML Meta Tag
DESCRIPTION: HTML template with a go-import meta tag that maps the vcs-test.golang.org/go/test1-svn-git/git-README-only import path to a Git repository at https://vcs-test.golang.org/git/README-only.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/test1-svn-git.txt#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<meta name="go-import" content="vcs-test.golang.org/go/test1-svn-git/git-README-only git https://vcs-test.golang.org/git/README-only">
```

----------------------------------------

TITLE: Defining Go Module Dependencies
DESCRIPTION: This snippet defines the module and its dependencies in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module "rsc.io/sampler"

require "golang.org/x/text" v0.0.0-20170915032832-14c0d48ead0c
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module declaration for the test project specifying Go 1.15 as the version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_interleaved.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com
go 1.15
```

----------------------------------------

TITLE: Populating go.mod and go.sum Files in Go
DESCRIPTION: Uses 'go mod tidy' to populate the go.mod and go.sum files with the necessary dependencies for the project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go mod tidy
```

----------------------------------------

TITLE: Adding Extra field to BenchmarkResult struct in testing package
DESCRIPTION: Definition of the Extra field in the BenchmarkResult struct of the testing package. This field stores custom metrics reported during benchmarks.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_175

LANGUAGE: go
CODE:
```
type BenchmarkResult struct {
	Extra map[string]float64
	// Other fields not shown
}
```

----------------------------------------

TITLE: Go Module Files for v1 and v2
DESCRIPTION: Module definition files for the main package and its v2 major version. The v2 file includes the required /v2 suffix in the module path following Go modules conventions for major version upgrades.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/querytest.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
-- go.mod --
module vcs-test.golang.org/git/querytest.git
-- v2/go.mod --
module vcs-test.golang.org/git/querytest.git/v2
```

----------------------------------------

TITLE: Defining Go Module for example.net/pkgadded
DESCRIPTION: This snippet defines the Go module 'example.net/pkgadded' and specifies the minimum Go version required. It's typically placed in the root of the module directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.2.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.net/pkgadded

go 1.16
```

----------------------------------------

TITLE: Main Module Definition
DESCRIPTION: Defines the main module with replacements for test dependencies and version requirements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.net/m

go 1.16

replace (
	example.net/x v0.1.0 => ./x1
	example.net/x v0.2.0-pre => ./x2-pre
	example.net/y v0.1.0 => ./y1
	example.net/y v0.2.0 => ./y2
)

require (
	example.net/x v0.1.0
)
```

----------------------------------------

TITLE: Module B Configuration
DESCRIPTION: Go module configuration for module 'b' with dependencies and replacements
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
go 1.18

module example.com/b

require (
	example.com/p v1.1.0
	example.com/q v1.0.0
)

replace (
	example.com/p => ../p
	example.com/q => ../q
)
```

----------------------------------------

TITLE: Declaring Cgo CFLAGS and LDFLAGS in Go (main.go)
DESCRIPTION: This Go snippet defines the main package and uses cgo directives to specify custom compiler (-I) and linker (-L) flags for an embedded C build step. cgo parses the special #cgo comments to add these flags to the build process. The snippet requires the Go toolchain and cgo support, and expects the specified directories (\"c flags\", \"ld flags\") to exist or be valid per test context. Inputs are the cgo directives; the output is a compiled Go binary linked appropriately. The main function does nothing, serving only to trigger build.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_flag_contains_space.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main
// #cgo CFLAGS: -I\"c flags\"
// #cgo LDFLAGS: -L\"ld flags\"
import "C"
func main() {}
```

----------------------------------------

TITLE: Testing Full Coverage of Function F in pkg3 - Go
DESCRIPTION: This test file for package 'pkg3' imports 'testing' and defines a single test function TestF which calls the package's exported function F. It ensures full statement coverage for F and is written to trigger 100% coverage reporting.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_statements.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package pkg3

import "testing"

func TestF(t *testing.T) {
	F()
}
```

----------------------------------------

TITLE: Defining Package 'a' with Cgo and LDFLAGS (Go)
DESCRIPTION: This Go package `a` uses Cgo to interact with C code. The `#cgo LDFLAGS: -L. -lb` directive tells the C linker to look for a library named `libb.a` (or `libb.so`) in the current directory (`.`) when linking package `a`. It imports the C namespace and defines a Go function `GoFn` that wraps a call to the external C function `CFn`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
-- a/a.go --
package a

// #cgo LDFLAGS: -L. -lb
// extern int CFn(int);
import "C"

func GoFn(v int) int { return int(C.CFn(C.int(v))) }
```

----------------------------------------

TITLE: Defining Go Module for Example
DESCRIPTION: Specifies the module definition for the example project, including the Go version and a local replacement for a dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc_path.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example

go 1.19

require example.com/p v0.1.0

replace example.com/p => ./pfork
```

----------------------------------------

TITLE: Minimal Go Program
DESCRIPTION: A minimal Go program with empty main function used for testing build output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_compile_tempfile.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main
func main() {}
```

----------------------------------------

TITLE: Function Implementation in Package 'bar' Using 'foo'
DESCRIPTION: Defines BarFunc in the 'bar' package, which calls FooFunc2 from the imported 'foo' package. It illustrates cross-package functionality and usage in Go.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_pkgselect.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
-- bar/bar.go --
package bar

import "example/foo"

func BarFunc() int {
	return foo.FooFunc2()
}

```

----------------------------------------

TITLE: Submodule Implementation
DESCRIPTION: Implements the main package that imports and uses the main module's functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_install_submodule.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package main

import "example.com/m"

func main() {
    m.M()
}
```

----------------------------------------

TITLE: Defining Go Module with Dependencies
DESCRIPTION: The 'go.mod' file specifies the module name 'd' and sets the Go version to 1.16. This module definition is essential for compiling and linking the provided Go code correctly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/load_test_pkg_err.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
-- go.mod --
module d

go 1.16
```

----------------------------------------

TITLE: Testing GOTOOLCHAIN=auto Behavior
DESCRIPTION: Tests how GOTOOLCHAIN=auto switches to a newer toolchain when dependencies require it.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# GOTOOLCHAIN=auto should run the newer toolchain
env GOTOOLCHAIN=auto
cp go.mod.new go.mod
go get rsc.io/needgo121 rsc.io/needgo122 rsc.io/needgo123 rsc.io/needall
stderr '^go: rsc.io/needall@v0.0.1 requires go >= 1.23; switching to go1.23.9$'
! stderr '\(running'
stderr '^go: added rsc.io/needall v0.0.1'
grep 'go 1.23' go.mod
! grep toolchain go.mod
```

----------------------------------------

TITLE: Retrieving File Name of Top Stack Frame Using runtime.Caller in Go
DESCRIPTION: Defines a function TopFile that returns the file name from the top (current) stack frame by calling runtime.Caller(0). This function depends on the Go standard library, specifically the runtime package, and takes no parameters. It outputs the full file path as a string, or an empty string if the information is unavailable. The accuracy and content of the returned file path can vary depending on compiler or build flags like -trimpath.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_stack_v1.0.1.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package stack

import "runtime"

func TopFile() string {
	_, file, _, _ := runtime.Caller(0)
	return file
}
```

----------------------------------------

TITLE: Defining Go Module Configuration Files
DESCRIPTION: These files define the Go module structure used in the tests. They include the main go.mod file, the final expected go.mod after tidy, and a local module replacement. These configurations help test how Go module commands handle missing dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_e.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
-- go.mod --
module example.com/untidy
go 1.16
replace example.net/m v0.1.0 => ./m
-- go.mod.final --
module example.com/untidy

go 1.16

replace example.net/m v0.1.0 => ./m

require example.net/m v0.1.0
```

----------------------------------------

TITLE: Package A Implementation with Init Function
DESCRIPTION: Main package 'a' containing an init function and AFunc that depends on package f
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_with_init.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package a

import "M/f"

func init() {
	println("package 'a' init: launch the missiles!")
}

func AFunc() int {
	return f.Id()
}
```

----------------------------------------

TITLE: Importing and Running an Internal Package - Go
DESCRIPTION: This snippet defines a Go main program that imports an internal package located at 'dir1/internal/v' using a blank import to ensure package initialization without direct reference. The main function is empty, as the test focuses on the import mechanism. There are no parameters and the expected behavior is that compilation and execution will succeed if the internal visibility is correctly handled. The code assumes that the Go module and GOPATH are set up so that 'dir1/internal/v' is an internal package relative to the main code.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_internal.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import _ `dir1/internal/v`

func main() {}
```

----------------------------------------

TITLE: Simple Go Program Using External Module
DESCRIPTION: A minimal Go program that imports and uses the 'rsc.io/sampler' package to print a hello message. This serves as a test case for the module vendoring test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache_vendor.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

import (
    "fmt"
    "rsc.io/sampler"
)

func main() {
    fmt.Println(sampler.Hello())
}
```

----------------------------------------

TITLE: Implementing Quote Functions in Go
DESCRIPTION: Implements a Go package named 'quote' that contains three functions for returning different quotes. The functions include Hello() which returns a greeting, Glass() which returns a phrase about eating glass, and Go() which returns a Go proverb about communication.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.2.1.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

// Hello returns a greeting.
func Hello() string {
	return "Hello, world."
}

// Glass returns a useful phrase for world travelers.
func Glass() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return "I can eat glass and it doesn't hurt me."
}

// Go returns a Go proverb.
func Go() string {
	return "Don't communicate by sharing memory, share memory by communicating."
}
```

----------------------------------------

TITLE: Runtime metrics functions and methods in runtime/metrics package
DESCRIPTION: Functions and methods for collecting runtime metrics. Includes All() to get all available metrics descriptions and Read() to read metrics values, along with methods to access different types of metric values.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
func All() []Description
func Read([]Sample)
method (Value) Float64() float64
method (Value) Float64Histogram() *Float64Histogram
method (Value) Kind() ValueKind
method (Value) Uint64() uint64
```

----------------------------------------

TITLE: Implementing Race-Enabled Go Test
DESCRIPTION: This Go test file is conditionally compiled with the 'race' build tag. It imports the 'rsc.io/sampler' package as a side effect and defines an empty test function 'TestRaceTag'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_tag.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
//go:build race

package testrace

import (
        "testing"

        _ "rsc.io/sampler"
)

func TestRaceTag(t *testing.T) {
}
```

----------------------------------------

TITLE: Defining Bar Package in Go
DESCRIPTION: A Go file defining the 'bar' package. This file is used as part of the test cases for the 'go list' command to verify correct package identification.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_ambiguous_path.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package bar
```

----------------------------------------

TITLE: Defining a Go Module in go.mod
DESCRIPTION: This snippet shows the content of a `go.mod` file, which declares the module path `example.com/version`. This is the standard way to define a module in Go.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_version_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/version
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module named 'example.com/foo' using Go version 1.20
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_56509.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/foo

go 1.20
```

----------------------------------------

TITLE: Declaring Toolchain Module Path (go.mod)
DESCRIPTION: Specifies the module path `golang.org/toolchain` within a `go.mod` file. This line typically indicates the Go toolchain directive, instructing the Go tooling which toolchain version's constraints to apply during the build process.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.1.linux-amd64.txt#2025-04-22_snippet_3

LANGUAGE: gomod
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: Configuring Go Module with Dependencies
DESCRIPTION: This Go module file configures a Go project to run with version 1.14 and imports deprecated packages from external sources. It illustrates the setup of a basic Go module file where the core Go version is specified, and dependencies are managed using import statements. This setup requires Go 1.14 or higher to work properly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_missingpkg_prerelease.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module m

go 1.14
```

----------------------------------------

TITLE: Go Module and Package Setup - Go
DESCRIPTION: These Go code snippets define basic Go modules and package structures necessary for the tests. They include module definitions, package declarations, and minimal function implementations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_json_fields.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
-- go.mod --
module example.com/a

go 1.18
-- a.go --
package a

import "fmt"

func F() {
    fmt.Println("hey there")
}
-- repo/go.mod --
module example.com/repo
-- repo/main.go --
package main

func main() {}
-- embed/go.mod --
module example.com/embed
-- embed/embed.go --
package embed

import _ "embed"

//go:embed non-existing-file.txt
var s string
-- embed/embed_test.go --
package embed

import _ "embed"

//go:embed non-existing-file.txt
var s string
-- embed/embed_xtest_test.go --
package embed_test

import _ "embed"

//go:embed non-existing-file.txt
var s string
```

----------------------------------------

TITLE: Go main package using cgo to call C function
DESCRIPTION: A simple Go program that imports the C package using cgo and calls the say_hello() function defined in hello.c. This demonstrates basic cgo functionality for the test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_cgo.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

// void say_hello();
import "C"

func main() {
	C.say_hello()
}
```

----------------------------------------

TITLE: Defining a Constant in Go
DESCRIPTION: This Go code snippet declares a package named pseudoupgrade and defines a constant X with a value of 1. This basic setup is part of a module configuration process for a Go project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_pseudoupgrade_v0.1.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package pseudoupgrade

const X = 1

```

----------------------------------------

TITLE: Hello World Consumer Program
DESCRIPTION: Simple program that imports and uses a vendored strings package to print a hello message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_gopath_issue11409.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"strings" // really ../vendor/strings
)

func main() {
	fmt.Printf("%s\n", strings.Msg)
}
```

----------------------------------------

TITLE: Main Package Implementation
DESCRIPTION: Main package with initialization and functions integrating packages a and b
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_with_init.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main

import (
	"M/a"
	"M/b"
)

func MFunc() string {
	return "42"
}

func M2Func() int {
	return a.AFunc() + b.BFunc()
}

func init() {
	println("package 'main' init")
}

func main() {
	println(a.AFunc() + b.BFunc())
}
```

----------------------------------------

TITLE: Go File with Build Constraint and Vet Error
DESCRIPTION: This Go file includes a build constraint and a formatting error in Printf, used to test vet's behavior with build constraints.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
// +build !foo-bar

package p1

import "fmt"

func F() {
	fmt.Printf("%d", "hello") // causes vet error
}
```

----------------------------------------

TITLE: Defining Golang Module in .mod File
DESCRIPTION: This snippet defines the module name and Go version requirement in a .mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo123_v0.0.1.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module rsc.io/needgo123
go 1.23
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: This snippet shows the contents of a go.mod file, which defines the module and its dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_partial.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module m

go 1.14

require rsc.io/quote v1.5.2
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module declaration file specifying the module name and Go version requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_parse_err.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.13
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: This snippet shows the contents of a go.mod file, defining the module name for the 'a' directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_env.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module example.com/a
```

----------------------------------------

TITLE: Declaring a Go Module with go.mod - Go
DESCRIPTION: Declares the Go module named 'golang.org/toolchain'. This file enables tracking of dependencies, versions, and establishes the module identity for package management. Required for all Go modules, it must be located at the root of the module source tree. It does not specify dependencies here, only the module path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.darwin-amd64.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Golang Module and Package File for Version x.1
DESCRIPTION: The `go.mod` and the Go source for the package `x` under version `x.1` define a basic Go module with version 1.17, serving as a foundational component for more complex module management.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_consistency.txt#2025-04-22_snippet_4

LANGUAGE: plaintext
CODE:
```
module example.com/x

go 1.17
```

LANGUAGE: go
CODE:
```
package x
```

----------------------------------------

TITLE: Defining quote.go Package with Sayings Collection in Go
DESCRIPTION: The main package file that defines four functions for returning different quotes: Hello returns a greeting, Glass returns a phrase about eating glass, Go returns a Go programming proverb, and Opt returns a statement about optimization.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.3-pre1.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

import "rsc.io/sampler"

// A CHANGE!

// Hello returns a greeting.
func Hello() string {
	return sampler.Hello()
}

// Glass returns a useful phrase for world travelers.
func Glass() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return "I can eat glass and it doesn't hurt me."
}

// Go returns a Go proverb.
func Go() string {
	return "Don't communicate by sharing memory, share memory by communicating."
}

// Opt returns an optimization truth.
func Opt() string {
	// Wisdom from ken.
	return "If a program is too slow, it must have a loop."
}
```

----------------------------------------

TITLE: Querying 'latest' Module Version (Tagged Preference Test)
DESCRIPTION: Executes 'go list -m' to retrieve metadata for the 'latest' version of the 'github.com/dmitshur-test/modtest5' module. The '-f' flag formats the output to include the module path, resolved version, and timestamp. This command triggers the Go module resolution logic using the configured file proxy, testing the preference for tagged versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
go list -m -f '{{.Path}} {{.Version}} {{.Time.Format "2006-01-02"}}' github.com/dmitshur-test/modtest5@latest
```

----------------------------------------

TITLE: Importing Dependencies in Main Go File
DESCRIPTION: This main Go file for module 'm' imports packages from modules 'a', 'b', and 'c'. It's used to establish the initial dependency relationships for the test scenario.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue56494.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package m

import (
	_ "a"
	_ "b"
	_ "c"
)
```

----------------------------------------

TITLE: Main Package Import
DESCRIPTION: Main package file importing the badimport package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_errors.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package m

import _ "example.com/badimport"
```

----------------------------------------

TITLE: Conditionally Excluded Go Command Source File
DESCRIPTION: A Go source file for the executable with a build constraint using a non-existent tag. This tests that removing files not included in compilation doesn't cause staleness.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_rebuild_removed.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
// +build missingtag

package main
```

----------------------------------------

TITLE: Accessing Current Goroutine in Go Runtime
DESCRIPTION: Demonstrates how to correctly access the current user goroutine using getg() function in the Go runtime. It also shows how to determine if code is running on the user stack or system stack.
SOURCE: https://github.com/golang/go/blob/master/src/runtime/HACKING.md#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
getg().m.curg // Get the current user goroutine

getg() == getg().m.curg // Check if running on user stack
```

----------------------------------------

TITLE: Initializing Flags in Go
DESCRIPTION: Initializes command-line flags 'foo' and 'bar' with string values. Includes a function 'notOK' to append to the 'bar' flag description dynamically. Uses 'flag' package for creating and looking up flags, with potential error handling for missing flags.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_var_init_order.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package main

import (
	\"flag\"
)

var (
	fooFlag = flag.String(\"foo\", \"\", \"this should be ok\")
	foo     = flag.Lookup(\"foo\")

	barFlag = flag.String(\"bar\", \"\", \"this should be also ok, but is \"+notOK()+\".\")
	bar     = flag.Lookup(\"bar\")
)

func notOK() string {
	return \"not OK\"
}

```

----------------------------------------

TITLE: Defining Go Module with Dependencies and Replacements
DESCRIPTION: This go.mod file defines a module 'example.net/m' with Go version 1.16. It includes replacements for various modules and requires 'example.net/a v0.1.0'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue48511.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example.net/m

go 1.16

replace (
	example.net/a v0.1.0 => ./a
	example.net/b v0.1.0 => ./b
	example.net/b v0.1.1 => ./b
	example.net/m v0.1.0 => ./m1
)

require example.net/a v0.1.0
```

----------------------------------------

TITLE: Main Package Importing Dependency in Go
DESCRIPTION: This Go file defines the main package 'm' and imports 'example.net/a', demonstrating the dependency relationship being tested.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue48511.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package m

import "example.net/a"
```

----------------------------------------

TITLE: Terminal I/O Control Constants for NetBSD ARM64
DESCRIPTION: Terminal I/O control constants used for configuring and manipulating terminal devices on NetBSD. These constants are used with ioctl system calls to perform operations like setting terminal modes, flushing terminal buffers, and controlling terminal flags.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_69

LANGUAGE: Go
CODE:
```
const TCIFLUSH = 1
const TCIFLUSH ideal-int
const TCIOFLUSH = 3
const TCIOFLUSH ideal-int
const TCOFLUSH = 2
const TCOFLUSH ideal-int
const TCSAFLUSH = 2
const TCSAFLUSH ideal-int
const TIOCCBRK = 536900730
const TIOCCBRK ideal-int
const TIOCCDTR = 536900728
const TIOCCDTR ideal-int
const TIOCCONS = 2147775586
const TIOCCONS ideal-int
const TIOCDCDTIMESTAMP = 1074820184
const TIOCDCDTIMESTAMP ideal-int
const TIOCDRAIN = 536900702
const TIOCDRAIN ideal-int
const TIOCEXCL = 536900621
const TIOCEXCL ideal-int
const TIOCEXT = 2147775584
const TIOCEXT ideal-int
const TIOCFLAG_CDTRCTS = 16
const TIOCFLAG_CDTRCTS ideal-int
const TIOCFLAG_CLOCAL = 2
const TIOCFLAG_CLOCAL ideal-int
const TIOCFLAG_CRTSCTS = 4
const TIOCFLAG_CRTSCTS ideal-int
const TIOCFLAG_MDMBUF = 8
const TIOCFLAG_MDMBUF ideal-int
const TIOCFLAG_SOFTCAR = 1
const TIOCFLAG_SOFTCAR ideal-int
const TIOCFLUSH = 2147775504
const TIOCFLUSH ideal-int
const TIOCGETA = 1076655123
const TIOCGETA ideal-int
const TIOCGETD = 1074033690
const TIOCGETD ideal-int
const TIOCGFLAGS = 1074033757
const TIOCGFLAGS ideal-int
const TIOCGLINED = 1075868738
const TIOCGLINED ideal-int
const TIOCGPGRP = 1074033783
const TIOCGPGRP ideal-int
const TIOCGQSIZE = 1074033793
const TIOCGQSIZE ideal-int
const TIOCGRANTPT = 536900679
const TIOCGRANTPT ideal-int
const TIOCGSID = 1074033763
const TIOCGSID ideal-int
const TIOCGSIZE = 1074295912
const TIOCGSIZE ideal-int
const TIOCGWINSZ = 1074295912
const TIOCGWINSZ ideal-int
const TIOCMBIC = 2147775595
const TIOCMBIC ideal-int
const TIOCMBIS = 2147775596
const TIOCMBIS ideal-int
const TIOCM_CAR = 64
const TIOCM_CAR ideal-int
const TIOCM_CD = 64
const TIOCM_CD ideal-int
const TIOCM_CTS = 32
const TIOCM_CTS ideal-int
const TIOCM_DSR = 256
const TIOCM_DSR ideal-int
const TIOCM_DTR = 2
const TIOCM_DTR ideal-int
const TIOCMGET = 1074033770
const TIOCMGET ideal-int
const TIOCM_LE = 1
const TIOCM_LE ideal-int
const TIOCM_RI = 128
const TIOCM_RI ideal-int
const TIOCM_RNG = 128
const TIOCM_RNG ideal-int
const TIOCM_RTS = 4
const TIOCM_RTS ideal-int
const TIOCMSET = 2147775597
const TIOCMSET ideal-int
```

----------------------------------------

TITLE: Defining Module Dependencies (Go)
DESCRIPTION: Specifies module dependencies, replacements, and versions in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue47979.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module golang.org/issue47979

go 1.17

replace (
	example.net/a v0.1.0 => ./a1
	example.net/a v0.2.0 => ./a2
	example.net/indirect v0.1.0 => ./indirect1
	example.net/indirect v0.2.0 => ./indirect2
	example.net/other v0.1.0 => ./other
	example.net/other v0.2.0 => ./other
)

require (
	example.net/a v0.1.0
	example.net/other v0.1.0
)

require example.net/indirect v0.1.0 // indirect
```

----------------------------------------

TITLE: Test2 Sub-module Configuration
DESCRIPTION: Sub-module within test2 that also depends on the main test module, with its own module replacement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue51204.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com/test2/sub

go 1.18

replace example.com/test => ../../test

require example.com/test v0.0.0
```

LANGUAGE: go
CODE:
```
package test2

import (
	"example.com/test"
)

func DoSomething() {
	test.DoSomething()
}
```

----------------------------------------

TITLE: Basic Go Module Definition
DESCRIPTION: Defines a simple Go module named 'example' using Go 1.18
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_buildvcs_auto.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example

go 1.18
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines the module configuration for the test project using Go 1.20.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_export_embed.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example
go 1.20
```

----------------------------------------

TITLE: Toolchain go.mod Definition
DESCRIPTION: Standard Go module declaration file for the toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-386.txt#2025-04-22_snippet_3

LANGUAGE: plaintext
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Original Go Module File
DESCRIPTION: Defines the initial state of the go.mod file with module dependencies and replacements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module m

go 1.16

require (
	example.com/upgrade v0.0.1
	rsc.io/quote v1.0.0
)

replace (
	example.com/upgrade v0.0.1 => ./upgrade1
	example.com/upgrade v0.0.2 => ./upgrade2
)
```

----------------------------------------

TITLE: Testing Go Module Test Dependencies Behavior with Various Flags
DESCRIPTION: A shell script that tests how 'go get' handles test dependencies under different scenarios. It verifies behaviors such as ignoring tests by default, considering test dependencies with '-t' flag, and updating dependencies with '-u' flag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_test.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

# By default, 'go get' should ignore tests
cp go.mod.empty go.mod
go get m/a
! grep rsc.io/quote go.mod

# 'go get -t' should consider test dependencies of the named package.
cp go.mod.empty go.mod
go get -t m/a
grep 'rsc.io/quote v1.5.2$' go.mod

# 'go get -t' should not consider test dependencies of imported packages,
# including packages imported from tests.
cp go.mod.empty go.mod
go get -t m/b
! grep rsc.io/quote go.mod

# 'go get -t -u' should update test dependencies of the named package.
cp go.mod.empty go.mod
go mod edit -require=rsc.io/quote@v1.5.1
go get -t -u m/a
grep 'rsc.io/quote v1.5.2$' go.mod

# 'go get -t -u' should not add or update test dependencies
# of imported packages, including packages imported from tests.
cp go.mod.empty go.mod
go get -t -u m/b
! grep rsc.io/quote go.mod
go mod edit -require=rsc.io/quote@v1.5.1
go get -t -u m/b
grep 'rsc.io/quote v1.5.1$' go.mod

# 'go get all' should consider test dependencies with or without -t.
cp go.mod.empty go.mod
go get all
grep 'rsc.io/quote v1.5.2$' go.mod
```

----------------------------------------

TITLE: Listing Go Package Imports using go list
DESCRIPTION: This snippet uses the 'go list' command to display import paths for Go packages 'a' and 'b', using a formatted output to show the import details including test imports. It requires the Go environment with GO111MODULE set to 'off'. The command formats the import paths using Go text/template syntax.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_imports.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go list -test -f '{{.ImportPath}}:{{with .Imports}} {{join . ", "}}{{end}}' a b
```

----------------------------------------

TITLE: Empty Go File
DESCRIPTION: An empty Go file that defines the package 'm'. This file serves as a minimal package declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tags.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package m
```

----------------------------------------

TITLE: Defining an External Test for Main Package (Go)
DESCRIPTION: Defines a test file for the 'pkg' package, also declared as part of the 'main' package. This structure creates an 'external test package'. It imports the standard 'testing' package and includes a minimal test function 'Test'. This file resides at '$GOPATH/src/pkg/pkg_test.go' and is crucial for triggering the specific recompilation behavior being tested.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_split_main.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
// $GOPATH/src/pkg/pkg_test.go --
package main

import "testing"

func Test(t *testing.T) {}
```

----------------------------------------

TITLE: Defining Retracted Versions in go.mod (Go Module File)
DESCRIPTION: This 'go.mod' file defines the module path 'example.com/retract/self/pseudo' and specifies Go version 1.15. It uses the 'retract' directive to mark versions 'v1.0.0-bad' and 'v1.9.0' (the module's own latest tagged version) as retracted, preventing their default selection by Go tools. Comments provide context for the retractions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_pseudo_v1.9.0.txt#2025-04-22_snippet_0

LANGUAGE: gomod
CODE:
```
-- .mod --
module example.com/retract/self/pseudo

go 1.15

retract v1.0.0-bad // bad
retract v1.9.0 // self

```

----------------------------------------

TITLE: Go Fuzzing Test Implementation
DESCRIPTION: A Go test file containing fuzzing test functions. It includes FuzzEmpty for testing with an empty implementation and FuzzY which tests the Y function with various inputs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cache.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package y

import (
	"io"
	"testing"
)

func FuzzEmpty(f *testing.F) {
    f.Fuzz(func (*testing.T, []byte) {})
}

func FuzzY(f *testing.F) {
	f.Add([]byte("y"))
	f.Fuzz(func(t *testing.T, b []byte) { Y(io.Discard, b) })
}
```

----------------------------------------

TITLE: Inspecting Go Package Imports with go list (Shell)
DESCRIPTION: This shell command uses the Go toolchain's `list` command to retrieve and format specific information about packages `m/a` and `m/b`. The `-f` flag specifies a Go template to print the `ImportPath`, `Imports`, and `ImportMap` for each package. This is used to test how PGO affects the reported import information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pgo_issue66218.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list -f 'ImportPath: "{{.ImportPath}}", Imports: "{{.Imports}}", ImportMap: "{{.ImportMap}}"' m/a m/b
```

----------------------------------------

TITLE: Checking Unresolved Dependency with Go List
DESCRIPTION: This snippet demonstrates how 'go list' reports an unresolved dependency and suggests using 'go get' to resolve it.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_indirect.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
! go list -deps .
stderr '^m.go:3:8: no required module provides package rsc\.io/quote; to add it:\n\tgo get rsc.io/quote$'
```

----------------------------------------

TITLE: Defining FileInfoNames Interface in archive/tar Package
DESCRIPTION: This snippet defines a new interface FileInfoNames in the archive/tar package. It includes methods for retrieving file information such as name, size, mode, and modification time.
SOURCE: https://github.com/golang/go/blob/master/api/go1.23.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
type FileInfoNames interface {
    Gname() (string, error)
    IsDir() bool
    ModTime() time.Time
    Mode() fs.FileMode
    Name() string
    Size() int64
    Sys() interface{}
    Uname() (string, error)
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module definition file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildvcs.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example

go 1.18
```

----------------------------------------

TITLE: Upgrading Go Version with Module Addition
DESCRIPTION: This snippet shows how adding a new module can trigger a Go version upgrade. It demonstrates the automatic version adjustment based on module requirements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
go get go@1.22.1
go get m2@v1.0.0
```

----------------------------------------

TITLE: Runtime metrics constants in runtime/metrics package
DESCRIPTION: Constants defining different types of metrics values that can be collected through the runtime/metrics API. Includes KindBad (invalid value), KindUint64, KindFloat64, and KindFloat64Histogram.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
const KindBad = 0
const KindBad ValueKind
const KindFloat64 = 2
const KindFloat64 ValueKind
const KindFloat64Histogram = 3
const KindFloat64Histogram ValueKind
const KindUint64 = 1
const KindUint64 ValueKind
```

----------------------------------------

TITLE: Implementing a Minimal Go Package
DESCRIPTION: A simple Go package implementation with an empty exported function F().
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo122_v0.0.1.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p

func F() {}
```

----------------------------------------

TITLE: Defining a Go Module with `go.mod` (Go Modules)
DESCRIPTION: This snippet defines a Go module named `example.com/retract/self/pseudo` using a `go.mod` file. It specifies the Go version `1.15` required to build or use this module. This file is the foundation of Go's module system for this project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_pseudo_v1.0.0-bad.txt#2025-04-22_snippet_0

LANGUAGE: Go Modules
CODE:
```
module example.com/retract/self/pseudo

go 1.15
```

----------------------------------------

TITLE: Implementing TestMain support in Go testing package
DESCRIPTION: Adds TestMain functionality to the testing package, allowing for custom setup and teardown in tests. Includes a new M type and MainStart function for controlling test execution.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_31

LANGUAGE: go
CODE:
```
func MainStart(func(string, string) (bool, error), []InternalTest, []InternalBenchmark, []InternalExample) *M
method (*M) Run() int
type M struct
```

----------------------------------------

TITLE: Initializing Main Package with Imports - Go
DESCRIPTION: This Go source file initializes the main package for the test. It imports packages a, b, and c as side effects (blank imports) to ensure their dependencies are included in the module graph and build list. The main function is empty, as the purpose is to verify import resolution and module handling rather than execute logic. There are no parameters or outputs aside from dependency side-effects.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

import (
	_ "a"
	_ "b"
	_ "c"
)

func main() {}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines the module name for the test file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
module github.com/golang.org/issue/34165
```

----------------------------------------

TITLE: Testing go mod why commands for dependency analysis in Go
DESCRIPTION: This bash script tests the 'go mod why' command with various arguments to analyze module dependencies. It covers scenarios like checking individual packages, entire modules, test dependencies, and vendored dependencies. The expected outputs are compared with predefined text files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_why.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on
[short] skip

# Populate go.sum.
go mod tidy
cp go.mod go.mod.orig

go list -test all
stdout rsc.io/quote
stdout golang.org/x/text/language

# why a package?
go mod why golang.org/x/text/language
cmp stdout why-language.txt

# why a module?
go mod why -m golang.org/x/text...
cmp stdout why-text-module.txt

# why a package used only in tests?
go mod why rsc.io/testonly
cmp stdout why-testonly.txt

# why a module used only in a test of a dependency?
go mod why -m rsc.io/testonly
cmp stdout why-testonly.txt

# test package not needed
go mod why golang.org/x/text/unused
cmp stdout why-unused.txt

# vendor doesn't use packages used only in tests.
go mod why -vendor rsc.io/testonly
cmp stdout why-vendor.txt

# vendor doesn't use modules used only in tests.
go mod why -vendor -m rsc.io/testonly
cmp stdout why-vendor-module.txt

# test multiple packages
go mod why golang.org/x/text/language golang.org/x/text/unused
cmp stdout why-both.txt

# test multiple modules
go mod why -m rsc.io/quote rsc.io/sampler
cmp stdout why-both-module.txt

# package in a module that isn't even in the module graph
# (https://golang.org/issue/26977)
go mod why rsc.io/fortune
cmp stdout why-missing.txt

# None of these command should have changed the go.mod file.
cmp go.mod go.mod.orig
```

----------------------------------------

TITLE: Verifying Redundant -reuse Flag with Proxy Origin Data - Shell
DESCRIPTION: This snippet checks that supplying the '-reuse' flag to 'go list' in conjunction with a proxy result for a specific version yields the origin data from the cache, but (correctly) omits the 'Reuse' field. It further asserts that fields not supported by the proxy's limited data are not shown. This ensures that metadata economy from the proxy works as designed and avoids unnecessary reuse indicators. Only a valid proxy cache is required.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61423.txt#2025-04-22_snippet_7

LANGUAGE: shell
CODE:
```
# The -reuse flag has no effect with a proxy, since the proxy can serve
# metadata about a given module version cheaply anyway.

go list -reuse=proxy-version.json -m -json vcs-test.golang.org/git/issue61415.git@v0.0.0-20231114180000-08a4fa6bb9c0
stdout '"Version": "v0.0.0-20231114180000-08a4fa6bb9c0"'
stdout '"Origin":'
stdout '"VCS": "git"'
stdout '"Hash": "08a4fa6bb9c04ffba03b26ae427b0d6335d90a2a"'
! stdout '"Ref":'
! stdout '"TagSum":'
! stdout '"Reuse":'

```

----------------------------------------

TITLE: Initial Go Module Definition
DESCRIPTION: Defines the base module without version suffix, specifying Go 1.18 as the required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/odd-tags.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/git/odd-tags.git

go 1.18
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Simple module definition for the test package named 'm'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flag.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic go.mod file defining the module as 'example' and specifying Go version 1.24 as requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_subdir.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example

go 1.24
```

----------------------------------------

TITLE: Configuring Main Module Dependencies and Replacements in Go
DESCRIPTION: This go.mod file defines the main module's dependencies and uses the 'replace' directive to specify local paths for different versions of dependent modules. It sets up a complex dependency structure for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue60490.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example

go 1.19

require (
	example.net/a v0.1.0
	example.net/b v0.1.0
)

replace (
	example.net/a v0.1.0 => ./a1
	example.net/a v0.2.0 => ./a2
	example.net/b v0.1.0 => ./b1
	example.net/b v0.2.0 => ./b2
	example.net/c v0.1.0 => ./c1
)
```

----------------------------------------

TITLE: Building Constraints and Package Directives
DESCRIPTION: This section covers build constraints and package struct definitions used in Go projects for managing building conditions and package directives. With the GoVersion and Directive structure, this set aids in defining conditions under which a package is built and how directives within build files are structured.
SOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
pkg go/build/constraint, func GoVersion(Expr) string #59033
```

LANGUAGE: Go
CODE:
```
pkg go/build, type Directive struct #56986
```

LANGUAGE: Go
CODE:
```
pkg go/build, type Directive struct, Pos token.Position #56986
```

LANGUAGE: Go
CODE:
```
pkg go/build, type Directive struct, Text string #56986
```

LANGUAGE: Go
CODE:
```
pkg go/build, type Package struct, Directives []Directive #56986
```

LANGUAGE: Go
CODE:
```
pkg go/build, type Package struct, TestDirectives []Directive #56986
```

LANGUAGE: Go
CODE:
```
pkg go/build, type Package struct, XTestDirectives []Directive #56986
```

----------------------------------------

TITLE: Expected go.mod with Valid Retraction
DESCRIPTION: Reference go.mod file showing correct structure with module declaration and proper version retraction
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_fix_version.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go 1.16

retract v2.0.1

module rsc.io/quote/v2
```

----------------------------------------

TITLE: Vendored Package Test with Direct Import
DESCRIPTION: Test file for tx3 package demonstrating direct import of test package and exported variable usage.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_list_issue11977.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package tx3_test

import "vendor.org/tx3"
import "testing"

var Found = tx3.Exported

func TestNop(t *testing.T) {}
```

----------------------------------------

TITLE: Retrieving Default User Language Preferences in Go
DESCRIPTION: This function retrieves the default user language preferences by checking environment variables LC_ALL, LC_MESSAGES, and LANG in that order. It returns a slice of language tags.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.3.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
func DefaultUserPrefs() []language.Tag {
	var prefs []language.Tag
	for _, k := range []string{"LC_ALL", "LC_MESSAGES", "LANG"} {
		if env := os.Getenv(k); env != "" {
			prefs = append(prefs, language.Make(env))
		}
	}
	return prefs
}
```

----------------------------------------

TITLE: Test File with HTTP Import
DESCRIPTION: This test file imports the 'net/http' package and defines a minimal test function. It's used to verify that test-only imports are correctly reported by 'go list'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/std_vendor.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package x
import "testing"
import _ "net/http"
func Test(t *testing.T) {}
```

----------------------------------------

TITLE: Testing Go Module Proxy Fallback Behavior
DESCRIPTION: Series of test commands that verify Go module proxy fallback behavior with different HTTP status codes (404, 410, 403, 500) and proxy list separators (',' and '|'). Tests include verification of error handling and proxy fallback logic when fetching module versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_proxy_list.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
env proxy=$GOPROXY

# Proxy that can't serve should fail.
env GOPROXY=$proxy/404
! go get rsc.io/quote@v1.0.0
stderr '404 Not Found'

# get should walk down the proxy list past 404 and 410 responses.
env GOPROXY=$proxy/404,$proxy/410,$proxy
go get rsc.io/quote@v1.1.0

# get should not walk past other 4xx errors if proxies are separated with ','.
env GOPROXY=$proxy/403,$proxy
! go get rsc.io/quote@v1.2.0
stderr 'reading.*/403/rsc.io/.*: 403 Forbidden'

# get should not walk past non-4xx errors if proxies are separated with ','.
env GOPROXY=$proxy/500,$proxy
! go get rsc.io/quote@v1.3.0
stderr 'reading.*/500/rsc.io/.*: 500 Internal Server Error'

# get should walk past other 4xx errors if proxies are separated with '|'.
env GOPROXY=$proxy/403|https://0.0.0.0|$proxy
go get rsc.io/quote@v1.2.0

# get should walk past non-4xx errors if proxies are separated with '|'.
env GOPROXY=$proxy/500|https://0.0.0.0|$proxy
go get rsc.io/quote@v1.3.0

# get should return the final error if that's all we have.
env GOPROXY=$proxy/404,$proxy/410
! go get rsc.io/quote@v1.4.0
stderr 'reading.*/410/rsc.io/.*: 410 Gone'
```

----------------------------------------

TITLE: Calculating GCD and LCM for Large Hexadecimal Numbers in Go
DESCRIPTION: This code snippet shows the calculation of Greatest Common Divisor (GCD) and Least Common Multiple (LCM) for two large hexadecimal numbers A and B. The results are displayed in hexadecimal format.
SOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/fips140/rsa/testdata/gcd_lcm_tests.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
A = 8cf8ef1d4f216c6bcec673208fd93b7561b0eb8303af57113edc5c6ff4e1eeae9ddc3112b943d947653ba2179b7f63505465126d88ad0a0a15b682f5c89aa4a2a51c768cd9fdeaa9
B = a6fd114023e7d79017c552a9051ca827f3ffa9f31e2ee9d78f8408967064fcdc9466e95cc8fac9a4fa88248987caf7cf57af58400d27abd60d9b79d2fe03fad76b879eceb504d7f
LCM = 1c05eee73a4f0db210a9007f94a5af88c1cdd2cba456061fd41de1e746d836fa4e0e972812842e0f44f10a61505f5d55760c48ba0d06af78bb6bde7da8b0080b29f82b1161e9c0b5458e05ac090b00f4d78b1cc10cf065124ba610e3acab092a36fe408525e21c0ddc7c9696ed4e48bd2f70423deecfe62cecc865c6088f265da0e5961d3f3a84f

GCD = 917e74ae941fcaae
```

----------------------------------------

TITLE: Toolow Module Configuration
DESCRIPTION: Module configuration specifying an older version dependency that needs updating
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_indirect.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.net/toolow

go 1.16

require example.net/indirect v0.1.0
```

----------------------------------------

TITLE: First Main Package Definition
DESCRIPTION: Defines a minimal main package with an empty main() function. Used as part of testing multiple main package builds.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_exe.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Verifying Module Version in Go Workspace
DESCRIPTION: This snippet uses the 'go list' command to verify that the correct version of the 'example.com/q' module is selected in the workspace. It checks that version v1.1.0 is chosen, which is the highest version selected by Minimal Version Selection (MVS).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go list -m -f '{{.Version}}' example.com/q
stdout '^v1.1.0$'
```

----------------------------------------

TITLE: Go Test File with Custom Flag Handling
DESCRIPTION: A test file demonstrating how to define and use custom flags in Go tests. It defines a '-v' flag and a '-custom' flag, then tests if the '-v' flag is properly set to the expected value when passed via command line.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flag.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package flag_test

import (
	"flag"
	"log"
	"testing"
)

var v = flag.Int("v", 0, "v flag")

var custom = flag.Bool("custom", false, "")

// Run this as go test pkg -v=7
func TestVFlagIsSet(t *testing.T) {
	if *v != 7 {
		log.Fatal("v flag not set")
	}
}
```

----------------------------------------

TITLE: Go Module Configuration for Replacing gopkg.in v4 with GitHub v0
DESCRIPTION: This go.mod file configures the replacement of a gopkg.in v4 module with a GitHub v0 module, showing backwards compatibility support.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module golang.org/issue/34254

go 1.13

require gopkg.in/src-d/go-git.v4 v4.13.1

replace gopkg.in/src-d/go-git.v4 v4.13.1 => github.com/src-d/go-git v0.0.0-20190801152248-0d1a009cbb60
```

----------------------------------------

TITLE: ReadLinkFS Interface Definition
DESCRIPTION: Definition of the ReadLinkFS interface that combines Lstat, Open, and ReadLink capabilities for filesystem operations.
SOURCE: https://github.com/golang/go/blob/master/api/next/49580.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
type ReadLinkFS interface {
    Lstat(string) (FileInfo, error)
    Open(string) (File, error)
    ReadLink(string) (string, error)
}
```

----------------------------------------

TITLE: Testing Specific Version Upgrade with 'go get' (Shell)
DESCRIPTION: Upgrades a specific package version and verifies that all necessary dependencies are updated accordingly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue47979.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
cp go.mod.orig go.mod
go get example.net/a@v0.2.0
cmp go.mod go.mod.want
```

----------------------------------------

TITLE: Configuring and Testing GOPATH Package Shadowing - Shell Script
DESCRIPTION: This shell script sets Go environment variables, creates overlapping GOPATH roots, and runs several Go CLI commands (go list, go install) to test how duplicate packages in different roots are resolved. It also verifies outputs and error messages using regular expressions. Required dependencies include the Go toolchain and a Unix-like shell environment. Inputs include source package directories, and outputs are captured or asserted from tool command output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_shadow.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off
env GOPATH=$WORK/gopath/src/shadow/root1${:}$WORK/gopath/src/shadow/root2

# The math in root1 is not "math" because the standard math is.
go list -f '({{.ImportPath}}) ({{.ConflictDir}})' ./shadow/root1/src/math
stdout '^\(.*(\\|/)src(\\|/)shadow(\\|/)root1(\\|/)src(\\|/)math\) \('$GOROOT'(\\|/)?src(\\|/)math\)$'

# The foo in root1 is "foo".
go list -f '({{.ImportPath}}) ({{.ConflictDir}})' ./shadow/root1/src/foo
stdout '^\(foo\) \(\)$'

# The foo in root2 is not "foo" because the foo in root1 got there first.
go list -f '({{.ImportPath}}) ({{.ConflictDir}})' ./shadow/root2/src/foo
stdout '^\(.*gopath(\\|/)src(\\|/)shadow(\\|/)root2(\\|/)src(\\|/)foo\) \('$WORK'(\\|/)?gopath(\\|/)src(\\|/)shadow(\\|/)root1(\\|/)src(\\|/)foo\)$'

# The error for go install should mention the conflicting directory.
! go install -n ./shadow/root2/src/foo
stderr 'go: no install location for '$WORK'(\\|/)?gopath(\\|/)src(\\|/)shadow(\\|/)root2(\\|/)src(\\|/)foo: hidden by '$WORK'(\\|/)?gopath(\\|/)src(\\|/)shadow(\\|/)root1(\\|/)src(\\|/)foo'
```

----------------------------------------

TITLE: Go Fuzzing Test Implementation
DESCRIPTION: Minimal fuzzing test that accepts an integer input. Used to verify that fuzzing works with cgo-enabled packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cgo.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p

import "testing"

func Fuzz(f *testing.F) {
	f.Add(0)
	f.Fuzz(func(t *testing.T, x int) {})
}
```

----------------------------------------

TITLE: Main Package with Imports
DESCRIPTION: This Go file defines the main package 'm' and imports two modules: 'x.1' and 'z.1/sub'. The underscore indicates that these imports are for side effects only.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package m

import _ "x.1"
import _ "z.1/sub"
```

----------------------------------------

TITLE: Implementing Go Test File
DESCRIPTION: A Go test file containing a simple test function that prints 'TEST'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_output.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p
import "testing"
func Test(t *testing.T) {println("TEST")}
```

----------------------------------------

TITLE: Short Module Implementation
DESCRIPTION: Implements a simple package for the 'short' module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package short
```

----------------------------------------

TITLE: Defining a Version Constant in Go
DESCRIPTION: This Go code snippet defines a constant `V` within the `version` package. The constant holds the string literal "v1.0.0", making the module's version accessible programmatically within the Go code.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_version_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package version

const V = "v1.0.0"
```

----------------------------------------

TITLE: Go Workspace Configuration
DESCRIPTION: Workspace configuration file using modules from '../m' and '../n' directories with Go 1.24
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pattern_work.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
go 1.24

use (
	../m
	../n
)
```

----------------------------------------

TITLE: Defining Go Packages and Test Files with Syntax and Signature Errors - Go
DESCRIPTION: This collection of Go source files sets up various packages and test files demonstrating different failure modes. Some files are intentionally incomplete or contain syntax errors (represented by '!!!syntax error'), some import dependencies, and others define test functions with incorrect signatures or use generics incorrectly in test functions. These files serve as a testbed for validating the Go build and test tooling's robustness and error reporting. Inputs are package declarations and optional imports; outputs vary between successful compilation and error states, depending on the intentional faults. The key dependency is the standard Go toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_err.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package syntaxerr

import _ "pkgdep"
```

LANGUAGE: Go
CODE:
```
package syntaxerr

!!!syntax error
```

LANGUAGE: Go
CODE:
```
package syntaxerr_test

!!!syntax error
```

LANGUAGE: Go
CODE:
```
package syntaxerr

import _ "testdep_a"
```

LANGUAGE: Go
CODE:
```
package syntaxerr

import _ "testdep_b"
```

LANGUAGE: Go
CODE:
```
package nameerr

import _ "pkgdep"
```

LANGUAGE: Go
CODE:
```
package nameerr

import (
  _ "testdep_a"
  "testing"
)

func TestBad(t *testing.B) {}
```

LANGUAGE: Go
CODE:
```
package nameerr_test

import (
  _ "testdep_b"
  "testing"
)

func TestBad(t *testing.B) {}
```

LANGUAGE: Go
CODE:
```
package genericerr
```

LANGUAGE: Go
CODE:
```
package genericerr

import "testing"

func TestGeneric[T any](t *testing.T) {}
```

LANGUAGE: Go
CODE:
```
package cycleerr

import (
  _ "testdep_a"
  _ "testdep_cycle"
)
```

LANGUAGE: Go
CODE:
```
package pkgdep
```

LANGUAGE: Go
CODE:
```
package testdep_a
```

LANGUAGE: Go
CODE:
```
package testdep_b
```

LANGUAGE: Go
CODE:
```
package testdep_cycle

import _ "cycleerr"
```

----------------------------------------

TITLE: Go Package with External Dependency
DESCRIPTION: This Go file defines a package named 'mod' and imports 'rsc.io/quote' as a blank import. This import is used to test the behavior of 'go mod tidy' in managing dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_support_buildx.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package mod
import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Fuzzing Test with Minimization Counter
DESCRIPTION: Implements a fuzzing test that tracks minimization attempts by creating files after finding the first crash. Uses a predetermined seed value to trigger minimization.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_fuzztime.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
func FuzzMinimizeCount(f *testing.F) {
	pid := os.Getpid()
	n := 0
	seed := bytes.Repeat([]byte("a"), 357)
	f.Add(seed)
	crashFound := false
	f.Fuzz(func(t *testing.T, b []byte) {
		if crashFound {
			name := fmt.Sprintf("minimizecount/%v.%d", pid, n)
			if err := os.WriteFile(name, nil, 0666); err != nil {
				t.Fatal(err)
			}
			n++
		}
		if !bytes.Equal(b, seed) {  // this should happen right away
			crashFound = true
			t.Error("minimize this!")
		}
	})
}
```

----------------------------------------

TITLE: Running Fuzz Tests with Fatal Error in Go
DESCRIPTION: This snippet shows a fuzz test that triggers a fatal error. It illustrates how fatal errors are handled in fuzz testing and how they affect test execution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_chatty.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package chatty_fatal_fuzz

import "testing"

func Fuzz(f *testing.F) {
    f.Fatal("fatal in target")
}
```

----------------------------------------

TITLE: Initializing a Minimal Go Package - Go
DESCRIPTION: This snippet shows the minimal declaration of a Go package with the package name 'rename'. It serves as a placeholder for future implementation and fulfills Go's requirement that all code files specify a package. No dependencies, inputs, or outputs exist in this form, and the file provides no executable logic or exported identifiers. It is commonly used as a starting point before adding logic to a new Go package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rename_v1.0.0-bad.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package rename
```

----------------------------------------

TITLE: Main Package Test with Import
DESCRIPTION: Test file importing the main package from within its own test package, demonstrating valid usage of main package imports in test files
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_main.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main_test

import (
	"testing"
	xmain "x"
)

var _ = xmain.X

func TestFoo(t *testing.T) {}
```

----------------------------------------

TITLE: Deprecated Go Module Definition (b) - Go
DESCRIPTION: This go.mod, located in directory 'b', defines module example.com/deprecated/b as deprecated via a leading comment. It uses Go 1.17 and is used as a replacement target in previous go.mod configurations. The deprecation comment signals downstream consumers that this module is no longer recommended for use.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_deprecated_replace.txt#2025-04-22_snippet_7

LANGUAGE: go.mod
CODE:
```
// Deprecated: in ./b
module example.com/deprecated/b

go 1.17
```

----------------------------------------

TITLE: Module P Main Implementation
DESCRIPTION: Main package implementation for module 'p' that imports and uses module 'q'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package main

import "example.com/q"

func main() {
	q.PrintVersion()
}
```

----------------------------------------

TITLE: Go Module Definition for v2 Package
DESCRIPTION: Module definition for the v2 submodule, specifying the module path with explicit v2 suffix and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2sub.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/git/v2sub.git/v2

go 1.16
```

----------------------------------------

TITLE: Importing External Package in Go
DESCRIPTION: This Go file imports an external package from golang.org/x/text/language. It demonstrates how external dependencies are used in the project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_concurrent.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package x

import _ "golang.org/x/text/language"
```

----------------------------------------

TITLE: Go file with Printf error in vetpkg
DESCRIPTION: This snippet contains a Go file with a Printf statement that has an incorrect number of arguments, which should trigger a vet error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_8

LANGUAGE: Go
CODE:
```
package p

import "fmt"

func f() {
	fmt.Printf("%d")
}
```

----------------------------------------

TITLE: Module B Definition v0.2.0
DESCRIPTION: Module b v0.2.0 configuration and implementation with additional dependencies on modules c, d, and e.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_artifact.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.com/b

go 1.16

require (
	example.com/c v0.2.0
	example.com/d v0.2.0
	example.com/e v0.1.0
)
```

LANGUAGE: go
CODE:
```
package b

import (
	"example.com/c"
	"example.com/d"
	"example.com/e"
)
```

----------------------------------------

TITLE: Main Package Implementation
DESCRIPTION: Main package 'a' that imports and uses package 'b'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_deps.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package a

import "b"

func F() {
	b.F()
}
```

----------------------------------------

TITLE: Verifying Go Command Installation Location
DESCRIPTION: This snippet checks that the 'go' command is installed in $GOROOT/bin, not $GOBIN. It sets up the environment, creates a directory, and uses 'go list' to verify the installation path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_cmd_gobin.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GOBIN=gobin
mkdir gobin
go list -f '{{.Target}}' cmd/go
stdout $GOROOT${/}bin${/}go$GOEXE
```

----------------------------------------

TITLE: Go Environment Variable Configuration Test
DESCRIPTION: Test script that sets various Go environment variables and verifies their output using go env -changed command. Tests include basic environment settings, JSON output format, and platform-specific configurations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_changed.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GOROOT=./a
env GOTOOLCHAIN=local
env GOSUMDB=nodefault
env GOPROXY=nodefault
env GO111MODULE=auto
env CGO_CFLAGS=nodefault
env CGO_CPPFLAGS=nodefault
env GOFIPS140=latest
```

----------------------------------------

TITLE: Testing Rune Fuzzing in Go
DESCRIPTION: This fuzz test function demonstrates Go's fuzzing capabilities with rune inputs. It panics when the input is not 0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_15

LANGUAGE: Go
CODE:
```
func FuzzRune(f *testing.F) {
	f.Add(rune(0))
	f.Fuzz(func(t *testing.T, a rune) {
		if a != 0 {
			panic("this input caused a crash!")
		}
	})
}
```

----------------------------------------

TITLE: Package Import Example
DESCRIPTION: Simple Go package that imports a retracted module version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package use

import _ "example.com/retract"
```

----------------------------------------

TITLE: Importing Retracted Module in Go
DESCRIPTION: A Go package that imports the retracted module 'example.com/retract/rename' as a blank import. This demonstrates how a package would reference a dependency that has been retracted by its author.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rename.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package use

import _ "example.com/retract/rename"
```

----------------------------------------

TITLE: Setting Go Environment Variables for Testing
DESCRIPTION: Sets up the Go environment for testing by disabling workspace mode and enabling module mode.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GOWORK=off
env GO111MODULE=on
```

----------------------------------------

TITLE: Test Implementation for Package 'aa' in Go
DESCRIPTION: Simple test for package 'aa' that calls the AA function with parameter 3.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package aa

import "testing"

func TestMumble(t *testing.T) {
	AA(3)
}
```

----------------------------------------

TITLE: Implementing Main Function with Module Import in Go
DESCRIPTION: This snippet shows the main function of the 'p' module, which imports and uses the 'q' module. It demonstrates how the module graph affects import resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune_all.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

import "example.com/q"

func main() {
	q.PrintVersion()
}
```

----------------------------------------

TITLE: Managing Go Build Cache with Bash
DESCRIPTION: This snippet sets the GOCACHE environment variable to initialize a clean build cache and runs the 'go vet' command on 'os/user' to warm up the cache. It ensures cgo-derived inputs are reused, avoiding unnecessary recompilation through specific flag checks against stderr.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cache_vet.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GOCACHE=$WORK/cache

go vet os/user

go vet -x os/user
! stderr '^(clang|gcc)'  # should not have run compiler
! stderr '[\/]cgo '     # should not have run cgo
```

----------------------------------------

TITLE: Expected Go Workspace Configuration
DESCRIPTION: Expected go.work file after cleanup of deleted module references
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_deleted.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
go 1.18

use ./sub/dir
```

----------------------------------------

TITLE: Adding Comparable Hashing Functions in Go
DESCRIPTION: New functions for hashing comparable types in the hash/maphash package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_14

LANGUAGE: Go
CODE:
```
func Comparable[$0 comparable](Seed, $0) uint64
func WriteComparable[$0 comparable](*Hash, $0)
```

----------------------------------------

TITLE: Defining Go Workspace Configuration
DESCRIPTION: This snippet shows the content of a go.work file, which specifies the use of the current directory in the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_implicit_go_requirement.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
use .
```

----------------------------------------

TITLE: Implementing TestMain for I/O Stream Handling in Go
DESCRIPTION: Defines TestMain function to handle test setup and execution. It includes logic to simulate a hanging process when a specific environment variable is set.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_timeout_stdin.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
func TestMain(m *testing.M) {
	if os.Getenv("TEST_TIMEOUT_HANG") == "1" {
		io.Copy(io.Discard, os.Stdin)
		if _, err := os.Stderr.WriteString("stdin closed\n"); err != nil {
			os.Exit(1)
		}

		ticker := time.NewTicker(100 * time.Millisecond)
		for t := range ticker.C {
			_, err := fmt.Fprintf(os.Stderr, "still alive at %v\n", t)
			if err != nil {
				os.Exit(1)
			}
		}
	}

	m.Run()
}
```

----------------------------------------

TITLE: Go Hello World Function with Personalization
DESCRIPTION: A simple Go function that returns a Hello World message, with optional personalization when a name is provided. This code is used to test the coverage cache functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_cache_inputs.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package testcache

import "fmt"

func HelloWorld(name string) string {
    if name == "" {
        return "Hello, World!"
    }
    return fmt.Sprintf("Hello, %s!", name)
}
```

----------------------------------------

TITLE: Retracting Module Versions in Go Mod File
DESCRIPTION: This Go mod file snippet demonstrates how to retract specific module versions using the 'retract' directive. The file indicates retraction of versions v1.0.0 and v1.9.0 due to issues or self-retraction. Go version 1.15 is specified as a prerequisite. The use of 'retract' provides control over module versions that should no longer be available as @latest. Inputs are specific module versions, and outputs control their availability. Limitations include needing Go toolchain support for module retraction, introduced in Go 1.15.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prerelease_v1.9.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/retract/self/prerelease

go 1.15

retract v1.0.0 // bad
retract v1.9.0 // self
```

----------------------------------------

TITLE: Main Package with Import Declarations
DESCRIPTION: Main package 'p' importing two packages 'y' and 'z' from package 'q'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_resolve.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package p

import (
	_ "q/y"
	_ "q/z"
)
```

----------------------------------------

TITLE: Go Module with Retractions and Rationales
DESCRIPTION: Shows a go.mod file with retraction directives that include rationales as comments, which explain why specific versions were retracted.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
module x.x/y/z

go 1.15

// a
retract v1.0.0

// b
retract (
  v1.0.1
  v1.0.2 // c
)
```

----------------------------------------

TITLE: Adding ParseOID Function to crypto/x509 Package
DESCRIPTION: This snippet adds a new function ParseOID to the crypto/x509 package. It parses a string representation of an Object Identifier (OID) and returns an OID type and an error.
SOURCE: https://github.com/golang/go/blob/master/api/go1.23.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
func ParseOID(string) (OID, error)
```

----------------------------------------

TITLE: Defining Go Module Dependencies for a Subpackage
DESCRIPTION: This Go module file (`go.mod`) declares the module path `example.com/join/subpkg` and specifies a direct dependency on the parent module `example.com/join` at version `v1.1.0`. This setup is common in test scenarios where a subpackage needs to import and utilize code from its containing module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_join_subpkg_v1.1.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
-- .mod --
module example.com/join/subpkg

require example.com/join v1.1.0
```

----------------------------------------

TITLE: Go Module Definition for Quote Package
DESCRIPTION: Go module file that specifies the module name and its dependencies. The quote package depends on rsc.io/quote/v2 v2.0.1 and rsc.io/sampler v1.3.0 for its implementation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162816-fe488b867524.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module rsc.io/quote

require (
	rsc.io/quote/v2 v2.0.1
	rsc.io/sampler v1.3.0
)
```

----------------------------------------

TITLE: Function Implementation for Package 'b' in Go
DESCRIPTION: Defines package 'b' with an init function that prints a message and a function BFunc that returns -42.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package b

func init() {
	println("package 'b' init: release the kraken")
}

func BFunc() int {
	return -42
}
```

----------------------------------------

TITLE: Defining Package 'a' in Go
DESCRIPTION: Defines package `a` within module `M`. It contains a single exported function `AFunc` that returns the integer 42. This package serves as a dependency for the `main` package in the test setup.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_single_vs_multiple.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- a/a.go --
package a

func AFunc() int {
	return 42
}
```

----------------------------------------

TITLE: Adding Data-Independent Timing Function to crypto/subtle Package in Go
DESCRIPTION: New function to execute a given function with data-independent timing in the crypto/subtle package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_8

LANGUAGE: Go
CODE:
```
func WithDataIndependentTiming(func())
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a simple Go module named 'example.com' with Go 1.14 as the target version. This module serves as the base for the import resolution tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goroot_errors.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com
go 1.14
```

----------------------------------------

TITLE: Fixing Version Incompatibility with go get
DESCRIPTION: Demonstrates how 'go get go@1.21.2' can fix the version incompatibility error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goline_order.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
cp go.mod.orig go.mod
go get go@1.21.2
go list -deps -tags usem1
```

----------------------------------------

TITLE: Building and Testing a Go File with cgo
DESCRIPTION: This Go snippet demonstrates how to build a Go program that uses cgo to interact with C libraries, specifically accessing the INT_MAX constant from limits.h. The go build command checks if there is any stat operation related to an archive file, which should not happen as part of the test verification. There are no external dependencies apart from the Go toolchain itself.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_dash_n_cgo.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
# Tests golang.org/issue/14944

[!cgo] skip

go build -n foo.go
! stderr 'os.Stat .* no such file or directory' # there shouldn\'t be a stat of the archive file

-- foo.go --
package main

/*
#include <limits.h>
*/
import "C"

func main() {
        println(C.INT_MAX)
}
```

----------------------------------------

TITLE: Testing an Internal Function in a With-Test Package - Go
DESCRIPTION: Provides a test function TestBar within the 'withtest' package, directly calling Bar(). Uses the testing framework to ensure Bar is executed, contributing to coverage calculations. No external dependencies other than 'testing'. Inputs and outputs are managed by the Go testing infrastructure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_imports.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package withtest

import "testing"

func TestBar(t *testing.T) {
	Bar()
}
```

----------------------------------------

TITLE: Retrieving Top Stack Frame File Name - Go
DESCRIPTION: This Go function 'TopFile' uses 'runtime.Caller' to return the file name of the top stack frame. It depends on the standard 'runtime' package, requires no parameters, and returns a string containing the file path. The output reflects the source file, but may be altered by Go compiler flags such as '-trimpath'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_stack_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package stack\n\nimport \"runtime\"\n\nfunc TopFile() string {\n\t_, file, _, _ := runtime.Caller(0)\n\treturn file\n}
```

----------------------------------------

TITLE: Verifying Module Dependencies with go list Command
DESCRIPTION: A shell command that lists all modules in the dependency graph. The command uses a custom format and validates the output with expected module paths, checking which modules should appear in the dependency tree based on lazy loading rules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_9

LANGUAGE: shell
CODE:
```
go list -m -f $MODFMT all
stdout -count=10 '^.'
stdout '^example.com/a$'
stdout '^example.com/b$'
stdout '^example.com/c$'
! stdout '^example.com/d$'
stdout '^example.com/main$'
stdout '^example.com/q$'
stdout '^example.com/r$'
stdout '^example.com/s$'
stdout '^example.com/t$'
stdout '^example.com/u$'
stdout '^example.com/w$'
! stdout '^example.com/x$'
```

----------------------------------------

TITLE: Testing Package Staleness with go list and go install
DESCRIPTION: This script sets a custom GOCACHE directory and checks if a package is stale before and after installation. It first verifies that the package is marked as stale, then installs it, and finally confirms that after installation the package is no longer considered stale.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_stale.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GOCACHE=$WORK/cache
go list -f '{{.Stale}}' .
stdout true
go install .
go list -f '{{.Stale}}' .
stdout false
```

----------------------------------------

TITLE: Go Module Download Environment Setup
DESCRIPTION: Sets up the environment for Go module testing by enabling Go modules
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Setting Go Module Environment Variable (Shell)
DESCRIPTION: This command sets the `GO111MODULE` environment variable to `on`, ensuring that the subsequent Go commands operate in module-aware mode.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badzip.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Internal Package Definition
DESCRIPTION: A minimal Go file that defines an internal package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_internal.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package internal
```

----------------------------------------

TITLE: Testing Float Fuzzing in Go
DESCRIPTION: This fuzz test function demonstrates Go's fuzzing capabilities with float inputs. It panics when the input is not 0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_13

LANGUAGE: Go
CODE:
```
func FuzzFloat(f *testing.F) {
	f.Fuzz(func(t *testing.T, a float64) {
		if a != 0 {
			panic("this input caused a crash!")
		}
	})
}
```

----------------------------------------

TITLE: Main Module Definition
DESCRIPTION: Root go.mod file defining the chiral module and its dependencies on left and right modules with local replacements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tagged_import_cycle.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/chiral

go 1.14

require (
	example.com/left v0.1.0
	example.com/right v0.1.0
)

replace (
	example.com/left => ./left
	example.com/right => ./right
)
```

----------------------------------------

TITLE: Defining network-related structs in Go for Darwin ARM64
DESCRIPTION: This snippet defines structures related to network operations, including Cmsghdr, ICMPv6Filter, IPv6MTUInfo, and Inet4Pktinfo.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_124

LANGUAGE: Go
CODE:
```
type Cmsghdr struct {
    Len uint32
    Level int32
    Type int32
}

type ICMPv6Filter struct {
    Filt [8]uint32
}

type IPv6MTUInfo struct {
    Addr RawSockaddrInet6
    Mtu uint32
}

type Inet4Pktinfo struct {
    Addr [4]uint8
    Ifindex uint32
    Spec_dst [4]uint8
}

type Inet6Pktinfo struct {
    Addr [16]uint8
    Ifindex uint32
}
```

----------------------------------------

TITLE: Go Module Q v1.0.5 Implementation
DESCRIPTION: Module Q version 1.0.5 implementation that imports module R. Includes go.mod file with dependency on module R v1.0.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module example.com/q

go 1.18

require example.com/r v1.0.0
```

LANGUAGE: go
CODE:
```
package q

import _ "example.com/r"
```

----------------------------------------

TITLE: Testing Internal Scope Preservation with Module Replacement
DESCRIPTION: Sets the module path to `golang.org/notx`, then uses `go mod edit -replace` to replace `golang.org/x/internal` with a local copy (`./replace/golang.org/notx/internal`). It then gets `./throughdep`. This test verifies that even when `golang.org/x/internal` is replaced, its internal nature relative to the original path (`golang.org/x/...`) should be maintained.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_8

LANGUAGE: shell
CODE:
```
# Replacing an internal module should keep it internal to the same paths.
go mod edit -module=golang.org/notx
go mod edit -replace golang.org/x/internal=./replace/golang.org/notx/internal
go get ./throughdep
```

----------------------------------------

TITLE: Testing Go Module Case Sensitivity with Environment Setup and Module Commands
DESCRIPTION: A test script that sets up the Go environment with modules enabled and runs various commands to test how Go handles case sensitivity in import paths. It verifies that 'rsc.io/QUOTE' is treated as equivalent to 'rsc.io/quote' but maintains case in paths.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_case.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

go get
go list -m all
stdout '^rsc.io/quote v1.5.2'
stdout '^rsc.io/QUOTE v1.5.2'

go list -f 'DIR {{.Dir}} DEPS {{.Deps}}' rsc.io/QUOTE/QUOTE
stdout 'DEPS.*rsc.io/quote'
stdout 'DIR.*!q!u!o!t!e'

go get rsc.io/QUOTE@v1.5.3-PRE
go list -m all
stdout '^rsc.io/QUOTE v1.5.3-PRE'

go list -f '{{.Dir}}' rsc.io/QUOTE/QUOTE
stdout '!q!u!o!t!e@v1.5.3-!p!r!e'
```

----------------------------------------

TITLE: Test Package with Main Import
DESCRIPTION: Test file attempting to import main package from a standard package test file, which should fail
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_main.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p2

import (
	"testing"
	xmain "x"
)

var _ = xmain.X

func TestFoo(t *testing.T) {}
```

----------------------------------------

TITLE: Defining a Valid Go Package - Go
DESCRIPTION: This snippet creates a valid Go package named 'goodpkg' by declaring its package name at the top of the file. This setup is used by the test to validate proper package wildcard listing. The file does not output anything by itself and expects Go tooling to process it in the context of the project structure. No additional dependencies other than Go are needed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_wildcard_skip_nonmatching.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- goodpkg/x.go --\npackage goodpkg\n
```

----------------------------------------

TITLE: Formatted Go 1.21 Module with Exclude Block
DESCRIPTION: Properly formatted go.mod file for Go 1.21 showing semantic version sorting in exclude block.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_exclude_go121.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module x.x/y/z

go 1.21

exclude (
	x.1 v1.9.0
	x.1 v1.10.0
	x.1 v1.11.0
)
```

----------------------------------------

TITLE: Cgo file in onlycgo package
DESCRIPTION: This snippet demonstrates a Go file that uses cgo by importing the "C" package and defining an empty exported function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_11

LANGUAGE: Go
CODE:
```
package p

import "C"

func F() {}
```

----------------------------------------

TITLE: Defining Go Module with Replace Directive
DESCRIPTION: This Go module definition specifies the module name, Go version, and includes a replace directive to use a local directory for a dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_issue46867.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module golang.org/issue46867

go 1.17

replace example.net/m v0.1.0 => ./m

require example.net/m v0.1.0
```

----------------------------------------

TITLE: Testing 'go mod download' with GOTOOLCHAIN=auto outside a module
DESCRIPTION: Tests that 'go mod download' with GOTOOLCHAIN=auto correctly switches to a newer toolchain when needed outside a module context.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
env GOTOOLCHAIN=auto
go mod download rsc.io/needgo121@latest rsc.io/needgo122@latest rsc.io/needgo123@latest rsc.io/needall@latest
stderr '^go: rsc.io/needall@v0.0.1 requires go >= 1.23; switching to go1.23.9$'
! stderr '\(running'
```

----------------------------------------

TITLE: Testing Integer Fuzzing in Go
DESCRIPTION: This function tests Go's fuzzing capabilities with integer inputs. It panics when the input is not 0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_10

LANGUAGE: Go
CODE:
```
func FuzzInt(f *testing.F) {
	f.Add(0)
	f.Fuzz(func(t *testing.T, a int) {
		if a != 0 {
			panic("this input caused a crash!")
		}
	})
}
```

----------------------------------------

TITLE: New Package Implementation
DESCRIPTION: Main package implementing 'new' with dependency on p2 subpackage
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_legacy_mod.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package new

import _ "new/v2/p2"
```

----------------------------------------

TITLE: Declaring a Go Package - Go
DESCRIPTION: This snippet is a minimal Go source file that declares the package 'x'. It lacks any functions, types, or variables and acts as a placeholder. Required for ensuring that the subdirectory 'sub/x/' is recognized as a valid Go package by tooling and for test coverage of module and package detection. No dependencies, imports, or code logic are present.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_v1.0.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package x
```

----------------------------------------

TITLE: Testing Quote Package Functions in Go
DESCRIPTION: Test suite for the quote package that verifies the output of all four quote functions. Includes environment setup for locale and individual test cases for each function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.1.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package quote

import (
	"os"
	"testing"
)

func init() {
	os.Setenv("LC_ALL", "en")
}

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory, share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}

func TestOpt(t *testing.T) {
	opt := "If a program is too slow, it must have a loop."
	if out := Opt(); out != opt {
		t.Errorf("Opt() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Getting Non-Excluded Module Version
DESCRIPTION: Demonstrates successful retrieval of a non-excluded module version using 'go get' command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_5

LANGUAGE: Shell
CODE:
```
cp go.exclude.mod.orig go.exclude.mod
go get -modfile=go.exclude.mod rsc.io/quote@v1.5.1
stderr 'rsc.io/quote v1.5.1'
```

----------------------------------------

TITLE: Creating Development Branch and Beta Tag
DESCRIPTION: Creates a development branch v3.0.0-devel, checks it out, reverts package file to v0.1.0 version, commits changes, and tags it as v4.0.0-beta.1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
git branch 'v3.0.0-devel'
git checkout 'v3.0.0-devel'
git checkout v0.1.0 pkg/pkg.go
git commit -a -m 'pkg: remove panic'
git tag v4.0.0-beta.1
```

----------------------------------------

TITLE: Reflect package Map iteration methods in Go
DESCRIPTION: Methods and types for iterating over maps using reflection in the reflect package, including the MapIter struct and MapRange method.
SOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
method (*MapIter) Key() Value
method (*MapIter) Next() bool
method (*MapIter) Value() Value
method (Value) MapRange() *MapIter
type MapIter struct
```

----------------------------------------

TITLE: Implementing Localized Text Management in Go
DESCRIPTION: Implementation of text struct and associated methods for managing and finding localized text based on language preferences. Includes RTL text handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.99.99.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
type text struct {
    byTag   map[string]string
    matcher language.Matcher
}

func newText(s string) *text {
    t := &text{
        byTag: make(map[string]string),
    }
    var tags []language.Tag
    for _, line := range strings.Split(s, "\n") {
        line = strings.TrimSpace(line)
        if line == "" {
            continue
        }
        f := strings.Split(line, ": ")
        if len(f) != 3 {
            continue
        }
        tag := language.Make(f[1])
        tags = append(tags, tag)
        t.byTag[tag.String()] = f[2]
    }
    t.matcher = language.NewMatcher(tags)
    return t
}

func (t *text) find(prefs []language.Tag) string {
    tag, _, _ := t.matcher.Match(prefs...)
    s := t.byTag[tag.String()]
    if strings.HasPrefix(s, "RTL ") {
        s = "\u200F" + strings.TrimPrefix(s, "RTL ") + "\u200E"
    }
    return s
}
```

----------------------------------------

TITLE: Listing and Validating Go Test-Only Packages with go list - Shell
DESCRIPTION: This shell script configures Go module support, invokes 'go list' with flags to collect information about compiled and test packages, and asserts expected output for regression and module-field behaviors. The script is intended to validate that 'go list' correctly handles test and test-only packages, echoing lines to stdout and checking against issue-specific output expectations. Dependencies: the Go toolchain, a valid Go module, and access to the specified source files. Inputs are minimal Go module files; outputs are stdout lines, validated using regex patterns.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_test.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

# go list -compiled -test must handle test-only packages
# golang.org/issue/27097.
go list -compiled -test
stdout -count=4 '^.' # 4 lines
stdout '^m$'
stdout '^m\\.test$'
stdout '^m [m\\.test]$'
stdout '^m_test [m\\.test]$'

# https://golang.org/issue/39974: test packages should have the Module field populated.
go list -test -f '{{.ImportPath}}{{with .Module}}: {{.Path}}{{end}}'
stdout -count=4 '^.' # 4 lines
stdout '^m: m$'
stdout '^m\\.test: m$'
stdout '^m [m\\.test]: m$'
stdout '^m_test [m\\.test]: m$'
```

----------------------------------------

TITLE: Go File Importing golang.org/x/text/language
DESCRIPTION: This Go file imports the golang.org/x/text/language package as a blank import, used to test direct dependency behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_indirect.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
package x
import _ "golang.org/x/text/language"
```

----------------------------------------

TITLE: Testing Executable Name Output in Go
DESCRIPTION: Go program that prints the base name of the executable being run using filepath.Base() and os.Args[0]. Used to verify the naming behavior of temporary executables created by 'go run' command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_set_executable_name.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main
import(
	"os"
	"path/filepath"
)
func main() {
	println(filepath.Base(os.Args[0]))
}
```

----------------------------------------

TITLE: Testing Quote Package Functions
DESCRIPTION: Test file for the quote package that verifies each function returns the expected string. It sets the LC_ALL environment variable to ensure consistent output across different locales.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180710144737-5d9f230bcfba.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package quote

import (
	"os"
	"testing"
)

func init() {
	os.Setenv("LC_ALL", "en")
}

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory, share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}

func TestOpt(t *testing.T) {
	opt := "If a program is too slow, it must have a loop."
	if out := Opt(); out != opt {
		t.Errorf("Opt() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Code Generation Test in Go
DESCRIPTION: This Go file contains a code generation directive. It uses the //go:generate comment to specify that the 'env' command should be run during code generation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_env.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main

//go:generate env
```

----------------------------------------

TITLE: Lazy Module Definition
DESCRIPTION: Configuration for the lazy module that requires incompatible v1.0.0 and excludes v2.0.0+incompatible.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_irrelevant.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.net/lazy

go 1.17

exclude example.com/retract/incompatible v2.0.0+incompatible

require (
	example.com/retract/incompatible v1.0.0
	example.net/requireincompatible v0.1.0
)
```

----------------------------------------

TITLE: Defining Go Module in go.mod File
DESCRIPTION: Defines a Go module named 'm' with Go version 1.12 in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module m
go 1.12
```

----------------------------------------

TITLE: Add Module Dependency
DESCRIPTION: Command to add rsc.io/quote module as a dependency with specific version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_disabled.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go mod edit -require rsc.io/quote@v1.5.2
```

----------------------------------------

TITLE: Go Test Coverage Implementation
DESCRIPTION: Test file implementing coverage measurement verification using testing.Coverage(). Tests that coverage values are non-zero and increase as more code is executed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/testing_coverage.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package hello

import "testing"

func TestTestCoverage(t *testing.T) {
	Hello()
	C1 := testing.Coverage()
	foo(29)
	C2 := testing.Coverage()
	if C1 == 0.0 || C2 == 0.0 {
		t.Errorf("unexpected zero values C1=%f C2=%f", C1, C2)
	}
	if C1 >= C2 {
		t.Errorf("testing.Coverage() not monotonically increasing C1=%f C2=%f", C1, C2)
	}
}
```

----------------------------------------

TITLE: Main Package Implementation with Import Dependencies
DESCRIPTION: Simple main package implementation that imports packages with assembly and cgo dependencies to test different TOOLEXEC_IMPORTPATH values.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/toolexec.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	_ "test/main/withasm"
	_ "test/main/withcgo"
)

func main() {}
```

----------------------------------------

TITLE: Download and Validate V2 Module With go.mod
DESCRIPTION: This snippet tests a Go module with version 2 which includes an explicit go.mod entry. The test involves copying a go.mod file and verifying the module setup using "go list -deps".
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_multirepo.txt#2025-04-22_snippet_2

LANGUAGE: Bash
CODE:
```
cp tmp/use_v2.mod go.mod
go list -deps -f {{.Dir}}
stdout 'pkg[\/]mod[\/]rsc.io[\/]quote[\/]v2@v2.0.1$'
```

----------------------------------------

TITLE: Module B Configuration with Local Dependency
DESCRIPTION: Go module configuration for example.com/b that requires and replaces example.com/c with a local version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_why_download_graph.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
go 1.18

module example.com/b

require example.com/c v1.0.0
replace example.com/c => ../c
```

----------------------------------------

TITLE: Defining x1 as a Module with Direct Dependency on i - mod
DESCRIPTION: The x1 go.mod file defines x as a module at this directory and specifies a direct dependency on i v0.1.0. This supports scenarios where a submodule has both a name and required dependencies, contributing to the overall test of resolving multiple versions and dependency chains.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_9

LANGUAGE: mod
CODE:
```
module x
go1.13
require i v0.1.0
```

----------------------------------------

TITLE: Basic HTTP Authentication Authenticator in Go
DESCRIPTION: A simple Go program that outputs HTTP authentication credentials in the format expected by the GOAUTH mechanism. It provides Basic authentication credentials (username: aladdin, password: opensesame) encoded in base64.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_userauth.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import "fmt"

func main() {
	fmt.Printf("https://vcs-test.golang.org\n\nAuthorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l\n\n")
}
```

----------------------------------------

TITLE: Defining Module A
DESCRIPTION: Specifies the module configuration for the 'example.com/a' module used in the tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
module example.com/a
go 1.14
```

----------------------------------------

TITLE: Testing Goroutine Leaks in Parallel Subtests in Go
DESCRIPTION: This test function checks that goroutines for completed parallel subtests exit immediately rather than blocking until earlier subtests finish. It creates a slow test that depends on faster tests completing, while monitoring goroutine behavior during panic conditions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_finished_subtest_goroutines.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
func TestTestingGoroutineLeak(t *testing.T) {
	debug.SetTraceback("all")

	var wg sync.WaitGroup
	const nFast = 10

	t.Run("slow", func(t *testing.T) {
		t.Parallel()
		wg.Wait()
		for i := 0; i < nFast; i++ {
			// If the subtest goroutines are going to park on the channel
			// send, allow them to park now. If they're not going to park,
			// make sure they have had a chance to run to completion so
			// that they aren't spuriously parked when we panic.
			runtime.Gosched()
		}
		panic("slow failure")
	})

	wg.Add(nFast)
	for i := 0; i < nFast; i++ {
		t.Run(fmt.Sprintf("leaky%d", i), func(t *testing.T) {
			t.Parallel()
			wg.Done()
		})
	}
}
```

----------------------------------------

TITLE: Defining Go Module Configuration
DESCRIPTION: A go.mod file defining a module named 'm' with Go version 1.16 as the minimum requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_hello_pkg.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Go Module Declaration
DESCRIPTION: Go module definition for the inlines test package. Specifies the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_shorten_pkg.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module inlines

go 1.21
```

----------------------------------------

TITLE: Testing Go Test Command with GOFLAGS Environment Variable
DESCRIPTION: This snippet tests how the 'go test' command interacts with the GOFLAGS environment variable. It verifies that flags from GOFLAGS are forwarded to the test binary and that command-line arguments can override GOFLAGS.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flags.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
env GOFLAGS='-test.timeout=24h0m0s -count=1'
go test -v -x ./x
stdout 'timeout: 24h0m0s$'
stderr '-test.count=1'

env GOFLAGS='-timeout=24h0m0s -count=1'
go test -v -x ./x
stdout 'timeout: 24h0m0s$'
stderr '-test.count=1'

go test -v -x -timeout=25h0m0s ./x
stdout 'timeout: 25h0m0s$'
stderr '-test.count=1'

go test -v -x -test.timeout=26h0m0s ./x
stdout 'timeout: 26h0m0s$'
stderr '-test\.timeout=26h0m0s'
! stderr 'timeout=24h0m0s'
stderr '-test.count=1'
```

----------------------------------------

TITLE: Path Resolution Test Program in Go
DESCRIPTION: Program that checks if exec.LookPath("go") returns the expected path from GOROOT/bin. Verifies proper PATH environment variable behavior for Go runtime execution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_goroot_PATH.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
)

func main() {
	got, err := exec.LookPath("go")
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	want := filepath.Join(os.Getenv("GOROOT"), "bin", "go" + os.Getenv("GOEXE"))
	if got != want {
		fmt.Printf(`exec.LookPath("go") = %q; want %q\n`, got, want)
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: Initial Go Workspace File
DESCRIPTION: The initial go.work file before running the test commands. It only specifies the Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_symlink_issue68383.txt#2025-04-22_snippet_2

LANGUAGE: gomod
CODE:
```
go 1.24
```

----------------------------------------

TITLE: Testing Internal Scope Preservation with Vendor Replacement
DESCRIPTION: Changes the replacement for `golang.org/x/internal` to use a path simulating vendoring (`./vendor/golang.org/x/internal`) and gets `./throughdep`. This further tests that replacements, even with different path structures, maintain the original internal package scoping rules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_10

LANGUAGE: shell
CODE:
```
go mod edit -replace golang.org/x/internal=./vendor/golang.org/x/internal
go get ./throughdep
```

----------------------------------------

TITLE: Go Generate with Echo Command
DESCRIPTION: Go source file containing a go:generate directive that executes the echo command. The package imports itself demonstrating a cyclic import pattern.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_bad_imports.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
//go:generate echo hello world

package gencycle

import _ "gencycle"
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_json.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module m
go 1.21
```

----------------------------------------

TITLE: Successful Import Module (Go)
DESCRIPTION: Test file showing successful import of an existing package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_lookup.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package use

import _ "example.com/join/subpkg"
```

----------------------------------------

TITLE: Quote Package with External Dependencies
DESCRIPTION: Quote package implementation with dependencies on rsc.io/sampler and golang.org/x/text/language packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_replace.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package quote

import (
	_ "rsc.io/sampler"
	_ "golang.org/x/text/language"
)
```

----------------------------------------

TITLE: Go Module Checksum File
DESCRIPTION: A go.sum file containing the cryptographic checksum for the dependency's go.mod file. This ensures reproducible builds and is part of the standard Go modules system.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused_only.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
example.com v1.0.0/go.mod h1:WRiieAqDBb1hVdDXLLdxNtCDWNfehn7FWyPC5Oz2vB4=
```

----------------------------------------

TITLE: Go Fuzz Test Commands
DESCRIPTION: Shell commands for executing various fuzz test scenarios including basic test runs, targeted fuzzing, and pattern matching tests. Demonstrates different command line flags and their effects on test execution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_match.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
env GOCACHE=$WORK/cache

go test standalone_fuzz_test.go
go test -fuzz Fuzz -fuzztime 1x standalone_fuzz_test.go
go test -fuzz ThisWillNotMatch -fuzztime 1x standalone_fuzz_test.go
go test -run Fuzz standalone_fuzz_test.go
go test -run ThisWillNotMatch standalone_fuzz_test.go
```

----------------------------------------

TITLE: Package B Module
DESCRIPTION: Simple Go package used as a dependency in tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_git.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package b
```

----------------------------------------

TITLE: Handling Version Constraints with GOTOOLCHAIN
DESCRIPTION: This snippet shows how version constraints are enforced when GOTOOLCHAIN is set to 'local'. It demonstrates an attempt to upgrade Go version that fails due to version incompatibility.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
env TESTGO_VERSION=go1.22.1
env GOTOOLCHAIN=local
! go get go@1.22.3
```

----------------------------------------

TITLE: Adding LoadLocationFromTZData function to time package
DESCRIPTION: Implements a function to load time zone location data directly from timezone data bytes. This allows creating Location objects without relying on the system's timezone database.
SOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_14

LANGUAGE: go
CODE:
```
pkg time, func LoadLocationFromTZData(string, []uint8) (*Location, error)
```

----------------------------------------

TITLE: Go Workspace Configuration
DESCRIPTION: Definition of go.work file specifying Go version 1.18
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_missing_module.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
go 1.18
```

----------------------------------------

TITLE: Excluding cmd/vendor Packages from Wildcard Match with Go List in Shell
DESCRIPTION: Executes `go list cmd/...` to list all packages under the `cmd` directory using a wildcard pattern. It checks that standard command packages (e.g., `cmd/compile`) are included (`stdout cmd/compile`) but asserts that packages within the specific `cmd/vendor` subdirectory are explicitly excluded (`! stdout cmd/vendor`) from the results of this wildcard match.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_std.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
# However, vendored packages should not match wildcard patterns beginning with cmd.
go list cmd/...
stdout cmd/compile
! stdout cmd/vendor
```

----------------------------------------

TITLE: Compiler Behavior Control Flags
DESCRIPTION: Flags to modify compiler behavior like error handling and pointer checking
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ go tool compile -h file.go
$ go build -gcflags=-d=checkptr=2
```

----------------------------------------

TITLE: Go Module File Definition
DESCRIPTION: A minimal Go module file used for testing. It specifies go version 1.1 as a baseline.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
module m
go 1.1
```

----------------------------------------

TITLE: Module B3 Definition
DESCRIPTION: Module definition for example.com/b v0.3.0 which requires example.com/c v0.2.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
module example.com/b

go 1.17

require example.com/c v0.2.0
```

----------------------------------------

TITLE: Test consumer module
DESCRIPTION: The go.mod file for the test consumer module that will import the test repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_issue53955.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
module m

go 1.18
```

----------------------------------------

TITLE: Listing Test Packages with go list -test all
DESCRIPTION: Demonstrates that 'go list -test all' is equivalent to 'go list -test $(go list all)' and includes tests for every package in 'all'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_4

LANGUAGE: Bash
CODE:
```
go list -test -f $PKGFMT example.com/a example.com/b example.com/c example.com/d example.com/main example.com/main/testonly example.com/q example.com/r example.com/s example.com/t example.com/u example.com/w example.com/x
cp stdout list-test-explicit.txt

go list -test -f $PKGFMT all
cmp stdout list-test-explicit.txt
```

----------------------------------------

TITLE: Setting up environment and running go mod tidy
DESCRIPTION: Sets up the Go environment, changes directory, and runs 'go mod tidy' to download modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fileproxy_vcs_missing_issue51589.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
env GOPATH=$WORK/gopath
cd $WORK/x
go mod tidy
```

----------------------------------------

TITLE: Bypassing Sumdb with GONOSUMDB in Go Module Fetching
DESCRIPTION: Demonstrates how to use GONOSUMDB to bypass sumdb checks for specific packages. Also shows the use of GOPRIVATE and GONOPROXY in conjunction with go get command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gonoproxy.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
env GONOSUMDB='*/quote,*/*mple*,golang.org/x'
go get rsc.io/quote
rm go.sum
env GOPRIVATE='*/quote,*/*mple*,golang.org/x'
env GONOPROXY=none # that is, proxy all despite GOPRIVATE
go get rsc.io/quote
```

----------------------------------------

TITLE: Declaring Go Module Metadata - Go
DESCRIPTION: This go.mod snippet declares the module path as 'example.com/retract/rationale' and specifies that Go version 1.14 or higher is required. It is the starting point for Go dependency management, instructing Go tools on how to resolve imports and maintain compatibility. The file does not specify explicit dependencies, focusing solely on module identity and baseline Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-block.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/retract/rationale

go 1.14
```

----------------------------------------

TITLE: Module-level Internal Subpackage Definition
DESCRIPTION: A minimal Go file that defines a subpackage within a module-level internal package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_internal.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package z
```

----------------------------------------

TITLE: Adding First Go Package and Creating Version Tags
DESCRIPTION: Adds a simple Go package file and creates version tags v0.0.0, v1.0.0, and a custom tag 'mytag'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
at 2018-02-19T18:10:06-05:00
mkdir pkg
echo 'package p // pkg/p.go'
cp stdout pkg/p.go
git add pkg/p.go
git commit -m 'add pkg/p.go'
git tag v0.0.0
git tag v1.0.0
git tag mytag
```

----------------------------------------

TITLE: Go Checksum File
DESCRIPTION: This snippet shows the go.sum file content, containing the checksum for the dependent module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_trimpath.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
example.com/stack v1.0.0 h1:IEDLeew5NytZ8vrgCF/QVem3H3SR3QMttdu9HfJvk9I=
example.com/stack v1.0.0/go.mod h1:7wFEbaV5e5O7wJ8aBdqQOR//UXppm/pwnwziMKViuI4=
```

----------------------------------------

TITLE: Go Module Basic Structure
DESCRIPTION: Basic Go module configuration files defining the main module and its dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_replaced.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com

go 1.16
```

----------------------------------------

TITLE: Main Module Configuration
DESCRIPTION: Main go.mod file defining module dependencies and replacements for test versions of example.net/a and example.net/b modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchcycle.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example

go 1.16

require example.net/a v0.1.0

replace (
	example.net/a v0.1.0 => ./a10
	example.net/a v0.1.1 => ./a11
	example.net/a v0.2.0 => ./a20
	example.net/b v0.1.0 => ./b10
)
```

----------------------------------------

TITLE: Package B with Dot Import from Package A
DESCRIPTION: Defines package 'b' which imports package 'a' using a dot import, allowing direct access to functions from package 'a' without qualification.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dot_import.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package b

import . "coverdot/a"

func G() { F() }
```

----------------------------------------

TITLE: Executable Main Package
DESCRIPTION: Simple executable Go main package with empty main function for testing local package builds.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_multi_main.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Local Module Definition
DESCRIPTION: Defines a local module with a dependency on a deprecated module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecated.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module local

go 1.17

require example.com/deprecated/b v1.0.0
```

----------------------------------------

TITLE: Defining Go Module in Go
DESCRIPTION: This go.mod file defines the module 'x' and specifies the Go version 1.12 as a requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade_pseudo.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
module x

go 1.12
```

----------------------------------------

TITLE: Module A Implementation
DESCRIPTION: Implementation of module 'a' that imports and uses package 'p'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_relevant_dependency.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package a

import (
	"example.com/p"
)

func Foo() {
	p.P()
}
```

----------------------------------------

TITLE: Testing Exit with Status 0 in TestMain
DESCRIPTION: This snippet tests a Go package where TestMain exits with status 0. It verifies that the test is marked as passing using both go test -json and go tool test2json commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
go test -json ./mainexit0
stdout '"Action":"pass"'
! stdout '"Action":"fail"'

go tool test2json ./mainexit0.exe
stdout '"Action":"pass"'
! stdout '"Action":"fail"'
```

----------------------------------------

TITLE: Simple Package Z1 Implementation
DESCRIPTION: Basic Go package Z1 with imports for packages y and z2.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gcflags_patterns.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package z1
import _ "y"
import _ "z2"
```

----------------------------------------

TITLE: Reinvocation Authenticator for HTTP Requests in Go
DESCRIPTION: A Go program that handles reinvocation of authentication requests. It waits for HTTP 401 responses, processes them, and then provides proper authentication credentials for vcs-test.golang.org. This demonstrates how authenticators can handle multiple authentication attempts.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_userauth.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import(
	"bufio"
	"flag"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
)

func main() {
	flag.Parse()
	// wait for re-invocation
	if !strings.HasPrefix(flag.Arg(0), "https://vcs-test.golang.org") {
		return
	}
	input, err := io.ReadAll(os.Stdin)
	if err != nil {
		log.Fatal("unexpected error while reading from stdin")
	}
	reader := bufio.NewReader(strings.NewReader(string(input)))
	resp, err := http.ReadResponse(reader, nil)
	if err != nil {
		log.Fatal("could not parse HTTP response")
	}
	if resp.StatusCode != 401 {
		log.Fatal("expected 401 error code")
	}
	fmt.Printf("https://vcs-test.golang.org\n\nAuthorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l\n\n")
}
```

----------------------------------------

TITLE: Berkeley Packet Filter Operation Constants in Go for NetBSD-arm64
DESCRIPTION: Constants defining Berkeley Packet Filter (BPF) operations, instructions, and configuration parameters for NetBSD ARM64. These BPF_* constants are used for packet filtering operations within the syscall package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_117

LANGUAGE: Go
CODE:
```
const BPF_A = 16
const BPF_ABS = 32
const BPF_ADD = 0
const BPF_ALIGNMENT32 = 4
const BPF_ALIGNMENT = 8
const BPF_ALU = 4
const BPF_AND = 80
const BPF_B = 16
const BPF_DFLTBUFSIZE = 1048576
const BPF_DIV = 48
const BPF_H = 8
const BPF_IMM = 0
const BPF_IND = 64
const BPF_JA = 0
const BPF_JEQ = 16
const BPF_JGE = 48
const BPF_JGT = 32
const BPF_JMP = 5
const BPF_JSET = 64
const BPF_K = 0
const BPF_LD = 0
const BPF_LDX = 1
const BPF_LEN = 128
const BPF_LSH = 96
const BPF_MAJOR_VERSION = 1
const BPF_MAXBUFSIZE = 16777216
const BPF_MAXINSNS = 512
const BPF_MEM = 96
const BPF_MEMWORDS = 16
const BPF_MINBUFSIZE = 32
const BPF_MINOR_VERSION = 1
const BPF_MISC = 7
const BPF_MSH = 160
const BPF_MUL = 32
const BPF_NEG = 128
const BPF_OR = 64
const BPF_RELEASE = 199606
const BPF_RET = 6
const BPF_RSH = 112
const BPF_ST = 2
const BPF_STX = 3
const BPF_SUB = 16
```

----------------------------------------

TITLE: Printing Build and Dependency Information Using debug.ReadBuildInfo - Go
DESCRIPTION: This Go program prints the path and version details of the main module and its dependencies using debug.ReadBuildInfo. It outputs replacement information when modules are overridden using the replace directive in go.mod. Dependencies include the standard library, as well as any modules listed in go.mod. Inputs and outputs are managed via standard output. The output provides insights into the full dependency tree and module replacement resolution at build time.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_printversion_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package main

import (
	"fmt"
	"os"
	"runtime/debug"

	_ "example.com/version"
)

func main() {
	info, _ := debug.ReadBuildInfo()
	fmt.Fprintf(os.Stdout, "path is %s\n", info.Path)
	fmt.Fprintf(os.Stdout, "main is %s %s\n", info.Main.Path, info.Main.Version)
	if r := info.Main.Replace; r != nil {
		fmt.Fprintf(os.Stdout, "\t(replaced by %s %s)\n", r.Path, r.Version)
	}
	for _, m := range info.Deps {
		fmt.Fprintf(os.Stdout, "using %s %s\n", m.Path, m.Version)
		if r := m.Replace; r != nil {
			fmt.Fprintf(os.Stdout, "\t(replaced by %s %s)\n", r.Path, r.Version)
		}
	}
}
```

----------------------------------------

TITLE: Go Module Definition for Test
DESCRIPTION: A simple Go module definition used as part of the testing environment for the symlink test case.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_symlink_issue68383.txt#2025-04-22_snippet_1

LANGUAGE: gomod
CODE:
```
module example.com/y

go 1.24
```

----------------------------------------

TITLE: Package with Embedded File Declarations
DESCRIPTION: Package implementing embedded file handling with go:embed directives for various file locations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_embed.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package a

import _ "embed"

//go:embed samedir_embed.txt
var sameDir string

//go:embed subdir/embed.txt
var subDir string

func Str() string {
	return sameDir + subDir
}
```

----------------------------------------

TITLE: Testing Error-Tolerant Mode for Go Module Commands
DESCRIPTION: This script tests the error-tolerant '-e' flag for 'go mod tidy' and 'go mod vendor' commands. It demonstrates that with this flag, the commands will log errors but still succeed, updating go.mod or creating the vendor directory as appropriate even when dependencies are missing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_e.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
# 'go mod tidy' still logs the errors, but succeeds and updates go.mod.

go mod tidy -e
stderr -count=4 'cannot find module providing package'
cmp go.mod.final go.mod


# 'go mod vendor -e' still logs the errors, but creates a vendor directory
# and exits with status 0.
# 'go mod vendor -e' does not update go.mod and will not vendor packages that
# would require changing go.mod, for example, by adding a requirement.
cp go.mod.orig go.mod
go mod vendor -e
stderr -count=2 'no required module provides package'
stderr '^go: example.com/untidy imports\n\texample.net/m: module example.net/m provides package example.net/m and is replaced but not required; to add it:\n\tgo get example.net/m@v0.1.0$'
exists vendor/modules.txt
! exists vendor/example.net

go mod edit -require example.net/m@v0.1.0
go mod vendor -e
stderr -count=3 'no required module provides package'
exists vendor/modules.txt
exists vendor/example.net/m/m.go
```

----------------------------------------

TITLE: Go module definition (Go)
DESCRIPTION: This snippet defines the Go module for the project. It specifies the module name as 'ldflag'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/ldflag.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module ldflag
```

----------------------------------------

TITLE: Testing Go Toolchain Switching with Shell Commands
DESCRIPTION: A series of shell commands that test Go's ability to switch toolchains when dependencies require newer Go versions. It tests 'go mod tidy' and 'go get' with different GOTOOLCHAIN settings.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env TESTGO_VERSION=go1.21.0
env TESTGO_VERSION_SWITCH=switch

cp go.mod go.mod.orig

# tidy reports needing 1.22.0 for b1
env GOTOOLCHAIN=local
! go mod tidy
stderr '^go: example imports\n\texample.net/b: module ./b1 requires go >= 1.22.0 \(running go 1.21.0; GOTOOLCHAIN=local\)$'
env GOTOOLCHAIN=auto
go mod tidy

cmp stderr tidy-stderr.want
cmp go.mod go.mod.tidy

cp go.mod.orig go.mod
env GOTOOLCHAIN=local
! go get -v .
stderr '^go: example.net/b@v0.1.0: module ./b1 requires go >= 1.22.0 \(running go 1.21.0; GOTOOLCHAIN=local\)$'
env GOTOOLCHAIN=auto
go get -v .
cmp stderr get-v-stderr.want
cmp go.mod go.mod.tidy

cp go.mod.orig go.mod
env GOTOOLCHAIN=local
! go get -u -v .
stderr '^go: example.net/a@v0.2.0: module ./a2 requires go >= 1.22.0 \(running go 1.21.0; GOTOOLCHAIN=local\)$'
env GOTOOLCHAIN=auto
go get -u -v .
cmp stderr get-u-v-stderr.want
cmp go.mod go.mod.upgraded
```

----------------------------------------

TITLE: Testing Localized 'Hello' Function in Go
DESCRIPTION: This snippet contains test cases for the 'Hello' function, checking if it returns the correct localized greeting based on the provided language preferences.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.3.0.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
var helloTests = []struct {
	prefs []language.Tag
	text  string
}{
	{
		[]language.Tag{language.Make("en-US"), language.Make("fr")},
		"Hello, world.",
	},
	{
		[]language.Tag{language.Make("fr"), language.Make("en-US")},
		"Bonjour le monde.",
	},
}

func TestHello(t *testing.T) {
	for _, tt := range helloTests {
		text := Hello(tt.prefs...)
		if text != tt.text {
			t.Errorf("Hello(%v) = %q, want %q", tt.prefs, text, tt.text)
		}
	}
}
```

----------------------------------------

TITLE: Re-downloading and Verifying Go Modules
DESCRIPTION: This snippet demonstrates re-downloading a Go module using 'go mod download', which removes the .partial file and extracts the module properly. It then shows successful 'go list' operations and module verification.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_partial.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
# 'go mod download' should re-extract the module and remove the .partial file.
go mod download -modcacherw rsc.io/quote
! exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.2.partial
exists $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/go.mod

# 'go list' should succeed.
go list $GOPATH/pkg/mod/rsc.io/quote@v1.5.2
stdout '^rsc.io/quote$'

# 'go list -m' should print the directory.
go list -m -f '{{.Dir}}' rsc.io/quote
stdout 'pkg[/\\]mod[/\\]rsc.io[/\\]quote@v1.5.2'

# go mod verify should fail if we delete a file.
go mod verify
rm $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/go.mod
! go mod verify
```

----------------------------------------

TITLE: Implementation of Package B with Test
DESCRIPTION: Package 'b' containing a Go implementation and test that imports packages 'a' and 'd'. It has a function BFunc() that combines values from imported packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_partial.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package b

import (
	"M/a"
	"M/d"
)

func BFunc() int {
	return -d.FortyTwo + a.AFunc()
}
```

LANGUAGE: go
CODE:
```
package b

import "testing"

func TestB(t *testing.T) {
	if BFunc() == 1010101 {
		t.Fatalf("bad!")
	}
}
```

----------------------------------------

TITLE: Implementing Main Functionality and Exported Function - Go
DESCRIPTION: This Go file defines a simple main package with a main function printing a message and an exported function 'Mainer' returning an integer. The key purpose is to provide code under test coverage measurement. No external dependencies are required, and 'Mainer' is a trivial implementation for demonstration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_main_import_path.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

func main() {
	println("hi mom")
}

func Mainer() int {
	return 42
}
```

----------------------------------------

TITLE: Testing TestMain with Zero Exit Status
DESCRIPTION: A Go test with TestMain that skips all tests by calling os.Exit(0). This is a valid pattern for conditionally skipping an entire test package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_exit.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package zero

import (
	"fmt"
	"os"
	"testing"
)

func TestMain(m *testing.M) {
	fmt.Println("skipping all tests")
	os.Exit(0)
}

func TestNotListed(t *testing.T) {}
```

----------------------------------------

TITLE: Attempting to Download Invalid Go Modules
DESCRIPTION: Executes a go get command to download multiple modules with known issues. The command is expected to fail, and the subsequent lines check for specific error messages in the stderr output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_filenames.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
! go get rsc.io/badfile1 rsc.io/badfile2 rsc.io/badfile3 rsc.io/badfile4 rsc.io/badfile5
! stderr 'unzip.*badfile1'
stderr 'unzip.*badfile2[\/]@v[\/]v1.0.0.zip:.*malformed file path "☺.go": invalid char ''☺'''
stderr 'unzip.*badfile3[\/]@v[\/]v1.0.0.zip: rsc.io[\/]badfile3@v1.0.0[\/]x\?y.go: malformed file path "x\?y.go": invalid char ''\?'''
stderr 'unzip.*badfile4[\/]@v[\/]v1.0.0.zip: rsc.io[\/]badfile4@v1.0.0[\/]x[\/]y.go: case-insensitive file name collision: "x/Y.go" and "x/y.go"'
stderr 'unzip.*badfile5[\/]@v[\/]v1.0.0.zip: rsc.io[\/]badfile5@v1.0.0[\/]x[\/]Y[\/]zz[\/]ww.go: case-insensitive file name collision: "x/y" and "x/Y"'
```

----------------------------------------

TITLE: Building Go Module with ldflags
DESCRIPTION: This snippet demonstrates how to use the `go build` command with `-ldflags` to set the "Text" variable in the "pkg" package at compile time. It builds the "linkx" executable and executes it to verify output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_link_x_import_path_escape.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go build -o linkx$GOEXE -ldflags -X=my.pkg.Text=linkXworked my.pkg/main
exec ./linkx$GOEXE
stderr '^linkXworked$'
```

----------------------------------------

TITLE: Go Main Package Implementation
DESCRIPTION: Main package implementation containing a Hello() function for output and a foo() function with nested loops for coverage testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/testing_coverage.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package hello

func Hello() {
	println("hello")
}

// contents not especially interesting, just need some code
func foo(n int) int {
	t := 0
	for i := 0; i < n; i++ {
		for j := 0; j < i; j++ {
			t += i ^ j
			if t == 1010101 {
				break
			}
		}
	}
	return t
}
```

----------------------------------------

TITLE: Basic Go Module Definition
DESCRIPTION: Basic go.mod file that defines a module 'x' with a direct dependency on patch.example.com/direct v1.0.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_upgrade_patch.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module x

require patch.example.com/direct v1.0.0
```

----------------------------------------

TITLE: Implementing a Simple Go Package (`go`)
DESCRIPTION: This Go code snippet defines a simple package named `pseudoupgrade`. It declares a single exported constant `X` with an integer value of 1. This serves as the basic implementation for the `example.com/pseudoupgrade` module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_pseudoupgrade_v0.0.0-20190430073000-30950c05d534.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package pseudoupgrade

const X = 1
```

----------------------------------------

TITLE: Importing Package 'c' for Side Effects in Package 'b' (Go)
DESCRIPTION: This Go source file defines package `b`. It imports the package `example.com/badchain/c` using a blank identifier (`_`), which executes the imported package's `init` functions but doesn't make its exported identifiers directly accessible in package `b`. This is used when an import is needed solely for its initialization side effects.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_b_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package b

import _ "example.com/badchain/c"
```

----------------------------------------

TITLE: Implementing Fuzz Test for Coverage Minimization in Go
DESCRIPTION: Defines a fuzz test that checks specific byte patterns. The test accepts input of two bytes and returns when it finds the pattern 'ab'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_dirty_cov.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
func FuzzCovMin(f *testing.F) {
	f.Add([]byte("aa"))
	f.Fuzz(func(t *testing.T, data []byte) {
		if len(data) == 2 && data[0] == 'a' && data[1] == 'b' {
			return
		}
	})
}
```

----------------------------------------

TITLE: Defining Quote Package in Go
DESCRIPTION: This snippet defines the quote package, which collects pithy sayings. It imports the v3 version of the same package and provides functions to return different types of quotes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162918-a91498bed0a7.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

import "rsc.io/quote/v3"

// Hello returns a greeting.
func Hello() string {
	return quote.HelloV3()
}

// Glass returns a useful phrase for world travelers.
func Glass() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return quote.GlassV3()
}

// Go returns a Go proverb.
func Go() string {
	return quote.GoV3()
}

// Opt returns an optimization truth.
func Opt() string {
	// Wisdom from ken.
	return quote.OptV3()
}
```

----------------------------------------

TITLE: Certificate Error and Signature Algorithm Constants in crypto/x509 - Go
DESCRIPTION: These constants and struct fields support error handling and the specification of signature algorithms in X.509 certificate validation and generation. NameMismatch is used as an InvalidReason when subject/common name mismatches occur; SHA256WithRSAPSS, SHA384WithRSAPSS, and SHA512WithRSAPSS define signature algorithms for certificates. The UnknownAuthorityError struct provides access to the problematic Certificate. Used by validation routines and user code handling certificate chains.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
const NameMismatch = 5
const SHA256WithRSAPSS = 13
const SHA384WithRSAPSS = 14
const SHA512WithRSAPSS = 15
```

LANGUAGE: Go
CODE:
```
const NameMismatch InvalidReason
const SHA256WithRSAPSS SignatureAlgorithm
const SHA384WithRSAPSS SignatureAlgorithm
const SHA512WithRSAPSS SignatureAlgorithm
```

LANGUAGE: Go
CODE:
```
type UnknownAuthorityError struct
UnknownAuthorityError.Cert *Certificate
```

----------------------------------------

TITLE: Configuring Go Workspace
DESCRIPTION: This snippet defines a go.work file that specifies the Go version and the directories to use in the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_work_versioned.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go 1.18

use (
	.
)
```

----------------------------------------

TITLE: Testing Quote Functions in Go
DESCRIPTION: Test suite for the quote package that verifies each function returns the expected string. The tests use the standard Go testing package and set the LC_ALL environment variable to ensure consistent behavior across different environments.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v2_v2.0.1.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package quote

import (
	"os"
	"testing"
)

func init() {
	os.Setenv("LC_ALL", "en")
}

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory, share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}

func TestOpt(t *testing.T) {
	opt := "If a program is too slow, it must have a loop."
	if out := Opt(); out != opt {
		t.Errorf("Opt() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Testing QUOTE Package Functions in Go
DESCRIPTION: This snippet contains test functions for the QUOTE package. It tests the HELLO, GLASS, GO, and OPT functions to ensure they return the expected uppercase quotes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_!q!u!o!t!e_v1.5.2.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package QUOTE

import (
	"os"
	"testing"
)

func init() {
	os.Setenv("LC_ALL", "en")
}

func TestHELLO(t *testing.T) {
	hello := "HELLO, WORLD"
	if out := HELLO(); out != hello {
		t.Errorf("HELLO() = %q, want %q", out, hello)
	}
}

func TestGLASS(t *testing.T) {
	glass := "I CAN EAT GLASS AND IT DOESN'T HURT ME."
	if out := GLASS(); out != glass {
		t.Errorf("GLASS() = %q, want %q", out, glass)
	}
}

func TestGO(t *testing.T) {
	go1 := "DON'T COMMUNICATE BY SHARING MEMORY, SHARE MEMORY BY COMMUNICATING."
	if out := GO(); out != go1 {
		t.Errorf("GO() = %q, want %q", out, go1)
	}
}

func TestOPT(t *testing.T) {
	opt := "IF A PROGRAM IS TOO SLOW, IT MUST HAVE A LOOP."
	if out := OPT(); out != opt {
		t.Errorf("OPT() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Benchmark validation test
DESCRIPTION: Go test file that validates the behavior of -benchtime 1x. It contains TestMain to ensure the benchmark was called and a benchmark function that verifies it runs only once with b.N=1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_1x.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package bench

import (
	"fmt"
	"os"
	"testing"
)

var called = false

func TestMain(m *testing.M) {
	m.Run()
	if !called {
		fmt.Println("benchmark never called")
		os.Exit(1)
	}
}

func Benchmark(b *testing.B) {
	if b.N > 1 {
		b.Fatalf("called with b.N=%d; want b.N=1 only", b.N)
	}
	if called {
		b.Fatal("called twice")
	}
	called = true
}
```

----------------------------------------

TITLE: Defining a Package in a Subdirectory (Go)
DESCRIPTION: This Go code snippet defines a package named 'sub'. It resides in a subdirectory named 'sub' within the 'example.com/incompatiblewithsub' module. This illustrates how packages can be organized within subdirectories of a Go module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_incompatiblewithsub_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package sub
```

----------------------------------------

TITLE: Building with Internal CGO and Checking for External Linking
DESCRIPTION: This segment tests building a program that uses internal CGO components. It modifies CGO_CFLAGS with various flags to observe when 'preferlinkext' is included in stderr, signalling the need for external linking. Notable flags include '-flto', '-fplugin', and '-fprofile-instr-generate', all of which prompt external linking.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_suspect_flag_force_external.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
go build -x -n -o dummy.exe ./usesInternalCgo
! stderr preferlinkext
env CGO_CFLAGS=-flto

```

----------------------------------------

TITLE: Listing Go Modules
DESCRIPTION: Lists all modules and checks for the presence of the insecure module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure.txt#2025-04-22_snippet_5

LANGUAGE: Shell
CODE:
```
go list -m ...
stdout 'insecure.go-get-issue'
```

----------------------------------------

TITLE: Test23 Package Implementation
DESCRIPTION: Package demonstrating vendor directory resolution with v2 and v3 imports, showing preference for sub/vendor over root vendor.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_complex.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package test23

// Check that vendor/v3 is used but vendor/v2 is NOT used (sub/vendor/v2 wins).

import (
	"v2"
	"v3"
)

const x = v3.ComplexNestVendorV3
const y = v2.ComplexNestSubVendorV2
```

----------------------------------------

TITLE: Basic Go Module with Private Dependency
DESCRIPTION: Minimal Go module that imports a package from a private repository requiring authentication.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_git.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package useprivate

import "vcs-test.golang.org/auth/or404"
```

----------------------------------------

TITLE: Defining Go Package with Build Constraints
DESCRIPTION: This snippet demonstrates a Go package with build constraints and import statements for other packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
// +build tools

package tools

import (
	_ "example.net/cmd/tool"
	_ "example.net/missing"
)
```

----------------------------------------

TITLE: Testing Opt Function in Go
DESCRIPTION: Tests the Opt function by comparing its output to the expected optimization truth. Fails the test if the output doesn't match the expected string.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
func TestOpt(t *testing.T) {
	opt := "If a program is too slow, it must have a loop."
	if out := Opt(); out != opt {
		t.Errorf("Opt() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Testing Structured Logging Handlers - slogtest.Run - Go
DESCRIPTION: Adds Run function to testing/slogtest, which takes a *testing.T plus two functions for generating a slog.Handler and key-value data, and runs a suite of structured logging tests. Used for verifying slog.Handler behaviors in tests.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_28

LANGUAGE: Go
CODE:
```
func Run(*testing.T, func(*testing.T) slog.Handler, func(*testing.T) map[string]interface{})
```

----------------------------------------

TITLE: Disabling CGO by Clearing CC and Modifying PATH in Go
DESCRIPTION: This snippet attempts to disable cgo by clearing the CC environment variable and removing everything but Go from the PATH. It then checks the CGO_ENABLED status, expecting it to be 0 unless there's an absolute path to a C compiler.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/autocgo.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
env CC=
env PATH=$GOROOT/bin
go env CGO_ENABLED
[!abscc] stdout 0
[abscc] stdout 1
```

----------------------------------------

TITLE: Time Duration Rounding Methods
DESCRIPTION: Defines Round and Truncate methods for Duration type to handle time duration calculations
SOURCE: https://github.com/golang/go/blob/master/api/go1.9.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
func (Duration) Round(Duration) Duration
func (Duration) Truncate(Duration) Duration
```

----------------------------------------

TITLE: Main Package Import
DESCRIPTION: Main package file importing dependent modules
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package m

import (
	_ "example.com/a"
	_ "example.com/b"
)
```

----------------------------------------

TITLE: Go Package with Cgo Integration
DESCRIPTION: A Go package that uses cgo to call a C function. It includes a conditional infinite loop that's never executed to test coverage reporting.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_extra_test.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package p

/*
void
f(void)
{
}
*/
import "C"

var b bool

func F() {
	if b {
		for {
		}
	}
	C.f()
}
```

----------------------------------------

TITLE: Package-Specific Go Test Command
DESCRIPTION: Extended test command targeting specific packages using multiple -pkg flags. The command is split across multiple lines for readability.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code4.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go test -more \
  -pkg first/package \
  -pkg second/package \
  -pkg third/package
```

----------------------------------------

TITLE: Comment List Formatting - Gofmt Style
DESCRIPTION: Shows how gofmt reformats the same comment, standardizing the indentation to single spaces and maintaining the list structure.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list10.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
 1. This list
 2. Starts the comment
 3. And also has a blank line before it.

All of which is a little weird.
```

----------------------------------------

TITLE: Defining Module in .mod File
DESCRIPTION: Declares the module identity as example.com/nest/sub in a .mod file. This establishes the module path for the nested submodule.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_sub_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
module example.com/nest/sub
```

----------------------------------------

TITLE: Defining Go Module Path (go.mod)
DESCRIPTION: This snippet shows the content of the `go.mod` file for the `golang.org/toolchain` module. It defines the module path, which is the standard way Go projects declare their module identity.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-amd64.txt#2025-04-22_snippet_2

LANGUAGE: gomod
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Defining Go Module for Version Control Testing
DESCRIPTION: Go module definition file that specifies the module path. This establishes the import path for the module in the Go ecosystem.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-new.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module "vcs-test.golang.org/git/modlegacy1-new.git/v2"
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: This snippet specifies the Go module path for the project 'example.com/latemigrate', defining it at the root of the module system.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_latemigrate_v2_v2.0.0.txt#2025-04-22_snippet_0

LANGUAGE: Configuration
CODE:
```
module example.com/latemigrate
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: Specifies the module name for the Go package. This is typically used to manage dependencies and package versioning.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_issue45477.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example.com/pkg_test
```

----------------------------------------

TITLE: Defining a Simple Go Module
DESCRIPTION: These go.mod and Go files define simple modules that are used as dependencies in the main module. They demonstrate the basic structure of a Go module with a single function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module example.com/dep
```

LANGUAGE: Go
CODE:
```
package dep

func G() {
}
```

----------------------------------------

TITLE: Testing Go Module Verification with Incorrect Sumdb
DESCRIPTION: This snippet demonstrates how disagreeing with the sumdb produces security errors. It sets up an incorrect sumdb URL and attempts to fetch modules, which results in checksum mismatch errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
cp go.mod.orig go.mod
env GOSUMDB=$sumdb' '$proxy/sumdb-wrong
! go get rsc.io/quote
stderr 'go: rsc.io/quote@v1.5.2: verifying module: checksum mismatch'
stderr 'downloaded: h1:3fEy'
stderr 'localhost.localdev/sumdb: h1:wrong'
stderr 'SECURITY ERROR\nThis download does NOT match the one reported by the checksum server.'
! go get rsc.io/sampler
! go get golang.org/x/text
```

----------------------------------------

TITLE: Invalid Version Retraction in v1 Module
DESCRIPTION: go.mod file showing an invalid retraction where v3 is used in a v1 module
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_fix_version.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
go 1.16

retract v3.0.1

module rsc.io/quote
```

----------------------------------------

TITLE: Module-level Internal Package Definition
DESCRIPTION: A minimal Go file that defines an internal package at the module level.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_internal.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package internal
```

----------------------------------------

TITLE: Package B Implementation with Range Loop Variable Capture
DESCRIPTION: Implementation of package 'b' that contains functions capturing loop variables in a range loop. Both the index and value variables are captured by reference.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_shorten_pkg.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package b

var slice = []int{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024}

func F() ([]*int, []*int) {
	return g()
}

func g() ([]*int, []*int) {
	var s []*int
	var t []*int
	for i, j := range slice {
		s = append(s, &i)
		t = append(t, &j)
	}
	return s[:len(s)-1], t
}
```

----------------------------------------

TITLE: Go Package with Indirect Missing Import (Go)
DESCRIPTION: This Go source file defines a package named 'indirect'. It imports the 'example.com/direct' package. Because 'example.com/direct' imports a missing package, this 'indirect' package introduces an indirect dependency on the non-existent package ('example.com/notfound') for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_bad_import.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
-- example.com/indirect/indirect.go --
package indirect
import _ "example.com/direct"
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic go.mod file declaring the module name as example.com
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_v1suffix.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com
```

----------------------------------------

TITLE: Testing Go Mod Tidy Removes Redundant Requirements
DESCRIPTION: Verifies that 'go mod tidy' removes redundant requirements from the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
go mod tidy
cmp go.mod go.mod.tidy
```

----------------------------------------

TITLE: Main Module Go.mod Configuration
DESCRIPTION: The go.mod file for the main module, specifying version requirements and replacement directives for all example modules. This file initially uses Go 1.15 but includes redundant roots that follow Go 1.17 lazy loading invariants.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
module example.com/main

// Note: this go.mod file initially specifies go 1.15,
// but includes some redundant roots so that it
// also already obeys the 1.17 lazy loading invariants.
go 1.15

require (
	example.com/a v0.1.0
	example.com/b v0.1.0 // indirect
	example.com/q v0.1.0
	example.com/r v0.1.0 // indirect
	example.com/t v0.1.0
	example.com/u v0.1.0 // indirect
)

replace (
	example.com/a v0.1.0 => ./a
	example.com/b v0.1.0 => ./b
	example.com/c v0.1.0 => ./c
	example.com/d v0.1.0 => ./d
	example.com/q v0.1.0 => ./q
	example.com/r v0.1.0 => ./r
	example.com/s v0.1.0 => ./s
	example.com/t v0.1.0 => ./t
	example.com/u v0.1.0 => ./u
	example.com/w v0.1.0 => ./w
	example.com/x v0.1.0 => ./x
)
```

----------------------------------------

TITLE: Dependency Package Import
DESCRIPTION: Go source file in the replaced module importing rsc.io/quote package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_old.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package use

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Defining Main Package Importing 'c' (Go)
DESCRIPTION: This is the main executable package for the test program. It imports package `c` and calls its function `Fn`, which in turn calls functions from package `a` and its own Cgo code. Running this program tests the end-to-end linking of all Go and C components.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
-- main.go --
package main

import "m/c"

func main() {
	println(c.Fn(0))
}
```

----------------------------------------

TITLE: Defining Module Dependencies for C v0.2.0 in Go
DESCRIPTION: This go.mod file for example.net/c v0.2.0 specifies its Go version and a dependency on example.net/a v0.2.0-pre.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_12

LANGUAGE: Go
CODE:
```
module example.net/c

go 1.17

require example.net/a v0.2.0-pre
```

----------------------------------------

TITLE: Running Go Parallel Tests with JSON Output
DESCRIPTION: Shell command to run parallel chatty tests with JSON output format and verify that test2json properly attributes output to the correct tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_parallel_success.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go test -json -parallel 3 chatty_parallel_test.go -v
stdout -count=2 '"Test":"TestChattyParallel/sub-0","Output":"    chatty_parallel_test.go:32: this is sub-0\\n"'
stdout -count=2 '"Test":"TestChattyParallel/sub-1","Output":"    chatty_parallel_test.go:32: this is sub-1\\n"'
stdout -count=2 '"Test":"TestChattyParallel/sub-2","Output":"    chatty_parallel_test.go:32: this is sub-2\\n"'
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module declaration file (go.mod) specifying the module name and the required dependency on export-subst package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_git_export_subst.txt#2025-04-22_snippet_3

LANGUAGE: plaintext
CODE:
```
module x

require github.com/jasonkeene/export-subst v0.0.0-20180927204031-5845945ec626
```

----------------------------------------

TITLE: Listing Dependencies in Go Project
DESCRIPTION: Uses 'go list -deps' to list all dependencies of the project, including transitive dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go list -deps
```

----------------------------------------

TITLE: Removing Parentheses in AST Expressions - go/ast - Go
DESCRIPTION: Unparen(Expr) Expr is a utility to strip enclosing parentheses from an AST expression. Used during analysis to obtain the raw inner node. Takes an Expr, returns an Expr.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_12

LANGUAGE: Go
CODE:
```
func Unparen(Expr) Expr
```

----------------------------------------

TITLE: Lazy Module Definition
DESCRIPTION: Module declaration for the lazy package with dependency requirements and version exclusions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_implicit.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.net/lazy

go 1.17

exclude example.com/retract/incompatible v2.0.0+incompatible

require (
	example.com/retract/incompatible v1.0.0
	example.net/requireincompatible v0.1.0
)
```

----------------------------------------

TITLE: Printing Version Information in Go
DESCRIPTION: The Go program reads the build information of a Go project using the `debug.ReadBuildInfo()` function. It prints the module's path, version, and any dependencies it uses, including any replacements. This snippet requires the "os" and "fmt" packages for output. Inputs include the build information structure, while outputs are printed to standard output. It relies on correctly configured Go modules and a build context that includes version information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_printversion_v0.1.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package main

import (
	"fmt"
	"os"
	"runtime/debug"

	_ "example.com/version"
)

func main() {
	info, _ := debug.ReadBuildInfo()
	fmt.Fprintf(os.Stdout, "path is %s\n", info.Path)
	fmt.Fprintf(os.Stdout, "main is %s %s\n", info.Main.Path, info.Main.Version)
	if r := info.Main.Replace; r != nil {
		fmt.Fprintf(os.Stdout, "\t(replaced by %s %s)\n", r.Path, r.Version)
	}
	for _, m := range info.Deps {
		fmt.Fprintf(os.Stdout, "using %s %s\n", m.Path, m.Version)
		if r := m.Replace; r != nil {
			fmt.Fprintf(os.Stdout, "\t(replaced by %s %s)\n", r.Path, r.Version)
		}
	}
}
```

----------------------------------------

TITLE: Defining Package 'main' with Dependencies in Go
DESCRIPTION: Defines the main executable package within module `M`. It imports package `a` (`M/a`), includes functions `MFunc` and `M2Func` (which calls `a.AFunc`), an `init` function that prints a message upon package initialization, and the `main` entry point function which calls `a.AFunc`. Code coverage calculation is performed on this package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_single_vs_multiple.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
-- main/main.go --
package main

import (
	"M/a"
)

func MFunc() string {
	return "42"
}

func M2Func() int {
	return a.AFunc()
}

func init() {
	println("package 'main' init")
}

func main() {
	println(a.AFunc())
}
```

----------------------------------------

TITLE: Defining Go Module Versioning
DESCRIPTION: The code specifies Go module versioning information and dependencies required. It includes a Go module and a dependency on example.com/badchain/b version v1.1.0. The context ensures correct version management for consistent builds.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_a_v1.1.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```

module example.com/badchain/a

require example.com/badchain/b v1.1.0

```

----------------------------------------

TITLE: Setting Up GOCACHE Environment
DESCRIPTION: Creates a fresh GOCACHE directory for testing PGO build behavior
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_pgo.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GOCACHE=$WORK/gocache
mkdir $GOCACHE
```

----------------------------------------

TITLE: Testing Restricted Internal Package Import in Go
DESCRIPTION: A Go file that attempts to import a restricted internal package from another module, which should fail due to Go's access control rules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_internal.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main
import _ "m/x/internal"
func main() {}
```

----------------------------------------

TITLE: Implementing Simple Subpackage Functionality - Go
DESCRIPTION: Defines a subpackage in the module mod.example with a single exported function F that returns 42. This function is designed to be called by the main package as part of the coverage example. Dependencies are none, input is none, output always the integer 42, and there are no configuration constraints.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_pkg_select.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package sub

func F() int {
	return 42
}

```

----------------------------------------

TITLE: Preventing Internal Leakage with Module Replacement
DESCRIPTION: Following the replacement of `golang.org/x/internal`, this attempts to get and build `./baddep`. The build (`! go build`) is expected to fail, demonstrating that the replacement does not allow modules outside the original internal scope (`golang.org/x/...`) to import the replaced internal package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_9

LANGUAGE: shell
CODE:
```
go get ./baddep
! go build ./baddep
stderr golang.org[/\\]notx[/\\]useinternal
stderr 'use of internal package golang.org/x/.* not allowed'
```

----------------------------------------

TITLE: Running Go Test with Vet Options
DESCRIPTION: This snippet demonstrates running go test with different vet options on test and non-test files. It shows how to disable vet, use specific analyzers, and handle various error cases.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Test file
! go test p1_test.go
stderr 'Logf format %d'
go test -vet=off
stdout '^ok'

# Non-test file
! go test p1.go
stderr 'Printf format %d'
go test -x -vet=shift p1.go
stderr '[\\\\]vet.*-shift'
stdout '\\[no test files\\]'
go test -vet=off p1.go
! stderr '[\\\\]vet.*-shift'
stdout '\\[no test files\\]'

# ensure all runs non-default vet
! go test -vet=all ./vetall/...
stderr 'using resp before checking for errors'

# Test issue #47309
! go test -vet=bools,xyz ./vetall/...
stderr '-vet argument must be a supported analyzer'

# Test with a single analyzer
! go test -vet=httpresponse ./vetall/...
stderr 'using resp before checking for errors'

# Test with a list of analyzers
go test -vet=atomic,bools,nilfunc ./vetall/...
stdout 'm/vetall.*\\[no tests to run\\]'

# Test issue #22890
go test m/vetcycle
stdout 'm/vetcycle.*\\[no test files\\]'

# Test with ...
! go test ./vetfail/...
stderr 'Printf format %d'
stdout 'ok\\s+m/vetfail/p2'

# Check there's no diagnosis of a bad build constraint in vetxonly mode.
# Use -a so that we need to recompute the vet-specific export data for
# vetfail/p1.
go test -a m/vetfail/p2
! stderr 'invalid.*constraint'
```

----------------------------------------

TITLE: Nested Go Module Definition
DESCRIPTION: Defines a nested Go module configuration within the main repository, also using Go 1.20.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue61415.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/git/issue61415.git/nested

go 1.20
```

----------------------------------------

TITLE: Declaring Go Toolchain Version
DESCRIPTION: Specifies the Go toolchain version to be used for the project. The version indicates Go 1.18.7 for Linux AMD64 architecture.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.7.linux-amd64.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
golang.org/toolchain v0.0.1-go1.18.7.linux-amd64
```

----------------------------------------

TITLE: Declaring Go Module with go.mod - Go
DESCRIPTION: Defines a minimal go.mod file declaring 'sandbox/bar' as the module path. This is a prerequisite for Go module-aware tooling and builds, ensuring the 'go list' commands operate in module mode. No dependencies are listed, but the module file forms the context for the Go source code being tested.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_compiled_concurrent.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
-- go.mod --
module sandbox/bar
```

----------------------------------------

TITLE: Module A Configuration
DESCRIPTION: Go module configuration for package a including its dependency on inner package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_issue60313.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.net/a

go 1.21

require example.net/outer/inner v0.1.0
```

----------------------------------------

TITLE: Configuring Go Module Import Path with HTML Meta Tag
DESCRIPTION: This HTML snippet defines a go-import meta tag that instructs the Go tooling where to find the module 'vcs-test.golang.org/go/gitreposubdirv2/v2'. It specifies that the module uses git version control, the repository URL, and that the module is located in a subdirectory of the repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/gitreposubdirv2.txt#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<meta name="go-import" content="vcs-test.golang.org/go/gitreposubdirv2/v2 git https://vcs-test.golang.org/git/gitreposubdirv2 subdir">
```

----------------------------------------

TITLE: Defining SCM (Socket Control Message) Constants in Go Syscall Package for Darwin-arm64-cgo
DESCRIPTION: Constants for socket control message types used with sendmsg/recvmsg. These values identify the type of auxiliary data being passed, such as file descriptors (SCM_RIGHTS) or timestamps.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_179

LANGUAGE: Go
CODE:
```
const SCM_RIGHTS = 1
const SCM_TIMESTAMP = 2
const SCM_CREDS = 3
const SCM_TIMESTAMP_MONOTONIC = 4
```

----------------------------------------

TITLE: Basic Go Module Configuration
DESCRIPTION: A simple Go module configuration file specifying module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_pkg_version.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.16

require example.com/cmd v1.1.0-doesnotexist
```

----------------------------------------

TITLE: Checking Go Module Version with go list
DESCRIPTION: This snippet shows how to use the 'go list' command to check the Go version specified in the module. It demonstrates that the initial Go version is 1.15.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_old.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list -f '{{.Module.GoVersion}}'
```

----------------------------------------

TITLE: Implementing Quote Functions in Go
DESCRIPTION: A Go package implementing various quote functions with v2 suffix. It depends on the rsc.io/sampler module for some functionality and provides methods for returning greetings, proverbs, and other pithy sayings.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v2_v2.0.1.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

import "rsc.io/sampler"

// Hello returns a greeting.
func HelloV2() string {
	return sampler.Hello()
}

// Glass returns a useful phrase for world travelers.
func GlassV2() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return "I can eat glass and it doesn't hurt me."
}

// Go returns a Go proverb.
func GoV2() string {
	return "Don't communicate by sharing memory, share memory by communicating."
}

// Opt returns an optimization truth.
func OptV2() string {
	// Wisdom from ken.
	return "If a program is too slow, it must have a loop."
}
```

----------------------------------------

TITLE: Module with Local Replace Directive
DESCRIPTION: go.mod file using a local replacement for the usequote module and requiring rsc.io/quote
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_changes.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module m

go 1.16

require usequote v0.0.0

replace usequote => ./usequote
```

----------------------------------------

TITLE: Go Type Alias Definition
DESCRIPTION: Simple Go code demonstrating type alias syntax which requires Go 1.9 or later.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_go.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package alias
type T = int
```

----------------------------------------

TITLE: Go Module File with Dependency Replacements
DESCRIPTION: A Go module file that sets up replacements for dependencies, including different versions of 'example.net/deleted' that will be used to test compatibility between Go 1.16 and 1.17.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/m

go 1.17

replace (
	example.net/deleted v0.1.0 => ./d1
	example.net/deleted v0.2.0 => ./d2
	example.net/lazy v0.1.0 => ./lazy
	example.net/pruned v0.1.0 => ./pruned
)

require (
	example.net/deleted v0.1.0
	example.net/deleted v0.1.0 // redundant
	example.net/lazy v0.1.0
)
```

----------------------------------------

TITLE: Module Definition for Dependency 'b'
DESCRIPTION: The `go.mod` file for module `b`. It requires module `c` at version v0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_9

LANGUAGE: gomod
CODE:
```
-- b1/go.mod --
module b

go 1.17

require c v0.1.0
```

----------------------------------------

TITLE: Updating a Specific Dependency Version
DESCRIPTION: This snippet demonstrates updating a specific dependency (example.com/a) to version v1.0.1. It shows that this update does not change the module's Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_old.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go get example.com/a@v1.0.1
go list -f '{{.Module.GoVersion}}'
```

----------------------------------------

TITLE: Setting and Verifying GOMODCACHE in Go
DESCRIPTION: This snippet demonstrates how to explicitly set GOMODCACHE, verify its value using go env, and test module downloading behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache.txt#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
env GOMODCACHE=$WORK/modcache
go env GOMODCACHE
stdout $WORK[/\\]modcache
go get rsc.io/quote@v1.0.0
exists $WORK/modcache/cache/download/rsc.io/quote/@v/v1.0.0.info
grep '{"Version":"v1.0.0","Time":"2018-02-14T00:45:20Z"}' $WORK/modcache/cache/download/rsc.io/quote/@v/v1.0.0.info
```

----------------------------------------

TITLE: Defining Go Test with Failing Parent and Subtest
DESCRIPTION: This Go code defines a test function 'TestThatFails' that contains a subtest and deliberately fails. It demonstrates how a parent test can fail even if its subtest passes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_subtests_failure.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package standalone_fail_sub_test

import "testing"

func TestThatFails(t *testing.T) {
	t.Run("Sub", func(t *testing.T) {})
	t.Fail()
}
```

----------------------------------------

TITLE: Adding Toolchain in Newer Go Version
DESCRIPTION: This snippet demonstrates adding a specific toolchain version when using a newer Go version. It shows how to verify the changes in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
env TESTGO_VERSION=go1.30
go get toolchain@1.22.3
```

----------------------------------------

TITLE: Main Module Configuration
DESCRIPTION: Primary go.mod file defining the main module 'm' with its dependencies and replace directives
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m
go 1.21

require (
	example.com/a v1.0.0
	example.com/b v0.9.0
)

replace example.com/a v1.0.0 => ./a100
replace example.com/a v1.0.1 => ./a101
replace example.com/a v1.0.2 => ./a102
replace example.com/b v1.0.1 => ./b101
replace example.com/b v1.0.2 => ./b102
replace example.com/b v1.0.0 => ./b100
replace example.com/b v0.9.0 => ./b100
```

----------------------------------------

TITLE: Defining Go Module for Syntax Error Test
DESCRIPTION: This Go module definition sets up a module named 'syntaxerror' using Go 1.16. It's part of the test setup to demonstrate build failure behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_tests_build_failure.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module syntaxerror

go 1.16
```

----------------------------------------

TITLE: HTTP Client Tracing Structure Definition in Go
DESCRIPTION: Defines ClientTrace struct in net/http/httptrace package for tracing HTTP client requests. Contains callback functions for various stages of HTTP connection lifecycle including DNS lookup, connection establishment, and request/response handling.
SOURCE: https://github.com/golang/go/blob/master/api/go1.7.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
type ClientTrace struct {
    GetConn func(string)
    GotConn func(GotConnInfo)
    PutIdleConn func(error)
    GotFirstResponseByte func()
    Got100Continue func()
    DNSStart func(DNSStartInfo)
    DNSDone func(DNSDoneInfo)
    ConnectStart func(string, string)
    ConnectDone func(string, string, error)
    WroteHeaders func()
    WroteRequest func(WroteRequestInfo)
    Wait100Continue func()
}
```

----------------------------------------

TITLE: Testing Go Workspace Version Compatibility
DESCRIPTION: Tests Go workspace behavior with different module versions and toolchain settings, including version checks and automatic toolchain switching.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_toolchain.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go work init
grep '^go 1.50$' go.work
! grep toolchain go.work

go work use ./m1_22_0
grep '^go 1.50$' go.work
! grep toolchain go.work

env TESTGO_VERSION=go1.21
env TESTGO_VERSION_SWITCH=switch
rm go.work
go work init
env GOTOOLCHAIN=local
! go work use ./m1_22_0
stderr '^go: m1_22_0'${/}'go.mod requires go >= 1.22.0 (running go 1.21; GOTOOLCHAIN=local)$'
env GOTOOLCHAIN=auto
go work use ./m1_22_0
stderr '^go: m1_22_0'${/}'go.mod requires go >= 1.22.0; switching to go1.22.9$'
grep '^go 1.22.0$' go.work
! grep toolchain go.work

go work use ./m1_22_1
stderr '^go: m1_22_1'${/}'go.mod requires go >= 1.22.1; switching to go1.22.9$'
grep '^go 1.22.1$' go.work
! grep toolchain go.work

env GOTOOLCHAIN=go1.22.9
! go work use ./m1_24_rc0
stderr '^go: m1_24_rc0'${/}'go.mod requires go >= 1.24rc0 (running go 1.22.9; GOTOOLCHAIN=go1.22.9)$'
env GOTOOLCHAIN=auto
go work use ./m1_24_rc0
stderr '^go: m1_24_rc0'${/}'go.mod requires go >= 1.24rc0; switching to go1.24rc1$'
grep '^go 1.24rc0$' go.work
! grep 'toolchain' go.work
```

----------------------------------------

TITLE: Defining Go Module Configuration
DESCRIPTION: This snippet presents the content of a go.mod file, defining a module named 'foo' and specifying Go version 1.21 as a requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_implicit_go_requirement.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module foo

go 1.21
```

----------------------------------------

TITLE: Updating Dependency Version in Go
DESCRIPTION: Updates the 'rsc.io/sampler' dependency to version v1.3.1 using 'go get' command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go get rsc.io/sampler@v1.3.1
```

----------------------------------------

TITLE: v3 Go Module Definition
DESCRIPTION: Defines the v3 module with the appropriate /v3 path suffix, specifying Go 1.18 as the required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/odd-tags.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/git/odd-tags.git/v3

go 1.18
```

----------------------------------------

TITLE: Fetching Latest Module Version in Go
DESCRIPTION: This command fetches the latest version of the 'example.com/pseudoupgrade' module, which should be the tagged v0.1.0 version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade_pseudo.txt#2025-04-22_snippet_4

LANGUAGE: Shell
CODE:
```
go get example.com/pseudoupgrade@latest
```

----------------------------------------

TITLE: Multiple Package Imports in Go
DESCRIPTION: A Go file importing multiple packages from the same module. This demonstrates how to import different packages within the same module hierarchy.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package m

import _ "a/foo/bar/b"
import _ "a/foo/bar/c"
```

----------------------------------------

TITLE: Importing Go Package Dependency
DESCRIPTION: The Go package 'a' imports a dependency without directly using it, highlighting indirect dependency management. The underscore before the import path ensures the package is imported solely for its side effects.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_a_v1.1.0.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package a

import _ "example.com/badchain/b"

```

----------------------------------------

TITLE: Go Package Import
DESCRIPTION: Go source code file demonstrating blank import of a dependent package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_b_v1.1.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package b

import _ "example.com/badchain/c"
```

----------------------------------------

TITLE: Conditional Import with Custom Build Tag
DESCRIPTION: A Go file with the build constraint 'notmytag' that imports a subpackage 'x/x1'. This file will only be included when the 'notmytag' build tag is specified.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
// +build notmytag

package m

import _ "x/x1"
```

----------------------------------------

TITLE: Base go.mod Configuration
DESCRIPTION: Basic go.mod file with a retraction directive but missing module declaration
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_fix_version.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go 1.16

retract latest
```

----------------------------------------

TITLE: Module B Configuration and Implementation
DESCRIPTION: This snippet shows the go.mod file for module 'example.com/b', its main Go file, and a test file. It requires 'example.com/q' v1.1.0 and provides a function B().
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module example.com/b

go 1.18

require example.com/q v1.1.0

replace example.com/q v1.0.0 => ../q1_0_0
replace example.com/q v1.1.0 => ../q1_1_0
```

LANGUAGE: Go
CODE:
```
package b

func B() {
}
```

LANGUAGE: Go
CODE:
```
package b

import "example.com/q"

func TestB() {
	q.PrintVersion()
}
```

----------------------------------------

TITLE: Listing Vendored Modules in Go
DESCRIPTION: This snippet demonstrates how to list vendored modules and their details using the 'go list' command with the -mod=vendor flag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getmode_vendor.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go list -mod=vendor
go list -mod=vendor -f '{{with .Module}}{{.Path}} {{.Version}}{{end}} {{.Dir}}' all
stdout '^rsc.io/quote v1.5.1 .*vendor[\/]rsc.io[\/]quote$'
stdout '^golang.org/x/text v0.0.0.* .*vendor[\/]golang.org[\/]x[\/]text[\/]language$'
```

----------------------------------------

TITLE: Testing Go Module Proxy Invalid Response Handling
DESCRIPTION: Test script that sets up an invalid GOPROXY environment and verifies proper error handling when attempting to fetch modules through it. Tests both latest version query and specific version query scenarios.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_proxy_invalid.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on
env GOPROXY=$GOPROXY/invalid

! go list -m rsc.io/quote@latest
stderr '^go: module rsc.io/quote: invalid response from proxy "'$GOPROXY'": invalid character ''i'' looking for beginning of value$'

! go list -m rsc.io/quote@1.5.2
stderr '^go: rsc.io/quote@1.5.2: invalid version: invalid response from proxy "'$GOPROXY'": invalid character ''i'' looking for beginning of value$'
```

----------------------------------------

TITLE: Testing String Fuzzing in Go
DESCRIPTION: This function tests Go's fuzzing capabilities with string inputs. It panics when the input is not an empty string.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_16

LANGUAGE: Go
CODE:
```
func FuzzString(f *testing.F) {
	f.Add("")
	f.Fuzz(func(t *testing.T, a string) {
		if a != "" {
			panic("this input caused a crash!")
		}
	})
}
```

----------------------------------------

TITLE: Executing Go Test and Coverage
DESCRIPTION: Initiates a Go test with coverage profile generation for packages. The 'go test' command is executed without vetting and a single count, creating a coverage profile. Dependencies include a Go runtime environment.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_nocoverpkg.txt#2025-04-22_snippet_0

LANGUAGE: Golang
CODE:
```
go test -vet=off -count=1 -coverprofile=cov.p ./...
```

----------------------------------------

TITLE: OS User and Group Management Structures in Go
DESCRIPTION: Defines structures and functions for user and group management in the os/user package. Includes Group struct definition and functions for looking up groups by ID or name.
SOURCE: https://github.com/golang/go/blob/master/api/go1.7.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
type Group struct {
    Name string
    Gid string
}

func LookupGroup(string) (*Group, error)
func LookupGroupId(string) (*Group, error)
```

----------------------------------------

TITLE: Preventing External Module Import of golang.org/x/internal
DESCRIPTION: Attempts to get the `./baddep` package (which tries to import `golang.org/notx/useinternal`, which depends on `golang.org/x/internal` via `golang.org/x/useinternal`) and then build it. The build (`! go build`) is expected to fail with an error indicating that the use of the internal package `golang.org/x/internal` is not allowed from outside the `golang.org/x` module tree.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
# ...but that should not leak into other modules.
go get ./baddep
! go build ./baddep
stderr golang.org[/\\]notx[/\\]useinternal
stderr 'use of internal package golang.org/x/.* not allowed'
```

----------------------------------------

TITLE: cgo Usage and cgoimport Import - Go
DESCRIPTION: This file uses the cgo pseudo-package import (import "C") which marks it as a cgo file, included only when cgo is enabled. It also imports cgoimport for side effects. Key prerequisite: CGO_ENABLED=1 and a cgo toolchain. Input: n/a. Output: cgo package inclusion. Limitation: ignored unless cgo is enabled and a cgo toolchain is available.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package p

import "C"

import _ "cgoimport"

```

----------------------------------------

TITLE: Main Go Fuzzing I/O Error Test Implementation
DESCRIPTION: Go test code that implements fuzzing tests to verify proper handling of I/O errors. It includes helper functions to detect if code is running as a worker and two test cases for errors before and after F.Fuzz is called.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_io_error.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package io_error

import (
	"flag"
	"testing"
	"time"
)

func isWorker() bool {
	f := flag.Lookup("test.fuzzworker")
	if f == nil {
		return false
	}
	get, ok := f.Value.(flag.Getter)
	if !ok {
		return false
	}
	return get.Get() == interface{}(true)
}

func FuzzClosePipeBefore(f *testing.F) {
	if isWorker() {
		sendGarbageToCoordinator(f)
		time.Sleep(3600 * time.Second) // pause until coordinator terminates the process
	}
	f.Fuzz(func(*testing.T, []byte) {})
}

func FuzzClosePipeAfter(f *testing.F) {
	f.Fuzz(func(t *testing.T, _ []byte) {
		if isWorker() {
			sendGarbageToCoordinator(t)
			time.Sleep(3600 * time.Second) // pause until coordinator terminates the process
		}
	})
}
```

----------------------------------------

TITLE: Module definition for test repository
DESCRIPTION: The go.mod file for the test repository, defining module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_issue53955.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module github.com/golang/issue53955

go 1.18
```

----------------------------------------

TITLE: Basic Go Module Definition
DESCRIPTION: Defines a basic Go module configuration specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/link/testdata/script/script_test_basics.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module main

go 1.20
```

----------------------------------------

TITLE: Defining Go Module in foo/go.mod
DESCRIPTION: Defines a Go module named 'example.com/foo' in the foo/go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.com/foo
```

----------------------------------------

TITLE: Testing go build -pgo=auto flag with default.pgo file
DESCRIPTION: Tests the behavior of go build with -pgo=auto flag when a default.pgo file exists. It verifies that the profile is used during compilation and appears in build info.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go build -n -pgo=auto -o a1.exe ./a/a1
stderr 'preprofile.*-i.*default\.pgo'
stderr 'compile.*-pgoprofile=.*a1.go'

# check that pgo applied to dependencies
stderr 'compile.*-p test/dep.*-pgoprofile=.*'

# check that pgo appears in build info
# N.B. we can't start the stdout check with -pgo because the script assumes that
# if the first arg starts with - it is a grep flag.
stderr 'build\\t-pgo=.*default\.pgo'

# check also that -pgo appears with the other flags, before non-flag settings
! stderr 'build\\t[A-Za-z].*build\\t-pgo'
```

----------------------------------------

TITLE: Go Module File for Main Project
DESCRIPTION: This snippet shows the go.mod file for the main project, specifying the module name and Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
module example.com
go 1.16
```

----------------------------------------

TITLE: Defining a Go Module with Metadata - Go
DESCRIPTION: This snippet defines the module name and target Go version for the package using a go.mod file, which is required for Go module support. The module path is set to 'example.com/stack', and the Go version is specified as 1.14. Dependencies and additional requirements would be listed here, but this module is self-contained.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_stack_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go.mod
CODE:
```
module example.com/stack\n\ngo 1.14
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: This is the go.mod file that defines the module 'p'. It's a minimal module definition without any dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_timeout.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module p
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines the Go module named 'hello'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_gc_sections.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module hello
```

----------------------------------------

TITLE: Go Work Configuration
DESCRIPTION: Work configuration file specifying Go version 1.18 and module usage with replacement directives
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_sum.txt#2025-04-22_snippet_0

LANGUAGE: text
CODE:
```
go 1.18
use (
    ./a
    ./b
)
replace example.com/c => ./c
```

----------------------------------------

TITLE: Importing Dependencies in Go Code
DESCRIPTION: This Go file imports the 'example.com/a' and 'example.com/b' packages as blank imports, demonstrating how to use the dependencies specified in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_old.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package m

import (
	_ "example.com/a"
	_ "example.com/b"
)
```

----------------------------------------

TITLE: Main package implementation
DESCRIPTION: A simple main package that imports a dependency package but doesn't do anything.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package main
import _ "test/dep"
func main() {}
```

----------------------------------------

TITLE: Go Fuzzing Test Implementation
DESCRIPTION: A Go test file implementing a fuzz test that intentionally crashes after 100 iterations. It writes the crashing input to a file before terminating and includes verification logic to check if the recovered input matches the expected one.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutator_repeat.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package fuzz

import (
	"bytes"
	"flag"
	"os"
	"testing"
)

var wantFlag = flag.String("want", "", "file containing previous crashing input")

func FuzzRepeat(f *testing.F) {
	i := 0
	f.Fuzz(func(t *testing.T, b []byte) {
		i++
		if i == 100 {
			f, err := os.OpenFile("want", os.O_WRONLY|os.O_CREATE|os.O_EXCL, 0666)
			if err != nil {
				// Couldn't create the file. Return without crashing, and try
				// again.
				i--
				t.Skip(err)
			}
			if _, err := f.Write(b); err != nil {
				// We already created the file, so if we failed to write it
				// there's not much we can do. The test will fail anyway, but
				// at least make sure the error is logged to stdout.
				t.Fatal(err)
			}
			if err := f.Close(); err != nil {
				t.Fatal(err)
			}
			os.Exit(1) // crash without communicating
		}

		if *wantFlag != "" {
			want, err := os.ReadFile(*wantFlag)
			if err != nil {
				t.Fatal(err)
			}
			if !bytes.Equal(want, b) {
				t.Fatalf("inputs are not equal!\n got: %q\nwant:%q", b, want)
			}
		}
	})
}
```

----------------------------------------

TITLE: Testing Unset GO111MODULE Environment Variable in Go
DESCRIPTION: Tests the behavior when GO111MODULE is unset, which should be equivalent to GO111MODULE=on. This verifies that module resolution works correctly in different directory structures when the environment variable is not explicitly set.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_enabled.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
env GO111MODULE=

cd $GOPATH/src/x/y/z
go env GOMOD
stdout $GOPATH[/\\]src[/\\]x[/\\]y[/\\]z[/\\]go.mod

cd $GOPATH/src/x/y
go env GOMOD
stdout 'NUL|/dev/null'
```

----------------------------------------

TITLE: Database SQL Stats Structure
DESCRIPTION: Definition of the DBStats struct in database/sql package for tracking database connection statistics.
SOURCE: https://github.com/golang/go/blob/master/api/go1.5.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
type DBStats struct {
    OpenConnections int
}
```

----------------------------------------

TITLE: Importing External Module in Go
DESCRIPTION: This Go file imports the 'example.com/pseudoupgrade' module as a side effect, typically used for its initialization functions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade_pseudo.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
package x

import _ "example.com/pseudoupgrade"
```

----------------------------------------

TITLE: Buggy Test Implementation in Go
DESCRIPTION: A test file in the buggy package that intentionally fails by calling t.Fatal with a message "buggy!". This seems to be part of the test suite to verify error handling or demonstrate test failures.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180628003336-dd9747d19b04.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package buggy

import "testing"

func Test(t *testing.T) {
	t.Fatal("buggy!")
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module definition requiring rsc.io/quote package version 1.1.0
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module x
require rsc.io/quote v1.1.0
```

----------------------------------------

TITLE: Testing Go Get Update without GOINSECURE
DESCRIPTION: Attempts to update the package without GOINSECURE, which should fail.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure.txt#2025-04-22_snippet_4

LANGUAGE: Shell
CODE:
```
env GOINSECURE=''
env GONOSUMDB=''
! go get -d -u -f insecure.go-get-issue-15410.appspot.com/pkg/p
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines the Go module for the test program, setting the module name to 'm' and specifying Go version 1.21 as the requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pie_race.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

go 1.21
```

----------------------------------------

TITLE: Expanding DBStats struct in database/sql package in Go
DESCRIPTION: Adds new fields to the DBStats struct in the database/sql package, including connection counts, wait statistics, and lifetime information.
SOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
type DBStats struct {
    Idle int
    InUse int
    MaxIdleClosed int64
    MaxLifetimeClosed int64
    MaxOpenConnections int
    WaitCount int64
    WaitDuration time.Duration
}
```

----------------------------------------

TITLE: Generating Go Package Documentation Structure
DESCRIPTION: This template outlines the structure for generating Go package documentation. It includes placeholders for various package elements such as import path, imports, constants, variables, functions, and types. The template uses Go's text/template syntax to populate the documentation with actual package data.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/testdata/template.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
{{synopsis .Doc}}
PACKAGE {{.Name}}

IMPORTPATH
	{{.ImportPath}}

{{with .Imports}}IMPORTS
{{range .}}	{{.}}
{{end}}
{{end}}{{/*

*/}}FILENAMES
{{range .Filenames}}	{{.}}
{{end}}{{/*

*/}}{{with .Consts}}
CONSTANTS
{{range .}}	{{synopsis .Doc}}
	{{node .Decl $.FSet}}

{{end}}{{end}}{{/*

*/}}{{with .Vars}}
VARIABLES
{{range .}}	{{synopsis .Doc}}
	{{node .Decl $.FSet}}

{{end}}{{end}}{{/*

*/}}{{with .Funcs}}
FUNCTIONS
{{range .}}	{{synopsis .Doc}}
	{{node .Decl $.FSet}}

{{end}}{{end}}{{/*

*/}}{{with .Types}}
TYPES
{{range .}}	{{synopsis .Doc}}
	{{node .Decl $.FSet}}

{{range .Consts}}	{{synopsis .Doc}}
	{{node .Decl $.FSet}}

{{end}}{{/*

*/}}{{range .Vars}}	{{synopsis .Doc}}
	{{node .Decl $.FSet}}

{{end}}{{/*

*/}}{{range .Funcs}}	{{synopsis .Doc}}
	{{node .Decl $.FSet}}

{{end}}{{/*

*/}}{{range .Methods}}	{{synopsis .Doc}}
	{{node .Decl $.FSet}}

{{end}}{{end}}{{end}}{{/*

*/}}{{with .Bugs}}
BUGS .Bugs is now deprecated, please use .Notes instead
{{range .}}{{indent "\t" .}}
{{end}}{{end}}{{with .Notes}}{{range $marker, $content := .}}
{{$marker}}S
{{range $content}}{{$marker}}({{.UID}}){{indent "\t" .Body}}
{{end}}{{end}}{{end}}
```

----------------------------------------

TITLE: Printing OIDs as String - crypto/x509 - Go
DESCRIPTION: Adds String() string method to OID, providing string representation of the OID for logging or display. Returns a textual encoding of the OID value.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
func (o OID) String() string
```

----------------------------------------

TITLE: Multi-line Deprecated Module Definition
DESCRIPTION: Defines a 'multiline' Go module with a multi-line deprecation message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
// Deprecated: first line
// second line.
module multiline

go 1.16
```

----------------------------------------

TITLE: Checking Selected Module Version 'c' in Go 1.17 (Lazy Loading)
DESCRIPTION: These shell commands update the main module to use Go 1.17 (enabling lazy loading), list the selected version of module 'c', and then run tests for package 'x'. The output shows that lazy loading prunes the irrelevant test dependency path (`a_test` -> `b` -> `c v0.2.0`), resulting in the selection of the version directly required by 'x' (`c v0.1.0`).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go mod edit -go=1.17
```

LANGUAGE: shell
CODE:
```
go list -m c
stdout '^c v0.1.0'
```

LANGUAGE: shell
CODE:
```
[!short] go test -v x
[!short] stdout ' c v0.1.0$'
```

----------------------------------------

TITLE: Setting Up Go Module Environment Variables
DESCRIPTION: Sets environment variables for Go modules including enabling modules, configuring the proxy server and disabling checksum database verification.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_fallback.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on

[!net:golang.org] skip
[!net:proxy.golang.org] skip

env GOPROXY=https://proxy.golang.org,direct
env GOSUMDB=off
```

----------------------------------------

TITLE: Raw Input List Format
DESCRIPTION: Shows the original input format of a loose list with nested content and varying indentation.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list8.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
Loose lists.
  - A

    B
  - C
    D
  - E
  - F
```

----------------------------------------

TITLE: Simple Go Hello World Program
DESCRIPTION: Basic Go program that prints 'hello' to stdout. Includes an explicit import path comment for custom package naming.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/custom-hg-hello.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main // import "vcs-test.golang.org/go/custom-hg-hello"

func main() {
	println("hello")
}
```

----------------------------------------

TITLE: Defining a Simple Go Module
DESCRIPTION: A minimal go.mod file defining a module named 'x'. This file is used in the test scenario to provide a module context when testing with GO111MODULE=on.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_versions.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module x
```

----------------------------------------

TITLE: Listing Go Module Dependencies with Retraction Information
DESCRIPTION: Command to list dependencies of a Go module showing retraction status. The '-m' flag shows module information and '-u' checks for available upgrades, displaying that the dependency 'example.com/retract/noupgrade' is retracted.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_noupgrade.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list -m -u example.com/retract/noupgrade
stdout '^example.com/retract/noupgrade v1.0.0 \(retracted\)$'
```

----------------------------------------

TITLE: Defining BadHop Function in Go for Baseball Simulation
DESCRIPTION: Declares a function 'BadHop' that takes three integer parameters and returns two booleans, two pointers to ThirdBase, and an error. This function likely simulates a bad hop scenario in baseball.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p3/golden.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
func BadHop(int, int, int) (bool, bool, *ThirdBase, *ThirdBase, error)
```

----------------------------------------

TITLE: Implementing Localized 'Glass' Phrase in Go
DESCRIPTION: This snippet defines the 'Glass' function, which returns a localized version of the 'I can eat glass' phrase based on the provided language preferences. If no preferences are given, it uses the default user preferences.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.3.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
func Glass(prefs ...language.Tag) string {
	if len(prefs) == 0 {
		prefs = DefaultUserPrefs()
	}
	return glass.find(prefs)
}
```

----------------------------------------

TITLE: Go Workspace Configuration
DESCRIPTION: Defines a Go workspace using go.work file that includes multiple module paths.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue51204.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go 1.18

use (
	./test2
	./test2/sub
)
```

----------------------------------------

TITLE: Setting Basic GOFLAGS Configuration
DESCRIPTION: Demonstrates setting initial GOFLAGS with multiple options including error handling (-e), custom formatting (-f), and benchmark settings.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goflags.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GOFLAGS='-e -f={{.Dir}} --test.benchtime=1s -count=10'
```

----------------------------------------

TITLE: Defining Go Workspace Configuration
DESCRIPTION: This snippet shows the contents of a go.work file, specifying the Go version and the module to use.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_env.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
go 1.18

use a
```

----------------------------------------

TITLE: Module A Implementation
DESCRIPTION: The main Go file for module 'example.com/a' that imports module 'example.com/b' for side effects only.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_conditional.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package a

import _ "example.com/b"
```

----------------------------------------

TITLE: Writing External Test for Package Function
DESCRIPTION: Implements a test function TestF in a separate test package to verify the behavior of the F() function from the main package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_xtestonly_works.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package xtestonly_test

import (
	"testing"
	"xtestonly"
)

func TestF(t *testing.T) {
	if x := xtestonly.F(); x != 42 {
		t.Errorf("f.F() = %d, want 42", x)
	}
}
```

----------------------------------------

TITLE: Skip Test Implementation in Go
DESCRIPTION: A simple test function that demonstrates the skip functionality in Go testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package skipper

import "testing"

func Test(t *testing.T) {
	t.Skip("skipping")
}
```

----------------------------------------

TITLE: Defining Go Module with Dependencies and Replacements
DESCRIPTION: This go.mod file defines a module 'm' with its dependencies and replacement directives. It specifies the Go version and includes various module requirements and replacements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

go 1.10

require (
	x.1 v1.0.0
	y.1 v1.0.0
	w.1 v1.2.0
)

replace x.1 v1.0.0 => ./x
replace y.1 v1.0.0 => ./y
replace z.1 v1.1.0 => ./z
replace z.1 v1.2.0 => ./z
replace w.1 => ./w
```

----------------------------------------

TITLE: Unix Platform Main Implementation
DESCRIPTION: Main program implementation specifically for Unix platforms using the unix build tag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_unix_tag.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
//go:build unix

package main

import _ "example.com/version"

func main() {}
```

----------------------------------------

TITLE: Testing Module Version Handling with rsc.io/breaker
DESCRIPTION: Shell script to test Go's behavior when finding the latest version of a module without downloading version contents. The test uses rsc.io/breaker which has two versions without .mod files and verifies that Go doesn't download .zip files when checking for updates.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_update_sum_readonly.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# rsc.io/breaker has two versions, neither of which has a .mod file.
go list -m -versions rsc.io/breaker
stdout '^rsc.io/breaker v1.0.0 v2.0.0\+incompatible$'
go mod download rsc.io/breaker@v1.0.0
! grep '^go' $GOPATH/pkg/mod/cache/download/rsc.io/breaker/@v/v1.0.0.mod
go mod download rsc.io/breaker@v2.0.0+incompatible
! grep '^go' $GOPATH/pkg/mod/cache/download/rsc.io/breaker/@v/v2.0.0+incompatible.mod

# Delete downloaded .zip files.
go clean -modcache

# Check for updates.
go list -m -u rsc.io/breaker
stdout '^rsc.io/breaker v1.0.0 \[v2.0.0\+incompatible\]$'

# We should not have downloaded zips.
! exists $GOPATH/pkg/mod/cache/download/rsc.io/breaker/@v/v1.0.0.zip
! exists $GOPATH/pkg/mod/cache/download/rsc.io/breaker/@v/v2.0.0+incompatible.zip
```

----------------------------------------

TITLE: Expected Output for 'go get -u -v' Command
DESCRIPTION: Expected output for the 'go get -u -v' command showing the complex process of updating to the latest versions and switching toolchains multiple times based on dependency requirements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
go: trying upgrade to example.net/a@v0.2.0
go: trying upgrade to example.net/b@v0.1.0
go: module ./a2 requires go >= 1.22.0; switching to go1.22.9
go: trying upgrade to example.net/a@v0.2.0
go: trying upgrade to example.net/b@v0.1.0
go: accepting indirect upgrade from go@1.20 to 1.22.0
go: trying upgrade to example.net/c@v0.1.0
go: trying upgrade to example.net/d@v0.2.0
go: module ./d2 requires go >= 1.23.0; switching to go1.23.9
go: trying upgrade to example.net/a@v0.2.0
go: trying upgrade to example.net/b@v0.1.0
go: accepting indirect upgrade from go@1.20 to 1.22.0
go: trying upgrade to example.net/c@v0.1.0
go: trying upgrade to example.net/d@v0.2.0
go: accepting indirect upgrade from go@1.22.0 to 1.23.0
go: upgraded go 1.20 => 1.23.0
go: upgraded example.net/a v0.1.0 => v0.2.0
go: added example.net/b v0.1.0
go: added example.net/c v0.1.0
go: added example.net/d v0.2.0
```

----------------------------------------

TITLE: Creating Package A With Import Cycle in Go Language
DESCRIPTION: A package named 'a' is defined, which imports package 'errcycle', creating an import cycle. This forms part of a test case for detecting import cycle errors in Go.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_err_cycle.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package a

import _ "errcycle"
```

----------------------------------------

TITLE: Direct Module Tidying
DESCRIPTION: Demonstrates that using 'go mod tidy' directly keeps requirements tidy from the start.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_4

LANGUAGE: Shell
CODE:
```
cp go.mod.orig go.mod
go mod tidy
cmpenv go.mod go.mod.tidy
```

----------------------------------------

TITLE: Example Go Module Definition
DESCRIPTION: Defines a simple Go module that requires a dependency with a future Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_modcmds.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example

go 1.21

require rsc.io/future v1.0.0
```

----------------------------------------

TITLE: Testing Go Version Request with go@1.22
DESCRIPTION: Tests how 'go get go@1.22' resolves to the latest 1.22 version and switches toolchains when GOTOOLCHAIN=auto is set.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
# go get go@1.22 should resolve to the latest 1.22
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get go@1.22
stderr '^go: updating go.mod requires go >= 1.22.9 \(running go 1.21; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp go.mod.new go.mod
go get go@1.22
stderr '^go: updating go.mod requires go >= 1.22.9; switching to go1.22.9$'
```

----------------------------------------

TITLE: Importing C in Go Module with Cgo
DESCRIPTION: A simple Go package that imports C using cgo directives. The code demonstrates the basic syntax for including C code in a Go file using the special import "C" statement preceded by a C code comment.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_depends_on_syscall.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package foo

// #include <stdio.h>
import "C"

```

----------------------------------------

TITLE: Automatic Version Correction in go.mod
DESCRIPTION: Tests that other Go commands automatically correct commit hashes to proper versions in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_9

LANGUAGE: shell
CODE:
```
go list -m -mod=mod all
grep 'rsc.io/quote v1.5.1' go.mod
```

----------------------------------------

TITLE: Comparing Timestamps from Files in Go
DESCRIPTION: This Go program (`before`) takes two file paths as command-line arguments (os.Args[1], os.Args[2]). It reads JSON-encoded timestamps from each file, unmarshals them into `time.Time` objects, truncates the first time based on the precision of the second using the `truncateLike` helper function, and checks if the (truncated) first timestamp is strictly before the second. It exits with an error code 1 if file reading, JSON unmarshalling, or the time comparison fails. This utility is used in the main test script to assert timestamp order.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue6480.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
-- before/before.go --
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"time"
)

func truncateLike(t, p time.Time) time.Time {
	nano := p.UnixNano()
	d := 1 * time.Nanosecond
	for nano%int64(d) == 0 && d < 1*time.Second {
		d *= 10
	}
	for nano%int64(d) == 0 && d < 2*time.Second {
		d *= 2
	}
	return t.Truncate(d)
}

func main() {
	var t1 time.Time
	b1, err := os.ReadFile(os.Args[1])
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if err := json.Unmarshal(b1, &t1); err != nil  {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}

	var t2 time.Time
	b2, err := os.ReadFile(os.Args[2])
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if err := json.Unmarshal(b2, &t2); err != nil  {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}

	t1 = truncateLike(t1, t2)
	if !t1.Before(t2) {
		fmt.Fprintf(os.Stderr, "time in %v (%v) is not before time in %v (%v)", os.Args[1], t1, os.Args[2], t2)
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: Main module definition with dependencies
DESCRIPTION: Go module definition for the main test module 'example.com/m' that includes dependencies on other modules used in the test. It includes replace directives to point to local module directories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com/m

require example.com/unused v0.0.0 // indirect
replace example.com/unused => ../unused

require example.com/m/nested v0.0.0 // indirect
replace example.com/m/nested => ../nested
```

----------------------------------------

TITLE: Load Import Error Test
DESCRIPTION: Test file that imports a package with loading errors to verify error propagation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_json.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package loadimporterror

import _ "m/loaderror"
```

----------------------------------------

TITLE: Main Package with Internal Import
DESCRIPTION: A Go file that imports an internal package. This demonstrates the basic structure of a package that relies on an internal dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_files.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package foo
import _ "example.com/internal"
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module declaration for example.com
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_export_e.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com
```

----------------------------------------

TITLE: Go Module Checksum File
DESCRIPTION: Contains cryptographic checksums for each required module version to ensure integrity of dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_skip_write.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:pvCbr/wm8HzDD3fVywevekufpn6tCGPY3spdHeZJEsw=
golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
rsc.io/quote v1.5.2 h1:3fEykkD9k7lYzXqCYrwGAf7iNhbk4yCjHmKBN9td4L0=
rsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=
rsc.io/sampler v1.2.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=
rsc.io/sampler v1.3.0 h1:HLGR/BgEtI3r0uymSP/nl2uPLsUnNJX8toRyhfpBTII=
rsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=
rsc.io/testonly v1.0.0 h1:K/VWHdO+Jv7woUXG0GzVNx1czBXUt3Ib1deaMn+xk64=
rsc.io/testonly v1.0.0/go.mod h1:OqmGbIFOcF+XrFReLOGZ6BhMM7uMBiQwZsyNmh74SzY=
```

----------------------------------------

TITLE: Defining File Operation Constants (O_*) in Go for darwin-arm64
DESCRIPTION: Constants for file opening and control operations. These flags are used with open(2) and similar system calls to specify file access modes, creation behavior, synchronization requirements, and other file operation attributes.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_85

LANGUAGE: Go
CODE:
```
const O_ACCMODE = 3
const O_ACCMODE ideal-int
const O_ALERT = 536870912
const O_ALERT ideal-int
const O_APPEND = 8
const O_ASYNC = 64
const O_CLOEXEC = 16777216
const O_CREAT = 512
const O_DIRECTORY = 1048576
const O_DIRECTORY ideal-int
const O_DP_GETRAWENCRYPTED = 1
const O_DP_GETRAWENCRYPTED ideal-int
const O_DSYNC = 4194304
const O_DSYNC ideal-int
const O_EVTONLY = 32768
const O_EVTONLY ideal-int
const O_EXCL = 2048
const O_EXLOCK = 32
const O_EXLOCK ideal-int
const O_FSYNC = 128
const O_FSYNC ideal-int
const O_NDELAY = 4
const O_NDELAY ideal-int
const O_NOCTTY = 131072
const O_NOFOLLOW = 256
const O_NOFOLLOW ideal-int
const O_NONBLOCK = 4
const O_POPUP = 2147483648
const O_POPUP ideal-int
const O_SHLOCK = 16
const O_SHLOCK ideal-int
const O_SYMLINK = 2097152
const O_SYMLINK ideal-int
const O_SYNC = 128
const O_TRUNC = 1024
```

----------------------------------------

TITLE: Declaring Syscall Functions for Darwin ARM64 CGO in Go
DESCRIPTION: This snippet declares various syscall functions for the Darwin ARM64 CGO platform. These functions cover a wide range of system operations including file handling, socket operations, process management, and memory management.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_198

LANGUAGE: Go
CODE:
```
func Accept(int) (int, Sockaddr, error)
func Access(string, uint32) error
func Adjtime(*Timeval, *Timeval) error
func Bind(int, Sockaddr) error
func Chflags(string, int) error
func Chroot(string) error
func Close(int) error
func CloseOnExec(int)
func CmsgLen(int) int
func CmsgSpace(int) int
func Connect(int, Sockaddr) error
func Dup(int) (int, error)
func Dup2(int, int) error
func Exchangedata(string, string, int) error
func Fchdir(int) error
func Fchflags(int, int) error
func Fchmod(int, uint32) error
func Fchown(int, int, int) error
func FcntlFlock(uintptr, int, *Flock_t) error
func Flock(int, int) error
func ForkExec(string, []string, *ProcAttr) (int, error)
func Fpathconf(int, int) (int, error)
func Fstat(int, *Stat_t) error
func Fstatfs(int, *Statfs_t) error
func Fsync(int) error
func Ftruncate(int, int64) error
func Futimes(int, []Timeval) error
// ... (more function declarations)
```

----------------------------------------

TITLE: Testing Go Module Git Commit Resolution Rules
DESCRIPTION: This script tests how Go handles module imports that reference specific Git commits. It verifies that commits reachable from standard refs (heads/branches and tags) are allowed, while commits only reachable from non-standard refs like Gerrit change IDs are properly rejected.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_hash.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
env GOPROXY=direct
env GOSUMDB=off
[!net:golang.org] skip
[!git] skip

# fetch commit hash reachable from refs/heads/* and refs/tags/* is OK
go list -m golang.org/x/time@8be79e1e0910c292df4e79c241bb7e8f7e725959 # on master branch

# fetch other commit hash, even with a non-standard ref, is not OK
! go list -m golang.org/x/time@334d83c35137ac2b376c1dc3e4c7733791855a3a # refs/changes/24/41624/3
stderr 'unknown revision'
! go list -m golang.org/x/time@v0.0.0-20170424233410-334d83c35137
stderr 'unknown revision'
! go list -m golang.org/x/time@334d83c35137
stderr 'unknown revision'
```

----------------------------------------

TITLE: Module R Definition with Replacement
DESCRIPTION: Defines a module 'example.com/r' that requires and replaces another module. Includes a test file that should be deleted during cleaning.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_clean_cache.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
-- r/go.mod --
module example.com/r
require example.com/r/replaced v0.0.0
replace example.com/r/replaced => ../replaced
-- r/r.go --
package r
import _ "example.com/r/replaced"
-- r/test.out --
DELETE ME
```

----------------------------------------

TITLE: Build System Test Script
DESCRIPTION: Shell script testing Go build system behavior with GOCACHE and GOTMPDIR environment variables, including failure cases and command-specific behaviors
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_GOTMPDIR.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
[short] skip 'runs build'

# Set GOCACHE to a clean directory to ensure that 'go build' has work to report.
[!GOOS:windows] env GOCACHE=$WORK/gocache
[GOOS:windows] env GOCACHE=$WORK\gocache

# 'go build' should use GOTMPDIR if set.
[!GOOS:windows] env GOTMPDIR=$WORK/my-favorite-tmpdir
[GOOS:windows] env GOTMPDIR=$WORK\my-favorite-tmpdir
mkdir $GOTMPDIR
go build -x hello.go
stderr ^WORK=.*my-favorite-tmpdir

# Make GOTMPDIR a regular file. This prevents the creation of work directories,
# so we can check that certain commands don't create them.
# This simulates running on a full disk or a read-only volume.
rm $GOTMPDIR
cp hello.go $GOTMPDIR # any file will do

# 'go build' should fail if GOTMPDIR is read-only.
! go build -x .
stderr '^go: creating work dir: \w+ '$GOTMPDIR

# 'go list' should only fail if it needs to build something.
go list -x .
! stderr 'creating work dir'
stdout m
go list -m all
stdout m
! go list -x -export .
stderr '^go: creating work dir: \w+ '$GOTMPDIR

# 'go clean -cache' and 'go clean -modcache' should not fail.
go clean -x -cache
! stderr 'creating work dir'
go clean -x -modcache
! stderr 'creating work dir'

# 'go env' should not fail for specific variables.
# Without arguments, it needs to initialize a builder to load cgo flags, and
# that uses a temporary directory.
! go env
stderr '^go: creating work dir: \w+ '$GOTMPDIR
go env GOROOT
```

----------------------------------------

TITLE: Defining Go Module with Dependencies
DESCRIPTION: This snippet defines a Go module with its dependencies and replace directives in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_of_test_dep.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.com/lazy

go 1.15

require example.com/a v0.1.0

replace (
	example.com/a v0.1.0 => ./a
	example.com/b v0.1.0 => ./b1
	example.com/b v0.2.0 => ./b2
	example.com/c v0.1.0 => ./c1
	example.com/c v0.2.0 => ./c2
)
```

----------------------------------------

TITLE: Testing 'go list' Failure with Non-Go File (Shell)
DESCRIPTION: Executes the `go list` command with flags `-test` and `-json`, attempting to list a C file (`c.c`) and a Go file (`x.go`). The leading `!` indicates that the command is expected to fail (exit with a non-zero status). The expected standard error (`stderr`) matches a regular expression confirming the error message about `c.c` not being a `.go` file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_non_go_files.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
! go list -test -json -- c.c x.go
stderr '^named files must be \\.go files: c\\.c$'
```

----------------------------------------

TITLE: Configuring Go Module Environment for Redirect Testing
DESCRIPTION: Sets up environment variables for Go module management, including enabling modules, configuring proxy settings with redirects, and disabling the checksum database.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_too_many_redirects.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
env GOPROXYBASE=$GOPROXY
env GOPROXY=$GOPROXYBASE/redirect/11
env GOSUMDB=off
```

----------------------------------------

TITLE: Go Program for Path Verification
DESCRIPTION: Main program that attempts to locate the 'go' executable in the system path using exec.LookPath. Used to verify path configuration and accessibility of the go toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_goroot_PATH.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
//go:generate go run .

package main

import (
	"fmt"
	"os"
	"os/exec"
)

func main() {
	_, err := exec.LookPath("go")
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: Main Module Definition with Indirect Dependency
DESCRIPTION: Primary go.mod file containing module definition with an indirect dependency comment that includes spacing issue.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_nospace.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.net/m

go 1.16

require example.net/x v0.1.0 //indirect

replace example.net/x v0.1.0 => ./x
```

----------------------------------------

TITLE: Configuring Go Environment for Module Mode
DESCRIPTION: Sets the GO111MODULE environment variable to 'on' to enable module mode for Go commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_flags.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Deprecations in archive/zip package
DESCRIPTION: Lists deprecated methods and struct fields in the archive/zip package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_17

LANGUAGE: Go
CODE:
```
pkg archive/zip, method (*File) ModTime //deprecated
pkg archive/zip, method (*File) SetModTime //deprecated
pkg archive/zip, method (*FileHeader) ModTime //deprecated
pkg archive/zip, method (*FileHeader) SetModTime //deprecated
pkg archive/zip, type FileHeader struct, CompressedSize //deprecated
pkg archive/zip, type FileHeader struct, ModifiedDate //deprecated
pkg archive/zip, type FileHeader struct, ModifiedTime //deprecated
pkg archive/zip, type FileHeader struct, UncompressedSize //deprecated
```

----------------------------------------

TITLE: Socket Address Structs for darwin-arm64
DESCRIPTION: Collection of socket address structure definitions used for network programming on darwin-arm64, including raw socket representations for different address families.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_129

LANGUAGE: go
CODE:
```
type RawSockaddr struct {
	Len uint8
	Family uint8
	Data [14]int8
}

type RawSockaddrAny struct {
	Pad [92]int8
}

type RawSockaddrInet4 struct {
	Len uint8
	Family uint8
	Zero [8]int8
}

type RawSockaddrInet6 struct {
	Len uint8
	Family uint8
}

type RawSockaddrUnix struct {
	Len uint8
	Family uint8
	Path [104]int8
}

type RawSockaddrDatalink struct {
	Len uint8
	Family uint8
	Index uint16
	Type uint8
	Nlen uint8
	Alen uint8
	Slen uint8
	Data [12]int8
}

type SockaddrDatalink struct {
	Len uint8
	Family uint8
	Index uint16
	Type uint8
	Nlen uint8
	Alen uint8
	Slen uint8
	Data [12]int8
}
```

----------------------------------------

TITLE: Missing Module v1.9.0 Definition with Retraction
DESCRIPTION: Module definition for v1.9.0 of the missing module test package, including a retraction directive for v1.0.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_replace.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com/retract/missingmod

go 1.14

// bad version
retract v1.0.0
```

----------------------------------------

TITLE: Running Go Benchmark Tests Command
DESCRIPTION: Shell command to run only benchmark tests while skipping regular tests using regex pattern matching. Includes validation of expected output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_benchmarks.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -run '^$' -bench . standalone_benchmark_test.go
! stdout '^ok.*\[no tests to run\]'
! stderr '^ok.*\[no tests to run\]'
stdout '^ok'
```

----------------------------------------

TITLE: Runtime metrics types in runtime/metrics package
DESCRIPTION: Type definitions for working with runtime metrics. Includes Description for metric metadata, Value for storing metric values, Float64Histogram for histogram data, Sample for collecting named metric values, and ValueKind for indicating metric value types.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
type Description struct
type Description struct, Cumulative bool
type Description struct, Description string
type Description struct, Kind ValueKind
type Description struct, Name string
type Float64Histogram struct
type Float64Histogram struct, Buckets []float64
type Float64Histogram struct, Counts []uint64
type Sample struct
type Sample struct, Name string
type Sample struct, Value Value
type Value struct
type ValueKind int
```

----------------------------------------

TITLE: Defining Go Module and Package
DESCRIPTION: The `go.mod` and `p.go` files define a simple module in Go. The `go.mod` file specifies a module named 'testdata'. The `p.go` file declares a package 'p'. These files simulate a basic Go module without additional dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_testdata.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
-- go.mod --
module testdata
-- p.go --
package p
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: A simple go.mod file defining the module name 'm' for the project. This is the minimal module definition required for a Go project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_unknown.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Go Module Get with Empty Proxy Fallback
DESCRIPTION: Test case showing successful module download when falling back to proxy.golang.org after empty proxy
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_file_path.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
env GOPROXY=file://$WORK/emptyproxy,https://proxy.golang.org
go get golang.org/x/text@v0.3.2
```

----------------------------------------

TITLE: Fuzz Test Cases Implementation
DESCRIPTION: Collection of fuzz test functions demonstrating different failure scenarios including return, skip, fail, panic, nil panic, runtime.Goexit, and os.Exit
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_fail.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
func FuzzReturn(f *testing.F) {
	if isWorker() {
		return
	}
	f.Fuzz(func(*testing.T, []byte) {})
}

func FuzzSkip(f *testing.F) {
	if isWorker() {
		f.Skip()
	}
	f.Fuzz(func(*testing.T, []byte) {})
}

func FuzzFail(f *testing.F) {
	if isWorker() {
		f.Fail()
	}
	f.Fuzz(func(*testing.T, []byte) {})
}

func FuzzPanic(f *testing.F) {
	if isWorker() {
		panic("nope")
	}
	f.Fuzz(func(*testing.T, []byte) {})
}

func FuzzNilPanic(f *testing.F) {
	if isWorker() {
		panic(nil)
	}
	f.Fuzz(func(*testing.T, []byte) {})
}

func FuzzGoexit(f *testing.F) {
	if isWorker() {
		runtime.Goexit()
	}
	f.Fuzz(func(*testing.T, []byte) {})
}

func FuzzExit(f *testing.F) {
	if isWorker() {
		os.Exit(99)
	}
	f.Fuzz(func(*testing.T, []byte) {})
}
```

----------------------------------------

TITLE: User-Configurable Logging for HTTP Reverse Proxy - net/http/httputil Package - Go
DESCRIPTION: Extends ReverseProxy struct with ErrorLog field in net/http/httputil, allowing custom logging of errors via *log.Logger. This enables application-level control over proxy server error recording, requiring the standard library log package and log.Logger object.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_19

LANGUAGE: Go
CODE:
```
type ReverseProxy struct {
    ErrorLog *log.Logger
    // ... other fields
}
```

----------------------------------------

TITLE: Go Module Replacement Directives
DESCRIPTION: This snippet showcases contents of module files with replacement directives. It describes the structure of 'go.mod', indicating specific versions to replace with local modules. This ensures control over which version of a module is used, primarily for testing purposes or local development.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_new_import.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
-- go.mod --
module example.com/lazy

go 1.15

require example.com/a v0.1.0

replace (
	example.com/a v0.1.0 => ./a
	example.com/b v0.1.0 => ./b
	example.com/c v0.1.0 => ./c1
	example.com/c v0.2.0 => ./c2
)

-- go.mod.117 --
module example.com/lazy

go 1.17

require example.com/a v0.1.0

require example.com/b v0.1.0 // indirect

replace (
	example.com/a v0.1.0 => ./a
	example.com/b v0.1.0 => ./b
	example.com/c v0.1.0 => ./c1
	example.com/c v0.2.0 => ./c2
)

-- go.mod.new --
module example.com/lazy

go 1.17

require example.com/a v0.1.0

require (
	example.com/b v0.1.0 // indirect
	example.com/c v0.1.0 // indirect
)

replace (
	example.com/a v0.1.0 => ./a
	example.com/b v0.1.0 => ./b
	example.com/c v0.1.0 => ./c1
	example.com/c v0.2.0 => ./c2
)
```

----------------------------------------

TITLE: HTML Template for Valid Repository in Subdirectory
DESCRIPTION: HTML template with a go-import meta tag for a valid Git repository in a subdirectory. This maps the module path 'vcs-test.golang.org/go/missingrepo/missingrepo-git/notmissing' to an existing Git repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/missingrepo.txt#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<meta name="go-import" content="vcs-test.golang.org/go/missingrepo/missingrepo-git/notmissing git https://vcs-test.golang.org/git/mainonly">
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: A Go module file defining the module name as 'example' and setting the Go version to 1.18, which is the minimum version required for fuzzing support.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_profile_flags.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example

go 1.18
```

----------------------------------------

TITLE: Defining No-Op Functions in Go Assembly (Plan 9 Syntax) - Go Assembly
DESCRIPTION: Each snippet declares a global symbol (t183 through t254) that represents a function, immediately followed by the RET instruction, making it a no-operation routine. These serve as stubbed function targets for a larger system generated by the accompanying shell script. No external dependencies are required, only the Go assembler and its conventions for symbol and function definitions. Each function takes no arguments or return values, and exists solely as a target for linkage or automated calls.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/dwarf5_gen_assembly_and_go.txt#2025-04-22_snippet_4

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t183(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t184(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t185(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t186(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t187(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t188(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t189(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t190(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t191(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t192(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t193(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t194(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t195(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t196(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t197(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t198(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t199(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t200(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t201(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t202(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t203(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t204(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t205(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t206(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t207(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t208(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t209(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t210(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t211(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t212(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t213(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t214(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t215(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t216(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t217(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t218(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t219(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t220(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t221(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t222(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t223(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t224(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t225(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t226(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t227(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t228(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t229(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t230(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t231(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t232(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t233(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t234(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t235(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t236(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t237(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t238(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t239(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t240(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t241(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t242(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t243(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t244(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t245(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t246(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t247(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t248(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t249(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t250(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t251(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t252(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t253(SB),0,$0\n	RET
```

LANGUAGE: Go Assembly
CODE:
```
TEXT ·t254(SB),0,$0\n	RET
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module declaration for the test project specifying Go 1.16 as the version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_issue33139.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Defining Process Tracing Constants in Go for Darwin ARM64 CGO
DESCRIPTION: This snippet defines constants for process tracing operations used in system calls on Darwin ARM64 with CGO. These constants are used for debugging and process control.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_171

LANGUAGE: Go
CODE:
```
const PTRACE_CONT = 7
const PTRACE_CONT ideal-int
const PTRACE_KILL = 8
const PTRACE_KILL ideal-int
const PTRACE_TRACEME = 0
const PTRACE_TRACEME ideal-int
const PT_ATTACH = 10
const PT_ATTACH ideal-int
const PT_ATTACHEXC = 14
const PT_ATTACHEXC ideal-int
const PT_CONTINUE = 7
const PT_CONTINUE ideal-int
const PT_DENY_ATTACH = 31
const PT_DENY_ATTACH ideal-int
const PT_DETACH = 11
const PT_DETACH ideal-int
const PT_FIRSTMACH = 32
const PT_FIRSTMACH ideal-int
const PT_FORCEQUOTA = 30
const PT_FORCEQUOTA ideal-int
const PT_KILL = 8
const PT_KILL ideal-int
const PT_READ_D = 2
const PT_READ_D ideal-int
const PT_READ_I = 1
const PT_READ_I ideal-int
const PT_READ_U = 3
const PT_READ_U ideal-int
const PT_SIGEXC = 12
const PT_SIGEXC ideal-int
const PT_STEP = 9
const PT_STEP ideal-int
const PT_THUPDATE = 13
const PT_THUPDATE ideal-int
const PT_TRACE_ME = 0
const PT_TRACE_ME ideal-int
const PT_WRITE_D = 5
const PT_WRITE_D ideal-int
const PT_WRITE_I = 4
const PT_WRITE_I ideal-int
const PT_WRITE_U = 6
const PT_WRITE_U ideal-int
```

----------------------------------------

TITLE: Setting GO111MODULE Environment Variable in Bash
DESCRIPTION: Sets the GO111MODULE environment variable to 'on' to enable Go modules for the subsequent commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_verify.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Implementing Parallel Tests for the Filter Package in Go
DESCRIPTION: This Go test file defines multiple test functions (`Test1` to `Test4`) for the 'filter' package within the 'filter_test' package. Each test function calls `filter.New()` and uses `t.Parallel()` to indicate that it can be run in parallel with other parallel tests. The tests primarily exercise the creation of the filter function returned by `New`, potentially to check for race conditions when run concurrently.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_race_issue56370.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- filter/filter_test.go --

package filter_test

import (
	"testing"

	"issue.56370/filter"
)

func Test1(t *testing.T) {
	t.Parallel()

	_ = filter.New()
}

func Test2(t *testing.T) {
	t.Parallel()

	_ = filter.New()
}

func Test3(t *testing.T) {
	t.Parallel()

	_ = filter.New()
}

func Test4(t *testing.T) {
	t.Parallel()

	_ = filter.New()
}
```

----------------------------------------

TITLE: Socket Options Management in syscall Package for NetBSD ARM64
DESCRIPTION: These functions provide options management for sockets, allowing the retrieval and setting of various socket parameters like buffer sizes, timeouts, and protocol-specific options.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_75

LANGUAGE: Go
CODE:
```
func GetsockoptByte(int, int, int) (uint8, error)
func GetsockoptInt(int, int, int) (int, error)
func GetsockoptInet4Addr(int, int, int) ([4]uint8, error)
func GetsockoptIPMreq(int, int, int) (*IPMreq, error)
func GetsockoptIPv6Mreq(int, int, int) (*IPv6Mreq, error)
func GetsockoptICMPv6Filter(int, int, int) (*ICMPv6Filter, error)
func GetsockoptIPv6MTUInfo(int, int, int) (*IPv6MTUInfo, error)
func SetsockoptByte(int, int, int, uint8) error
func SetsockoptInt(int, int, int, int) error
func SetsockoptInet4Addr(int, int, int, [4]uint8) error
func SetsockoptIPMreq(int, int, int, *IPMreq) error
func SetsockoptIPv6Mreq(int, int, int, *IPv6Mreq) error
func SetsockoptLinger(int, int, int, *Linger) error
func SetsockoptString(int, int, int, string) error
func SetsockoptTimeval(int, int, int, *Timeval) error
func SetsockoptICMPv6Filter(int, int, int, *ICMPv6Filter) error
```

----------------------------------------

TITLE: Defining Ethernet Type Constants in Go for NetBSD ARM64 CGO
DESCRIPTION: This code snippet defines numerous constants for Ethernet types used in network programming. Each constant is defined twice: once with a specific value and once as an ideal-int type. The constants cover a wide range of protocols and vendor-specific Ethernet types.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_22

LANGUAGE: Go
CODE:
```
const ETHERTYPE_NCD ideal-int
const ETHERTYPE_NESTAR = 32774
const ETHERTYPE_NESTAR ideal-int
const ETHERTYPE_NETBEUI = 33169
const ETHERTYPE_NETBEUI ideal-int
const ETHERTYPE_NOVELL = 33080
const ETHERTYPE_NOVELL ideal-int
const ETHERTYPE_NS = 1536
const ETHERTYPE_NSAT = 1537
const ETHERTYPE_NSAT ideal-int
const ETHERTYPE_NSCOMPAT = 2055
const ETHERTYPE_NSCOMPAT ideal-int
const ETHERTYPE_NS ideal-int
const ETHERTYPE_NTRAILER = 16
const ETHERTYPE_NTRAILER ideal-int
// ... (additional constants omitted for brevity)
const ETHERTYPE_XTP = 33149
const ETHERTYPE_XTP ideal-int
const ETHER_VLAN_ENCAP_LEN = 4
```

----------------------------------------

TITLE: Expected Go Module Definition after Adding Import (Go 1.17 Lazy Loading)
DESCRIPTION: The expected `go.mod` file (`go.mod.lazy`) after running `go mod tidy` on the modified `m.go` with Go 1.17 (lazy loading). It requires both `a` and `b` directly. Crucially, it also includes an `// indirect` requirement for `c`, which is brought in because `b` is now a direct dependency and requires `c`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_5

LANGUAGE: gomod
CODE:
```
-- go.mod.lazy --
module m

go 1.17

require (
	a v0.1.0
	b v0.1.0
)

require c v0.1.0 // indirect

replace (
	a v0.1.0 => ./a1
	b v0.1.0 => ./b1
	c v0.1.0 => ./c1
	c v0.2.0 => ./c2
)
```

----------------------------------------

TITLE: Package Import (m1/p/p.go)
DESCRIPTION: Simple Go package that imports the q package from m2 module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_issue56222.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package p

import _ "example.com/m2/q"
```

----------------------------------------

TITLE: Main Module Definition with Self-Reference
DESCRIPTION: Defines the main module with a self-reference to an older version and replacement directives for dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_lazy_self.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module golang.org/issue/46078

go 1.17

replace (
	example.net/x v0.1.0 => ./x
	example.net/x v0.2.0 => ./x
	golang.org/issue/46078 v0.1.0 => ./old
)

require golang.org/issue/46078 v0.1.0
```

----------------------------------------

TITLE: Testing GO111MODULE=on Module Resolution in Go
DESCRIPTION: Tests GO111MODULE=on behavior which should trigger module mode everywhere regardless of directory location. This verifies that module paths are correctly reported and modules are found in parent directories when needed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_enabled.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
env GO111MODULE=on

cd $GOPATH/src/x/y/z
go env GOMOD
stdout z[/\\]go.mod

cd $GOPATH/src/x/y/z/w
go env GOMOD
stdout z[/\\]go.mod

cd $GOPATH/src/x/y
go env GOMOD
stdout 'NUL|/dev/null'
go list -m
stdout '^command-line-arguments$'

cd $GOPATH/foo
go env GOMOD
stdout foo[/\\]go.mod

cd $GOPATH/foo/bar/baz
go env GOMOD
stdout foo[/\\]go.mod
```

----------------------------------------

TITLE: Testing GOMODCACHE with Multiple GOPATH Elements in Go
DESCRIPTION: This snippet verifies that when GOMODCACHE isn't set and GOPATH has multiple elements, only the first path is used for GOMODCACHE.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache.txt#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
env GOMODCACHE=
env GOPATH=$WORK/first/path${:}$WORK/this/is/ignored
go env GOMODCACHE
stdout $WORK[/\\]first[/\\]path[/\\]pkg[/\\]mod
```

----------------------------------------

TITLE: Original Go Module Definition
DESCRIPTION: Base go.mod file defining direct dependencies and module replacements
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_promote_implicit.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.16

require direct v1.0.0

replace (
	direct v1.0.0 => ./direct
	indirect-with-pkg v1.0.0 => ./indirect-with-pkg
	indirect-without-pkg v1.0.0 => ./indirect-without-pkg
)
```

----------------------------------------

TITLE: Go Source File with Import
DESCRIPTION: Go source file that imports rsc.io/quote package and uses its Hello function
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_quote.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package x
import "rsc.io/quote"
func main() { _ = quote.Hello }
```

----------------------------------------

TITLE: Testing Go Build and Test with Vendored Packages
DESCRIPTION: This snippet tests 'go build' and 'go test' commands using vendored packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_8

LANGUAGE: shell
CODE:
```
# 'go build' and 'go test' using vendored packages should succeed.
go build -mod=mod
go build -mod=vendor
go test -mod=vendor . ./subdir
go test -mod=vendor ./...
go fmt -mod=vendor ./...
```

----------------------------------------

TITLE: Listing Standard Packages and Excluding Vendor Directories with Go List in Shell
DESCRIPTION: Executes `go list ./...` (implicitly within `$GOROOT/src` from the previous step) to list all standard packages recursively. It checks the standard output (`stdout`) to confirm that standard command packages like `cmd/compile` are included, while explicitly asserting (`! stdout`) that packages within potential top-level or `cmd`-specific vendor directories (`vendor/golang.org`, `cmd/vendor`) are excluded from this default recursive listing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_std.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
# Standard packages should include cmd, but not cmd/vendor.
go list ./...
stdout cmd/compile
! stdout vendor/golang.org
! stdout cmd/vendor
```

----------------------------------------

TITLE: Go Module Configuration File
DESCRIPTION: Module definition file specifying dependencies and Go version requirements. Requires a retracted version of example.com/retract.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/use

go 1.15

require example.com/retract v1.0.0-bad
```

----------------------------------------

TITLE: Importing a Dependency in a Go Package (Go)
DESCRIPTION: This Go source file defines a simple package `x`. It imports the `rsc.io/quote` package using a blank identifier (`_`). This import ensures that the `rsc.io/quote` module is registered as a dependency in the `go.mod` file when `go get` or other build commands are run, even though no functions from the package are directly called.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
-- x.go --
package x
import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Explicit CGO Usage Sample Program in Go
DESCRIPTION: This example demonstrates a Go program with explicit CGO usage, embedding C code to define a function returning the number 42. It is used to ensure that such programs trigger external linking as expected.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_suspect_flag_force_external.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package main

/*
int meaningOfLife() { return 42; }
*/
import "C"

func main() {
     println(C.meaningOfLife())
}

```

----------------------------------------

TITLE: Testing Multiple Packages and Fuzz Targets with Go Test
DESCRIPTION: A test script that demonstrates the limitations of Go's fuzzing feature when dealing with multiple packages or multiple fuzz targets. The script shows that fuzzing cannot be used with multiple packages, and within a single package, the fuzzing pattern must match exactly one fuzz target.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_multiple.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# With fuzzing disabled, multiple targets can be tested.
go test ./...

# With fuzzing enabled, at most one package may be tested,
# even if only one package contains fuzz targets.
! go test -fuzz=. ./...
stderr '^cannot use -fuzz flag with multiple packages$'
! go test -fuzz=. ./zero ./one
stderr '^cannot use -fuzz flag with multiple packages$'
go test -fuzz=. -fuzztime=1x ./one

# With fuzzing enabled, at most one target in the same package may match.
! go test -fuzz=. ./two
stdout '^testing: will not fuzz, -fuzz matches more than one fuzz test: \[FuzzOne FuzzTwo\]$'
go test -fuzz=FuzzTwo -fuzztime=1x ./two
```

----------------------------------------

TITLE: Local Usequote Module Definition
DESCRIPTION: go.mod file for the local usequote module that depends on rsc.io/quote v1.5.2
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_changes.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module usequote

go 1.16

require rsc.io/quote v1.5.2
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file that specifies the module name as 'M' and Go version 1.21.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
module M

go 1.21
```

----------------------------------------

TITLE: Fetching Package with Go Get
DESCRIPTION: This snippet uses the 'go get' command to retrieve the specified version of the golang.org/x/text package. The example includes expected standard error outputs to verify correct URL logging behavior, which was part of fixing a previously existing bug.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getx.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
# 'go get -x' should log URLs with an HTTP or HTTPS scheme.
# A bug had caused us to log schemeless URLs instead.
go get -x golang.org/x/text@v0.1.0
stderr '^# get https://golang.org/x/text\?go-get=1$'
stderr '^# get https://golang.org/x/text\?go-get=1: 200 OK \([0-9.]+s\)$'
! stderr '^# get //.*'
```

----------------------------------------

TITLE: Setting Up Go Module Environment and Running Vendor Test
DESCRIPTION: This snippet configures the Go environment and runs the vendor command. It then compares the expected modules.txt with the actual one generated during vendoring to verify replacement handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
env GO111MODULE=on

go mod vendor
cmp go1.14-modules.txt vendor/modules.txt
```

----------------------------------------

TITLE: Testing go list Template Output
DESCRIPTION: Tests the go list command with -f flag using a template to format output to stdout
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_json_with_f.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go list -f '{{.}}' ./...
```

----------------------------------------

TITLE: Defining Rusage Structure in Go for NetBSD ARM64
DESCRIPTION: Definition of the Rusage struct which captures system resource usage statistics. It contains fields for tracking CPU time, memory usage, I/O operations, and various system events.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_103

LANGUAGE: Go
CODE:
```
type Rusage struct {
    Utime Timeval
    Stime Timeval
    Maxrss int64
    Ixrss int64
    Idrss int64
    Isrss int64
    Minflt int64
    Majflt int64
    Nswap int64
    Inblock int64
    Oublock int64
    Msgsnd int64
    Msgrcv int64
    Nsignals int64
    Nvcsw int64
    Nivcsw int64
}
```

----------------------------------------

TITLE: Module A Source File
DESCRIPTION: A simple Go source file for module 'a' that imports module 'b'. This establishes the dependency relationship tested in the script.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_main_module_replaced.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package a

import _ "example.com/b"
```

----------------------------------------

TITLE: Importing C in Go Package
DESCRIPTION: Defines a Go package named 'foo' and imports the C package for CGo functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cgo_error.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package foo

import "C"
```

----------------------------------------

TITLE: Testing Go List Command for Linux Environment
DESCRIPTION: Sets the environment variables for Linux and runs 'go list all' command to ensure all packages build on Linux.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_all_gobuild.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GOOS=linux
env GOARCH=amd64
go list all
```

----------------------------------------

TITLE: Defining Tagged Go File with Buggy Code
DESCRIPTION: Creates a Go file with a build tag 'buggy' that contains a formatting error to be detected by go vet.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_flags.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
// +build buggy

package x

import "fmt"

func init() {
	fmt.Sprint("%s") // oops!
}
```

----------------------------------------

TITLE: Downgrading Module and Verifying Dependencies
DESCRIPTION: This snippet downgrades module 'd' to version 1, which triggers a downgrade of 'b' and an upgrade of 'c'. It then lists all modules to verify the changes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect_pruned.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go get -v example.com/d@v0.1.0
go list -m all
stdout '^example.com/b v0.1.0 '
stdout '^example.com/c v0.2.0 '
stdout '^example.com/d v0.1.0 '
cmp go.mod go.mod.down1
```

----------------------------------------

TITLE: Unit Tests for Quote Functions in Go
DESCRIPTION: Test suite that verifies each function (TestHello, TestGlass, TestGo) returns the expected quote string. The tests ensure the output matches the predefined quotes exactly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/not-rsc.io_quote_v0.1.0-nomod.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package quote

import "testing"

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory. Share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}
```

----------------------------------------

TITLE: Handling Unknown Directives in go.mod
DESCRIPTION: This shell script demonstrates handling errors resulting from unknown directives in the main module go.mod file. The script requires a go.mod file setup with errors and outputs specific error messages with 'stderr'. Mainly for debugging purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badmod.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
cp go.mod.bad go.mod
! go list -m -mod=mod all
stderr 'unknown directive: hello'
```

----------------------------------------

TITLE: Module Definition for Fortune v2
DESCRIPTION: Defines the Go module name for fortune version 2
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v2_v2.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module rsc.io/fortune/v2
```

----------------------------------------

TITLE: Test File with Vendor Imports
DESCRIPTION: Defines a test file that imports vendored packages p and p1, and includes a no-op test function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue11864.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package t

import _ "vendor.org/p"
import _ "vendor.org/p1"
import "testing"

func TestNop(t *testing.T) {}
```

----------------------------------------

TITLE: External test Go file in xtest package
DESCRIPTION: A test-only Go file that uses the p_test package name, indicating it's an external test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_no_go.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package p_test
```

----------------------------------------

TITLE: Minimal go.mod for Directory Replacement (a) - Go
DESCRIPTION: This go.mod resides in a directory named 'a' and defines the module example.com/deprecated/a, targeting Go 1.17. It is meant for use in a directory-based replacement configuration. No external dependencies or replacements are specified.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_deprecated_replace.txt#2025-04-22_snippet_6

LANGUAGE: go.mod
CODE:
```
module example.com/deprecated/a

go 1.17
```

----------------------------------------

TITLE: Testing t.Fail() in Go Fuzz Tests
DESCRIPTION: This fuzz test function demonstrates how Go's fuzzing handles a call to t.Fail(). It fails the test when the input is not 'aa'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
func FuzzWithFail(f *testing.F) {
	f.Add([]byte("aa"))
	f.Fuzz(func(t *testing.T, b []byte) {
		if string(b) != "aa" {
			t.Fail()
		}
	})
}
```

----------------------------------------

TITLE: Defining Tests for Package 'main' in Go
DESCRIPTION: Contains the test suite for the `main` package, located in `main/main_test.go`. The `TestMain` function uses the standard `testing` package to define test cases. It calls `MFunc` and `M2Func` and uses `t.Fatalf` to fail the test if the returned values are not as expected. These tests drive the execution of the code in `main.go` during coverage analysis.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_single_vs_multiple.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
-- main/main_test.go --
package main

import "testing"

func TestMain(t *testing.T) {
	if MFunc() != "42" {
		t.Fatalf("bad!")
	}
	if M2Func() != 42 {
		t.Fatalf("also bad!")
	}
}
```

----------------------------------------

TITLE: Verifying Coverage Output Consistency Using go test and go build -cover - Shell
DESCRIPTION: This shell script sequence builds a Go project with coverage enabled, runs the executable to collect a coverage profile, and restores the coverage environment directory. It then analyzes coverage data and validates expected output patterns to ensure consistency. This script expects a Go project structure, access to the go toolchain, and sets specific environment variables for coverage output. Expected outputs are parsed using regex checks on the standard output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_main_import_path.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Build this program with -cover and run to collect a profile.
go build -cover -o $WORK/prog.exe .

# Save off old GOCOVERDIR setting
env SAVEGOCOVERDIR=$GOCOVERDIR

mkdir $WORK/covdata
env GOCOVERDIR=$WORK/covdata
exec $WORK/prog.exe

# Restore previous GOCOVERDIR setting
env GOCOVERDIR=$SAVEGOCOVERDIR

# Report percent lines covered.
go tool covdata percent -i=$WORK/covdata
stdout '\s*mainwithtest\s+coverage:'
! stdout 'main\s+coverage:'

# Go test -cover should behave the same way.
go test -cover .
stdout 'ok\s+mainwithtest\s+\S+\s+coverage:'
! stdout 'ok\s+main\s+.*'

```

----------------------------------------

TITLE: Linking C Function in Go Package
DESCRIPTION: This Go package uses cgo to import an external C function declared with int return type. It initializes by calling the C function and panics if the return value is not 42, testing the integration with the compiled syso file. There are no specific package-level dependencies aside from cgo.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_syso_issue29253.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package pkg

// extern int f(void);
import "C"

func init() {
	if v := C.f(); v != 42 {
		panic(v)
	}
}
```

----------------------------------------

TITLE: Subdirectory V2 Module Declaration
DESCRIPTION: This go.mod snippet in a subdirectory declares a package for rsc.io/quote/v2. It sets up a separate module space, demonstrating Go's module system flexibility.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_multirepo.txt#2025-04-22_snippet_8

LANGUAGE: Go
CODE:
```
package rsc.io/quote/v2
```

----------------------------------------

TITLE: Running Parallel Subtests in Go
DESCRIPTION: This shell command runs Go tests, specifically targeting subtests named 'Sub' and 'Nested' in the standalone_parallel_sub_test.go file. It ensures the tests run and complete successfully.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_subtests_parallel.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -run Test/Sub/Nested standalone_parallel_sub_test.go
! stdout '^ok.*\[no tests to run\]'
! stderr '^ok.*\[no tests to run\]'
stdout '^ok'
```

----------------------------------------

TITLE: Defining Leaf Go Package (Go)
DESCRIPTION: This Go source file defines a simple, empty package named `c` located in the `c` directory (`m/c`). It serves as a dependency for package `m/b` in this test setup.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pgo_issue66218.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package c
```

----------------------------------------

TITLE: Go Module Definition with Retracted Dependency
DESCRIPTION: A go.mod file specifying a module that requires a retracted nested module version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_retract_ambiguous.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/use

go 1.16

require example.com/retract/ambiguous/nested v1.9.0-bad
```

----------------------------------------

TITLE: Importing and Using Replaced Modules in Go
DESCRIPTION: This Go file demonstrates how to import and use modules that have been replaced in the workspace configuration. It shows that the code can use the replaced modules transparently.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package m

import "example.com/dep"
import "example.com/other"

func F() {
	dep.G()
	other.H()
}
```

----------------------------------------

TITLE: Go.mod Configuration for Module A
DESCRIPTION: The go.mod file for module A, which requires modules B and C as dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_14

LANGUAGE: go
CODE:
```
module example.com/a

go 1.15

require (
	example.com/b v0.1.0
	example.com/c v0.1.0
)
```

----------------------------------------

TITLE: Deprecating and Adding Cryptographic Functions in Go
DESCRIPTION: Deprecation of certain cryptographic functions and addition of new ones in the crypto/cipher package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
func NewCFBDecrypter //deprecated
func NewCFBEncrypter //deprecated
func NewGCMWithRandomNonce(Block) (AEAD, error)
func NewOFB //deprecated
```

----------------------------------------

TITLE: Non-Main Package CGO Usage Sample Program in Go
DESCRIPTION: A sample program showing CGO usage in a non-main Go package, defining C code similar to other samples. Used to test external linking when CGO is applied within non-main packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_suspect_flag_force_external.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package p

/*
int meaningOfLife() { return 42; }
*/
import "C"

func PrintIt() {
     println(C.meaningOfLife())
}

```

----------------------------------------

TITLE: Go Module Using Non-Existing Module
DESCRIPTION: Go file that imports a non-existing module 'not-rsc.io/quote/v3' which will be replaced through the go.mod file's replace directive.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"not-rsc.io/quote/v3"
)

func main() {
	fmt.Println(quote.GoV3())
}
```

----------------------------------------

TITLE: Implementing TestMain with Exit Status 0
DESCRIPTION: This Go code implements a TestMain function that prints a message and exits with status 0, used to test the behavior of clean exits in TestMain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
package mainexit0_test

import (
	"fmt"
	"os"
	"testing"
)

func TestMain(m *testing.M) {
	fmt.Println("nothing to do")
	os.Exit(0)
}
```

----------------------------------------

TITLE: Upgraded Dependencies Go Module
DESCRIPTION: go.mod file after upgrading dependencies, including rsc.io/quote v1.5.2 and rsc.io/sampler v1.3.0
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_changes.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

go 1.16

require (
	rsc.io/quote v1.5.2 // indirect
	rsc.io/sampler v1.3.0
)
```

----------------------------------------

TITLE: Defining Message Handling Constants in Go for NetBSD ARM64
DESCRIPTION: Socket message flags for send/recv operations. These control how messages are sent and received over sockets, including special handling options.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_42

LANGUAGE: go
CODE:
```
const MSG_BCAST = 256
const MSG_CMSG_CLOEXEC = 2048
const MSG_CONTROLMBUF = 33554432
const MSG_CTRUNC = 32
const MSG_DONTROUTE = 4
const MSG_DONTWAIT = 128
const MSG_EOR = 8
const MSG_IOVUSRSPACE = 67108864
const MSG_LENUSRSPACE = 134217728
const MSG_MCAST = 512
const MSG_NAMEMBUF = 16777216
const MSG_NBIO = 4096
const MSG_NOSIGNAL = 1024
const MSG_OOB = 1
const MSG_PEEK = 2
const MSG_TRUNC = 16
const MSG_USERFLAGS = 16777215
const MSG_WAITALL = 64
```

----------------------------------------

TITLE: Self-Import Cycle Detection Test in Go
DESCRIPTION: Demonstrates a simple case of an import cycle where a package imports itself. This is an invalid Go code pattern that should trigger an 'import cycle not allowed' error during build.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_import_cycle.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package selfimport

import "selfimport"
```

----------------------------------------

TITLE: HTML Template for Missing Git Repository
DESCRIPTION: HTML template with a go-import meta tag for a non-existent Git repository. This defines a module path of 'vcs-test.golang.org/go/missingrepo/missingrepo-git' pointing to a Git repo that doesn't exist.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/missingrepo.txt#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<meta name="go-import" content="vcs-test.golang.org/go/missingrepo/missingrepo-git git https://vcs-test.golang.org/git/missingrepo">
```

----------------------------------------

TITLE: Example Function Order Preservation Test
DESCRIPTION: Go test file containing two example functions that verify source order preservation during test execution using a shared counter variable
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_example.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Make sure that go test runs Example_z before Example_a, preserving source order.

package p

import "fmt"

var n int

func Example_z() {
	n++
	fmt.Println(n)
	// Output: 1
}

func Example_a() {
	n++
	fmt.Println(n)
	// Output: 2
}
```

----------------------------------------

TITLE: Defining Go module
DESCRIPTION: Creates a go.mod file to define the module and Go version for the test environment.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_empty_err.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module example.com/m

go 1.14
```

----------------------------------------

TITLE: Invalid Go Build Command Example
DESCRIPTION: Shows the error message when attempting to use an invalid value (-1) for the -p flag in go build command. The -p flag must be a positive integer.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_negative_p.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go build -p=-1 example.go
```

----------------------------------------

TITLE: Testing Unset GOAUTH Behavior in Go
DESCRIPTION: This snippet tests the behavior when GOAUTH is unset, which should default to using netrc. It includes tests for both missing credentials and valid netrc file scenarios.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_netrc.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
# An unset GOAUTH should default to netrc.
env GOAUTH=
# Without credentials, downloading a module from a path that requires HTTPS
# basic auth should fail.
env NETRC=$WORK/empty
! go get vcs-test.golang.org/auth/or401
stderr '^\tserver response: ACCESS DENIED, buddy$'

# With credentials from a netrc file, it should succeed.
env NETRC=$WORK/netrc
go get vcs-test.golang.org/auth/or401

# A missing file should be fail as well.
env NETRC=$WORK/missing
! go get vcs-test.golang.org/auth/or401
stderr '^\tserver response: ACCESS DENIED, buddy$'
```

----------------------------------------

TITLE: Testing Vendor Mode and Module Directory in Go
DESCRIPTION: This snippet demonstrates how to use 'go list' to check module directories in vendor mode. It verifies that only the main module has a root directory in vendor mode.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_trimpath.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go mod vendor
go list -f {{.Module.Dir}} example.com/main
stdout $PWD
go list -f {{.Module.Dir}} example.com/stack
! stdout .
```

----------------------------------------

TITLE: Restoring Module Version and Verifying Dependencies
DESCRIPTION: This snippet restores module 'c' to version 1, which causes 'd' to upgrade to meet 'c's requirements. It then lists all modules to verify the changes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect_pruned.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
go get example.com/c@v0.1.0
go list -m all
! stdout '^example.com/b '
stdout '^example.com/c v0.1.0 '
stdout '^example.com/d v0.2.0 '
cmp go.mod go.mod.down2
```

----------------------------------------

TITLE: Testing Go Version Command with PIE Binaries
DESCRIPTION: Builds and checks version information for Position Independent Executables (PIE).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_7

LANGUAGE: Shell
CODE:
```
go build -buildmode=pie -o external.exe rsc.io/fortune
go version external.exe
stdout '^external.exe: .+'
go version -m external.exe
stdout -buildmode=pie
stdout '^\tpath\trsc.io/fortune'
stdout '^\tmod\trsc.io/fortune\tv1.0.0'

go build -buildmode=pie -ldflags=-linkmode=internal -o internal.exe rsc.io/fortune
go version internal.exe
stdout '^internal.exe: .+'
go version -m internal.exe
stdout -buildmode=pie
stdout '^\tpath\trsc.io/fortune'
stdout '^\tmod\trsc.io/fortune\tv1.0.0'
```

----------------------------------------

TITLE: Updated Go Program with Init Function
DESCRIPTION: The updated version of main.go adding an init function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/commit-after-tag.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package main

func main() {}
func init() {}
```

----------------------------------------

TITLE: Defining Fuzz Test Functions in Go
DESCRIPTION: This snippet defines several fuzz test functions in Go, each testing different aspects of the fuzzing functionality. It includes tests for failures in f.Add, testdata, and cache handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_seed_corpus.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package x

import "testing"

func FuzzWithAdd(f *testing.F) {
    f.Add(10)
    f.Fuzz(func(t *testing.T, i int) {
        if i == 10 {
            t.Error("bad thing here")
        }
    })
}

func FuzzWithGoodAdd(f *testing.F) {
    f.Add(10)
    f.Fuzz(func(t *testing.T, i int) {
        if i != 10 {
            t.Error("bad thing here")
        }
    })
}

func FuzzWithTestdata(f *testing.F) {
    f.Fuzz(func(t *testing.T, i int) {
        if i == 10 {
            t.Error("bad thing here")
        }
    })
}

func FuzzWithNoCache(f *testing.F) {
    f.Fuzz(func(t *testing.T, i int) {
        t.Error("bad thing here")
    })
}

func FuzzWithCache(f *testing.F) {
    f.Fuzz(func(t *testing.T, i int) {
        if i == 10 {
            t.Error("bad thing here")
        }
    })
}

func FuzzWithMinimizableCache(f *testing.F) {
    f.Fuzz(func(t *testing.T, b []byte) {
		if len(b) < 10 {
			return
		}
		for _, n := range b {
			if n != 0 {
				if len(b) == 10 {
					t.Log("got the minimum size!")
				}
				t.Fatalf("contains a non-zero byte of length %d", len(b))
			}
		}
    })
}

func FuzzRunNoneWithCache(f *testing.F) {
    f.Fuzz(func(t *testing.T, i int) {
        if i == 10 {
            t.Error("bad thing here")
        }
    })
}
```

----------------------------------------

TITLE: Main Module Definition
DESCRIPTION: Defines the main module with a local replacement for badimport dependency
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_errors.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/m

go 1.16

replace example.com/badimport v0.1.0 => ./badimport
```

----------------------------------------

TITLE: Configuring Go Module
DESCRIPTION: Demonstrates how to set up a Go module with vendoring enabled. It includes the main module file (go.mod) specifying the module path, a vendor/modules.txt for tracking vendored dependencies, and individual go.mod files for vendored modules. This setup ensures dependencies are managed within the project's vendor directory, and the Go List command is used to explore modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns_vendor.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
-- go.mod --
module example.com/m
```

LANGUAGE: Go
CODE:
```
-- vendor/modules.txt --
# example.com/x v0.0.0
example.com/x
# example.com/x/y v0.1.0
example.com/x/y
```

LANGUAGE: Go
CODE:
```
-- vendor/example.com/x/go.mod --
module example.com/x
```

LANGUAGE: Go
CODE:
```
-- vendor/example.com/x/y/go.mod --
module example.com/x/y
```

LANGUAGE: Go
CODE:
```
-- vendor/example.com/x/x.go --
package x
```

LANGUAGE: Go
CODE:
```
-- vendor/example.com/x/y/y.go --
package y
```

LANGUAGE: Go
CODE:
```
-- vendor/example.com/x/vendor/z/z.go --
package z
```

----------------------------------------

TITLE: Implementing a Simple Go Module
DESCRIPTION: This snippet shows the implementation of a simple Go module that is used as a dependency in the workspace. It defines a module and a function that is called by other modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
module example.com/dep
```

LANGUAGE: Go
CODE:
```
package dep

func G() {
}
```

----------------------------------------

TITLE: Test2pkg/pkg Package Import Definition
DESCRIPTION: HTML template defining git import path for test2pkg/pkg package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/test2-svn-git.txt#2025-04-22_snippet_2

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<meta name="go-import" content="vcs-test.golang.org/go/test2-svn-git/test2pkg git https://vcs-test.golang.org/git/README-only">
```

----------------------------------------

TITLE: Go Module with Version 1.13
DESCRIPTION: Defines a Go module with version 1.13 specified in go.mod, including a foo package that imports an external dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_buildmod_reason_issue67587.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package foo

import _ "github.com/foo/bar"
```

LANGUAGE: go
CODE:
```
module example.com

go 1.13
```

LANGUAGE: go
CODE:
```
package bar
```

----------------------------------------

TITLE: Example Module Definitions and Implementations
DESCRIPTION: This set of Go module definitions with Go source files provides a workspace structure for testing. The two main modules, example.com/a and example.com/b, each define dependencies which are used to validate module handling by the go command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_direct_work.txt#2025-04-22_snippet_1

LANGUAGE: Golang
CODE:
```
-- go.work --
go 1.23

use ./a
use ./b
-- a/go.mod --
module example.com/a

go 1.23

require rsc.io/sampler v1.2.1

require golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c // indirect
-- a/a.go --
package a

import "rsc.io/sampler"

func A() string {
    return sampler.Hello()
}
-- b/go.mod --
module example.com/b

go 1.23

// The indirect comment below is inaccurate. Its purpose
// is to test that it is corrected when enough packages
// are loaded to correct it.

require example.com/c v1.0.0 // indirect

replace example.com/c => ../c
-- b/b.go --
package b

import "example.com/c"

func B() {
    c.C()
}
-- c/go.mod --
module example.com/c

go 1.23
-- c/c.go --
package c

func C() {}
```

----------------------------------------

TITLE: Running Coverage Testing with go test -cover in Go
DESCRIPTION: This shell command uses Go's test tool to run tests with code coverage enabled on the package coverdep2/p1. The -short flag skips long-running tests, while -cover collects statement coverage. It expects the output to indicate 100.0% statement coverage, verifying that all code within the interdependent packages (p1 and p2) is executed by tests. Requires Go 1.16+ and the coverdep2 module structure as described, with cross-imported packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dep_loop.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go test -short -cover coverdep2/p1
stdout 'coverage: 100.0% of statements' # expect 100.0% coverage
```

----------------------------------------

TITLE: Providing Module Version Metadata in .info File - JSON
DESCRIPTION: This .info file supplies metadata for the Go module by specifying its version as v1.1.0. Tools like 'go mod download' and related proxy servers use such files to associate content hashes and timestamps with published module versions. The file is in standard JSON format, with a single 'Version' key. It does not require any external dependencies and serves purely as metadata; there are no parameters or dynamic content.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_v1.1.0.txt#2025-04-22_snippet_1

LANGUAGE: JSON
CODE:
```
{\"Version\":\"v1.1.0\"}
```

----------------------------------------

TITLE: Defining Go Module for Race Condition Test
DESCRIPTION: This snippet defines a Go module named 'testrace' with Go version 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/testing_issue40908.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module testrace

go 1.16
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: Defines a simple Go module named 'm'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_8

LANGUAGE: Go
CODE:
```
module m
```

----------------------------------------

TITLE: Defining a Minimal Go Module
DESCRIPTION: Creates a go.mod file that defines a module named 'example.com' with Go 1.13 as the minimum required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_empty.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com

go 1.13
```

----------------------------------------

TITLE: Declaring Module Requirement with go.mod in Go
DESCRIPTION: This snippet defines the module path as 'example.com/split' and adds a requirement for the subpackage 'example.com/split/subpkg' at version v1.1.0. It is typically placed in the root of a Go module and is necessary for dependency tracking and management using Go modules. The 'require' directive instructs the Go toolchain to fetch and use the specified version of the dependency when building or testing code. No additional parameters are required beyond those shown, and the snippet must be saved in a file named 'go.mod'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split_v1.1.0.txt#2025-04-22_snippet_0

LANGUAGE: go.mod
CODE:
```
module example.com/split

require example.com/split/subpkg v1.1.0
```

----------------------------------------

TITLE: Testing Go Build with Forced Internal Linking (Shell)
DESCRIPTION: This command attempts to build the Go project using internal linking mode, forced by the `-ldflags=-linkmode=internal` flag. This build is expected to fail because the generation of `_cgo_import.go` for package `c` does not account for the `#cgo LDFLAGS` specified in the dependency package `a`. The `stderr` check verifies that the error message indicates the inability to build for internal linking due to Cgo usage in package `c` or its dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
! go build -ldflags=-linkmode=internal
stderr 'some packages could not be built to support internal linking.*m/c|requires external linking|does not support internal cgo'
```

----------------------------------------

TITLE: Defining Transitive Test Dependency via 'x/otherdep' (Go)
DESCRIPTION: Defines a test file for package `x/otherdep` (using the `otherdep_test` naming convention). It imports `y/fromotherdeptest` from module `y` using a blank identifier. This establishes a test-only dependency for `x/otherdep`. The tests check if this package is *excluded* by `go list -deps -test all x/otherroot` because `x/otherdep` itself is not a root package in that command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_14

LANGUAGE: go
CODE:
```
-- x/otherdep/otherdep_test.go --
package otherdep_test

import _ "y/fromotherdeptest"
```

----------------------------------------

TITLE: Setting Up Test Environment and Go Module Caches - Shell
DESCRIPTION: This snippet prepares two working directories and sets Go-specific environment variables to configure module location and caching behavior. It disables checksum validation for the specified test domain and directs Go's module proxy and cache locations appropriately. No external dependencies are required beyond the shell and Go toolchain. This setup establishes controlled isolation for the subsequent tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61423.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
mkdir $WORK/mod1
mkdir $WORK/mod2
env GONOSUMDB=vcs-test.golang.org

env GOPROXY=direct
env GOMODCACHE=$WORK/mod1

```

----------------------------------------

TITLE: Module Declaration in go.mod
DESCRIPTION: Standard Go module declaration file for the toolchain module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-arm64.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: CGO Function Implementation
DESCRIPTION: A Go file with CGO code that integrates a C function. The file includes both C code and Go code with a function F() that calls the C function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p

/*
void
f(void)
{
}
*/
import "C"

var b bool

func F() {
	if b {
		for {
		}
	}
	C.f()
}
```

----------------------------------------

TITLE: Testing Go Run Commands for Non-Main Packages
DESCRIPTION: This snippet demonstrates various test cases for running Go packages, specifically showing the behavior when attempting to run non-main packages. It includes error messages for different scenarios.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_nonmain.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
! go run $PWD
! stderr 'no packages loaded'
stderr '^package example.net/nonmain is not a main package$'

! go run .
stderr '^package example.net/nonmain is not a main package$'

! go run ./...
stderr '^go: warning: "\./\.\.\." matched only non-main packages$'
stderr '^go: no packages loaded from \./\.\.\.'
```

----------------------------------------

TITLE: Fatal Error Fuzz Test in Go
DESCRIPTION: Demonstrates a fuzz test that triggers a fatal error using f.Fatal().
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package fatal_fuzz

import "testing"

func Fuzz(f *testing.F) {
    f.Fatal("fatal in target")
}
```

----------------------------------------

TITLE: Verifying t.Fatal Behavior in Go Benchmarks with Shell Commands
DESCRIPTION: A set of shell commands that run a benchmark test with the expectation that it will fail. The commands verify that the output doesn't indicate success and instead shows FAIL.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_fatal.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go test -run '^$' -bench . benchfatal
! stdout ^ok
! stderr ^ok
stdout FAIL.*benchfatal
```

----------------------------------------

TITLE: Go Source File without Imports
DESCRIPTION: Basic Go source file with no external imports
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_sum.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package x
```

----------------------------------------

TITLE: Module Definition in .mod File
DESCRIPTION: Declares the module path for the Go package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_invalidpath_v1_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/invalidpath/v1
```

----------------------------------------

TITLE: Darwin ARM64 System Call Constants
DESCRIPTION: Constants defining system call numbers for various operations on Darwin/ARM64. These constants are used to make system calls for operations like file handling, process management, semaphores, and network communication.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_187

LANGUAGE: Go
CODE:
```
const (
    SYS_NFSSVC ideal-int
    SYS_OPEN = 5
    SYS_OPEN_DPROTECTED_NP = 216
    SYS_OPEN_EXTENDED = 277
    SYS_OPEN_NOCANCEL = 398
    SYS_PATHCONF = 191
    SYS_PID_HIBERNATE = 435
    SYS_PID_RESUME = 434
    SYS_PID_SHUTDOWN_SOCKETS = 436
    SYS_PID_SUSPEND = 433
    // ... additional constants ...
    SYS_SETGROUPS = 80
    SYS_SETITIMER = 83
    SYS_SETLCID = 394
    SYS_SETLOGIN = 50
)
```

----------------------------------------

TITLE: Go Module Definition File
DESCRIPTION: A simple go.mod file that defines a module named 'm' with Go 1.14 as the required Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_trimpath.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module m

go 1.14
```

----------------------------------------

TITLE: Defining Go Module for Retraction Example
DESCRIPTION: This snippet defines a Go module named 'example.com/retract/rationale' using Go version 1.14.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-empty.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/retract/rationale

go 1.14
```

----------------------------------------

TITLE: Defining Original Go Module File
DESCRIPTION: This snippet defines the original go.mod file content for the test setup. It specifies the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_retract.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/use

go 1.15
```

----------------------------------------

TITLE: Defining Module in go.mod for rsc.io/badsum (Go)
DESCRIPTION: This snippet defines the module name in the go.mod file. It specifies the import path for the module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badsum_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module "rsc.io/badsum"
```

----------------------------------------

TITLE: Go Module Configuration
DESCRIPTION: A go.mod file defining the cgoasm module and its Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_asm_error.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module cgoasm

go 1.16
```

----------------------------------------

TITLE: IP Address Class Constants in Go Syscall Package for darwin-arm64
DESCRIPTION: Constants that define IP address class boundaries and masks for Class A, B, C, and D networks. These constants are used for IP address manipulation and classification in network code.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_67

LANGUAGE: Go
CODE:
```
const IN_CLASSA_HOST = 16777215
const IN_CLASSA_HOST ideal-int
const IN_CLASSA_MAX = 128
const IN_CLASSA_MAX ideal-int
const IN_CLASSA_NET = 4278190080
const IN_CLASSA_NET ideal-int
const IN_CLASSA_NSHIFT = 24
const IN_CLASSA_NSHIFT ideal-int
const IN_CLASSB_HOST = 65535
const IN_CLASSB_HOST ideal-int
const IN_CLASSB_MAX = 65536
const IN_CLASSB_MAX ideal-int
const IN_CLASSB_NET = 4294901760
const IN_CLASSB_NET ideal-int
const IN_CLASSB_NSHIFT = 16
const IN_CLASSB_NSHIFT ideal-int
const IN_CLASSC_HOST = 255
const IN_CLASSC_HOST ideal-int
const IN_CLASSC_NET = 4294967040
const IN_CLASSC_NET ideal-int
const IN_CLASSC_NSHIFT = 8
const IN_CLASSC_NSHIFT ideal-int
const IN_CLASSD_HOST = 268435455
const IN_CLASSD_HOST ideal-int
const IN_CLASSD_NET = 4026531840
const IN_CLASSD_NET ideal-int
const IN_CLASSD_NSHIFT = 28
const IN_CLASSD_NSHIFT ideal-int
const IN_LINKLOCALNETNUM = 2851995648
const IN_LINKLOCALNETNUM ideal-int
const IN_LOOPBACKNET = 127
const IN_LOOPBACKNET ideal-int
```

----------------------------------------

TITLE: Setting Up Environment for 'latest' Query (Tagged vs Pseudo)
DESCRIPTION: Configures the environment for testing 'latest' version resolution when both tagged and pseudo-versions exist in the proxy. It disables checksum database verification (`GOSUMDB=off`), sets the module proxy (`GOPROXY`) to the pre-populated cache directory, defines a temporary `GOPATH`, and creates the temporary directory. This setup isolates the test and directs the 'go' command to use the local cache as the source for module information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
env GOSUMDB=off # don't verify go.mod files when loading retractions
env GOPROXY=file:///$GOPATH/pkg/mod/cache/download
env GOPATH=$WORK/gopath2
mkdir $GOPATH
```

----------------------------------------

TITLE: Git Environment Configuration and Version Control Commands
DESCRIPTION: Sets up Git environment variables and executes a series of Git commands to initialize a repository, create commits, and manage version tags for a Go module. Demonstrates proper version tag sequencing and submodule management.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/prefixtagtests.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GIT_AUTHOR_NAME='Jay Conrod'
env GIT_AUTHOR_EMAIL='jayconrod@google.com'
env GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
env GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL

git init

git add sub
git commit -m 'create module sub'
git branch -m master

echo 'v0.1.0'
cp stdout status
git add status
git commit -a -m 'v0.1.0'
git tag 'v0.1.0'

echo 'sub/v0.0.9'
cp stdout status
git commit -a -m 'sub/v0.0.9'
git tag 'sub/v0.0.9'

echo 'sub/v0.0.10'
cp stdout status
git commit -a -m 'sub/v0.0.10'
git tag 'sub/v0.0.10'

echo 'v0.2.0'
cp stdout status
git commit -a -m 'v0.2.0'
git tag 'v0.2.0'

echo 'after last tag'
cp stdout status
git commit -a -m 'after last tag'

git show-ref --tags --heads
```

----------------------------------------

TITLE: GOROOT Directory Validation Program in Go
DESCRIPTION: A Go program that validates if the GOROOT environment variable points to the expected directory. It executes the 'go env GOROOT' command and compares the output with an expected path, handling symlink resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goroot_executable_trimpath.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

func main() {
	exe := os.Args[1]
	want := os.Args[2]
	cmd := exec.Command(exe, "env", "GOROOT")
	out, err := cmd.CombinedOutput()
	if err != nil {
		fmt.Fprintf(os.Stderr, "%s env GOROOT: %v, %s\n", exe, err, out)
		os.Exit(1)
	}
	goroot, err := filepath.EvalSymlinks(strings.TrimSpace(string(out)))
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	want, err = filepath.EvalSymlinks(want)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if !strings.EqualFold(goroot, want) {
		fmt.Fprintf(os.Stderr, "go env GOROOT:\nhave %s\nwant %s\n", goroot, want)
		os.Exit(1)
	}
	fmt.Fprintf(os.Stderr, "go env GOROOT: %s\n", goroot)
}
```

----------------------------------------

TITLE: Terminal I/O Control Operation Constants for Darwin ARM64 in Go
DESCRIPTION: Additional terminal I/O control operation constants (TIOC*) for Darwin ARM64. These are used with ioctl system calls to perform operations like setting terminal attributes, controlling flow, and managing PTY devices.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_112

LANGUAGE: Go
CODE:
```
pkg syscall (darwin-arm64), const TIOCNOTTY = 536900721
pkg syscall (darwin-arm64), const TIOCNXCL = 536900622
pkg syscall (darwin-arm64), const TIOCOUTQ = 1074033779
pkg syscall (darwin-arm64), const TIOCPKT = 2147775600
pkg syscall (darwin-arm64), const TIOCPKT_DATA = 0
pkg syscall (darwin-arm64), const TIOCPKT_DOSTOP = 32
pkg syscall (darwin-arm64), const TIOCPKT_FLUSHREAD = 1
pkg syscall (darwin-arm64), const TIOCPKT_FLUSHWRITE = 2
pkg syscall (darwin-arm64), const TIOCPKT_IOCTL = 64
pkg syscall (darwin-arm64), const TIOCPKT_NOSTOP = 16
pkg syscall (darwin-arm64), const TIOCPKT_START = 8
pkg syscall (darwin-arm64), const TIOCPKT_STOP = 4
```

----------------------------------------

TITLE: Module C Configuration
DESCRIPTION: Basic module configuration for module c with no dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_newroot.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.net/c

go 1.16
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module 'm' requiring version 1.0.0 of example.com/ambiguous/a package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_ambiguous.txt#2025-04-22_snippet_0

LANGUAGE: gomod
CODE:
```
module m

go 1.15

require example.com/ambiguous/a v1.0.0
```

----------------------------------------

TITLE: Configuring and Testing CGO Package Import with Go Modules
DESCRIPTION: This script tests the import and build functionality of the rsc.io/CGO package with Go modules enabled. It uses test directives to skip tests when CGO is not available and stops on short tests. The script configures the GO111MODULE environment variable and attempts to retrieve and build the CGO package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_case_cgo.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
[!cgo] skip

env GO111MODULE=on

go get rsc.io/CGO
[short] stop

go build rsc.io/CGO
```

----------------------------------------

TITLE: Main Package with External Import
DESCRIPTION: Main package attempting to import another main package in its test file, which should fail
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_main.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package main

import (
	"testing"
	xmain "x"
)

var _ = xmain.X

func TestFoo(t *testing.T) {}
```

----------------------------------------

TITLE: Platform-specific Go file with incompatible build tag
DESCRIPTION: A Go file with a filename indicating Linux platform but with a Windows-only build constraint, making it excluded from standard builds.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_no_go.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
// +build windows

package x
```

----------------------------------------

TITLE: Testing 'go get' Command Outside Module
DESCRIPTION: Verifies that 'go get' fails when executed outside of a module context and does not download any packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
! go get
stderr '^go: go.mod file not found in current directory or any parent directory.$'
stderr '^\t''go get'' is no longer supported outside a module.$'
! go get -u
stderr '^go: go.mod file not found in current directory or any parent directory.$'
stderr '^\t''go get'' is no longer supported outside a module.$'
! go get -u ./needmod
stderr '^go: go.mod file not found in current directory or any parent directory.$'
stderr '^\t''go get'' is no longer supported outside a module.$'
! go get -u all
stderr '^go: go.mod file not found in current directory or any parent directory.$'
stderr '^\t''go get'' is no longer supported outside a module.$'
! go get example.com/printversion@v1.0.0 example.com/version@none
stderr '^go: go.mod file not found in current directory or any parent directory.$'
stderr '^\t''go get'' is no longer supported outside a module.$'

go clean -modcache
! go get example.com/printversion@v1.0.0
stderr '^go: go.mod file not found in current directory or any parent directory.$'
stderr '^\t''go get'' is no longer supported outside a module.$'
! exists $GOPATH/pkg/mod/example.com/printversion@v1.0.0
! exists $GOPATH/pkg/mod/example.com/version@v1.0.0
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module declaration for the test package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue59571.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.20
```

----------------------------------------

TITLE: Testing Output Behavior in Go Test Command
DESCRIPTION: A shell script that tests the behavior of the 'go test' command in different modes, verifying output formatting and exit codes for both failing and passing tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fail_newline.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# In package list mode, output is buffered.
# Check that a newline is printed after the buffer's contents.
cd fail
! go test .
! stderr .
stdout '^exitcode=1\n'
stdout '^FAIL\s+example/fail'

# In local directory mode output is streamed, so we don't know
# whether the test printed anything at all, so we print the exit code
# (just in case it failed without emitting any output at all),
# and that happens to add the needed newline as well.
! go test
! stderr .
stdout '^exitcode=1exit status 1\n'
stdout '^FAIL\s+example/fail'

# In package list mode, if the test passes the 'ok' message appears
# on its own line.
cd ../skip
go test -v .
! stderr .
stdout '^skipping\n'
stdout '^ok\s+example/skip'

# If the output is streamed and the test passes, we can't tell whether it ended
# in a partial line, and don't want to emit any extra output in the
# overwhelmingly common case that it did not.
# (In theory we could hook the 'os' package to report whether output
# was emitted and whether it ended in a newline, but that seems too invasive.)
go test
! stderr .
stdout '^skippingok\s+example/skip'
```

----------------------------------------

TITLE: Defining IPv6 Constants for Darwin ARM64 in Go
DESCRIPTION: This snippet defines various IPv6-related constants for the Darwin ARM64 platform. These constants are used for configuring IPv6 sockets, setting multicast options, and defining protocol-specific values.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_70

LANGUAGE: Go
CODE:
```
const IPV6_MAXPACKET = 65535
const IPV6_MAX_GROUP_SRC_FILTER = 512
const IPV6_MAX_MEMBERSHIPS = 4095
const IPV6_MAX_SOCK_SRC_FILTER = 128
const IPV6_MIN_MEMBERSHIPS = 31
const IPV6_MMTU = 1280
const IPV6_MULTICAST_HOPS = 10
const IPV6_MULTICAST_IF = 9
const IPV6_MULTICAST_LOOP = 11
const IPV6_PORTRANGE = 14
const IPV6_PORTRANGE_DEFAULT = 0
const IPV6_PORTRANGE_HIGH = 1
const IPV6_PORTRANGE_LOW = 2
const IPV6_RECVTCLASS = 35
const IPV6_RTHDR_LOOSE = 0
const IPV6_RTHDR_STRICT = 1
const IPV6_RTHDR_TYPE_0 = 0
const IPV6_SOCKOPT_RESERVED1 = 3
const IPV6_TCLASS = 36
const IPV6_UNICAST_HOPS = 4
const IPV6_V6ONLY = 27
const IPV6_VERSION = 96
const IPV6_VERSION_MASK = 240
```

----------------------------------------

TITLE: Validating go mod init Behavior with GO111MODULE Off - Shell
DESCRIPTION: This shell script tests 'go mod init' when the GO111MODULE environment variable is set to 'off', confirming that Go disables module support and emits the correct error message. No external dependencies beyond the Go toolchain and the shell environment are required. The script expects no module to be initialized and verifies the error output matches the intended failure when modules are disabled.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_off_init.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# 'go mod init' should refuse to initialize a module if it will be
# ignored anyway due to GO111MODULE=off.
env GO111MODULE=off
! go mod init
stderr 'go: modules disabled by GO111MODULE=off; see ''go help modules'''
```

----------------------------------------

TITLE: Testing Go Module Initialization Behavior Shell Script
DESCRIPTION: A shell script that tests Go's behavior for suggesting module initialization when no go.mod file exists. It verifies that Go suggests initialization when finding a .git/config file in a regular project, but not in $GOROOT directories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_convert_git.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

# We should not create a go.mod file unless the user ran 'go mod init' explicitly.
# However, we should suggest 'go mod init' if we can find an alternate config file.
cd $WORK/test/x
! go list .
stderr 'found .git/config in .*[/\\]test'
stderr '\s*cd \.\.\. && go mod init'

# The command we suggested should succeed.
cd ..
go mod init
go list -m all
stdout '^m$'

# We should not suggest creating a go.mod file in $GOROOT, even though there may be a .git/config there.
cd $GOROOT
! go list .
! stderr 'go mod init'

# We should also not suggest creating a go.mod file in $GOROOT if its own
# .git/config has been stripped away and we find one in a parent directory.
# (https://golang.org/issue/34191)
env GOROOT=$WORK/parent/goroot
cd $GOROOT
! go list .
! stderr 'go mod init'

cd $GOROOT/doc
! go list .
! stderr 'go mod init'
```

----------------------------------------

TITLE: Defining Modified Go Module File (Go)
DESCRIPTION: Defines the content of a modified `go.mod` file, named `go.mod.withc` within the test script context. This version is expected after running `go get -u ./...`. It adds a requirement for `example.com/badchain/c v1.0.0` alongside the original requirement for `example.com/badchain/a v1.0.0`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
-- go.mod.withc --
module m

go 1.13

require (
	example.com/badchain/a v1.0.0
	example.com/badchain/c v1.0.0
)
```

----------------------------------------

TITLE: Implementation of Package C with Test
DESCRIPTION: Package 'c' containing a Go implementation and test with no dependencies. It has a global variable G and a function CFunc() that performs operations on the global variable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_partial.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package c

var G int

func CFunc(x, y int) int {
	G += x
	G -= y
	return x + y
}
```

LANGUAGE: go
CODE:
```
package c

import "testing"

func TestC(t *testing.T) {
	if CFunc(10, 10) == 1010101 {
		t.Fatalf("bad!")
	}
}
```

----------------------------------------

TITLE: Go Workspace Configuration
DESCRIPTION: Workspace configuration file specifying Go version 1.20 and including the './a' module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_reject_modfile.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go 1.20

use (
    ./a
)
```

----------------------------------------

TITLE: Main Fortune Program Implementation
DESCRIPTION: Main program that imports the quote package and prints a hello message
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v2_v2.0.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import "rsc.io/quote"

func main() {
	println(quote.Hello())
}
```

----------------------------------------

TITLE: Importing External Package in Go
DESCRIPTION: This snippet demonstrates a Go file that imports an external package (rsc.io/quote) as a blank import, typically used for side effects.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getmode_vendor.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package x
import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Running Successful Fuzz Tests in Go
DESCRIPTION: This snippet shows a successful fuzz test. It demonstrates how to log information during the test and how to define a fuzz target function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_chatty.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package chatty_fuzz

import "testing"

func Fuzz(f *testing.F) {
    f.Log("all good here")
    f.Fuzz(func(*testing.T, []byte) {})
}
```

----------------------------------------

TITLE: Configuring Module 'x' with Dependency on 'c v0.1.0'
DESCRIPTION: This go.mod file defines module 'x'. It requires module 'c' at version v0.1.0. This is a direct dependency used by package 'x' and its tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_14

LANGUAGE: go
CODE:
```
-- x1/go.mod --
module x

go 1.17

require c v0.1.0
```

----------------------------------------

TITLE: Test-Only Package Implementation in Go
DESCRIPTION: Package 'onlytest' that contains only a test file with a simple test function that logs a message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
package onlytest

import "testing"

func TestFoo(t *testing.T) {
	t.Logf("Whee\n")
}
```

----------------------------------------

TITLE: Empty Main Function Implementation in Go
DESCRIPTION: A minimal Go program with an empty main function. This serves as a placeholder implementation with no functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_future_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

func main() {
}
```

----------------------------------------

TITLE: Module Definition for rsc.io/breaker
DESCRIPTION: Defines the Go module name for rsc.io/breaker.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_breaker_v2.0.0+incompatible.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module rsc.io/breaker
```

----------------------------------------

TITLE: Installing Go Program Outside GOPATH With GOBIN
DESCRIPTION: Test case to verify that installing a program outside GOPATH with GOBIN set succeeds and installs to GOBIN.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_install.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
env GOBIN=$WORK/bin1
go install go-cmd-test/helloworld.go
exists $GOBIN/helloworld$GOEXE
```

----------------------------------------

TITLE: Math Bits Package Functions
DESCRIPTION: Binary manipulation functions for various integer types including operations for leading/trailing zeros, bit counting, and bit manipulation.
SOURCE: https://github.com/golang/go/blob/master/api/go1.9.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
func LeadingZeros(x uint) int
func TrailingZeros(x uint) int
func OnesCount(x uint) int
func Reverse(x uint) uint
func ReverseBytes(x uint) uint
func RotateLeft(x uint, k int) uint
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines the main module and its dependencies, including replacements for local development.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
module example.com/m

require example.com/dep v0.1.0

replace (
	example.com/dep v0.1.0 => ./dep
	example.com/testdep v0.1.0 => ./testdep
)
```

----------------------------------------

TITLE: System Error Constants in Go
DESCRIPTION: Definition of EBADMSG and EPROTO error constants for handling bad messages and protocol errors in system calls.
SOURCE: https://github.com/golang/go/blob/master/api/go1.23.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
const EBADMSG Errno
const EPROTO Errno
```

----------------------------------------

TITLE: Module Definition with Dependencies (.mod file)
DESCRIPTION: Defines a Go module 'example.com/ambiguous/a' with Go version 1.16 and a dependency on 'example.com/ambiguous/a/b'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_ambiguous_a_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/ambiguous/a

go 1.16

require example.com/ambiguous/a/b v0.0.0-empty
```

----------------------------------------

TITLE: Defining Hello Function in Go
DESCRIPTION: Returns a greeting by calling HelloV2() from an imported module. This function is part of the quote package which collects pithy sayings.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
// Hello returns a greeting.
func Hello() string {
	return quote.HelloV2()
}
```

----------------------------------------

TITLE: Main Test Module
DESCRIPTION: Basic Go module definition with a simple function implementation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue51204.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/test

go 1.18
```

LANGUAGE: go
CODE:
```
package test

func DoSomething() {
}
```

----------------------------------------

TITLE: Testing Go Module Tool Directives
DESCRIPTION: Tests adding and removing tool directives with 'go mod edit -tool' and '-droptool', which declare development tool dependencies in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_9

LANGUAGE: shell
CODE:
```
# go mod edit -tool
cd $WORK/h
cp go.mod.start go.mod
go mod edit -tool example.com/tool
cmpenv go.mod go.mod.edit
go mod edit -droptool example.com/tool2
cmpenv go.mod go.mod.edit
go mod edit -droptool example.com/tool
cmpenv go.mod go.mod.start
```

----------------------------------------

TITLE: Module A Go Module Definition
DESCRIPTION: Go module configuration for module a requiring rsc.io/quote v1.5.2
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sum_mismatch.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
go 1.18

module example.com/hi

require "rsc.io/quote" v1.5.2
```

----------------------------------------

TITLE: Combining Comparable Values with Or Function - Package cmp - Go
DESCRIPTION: This function, introduced in package cmp, allows combining multiple values of any comparable type using a variadic function with type parameter $0. It returns a value of type $0 based on the semantics (e.g., logical or, max, etc.) implemented by the function body. Type parameter $0 must be comparable.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
func Or[$0 comparable](...$0) $0
```

----------------------------------------

TITLE: Testing Hello Function in Go
DESCRIPTION: Tests the Hello function by comparing its output to the expected greeting. Fails the test if the output doesn't match the expected string.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}
```

----------------------------------------

TITLE: Testing Package F Type Methods
DESCRIPTION: Defines the F type and its methods for fuzzing-based testing in Go. Includes methods for test control flow, logging, cleanup, and environment management.
SOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
type F struct
func (*F) Fuzz(interface{})
func (*F) Helper()
func (*F) Name() string
func (*F) TempDir() string
```

----------------------------------------

TITLE: Configuring Go Import Meta Tag for Git Subdirectory
DESCRIPTION: HTML meta tag configuration that specifies the import path and VCS details for a Go package located in a git repository subdirectory. Sets up the import path 'vcs-test.golang.org/go/gitreposubdir' to point to a specific subdirectory in a git repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/gitreposubdir.txt#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<meta name="go-import" content="vcs-test.golang.org/go/gitreposubdir git https://vcs-test.golang.org/git/gitreposubdir foo/subdir">
```

----------------------------------------

TITLE: Fetching and Listing v2 Module Without v1
DESCRIPTION: Fetches a v2 module that doesn't have a v1 version using go get and lists its version using go list. This tests the resolution of a v2 module path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_major.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
go get vcs-test.golang.org/git/empty-v2-without-v1.git/v2@v2.0.0

go list -m vcs-test.golang.org/git/empty-v2-without-v1.git/v2
stdout '^vcs-test.golang.org/git/empty-v2-without-v1.git/v2 v2.0.0$'
```

----------------------------------------

TITLE: Go Module File with Incorrect Indirect Marking
DESCRIPTION: A go.mod file that incorrectly marks a direct dependency as indirect, used to test indirect comment removal.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_14

LANGUAGE: go
CODE:
```
module m

go 1.14

require (
	rsc.io/quote v1.5.2 // indirect
	rsc.io/testonly v1.0.0 // indirect
)
```

----------------------------------------

TITLE: Go Import Test File
DESCRIPTION: A simple Go package that imports a module from vcs-test.golang.org requiring authentication. This file is used to test whether the authentication mechanism correctly allows importing protected packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_userauth.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package useprivate

import "vcs-test.golang.org/auth/or401"
```

----------------------------------------

TITLE: Invalid HTTP Package with Standard Library Vendored Dependencies
DESCRIPTION: This file demonstrates an invalid import pattern by trying to use 'golang.org/x/net/http/httpproxy' from outside the standard library. This is not allowed as packages outside the standard library cannot use its vendored dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/std_vendor.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package broken

import (
	_ "net/http"
	_ "golang.org/x/net/http/httpproxy"
)
```

----------------------------------------

TITLE: Simple Hello World Go Program
DESCRIPTION: A minimal Go program that prints 'hello' to the console. This is used to test build functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_trimpath.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main
func main() { println("hello") }
```

----------------------------------------

TITLE: Go Module Checksum File
DESCRIPTION: Module checksum file (go.sum) containing the hash verification for the export-subst dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_git_export_subst.txt#2025-04-22_snippet_4

LANGUAGE: plaintext
CODE:
```
github.com/jasonkeene/export-subst v0.0.0-20180927204031-5845945ec626 h1:AUkXi/xFnm7lH2pgtvVkGb7buRn1ywFHw+xDpZ29Rz0=
github.com/jasonkeene/export-subst v0.0.0-20180927204031-5845945ec626/go.mod h1:DwJXqVtrgrQkv3Giuf2Jh4YyubVe7y41S1eOIaysTJw=
```

----------------------------------------

TITLE: Missing Module v1.0.0 Definition
DESCRIPTION: Module definition for v1.0.0 of the missing module test package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_replace.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/retract/missingmod

go 1.14
```

----------------------------------------

TITLE: Package z Definition
DESCRIPTION: A simple Go package named z that serves as part of the test module structure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gobuild_import.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package z
```

----------------------------------------

TITLE: Configuring Go Package Import Metadata in HTML
DESCRIPTION: HTML document that specifies the VCS configuration for importing a Go package. Uses the go-import meta tag to define the import path, VCS type (git), and repository URL for an insecure Go package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/insecure.txt#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<meta name="go-import" content="vcs-test.golang.org/insecure/go/insecure git https://vcs-test.golang.org/git/insecurerepo">
```

----------------------------------------

TITLE: Declaring Toolchain Module in Go.mod
DESCRIPTION: Specifies the module name for the Go toolchain in the go.mod file. This is used for module management and dependency resolution in Go projects.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.5.linux-amd64.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: Package B Implementation with Init Function
DESCRIPTION: Package 'b' with an init function and BFunc returning a constant value
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_with_init.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package b

func init() {
	println("package 'b' init: release the kraken")
}

func BFunc() int {
	return -42
}
```

----------------------------------------

TITLE: Ignored Go File with Build Tag
DESCRIPTION: A Go file with an 'ignore' build tag. It imports a non-existent package to demonstrate that dependencies from ignored files are not included.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tags.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
// +build ignore

package ignore

import _ "example.com/doesnotexist"
```

----------------------------------------

TITLE: Configuring Go Module Import Path with HTML Meta Tag
DESCRIPTION: This HTML snippet defines a go-import meta tag that tells the Go toolchain how to find a v2 module. It specifies the import path 'vcs-test.golang.org/go/v2module/v2', the version control system 'git', and the repository URL 'https://vcs-test.golang.org/git/v2repo'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/v2module.txt#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<meta name="go-import" content="vcs-test.golang.org/go/v2module/v2 git https://vcs-test.golang.org/git/v2repo">
```

----------------------------------------

TITLE: TLS Package Updates (Go)
DESCRIPTION: Defines TLS curve constants, client session cache interface, and related structs for handling TLS connections and configurations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
const (
    CurveP256 CurveID = 23
    CurveP384 CurveID = 24
    CurveP521 CurveID = 25
)

type ClientSessionCache interface {
    Get(string) (*ClientSessionState, bool)
    Put(string, *ClientSessionState)
}
```

----------------------------------------

TITLE: Building Go File with External Dependency
DESCRIPTION: Shows building a Go file (baz_with_outside_dep.go) that has a non-standard library dependency (rsc.io/quote). This build succeeds only with -mod=mod and fails with -mod=readonly and -mod=vendor due to missing package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_outside_module.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go build -x -mod=mod my-module/vendor/example.com/another-module/foo/bar/baz_with_outside_dep.go
! go build -x -mod=readonly my-module/vendor/example.com/another-module/foo/bar/baz_with_outside_dep.go
stderr 'no required module provides package rsc.io/quote'
! go build -x -mod=vendor my-module/vendor/example.com/another-module/foo/bar/baz_with_outside_dep.go
stderr 'no required module provides package rsc.io/quote'
```

----------------------------------------

TITLE: Simple Go Program (No CGO) for Testing
DESCRIPTION: A basic Go program (`main_nocgo.go`) in package `main`. It includes the build constraint `//go:build !cgo` to ensure it's compiled only when CGO is disabled. The `main` function prints "ok" to standard output, providing equivalent functionality to `main.go` for non-CGO test scenarios.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cwd_newline.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
-- $WORK/main_nocgo.go --
//go:build !cgo

package main

func main() {
	/* nothing here */
	println("ok")
}
```

----------------------------------------

TITLE: Basic Go Workspace File Structure
DESCRIPTION: Initial go.work file structure showing module usage declaration
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_edit.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go $goversion

use ./m
```

----------------------------------------

TITLE: Version Control Operations Test
DESCRIPTION: Tests for package version control operations including @patch and @latest directives within the main module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_main.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go get rsc.io/x
grep 'rsc.io/quote v1.5.2' go.mod
go get rsc.io/x@upgrade
grep 'rsc.io/quote v1.5.2' go.mod
cp go.mod.orig go.mod
go get rsc.io/x@patch
grep 'rsc.io/quote v1.5.2' go.mod
cp go.mod.orig go.mod
```

----------------------------------------

TITLE: Fortune Test Implementation
DESCRIPTION: Test file containing a placeholder test function for Fortune v2
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v2_v2.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

import "testing"

func TestFortuneV2(t *testing.T) {}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module named 'testnorun' with Go 1.16 as minimum version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_no_tests.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module testnorun

go 1.16
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_issue26995.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module 26995-TBHelper-line-number

go 1.21
```

----------------------------------------

TITLE: Preventing Direct Import of Dependency's Internal Package
DESCRIPTION: After setting the module to `golang.org/notx`, this attempts to `go get .` (which includes `useinternal.go` trying to import `golang.org/x/internal`) and then build the current module. The build (`! go build`) is expected to fail because `golang.org/notx` is not allowed to directly import `golang.org/x/internal`, even though it has a transitive dependency on it.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
# ... but other modules should not, even if they have transitive dependencies.
go get .
! go build .
stderr 'use of internal package golang.org/x/.* not allowed'
```

----------------------------------------

TITLE: Building and Running Main Application in Shell
DESCRIPTION: The snippet compiles and executes the main.go file, comparing outputs to validate the execution correctness. It demonstrates building, running, and validating a Go program using bash commands, requiring the Go compiler and runtime in the environment.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_dash_x.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go build -x -o main main.go
cp stderr commands.txt
cat header.txt commands.txt
cp stdout test.sh

exec ./main
cmp stderr hello.txt
rm ./main

exec /usr/bin/env bash -x test.sh
exec ./main
cmp stderr hello.txt

grep '^WORK=(.*)\n' commands.txt

```

----------------------------------------

TITLE: Go Workspace Configuration
DESCRIPTION: The go.work file defining the workspace with two modules 'a' and 'b'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
go 1.21

use (
    ./a
    ./b
)
```

----------------------------------------

TITLE: Go Test File with Intentional Failure
DESCRIPTION: A Go test file that intentionally fails to demonstrate the error reporting format. It contains a simple test function that calls t.Error() to trigger a test failure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fullpath.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package fullpath_test

import (
	"testing"
)

func TestFullPath(t *testing.T) {
	t.Error("test failed")
}
```

----------------------------------------

TITLE: Testing GOPROXY=off Behavior in Go Module Fetching
DESCRIPTION: Demonstrates that fetching modules not matched by GONOPROXY fails when GOPROXY is set to 'off'. Attempts to get golang.org/x/text package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gonoproxy.txt#2025-04-22_snippet_5

LANGUAGE: Shell
CODE:
```
env GONOPROXY=*/fortune
env GOPROXY=off
! go get golang.org/x/text
stderr '^go: golang.org/x/text: module lookup disabled by GOPROXY=off$'
```

----------------------------------------

TITLE: Testing go list command patterns with various modules
DESCRIPTION: A test script that verifies the behavior of 'go list' with different patterns (all, ..., example.com/m/..., ./...) to ensure it correctly selects packages based on module context. It checks that package matching works as expected and that warnings about unmatched patterns are only printed once.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on
[short] skip

cd m

# 'go list all' should list all of the packages used (directly or indirectly) by
# the packages in the main module, but no other packages from the standard
# library or active modules.
#
# 'go list ...' should list packages in all active modules and the standard library.
#
# 'go list example.com/m/...' should list packages in all modules that begin with 'example.com/m/'.
#
# 'go list ./...' should list only packages in the current module, not other active modules.
#
# Warnings about unmatched patterns should only be printed once.
#
# And the go command should be able to keep track of all this!
go list -f '{{.ImportPath}}: {{.Match}}' all ... example.com/m/... ./... ./xyz...
stdout 'example.com/m/useunicode: \[all \.\.\. example.com/m/... ./...\]'
stdout 'example.com/m/useunsafe: \[all \.\.\. example.com/m/... ./...\]'
[cgo] stdout 'example.com/m/useC: \[all \.\.\. example.com/m/... ./...\]'
[!cgo] ! stdout example.com/m/useC
stdout 'example.com/unused/useerrors: \[\.\.\.\]' # but not "all"
stdout 'example.com/m/nested/useencoding: \[\.\.\. example.com/m/...\]' # but NOT "all" or "./..."
stdout '^unicode: \[all \.\.\.\]'
stdout '^unsafe: \[all \.\.\.\]'
stdout 'index/suffixarray: \[\.\.\.\]'
stdout 'cmd/pprof: \[\.\.\.\]'

stderr -count=1 '^go: warning: "./xyz..." matched no packages$'
```

----------------------------------------

TITLE: Testing Module-aware File System Pattern Searches with GO111MODULE=on
DESCRIPTION: A series of bash commands testing how Go commands handle file system pattern searches with modules enabled. It verifies that sub-modules and nested vendor directories are properly excluded from package listing patterns.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on

# File system pattern searches should skip sub-modules and vendor directories.
cd x

# all packages
go list all
stdout ^m$
stdout ^m/vendor$
! stdout vendor/
stdout ^m/y$
! stdout ^m/y/z

# path pattern
go list m/...
stdout ^m$
stdout ^m/vendor$
! stdout vendor/
stdout ^m/y$
! stdout ^m/y/z

# directory pattern
go list ./...
stdout ^m$
stdout ^m/vendor$
! stdout vendor/
stdout ^m/y$
! stdout ^m/y/z

# non-existent directory should not prompt lookups
! go build -mod=readonly example.com/nonexist
stderr 'import lookup disabled'

! go build -mod=readonly ./nonexist
! stderr 'import lookup disabled'
stderr '^stat '$GOPATH'[/\\]src[/\\]x[/\\]nonexist: directory not found'

! go build -mod=readonly ./go.mod
! stderr 'import lookup disabled'
stderr 'main module \(m\) does not contain package m/go.mod'
```

----------------------------------------

TITLE: Incomplete Package Import
DESCRIPTION: Package file with import that requires resolution through module tidying
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_indirect.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package incomplete

import _ "example.net/indirect/newpkg"
```

----------------------------------------

TITLE: Initializing c with an Indirect Import - Go
DESCRIPTION: This package c Go file imports i solely for side effects, bringing i into the build list as an indirect dependency. There are no functions or exports; the purpose is to test indirect dependency handling in the Go module graph.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package c
import _ "i"
```

----------------------------------------

TITLE: Defining Module 'c' Version 1 in Go
DESCRIPTION: This go.mod file defines module 'c' version 1 and its dependency on a specific version of module 'b'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_9

LANGUAGE: Go
CODE:
```
module example.net/c

go 1.16

require example.net/b v0.2.1-0.20210219000000-000000000000
```

----------------------------------------

TITLE: Go Module Q v1.1.0 Implementation
DESCRIPTION: Module Q version 1.1.0 implementation that imports modules W and Z. Includes updated PrintVersion function that outputs version 1.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module example.com/q

require example.com/w v1.0.0
require example.com/z v1.1.0

go 1.18
```

LANGUAGE: go
CODE:
```
package q

import _ "example.com/w"
import _ "example.com/z"

import "fmt"

func PrintVersion() {
	fmt.Println("version 1.1.0")
}
```

----------------------------------------

TITLE: Go Workspace Configuration
DESCRIPTION: Workspace configuration file (go.work) specifying Go version 1.22 and including the mod directory in the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_workspace.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go 1.22

use ./mod
```

----------------------------------------

TITLE: Go Workspace Definition File
DESCRIPTION: Empty go.work file that specifies Go 1.18 as the required version without any module references.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_dot.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
go 1.18
```

----------------------------------------

TITLE: Listing Packages within GOROOT Source in Shell
DESCRIPTION: The 'go list' command is used to list packages inside GOROOT/src, respecting the module boundaries and excluding vendored packages, which helps maintain a clean separation of modules and dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_std.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go list $GOROOT/src/...
```

----------------------------------------

TITLE: Defining Test for Package 'b' Using Module 'c'
DESCRIPTION: This Go test file belongs to package 'b_test'. It imports package 'c' and includes a test function `TestCVersion` that logs the `Version` constant from package 'c'. This test depends on the specific version of 'c' required by module 'b' (v0.2.0).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
-- b1/b_test.go --
package b_test

import (
	"c"
	"testing"
)

func TestCVersion(t *testing.T) {
	t.Log(c.Version)
}
```

----------------------------------------

TITLE: Module B v1 Implementation (b1/b.go)
DESCRIPTION: Implementation file for version 1 of module b, importing module c.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package b

import _ "example.com/c"
```

----------------------------------------

TITLE: Runtime Frame and Debug Information Structures in Go
DESCRIPTION: Defines structures for stack frame and debugging information in the runtime package. Includes Frame struct for representing stack frames and related functions for stack trace analysis.
SOURCE: https://github.com/golang/go/blob/master/api/go1.7.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
type Frame struct {
    PC uintptr
    Func *Func
    Function string
    File string
    Line int
    Entry uintptr
}

func CallersFrames([]uintptr) *Frames
func KeepAlive(interface{})
func SetCgoTraceback(int, unsafe.Pointer, unsafe.Pointer, unsafe.Pointer)
```

----------------------------------------

TITLE: Declaring a Nested Go Submodule using go.mod - Golang - go
DESCRIPTION: This go.mod snippet declares a nested Go submodule by specifying its module path and Go version within a subdirectory. Dependencies are not listed, focusing instead on establishing the nested module namespace in the repository. The required input is the submodule path, and the configuration supports situations where submodules override or replace packages in parent modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_v0.2.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.net/ambiguous

go 1.16
```

----------------------------------------

TITLE: Type Comparability Detection - reflect Package - Go
DESCRIPTION: Introduces the Comparable() bool method to the reflect.Type interface, which determines if a type can be compared for equality using ==. This expands runtime type introspection, helping programs to check at runtime if values can be compared for equality without causing a runtime panic.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_21

LANGUAGE: Go
CODE:
```
type Type interface {
    Comparable() bool
    // ... other methods
}
```

----------------------------------------

TITLE: Main Package with Imports
DESCRIPTION: The main package file that imports packages needed for testing, specifically including 'example.net/deleted' which will have version compatibility issues.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package m

import (
	_ "example.net/deleted"
	_ "example.net/lazy"
)
```

----------------------------------------

TITLE: Downgrading Go Version and Adding Toolchain
DESCRIPTION: This snippet demonstrates downgrading the Go version while adding a specific toolchain version. It shows how to verify the changes in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
go get go@1.22.1 toolchain@go1.22.3
```

----------------------------------------

TITLE: Defining Module Dependency for a - mod
DESCRIPTION: The go.mod file in the a module declares its identity and specifies a dependency on x v0.1.0. This establishes a direct dependency from module a to module x version 0.1.0, which is resolved via the replacement in the main go.mod. No other dependencies or replace directives are included.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_3

LANGUAGE: mod
CODE:
```
module a
go 1.13
require x v0.1.0
```

----------------------------------------

TITLE: Main Go Program
DESCRIPTION: Simple Go program that prints 'hello, world' to demonstrate basic functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_git_missing_tree.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

func main() {
	println("hello, world")
}
```

----------------------------------------

TITLE: Simple Go Hello World Program
DESCRIPTION: A minimal Go program that prints 'Hello, world' to standard output. This program is used to test different Go build and linking configurations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_static.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import "fmt"

func main() {
	fmt.Println("Hello, world")
}
```

----------------------------------------

TITLE: Basic Go Package File
DESCRIPTION: Simple Go file in dir2 defining package dir2.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_overlay.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package dir2
```

----------------------------------------

TITLE: Defining Main Package with Vendor Imports
DESCRIPTION: Defines a main package that imports vendored packages p and p1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue11864.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package g

import _ "vendor.org/p"
import _ "vendor.org/p1"

func main() {}
```

----------------------------------------

TITLE: Module Definition with Future Version Exclusion
DESCRIPTION: Module definition excluding a future version while requiring a current version of rsc.io/quote.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_require_exclude.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module x

go 1.13

exclude rsc.io/quote v1.5.2
require rsc.io/quote v1.5.1
```

----------------------------------------

TITLE: Implementing a Failing Fuzz Test in Go
DESCRIPTION: This Go test file defines a fuzz test function `FuzzFail` within the `fuzzfail` package. It uses the `testing` package's fuzzing capabilities (`f.Fuzz`). The provided fuzz target function immediately calls `t.Fatalf` with the received byte slice `b`, ensuring the test fails for any input provided by the fuzzing engine.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_fuzzfail_v0.2.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package fuzzfail

import "testing"

func FuzzFail(f *testing.F) {
	f.Fuzz(func(t *testing.T, b []byte) {
		t.Fatalf("oops: %q", b)
	})
}
```

----------------------------------------

TITLE: Go Module Definition File
DESCRIPTION: A minimal Go module definition file that declares the module name as private.example.com. This is used in the tests to verify module fetching behavior with authentication.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_userauth.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module private.example.com
```

----------------------------------------

TITLE: Quote Package Tests in Go
DESCRIPTION: Test suite for the quote package verifying the output of each quote function. Sets up environment and tests Hello(), Glass(), Go() and Opt() functions against expected strings.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162749-b44a0b17b2d1.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package quote

import (
	"os"
	"testing"
)

func init() {
	os.Setenv("LC_ALL", "en")
}

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory, share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}

func TestOpt(t *testing.T) {
	opt := "If a program is too slow, it must have a loop."
	if out := Opt(); out != opt {
		t.Errorf("Opt() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Verifying 'go.mod' Checksum in 'go.sum' (Shell)
DESCRIPTION: Uses 'grep' to search the 'go.sum' file for a line matching the checksum entry for the 'go.mod' file of the specific version (v1.5.2) of the 'rsc.io/QUOTE' module. This verifies that 'go get' added the required checksum for the module's definition file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_sum_noroot.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
grep '^rsc.io/QUOTE v1.5.2/go.mod ' go.sum
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module definition file specifying module name and Go version 1.8.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_go.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m
go 1.8
```

----------------------------------------

TITLE: Main Sampler Implementation
DESCRIPTION: Core implementation of the localization system including environment variable handling, text structure, and language matching logic
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.1.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package sampler

import (
	"os"
	"strings"

	"golang.org/x/text/language"
)

func DefaultUserPrefs() []language.Tag {
	var prefs []language.Tag
	for _, k := range []string{"LC_ALL", "LC_MESSAGES", "LANG"} {
		if env := os.Getenv(k); env != "" {
			prefs = append(prefs, language.Make(env))
		}
	}
	return prefs
}

func Hello(prefs ...language.Tag) string {
	if len(prefs) == 0 {
		prefs = DefaultUserPrefs()
	}
	return hello.find(prefs)
}

type text struct {
	byTag   map[string]string
	matcher language.Matcher
}

func newText(s string) *text {
	t := &text{
		byTag: make(map[string]string),
	}
	var tags []language.Tag
	for _, line := range strings.Split(s, "\n") {
		line = strings.TrimSpace(line)
		if line == "" {
			continue
		}
		f := strings.Split(line, ": ")
		if len(f) != 3 {
			continue
		}
		tag := language.Make(f[1])
		tags = append(tags, tag)
		t.byTag[tag.String()] = f[2]
	}
	t.matcher = language.NewMatcher(tags)
	return t
}

func (t *text) find(prefs []language.Tag) string {
	tag, _, _ := t.matcher.Match(prefs...)
	s := t.byTag[tag.String()]
	if strings.HasPrefix(s, "RTL ") {
		s = "\u200F" + strings.TrimPrefix(s, "RTL ") + "\u200E"
	}
	return s
}
```

----------------------------------------

TITLE: Defining Initial Go Module File (Go)
DESCRIPTION: Defines the content of the initial `go.mod` file, named `go.mod.orig` within the test script context. This file declares the main module `m`, specifies the Go version `1.13`, and requires version `v1.0.0` of the `example.com/badchain/a` module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
-- go.mod.orig --
module m

go 1.13

require example.com/badchain/a v1.0.0
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module named 'example.com/m' using Go version 1.14
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_e_readonly.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/m

go 1.14
```

----------------------------------------

TITLE: Defining Go module
DESCRIPTION: This snippet shows the go.mod file content, defining the module 'm' and specifying Go version 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module with name example.com/retract/rationale using Go version 1.14
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-multiline1.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/retract/rationale

go 1.14
```

----------------------------------------

TITLE: Defining Go Module in .mod File
DESCRIPTION: Defines a Go module named 'golang.org/x/useinternal'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_useinternal_v0.1.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module golang.org/x/useinternal
```

----------------------------------------

TITLE: Defining Module Dependencies for C v0.1.0 in Go
DESCRIPTION: This go.mod file for example.net/c v0.1.0 specifies its Go version and a dependency on example.net/a v0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_10

LANGUAGE: Go
CODE:
```
module example.net/c

go 1.17

require example.net/a v0.1.0
```

----------------------------------------

TITLE: Demonstrating nil Panic in Go
DESCRIPTION: A simple Go program that demonstrates how to trigger a panic with a nil value, which is a specific use case in Go error handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_panicnil_v1.1.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

func main() {
	panic(nil)
}
```

----------------------------------------

TITLE: Initial Go Workspace Configuration
DESCRIPTION: Basic go.work file configuration specifying Go version 1.18 and including the current directory in the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_get_toolchain.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
go 1.18
use .
```

----------------------------------------

TITLE: Go Module File for Test Project
DESCRIPTION: The go.mod file for the test project, requiring rsc.io/breaker v1.0.0 as a dependency. This serves as the starting point for the module version tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_update_sum_readonly.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

go 1.16

require rsc.io/breaker v1.0.0
```

----------------------------------------

TITLE: Go Module File with Unsorted Requirements
DESCRIPTION: A go.mod file with requirements listed in non-standard order, used to test sorting behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
module m

go 1.14

require (
	rsc.io/testonly v1.0.0 // indirect
	rsc.io/quote v1.5.2
)
```

----------------------------------------

TITLE: Go Module with Go 1.14+ Syntax Features
DESCRIPTION: A Go package that showcases syntax features only available in Go 1.14 or newer, including numeric literal separators and interface embedding for combining standard interfaces.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_15

LANGUAGE: go
CODE:
```
// Package newgo requires Go 1.14 or newer.
package newgo

import "io"

const C = 299_792_458

type ReadWriteCloser interface {
	io.ReadCloser
	io.WriteCloser
}
```

----------------------------------------

TITLE: Testing Go Module Vendoring Behavior
DESCRIPTION: This snippet demonstrates the process of vendoring dependencies and checking for the presence of go.sum files in vendored packages. It compares the behavior between Go 1.16 and Go 1.17.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_gomod.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go mod vendor
cd vendor/example.net/x
go list all
! stdout '^example.net/m'
stdout '^example.net/x$'
exists ./go.sum

cd ../../..
go mod edit -go=1.17
go mod vendor
cd vendor/example.net/x
go list all
stdout '^example.net/m$'
stdout '^example.net/x$'
! exists ./go.sum
```

----------------------------------------

TITLE: Archive Package Updates - Go
DESCRIPTION: Addition of Flush method to zip.Writer and updates to compression packages including new Reset functionality for flate and zlib packages.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
pkg archive/zip, method (*Writer) Flush() error

pkg compress/flate, type Resetter interface { Reset }
pkg compress/flate, type Resetter interface, Reset(io.Reader, []uint8) error
pkg compress/zlib, type Resetter interface { Reset }
pkg compress/zlib, type Resetter interface, Reset(io.Reader, []uint8) error
```

----------------------------------------

TITLE: Testing Go Workspace Version Mismatch Error
DESCRIPTION: This snippet tests the error message when running 'go list' with a version mismatch between go.work and go.mod files. It expects a specific error message suggesting the use of 'go work use' to resolve the issue.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_implicit_go_requirement.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
! go list
stderr 'go: module . listed in go.work file requires go >= 1.21, but go.work implicitly requires go 1.18; to update it:\s+go work use'

go work use
go list
stdout foo
```

----------------------------------------

TITLE: Testing Multiple Input Types in Go Fuzz Tests
DESCRIPTION: This fuzz test function demonstrates how Go's fuzzing handles multiple input types. It panics when both byte slices have non-zero length.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_9

LANGUAGE: Go
CODE:
```
func FuzzWithTwoTypes(f *testing.F) {
	f.Fuzz(func(t *testing.T, a, b []byte) {
		if len(a) > 0 && len(b) > 0 {
			panic("these inputs caused a crash!")
		}
	})
}
```

----------------------------------------

TITLE: Testing Go Test Command with Output Directory and Coverage Flags
DESCRIPTION: This snippet tests the 'go test' command's behavior with output directory and coverage-related flags. It verifies that the -outputdir flag works correctly and that coverage flags imply the -cover flag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flags.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go test -x -coverprofile=cover.out '-outputdir=' ./x
stderr '-test.outputdir=[^ ]'
exists ./cover.out
! exists ./x/cover.out

go test -covermode=set ./x
stdout '\s+coverage:\s+'

go test -coverpkg=encoding/binary ./x
stdout '\s+coverage:\s+'

go test -coverprofile=cover.out ./x
stdout '\s+coverage:\s+'
exists ./cover.out
rm ./cover.out
```

----------------------------------------

TITLE: Basic Go Program with CGO
DESCRIPTION: Simple Go program that uses CGO and prints 'hello'. Includes an empty C import block to enable CGO functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_gc_sections.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

/*
*/
import "C"

func main() {
	println("hello")
}
```

----------------------------------------

TITLE: Checking Missing Module Retraction with Go List
DESCRIPTION: Tests handling of module retractions when the retraction details are not retrievable due to a missing module or version, ensuring no errors are thrown.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
# 'go list -m -retracted mod@version' does not show an error if the module\n# that would contain the retraction is unavailable. See #45305.\ngo list -m -retracted -f '{{.Path}} {{.Version}} {{.Error}}' example.com/retract/missingmod@v1.0.0\nstdout '^example.com/retract/missingmod v1.0.0 \u003cnil\u003e$'\nexists $GOPATH/pkg/mod/cache/download/example.com/retract/missingmod/@v/v1.9.0.info\n! exists $GOPATH/pkg/mod/cache/download/example.com/retract/missingmod/@v/v1.9.0.mod
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Go module file that defines the 'example' module with Go 1.18 as requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_version_stamping_git.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example

go 1.18
```

----------------------------------------

TITLE: AppEngine Build Constraint in Go
DESCRIPTION: A Go file with a build constraint that indicates it should only be included when building for AppEngine. The file imports AppEngine packages to test conditional compilation based on build tags.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
// +build appengine

package m

import _ "appengine"
import _ "appengine/datastore"
```

----------------------------------------

TITLE: Package B Implementation File with Internal Dependency
DESCRIPTION: An implementation file for package 'b' that imports package 'a'. Used to test dependency propagation between packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_test.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package b

import _ "m/a"
```

----------------------------------------

TITLE: Defining Golang Module in go.mod File
DESCRIPTION: This snippet defines the module name and Go version requirement in the standard go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo123_v0.0.1.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module rsc.io/needgo123
go 1.23
```

----------------------------------------

TITLE: Main Package Import
DESCRIPTION: A Go source file that imports a package from the replaced module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_replace_absolute_windows.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package a

import _ "b.com/b"
```

----------------------------------------

TITLE: Configuring Go Module
DESCRIPTION: This snippet shows the content of a go.mod file, which defines the module name and Go version for the project. It specifies the module as 'example.net/nonmain' and sets the Go version to 1.17.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_nonmain.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example.net/nonmain

go 1.17
```

----------------------------------------

TITLE: Defining Go Module Configuration
DESCRIPTION: Basic go.mod file configuration for a module named 'm' using Go version 1.18. This sets up the minimal requirements for a Go module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_fallback.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module m

go 1.18
```

----------------------------------------

TITLE: Go module definition for example code
DESCRIPTION: Defines a Go module named example.com/foo with Go 1.23 as the required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildinfo_godebug_issue68053.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/foo

go 1.23
```

----------------------------------------

TITLE: Defining a Go Package bar with cgo Import - Go
DESCRIPTION: Implements a minimal Go source file for package 'bar', which imports 'C', thereby enabling cgo functionality. This tests the build caching and cgo integration in the context of the regression test. No functions or exported symbols are present; the import is solely for triggering cgo in compilation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_compiled_concurrent.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- bar.go --
package bar

import "C"
```

----------------------------------------

TITLE: Defining Package 'b' in Go
DESCRIPTION: Defines package `b` within module `M`. It contains a single exported function `BFunc` that returns the integer -42. This package is included in one of the test runs (`go test ./a ./b ./main`) but is not directly used by the `main` package or its tests, helping to verify that its presence doesn't alter `main`'s coverage.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_single_vs_multiple.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
-- b/b.go --
package b

func BFunc() int {
	return -42
}
```

----------------------------------------

TITLE: Setting up Go Module and Importing Internal Package in Go
DESCRIPTION: This snippet defines a module in Go using 'module golang.org/notx/useinternal'. It imports a Go internal package subtly indicating indirect usage or concealment of functionality. Dependencies include having the Go environment configured and access to the respective internal package via the specified path. The snippet highlights the use of internal packages, which may be discouraged or require specific project structure to work correctly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_notx_useinternal_v0.1.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package useinternal

import _ "golang.org/x/internal/subtle"
```

----------------------------------------

TITLE: Defining Package 'c' with Cgo and Importing 'a' (Go)
DESCRIPTION: This Go package `c` uses Cgo to define a simple static C function `D`. Crucially, it imports package `a`, which itself has Cgo dependencies and specific LDFLAGS. This setup creates a transitive Cgo dependency scenario, testing how the Go build tool handles linking when `a` requires `libb.a` and `c` also uses Cgo.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
-- c/c.go --
package c

// static int D(int i) { return i; }
import "C"

import "m/a"

func Fn(i int) (int, int) {
     return a.GoFn(i), int(C.D(C.int(i)))
}
```

----------------------------------------

TITLE: Simple Go Package Implementation
DESCRIPTION: A minimal Go package implementation with a single exported function F() that has no implementation details.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo121_v0.0.1.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p

func F() {}
```

----------------------------------------

TITLE: Simple Function Definition in Package A
DESCRIPTION: Defines package 'a' with a simple function F() that will be imported by another package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dot_import.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package a

func F() {}
```

----------------------------------------

TITLE: Empty Go Module Definition File
DESCRIPTION: A minimal go.mod file that defines an empty module named 'm'. This file is used as a starting point for the tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gopkg_unstable.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Executing Go Test with Coverage
DESCRIPTION: Command to run Go tests with coverage reporting, which shows 100% coverage despite unreachable code in blank-named functions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_blank_func_decl.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -cover coverblank
```

----------------------------------------

TITLE: Testing Go Vet Version for Command Line File
DESCRIPTION: Runs go vet on a single file and verifies that the local Go version is used.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_commandline.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go vet -n -json main.go
stderr '"GoVersion": "go1.22.1"'
```

----------------------------------------

TITLE: Trivial Fuzzing Test Function in Go
DESCRIPTION: A minimal Go fuzzing test function implementation that takes a byte slice as input. This function is used as the target for the fuzzing tests in the shell commands above.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_profile_flags.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package example

import "testing"

func FuzzTrivial(f *testing.F) {
	f.Fuzz(func(t *testing.T, _ []byte) {})
}
```

----------------------------------------

TITLE: ConnectionState Struct Definition in Go TLS Package
DESCRIPTION: Type definition showing CurveID field in the ConnectionState struct from the crypto/tls package.
SOURCE: https://github.com/golang/go/blob/master/api/next/67516.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
type ConnectionState struct {
    CurveID CurveID
}
```

----------------------------------------

TITLE: Setting Up GOCACHE and Initial Go Build
DESCRIPTION: This snippet sets up a fresh GOCACHE environment variable and performs an initial Go build without CGO usage. It checks that the 'preferlinkext' token is not present in the build output, which would otherwise indicate a preference for external linking. This setup is preceded by a CGO_CFLAGS environment setting to test various linker behaviors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_suspect_flag_force_external.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GOCACHE=$WORK/gocache
mkdir $GOCACHE

go build -x -n -o dummy.exe ./noUseOfCgo
! stderr preferlinkext
env CGO_CFLAGS=-flto

```

----------------------------------------

TITLE: Configuring Go Module Environment
DESCRIPTION: Sets up the Go module environment with specific paths and settings.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
env GOPATH=$WORK/m/gp
mkdir $WORK/m
cp module_file $WORK/m/go.mod
cd $WORK/m
env GO111MODULE=on
env GOPROXY=''
```

----------------------------------------

TITLE: Showing Retracted Versions using Go List with Versions
DESCRIPTION: Ensures that 'go list -m -retracted -versions' correctly displays all versions, including those retracted, for a module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_12

LANGUAGE: Go
CODE:
```
# 'go list -m -retracted -versions' shows retracted versions.\ngo list -m -retracted -versions example.com/retract\nstdout '^example.com/retract v1.0.0-bad v1.0.0-good v1.0.0-unused v1.1.0$'
```

----------------------------------------

TITLE: Defining Go Module Requirements
DESCRIPTION: Basic go.mod file defining module m with Go 1.15 and requiring rsc.io/quote v1.5.2 as a dependency
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_readonly.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.15

require rsc.io/quote v1.5.2
```

----------------------------------------

TITLE: Defining Function in C Language
DESCRIPTION: This snippet defines a simple C function returning the integer 42, intended to be used within Go code via cgo. It is part of an integration test to verify correct linking of syso files. The function must be compiled into a syso file using a C compiler.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_syso_issue29253.txt#2025-04-22_snippet_0

LANGUAGE: C
CODE:
```
// +build ignore

int f() { return 42; }
```

----------------------------------------

TITLE: Testing Normal Behavior in Go Test
DESCRIPTION: A simple Go test function that completes successfully without explicitly calling os.Exit().
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_exit.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package normal

import "testing"

func TestExitZero(t *testing.T) {
}
```

----------------------------------------

TITLE: Listing Go Module Dependencies
DESCRIPTION: Uses 'go list' to display module dependencies, demonstrating pruning of test dependencies in Go 1.16 modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go list -mod=readonly all
stdout '^example.com/dep$'
! stdout '^example.com/testdep$'
cp stdout list-1.txt
cmp go.mod go.mod.orig
```

----------------------------------------

TITLE: Testing CPU Profiling in Go with Custom Output Name
DESCRIPTION: Executes a Go test with CPU profiling and a custom output name for the test executable. It then verifies the existence of the custom-named executable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_profile.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go test -cpuprofile errors.prof -o myerrors.test$GOEXE errors
exists -exec myerrors.test$GOEXE
```

----------------------------------------

TITLE: Defining Syscall Constants for OpenBSD/Windows in Go
DESCRIPTION: Defines constant integer values used in interfacing with system-level APIs for OpenBSD and Windows (across multiple architectures), such as syscall numbers, IOCTL values, and permission masks. These constants are required for invoking specific syscalls directly or setting up structures for system calls at the Go layer. Input and output are strictly typed integer literals with no runtime dependencies, mapping Go constants to C/OS definitions.
SOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
const SizeofRtMsghdr = 88
const TIOCGTSTAMP = 1074295899
const CCR0_FLUSH = 16
const CCR0_FLUSH ideal-int
const CPUID_CFLUSH = 524288
const CPUID_CFLUSH ideal-int
const EFER_LMA = 1024
const EFER_LMA ideal-int
const EFER_LME = 256
const EFER_LME ideal-int
const EFER_NXE = 2048
const EFER_NXE ideal-int
const EFER_SCE = 1
const EFER_SCE ideal-int
const ImplementsGetwd = false
const PMC5_PIPELINE_FLUSH = 21
const PMC5_PIPELINE_FLUSH ideal-int
const RTF_FMASK = 63496
const RTM_VERSION = 4
const SIOCBRDGDADDR = 2150132039
const SIOCBRDGSADDR = 3223873860
const SYS_CLOCK_GETRES = 234
const SYS_CLOCK_GETTIME = 232
const SYS_CLOCK_SETTIME = 233
const SYS_FHSTATFS = 309
const SYS_FSTAT = 292
const SYS_FSTATAT = 316
const SYS_FSTATFS = 308
const SYS_FUTIMENS = 327
const SYS_FUTIMES = 206
const SYS_GETDIRENTRIES = 312
const SYS_GETDIRENTRIES ideal-int
const SYS_GETFSSTAT = 306
const SYS_GETITIMER = 86
const SYS_GETRUSAGE = 117
const SYS_GETTIMEOFDAY = 116
const SYS_KEVENT = 270
const SYS_KILL = 37
const SYS_LSTAT = 293
const SYS_NANOSLEEP = 240
const SYS_SELECT = 93
const SYS_SETITIMER = 83
const SYS_SETTIMEOFDAY = 122
const SYS_STAT = 291
const SYS_STATFS = 307
const SYS_UTIMENSAT = 326
const SYS_UTIMES = 138
const SYS_WAIT4 = 7
const SYS___THRSLEEP = 300
const SizeofRtMetrics = 48
const SizeofRtMsghdr = 88
const TOKEN_ALL_ACCESS = 983295
```

----------------------------------------

TITLE: Generic Type Aliases Implementation
DESCRIPTION: Defines a generic SliceFlag type and creates 20 type aliases with different fixed-size array parameters. Includes a String() method implementation for the SliceFlag type.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue59571.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package m

type (
	SliceFlag[T any] struct{}

	Alias1  = SliceFlag[[1]int]
	Alias2  = SliceFlag[[2]int]
	Alias3  = SliceFlag[[3]int]
	Alias4  = SliceFlag[[4]int]
	Alias5  = SliceFlag[[5]int]
	Alias6  = SliceFlag[[6]int]
	Alias7  = SliceFlag[[7]int]
	Alias8  = SliceFlag[[8]int]
	Alias9  = SliceFlag[[9]int]
	Alias10 = SliceFlag[[10]int]
	Alias11 = SliceFlag[[11]int]
	Alias12 = SliceFlag[[12]int]
	Alias13 = SliceFlag[[13]int]
	Alias14 = SliceFlag[[14]int]
	Alias15 = SliceFlag[[15]int]
	Alias16 = SliceFlag[[16]int]
	Alias17 = SliceFlag[[17]int]
	Alias18 = SliceFlag[[18]int]
	Alias19 = SliceFlag[[19]int]
	Alias20 = SliceFlag[[20]int]
)

func (x *SliceFlag[T]) String() string { return "zzz" }
```

----------------------------------------

TITLE: Expected Module Why Output
DESCRIPTION: Expected output from 'go mod why' command explaining why rsc.io/sampler is needed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_skip_write.txt#2025-04-22_snippet_4

LANGUAGE: text
CODE:
```
# rsc.io/sampler
m
rsc.io/quote
rsc.io/sampler
```

----------------------------------------

TITLE: Setting CGO_CFLAGS in Go
DESCRIPTION: This snippet sets a unique CGO_CFLAGS variable to test if runtime/cgo is reported as stale. It uses environment variable settings to influence the build process. Ensure that the go command-line tools are installed and accessible.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_stale.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env CGO_CFLAGS=-DTestScript_cgo_stale=true
stale runtime/cgo
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module named 'm' with Go version 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_invalid.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Main Package Implementation
DESCRIPTION: Main package file implementing basic imports from vendored packages p and p1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_list_issue11977.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package g

import _ "vendor.org/p"
import _ "vendor.org/p1"

func main() {}
```

----------------------------------------

TITLE: Defining Go Module Information in .mod File
DESCRIPTION: A module declaration in .mod format specifying the module name as rsc.io/badfile4.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile4_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module rsc.io/badfile4
```

----------------------------------------

TITLE: External Test Package with Embedded Files
DESCRIPTION: External test package (_test) demonstrating embedded file usage.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_embed.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package a_test

import _ "embed"

//go:embed subdir/test/xtest/embed.txt
var subdirXtest string
```

----------------------------------------

TITLE: Adding Read and ReadFile functions to debug/buildinfo package
DESCRIPTION: This snippet adds Read and ReadFile functions to the debug/buildinfo package. These functions return a *debug.BuildInfo and an error.
SOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
pkg debug/buildinfo, func Read(io.ReaderAt) (*debug.BuildInfo, error)
pkg debug/buildinfo, func ReadFile(string) (*debug.BuildInfo, error)
```

----------------------------------------

TITLE: Implementing Compiler Lookup Utility in Go
DESCRIPTION: This Go program implements a simple utility to look up the path of a specified command using exec.LookPath and write it to stdout.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cc_cache_issue64589.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main

import (
	"os"
	"os/exec"
)

func main() {
	path, err := exec.LookPath(os.Args[1])
	if err != nil {
		panic(err)
	}
	os.Stdout.WriteString(path)
}
```

----------------------------------------

TITLE: Local Quote Module Implementation
DESCRIPTION: Local implementation of the rsc.io/quote/v3 module that provides quote functions including a replaced version of GoV3() that returns a different quote.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package quote collects pithy sayings.
package quote

import "rsc.io/sampler"

// Hello returns a greeting.
func HelloV3() string {
	return sampler.Hello()
}

// Glass returns a useful phrase for world travelers.
func GlassV3() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return "I can eat glass and it doesn't hurt me."
}

// Go returns a REPLACED Go proverb.
func GoV3() string {
	return "Concurrency is not parallelism."
}

// Opt returns a optimization truth.
func OptV3() string {
	// Wisdom from ken.
	return "If a program is too slow, it must have a loop."
}
```

----------------------------------------

TITLE: Deprecations in image packages
DESCRIPTION: Lists deprecated variables and types in image packages.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_24

LANGUAGE: Go
CODE:
```
pkg image, var ZP //deprecated
pkg image, var ZR //deprecated
pkg image/jpeg, type Reader //deprecated
```

----------------------------------------

TITLE: Demonstrating Non-Declaration Statement Outside Function Body in Go
DESCRIPTION: This Go file contains a non-declaration statement outside a function body, which is a syntax error in Go. It's used to exercise issue #7108.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_badtest.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package notest

func hello() {
	println("hello world")
}
Hello world
```

----------------------------------------

TITLE: Defining a Minimal Go Main Package (Go)
DESCRIPTION: This Go source file defines a minimal executable program in package `y`. It contains only an empty `main` function. This file (`y/y.go`) serves as a valid target for the `go build` command used in the test script.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/devnull.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package y
func main() {}
```

----------------------------------------

TITLE: Checking Version Metadata with Edited File
DESCRIPTION: This snippet simulates an edited file and installs the Go binary. It verifies that the version metadata includes the 'modified=true' flag. It also checks the module path to verify the `+dirty` suffix is added. Finally the edited file is reverted.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_7

LANGUAGE: Shell
CODE:
```
cp ../../outside/empty.txt ../README
go install
go version -m $GOBIN/a$GOEXE
stdout '^\tbuild\tvcs.modified=true$'
stdout '\s+mod\s+example.com/a\s+v1.2.3\+dirty\s+'
exec hg revert ../README
rm $GOBIN/a$GOEXE
```

----------------------------------------

TITLE: Embedding Multiple Files into String and Byte Slice in Go
DESCRIPTION: This code snippet attempts to embed multiple files (x.go and go.mod) into both a string variable and a byte slice variable using the //go:embed directive. This is intended to cause a compiler error due to multiple files being embedded into single variables.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/embedbad.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package p

import _ "embed"

//go:embed x.go go.mod
var s string

//go:embed x.go go.mod
var b []byte
```

----------------------------------------

TITLE: Testing Package b with b_test
DESCRIPTION: This snippet defines the package 'b_test' for testing purposes and showcases cyclic import with package 'a'. This Go test file imports package 'a' as a dependency to run tests on package 'b'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_imports.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package b_test; import _ "a"
```

----------------------------------------

TITLE: Multiple Module Usage Declaration
DESCRIPTION: Extended go.work file with multiple module usage declarations
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_edit.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go $goversion

use (
	./m
	./n
)
```

----------------------------------------

TITLE: CGO Handle Type Definition
DESCRIPTION: Defines the Handle type and associated methods for CGO operations across multiple platforms.
SOURCE: https://github.com/golang/go/blob/master/api/go1.17.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
type Handle uintptr

func NewHandle(interface{}) Handle
method (Handle) Delete()
method (Handle) Value() interface{}
```

----------------------------------------

TITLE: Example Package With Imports
DESCRIPTION: The main package that imports example.net/a and example.net/b, triggering the toolchain switching during dependency resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package example

import (
	_ "example.net/a"
	_ "example.net/b"
)
```

----------------------------------------

TITLE: Expected go.mod After Upgrade
DESCRIPTION: The expected go.mod file after running 'go get -u -v' command, showing the upgrade to Go 1.23.0 and updated module versions based on the latest available dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module example

go 1.23.0

require (
	example.net/a v0.2.0
	example.net/b v0.1.0
)

require (
	example.net/c v0.1.0 // indirect
	example.net/d v0.2.0 // indirect
)

replace (
	example.net/a v0.1.0 => ./a1
	example.net/a v0.2.0 => ./a2
	example.net/b v0.1.0 => ./b1
	example.net/c v0.1.0 => ./c1
	example.net/d v0.1.0 => ./d1
	example.net/d v0.2.0 => ./d2
)
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: Defines a Go module named 'example.com/pkg' using Go version 1.17.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/pkg

go 1.17
```

----------------------------------------

TITLE: Package 'a' Importing Dependency 'b' in Go
DESCRIPTION: This Go file defines package 'a' and imports 'example.net/b', demonstrating the dependency chain being tested.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue48511.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
package a

import "example.net/b"
```

----------------------------------------

TITLE: Building Vendored Package in Go
DESCRIPTION: This command builds a vendored package 'foo.com/internal/bar/a' using the go build tool.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_internal.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go build ./vendor/foo.com/internal/bar/a
```

----------------------------------------

TITLE: CGO LDFLAGS Quoting Test Implementation
DESCRIPTION: A minimal Go program that tests CGO LDFLAGS quoting behavior. The program includes a CGO directive with LDFLAGS containing a space in the library path and a linker option that should be treated as part of the path string.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_link_ldflags.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main
// #cgo LDFLAGS: -L "./ -Wl,--nosuchoption"
import "C"
func main() {}
```

----------------------------------------

TITLE: Reusing go list Output with the -reuse Flag - Shell
DESCRIPTION: This snippet demonstrates the use of the '-reuse' flag to instruct 'go list' to reuse cached metadata from a previously written JSON file. It ensures that when the same query is made with the -reuse option, the expected version and all origin data fields remain intact, with an explicit 'Reuse' indicator in the output. This checks tooling optimization for repeated queries. Dependencies include a valid JSON cache file and the Go toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61423.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go list -reuse=git-latest.json -m -json vcs-test.golang.org/git/issue61415.git@latest
stdout '"Version": "v0.0.0-20231114180001-f213069baa68"'
stdout '"Origin":'
stdout '"VCS": "git"'
stdout '"Hash": "f213069baa68ec26412fb373c7cf6669db1f8e69"'
stdout '"Ref": "HEAD"'
stdout '"TagSum": "t1:47DEQpj8HBSa\+/TImW\+5JCeuQeRkm5NMpJWZG3hSuFU="'
stdout '"Reuse": true'

```

----------------------------------------

TITLE: Testing Cgo with Compiler Defines in Go
DESCRIPTION: A simple Go program that uses cgo to include a C variable defined by the compiler flags. It prints the value of the C variable 'x' which will be 1 if the wrapper was properly used to compile the code.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path_space_quote.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package main

// int x = WRAPPER_WAS_USED;
import "C"
import "fmt"

func main() {
	fmt.Println(C.x)
}
```

----------------------------------------

TITLE: Testing Go Vet Version for Module
DESCRIPTION: Runs go vet on a module and checks the GoVersion output. Expects the version from go.mod to be used.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_commandline.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go vet -n -json example.com/m
stderr '"GoVersion": "go1.22.0"'
```

----------------------------------------

TITLE: Setting Up and Running Go Program
DESCRIPTION: Shell commands to disable Go modules and run the hello world program
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_hello.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off

# hello world
go run hello.go
stderr 'hello world'
```

----------------------------------------

TITLE: Configuring Go Module with Replacements
DESCRIPTION: Defines a go.mod file with multiple module replacements, including version-specific replacements and incompatible version handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_import.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module example.com/m

replace (
	example.com/a => ./a
	example.com/a/b => ./b
)

replace (
	example.com/x => ./x
	example.com/x/v3 => ./v3
)

replace (
	example.com/y/z/w => ./w
	example.com/y => ./y
)

replace (
	example.com/v v1.11.0 => ./v11
	example.com/v v1.12.0 => ./v12
	example.com/v => ./v
)

replace (
	example.com/i v2.0.0+incompatible => ./i2
)
```

----------------------------------------

TITLE: Defining Module Path in go.mod (Go)
DESCRIPTION: Specifies the module path `example.com/split-incompatible` in a `go.mod` file. This file defines the root of the Go module being tested.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split-incompatible_v2.1.0-pre+incompatible.txt#2025-04-22_snippet_0

LANGUAGE: go.mod
CODE:
```
-- .mod --
module example.com/split-incompatible
```

----------------------------------------

TITLE: Defining Module 'c' with Dependency in Go
DESCRIPTION: This go.mod file defines module 'example.net/c' with a dependency on 'example.net/a' version 0.2.0. It's used to test how 'go get' handles this dependency in relation to the cyclic dependencies between modules 'a' and 'b'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue60490.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
module example.net/c

go 1.19

require example.net/a v0.2.0
```

----------------------------------------

TITLE: Configuring Module 'a' Version 0.2.0 with Dependency in Go
DESCRIPTION: This go.mod file defines module 'example.net/a' version 0.2.0 with a dependency on 'example.net/b' version 0.2.0, creating a potential cyclic dependency for testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue60490.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module example.net/a

go 1.19

require example.net/b v0.2.0
```

----------------------------------------

TITLE: GOROOT Testing Main Program
DESCRIPTION: Go program that prints the runtime.GOROOT() value and attempts to import the runtime package to verify GOROOT detection. This is used to test GOROOT behavior across different build configurations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_goroot.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

//go:generate go run .

import (
	"fmt"
	"go/build"
	"os"
	"runtime"
)

func main() {
	fmt.Println("GOROOT", runtime.GOROOT())

	p, err := build.Default.Import("runtime", "", build.FindOnly)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	fmt.Println("runtime", p.Dir)
}
```

----------------------------------------

TITLE: Testing Start Anchor with \B and Dot in Go Regexps
DESCRIPTION: Tests patterns combining start anchors (^), non-word boundary assertions (\B), and the dot metacharacter. These tests verify how any character matches with non-word boundary constraints at the start of strings.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_16

LANGUAGE: regexp
CODE:
```
^\B.$
```

LANGUAGE: regexp
CODE:
```
^(?:^\B.$)$
```

LANGUAGE: regexp
CODE:
```
^(?:^\B.$)
```

LANGUAGE: regexp
CODE:
```
(?:^\B.$)$
```

----------------------------------------

TITLE: Implementing Go Fuzzing Tests with Environment Variable Handling
DESCRIPTION: This Go test file demonstrates fuzzing tests that manipulate environment variables using f.Setenv(). It contains two test functions: FuzzA verifies environment variable setting, and FuzzB verifies they're properly cleared between tests. A helper function 'isWorker()' determines if the test is running in a fuzzing worker.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_setenv.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package fuzz

import (
  "flag"
  "os"
  "testing"
)

func FuzzA(f *testing.F) {
  if s := os.Getenv("TEST_FUZZ_SETENV_A"); isWorker() && s == "" {
    f.Fatal("environment variable not set")
  } else if !isWorker() && s != "" {
    f.Fatal("environment variable already set")
  }
  f.Setenv("TEST_FUZZ_SETENV_A", "A")
  if os.Getenv("TEST_FUZZ_SETENV_A") == "" {
    f.Fatal("Setenv did not set environment variable")
  }
  f.Fuzz(func(*testing.T, []byte) {})
}

func FuzzB(f *testing.F) {
  if os.Getenv("TEST_FUZZ_SETENV_A") != "" {
    f.Fatal("environment variable not cleared after FuzzA")
  }
  f.Skip()
}

func isWorker() bool {
	f := flag.Lookup("test.fuzzworker")
	if f == nil {
		return false
	}
	get, ok := f.Value.(flag.Getter)
	if !ok {
		return false
	}
	return get.Get() == interface{}(true)
}
```

----------------------------------------

TITLE: Module A Main Program
DESCRIPTION: Main program for module A that imports and uses rsc.io/quote package to print a hello message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_why_download_graph.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"rsc.io/quote"
)

func main() {
	fmt.Println(quote.Hello())
}
```

----------------------------------------

TITLE: Testing Complex Regex Patterns with Grouping in Go
DESCRIPTION: Test cases for more complex regular expressions that combine grouping with word boundaries and other assertions. These patterns test how different regex components interact with each other.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
"^(?:^\\b(fo|foo)\\b)$"
```

----------------------------------------

TITLE: Switching Go Proxy to Filesystem-Based Module Cache - Shell
DESCRIPTION: This snippet conditionally sets the 'GOPROXY' environment variable to point to the local filesystem cache where module versions have been stored, using correct file URI syntax for the current OS. It also sets a new GOMODCACHE directory to isolate test side effects. The configuration ensures that subsequent module resolutions occur against the simulated proxy containing limited metadata. There are no runtime parameters, just environment variables.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61423.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
[GOOS:windows] env GOPROXY=file:///$WORK/mod1/cache/download
[!GOOS:windows] env GOPROXY=file://$WORK/mod1/cache/download
env GOMODCACHE=$WORK/modcache2

```

----------------------------------------

TITLE: Declaring Toolchain Module Path (.mod)
DESCRIPTION: Specifies the module path `golang.org/toolchain`. This likely represents the content of a `.mod` file specific to the toolchain module itself, indicating its canonical import path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.1.linux-amd64.txt#2025-04-22_snippet_2

LANGUAGE: gomod
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: Defining Module 'b' Version 0.1.0 in Go
DESCRIPTION: This go.mod file defines the module 'example.net/b' version 0.1.0 without any dependencies. It's part of the test setup for dependency resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue60490.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
module example.net/b

go 1.19
```

----------------------------------------

TITLE: Testing Quote Functions in Go
DESCRIPTION: This snippet contains test functions for the quote package. It tests the Hello, Glass, Go, and Opt functions by comparing their outputs with expected strings. It also sets the LC_ALL environment variable to 'en' for consistent language behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709153244-fd906ed3b100.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package quote

import (
	"os"
	"testing"
)

func init() {
	os.Setenv("LC_ALL", "en")
}

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory, share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}

func TestOpt(t *testing.T) {
	opt := "If a program is too slow, it must have a loop."
	if out := Opt(); out != opt {
		t.Errorf("Opt() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Initializing an Empty Package - Go
DESCRIPTION: Defines an empty Go package named 'p' in p.go, serving as a placeholder for future implementation. This snippet sets up the basic package structure with the required package declaration at the top and allows later addition of functions, types, or variables. No dependencies, parameters, or logic are provided in this snippet.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prev_v1.0.0-bad.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p
```

----------------------------------------

TITLE: Go Workspace With Replace Directives
DESCRIPTION: Go workspace configuration with module replacements specified
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_edit.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
go 1.18

use ./n

replace (
	x.1 v1.3.0 => y.1 v1.4.0
	x.1 v1.4.0 => ../z
)
```

----------------------------------------

TITLE: Overlay Replacement for go.mod - JSON
DESCRIPTION: This snippet shows a JSON configuration for replacing the go.mod file with another version in a Go project overlay. It specifies which go.mod file to use via path replacement, which is critical for setups using overlays.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_overlay.txt#2025-04-22_snippet_0

LANGUAGE: JSON
CODE:
```
{
	"Replace": {
		"go.mod": "../../../overlay/simple_go_mod"
	}
}
```

----------------------------------------

TITLE: IP Protocol Constants in Go for NetBSD ARM64
DESCRIPTION: Constants defining IP protocol numbers for various transport and network protocols in NetBSD ARM64. These values are used in socket creation and packet handling.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_134

LANGUAGE: Go
CODE:
```
const IPPROTO_AH = 51
const IPPROTO_CARP = 112
const IPPROTO_DONE = 257
const IPPROTO_DSTOPTS = 60
const IPPROTO_EGP = 8
const IPPROTO_ENCAP = 98
const IPPROTO_EON = 80
const IPPROTO_ESP = 50
const IPPROTO_ETHERIP = 97
const IPPROTO_FRAGMENT = 44
const IPPROTO_GGP = 3
const IPPROTO_GRE = 47
const IPPROTO_HOPOPTS = 0
const IPPROTO_ICMP = 1
const IPPROTO_ICMPV6 = 58
const IPPROTO_IDP = 22
const IPPROTO_IGMP = 2
const IPPROTO_IPCOMP = 108
const IPPROTO_IPIP = 4
const IPPROTO_IPV4 = 4
const IPPROTO_IPV6_ICMP = 58
const IPPROTO_MAX = 256
const IPPROTO_MAXID = 52
const IPPROTO_MOBILE = 55
const IPPROTO_NONE = 59
const IPPROTO_PFSYNC = 240
const IPPROTO_PIM = 103
const IPPROTO_PUP = 12
const IPPROTO_RAW = 255
const IPPROTO_ROUTING = 43
const IPPROTO_RSVP = 46
const IPPROTO_TP = 29
const IPPROTO_VRRP = 112
```

----------------------------------------

TITLE: Upgrading to Unicode 7.0.0 in Go unicode package
DESCRIPTION: Updates the Unicode package to version 7.0.0, adding support for multiple new scripts through additional RangeTable definitions. Each RangeTable represents the character set for a specific script or writing system.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_34

LANGUAGE: go
CODE:
```
const Version = "7.0.0"

// New script definitions
var Bassa_Vah *RangeTable
var Caucasian_Albanian *RangeTable
var Duployan *RangeTable
var Elbasan *RangeTable
var Grantha *RangeTable
var Khojki *RangeTable
var Khudawadi *RangeTable
var Linear_A *RangeTable
var Mahajani *RangeTable
var Manichaean *RangeTable
var Mende_Kikakui *RangeTable
var Modi *RangeTable
var Mro *RangeTable
var Nabataean *RangeTable
var Old_North_Arabian *RangeTable
var Old_Permic *RangeTable
var Pahawh_Hmong *RangeTable
var Palmyrene *RangeTable
var Pau_Cin_Hau *RangeTable
var Psalter_Pahlavi *RangeTable
var Siddham *RangeTable
var Tirhuta *RangeTable
var Warang_Citi *RangeTable
```

----------------------------------------

TITLE: Building Go Test with Coverage to Non-Existent Directory (Shell)
DESCRIPTION: This shell command compiles the 'coverdep' Go test package into an executable named 'coverdep' within the $WORK directory, enabling code coverage. It attempts to write the coverage profile to a non-existent directory ($WORK/no/such/dir/), specifically to test Go's behavior related to issue 24588. Finally, it executes the compiled test binary using the 'exists -exec' command (presumably part of a test harness).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dash_c.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Test for issue 24588

go test -c -o $WORK/coverdep -coverprofile=$WORK/no/such/dir/cover.out coverdep
exists -exec $WORK/coverdep
```

----------------------------------------

TITLE: Defining RTM (Routing Message) Constants in Go Syscall Package for Darwin-arm64-cgo
DESCRIPTION: Constants for routing message types used in network routing operations. These values define different actions that can be performed on the routing table, such as adding, deleting, or modifying routes.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_176

LANGUAGE: Go
CODE:
```
const RTM_ADD = 1
const RTM_DELETE = 2
const RTM_CHANGE = 3
const RTM_GET = 4
const RTM_LOSING = 5
const RTM_REDIRECT = 6
const RTM_MISS = 7
const RTM_LOCK = 8
const RTM_OLDADD = 9
const RTM_OLDDEL = 10
const RTM_RESOLVE = 11
const RTM_NEWADDR = 12
const RTM_DELADDR = 13
const RTM_IFINFO = 14
const RTM_NEWMADDR = 15
const RTM_DELMADDR = 16
const RTM_IFINFO2 = 18
const RTM_NEWMADDR2 = 19
const RTM_GET2 = 20
const RTM_VERSION = 5
const RTM_RTTUNIT = 1000000
```

----------------------------------------

TITLE: Testing Go List Failure for Test Package with Missing Requirement (Shell)
DESCRIPTION: Attempts to list the `m/testuse` package including its tests (`go list -mod=mod -test m/testuse`). The test file for this package imports `example.com/badchain/c`. Similar to the previous test, this command is expected to fail (`!`) due to the path mismatch error when resolving the test dependency `example.com/badchain/c@v1.1.0`. The script compares the standard error output with `list-missing-test-expected`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
! go list -mod=mod -test m/testuse
cmp stderr list-missing-test-expected
```

----------------------------------------

TITLE: Defining Go Module with External Dependency - Go Module
DESCRIPTION: Specifies a Go module named mod.example targeting Go version 1.20 and requiring the external module rsc.io/quote/v3 version 3.0.0. This configuration enables other Go source files in the project to use the defined module and import the dependency. Prerequisites include Go 1.20+ installed, no function parameters or output, and the file must be named go.mod and reside in the project root.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_pkg_select.txt#2025-04-22_snippet_1

LANGUAGE: mod
CODE:
```
module mod.example

go 1.20

require rsc.io/quote/v3 v3.0.0
```

----------------------------------------

TITLE: Redefining Nested Go Module with Module Directive - Go
DESCRIPTION: This snippet defines another Go module by specifying the same module path 'example.com/nest' in a nested 'go.mod' file. This is used to simulate or test the behavior of nested modules without declaring dependencies between them. It is essential for developers testing Go's module resolution logic in complex directory structures. Like the root module, it introduces no dependencies and does not restrain or reflect any explicit relationship with its parent.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/nest
```

----------------------------------------

TITLE: Testing go list Behavior with Module Configuration
DESCRIPTION: A series of shell commands to test 'go list' behavior with the given module configuration, including checking for unintended modifications to go.mod and verifying correct module resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_import.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
# 'go list' should not add requirements even if they can be resolved locally.
cp go.mod go.mod.orig
! go list all
cmp go.mod go.mod.orig

# 'go list' should resolve imports using replacements.
go get
go list all
stdout 'example.com/a/b$'
stdout 'example.com/x/v3$'
stdout 'example.com/y/z/w$'
stdout 'example.com/v'

# The selected modules should prefer longer paths,
# but should try shorter paths if needed.
# Modules with a major-version suffix should have a corresponding pseudo-version.
# Replacements that specify a version should use the latest such version.
go list -m all
stdout 'example.com/a/b v0.0.0-00010101000000-000000000000 => ./b'
stdout 'example.com/y v0.0.0-00010101000000-000000000000 => ./y'
stdout 'example.com/x/v3 v3.0.0-00010101000000-000000000000 => ./v3'
stdout 'example.com/v v1.12.0 => ./v12'
```

----------------------------------------

TITLE: Asserting Expected Output for 'latest' Version (Timestamp Preference)
DESCRIPTION: Specifies the expected standard output for the preceding 'go list' command querying 'modtest3'. The regular expression asserts that the resolved 'latest' version is the pseudo-version with the most recent timestamp ('v0.0.0-20181023043359-a85b471d5412', dated 2018-10-22), not necessarily the highest semantic version, confirming timestamp-based preference among pseudo-versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_8

LANGUAGE: shell
CODE:
```
stdout '^dmitri.shuralyov.com/test/modtest3 v0.0.0-20181023043359-a85b471d5412 2018-10-22$'
```

----------------------------------------

TITLE: Initializing a Go Package with Ambiguity Comments - Go
DESCRIPTION: Defines a Go package named "pkg" with a comment highlighting that this package exists in both a parent module and a nested module, both at version v0.1.0. The code is not functionally complete but is intended to document ambiguous provisioning of packages for module resolution tests. The key feature is the ambiguity note, which is crucial for module-related testing and documentation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_nested_v0.1.0.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
// Package pkg exists in both example.net/ambiguous v0.1.0\n// and example.net/ambiguous/nested v0.1.0\npackage pkg
```

----------------------------------------

TITLE: Defining Synchronization Syscall Constants for Darwin ARM64
DESCRIPTION: Constant definitions for thread synchronization system calls on Darwin ARM64 architecture. These include operations for pthread synchronization (PSYNCH) like mutexes, condition variables, and read-write locks with their numeric identifiers.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_104

LANGUAGE: Go
CODE:
```
const SYS_PSYNCH_CVBROAD = 303
const SYS_PSYNCH_CVCLRPREPOST = 312
const SYS_PSYNCH_CVSIGNAL = 304
const SYS_PSYNCH_CVWAIT = 305
const SYS_PSYNCH_MUTEXDROP = 302
const SYS_PSYNCH_MUTEXWAIT = 301
const SYS_PSYNCH_RW_DOWNGRADE = 299
const SYS_PSYNCH_RW_LONGRDLOCK = 297
const SYS_PSYNCH_RW_RDLOCK = 306
const SYS_PSYNCH_RW_UNLOCK = 308
const SYS_PSYNCH_RW_UNLOCK2 = 309
const SYS_PSYNCH_RW_UPGRADE = 300
const SYS_PSYNCH_RW_WRLOCK = 307
const SYS_PSYNCH_RW_YIELDWRLOCK = 298
```

----------------------------------------

TITLE: Executing go list Command with Import and Dependency Analysis - Shell Script
DESCRIPTION: The shell scripts execute the go list command to analyze import paths and dependencies of Go packages within a module. The commands include parameters for JSON output and test flag, aiming to capture any import cycles or issues that arise. If there are errors, they are compared against expected outputs in wanterr.txt. Dependencies include setting up the Go environment and having Go installed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_cycle.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go list -json=ImportPath -test ./p
cmp stderr wanterr.txt
```

LANGUAGE: shell
CODE:
```
! go list -json=ImportPath,Deps -test ./p
cmp stderr wanterr.txt
```

LANGUAGE: shell
CODE:
```
! go list -json=ImportPath,Deps -deps -test ./p
cmp stderr wanterr.txt
```

LANGUAGE: shell
CODE:
```
! go list -json=ImportPath -deps -test ./p
cmp stderr wanterr.txt
```

----------------------------------------

TITLE: Expected Go Sum File After Upgrades
DESCRIPTION: Defines the expected state of go.sum after all upgrades and tests are performed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_8

LANGUAGE: text
CODE:
```
golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
rsc.io/quote v1.0.0 h1:kQ3IZQzPTiDJxSZI98YaWgxFEhlNdYASHvh+MplbViw=
rsc.io/quote v1.0.0/go.mod h1:v83Ri/njykPcgJltBc/gEkJTmjTsNgtO1Y7vyIK1CQA=
rsc.io/quote v1.5.2 h1:3fEykkD9k7lYzXqCYrwGAf7iNhbk4yCjHmKBN9td4L0=
rsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=
rsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=
```

----------------------------------------

TITLE: Module B Configuration
DESCRIPTION: Basic module configuration for example.com/b with Go 1.21.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue54372.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com/b

go 1.21
```

----------------------------------------

TITLE: Package Depends-on-a Source
DESCRIPTION: Package that depends on package a which contains illegal imports.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_internal.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
// A package that depends on a package with a bad import
package depends

import (
  _ "a"
)
```

----------------------------------------

TITLE: Testing Go Mod Vendor with Empty -o Flag
DESCRIPTION: This snippet tests the behavior of 'go mod vendor' when an empty argument is passed to the -o flag, both in the module root directory and nested subdirectories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
# 'go mod vendor' should fall back to the default 'vendor' directory when an empty argument is passed to the -o flag
# the same behavior should be exhibited both on the module root directory, as well as nested subdirectories

go mod vendor -v -o ''
exists vendor/modules.txt

env GOFLAGS=-o=foo
go mod vendor -v -o ''
exists vendor/modules.txt
env GOFLAGS=''

mkdir -p nested/dir
cd nested/dir
go mod vendor -v -o ''
! exists vendor/
exists ../../vendor/modules.txt
cd ../..
```

----------------------------------------

TITLE: Testing Go Module Commands for Error Handling in Shell
DESCRIPTION: This shell script tests the behavior of Go module commands. It first attempts `go mod download`, expecting it to fail with a specific stderr message indicating a malformed `go.sum` file. Subsequently, it runs `go mod tidy` to correct the `go.sum` file and then compares the modified `go.sum` with an expected correct version (`go.sum.after-tidy`) using `cmp`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/malformed_gosum_issue62345.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go mod download
stderr '^malformed go.sum:\n.*go.sum:3: wrong number of fields 5\n$'

go mod tidy
cmp go.sum go.sum.after-tidy
```

----------------------------------------

TITLE: Go Work File with Current Version
DESCRIPTION: This go.work file specifies a current Go version (1.10) and includes the current directory in the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_8

LANGUAGE: Plain Text
CODE:
```
go 1.10
use .
```

----------------------------------------

TITLE: Testing Go Get with Test-only Packages
DESCRIPTION: This snippet demonstrates how 'go get' handles modules with test-only packages and their dependencies, addressing issue #29268.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
go get example.net/testonly@v0.1.0

! go get -t example.net/testonly@v0.1.0
stderr '^go: example.net/testonly tested by\n\texample.net/testonly\.test imports\n\texample.net/missing: cannot find module providing package example.net/missing$'
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: A simple Go module definition file that sets up the module name as 'pkgs' with Go 1.16 as the required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_patterns_outside_gopath.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module pkgs

go 1.16
```

----------------------------------------

TITLE: Defining Go Test File with Dependency (Go)
DESCRIPTION: Defines a Go test file (`testuse/testuse_test.go`) for package `testuse`. It includes a basic test function `Test` and imports `example.com/badchain/c` for side effects (`_`). This import is intended to trigger dependency resolution errors when listing the package with the `-test` flag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
-- testuse/testuse_test.go --
package testuse

import (
	"testing"
	_ "example.com/badchain/c"
)

func Test(t *testing.T) {}
```

----------------------------------------

TITLE: Go Module Checksum File
DESCRIPTION: The go.sum file containing the checksum for rsc.io/breaker v1.0.0, ensuring dependency integrity for the test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_update_sum_readonly.txt#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
rsc.io/breaker v1.0.0/go.mod h1:s5yxDXvD88U1/ESC23I2FK3Lkv4YIKaB1ij/Hbm805g=
```

----------------------------------------

TITLE: Downgrading Go Version without Toolchain
DESCRIPTION: This snippet demonstrates downgrading the Go version without adding a toolchain. It shows how to verify the changes in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
go get toolchain@1.22.1
```

----------------------------------------

TITLE: Defining Test Dependency for Package 'm' (Go)
DESCRIPTION: Defines a test file associated with package `m` (using the `m_test` naming convention). It imports `x/inall/fromtest` using a blank identifier to establish a test-only dependency for the main module `m`, relevant for testing the `-deps` flag with the `all` pattern.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- m_test.go --
package m_test

import _ "x/inall/fromtest"
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: Defines a basic Go module named 'x' in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
module x
```

----------------------------------------

TITLE: Creating go.mod with v2 Module Path
DESCRIPTION: Creates a go.mod file with a v2 module path and tags it as v2.0.1. This establishes a version 2 of the module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
at 2018-02-19T18:14:23-05:00
mkdir v2
echo 'module "github.com/rsc/vgotest1/v2" // root go.mod'
cp stdout go.mod
git add go.mod
git commit -m 'go.mod v2'
git tag v2.0.1
```

----------------------------------------

TITLE: Testing Package Listing with Go Tool - Shell Script
DESCRIPTION: This shell script segment ensures that the Go tool correctly handles wildcards in package lists. It uses '! go list ./...' to check that a package named 'badpkg' fails as expected, and then verifies with 'go list ./goodpkg...' that the valid package is listed, confirming exclusion logic. Dependencies: Go CLI must be available, and the test structure follows shell conventions. Inputs are the Go list commands, and outputs are the command status and potential errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_wildcard_skip_nonmatching.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Test that wildcards don\'t look in useless directories.\n\n# First make sure that badpkg fails the list of \'...\'.\n! go list ./...\nstderr badpkg\n\n# Check that the list of \'./goodpkg...\' succeeds. That implies badpkg was skipped.\ngo list ./goodpkg...\n
```

----------------------------------------

TITLE: Non-Unix Platform Main Implementation
DESCRIPTION: Main program implementation for non-Unix platforms using build constraints to exclude Unix-like operating systems.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_unix_tag.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
//go:build !(aix || darwin || dragonfly || freebsd || hurd || linux || netbsd || openbsd || solaris)

package main

import _ "example.com/version"

func main() {}
```

----------------------------------------

TITLE: Implementing Trivial Fuzz Test in Go
DESCRIPTION: Defines a basic fuzz test function that takes no action. This test is designed to be skipped on certain platform combinations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_unsupported.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package example

import "testing"

func FuzzTrivial(f *testing.F) {
	f.Fuzz(func(t *testing.T, _ []byte) {})
}
```

----------------------------------------

TITLE: Overriding GOENV and Displaying Environment Variables
DESCRIPTION: This snippet overrides the GOENV variable and displays all Go environment variables. It also tests error handling for invalid flags and missing arguments.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
# Now override it to something writable.
env GOENV=$WORK/envdir/go/env
go env GOENV
stdout envdir[\\/]go[\\/]env

# go env shows all variables
go env
stdout GOARCH=
stdout GOOS=
stdout GOROOT=

# go env ignores invalid flag in GOFLAGS environment variable
env GOFLAGS='=true'
go env

# checking errors
! go env -w
stderr 'go: no KEY=VALUE arguments given'
! go env -u
stderr 'go: ''go env -u'' requires an argument'
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module configuration file defining dependencies on quote/v2 and sampler packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162749-b44a0b17b2d1.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module rsc.io/quote

require (
	rsc.io/quote/v2 v2.0.1
	rsc.io/sampler v1.3.0
)
```

----------------------------------------

TITLE: Initializing a Filesystem-Based Module Proxy Containing an Older Commit - Shell
DESCRIPTION: Here, the snippet resets the module cache and downloads a specific earlier commit of the target Go module, using 'go mod download' with the -json flag for structured output. Assertions verify the expected version, origin, VCS type, and commit hash. This sets up a scenario where the module proxy contains only older metadata, providing a contrast to direct VCS access. Required dependencies are a functional Go toolchain and access to the targeted module repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61423.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
# Now we construct a filesystem-based module proxy that
# contains only an older commit.

go clean -modcache

go mod download -json vcs-test.golang.org/git/issue61415.git@08a4fa6bb9c04ffba03b26ae427b0d6335d90a2a
stdout '"Version": "v0.0.0-20231114180000-08a4fa6bb9c0"'
stdout '"Origin":'
stdout '"VCS": "git"'
stdout '"Hash": "08a4fa6bb9c04ffba03b26ae427b0d6335d90a2a"'

```

----------------------------------------

TITLE: Module Definition File
DESCRIPTION: Defines the module name as rsc.io/badfile2.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile2_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module rsc.io/badfile2
```

----------------------------------------

TITLE: Module B Configuration (v0.2.0)
DESCRIPTION: Configuration for module B version 0.2.0 requiring module C version 0.2.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue65363.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.net/b

go 1.16

require example.net/c v0.2.0
```

LANGUAGE: go
CODE:
```
package b
```

LANGUAGE: go
CODE:
```
package b_test

import _ "example.net/c"
```

----------------------------------------

TITLE: Defining Go Module with Retraction
DESCRIPTION: Module declaration file (.mod) specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_v1.0.0-bad.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/retract

go 1.15
```

----------------------------------------

TITLE: Implementing Fuzzing Tests with Cleanup in Go
DESCRIPTION: Defines several fuzzing test functions that demonstrate cleanup behavior in different scenarios, including skips, fatal errors, panics, and unexpected exits. Each function sets up a cleanup action and then triggers a specific condition.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cleanup.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package cleanup

import (
	"runtime"
	"testing"
)

func FuzzTargetSkip(f *testing.F) {
	f.Cleanup(func() { f.Log("cleanup") })
	f.Skip()
}

func FuzzTargetFatal(f *testing.F) {
	f.Cleanup(func() { f.Log("cleanup") })
	f.Fatal()
}

func FuzzTargetGoexit(f *testing.F) {
	f.Cleanup(func() { f.Log("cleanup") })
	runtime.Goexit()
}

func FuzzTargetPanic(f *testing.F) {
	f.Cleanup(func() { f.Log("cleanup") })
	panic("oh no")
}

func FuzzFunction(f *testing.F) {
	f.Add([]byte{0})
	f.Cleanup(func() { f.Log("outer") })
	f.Fuzz(func(t *testing.T, b []byte) {
		t.Cleanup(func() { t.Logf("inner") })
	})
}
```

----------------------------------------

TITLE: Testing Go Module Commands
DESCRIPTION: Test script that checks the behavior of various Go commands when running without a module context but with GO111MODULE=on. Shows which commands fail (like build, test, fmt) and which succeed (like clean, doc, env).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_nomod.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Test go commands with no module.
env GO111MODULE=on

# go mod edit fails unless given explicit mod file argument
! go mod edit -json
go mod edit -json x.mod

# bug succeeds
[exec:echo] env BROWSER=echo
[exec:echo] go bug

# commands that load the package in the current directory fail
! go build
! go fmt
! go generate
! go get
! go install
! go list
! go run
! go test
! go vet

# clean succeeds, even with -modcache
go clean -modcache

# doc succeeds for standard library
go doc unsafe

# env succeeds
go env

# tool succeeds
go tool -n test2json

# version succeeds
go version
```

----------------------------------------

TITLE: Importing a Dependency Package with Blank Identifier - Go
DESCRIPTION: This Go code defines the 'root' package and imports 'golang.org/issue/mirror' with a blank identifier, ensuring the dependency is referenced without explicit use. No exported functions are defined, making this a stub intended just to pull in module dependencies as part of the test case. Requires the 'golang.org/issue/mirror' module to be available per the import path and go.mod setup.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package root

import _ "golang.org/issue/mirror"
```

----------------------------------------

TITLE: Testing Standard Library Package Installation
DESCRIPTION: Verifies that standard library packages don't have install targets by default, but behavior changes with specific environment variables like GODEBUG=installgoroot=all and CGO_ENABLED=0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_goroot_targets.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Packages in std do not have an install target.
go list -f '{{.Target}}' fmt
! stdout .
go list -export -f '{{.Export}}' fmt
stdout $GOCACHE

# With GODEBUG=installgoroot=all, fmt has a target.
# (Though we can't try installing it without modifying goroot).
env GODEBUG=installgoroot=all
go list -f '{{.Target}}' fmt
stdout fmt\.a

# However, the fake packages "builtin" and "unsafe" do not.
go list -f '{{.Target}}' builtin unsafe
! stdout .
go install builtin unsafe  # Should succeed as no-ops.

# With CGO_ENABLED=0, packages that would have
# an install target with cgo on no longer do.
env GODEBUG=
env CGO_ENABLED=0
go list -f '{{.Target}}' runtime/cgo
! stdout .
go list -export -f '{{.Export}}' runtime/cgo
stdout $GOCACHE
```

----------------------------------------

TITLE: System Call Numbers for OpenBSD in Go
DESCRIPTION: Defines system call numbers for various operations on OpenBSD. These constants are used with the syscall package to invoke specific system functions.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_55

LANGUAGE: Go
CODE:
```
const SYS_CLOCK_GETRES = 89
const SYS_CLOCK_GETTIME = 87
const SYS_CLOCK_SETTIME = 88
const SYS_FHSTATFS = 65
const SYS_FSTAT = 53
const SYS_FSTATAT = 42
const SYS_FSTATFS = 64
const SYS_FUTIMENS = 85
const SYS_FUTIMES = 77
const SYS_GETDENTS = 99
const SYS_GETFSSTAT = 62
const SYS_GETITIMER = 70
const SYS_GETRUSAGE = 19
const SYS_GETTIMEOFDAY = 67
const SYS_KEVENT = 72
const SYS_LSTAT = 40
const SYS_NANOSLEEP = 91
const SYS_PPOLL = 109
const SYS_PSELECT = 110
const SYS_SELECT = 71
const SYS_SETITIMER = 69
const SYS_SETTIMEOFDAY = 68
const SYS_STAT = 38
const SYS_STATFS = 63
const SYS_UTIMENSAT = 84
const SYS_UTIMES = 76
const SYS_UTRACE = 209
const SYS_WAIT4 = 11
const SYS___THRSLEEP = 94
```

----------------------------------------

TITLE: Profile Generation Utility in Go
DESCRIPTION: A Go program that creates a CPU profile by spinning for a short duration. Used to overwrite the profile file to test rebuild triggering when profile content changes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import (
	"os"
	"runtime/pprof"
	"time"
)

func main() {
	f, err := os.Create("prof")
	if err != nil {
		panic(err)
	}
	err = pprof.StartCPUProfile(f)
	if err != nil {
		panic(err)
	}
	// Spin to ensure we get some samples. If we get no samples, the result
	// is equivalent to an empty profile.
	start := time.Now()
	for time.Since(start) < 100*time.Millisecond {}
	pprof.StopCPUProfile()
	f.Close()
}
```

----------------------------------------

TITLE: Testing Package Resolution in Alternative GOROOT
DESCRIPTION: Tests package resolution behavior in a different GOROOT to ensure it doesn't get the special treatment of the main GOROOT.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
# golang.org/issue/30756: packages in other GOROOTs should not get the special
# prefixless treatment of GOROOT itself.
cd $WORK/othergoroot/src
! go list .
stderr '^no Go files in '$WORK'[/\\]othergoroot[/\\]src$'

go list ./builtin
stdout '^std/builtin$'  # Only the "std" in actual $GOROOT is special, and only its "builtin" is special.

! go list ./bytes
! stderr 'cannot find module providing package'
stderr '^no Go files in '$WORK'[/\\]othergoroot[/\\]src[/\\]bytes$'

! go list ./vendor/golang.org/x/net/http2/hpack
stderr '^without -mod=vendor, directory '$WORK'[/\\]othergoroot[/\\]src[/\\]vendor[/\\]golang.org[/\\]x[/\\]net[/\\]http2[/\\]hpack has no package path$'
```

----------------------------------------

TITLE: Go Module Definition (Root)
DESCRIPTION: Root Go module definition file specifying module name and Go version requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_bzr.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com

go 1.18
```

----------------------------------------

TITLE: Crypto X509 SystemRootsError Method
DESCRIPTION: Implementation of error unwrapping for SystemRootsError type in the crypto/x509 package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
func (SystemRootsError) Unwrap() error
```

----------------------------------------

TITLE: Go Module Definition with Replacements
DESCRIPTION: Defines a Go module with version-specific replacements for split and nested packages. Sets up test environment with local module replacements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_split.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.16

require example.net/split v0.2.0

replace (
	example.net/split v0.1.0 => ./split.1
	example.net/split v0.2.0 => ./split.2
	example.net/split v0.2.1 => ./split.2
	example.net/split v0.3.0 => ./split.3
	example.net/split/nested v0.0.0 => ./nested.0
	example.net/split/nested v0.1.0 => ./nested.1
	example.net/split/nested v0.2.0 => ./nested.2
)
```

----------------------------------------

TITLE: Defining x2 as a Module Without Dependencies - mod
DESCRIPTION: This go.mod file establishes x as a module (version v0.2.0, via replacement), but without any required dependencies. This contrasts with x1 and checks Go's behavior when modules of the same name are at different versions and have different dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_10

LANGUAGE: mod
CODE:
```
module x
go1.13
```

----------------------------------------

TITLE: Testing Quote Functions in Go
DESCRIPTION: Contains unit tests for the Hello, Glass, Go, and Opt functions. It sets the LC_ALL environment variable to 'en' in the init function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.2.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package quote

import (
	"os"
	"testing"
)

func init() {
	os.Setenv("LC_ALL", "en")
}

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory, share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}

func TestOpt(t *testing.T) {
	opt := "If a program is too slow, it must have a loop."
	if out := Opt(); out != opt {
		t.Errorf("Opt() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Go Build Cache Setup and Testing
DESCRIPTION: Shell script that tests the Go build process, verifying compiler and linker execution patterns and build output caching. Sets up a fresh GOCACHE and runs multiple build commands to validate expected behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_link.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off
[short] skip

# Set up fresh GOCACHE.
env GOCACHE=$WORK/gocache
mkdir $GOCACHE

# Building a main package should run the compiler and linker ...
go build -o $devnull -x main.go
stderr '(compile|gccgo)( |\.exe).*main\.go'
stderr '(link|gccgo)( |\.exe)'

# ... and then the linker again ...
go build -o $devnull -x main.go
! stderr '(compile|gccgo)( |\.exe).*main\.go'
stderr '(link|gccgo)( |\.exe)'

# ... but the output binary can serve as a cache.
go build -o main$GOEXE -x main.go
stderr '(link|gccgo)( |\.exe)'
go build -o main$GOEXE -x main.go
! stderr '(link|gccgo)( |\.exe)'
```

----------------------------------------

TITLE: Defining IPC and Semaphore Syscall Constants for Darwin ARM64
DESCRIPTION: Constant definitions for interprocess communication (IPC) and semaphore-related system calls on Darwin ARM64 architecture. These include operations for System V semaphores and POSIX semaphores with their corresponding numeric identifiers.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_105

LANGUAGE: Go
CODE:
```
const SYS_POLL = 230
const SYS_POLL_NOCANCEL = 417
const SYS_SELECT = 93
const SYS_SELECT_NOCANCEL = 407
const SYS_SEMCTL = 254
const SYS_SEMGET = 255
const SYS_SEMOP = 256
const SYS_SEMSYS = 251
const SYS_SEM_CLOSE = 269
const SYS_SEM_DESTROY = 276
const SYS_SEM_GETVALUE = 274
const SYS_SEM_INIT = 275
const SYS_SEM_OPEN = 268
const SYS_SEM_POST = 273
const SYS_SEM_TRYWAIT = 272
const SYS_SEM_UNLINK = 270
const SYS_SEM_WAIT = 271
const SYS_SEM_WAIT_NOCANCEL = 420
```

----------------------------------------

TITLE: Verifying `go list` Accepts Package Paths with '+' (Shell)
DESCRIPTION: This shell snippet tests if the `go list` command correctly handles package paths containing the '+' character. It first restores the main `go.mod` file, fetches a dependency, and then lists a specific package (`example.net/cmd/x++`) which resides within a valid module but has a '+' in its path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path_plus.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# 'go list' accepts package paths with pluses.
cp go.mod.orig go.mod
go get example.net/cmd
go list example.net/cmd/x++
```

----------------------------------------

TITLE: Testing Module with go 1.22 Requirement
DESCRIPTION: Tests how 'go get needgo122' (which requires Go 1.22) uses the earliest 1.22 release when GOTOOLCHAIN=auto is set.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_8

LANGUAGE: shell
CODE:
```
# go get needgo122 (says 'go 1.22') should use 1.22.0, the earliest release we have available
# (ignoring prereleases).
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get rsc.io/needgo122
stderr '^go: rsc.io/needgo122@v0.0.1 requires go >= 1.22 \(running go 1.21; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp go.mod.new go.mod
go get rsc.io/needgo122
stderr '^go: upgraded go 1.1 => 1.22$'
stderr '^go: rsc.io/needgo122@v0.0.1 requires go >= 1.22; switching to go1.22.9$'
! stderr '^go: added toolchain$'
```

----------------------------------------

TITLE: Go Module File for Version 1.23
DESCRIPTION: Defines a Go module file for version 1.23, specifying the module and its dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_vendor.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module example.com/x
go 1.23

require "foo.com/internal/bar" v1.0.0
```

----------------------------------------

TITLE: Direct Dependency Module Definition
DESCRIPTION: Expected go.mod file state after removing the indirect comment.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_nospace.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.net/m

go 1.16

require example.net/x v0.1.0

replace example.net/x v0.1.0 => ./x
```

----------------------------------------

TITLE: Context Validation in Go Fuzzing Tests
DESCRIPTION: Go test file that verifies correct context behavior in fuzzing. It checks that contexts are properly created, not initially canceled, and correctly canceled after test completion using cleanup functions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_context.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package context_fuzz

import (
	"context"
	"errors"
	"testing"
)

func Fuzz(f *testing.F) {
	ctx := f.Context()
	if err := ctx.Err(); err != nil {
		f.Fatalf("expected non-canceled context, got %v", err)
	}

	f.Fuzz(func(t *testing.T, data []byte) {
		innerCtx := t.Context()
		if err := innerCtx.Err(); err != nil {
			t.Fatalf("expected inner test to not inherit canceled context, got %v", err)
		}

		t.Cleanup(func() {
			if !errors.Is(innerCtx.Err(), context.Canceled) {
				t.Fatal("expected context of inner test to be canceled after its fuzz function finished")
			}
		})
	})

	f.Cleanup(func() {
		if !errors.Is(ctx.Err(), context.Canceled) {
			f.Fatal("expected context canceled before cleanup")
		}
	})
}
```

----------------------------------------

TITLE: Shell Test Configuration Commands
DESCRIPTION: Shell commands for configuring and running Go fuzzing tests with various timeout and GOMAXPROCS settings. Includes cache warmup and resource management considerations for 32-bit environments.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_deadline.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
env GOCACHE=$WORK/cache

# Warm up the build cache with GOMAXPROCS unrestricted.
go test -c -o $devnull

# For the fuzzing phase, we reduce GOMAXPROCS to avoid consuming too many
# resources during the test. Ideally this would just free up resources to run
# other parallel tests more quickly, but unfortunately it is actually necessary
# in some 32-bit environments to prevent the fuzzing engine from running out of
# address space (see https://go.dev/issue/65434).
env GOMAXPROCS=2

# The fuzz function should be able to detect whether -timeout
# was set with T.Deadline. Note there is no F.Deadline, and
# there is no timeout while fuzzing, even if -fuzztime is set.
go test -run=FuzzDeadline -wantdeadline=true # -timeout defaults to 10m
go test -run=FuzzDeadline -timeout=0 -wantdeadline=false
! go test -run=FuzzDeadline -timeout=1s -wantdeadline=false
go test -run=FuzzDeadline -timeout=1s -wantdeadline=true
go test -fuzz=FuzzDeadline -timeout=0 -fuzztime=1s -wantdeadline=false
go test -fuzz=FuzzDeadline -timeout=0 -fuzztime=100x -wantdeadline=false
```

----------------------------------------

TITLE: Go Implementation with Blank-Named Functions
DESCRIPTION: Implementation file containing a type X with a Print method and unreachable code in blank-named functions (_). These blank-named functions are not counted in coverage calculations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_blank_func_decl.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package coverblank

func _() {
	println("unreachable")
}

type X int

func (x X) Print() {
	println(x)
}

func (x X) _() {
	println("unreachable")
}
```

----------------------------------------

TITLE: Testing Indirect Tag Removal in Go Module
DESCRIPTION: This snippet tests if the indirect tag is removed from a dependency when it becomes directly imported in the code.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_indirect.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
cp $WORK/tmp/uselang.go x.go
go get
grep 'rsc.io/quote v1.5.2$' go.mod
grep 'golang.org/x/text [v0-9a-f\.-]+$' go.mod
```

----------------------------------------

TITLE: Go Module Z v1.0.0 Implementation
DESCRIPTION: Module Z version 1.0.0 implementation that imports module Q v1.0.5. Includes go.mod file with dependency on module Q v1.0.5.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
module example.com/z

go 1.18

require example.com/q v1.0.5
```

LANGUAGE: go
CODE:
```
package z

import _ "example.com/q"
```

----------------------------------------

TITLE: Basic Go Test Function Calling Main
DESCRIPTION: A Go test file (`main_test.go`) for package `main`. It defines a `TestMain` function that takes `*testing.M` as an argument (though it's unused). This `TestMain` function directly calls the package's `main` function, allowing the `go test` command to execute the primary program logic and check its output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cwd_newline.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
-- $WORK/main_test.go --
package main

import "testing"

func TestMain(*testing.M) {
	main()
}
```

----------------------------------------

TITLE: Checking Mod File Annotations with go list
DESCRIPTION: This Go command sequence tests the detection of direct vs. indirect module dependencies. It ensures that the `go list` command correctly reads the 'indirect' annotations from go.mod files. This is vital to verify module dependency accuracy.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_direct_work.txt#2025-04-22_snippet_0

LANGUAGE: Golang
CODE:
```
go list -f '{{.Path}} {{.Indirect}}' -m all
stdout 'example.com/a false'
stdout 'example.com/b false'
stdout 'rsc.io/sampler false'
stdout 'golang.org/x/text true'
stdout 'example.com/c true' # Uses the information in go.mod without checking imports.

# Check that 'go list all' correctly populates "indirect" module annotation.
go list -f '{{.ImportPath}} {{with .Module}}{{.Indirect}}{{end}}' all
stdout 'example.com/a false'
stdout 'example.com/b false'
stdout 'rsc.io/sampler false'
stdout 'golang.org/x/text/language true'
stdout 'example.com/c false'
```

----------------------------------------

TITLE: Testing Various 'go mod' Commands Outside Module
DESCRIPTION: Verifies that various 'go mod' commands fail when executed outside of a module context.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
! go mod graph
stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'

! go mod why -m example.com/version
stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'

! go mod tidy
stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'
! go mod edit -fmt
stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'
! go mod edit -require example.com/version@v1.0.0
stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'
```

----------------------------------------

TITLE: Go Module in '_ignored' Directory
DESCRIPTION: A Go source file placed in a directory with a leading underscore that imports 'rsc.io/quote' to test dependency management in specially named directories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_in_testdata_dir.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package foo

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Updating Module Dependencies in Go
DESCRIPTION: This command attempts to update all module dependencies to their latest versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade_pseudo.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
go get -u
```

----------------------------------------

TITLE: Test2 Module with Dependencies
DESCRIPTION: Secondary module that imports and uses the main test module, including module replacement directive.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue51204.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/test2

go 1.18

replace example.com/test => ../test

require example.com/test v0.0.0-00010101000000-000000000000
```

LANGUAGE: go
CODE:
```
package test2

import (
	"example.com/test"
)

func DoSomething() {
	test.DoSomething()
}
```

----------------------------------------

TITLE: Generating OID from Integer Slices - crypto/x509 - Go
DESCRIPTION: Defines a function OIDFromInts that converts a slice of uint64 integers into an OID type, returning an OID and an error. It requires an appropriate definition for OID within the package and is used for ASN.1 object identifier manipulation. Input: []uint64, Output: (OID, error).
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
func OIDFromInts([]uint64) (OID, error)
```

----------------------------------------

TITLE: Go Get with Long Rationale
DESCRIPTION: This snippet tests the behavior of 'go get' when a module version is retracted with a long rationale. It checks if the output indicates that the message was omitted due to its length.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_6

LANGUAGE: go
CODE:
```
go get example.com/retract/rationale@v1.0.0-long
stderr '^go: warning: example.com/retract/rationale@v1.0.0-long: retracted by module author: \(message omitted: too long\)'
```

----------------------------------------

TITLE: Defining Module 'b' Version 1 in Go
DESCRIPTION: This go.mod file defines module 'b' version 1 and its dependency on module 'e'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module example.net/b

go 1.16

require example.net/e v0.1.0
```

----------------------------------------

TITLE: Creating Initial Commit with Tag
DESCRIPTION: Adds go.mod and main.go files, creates an initial commit, renames the branch to master, and tags it as v1.0.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/commit-after-tag.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
at 2019-07-15T17:16:47-04:00
git add go.mod main.go
git commit -m 'all: add go.mod and main.go'
git branch -m master
git tag v1.0.0
```

----------------------------------------

TITLE: Testing go mod vendor with alternate file
DESCRIPTION: Checks that go mod vendor works with the alternate file and that vendoring is affected by edits to the alternate file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_9

LANGUAGE: shell
CODE:
```
go mod vendor
exists vendor
go mod edit -require rsc.io/quote@v1.5.1
! go list .
go list -mod=mod
rm vendor
```

----------------------------------------

TITLE: External test implementation for main package
DESCRIPTION: External test for the main package that imports the main package and provides tests in a separate package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
package main_test
import "testing"
func TestExternal(*testing.T) {}
```

----------------------------------------

TITLE: Testing Retracted Modules in Vendoring Mode using Go
DESCRIPTION: This snippet tests the behavior of 'go list -retracted' when vendoring is enabled in Go. It expects an error message indicating that 'go list -retracted' cannot be used with vendoring.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
# 'go list -mod\u003dvendor -retracted' reports an error.\ngo mod vendor\n! go list -m -retracted -mod\u003dvendor\nstderr '^go list -retracted cannot be used when vendoring is enabled$'\nrm vendor
```

----------------------------------------

TITLE: Setting GO111MODULE Environment Variable in Go
DESCRIPTION: Sets the GO111MODULE environment variable to 'on' to enable module mode for Go.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Go Package Import Example
DESCRIPTION: Simple Go package that imports rsc.io/quote package as a blank import
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package use

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Referencing Deprecated Go Parser Function
DESCRIPTION: Reference to the ParseDir function in the go/parser package that is being marked as deprecated.
SOURCE: https://github.com/golang/go/blob/master/api/next/71122.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
pkg go/parser, func ParseDir
```

----------------------------------------

TITLE: Testing Go Module Godebug Directives
DESCRIPTION: Tests adding and removing godebug directives with 'go mod edit -godebug' and '-dropgodebug', which allow setting runtime debugging variables in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_8

LANGUAGE: shell
CODE:
```
# go mod edit -godebug
cd $WORK/g
cp go.mod.start go.mod
go mod edit -godebug key=value
cmpenv go.mod go.mod.edit
go mod edit -dropgodebug key2
cmpenv go.mod go.mod.edit
go mod edit -dropgodebug key
cmpenv go.mod go.mod.start
```

----------------------------------------

TITLE: Setting up Go environment and fetching fortune v2 module
DESCRIPTION: Sets the GO111MODULE environment variable to 'on' and fetches the rsc.io/fortune/v2 module using go get.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_versioned.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
[short] skip

go get rsc.io/fortune/v2
```

----------------------------------------

TITLE: Configuring Go Module and Netrc Files
DESCRIPTION: This snippet shows the configuration of the go.mod file and the contents of the netrc files used in the tests. It includes both an empty netrc file and one with valid credentials.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_netrc.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
-- go.mod --
module private.example.com
-- $WORK/empty --
-- $WORK/netrc --
machine vcs-test.golang.org
	login aladdin
	password opensesame
# first one should override this one
machine vcs-test.golang.org
	login aladdin
	password ignored
```

----------------------------------------

TITLE: Netrc Credentials File
DESCRIPTION: A .netrc/.netrc file containing authentication credentials for a test server. This file provides the username and password for basic authentication to protected repositories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/netrc_issue66832.txt#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
machine vcs-test.golang.org
	login aladdin
	password opensesame
```

----------------------------------------

TITLE: Go Source File Importing Indirect Dependency
DESCRIPTION: A Go source file that imports the indirect dependency using a blank identifier.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.1.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package direct

import _ "patch.example.com/indirect"
```

----------------------------------------

TITLE: Go Module File
DESCRIPTION: A simple Go module declaration file that defines the module name as 'paths' and specifies Go 1.14 as the required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module paths

go 1.14
```

----------------------------------------

TITLE: Main Driver Program with Relative Import
DESCRIPTION: Example program demonstrating relative import usage that should fail in module mode
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_issue51125.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import "./mypkg"

func main() {
	mypkg.MyFunc()
}
```

----------------------------------------

TITLE: Module B Implementation
DESCRIPTION: Main implementation file for module b that imports and uses package q
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_irrelevant_dependency.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package b

import (
	"example.com/q"
)

func Foo() {
	q.Q()
}
```

----------------------------------------

TITLE: Go Package Implementation with Test Suffix
DESCRIPTION: A Go package declaration for a package named 'c_test' which is a regular package despite having a test suffix in its name.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
// Package c_test is the non-test package for its import path!
package c_test
```

----------------------------------------

TITLE: Go Package with CGO Import
DESCRIPTION: Go source file demonstrating basic CGO import along with unicode package import. This file is part of package x and shows minimal import usage.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiled_imports.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package x
import "C"
import "unicode" // does not use unsafe, syscall, runtime/cgo, unicode/utf16
```

----------------------------------------

TITLE: Go Workspace Configuration
DESCRIPTION: Defines a Go workspace configuration file that specifies two module paths to be included in the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_install_submodule.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go 1.18

use (
    ./m
    ./m/sub
)
```

----------------------------------------

TITLE: Testing Go Module Retractions with Path Changes
DESCRIPTION: A series of Go commands that test how module retractions are handled, especially when a module has changed its path. The commands check if retractions are properly loaded and warnings are displayed, as well as how upgrade attempts behave when the module path has changed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rename.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# Populate go.sum.
go get

# 'go list -m -retracted' should load retractions, even if the version
# containing retractions has a different module path.
go list -m -retracted -f '{{with .Retracted}}retracted{{end}}' example.com/retract/rename

# 'go list -m -u' should load retractions, too.
go list -m -u -f '{{with .Retracted}}retracted{{end}}' example.com/retract/rename

# 'go get' should warn about the retracted version.
go get
stderr '^go: warning: example.com/retract/rename@v1.0.0-bad: retracted by module author: bad$'

# We can't upgrade, since this latest version has a different module path.
! go get example.com/retract/rename
stderr 'module declares its path as: example.com/retract/newname'
```

----------------------------------------

TITLE: Defining Go Module with go.mod File
DESCRIPTION: Specifies the module name 'rsc.io/panicnil' and sets the Go version requirement to 1.21.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_panicnil_v1.1.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module rsc.io/panicnil
go 1.21
```

----------------------------------------

TITLE: Running Go Mod Tidy with Error
DESCRIPTION: Executes 'go mod tidy' command and expects an error related to a missing package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_added.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
! go mod tidy

stderr '^go: example\.com/m imports\n\texample\.net/added: module example\.net/added@latest found \(v0\.3\.0, replaced by \.\./a1\), but does not contain package example\.net/added$'
```

----------------------------------------

TITLE: Importing Replaced Module zz in x/y (Go)
DESCRIPTION: This Go source file is part of the `x/y` package. It contains a blank import (`import _ "zz"`) for the `zz` package. This import ensures that the Go tool recognizes `zz` as a dependency of the `x/y` module during commands like `go list`, triggering the resolution via the `replace` directive in `x/y/go.mod`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_local_replace.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- x/y/y.go --
package y
import _ "zz"
```

----------------------------------------

TITLE: Test code with go:debug directive for panicnil control
DESCRIPTION: A test file that demonstrates the use of //go:debug directive to set panicnil=1, allowing panic(nil) to actually trigger a panic that can be caught and handled.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildinfo_godebug_issue68053.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
//go:debug panicnil=1
package main_test

import (
	"runtime/debug"
	"testing"
)

func TestFoo(t *testing.T) {
	defer func() {
		t.Fatal(recover())
	}()

	t.Log(debug.ReadBuildInfo())
	panic(nil)
}
```

----------------------------------------

TITLE: Testing Import of 'cmd' Meta-Package in Go
DESCRIPTION: This snippet tests the import of the 'cmd' meta-package in Go. It expects the command to fail and produce a specific error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
! go list -deps ./importcmd
! stderr 'internal error'
stderr '^importcmd[/\\]x.go:3:8: "cmd" is not an importable package; see ''go help packages''$'
```

----------------------------------------

TITLE: Implementation of Package E with Tests Only
DESCRIPTION: Package 'e' containing only tests but no implementation. It imports packages 'a' and 'b' and tests their functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_partial.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package e

import (
	"M/a"
	"M/b"
	"testing"
)

func TestBlah(t *testing.T) {
	if b.BFunc() == 1010101 {
		t.Fatalf("bad")
	}
	a.AFunc()
}
```

----------------------------------------

TITLE: Dependency Package Definition
DESCRIPTION: Empty package declaration for package 'dep'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pattern_work.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package dep
```

----------------------------------------

TITLE: Package w Definition
DESCRIPTION: A simple Go package named w that is a subpackage of z in the test module structure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gobuild_import.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package w
```

----------------------------------------

TITLE: Defining Package 'x/inall' (Go)
DESCRIPTION: Defines the empty package `x/inall` within the `x` module. This package is directly imported by the main module `m` and serves as part of the dependency graph for the `all` pattern.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
-- x/inall/inall.go --
package inall
```

----------------------------------------

TITLE: Attempting Method Definitions on C Types via CGo in Go
DESCRIPTION: This Go code uses CGo to import a C type `T` (defined as `int`). It attempts to define methods `f` and `g` directly on `C.T` and `*C.T`, respectively. These definitions are expected to cause compilation errors as per CGo restrictions (issue #57926). The code also demonstrates a workaround by creating a Go type alias (`Alias = C.T`) and defining methods `h` and `i` on the alias and its pointer, which is permitted.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_badmethod_issue57926.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package a

/*
typedef int T;
*/
import "C"

func (C.T) f() {}
func (recv *C.T) g() {}

// The check is more education than enforcement,
// and is easily defeated using a type alias.
type Alias = C.T
func (Alias) h() {}
func (*Alias) i() {}
```

----------------------------------------

TITLE: Testing Go Module Download With Credentials
DESCRIPTION: Runs 'go mod tidy' and 'go list all' with credentials from a netrc file, expecting successful module downloads.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_auth.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
env NETRC=$WORK/netrc
go mod tidy
go list all
stdout vcs-test.golang.org/auth/or401
stdout vcs-test.golang.org/auth/or404
```

----------------------------------------

TITLE: Go Test File with Formatting Error
DESCRIPTION: This Go test file contains a test function with a formatting error in the Logf call, which is used to demonstrate vet's ability to catch such issues.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p

import "testing"

func Test(t *testing.T) {
	t.Logf("%d") // oops
}
```

----------------------------------------

TITLE: Defining WaitStatus and Standard File Descriptors in Go Syscall Package
DESCRIPTION: The WaitStatus type represents process exit status in the syscall package for Darwin ARM64. The standard file descriptors (Stdin, Stdout, Stderr) are also defined as integer variables.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_213

LANGUAGE: Go
CODE:
```
type WaitStatus uint32

var Stdin int
var Stdout int
var Stderr int
```

----------------------------------------

TITLE: Deprecations in path/filepath package
DESCRIPTION: Lists deprecated function in the path/filepath package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_27

LANGUAGE: Go
CODE:
```
pkg path/filepath, func HasPrefix //deprecated
```

----------------------------------------

TITLE: Testing Go Module and Workspace Version Handling
DESCRIPTION: Shell script that tests Go workspace initialization behavior with different Go versions and toolchain settings. Tests include module creation, workspace initialization, and version compatibility checks.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_init_toolchain.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Create basic modules and work space.
# Note that toolchain lines in modules should be completely ignored.
env TESTGO_VERSION=go1.50
mkdir m1_22_0
go mod init -C m1_22_0
go mod edit -C m1_22_0 -go=1.22.0 -toolchain=go1.99.0

# work init writes the current Go version to the go line
go work init
grep '^go 1.50$' go.work
! grep toolchain go.work

# work init with older modules should leave go 1.50 in the go.work.
rm go.work
go work init ./m1_22_0
grep '^go 1.50$' go.work
! grep toolchain go.work

# work init with newer modules should bump go,
# including updating to a newer toolchain as needed.
# Because work init writes the current toolchain as the go version,
# it writes the bumped go version, not the max of the used modules.
env TESTGO_VERSION=go1.21
env TESTGO_VERSION_SWITCH=switch
rm go.work
env GOTOOLCHAIN=local
! go work init ./m1_22_0
stderr '^go: m1_22_0'${/}'go.mod requires go >= 1.22.0 (running go 1.21; GOTOOLCHAIN=local)$'
env GOTOOLCHAIN=auto
go work init ./m1_22_0
stderr '^go: m1_22_0'${/}'go.mod requires go >= 1.22.0; switching to go1.22.9$'
cat go.work
grep '^go 1.22.9$' go.work
! grep toolchain go.work
```

----------------------------------------

TITLE: Defining Directory Entry Type Constants in Go for Darwin ARM64 CGO
DESCRIPTION: This snippet defines constants for directory entry types used in filesystem operations for the syscall package on Darwin ARM64 with CGO. These constants are used to identify the type of filesystem entries.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_142

LANGUAGE: Go
CODE:
```
const DT_BLK = 6
const DT_CHR = 2
const DT_DIR = 4
const DT_FIFO = 1
const DT_LNK = 10
const DT_REG = 8
const DT_SOCK = 12
const DT_UNKNOWN = 0
const DT_WHT = 14
```

----------------------------------------

TITLE: Simple Go function for floating point operation
DESCRIPTION: This Go function performs a basic floating point operation. It's used in the build tests to verify floating point register usage.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_gomips.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package f

func F(x float64) float64 {
     return x + x
}
```

----------------------------------------

TITLE: Defining Race Condition Test in Go
DESCRIPTION: This snippet defines a test function TestRace that creates a race condition. It spawns a goroutine that modifies a shared variable, demonstrating a typical race condition scenario.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
func TestRace(t *testing.T) {
	for i := 0; i < 10; i++ {
		c := make(chan int)
		x := 1
		go func() {
			x = 2
			c <- 1
		}()
		x = 3
		<-c
		_ = x
	}
}
```

----------------------------------------

TITLE: Defining ReportMetric method for B type in testing package
DESCRIPTION: Declaration of the ReportMetric method for the B type in the testing package. This method allows reporting custom metrics in benchmarks.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_174

LANGUAGE: go
CODE:
```
func (*B) ReportMetric(float64, string)
```

----------------------------------------

TITLE: Submodule Definition File
DESCRIPTION: Go module definition for a submodule named 'example/bar/baz' that requires Go 1.18.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_dot.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example/bar/baz
go 1.18
```

----------------------------------------

TITLE: Defining an Empty Internal Package - Go
DESCRIPTION: This code snippet defines a Go package named 'v' under an 'internal' directory. It acts as a placeholder to test internal package import and access restrictions in the broader Go build environment. There are no exported functions, types, or variables. This package is used solely to test Go's behavior when importing internal packages via various command-line operations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_internal.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package v
```

----------------------------------------

TITLE: Testing Module Import in Go
DESCRIPTION: A test file that imports a package from a custom module path. This file demonstrates how to import packages from replaced module paths defined in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package m

import _ "mysite/myname/mypkg/mydir"
```

----------------------------------------

TITLE: Printing File Modification Time as JSON in Go
DESCRIPTION: This Go program (`mtime`) takes a file path as a command-line argument (os.Args[1]), retrieves the file's modification time using `os.Stat()`, and encodes it as a JSON string to standard output. It exits with an error code 1 if file stats retrieval or JSON encoding fails. This utility helps the main test script verify file timestamps.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue6480.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- mtime/mtime.go --
package main

import (
	"encoding/json"
	"fmt"
	"os"
)

func main() {
	info, err := os.Stat(os.Args[1])
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if err := json.NewEncoder(os.Stdout).Encode(info.ModTime()); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: Command Package B Implementation
DESCRIPTION: Minimal main package implementation for command b.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-newerself.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Go Program for Checking GOROOT Environment
DESCRIPTION: This Go program checks the GOROOT environment variable by executing the 'go env GOROOT' command and comparing the result with an expected value. It handles symlinks and case-insensitive comparisons.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goroot_executable.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

func main() {
	exe := os.Args[1]
	want := os.Args[2]
	cmd := exec.Command(exe, "env", "GOROOT")
	out, err := cmd.CombinedOutput()
	if err != nil {
		fmt.Fprintf(os.Stderr, "%s env GOROOT: %v, %s\n", exe, err, out)
		os.Exit(1)
	}
	goroot, err := filepath.EvalSymlinks(strings.TrimSpace(string(out)))
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	want, err = filepath.EvalSymlinks(want)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if !strings.EqualFold(goroot, want) {
		fmt.Fprintf(os.Stderr, "go env GOROOT:\nhave %s\nwant %s\n", goroot, want)
		os.Exit(1)
	}
	fmt.Fprintf(os.Stderr, "go env GOROOT: %s\n", goroot)

}
```

----------------------------------------

TITLE: Testing GOWORK Variable with go work init
DESCRIPTION: Test script that validates the go work init command behavior with different GOWORK environment variable settings. Tests include checking default location, custom path creation, and handling of existing work files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_init_gowork.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
! exists go.work
go work init
exists go.work

env GOWORK=$GOPATH/src/foo/foo.work
! exists foo/foo.work
go work init
exists foo/foo.work

env GOWORK=
cd foo/bar
! go work init
stderr 'already exists'
```

LANGUAGE: plaintext
CODE:
```
-- foo/dummy.txt --
-- foo/bar/dummy.txt --
```

----------------------------------------

TITLE: Go Module Configuration
DESCRIPTION: Module definition files specifying the module name and dependencies. Requires rsc.io/quote v1.5.2 as a dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_!q!u!o!t!e_v1.5.3-!p!r!e.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
module rsc.io/QUOTE

require rsc.io/quote v1.5.2
```

----------------------------------------

TITLE: Basic Go Module Definition
DESCRIPTION: A minimal go.mod file that defines a module named 'm.test' using Go version 1.16. This file serves as the module definition for a Go project, specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_ignore.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m.test

go 1.16
```

----------------------------------------

TITLE: Syslog Priority Constants and Writer Implementation
DESCRIPTION: Syslog facility and priority constants with associated Writer type for logging to syslog on NetBSD (arm64). Provides methods for different log levels and integration with the Go logging system.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
const LOG_ALERT = 1
const LOG_AUTH = 32
const LOG_AUTHPRIV = 80
const LOG_CRIT = 2
const LOG_CRON = 72
const LOG_DAEMON = 24
const LOG_DEBUG = 7
const LOG_EMERG = 0
const LOG_ERR = 3
const LOG_FTP = 88
const LOG_INFO = 6
const LOG_KERN = 0
const LOG_LOCAL0 = 128
const LOG_LOCAL1 = 136
const LOG_LOCAL2 = 144
const LOG_LOCAL3 = 152
const LOG_LOCAL4 = 160
const LOG_LOCAL5 = 168
const LOG_LOCAL6 = 176
const LOG_LOCAL7 = 184
const LOG_LPR = 48
const LOG_MAIL = 16
const LOG_NEWS = 56
const LOG_NOTICE = 5
const LOG_SYSLOG = 40
const LOG_USER = 8
const LOG_UUCP = 64
const LOG_WARNING = 4
func Dial(string, string, Priority, string) (*Writer, error)
func NewLogger(Priority, int) (*log.Logger, error)
func New(Priority, string) (*Writer, error)
method (*Writer) Alert(string) error
method (*Writer) Close() error
method (*Writer) Crit(string) error
method (*Writer) Debug(string) error
method (*Writer) Emerg(string) error
method (*Writer) Err(string) error
method (*Writer) Info(string) error
method (*Writer) Notice(string) error
method (*Writer) Warning(string) error
method (*Writer) Write([]uint8) (int, error)
type Priority int
type Writer struct
```

----------------------------------------

TITLE: Declaring a Go Module for a Dependency - Go
DESCRIPTION: Defines the module for the dependency 'sub' with a Go version of 1.14, allowing it to take advantage of language features introduced in newer Go releases. This go.mod file enables the main module to reference the dependency and ensures the build system recognizes the dependency as a separate module with its own language version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_mixed.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
-- sub/go.mod --
module m
go 1.14
```

----------------------------------------

TITLE: Module A v1.0.2 Configuration
DESCRIPTION: Go module configuration for example.com/a v1.0.2 with upgraded Go version requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
// this module is technically invalid, since the dep example.com/b has a newer go line than this module,
// but we should still be able to handle it.
module example.com/a
go 1.25

require example.com/b v1.0.2
```

----------------------------------------

TITLE: Testing Go Staleness Detection with File Modifications
DESCRIPTION: Script that tests how the Go command detects package and executable staleness when source files are modified or removed. It specifically tests the behavior with both regular source files and those with build constraints.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_rebuild_removed.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off

# go command should detect package staleness as source file set changes
go install mypkg
! stale mypkg

# z.go was not compiled; removing it should NOT make mypkg stale
rm mypkg/z.go
! stale mypkg

# y.go was compiled; removing it should make mypkg stale
rm mypkg/y.go
stale mypkg

# go command should detect executable staleness too
go install mycmd
! stale mycmd
rm mycmd/z.go
! stale mycmd
rm mycmd/y.go
stale mycmd
```

----------------------------------------

TITLE: Verifying Exit 1 Test Output in Go
DESCRIPTION: This snippet defines a test that exits with status 1. It's used to verify how 'go test -json' reports tests that exit with a failure status without running any actual tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_panic_exit.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package exit1_test

import (
	"os"
	"testing"
)

func TestMain(m *testing.M) {
	os.Exit(1)
}
```

----------------------------------------

TITLE: Module C Configuration (v0.1.0)
DESCRIPTION: Basic configuration for module C version 0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue65363.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.net/c

go 1.18
```

LANGUAGE: go
CODE:
```
package c
```

----------------------------------------

TITLE: Short Deprecated Module Definition
DESCRIPTION: Defines a 'short' Go module with a short single-line deprecation message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
// Deprecated: short
module short

go 1.16
```

----------------------------------------

TITLE: Displaying Git Diff Output for File Addition
DESCRIPTION: This snippet shows the git diff output for adding three new lines to an empty file. The diff indicates that lines 'a', 'b', and 'c' were added to the file.
SOURCE: https://github.com/golang/go/blob/master/src/internal/diff/testdata/allnew.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
diff old new
--- old
+++ new
@@ -0,0 +1,3 @@
+a
+b
+c
```

----------------------------------------

TITLE: Go Module Configuration
DESCRIPTION: Basic Go module configuration file specifying module name and Go version
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_file_path.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com
go 1.13
```

----------------------------------------

TITLE: Configuring Go Module Environment in Shell
DESCRIPTION: Sets environment variables for Go modules and a misconfigured sum database proxy. This setup is used to test error handling in module downloads.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_json.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
env GOSUMDB=$sumdb' '$proxy/sumdb-wrong
```

----------------------------------------

TITLE: Go Module JSON with Retraction Rationales
DESCRIPTION: Shows the JSON representation of a module file with retraction directives that include rationales. The rationales appear as fields in the JSON structure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_14

LANGUAGE: json
CODE:
```
{
	"Module": {
		"Path": "x.x/y/z"
	},
	"Go": "1.15",
	"Require": null,
	"Exclude": null,
	"Replace": null,
	"Retract": [
		{
			"Low": "v1.0.0",
			"High": "v1.0.0",
			"Rationale": "a"
		},
		{
			"Low": "v1.0.1",
			"High": "v1.0.1",
			"Rationale": "b"
		},
		{
			"Low": "v1.0.2",
			"High": "v1.0.2",
			"Rationale": "c"
		}
	],
	"Tool": null
}
```

----------------------------------------

TITLE: Defining Dependency Module
DESCRIPTION: This Go module definition is for the dependency module used in the vendoring test, specifying its name and Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_issue46867.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.net/m

go 1.17
```

----------------------------------------

TITLE: Retracting Module Versions with Comments in Go
DESCRIPTION: This snippet shows different ways to retract module versions using the 'retract' directive in Go. It includes examples of single version retractions, version ranges, and various styles of comments for providing rationales.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.9.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/retract/rationale

go 1.14

retract (
	v1.0.0-empty

	// short description
	// more
	//
	// detail
	v1.0.0-multiline1 // suffix
	// after not included
)

// short description
// more
//
// detail
retract v1.0.0-multiline2 // suffix

// loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong
retract v1.0.0-long

// Ends with a BEL character. Beep!
retract v1.0.0-unprintable

// block comment
retract (
	v1.0.0-block

	// inner comment
	v1.0.0-blockwithcomment
)

retract (
	[v1.0.0-order, v1.0.0-order] // degenerate range
	v1.0.0-order // single version

	v1.0.1-order // single version
	[v1.0.1-order, v1.0.1-order] // degenerate range
)
```

----------------------------------------

TITLE: Gofmt Formatted Reference Links
DESCRIPTION: Shows the gofmt-processed version of the markdown content with reference links reorganized to the bottom.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link5.txt#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
See the [Go home page] and the [pkg
site].

They're really great!

[Go home page]: https://go.dev/
[pkg site]: https://pkg.go.dev

[Go home page]: https://duplicate.ignored
```

----------------------------------------

TITLE: Testing Go Mod Vendor with Absolute Paths
DESCRIPTION: This snippet tests the 'go mod vendor' command with absolute paths for the vendor directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_7

LANGUAGE: shell
CODE:
```
# 'go mod vendor' should work with absolute paths as well
go mod vendor -v -o $WORK/tmp/absolute-vendor-dir
exists $WORK/tmp/absolute-vendor-dir/modules.txt

[short] stop
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module declaration file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/cmd

go 1.16
```

----------------------------------------

TITLE: Setting Old Go Version and Executing Go List
DESCRIPTION: Sets an old Go version (1.16) in go.mod and runs 'go list' command, then updates to a newer version (1.20) and runs 'go list' again.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/old_tidy_toolchain.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go mod edit -go=1.16
go list

go mod edit -go=1.20
go list
```

----------------------------------------

TITLE: Implementing HTTP Method Constant in Go
DESCRIPTION: The 'd.go' file defines a package 'd' and uses the 'net/http' package to set a constant 'd' to the value of 'GET'. It provides a function 'Get' that returns this constant, demonstrating a simple exported function returning a constant value.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/load_test_pkg_err.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- d.go --
package d

import "net/http"

const d = http.MethodGet
func Get() string { return d; }
```

----------------------------------------

TITLE: Overlay Replacement for go.sum - JSON
DESCRIPTION: This JSON configuration snippet is used to replace the go.sum file with a corrected version in a Go project overlay. Overlays are useful for testing and manipulating module dependencies without altering the original files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_overlay.txt#2025-04-22_snippet_2

LANGUAGE: JSON
CODE:
```
{
	"Replace": {
		"go.sum": "../../../overlay/overlay-sum-used-correct-sums"
	}
}
```

----------------------------------------

TITLE: Go Package Importing Standard Library Internal Package
DESCRIPTION: Defines a Go package `fromstd` that attempts to import `internal/testenv` from the standard library. This is used to test the rule preventing modules from importing standard library internal packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_17

LANGUAGE: go
CODE:
```
-- fromstd/useinternal.go --
package fromstd
import _ "internal/testenv"
```

----------------------------------------

TITLE: Windows Syscall Functions Deprecation and Addition
DESCRIPTION: Documents deprecated syscall functions for Windows platforms (386 and amd64) and introduces the new SyscallN function. The SyscallN function provides a more flexible approach for making system calls with variable arguments.
SOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
func SyscallN(uintptr, ...uintptr) (uintptr, uintptr, Errno)
```

----------------------------------------

TITLE: Querying 'latest' Module Version (Pseudo-versions Only Test)
DESCRIPTION: Executes 'go list -m' to retrieve metadata for the 'latest' version of the 'dmitri.shuralyov.com/test/modtest3' module using the 'tinyproxy' configured in the previous step. This tests how 'latest' is resolved when the proxy only offers pseudo-versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_7

LANGUAGE: shell
CODE:
```
go list -m -f '{{.Path}} {{.Version}} {{.Time.Format "2006-01-02"}}' dmitri.shuralyov.com/test/modtest3@latest
```

----------------------------------------

TITLE: Platform-Specific Go File
DESCRIPTION: Go source file with Windows build constraint.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fmt_load_errors.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// +build windows

package x
```

----------------------------------------

TITLE: Downloading Go Modules from proxy.golang.org
DESCRIPTION: This snippet tests downloading Go modules from proxy.golang.org. It cleans the module cache, sets GOPROXY to use the proxy, and then uses 'go list' commands to download module files and source code.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_golang.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go clean -modcache
env GOSUMDB=sum.golang.org
env GOPROXY=https://proxy.golang.org,direct

go list -x -m all  # Download go.mod files.
go list -x -deps rsc.io/quote  # Download module source.

cmp go.sum saved.sum
```

----------------------------------------

TITLE: Testing Quote Functions in Go
DESCRIPTION: Implements test cases for the Hello, Glass, Go, and Opt functions. It sets the 'LC_ALL' environment variable to 'en' and checks if the functions return the expected quotes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v2.0.0.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package quote

import (
	"os"
	"testing"
)

func init() {
	os.Setenv("LC_ALL", "en")
}

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory, share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}

func TestOpt(t *testing.T) {
	opt := "If a program is too slow, it must have a loop."
	if out := Opt(); out != opt {
		t.Errorf("Opt() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Testing Localized Greetings in Go
DESCRIPTION: Test suite for the Hello function that verifies correct language-specific greeting responses based on provided language preferences.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.99.99.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
var helloTests = []struct {
    prefs []language.Tag
    text  string
}{
    {
        []language.Tag{language.Make("en-US"), language.Make("fr")},
        "Hello, world.",
    },
    {
        []language.Tag{language.Make("fr"), language.Make("en-US")},
        "Bonjour le monde.",
    },
}

func TestHello(t *testing.T) {
    for _, tt := range helloTests {
        text := Hello(tt.prefs...)
        if text != tt.text {
            t.Errorf("Hello(%v) = %q, want %q", tt.prefs, text, tt.text)
        }
    }
}
```

----------------------------------------

TITLE: Language Testing Implementation
DESCRIPTION: Test cases for verifying correct language selection and text output based on language preferences
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.1.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package sampler

import (
	"testing"

	"golang.org/x/text/language"
)

var helloTests = []struct {
	prefs []language.Tag
	text  string
}{
	{
		[]language.Tag{language.Make("en-US"), language.Make("fr")},
		"Hello, world.",
	},
	{
		[]language.Tag{language.Make("fr"), language.Make("en-US")},
		"Bonjour le monde.",
	},
}

func TestHello(t *testing.T) {
	for _, tt := range helloTests {
		text := Hello(tt.prefs...)
		if text != tt.text {
			t.Errorf("Hello(%v) = %q, want %q", tt.prefs, text, tt.text)
		}
	}
}
```

----------------------------------------

TITLE: Defining Full Module Replacement in go.mod - Go
DESCRIPTION: This go.mod file defines a Go module (m) that requires example.com/deprecated/a v1.0.0, and replaces all versions of this dependency with example.com/deprecated/b v1.0.0. It requires Go 1.17 and expects the corresponding version of the replacement to be present. This setup is used to test how module replacement affects deprecation messaging in the Go toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_deprecated_replace.txt#2025-04-22_snippet_1

LANGUAGE: go.mod
CODE:
```
module m

go 1.17

require example.com/deprecated/a v1.0.0

replace example.com/deprecated/a => example.com/deprecated/b v1.0.0
```

----------------------------------------

TITLE: Testing Cross-Package Function Usage in Go
DESCRIPTION: This Go test file defines a test package (p1_test) for p1, importing both the p2 package from the same module and the testing package. It contains a Test function that calls p2.F(), ensuring that p2's code is exercised during p1's tests. Requires the underlying package structure in place, Go's standard testing library, and module coverdep2. Expects no input parameters; the output depends on whether the covered code executes successfully.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dep_loop.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package p1_test

import (
	"coverdep2/p2"
	"testing"
)

func Test(t *testing.T) {
	p2.F()
}
```

----------------------------------------

TITLE: Running Go Get Command for Module Resolution Test
DESCRIPTION: Executes 'go get' command with verbose output to test module resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_direct.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go get -v
```

----------------------------------------

TITLE: Declaring Package and Constant in Go
DESCRIPTION: Defines a Go package named 'breaker' and declares a constant 'X' with a value of 1. This forms the core functionality of the rsc.io/breaker module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_breaker_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package breaker

const X = 1
```

----------------------------------------

TITLE: Module Checksum Configuration - A Only
DESCRIPTION: go.sum entries with complete checksums for module A and only build list entry for module B
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_ambiguous.txt#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
example.com/ambiguous/a v1.0.0 h1:pGZhTXy6+titE2rNfwHwJykSjXDR4plO52PfZrBM0T8=
example.com/ambiguous/a v1.0.0/go.mod h1:TrBl/3xTPFJ2gmMIYz53h2gkNtg0dokszEMuyS1QEb0=
example.com/ambiguous/a/b v0.0.0-empty/go.mod h1:MajJq5jPEBnnXP+NTWIeXX7kwaPS1sbVEJdooTmsePQ=
```

----------------------------------------

TITLE: Package B Module Definition
DESCRIPTION: Module definition and implementation for example.net/b package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patch.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.net/b

go 1.16
```

LANGUAGE: go
CODE:
```
package b
```

----------------------------------------

TITLE: Implementing Cgo Functions with External C References
DESCRIPTION: Defines Cgo functions F and G that call external C functions f and g respectively.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_deps.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package cgo

// extern void f(void);
// extern void g(void);
import "C"

func F() {
	C.f()
}

func G() {
	C.g()
}
```

----------------------------------------

TITLE: Minimal Go Program for Linker Test
DESCRIPTION: Minimal Go program with empty main function used as test input for the linker crash test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/linkname.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main; func main() {}
```

----------------------------------------

TITLE: Replacing gopkg.in Module with Compatible Version in Go
DESCRIPTION: This snippet demonstrates replacing a gopkg.in module with a compatible version from a different repository. It uses go list to verify the replacement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
cd 4-to-4
go list -m gopkg.in/src-d/go-git.v4
```

----------------------------------------

TITLE: Secondary Package Import
DESCRIPTION: Go package demonstrating import of a module with self-retraction handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package use_self_prev

import _ "example.com/retract/self/prev"
```

----------------------------------------

TITLE: Testing Module Paths with Trailing Dots in Go
DESCRIPTION: This snippet tests that module paths with trailing dots are rejected as invalid import paths. The commands attempt to initialize modules with paths containing trailing dots and expect specific error messages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_invalid_major.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
# module paths with a trailing dot are rejected as invalid import paths
! go mod init example.com/user/repo/v2.
stderr '(?s)^go: malformed module path "example.com/user/repo/v2.": trailing dot in path element$'

! go mod init example.com/user/repo/v2..
stderr '(?s)^go: malformed module path "example.com/user/repo/v2..": trailing dot in path element$'

! go mod init gopkg.in/user/pkg.v.2.
stderr '(?s)^go: malformed module path "gopkg.in/user/pkg.v.2.": trailing dot in path element$'

! go mod init gopkg.in/user/pkg.v.2..
stderr '(?s)^go: malformed module path "gopkg.in/user/pkg.v.2..": trailing dot in path element$'
```

----------------------------------------

TITLE: Defining Expected Error Output for Module Listing (Text)
DESCRIPTION: Specifies the expected standard error output (`stderr`) when `go list -m all` fails after manually requiring `example.com/badchain/a@v1.1.0`. The error message shows the dependency chain (`a` requires `b` requires `c`) leading to the path mismatch error in `example.com/badchain/c@v1.1.0`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_15

LANGUAGE: text
CODE:
```
-- list-expected --
go: example.com/badchain/a@v1.1.0 requires
	example.com/badchain/b@v1.1.0 requires
	example.com/badchain/c@v1.1.0: parsing go.mod:
	module declares its path as: badchain.example.com/c
	        but was required as: example.com/badchain/c
```

----------------------------------------

TITLE: Adding new methods and types to net/netip package
DESCRIPTION: This snippet introduces new methods and types to the net/netip package, including Addr, AddrPort, and Prefix types, along with their associated methods for IP address and network prefix handling.
SOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
pkg net/netip, type Addr struct
pkg net/netip, type AddrPort struct
pkg net/netip, type Prefix struct
pkg net/netip, func AddrFrom16([16]uint8) Addr
pkg net/netip, func AddrFrom4([4]uint8) Addr
pkg net/netip, func AddrFromSlice([]uint8) (Addr, bool)
pkg net/netip, func AddrPortFrom(Addr, uint16) AddrPort
pkg net/netip, method (Addr) AppendTo([]uint8) []uint8
pkg net/netip, method (Addr) As16() [16]uint8
pkg net/netip, method (Addr) As4() [4]uint8
pkg net/netip, method (Addr) AsSlice() []uint8
```

----------------------------------------

TITLE: Adding File System Support to Zip Writer - Go Standard Library - Go
DESCRIPTION: Adds the AddFS(fs.FS) error method to the *Writer type in archive/zip, enabling archival of an entire fs.FS object contents into a zip file. It expects a parameter implementing fs.FS and returns an error if encountered during write. This extends zip file creation to use abstract file systems.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
func (w *Writer) AddFS(fs.FS) error
```

----------------------------------------

TITLE: Deprecations in net packages
DESCRIPTION: Lists deprecated struct fields, methods, types, and variables in net packages.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_25

LANGUAGE: Go
CODE:
```
pkg net, type Dialer struct, Cancel //deprecated
pkg net, type Dialer struct, DualStack //deprecated
pkg net/http, method (*Transport) CancelRequest //deprecated
pkg net/http, type CloseNotifier //deprecated
pkg net/http, type ProtocolError //deprecated
pkg net/http, type Request struct, Cancel //deprecated
pkg net/http, type Transport struct, Dial //deprecated
pkg net/http, type Transport struct, DialTLS //deprecated
pkg net/http, var ErrHeaderTooLong //deprecated
pkg net/http, var ErrMissingContentLength //deprecated
pkg net/http, var ErrShortBody //deprecated
pkg net/http, var ErrUnexpectedTrailer //deprecated
pkg net/http, var ErrWriteAfterFlush //deprecated
pkg net/http/httptest, type ResponseRecorder struct, HeaderMap //deprecated
pkg net/http/httputil, func NewClientConn //deprecated
pkg net/http/httputil, func NewProxyClientConn //deprecated
pkg net/http/httputil, func NewServerConn //deprecated
pkg net/http/httputil, type ClientConn //deprecated
pkg net/http/httputil, type ServerConn //deprecated
pkg net/http/httputil, var ErrClosed //deprecated
pkg net/http/httputil, var ErrPersistEOF //deprecated
pkg net/http/httputil, var ErrPipeline //deprecated
```

----------------------------------------

TITLE: Alternative Quote Module Definition
DESCRIPTION: Go module file for the local implementation of not-rsc.io/quote/v3 which specifies its module name.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module not-rsc.io/quote/v3
```

----------------------------------------

TITLE: TLS Dial Hook for HTTP Transport - net/http Package - Go
DESCRIPTION: Adds the DialTLS field (function) to the http.Transport struct, allowing custom TLS dialing during HTTPS connections. Accepts network address arguments, returns (net.Conn, error). Key for advanced users needing to intercept, wrap, or monitor transport security in HTTP clients; requires net package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_18

LANGUAGE: Go
CODE:
```
type Transport struct {
    DialTLS func(string, string) (net.Conn, error)
    // ... other fields
}
```

----------------------------------------

TITLE: Testing Invalid Go Build Flag (-gcflags) Handling in Shell
DESCRIPTION: This shell script attempts to execute the Go build command with an invalid garbage collector flag ('-c 0'). The initial '!' signifies that the command is expected to fail, and the subsequent 'stderr' line verifies that the compiler correctly reports an error message indicating that the '-c' flag must be at least 1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_gcflags_order.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
! go build -gcflags='-c 0'
stderr 'compile: -c must be at least 1, got 0'
```

----------------------------------------

TITLE: Defining Go Module Path in go.mod - go.mod File
DESCRIPTION: This snippet repeats the declaration of the Go module path 'golang.org/toolchain', which serves to establish the module identity within the standard go.mod configuration file. Go expects the first non-comment line of a go.mod to be the module path, enabling package resolution and build tooling to operate within the correct scope. No other configuration options are included in this minimal example.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.3.linux-amd64.txt#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: Defining Main Module Dependencies in Go
DESCRIPTION: This go.mod file for the main module 'm' defines its dependencies and sets up local replacements for different versions of modules 'a', 'b', and 'c'. It's used to create a controlled environment for testing dependency resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue56494.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module m

go 1.19

require (
	a v0.1.0
	b v0.1.0
	c v0.1.0
)

replace (
	a v0.1.0 => ./a1
	a v0.2.0 => ./a2
	a v0.3.0 => ./a3
	b v0.1.0 => ./b1
	b v0.2.0 => ./b2
	c v0.1.0 => ./c1
	c v0.2.0 => ./c2
)
```

----------------------------------------

TITLE: Type Aliasing Utilities in go/types - Go
DESCRIPTION: The go/types package adds support for type alias objects via NewAlias, Unalias, and new methods on *Alias. Allows creating aliases to type names, query for underlying/object, and get string representations. Supports type analysis and manipulation of Go types programmatically.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_13

LANGUAGE: Go
CODE:
```
func NewAlias(obj *TypeName, typ Type) *Alias
func Unalias(typ Type) Type
func (a *Alias) Obj() *TypeName
func (a *Alias) String() string
func (a *Alias) Underlying() Type
type Alias struct
```

----------------------------------------

TITLE: Windows-specific I/O Error Simulation Implementation
DESCRIPTION: Platform-specific code for Windows that sends garbage data to the fuzzing coordinator. It parses handle values from an environment variable and writes invalid data to simulate communication errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_io_error.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package io_error

import (
	"fmt"
	"os"
	"testing"
)

func sendGarbageToCoordinator(tb testing.TB) {
	v := os.Getenv("GO_TEST_FUZZ_WORKER_HANDLES")
	var fuzzInFD, fuzzOutFD uintptr
	if _, err := fmt.Sscanf(v, "%x,%x", &fuzzInFD, &fuzzOutFD); err != nil {
		tb.Fatalf("parsing GO_TEST_FUZZ_WORKER_HANDLES: %v", err)
	}
	f := os.NewFile(fuzzOutFD, "fuzz_out")
	if _, err := f.Write([]byte("!!"))); err != nil {
		tb.Fatalf("writing fuzz_out: %v", err)
	}
}
```

----------------------------------------

TITLE: Reporting Compiled-in GODEBUG Defaults (Go Command)
DESCRIPTION: This `go list` command uses a format string to display the default GODEBUG settings that will be compiled into a specific main package. It reports settings that differ from the base Go toolchain defaults, incorporating the effective Go version, `go.mod`/`go.work` settings, and `//go:debug` directives present in the package source.
SOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#_snippet_0

LANGUAGE: Go Command
CODE:
```
go list -f '{{.DefaultGODEBUG}}' my/main/package
```

----------------------------------------

TITLE: Reporting Multiple Packages in Directory - go/build Package - Go
DESCRIPTION: Introduces MultiplePackageError for go/build, reporting errors when a directory contains multiple Go packages. Adds type, struct fields, and an Error() method to encapsulate and describe conflicts. Fields include Dir (string), Files ([]string), and Packages ([]string); the Error() method provides a formatted error message for user diagnostics.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_11

LANGUAGE: Go
CODE:
```
type MultiplePackageError struct {
    Dir string
    Files []string
    Packages []string
}
method (*MultiplePackageError) Error() string
```

----------------------------------------

TITLE: Providing Module Version Information (JSON)
DESCRIPTION: This JSON object contains metadata for the 'example.com/notags' module, specifically its pseudo-version derived from a commit ('v0.0.0-20190507143103-cc8cbe209b64') and the timestamp of that commit. This format is used by Go tools to represent versions when no explicit tag is available.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_notags_v0.0.0-20190507143103-cc8cbe209b64.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
-- .info --
{"Version":"v0.0.0-20190507143103-cc8cbe209b64","Time":"2019-05-07T07:31:03-07:00"}
```

----------------------------------------

TITLE: Declaring a Package with Duplicate Path - Go
DESCRIPTION: Defines the package 'pkg', existing in both the root and nested module at version v0.1.0, as documented in the comments. This file is the main content of the ambiguous package and is used to test the Go module system's handling of duplicate package paths. No functions or variables are defined; only the package clause and informative comments are present.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_v0.1.0.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
// Package pkg exists in both example.net/ambiguous v0.1.0\n// and example.net/ambiguous/nested v0.1.0\npackage pkg
```

----------------------------------------

TITLE: Event Action Constants in Go Syscall Package for Darwin ARM64
DESCRIPTION: Event action constants for kqueue/kevent syscalls that specify actions to take on events. These flags control how events are registered, enabled, disabled, and processed in the kernel event queue system.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_148

LANGUAGE: Go
CODE:
```
const EV_ADD = 1
const EV_ADD ideal-int
const EV_CLEAR = 32
const EV_CLEAR ideal-int
const EV_DELETE = 2
const EV_DELETE ideal-int
const EV_DISABLE = 8
const EV_DISABLE ideal-int
const EV_DISPATCH = 128
const EV_DISPATCH ideal-int
const EV_ENABLE = 4
const EV_ENABLE ideal-int
const EV_EOF = 32768
const EV_EOF ideal-int
const EV_ERROR = 16384
const EV_ERROR ideal-int
const EV_FLAG0 = 4096
const EV_FLAG0 ideal-int
const EV_FLAG1 = 8192
```

----------------------------------------

TITLE: Testing go mod init with alternate file
DESCRIPTION: Initializes a new module using go mod init and verifies that the alternate file is created and contains the correct module name.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go mod init example.com/m
grep example.com/m go.alt.mod
```

----------------------------------------

TITLE: Go Module Definition with Version Retraction
DESCRIPTION: Module definition file declaring the module path, Go version requirement, and version retraction directive.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.9.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/cmd

go 1.16

// this is a bad version
retract v1.9.0
```

----------------------------------------

TITLE: Go 1.16 Module File for Testing
DESCRIPTION: A Go module file specifically for testing compatibility with Go 1.16, which includes replacements to local directories for simulating dependency behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module outside

go 1.16

replace (
	example.com/m => ../
	example.net/deleted v0.1.0 => ../d1
	example.net/deleted v0.2.0 => ../d2
	example.net/lazy v0.1.0 => ../lazy
	example.net/pruned v0.1.0 => ../pruned
)

require example.com/m v0.1.0
```

----------------------------------------

TITLE: Configuring Environment and Running Go List - Shell
DESCRIPTION: This shell snippet clears the HOME and GOPATH environment variables using the 'env' command, then runs 'go list -deps main.go' to ensure dependencies are listed correctly despite the absence of these variables. It expects a standard output containing only 'io'. Required dependencies are the system Go installation and a shell environment. Inputs are commands for environment manipulation, and output is evaluated by matching stdout. Limitations include OS-dependent behavior and presumption of Go toolchain presence.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_no_gopath.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env HOME=''
env home=''
env GOPATH=''

go list -deps main.go
stdout '^io$'
```

----------------------------------------

TITLE: Testing Go Module Replacement Without Requirement
DESCRIPTION: This script initializes a new Go module, adds a replacement for a non-existent module, and then verifies that attempting to install the module fails without suggesting to add it as a requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_install_hint.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go mod init m
go mod edit -replace=github.com/notrequired@v0.5.0=github.com/doesnotexist@v0.5.0
! go install github.com/notrequired
! stderr 'to add it:'
```

----------------------------------------

TITLE: Defining Go File with Non-Existent Import
DESCRIPTION: This snippet defines a Go file that imports a non-existent package 'x', which will cause a compilation error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_setup_error.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package bad

import "x"
```

----------------------------------------

TITLE: Testing Non-Zero Exit Status in Go Test
DESCRIPTION: A Go test that explicitly calls os.Exit(1) which will cause 'go test' to fail but without panic, as non-zero exits are considered normal failures.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_exit.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package one

import (
	"os"
	"testing"
)

func TestExitOne(t *testing.T) {
	os.Exit(1)
}
```

----------------------------------------

TITLE: Testing .netrc and _netrc Support on Windows in Go
DESCRIPTION: A test script that verifies both .netrc and _netrc file formats work for authentication on Windows. It tests access to private repositories with and without credentials to confirm proper authentication behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/netrc_issue66832.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# This test ensures .netrc and _netrc are both supported on windows.
# See golang.org/issue/66832

[!GOOS:windows] skip
[short] skip

env GOPROXY=direct
env GOSUMDB=off
mkdir $WORK\home
env USERPROFILE=$WORK\home

# Make sure _netrc works.
cp netrc_file $WORK\home\_netrc
cp go.mod.orig go.mod
go mod tidy
go list all
stdout vcs-test.golang.org/auth/or401
stdout vcs-test.golang.org/auth/or404
rm $WORK\home\_netrc

# Without credentials, downloading a module from a path that requires HTTPS
# basic auth should fail.
cp go.mod.orig go.mod
! go mod tidy
stderr '^\tserver response: ACCESS DENIED, buddy$'
stderr '^\tserver response: File\? What file\?$'

# Make sure .netrc works as a fallback.
cp netrc_file $WORK\home\.netrc
cp go.mod.orig go.mod
go mod tidy
go list all
stdout vcs-test.golang.org/auth/or401
stdout vcs-test.golang.org/auth/or404
```

----------------------------------------

TITLE: Testing Package Join into Parent Module
DESCRIPTION: Tests package resolution when a package is moved into a parent module in a newer version. Verifies backwards compatibility and proper upgrade behavior including wildcard pattern matching.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_moved.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
rm go.mod
go mod init example.com/foo
go get example.com/join/subpkg@v1.0.0
go list -m all
stdout 'example.com/join/subpkg v1.0.0'

go get example.com/join/subpkg/...@v1.1.0

rm go.mod
go mod init example.com/foo
go get example.com/join/subpkg@v1.1.0
go list -m all
stdout 'example.com/join v1.1.0'
```

----------------------------------------

TITLE: Testing Go Module Retraction Behavior
DESCRIPTION: This snippet contains a series of shell commands and Go module operations to test various scenarios involving retracted module versions. It includes tests for upgrading, downgrading, and specific version requests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_retract.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
# 'go get pkg' should not upgrade to a retracted version.
cp go.mod.orig go.mod
go mod edit -require example.com/retract/self/prev@v1.1.0
go get example.com/retract/self/prev
go list -m example.com/retract/self/prev
stdout '^example.com/retract/self/prev v1.1.0$'

# 'go get pkg' should not downgrade from a retracted version when no higher
# version is available.
cp go.mod.orig go.mod
go mod edit -require example.com/retract/self/prev@v1.9.0
go get example.com/retract/self/prev
stderr '^go: warning: example.com/retract/self/prev@v1.9.0: retracted by module author: self$'
stderr '^go: to switch to the latest unretracted version, run:\n\tgo get example.com/retract/self/prev@latest\n$'
go list -m example.com/retract/self/prev
stdout '^example.com/retract/self/prev v1.9.0$'

# 'go get pkg@latest' should downgrade from a retracted version.
cp go.mod.orig go.mod
go mod edit -require example.com/retract/self/prev@v1.9.0
go get example.com/retract/self/prev@latest
go list -m example.com/retract/self/prev
stdout '^example.com/retract/self/prev v1.1.0$'

# 'go get pkg@version' should update to a specific version, even if that
# version is retracted.
cp go.mod.orig go.mod
go get example.com/retract@v1.0.0-bad
stderr '^go: warning: example.com/retract@v1.0.0-bad: retracted by module author: bad$'
go list -m example.com/retract
stdout '^example.com/retract v1.0.0-bad$'

# 'go get -u' should not downgrade from a retracted version when no higher
# version is available.
cp go.mod.orig go.mod
go mod edit -require example.com/retract/self/prev@v1.9.0
go get -u ./use
stderr '^go: warning: example.com/retract/self/prev@v1.9.0: retracted by module author: self$'
go list -m example.com/retract/self/prev
stdout '^example.com/retract/self/prev v1.9.0$'

# 'go get' should warn if a module needed to build named packages is retracted.
# 'go get' should not warn about unrelated modules.
go get ./empty
! stderr retracted
go get ./use
stderr '^go: warning: example.com/retract/self/prev@v1.9.0: retracted by module author: self$'
```

----------------------------------------

TITLE: Socket and File Operation Functions for NetBSD ARM64
DESCRIPTION: Function signatures for socket and file operations in NetBSD on ARM64. These functions provide interfaces to system calls for network communication, file handling, and process management.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_157

LANGUAGE: Go
CODE:
```
func Accept4(int, int) (int, Sockaddr, error)
func Accept(int) (int, Sockaddr, error)
func Access(string, uint32) error
func Adjtime(*Timeval, *Timeval) error
func Bind(int, Sockaddr) error
func Close(int) error
func CloseOnExec(int)
func CmsgLen(int) int
func CmsgSpace(int) int
func Connect(int, Sockaddr) error
func Dup2(int, int) error
func Dup(int) (int, error)
func Fchdir(int) error
func Fchflags(int, int) error
func Fchmod(int, uint32) error
func Fchown(int, int, int) error
func FcntlFlock(uintptr, int, *Flock_t) error
func Flock(int, int) error
```

----------------------------------------

TITLE: Defining Dependency Module 'a' with Circular Dependency in Go
DESCRIPTION: This go.mod file for module 'example.net/a' requires 'example.net/m v0.1.0', creating a circular dependency for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue48511.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
module example.net/a

go 1.16

require example.net/m v0.1.0
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Minimal Go module definition file declaring module name 'test'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gomod_in_gopath.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module test
```

----------------------------------------

TITLE: Parallel Fuzzing Test with Race Detection in Go
DESCRIPTION: A Go test file that defines a fuzzing function with parallel test execution. It adds 100 seed values and uses parallel execution to test race detection.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_test_race.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package race

import "testing"

func FuzzRace(f *testing.F) {
	for i := 0; i < 100; i++ {
		f.Add(i)
	}

	f.Fuzz(func(t *testing.T, i int) {
		t.Parallel()
	})
}
```

----------------------------------------

TITLE: Handling Invalid Go Environment Variable Modifications
DESCRIPTION: This snippet tests the behavior of 'go env -w' when attempting to set invalid or restricted variables. It demonstrates error handling for unknown variables, read-only variables, and variables that can only be set via OS environment.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
# go env -w rejects unknown or bad variables
! go env -w GOGC=off
stderr 'unknown go command variable GOGC'
! go env -w GOEXE=.bat
stderr 'GOEXE cannot be modified'
! go env -w GOVERSION=customversion
stderr 'GOVERSION cannot be modified'
! go env -w GOENV=/env
stderr 'GOENV can only be set using the OS environment'
! go env -w GODEBUG=gctrace=1
stderr 'GODEBUG can only be set using the OS environment'
```

----------------------------------------

TITLE: Importing Dependency in Module 'b' Version 3
DESCRIPTION: This Go file for module 'b' version 3 imports dependency 'd' as a blank import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_8

LANGUAGE: Go
CODE:
```
package b

import _ "example.net/d"
```

----------------------------------------

TITLE: Testing QUOTE Package Functions
DESCRIPTION: Test suite for the QUOTE package that verifies all functions return expected uppercase strings. Sets up environment for consistent testing and includes tests for all exported functions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_!q!u!o!t!e_v1.5.3-!p!r!e.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package QUOTE

import (
	"os"
	"testing"
)

func init() {
	os.Setenv("LC_ALL", "en")
}

func TestHELLO(t *testing.T) {
	hello := "HELLO, WORLD"
	if out := HELLO(); out != hello {
		t.Errorf("HELLO() = %q, want %q", out, hello)
	}
}

func TestGLASS(t *testing.T) {
	glass := "I CAN EAT GLASS AND IT DOESN'T HURT ME."
	if out := GLASS(); out != glass {
		t.Errorf("GLASS() = %q, want %q", out, glass)
	}
}

func TestGO(t *testing.T) {
	go1 := "DON'T COMMUNICATE BY SHARING MEMORY, SHARE MEMORY BY COMMUNICATING."
	if out := GO(); out != go1 {
		t.Errorf("GO() = %q, want %q", out, go1)
	}
}

func TestOPT(t *testing.T) {
	opt := "IF A PROGRAM IS TOO SLOW, IT MUST HAVE A LOOP."
	if out := OPT(); out != opt {
		t.Errorf("OPT() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Asserting Non-Zero Coverage Output (Shell Script Syntax)
DESCRIPTION: Uses test script syntax to assert that the standard error (`stderr`) and standard output (`stdout`) of the preceding `go test` command do *not* contain '0.0%' preceded by a non-digit character. This checks that some level of code coverage was actually measured and reported.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_modes.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
! stderr '[^0-9]0\.0%'
```

LANGUAGE: shell
CODE:
```
! stdout '[^0-9]0\.0%'
```

----------------------------------------

TITLE: Defining a Basic External Test Package in Go - Go
DESCRIPTION: This Go file defines a test function 'Test' in the external test package 'x_test', which imports 'testing'. This setup is used to ensure Go's test discovery properly handles external test packages distinct from the main source package. Requires the Go testing package, a valid Go module, and is invoked during 'go test' flows. No parameters; output is test execution or package recognition in meta tools.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_test.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package x_test
import "testing"
func Test(t *testing.T) {}
```

----------------------------------------

TITLE: Minimal Go Test File for Cache Testing
DESCRIPTION: This Go file provides a minimal test case (`x_test.go`) used by the shell script to exercise the `go test` and `go clean -testcache` commands. It defines an empty `TestMain` function within the `x_test` package, sufficient to trigger test execution and caching mechanisms.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/clean_testcache.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
-- x/x_test.go --
package x_test
import (
    "testing"
)
func TestMain(t *testing.T) {
}
```

----------------------------------------

TITLE: Test package that imports encoding
DESCRIPTION: A Go package in the 'nested' module that imports the standard library 'encoding' package, used to test how the list command handles packages in modules with paths that appear to be nested under the main module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
package useencoding
import _ "encoding"
```

----------------------------------------

TITLE: Calling C Function from Main Go Module (Go)
DESCRIPTION: This Go program, located in the main module (`main`), uses Cgo to call a C function. It includes Cgo directives (`#cgo CFLAGS`) to specify the include path (`../c`) relative to the source file. The `main` function calls the C function `printfile` and flushes standard output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_trimpath_macro.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
package main

// #cgo CFLAGS: -I../c
// #include "stdio.h"
// void printfile();
import "C"

func main() {
    C.printfile()
    C.fflush(C.stdout)
}
```

----------------------------------------

TITLE: Source Code for Package 'c' (Go)
DESCRIPTION: The source code for package `c` within module `c`. It defines a constant `Version` used by `b/y`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
-- c1/c.go --
package c

const Version = "v0.1.0"
```

----------------------------------------

TITLE: Implementing Quote Functions in Go
DESCRIPTION: Main implementation file containing four functions that return different quotes. Includes Hello() for greetings, Glass() for a phrase about glass eating, Go() for a Go programming proverb, and Opt() for an optimization truth.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.3.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

// Hello returns a greeting.
func Hello() string {
	return "Hello, world."
}

// Glass returns a useful phrase for world travelers.
func Glass() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return "I can eat glass and it doesn't hurt me."
}

// Go returns a Go proverb.
func Go() string {
	return "Don't communicate by sharing memory, share memory by communicating."
}

// Opt returns an optimization truth.
func Opt() string {
	// Wisdom from ken.
	return "If a program is too slow, it must have a loop."
}
```

----------------------------------------

TITLE: Implementing File Modification Time Checker in Go
DESCRIPTION: A Go program that reads a filename from a file, retrieves its modification time, and outputs it as JSON. This is used to check the mtime of cgo before and after the test operation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_install_cgo.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"strings"
)

func main() {
	b, err := os.ReadFile(os.Args[1])
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	filename := strings.TrimSpace(string(b))
	info, err := os.Stat(filename)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if err := json.NewEncoder(os.Stdout).Encode(info.ModTime()); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: Writing a Basic Go Unit Test (Go)
DESCRIPTION: This Go test file defines a unit test `TestMumble` for the `Mumble` function in the `main` package. It uses the standard `testing` package, calls `Mumble` with an input of 10, and uses `t.Errorf` to report an error if the returned value is not the expected 42.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_localpkg_filepath.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
-- prog_test.go --
package main

import (
	"testing"
)

func TestMumble(t *testing.T) {
	if x := Mumble(10); x != 42 {
		t.Errorf("Mumble(%d): got %d want %d", 10, x, 42)
	}
}

```

----------------------------------------

TITLE: Implementing ABI Test in Go with C Integration
DESCRIPTION: This Go program imports C functions that use inline assembly to manipulate specific registers. It calls these functions and prints a success message if executed without errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_ppc64_linker_funcs.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main

/*
#cgo CFLAGS: -Os

int foo_fpr() {
        asm volatile(""::":"fr31","fr30","fr29","fr28");
}
int foo_gpr0() {
        asm volatile(""::":"r30","r29","r28");
}
int foo_gpr1() {
        asm volatile(""::":"fr31", "fr30","fr29","fr28","r30","r29","r28");
}
int foo_vr() {
        asm volatile(""::":"v31","v30","v29","v28");
}
*/
import "C"

import "fmt"

func main() {
	C.foo_fpr()
	C.foo_gpr0()
	C.foo_gpr1()
	C.foo_vr()
	fmt.Println("success")
}
```

----------------------------------------

TITLE: File System Statistics Structs for darwin-arm64
DESCRIPTION: Structures used for file system operations and statistics on darwin-arm64, including file metadata (Stat_t) and file system information (Statfs_t).
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_134

LANGUAGE: go
CODE:
```
type Stat_t struct {
	Dev int32
	Mode uint16
	Nlink uint16
	Ino uint64
	Uid uint32
	Gid uint32
	Rdev int32
	Pad_cgo_0 [4]uint8
	Atimespec Timespec
	Mtimespec Timespec
	Ctimespec Timespec
	Birthtimespec Timespec
	Size int64
	Blocks int64
	Blksize int32
	Flags uint32
	Gen uint32
	Lspare int32
	Qspare [2]int64
}

type Statfs_t struct {
	Ownername [1024]int8
	Mntfromname [1024]int8
	Fstypename [16]int8
	Fsid Fsid
	Bsize uint32
	Iosize int32
	Blocks uint64
	Bfree uint64
	Bavail uint64
	Files uint64
	Ffree uint64
	Flags uint32
	Type uint32
	Fssubtype uint32
	Reserved [8]uint32
	Owner uint32
}
```

----------------------------------------

TITLE: Mock GCC Compiler Script (Shell)
DESCRIPTION: This shell script acts as a placeholder for the `gcc` compiler on non-Windows systems. If executed, it writes "ran gcc" to `bug.txt`. The test is designed to ensure this script is *not* run, verifying that `go build` doesn't insecurely execute compilers found relative to the current directory via PATH.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
-- p/gcc --
#!/bin/sh
echo ran gcc >bug.txt
```

----------------------------------------

TITLE: Configuring Go Module with Replace Directives
DESCRIPTION: This go.mod file defines the module and sets up replace directives for different versions of the dependent modules. It also includes an initial require statement for one of the modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence_loop.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example.net/m

go 1.16

replace (
	example.net/w v0.1.0 => ./w1
	example.net/w v0.2.0-pre => ./w2-pre
	example.net/x v0.1.0 => ./x1
	example.net/x v0.2.0-pre => ./x2-pre
	example.net/y v0.1.0 => ./y1
	example.net/y v0.2.0-pre => ./y2-pre
	example.net/z v0.1.0 => ./z1
	example.net/z v0.2.0-pre => ./z2-pre
)

require example.net/w v0.1.0
```

----------------------------------------

TITLE: Expected go.mod After Tidy
DESCRIPTION: The expected go.mod file after running 'go mod tidy' command, showing the upgrade to Go 1.22.0 and additional dependencies resolved during the process.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example

go 1.22.0

require (
	example.net/a v0.1.0
	example.net/b v0.1.0
)

require (
	example.net/c v0.1.0 // indirect
	example.net/d v0.1.0 // indirect
)

replace (
	example.net/a v0.1.0 => ./a1
	example.net/a v0.2.0 => ./a2
	example.net/b v0.1.0 => ./b1
	example.net/c v0.1.0 => ./c1
	example.net/d v0.1.0 => ./d1
	example.net/d v0.2.0 => ./d2
)
```

----------------------------------------

TITLE: Defining Root File System Methods in Go
DESCRIPTION: Defines a set of methods on the Root type for handling filesystem operations like chmod, chown, timestamps, links and renaming. Each method takes a path string and operation-specific parameters, returning an error if the operation fails.
SOURCE: https://github.com/golang/go/blob/master/api/next/67002.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
func (*Root) Chmod(string, fs.FileMode) error
func (*Root) Chown(string, int, int) error
func (*Root) Chtimes(string, time.Time, time.Time) error
func (*Root) Lchown(string, int, int) error
func (*Root) Link(string, string) error
func (*Root) Readlink(string) (string, error)
func (*Root) Rename(string, string) error
func (*Root) Symlink(string, string) error
```

----------------------------------------

TITLE: Configuring Dependency Module with go.mod - Go
DESCRIPTION: This go.mod file sets up the example.com/dependency module specifying module path and Go version, preparing the module for dependency management by downstream modules. No tool or replace directives are present, making it a simple module configuration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_3

LANGUAGE: ini
CODE:
```
module example.com/dependency\n\ngo 1.24\n
```

----------------------------------------

TITLE: Testing GOMODCACHE Impact on Vendored Files in Go
DESCRIPTION: A bash script that tests whether the GOMODCACHE environment variable affects checksums embedded with vendored files. It builds a program twice - once with the default GOMODCACHE and once with a custom location - and compares the embedded module information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache_vendor.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# This test verifies that GOMODCACHE does not affect whether checksums are embedded
# with vendored files.
# See issue #46400
[short] skip 'builds and links a binary twice'
go mod tidy
go mod vendor

go build -mod=vendor
go version -m example$GOEXE
cp stdout version-m.txt

env GOMODCACHE=$WORK${/}modcache
go build -mod=vendor
go version -m example$GOEXE
cmp stdout version-m.txt
```

----------------------------------------

TITLE: Setting Up Go Module Test Environment - Shell
DESCRIPTION: Configures environment variables and invokes the Go build process to test module compatibility scenarios. Requires Go installed with module support. The snippet sets GO111MODULE to 'on' to enable module mode, then runs 'go build' to compile the code. It relies on the module and source files present in the directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_mixed.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
# Test that dependencies can use Go language features newer than the
# Go version specified by the main module.

env GO111MODULE=on

go build
```

----------------------------------------

TITLE: Defining Expected Error Output for Main Module Update (Text)
DESCRIPTION: Specifies the expected standard error output (`stderr`) when the `go get -u ./...` command fails due to the module path mismatch in `example.com/badchain/c@v1.1.0`. It indicates the module path declaration mismatch and the subsequent restoration of the older version (`v1.0.0`).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_13

LANGUAGE: text
CODE:
```
-- update-main-expected --
go: example.com/badchain/c@v1.1.0: parsing go.mod:
	module declares its path as: badchain.example.com/c
	        but was required as: example.com/badchain/c
	restoring example.com/badchain/c@v1.0.0
```

----------------------------------------

TITLE: Testing Go Build with Untracked and Modified Files
DESCRIPTION: Verifies that Go build correctly identifies and reports modified status when there are untracked or modified files in the Fossil repository, even if they're not part of the build.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_fossil.txt#2025-04-22_snippet_5

LANGUAGE: Shell
CODE:
```
cp ../../outside/empty.txt .
go install
go version -m $GOBIN/a$GOEXE
stdout '^\tbuild\tvcs=fossil\n'
stdout '^\tbuild\tvcs.modified=true$'
rm empty.txt
rm $GOBIN/a$GOEXE

cp ../../outside/empty.txt ../README
go install
go version -m $GOBIN/a$GOEXE
stdout '^\tbuild\tvcs=fossil\n'
stdout '^\tbuild\tvcs.modified=true$'
exec fossil revert ../README
rm $GOBIN/a$GOEXE
```

----------------------------------------

TITLE: Storing Module Version Information - JSON
DESCRIPTION: This snippet provides metadata about the Go module in JSON format, indicating the current version (v1.0.0). Such files are commonly used by package management tools to track and communicate module version information. No dependencies are required, and the expected input is simply the version string; output is JSON-encoded for machine processing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
-- .info --
{"Version":"v1.0.0"}
```

----------------------------------------

TITLE: Defining Terminal Output Control Constants (O*) in Go for darwin-arm64
DESCRIPTION: Constants for terminal output control flags used with termios interfaces. These constants configure various output processing behaviors including carriage return and line feed handling, character filling, and other terminal output characteristics.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_84

LANGUAGE: Go
CODE:
```
const OCRNL = 16
const OCRNL ideal-int
const OFDEL = 131072
const OFDEL ideal-int
const OFILL = 128
const OFILL ideal-int
const ONLCR = 2
const ONLCR ideal-int
const ONLRET = 64
const ONLRET ideal-int
const ONOCR = 32
const ONOCR ideal-int
const ONOEOT = 8
const ONOEOT ideal-int
const OPOST = 1
const OPOST ideal-int
```

----------------------------------------

TITLE: NetBSD ARM64 Socket Address Structures Definition in Go
DESCRIPTION: Defines raw socket address structures for different address families including Unix, IPv4, IPv6, and datalink. These structures are used for low-level socket operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_94

LANGUAGE: go
CODE:
```
type RawSockaddr struct {
	Family uint8
	Len uint8
	Data [14]int8
}

type RawSockaddrInet4 struct {
	Len uint8
	Family uint8
	Zero [8]int8
}

type RawSockaddrInet6 struct {
	Len uint8
	Family uint8
}

type RawSockaddrUnix struct {
	Len uint8
	Family uint8
	Path [104]int8
}

type RawSockaddrDatalink struct {
	Len uint8
	Family uint8
	Index uint16
	Type uint8
	Nlen uint8
	Alen uint8
	Slen uint8
	Data [12]int8
}

type RawSockaddrAny struct {
	Pad [92]int8
}
```

----------------------------------------

TITLE: Executing Go Test Script for Issue #10500
DESCRIPTION: A shell script that installs custom utilities, checks the mtime of cgo before and after running 'go test -race -i', and compares the timestamps.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_install_cgo.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GOBIN=$WORK/bin
go install m/mtime m/sametime

go tool -n cgo
cp stdout cgopath.txt
exec $GOBIN/mtime cgopath.txt # get the mtime of the file whose name is in cgopath.txt
cp stdout cgotime_before.txt

 # For this test, we don't actually care whether 'go test -race -i' succeeds.
 # It may fail if GOROOT is read-only (perhaps it was installed as root).
 # We only care that it does not overwrite cmd/cgo regardless.
? go test -race -i runtime/race

exec $GOBIN/mtime cgopath.txt # get the mtime of the file whose name is in cgopath.txt
cp stdout cgotime_after.txt
exec $GOBIN/sametime cgotime_before.txt cgotime_after.txt
```

----------------------------------------

TITLE: File Position Accessors - go/token Package - Go
DESCRIPTION: Adds PositionFor methods to File and FileSet types in go/token. These accessors map a token position to a Position struct, optionally adjusting based on relativity. Useful for editors, linters, and tooling that require precise source mapping; input is a Pos (token position), and a boolean indicating relativity.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_12

LANGUAGE: Go
CODE:
```
method (*File) PositionFor(Pos, bool) Position
method (*FileSet) PositionFor(Pos, bool) Position
```

----------------------------------------

TITLE: Command-line Argument Parsing Authenticator in Go
DESCRIPTION: A Go program that demonstrates how an authenticator can parse command-line arguments, including those with spaces. It validates that the arguments are correctly passed and then provides authentication credentials for vcs-test.golang.org.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_userauth.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

import(
	"flag"
	"fmt"
	"log"
)

func main() {
	arg1 := flag.String("arg1", "", "")
	flag.Parse()
	if *arg1 != "value with spaces" {
		log.Fatal("argument with spaces does not work")
	}
	fmt.Printf("https://vcs-test.golang.org\n\nAuthorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l\n\n")
}
```

----------------------------------------

TITLE: Process Management Functions in syscall Package for NetBSD ARM64
DESCRIPTION: These functions provide process control operations including process creation, termination, priority management, and resource limits. They also handle process groups and session management.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_76

LANGUAGE: Go
CODE:
```
func Kill(int, Signal) error
func Getpgid(int) (int, error)
func Getpgrp() int
func Getpriority(int, int) (int, error)
func Getrlimit(int, *Rlimit) error
func Getrusage(int, *Rusage) error
func Getsid(int) (int, error)
func Setpgid(int, int) error
func Setpriority(int, int, int) error
func Setrlimit(int, *Rlimit) error
func Setsid() (int, error)
func Wait4(int, *WaitStatus, int, *Rusage) (int, error)
```

----------------------------------------

TITLE: Testing GOROOT Package Resolution
DESCRIPTION: Tests how packages within GOROOT are resolved, with special handling for pseudo-packages like 'builtin'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
# Packages within GOROOT should resolve as in any other module,
# except that -mod=vendor is implied by default.
cd $GOROOT/src
! go list .
stderr '^no Go files in '$GOROOT'[/\\]src$'

! go list ./builtin
stderr '^"builtin" is a pseudo-package, not an importable package$'

! go list ./debug
! stderr 'cannot find module providing package'
stderr '^no Go files in '$GOROOT'[/\\]src[/\\]debug$'

! go list ./golang.org/x/tools/cmd/goimports
! stderr 'cannot find module providing package'
stderr '^stat '$GOROOT'[/\\]src[/\\]golang.org[/\\]x[/\\]tools[/\\]cmd[/\\]goimports: directory not found'

go list ./vendor/golang.org/x/net/http2/hpack
stdout '^golang.org/x/net/http2/hpack$'
```

----------------------------------------

TITLE: Defining Test Dependency for Package 'x/inall' (Go)
DESCRIPTION: Defines a test file for package `x/inall` (using the `inall_test` naming convention). It imports `x/inall/fromtestinall` using a blank identifier, establishing a test-only dependency within the `x` module that should be picked up by `go list -deps all`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
-- x/inall/inall_test.go --
package inall_test

import _ "x/inall/fromtestinall"
```

----------------------------------------

TITLE: Importing Non-existent Package
DESCRIPTION: This Go file imports a non-existent package 'nonexistent.rsc.io' to test error handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_domain.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
package usenonexistent
import _ "nonexistent.rsc.io" // domain does not exist
```

----------------------------------------

TITLE: Basic Go Module Fetch Test
DESCRIPTION: Tests basic module fetching through proxy using rsc.io/fortune module as an example.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_proxy.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
cp go.mod.orig go.mod
go get rsc.io/fortune@v1.0.0
rm $GOPATH/pkg/mod/cache/download/sumdb
rm go.sum
```

----------------------------------------

TITLE: Testing Malformed Module Path
DESCRIPTION: This command tests the `go list` operation on a `go.mod` file with a malformed module path, verifying the error handling and proper error message output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
cd $WORK/gopath/src/badname
! go list .
stderr 'malformed module path'
```

----------------------------------------

TITLE: Downloading Existing SVN Module in Go
DESCRIPTION: Tests downloading an existing module from an SVN repository using 'go mod download'. Verifies the successful download by checking for the presence of the module zip file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_svn.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
go mod download vcs-test.golang.org/svn/hello.svn@000000000001
exists $GOPATH/pkg/mod/cache/download/vcs-test.golang.org/svn/hello.svn/@v/v0.0.0-20170922011245-000000000001.zip
```

----------------------------------------

TITLE: Defining Compression Mode Constants - Go
DESCRIPTION: These constants define the HuffmanOnly compression option for the gzip and zlib packages. HuffmanOnly signals to use Huffman coding only without LZ77 match searching, trading compression ratio for speed. Intended for use with compress/gzip.Writer and compress/zlib.Writer; the ideal-int variant is an implementation detail.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
const HuffmanOnly = -2
```

LANGUAGE: Go
CODE:
```
const HuffmanOnly ideal-int
```

----------------------------------------

TITLE: Module A Configuration
DESCRIPTION: The go.mod file for module 'example.com/a' that requires and provides a local replacement for module 'example.com/b'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_conditional.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.com/a

go 1.21

require example.com/b v0.0.0
replace example.com/b => ./b
```

----------------------------------------

TITLE: Module B v2 Configuration (b2/go.mod)
DESCRIPTION: Configuration file for version 2 of module b, requiring module d.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.com/b

go 1.15

require example.com/d v0.2.0
```

----------------------------------------

TITLE: Testing Build Error in Test File (Go)
DESCRIPTION: This snippet tests a build error directly in a test file. It checks the JSON output for specific build failure messages and package information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_build.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
! go test -json -o=$devnull ./builderror
stdout '"ImportPath":"m/builderror \[m/builderror\.test\]","Action":"build-output","Output":"# m/builderror \[m/builderror.test\]\\n"'
stdout '"ImportPath":"m/builderror \[m/builderror\.test\]","Action":"build-output","Output":"builderror(/|\\\\)main_test.go:3:11: undefined: y\\n"'
stdout '"ImportPath":"m/builderror \[m/builderror\.test\]","Action":"build-fail"'
stdout '"Action":"start","Package":"m/builderror"'
stdout '"Action":"output","Package":"m/builderror","Output":"FAIL\\tm/builderror \[build failed\]\\n"'
stdout '"Action":"fail","Package":"m/builderror","Elapsed":.*,"FailedBuild":"m/builderror \[m/builderror\.test\]"'
! stderr '.'
```

----------------------------------------

TITLE: Providing go.sum Entry for Replacement Module - Go
DESCRIPTION: This go.sum file specifies the checksum for example.com/deprecated/b v1.0.0/go.mod, required for module verification during replacement. The hash guarantees module integrity and is necessary for successful dependency resolution by the Go toolchain. No additional dependencies are required.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_deprecated_replace.txt#2025-04-22_snippet_5

LANGUAGE: go.sum
CODE:
```
example.com/deprecated/b v1.0.0/go.mod h1:b19J9ywRGviY7Nq4aJ1WBJ+A7qUlEY9ihp22yI4/F6M=
```

----------------------------------------

TITLE: Declaring Go Toolchain Module Name - Plaintext
DESCRIPTION: Specifies the Go toolchain module name 'golang.org/toolchain' as a plain text declaration. This snippet is used to identify the Go toolchain package and may appear in project or module metadata files for dependency tracking or documentation. Requires no external dependencies. Input and output are straightforward; the main limitation is that it is informational only.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.5.linux-amd64.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: Configuring Dependency Go Module 'x' (Go Module)
DESCRIPTION: Defines the dependency Go module named `x` using Go version 1.15. This module contains several packages used in the dependency tests but does not declare any external requirements itself within this test setup.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_5

LANGUAGE: gomod
CODE:
```
-- x/go.mod --
module x

go 1.15
```

----------------------------------------

TITLE: Primary Module Definition for Test Scenario
DESCRIPTION: Go module definition file for the main test module 'm'. Creates the module context for testing package traversal and resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Testing Restricted Internal Subpackage Import in Go
DESCRIPTION: A Go file that attempts to import a restricted internal subpackage from another module, which should fail due to Go's access control rules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_internal.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main
import _ "m/x/internal/y"
func main() {}
```

----------------------------------------

TITLE: External Go Test Implementation
DESCRIPTION: External test file that imports and tests the xtestonly package, verifying the F() function returns 42.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_dedup_packages.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package xtestonly_test

import (
	"testing"
	"xtestonly"
)

func TestF(t *testing.T) {
	if x := xtestonly.F(); x != 42 {
		t.Errorf("f.F() = %d, want 42", x)
	}
}
```

----------------------------------------

TITLE: Checking for Absence of Pass Actions
DESCRIPTION: Verifies that there are no 'pass' actions in the JSON output, as the test is expected to fail due to a build error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_issue35169.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
! stdout '\{.*"Action":"pass".*\}'
```

----------------------------------------

TITLE: Defining a Go Package Library - Go
DESCRIPTION: This minimal Go code snippet defines a package named 'lib'. It acts as a placeholder for library source code within a module and does not implement any functions or variables, serving as a template for later library development.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package lib\n
```

----------------------------------------

TITLE: Downloading Go Tools with Proxy
DESCRIPTION: Downloads the goimports tool using the configured proxy with verbose and debug output flags. Checks that the request goes through the proxy rather than directly to golang.org.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_fallback.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
go get -x -v golang.org/x/tools/cmd/goimports
stderr '# get https://proxy.golang.org/golang.org/x/tools/@v/list'
! stderr '# get https://golang.org'
```

----------------------------------------

TITLE: Module B Configuration
DESCRIPTION: Go module configuration for example.com/b with dependency on module C
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_regression_hang.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.com/b

go 1.18

require example.com/c v1.0.0
```

----------------------------------------

TITLE: Testing Go Doc Help Command in Shell
DESCRIPTION: This shell snippet tests the help functionality of the 'go doc' command, validating its output against expected formats for accessing documentation. It verifies various syntaxes like 'go doc <pkg>' and 'go doc <sym>'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/doc.txt#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
# go doc --help
! go doc --help
stderr 'go doc'
stderr 'go doc <pkg>'
stderr 'go doc <sym>\[\.<methodOrField>\]'
stderr 'go doc \[<pkg>\.\]<sym>\[\.<methodOrField>\]'
stderr 'go doc \[<pkg>\.\]\[<sym>\.\]<methodOrField>'
stderr 'go doc <pkg> <sym>\[\.<methodOrField>\]'
```

----------------------------------------

TITLE: Testing Build Tag Usage with Go List Command
DESCRIPTION: A series of shell commands to test the behavior of 'go list' with different build tag configurations. It verifies that the correct Go files are included or excluded based on the specified tags.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_tags.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on

cd x
! go list -f {{.GoFiles}}
stderr 'build constraints exclude all Go files'

go list -f {{.GoFiles}} -tags tag1
stdout '\[x.go\]'

go list -f {{.GoFiles}} -tags tag2
stdout '\[y\.go\]'

go list -f {{.GoFiles}} -tags 'tag1 tag2'
stdout '\[x\.go y\.go\]'

go list -f {{.GoFiles}} -tags tag1,tag2 # commas allowed as of Go 1.13
stdout '\[x\.go y\.go\]'
```

----------------------------------------

TITLE: Main Module Go.mod with Replacement Directives
DESCRIPTION: Defines the main module configuration with multiple replacement directives. This includes both used and unused replacements to test if all are properly maintained in the vendor/modules.txt file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/foo
go 1.14

require (
	example.com/a v0.1.0
)

replace (
	example.com/a v0.1.0 => ./a
	example.com/b v0.1.0 => ./b1
	example.com/b v0.2.0-unused => ./b2
	example.com/c => ./c
	example.com/d v0.1.0 => ./d1
	example.com/d v0.2.0 => ./d2
	example.com/e => example.com/e v0.1.0-unused
)
```

----------------------------------------

TITLE: Defining Process Management Syscall Constants for Darwin ARM64
DESCRIPTION: Constant definitions for process control system calls on Darwin ARM64 architecture. These include operations for process hibernation, suspension, resumption, and termination with their corresponding numeric identifiers.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_103

LANGUAGE: Go
CODE:
```
const SYS_PID_HIBERNATE = 435
const SYS_PID_RESUME = 434
const SYS_PID_SHUTDOWN_SOCKETS = 436
const SYS_PID_SUSPEND = 433
const SYS_POSIX_SPAWN = 244
const SYS_PROCESS_POLICY = 323
const SYS_PROC_INFO = 336
const SYS_PTRACE = 26
const SYS_REBOOT = 55
const SYS_SETPGID = 82
const SYS_SETPRIORITY = 96
const SYS_SETPRIVEXEC = 152
const SYS_SETSID = 147
```

----------------------------------------

TITLE: Testing Go List with Different Module Modes
DESCRIPTION: This snippet tests the 'go list' command with different module modes (mod and vendor) and checks the reported package directories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# An explicit '-mod=mod' should ignore the vendor directory.
go list -mod=mod -f {{.Dir}} x
stdout 'src[\/]x'

go list -mod=mod -f {{.Dir}} -m x
stdout 'src[\/]x'

# An explicit '-mod=vendor' should report package directories within
# the vendor directory.
go list -mod=vendor -f {{.Dir}} x
stdout 'src[\/]vendor[\/]x'

# 'go list -mod=vendor -m' should successfully list vendored modules,
# but should not provide a module directory because no directory contains
# the complete module.
go list -mod=vendor -f '{{.Version}} {{.Dir}}' -m x
stdout '^v1.0.0 $'
```

----------------------------------------

TITLE: Adding MLKEM Cryptography Support in Go
DESCRIPTION: New constants, functions, and types for MLKEM (Module Lattice-based Key Encapsulation Mechanism) in the crypto/mlkem package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
const CiphertextSize1024 = 1568
const CiphertextSize768 = 1088
const EncapsulationKeySize1024 = 1568
const EncapsulationKeySize768 = 1184
const SeedSize = 64
const SharedKeySize = 32

func GenerateKey1024() (*DecapsulationKey1024, error)
func GenerateKey768() (*DecapsulationKey768, error)
func NewDecapsulationKey1024([]uint8) (*DecapsulationKey1024, error)
func NewDecapsulationKey768([]uint8) (*DecapsulationKey768, error)
func NewEncapsulationKey1024([]uint8) (*EncapsulationKey1024, error)
func NewEncapsulationKey768([]uint8) (*EncapsulationKey768, error)

type DecapsulationKey1024 struct
type DecapsulationKey768 struct
type EncapsulationKey1024 struct
type EncapsulationKey768 struct
```

----------------------------------------

TITLE: Defining Go Source Files with Missing Dependencies
DESCRIPTION: These Go source files import packages that don't exist, creating the missing dependency conditions tested in the script. They include both direct and indirect missing dependencies in both regular and test code.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_e.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- untidy.go --
package untidy

import (
	_ "example.net/m"
	_ "example.net/directnotfound"
)
-- untidy_test.go --
package untidy_test

import _ "example.net/directtestnotfound"
-- m/go.mod --
module example.net/m
go 1.16
-- m/m.go --
package m

import _ "example.net/indirectnotfound"
-- m/m_test.go --
package m_test

import _ "example.net/indirecttestnotfound"
```

----------------------------------------

TITLE: Testing Go Module and Package Resolution
DESCRIPTION: This snippet demonstrates a series of commands to test Go module and package resolution. It includes updating the go.mod file, getting specific versions of modules, and listing all modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_arg.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go mod tidy
cp go.mod go.mod.orig

go get m/p  # @latest
go list -m all
stdout '^m/p v0.3.0 '
! stdout '^m '

cp go.mod.orig go.mod

go get m/p@v0.1.0
go list -m all
stdout '^m/p v0.1.0 '
! stdout '^m '

go get m/p@v0.2.0
go list -m all
stdout '^m v0.2.0 '
stdout '^m/p v0.1.0 '

go get m/p@v0.2.0
go list -m all
stdout '^m v0.2.0 '
stdout '^m/p v0.1.0 '
```

----------------------------------------

TITLE: Testing Go Module Dependency Management with Explicit Versions
DESCRIPTION: This snippet tests that 'go get -u' does not upgrade modules with explicit version queries to any version other than the specified one. It uses 'go list -m all' to verify the correct versions are installed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_extra.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
cp go.mod go.mod.orig

go get -u example.net/a@v0.1.0 example.net/b@v0.1.0
go list -m all
stdout '^example.net/a v0.1.0 '
stdout '^example.net/b v0.1.0 '
! stdout '^example.net/c '
```

----------------------------------------

TITLE: Embedding Files with Modified Pattern in Go
DESCRIPTION: This snippet demonstrates changing the embedding pattern to `*t`, which will include any file ending with 't' into the `X` embedded filesystem. It highlights the file filtering capability when embedding resources using Go's `embed` package. It's compatible with Go 1.16 and above.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package p

import "embed"

//go:embed *t
var X embed.FS
```

----------------------------------------

TITLE: Version String Utilities - go/version - Go
DESCRIPTION: Adds version-related utilities Compare (returns int), IsValid (returns bool), and Lang (returns string) for working with Go language and semantic versions. Used to compare, validate, or extract language identifier from version strings. Each function accepts or returns string arguments.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_15

LANGUAGE: Go
CODE:
```
func Compare(string, string) int
func IsValid(string) bool
func Lang(string) string
```

----------------------------------------

TITLE: Main Program Demonstrating Loop Variable Capture Issue
DESCRIPTION: Main package that demonstrates the loop variable capture issue by calling functions from packages 'a' and 'b', then summing the values. Shows the practical impact of the loopvar experiment.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_shorten_pkg.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"inlines/a"
	"inlines/b"
)

func sum(s []*int) int {
	sum := 0
	for _, pi := range s {
		sum += *pi
	}
	return sum
}

func main() {
	af := a.F()
	bf, _ := b.F()
	abf := a.Fb()

	saf, sbf, sabf := sum(af), sum(bf), sum(abf)

	fmt.Printf("af, bf, abf sums = %d, %d, %d\n", saf, sbf, sabf)
}
```

----------------------------------------

TITLE: Implementing Quote Functions in Go
DESCRIPTION: Defines four functions (HelloV2, GlassV2, GoV2, and OptV2) that return different quotes or sayings. It imports and uses the 'rsc.io/sampler' package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v2.0.0.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

import "rsc.io/sampler"

// Hello returns a greeting.
func HelloV2() string {
	return sampler.Hello()
}

// Glass returns a useful phrase for world travelers.
func GlassV2() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return "I can eat glass and it doesn't hurt me."
}

// Go returns a Go proverb.
func GoV2() string {
	return "Don't communicate by sharing memory, share memory by communicating."
}

// Opt returns an optimization truth.
func OptV2() string {
	// Wisdom from ken.
	return "If a program is too slow, it must have a loop."
}
```

----------------------------------------

TITLE: Defining C Function in Main Module Header (C)
DESCRIPTION: This C header file (`bar.h`), located in the main module's `c` directory, defines the `printfile` function. Similar to its vendored counterpart, it prints the current filename using the `__FILE__` macro to test the effect of the `-trimpath` flag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_trimpath_macro.txt#2025-04-22_snippet_9

LANGUAGE: C
CODE:
```
#include "stdio.h"

void printfile() {
    printf("%s\n", __FILE__);
}
```

----------------------------------------

TITLE: Defining Main Go Package with Import (Go)
DESCRIPTION: This Go source file defines the `main` package located in the `a` directory (`m/a`). It imports package `m/b` using the blank identifier (`_`), meaning it imports `m/b` only for its initialization side effects. This is the entry point package likely targeted by PGO.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pgo_issue66218.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main

import _ "m/b"
```

----------------------------------------

TITLE: Implementing Quote Collection Functions in Go
DESCRIPTION: A Go package that implements four main functions: HelloV3(), GlassV3(), GoV3(), and OptV3(). Each function returns a specific type of quote or saying. The package depends on rsc.io/sampler for some functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v3_v3.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

import "rsc.io/sampler"

// Hello returns a greeting.
func HelloV3() string {
	return sampler.Hello()
}

// Glass returns a useful phrase for world travelers.
func GlassV3() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return "I can eat glass and it doesn't hurt me."
}

// Go returns a Go proverb.
func GoV3() string {
	return "Don't communicate by sharing memory, share memory by communicating."
}

// Opt returns an optimization truth.
func OptV3() string {
	// Wisdom from ken.
	return "If a program is too slow, it must have a loop."
}
```

----------------------------------------

TITLE: Tracking Input Offset in XML Decoder - encoding/xml Package - Go
DESCRIPTION: Adds an InputOffset method to the Decoder type in the encoding/xml package, allowing applications to query the byte offset of the XML input stream being processed. The method returns an int64, indicating the zero-based byte index. Useful for error reporting and input debugging; requires using the Decoder object from encoding/xml.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_9

LANGUAGE: Go
CODE:
```
method (*Decoder) InputOffset() int64
```

----------------------------------------

TITLE: Testing Go Get with Insecure Redirects
DESCRIPTION: This script tests the behavior of 'go get' when encountering insecure redirects. It sets environment variables, attempts to get a package from an insecure URL, and verifies the error message. It then sets GOINSECURE to allow the insecure fetch.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_insecure_redirect.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GOPRIVATE=vcs-test.golang.org

! go get -d vcs-test.golang.org/insecure/go/insecure
stderr 'redirected .* to insecure URL'

[short] stop 'builds a git repo'

env GOINSECURE=vcs-test.golang.org/insecure/go/insecure
go get -d vcs-test.golang.org/insecure/go/insecure
```

----------------------------------------

TITLE: Handling Non-reusable Metadata Results
DESCRIPTION: This snippet shows how changes in hash values invalidate previously obtained metadata, preventing reuse. It plays a crucial role in ensuring metadata integrity when repo HEAD or other refs change.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61415.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
replace f213069baa68ec26412fb373c7cf6669db1f8e69 08a4fa6bb9c04ffba03b26ae427b0d6335d90a2a no-nested.json
go list -reuse=no-nested.json -json -m --versions -e vcs-test.golang.org/git/issue61415.git/nested@latest
```

----------------------------------------

TITLE: Building Go Module with Untagged Version via Proxy
DESCRIPTION: This script initializes a new Go module, fetches an untagged version of a package, and verifies the correct version is retrieved. It uses environment variables and Go commands to test module behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_latest_pseudo.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

go mod init m
go get example.com/notags
go list -m all
stdout '^example.com/notags v0.0.0-20190507143103-cc8cbe209b64$'
```

----------------------------------------

TITLE: Go Module Build and Cross-compilation Test Script
DESCRIPTION: Shell script that tests Go build and install commands with various architecture and OS configurations, including path verification and GOBIN settings
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_cross_gobin.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off
[short] skip # rebuilds std for alternate architecture

cd mycmd
go build mycmd

# cross-compile install with implicit GOBIN=$GOPATH/bin can make subdirectory
env GOARCH=386
[GOARCH:386] env GOARCH=amd64
env GOOS=linux
go install mycmd
exists $GOPATH/bin/linux_$GOARCH/mycmd

# cross-compile install with explicit GOBIN cannot make subdirectory
env GOBIN=$WORK/bin
! go install mycmd
! exists $GOBIN/linux_$GOARCH

# The install directory for a cross-compiled standard command should include GOARCH.
go list -f '{{.Target}}'  cmd/pack
stdout ${GOROOT}[/\]pkg[/\]tool[/\]${GOOS}_${GOARCH}[/\]pack$
```

----------------------------------------

TITLE: Testing Go Work File Compatibility with Outdated Module
DESCRIPTION: This snippet tests the scenario where a go.work file references a module with a go.mod file requiring a newer Go version. It expects the build and 'go work sync' commands to fail with appropriate error messages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
cp go.work.old go.work
! go build .
stderr '^go: module . listed in go.work file requires go >= 1.99999, but go.work lists go 1.10; to update it:\n\tgo work use$'

! go work sync
stderr '^go: cannot load module . listed in go.work file: go.mod requires go >= 1.99999 \(running go 1\..+\)$'
```

----------------------------------------

TITLE: Go List Import Testing Commands
DESCRIPTION: Shell commands to test package import behavior using 'go list' command with and without the -compiled flag. Verifies presence of specific imports including CGO-related packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiled_imports.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
env GO111MODULE=off

[!cgo] skip

# go list should report import "C"
cd x
go list -f '{{.Imports}}'
! stdout runtime/cgo
! stdout unsafe
! stdout syscall
stdout C
stdout unicode
stdout unicode/utf16

# go list -compiled should report imports in compiled files as well,
# adding "runtime/cgo", "unsafe", and "syscall" but not dropping "C".
go list -compiled -f '{{.Imports}}'
stdout runtime/cgo
stdout unsafe
stdout syscall
stdout C
stdout unicode
stdout unicode/utf16
```

----------------------------------------

TITLE: Parsing Basic Auth from HTTP Requests - net/http Package - Go
DESCRIPTION: Introduces BasicAuth() method on http.Request, enabling extraction of HTTP Basic Authentication credentials as username and password. Returns (username string, password string, ok bool), where ok signifies if Basic Auth headers were present and parseable. Used in HTTP servers and middleware needing authentication checks.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_17

LANGUAGE: Go
CODE:
```
method (*Request) BasicAuth() (string, string, bool)
```

----------------------------------------

TITLE: Testing GOAUTH Behavior with Unset Home Directory in Go
DESCRIPTION: This snippet tests GOAUTH behavior when the home directory is unset. It expects a warning but not a failure when attempting to download a module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_netrc.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
[short] skip 'requires a remote vcs lookup'
[!git] skip
# An unset home directory should warn the user but not cause a failure.
env NETRC=
env HOME=
env USERPROFILE=
env home=
go get -x vcs-test.golang.org/git/emptytest.git
[!GOOS:windows] [!GOOS:plan9] stderr 'GOAUTH=netrc: \$HOME is not defined'
[GOOS:windows] stderr 'GOAUTH=netrc: \%userprofile\% is not defined'
[GOOS:plan9] stderr 'GOAUTH=netrc: \$home is not defined'
```

----------------------------------------

TITLE: Adding Unicode 15.0.0 Support in unicode Package
DESCRIPTION: This snippet updates the unicode package to support Unicode version 15.0.0. It introduces new RangeTable variables for various scripts including Cypro_Minoan, Kawi, Nag_Mundari, Old_Uyghur, Tangsa, Toto, and Vithkuqi.
SOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_13

LANGUAGE: Go
CODE:
```
const Version = "15.0.0"

var Cypro_Minoan *RangeTable
var Kawi *RangeTable
var Nag_Mundari *RangeTable
var Old_Uyghur *RangeTable
var Tangsa *RangeTable
var Toto *RangeTable
var Vithkuqi *RangeTable
```

----------------------------------------

TITLE: Defining a Simple Go Test Function (Go)
DESCRIPTION: Defines a test function 'TestF' within the 'x' package using Go's standard 'testing' package. This test calls the function 'F' from the same package, providing a basic test case used for coverage analysis and race detection in the accompanying shell commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_runtime.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package x
import "testing"
func TestF(t *testing.T) { F() }
```

----------------------------------------

TITLE: Checking External Linking Permissions for Sanitation and Debug Mapping Flags
DESCRIPTION: This code tests if certain CGO_CFLAGS required for internal linking, like debug and file prefix mapping flags, pass without triggering external linking. Flags such as '-fsanitize-undefined-strip-path-components' and '-fdebug-prefix-map' are used.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_suspect_flag_force_external.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
env CGO_CFLAGS=-fsanitize-undefined-strip-path-components=-1
go build -x -n -o dummy.exe ./usesInternalCgo
! stderr preferlinkext

```

----------------------------------------

TITLE: Declaring a Go Module with Self-Retraction - Go
DESCRIPTION: Defines a Go module named example.com/retract/self/prerelease targeting Go version 1.15. This module is intended to retract its own release versions, leaving a pre-release available for use. No additional dependencies are specified, and the file is required for Go tooling to recognize the module and its retraction policy.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prerelease_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/retract/self/prerelease

go 1.15
```

----------------------------------------

TITLE: Go Module Definition for Plugin Test
DESCRIPTION: A simple Go module definition used in the plugin buildmode test. It defines a module named 'testdep' with Go 1.16 as the required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_plugin_non_main.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module testdep

go 1.16
```

----------------------------------------

TITLE: Bad Import Package
DESCRIPTION: Package with an unresolvable import
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_errors.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package badimport

import "example.net/oops"
```

----------------------------------------

TITLE: Importing Text Package in Go
DESCRIPTION: This Go file imports the 'golang.org/x/text/language' package. It's used to test module resolution and package importing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_symlink.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package issue

import _ "golang.org/x/text/language"
```

----------------------------------------

TITLE: Running Go Fuzz Tests with Context Verification
DESCRIPTION: Shell commands to run context-related fuzz tests. First runs a regular test and then runs a fuzz test with a single iteration to verify context behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_context.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -vet=off context_fuzz_test.go
go test -vet=off -fuzz=Fuzz -fuzztime=1x context_fuzz_test.go
```

----------------------------------------

TITLE: Minimal go.mod File for Root v0.1.0 Snapshot - Go
DESCRIPTION: This 'go.mod' file identifies a snapshot version of the 'golang.org/issue/root' module and requires 'golang.org/issue/pkg' v0.1.0. It is used in the local replace mapping during tests to simulate versioned module dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_7

LANGUAGE: go.mod
CODE:
```
module golang.org/issue/root

require golang.org/issue/pkg v0.1.0
```

----------------------------------------

TITLE: Using go list to verify debug directives in test binary
DESCRIPTION: Demonstrates using go list with -test flag to verify that DefaultGODEBUG contains the specified debug directive panicnil=1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildinfo_godebug_issue68053.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list -test -f '{{.ImportPath}} {{.DefaultGODEBUG}}'
stdout 'example.com/foo\.test.*panicnil=1.*'
```

----------------------------------------

TITLE: Go Module File Without Replace Directive
DESCRIPTION: A Go module file for module 'example.com/a' without a replace directive. This is used in the test to demonstrate the failure case.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_main_module_replaced.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
module example.com/a

go 1.21

require example.com/b v0.0.0
```

----------------------------------------

TITLE: Main Package File Path Printer
DESCRIPTION: Implementation of a function that prints its own source file path using runtime.Caller()
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath_main.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import "runtime"

func PrintFile() {
	_, file, _, _ := runtime.Caller(0)
	println(file)
}
```

----------------------------------------

TITLE: Defining Go Module 'm' Version 0.2.0
DESCRIPTION: This snippet shows the go.mod file for module 'm' version 0.2.0, which requires 'm/p' version 0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_arg.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module m

go 1.16

require m/p v0.1.0
```

----------------------------------------

TITLE: Module 'a' Definition with Dependencies
DESCRIPTION: The go.mod file for module 'a' that requires x v0.2.0 and b v0.0.0. This dependency structure is part of the test case for issue #31248.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_tidy.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module a
go 1.13
require (
	x v0.2.0
	b v0.0.0
)
```

----------------------------------------

TITLE: Cleaning GOMODCACHE in Go
DESCRIPTION: This snippet demonstrates how to clean the module cache using the 'go clean -modcache' command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache.txt#2025-04-22_snippet_5

LANGUAGE: sh
CODE:
```
exists $WORK/modcache
env GOMODCACHE=$WORK/modcache
go clean -modcache
! exists $WORK/modcache
```

----------------------------------------

TITLE: Implementing File Path Printing in Package
DESCRIPTION: Implements a function to print the file path of the current file using runtime.Caller.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package pkg

import "runtime"

func PrintFile() {
	_, file, _, _ := runtime.Caller(0)
	println(file)
}
```

----------------------------------------

TITLE: Test File Accessing Internal Package
DESCRIPTION: A Go test file that imports and uses an internal package. This is used to test the visibility rules of internal packages in test contexts and verify that 'Hacks' is enabled.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_files.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package foo_test

import (
	"testing"
	"example.com/internal"
)

func TestHacksEnabled(t *testing.T) {
	if !internal.Hacks {
		t.Fatal("hacks not enabled")
	}
}
```

----------------------------------------

TITLE: Chiral Package Definition Files
DESCRIPTION: Package files with build tag conditionals to import either left or right package based on the mirror build tag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tagged_import_cycle.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Package chiral imports packages in an order that depends on build tags.
package chiral
```

LANGUAGE: go
CODE:
```
// +build !mirror

package chiral

import _ "example.com/left"
```

LANGUAGE: go
CODE:
```
// +build mirror

package chiral

import _ "example.com/right"
```

----------------------------------------

TITLE: Crypto Package Constants
DESCRIPTION: Definition of BLAKE2 cryptographic hash function constants with different variants and sizes.
SOURCE: https://github.com/golang/go/blob/master/api/go1.9.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
const (
    BLAKE2b_256 = 17
    BLAKE2b_384 = 18
    BLAKE2b_512 = 19
    BLAKE2s_256 = 16
)
```

----------------------------------------

TITLE: Populating Local Cache with Specific Module Versions
DESCRIPTION: Downloads specific tagged and pseudo-versions of the 'github.com/dmitshur-test/modtest5' module into the local module cache ($GOPATH/pkg/mod/cache/download). This pre-populates the cache which will subsequently be used as a file-based module proxy for testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go mod download github.com/dmitshur-test/modtest5@v0.0.0-20190619020302-197a620e0c9a
go mod download github.com/dmitshur-test/modtest5@v0.5.0-alpha
go mod download github.com/dmitshur-test/modtest5@v0.5.0-alpha.0.20190619023908-3da23a9deb9e
```

----------------------------------------

TITLE: Test2PKG/pkg Package Import Definition
DESCRIPTION: HTML template defining svn import path for test2PKG/pkg package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/test2-svn-git.txt#2025-04-22_snippet_5

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<meta name="go-import" content="vcs-test.golang.org/go/test2-svn-git/test2PKG svn https://vcs-test.golang.org/svn/test2-svn-git">
```

----------------------------------------

TITLE: Testing Module Download Command
DESCRIPTION: Downloads a specific version of rsc.io/quote module to the module cache and verifies that the expected cache files exist.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_clean_cache.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
go mod download rsc.io/quote@v1.5.0
exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.info
exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.mod
exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.zip
```

----------------------------------------

TITLE: Minimal Go benchmark test
DESCRIPTION: A minimal Go benchmark test file with an empty benchmark function used to test the output formatting of 'go test -bench'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_labels.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package bench

import "testing"

func Benchmark(b *testing.B) {
}
```

----------------------------------------

TITLE: Testing Go Vet with GOFLAGS Environment Variable
DESCRIPTION: Verifies the behavior of 'go vet' when using the GOFLAGS environment variable to set analyzer flags and build tags.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_flags.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go vet .
env GOFLAGS='-tags=buggy'
! go vet .
stderr 'possible Printf formatting directive'

env GOFLAGS='-tags=buggy -unsafeptr'
go vet .

env GOFLAGS='-tags=buggy -printf'
! go vet -unsafeptr
stderr 'possible Printf formatting directive'

env GOFLAGS='-unsafeptr'
! go list .
stderr 'go: parsing \$GOFLAGS: unknown flag -unsafeptr'
env GOFLAGS=
```

----------------------------------------

TITLE: Defining Go Module with Dependencies and Replacements
DESCRIPTION: This go.mod file defines a module 'm' with Go version 1.15, specifies dependencies, and includes replace directives for different versions of example.com/a and example.com/b.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_old.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module m
go 1.15

require (
	example.com/a v1.0.0
	example.com/b v1.0.0
)

replace example.com/a v1.0.0 => ./a100
replace example.com/a v1.0.1 => ./a101
replace example.com/b v1.0.1 => ./b101
replace example.com/b v1.0.0 => ./b100
replace example.com/b v0.9.0 => ./b100
```

----------------------------------------

TITLE: Executing Go List Test for Local Module Replacement (Shell)
DESCRIPTION: This shell script snippet enables Go modules (`GO111MODULE=on`), changes the working directory to `x/y`, and executes `go list -f '{{.Dir}}' zz` to find the directory of the module `zz`. It then uses `stdout` to assert that the output path correctly points to the replaced local directory `x/z`, confirming the `replace` directive works as expected for issue golang.org/issue/24100.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_local_replace.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Test that local replacements work even with dummy module names.
# golang.org/issue/24100.

env GO111MODULE=on

cd x/y
go list -f '{{.Dir}}' zz
stdout x[/\\]z$
```

----------------------------------------

TITLE: Testing GOPROXY URL Formatting in Go Module System
DESCRIPTION: A bash script testing how Go handles different GOPROXY URL formats. It verifies that file paths must have an explicit 'file://' prefix, while HTTPS URLs can omit the 'https://' prefix. The script also includes a simple go.mod file and a placeholder proxy directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_proxy_https.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on

# GOPROXY file paths must provide the "file://" prefix explicitly.
env GOPROXY=$WORK/proxydir
! go list -versions -m golang.org/x/text
stderr 'invalid proxy URL.*proxydir'

[!net:proxy.golang.org] stop

# GOPROXY HTTPS paths may elide the "https://" prefix.
# (See golang.org/issue/32191.)
env GOPROXY=proxy.golang.org
env GOSUMDB=
go list -versions -m golang.org/x/text
```

LANGUAGE: go
CODE:
```
-- go.mod --
module example.com
go 1.13
-- $WORK/proxydir/README.md --
This proxy contains no data.
```

----------------------------------------

TITLE: Initializing Git repository with specific configuration
DESCRIPTION: Initializes a Git repository with case-insensitive and Unicode precomposition settings, then adds and commits a README file as the initial commit. Creates the master branch.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
git init
git config --add core.ignorecase true
git config --add core.precomposeunicode true

git add README
at 2017-09-22T11:39:03-04:00
git commit -a -m 'README'
git branch -m master

git rev-parse HEAD
stdout '^7f800d2ac276dd7042ea0e8d7438527d236fd098$'
```

----------------------------------------

TITLE: Clang Path Lookup Utility in Go
DESCRIPTION: A simple Go program that looks up the full path of a command (Clang) in the system PATH and writes it to stdout.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cc_cache_issue64423.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	"os"
	"os/exec"
)

func main() {
	path, err := exec.LookPath(os.Args[1])
	if err != nil {
		panic(err)
	}
	os.Stdout.WriteString(path)
}
```

----------------------------------------

TITLE: Indirect Dependency Module Definition
DESCRIPTION: The go.mod file for the old-indirect module, which requires an older version (v1.5.1) of rsc.io/quote. This creates the dependency version conflict being tested.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_downgrade_ambiguous.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module old-indirect

go 1.16

require rsc.io/quote v1.5.1
```

----------------------------------------

TITLE: Defining Go Package in Subdirectory
DESCRIPTION: This snippet defines a Go package named 'x' in the 'sub' directory. It's an empty package declaration used for testing package resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dir.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package x
```

----------------------------------------

TITLE: Adding FIPS 140 Compliance Check in Go
DESCRIPTION: New function to check if FIPS 140 compliance is enabled in the crypto/fips140 package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
func Enabled() bool
```

----------------------------------------

TITLE: Setting Up Go Environment Variables for Module and Sumdb Testing
DESCRIPTION: This snippet sets up environment variables for Go module and sumdb testing, including GO111MODULE, GOSUMDB, GOPROXY, and other related variables.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
env sumdb=$GOSUMDB
env proxy=$GOPROXY
env GOPROXY GONOPROXY GOSUMDB GONOSUMDB
env dbname=localhost.localdev/sumdb
```

----------------------------------------

TITLE: Import Path Testing Commands
DESCRIPTION: Shell commands for testing Go package import paths and mappings, including verification of standard packages and vendor directory mappings
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_importmap.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
env GO111MODULE=off

# gccgo does not have standard packages.
[compiler:gccgo] skip

# fmt should have no rewritten imports.
# The import from a/b should map c/d to a's vendor directory.
go list -f '{{.ImportPath}}: {{.ImportMap}}' fmt a/b
stdout 'fmt: map[]'
stdout 'a/b: map[c/d:a/vendor/c/d]'

# flag [fmt.test] should import fmt [fmt.test] as fmt
# fmt.test should import testing [fmt.test] as testing
# fmt.test should not import a modified os
go list -deps -test -f '{{.ImportPath}} MAP: {{.ImportMap}}{{"\n"}}{{.ImportPath}} IMPORT: {{.Imports}}' fmt
stdout '^flag \[fmt\.test\] MAP: map\[fmt:fmt \[fmt\.test\]\]'
stdout '^fmt\.test MAP: map\[(.* )?testing:testing \[fmt\.test\]'
! stdout '^fmt\.test MAP: map\[(.* )?os:'
stdout '^fmt\.test IMPORT: \[fmt \[fmt\.test\] fmt_test \[fmt\.test\] os reflect testing \[fmt\.test\] testing/internal/testdeps \[fmt\.test\]\]'
```

----------------------------------------

TITLE: Main Module Definition with Dependency on Sub-module
DESCRIPTION: Defines the main module 'm' with Go 1.1 compatibility, requiring the 'sub' module and replacing it with a local path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m
go 1.1
require (
	sub v1.0.0
)
replace (
	sub => ./sub
)
```

----------------------------------------

TITLE: Fetching Metadata of a Nested Module - Successfully
DESCRIPTION: This snippet shows how to fetch metadata for a nested Go module at a specific tag. It demonstrates retrieval of VCS-specific metadata such as 'Origin', 'VCS', 'Subdir', 'TagPrefix', and 'Hash', then stores the output in a JSON file. It requires the 'go' tool and the ability to access the specified repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61415.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list -json -m --versions -e vcs-test.golang.org/git/issue61415.git/nested@has-nested
cp stdout has-nested.json
```

----------------------------------------

TITLE: Go Fuzzing Deadline Test Implementation
DESCRIPTION: Test implementation that verifies deadline detection in fuzzing functions. Uses command line flags to control expected deadline behavior and tests various timeout configurations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_deadline.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package fuzz_test

import (
	"flag"
	"testing"
)

var wantDeadline = flag.Bool("wantdeadline", false, "whether the test should have a deadline")

func FuzzDeadline(f *testing.F) {
	f.Add("run once")
	f.Fuzz(func (t *testing.T, _ string) {
		if _, hasDeadline := t.Deadline(); hasDeadline != *wantDeadline {
			t.Fatalf("function got %v; want %v", hasDeadline, *wantDeadline)
		}
	})
}
```

----------------------------------------

TITLE: Executing Go Test Coverage Commands
DESCRIPTION: These commands illustrate the use of 'go test' to check code coverage in Go projects. It includes various scenarios such as specifying packages, handling nonexistent packages, and testing coverage for packages not directly tested. The focus is on understanding coverage outputs and error handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_pkgselect.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Baseline run.
go test -cover example/foo
stdout 'coverage: 50.0% of statements$'

# Coverage percentage output should mention -coverpkg selection.
go test -coverpkg=example/foo example/foo
stdout 'coverage: 50.0% of statements in example/foo'

# Try to ask for coverage of a package that doesn't exist.
go test -coverpkg nonexistent example/bar
stderr 'no packages being tested depend on matches for pattern nonexistent'
stdout 'coverage: \[no statements\]'

# Ask for foo coverage, but test bar.
go test -coverpkg=example/foo example/bar
stdout 'coverage: 50.0% of statements in example/foo'

```

----------------------------------------

TITLE: Testing Go Test Command Profile and Trace Output
DESCRIPTION: This snippet tests the 'go test' command's behavior with profile and trace flags. It verifies that these flags force output to the current working directory or -outputdir, not the directory containing the test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flags.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
go test -memprofile=mem.out ./x
exists ./mem.out
rm ./mem.out

go test -trace=trace.out ./x
exists ./trace.out
rm ./trace.out

mkdir profiles
go test -memprofile=mem.out -outputdir=./profiles ./x
exists ./profiles/mem.out
rm profiles
```

----------------------------------------

TITLE: Reflect Type Utilities and Generics - reflect - Go
DESCRIPTION: The reflect package deprecates PtrTo and introduces generic TypeFor, which creates a Type for an arbitrary interface type parameter. Useful for code generation, deep reflection, or working with generic code at runtime. TypeFor has no parameters; it returns a reflect.Type corresponding to the parameterized type.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_25

LANGUAGE: Go
CODE:
```
// Deprecated
func PtrTo
func TypeFor[$0 interface{}]() Type
```

----------------------------------------

TITLE: Go module definition
DESCRIPTION: Minimal go.mod file defining a module named 'm' with Go 1.16 requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_no_go.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Go Work Toolchain Test Script
DESCRIPTION: Shell script that tests the functionality of go work edit -toolchain command. Tests setting specific version (go1.9), default value, and removing toolchain setting while verifying changes through grep commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_edit_toolchain.txt#2025-04-22_snippet_0

LANGUAGE: shellscript
CODE:
```
env GOTOOLCHAIN=local
env GO111MODULE=on

! grep toolchain go.work
go work edit -toolchain=go1.9
grep 'toolchain go1.9' go.work

go work edit -toolchain=default
grep 'toolchain default' go.work

go work edit -toolchain=none
! grep toolchain go.work
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module definition specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_59905.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module test/main

go 1.20
```

----------------------------------------

TITLE: Constraint Package with Build Tag
DESCRIPTION: Package with build constraints and want package import
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_load_err.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
// +build !!nope

package constraint
```

LANGUAGE: go
CODE:
```
package constraint

import _ "m/want"
```

----------------------------------------

TITLE: Configuring Go Module Tests
DESCRIPTION: Sets environment variables and runs Go tests for specific packages to verify module behavior and import resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue11864.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=off

# test should work too
go test github.com/rsc/go-get-issue-11864
go test github.com/rsc/go-get-issue-11864/t

# external tests should observe internal test exports (golang.org/issue/11977)
go test github.com/rsc/go-get-issue-11864/vendor/vendor.org/tx2
```

----------------------------------------

TITLE: CGO Implementation with Source Directory Flag
DESCRIPTION: Implements a basic CGO package with CFLAGS configuration to include the source directory. Includes a variable V initialized to 0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_!c!g!o_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package CGO

// #cgo CFLAGS: -I${SRCDIR}
import "C"

var V = 0
```

----------------------------------------

TITLE: Testing 'go list -m' Command with Versions
DESCRIPTION: Checks the behavior of 'go list -m' with explicit versions and the -versions flag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go list -m example.com/version@latest
stdout 'example.com/version v1.1.0'

go list -m -versions example.com/version
stdout 'v1.0.0\s+v1.0.1\s+v1.1.0'

! go list -m all
stderr 'go: cannot match "all": go.mod file not found in current directory or any parent directory; see ''go help modules''$'

! go list -m example.com/printversion@v1.0.0 all
stderr 'go: cannot match "all": go.mod file not found in current directory or any parent directory; see ''go help modules''$'
! stdout 'example.com/version'

! go list -m example.com/printversion
stderr 'go: cannot match "example.com/printversion" without -versions or an explicit version: go.mod file not found in current directory or any parent directory; see ''go help modules''$'
! stdout 'example.com/version'

! go list -m ...
stderr 'go: cannot match "...": go.mod file not found in current directory or any parent directory; see ''go help modules''$'
! go list -m rsc.io/quote/...
stderr 'go: cannot match "rsc.io/quote/...": go.mod file not found in current directory or any parent directory; see ''go help modules''$'
```

----------------------------------------

TITLE: Defining Test for Package 'x' Using Module 'c'
DESCRIPTION: This Go test file belongs to package 'x_test'. It imports package 'c' and includes a test function `TestCVersion` that logs the `Version` constant from package 'c'. This test demonstrates which version of 'c' is selected when testing package 'x'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_16

LANGUAGE: go
CODE:
```
-- x1/x_test.go --
package x_test

import (
	"c"
	"testing"
)

func TestCVersion(t *testing.T) {
	t.Log("c", c.Version)
}
```

----------------------------------------

TITLE: Multiple TestMain Execution Test
DESCRIPTION: Implementation of TestMain that runs tests twice and a basic test function. This pattern supports scenarios where global state needs to be modified between test runs, as referenced in golang.org/issue/23129.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main_twice.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package multimain_test

import "testing"

func TestMain(m *testing.M) {
	// Some users run m.Run multiple times, changing
	// some kind of global state between runs.
	// This used to work so I guess now it has to keep working.
	// See golang.org/issue/23129.
	m.Run()
	m.Run()
}

func Test(t *testing.T) {
	t.Log("notwithstanding")
}
```

----------------------------------------

TITLE: Go Workspace Configuration
DESCRIPTION: Defines a Go workspace configuration file that specifies Go version 1.21 and includes four modules (a, b, c, d) in the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue54372.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go 1.21

use (
    ./a
    ./b
    ./c
    ./d
)
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition for the rsc.io/quote package. This simple go.mod file declares the module name without any dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.2.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module "rsc.io/quote"
```

----------------------------------------

TITLE: Defining a Minimal Go Module File - Go
DESCRIPTION: Specifies a basic go.mod file to declare the module path as 'sample' and set the Go language version to 1.12. This file allows the Go toolchain to recognize the directory as a Go module, supporting testing of error handling when GO111MODULE is set to off. The file has no parameters and is required for module command testing but imposes no functional constraints.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_off.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module sample\n\ngo 1.12
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: A go.mod file defining the module for the test project. It specifies the module name as "test" and sets the Go version to 1.13.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_ambiguous_path.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
module "test"

go 1.13
```

----------------------------------------

TITLE: Go Module Test Configuration
DESCRIPTION: Go module configuration file defining the module name and Go version requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_temp.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module issue51992

go 1.18
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module named 'cgocover2' with Go 1.16 as the minimum required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_xtest.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module cgocover2

go 1.16
```

----------------------------------------

TITLE: Defining Go Module `example.com` with Go 1.12
DESCRIPTION: This snippet defines a simple Go module named `example.com` and specifies Go version 1.12. It sets up the basic project structure required by the Go compiler for the test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_badmethod_issue57926.txt#2025-04-22_snippet_0

LANGUAGE: gomod
CODE:
```
module example.com
go 1.12
```

----------------------------------------

TITLE: Test File for Package a - a/a_test.go
DESCRIPTION: Defines a test for package 'a' that imports a test-only dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main
import "testing"
import _ "test/testdep"
func TestA(*testing.T) {}
```

----------------------------------------

TITLE: Defining Go Module and Package for Documentation
DESCRIPTION: This Go code defines a module named 'p/v2' with a package that contains a struct and a method. It sets up the necessary structure for testing 'go doc' commands against both the package and its components.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/doc.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- go.mod --
module p/v2

go 1.13
```

LANGUAGE: go
CODE:
```
-- p.go --
package p

type Symbol struct{}

func (Symbol) Method() error {
	return nil
}
```

----------------------------------------

TITLE: Basic Fast Fuzzing Test Implementation in Go
DESCRIPTION: Implements a basic fuzzing test that performs no operations. Used to verify basic fuzzing behavior and timeout handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_fuzztime.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
func FuzzFast(f *testing.F) {
	f.Fuzz(func (*testing.T, []byte) {})
}
```

----------------------------------------

TITLE: Testing GOAUTH Default Behavior in Go
DESCRIPTION: This snippet tests the default behavior of GOAUTH, which should use netrc for authentication. It attempts to download a module requiring HTTPS basic auth without credentials, expecting a failure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_netrc.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
env GOPROXY=direct
env GOSUMDB=off

# GOAUTH should default to netrc behavior.
# Without credentials, downloading a module from a path that requires HTTPS
# basic auth should fail.
# Override default location of $HOME/.netrc
env NETRC=$WORK/empty
! go get vcs-test.golang.org/auth/or401
stderr '^\tserver response: ACCESS DENIED, buddy$'
```

----------------------------------------

TITLE: Building package with CGO_LDFLAGS environment variable (Go)
DESCRIPTION: This snippet defines a Go package that imports the C package without specifying LDFLAGS. It's expected to build successfully when the flags are provided through the CGO_LDFLAGS environment variable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/ldflag.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package ok

import "C"

func F() {}
```

----------------------------------------

TITLE: Failing Go Test Implementation
DESCRIPTION: Go test file implementing a deliberately failing test case using t.Fail()
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_status.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package x

import "testing"

func TestNothingJustFail(t *testing.T) {
    t.Fail()
}
```

----------------------------------------

TITLE: Excluding Incompatible Version
DESCRIPTION: Demonstrates how to explicitly exclude a version that is implicitly pruned out in Go 1.17 to align behavior with Go 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_incompatible.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
go mod edit -exclude=example.com/retract/incompatible@v2.0.0+incompatible
go list -f $MODFMT -deps ./...
stdout '^example.com/retract/incompatible v1\.0\.0$'
! stdout 'v2\.0\.0'
```

----------------------------------------

TITLE: CGO Integration Implementation
DESCRIPTION: Package implementing C code integration using cgo, including a C function that returns 42.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/toolexec.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package withcgo

// int fortytwo()
// {
//     return 42;
//}
import "C"
```

----------------------------------------

TITLE: Go Version Output Program
DESCRIPTION: Simple Go program that prints the runtime version information, used to verify experiment flags are properly propagated to the binary.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_goexperiment.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main
import "runtime"
func main() { println(runtime.Version()) }
```

----------------------------------------

TITLE: Testing Reserved Package Paths in Go
DESCRIPTION: Shell script that verifies 'example' and 'test' package paths are reserved and unavailable in Go standard library. Uses 'go list' command to check path availability and validates error messages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_reserved.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list example/... test/...
stderr 'go: warning: "example/..." matched no packages$'
stderr 'go: warning: "test/..." matched no packages$'
! stdout .
```

----------------------------------------

TITLE: Testing Directory Access in Go Package c
DESCRIPTION: A test function for package c that verifies the existence of testdata directories at multiple relative paths. The test checks for files both in the package's own testdata directory and in higher-level directories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package c

import (
	"os"
	"testing"
)

func TestDir(t *testing.T) {
	if _, err := os.Stat("../../../testdata/1"); err != nil {
		t.Fatalf("testdata: %v", err)
	}
	if _, err := os.Stat("./testdata/1"); err != nil {
		t.Fatalf("testdata: %v", err)
	}
}
```

----------------------------------------

TITLE: Main program using LDFLAGS (Go)
DESCRIPTION: This snippet defines the main package that imports the 'ok' package. It's used to test the building process with LDFLAGS and verify the external linker command output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/ldflag.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main

import _ "ldflag/ok"

func main() {}
```

----------------------------------------

TITLE: Dependency Test File
DESCRIPTION: A test file for the 'dep' package that imports a test dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_13

LANGUAGE: Go
CODE:
```
package dep_test

import _ "example.com/testdep"
```

----------------------------------------

TITLE: Environment Setup for Go Module Testing
DESCRIPTION: Initial environment configuration for Go module tests, setting up module mode, GOSUMDB, and GOPATH variables
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_file_path.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on
env GOSUMDB=
env GOSUMDB=sum.golang.org
env GOPATH=$WORK/gopath1
```

----------------------------------------

TITLE: Testing Build Info Availability in Go
DESCRIPTION: This Go test file checks if build information is available for the test binary. It uses the debug.ReadBuildInfo() function to retrieve the build info and logs the main package version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildinfo.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package foo_test

import (
        "runtime/debug"
        "testing"
)

func TestBuildInfo(t *testing.T) {
        info, ok := debug.ReadBuildInfo()
        if !ok {
                t.Fatal("no debug info")
        }
        t.Log(info.Main.Version)
}
```

----------------------------------------

TITLE: Testing pre-release pseudo-version resolution
DESCRIPTION: Fetches a pre-release commit and verifies the pseudo-version format.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_9

LANGUAGE: shell
CODE:
```
go get ...test@fb3c628
go list -m all
stdout '^github.com/rsc/legacytest v1\.1\.0-pre\.0\.\d{14}-fb3c628075e3$'
```

----------------------------------------

TITLE: Basic Module Import with Default Build Tags
DESCRIPTION: A Go file importing module 'x' with no build constraints. This file will be included in all builds as it doesn't have any build tag restrictions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package m

import _ "x"
```

----------------------------------------

TITLE: Setting Up Test Environment and Testing 'go list' with Direct Missing Import (Shell)
DESCRIPTION: Initializes the test environment by enabling module mode and changing into the example directory. It then tests the 'go list' command on a package ('example.com/direct') that directly imports a non-existent package ('example.com/notfound'). The tests check the output format, incompleteness flag, dependency errors, and overall command success/failure with and without the '-e' and '-deps' flags, verifying specific stdout and stderr content.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_bad_import.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# This test matches list_bad_import, but in module mode.
# Please keep them in sync.

env GO111MODULE=on
cd example.com

# Without -e, listing an otherwise-valid package with an unsatisfied direct import should fail.
# BUG: Today it succeeds.
go list -f '{{if .Error}}error{{end}} {{if .Incomplete}}incomplete{{end}} {{range .DepsErrors}}bad dep: {{.Err}}{{end}}' example.com/direct
! stdout ^error
stdout 'incomplete'
stdout 'bad dep: .*example.com/notfound'

# Listing with -deps should also fail.
! go list -deps example.com/direct
stderr example.com/notfound

# But -e -deps should succeed.
go list -e -deps example.com/direct
stdout example.com/notfound
```

----------------------------------------

TITLE: Setting GO111MODULE and Skipping Short Tests
DESCRIPTION: Sets the GO111MODULE environment variable to 'on' and skips short tests. This ensures that Go modules are enabled for the subsequent commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
[short] skip
```

----------------------------------------

TITLE: Conditionally Built Package Implementation
DESCRIPTION: A Go file for package 'x1' with the build constraint 'notmytag'. This implementation will only be included when building with the 'notmytag' tag specified.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
// +build notmytag

package x1
```

----------------------------------------

TITLE: Declaring a Go Module with Versioning
DESCRIPTION: This snippet declares a Go module and sets the minimum required Go version. It also includes version metadata in JSON format relevant for version management. The '.mod' file specifies the module path 'example.com/retract' and requires Go version 1.15, while '.info' provides a JSON representation of the module's version 'v1.0.0-good'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_v1.0.0-good.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/retract

go 1.15
```

LANGUAGE: JSON
CODE:
```
{\"Version\":\"v1.0.0-good\"}
```

----------------------------------------

TITLE: Go Submodule Declaration
DESCRIPTION: Go module declaration for a submodule, using a different module path to distinguish it from the parent module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_24

LANGUAGE: go
CODE:
```
module "github.com/vgotest1/submod" // submod/go.mod
```

----------------------------------------

TITLE: Verifying Resolved Dependency
DESCRIPTION: This snippet verifies that the dependency is resolved by running 'go list' and 'go build' without errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_indirect.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
go list -deps .
! stderr .
[!short] go build .
[!short] ! stderr .
```

----------------------------------------

TITLE: Build Command Directory Output Test
DESCRIPTION: Shell script testing Go build command's ability to output multiple executables to a directory and handle various package scenarios.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_multi_main.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
mkdir $WORK/bin
go build -o $WORK/bin ./cmd/c1 ./cmd/c2
! stderr 'multiple packages'

! go build -o $WORK/bin ./pkg1 ./pkg1
stderr 'no main packages'

! go build ./cmd/c1
stderr 'already exists and is a directory'

# Verify build -o output correctly local packages
mkdir $WORK/local
go build -o $WORK/local ./exec.go
exists $WORK/local/exec$GOEXE
```

----------------------------------------

TITLE: Package Implementation File
DESCRIPTION: Simple package implementation with a function that prints 'Hello, world!'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_issue51125.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package mypkg

import "fmt"

func MyFunc() {
	fmt.Println("Hello, world!")
}
```

----------------------------------------

TITLE: NetBSD ARM64 Filesystem ID Structure Definition in Go
DESCRIPTION: Defines the Fsid structure that uniquely identifies a filesystem. Contains an array of two 32-bit integers to form the filesystem identifier.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_92

LANGUAGE: go
CODE:
```
type Fsid struct {
	X__fsid_val [2]int32
}
```

----------------------------------------

TITLE: Example module go.mod.final file
DESCRIPTION: Expected final state of the go.mod file after toolchain upgrade. It has updated the Go version to 1.23 and added a requirement for the rsc.io/needall module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
module example

go 1.23

require rsc.io/needall v0.0.1

```

----------------------------------------

TITLE: Defining Go Module and Retracting Incompatible Version (Go Module)
DESCRIPTION: This `go.mod` file defines the module `example.com/retract/incompatible`, specifies Go version `1.16`, and uses the `retract` directive to withdraw version `v2.0.0+incompatible` from use. This represents the module file content for the `v1.0.0` release.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_incompatible_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: gomod
CODE:
```
module example.com/retract/incompatible

go 1.16

retract v2.0.0+incompatible
```

----------------------------------------

TITLE: Declaring a Go Package (Go)
DESCRIPTION: This snippet contains a basic Go source file that declares the package 'notags'. This file belongs to the 'example.com/notags' module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_notags_v0.0.0-20190507143103-cc8cbe209b64.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- notags.go --
package notags
```

----------------------------------------

TITLE: Adding Iterator Methods to go/types Package in Go
DESCRIPTION: New methods returning iterators for various types in the go/types package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_13

LANGUAGE: Go
CODE:
```
func (*Interface) EmbeddedTypes() iter.Seq[Type]
func (*Interface) ExplicitMethods() iter.Seq[*Func]
func (*Interface) Methods() iter.Seq[*Func]
func (*MethodSet) Methods() iter.Seq[*Selection]
func (*Named) Methods() iter.Seq[*Func]
func (*Scope) Children() iter.Seq[*Scope]
func (*Struct) Fields() iter.Seq[*Var]
func (*Tuple) Variables() iter.Seq[*Var]
func (*TypeList) Types() iter.Seq[Type]
func (*TypeParamList) TypeParams() iter.Seq[*TypeParam]
func (*Union) Terms() iter.Seq[*Term]
```

----------------------------------------

TITLE: Go Function Declaration
DESCRIPTION: Simple Go package declaration with an external function declaration for f that takes an int8 parameter.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_asm.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package a

func f(x int8)
```

----------------------------------------

TITLE: Formatting Go Code with gofmt
DESCRIPTION: This snippet shows the input code and its formatted version using gofmt. It demonstrates how gofmt handles indentation for code blocks in Go.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/text9.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
Hello, world
 Code block here.
```

LANGUAGE: go
CODE:
```
Hello, world

	Code block here.
```

----------------------------------------

TITLE: Diagnosing Go Test Import Cycles with go list (Shell)
DESCRIPTION: Executes the `go list` command with flags `-e` (continue on error), `-test` (include test dependencies), and `-deps` (list dependencies) for the `./datastore/sql` package. This command is intended to trigger the Go compiler's import cycle detection mechanism, specifically for the scenario described in issue 45863 where a test package introduces the cycle.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_test_cycle.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list -e -test -deps ./datastore/sql
```

----------------------------------------

TITLE: Adding At Methods for Pixel Formats - image Package - Go
DESCRIPTION: Introduces AlphaAt, Alpha16At, GrayAt, Gray16At, NRGBAAt, NRGBA64At, RGBAAt, RGBA64At, and YCbCrAt methods to various image types, returning the color value at specified coordinates. These methods expand the color model accessor API, supporting direct pixel-level color retrieval in the image package. Each method returns the corresponding color struct for the format and expects integer (x, y) coordinates as inputs.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_13

LANGUAGE: Go
CODE:
```
method (*Alpha) AlphaAt(int, int) color.Alpha
method (*Alpha16) Alpha16At(int, int) color.Alpha16
method (*Gray) GrayAt(int, int) color.Gray
method (*Gray16) Gray16At(int, int) color.Gray16
method (*NRGBA) NRGBAAt(int, int) color.NRGBA
method (*NRGBA64) NRGBA64At(int, int) color.NRGBA64
method (*RGBA) RGBAAt(int, int) color.RGBA
method (*RGBA64) RGBA64At(int, int) color.RGBA64
method (*YCbCr) YCbCrAt(int, int) color.YCbCr
```

----------------------------------------

TITLE: Implementation of Package D without Tests
DESCRIPTION: Package 'd' containing a Go implementation but no tests. It defines a constant FortyTwo and a function DFunc() that returns the constant.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_partial.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package d

const FortyTwo = 42

func DFunc() int {
  return FortyTwo
}
```

----------------------------------------

TITLE: Basic Go Test Command
DESCRIPTION: Simple command to run Go tests with additional verbosity using the -more flag.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code4.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -more
```

----------------------------------------

TITLE: Checking File Permissions in Go
DESCRIPTION: This Go script checks and prints the Unix-style permissions of the go.mod and go.sum files. It uses the os package to retrieve file information and formats the output to display permissions in octal notation, handling errors by printing them to stderr.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_permissions.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```

package main

import (
	"fmt"
	"os"
	_ "rsc.io/sampler"
)

func main() {
	for _, name := range []string{"go.mod", "go.sum"} {
		fi, err := os.Stat(name)
		if err != nil {
			fmt.Fprintf(os.Stderr, "%s: %v\n", err)
			continue
		}
		fmt.Printf("%s: 0%o\n", name, fi.Mode().Perm())
	}
}

```

----------------------------------------

TITLE: Module D1 Configuration
DESCRIPTION: Go.mod file for the first replacement of module 'd' (v0.1.0).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
module example.com/d
```

----------------------------------------

TITLE: Verifying Go Coverage Profile Path Contents (Shell)
DESCRIPTION: These shell commands use `grep` to check the contents of the generated coverage profile `blah.prof`. The first command verifies that the source file name (`prog.go`) is present. The second command checks for the presence of the current working directory path (`$PWD`), ensuring correct path resolution in the profile.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_localpkg_filepath.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# should not contain cmd-line pseudo-import-path
grep prog.go blah.prof
grep $PWD blah.prof
```

----------------------------------------

TITLE: Defining Mathematical Constants in Go
DESCRIPTION: Defines smallest non-zero constants for float32 and float64 data types in the math package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.17.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
const SmallestNonzeroFloat32 = 1.4013e-45
const SmallestNonzeroFloat64 = 4.94066e-324
```

----------------------------------------

TITLE: Negative Build Constraint in Go
DESCRIPTION: A Go file with a negative build constraint '!abc' that imports module 'z'. This file will be included in the build only when the 'abc' build tag is NOT specified.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
// +build !abc

package m

import _ "z"
```

----------------------------------------

TITLE: Checking Go Code Coverage with go tool cover (Bash)
DESCRIPTION: Runs the `go tool cover` command with the `-func` flag on a coverage profile file (`cover.out`). It then checks the standard output (`stdout`) to ensure it matches the pattern indicating 0.0% total statement coverage. This command sequence is typically used in automated tests or scripts to verify code coverage reports.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_mod_empty.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go tool cover -func=cover.out
stdout total.*statements.*0.0%
```

----------------------------------------

TITLE: Defining a Go Module
DESCRIPTION: This snippet defines a simple `go.mod` file for a Go module named `m`. This is used as a basic module declaration for testing purposes. It provides the module name to be used in other parts of the project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_cshared.txt#_snippet_3

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Implementing Simple Echo Command in Go
DESCRIPTION: A Go program that implements a simple echo command, which prints its command-line arguments joined by spaces. This is used as a substitute for the echo command on Windows.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_invalid.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main

import (
	"fmt"
	"os"
	"strings"
)

func main() {
	fmt.Println(strings.Join(os.Args[1:], " "))
	fmt.Println()
}
```

----------------------------------------

TITLE: Verifying Exit 0 Test Output in Go
DESCRIPTION: This snippet defines a test that exits with status 0. It's used to verify how 'go test -json' reports tests that exit successfully without running any actual tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_panic_exit.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package exit0_test

import (
	"os"
	"testing"
)

func TestMain(m *testing.M) {
	os.Exit(0)
}
```

----------------------------------------

TITLE: Basic Go Package with Quote Import
DESCRIPTION: Simple Go package that imports rsc.io/quote package for testing module exclusion scenarios.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_require_exclude.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package x
import _ "rsc.io/quote"
```

----------------------------------------

TITLE: External Test Implementation (x_test.go)
DESCRIPTION: External test file in p_test package that imports main package and p2 using relative paths to compare function outputs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_relative_cmdline.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package p_test

import (
	. "../testimport"

	"./p2"

	"testing"
)

func TestF1(t *testing.T) {
	if F() != p2.F() {
		t.Fatal(F())
	}
}
```

----------------------------------------

TITLE: Running Fuzz Tests with Error in Go
DESCRIPTION: This snippet defines a fuzz test that intentionally triggers an error. It demonstrates how to handle and report errors in fuzz testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_chatty.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package chatty_error_fuzz

import "testing"

func Fuzz(f *testing.F) {
    f.Error("error in target")
}
```

----------------------------------------

TITLE: Standalone Test in a Separate Package
DESCRIPTION: Defines a standalone test in the x_test package designed to test the functionality within package x. It sets up the framework for future expansions or testing implementations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_multiple_mains.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
package x_test

import "testing"

func TestX(t *testing.T) {}
```

----------------------------------------

TITLE: Testing Path Separators in Go Executables
DESCRIPTION: This snippet builds a Go executable and verifies that it doesn't contain Windows-style backslashes in paths. It checks for GOROOT, runtime, and drive letter references.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/slashpath.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go build -o hello.exe hello.go
! grep 'GOROOT\\' hello.exe
! grep '\\runtime' hello.exe
! grep 'runtime\\' hello.exe
! grep 'gofile..[A-Za-z]:\\' hello.exe
```

----------------------------------------

TITLE: Package Q Implementation
DESCRIPTION: Package 'q' implementation that depends on package 'p'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_relevant_dependency.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package q

import example.com/p

func Q() {
	p.P()
}
```

----------------------------------------

TITLE: Viewing Help for Specific Command in Go CLI
DESCRIPTION: This example shows how to view help information for a specific command, in this case, the 'wait' command. It provides targeted assistance for using particular CLI features.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/script_help.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
help wait
```

----------------------------------------

TITLE: Defining Main Module with Dependencies
DESCRIPTION: The go.mod file for the main module 'example.com/lazy' which requires example.com/a and example.com/b, with replacements for all dependencies to use local directories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/lazy

go 1.15

require (
	example.com/a v0.1.0
	example.com/b v0.3.0 // indirect
)

replace (
	example.com/a v0.1.0 => ./a
	example.com/b v0.1.0 => ./b1
	example.com/b v0.2.0 => ./b2
	example.com/b v0.3.0 => ./b3
	example.com/c v0.1.0 => ./c
	example.com/c v0.2.0 => ./c
)
```

----------------------------------------

TITLE: Main Module Configuration
DESCRIPTION: Root go.mod file defining module replacements for different versions of the badgo module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/badgo.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

replace (
	example.net/badgo v1.0.0 => ./v1.0.0
	example.net/badgo v1.1.0 => ./v1.1.0
	example.net/badgo v1.2.0 => ./v1.2.0
	example.net/badgo v1.3.0 => ./v1.3.0
	example.net/badgo v1.4.0 => ./v1.4.0
	example.net/badgo v1.5.0 => ./v1.5.0
	example.net/badgo v1.6.0 => ./v1.6.0
)
```

----------------------------------------

TITLE: CGo Package Implementation with Undefined Reference
DESCRIPTION: Go source file with CGo import containing a function with an undefined reference to function j()
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_build_failure.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p

import "C"

func h() {
	j()
}
```

----------------------------------------

TITLE: Comment parsing in text/template/parse package
DESCRIPTION: Types and constants for handling comments in templates. Includes NodeComment type for representing comments, ParseComments mode for enabling comment parsing, and CommentNode struct for storing comment text.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_14

LANGUAGE: go
CODE:
```
const NodeComment = 20
const NodeComment NodeType
const ParseComments = 1
const ParseComments Mode
method (*CommentNode) Copy() Node
method (*CommentNode) String() string
method (CommentNode) Position() Pos
method (CommentNode) Type() NodeType
type CommentNode struct
type CommentNode struct, Text string
type CommentNode struct, embedded NodeType
type CommentNode struct, embedded Pos
type Mode uint
type Tree struct, Mode Mode
```

----------------------------------------

TITLE: Covering Exported Functionality in a Test - Go
DESCRIPTION: This Go test file imports the 'testing' package and defines a single test function that prints the result of 'Mainer'. It serves to exercise coverage measurement on 'Mainer' and verify that test runs impact coverage. Running this test requires the Go toolchain and a complete main package as context.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_main_import_path.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main

import "testing"

func TestCoverage(t *testing.T) {
	println(Mainer())
}
```

----------------------------------------

TITLE: Parallel Fuzzing Test Implementation
DESCRIPTION: Implementation of two fuzzing test functions: FuzzSeed for testing parallel execution of seed inputs with mutex-protected state, and FuzzMutate for testing parallel execution behavior during mutation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_parallel.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package fuzz_parallel

import (
	"sort"
	"sync"
	"testing"
)

func FuzzSeed(f *testing.F) {
	for _, v := range [][]byte{{'a'}, {'b'}, {'c'}} {
		f.Add(v)
	}

	var mu sync.Mutex
	var before, after []byte
	f.Cleanup(func() {
		sort.Slice(after, func(i, j int) bool { return after[i] < after[j] })
		got := string(before) + string(after)
		want := "abcabc"
		if got != want {
			f.Fatalf("got %q; want %q", got, want)
		}
	})

	f.Fuzz(func(t *testing.T, b []byte) {
		before = append(before, b...)
		t.Parallel()
		mu.Lock()
		after = append(after, b...)
		mu.Unlock()
	})
}

func FuzzMutate(f *testing.F) {
	f.Fuzz(func(t *testing.T, _ []byte) {
		t.Parallel()
		t.Error("after T.Parallel")
	})
}
```

----------------------------------------

TITLE: Go Module JSON with Deprecation Field
DESCRIPTION: Shows the JSON representation of a module file with a deprecation notice. The deprecation message appears as a field in the Module object.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_16

LANGUAGE: json
CODE:
```
{
	"Module": {
		"Path": "m",
		"Deprecated": "and the new one is not ready yet"
	},
	"Require": null,
	"Exclude": null,
	"Replace": null,
	"Retract": null,
	"Tool": null
}
```

----------------------------------------

TITLE: Main Vendor Test Implementation
DESCRIPTION: Test file implementing vendor package testing using the fake package. Tests the DoNothing() function return value against expected output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue14613.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	"testing"

	"github.com/clsung/fake"
)

func TestVendor(t *testing.T) {
	ret := fake.DoNothing()
	expected := "Ok"
	if expected != ret {
		t.Errorf("fake returned %q, expected %q", ret, expected)
	}
}
```

----------------------------------------

TITLE: Adding Text Appending to big.Float in Go
DESCRIPTION: New method for appending text representation of big.Float in the math/big package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_16

LANGUAGE: Go
CODE:
```
func (*Float) AppendText([]uint8) ([]uint8, error)
```

----------------------------------------

TITLE: Testing Go Module with Missing Dependencies
DESCRIPTION: A simple Go module that imports rsc.io/quote package to test module cache behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_missing_ziphash.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package use

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Clearing Bad Sumdb Data in Go Module Cache
DESCRIPTION: This snippet shows how to clear bad sumdb data by removing the cached wrong tree head and cached tiles, allowing successful module fetching afterwards.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb.txt#2025-04-22_snippet_4

LANGUAGE: Shell
CODE:
```
rm $GOPATH/pkg/sumdb/$dbname/latest
go clean -modcache
go get rsc.io/fortune
```

----------------------------------------

TITLE: Testing t.Errorf() in Go Fuzz Tests
DESCRIPTION: This fuzz test function demonstrates how Go's fuzzing handles a call to t.Errorf(). It reports an error when the input is not 'aa'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
func FuzzWithErrorf(f *testing.F) {
	f.Add([]byte("aa"))
	f.Fuzz(func(t *testing.T, b []byte) {
		if string(b) != "aa" {
			t.Errorf("errorf was called here")
		}
	})
}
```

----------------------------------------

TITLE: Testing go work use recursive command
DESCRIPTION: Shell commands that run 'go work use -r .' and compare the resulting go.work file with an expected outcome (go.work.want).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_issue50958.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go work use -r .
cmp go.work go.work.want
```

----------------------------------------

TITLE: Declaring Module Version Metadata - JSON
DESCRIPTION: This .info snippet provides metadata about the module version in JSON format, listing the version as v1.0.0. This file is typically used by Go tools for version management and module resolution during builds, downloads, or proxy operations. It requires no additional dependencies and is automatically generated or referenced by official tooling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_ambiguous_other_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{\"Version\":\"v1.0.0\"}
```

----------------------------------------

TITLE: Testing Internal Package Import
DESCRIPTION: Tests that importing an internal package from outside its allowed scope results in an error on the importing package. Verifies that other/internal/p cannot be imported from unauthorized locations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_err.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package importinternal
import "other/internal/p"
```

----------------------------------------

TITLE: Testing go list command with empty module
DESCRIPTION: Tests that 'go list ./...' in an empty module doesn't try to resolve the main module. It verifies there's no unnecessary resolution attempt and confirms the proper warning is displayed exactly once.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
# 'go list ./...' should not try to resolve the main module.
cd ../empty
go list -deps ./...
! stdout .
! stderr 'finding'
stderr -count=1 '^go: warning: "./..." matched no packages'
```

----------------------------------------

TITLE: Testing Internal Package Import
DESCRIPTION: Tests importing a non-existent internal package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_internal.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package t

import _ "internal/does-not-exist"
```

----------------------------------------

TITLE: Testing 'go build' with Null Output (Shell)
DESCRIPTION: This script segment tests the behavior of `go build -o $devnull`. It changes back to the parent directory, runs `go build` on the `y` package, directing the output executable to the null device (`$devnull`), and then compares the null device with an empty file to ensure it remained unchanged. This addresses issue #12407. It depends on the `cmp` command and shell variables `$devnull` and `$WORK`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/devnull.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
# Issue 12407: go build -o /dev/null should succeed.
cd ..
go build -o $devnull y
cmp $devnull $WORK/empty.txt
```

----------------------------------------

TITLE: Verifying Import Path with Leading Dot
DESCRIPTION: This sequence of commands validates that an import path with a leading dot is handled correctly in the module system, checking that certain commands work and some produce appropriate errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
cd $WORK/gopath/src/dotname
go list ./.dot
stdout '^example.com/dotname/.dot$'
go list ./use
stdout '^example.com/dotname/use$'
! go list -m example.com/dotname/.dot@latest
stderr '^go: example.com/dotname/.dot@latest: malformed module path "example.com/dotname/.dot": leading dot in path element$'
go get example.com/dotname/.dot
go get example.com/dotname/use
go mod tidy
```

----------------------------------------

TITLE: Setting up Go environment for module testing
DESCRIPTION: This snippet sets up the Go environment for module testing by enabling modules, disabling the proxy, and turning off the checksum database.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_hash.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
env GOPROXY=direct
env GOSUMDB=off
```

----------------------------------------

TITLE: Running go vet with build tags
DESCRIPTION: This snippet demonstrates running go vet with a specific build tag. It expects an error message containing 'c.go.*Printf'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
! go vet -tags tagtest m/vetpkg
stderr 'c\.go.*Printf'
```

----------------------------------------

TITLE: Simple Go Package Implementation
DESCRIPTION: Basic Go package 'p' with a single exported function F() that doesn't do anything.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needall_v0.0.1.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p

func F() {}
```

----------------------------------------

TITLE: Declaring Init function in testing package
DESCRIPTION: Declaration of the Init function in the testing package. This function initializes the testing package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_173

LANGUAGE: go
CODE:
```
func Init()
```

----------------------------------------

TITLE: Expected Output on Windows
DESCRIPTION: Shows the expected output of the 'go env' command on Windows, demonstrating the different escaping mechanism compared to Unix systems.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_sanitize.txt#2025-04-22_snippet_4

LANGUAGE: batch
CODE:
```
[GOOS:windows] stdout 'set GOFLAGS=\$\(echo ''cc"''; echo ''OOPS="oops''\)'
```

----------------------------------------

TITLE: Installing Go Module with Readonly Flag
DESCRIPTION: Command to install a specific version of a module that depends on generics using the --mod=readonly flag. Sets GOTOOLCHAIN to local and attempts to install example.com/depends/on/generics@v1.0.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_dep_version.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GOTOOLCHAIN=local
```

LANGUAGE: shell
CODE:
```
go install --mod=readonly example.com/depends/on/generics@v1.0.0
```

----------------------------------------

TITLE: Running Go Program With Trimpath and Module Mode
DESCRIPTION: This snippet runs a Go program with -trimpath and -mod=mod flags, demonstrating that the behavior should be the same as with vendored code when trimmed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_trimpath.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go run -mod=mod -trimpath main.go
stdout '^example.com/stack@v1.0.0/stack.go$'
```

----------------------------------------

TITLE: Executing Go Module and Test Commands
DESCRIPTION: This snippet shows the commands to tidy the Go module dependencies and run a test compilation with race detection enabled. It also includes a check to ensure no package-finding errors occur.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_tag.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go mod tidy
go test -c -o=$devnull -race .

! stderr 'cannot find package'
```

----------------------------------------

TITLE: Internal Package Definition
DESCRIPTION: Defines a simple internal package that will be used in import testing. Package is placed in an internal directory to test access restrictions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_err.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p
```

----------------------------------------

TITLE: Adding Size method to PrivateKey and PublicKey in crypto/rsa package in Go
DESCRIPTION: Adds Size method to PrivateKey and PublicKey types in the crypto/rsa package. Both methods return an integer.
SOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
method (*PrivateKey) Size() int
method (*PublicKey) Size() int
```

----------------------------------------

TITLE: Creating Main Package Executables for Dependency Tools - Go
DESCRIPTION: These Go main package files define minimal main functions for dependency tools (bar and baz subcommands) in the example.com/dependency module. Each file allows its respective package to be built as a tool or binary, suitable for plugin or CLI usage within the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package main\n\nfunc main(){}\n
```

LANGUAGE: go
CODE:
```
package main\n\nfunc main() {}\n
```

----------------------------------------

TITLE: Testing Double Word Boundary Negation in Go Regexps
DESCRIPTION: Tests patterns with dual \B assertions to match positions that are not word boundaries on both sides. These tests verify how consecutive non-word boundary assertions behave together.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_7

LANGUAGE: regexp
CODE:
```
\B(foo|bar|[A-Z])\B
```

LANGUAGE: regexp
CODE:
```
^(?:\B(foo|bar|[A-Z])\B)$
```

LANGUAGE: regexp
CODE:
```
^(?:\B(foo|bar|[A-Z])\B)
```

LANGUAGE: regexp
CODE:
```
(?:\B(foo|bar|[A-Z])\B)$
```

----------------------------------------

TITLE: Package D Definition with Unsafe Import
DESCRIPTION: Package 'd' declaration with blank import of unsafe package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pattern_work.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package d

import _ "unsafe"
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module declaration
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fips.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Testing Beginning-of-Line Anchor Matching
DESCRIPTION: Tests patterns with beginning-of-line anchors (^abc) against various strings. Shows how leading anchors affect match positions with different pattern configurations.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_37

LANGUAGE: go
CODE:
```
"^abc"
-;-;-;-
-;0-3;-;0-3
"^(?:^abc)$"
-;-;-;-
-;-;-;-
"^(?:^abc)"
-;-;-;-
-;0-3;-;0-3
"(?:^abc)$"
-;-;-;-
-;-;-;-
```

----------------------------------------

TITLE: Generating Trace Tests in Go
DESCRIPTION: Explains how to generate trace tests using the go generate command in the current directory. The generated tests are placed in a 'tests' directory for the trace reader tests to find.
SOURCE: https://github.com/golang/go/blob/master/src/internal/trace/testdata/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go generate .
```

----------------------------------------

TITLE: Defining Main Module 'a' in Go
DESCRIPTION: This go.mod file defines the main module 'a' and its dependencies. It includes replace directives for various versions of modules b, c, d, and e.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example.net/a

go 1.16

require (
	example.net/b v0.3.0
	example.net/c v0.2.0
)

replace (
	example.net/b v0.1.0 => ./b1
	example.net/b v0.2.1-0.20210219000000-000000000000 => ./b2
	example.net/b v0.3.0 => ./b3
	example.net/c v0.1.0 => ./c1
	example.net/c v0.2.0 => ./c2
	example.net/d v0.1.0 => ./d
	example.net/d v0.2.0 => ./d
	example.net/e v0.1.0 => ./e
)
```

----------------------------------------

TITLE: Main Module Definition
DESCRIPTION: Main go.mod file defining the example module with dependencies and replacements for example.net/a and example.net/b packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patch.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example

go 1.16

require (
	example.net/a v0.1.0
	example.net/b v0.1.0  // indirect
)

replace (
	example.net/a v0.1.0 => ./a10
	example.net/a v0.1.1 => ./a11
	example.net/a v0.2.0 => ./a20
	example.net/a v0.2.1 => ./a21
	example.net/b v0.1.0 => ./b
	example.net/b v0.1.1 => ./b
	example.net/b v0.2.0 => ./b
	example.net/b v0.2.1 => ./b
	example.net/b v0.3.0 => ./b
	example.net/b v0.3.1 => ./b
)
```

----------------------------------------

TITLE: Testing Regular Expression Anchor and Group Combinations in Go
DESCRIPTION: This collection demonstrates various regular expression patterns with different combinations of anchors (^ and $) and non-capturing groups (?:). The data includes test strings and expected match positions indicated by the numbers (like 0-3) which represent character positions in the string where matches occur.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_40

LANGUAGE: regexp
CODE:
```
(?m)def$
```

LANGUAGE: regexp
CODE:
```
^(?:(?m)def$)$
```

LANGUAGE: regexp
CODE:
```
^(?:(?m)def$)
```

LANGUAGE: regexp
CODE:
```
(?:(?m)def$)$
```

LANGUAGE: regexp
CODE:
```
(?m)d[ex][fy]$
```

LANGUAGE: regexp
CODE:
```
^(?:(?m)d[ex][fy]$)$
```

LANGUAGE: regexp
CODE:
```
^(?:(?m)d[ex][fy]$)
```

LANGUAGE: regexp
CODE:
```
(?:(?m)d[ex][fy]$)$
```

LANGUAGE: regexp
CODE:
```
(?m)[dz][ex][fy]$
```

LANGUAGE: regexp
CODE:
```
^(?:(?m)[dz][ex][fy]$)$
```

LANGUAGE: regexp
CODE:
```
^(?:(?m)[dz][ex][fy]$)
```

LANGUAGE: regexp
CODE:
```
(?:(?m)[dz][ex][fy]$)$
```

LANGUAGE: regexp
CODE:
```
^
```

LANGUAGE: regexp
CODE:
```
^(?:^)$
```

LANGUAGE: regexp
CODE:
```
^(?:^)
```

LANGUAGE: regexp
CODE:
```
(?:^)$
```

LANGUAGE: regexp
CODE:
```
^^
```

LANGUAGE: regexp
CODE:
```
^(?:^^)$
```

LANGUAGE: regexp
CODE:
```
^(?:^^)
```

LANGUAGE: regexp
CODE:
```
(?:^^)$
```

LANGUAGE: regexp
CODE:
```
a
```

LANGUAGE: regexp
CODE:
```
^(?:a)$
```

LANGUAGE: regexp
CODE:
```
^(?:a)
```

LANGUAGE: regexp
CODE:
```
(?:a)$
```

LANGUAGE: regexp
CODE:
```
ab*
```

LANGUAGE: regexp
CODE:
```
^(?:ab*)$
```

LANGUAGE: regexp
CODE:
```
^(?:ab*)
```

LANGUAGE: regexp
CODE:
```
(?:ab*)$
```

LANGUAGE: regexp
CODE:
```
a\C*
```

LANGUAGE: regexp
CODE:
```
^(?:a\C*)$
```

LANGUAGE: regexp
CODE:
```
^(?:a\C*)
```

LANGUAGE: regexp
CODE:
```
(?:a\C*)$
```

LANGUAGE: regexp
CODE:
```
a\C+
```

LANGUAGE: regexp
CODE:
```
^(?:a\C+)$
```

LANGUAGE: regexp
CODE:
```
^(?:a\C+)
```

LANGUAGE: regexp
CODE:
```
(?:a\C+)$
```

LANGUAGE: regexp
CODE:
```
a\C?
```

LANGUAGE: regexp
CODE:
```
^(?:a\C?)$
```

LANGUAGE: regexp
CODE:
```
^(?:a\C?)
```

LANGUAGE: regexp
CODE:
```
(?:a\C?)$
```

LANGUAGE: regexp
CODE:
```
a\C*?
```

LANGUAGE: regexp
CODE:
```
^(?:a\C*?)$
```

LANGUAGE: regexp
CODE:
```
^(?:a\C*?)
```

LANGUAGE: regexp
CODE:
```
(?:a\C*?)$
```

LANGUAGE: regexp
CODE:
```
a\C+?
```

LANGUAGE: regexp
CODE:
```
^(?:a\C+?)$
```

LANGUAGE: regexp
CODE:
```
^(?:a\C+?)
```

LANGUAGE: regexp
CODE:
```
(?:a\C+?)$
```

LANGUAGE: regexp
CODE:
```
a\C??
```

LANGUAGE: regexp
CODE:
```
^(?:a\C??)$
```

LANGUAGE: regexp
CODE:
```
^(?:a\C??)
```

LANGUAGE: regexp
CODE:
```
(?:a\C??)$
```

LANGUAGE: regexp
CODE:
```
a\C*|ba\C
```

LANGUAGE: regexp
CODE:
```
^(?:a\C*|ba\C)$
```

LANGUAGE: regexp
CODE:
```
^(?:a\C*|ba\C)
```

LANGUAGE: regexp
CODE:
```
(?:a\C*|ba\C)$
```

LANGUAGE: regexp
CODE:
```
\w*I\w*
```

LANGUAGE: regexp
CODE:
```
^(?:\w*I\w*)$
```

LANGUAGE: regexp
CODE:
```
^(?:\w*I\w*)
```

LANGUAGE: regexp
CODE:
```
(?:\w*I\w*)$
```

LANGUAGE: regexp
CODE:
```
(?:|a)*
```

LANGUAGE: regexp
CODE:
```
^(?:(?:|a)*)$
```

LANGUAGE: regexp
CODE:
```
^(?:(?:|a)*)
```

LANGUAGE: regexp
CODE:
```
(?:(?:|a)*)$
```

LANGUAGE: regexp
CODE:
```
(?:|a)+
```

LANGUAGE: regexp
CODE:
```
^(?:(?:|a)+)$
```

LANGUAGE: regexp
CODE:
```
^(?:(?:|a)+)
```

LANGUAGE: regexp
CODE:
```
(?:(?:|a)+)$
```

----------------------------------------

TITLE: Handling Unknown Fields in Go Environment File
DESCRIPTION: This snippet tests the behavior of 'go env -w' and 'go env -u' with unknown fields that are already present in the go/env file. It demonstrates reading, writing, and unsetting these fields.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_11

LANGUAGE: bash
CODE:
```
# go env -w and go env -u work on unknown fields already in the go/env file
cp bad.env $GOENV
go env GOENV
cat $GOENV
go env
! stdout UNKNOWN
go env UNKNOWN
stdout yes
go env -w UNKNOWN=maybe
go env UNKNOWN
stdout maybe
go env -u UNKNOWN
go env UNKNOWN
! stdout . # gone
```

----------------------------------------

TITLE: Module A Configuration with External Dependency
DESCRIPTION: Module configuration for example.com/a that includes a dependency on rsc.io/quote v1.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue54372.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/a

go 1.21

require rsc.io/quote v1.1.0
```

----------------------------------------

TITLE: Importing Internal Package in Go
DESCRIPTION: Go source file that imports an internal package from another module. Uses a blank import of 'golang.org/x/internal/subtle' to demonstrate accessing an internal package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_useinternal_v0.1.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package useinternal

import _ "golang.org/x/internal/subtle"
```

----------------------------------------

TITLE: Checking error for current directory
DESCRIPTION: Uses 'go list' to check the error message for the current directory, which should indicate no Go files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_empty_err.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go list -e -f {{.Error}} .
stdout 'no Go files in '$WORK
```

----------------------------------------

TITLE: Defining a Simple Function in Go Package p1
DESCRIPTION: This Go snippet defines a package (p1) within the coverdep2 module and provides a simple function F that returns the integer 1. This function is used by other packages to test cross-package function calls. No external dependencies are required beyond Go itself.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dep_loop.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package p1

func F() int { return 1 }
```

----------------------------------------

TITLE: Fetching a Specific Go Module Version with go get (Shell)
DESCRIPTION: Downloads and installs version 2 (`v2`) of the `rsc.io/fortune` package using the `go get` command. The `/v2` suffix in the import path specifies the major version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_install_versioned.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go get rsc.io/fortune/v2
```

----------------------------------------

TITLE: Main Entry Point for Hello World Program in Go
DESCRIPTION: The Go snippet defines the main entry point of a program that prints 'hello'. It showcases a simple program that integrates with CGO, indicating a basic understanding of CGO usage in a Go application. The code requires a Go runtime for execution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_dash_x.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

import "C"

func main() {
	print("hello\n")
}

```

----------------------------------------

TITLE: Executing 'go get' Command for Dependency Resolution in Go
DESCRIPTION: This snippet shows the execution of 'go get' command to fetch a specific version of a module. It's used to test if the command can handle cycles in the pruned module graph without causing an infinite loop.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue60490.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go get example.net/c@v0.1.0
```

----------------------------------------

TITLE: Module Definition in Go
DESCRIPTION: Defines the Go module named 'cov'. This file sets the module path necessary for Go module management and dependency handling. Must be placed at the root of the project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_nocoverpkg.txt#2025-04-22_snippet_2

LANGUAGE: Golang
CODE:
```
-- go.mod --
module cov
```

----------------------------------------

TITLE: Testing Basic Regexp Escaping in Go
DESCRIPTION: Tests regular expression patterns with escaped characters like dollar signs. Shows how capturing groups and anchors affect matching positions.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_25

LANGUAGE: go
CODE:
```
"(foo\\$)"
-;-;-;-
-;0-4 0-4;-;0-4 0-4
"^(?:(foo\\$))$"
-;-;-;-
-;-;-;-
"^(?:(foo\\$))"
-;-;-;-
-;0-4 0-4;-;0-4 0-4
"(?:(foo\\$))$"
-;-;-;-
-;-;-;-
```

----------------------------------------

TITLE: Initial Main Module Source (Go)
DESCRIPTION: The initial version of the main program (`m.go`). It imports package `a` only for its side effects (indicated by `_`). The test dependency within `a` (`a_test.go`) imports `b/x`, making `b` initially a test-only dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
-- m.go --
package main

import (
	"fmt"

	_ "a"  // a_test imports b/x.
)

func main() {
}
```

----------------------------------------

TITLE: Defining Network Interface Type Constants in Go for NetBSD ARM64
DESCRIPTION: This snippet defines constants for various network interface types (IFT_*) used in the syscall package for NetBSD ARM64 with CGO. These constants represent different types of network interfaces and their corresponding numeric values.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_28

LANGUAGE: Go
CODE:
```
const IFT_SONETPATH = 50
const IFT_SONETPATH ideal-int
const IFT_SONETVT = 51
const IFT_SONETVT ideal-int
const IFT_SRP = 151
const IFT_SRP ideal-int
// ... more IFT_* constants
```

----------------------------------------

TITLE: Running Go Test Command with Coverage Pattern
DESCRIPTION: This shell script tests the Go test command's behavior with the -coverpkg flag using a package pattern. It verifies that the command uses pattern matching rather than package loading, which would otherwise fail when encountering the invalid 'sleepybad' package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pattern.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go list m/sleepy...
go test -c -n -coverprofile=$TMPDIR/cover.out -coverpkg=m/sleepy... -run=^$ m/sleepy1
```

----------------------------------------

TITLE: Defining UNIX_PATH_MAX Constant in Windows Go Syscalls
DESCRIPTION: This snippet declares the UNIX_PATH_MAX constant, representing the maximum length for a file path in the Unix domain sockets, defined here for use in Windows architecture. This constant helps to ensure compatibility between platforms when dealing with socket paths in Go system programming.
SOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_16

LANGUAGE: Go
CODE:
```
const UNIX_PATH_MAX = 108
const UNIX_PATH_MAX ideal-int
```

----------------------------------------

TITLE: Defining Test Dependency Package 'x/fromotherroottest' (Go)
DESCRIPTION: Defines the empty package `x/fromotherroottest` within the `x` module. This package is imported only by the tests of package `x/otherroot` (`x/otherroot/otherroot_test.go`) and is used to test the `-test` flag's behavior with explicitly listed root packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
-- x/fromotherroottest/fromotherroottest.go --
package fromotherroottest
```

----------------------------------------

TITLE: Building a Simple Hello World Application
DESCRIPTION: This Go code snippet initializes a main function that outputs 'hello v1.1' to the console. The 'fmt' package is imported as a dependency for printing strings to the standard output. This snippet is intended for users learning basics of Go, with no additional parameters or complex logic.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_tools_v1.1.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package main

import "fmt"

func main() {
	fmt.Println("hello v1.1")
}
```

----------------------------------------

TITLE: Defining Expected Module Version List for modtest5
DESCRIPTION: Defines the content of the file '$WORK/modtest5.list'. This file lists the specific versions of 'github.com/dmitshur-test/modtest5' expected to be present in the module cache/proxy list file. It is used by the 'cmp' command for verification.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_9

LANGUAGE: text
CODE:
```
-- $WORK/modtest5.list --
v0.0.0-20190619020302-197a620e0c9a
v0.5.0-alpha
v0.5.0-alpha.0.20190619023908-3da23a9deb9e
```

----------------------------------------

TITLE: Declaring Go Module and Go Version - Go
DESCRIPTION: Declares the 'example.com/retract/rationale' Go module and specifies Go 1.14 as the minimum supported version. This is necessary for dependency management, go command support, and version tracking. No parameters are required; the module name and version are hardcoded. The file is commonly used as the entry point for any Go module-based project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-long.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/retract/rationale\n\ngo 1.14
```

----------------------------------------

TITLE: Main Path Volume Manipulation Program
DESCRIPTION: Main program that handles path volume modifications and executes a child Go program. Takes GOPATH arguments, modifies volume cases, and executes a vendored package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_gopath_issue11409.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

func changeVolume(s string, f func(s string) string) string {
	vol := filepath.VolumeName(s)
	return f(vol) + s[len(vol):]
}

func main() {
	gopath := changeVolume(os.Args[1], strings.ToLower)
	dir := changeVolume(os.Args[2], strings.ToUpper)
	cmd := exec.Command("go", "run", "hello.go")
	cmd.Dir = dir
	cmd.Env = append(os.Environ(), "GOPATH="+gopath)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Run(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: TestMain Function with Flag Handling in Go
DESCRIPTION: This snippet demonstrates a TestMain function that accesses testing flags. It parses flags and checks for the presence of a specific testing flag (test.count) to ensure proper flag registration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package standalone_testmain_flag_test

import (
	"flag"
	"fmt"
	"os"
	"testing"
)

func TestMain(m *testing.M) {
	// A TestMain should be able to access testing flags if it calls
	// flag.Parse without needing to use testing.Init.
	flag.Parse()
	found := false
	flag.VisitAll(func(f *flag.Flag) {
		if f.Name == "test.count" {
			found = true
		}
	})
	if !found {
		fmt.Println("testing flags not registered")
		os.Exit(1)
	}
	os.Exit(m.Run())
}
```

----------------------------------------

TITLE: Baud Rate Constants in NetBSD ARM64 Syscall Package
DESCRIPTION: Baud rate constants used for serial communication in NetBSD ARM64. These constants define standard baud rates like 600, 7200, 9600, etc. used in terminal and serial port configurations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_9

LANGUAGE: Go
CODE:
```
const B57600 ideal-int
const B600 = 600
const B600 ideal-int
const B7200 = 7200
const B7200 ideal-int
const B75 = 75
const B75 ideal-int
const B76800 = 76800
const B76800 ideal-int
const B921600 = 921600
const B921600 ideal-int
const B9600 = 9600
const B9600 ideal-int
```

----------------------------------------

TITLE: Defining Add Function in Image Package
DESCRIPTION: Introduces a function Add in the image package, which returns the sum of two integers. It demonstrates how to include basic arithmetic functionality in the package, making it available under the vendor directory for module 'test'. This requires the go.mod file in the parent directory and utilizes the vendor directory setup.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_issue35270.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module test
```

LANGUAGE: Go
CODE:
```
package image
func Add(a, b int) int {
    return a + b
}
```

LANGUAGE: Go
CODE:
```
package main

import (
    "image"
)

func main() {
    println(image.Add(1,1))
}
```

----------------------------------------

TITLE: Initializing Localized Greetings in Go
DESCRIPTION: This code initializes a variable 'hello' with localized greetings in English, French, and Spanish using a custom text structure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
var hello = newText(`

English: en: Hello, world.
French: fr: Bonjour le monde.
Spanish: es: Hola Mundo.

`)
```

----------------------------------------

TITLE: Defining Empty go.mod for i Module - mod
DESCRIPTION: This file marks the presence of the i module by providing a go.mod file without content. Its primary function is to allow the module to be referenced via require statements and imports within the dependency graph. It does not declare dependencies or configurations, only the module's existence.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_11

LANGUAGE: mod
CODE:
```

```

----------------------------------------

TITLE: Defining Toolchain Version Metadata with JSON - JSON
DESCRIPTION: This snippet provides the toolchain version information in JSON format. The Version field specifies the toolchain version, operating system, and architecture. It is used for dependency management and toolchain identification. Input is a static JSON object, and output is typically consumed by Go's tooling for version verification.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.3.linux-amd64.txt#2025-04-22_snippet_0

LANGUAGE: JSON
CODE:
```
{\"Version\":\"v0.0.1-go1.22.3.linux-amd64\"}
```

----------------------------------------

TITLE: Setting GOEXPERIMENT=nofieldtrack via Environment Command Syntax
DESCRIPTION: This snippet demonstrates setting the GOEXPERIMENT environment variable to 'nofieldtrack' using a specific testing or configuration syntax. This configuration likely disables the 'fieldtrack' experimental feature in the Go compiler or runtime for the execution context defined by 'env'. It tests the acceptance of the 'nofieldtrack' flag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/check_goexperiment.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
[GOEXPERIMENT:nofieldtrack] env
```

----------------------------------------

TITLE: Defining Memory Advice Constants in Go for OpenBSD 386 CGO
DESCRIPTION: This snippet defines constants for memory advice flags used in system calls like madvise(). These constants control how the kernel should handle memory pages.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_45

LANGUAGE: Go
CODE:
```
const MADV_DONTNEED = 4
const MADV_DONTNEED ideal-int
const MADV_FREE = 6
const MADV_FREE ideal-int
const MADV_NORMAL = 0
const MADV_NORMAL ideal-int
const MADV_RANDOM = 1
const MADV_RANDOM ideal-int
const MADV_SEQUENTIAL = 2
const MADV_SEQUENTIAL ideal-int
const MADV_WILLNEED = 3
const MADV_WILLNEED ideal-int
```

----------------------------------------

TITLE: Setting Git Environment Variables for Repository Creation
DESCRIPTION: Sets Git environment variables for author and committer information before initializing a repository. This ensures consistent authorship information across all commits in the test repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-new.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GIT_AUTHOR_NAME='Russ Cox'
env GIT_AUTHOR_EMAIL='rsc@golang.org'
env GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
env GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL

git init

at 2018-04-25T11:00:57-04:00
git add go.mod new.go p1 p2
git commit -m 'initial commit'
git branch -m master

git log --oneline --decorate=short
cmp stdout .git-log
```

----------------------------------------

TITLE: TestMain Function Not Calling os.Exit in Go
DESCRIPTION: This snippet shows a TestMain function that doesn't call os.Exit directly. Instead, it uses a defer and panic to handle the exit code, which is not the recommended approach and may cause issues with test execution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package standalone_testmain_not_call_os_exit_test

import (
	"testing"
)

func TestWillFail(t *testing.T) {
	t.Error("this test will fail.")
}

func TestMain(m *testing.M) {
	defer func() {
		recover()
	}()
	exit := m.Run()
	panic(exit)
}
```

----------------------------------------

TITLE: Defining Terminal I/O Constants in Go for Darwin ARM64 CGO
DESCRIPTION: This snippet defines constants related to terminal I/O operations for the syscall package on Darwin ARM64 with CGO. These constants are used for configuring terminal settings and behavior.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_139

LANGUAGE: Go
CODE:
```
const BRKINT = 2
const CFLUSH = 15
const CLOCAL = 32768
const CREAD = 2048
const CS5 = 0
const CS6 = 256
const CS7 = 512
const CS8 = 768
const CSIZE = 768
const CSTART = 17
const CSTATUS = 20
const CSTOP = 19
const CSTOPB = 1024
const CSUSP = 26
```

----------------------------------------

TITLE: ELF-specific DWARF reader implementation
DESCRIPTION: Platform-specific implementation for reading DWARF debug information from ELF binaries on Unix-like systems. The build tag specifies which operating systems use this implementation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_cgo.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
// +build android dragonfly freebsd illumos linux netbsd openbsd solaris

package main

import (
	"debug/dwarf"
	"debug/elf"
)

func readDWARF(exePath string) (*dwarf.Data, error) {
	elfFile, err := elf.Open(exePath)
	if err != nil {
		return nil, err
	}
	defer elfFile.Close()
	return elfFile.DWARF()
}
```

----------------------------------------

TITLE: Testing GOPATH/pkg/mod exclusion with GO111MODULE=off
DESCRIPTION: A shell script that tests if Go properly prevents access to packages in GOPATH/pkg/mod when modules are disabled. It sets GO111MODULE to off, attempts to list a package in mod/foo, and verifies that an error message about disallowed import paths is returned.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_mod.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Test that GOPATH/pkg/mod is excluded
env GO111MODULE=off
! go list mod/foo
stderr 'disallowed import path'
```

----------------------------------------

TITLE: Verifying Concurrent Compilation Settings in Go Build Command
DESCRIPTION: Test script that checks if cmd/go enables concurrent compilation by default. It first resets all GOEXPERIMENT settings to ensure no interference, sets GOMAXPROCS to 4, and verifies the build command includes the concurrent compilation flag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_concurrent_backend.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Tests golang.org/issue/48490
# cmd/go should enable concurrent compilation by default

# Reset all experiments, since one of them can disable
# concurrent compilation, e.g: fieldtrack.
env GOEXPERIMENT=none

env GOMAXPROCS=4
go build -n -x -a fmt
stderr ' -c=4 '
```

----------------------------------------

TITLE: Creating and Switching Branches for Version Management
DESCRIPTION: Creates version branches v1.0.0 and v2.0.0, then checks out v1.0.0 branch. Copies a file from v1/pkg/ directory and commits changes to develop toward v1.0.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
git branch 'v1.0.0'
git branch 'v2.0.0'
git checkout 'v1.0.0'
cp v1/pkg/pkg.go pkg/pkg.go
git commit -a -m 'pkg: start developing toward v1.0.0'
```

----------------------------------------

TITLE: Defining Sysctlnode Structure in Go for NetBSD ARM64
DESCRIPTION: Definition of the Sysctlnode struct used for the sysctl interface in NetBSD. It contains fields for node name, number, flags, and various function pointers for sysctl operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_107

LANGUAGE: Go
CODE:
```
type Sysctlnode struct {
    Flags uint32
    Num int32
    Name [32]int8
    Ver uint32
    X__rsvd uint32
    Un [16]uint8
    X_sysctl_size [8]uint8
    X_sysctl_func [8]uint8
    X_sysctl_parent [8]uint8
    X_sysctl_desc [8]uint8
}
```

----------------------------------------

TITLE: Defining Go Source File with Dependency (Go)
DESCRIPTION: Defines a simple Go source file (`use/use.go`) for package `use`. This package imports `example.com/badchain/c` for its side effects (using the blank identifier `_`). This file is used in tests where listing this package triggers dependency resolution errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
-- use/use.go --
package use

import _ "example.com/badchain/c"
```

----------------------------------------

TITLE: Defining Use Package in Go
DESCRIPTION: This snippet defines a Go package named 'use' that imports a package from the retracted module being tested.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_retract.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package use

import _ "example.com/retract/self/prev"
```

----------------------------------------

TITLE: Tidied Module Configuration
DESCRIPTION: The expected state of go.mod after running 'go mod tidy', showing the pruned dependencies and retained indirect dependency on module c.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_newroot.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.net/a

go 1.16

require (
	example.net/c v0.2.0 // indirect
	example.net/d v0.1.0
)

replace (
	example.net/b v0.1.0 => ./b
	example.net/c v0.1.0 => ./c
	example.net/c v0.2.0 => ./c
	example.net/d v0.1.0 => ./d
)
```

----------------------------------------

TITLE: Defining Go Module and Test File
DESCRIPTION: This snippet defines a Go module and a test file. The test file includes flag definitions and test functions that log timeout and argument information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flags.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
-- go.mod --
module example.com
go 1.14
-- x/x_test.go --
package x

import (
	"flag"
	"strings"
	"testing"
)

var _ = flag.String("usage_message", "", "dummy flag to check usage message")
var boolflag = flag.Bool("boolflag", false, "ignored boolean flag")
var stringflag = flag.String("stringflag", "", "ignored string flag")

func TestLogTimeout(t *testing.T) {
	t.Logf("timeout: %v", flag.Lookup("test.timeout").Value)
}

func TestLogArgs(t *testing.T) {
	t.Logf("args: %s", strings.Join(flag.Args(), " "))
}
```

----------------------------------------

TITLE: Go Program for Checking Runtime GOROOT
DESCRIPTION: This Go program verifies the runtime.GOROOT() value against an expected value. It handles symlinks and performs a case-insensitive comparison to ensure the correct GOROOT is detected at runtime.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goroot_executable.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package main

import (
	"fmt"
	"os"
	"path/filepath"
	"runtime"
	"strings"
)

func main() {
	goroot, err := filepath.EvalSymlinks(runtime.GOROOT())
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	want, err := filepath.EvalSymlinks(os.Args[1])
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if !strings.EqualFold(goroot, want) {
		fmt.Fprintf(os.Stderr, "go env GOROOT:\nhave %s\nwant %s\n", goroot, want)
		os.Exit(1)
	}
	fmt.Fprintf(os.Stderr, "go env GOROOT: %s\n", goroot)

}
```

----------------------------------------

TITLE: Executing `go list` with Unreadable Directory (Shell)
DESCRIPTION: This snippet tests the behavior of `go list ./...` when a directory (`_data`) is unreadable. First, it changes the permissions of the `_data` directory to 000 (no read, write, or execute permissions) using `chmod 0 _data`. Then, it runs `go list ./...`. The test is designed to be skipped under certain conditions: when run as root (`[root] skip`), on Windows (`[GOOS:windows] skip`), or on Plan 9 (`[GOOS:plan9] skip`). The comment `# go list should work with unreadable _data directory.` clarifies the purpose, and `! stdout _data` indicates the expected standard output should *not* contain references related to the unreadable `_data` directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_perm.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
# skip in conditions where chmod 0 may not work.
# plan9 should be fine, but copied from list_perm.txt unchanged.
[root] skip
[GOOS:windows] skip
[GOOS:plan9] skip

# go list should work with unreadable _data directory.
chmod 0 _data
go list ./...
! stdout _data
```

----------------------------------------

TITLE: Selecting Self-Retracted Latest Version using Go List
DESCRIPTION: Checks that 'go list -m -retracted mod@latest' correctly provides the self-retracted latest version of a module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_8

LANGUAGE: Go
CODE:
```
# 'go list -m -retracted mod@latest' selects the self-retracted latest version.\ngo list -m -retracted -f '{{.Version}}{{with .Retracted}} retracted{{end}}' example.com/retract/self/prev@latest\nstdout '^v1.9.0 retracted$'
```

----------------------------------------

TITLE: Importing Dependent Modules
DESCRIPTION: This Go file imports the bad114 and need117 modules as blank imports.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package m

import _ "example.net/bad114"
import _ "example.net/need117"
```

----------------------------------------

TITLE: Module A Configuration
DESCRIPTION: Go module configuration for module 'a' with dependencies and replacements
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go 1.18

module example.com/a

require (
	example.com/p v1.0.0
	example.com/q v1.1.0
	example.com/r v1.0.0
)

replace (
	example.com/p => ../p
	example.com/q => ../q
	example.com/r => ../r
)
```

----------------------------------------

TITLE: Providing Module Version Metadata - JSON
DESCRIPTION: This JSON snippet provides version metadata for the Go module, indicating the version as v1.0.0. It is used as module metadata typically generated by the Go module proxy. No dependencies are needed to interpret this except JSON parsing. Inputs and outputs are static, and the structure is limited to basic version information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_missingmod_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
{\"Version\":\"v1.0.0\"}
```

----------------------------------------

TITLE: Go Module B Definition
DESCRIPTION: Module definition for example.com/b
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_overlay.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.com/b
```

----------------------------------------

TITLE: Basic Test Function in Go
DESCRIPTION: This test file shows a simple test function using the 'testing' package in Go. It tests the function F from package 'p'. The test does not conduct much logic except calling the function to ensure it builds and runs. Dependencies: Go's testing framework. Limitations: Function F has no logic to test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_sync_atomic_import.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p

import "testing"

func Test(t *testing.T) {
	F()
}
```

----------------------------------------

TITLE: Disabling VCS Stamping with -buildvcs=false
DESCRIPTION: This snippet installs a Go binary with the -buildvcs=false flag, which should suppress the VCS information in the resulting binary. The test asserts that 'hgrevision' is not present in the output of `go version -m`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_5

LANGUAGE: Shell
CODE:
```
go install -buildvcs=false
go version -m $GOBIN/a$GOEXE
! stdout hgrevision
stdout '\s+mod\s+example.com/a\s+\(devel\)'
rm $GOBIN/a$GOEXE
```

----------------------------------------

TITLE: Level1b Package Implementation
DESCRIPTION: Level1b package implementation with similar conflicting imports to level1a.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_59905.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package level1b

import (
	"test/main/level1b/level2x"
	"test/main/level1b/level2y"
)

func Print() { println(level2x.Value, level2y.Value) }
```

----------------------------------------

TITLE: Module B1 Configuration
DESCRIPTION: Go.mod file for the first replacement of module 'b' (v0.1.0) which requires module 'd' at version v0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.com/b
require example.com/d v0.1.0
```

----------------------------------------

TITLE: Defining Test Dependency for Package 'a' in Go
DESCRIPTION: This Go test file belongs to package 'a_test'. It imports package 'b', creating a dependency that is only relevant when running tests for package 'a' (or modules that depend on 'a'). This specific import introduces the path `a_test -> b`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
-- a1/a_test.go --
package a_test

import _ "b"
```

----------------------------------------

TITLE: Defining Go Module Metadata in .mod File
DESCRIPTION: This snippet specifies the Go module's path using the 'module' directive, which is essential for Go's dependency management system. The specified value ('example.com/pseudoupgrade') uniquely identifies this module. There are no dependencies or imports listed, and no parameters are accepted. The file must be named 'go.mod' and placed at the module root for proper operation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_pseudoupgrade_v0.1.1-0.20190429073117-b5426c86b553.txt#2025-04-22_snippet_1

LANGUAGE: INI
CODE:
```
module example.com/pseudoupgrade
```

----------------------------------------

TITLE: Declaring the Go Module Path
DESCRIPTION: This snippet defines the module path for the Go project using the `module` directive in a `go.mod` file. It establishes `github.com/dmitshur-test/modtest5` as the canonical import path for packages within this module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/github.com_dmitshur-test_modtest5_v0.5.0-alpha.txt#2025-04-22_snippet_0

LANGUAGE: go.mod
CODE:
```
module github.com/dmitshur-test/modtest5
```

----------------------------------------

TITLE: Compiling Go Test Binaries
DESCRIPTION: This snippet compiles multiple Go test binaries in parallel using the go test -c command. It creates executables for different test scenarios including mainpanic, mainexit0, testpanic, and testbgpanic.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go test -c -o mainpanic.exe ./mainpanic &
go test -c -o mainexit0.exe ./mainexit0 &
go test -c -o testpanic.exe ./testpanic &
go test -c -o testbgpanic.exe ./testbgpanic &
wait
```

----------------------------------------

TITLE: Module B Configurations
DESCRIPTION: Go module configurations for different versions of example.com/b with varying Go version requirements
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.com/b
go 1.22
```

LANGUAGE: go
CODE:
```
module example.com/b
go 1.23rc1
```

LANGUAGE: go
CODE:
```
module example.com/b
go 1.27
```

----------------------------------------

TITLE: Declaring the Main Module for Coverage Testing - Go Modules
DESCRIPTION: This go.mod snippet defines the module name as 'mainwithtest' and specifies Go version 1.20 for the build. This is a standard Go module definition required for project builds and tooling, and is necessary for proper dependency tracking.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_main_import_path.txt#2025-04-22_snippet_1

LANGUAGE: mod
CODE:
```
module mainwithtest

go 1.20
```

----------------------------------------

TITLE: Testing Go Module Version Compatibility with Local Toolchain
DESCRIPTION: This snippet sets the GOTOOLCHAIN environment variable to 'local' and attempts to build the current package. It expects the build to fail with an error message indicating that go.mod requires a newer Go version than the one running.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GOTOOLCHAIN=local
! go build .
stderr '^go: go.mod requires go >= 1.99999 \(running go 1\..+\)$'
```

----------------------------------------

TITLE: Defining Go Module (Go Module)
DESCRIPTION: This `go.mod` file defines a Go module named `m` and specifies that the code requires Go version 1.16 or later. It serves as the root configuration for the Go project containing the test files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_simple.txt#2025-04-22_snippet_1

LANGUAGE: gomod
CODE:
```
-- go.mod --
module m

go 1.16
```

----------------------------------------

TITLE: Using Enhanced Unicode Character Classes in Go
DESCRIPTION: The \p{name} and \P{name} character class syntaxes now support additional names and aliases, including Any, ASCII, Assigned, Cn, and LC. They also implement case-insensitive name lookups, ignoring spaces, underscores, and hyphens, as per Unicode TR18.
SOURCE: https://github.com/golang/go/blob/master/doc/next/6-stdlib/99-minor/regexp/syntax/70781.md#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
\p{name}
```

LANGUAGE: Go
CODE:
```
\P{name}
```

LANGUAGE: Go
CODE:
```
\p{Letter}
```

LANGUAGE: Go
CODE:
```
\pL
```

----------------------------------------

TITLE: Go Module Configuration
DESCRIPTION: This snippet shows the go.mod file configuration for the project, including module requirements and replacements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
module m

go 1.13

require (
	a v1.0.0
	diamondroot v0.0.0
	mysite/myname/mypkg v1.0.0
	w v1.0.0 // indirect
	x v1.0.0
	y v1.0.0
	z v1.0.0
)

replace (
	a v1.0.0 => ./a
	diamondleft => ./diamondleft
	diamondpoint => ./diamondpoint
	diamondright => ./diamondright
	diamondroot => ./diamondroot
	mysite/myname/mypkg v1.0.0 => ./mypkg
	w v1.0.0 => ./w
	x v1.0.0 => ./x
	y v1.0.0 => ./y
	z v1.0.0 => ./z
)
```

----------------------------------------

TITLE: Standalone Module Dependency Check in Go
DESCRIPTION: This snippet checks that an initial standalone Go module does not use any downloaded modules. It uses the "go list" command to inspect the dependencies and ensures the output does not include 'pkg/mod', indicating no external modules were used.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_multirepo.txt#2025-04-22_snippet_0

LANGUAGE: Bash
CODE:
```
env GO111MODULE=on
go list -deps -f {{.Dir}}
! stdout 'pkg[\/]mod'
```

----------------------------------------

TITLE: Testing Package Extensions for Test Names and Coverage
DESCRIPTION: Functions and methods for the testing package that provide test naming, coverage mode reporting, and main test initialization. Enhances the testing framework with additional capabilities.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_18

LANGUAGE: go
CODE:
```
// testing functions and methods
func CoverMode() string
func MainStart(testDeps, []InternalTest, []InternalBenchmark, []InternalExample) *M
func (*B) Name() string
func (*T) Name() string

type TB interface {
    Name() string
}
```

----------------------------------------

TITLE: Verifying go test bench header output using shell commands
DESCRIPTION: A shell script that tests if 'go test -bench' correctly prints GOOS, GOARCH, and package information in the output header, and ensures package information is not duplicated.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_labels.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# Tests that go test -bench prints out goos, goarch, and pkg.

# Check for goos, goarch, and pkg.
go test -run ^$ -bench . bench
stdout '^goos: '$GOOS
stdout '^goarch: '$GOARCH
stdout '^pkg: bench'

# Check go test does not print pkg multiple times
! stdout 'pkg:.*pkg: '
! stderr 'pkg:.*pkg:'
```

----------------------------------------

TITLE: Defining Additional Root Package 'x/otherroot' (Go)
DESCRIPTION: Defines the package `x/otherroot` within the `x` module. This package serves as an explicit root package alongside `all` in the `go list` commands. It imports `x/otherdep` using a blank identifier.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
-- x/otherroot/otherroot.go --
package otherroot

import _ "x/otherdep"
```

----------------------------------------

TITLE: Full Package Embedding with `embed` Package in Go
DESCRIPTION: In this scenario, the pattern `all:t` attempts to include all files in the directory tree, which may include exclusion of certain directories based on Go's embedding rules. Using `embed` package, it demonstrates embedding entire directories where applicable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package p

import "embed"

//go:embed all:t
var X embed.FS
```

----------------------------------------

TITLE: Adding new functionality to Go's encoding/binary package
DESCRIPTION: Introduces new functions for appending variable-length integers and a new interface for byte order operations in the encoding/binary package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.19.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
func AppendUvarint([]uint8, uint64) []uint8
func AppendVarint([]uint8, int64) []uint8

type AppendByteOrder interface {
    AppendUint16([]uint8, uint16) []uint8
    AppendUint32([]uint8, uint32) []uint8
    AppendUint64([]uint8, uint64) []uint8
    String() string
}
```

----------------------------------------

TITLE: Transitioning Between Package and Module Versions in Go
DESCRIPTION: This snippet demonstrates how to update dependencies between package and module versions using 'go get' and 'go list' commands. It shows the behavior for both package-to-module and module-to-package transitions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchmod.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
go get example.net/pkgremoved@v0.3.0
go list example.net/pkgremoved
stdout 'example.net/pkgremoved'

go get example.net/pkgremoved@patch
! go list example.net/pkgremoved

go get example.net/pkgremoved@v0.4.0
! go list example.net/pkgremoved

go get example.net/pkgremoved@patch
go list example.net/pkgremoved
stdout 'example.net/pkgremoved'
```

----------------------------------------

TITLE: Implementing Multiple Go Fuzz Tests in One Package
DESCRIPTION: A Go implementation of two fuzz tests in the 'two' package. This defines two fuzz targets named FuzzOne and FuzzTwo, both taking a testing.F parameter and providing fuzz functions that process byte slices.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_multiple.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package two

import "testing"

func FuzzOne(f *testing.F) {
  f.Fuzz(func(*testing.T, []byte) {})
}

func FuzzTwo(f *testing.F) {
  f.Fuzz(func(*testing.T, []byte) {})
}
```

----------------------------------------

TITLE: Limitations of Module Graph Queries in Vendor Mode
DESCRIPTION: This snippet demonstrates that certain 'go list -m' queries requiring a complete module graph fail when using vendor mode, and provides appropriate error messages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getmode_vendor.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
! go list -mod=vendor -m all
stderr 'go: can\'t compute \'all\' using the vendor directory\n\t(Use -mod=mod or -mod=readonly to bypass.)'
! go list -mod=vendor -m ...
stderr 'go: can\'t match module patterns using the vendor directory\n\t(Use -mod=mod or -mod=readonly to bypass.)'
```

----------------------------------------

TITLE: Defining Go Module for Import Cycle Test (Go Mod)
DESCRIPTION: Defines a Go module named `golang.org/issue45863` using Go version 1.17. This `go.mod` file establishes the root of the project structure and specifies the Go language version baseline for the test case demonstrating the import cycle issue.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_test_cycle.txt#2025-04-22_snippet_1

LANGUAGE: gomod
CODE:
```
-- go.mod --
module golang.org/issue45863

go 1.17
```

----------------------------------------

TITLE: Testing Actual Module Cache Cleaning
DESCRIPTION: Tests the 'go clean -modcache' command which should actually delete all files in the module cache. Verifies that files no longer exist after cleaning.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_clean_cache.txt#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
go clean -modcache
! exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.info
! exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.mod
! exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.zip
```

----------------------------------------

TITLE: Testing Function BarFunc in Package 'bar_test'
DESCRIPTION: Contains a test case for the BarFunc function in the 'bar_test' package. It checks that BarFunc correctly returns a value, leveraging cross-package function calling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_pkgselect.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
-- bar/bar_test.go --
package bar_test

import (
	"example/bar"
	"testing"
)

func TestBar(t *testing.T) {
	if bar.BarFunc() != 42 {
		t.Fatalf("bad")
	}
}

```

----------------------------------------

TITLE: System Control and Information Functions in syscall Package for NetBSD ARM64
DESCRIPTION: These functions provide system control and configuration operations, including sysctl for querying and modifying kernel parameters at runtime.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_80

LANGUAGE: Go
CODE:
```
func Sysctl(string) (string, error)
func SysctlUint32(string) (uint32, error)
func Settimeofday(*Timeval) error
func Sync() error
func Pathconf(string, int) (int, error)
func Nanosleep(*Timespec, *Timespec) error
func Umask(int) int
func RouteRIB(int, int) ([]uint8, error)
func ParseRoutingMessage([]uint8) ([]RoutingMessage, error)
func ParseRoutingSockaddr(RoutingMessage) ([]Sockaddr, error)
```

----------------------------------------

TITLE: Defining Constants for archive/tar Package in Go
DESCRIPTION: This snippet defines constants for different tar archive formats including GNU, PAX, USTAR, and Unknown. It also declares a Format type and a Header struct with related fields.
SOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
const FormatGNU = 8
const FormatGNU Format
const FormatPAX = 4
const FormatPAX Format
const FormatUSTAR = 2
const FormatUSTAR Format
const FormatUnknown = 0
const FormatUnknown Format

type Format int

type Header struct {
    Format Format
    PAXRecords map[string]string
}
```

----------------------------------------

TITLE: Declaring Module Path for Go Toolchain - Plaintext
DESCRIPTION: Specifies the Go module path to indicate the dependency on the Go toolchain or to be used as an identifier in Go module dependency graphs. This plaintext snippet is typically part of the .mod or go.mod files and does not include version or additional configuration. Required by Go tooling for module resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.0.linux-amd64.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: Specifying Module Version Metadata (JSON)
DESCRIPTION: Defines the version metadata for the module as `v2.1.0-pre+incompatible` in JSON format, typically stored in a `.info` file used by Go tooling. The `+incompatible` suffix signifies that this version predates Go modules or lacks a `go.mod` file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split-incompatible_v2.1.0-pre+incompatible.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
-- .info --
{"Version": "v2.1.0-pre+incompatible"}
```

----------------------------------------

TITLE: Testing Go Get with Non-package Subdirectories
DESCRIPTION: This snippet tests 'go get' behavior with module paths that do not contain a package and with non-package subdirectories of a module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_3

LANGUAGE: plaintext
CODE:
```
! go get example.net/missing/subdir@v0.1.0
stderr '^go: module example.net/missing@v0.1.0 found \(replaced by ./missing\), but does not contain package example.net/missing/subdir$'

go get example.net/missing@v0.1.0

! go get example.net/missing/subdir@v0.1.0
stderr '^go: module example.net/missing@v0.1.0 found \(replaced by ./missing\), but does not contain package example.net/missing/subdir$'
```

----------------------------------------

TITLE: Defining Filesystem and Networking Constants in Go for Darwin ARM64
DESCRIPTION: This snippet defines various constants related to filesystem limits and network routing operations for Darwin ARM64. These are used in system calls and network programming tasks.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_163

LANGUAGE: Go
CODE:
```
const NAME_MAX = 255
const NET_RT_DUMP = 1
const NET_RT_DUMP2 = 7
const NET_RT_FLAGS = 2
const NET_RT_IFLIST = 3
const NET_RT_IFLIST2 = 6
const NET_RT_MAXID = 10
const NET_RT_STAT = 4
const NET_RT_TRASH = 5
```

----------------------------------------

TITLE: Defining Go Module and Retracting Incompatible Version (Go Module)
DESCRIPTION: This `go.mod` file defines the module `example.com/retract/incompatible`, specifies Go version `1.16`, and uses the `retract` directive to withdraw version `v2.0.0+incompatible` from use. This represents the module file content for the `v1.0.0` release.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_incompatible_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: gomod
CODE:
```
module example.com/retract/incompatible

go 1.16

retract v2.0.0+incompatible
```

----------------------------------------

TITLE: Building Go for MIPS without GOMIPS after previous softfloat build
DESCRIPTION: This snippet tests Go compilation without setting GOMIPS after a previous build with softfloat. It verifies that floating point registers are used when GOMIPS is not set.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_gomips.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
# Clean cache
go clean -cache

# Build without setting GOMIPS
env GOMIPS=
go build -gcflags=-S f.go
stderr ADDD.F[0-9]+,.F[0-9]+,.F[0-9]+
```

----------------------------------------

TITLE: Go Test with Panic and Cleanup Function
DESCRIPTION: A Go test file that registers a cleanup function that calls FailNow() and then contains a test that panics. This tests how the Go testing package handles panics when there's a cleanup function registered.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_cleanup_failnow.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package panic_withcleanup_test
import "testing"
func TestCleanupWithFailNow(t *testing.T) {
	t.Cleanup(func() {
		t.FailNow()
	})
	t.Run("x", func(t *testing.T) {
		t.Run("y", func(t *testing.T) {
			panic("die")
		})
	})
}
```

----------------------------------------

TITLE: Defining MAC-related System Call Constants in Go for Darwin ARM64
DESCRIPTION: Constants defining system call numbers for MAC (Mandatory Access Control) operations on Darwin ARM64 platform. These constants are used for syscall operations related to security contexts and access control.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_189

LANGUAGE: Go
CODE:
```
const SYS___MAC_SET_LCTX = 393
const SYS___MAC_SET_LCTX ideal-int
const SYS___MAC_SET_LINK = 385
const SYS___MAC_SET_LINK ideal-int
const SYS___MAC_SET_PROC = 387
const SYS___MAC_SET_PROC ideal-int
const SYS___MAC_SYSCALL = 381
const SYS___MAC_SYSCALL ideal-int
```

----------------------------------------

TITLE: Testing go work use with Symlinks
DESCRIPTION: A bash script that tests how 'go work use' behaves when the current working directory has a parent that is a symlink. It verifies that the command correctly handles paths that cross symlink boundaries.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_symlink_issue68383.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
symlink sym -> a/b
cd sym/c/d

go work use $WORK/gopath/src/x/y    # "crosses" the symlink at $WORK/sym
cmpenv go.work go.work.want  # Check that the relative path is not used
```

----------------------------------------

TITLE: Source Code for Package 'b/y' (Go)
DESCRIPTION: The source code for package `y` within module `b`. This package imports module `c` and provides a function `CVersion` that uses it. It is the package newly imported by `m.go.new`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
-- b1/y/y.go --
package y

import "c"

func CVersion() string {
	return c.Version
}
```

----------------------------------------

TITLE: Testing Retracted Modules in GOPATH Mode using Go
DESCRIPTION: This snippet verifies that 'go list -retracted' reports an error when the GOPATH mode is active, expecting a message that the command can only be run in module-aware mode.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
# 'go list -retracted' reports an error in GOPATH mode.\nenv GO111MODULE\u003doff\n! go list -retracted\nstderr '^go list -retracted can only be used in module-aware mode$'\nenv GO111MODULE\u003d
```

----------------------------------------

TITLE: Comparing Actual vs. Expected Output (Shell)
DESCRIPTION: Uses the 'cmp' command to compare the standard output (stdout) generated by the preceding 'go list' command against the content defined in the 'want' section. This step validates whether the listed dependencies match the expected outcome.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_split_main.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
cmp stdout want
```

----------------------------------------

TITLE: Testing Go Bug Report URL Generation in Shell
DESCRIPTION: This shell script tests the 'go bug' command by setting up a custom environment, running the command, and checking the output for specific content.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/bug.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go install
go build -o $TMPDIR/go ./go
env BROWSER=$GOPATH/bin/browser PATH=$TMPDIR:$PATH
go bug
exists $TMPDIR/browser
grep '^go version' $TMPDIR/browser
grep '^GOROOT/bin/go version: go version' $TMPDIR/browser
grep '^GOROOT/bin/go tool compile -V: compile version' $TMPDIR/browser
grep '^uname -sr: Linux' $TMPDIR/browser
```

----------------------------------------

TITLE: Defining Go Module Path in go.mod - Go - Text
DESCRIPTION: Specifies the module path at the root of the domain in a go.mod file. This is essential for Go module management, enabling dependency tracking and versioning. The 'module' directive declares the import path used by consumers, and no additional parameters or dependencies are present in this minimal configuration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: Text
CODE:
```
module example.com
```

----------------------------------------

TITLE: Testing Flag Initialization in Go
DESCRIPTION: Holds test functions for verifying the presence of the 'foo' and 'bar' flags using the 'testing' package. The tests check if the flag variables are correctly initialized, failing the test if any flag is nil.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_var_init_order.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main

import (
	\"testing\"
)

func TestFoo(t *testing.T) {
	if foo == nil {
		t.Fatal()
	}
}

func TestBar(t *testing.T) {
	if bar == nil {
		t.Fatal()
	}
}

```

----------------------------------------

TITLE: Defining Go Test Function with Parallel Subtests
DESCRIPTION: This Go code defines a test function with parallel subtests and uses channel synchronization to ensure specific execution order. It demonstrates the use of t.Parallel() and nested subtests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_subtests_parallel.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package standalone_parallel_sub_test

import "testing"

func Test(t *testing.T) {
	ch := make(chan bool, 1)
	t.Run("Sub", func(t *testing.T) {
		t.Parallel()
		<-ch
		t.Run("Nested", func(t *testing.T) {})
	})
	// Ensures that Sub will finish after its t.Run call already returned.
	ch <- true
}
```

----------------------------------------

TITLE: Testing Unicode Property Matching
DESCRIPTION: Tests Unicode property matching (\p{Greek}, \P{Greek}, etc.) against mixed character strings. Shows how positive and negative property classes match different characters.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_35

LANGUAGE: go
CODE:
```
"\\p{Greek}+"
-;-;-;-
-;1-5;-;1-5
"^(?:\\p{Greek}+)$"
-;-;-;-
-;-;-;-
"^(?:\\p{Greek}+)"
-;-;-;-
-;-;-;-
"(?:\\p{Greek}+)$"
-;-;-;-
-;-;-;-
```

----------------------------------------

TITLE: Testing Go List Compiled Package Caching
DESCRIPTION: Shell commands to verify that go list -find -compiled caches and reuses compiled sources appropriately, ensuring no cgo operations occur on second run.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_find.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go list -find -compiled net
go list -find -compiled -x net
! stderr 'cgo'
```

----------------------------------------

TITLE: Go Fuzzing Test Functions
DESCRIPTION: Test functions that implement different fuzzing scenarios for testing the minimizer behavior, including zero duration settings, recoverable errors, and non-recoverable errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package y

import (
	"os"
	"testing"
)

func FuzzMinimizeZeroDurationSet(f *testing.F) {
	f.Fuzz(func(t *testing.T, b []byte) {
		if len(b) > 5 {
			t.Errorf("there was an Error")
		}
	})
}

func FuzzMinimizeZeroLimitSet(f *testing.F) {
	f.Fuzz(func(t *testing.T, b []byte) {
		if len(b) > 5 {
			t.Errorf("there was an Error")
		}
	})
}

func FuzzMinimizerRecoverable(f *testing.F) {
	f.Add(make([]byte, 100))
	f.Fuzz(func(t *testing.T, b []byte) {
		if len(b) < 50 {
			// Make sure that b is large enough that it can be minimized
			return
		}
		// Given the randomness of the mutations, this should allow the
		// minimizer to trim down the value a bit.
		for _, n := range b {
			if n != 0 {
				if len(b) == 50 {
					t.Log("got the minimum size!")
				}
				t.Fatalf("contains a non-zero byte of length %d", len(b))
			}
		}
	})
}

func FuzzMinimizerNonrecoverable(f *testing.F) {
	f.Fuzz(func(t *testing.T, b []byte) {
		os.Exit(99)
	})
}
```

----------------------------------------

TITLE: Expected Output for 'go mod tidy' Command
DESCRIPTION: Expected output for the 'go mod tidy' command showing the toolchain switch process from Go 1.21.0 to Go 1.22.9 due to module requirements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_1

LANGUAGE: text
CODE:
```
go: found example.net/b in example.net/b v0.1.0
go: module ./b1 requires go >= 1.22.0; switching to go1.22.9
go: found example.net/b in example.net/b v0.1.0
go: found example.net/c in example.net/c v0.1.0
```

----------------------------------------

TITLE: Importing Future Package in Go Code
DESCRIPTION: This Go code snippet demonstrates an attempt to import a package from the 'rsc.io/future' module, which is expected to fail due to version constraints.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_future.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package p

import "rsc.io/future/foo"
```

----------------------------------------

TITLE: Testing Go 1.14 behavior with vendor consistency checks
DESCRIPTION: Demonstrates that Go 1.14 enables -mod=vendor by default and performs stricter consistency checks between go.mod and vendor/modules.txt.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
go mod edit -go=1.14

! go list -f {{.Dir}} -tags tools all
stderr '^go: inconsistent vendoring in '$WORK[/\\]auto':$'
stderr '^\texample.com/printversion@v1.0.0: is explicitly required in go.mod, but not marked as explicit in vendor/modules.txt'
stderr '^\texample.com/unused: is replaced in go.mod, but not marked as replaced in vendor/modules.txt'
stderr '^\texample.com/version@v1.2.0: is replaced in go.mod, but not marked as replaced in vendor/modules.txt'
stderr '^\tTo ignore the vendor directory, use -mod=readonly or -mod=mod.\n\tTo sync the vendor directory, run:\n\t\tgo mod vendor$'
```

----------------------------------------

TITLE: Conditional Go file with Printf error in vetpkg
DESCRIPTION: This snippet shows a Go file with a build tag 'tagtest' and a Printf statement with too many arguments, which should trigger a vet error when the tag is included.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_9

LANGUAGE: Go
CODE:
```
// +build tagtest

package p

import "fmt"

func g() {
	fmt.Printf("%d", 3, 4)
}
```

----------------------------------------

TITLE: Testing Long Deprecation Message Display in Go Modules
DESCRIPTION: Tests how 'go get' handles a very long deprecation message, ensuring it displays a placeholder instead of the full message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go get long
stderr '^go: module long is deprecated: \(message omitted: too long\)$'
go list -m -u -f '{{.Deprecated}}' long
stdout '^aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$'
```

----------------------------------------

TITLE: Testing Ambiguous Import Error
DESCRIPTION: Attempts to build a package with an ambiguous import, expecting an error message that indicates the package is found in multiple modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
! go build ./importx
stderr '^importx[/\\]importx.go:2:8: ambiguous import: found package example.com/a/x in multiple modules:\n\texample.com/a v0.1.0 \('$WORK'[/\\]a[/\\]x\)\n\texample.com/a/x v0.1.0 \('$WORK'[/\\]ax\)$'
```

----------------------------------------

TITLE: Go Module Declaration
DESCRIPTION: Defines the module name for the package using Go modules system.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_c_v1.1.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module badchain.example.com/c
```

----------------------------------------

TITLE: Adding First go.mod to the v1 Branch
DESCRIPTION: Switches to the 'mytag' reference and adds a go.mod file for the v1 series, creating new version tags v0.0.1 and v1.0.1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
git checkout --detach mytag

at 2018-02-19T18:10:28-05:00
echo 'module "github.com/rsc/vgotest1" // root go.mod'
cp stdout go.mod
git add go.mod
git commit -m 'go.mod'
git tag v0.0.1
git tag v1.0.1
```

----------------------------------------

TITLE: Main Go Package Importing CGO Dependency (Go)
DESCRIPTION: This Go file defines the main package 'm'. It imports the package 'm/p' using a blank identifier (`_`). This import triggers the compilation of package 'p', which is necessary because package 'p' contains CGO directives that require a C compiler.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- m.go --
package m

import _ "m/p"
```

----------------------------------------

TITLE: Testing Go Bug Help Command
DESCRIPTION: Tests the help output for the bug command and verifies error handling for invalid arguments
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/help.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go help bug
stdout 'usage: go bug'
stdout 'bug report'

! go bug help
stderr 'bug takes no arguments'
```

----------------------------------------

TITLE: Verifying Module Replacement Path in Go
DESCRIPTION: Checks if 'go list' provides the original replacement directory as the module's replacement path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_7

LANGUAGE: shell
CODE:
```
go list -mod=vendor -f '{{with .Module}}{{with .Replace}}{{.Path}}{{end}}{{end}}' rsc.io/quote/v3
stdout '.*[/\\]not-rsc.io[/\\]quote[/\\]v3'
```

----------------------------------------

TITLE: W Package Implementation
DESCRIPTION: Package defining World constant used in the main package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_complex.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package w

const World = "world"
```

----------------------------------------

TITLE: Go Module Definition with Dependencies
DESCRIPTION: Main go.mod file defining module dependencies for testing version checking behavior with example.com/nolatest and example.com/noversion modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_update_nolatest.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.17

require (
	example.com/nolatest v0.0.0
	example.com/noversion v0.0.0
)
```

----------------------------------------

TITLE: Shell Commands for Go Module Version Testing
DESCRIPTION: Series of shell commands to test Go module behavior with incompatible versions and verify that lower compatible versions are not considered when upgrading.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_prefer_incompatible.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
cp go.mod go.mod.orig
go mod tidy
cmp go.mod.orig go.mod
grep '^example.com/incompatiblewithsub v2\.0\.0\+incompatible' go.sum
! grep '^example.com/incompatiblewithsub v1.0.0' go.sum

go get example.com/incompatiblewithsub/sub
cmp go.mod.orig go.mod
! grep '^example.com/incompatiblewithsub v1.0.0' go.sum
```

----------------------------------------

TITLE: Specifying Go Module Version Info (JSON)
DESCRIPTION: This JSON snippet, typically found in a `.info` file within the Go module cache, provides metadata about the module version. It explicitly states the version string associated with this specific instance of the toolchain module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-amd64.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v0.0.1-go1.999testmod.android-amd64"}
```

----------------------------------------

TITLE: Testing 'go list -deps -test all x/otherroot' Dependency Resolution (Shell)
DESCRIPTION: Runs `go list -deps -test` with the `all` pattern and an additional root pattern `x/otherroot`. It uses `stdout` and `! stdout` commands to assert which packages should and should not be included. This test verifies that with the `-test` flag, test dependencies of *all* specified roots (`all` and `x/otherroot`) are included, but test dependencies of non-root packages (like `x/otherdep`, which imports `y/fromotherdeptest`) are still excluded. It compares the go.mod file to ensure it hasn't been modified.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
# With -deps -test, test dependencies of other roots should be included,
# but test dependencies of non-roots should not.

go list -deps -test all x/otherroot
stdout '^x/inall$'
stdout '^x/inall/fromtest$'
stdout '^x/inall/fromtestinall$'
stdout '^x/otherroot$'
stdout '^x/otherdep$'

stdout '^x/fromotherroottest$'
! stdout '^y/fromotherdeptest$'

cmp go.mod go.mod.orig
```

----------------------------------------

TITLE: Defining Outside Directory go.mod File in Go
DESCRIPTION: This snippet defines the go.mod file for the 'outside' directory used in the tests. It specifies the module name, Go version, and includes a local replace directive.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_version.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
module example.com/outside

go 1.13

require example.com v0.0.0
replace example.com v0.0.0 => ./.
```

----------------------------------------

TITLE: Linux User Namespace Support Structures in Go Syscall
DESCRIPTION: Defines structures for UID/GID mapping in Linux user namespaces across multiple architectures (386, amd64, arm). Includes SysProcAttr struct with mapping fields and SysProcIDMap struct for ID mapping details.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_24

LANGUAGE: Go
CODE:
```
type SysProcAttr struct {
    UidMappings []SysProcIDMap
    GidMappings []SysProcIDMap
}

type SysProcIDMap struct {
    ContainerID int
    HostID int
    Size int
}
```

----------------------------------------

TITLE: Module Declaration in Go.mod
DESCRIPTION: A minimal go.mod file that declares a module named 'm'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_internal.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Importing Undeclared Dependency in Go
DESCRIPTION: This Go file imports example.net/b package, which is not declared in the corresponding go.mod file, simulating a scenario of a missed dependency declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_extra.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package a
import _ "example.net/b"
```

----------------------------------------

TITLE: Defining Go Packages - Go Source Files
DESCRIPTION: These Go source files define simple packages for `foo`, `baz`, and `bar`. They include package declarations with packages named accordingly and import fake dependencies from `baz` and `foo`. This demonstrates basic package setup for the Go toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_gopath_order.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package foo
```

LANGUAGE: go
CODE:
```
package baz
```

LANGUAGE: go
CODE:
```
package bar
import _ "baz"
import _ "foo"
```

----------------------------------------

TITLE: Testing Case-Insensitive Character Class Matching
DESCRIPTION: Tests case-insensitive pattern matching with the (?i) modifier on character classes. Shows how the modifier affects character class ranges and explicit character lists.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_36

LANGUAGE: go
CODE:
```
"(?i)[@-A]+"
-;-;-;-
-;0-3;-;0-3
"^(?:(?i)[@-A]+)$"
-;-;-;-
-;-;-;-
"^(?:(?i)[@-A]+)"
-;-;-;-
-;0-3;-;0-3
"(?:(?i)[@-A]+)$"
-;-;-;-
-;-;-;-
```

----------------------------------------

TITLE: Setting up Fuzzing Test Environment in Go
DESCRIPTION: This snippet sets up the environment variables and directory structure for a fuzzing test. It creates a custom GOCACHE directory and runs a Go program to populate the fuzz corpus.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_dup_cache.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GOCACHE=$WORK/cache
env GODEBUG=fuzzdebug=1

mkdir -p $GOCACHE/fuzz/fuzztest/FuzzTarget
go run ./populate $GOCACHE/fuzz/fuzztest/FuzzTarget

go test -fuzz=FuzzTarget -fuzztime=10x .
stdout 'entries: 5'
```

----------------------------------------

TITLE: Testing 'go run' Command Outside Module
DESCRIPTION: Verifies the behavior of 'go run' when executed outside a module context, including failure for unresolved packages and success for standard library imports.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_9

LANGUAGE: shell
CODE:
```
! go run example.com/printversion
stderr '^no required module provides package example.com/printversion: go.mod file not found in current directory or any parent directory; see ''go help modules''$'

! go run ./needmod/needmod.go
stderr '^needmod[/\\]needmod.go:10:2: no required module provides package example.com/version: go.mod file not found in current directory or any parent directory; see ''go help modules''$'

go run ./stdonly/stdonly.go
stdout 'path is command-line-arguments$'
stdout 'main is  $'
```

----------------------------------------

TITLE: Running Go Program Without Trimpath
DESCRIPTION: This snippet runs a Go program without the -trimpath flag, expecting the output to include the vendor directory in the file path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_trimpath.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go run main.go
stdout vendor
```

----------------------------------------

TITLE: Testing Escaped Dollar Sign in Go Regexps
DESCRIPTION: Tests patterns with escaped dollar signs (\$). These tests verify how the regex engine handles literal dollar signs rather than interpreting them as end anchors.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_24

LANGUAGE: regexp
CODE:
```
^(foo\$)$
```

LANGUAGE: regexp
CODE:
```
^(?:^(foo\$)$)$
```

LANGUAGE: regexp
CODE:
```
^(?:^(foo\$)$)
```

LANGUAGE: regexp
CODE:
```
(?:^(foo\$)$)$
```

----------------------------------------

TITLE: Importing Dependency in Example Package
DESCRIPTION: Defines the main package 'example' and imports the 'p' package as a side-effect import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc_path.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package example

import _ "example.com/p"
```

----------------------------------------

TITLE: Testing Package Output Ordering in Go
DESCRIPTION: This test function in pkg1 introduces a delay to demonstrate that package output ordering is maintained even when pkg2 might finish before pkg1. It imports the testing and time packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_print.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package pkg1

import (
	"testing"
	"time"
)

func Test(t *testing.T) {
	// This sleep makes it more likely that pkg2 will be ready before pkg1,
	// which previously would have made this test fail, because pkg2 would
	// be printed before pkg1.
	// Now that there is proper ordering, the Sleep should not matter.
	// In particular, the Sleep does not make the test pass and won't
	// be a problem on slow builders.
	time.Sleep(1*time.Second)
}
```

----------------------------------------

TITLE: Primary Go Module Definition
DESCRIPTION: Main go.mod file defining the module example.com/foo with Go 1.20.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_reject_modfile.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/foo

go 1.20
```

----------------------------------------

TITLE: Defining Go Module for rsc.io/fortune
DESCRIPTION: This snippet defines the module configuration for rsc.io/fortune. It specifies the module name and the Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v0.0.1.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module rsc.io/fortune
go 1.21rc999
```

----------------------------------------

TITLE: Listing Packages with Vendor Mode in Go
DESCRIPTION: Uses 'go list -mod=vendor' to list packages using the vendored dependencies instead of the module cache.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
go list -mod=vendor
```

----------------------------------------

TITLE: Test package that imports C
DESCRIPTION: A Go package that imports the pseudo-package C, used to test CGO behavior with the list command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package useC
import _ "C" // "C" is a pseudo-package, not an actual one
```

----------------------------------------

TITLE: Listing Modules in Go
DESCRIPTION: This shell command lists all modules in a Go project using a specified module definition file. It requires Go to be installed and the current directory to contain a valid go.mod file. Inputs include a go.mod file, and the output lists modules. Not applicable to non-root modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badmod.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list -m -mod=mod all
```

----------------------------------------

TITLE: Testing Go Syntax Error Handling (GO111MODULE on)
DESCRIPTION: This snippet tests the Go test command's behavior when encountering a syntax error in a test file with GO111MODULE set to on. It changes to the syntaxerror directory and verifies that the error is diagnosed and that the test fails.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_syntax_error_says_fail.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
cd syntaxerror
! go test syntaxerror
stderr 'x_test.go:' # check that the error is diagnosed
stdout 'FAIL' # check that go test says FAIL
```

----------------------------------------

TITLE: Implementing FuzzCrash Test in Go
DESCRIPTION: This test sends a SIGILL signal to itself, which should be interpreted as a crash by the fuzzing framework. It demonstrates handling of crash-inducing signals and expects the fuzzer to save a crasher.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_non_crash_signal.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
func FuzzCrash(f *testing.F) {
	f.Fuzz(func(*testing.T, bool) {
		pid := syscall.Getpid()
		if err := syscall.Kill(pid, syscall.SIGILL); err != nil {
			panic(err)
		}
		// signal may not be received immediately. Wait for it.
		select{}
	})
}
```

----------------------------------------

TITLE: Testing Missing Module Declaration with go list
DESCRIPTION: This shell command tests that executing `go list` in a directory with a `go.mod` file missing a module declaration produces an error. It checks for correct error messages related to missing module declarations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
cd $WORK/gopath/src/mod
! go list .
stderr '^go: error reading go.mod: missing module declaration. To specify the module path:\n\tgo mod edit -module=example.com/mod$'
```

----------------------------------------

TITLE: Go Module Configuration
DESCRIPTION: This snippet shows the go.mod file configuration for the example project. It defines the module, Go version requirement, and includes replace directives for managing local development versions of dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_import.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example.net/importer

go 1.16

require (
	example.net/m v0.1.0
)

replace (
	example.net/m v0.1.0 => ./m1
	example.net/m v0.2.0 => ./m2
	example.net/m/p v1.0.0 => ./p0
)
```

----------------------------------------

TITLE: Creating v2 Branch with Module Path Update
DESCRIPTION: Switches to the v2 branch, updates the go.mod file for v2 module path, and commits the changes. This establishes the v2 major version following Go modules conventions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/querytest.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
at 2018-07-03T22:50:24-04:00
git checkout v2
cp v2/go.mod go.mod
git add go.mod
git commit -a -m 'v2'
```

----------------------------------------

TITLE: Displaying Git Diff Output for File Changes
DESCRIPTION: This snippet shows the Git diff output for changes between old and new versions of a file. It includes the content of both versions and a unified diff representation. The only difference is a newline at the end of the file.
SOURCE: https://github.com/golang/go/blob/master/src/internal/diff/testdata/eof1.txt#2025-04-22_snippet_0

LANGUAGE: diff
CODE:
```
-- old --
a
b
c
-- new --
a
b
c^D
-- diff --
diff old new
--- old
+++ new
@@ -1,3 +1,3 @@
 a
 b
-c
+c\ No newline at end of file
```

----------------------------------------

TITLE: Defining Module Path in Go - Go
DESCRIPTION: Defines the Go module path using the go.mod format. It establishes the root package name (example.com/missingpkg) for use with Go tools. Required for all Go modules; there are no further dependencies or constraints in the single-module declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_missingpkg_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go.mod
CODE:
```
module example.com/missingpkg
```

----------------------------------------

TITLE: Testing Alternative Capturing Groups with Word Boundary Negation in Go Regexps
DESCRIPTION: Tests patterns that use alternation within capturing groups combined with \B assertions. These expressions check how the regex engine prioritizes different alternatives with non-word boundary constraints.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_8

LANGUAGE: regexp
CODE:
```
\B(fo|foo)\B
```

LANGUAGE: regexp
CODE:
```
^(?:\B(fo|foo)\B)$
```

LANGUAGE: regexp
CODE:
```
^(?:\B(fo|foo)\B)
```

LANGUAGE: regexp
CODE:
```
(?:\B(fo|foo)\B)$
```

----------------------------------------

TITLE: Creating Initial Commit and Starting Point
DESCRIPTION: Creates the first commit with a go.mod file, sets the branch name to master, and tags the commit as 'start'. This establishes the initial state of the repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/querytest.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
at 2018-07-03T22:31:01-04:00
git add go.mod
git commit -a -m 'v1'
git branch -m master
git tag start

git branch v2
```

----------------------------------------

TITLE: Implementing FuzzKill Test in Go
DESCRIPTION: This test sends a SIGKILL signal to itself, which cannot be caught and should not be interpreted as a crash by the fuzzing framework. It demonstrates handling of uncatchable termination signals.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_non_crash_signal.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
func FuzzKill(f *testing.F) {
	f.Fuzz(func(*testing.T, bool) {
		pid := syscall.Getpid()
		if err := syscall.Kill(pid, syscall.SIGKILL); err != nil {
			panic(err)
		}
		// signal may not be received immediately. Wait for it.
		select{}
	})
}
```

----------------------------------------

TITLE: Getting Version of Shared Object
DESCRIPTION: This snippet retrieves the version information of the built shared object `external.so` using the `go version` command. It expects the standard output to match a regular expression confirming that the `go version` command correctly identifies the `.so` file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_cshared.txt#_snippet_1

LANGUAGE: go
CODE:
```
go version external.so
stdout '^external.so: .+'
```

----------------------------------------

TITLE: Handling Package to Module Transition in Go Dependencies
DESCRIPTION: This snippet illustrates the behavior of 'go get' when resolving dependencies that change from a package to a module. It shows how version constraints are applied in this scenario.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchmod.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
! go get example.net/pkgremoved@patch example.net/other@v0.1.0
stderr '^go: example.net/other@v0.1.0 requires example.net/pkgremoved@v0.2.0, not example.net/pkgremoved@patch \(v0.1.1\)$'
cmp go.mod.orig go.mod
```

----------------------------------------

TITLE: Defining Termios Structure in Go for NetBSD ARM64
DESCRIPTION: Definition of the Termios struct which represents terminal I/O settings. It contains fields for input/output control flags, line discipline, control characters, and baud rate settings.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_109

LANGUAGE: Go
CODE:
```
type Termios struct {
    Iflag uint32
    Oflag uint32
    Cflag uint32
    Lflag uint32
    Cc [20]uint8
    Ispeed int32
    Ospeed int32
}
```

----------------------------------------

TITLE: Setting Go Module Environment and Testing Package Resolution
DESCRIPTION: This snippet sets the GO111MODULE environment variable and tests package resolution in the presence of a 'go.mod' directory. It verifies that the package is correctly identified as 'x/sub' both before and after creating the 'go.mod' directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dir.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on

cd $WORK/sub

go list .
stdout 'x/sub'

mkdir go.mod
exists go.mod

go list .
stdout 'x/sub'
```

----------------------------------------

TITLE: Removing a module and running go mod tidy with error handling
DESCRIPTION: Removes a specific module from the cache and runs 'go mod tidy -e', checking for expected error output and absence of segmentation fault.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fileproxy_vcs_missing_issue51589.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
rm $WORK/gopath/pkg/mod/cache/download/golang.org/x/text/
go mod tidy -e
stderr '^go: rsc.io/sampler@v1.3.0 requires\n\tgolang.org/x/text@.*: reading file://.*/pkg/mod/cache/download/golang.org/x/text/.*'
! stderr 'signal SIGSEGV: segmentation violation'
```

----------------------------------------

TITLE: Configuring Go Environment Variables
DESCRIPTION: This snippet sets environment variables to configure the Go module system, such as enabling module mode, setting the proxy to direct, and turning off the Go checksum database. These settings influence how Go fetches and verifies dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getx.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
env GOPROXY=direct
env GOSUMDB=off
```

----------------------------------------

TITLE: Defining SockaddrDatalink Structure in Go for NetBSD ARM64
DESCRIPTION: Definition of the SockaddrDatalink struct for link-layer socket addresses. It contains fields for address family, length, link type, and other datalink addressing information.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_104

LANGUAGE: Go
CODE:
```
type SockaddrDatalink struct {
    Len uint8
    Family uint8
    Index uint16
    Type uint8
    Nlen uint8
    Alen uint8
    Slen uint8
    Data [12]int8
}
```

----------------------------------------

TITLE: Testing Module Cache Cleaning Without Downloads
DESCRIPTION: Tests that 'go clean -modcache' doesn't try to download modules before cleaning them, even when the go.mod file contains invalid module versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_clean_cache.txt#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
go mod edit -require rsc.io/quote@v1.99999999.0-not-a-real-version
go clean -modcache
! stderr 'finding rsc.io'
go mod edit -droprequire rsc.io/quote
```

----------------------------------------

TITLE: Defining Lazy Module with Pruned Dependency
DESCRIPTION: Defines a 'lazy' module that requires example.com/retract/incompatible v1.0.0 and demonstrates pruning of transitive dependencies in lazy mode.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_incompatible.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
// Module lazy requires example.com/retract/incompatible v1.0.0.
//
// When viewed from the outside it also has a transitive dependency
// on v2.0.0+incompatible, but in lazy mode that transitive dependency
// is pruned out.
module example.net/lazy

go 1.17

exclude example.com/retract/incompatible v2.0.0+incompatible

require (
	example.com/retract/incompatible v1.0.0
	example.net/requireincompatible v0.1.0
)
```

----------------------------------------

TITLE: Defining Go Module 'example' for Testing
DESCRIPTION: A minimal `go.mod` file defining a Go module named `example` and specifying Go version 1.19. This file provides the module context required by the `go` commands executed in the test script.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cwd_newline.txt#2025-04-22_snippet_5

LANGUAGE: gomod
CODE:
```
-- $WORK/go.mod --
module example
go 1.19
```

----------------------------------------

TITLE: Linux and NetBSD Syscall Definitions
DESCRIPTION: Definitions for Linux and NetBSD across different architectures (386, amd64, arm), including control message header structures and platform-specific function implementations.
SOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
// Linux definitions
type Cmsghdr struct {
    X__cmsg_data [0]uint8
    // other fields not shown
}

// NetBSD definitions
const ImplementsGetwd = false
const SizeofIfData = 132

func Fchflags(string, int) error

type IfMsghdr struct {
    Pad_cgo_1 [4]uint8
    // other fields not shown
}
```

----------------------------------------

TITLE: Building and Executing ABI Test Program in Go
DESCRIPTION: This snippet demonstrates the build and execution commands for the ABI test program. It builds the program with internal linking mode and also as a position-independent executable (PIE).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_ppc64_linker_funcs.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go build -ldflags='-linkmode=internal'
exec ./abitest
stdout success

go build -buildmode=pie -o abitest.pie -ldflags='-linkmode=internal'
exec ./abitest.pie
stdout success
```

----------------------------------------

TITLE: cgo Build Tag and cgotag Import - Go
DESCRIPTION: This Go file has a '+build cgo' build tag so it is only included in cgo-enabled builds. It defines package p and performs a side-effect import of cgotag. Key parameter: CGO_ENABLED. Limitation: ignored if cgo is disabled.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
// +build cgo

package p

import _ "cgotag"

```

----------------------------------------

TITLE: Testing Go Get Command with Dot-Go Suffix Packages
DESCRIPTION: This snippet tests the 'go get' command with package names ending in '.go', ensuring it can download and install these packages with or without version specifications.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_trailing_slash.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go get example.com/dotgo.go
go get example.com/dotgo.go/
go get example.com/dotgo.go@v1.0.0
go get example.com/dotgo.go/@v1.0.0
```

----------------------------------------

TITLE: String Comparison Utility Function for Fuzzing Tests
DESCRIPTION: Utility function that compares a string input against a fixed value. This function is used as a target for fuzzing tests to discover interesting inputs based on coverage.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_interesting.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package fuzz

import (
	"bytes"
	"io"
)

func Y(w io.Writer, s string) {
	if !bytes.Equal([]byte(s), []byte("y")) {
		w.Write([]byte("not equal"))
	}
}
```

----------------------------------------

TITLE: Typechecking Expression Method Signature in Go
DESCRIPTION: This snippet shows the typical signature for a method that typechecks a particular expression in the Go typechecker. It takes an operand, an expression, and potentially additional arguments, updating the operand with the result of typechecking.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/internal/types2/README.md#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
func (check *Checker) f(x *operand, e syntax.Expr, /* addition arguments, if any */)
```

----------------------------------------

TITLE: Defining a Nested Package Go Module - Go
DESCRIPTION: Defines the nested module 'example.net/ambiguous' with Go version 1.16 in its own go.mod file. This file is placed in a subdirectory to create ambiguity with the root module, emulating a nested module scenario in dependency resolution tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_v0.1.0.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module example.net/ambiguous\n\ngo 1.16
```

----------------------------------------

TITLE: Handling Empty GOMODCACHE with Path Separator in GOPATH in Go
DESCRIPTION: This snippet tests the behavior when GOMODCACHE isn't set and GOPATH starts with a path list separator, expecting GOMODCACHE to be empty and commands to error out.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache.txt#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
env GOMODCACHE=
env GOPATH=${:}$WORK/this/is/ignored

go env GOMODCACHE
stdout '^$'
! stdout .
! stderr .

! go mod download rsc.io/quote@v1.0.0
stderr '^go: module cache not found: neither GOMODCACHE nor GOPATH is set$'
```

----------------------------------------

TITLE: Defining Main Module Package 'm' (Go)
DESCRIPTION: Defines the main package `m` for the primary module. It imports package `x/inall` using a blank identifier to establish a dependency required for the `go list all` pattern test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- m.go --
package m

import _ "x/inall"
```

----------------------------------------

TITLE: NetBSD File Type Constants
DESCRIPTION: Constants representing different file types in the NetBSD filesystem. Includes definitions for regular files, directories, symbolic links, character devices, and other special files.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_15

LANGUAGE: Go
CODE:
```
const DT_BLK = 6
const DT_CHR = 2
const DT_DIR = 4
const DT_FIFO = 1
const DT_LNK = 10
const DT_REG = 8
const DT_SOCK = 12
const DT_UNKNOWN = 0
```

----------------------------------------

TITLE: go/doc/comment Package Structures
DESCRIPTION: New types and methods for handling documentation comments including parsing, formatting and rendering in different formats (HTML, Markdown, Text).
SOURCE: https://github.com/golang/go/blob/master/api/go1.19.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
type Doc struct {
    Content []Block
    Links []*LinkDef
}

type Parser struct {
    LookupPackage func(string) (string, bool)
    LookupSym func(string, string) bool
    Words map[string]string
}
```

----------------------------------------

TITLE: Adding Iteration Functions to iter Package
DESCRIPTION: This snippet adds new functions and types to the iter package for sequence iteration, including Pull, Pull2, Seq, and Seq2.
SOURCE: https://github.com/golang/go/blob/master/api/go1.23.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
func Pull[$0 interface{}](Seq[$0]) (func() ($0, bool), func())
func Pull2[$0 interface{}, $1 interface{}](Seq2[$0, $1]) (func() ($0, $1, bool), func())
type Seq[$0 interface{}] func(func($0) bool)
type Seq2[$0 interface{}, $1 interface{}] func(func($0, $1) bool)
```

----------------------------------------

TITLE: NetBSD Syslog Constants and Functions
DESCRIPTION: Syslog package constants, types and functions for logging on NetBSD ARM64 systems. Includes priority levels and writer methods for different log severities.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
const (
    LOG_USER Priority
    LOG_UUCP = 64
    LOG_WARNING = 4
)

type Priority int
type Writer struct

func Dial(network, raddr string, priority Priority, tag string) (*Writer, error)
func New(priority Priority, tag string) (*Writer, error)
func NewLogger(priority Priority, flags int) (*log.Logger, error)
```

----------------------------------------

TITLE: Defining Emulation Constants for NetBSD ARM64 CGO in Go
DESCRIPTION: This snippet defines constants related to Linux emulation on NetBSD. These constants are used to identify different emulation modes and set limits for the emulation system.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_19

LANGUAGE: Go
CODE:
```
const EMUL_LINUX = 1
const EMUL_LINUX32 = 5
const EMUL_LINUX32 ideal-int
const EMUL_LINUX ideal-int
const EMUL_MAXID = 6
const EMUL_MAXID ideal-int
```

----------------------------------------

TITLE: Testing Go Build Output for $WORK Path Prefix
DESCRIPTION: This shell script tests the 'go build' command output to ensure that nothing is prepended to the $WORK path prefix, addressing issue golang.org/issue/37012.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_n_cgo.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
[!cgo] skip

# Test that nothing is prepended to $WORK path prefix.
# See issue golang.org/issue/37012.
go build -n
! stderr '[/\\]\$WORK'
stderr '[ =]\$WORK'
```

----------------------------------------

TITLE: Testing Go Vet Behavior with Custom Flags
DESCRIPTION: Demonstrates the use of 'go vet' with various flags to test analyzer behavior, particularly for standard packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_flags.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go vet -n -buildtags=false runtime
stderr '-buildtags=false'
! stderr '-unsafeptr=false'

go vet -n runtime
stderr '-unsafeptr=false'
! stderr '-unreachable=false'

go vet -n -unsafeptr runtime
stderr '-unsafeptr'
! stderr '-unsafeptr=false'

go test -n runtime
stderr '-unreachable=false'

go vet -n -- .
```

----------------------------------------

TITLE: Setting Up Test Environment for Go Module Download
DESCRIPTION: This snippet sets up the test environment by specifying the Go version and toolchain. It then attempts to download a module with a version constraint and checks for the expected error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_future.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env TESTGO_VERSION=go1.21
env GOTOOLCHAIN=local
! go mod download rsc.io/future@v1.0.0
stderr '^go: rsc.io/future@v1.0.0 requires go >= 1.999 \(running go 1.21; GOTOOLCHAIN=local\)$'
```

----------------------------------------

TITLE: Configuring Go Environment and Running Test Script
DESCRIPTION: This snippet sets the GO111MODULE environment variable to 'off' and runs a Go file, checking for a specific error message format in the stderr output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fileline.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=off

# look for short, relative file:line in error message
! go run ../../gopath/x/y/z/err.go
stderr ^..[\/]x[\/]y[\/]z[\/]err.go:
```

----------------------------------------

TITLE: Go Module with Redundant Dependencies
DESCRIPTION: Module definition with explicit and indirect dependencies
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_readonly.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module m

go 1.16

require (
	rsc.io/quote v1.5.2
	rsc.io/sampler v1.3.0 // indirect
	rsc.io/testonly v1.0.0 // indirect
)
```

----------------------------------------

TITLE: Go Test Timeout Verification Code
DESCRIPTION: Go test file that prints the value of test.timeout flag to verify proper timeout configuration. Uses the flag package to access test flags.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_timeout.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package t
import (
	"flag"
	"fmt"
	"testing"
)
func TestTimeout(t *testing.T) {
	fmt.Println(flag.Lookup("test.timeout").Value.String())
}
```

----------------------------------------

TITLE: Indirect Import Test Package
DESCRIPTION: Package that imports another package to test indirect import case collision reporting
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_case_collision.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package c

import _ "example/b"
```

----------------------------------------

TITLE: Defining go.mod with Tool Using a Relative Path - Go
DESCRIPTION: This go.mod file sets up a separate module with a tool entry pointing to a local path (./invalid_path) and specifies a Go version. It is intended to register a local directory as a tool, which may result in errors if improperly formed or resolved; suitable for testing malformed or erroneous configurations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_8

LANGUAGE: ini
CODE:
```
module example.com/invalid_path\n\ngo 1.24\n\ntool ./invalid_path\n
```

----------------------------------------

TITLE: Defining Package z in Target Module x/z (Go)
DESCRIPTION: This Go source file defines the empty package `z` within the `x/z` module. It provides the necessary Go package structure for the local module `x/z` that acts as the replacement target for the `zz` dependency in the `x/y` module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_local_replace.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
-- x/z/z.go --
package z
```

----------------------------------------

TITLE: Setting Go Environment Variables for Module Testing
DESCRIPTION: Sets environment variables for Go module testing, including enabling modules, using direct proxy, and disabling sum database.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_major.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
env GOPROXY=direct
env GOSUMDB=off
```

----------------------------------------

TITLE: Basic Auth JSON Configuration
DESCRIPTION: JSON structure defining HTTP basic authentication credentials with username 'aladdin', password 'opensesame', a 404 status code, and a 16-line error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/ormanylines.txt#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{
	"Username": "aladdin",
	"Password": "opensesame",
	"StatusCode": 404,
	"Message": "line 1\nline 2\nline 3\nline 4\nline 5\nline 6\nline 7\nline 8\nline 9\nline 10\nline 11\nline 12\nline 13\nline 14\nline 15\nline 16"
}
```

----------------------------------------

TITLE: Old P1 Package Implementation
DESCRIPTION: Package p1 implementation with imports from old and new packages
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_legacy_mod.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package p1

import _ "old/p2"
import _ "new/p1"
import _ "new"
```

----------------------------------------

TITLE: Testing Go File with Build Constraints
DESCRIPTION: Go source file with conflicting build constraints that can never be satisfied.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fmt_load_errors.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
// +build linux,!linux

package x
```

----------------------------------------

TITLE: Setting GO111MODULE Environment Variable
DESCRIPTION: Enables Go modules explicitly by setting the GO111MODULE environment variable to 'on'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_help.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Importing External Package
DESCRIPTION: Simple Go source file that imports rsc.io/quote package as a blank import
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_readonly.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package use

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Testing Git clone errors with custom SSH command
DESCRIPTION: This snippet tests the handling of Git clone errors by configuring Git to use SSH and setting a non-functional SSH command. It verifies that the specific Git error is shown instead of a generic 'unknown revision' error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_private_vcs.txt#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
exec git config --global url.git@github.com.insteadOf https://github.com/
env GIT_SSH_COMMAND=false
! go install github.com/golang/nonexist@master
stderr 'fatal: Could not read from remote repository.'
! stderr 'unknown revision'
! stdout .
```

----------------------------------------

TITLE: Package B Definition
DESCRIPTION: Go package 'b' importing package 'c', forming part of the import cycle.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_cycle_deps_errors.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package b

import _ "m/c"
```

----------------------------------------

TITLE: CGO Package with C Integration
DESCRIPTION: Go package using CGO to access C's INT_MAX constant, demonstrating CGO integration
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_find_nodeps.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package cgopkg

/*
#include <limits.h>
*/
import "C"

func F() {
    println(C.INT_MAX)
}
```

----------------------------------------

TITLE: Defining IfMsghdr Struct in Go for Darwin ARM64 CGO
DESCRIPTION: Defines the IfMsghdr struct used for network interface messages. It includes fields for index, message length, type, and version information.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_199

LANGUAGE: Go
CODE:
```
type IfMsghdr struct {
    Index uint16
    Msglen uint16
    Pad_cgo_0 [2]uint8
    Type uint8
    Version uint8
}
```

----------------------------------------

TITLE: Lazy Module with Version Exclusion Configuration
DESCRIPTION: A module go.mod file for the 'lazy' module that demonstrates how Go 1.17's lazy loading prunes transitive dependencies. It explicitly excludes an incompatible version while requiring a direct dependency that would bring in that excluded version transitively.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_graph_version.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
// Module lazy requires example.com/retract/incompatible v1.0.0.
//
// When viewed from the outside it also has a transitive dependency
// on v2.0.0+incompatible, but in lazy mode that transitive dependency
// is pruned out.
module example.net/lazy

go 1.17

exclude example.com/retract/incompatible v2.0.0+incompatible

require (
	example.com/retract/incompatible v1.0.0
	example.net/requireincompatible v0.1.0
)
```

----------------------------------------

TITLE: Configuring Netrc File for Authentication
DESCRIPTION: Sets up a netrc file with credentials for authenticating with the vcs-test.golang.org server.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_auth.txt#2025-04-22_snippet_4

LANGUAGE: Plain Text
CODE:
```
-- $WORK/netrc --
machine vcs-test.golang.org
	login aladdin
	password opensesame
```

----------------------------------------

TITLE: Defining a Minimal Package Module with go.mod - Go
DESCRIPTION: This minimal go.mod file marks the root of the 'golang.org/issue/pkg' module with no explicit dependencies, serving as a stub for modular testing. It is necessary for 'go mod' commands to recognize the package as a module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_5

LANGUAGE: go.mod
CODE:
```
module golang.org/issue/pkg
```

----------------------------------------

TITLE: Defining Module 'b' Version 2 in Go
DESCRIPTION: This go.mod file defines module 'b' version 2 without any dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
module example.net/b

go 1.16
```

----------------------------------------

TITLE: Alternative Quote Module Implementation
DESCRIPTION: Local implementation of a module with a different path (not-rsc.io/quote/v3) that provides an alternative GoV3() function with a different quote.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package quote

func GoV3() string {
	return "Clear is better than clever."
}
```

----------------------------------------

TITLE: Importing Package from Module Dependency - Go Source File
DESCRIPTION: Defines a Go package 'use' and imports the 'example.com/missingpkg' dependency with a blank identifier, indicating that the package's initialization side effects are desired without directly using its exported identifiers. This source file depends on the modules declared in 'go.mod', and should be located in the module's hierarchy. It requires Go tooling to resolve the referenced package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_usemissingpre_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package use

import _ \"example.com/missingpkg\"
```

----------------------------------------

TITLE: Invalid Cgo Library Reference
DESCRIPTION: Example Go code that intentionally references a non-existent library using Cgo pkg-config directive to test error handling
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pkgconfig_error.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package example

// #cgo pkg-config: libnot-a-valid-cgo-library
import "C"

package main() {}
```

----------------------------------------

TITLE: Storing Go Module Version Metadata in JSON
DESCRIPTION: This JSON object represents the metadata for a specific version of the Go module, as typically stored in a `.info` file by the Go module proxy. It includes the precise pseudo-version string (`v0.5.0-alpha.0.20190619023908-3da23a9deb9e`) and the corresponding commit time.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/github.com_dmitshur-test_modtest5_v0.5.0-alpha.0.20190619023908-3da23a9deb9e.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v0.5.0-alpha.0.20190619023908-3da23a9deb9e","Time":"2019-06-18T19:39:08-07:00"}
```

----------------------------------------

TITLE: Module B Configuration
DESCRIPTION: The go.mod file for the dependency module 'example.com/b', specifying Go version 1.21.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_conditional.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module example.com/b

go 1.21
```

----------------------------------------

TITLE: Resolving Non-Vendored Dependencies in the Standard Module with Shell
DESCRIPTION: This 'go list' command maps non-vendored dependencies within the 'std' module to vendored paths, illustrating how Go manages module boundaries by ensuring external dependencies resolve internally.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_std.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
go list -deps -f '{{if not .Standard}}{{.ImportPath}}{{end}}' std
```

----------------------------------------

TITLE: Setting Environment Variables for Go Module Testing
DESCRIPTION: Sets up environment variables for Go module testing, including disabling the module proxy and version control system.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_auth.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
env GOPROXY=direct
env GOSUMDB=off
env GOVCS='*:off'
```

----------------------------------------

TITLE: Testing Invalid Major Version Suffixes for Standard Modules in Go
DESCRIPTION: This snippet tests various invalid major version suffix formats for standard modules, showing that version suffixes must follow the /vN format and are only allowed for v2 or later. Each command is expected to fail with an error message suggesting the correct format.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_invalid_major.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
env GOFLAGS=-mod=mod

! go mod init example.com/user/repo/v0
stderr '(?s)^go: invalid module path "example.com/user/repo/v0": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v2$'

! go mod init example.com/user/repo/v02
stderr '(?s)^go: invalid module path "example.com/user/repo/v02": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v2$'

! go mod init example.com/user/repo/v023
stderr '(?s)^go: invalid module path "example.com/user/repo/v023": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v23$'

! go mod init example.com/user/repo/v1
stderr '(?s)^go: invalid module path "example.com/user/repo/v1": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v2$'

! go mod init example.com/user/repo/v2.0
stderr '(?s)^go: invalid module path "example.com/user/repo/v2.0": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v2$'

! go mod init example.com/user/repo/v2.1.4
stderr '(?s)^go: invalid module path "example.com/user/repo/v2.1.4": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v2$'

! go mod init example.com/user/repo/v3.5
stderr '(?s)^go: invalid module path "example.com/user/repo/v3.5": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v3$'

! go mod init example.com/user/repo/v4.1.4
stderr '(?s)^go: invalid module path "example.com/user/repo/v4.1.4": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v4$'

! go mod init example.com/user/repo/v.2.3
stderr '(?s)^go: invalid module path "example.com/user/repo/v.2.3": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v2$'

! go mod init example.com/user/repo/v.5.3
stderr '(?s)^go: invalid module path "example.com/user/repo/v.5.3": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v5$'
```

----------------------------------------

TITLE: Testing Sumdb Disagreement in Go Module Fetching
DESCRIPTION: Tests the behavior when the sumdb disagrees with the module checksum. Expects a security error when attempting to get rsc.io/quote package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gonoproxy.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
cp go.mod.orig go.mod
env GOSUMDB=$sumdb' '$proxy/sumdb-wrong
! go get rsc.io/quote
stderr 'SECURITY ERROR'
```

----------------------------------------

TITLE: Running Go Test with JSON Output
DESCRIPTION: Executes the 'go test' command with the -json flag to generate JSON-formatted output for all tests in the current directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_issue35169.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
! go test -json .
```

----------------------------------------

TITLE: Defining Module Requiring Incompatible Version
DESCRIPTION: Defines a module that requires an incompatible version (v2.0.0+incompatible) of example.com/retract/incompatible.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_incompatible.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
module example.net/requireincompatible

go 1.15

require example.com/retract/incompatible v2.0.0+incompatible
```

----------------------------------------

TITLE: Long Deprecated Module Definition
DESCRIPTION: Defines a 'long' Go module with a very long deprecation message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
// Deprecated: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
module long

go 1.16
```

----------------------------------------

TITLE: Hello World Function Implementation
DESCRIPTION: Simple Go package that provides a Hello() function returning a greeting string. Part of the sampler package with proper documentation and copyright notice.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package sampler shows simple texts.
package sampler // import "rsc.io/sampler"

// Hello returns a greeting.
func Hello() string {
	return "Hello, world."
}
```

----------------------------------------

TITLE: Managing GOPATH and Installing Go Packages - Shell Script
DESCRIPTION: This shell script sets up the GOPATH environment and demonstrates installing Go packages from multiple directories. It uses `mkdir`, `cp`, and `go install` commands to prepare the environment and manage package installations. The script reflects scenarios where GOPATH order affects import resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_gopath_order.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off
env GOPATH=$WORK/p1${:}$WORK/p2
mkdir $WORK/p1/src/foo $WORK/p2/src/baz
mkdir $WORK/p2/pkg/${GOOS}_${GOARCH} $WORK/p1/src/bar
cp foo.go $WORK/p1/src/foo/foo.go
cp baz.go $WORK/p2/src/baz/baz.go
cp foo.a $WORK/p2/pkg/${GOOS}_${GOARCH}/foo.a
cp bar.go $WORK/p1/src/bar/bar.go

go install -x bar

# add in baz.a to the mix
mkdir $WORK/p1/pkg/${GOOS}_${GOARCH}
cp baz.a $WORK/p1/pkg/${GOOS}_${GOARCH}/baz.a
env GOPATH=$WORK/p1${:}$WORK/p2
go install -x bar
env GOPATH=$WORK/p2${:}$WORK/p1
go install -x bar
```

----------------------------------------

TITLE: Creating Package B Without Additional Imports in Go Language
DESCRIPTION: A simple package named 'b' is defined without any imports. It serves as a contrasting package to demonstrate the import cycle in conjunction with package 'a'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_err_cycle.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package b
```

----------------------------------------

TITLE: Expected Module State After Tool Addition
DESCRIPTION: Expected go.mod state after adding a specific tool version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tool.txt#2025-04-22_snippet_4

LANGUAGE: plaintext
CODE:
```
module example.com/foo

go 1.24

tool example.com/tools/cmd/hello

require example.com/tools v1.0.0 // indirect
```

----------------------------------------

TITLE: Testing Go Import Cycle Error
DESCRIPTION: This snippet tests for proper reporting of import cycle errors in Go packages. It verifies that the error is detected and reported correctly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_setup_error.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
! go test -o=$devnull ./cycle/p ./t
stderr '# m/cycle/p\n.*package m/cycle/p\n\timports m/cycle/p from p\.go: import cycle not allowed'
stdout 'FAIL	m/cycle/p \[setup failed\]'
stdout 'ok  	m/t'
```

----------------------------------------

TITLE: Language Package Import
DESCRIPTION: Go package that imports the golang.org/x/text/language package as a blank import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_local.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package uselang
import _ "golang.org/x/text/language"
```

----------------------------------------

TITLE: ELF Program Type Constants
DESCRIPTION: Constants defining program segment types (ProgType) in ELF binaries. These include architecture-specific (ARM, MIPS, AARCH64) and GNU-specific program types.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
const (
    PT_AARCH64_ARCHEXT ProgType = 1879048192
    PT_AARCH64_UNWIND ProgType = 1879048193
    // ... additional PT_ constants
)
```

----------------------------------------

TITLE: Go Package Usage
DESCRIPTION: Go package that imports rsc.io/quote as a blank import
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package use

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Declaring Go Toolchain Module Path - Plain Text
DESCRIPTION: This snippet declares the module path for the Go toolchain, identifying "golang.org/toolchain" as the module. This is essential for Go module resolution, allowing other Go programs to refer to this toolchain as a dependency by its canonical name. It is used in both .mod and go.mod files to establish the root package for package management.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.3.linux-amd64.txt#2025-04-22_snippet_1

LANGUAGE: Plain Text
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: Implementing Switch Statements with Fallthrough in Go
DESCRIPTION: This code snippet demonstrates two switch statements in Go. The first switch uses a fallthrough statement after a blank identifier case, while the second includes multiple blank identifier cases before the fallthrough.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/issue70173.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package main

func main() {
	switch {
	case true:
	_:
		fallthrough
	default:
	}
	switch {
	case true:
	_:
	_:
		fallthrough
	default:
	}
}
```

----------------------------------------

TITLE: Testing -pgo=off flag to disable PGO
DESCRIPTION: Tests that the -pgo=off flag correctly disables Profile-Guided Optimization, even when a default.pgo file exists. It verifies that PGO is not applied during compilation and doesn't appear in build info.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
go build -a -n -pgo=off -o a1.exe ./a/a1
stderr 'compile.*a1.go'
! stderr 'compile.*-pgoprofile'

# check that pgo doesn't appear in build info
! stderr 'build\\t-pgo='
```

----------------------------------------

TITLE: Defining Termios Struct for Terminal I/O Settings in Go Syscall Package
DESCRIPTION: The Termios struct represents terminal I/O settings in the syscall package for Darwin ARM64. It contains terminal control flags, special character definitions, and speed settings for terminal devices.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_211

LANGUAGE: Go
CODE:
```
type Termios struct {
    Iflag    uint64
    Oflag    uint64
    Cflag    uint64
    Lflag    uint64
    Cc       [20]uint8
    Pad_cgo_0 [4]uint8
    Ispeed    uint64
    Ospeed    uint64
}
```

----------------------------------------

TITLE: Module Definition in .mod File
DESCRIPTION: Defines the module name as "not-rsc.io/quote", which differs from the import path in the package declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/not-rsc.io_quote_v0.1.0-nomod.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module "not-rsc.io/quote"
```

----------------------------------------

TITLE: Testing Mixed Anchors in Go Regexps
DESCRIPTION: Tests patterns with different combinations of anchors like ^$^ and $^$. These tests verify how the regex engine handles combinations of start and end anchors in different orders.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_23

LANGUAGE: regexp
CODE:
```
^$^
```

LANGUAGE: regexp
CODE:
```
^(?:^$^)$
```

LANGUAGE: regexp
CODE:
```
^(?:^$^)
```

LANGUAGE: regexp
CODE:
```
(?:^$^)$
```

LANGUAGE: regexp
CODE:
```
$^$
```

LANGUAGE: regexp
CODE:
```
^(?:$^$)$
```

LANGUAGE: regexp
CODE:
```
^(?:$^$)
```

LANGUAGE: regexp
CODE:
```
(?:$^$)$
```

----------------------------------------

TITLE: Original go.mod File
DESCRIPTION: The original go.mod file with Go 1.20 requirement and various module replacements for testing. This provides the base configuration for the toolchain switching tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example

go 1.20

require example.net/a v0.1.0

replace (
	example.net/a v0.1.0 => ./a1
	example.net/a v0.2.0 => ./a2
	example.net/b v0.1.0 => ./b1
	example.net/c v0.1.0 => ./c1
	example.net/d v0.1.0 => ./d1
	example.net/d v0.2.0 => ./d2
)
```

----------------------------------------

TITLE: Implementing breaker Package with Constant in Go
DESCRIPTION: This Go code defines a package named 'breaker' and declares a constant 'XX' with a value of 2. It's a simple implementation that can be used as part of a larger project or library.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_breaker_v2.0.0.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package breaker

const XX = 2
```

----------------------------------------

TITLE: Go Module R Implementation
DESCRIPTION: Module R with a simple stub implementation. Includes go.mod file with circular dependency on itself.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
module example.com/r

go 1.18

require example.com/r v1.0.0
```

LANGUAGE: go
CODE:
```
package r
```

----------------------------------------

TITLE: Package Usage File
DESCRIPTION: Go source file importing the retract packages as blank imports for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_replace.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package use

import (
	_ "example.com/retract"
	_ "example.com/retract/missingmod"
)
```

----------------------------------------

TITLE: Test File Path Printer
DESCRIPTION: Test implementation that prints file paths from both main and test contexts using runtime.Caller()
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath_main.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

import (
	"runtime"
	"testing"
)

func PrintFileForTest() {
	_, file, _, _ := runtime.Caller(0)
	println(file)
}

func TestMain(m *testing.M) {
	PrintFile()
	PrintFileForTest()
}
```

----------------------------------------

TITLE: Message Header Structures in syscall Package for NetBSD ARM64
DESCRIPTION: These structures define the message header data types used for socket operations, particularly for control messages and vectored I/O operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_87

LANGUAGE: Go
CODE:
```
type Cmsghdr struct {
    Len uint32
    Level int32
    Type int32
}

func (*Cmsghdr) SetLen(int)
func (*Iovec) SetLen(int)
func (*Msghdr) SetControllen(int)
```

----------------------------------------

TITLE: Testing Import Cycle Loading Error (Go)
DESCRIPTION: This snippet tests an import cycle loading error in a non-test file. It verifies the JSON output for specific import cycle error messages and package information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_build.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
! go test -json -o=$devnull ./cycle/p
stdout '"ImportPath":"m/cycle/q","Action":"build-output","Output":"# m/cycle/p\\n"'
stdout '"ImportPath":"m/cycle/q","Action":"build-output","Output":"package m/cycle/p\\n"'
stdout '"ImportPath":"m/cycle/q","Action":"build-output","Output":"\\timports m/cycle/q from p.go\\n"'
stdout '"ImportPath":"m/cycle/q","Action":"build-output","Output":"\\timports m/cycle/q from q.go: import cycle not allowed\\n"'
stdout '"ImportPath":"m/cycle/q","Action":"build-fail"'
stdout '"Action":"start","Package":"m/cycle/p"'
stdout '"Action":"output","Package":"m/cycle/p","Output":"FAIL\\tm/cycle/p \[setup failed\]\\n"'
stdout '"Action":"fail","Package":"m/cycle/p","Elapsed":.*,"FailedBuild":"m/cycle/q"'
! stderr '.'
```

----------------------------------------

TITLE: Declaring a Minimal Go Module with go.mod - Go
DESCRIPTION: This go.mod file defines a new Go module named 'm'. It is necessary for go list operations to work in module-aware mode, and establishes the context for all testing. The go.mod file must be present at the module root and is required for using features like test packages in module mode. The input is the module path; the output is a recognized Go module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_test.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Testing Go Build Verbosity for Issue #68743 (Shell)
DESCRIPTION: This command builds package `d` (a copy of `c`) with the `-x` flag, which prints the commands executed during the build. It tests for issue #68743, verifying specific output related to internal linking tests appears in the build process logs. The build itself (using external linking by default) is expected to succeed without 'undefined reference' errors, but the verbose output should contain the specific test message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go build -x m/d
! stderr 'undefined reference'
stderr 'test for internal linking'
```

----------------------------------------

TITLE: Main Go Program
DESCRIPTION: This snippet shows the main.go file content, which imports and uses a function from the 'stack' package to print a file name.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_trimpath.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package main

import (
  "fmt"

  "example.com/stack"
)

func main() {
  fmt.Println(stack.TopFile())
}
```

----------------------------------------

TITLE: Testing Panic in Background Goroutine
DESCRIPTION: This snippet tests a Go package where a test function panics in a background goroutine. It verifies that the test is marked as failing using go test -json and go tool test2json commands, with and without the -test.v flag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_4

LANGUAGE: Shell
CODE:
```
! go test -json ./testbgpanic
stdout '"Action":"fail"'
! stdout '"Action":"pass"'

! go tool test2json ./testbgpanic.exe -test.v
stdout '"Action":"fail"'
! stdout '"Action":"pass"'

! go tool test2json ./testbgpanic.exe
stdout '"Action":"fail"'
! stdout '"Action":"pass"'
```

----------------------------------------

TITLE: Testing Word Boundary Matching with Alternation
DESCRIPTION: Tests word boundary assertions (\B) with alternation patterns 'fo|foo'. Shows how boundary conditions affect matching with alternation choices.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_31

LANGUAGE: go
CODE:
```
"\\B(fo|foo)\\B"
-;-;-;-
-;1-3 1-3;-;1-4 1-4
"^(?:\\B(fo|foo)\\B)$"
-;-;-;-
-;-;-;-
"^(?:\\B(fo|foo)\\B)"
-;-;-;-
-;-;-;-
"(?:\\B(fo|foo)\\B)$"
-;-;-;-
-;-;-;-
```

----------------------------------------

TITLE: Implementing TestMain with Panic
DESCRIPTION: This Go code implements a TestMain function that panics, used to test the behavior of panics in TestMain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
package mainpanic_test

import "testing"

func TestMain(m *testing.M) {
	panic("haha no")
}
```

----------------------------------------

TITLE: Defining Go Module Metadata for `fuzzfail` (Internal)
DESCRIPTION: This snippet, likely from an internal tooling file (`.mod`), defines metadata for the `example.com/fuzzfail` Go module. It specifies the module path and the required Go version (`1.18`).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_fuzzfail_v0.2.0.txt#2025-04-22_snippet_0

LANGUAGE: gomod
CODE:
```
module example.com/fuzzfail

go 1.18
```

----------------------------------------

TITLE: Root Module Definition with Dependencies
DESCRIPTION: A go.mod file for the root module 'm' that requires and replaces two local modules 'm/a' and 'm/b', setting up the dependencies needed to demonstrate an import cycle.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_cycle.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

require (
	m/a v0.0.0
	m/b v0.0.0
)

replace (
	m/a => ./a
	m/b => ./b
)
```

----------------------------------------

TITLE: Adding Intermediate Commits to Git Repository
DESCRIPTION: Adds interim commits to the v2 branch with additional files and tags to create a richer repository history.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
at 2018-04-17T16:00:19-04:00
echo 'intermediate'
cp stdout foo.txt
git add foo.txt
git commit -a -m 'intermediate'

at 2018-04-17T16:00:32-04:00
echo 'another'
cp stdout another.txt
git add another.txt
git commit -a -m 'another'
git tag v2.0.2
git tag branch-v2
```

----------------------------------------

TITLE: Defining SysProcAttr struct for NetBSD ARM64 in syscall package
DESCRIPTION: Definition of the SysProcAttr struct in the syscall package for NetBSD ARM64 architecture. This struct contains platform-specific process attributes used when creating a new process.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_166

LANGUAGE: go
CODE:
```
type SysProcAttr struct {
	Chroot string
	Credential *Credential
	Ctty int
	Foreground bool
	Noctty bool
	Pgid int
	Ptrace bool
	Setctty bool
	Setpgid bool
	Setsid bool
}
```

----------------------------------------

TITLE: Source Code for Package 'a' (Go)
DESCRIPTION: The source code for package `a` within module `a`. This file is empty as its purpose in the test is just to exist and have a test file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
-- a1/a.go --
package a
```

----------------------------------------

TITLE: Building Go Module
DESCRIPTION: This snippet outlines the process of building a Go module with platform-specific conditions. The dependency on the Go command-line tool is required. It demonstrates the use of conditional directives to skip builds on the Windows operating system.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed_brackets.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
# issue 53314\n[GOOS:windows] skip\ncd [pkg]\ngo build
```

LANGUAGE: Go
CODE:
```
-- [pkg]/go.mod --\nmodule m\n\ngo 1.19
```

----------------------------------------

TITLE: Fake Mercurial Executable
DESCRIPTION: This snippet defines a shell script that acts as a fake `hg` executable, always exiting with status 1. It's used to test error handling when the real Mercurial tool is unavailable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_8

LANGUAGE: Shell
CODE:
```
#!/bin/sh
exit 1
```

----------------------------------------

TITLE: Setting Up Test Environment for gccgo Compatibility
DESCRIPTION: This snippet sets up the test environment by disabling Go modules, skipping short and cross-compilation tests, and defining the test procedure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_m.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=off

[short] skip
[cross] skip # gccgo can't necessarily cross-compile

cd m
go build
exists m$GOEXE
rm m$GOEXE
[exec:gccgo] go build -compiler=gccgo
[exec:gccgo] exists m$GOEXE
```

----------------------------------------

TITLE: Testing Go Doc Command Examples in Shell
DESCRIPTION: This collection of shell snippets tests various permutations of the 'go doc' command, examining documentation retrieval for packages, symbols, and methods across a series of valid and invalid cases.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/doc.txt#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
# go doc <pkg>
go doc p/v2
stdout .
```

LANGUAGE: sh
CODE:
```
# go doc <pkg> <sym>
go doc p/v2 Symbol
stdout .
```

LANGUAGE: sh
CODE:
```
# go doc <pkg> <sym> <method>
! go doc p/v2 Symbol Method
stderr .
```

LANGUAGE: sh
CODE:
```
# go doc <pkg>.<sym>
go doc p/v2.Symbol
stdout .
```

LANGUAGE: sh
CODE:
```
# go doc <pkg>.<sym>.<method>
go doc p/v2.Symbol.Method
stdout .
```

LANGUAGE: sh
CODE:
```
# go doc <sym>
go doc Symbol
stdout .
```

LANGUAGE: sh
CODE:
```
# go doc <sym> <method>
! go doc Symbol Method
stderr .
```

LANGUAGE: sh
CODE:
```
# go doc <sym>.<method>
go doc Symbol.Method
stdout .
```

LANGUAGE: sh
CODE:
```
# go doc <pkg>.<method>
go doc p/v2.Method
stdout .
```

LANGUAGE: sh
CODE:
```
# go doc <pkg> <method>
go doc p/v2 Method
stdout .
```

LANGUAGE: sh
CODE:
```
# go doc <method>
go doc Method
stdout .
```

----------------------------------------

TITLE: Defining file locking syscall constants for Darwin ARM64 CGO in Go
DESCRIPTION: This snippet defines constants used for file locking operations in system calls on the Darwin ARM64 CGO platform. It includes constants for shared locks, exclusive locks, and non-blocking operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_158

LANGUAGE: Go
CODE:
```
const LOCK_EX = 2
const LOCK_NB = 4
const LOCK_SH = 1
const LOCK_UN = 8
```

----------------------------------------

TITLE: Base Go Module Definition
DESCRIPTION: Defines the initial `go.mod` file content. It sets the module name placeholder `TBD` (which is changed by `go mod edit` commands later) and specifies Go version `1.12`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
-- go.mod --
module TBD
go 1.12
```

----------------------------------------

TITLE: Event Filter Constants for NetBSD ARM64
DESCRIPTION: Defines constants for event filtering and handling in NetBSD ARM64. Includes event types, filters, and flags for system event handling.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_25

LANGUAGE: Go
CODE:
```
const (
    EVFILT_READ = 0
    EVFILT_WRITE = 1
    EVFILT_AIO = 2
    EVFILT_VNODE = 3
    EVFILT_PROC = 4
    EVFILT_SIGNAL = 5
    EVFILT_TIMER = 6
    EV_ADD = 1
    EV_DELETE = 2
    EV_ENABLE = 4
)
```

----------------------------------------

TITLE: Build-Tagged Go Program with Current Directory Import
DESCRIPTION: A Go program marked with a build tag 'ignore' that imports the current directory as a package. This tests that ignored files can import packages built from non-ignored files in the same directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_local.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
// +build ignore

package main

import "."

func main() {
	easysub.Hello()
}
```

----------------------------------------

TITLE: Defining Go Module File (go.mod)
DESCRIPTION: Standard go.mod file declaring the module name.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-ppc64.txt#2025-04-22_snippet_3

LANGUAGE: plaintext
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Quote Package Main Implementation in Go
DESCRIPTION: Main implementation of the quote package providing functions to return various quotes. Includes Hello(), Glass(), Go() and Opt() functions that wrap v2 implementations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162749-b44a0b17b2d1.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package quote

import "rsc.io/quote/v2"

func Hello() string {
	return quote.HelloV2()
}

func Glass() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return quote.GlassV2()
}

func Go() string {
	return quote.GoV2()
}

func Opt() string {
	// Wisdom from ken.
	return quote.OptV2()
}
```

----------------------------------------

TITLE: Creating Empty Main Package in Go
DESCRIPTION: This snippet defines an empty `main` package with a `main` function. This is often used as a placeholder or a basic entry point when creating modules or libraries in Go, particularly when no explicit executable is required.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_cshared.txt#_snippet_4

LANGUAGE: go
CODE:
```
package main
func main(){}
```

----------------------------------------

TITLE: Defining Go Module with Generics
DESCRIPTION: The `go.mod` file sets up the Go module path and specifies required version of generics as a dependency. Executing this will establish the necessary environment for compiling the Go application using specified version constraints.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_depends_on_generics_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/depends/on/generics

go 1.18

require example.com/generics v1.0.0
```

----------------------------------------

TITLE: Module C v0.1.0 Configuration
DESCRIPTION: The go.mod file for module 'c' v0.1.0, which has no dependencies. This represents an endpoint in one dependency path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module c

go 1.13
```

----------------------------------------

TITLE: Test Function for Coverage in pkg2
DESCRIPTION: Implements a test in 'pkg2', invoking functions from both 'pkg1' and 'pkg2'. This function evaluates coverage and ensures no leakage from 'pkg1'. Requires 'testing' package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_nocoverpkg.txt#2025-04-22_snippet_5

LANGUAGE: Golang
CODE:
```
-- pkg2/file_test.go --
package pkg2

import (
	"cov/pkg1"
	"testing"
)

func TestSmth(t *testing.T) {
	pkg1.DoSomething()
	DoSomething()
}
```

----------------------------------------

TITLE: NetBSD ARM64 IPv6-specific Structures Definition in Go
DESCRIPTION: Defines IPv6-specific structures including ICMPv6Filter, Inet6Pktinfo, and IPv6MTUInfo. These are used for IPv6 socket options and operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_101

LANGUAGE: go
CODE:
```
type ICMPv6Filter struct {
	Filt [8]uint32
}

type Inet6Pktinfo struct {
	Addr [16]uint8
	Ifindex uint32
}

type IPv6MTUInfo struct {
	Addr RawSockaddrInet6
	Mtu uint32
}
```

----------------------------------------

TITLE: Generating SVG Graph from Calibration Data in Go
DESCRIPTION: This command runs a Go program to generate an SVG graph from the calibration CSV data. It visualizes the performance of different threshold values for the Karatsuba multiplication algorithm.
SOURCE: https://github.com/golang/go/blob/master/src/math/big/calibrate.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go run calibrate_graph.go kmul.csv >kmul.svg
```

----------------------------------------

TITLE: CGO Library Reference Implementation
DESCRIPTION: Main package implementing CGO function call with custom LDFLAGS for library linking. Tests proper handling of library path and linking flags when using GCCGO compiler.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_link_c.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main
// #cgo LDFLAGS: -L alibpath -lalib
// void f(void) {}
import "C"

func main() { C.f() }
```

----------------------------------------

TITLE: Building Go Binary with -trimpath in Module Mode
DESCRIPTION: Builds a Go binary using the 'go build' command with -trimpath, checking for specific compiler flags in the output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_trimpath_issue48557.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
cd $WORK/tmp/foo
go build -x -o a.exe main.go
stderr ${/}compile$GOEXE.*' -nolocalimports'
! stderr ${/}compile$GOEXE.*' -D[ =]'
```

----------------------------------------

TITLE: Testing Version Query Failure for Invalid Semver Range
DESCRIPTION: Tests that querying for a partial version range that only has +incompatible implementations fails appropriately when a v2+ module with go.mod exists.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
! go list -m github.com/russross/blackfriday@v2.0
stderr '^go: module github.com/russross/blackfriday: no matching versions for query "v2\.0"'
```

----------------------------------------

TITLE: Defining Terminal Control Constants in Go for NetBSD ARM64
DESCRIPTION: Terminal input control flags for NetBSD ARM64 systems. These constants control terminal behavior such as signal generation, character stripping, and XON/XOFF flow control.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_36

LANGUAGE: go
CODE:
```
const ISIG = 128
const ISTRIP = 32
const IXANY = 2048
const IXOFF = 1024
const IXON = 512
const NOFLSH = 2147483648
```

----------------------------------------

TITLE: Testing os.Exit() in Go Fuzz Tests
DESCRIPTION: This fuzz test function demonstrates how Go's fuzzing handles a call to os.Exit(). It exits the process with status 1 when the input is not 'aa'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
func FuzzWithBadExit(f *testing.F) {
	f.Add([]byte("aa"))
	f.Fuzz(func(t *testing.T, b []byte) {
		if string(b) != "aa" {
			os.Exit(1)
		}
	})
}
```

----------------------------------------

TITLE: Testing Invalid GOAUTH Configuration in Go
DESCRIPTION: This snippet tests an invalid GOAUTH configuration where 'off' is combined with other authentication commands. It expects a specific error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_netrc.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
# GOAUTH=off cannot be combined with other authentication commands
env GOAUTH='off; netrc'
env NETRC=$WORK/netrc
! go get vcs-test.golang.org/auth/or401
stderr 'GOAUTH=off cannot be combined with other authentication commands \(GOAUTH=off; netrc\)'
```

----------------------------------------

TITLE: Testing go get behavior with vendor directory present
DESCRIPTION: Verifies that 'go get' updates from the network or module cache, even when a vendor directory is present, potentially causing inconsistencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_10

LANGUAGE: shell
CODE:
```
go get example.com/version@v1.1.0
! go list -f {{.Dir}} -tags tools all
stderr '^go: inconsistent vendoring'
```

----------------------------------------

TITLE: Adding new methods to sync package
DESCRIPTION: This snippet introduces new TryLock methods for Mutex and RWMutex types in the sync package. These methods attempt to acquire locks without blocking.
SOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
pkg sync, method (*Mutex) TryLock() bool
pkg sync, method (*RWMutex) TryLock() bool
pkg sync, method (*RWMutex) TryRLock() bool
```

----------------------------------------

TITLE: Defining Memory Protection Constants in Go for NetBSD ARM
DESCRIPTION: These constants define memory protection flags used in memory management syscalls on NetBSD ARM systems. They specify the desired protection for memory pages, such as read, write, or execute permissions.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_31

LANGUAGE: Go
CODE:
```
const PROT_NONE = 0
const PROT_READ = 1
const PROT_WRITE = 2
const PROT_EXEC = 4
```

----------------------------------------

TITLE: Testing Import Path Error with Invalid Character
DESCRIPTION: Shell test command that verifies Go's error handling when encountering an import path containing an invalid 0x01 byte character. The test ensures the program produces an error message without panicking.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_panic_issue68737.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go run ''
! stderr panic
stderr 'malformed import path "\\x01": invalid char ''\\x01'''
```

----------------------------------------

TITLE: Running Go List Command for Module Analysis
DESCRIPTION: This shell command uses 'go list' to display import and embed information for the current module. It checks for specific imports and embedded files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_ignore_leading_bom.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go list -f 'Imports: {{.Imports}} EmbedFiles: {{.EmbedFiles}}' .
stdout '^Imports: \[embed m/hello\] EmbedFiles: \[.*file\]$'
```

----------------------------------------

TITLE: Testing Go Module Version Requirement in Shell
DESCRIPTION: This shell command sets the GOTOOLCHAIN environment variable to 'local' and attempts to list the current module. It expects to fail with an error message about the required Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_unknown_block.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GOTOOLCHAIN=local
! go list .
stderr 'go: go.mod requires go >= 1.999'
```

----------------------------------------

TITLE: Defining Memory Mapping Constants in Go for OpenBSD 386 CGO
DESCRIPTION: This snippet defines constants for memory mapping flags used in system calls like mmap(). These constants control various aspects of memory mapping behavior.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_46

LANGUAGE: Go
CODE:
```
const MAP_ANON = 4096
const MAP_ANON ideal-int
const MAP_FIXED = 16
const MAP_FIXED ideal-int
const MAP_PRIVATE = 2
const MAP_PRIVATE ideal-int
const MAP_SHARED = 1
const MAP_SHARED ideal-int
```

----------------------------------------

TITLE: Go module definition
DESCRIPTION: Defines a minimal go.mod file for the test module named 'test' with Go 1.17 as the target version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_versions.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module test

go 1.17
```

----------------------------------------

TITLE: Go Module Configuration for Replacing gopkg.in v4 with GitHub v1
DESCRIPTION: This go.mod file sets up the replacement of a gopkg.in v4 module with a GitHub v1 module, demonstrating version compatibility.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module golang.org/issue/34254

go 1.13

require gopkg.in/src-d/go-git.v4 v4.13.1

replace gopkg.in/src-d/go-git.v4 v4.13.1 => github.com/src-d/go-git v1.0.1-0.20190801152248-0d1a009cbb60
```

----------------------------------------

TITLE: Creating a Minimal Go Package (`p.go`) (Go)
DESCRIPTION: This snippet shows a minimal Go source file defining an empty package named `p`. This file serves as the placeholder source code for the `example.com/retract/self/pseudo` module, establishing the basic package structure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_pseudo_v1.0.0-bad.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p
```

----------------------------------------

TITLE: Go Module with Indirect Requirements
DESCRIPTION: Final go.mod file showing both direct and indirect dependencies marked with // indirect comments
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_promote_implicit.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module m

go 1.16

require (
	direct v1.0.0
	indirect-with-pkg v1.0.0 // indirect
	indirect-without-pkg v1.0.0 // indirect
)

replace (
	direct v1.0.0 => ./direct
	indirect-with-pkg v1.0.0 => ./indirect-with-pkg
	indirect-without-pkg v1.0.0 => ./indirect-without-pkg
)
```

----------------------------------------

TITLE: Running Go List Command to Test Absolute Path Import Error
DESCRIPTION: This command runs 'go list .' to verify that the tool properly handles the absolute path import without getting stuck in an infinite loop. It checks the stdout for the expected output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_issue42891.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list .
stdout '^m$'
```

----------------------------------------

TITLE: Declaring Go Package 'b'
DESCRIPTION: This Go source file (`b.go`) declares the package named 'b'. It serves as the entry point or part of the source code for the 'b' package within the 'example.com/deprecated/b' module. It currently only contains the package declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_b_v1.0.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package b
```

----------------------------------------

TITLE: Defining Go Workspace Configuration
DESCRIPTION: This snippet shows the contents of the go.work file, which defines the workspace configuration. It specifies which modules to use and provides a replace directive that overrides conflicting replaces in individual modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict_override.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
use m
use n
replace example.com/dep => ./dep3
```

----------------------------------------

TITLE: Building Go Programs and Setting Environment Variable
DESCRIPTION: This snippet builds the cache program and sets the GOCACHEPROG environment variable. It then attempts to build a simple Go program to test for deadlocks.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cacheprog_issue70848.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go build -o cacheprog$GOEXE cacheprog.go
env GOCACHEPROG=$GOPATH/src/cacheprog$GOEXE

# This should not deadlock
go build simple.go
! stderr 'cacheprog closed'
```

----------------------------------------

TITLE: Testing Start and End Anchors with \B and Dot in Go Regexps
DESCRIPTION: Tests patterns with start and end anchors, non-word boundary assertions, and the dot metacharacter. These tests verify single-character matches with non-word boundary constraints at both ends.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_17

LANGUAGE: regexp
CODE:
```
^\B.\B$
```

LANGUAGE: regexp
CODE:
```
^(?:^\B.\B$)$
```

LANGUAGE: regexp
CODE:
```
^(?:^\B.\B$)
```

LANGUAGE: regexp
CODE:
```
(?:^\B.\B$)$
```

----------------------------------------

TITLE: Implementing CreateProcessAsUser function for Windows AMD64 architecture
DESCRIPTION: Defines the CreateProcessAsUser function signature for the syscall package on Windows 64-bit architecture. This function creates a new process with the security context of the specified token.
SOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
pkg syscall (windows-amd64), func CreateProcessAsUser(Token, *uint16, *uint16, *SecurityAttributes, *SecurityAttributes, bool, uint32, *uint16, *uint16, *StartupInfo, *ProcessInformation) error
```

----------------------------------------

TITLE: Defining Original go.mod File in Go
DESCRIPTION: This snippet defines the original go.mod file used in the tests. It specifies the module name and Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_version.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module example.com

go 1.13
```

----------------------------------------

TITLE: Testing Go Workspace Sync with RC Versions
DESCRIPTION: Demonstrates workspace synchronization behavior when adding a release candidate version module, showing version updates and toolchain handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_toolchain.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
# work sync with newer modules should update go 1.22.1 -> 1.24rc1 and drop toolchain
go work edit -use=./m1_24_rc0
go work sync
cat go.work
grep '^go 1.24rc0$' go.work
! grep toolchain go.work
```

----------------------------------------

TITLE: Implementing a Simple Go Fuzz Test in One Package
DESCRIPTION: A Go implementation of a fuzz test in the 'one' package. This defines a single fuzz target named FuzzOne that takes a testing.F parameter and provides a fuzz function that processes byte slices.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_multiple.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package one

import "testing"

func FuzzOne(f *testing.F) {
  f.Fuzz(func(*testing.T, []byte) {})
}
```

----------------------------------------

TITLE: Testing version resolution with commit hash for v2
DESCRIPTION: Fetches a specific commit hash corresponding to v2.0.0 and verifies the version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
go get ...test@d7ae1e4
go list -m all
stdout '^github.com/rsc/legacytest v2\.0\.0\+incompatible$'
```

----------------------------------------

TITLE: Specifying Module Version Metadata (JSON)
DESCRIPTION: This JSON object contains metadata about the module, indicating its version is `v1.0.0`. This information is often used by Go's module proxy protocol or other tooling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_b_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v1.0.0"}
```

----------------------------------------

TITLE: Configuring Git Environment Variables for Repository Setup
DESCRIPTION: Sets up Git author and committer information using environment variables. This ensures consistent authorship information for commits created in the repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitreposubdirv2.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GIT_AUTHOR_NAME='Sam Thanawalla'
env GIT_AUTHOR_EMAIL='samthanawalla@google.com'
env GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
env GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL
```

----------------------------------------

TITLE: Defining Another Go Module with Different Dependency Replacement
DESCRIPTION: This snippet shows another go.mod file that requires the same dependency but replaces it with a different local path. This creates the conflicting replacements scenario.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
module example.com/n

require example.com/dep v1.0.0
replace example.com/dep v1.0.0 => ../dep2
```

----------------------------------------

TITLE: Go Module Main Configuration
DESCRIPTION: Basic Go module configuration file defining module 'x' without any dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_incompatible.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module x
```

----------------------------------------

TITLE: Package B Definition with Import
DESCRIPTION: Package 'b' declaration with blank import of example.com/dep
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pattern_work.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package b

import _ "example.com/dep"
```

----------------------------------------

TITLE: Go Module Version Test Commands
DESCRIPTION: A sequence of shell commands testing Go module version management, particularly focusing on type alias compatibility between Go 1.8 and 1.9.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_go.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
! go build
stderr ' type alias requires'
go mod edit -go=1.9
grep 'go 1.9' go.mod
go build

go mod edit -go=1.8
! go build
stderr 'type alias requires'

go mod edit -go=none
! grep go go.mod
```

----------------------------------------

TITLE: Dependency Module Definition
DESCRIPTION: Module definition for the example.net/a dependency requiring Go 1.22.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_version_tooold.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.net/a

go 1.22
```

----------------------------------------

TITLE: Go Workspace Configuration File
DESCRIPTION: Defines a Go workspace that includes two modules for testing. The configuration uses Go 1.21 and references modules in two subdirectories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_verify_work.txt#2025-04-22_snippet_1

LANGUAGE: plain text
CODE:
```
go 1.21

use (
    ./a
    ./b
)
```

----------------------------------------

TITLE: Invalid Go File with Syntax Error
DESCRIPTION: An intentionally broken Go file that contains syntax errors. This file is used to test that the Go test command doesn't attempt to load packages that don't compile when using pattern matching.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pattern.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package p

import ^

var _ = io.DoesNotExist
```

----------------------------------------

TITLE: Setting Environment Variables for Go Build Test
DESCRIPTION: This snippet sets the GO111MODULE environment variable to 'off' and defines a new GOCACHE directory. The GO111MODULE variable being set to 'off' disables module mode. The GOCACHE is set to a dedicated directory for the test to ensure consistent and isolated caching behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_compile.txt#_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=off
[short] skip

# Set up fresh GOCACHE.
env GOCACHE=$WORK/gocache
mkdir $GOCACHE
```

----------------------------------------

TITLE: Using `go list` with Directory Context Switching in Shell
DESCRIPTION: Executes `go list` in various directories to list packages with context switching using `-C`. This example accesses the `strings` package and attempts an invalid directory, demonstrating error handling. It requires the Go environment to be set up with `GOROOT` pointing to the correct directories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/chdir.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
cd $GOROOT/src/math
go list -C ../strings
stdout strings
! go list -C ../nonexist
stderr 'chdir.*nonexist'
```

----------------------------------------

TITLE: Package Import Example
DESCRIPTION: Demonstrates importing a relocated package from a nested submodule
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_issue41113.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package issue41113

import _ "example.com/split-incompatible/subpkg"
```

----------------------------------------

TITLE: Representing Memory Dependencies in Go SSA
DESCRIPTION: Demonstrates how memory dependencies are maintained in Go SSA. The example shows two consecutive Store operations where the second depends on the memory state of the first.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/internal/ssa/README.md#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
// *a = 3
// *b = *a
v10 = Store <mem> {int} v6 v8 v1
v14 = Store <mem> {int} v7 v8 v10
```

----------------------------------------

TITLE: String and Time Utility Functions in syscall Package for NetBSD ARM64
DESCRIPTION: These utility functions provide conversions between Go strings/slices and C-compatible string pointers, as well as time-related conversions for system call arguments.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_85

LANGUAGE: Go
CODE:
```
func StringSlicePtr([]string) []*uint8
func SlicePtrFromStrings([]string) ([]*uint8, error)
func TimevalToNsec(Timeval) int64
```

----------------------------------------

TITLE: Defining a Constant in Go Package p
DESCRIPTION: This Go code defines a package named `p`. Within this package, it declares an integer constant named `v` and initializes it with the value `2`. This is a simple source file potentially part of the `modtest5` module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/github.com_dmitshur-test_modtest5_v0.5.0-alpha.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p

const v = 2
```

----------------------------------------

TITLE: Running Go List Command to Verify Import Cycle Error
DESCRIPTION: This snippet uses the 'go list' command to ensure that an import cycle error does not cause infinite recursion, which is validated by an error message check. This setup aims to validate issue #25830 in the Go project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_err_cycle.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
! go list
stderr 'found packages a \(a.go\) and b \(b.go\)'
```

----------------------------------------

TITLE: Running Go Environment Command
DESCRIPTION: Executes the 'go env' command to display environment variables, used to verify how GOFLAGS is handled.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_sanitize.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go env
```

----------------------------------------

TITLE: Using `go doc` with Directory Context in Shell
DESCRIPTION: Demonstrates using `go doc` with `-C` to fetch documentation for symbols in a specified package directory. This requires the Go runtime with the source setup for custom documentation querying.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/chdir.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go doc -C ../strings HasPrefix
```

----------------------------------------

TITLE: Testing git-to-module converter with @master branch
DESCRIPTION: Fetches the master branch of github.com/rsc/legacytest and verifies the version format.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go get github.com/rsc/legacytest@master
go list -m all
stdout '^github.com/rsc/legacytest v2\.0\.1-0\.\d{14}-7303f7796364\+incompatible$'
```

----------------------------------------

TITLE: Go Main Package with Nil Panic and Debug Directive
DESCRIPTION: A Go main package that includes a debug directive to set randautoseed=0 and contains a main function that panics with nil, used to test different panic behaviors between Go versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_default.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
//go:debug randautoseed=0

package main

func main() {
	panic(nil)
}
```

----------------------------------------

TITLE: Testing various go mod commands with alternate file
DESCRIPTION: Executes several go mod commands (download, graph, tidy, verify, why) to ensure they work correctly with the alternate file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
go mod download rsc.io/quote
go mod graph
stdout rsc.io/quote
go mod tidy
grep rsc.io/quote go.alt.sum
go mod verify
go mod why rsc.io/quote
```

----------------------------------------

TITLE: Deprecated API Functions
DESCRIPTION: List of deprecated functions and types across various packages including crypto/x509, go/doc, and io/ioutil packages.
SOURCE: https://github.com/golang/go/blob/master/api/go1.19.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
// crypto/x509
func ParseCRL //deprecated
func ParseDERCRL //deprecated

// io/ioutil
func NopCloser //deprecated
func ReadAll //deprecated
func ReadDir //deprecated
func ReadFile //deprecated
func TempDir //deprecated
func TempFile //deprecated
func WriteFile //deprecated
```

----------------------------------------

TITLE: Generating Go Mod File with Absolute Path
DESCRIPTION: A Go program that generates a go.mod file containing a module replacement with an absolute path. Uses the WORK environment variable to construct the replacement path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_replace_absolute_windows.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
//go:build ignore
package main

import (
    "fmt"
    "os"
)

func main() {
    work := os.Getenv("WORK")
fmt.Printf(`module example.com/mod

require b.com v0.0.0

replace b.com => %s\gopath\src/modb
`,  work)
}
```

----------------------------------------

TITLE: Adding SYS_UTIMENSAT constant to syscall package for FreeBSD ARM with CGO
DESCRIPTION: Defines the SYS_UTIMENSAT constant as an ideal-int type in the syscall package specifically for FreeBSD on ARM architecture with CGO enabled. This constant represents the system call number for utimensat.
SOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
pkg syscall (freebsd-arm-cgo), const SYS_UTIMENSAT ideal-int
```

----------------------------------------

TITLE: Defining Dependency Package 'x/otherdep' (Go)
DESCRIPTION: Defines the empty package `x/otherdep` within the `x` module. This package is imported by `x/otherroot` and serves as an intermediate dependency in the graph.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
-- x/otherdep/otherdep.go --
package otherdep
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: A simple Go module definition file that specifies the module name as 'example'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fullpath.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example
```

----------------------------------------

TITLE: Another Package 1 Test File Structure
DESCRIPTION: Empty test file for package pkg1 in the anotherpkg directory. This creates a name collision with the other pkg1 package to test how 'go test' handles multiple packages with the same name.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_compile_multi_pkg.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package pkg1
```

----------------------------------------

TITLE: Checking Module Resolution After Vendoring in Go
DESCRIPTION: Uses 'go list' command with vendor mode to verify the module version and directory after vendoring.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
go list -mod=vendor -f '{{with .Module}}{{.Version}}{{end}} {{.Dir}}' rsc.io/quote/v3
stdout 'v3.0.0'
stdout '.*[/\\]vendor[/\\]rsc.io[/\\]quote[/\\]v3'
! stderr 'finding'
! stderr 'lookup disabled'
```

----------------------------------------

TITLE: Package Function Definition in pkg1
DESCRIPTION: Defines a simple function 'DoSomething' in package 'pkg1' that returns a boolean value. No external dependencies are required. It serves as a trivial example function for test coverage.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_nocoverpkg.txt#2025-04-22_snippet_3

LANGUAGE: Golang
CODE:
```
-- pkg1/file.go --
package pkg1

func DoSomething() bool {
	return true
}
```

----------------------------------------

TITLE: Implementing Localized Greetings in Go
DESCRIPTION: This snippet defines the 'Hello' function, which returns a localized greeting based on the provided language preferences. If no preferences are given, it uses the default user preferences.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.3.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
func Hello(prefs ...language.Tag) string {
	if len(prefs) == 0 {
		prefs = DefaultUserPrefs()
	}
	return hello.find(prefs)
}
```

----------------------------------------

TITLE: Expected Git references output
DESCRIPTION: Expected output from the git show-ref command, showing the commit hashes for the main branch and v0.1.0 tag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue47650.txt#2025-04-22_snippet_4

LANGUAGE: text
CODE:
```
21535ef346c3e79fd09edd75bd4725f06c828e43 refs/heads/main
4d237df2dbfc8a443af2f5e84be774f08a2aed0c refs/tags/v0.1.0
```

----------------------------------------

TITLE: Displaying Old and New File Contents for Diff Comparison
DESCRIPTION: This snippet shows the contents of the old and new files side by side, preparing for a differential comparison. It illustrates the input format for the diff algorithm.
SOURCE: https://github.com/golang/go/blob/master/src/internal/diff/testdata/basic.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
-- old --
a
b
c
d
e
f
g
-- new --
w
a
b
x
y
z
e
```

----------------------------------------

TITLE: Incompatible Version Requirement Module
DESCRIPTION: A module configuration that requires an incompatible version (v2.0.0+incompatible) of a dependency. This module is used to test how Go 1.16 and 1.17 handle transitive dependencies on incompatible versions differently.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_graph_version.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.net/requireincompatible

go 1.15

require example.com/retract/incompatible v2.0.0+incompatible
```

----------------------------------------

TITLE: Go Package with Private Dependencies
DESCRIPTION: A Go package that imports two private repositories that require authentication. Used to test whether credentials are properly read from .netrc files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/netrc_issue66832.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package useprivate

import (
	_ "vcs-test.golang.org/auth/or401"
	_ "vcs-test.golang.org/auth/or404"
)
```

----------------------------------------

TITLE: Referencing Go Toolchain Module in go.mod
DESCRIPTION: This line shows the Go toolchain module path 'golang.org/toolchain' as it might appear within a project's `go.mod` file. This indicates a dependency on or requirement for this specific Go toolchain for building the project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.1.linux-amd64.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: Minimal Go Program for Testing
DESCRIPTION: This Go program simply exits with a status code of 1. It's likely used as a placeholder or for testing purposes in the context of the 'go bug' command test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/bug.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main

import (
    "os"
)

func main() {
    os.Exit(1)
}
```

----------------------------------------

TITLE: NetBSD ARM64 Kernel Event Structure Definition in Go
DESCRIPTION: Defines the Kevent_t structure used for kernel event notifications. Contains fields for event identifier, filter type, flags, and data.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_98

LANGUAGE: go
CODE:
```
type Kevent_t struct {
	Ident uint64
	Filter uint32
	Flags uint32
	Fflags uint32
	Pad_cgo_0 [4]uint8
	Data int64
	Udata int64
}
```

----------------------------------------

TITLE: Defining Go Module with Missing Dependency
DESCRIPTION: This go.mod file for example.net/a module demonstrates a scenario where a dependency (example.net/b) is imported in the code but not declared in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_extra.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module example.net/a

go 1.15

// example.net/a needs a dependency on example.net/b, but lacks a requirement
// on it (perhaps due to a missed file in a VCS commit).
```

----------------------------------------

TITLE: Git References Verification File
DESCRIPTION: Expected output for git show-ref command containing references to the main branch and v1.0.0 tag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/retract-pseudo.txt#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
713affd19d7b9b6dc876b603017f3dcaab8ba674 refs/heads/main
64c061ed4371ef372b6bbfd58ee32015d6bfc3e5 refs/tags/v1.0.0
```

----------------------------------------

TITLE: Defining Network-related Constants in Go for OpenBSD 386 CGO
DESCRIPTION: This snippet defines constants related to network operations, including socket options and protocol-specific flags for OpenBSD 386.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_48

LANGUAGE: Go
CODE:
```
const TCP_NOPUSH = 16
const TCP_NOPUSH ideal-int
const SIOCGETVLAN = 3223349648
const SIOCGETVLAN ideal-int
const SIOCSETVLAN = 2149607823
const SIOCSETVLAN ideal-int
```

----------------------------------------

TITLE: Test File with Sleep for First Package
DESCRIPTION: A simple Go test file for the first sleepy package that imports testing and time packages. It contains a single test function that sleeps for 200 milliseconds.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pattern.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p

import (
	"testing"
	"time"
)

func Test1(t *testing.T) {
	time.Sleep(200 * time.Millisecond)
}
```

----------------------------------------

TITLE: Display Unused Script
DESCRIPTION: A shell command to print a message indicating that this script is unused. It highlights that this script is not intended for active use and does not require any special dependencies, only echo.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-amd64.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
echo i am unused
```

----------------------------------------

TITLE: Managing Toolchain and Go Versions Separately
DESCRIPTION: This snippet demonstrates how to manage toolchain and Go versions separately, including adding a specific toolchain, removing it, and updating the Go version independently.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
go get toolchain@go1.23.9 go@1.23.5
go get toolchain@none
go get toolchain@go1.23.0 go@1.22.0
go get go@1.24.0
```

----------------------------------------

TITLE: Go Generate Run Flag Test
DESCRIPTION: Test file for verifying the -run flag functionality in go generate, containing multiple generate directives that can be selectively executed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test -run flag

//go:generate echo oh yes my man
//go:generate echo no, no, a thousand times no

package p
```

----------------------------------------

TITLE: Expected vendor/modules.txt Content for Go 1.14
DESCRIPTION: The expected content of the vendor/modules.txt file for Go 1.14. This file is used for comparison in the test to verify that the correct output is generated when running 'go mod vendor'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused_only.txt#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
# example.com v1.0.0
## explicit

```

----------------------------------------

TITLE: Socket Operation Functions for Darwin ARM64
DESCRIPTION: Socket-related system call functions for network operations including socket creation, configuration, and communication.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_121

LANGUAGE: Go
CODE:
```
func Socket(int, int, int) (int, error)
func Socketpair(int, int, int) ([2]int, error)
func SetsockoptByte(int, int, int, uint8) error
func SetsockoptInt(int, int, int, int) error
func Getsockname(int) (Sockaddr, error)
func Getpeername(int) (Sockaddr, error)
```

----------------------------------------

TITLE: Unused Gofmt Shell Script
DESCRIPTION: This shell script is intended as a placeholder and simply prints 'i am unused' to the console. It's not intended for active usage and serves no practical purpose within the toolchain setup.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-arm.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
echo i am unused
```

----------------------------------------

TITLE: Testing Start and End Anchors in Go Regex
DESCRIPTION: Test cases for regular expressions using start (^) and end ($) anchors with various combinations. These tests verify how anchors behave in different scenarios, including with empty strings.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
"^(?:^)$"
```

----------------------------------------

TITLE: Testing Explicit +incompatible Version Selection in Go Modules
DESCRIPTION: Tests that explicitly requesting a +incompatible version works correctly, showing that v2.0.0+incompatible can be resolved when specifically requested.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list -m github.com/russross/blackfriday@v2.0.0+incompatible
stdout '^github.com/russross/blackfriday v2\.0\.0\+incompatible$'
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Go module declaration for fuzz_parallel package using Go 1.17.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_parallel.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module fuzz_parallel

go 1.17
```

----------------------------------------

TITLE: Implementing Quote Collection Package in Go
DESCRIPTION: Defines a Go package that provides various quotes and sayings through exported functions. It imports the sampler package and implements four functions: Hello, Glass, Go, and Opt, each returning different quotes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.0.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

import "rsc.io/sampler"

// Hello returns a greeting.
func Hello() string {
	return sampler.Hello()
}

// Glass returns a useful phrase for world travelers.
func Glass() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return "I can eat glass and it doesn't hurt me."
}

// Go returns a Go proverb.
func Go() string {
	return "Don't communicate by sharing memory, share memory by communicating."
}

// Opt returns an optimization truth.
func Opt() string {
	// Wisdom from ken.
	return "If a program is too slow, it must have a loop."
}
```

----------------------------------------

TITLE: Original Go Sum File
DESCRIPTION: Contains the initial checksums for the module dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_7

LANGUAGE: text
CODE:
```
rsc.io/quote v1.0.0 h1:kQ3IZQzPTiDJxSZI98YaWgxFEhlNdYASHvh+MplbViw=
rsc.io/quote v1.0.0/go.mod h1:v83Ri/njykPcgJltBc/gEkJTmjTsNgtO1Y7vyIK1CQA=
```

----------------------------------------

TITLE: Configuring Module 'b' with Dependency on 'c v0.2.0'
DESCRIPTION: This go.mod file defines module 'b'. It requires module 'c' at version v0.2.0. This requirement is part of the dependency chain initiated by the test file `a1/a_test.go`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
-- b1/go.mod --
module b

go 1.17

require c v0.2.0
```

----------------------------------------

TITLE: Module Version Information in .info file
DESCRIPTION: JSON file containing version information for the module, specifying version v0.0.1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needall_v0.0.1.txt#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
{"Version":"v0.0.1"}
```

----------------------------------------

TITLE: Executing Go List Command for Custom GOROOT
DESCRIPTION: This shell command runs 'go list' to display the import paths and directories of dependencies for the ./bytes package. It demonstrates how the 'std' module is treated in a custom GOROOT setup.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_alt_goroot.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

go list -e -deps -f '{{.ImportPath}} {{.Dir}}' ./bytes
```

----------------------------------------

TITLE: Testing Go Build with Relative GOTMPDIR Path
DESCRIPTION: This bash script tests how 'go build' behaves when GOTMPDIR is set to a relative path. It verifies that Go properly converts this to an absolute working directory path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_relative_tmpdir.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=off

# If GOTMPDIR is relative, 'go build' should derive an absolute $WORK directory.
cd $WORK
mkdir tmp
env GOTMPDIR=tmp
go build -work a
stderr 'WORK='$WORK

# Similarly if TMP/TMPDIR is relative.
env GOTMPDIR=
env TMP=tmp    # Windows
env TMPDIR=tmp # Unix
go build -work a
stderr 'WORK='$WORK
```

----------------------------------------

TITLE: Testing Go Environment Variable Unset Operations
DESCRIPTION: Script that tests the behavior of unsetting Go environment variables (GOENV, GOOS, GOARCH, GOEXPERIMENT) with invalid values. Verifies error messages and successful unset operations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_unset.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GOENV=badenv
env GOOS=
env GOARCH=
env GOEXPERIMENT=

! go env
stderr '^go(\.exe)?: unknown GOEXPERIMENT badexp$'

go env -u GOEXPERIMENT

! go env
stderr '^go: unsupported GOOS/GOARCH pair bados/badarch$'

! go env -u GOOS
stderr '^go: unsupported GOOS/GOARCH pair \w+/badarch$'

! go env -u GOARCH
stderr '^go: unsupported GOOS/GOARCH pair bados/\w+$'

go env -u GOOS GOARCH

go env
```

----------------------------------------

TITLE: Go Work File with Future Version
DESCRIPTION: This go.work file specifies a future Go version (1.99999) and includes the current directory in the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_7

LANGUAGE: Plain Text
CODE:
```
go 1.99999
use .
```

----------------------------------------

TITLE: Implementation of a Go Benchmark Function that Calls Fatal
DESCRIPTION: A test file containing a benchmark function that deliberately calls b.Fatal() to trigger a test failure. This is used to verify that benchmarks properly report failures when Fatal is called.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_fatal.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package benchfatal

import "testing"

func BenchmarkThatCallsFatal(b *testing.B) {
	b.Fatal("called by benchmark")
}
```

----------------------------------------

TITLE: Fetching and Listing Package Dependencies in Go
DESCRIPTION: This snippet shows how to fetch a specific version of a package and list it using Go commands. It also demonstrates copying the go.mod file for comparison.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchmod.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go get example.net/pkgremoved@v0.1.0

go list example.net/pkgremoved
stdout '^example.net/pkgremoved'

cp go.mod go.mod.orig
```

----------------------------------------

TITLE: Shell Test Script for Cgo Fuzzing
DESCRIPTION: Shell script setting up environment variables and running a Go test with fuzzing enabled to verify cgo compatibility. The script expects successful test completion.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cgo.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
[!fuzz] skip
[!cgo] skip
[short] skip
env GOCACHE=$WORK/cache

# Test that fuzzing works with cgo (issue 65169)

go test -fuzz=. -fuzztime=1x
stdout ok
! stdout FAIL
```

----------------------------------------

TITLE: Testing Cgo Function (Go)
DESCRIPTION: A test file that imports the package and tests the F() function which contains Cgo code. This is used to generate coverage reports for the Cgo implementation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_extra_file.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package p_test

import (
	. "cgocover4"
	"testing"
)

func TestF(t *testing.T) {
	F()
}
```

----------------------------------------

TITLE: Go Module Definition with Dependencies
DESCRIPTION: Defines a Go module with dependencies on various test modules and replaces to point to local directories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module use

go 1.16

require (
	short v0.0.0
	multiline v0.0.0
	long v0.0.0
	unprintable v0.0.0
)

replace (
	short v0.0.0 => ./short
	multiline v0.0.0 => ./multiline
	long v0.0.0 => ./long
	unprintable v0.0.0 => ./unprintable
)
```

----------------------------------------

TITLE: Testing Zero Exit Status in Go Test
DESCRIPTION: A Go test that explicitly calls os.Exit(0) which will cause 'go test' to panic since it exits with a zero status code without properly completing test execution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_exit.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package zero

import (
	"os"
	"testing"
)

func TestExitZero(t *testing.T) {
	os.Exit(0)
}
```

----------------------------------------

TITLE: Expected Modules.txt Format Sample
DESCRIPTION: A sample of the expected content for the vendor/modules.txt file showing correct workspace module references with explicit markings and replacements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
## workspace
# example.com/p v1.0.0 => ./p
## explicit; go 1.21
# example.com/q v1.0.0 => ./q
## explicit; go 1.21
```

----------------------------------------

TITLE: Configuring Anonymous VMA Naming in Go
DESCRIPTION: This snippet demonstrates how to disable the new feature of annotating anonymous memory mappings on Linux systems using the GODEBUG setting. This feature provides context about the purpose of memory allocations.
SOURCE: https://github.com/golang/go/blob/master/doc/next/4-runtime.md#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
decoratemappings=0
```

----------------------------------------

TITLE: Updating X.509 Certificate Handling in Go
DESCRIPTION: New fields and types for handling X.509 certificates in the crypto/x509 package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_10

LANGUAGE: Go
CODE:
```
const NoValidChains = 10
const NoValidChains InvalidReason

type Certificate struct {
    InhibitAnyPolicy int
    InhibitAnyPolicyZero bool
    InhibitPolicyMapping int
    InhibitPolicyMappingZero bool
    PolicyMappings []PolicyMapping
    RequireExplicitPolicy int
    RequireExplicitPolicyZero bool
}

type PolicyMapping struct {
    IssuerDomainPolicy OID
    SubjectDomainPolicy OID
}

type VerifyOptions struct {
    CertificatePolicies []OID
}
```

----------------------------------------

TITLE: Adding Masaram_Gondi RangeTable to unicode package
DESCRIPTION: Adds support for the Masaram Gondi script block by defining a new RangeTable in the unicode package. This allows identifying and handling characters from this Unicode block.
SOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_16

LANGUAGE: go
CODE:
```
pkg unicode, var Masaram_Gondi *RangeTable
```

----------------------------------------

TITLE: Declaring ThirdBase Struct in Go for Baseball Data Modeling
DESCRIPTION: Defines a struct type 'ThirdBase' in the p3 package. This struct likely represents attributes and data related to the third base position in baseball.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p3/golden.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
type ThirdBase struct
```

----------------------------------------

TITLE: Verifying JSON Output Structure
DESCRIPTION: Uses grep-like commands to ensure that the output is properly formatted as JSON, checking for the presence of curly braces at the start and end of each line.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_issue35169.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
! stdout '^[^{]'
! stdout '[^}]\n$'
```

----------------------------------------

TITLE: BuildInfo and Module types for Go module information
DESCRIPTION: Types and functions in runtime/debug for retrieving Go module information, including version, dependencies, and build details.
SOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
func ReadBuildInfo() (*BuildInfo, bool)
type BuildInfo struct
type BuildInfo struct, Deps []*Module
type BuildInfo struct, Main Module
type BuildInfo struct, Path string
type Module struct
type Module struct, Path string
type Module struct, Replace *Module
type Module struct, Sum string
type Module struct, Version string
```

----------------------------------------

TITLE: Database and Debug Package Updates - Go
DESCRIPTION: Addition of Drivers function to sql package and UnspecifiedType handling in debug/dwarf package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
pkg database/sql, func Drivers() []string

pkg debug/dwarf, method (*UnspecifiedType) Basic() *BasicType
pkg debug/dwarf, method (*UnspecifiedType) Common() *CommonType
pkg debug/dwarf, method (*UnspecifiedType) Size() int64
pkg debug/dwarf, method (*UnspecifiedType) String() string
pkg debug/dwarf, type UnspecifiedType struct
pkg debug/dwarf, type UnspecifiedType struct, embedded BasicType
```

----------------------------------------

TITLE: Terminal Control Constants for Darwin ARM64
DESCRIPTION: Defines terminal control constants for input/output processing, including character size, stop bits, and local modes
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_55

LANGUAGE: Go
CODE:
```
const (
    BRKINT = 2
    CLOCAL = 32768
    CREAD = 2048
    CS5 = 0
    CS6 = 256
    CS7 = 512
    CS8 = 768
    CSIZE = 768
    // ... other terminal constants
)
```

----------------------------------------

TITLE: Conditional Go Source File with Build Constraint
DESCRIPTION: A Go source file with a build constraint that uses a non-existent tag. This file won't be included in normal builds, which is used to test that removing it doesn't cause staleness.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_rebuild_removed.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
// +build missingtag

package mypkg
```

----------------------------------------

TITLE: Specifying Module Version Information in JSON
DESCRIPTION: This JSON object specifies the version identifier (`v1.9.0`) for the current state of the module. This version corresponds to one of the versions marked for retraction in the associated `go.mod` file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prev_v1.9.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v1.9.0"}
```

----------------------------------------

TITLE: Demonstrating debuglog Usage in Go Runtime
DESCRIPTION: Example of how to use the debuglog tool for low-overhead debugging in the Go runtime. It shows how to create a log entry with a string and unsigned 32-bit integer.
SOURCE: https://github.com/golang/go/blob/master/src/runtime/HACKING.md#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
dlog().s("hello world").u32(5).end()
```

----------------------------------------

TITLE: Background Process Execution and Output Verification
DESCRIPTION: Demonstrates running multiple background processes, output verification, and wait behavior for concurrent executions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/script_wait.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
exec echo foo
stdout foo

exec echo foo &
exec echo bar &
! exec false &

# Starting a background process should clear previous output.
! stdout foo

# Wait should set the output to the concatenated outputs of the background
# programs, in the order in which they were started.
wait
stdout 'foo\nbar'
```

----------------------------------------

TITLE: Go Module Download Error Case Tests
DESCRIPTION: Test cases for handling various error conditions in module downloads including non-existent versions and invalid paths
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/reuse_git.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
! go mod download -x -json vcs-test.golang.org/git/hello.git/v9@latest
! go mod download -x -json vcs-test.golang.org/git/hello.git/sub/v9@latest
! go mod download -x -json vcs-test.golang.org/git/hello.git@nonexist
```

----------------------------------------

TITLE: Module B Configuration
DESCRIPTION: Module b's configuration file specifying a dependency on module c version 0.2.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_newroot.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.net/b

go 1.16

require example.net/c v0.2.0
```

----------------------------------------

TITLE: Sub Package Implementation in Go
DESCRIPTION: A sub-package implementation that provides different execution paths based on command-line arguments. It includes cases for normal execution, exit with code 0, exit with code 1, and panic, which are used to test code coverage in various program termination scenarios.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_simple.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package sub

import "os"

func S() {
	switch os.Args[1] {
	case "normal":
		println("hi")
	case "goodexit":
		os.Exit(0)
	case "badexit":
		os.Exit(1)
	case "panic":
		panic("something bad happened")
	}
}
```

----------------------------------------

TITLE: Old Version Module Definition
DESCRIPTION: Module definition for the older version of the main module, showing its dependency on example.net/x.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_lazy_self.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module golang.org/issue/46078

go 1.17

require example.net/x v0.1.0
```

----------------------------------------

TITLE: Implementing Go 1.13+ Features in a Dependency Package - Go
DESCRIPTION: Contains the Go source code for the dependency package 'sub', showcasing the use of features added in Go 1.13 (signed shift counts) and 1.14 (overlapping interfaces and type aliases for interfaces). Defines a function 'F' leveraging signed shift counts and creates complex interface types 'Alias' and 'Defined'. Depends on Go 1.14 language features; the parent module can invoke these types and functions, even if it is on an earlier Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_mixed.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
-- sub/sub.go --
package sub

// signed shift counts added in Go 1.13
func F(l, r int) int { return l << r }

type m1 interface { M() }
type m2 interface { M() }

// overlapping interfaces added in Go 1.14
type Alias = interface { m1; m2; M() }
type Defined interface { m1; m2; M() }
```

----------------------------------------

TITLE: Go Module Definition for Test Environment
DESCRIPTION: Defines a simple Go module used as the main module for this test script. It specifies the module name as 'example.com/m' and requires Go 1.18 which first introduced fuzzing support.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_modcache.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/m

go 1.18
```

----------------------------------------

TITLE: Adding Cut function to bytes package
DESCRIPTION: This snippet adds a new Cut function to the bytes package. It takes two byte slices as input and returns three values: two byte slices and a boolean.
SOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
pkg bytes, func Cut([]uint8, []uint8) ([]uint8, []uint8, bool)
```

----------------------------------------

TITLE: Implementing Test Package with PrintFileForTest and TestMain
DESCRIPTION: Defines a test package with a PrintFileForTest function and a TestMain function that calls both PrintFile and PrintFileForTest.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath_test_suffix.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package pkg_test_test

import (
	"runtime"
	"testing"

	"example.com/pkg_test"
)

func PrintFileForTest() {
	_, file, _, _ := runtime.Caller(0)
	println(file)
}

func TestMain(m *testing.M) {
	pkg_test.PrintFile()
	PrintFileForTest()
}
```

----------------------------------------

TITLE: Package with Multiple Imports
DESCRIPTION: Package demonstrating multiple imports including both vendored and non-vendored packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_import.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package x

import _ "p"
import _ "q"
import _ "r"
import _ "vend/dir1"      // not vendored
import _ "vend/dir1/dir2" // vendored
```

----------------------------------------

TITLE: Executing Go Module Vendoring
DESCRIPTION: Runs 'go mod vendor' and checks that no downloading or finding operations occur due to all dependencies being replaced.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
go mod vendor
! stderr 'downloading'
! stderr 'finding'
```

----------------------------------------

TITLE: Go Work File Definition
DESCRIPTION: A minimal go.work file that specifies Go 1.21 as the language version. This file creates a workspace but intentionally doesn't include any modules for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_empty.txt#2025-04-22_snippet_2

LANGUAGE: txt
CODE:
```
go 1.21
```

----------------------------------------

TITLE: Golang Module and Upgrade for Package x.2 with Constant
DESCRIPTION: The Go module under version `x.2` defines a package with an additional constant, `AddedInV2`, indicating new features or changes in this version of the module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_consistency.txt#2025-04-22_snippet_5

LANGUAGE: plaintext
CODE:
```
module example.com/x

go 1.17
```

LANGUAGE: go
CODE:
```
package x

const AddedInV2 = true
```

----------------------------------------

TITLE: Copying and Validating go.mod Files
DESCRIPTION: This sequence of shell commands illustrates how to copy and validate go.mod files with Go's module system. Dependencies include a proper Go setup. It involves copying go.mod files and validating using 'go list' utility, useful for testing module replacements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badmod.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
cp go.mod go.mod.usesub
go list -m -mod=mod all
```

----------------------------------------

TITLE: Go Module Download Command Tests
DESCRIPTION: Series of go mod download commands testing various version specifications and error cases with JSON output validation
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/reuse_git.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go mod download -x -json vcs-test.golang.org/git/hello.git@v0.0.0-20170922010558-fc3a09f3dc5c
go mod download -x -json vcs-test.golang.org/git/hello.git@latest
go mod download -x -json vcs-test.golang.org/git/hello.git@fc3a09f3dc5c
```

----------------------------------------

TITLE: Defining Module 'a' Version 0.1.0 in Go
DESCRIPTION: This go.mod file defines the module 'example.net/a' version 0.1.0 without any dependencies. It's part of the test setup for dependency resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue60490.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module example.net/a

go 1.19
```

----------------------------------------

TITLE: Go Test for Environment Variable Validation
DESCRIPTION: A Go test file that checks if the TERM environment variable is empty. The test will fail if TERM is set to any non-empty value, verifying that environment variables set in the test script are properly passed to the test process.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_env_term.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main
import ("os"; "testing")
func TestEnv(t *testing.T) {
	if os.Getenv("TERM") != "" {
		t.Fatal("TERM is set")
	}
}
```

----------------------------------------

TITLE: Go Test Implementation with Subtests
DESCRIPTION: Go test file implementing a chatty test with multiple subtests. Each subtest runs in a loop and logs messages multiple times to generate verbose output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_success.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package chatty_test

import (
	"testing"
	"fmt"
)

func TestChatty(t *testing.T) {
    for i := 0; i < 3; i++ {
        t.Run(fmt.Sprintf("sub-%d", i), func(t *testing.T) {
            for j := 0; j < 2; j++ {
                t.Logf("this is sub-%d", i)
            }
        })
    }
}
```

----------------------------------------

TITLE: Implementing Dependency Package 'p1' (Go)
DESCRIPTION: This Go file defines the 'p1' package within the 'coverdep' module. It imports the standard 'errors' package using the blank identifier (_). This forces the initialization of the 'errors' package without directly using any of its functions, which might be relevant for testing dependency tracking or initialization side effects in the context of code coverage.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dash_c.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- p1/p1.go --
package p1

import _ "errors"
```

----------------------------------------

TITLE: Declaring Package Name (Go)
DESCRIPTION: This Go code snippet declares the package name `incompatible` for the `incompatible.go` source file within the `example.com/retract/incompatible` module. It establishes the namespace for the code within this file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_incompatible_v1.0.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package incompatible
```

----------------------------------------

TITLE: Main Package Implementation
DESCRIPTION: Simple Go program that imports a module to test version handling
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_retractions_issue66403.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import _ "example.com/retract/newergoversion"
```

----------------------------------------

TITLE: Package Z with Vendored Import
DESCRIPTION: Package 'z' importing package 'x' using vendored path
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_resolve.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package z

import _ "q/vendor/x"
```

----------------------------------------

TITLE: Module 'b' Definition with Dependency on x v0.1.0
DESCRIPTION: The go.mod file for module 'b' that requires x v0.1.0. This creates a version selection challenge as module 'a' requires x v0.2.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_tidy.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module b
go 1.13
require x v0.1.0
```

----------------------------------------

TITLE: Implementing Timeout Benchmark Test in Go
DESCRIPTION: Defines a benchmark test that sleeps for 1 second to test timeout behavior. The test is designed to exceed the specified timeout of 750ms to verify proper timeout handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_timeout.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package timeoutbench_test

import (
	"testing"
	"time"
)

func BenchmarkSleep1s(b *testing.B) {
	time.Sleep(1 * time.Second)
}
```

----------------------------------------

TITLE: Go Module Definition for Fuzzing Tests
DESCRIPTION: Go module definition file specifying module name and Go version requirements for the fuzzing tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_interesting.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module fuzz

go 1.17
```

----------------------------------------

TITLE: Initial Go Module Definition for 'm' (Go 1.14)
DESCRIPTION: The initial `go.mod` file for the main module `m`, targeting Go 1.14 (eager loading). It requires module `a` and uses replace directives for local development/testing of dependencies `a`, `b`, and `c`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_3

LANGUAGE: gomod
CODE:
```
-- go.mod --
module m

go 1.14

require a v0.1.0

replace (
	a v0.1.0 => ./a1
	b v0.1.0 => ./b1
	c v0.1.0 => ./c1
	c v0.2.0 => ./c2
)
```

----------------------------------------

TITLE: Executing Go Get Command for Specific Module Version
DESCRIPTION: This command attempts to get a specific version (v0.2.0) of the 'example.net/a/p' package. It tests the behavior of 'go get' when resolving module versions under specific conditions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue37438.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go get example.net/a/p@v0.2.0
```

----------------------------------------

TITLE: Testing Runtime.Goexit Behavior
DESCRIPTION: Test file containing two example tests - one that passes normally and another that calls runtime.Goexit() to demonstrate panic behavior. Used to verify issue golang.org/issue/41084.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_example_goexit.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"runtime"
)

func Example_pass() {
	fmt.Println("pass")
	// Output:
	// pass
}

func Example_goexit() {
	runtime.Goexit()
	// Output:
}
```

----------------------------------------

TITLE: Testing Go Mod Download Output with Local Module Replacements
DESCRIPTION: Shell command that runs 'go mod download' with JSON output for all modules and verifies it produces no output when the module is replaced locally.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_replace_file.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go mod download -json all
cmp stdout no-output
```

----------------------------------------

TITLE: Go Build Command with Empty Output File
DESCRIPTION: Shell command demonstrating building a Go program with output directed to an existing empty file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_compile_tempfile.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go build -o empty-file$GOEXE main.go
```

----------------------------------------

TITLE: Declaring FreeBSD Error and Interface Constants - Go
DESCRIPTION: This block defines error code constants (e.g., ENOTRECOVERABLE, EOWNERDEAD, ELAST), BIOS ioctl values, and interface flag values for use in Go code targeting the FreeBSD syscalls layer. These declarations are important for handling OS error codes, setting network flags, and interacting with device files correctly. Used in system-level Go programs or Go packages that perform raw socket and network interface manipulation.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_9

LANGUAGE: Go
CODE:
```
const ENOTRECOVERABLE = 95
const ENOTRECOVERABLE Errno
const EOWNERDEAD = 96
const EOWNERDEAD Errno
const ELAST = 96
const IFT_CARP = 248
const IFT_CARP ideal-int

```

----------------------------------------

TITLE: Defining IPv4 Constants for Darwin ARM64 in Go
DESCRIPTION: This snippet defines various IPv4-related constants for the Darwin ARM64 platform. These constants are used for configuring IPv4 sockets, setting multicast options, and defining protocol-specific values.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_71

LANGUAGE: Go
CODE:
```
const IP_ADD_MEMBERSHIP = 12
const IP_ADD_SOURCE_MEMBERSHIP = 70
const IP_BLOCK_SOURCE = 72
const IP_BOUND_IF = 25
const IP_DEFAULT_MULTICAST_LOOP = 1
const IP_DEFAULT_MULTICAST_TTL = 1
const IP_DF = 16384
const IP_DROP_MEMBERSHIP = 13
const IP_DROP_SOURCE_MEMBERSHIP = 71
const IP_HDRINCL = 2
const IP_IPSEC_POLICY = 21
const IP_MAXPACKET = 65535
const IP_MAX_GROUP_SRC_FILTER = 512
const IP_MAX_MEMBERSHIPS = 4095
const IP_MAX_SOCK_MUTE_FILTER = 128
const IP_MAX_SOCK_SRC_FILTER = 128
const IP_MF = 8192
const IP_MIN_MEMBERSHIPS = 31
const IP_MSFILTER = 74
const IP_MSS = 576
const IP_MULTICAST_IF = 9
const IP_MULTICAST_IFINDEX = 66
const IP_MULTICAST_LOOP = 11
const IP_MULTICAST_TTL = 10
const IP_MULTICAST_VIF = 14
const IP_OFFMASK = 8191
const IP_OPTIONS = 1
const IP_PKTINFO = 26
const IP_PORTRANGE = 19
const IP_PORTRANGE_DEFAULT = 0
const IP_PORTRANGE_HIGH = 1
const IP_PORTRANGE_LOW = 2
const IP_RECVDSTADDR = 7
const IP_RECVIF = 20
const IP_RECVOPTS = 5
const IP_RECVPKTINFO = 26
const IP_RECVRETOPTS = 6
const IP_RECVTTL = 24
const IP_RETOPTS = 8
const IP_RF = 32768
const IP_TOS = 3
const IP_TTL = 4
const IP_UNBLOCK_SOURCE = 73
```

----------------------------------------

TITLE: Defining Termios Structure in Go for NetBSD ARM
DESCRIPTION: This structure defines the terminal I/O settings for NetBSD ARM systems. It includes flags for input, output, control, and local modes, as well as special control characters and speed settings.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_32

LANGUAGE: Go
CODE:
```
type Termios struct {
	Iflag  uint32
	Oflag  uint32
	Cflag  uint32
	Lflag  uint32
	Cc     [20]uint8
	Ispeed int32
	Ospeed int32
}
```

----------------------------------------

TITLE: FreeBSD syscall constants and functions for 386 architecture
DESCRIPTION: Constants and functions for file permissions and operations in the syscall package specific to the FreeBSD 386 architecture.
SOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
const S_IRWXG = 56
const S_IRWXG ideal-int
const S_IRWXO = 7
const S_IRWXO ideal-int
func Fstatat(int, string, *Stat_t, int) error
func Mknod(string, uint32, uint64) error
```

----------------------------------------

TITLE: Defining System Call Functions for Go
DESCRIPTION: Function prototypes for common system calls like Fstatat, Mknod, and Syscall18 are defined for use in FreeBSD and Windows Go programs. These functions interface with the operating system to perform tasks such as retrieving file status and creating special files.
SOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_17

LANGUAGE: Go
CODE:
```
func Fstatat(fd int, path string, stat *Stat_t, flag int) error
func Mknod(path string, mode uint32, dev uint64) error
func Syscall18(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18 uintptr) (r1, r2 uintptr, err Errno)
```

----------------------------------------

TITLE: Defining Go Module with Future Version Requirement
DESCRIPTION: This go.mod file defines a module named 'example.com' that requires Go version 1.999, which is a future version. It also includes an invalid line 'anewblock foo' to test error handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_unknown_block.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example.com

go 1.999

anewblock foo
```

----------------------------------------

TITLE: Rational Number to Float32 Conversion - math/big Package - Go
DESCRIPTION: Adds a Float32() method to the math/big Rat (rational number) type, enabling conversion of a Rat value to float32. The return is a tuple (float32, bool), where bool indicates whether the value is exact. Prerequisite: importing math/big, creating a Rat value; result may be inexact due to rounding.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_16

LANGUAGE: Go
CODE:
```
method (*Rat) Float32() (float32, bool)
```

----------------------------------------

TITLE: Deprecations in compress/flate package
DESCRIPTION: Lists deprecated types in the compress/flate package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_18

LANGUAGE: Go
CODE:
```
pkg compress/flate, type ReadError //deprecated
pkg compress/flate, type WriteError //deprecated
```

----------------------------------------

TITLE: Cgo Integration File
DESCRIPTION: Simple Go file that imports the C package to enable cgo functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cgo.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p

import "C"
```

----------------------------------------

TITLE: Checking Version Metadata After Additional Commit and Update
DESCRIPTION: This snippet adds another commit and then reverts to a previous state to ensure that the VCS info reflects the checked-out revision, not the latest. Checks the go version -m output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_4

LANGUAGE: Shell
CODE:
```
cp ../../outside/empty.txt .
exec hg ci -Am 'another commit' --user test-user --date '2024-08-01T19:24:38+00:00'
exec hg update --clean -r '.^'

# Modified state is not thrown off by extra status output
exec hg bisect -v -g .
exec hg bisect -v -b '.^^'
exec hg status
stdout '^.+'
go install
go version -m $GOBIN/a$GOEXE
stdout '^\tbuild\tvcs.revision=eae91df98b5dd3c4451accf64c683ddc3edff6a9$'
stdout '^\tbuild\tvcs.time=2024-07-31T01:21:27Z$'
stdout '^\tbuild\tvcs.modified=false$'
stdout '\s+mod\s+example.com/a\s+v1.2.3\s+'
rm $GOBIN/a$GOEXE
```

----------------------------------------

TITLE: Main Go Program
DESCRIPTION: Minimal Go program serving as the main entry point for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tool.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Specifying Android ARM64 Build Target
DESCRIPTION: Platform specification indicating the build target is Android on ARM64 architecture. This is used to configure the Go build process for Android ARM64 platforms.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/internal/imports/testdata/android/tags.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
android arm64
```

----------------------------------------

TITLE: Testing test binary naming for fortune v2 module
DESCRIPTION: Compiles a test binary for rsc.io/fortune/v2 and verifies that it's named 'fortune.test' instead of 'v2.test'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_versioned.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
# The default test binary name shouldn't be v2.test$GOEXE
go test -c rsc.io/fortune/v2
! exists v2.test$GOEXE
exists fortune.test$GOEXE
```

----------------------------------------

TITLE: Main Package Test Implementation
DESCRIPTION: Test function that verifies no VCS settings are present in the build info. Uses the debug.ReadBuildInfo() to check build settings and fails if any VCS-related settings are found.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildvcs.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	"runtime/debug"
	"strings"
	"testing"
)

func TestDetail(t *testing.T) {
	bi, ok := debug.ReadBuildInfo()
	if !ok {
		t.Fatal("BuildInfo not present")
	}
	for _, s := range bi.Settings {
		if strings.HasPrefix(s.Key, "vcs.") {
			t.Fatalf("unexpected VCS setting: %s=%s", s.Key, s.Value)
		}
	}
}
```

----------------------------------------

TITLE: Executing Go Module Version Resolution Test
DESCRIPTION: Runs a Go test to verify that the correct pseudo-version is resolved based on the semantically-latest tag in the commit history. It uses the 'go get' command to fetch a specific repository and 'go list' to check the resolved version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo_other_branch.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go get vcs-test.golang.org/git/tagtests.git@master
go list -m all
stdout '^vcs-test.golang.org/git/tagtests.git v0.2.3-0\.'
```

----------------------------------------

TITLE: Setting Environment Variables for Go Module Testing
DESCRIPTION: Sets the GO111MODULE environment variable to 'on' to enable module mode and sets GOPATH to an invalid path (a file instead of a directory).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_empty.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

env GOPATH=$WORK${/}invalid-gopath
```

----------------------------------------

TITLE: Defining Go Module with Version Specification
DESCRIPTION: This snippet defines a Go module file (go.mod) that specifies the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_future.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module m
go 1.21
```

----------------------------------------

TITLE: Implementing Package with Constant
DESCRIPTION: Defines the 'p' package with a constant 'X' set to 42. This is the package that will be documented by the 'go doc' command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc_path.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package p

const X = 42
```

----------------------------------------

TITLE: Module D Configuration
DESCRIPTION: Module d's configuration file requiring module c version 0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_newroot.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.net/d

go 1.16

require example.net/c v0.1.0
```

----------------------------------------

TITLE: Setting up Go environment for module testing
DESCRIPTION: Sets up the Go environment for module testing by enabling modules, disabling the proxy, and turning off the checksum database.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
env GOPROXY=direct
env GOSUMDB=off
```

----------------------------------------

TITLE: Minimal Go Program for Build Testing
DESCRIPTION: This is a simple Go program within the 'main' package. Its 'main' function initializes an integer slice, creates a pointer to a two-element array derived from a sub-slice of the original slice, and prints the second element of that array using `println`. This program serves as the compilation target for the Go build tests in the accompanying script.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_gcflags_order.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- m/main.go --
package main

func main() {
    var s = []int{1, 2, 3}
    var pa = (*[2]int)(s[1:])
    println(pa[1])
}
```

----------------------------------------

TITLE: Package Implementations for Test Dependencies
DESCRIPTION: The Go package implementations for the test dependencies with imports that form a dependency chain, triggering toolchain switching at different points.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
// a1/a.go
package a
```

LANGUAGE: go
CODE:
```
// a2/a.go
package a
```

LANGUAGE: go
CODE:
```
// b1/b.go
package b

import _ "example.net/c"  // Note: module b is intentionally untidy, as if due to a bad git merge
```

LANGUAGE: go
CODE:
```
// c1/c.go
package c

import _ "example.net/d"
```

LANGUAGE: go
CODE:
```
// d1/d.go
package d
```

LANGUAGE: go
CODE:
```
// d2/d.go
package d
```

----------------------------------------

TITLE: Configuring file-based GOPROXY
DESCRIPTION: Sets up a file-based GOPROXY using the download cache, with different paths for Windows and non-Windows systems.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fileproxy_vcs_missing_issue51589.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
[GOOS:windows] env GOPROXY=file:///$WORK/gopath/pkg/mod/cache/download
[!GOOS:windows] env GOPROXY=file://$WORK/gopath/pkg/mod/cache/download
```

----------------------------------------

TITLE: Quote Package Import
DESCRIPTION: Go package that imports the rsc.io/quote package as a blank import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_local.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package usequote
import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Main Go Module Definition
DESCRIPTION: Go module definition file for example.net/m with replacement directive for unresolved package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_symlink_issue35941.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.net/m

go 1.16

replace example.net/unresolved v0.1.0 => ../unresolved
```

----------------------------------------

TITLE: Defining Resource Limit Constants in Go for Darwin ARM64 CGO
DESCRIPTION: This snippet defines constants for resource limits used in system calls on Darwin ARM64 with CGO. These constants are used to set or get process resource limits.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_172

LANGUAGE: Go
CODE:
```
const RLIMIT_AS = 5
const RLIMIT_AS ideal-int
const RLIMIT_CORE = 4
const RLIMIT_CORE ideal-int
const RLIMIT_CPU = 0
const RLIMIT_CPU ideal-int
const RLIMIT_CPU_USAGE_MONITOR = 2
const RLIMIT_CPU_USAGE_MONITOR ideal-int
const RLIMIT_DATA = 2
const RLIMIT_DATA ideal-int
const RLIMIT_FSIZE = 1
const RLIMIT_FSIZE ideal-int
const RLIMIT_NOFILE = 8
const RLIMIT_NOFILE ideal-int
const RLIMIT_STACK = 3
const RLIMIT_STACK ideal-int
const RLIM_INFINITY = 9223372036854775807
const RLIM_INFINITY ideal-int
```

----------------------------------------

TITLE: Creating Go Modules with Different Versions
DESCRIPTION: Creates multiple Go modules with different Go versions and toolchain specifications, testing version requirements and compatibility.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_toolchain.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env TESTGO_VERSION=go1.50
mkdir m1_22_0
go mod init -C m1_22_0
go mod edit -C m1_22_0 -go=1.22.0 -toolchain=go1.99.0
mkdir m1_22_1
go mod init -C m1_22_1
go mod edit -C m1_22_1 -go=1.22.1 -toolchain=go1.99.1
mkdir m1_24_rc0
go mod init -C m1_24_rc0
go mod edit -C m1_24_rc0 -go=1.24rc0 -toolchain=go1.99.2
```

----------------------------------------

TITLE: Go List Command Import Cycle Detection
DESCRIPTION: Command to list package dependencies and detect import cycles using go list with JSON output format specifications for ImportPath, Error, and DepsErrors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_cycle_deps_errors.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go list -e -deps -json=ImportPath,Error,DepsErrors m/a
```

----------------------------------------

TITLE: Verifying 'atomic' Coverage Mode with Race Detector (Shell)
DESCRIPTION: Uses `grep` to check the coverage profile (`$WORK/cover.out`) generated by the test run with the race detector. It asserts that the file contains exactly one line (`-count=1`) starting with `mode: atomic`. This confirms that the coverage mode correctly switches to 'atomic' when the `-race` flag is used.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_modes.txt#2025-04-22_snippet_7

LANGUAGE: shell
CODE:
```
grep -count=1 '^mode: atomic$' $WORK/cover.out
```

----------------------------------------

TITLE: Main Go Module Definition
DESCRIPTION: Main module configuration defining dependencies and module path
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_ambiguous.txt#2025-04-22_snippet_0

LANGUAGE: gomod
CODE:
```
module example.com/m

go 1.17

replace example.net/indirect v0.1.0 => ./indirect

require example.net/indirect v0.1.0

require example.net/ambiguous/nested v0.1.0 // indirect
```

----------------------------------------

TITLE: Go Environment File Configuration - Path B
DESCRIPTION: Environment variable configuration file for path ./b/go.env setting local toolchain
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_changed.txt#2025-04-22_snippet_2

LANGUAGE: properties
CODE:
```
GOTOOLCHAIN=local
```

----------------------------------------

TITLE: CGO Integration with C Header Replace
DESCRIPTION: Go file that uses CGO to call a C function defined in an external header and implemented in a C file. Tests that header files can be replaced in overlays.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
package main

// #include "cgo_header.h"
import "C"

func main() {
	C.say_hello()
}
```

----------------------------------------

TITLE: Excluding Module Version in go.exclude.mod
DESCRIPTION: Specifies the module and excludes a specific version of rsc.io/quote in the go.exclude.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_8

LANGUAGE: Go
CODE:
```
module x

exclude rsc.io/quote v1.5.0
```

----------------------------------------

TITLE: Package Using Indirect Dependency
DESCRIPTION: Go source file demonstrating usage of an indirect package dependency
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_promote_implicit.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package use

import _ "indirect-with-pkg"
```

----------------------------------------

TITLE: Testing Go Get Command with Non-existent Nested Module
DESCRIPTION: This snippet tests the 'go get' command with a pattern that could match a nested module but doesn't exist. It verifies that the command reports a module resolution error with a 404 Not Found message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_nopkgs.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go get example.net/emptysubdir/... # control case

! go get example.net/emptysubdir/subdir/...
! stderr 'matched no packages'
stderr '^go: example\.net/emptysubdir/subdir/\.\.\.: module example\.net/emptysubdir/subdir: reading http://.*: 404 Not Found\n\tserver response: 404 page not found\n\z'
```

----------------------------------------

TITLE: Split Package Module Definition
DESCRIPTION: Basic module definition for different versions of the split package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_split.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.net/split

go 1.16
```

----------------------------------------

TITLE: External Test Implementation
DESCRIPTION: External test file using _test package suffix with vendored imports.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_list_issue11977.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package tx_test

import _ "vendor.org/p"
import _ "vendor.org/p1"
import "testing"

func TestNop(t *testing.T) {}
```

----------------------------------------

TITLE: Go Test Package for Testing Cache Behaviors
DESCRIPTION: A comprehensive test package that includes various test functions to verify Go's test caching behavior. It includes tests that check file content, size, environment variables, directory listing, executable files, and coverage.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_cache_inputs.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package testcache

import (
	"io"
	"os"
	"testing"
)

func TestChdir(t *testing.T) {
	os.Chdir("..")
	defer os.Chdir("testcache")
	info, err := os.Stat("testcache/file.txt")
	if err != nil {
		t.Fatal(err)
	}
	if info.Size()%2 != 1 {
		t.Fatal("even file")
	}
}

func TestOddFileContent(t *testing.T) {
	f, err := os.Open("file.txt")
	if err != nil {
		t.Fatal(err)
	}
	data, err := io.ReadAll(f)
	f.Close()
	if err != nil {
		t.Fatal(err)
	}
	if len(data)%2 != 1 {
		t.Fatal("even file")
	}
}

func TestOddFileSize(t *testing.T) {
	info, err := os.Stat("file.txt")
	if err != nil {
		t.Fatal(err)
	}
	if info.Size()%2 != 1 {
		t.Fatal("even file")
	}
}

func TestOddGetenv(t *testing.T) {
	val := os.Getenv("TESTKEY")
	if len(val)%2 != 1 {
		t.Fatal("even env value")
	}
}

func TestLookupEnv(t *testing.T) {
	_, ok := os.LookupEnv("TESTKEY")
	if !ok {
		t.Fatal("env missing")
	}
}

func TestDirList(t *testing.T) {
	f, err := os.Open(".")
	if err != nil {
		t.Fatal(err)
	}
	f.Readdirnames(-1)
	f.Close()
}

func TestExec(t *testing.T) {
	// Note: not using os/exec to make sure there is no unexpected stat.
	p, err := os.StartProcess("./script.sh", []string{"script"}, new(os.ProcAttr))
	if err != nil {
		t.Fatal(err)
	}
	ps, err := p.Wait()
	if err != nil {
		t.Fatal(err)
	}
	if !ps.Success() {
		t.Fatalf("script failed: %v", err)
	}
}

func TestExternalFile(t *testing.T) {
	os.Open(os.Getenv("TEST_EXTERNAL_FILE"))
	_, err := os.Stat(os.Getenv("TEST_EXTERNAL_FILE"))
	if err != nil {
		t.Fatal(err)
	}
}

func TestOSArgs(t *testing.T) {
	t.Log(os.Args)
}

func TestBenchtime(t *testing.T) {
}

func TestCoverageCache(t *testing.T) {
    result := HelloWorld("")
    if result != "Hello, World!" {
        t.Errorf("Expected 'Hello, World!', got '%s'", result)
    }

    result = HelloWorld("Go")
    if result != "Hello, Go!" {
        t.Errorf("Expected 'Hello, Go!', got '%s'", result)
    }
}
```

----------------------------------------

TITLE: Running Go Tests With and Without the -fullpath Flag
DESCRIPTION: Shell commands demonstrating the difference in output format when running Go tests with and without the -fullpath flag. With -fullpath, the full filesystem path to the failing test is shown, while without it only the base filename is displayed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fullpath.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# test with -fullpath
! go test ./x/... -fullpath
stdout '^ +.+/gopath/src/x/fullpath/fullpath_test.go:8: test failed'
# test without -fullpath
! go test ./x/...
stdout '^ +fullpath_test.go:8: test failed'
```

----------------------------------------

TITLE: Setting Toolchain to go1.9
DESCRIPTION: Uses 'go mod edit' to set the toolchain to go1.9 and verifies the change.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_toolchain.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
go mod edit -toolchain=go1.9
grep 'toolchain go1.9' go.mod
```

----------------------------------------

TITLE: Defining Empty Go Module
DESCRIPTION: This snippet shows the contents of a go.mod file for an empty module named 'm'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vcs_missing.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Expected Go Module File After Dependency Resolution
DESCRIPTION: The expected go.mod file after running 'go run -mod=mod', which should now include the missing dependency 'example.com/version v1.1.0' marked as indirect.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_issue52331.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example

go 1.17

require example.com/version v1.1.0 // indirect
```

----------------------------------------

TITLE: Creating Go Package with Circular Test Dependency (Part 1) (Go)
DESCRIPTION: Defines the `datastore` package in `datastore/datastore_health.go`. It imports both its own package (`golang.org/issue45863/datastore`) and the `sql` subpackage (`golang.org/issue45863/datastore/sql`). This setup contributes to the import cycle when the `sql` package's test file (`sql_test.go`) imports the `datastore` package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_test_cycle.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- datastore/datastore_health.go --
package datastore

import (
	"golang.org/issue45863/datastore"
	"golang.org/issue45863/datastore/sql"
)
```

----------------------------------------

TITLE: Configuring Authentication Access Settings in JSON
DESCRIPTION: JSON configuration file that defines authentication credentials and error response details. It specifies username 'aladdin', password 'opensesame', and a 404 status code with an error message when authentication fails.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/or404.txt#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{
	"Username": "aladdin",
	"Password": "opensesame",
	"StatusCode": 404,
	"Message": "File? What file?"
}
```

----------------------------------------

TITLE: Simple CGO Program
DESCRIPTION: Minimal Go program using CGO to test compiler flag passing. Contains only the necessary imports and an empty main function to trigger CGO compilation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_darwin_cc_arch.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import "C"

func main() {}
```

----------------------------------------

TITLE: Fixing Module Path in v2/go.mod
DESCRIPTION: Corrects the module path in v2/go.mod to include the version correctly and tags it as v2.0.4.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
at 2018-02-19T19:03:38-05:00
env GIT_AUTHOR_DATE=2018-02-19T18:16:38-05:00
echo 'module "github.com/rsc/vgotest1/v2" // v2/go.mod'
cp stdout v2/go.mod
git add v2/go.mod
git commit -m 'v2/go.mod: fix'
git tag v2.0.4
```

----------------------------------------

TITLE: Fuzzing Test Implementation with Cache Management
DESCRIPTION: Implements a fuzzing test that combines cache directory monitoring with pattern matching. Uses a goroutine to clean up fuzz cache files and tests for a specific byte pattern 'hello :)'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_err_deadlock.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package dead

import (
	"os"
	"path/filepath"
	"testing"
	"time"
)

func FuzzDead(f *testing.F) {
	go func() {
		c := filepath.Join(os.Getenv("GOCACHE"), "fuzz", "test", "FuzzDead")
		t := time.NewTicker(time.Second)
		for range t.C {
			files, _ := os.ReadDir(c)
			if len(files) > 0 {
				os.RemoveAll(c)
			}
		}
	}()

	f.Fuzz(func(t *testing.T, b []byte) {
		if len(b) == 8 &&
			b[0] == 'h' &&
			b[1] == 'e' &&
			b[2] == 'l' &&
			b[3] == 'l' &&
			b[4] == 'o' &&
			b[5] == ' ' &&
			b[6] == ':' &&
			b[7] == ')' {
			return
		}
	})
}
```

----------------------------------------

TITLE: Adding Version with Metadata and Final Commit
DESCRIPTION: Switches back to master branch and creates commits for v1.9.10-pre2+metadata version with a final commit after that tag. This demonstrates the use of build metadata in semantic versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/querytest.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
git checkout master

at 2019-05-13T16:11:25-04:00
echo 'before v1.9.10-pre2+metadata'
cp stdout status
git commit -a -m 'before v1.9.10-pre2+metadata'

at 2019-05-13T16:11:26-04:00
echo 'at v1.9.10-pre2+metadata'
cp stdout status
git commit -a -m 'at v1.9.10-pre2+metadata'
git tag 'v1.9.10-pre2+metadata'

at 2019-12-20T08:46:14-05:00
echo 'after v1.9.10-pre2+metadata'
cp stdout status
git commit -a -m 'after v1.9.10-pre2+metadata'
```

----------------------------------------

TITLE: Main Package with Vendor Import
DESCRIPTION: Main Go file importing vendored strings package to demonstrate package replacement behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vendor.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"strings" // really ../vendor/strings
)

func main() {
	fmt.Printf("%s\n", strings.Msg)
}
```

----------------------------------------

TITLE: Importing Dependency in Module 'c' Version 2
DESCRIPTION: This Go file for module 'c' version 2 imports dependency 'd' as a blank import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_12

LANGUAGE: Go
CODE:
```
package c

import _ "example.net/d"
```

----------------------------------------

TITLE: Vendoring Dependencies in Go
DESCRIPTION: This snippet demonstrates vendoring dependencies using 'go mod vendor' and verifying that the go.sum file remains unchanged.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_replaced.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
go mod vendor
grep 'rsc.io/quote v1.5.1' go.sum
cmp go.sum go.sum.tidy
```

----------------------------------------

TITLE: Go file in pkginroot directory
DESCRIPTION: A simple Go file that creates a package in the root directory, which should trigger the 'go mod tidy' recommendation when running 'go mod init'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_tidy.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package vendorimport
```

----------------------------------------

TITLE: Listing Packages Including Retraction using Go List
DESCRIPTION: Executes 'go list -retracted pkg' to show retraction details for a module. This snippet checks that retraction details are correctly displayed if available.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
# 'go list -retracted pkg' shows retraction.\ngo list -retracted -f '{{with .Module}}{{with .Retracted}}retracted{{end}}{{end}}' example.com/retract\nstdout retracted
```

----------------------------------------

TITLE: Repository and Module Setup Commands
DESCRIPTION: Shell commands for creating and initializing Git and Mercurial repositories with Go modules, demonstrating VCS integration tests and buildvcs flag handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_nested.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
[!git] skip
[!exec:hg] skip
[short] skip
env GOFLAGS='-n -buildvcs'

# Create a root module in a root Git repository.
mkdir root
cd root
go mod init example.com/root
exec git init

# Nesting repositories in parent directories are ignored, as the current
# directory main package, and containing main module are in the same repository.
# This is an error in GOPATH mode (to prevent VCS injection), but for modules,
# we assume users have control over repositories they've checked out.
mkdir hgsub
cd hgsub
exec hg init
cp ../../main.go main.go
! go build
stderr '^error obtaining VCS status: main module is in repository ".*root" but current directory is in repository ".*hgsub"$'
stderr '\tUse -buildvcs=false to disable VCS stamping.$'
go build -buildvcs=false
go mod init example.com/root/hgsub
go build
cd ..

# It's an error to build a package from a nested Git repository if the package
# is in a separate repository from the current directory or from the module
# root directory.
mkdir gitsub
cd gitsub
exec git init
exec git config user.name 'J.R.Gopher'
exec git config user.email 'gopher@golang.org'
cp ../../main.go main.go
! go build
stderr '^error obtaining VCS status: main module is in repository ".*root" but current directory is in repository ".*gitsub"$'
go build -buildvcs=false
go mod init example.com/root/gitsub
exec git commit --allow-empty -m empty # status commands fail without this
go build
rm go.mod
cd ..
! go build ./gitsub
stderr '^error obtaining VCS status: main package is in repository ".*gitsub" but current directory is in repository ".*root"$'
go build -buildvcs=false -o=gitsub${/} ./gitsub
```

----------------------------------------

TITLE: Declaring a Go Module using .mod file - Golang - go
DESCRIPTION: This snippet defines a Go module using a .mod file, specifying the module path and Go version. No external dependencies are listed, but the structure follows standard Go module initiation. Required fields are the 'module' name and the 'go' version, which establish the root for the module hierarchy. Inputs are the module path and Go version, with the output being the module's basic configuration for use by Go tools.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_v0.2.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.net/ambiguous

go 1.16
```

----------------------------------------

TITLE: Defining Go Module Requirements in .mod File
DESCRIPTION: Module definition file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo122_v0.0.1.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module rsc.io/needgo122
go 1.22
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines the Go module with its import path and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/git/semver-branch.git

go 1.16
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file specifying the module name and Go version requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_lookup.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module m

go 1.15
```

----------------------------------------

TITLE: Basic Go Module Definition
DESCRIPTION: Simple Go module definition with module name and Go version specification
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_readonly.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.16

```

----------------------------------------

TITLE: Defining Go Module in go.mod File
DESCRIPTION: Standard go.mod file declaring the module name as rsc.io/badfile4.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile4_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module rsc.io/badfile4
```

----------------------------------------

TITLE: Sub-module Definition with High Go Version Requirement
DESCRIPTION: Defines the 'sub' module with a Go version requirement of 1.999, which is higher than the current Go version in the test environment.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module sub
go 1.999
```

----------------------------------------

TITLE: Expvar Package Functions and Methods
DESCRIPTION: Defines functions and methods for the expvar package which provides a standardized interface to public variables for monitoring and debugging. Includes handlers and value accessors.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
// expvar functions and methods
func Handler() http.Handler
func (*Float) Value() float64
func (Func) Value() interface{}
func (*Int) Value() int64
func (*String) Value() string
```

----------------------------------------

TITLE: Importing the Required Module (Go)
DESCRIPTION: A minimal Go source file ('use.go') belonging to the 'use' package. It imports the 'rsc.io/quote' module using a blank identifier (`_`). This ensures that the module is considered part of the project's dependencies when `go mod download` is executed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_replace_mismatch.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- use.go --
package use

import _ "rsc.io/quote"

```

----------------------------------------

TITLE: Go Workspace Definition
DESCRIPTION: Defines a Go workspace with version 1.22.2 and includes the current directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_commandline.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
go 1.22.2

use .
```

----------------------------------------

TITLE: Importing External Package in Go Module
DESCRIPTION: This snippet demonstrates a Go file that imports an external package 'rsc.io/quote' as a blank import, typically used for side effects.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
package m

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Module B v2 Implementation (b2/b.go)
DESCRIPTION: Implementation file for version 2 of module b, importing module d.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package b

import _ "example.com/d"
```

----------------------------------------

TITLE: Configuring Module 'b' Version 0.2.0 with Dependency in Go
DESCRIPTION: This go.mod file defines module 'example.net/b' version 0.2.0 with a dependency on 'example.net/a' version 0.2.0, creating a cyclic dependency with module 'a' for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue60490.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
module example.net/b

go 1.19

require example.net/a v0.2.0
```

----------------------------------------

TITLE: Importing Dependency in Module 'b' Version 1
DESCRIPTION: This Go file for module 'b' version 1 imports dependency 'e' as a blank import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package b

import _ "example.net/e"
```

----------------------------------------

TITLE: Module Declaration for b.com
DESCRIPTION: Module declaration file for the replacement module b.com.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_replace_absolute_windows.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module b.com
```

----------------------------------------

TITLE: HTTP Import Test Package
DESCRIPTION: Simple package that imports net/http to test dependency resolution through the standard library.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_std_vendor.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package importnethttp

import _ "net/http"
```

----------------------------------------

TITLE: Package Using 'other' Dependency (Go)
DESCRIPTION: Defines a package that imports the 'example.net/other' package, used for testing indirect dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue47979.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
package useother

import _ "example.net/other"
```

----------------------------------------

TITLE: Downgrading Conflicting Module
DESCRIPTION: Demonstrates how to resolve a conflict by downgrading the conflicting module to @none.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_pkg.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
cp go.mod.orig go.mod
go mod edit -require=example.net/ambiguous@v0.1.0

go get example.net/ambiguous@none example.net/ambiguous/nested/pkg@v0.1.0
go list -m all
stdout '^example.net/ambiguous/nested v0.1.0$'
! stdout '^example.net/ambiguous '
```

----------------------------------------

TITLE: Module Version Restrictions Test
DESCRIPTION: Tests that verify version control restrictions on the main module and its packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_main.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
! go get rsc.io@v0.1.0
stderr '^go: can\'t request version "v0.1.0" of the main module \(rsc.io\)$'
! go get rsc.io/x@v0.1.0
stderr '^go: package rsc.io/x is in the main module, so can\'t request version v0.1.0$'
```

----------------------------------------

TITLE: Installing and Configuring Environment Command in Shell
DESCRIPTION: This shell script installs the 'env' command and sets up the PATH environment variable. It includes conditional statements for different operating systems (Windows, Plan9, and others).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_env.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
# Install an env command because Windows and plan9 don't have it.
env GOBIN=$WORK/tmp/bin
go install env.go
[GOOS:plan9] env path=$GOBIN${:}$path
[!GOOS:plan9] env PATH=$GOBIN${:}$PATH

# Test generators have access to the environment
go generate ./printenv.go
stdout '^GOARCH='$GOARCH
stdout '^GOOS='$GOOS
stdout '^GOFILE='
stdout '^GOLINE='
stdout '^GOPACKAGE='
stdout '^DOLLAR='
```

----------------------------------------

TITLE: Multiple Module Paths Usage
DESCRIPTION: Package demonstrating usage of the same module under different import paths.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_replace.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package quoter

import (
	_ "not-rsc.io/quote/v3"
	_ "rsc.io/quote/v3"
)
```

----------------------------------------

TITLE: Setting up Go Modules Environment
DESCRIPTION: Environment configuration that enables Go modules mode explicitly using GO111MODULE=on and executes 'go get' to resolve dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_domain_root.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on
go get
```

----------------------------------------

TITLE: Defining Errors and Flags in Go
DESCRIPTION: This section includes declarations relating to error handling and flag processing, specifically a generic unsupported error and methods for handling flags with custom functions. These snippets include the ErrUnsupported error variable and methods for handling flags using BoolFunc methods for enhanced input parsing capabilities.
SOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
pkg errors, var ErrUnsupported error #41198
```

LANGUAGE: Go
CODE:
```
pkg flag, func BoolFunc(string, string, func(string) error) #53747
```

LANGUAGE: Go
CODE:
```
pkg flag, method (*FlagSet) BoolFunc(string, string, func(string) error) #53747
```

----------------------------------------

TITLE: Running Go Module and Checking Version Output
DESCRIPTION: This snippet shows how to run a specific version of a Go module using 'go run' and verifies its stdout output. It checks if the output matches the expected version string.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_work_versioned.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
go run example.com/printversion@v0.1.0
stdout '^main is example.com/printversion v0.1.0$'
```

----------------------------------------

TITLE: Defining Module Dependency for b - mod
DESCRIPTION: The go.mod file for the b module specifies its module identity and a dependency on x v0.2.0. It is structured similarly to the a module but requests a different version of x. This setup exercises multi-version dependency resolution in the test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_5

LANGUAGE: mod
CODE:
```
module b
go 1.13
require x v0.2.0
```

----------------------------------------

TITLE: Setting GO111MODULE Environment Variable
DESCRIPTION: Sets the GO111MODULE environment variable to 'on' to enable module-aware mode for Go commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Defining Additional Go Tests in z_test.go
DESCRIPTION: This Go code defines additional test and benchmark functions in the x package. It includes TestZ, TestXX, BenchmarkZ, and BenchmarkXX.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_regexps.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package x

import "testing"

func TestZ(t *testing.T) {
	t.Logf("LOG: Z running")
}

func TestXX(t *testing.T) {
	t.Logf("LOG: XX running")
}

func BenchmarkZ(b *testing.B) {
	b.Logf("LOG: Z running N=%d", b.N)
}

func BenchmarkXX(b *testing.B) {
	b.Logf("LOG: XX running N=%d", b.N)
}
```

----------------------------------------

TITLE: Enabling Go Modules Environment
DESCRIPTION: Sets the environment variable `GO111MODULE` to `on`, ensuring that the subsequent `go` commands operate in module-aware mode. This is a prerequisite for the module-related tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Defining Test Dependency for Package 'x/otherroot' (Go)
DESCRIPTION: Defines a test file for package `x/otherroot` (using the `otherroot_test` naming convention). It imports `x/fromotherroottest` using a blank identifier, establishing a test-only dependency specific to this package. This dependency's inclusion is tested by the `go list -deps -test all x/otherroot` command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
-- x/otherroot/otherroot_test.go --
package otherroot_test

import _ "x/fromotherroottest"
```

----------------------------------------

TITLE: Module B v2 Package
DESCRIPTION: Version 2 of module b that imports module c v0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package b

import _ "example.com/c"
```

----------------------------------------

TITLE: Defining Go Module with Retraction Directive (.mod file)
DESCRIPTION: This Go module file declares the module path as `example.com/retract/newname`, requires Go 1.16, and uses the `retract` directive to mark version `v1.0.0-bad` as problematic or unusable. This `.mod` file format, distinct from the standard `go.mod`, might be used in specific Go tooling contexts or internal testing setups.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rename_v1.9.0-new.txt#2025-04-22_snippet_1

LANGUAGE: gomod
CODE:
```
module example.com/retract/newname

go 1.16

// bad
retract v1.0.0-bad
```

----------------------------------------

TITLE: External Test Package for B
DESCRIPTION: A test file using the external test package pattern (b_test) with a simple test function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package b_test

import "testing"

func Test(t *testing.T) {}
```

----------------------------------------

TITLE: Go Module Declaration with Version 1.21
DESCRIPTION: A go.mod file declaring a module named 'example.com/retract/newergoversion' that requires Go version 1.21.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_newergoversion_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/retract/newergoversion

go 1.21
```

----------------------------------------

TITLE: Main Package with Various Import Statements
DESCRIPTION: The main package 'x' that imports various packages from different locations, including vendored and non-vendored imports, testing Go's import resolution rules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
package x

import _ "p"
import _ "q"
import _ "r"
import _ "vend/dir1"      // not vendored
import _ "vend/dir1/dir2" // vendored
```

----------------------------------------

TITLE: Syscall Connection Interface Definition
DESCRIPTION: Defines the Conn interface with SyscallConn method and RawConn interface with Control, Read, and Write methods for low-level system operations
SOURCE: https://github.com/golang/go/blob/master/api/go1.9.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
type Conn interface {
    SyscallConn() (RawConn, error)
}

type RawConn interface {
    Control(func(uintptr)) error
    Read(func(uintptr) bool) error
    Write(func(uintptr) bool) error
}
```

----------------------------------------

TITLE: Adding Regional_Indicator RangeTable to unicode package
DESCRIPTION: Adds support for Regional Indicator Symbols by defining a new RangeTable in the unicode package. These are used to represent country flags in Unicode.
SOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_18

LANGUAGE: go
CODE:
```
pkg unicode, var Regional_Indicator *RangeTable
```

----------------------------------------

TITLE: Package C Main
DESCRIPTION: Go main package used for testing external module builds.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_git.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: MyApp Test Implementation
DESCRIPTION: Test file for myapp package demonstrating vendor package imports with RDS dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue14613.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package myapp
import (
   "mylibtesttest/rds"
)
```

----------------------------------------

TITLE: Listing All Packages with go list all
DESCRIPTION: Uses 'go list all' to list the fixpoint of iterating 'go list -deps -test' starting with packages in the main module, then reducing to only non-test variants.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_3

LANGUAGE: Bash
CODE:
```
go list -f $PKGFMT all
```

----------------------------------------

TITLE: Setting up Go environment for module testing
DESCRIPTION: Sets environment variables for Go module testing, disabling proxy and ensuring module mode is enabled.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
env GOPROXY=off

[!compiler:gc] skip
```

----------------------------------------

TITLE: Testing Module Replacement Scenarios
DESCRIPTION: Tests various scenarios of replacing modules with local directories or different versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
go mod edit -replace rsc.io/quote@v1.0.0=./dummy
go get example.com/upgrade@v0.0.2
! grep '^rsc.io/quote v1.5.2 ' go.sum

go mod edit -replace rsc.io/quote@v1.5.2=./dummy
go get example.com/upgrade@v0.0.2
! grep '^rsc.io/quote v1.5.2 ' go.sum

go mod edit -replace rsc.io/quote@v1.5.2=rsc.io/quote@v1.5.1
go get example.com/upgrade@v0.0.2
! grep '^rsc.io/quote v1.5.2 ' go.sum
grep '^rsc.io/quote v1.5.1 ' go.sum
```

----------------------------------------

TITLE: Testing Hexadecimal Escape Sequence Matching
DESCRIPTION: Tests hexadecimal escape sequences (\x61, \x{61}, \x{00000061}) for character matching. Shows how different hex notations represent the same character.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_34

LANGUAGE: go
CODE:
```
"\\x{61}"
-;-;-;-
0-1;0-1;0-1;0-1
"^(?:\\x{61})$"
-;-;-;-
0-1;0-1;0-1;0-1
"^(?:\\x{61})"
-;-;-;-
0-1;0-1;0-1;0-1
"(?:\\x{61})$"
-;-;-;-
0-1;0-1;0-1;0-1
```

----------------------------------------

TITLE: Defining Go Module File for Testing
DESCRIPTION: Creates a minimal go.mod file for the test module, specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo_other_branch.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module x

go 1.12
```

----------------------------------------

TITLE: go.work File with First Line Error
DESCRIPTION: Contents of go.work.firstlineerr.txt file, showing an unknown godebug flag 'bar' on the first line.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
godebug bar=1
```

----------------------------------------

TITLE: Version Constant Declaration
DESCRIPTION: Go source file defining a version constant for the module
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_invalidpath_v1_v1.0.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package version

const V = "v1.0.0"
```

----------------------------------------

TITLE: README File Content for Root Module
DESCRIPTION: Explanation that the root module intentionally lacks a go.mod file, which is typical for modules that follow the major version subdirectory convention.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2sub.txt#2025-04-22_snippet_9

LANGUAGE: text
CODE:
```
This root module lacks a go.mod file.
```

----------------------------------------

TITLE: Testing explicit -mod=vendor flag behavior
DESCRIPTION: Verifies that using -mod=vendor forces the use of the vendor directory and prevents 'all' computation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
env GOFLAGS=-mod=vendor

go list -f {{.Dir}} -tags tools -e all
stdout '^'$WORK'[/\\]auto$'
stdout '^'$WORK'[/\\]auto[/\\]vendor[/\\]example.com[/\\]printversion$'
stdout '^'$WORK'[/\\]auto[/\\]vendor[/\\]example.com[/\\]version$'

! go list -m all
stderr 'go: can''t compute ''all'' using the vendor directory\n\t(Use -mod=mod or -mod=readonly to bypass.)'

! go list -m -f '{{.Dir}}' all
stderr 'go: can''t compute ''all'' using the vendor directory\n\t(Use -mod=mod or -mod=readonly to bypass.)'
```

----------------------------------------

TITLE: Go Module Tidy with 1.17 Compatibility
DESCRIPTION: Performs 'go mod tidy' with explicit 1.17 compatibility and checks the results.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
cp go.mod.orig go.mod
go mod tidy -compat=1.17
cmp go.mod go.mod.orig
```

----------------------------------------

TITLE: Expected Go Module File After Dependency Update
DESCRIPTION: This go.mod.want file shows the expected state of the module file after running 'go get -u=patch ./...'. It includes an additional indirect dependency on 'example.net/b v0.1.1'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue48511.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module example.net/m

go 1.16

replace (
	example.net/a v0.1.0 => ./a
	example.net/b v0.1.0 => ./b
	example.net/b v0.1.1 => ./b
	example.net/m v0.1.0 => ./m1
)

require (
	example.net/a v0.1.0
	example.net/b v0.1.1 // indirect
)
```

----------------------------------------

TITLE: Require Incompatible Module Definition
DESCRIPTION: Module declaration for requireincompatible package with a dependency on an incompatible version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_implicit.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.net/requireincompatible

go 1.15

require example.com/retract/incompatible v2.0.0+incompatible
```

----------------------------------------

TITLE: Test File with Sleep for Second Package
DESCRIPTION: A simple Go test file for the second sleepy package that imports testing and time packages. It contains a single test function that sleeps for 200 milliseconds.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pattern.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p

import (
	"testing"
	"time"
)

func Test1(t *testing.T) {
	time.Sleep(200 * time.Millisecond)
}
```

----------------------------------------

TITLE: Module Q v1.1.0 Implementation
DESCRIPTION: This snippet shows the go.mod file and implementation for 'example.com/q' version 1.1.0. It provides a PrintVersion function that prints "version 1.1.0".
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
module example.com/q

go 1.18
```

LANGUAGE: Go
CODE:
```
package q

import "fmt"

func PrintVersion() {
	fmt.Println("version 1.1.0")
}
```

----------------------------------------

TITLE: Testing Code Coverage with CGO Integration
DESCRIPTION: A shell command that runs tests with code coverage on a CGO-enabled package. It verifies that the coverage percentage is non-zero and properly reported.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -short -cover cgocover
stdout  'coverage:.*[1-9][0-9.]+%'
! stderr '[^0-9]0\.0%'
```

----------------------------------------

TITLE: Importing rsc.io/quote Package
DESCRIPTION: This Go file imports the 'rsc.io/quote' package as a blank import, which is likely used for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_file_proxy.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package x
import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Displaying Verbose Help in Go CLI
DESCRIPTION: This command displays verbose help information for the Go project's command-line interface. The '-v' flag is used to request more detailed output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/script_help.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
help -v
```

----------------------------------------

TITLE: Testing Go Standard Library Package Caching
DESCRIPTION: This script checks if the 'math' package from the Go standard library is cached correctly. It uses 'go list' to refresh the cache, enables filesystem tracing, and then verifies that subsequent accesses don't read from the filesystem.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/index.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
# Check that standard library packages are cached.
go list -json math # refresh cache
env GODEBUG=gofsystrace=1,gofsystracelog=fsys.log
go list -json math
! grep math/abs.go fsys.log
grep 'openIndexPackage .*[\/]math$' fsys.log
```

----------------------------------------

TITLE: Go.mod Module Definition
DESCRIPTION: Module definition file for the Go fuzzing test project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.com/y

go 1.16
```

----------------------------------------

TITLE: Defining Go module
DESCRIPTION: Defines the Go module for the test project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_cached.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
module golang.org/issue/29111/foo
```

----------------------------------------

TITLE: Package Definition in direct.go
DESCRIPTION: Defines a Go package named 'indirect' in the direct.go file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_indirect_v1.0.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package indirect
```

----------------------------------------

TITLE: Process Management Functions for NetBSD ARM64
DESCRIPTION: Function signatures for process management operations in NetBSD on ARM64. These functions provide interfaces for creating, controlling, and monitoring processes.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_159

LANGUAGE: Go
CODE:
```
func Chflags(string, int) error
func Chroot(string) error
func ForkExec(string, []string, *ProcAttr) (int, error)
func Fpathconf(int, int) (int, error)
func Fstat(int, *Stat_t) error
func Fsync(int) error
func Ftruncate(int, int64) error
func Futimes(int, []Timeval) error
func Getdirentries(int, []uint8, *uintptr) (int, error)
func Getpeername(int) (Sockaddr, error)
func Getpgid(int) (int, error)
func Getpgrp() int
func Getpriority(int, int) (int, error)
func Getrlimit(int, *Rlimit) error
func Getrusage(int, *Rusage) error
func Getsid(int) (int, error)
func Issetugid() bool
func Kevent(int, []Kevent_t, []Kevent_t, *Timespec) (int, error)
func Kill(int, Signal) error
func Kqueue() (int, error)
```

----------------------------------------

TITLE: Defining Go Module with Multiple Paths
DESCRIPTION: Specifies a Go module that requires the same module under two different paths, which is expected to cause a conflict.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_14

LANGUAGE: go
CODE:
```
module quoter
require (
	rsc.io/quote/v3 v3.0.0
	not-rsc.io/quote/v3 v3.0.0
)
replace not-rsc.io/quote/v3 => rsc.io/quote/v3 v3.0.0
```

----------------------------------------

TITLE: Testing version resolution with explicit +incompatible tag
DESCRIPTION: Fetches v2.0.0+incompatible explicitly and verifies the version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
go get ...test@v2.0.0+incompatible
go list -m all
stdout '^github.com/rsc/legacytest v2\.0\.0\+incompatible$'
```

----------------------------------------

TITLE: Testing pre-release version resolution
DESCRIPTION: Fetches a specific pre-release version and verifies it.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_10

LANGUAGE: shell
CODE:
```
go get ...test@731e3b1
go list -m all
stdout '^github.com/rsc/legacytest v1\.1\.0-pre$'
```

----------------------------------------

TITLE: Testing Build Error in Imported Package (Go)
DESCRIPTION: This snippet tests a build error in an imported package. It verifies that the error is attributed to the correct package in the JSON output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_build.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
! go test -json -o=$devnull ./builderror2
stdout '"ImportPath":"m/builderror2/x","Action":"build-output","Output":"# m/builderror2/x\\n"'
stdout '"ImportPath":"m/builderror2/x","Action":"build-output","Output":"builderror2(/|\\\\)x(/|\\\\)main.go:3:11: undefined: y\\n"'
stdout '"ImportPath":"m/builderror2/x","Action":"build-fail"'
stdout '"Action":"start","Package":"m/builderror2"'
stdout '"Action":"output","Package":"m/builderror2","Output":"FAIL\\tm/builderror2 \[build failed\]\\n"'
stdout '"Action":"fail","Package":"m/builderror2","Elapsed":.*,"FailedBuild":"m/builderror2/x"'
! stderr '.'
```

----------------------------------------

TITLE: Go Module Tidy with Diff Option
DESCRIPTION: Tests the -diff option of 'go mod tidy' and verifies the results.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
[exec:patch] mv go.mod go.mod.tidyResult
[exec:patch] mv go.sum go.sum.tidyResult
[exec:patch] cp go.mod.orig go.mod
[exec:patch] ! go mod tidy -diff
[exec:patch] cp stdout diff.patch
[exec:patch] exec patch -p1 -i diff.patch
[exec:patch] go mod tidy -diff
[exec:patch] cmp go.mod go.mod.tidyResult
[exec:patch] cmp go.sum go.sum.tidyResult
```

----------------------------------------

TITLE: Testing Go Module Fetch without Proxy
DESCRIPTION: Fetches a specific module version without using a proxy, relying on cache or go.sum. Tests both scenarios by removing and using the checksum cache.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_cache.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
cp go.mod.orig go.mod
rm go.sum
env GOPROXY=off
go get rsc.io/quote@v1.5.2 # using cache
rm $GOPATH/pkg/mod/cache/download/sumdb/localhost.localdev/sumdb/lookup/rsc.io/quote@v1.5.2
go get rsc.io/quote@v1.5.2 # using go.sum
```

----------------------------------------

TITLE: Package P Implementation
DESCRIPTION: Simple package 'p' implementation with a single exported function
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_relevant_dependency.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p

func P() {}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module declaration file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_cgo_excluded.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module cgotest

go 1.16
```

----------------------------------------

TITLE: Declaring Subpackage subpkg
DESCRIPTION: This snippet declares a subpackage named 'subpkg' which was added in version 1.2.0 of the module. It shows how modules can be expanded with additional packages over time.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.2.0.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
// Package subpkg was added in v1.2.0.
package subpkg
```

----------------------------------------

TITLE: External Package Test
DESCRIPTION: Test file in a separate test package testing the vendored strings.Msg value.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vendor.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main_test

import (
	"strings" // really ../vendor/strings
	"testing"
)

func TestMsgExternal(t *testing.T) {
	if strings.Msg != "hello, world" {
		t.Fatalf("unexpected msg: %v", strings.Msg)
	}
}
```

----------------------------------------

TITLE: Triggering Go Generate for CGO Test
DESCRIPTION: A simple Go file with a go:generate directive that runs the generator script to create a file with very long CGO LDFLAGS for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_long_cmd.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package p

//go:generate go run generate.go
```

----------------------------------------

TITLE: Plain Input Text Format
DESCRIPTION: Raw input text showing URL handling with various test cases including valid and invalid URL patterns.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link2.txt#2025-04-22_snippet_0

LANGUAGE: text
CODE:
```
The Go home page is https://go.dev/.
It used to be https://golang.org.
https:// is not a link.
Nor is https://
https://☺ is not a link.
https://:80 is not a link.
```

----------------------------------------

TITLE: Testing Toolchain Path Lookups
DESCRIPTION: Verifies behavior when using path-based toolchain lookups with different Go versions. Tests error handling when specified versions aren't found in PATH.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_issue66175.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
env GOTOOLCHAIN=go1.20+path
! go version
stderr 'go: cannot find "go1.20" in PATH'
```

----------------------------------------

TITLE: Basic Module Download Test
DESCRIPTION: Downloads a specific version of a module using go mod download command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_empty.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
env GOSUMDB=off

go mod download example.com/join@v1.1.0
```

----------------------------------------

TITLE: Testing Go Module Tidy Consistency with Cycles
DESCRIPTION: Shell commands to test that 'go mod tidy' and 'go mod graph' produce consistent results when handling cyclic dependencies. The test compares the go.mod file before and after running the commands to ensure they don't modify a tidy file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

cp go.mod go.mod.orig
go mod tidy
cmp go.mod go.mod.orig

# If the go.mod file is already tidy, 'go mod graph' should not modify it.
go mod graph
cmp go.mod go.mod.orig
```

----------------------------------------

TITLE: Testing 'go fmt' and 'go generate' Commands Outside Module
DESCRIPTION: Demonstrates that 'go fmt' and 'go generate' can work with file arguments outside of a module context.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_10

LANGUAGE: shell
CODE:
```
go fmt needmod/needmod.go

[exec:touch] go generate ./needmod/needmod.go
[exec:touch] exists ./needmod/gen.txt
```

----------------------------------------

TITLE: Testing go list Command with JSON Output - Shell
DESCRIPTION: This series of shell commands verifies the functionality of the 'go list' command using the '-json' flag to produce JSON output. It checks how the command handles specific field requests, tests full JSON output, and verifies behavior when fields are unavailable or files are missing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_json_fields.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Test -json produces "full" output by looking for multiple fields present.
go list -json .
stdout '"Name": "a"'
stdout '"Stale": true'
# Same thing for -json=true
go list -json=true .
stdout '"Name": "a"'
stdout '"Stale": true'

# Test -json=false produces non-json output.
go list -json=false
cmp stdout want-non-json.txt

# Test -json=<field> keeps only that field.
go list -json=Name
cmp stdout want-json-name.txt

# Test -json=<field> with multiple fields.
go list -json=ImportPath,Name,GoFiles,Imports
cmp stdout want-json-multiple.txt

# Test -json=<field> with Deps outputs the Deps field.
go list -json=Deps
stdout '"Deps": \['
stdout '"errors",'

# Test -json=<field> with *EmbedPatterns outputs embed patterns.
cd embed
go list -json=EmbedPatterns,TestEmbedPatterns,XTestEmbedPatterns
stdout '"EmbedPatterns": \['
stdout '"TestEmbedPatterns": \['
stdout '"XTestEmbedPatterns": \['
# Test -json=<field> with *EmbedFiles fails due to broken file reference.
! go list -json=EmbedFiles
stderr 'no matching files found'
! go list -json=TestEmbedFiles
stderr 'no matching files found'
! go list -json=XTestEmbedFiles
stderr 'no matching files found'
cd ..

[!git] skip

# Test -json=<field> without Stale skips computing buildinfo
cd repo
exec git init
# Control case: with -json=Stale cmd/go executes git status to compute buildinfo
go list -json=Stale -x
stderr 'git status'
# Test case: without -json=Stale cmd/go skips git status
go list -json=Name -x
! stderr 'git status'
```

----------------------------------------

TITLE: Setting and Unsetting Multiple Go Environment Variables
DESCRIPTION: This snippet demonstrates how to set multiple variables at once using 'go env -w' and how to unset them using 'go env -u'. It also shows that the environment file is maintained in sorted order.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
# go env -w can set multiple variables
env CC=
go env CC
! stdout ^xyc$
go env -w GOOS=$GOOS CC=xyc
grep CC=xyc $GOENV
# file is maintained in sorted order
grep 'CC=xyc\nGOOS=' $GOENV
go env CC
stdout ^xyc$

# go env -u unsets effect of go env -w.
go env -u CC
go env CC
! stdout ^xyc$
```

----------------------------------------

TITLE: Testing explicit -mod=mod flag behavior
DESCRIPTION: Ensures that -mod=mod forces the vendor directory to be ignored and uses the module cache instead.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
env GOFLAGS=-mod=mod

go list -f {{.Dir}} -tags tools -e all
stdout '^'$WORK'[/\\]auto$'
stdout '^'$GOPATH'[/\\]pkg[/\\]mod[/\\]example.com[/\\]printversion@v1.0.0$'
stdout '^'$WORK'[/\\]auto[/\\]replacement-version$'

go list -m all
stdout '^example.com/auto$'
stdout 'example.com/printversion v1.0.0'
stdout 'example.com/version v1.0.0'

go list -m -f '{{.Dir}}' all
stdout '^'$WORK'[/\\]auto$'
stdout '^'$GOPATH'[/\\]pkg[/\\]mod[/\\]example.com[/\\]printversion@v1.0.0$'
stdout '^'$WORK'[/\\]auto[/\\]replacement-version$'
```

----------------------------------------

TITLE: Importing External Go Packages
DESCRIPTION: This code snippet imports deprecated packages using blank identifiers, which indicates that the package is imported for side effects only. It demonstrates dependency management in a Go project where specific packages are imported without whitespace conflicts.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_missingpkg_prerelease.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package use

import (
	_ "example.com/missingpkg/deprecated"
	_ "example.com/usemissingpre"
)
```

----------------------------------------

TITLE: Calculating Field Offsets and Sequence Properties in Go
DESCRIPTION: This code snippet defines formulas for calculating field offsets, alignment, and size of a sequence of fields in Go's memory layout. It's crucial for understanding how composite types are structured in memory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/abi-internal.md#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
offset(S, i) = 0  if i = 1
             = align(offset(S, i-1) + sizeof(t_(i-1)), alignof(t_i))
alignof(S)   = 1  if N = 0
             = max(alignof(t_i) | 1 <= i <= N)
sizeof(S)    = 0  if N = 0
             = align(offset(S, N) + sizeof(t_N), alignof(S))
```

----------------------------------------

TITLE: Checking Go Environment Variables with Directory Context in Shell
DESCRIPTION: Employs `go env` with `-C` to retrieve environment variables with a specified working directory, showcasing usage with existent and non-existent directories. Prerequisites include a valid Go environment and custom modules set up.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/chdir.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go env -C $OLD/custom GOMOD
stdout 'custom[\/]go.mod'
! go env -C ../nonexist
stderr '^go: chdir ../nonexist: '
```

----------------------------------------

TITLE: Building Go Modules Without Vendor Directory
DESCRIPTION: This snippet demonstrates building Go modules without a vendor directory, showing that modules requiring Go 1.17 can build while those with version conflicts fail.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go build example.net/need117
! go build example.net/bad114
stderr '^bad114[/\\]bad114.go:15:2: duplicate method .?Y.?( .*)?$'
```

----------------------------------------

TITLE: Gofmt Formatted Text
DESCRIPTION: Shows how gofmt tool formats the text block with proper indentation
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code3.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
A tab-indented
(surrounded by more blank lines)
code block and haiku.
```

----------------------------------------

TITLE: Implementing External Test with File Path Printing
DESCRIPTION: Implements an external test that prints file paths from different contexts: package, package test, and external test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package pkg_test

import (
	"runtime"
	"testing"

	"example.com/pkg"
)

func TestMain(m *testing.M) {
	pkg.PrintFile()
	pkg.PrintFileForTest()
	PrintFileInXTest()
}

func PrintFileInXTest() {
	_, file, _, _ := runtime.Caller(0)
	println(file)
}
```

----------------------------------------

TITLE: Go Module Definition for Toolchain Test
DESCRIPTION: Standard go.mod file defining the module for the test toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-amd64.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Go Module Z v1.1.0 Implementation
DESCRIPTION: Module Z version 1.1.0 implementation with minimal code, used for testing module version resolution in the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
module example.com/z

go 1.18
```

LANGUAGE: go
CODE:
```
package z
```

----------------------------------------

TITLE: Creating First Version Tag
DESCRIPTION: Adds and commits v0.2.1 file and creates corresponding Git tag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/tagtests.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
git add v0.2.1
git commit -m 'v0.2.1'
git tag 'v0.2.1'
```

----------------------------------------

TITLE: Go Module Definition with Version Exclusion
DESCRIPTION: Module definition excluding specific version of rsc.io/sampler while requiring the same version, used to test version conflict resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_require_exclude.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module x

go 1.13

exclude rsc.io/sampler v1.99.99

require rsc.io/sampler v1.99.99
```

----------------------------------------

TITLE: Testing Go Mod Vendor with Alternative Directory
DESCRIPTION: This snippet tests the 'go mod vendor' command with an alternative vendor directory specified using the -o flag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
# 'go mod vendor' should work with an alternative vendor directory if the -o flag is provided.
go mod vendor -v -o alternative-vendor-dir
exists alternative-vendor-dir/modules.txt
exists alternative-vendor-dir/a/foo/LICENSE

# 'go mod vendor' should interpret paths relative to the current working directory when the -o flag is provided.
mkdir dir1
mkdir dir2

cd dir1
go mod vendor -v -o relative-vendor-dir

go mod vendor -v -o ../dir2/relative-vendor-dir

cd ..
exists dir1/relative-vendor-dir/modules.txt
exists dir1/relative-vendor-dir/a/foo/LICENSE
exists dir2/relative-vendor-dir/modules.txt
exists dir2/relative-vendor-dir/a/foo/LICENSE
```

----------------------------------------

TITLE: Testing Go Module Commands
DESCRIPTION: Series of go get commands testing different module versions, with the last command expected to fail due to invalid version format.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/badgo.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go get example.net/badgo@v1.0.0
go get example.net/badgo@v1.1.0
go get example.net/badgo@v1.2.0
go get example.net/badgo@v1.3.0
go get example.net/badgo@v1.4.0
go get example.net/badgo@v1.5.0
! go get example.net/badgo@v1.6.0
stderr 'invalid go version .X.Y.: must match format 1.23'
```

----------------------------------------

TITLE: Go Module Configuration
DESCRIPTION: Go module configuration for the test project. It defines the module name as 'M' and requires Go 1.21.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_partial.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module M

go 1.21
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: A simple Go module definition file that defines a module named 'm' with Go 1.16 as the required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_test_only.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Testing Go Build and Version Commands with Various Flags
DESCRIPTION: This snippet demonstrates a series of Go build and version commands with different flags and environment settings. It tests the output of these commands to ensure proper inclusion of compiler information, build flags, and CGO settings.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_build_settings.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Compiler name is always added.
go build
go version -m m$GOEXE
stdout '^	build	-compiler=gc$'
stdout '^	build	GOOS='
stdout '^	build	GOARCH='
[GOARCH:amd64] stdout '^	build	GOAMD64='
! stdout asmflags|gcflags|ldflags|gccgoflags

# Toolchain flags are added if present.
# The raw flags are included, with package patterns if specified.
go build -asmflags=example.com/m=-D=FOO=bar
go version -m m$GOEXE
stdout '^	build	-asmflags=example\.com/m=-D=FOO=bar$'

go build -gcflags=example.com/m=-N
go version -m m$GOEXE
stdout '^	build	-gcflags=example\.com/m=-N$'

go build -ldflags=example.com/m=-w
go version -m m$GOEXE
stdout '^	build	-ldflags=example\.com/m=-w$'

go build -trimpath
go version -m m$GOEXE
stdout '\tbuild\t-trimpath=true$'

# gccgoflags are not added when gc is used, and vice versa.
# TODO: test gccgo.
go build -gccgoflags=all=UNUSED
go version -m m$GOEXE
! stdout gccgoflags

# Build and tool tags are added but not release tags.
# "race" is included with build tags but not "cgo".
go build -tags=a,b
go version -m m$GOEXE
stdout '^	build	-tags=a,b$'
[race] go build -race
[race] go version -m m$GOEXE
[race] ! stdout '^	build	-tags='
[race] stdout '^	build	-race=true$'

# CGO flags are separate settings.
# CGO_ENABLED is always present.
# Other flags are added if CGO_ENABLED is true.
env CGO_ENABLED=0
go build
go version -m m$GOEXE
stdout '^	build	CGO_ENABLED=0$'
! stdout CGO_CPPFLAGS|CGO_CFLAGS|CGO_CXXFLAGS|CGO_LDFLAGS

[cgo] env CGO_ENABLED=1
[cgo] env CGO_CPPFLAGS=-DFROM_CPPFLAGS=1
[cgo] env CGO_CFLAGS=-DFROM_CFLAGS=1
[cgo] env CGO_CXXFLAGS=-DFROM_CXXFLAGS=1
[cgo] env CGO_LDFLAGS=-L/extra/dir/does/not/exist
[cgo] go build '-ldflags=all=-linkmode=external -extldflags=-L/bonus/dir/does/not/exist'
[cgo] go version -m m$GOEXE
[cgo] stdout '^	build	-ldflags="all=-linkmode=external -extldflags=-L/bonus/dir/does/not/exist"$'
[cgo] stdout '^	build	CGO_ENABLED=1$'
[cgo] stdout '^	build	CGO_CPPFLAGS=-DFROM_CPPFLAGS=1$'
[cgo] stdout '^	build	CGO_CFLAGS=-DFROM_CFLAGS=1$'
[cgo] stdout '^	build	CGO_CXXFLAGS=-DFROM_CXXFLAGS=1$'
[cgo] stdout '^	build	CGO_LDFLAGS=-L/extra/dir/does/not/exist$'

# https://go.dev/issue/52372: a cgo-enabled binary should not be stamped with
# CGO_ flags that contain paths.
[cgo] env CGO_ENABLED=1
[cgo] env CGO_CPPFLAGS=-DFROM_CPPFLAGS=1
[cgo] env CGO_CFLAGS=-DFROM_CFLAGS=1
[cgo] env CGO_CXXFLAGS=-DFROM_CXXFLAGS=1
[cgo] env CGO_LDFLAGS=-L/extra/dir/does/not/exist
[cgo] go build -trimpath '-ldflags=all=-linkmode=external -extldflags=-L/bonus/dir/does/not/exist'
[cgo] go version -m m$GOEXE
[cgo] ! stdout '/extra/dir/does/not/exist'
[cgo] ! stdout '/bonus/dir/does/not/exist'
[cgo] stdout '^	build	CGO_ENABLED=1$'
```

----------------------------------------

TITLE: Go.mod Before Tidy with Go 1.17
DESCRIPTION: The go.mod file for the main module before running 'go mod tidy', updated to use Go 1.17 but otherwise identical to the original configuration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_15

LANGUAGE: go
CODE:
```
module example.com/main

// Note: this go.mod file initially specifies go 1.15,
// but includes some redundant roots so that it
// also already obeys the 1.17 lazy loading invariants.
go 1.17

require (
	example.com/a v0.1.0
	example.com/b v0.1.0 // indirect
	example.com/q v0.1.0
	example.com/r v0.1.0 // indirect
	example.com/t v0.1.0
	example.com/u v0.1.0 // indirect
)

replace (
	example.com/a v0.1.0 => ./a
	example.com/b v0.1.0 => ./b
	example.com/c v0.1.0 => ./c
	example.com/d v0.1.0 => ./d
	example.com/q v0.1.0 => ./q
	example.com/r v0.1.0 => ./r
	example.com/s v0.1.0 => ./s
	example.com/t v0.1.0 => ./t
	example.com/u v0.1.0 => ./u
	example.com/w v0.1.0 => ./w
	example.com/x v0.1.0 => ./x
)
```

----------------------------------------

TITLE: Defining Terminal Control Constants in Go for Darwin ARM64
DESCRIPTION: Constants defining terminal control operations on Darwin ARM64 platform. These constants are used for terminal I/O control such as flushing input and output buffers.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_194

LANGUAGE: Go
CODE:
```
const TCIFLUSH = 1
const TCIFLUSH ideal-int
const TCIOFLUSH = 3
const TCIOFLUSH ideal-int
const TCOFLUSH = 2
const TCOFLUSH ideal-int
const TCSAFLUSH = 2
const TCSAFLUSH ideal-int
const TIOCCBRK = 536900730
const TIOCCBRK ideal-int
const TIOCCDTR = 536900728
```

----------------------------------------

TITLE: Declaring a Deprecated Subpackage - Go
DESCRIPTION: Defines a deprecated Go package named 'deprecated'. No implementation or functions are provided. Serves as a marker for deprecation in the module's subpackage structure; has no external dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_missingpkg_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package deprecated
```

----------------------------------------

TITLE: Configuring Go Module Import Path with HTML Meta Tag
DESCRIPTION: HTML file that specifies the import path for a Go module using a meta tag. The configuration directs the module 'gitrepo1' to be imported from vcs-test.golang.org using git protocol.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/mod/gitrepo1.txt#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<meta name="go-import" content="vcs-test.golang.org/go/mod/gitrepo1 git https://vcs-test.golang.org/git/gitrepo1">
```

----------------------------------------

TITLE: Vendor Modules File with Future Version Dependency
DESCRIPTION: This vendor/modules.txt file lists a dependency (golang.org/x/text) that requires a future Go version (1.99999), used to test vendored package version compatibility.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_9

LANGUAGE: Plain Text
CODE:
```
# golang.org/x/text v0.9.0
## explicit; go 1.99999
golang.org/x/text/internal/language
```

----------------------------------------

TITLE: Echo Command Implementation in Go
DESCRIPTION: Simple implementation of an echo command in Go that joins command line arguments with spaces and prints them followed by a newline. Used as a test utility for go generate tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"os"
	"strings"
)

func main() {
	fmt.Println(strings.Join(os.Args[1:], " "))
	fmt.Println()
}
```

----------------------------------------

TITLE: Testing 'go mod download -json' with GOTOOLCHAIN=auto outside a module
DESCRIPTION: Tests that 'go mod download -json' with GOTOOLCHAIN=auto correctly formats JSON output, emits each module exactly once, and sends non-JSON messages to stderr.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
env GOTOOLCHAIN=auto
go mod download -json rsc.io/needgo121@latest rsc.io/needgo122@latest rsc.io/needgo123@latest rsc.io/needall@latest
stderr '^go: rsc.io/needall@v0.0.1 requires go >= 1.23; switching to go1.23.9$'
! stderr '\(running'
stdout -count=1 '"Path": "rsc.io/needgo121",'
stdout -count=1 '"Path": "rsc.io/needgo122",'
stdout -count=1 '"Path": "rsc.io/needgo123",'
stdout -count=1 '"Path": "rsc.io/needall",'
```

----------------------------------------

TITLE: Implementing Package 'p' with Dependency (Go)
DESCRIPTION: This Go file defines the 'p' package within the 'coverdep' module. It imports the local package 'p1' using the blank identifier (`_`), typically done to execute 'p1's init functions, potentially for registration or setup related to coverage. It also defines an empty function 'F' which is called by the test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dash_c.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- p.go --
package p

import _ "coverdep/p1"

func F() {
}
```

----------------------------------------

TITLE: Text Localization Implementation in Go
DESCRIPTION: Core implementation of the text localization system. Includes methods for handling language preferences and text lookup based on language tags.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.3.1.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
type text struct {
	byTag   map[string]string
	matcher language.Matcher
}

func newText(s string) *text {
	t := &text{
		byTag: make(map[string]string),
	}
	var tags []language.Tag
	for _, line := range strings.Split(s, "\n") {
		line = strings.TrimSpace(line)
		if line == "" {
			continue
		}
		f := strings.Split(line, ": ")
		if len(f) != 3 {
			continue
		}
		tag := language.Make(f[1])
		tags = append(tags, tag)
		t.byTag[tag.String()] = f[2]
	}
	t.matcher = language.NewMatcher(tags)
	return t
}
```

----------------------------------------

TITLE: Go Package with Assembly Function Declaration
DESCRIPTION: A simple Go package that declares an assembly function 'f' without implementation in Go and a regular Go function 'g' that prints a message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_asm.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p

func f()

func g() {
	println("g")
}
```

----------------------------------------

TITLE: Vendoring Consistency Check
DESCRIPTION: Shows that after updating go.mod, -mod=vendor is triggered by default and a stronger consistency check is applied.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_5

LANGUAGE: Shell
CODE:
```
! go list all
stderr '^go: inconsistent vendoring'
! stderr badedit
```

----------------------------------------

TITLE: Main Package Implementation
DESCRIPTION: Main entry point that imports and calls the sub package's F function
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue62156.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import "m/sub"

func main() { sub.F() }
```

----------------------------------------

TITLE: Configuring Parallelism in Go Benchmarks - Go
DESCRIPTION: Exposes the SetParallelism method on the testing.B type in Go's standard library. This method sets the number of goroutines used during parallel benchmark execution, allowing control over concurrent work by specifying the desired parallelism as an integer parameter. For correct results, the method should be used before running benchmark logic, and improper use may lead to misleading benchmark numbers.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_64

LANGUAGE: Go
CODE:
```
pkg testing, method (*B) SetParallelism(int)
```

----------------------------------------

TITLE: Environment Setup and Test Command
DESCRIPTION: Sets CGO_ENABLED=0 and attempts to install a cgotest package, expecting a build constraint error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_cgo_excluded.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env CGO_ENABLED=0

! go install cgotest
stderr 'build constraints exclude all Go files'
```

----------------------------------------

TITLE: Defining Target Go Module x/z for Replacement (Go Mod)
DESCRIPTION: This `go.mod` file defines the module `x/z`. It serves as the local replacement target specified in the `x/y` module's `go.mod` file. It doesn't declare any dependencies or replacements itself.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_local_replace.txt#2025-04-22_snippet_3

LANGUAGE: gomod
CODE:
```
-- x/z/go.mod --
module x/z
```

----------------------------------------

TITLE: Alternate Go Module Definition
DESCRIPTION: Alternative go.mod file (go.alt.mod) with identical module definition.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_reject_modfile.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/foo

go 1.20
```

----------------------------------------

TITLE: Go File Importing golang.org/x/text
DESCRIPTION: This Go file imports the golang.org/x/text package as a blank import, used to test indirect dependency behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_indirect.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
package x
import _ "golang.org/x/text"
```

----------------------------------------

TITLE: Running Go Test Coverage on a Single Package
DESCRIPTION: Executes `go test -count=1 -cover` only on the `main` package. Asserts via `stdout` check that the output line for the `main` package shows 'coverage: 75.0% of statements'. This verifies that the coverage result for `main` is consistent, even when tested alone, compared to testing it with other packages (addressing issue 65570).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_single_vs_multiple.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go test -count=1 -cover ./main
stdout '^ok\s+M/main\s+\S+\s+coverage: 75.0% of statements'
```

----------------------------------------

TITLE: Checking Module Resolution against Golang Directories in Shell
DESCRIPTION: Using 'go list' to confirm that 'golang.org' directories map to correct vendor locations within module paths, aiding in verifying accurate module resolution for external dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_std.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
go list -f '{{.Dir}}' golang.org/x/net/http2/hpack
```

----------------------------------------

TITLE: Expected Output File: List All Modules and Replacements - Text
DESCRIPTION: This verification file shows the output of 'go list -m all', including the main module and resolved replacements, used for regression test comparisons. Accurate matches confirm correct display of the final module list and local substitution behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_9

LANGUAGE: text
CODE:
```
golang.org/issue/root
golang.org/issue/mirror v0.1.0 => ./mirror-v0.1.0
golang.org/issue/pkg v0.1.0 => ./pkg-v0.1.0
```

----------------------------------------

TITLE: Go Test Command
DESCRIPTION: Test command demonstrating coverage testing with dry-run flag
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_n_cover.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go test -vet=off -n -cover ./f
```

----------------------------------------

TITLE: Testing Wildcard Matching with Japanese Characters
DESCRIPTION: Tests wildcard pattern matching with '...' against Japanese text ('日本語'). Shows how the pattern matches multi-byte characters with different assertion configurations.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_28

LANGUAGE: go
CODE:
```
"^...$"
-;-;-;-
0-9;0-9;0-9;0-9
"^(?:^...$)$"
-;-;-;-
0-9;0-9;0-9;0-9
"^(?:^...$)"
-;-;-;-
0-9;0-9;0-9;0-9
"(?:^...$)$"
-;-;-;-
0-9;0-9;0-9;0-9
```

----------------------------------------

TITLE: Configuring Go Module with Dependencies
DESCRIPTION: This go.mod file defines the module 'example.com/x' and specifies a dependency on 'foo.com/internal/bar' version 1.0.0. It also sets the Go version to 1.19.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_internal.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example.com/x
go 1.19

require "foo.com/internal/bar" v1.0.0
```

----------------------------------------

TITLE: Windows Batch Script for Test GCC Compiler
DESCRIPTION: A Windows batch script that simulates the gcc compiler by writing 'ok' to a log file. This is placed in a directory with spaces to test path handling on Windows.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path_space.txt#2025-04-22_snippet_4

LANGUAGE: bat
CODE:
```
echo ok >%WORK%\log.txt
```

----------------------------------------

TITLE: Standard Module Definition
DESCRIPTION: Standard go.mod file defining the module name.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badsum_v1.0.1.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module "rsc.io/badsum"
```

----------------------------------------

TITLE: Listing Dependencies of Vendored Packages in Shell
DESCRIPTION: The command lists the dependencies of a specified vendored package using 'go list -deps'. It ensures all dependencies are also from vendored paths, aligning with module boundaries within Go projects.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_std.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go list -deps vendor/golang.org/x/crypto/chacha20
```

----------------------------------------

TITLE: Testing Go Module Management with gopkg.in Unstable Versions
DESCRIPTION: A sequence of shell commands that test Go's module management with gopkg.in unstable versions. It sets up a minimal environment, attempts to get packages, and verifies module resolution behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gopkg_unstable.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on

cp go.mod.empty go.mod
go get gopkg.in/dummy.v2-unstable

cp x.go.txt x.go
cp go.mod.empty go.mod
go list

[!net:gopkg.in] skip
[!git] skip

skip  # TODO(#54503): redirect gopkg.in requests to a local server and re-enable.

env GOPROXY=direct
env GOSUMDB=off
go get gopkg.in/macaroon-bakery.v2-unstable/bakery
go list -m all
stdout 'gopkg.in/macaroon-bakery.v2-unstable v2.0.0-[0-9]+-[0-9a-f]+$'
```

----------------------------------------

TITLE: Main Package Import
DESCRIPTION: Main package file importing example.net/a package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patch.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package example

import _ "example.net/a"
```

----------------------------------------

TITLE: Module Q v1.0.0 Implementation
DESCRIPTION: This snippet shows the go.mod file and implementation for 'example.com/q' version 1.0.0. It provides a PrintVersion function that prints "version 1.0.0".
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
module example.com/q

go 1.18
```

LANGUAGE: Go
CODE:
```
package q

import "fmt"

func PrintVersion() {
	fmt.Println("version 1.0.0")
}
```

----------------------------------------

TITLE: Ignored Package with Build Constraint
DESCRIPTION: Package p3 with build constraint that excludes it from compilation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_import_error_stack.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
// +build ignore

package ignored
```

----------------------------------------

TITLE: Deprecations in runtime package
DESCRIPTION: Lists deprecated function in the runtime package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_29

LANGUAGE: Go
CODE:
```
pkg runtime, func CPUProfile //deprecated
```

----------------------------------------

TITLE: Main Package with CGO Integration
DESCRIPTION: This Go file defines the main package and imports the 'C' package for CGO usage. It declares a variable of type C.int to demonstrate CGO integration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_n_cgo.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main

import "C"

var _ C.int
```

----------------------------------------

TITLE: Invalid Main Package Import
DESCRIPTION: Example of invalid import of package main from another package, which should fail during build
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_main.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p1

import xmain "x"

var _ = xmain.X
```

----------------------------------------

TITLE: Package A v0.1.1 Definition
DESCRIPTION: Module definition and implementation for example.net/a v0.1.1 with upgraded dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patch.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.net/a

go 1.16

require example.net/b v0.2.0  // upgraded
```

LANGUAGE: go
CODE:
```
package a

import _ "example.net/b"
```

----------------------------------------

TITLE: Adding Sequence Functions to bytes Package in Go
DESCRIPTION: New functions in the bytes package that return iterator sequences for various string operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
func FieldsFuncSeq([]uint8, func(int32) bool) iter.Seq[[]uint8]
func FieldsSeq([]uint8) iter.Seq[[]uint8]
func Lines([]uint8) iter.Seq[[]uint8]
func SplitAfterSeq([]uint8, []uint8) iter.Seq[[]uint8]
func SplitSeq([]uint8, []uint8) iter.Seq[[]uint8]
```

----------------------------------------

TITLE: Test-Only Package Definition
DESCRIPTION: A Go test file that defines a package named 'testonly' which contains only test files and no implementation files, used to demonstrate build behavior with test-only packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_test_only.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package testonly
```

----------------------------------------

TITLE: Adding ExportKeyingMaterial method to ConnectionState in crypto/tls package in Go
DESCRIPTION: Introduces ExportKeyingMaterial method to ConnectionState type in the crypto/tls package. It takes a string, a byte slice, and an integer as parameters and returns a byte slice and an error.
SOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
method (*ConnectionState) ExportKeyingMaterial(string, []uint8, int) ([]uint8, error)
```

----------------------------------------

TITLE: Go Module Download Cache Reuse Tests
DESCRIPTION: Tests for reusing cached module information and verifying proper JSON output with reuse flag
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/reuse_git.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go mod download -reuse=hello.json -x -json vcs-test.golang.org/git/hello.git@latest
go mod download -reuse=hellopseudo.json -x -json vcs-test.golang.org/git/hello.git@v0.0.0-20170922010558-fc3a09f3dc5c
```

----------------------------------------

TITLE: Creating Mock Gofmt Executable Script for Testing
DESCRIPTION: A shell script that simulates the 'gofmt' command with a placeholder implementation that simply outputs a message indicating it's unused.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-ppc64le.txt#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
echo i am unused
```

----------------------------------------

TITLE: Go Package with Case-Sensitive Import
DESCRIPTION: A Go package that imports 'rsc.io/QUOTE/QUOTE' with uppercase letters to test case sensitivity in the import system. The blank import is used to create a dependency without actually using the package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_case.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package use

import _ "rsc.io/QUOTE/QUOTE"
```

----------------------------------------

TITLE: Go Binary Setup and GOROOT Verification
DESCRIPTION: Copies Go executable to test location and verifies GOROOT detection through os.Executable()
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_goroot_symlink.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
mkdir $WORK/lib/goroot/bin
cp $TESTGO_EXE $WORK/lib/goroot/bin/go$GOEXE

env GOROOT=''  # Clear to force cmd/go to find GOROOT itself.
exec $WORK/lib/goroot/bin/go env GOROOT
stdout $WORK${/}lib${/}goroot
```

----------------------------------------

TITLE: Testing Go Vet Version Without go.mod or go.work
DESCRIPTION: Verifies go vet behavior when neither go.mod nor go.work is present, expecting the local Go version to be used for single file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_commandline.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
env TESTGO_VERSION=go1.22.3
rm go.mod
rm go.work

! go vet -n -json example.com/m

go vet -n -json main.go
stderr '"GoVersion": "go1.22.3"'
```

----------------------------------------

TITLE: Implementing Default User Language Preferences in Go
DESCRIPTION: This function returns the default user language preferences by checking environment variables LC_ALL, LC_MESSAGES, and LANG.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
func DefaultUserPrefs() []language.Tag {
	var prefs []language.Tag
	for _, k := range []string{"LC_ALL", "LC_MESSAGES", "LANG"} {
		if env := os.Getenv(k); env != "" {
			prefs = append(prefs, language.Make(env))
		}
	}
	return prefs
}
```

----------------------------------------

TITLE: Maintaining Existing Module Path
DESCRIPTION: Shows how 'go get' maintains an existing shorter module path when it's already in the dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_pkg.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
cp go.mod.orig go.mod
go mod edit -require=example.net/ambiguous@v0.1.0

go get example.net/ambiguous/nested/pkg@v0.1.0
go list -m all
stdout '^example.net/ambiguous v0.1.0$'
! stdout '^example.net/ambiguous/nested '
```

----------------------------------------

TITLE: Module B v0.2.0 Configuration
DESCRIPTION: The go.mod file for module 'b' v0.2.0, requiring 'c' v0.2.0. This creates a different dependency path than v0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module b

go 1.13

require c v0.2.0
```

----------------------------------------

TITLE: Main Module Definition
DESCRIPTION: Main go.mod file defining the module structure with dependencies and replace directives
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_upgrade_lazy.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module use

go 1.17

require (
	direct v0.0.0
	example.com/lazyupgrade v0.1.0
)

replace (
	direct => ./direct
	example.com/lazyupgrade v0.1.0 => ./lazyupgrade@v0.1.0
	example.com/lazyupgrade v0.1.1 => ./lazyupgrade@v0.1.1
)
```

----------------------------------------

TITLE: Storing Values in Memory using Go SSA
DESCRIPTION: Illustrates how memory operations are represented in Go SSA. The example shows a Store operation that writes an integer value to memory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/internal/ssa/README.md#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
v17 (361) = Store <mem> {int} v16 v14 v8
```

----------------------------------------

TITLE: Module A Configuration
DESCRIPTION: First module configuration with a name that intentionally sorts after 'go' alphabetically, which is important for reproducing the test case issue.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_verify_work.txt#2025-04-22_snippet_2

LANGUAGE: plain text
CODE:
```
module hexample.com/a // important for test that module name sorts after 'go'

go 1.21
```

----------------------------------------

TITLE: Defining math Constants in Go
DESCRIPTION: Constants defining maximum and minimum floating point values in Go's math package. Includes MaxFloat64, SmallestNonzeroFloat32, and SmallestNonzeroFloat64.
SOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
const MaxFloat64 = 1.79769e+308
const SmallestNonzeroFloat32 = 1.4013e-45
const SmallestNonzeroFloat64 = 4.94066e-324
```

----------------------------------------

TITLE: Main Package without PGO Profile - nopgo/nopgo.go
DESCRIPTION: Defines a simple main package that imports two dependencies but has no associated PGO profile file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package main
import _ "test/dep"
import _ "test/dep2"
func main() {}
```

----------------------------------------

TITLE: Environment Setup and Basic Version Tests
DESCRIPTION: Sets up test environment variables and verifies basic toolchain version selection with different GOTOOLCHAIN settings (auto, path, explicit versions)
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_local.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env TESTGO_VERSION=go1.500
env TESTGO_VERSION_SWITCH=switch

env GOTOOLCHAIN=auto
go version
stdout go1.500
```

----------------------------------------

TITLE: Testing Line Ending Preservation in Go Module Files
DESCRIPTION: Verifies that the go command doesn't overwrite a go.mod file if the only difference is line endings (CRLF vs LF).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
cp go.mod.crlf go.mod
go list all
cmp go.mod go.mod.crlf
```

----------------------------------------

TITLE: Testing error handling for invalid -modfile suffix
DESCRIPTION: Verifies that an error is reported when the -modfile flag points to a file without a .mod suffix.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_12

LANGUAGE: shell
CODE:
```
cp go.alt.mod goaltmod
! go mod tidy -modfile=goaltmod
stderr '-modfile=goaltmod: file does not have .mod extension'
```

----------------------------------------

TITLE: Workspace Modules.txt Configuration
DESCRIPTION: Expected content for the workspace-generated modules.txt file. It includes the '## workspace' marker which signals workspace vendor mode should be used.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_conditional.txt#2025-04-22_snippet_1

LANGUAGE: text
CODE:
```
## workspace
# example.com/b v0.0.0 => ./b
## explicit; go 1.21
example.com/b
# example.com/b => ./b
```

----------------------------------------

TITLE: Emitting Experimental Batches in Go
DESCRIPTION: Example of using runtime.unsafeTraceExpWriter to emit experimental batches in Go, ensuring the trace generation cannot advance during writing.
SOURCE: https://github.com/golang/go/blob/master/src/internal/trace/tracev2/EXPERIMENTS.md#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
func emitExperimentalBatch() {
    lockTraceBuf()
    defer unlockTraceBuf()

    w := unsafeTraceExpWriter()
    w.Write([]byte{1, 2, 3, 4}) // Write experimental data
    w.Flush()
}
```

----------------------------------------

TITLE: Running go vet with printf flag enabled
DESCRIPTION: This snippet shows running go vet with the printf flag explicitly enabled. It expects an error message containing 'Printf'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
! go vet -printf m/vetpkg
stderr 'Printf'
```

----------------------------------------

TITLE: Basic Go Tool Executable Name Check
DESCRIPTION: A Go program that prints its own executable name using filepath.Base. Used to verify correct executable naming in the Go build system.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/tool_exename.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"os"
	"path/filepath"
)

func main() {
	fmt.Println("my name is:", filepath.Base(os.Args[0]))
}
```

----------------------------------------

TITLE: Upgrading Go Version and Removing Toolchain
DESCRIPTION: This snippet shows how to upgrade the Go version and remove a specific toolchain version in a single command. It also demonstrates how to verify the changes in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
go get go@1.22.3 toolchain@1.22.3
```

----------------------------------------

TITLE: Go Command Script Implementation for Test Module
DESCRIPTION: A shell script that serves as a placeholder for the 'go' command in a test toolchain. The script simply outputs a message indicating it's the test version (go1.999testmod).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-ppc64.txt#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
#!/bin/sh
echo go1.999testmod here!
```

----------------------------------------

TITLE: Defining SVN Repository Import Path in HTML Meta Tag
DESCRIPTION: HTML template with a go-import meta tag that maps the vcs-test.golang.org/go/test1-svn-git import path to an SVN repository at https://vcs-test.golang.org/svn/test1-svn-git.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/test1-svn-git.txt#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<meta name="go-import" content="vcs-test.golang.org/go/test1-svn-git svn https://vcs-test.golang.org/svn/test1-svn-git">
```

----------------------------------------

TITLE: Executing Invalid Go Command
DESCRIPTION: This command shows how the Go CLI responds when provided with an unknown command 'asdf'. The command is expected to fail and output an error message to stderr.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/go_badcmd.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go asdf
stderr '^go asdf: unknown command'
```

----------------------------------------

TITLE: Defining Package 'a' in Go
DESCRIPTION: This Go source file defines a minimal package 'a'. It contains no exported identifiers and serves primarily as a node in the dependency graph.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
-- a1/a.go --
package a
```

----------------------------------------

TITLE: Defining main module with redundant requirements
DESCRIPTION: Specifies the main module's go.mod file with Go version and redundant requirements for example.com/m, along with a replace directive.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_redundant_requirement.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module m

go 1.17

require example.com/m v0.0.0
require example.com/m v0.0.0

replace example.com/m v0.0.0 => ./m
```

----------------------------------------

TITLE: NetBSD Error Constants
DESCRIPTION: System error codes used by NetBSD for various error conditions including file operations, network operations, and system calls.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_16

LANGUAGE: Go
CODE:
```
const E2BIG = 7
const EACCES = 13
const EADDRINUSE = 48
const EADDRNOTAVAIL = 49
const EAFNOSUPPORT = 47
const EAGAIN = 35
```

----------------------------------------

TITLE: Gofmt Formatted Text Example
DESCRIPTION: The same text after being processed by gofmt, showing standardized indentation and spacing
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list9.txt#2025-04-22_snippet_1

LANGUAGE: text
CODE:
```
Text.

1. Not a list
2. because it is
3. unindented.

 4. This one
    is a list
    because of the indented text.
 5. More wrapped
    items.
 6. And unwrapped.

7. The blank line stops the heuristic.
```

----------------------------------------

TITLE: Testing Go Module Vendoring with Replacement
DESCRIPTION: Tests the behavior of 'go mod vendor' command when a replacement is specified inside the vendor directory. It expects an error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
! go mod vendor
stderr 'replacement path ./vendor/not-rsc.io/quote/v3 inside vendor directory'
```

----------------------------------------

TITLE: Implementing Function BazFunc in Package 'baz'
DESCRIPTION: Defines BazFunc in the 'baz' package, which returns a constant negative integer. It serves as a simple function implementation example within the package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_pkgselect.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
-- baz/baz.go --
package baz

func BazFunc() int {
	return -42
}

```

----------------------------------------

TITLE: Setting List Item Margins with CSS
DESCRIPTION: Defines vertical margin spacing of 0.5em for list items (<li>) that appear within the main element.
SOURCE: https://github.com/golang/go/blob/master/doc/initial/1-intro.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<style>
  main ul li { margin: 0.5em 0; }
</style>
```

----------------------------------------

TITLE: NetBSD ARM64 I/O Vector Structure Definition in Go
DESCRIPTION: Defines the Iovec structure used for scatter/gather I/O operations. Contains fields for buffer address and length.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_95

LANGUAGE: go
CODE:
```
type Iovec struct {
	Base *uint8
	Len uint64
}
```

----------------------------------------

TITLE: Building Go Executables in Different Directories
DESCRIPTION: Compiles a Go program twice: once in the current directory and once in the guest directory, to compare ACLs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_acl_windows.txt#2025-04-22_snippet_2

LANGUAGE: Batch
CODE:
```
cd TestACL
go build -o main.exe main.go
go build -o $TMP\main.exe main.go
```

----------------------------------------

TITLE: Setting Go Environment Variables
DESCRIPTION: Sets environment variables for Go module behavior, including enabling modules, setting the proxy to direct, and disabling checksum database.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo_prefix.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
env GOPROXY=direct
env GOSUMDB=off
```

----------------------------------------

TITLE: Re-testing Previously Listed Retracted Version
DESCRIPTION: Verifies that the warning persists when requesting a previously listed +incompatible version that was retracted.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_incompatible.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go get example.com/retract/incompatible@v2.0.0+incompatible
stderr '^go: warning: example.com/retract/incompatible@v2.0.0\+incompatible: retracted by module author$'
```

----------------------------------------

TITLE: Checking error for empty directory
DESCRIPTION: Uses 'go list' to check the error message for an empty directory, which should indicate no Go files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_empty_err.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go list -e -f {{.Error}} ./empty
stdout 'no Go files in '$WORK${/}'empty'
```

----------------------------------------

TITLE: Retrying Go Module Download with Fewer Redirects
DESCRIPTION: Reconfigures the proxy to use 9 redirects instead of 11, then attempts to download the same module version again, expecting success.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_too_many_redirects.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
env GOPROXY=$GOPROXYBASE/redirect/9
go mod download rsc.io/quote@v1.2.0
```

----------------------------------------

TITLE: Defining Termios Structure for NetBSD ARM CGO in Go
DESCRIPTION: Definition of Termios struct fields for NetBSD ARM platform with CGO enabled. Termios is used for terminal I/O operations with fields for various terminal settings.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_33

LANGUAGE: Go
CODE:
```
type Termios struct {
	Oflag uint32
	Ospeed int32
}
```

----------------------------------------

TITLE: Resolving Ambiguous Module Path with go get
DESCRIPTION: Demonstrates how 'go get' resolves an ambiguous module path by choosing the module with the longest matching prefix.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_pkg.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go get example.net/ambiguous/nested/pkg@v0.1.0
go list -m all
stdout '^example.net/ambiguous/nested v0.1.0$'
! stdout '^example.net/ambiguous '
```

----------------------------------------

TITLE: Adding go.mod with v2 Module Path in Master
DESCRIPTION: Adds a go.mod file with a v2 module path in the master branch.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_14

LANGUAGE: bash
CODE:
```
at 2018-02-19T17:30:23-05:00
env GIT_AUTHOR_DATE=2018-02-19T17:24:48-05:00
echo 'module "github.com/vgotest1/v2"'
cp stdout go.mod
git add go.mod
git commit -m 'add go.mod'
```

----------------------------------------

TITLE: Original C Header Before Overlay
DESCRIPTION: Original version of the C header file before being replaced by the overlay. Contains an incorrect function declaration that would cause compilation errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_12

LANGUAGE: c
CODE:
```
 // Test that this header is replaced with one that has the proper declaration.
void say_goodbye();
```

----------------------------------------

TITLE: Testing Preservation of Required Indirect Comments
DESCRIPTION: Verifies that the go command maintains direct dependencies without automatically adding '// indirect' comments.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
cp go.mod.toodirect go.mod
go list all
cmp go.mod go.mod.toodirect
```

----------------------------------------

TITLE: Gofmt Command Shell Script Implementation
DESCRIPTION: Shell script for the 'gofmt' command that outputs a message. This script is placed in the bin directory of the toolchain package but is labeled as unused.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-s390x.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
echo i am unused
```

----------------------------------------

TITLE: Golang Package Import for Versioned Dependency
DESCRIPTION: The Go source file within the `useneedx2` package imports the `example.net/needx2` module to demonstrate the usage of updated module versions in the application.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_consistency.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package useneedx2

import _ "example.net/needx2"
```

----------------------------------------

TITLE: Verifying Fail Output in JSON
DESCRIPTION: Checks for the presence of specific JSON entries indicating a build failure and a test failure for the 'example' package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_issue35169.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
stdout '\{.*"Action":"output","Package":"example","Output":"FAIL\\texample \[build failed\]\\n"\}'
stdout '\{.*"Action":"fail","Package":"example",.*\}'
```

----------------------------------------

TITLE: Windows batch file for pre-revprop-change hook
DESCRIPTION: Windows batch script equivalent of the pre-revprop-change hook, which simply exits without performing any checks to allow property changes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_14

LANGUAGE: batch
CODE:
```
@exit

```

----------------------------------------

TITLE: Formatting Go Code with gofmt
DESCRIPTION: This snippet demonstrates the effect of gofmt on a simple Go code structure. It shows how gofmt adjusts indentation and spacing to improve code readability and consistency.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code5.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
L1
L2
L3
L4
L5
- L6 {
	L7
}
L8
```

LANGUAGE: Go
CODE:
```
L1
L2
L3
L4
L5
  - L6 {
    L7
    }

L8
```

----------------------------------------

TITLE: Main Package with Import
DESCRIPTION: This snippet defines the main package file (main.go) which imports the 'bad' package. It's used to test the propagation of import errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_info_err.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package main

import _ "m/bad"

func main() {}
```

----------------------------------------

TITLE: Module Definition Configuration
DESCRIPTION: Defines the module name in .mod file for the Go package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_depofdirectpatch_v1.0.1.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module patch.example.com/depofdirectpatch
```

----------------------------------------

TITLE: Test Function for Subpackage A
DESCRIPTION: A Go test file for subpackage 'a' with a minimal test function. This is used to verify that tests for subpackages run correctly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_patterns_outside_gopath.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package a_test

import "testing"

func TestA(t *testing.T) {
}
```

----------------------------------------

TITLE: Image RGBA64 Interface Definition
DESCRIPTION: Definition of RGBA64Image interface for handling 16-bits-per-channel RGBA colors
SOURCE: https://github.com/golang/go/blob/master/api/go1.17.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
type RGBA64Image interface {
    At(int, int) color.Color
    Bounds() Rectangle
    ColorModel() color.Model
    RGBA64At(int, int) color.RGBA64
}
```

----------------------------------------

TITLE: V2 Branch Creation and Tagging
DESCRIPTION: Creates and configures v2 branch with multiple tags and commits
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitrepo1.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
git branch v2
git checkout v2
echo 'v2'
cp stdout v2
git add v2
git commit -a -m 'v2'
git tag v2.3
git tag v2.0.1
git branch v2.3.4
```

----------------------------------------

TITLE: Testing vendored dependencies in std module
DESCRIPTION: Verifies that when run within the 'std' module, 'go list -test' reports vendored transitive dependencies at their vendored paths.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
cd $GOROOT/src
go list -test -f '{{range .Deps}}{{.}}{{"\n"}}{{end}}' net/http
! stdout ^golang.org/x/net/http2/hpack
stdout ^vendor/golang.org/x/net/http2/hpack
```

----------------------------------------

TITLE: Module Q Configuration
DESCRIPTION: Module definition for example.com/q, which is a dependency of module B.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
module example.com/q

go 1.21
```

----------------------------------------

TITLE: Testing go mod tidy with -compat Flag
DESCRIPTION: Executes 'go mod tidy' with the -compat=1.17 flag to ignore differences and checks for expected behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_incompatible.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go mod tidy -compat=1.17
! stderr .
cmp go.mod go.mod.orig
```

----------------------------------------

TITLE: Go Workspace Environment Test
DESCRIPTION: Tests GOWORK path resolution without triggering toolchain download
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_gomod_issue61455.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
cd $GOPATH/work
go env GOWORK
stdout work[/\\]go.work
! stderr 'go: toolchain go1.500 invoked to provide go1.700'
```

----------------------------------------

TITLE: Go file with contradictory build constraints
DESCRIPTION: A Go file with build constraints that cannot be satisfied (linux AND NOT linux), which will be excluded from any build.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_no_go.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
// +build linux,!linux

package x
```

----------------------------------------

TITLE: Adding AvailableBuffer method to Writer and ReadWriter in bufio package
DESCRIPTION: This snippet introduces new methods AvailableBuffer() for Writer and ReadWriter types in the bufio package. These methods return a byte slice.
SOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
pkg bufio, method (*Writer) AvailableBuffer() []uint8
pkg bufio, method (ReadWriter) AvailableBuffer() []uint8
```

----------------------------------------

TITLE: Test Function for Package X
DESCRIPTION: A Go test file for package 'x' that contains a minimal test function. The test doesn't assert anything but is used to verify that tests run correctly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_patterns_outside_gopath.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package x_test

import "testing"

func TestX(t *testing.T) {
}
```

----------------------------------------

TITLE: Go File with HTTP Response Error
DESCRIPTION: This Go file contains a function with an error in handling an HTTP response, used to test the httpresponse vet analyzer.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package p

import "net/http"

func F() {
	resp, err := http.Head("example.com")
	defer resp.Body.Close()
	if err != nil {
		panic(err)
	}
	// (defer statement belongs here)
}
```

----------------------------------------

TITLE: Function Implementation for Package 'a' in Go
DESCRIPTION: Defines a simple package 'a' with an init function that prints a message and a function AFunc that returns 42.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package a

func init() {
	println("package 'a' init: launch the missiles!")
}

func AFunc() int {
	return 42
}
```

----------------------------------------

TITLE: Testing Removal of Unnecessary Indirect Comments
DESCRIPTION: Verifies that '// indirect' comments are removed when dependencies become direct during module operations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
cp go.mod.indirect go.mod
go list -mod=mod all
cmp go.mod go.mod.tidy
```

----------------------------------------

TITLE: Exclude Error Message Template
DESCRIPTION: Error message template for exclude directive violations in go.mod files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_pkg_version.txt#2025-04-22_snippet_3

LANGUAGE: plaintext
CODE:
```
go: example.com/cmd/a@v1.0.0-exclude (in example.com/cmd@v1.0.0-exclude):
	The go.mod file for the module providing named packages contains one or
	more exclude directives. It must not contain directives that would cause
	it to be interpreted differently than if it were the main module.
```

----------------------------------------

TITLE: Basic Hello World Program in Go
DESCRIPTION: Simple Go program that prints "hello, world" to the console. This is the file being committed to the Git repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/hello.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package main

func main() {
	println("hello, world")
}
```

----------------------------------------

TITLE: Import V2 Module in Go Package
DESCRIPTION: This Go code snippet imports version 2 of the rsc.io/quote module within a package. This step checks and allows validation of the module import process.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_multirepo.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
package quote
import _ "rsc.io/quote/v2"
```

----------------------------------------

TITLE: Different Package Build with PGO
DESCRIPTION: Verifies that building a different package uses cached profile instead of running preprofile again
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_pgo.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
go build -x -pgo=default.pgo lib2.go
! stderr 'preprofile.*default\.pgo'
stderr 'compile.*-pgoprofile=\S+gocache.*lib2.go'
```

----------------------------------------

TITLE: Configuring Go Module with External Dependency
DESCRIPTION: A Go module configuration file that defines a module named 'x' with a dependency on rsc.io/quote v1.5.2. This is used for testing module documentation behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module x
require rsc.io/quote v1.5.2
```

----------------------------------------

TITLE: Go Package with UTF16 Import
DESCRIPTION: Secondary Go source file in package x that imports unicode/utf16 package. Demonstrates import of standard library package without additional CGO dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiled_imports.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package x
import "unicode/utf16" // does not use unsafe, syscall, runtime/cgo, unicode
```

----------------------------------------

TITLE: Testing Localized Greetings in Go
DESCRIPTION: This test function verifies the correct localized greeting is returned based on language preferences.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
func TestHello(t *testing.T) {
	for _, tt := range helloTests {
		text := Hello(tt.prefs...)
		if text != tt.text {
			t.Errorf("Hello(%v) = %q, want %q", tt.prefs, text, tt.text)
		}
	}
}
```

----------------------------------------

TITLE: Package 1 Test File Structure
DESCRIPTION: Empty test file for package pkg1 in the pkg directory. Used as part of the test structure to verify the behavior of 'go test' with multiple packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_compile_multi_pkg.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package pkg1
```

----------------------------------------

TITLE: Go Implementation with cgo Import
DESCRIPTION: A Go file that imports the C package using cgo, defining a simple function F() to create a valid Go package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_asm_error.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p

/*
// hi
*/
import "C"

func F() {}
```

----------------------------------------

TITLE: Configuring Go Module with External Tool Dependency
DESCRIPTION: This go.mod file sets up a Go module named 'example.com/foo' using Go version 1.24. It also declares a dependency on an external tool 'example.com/tools/cmd/hello'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tool_70582.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
go 1.24

module example.com/foo

tool example.com/tools/cmd/hello
```

----------------------------------------

TITLE: Platform-specific Line Ending Handling
DESCRIPTION: Replaces line endings in the SVN log file on Windows and compares the result with expected output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/hello.txt#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
[GOOS:windows] replace '\n' '\r\n' .svn-log
cmp stdout .svn-log
```

----------------------------------------

TITLE: Running Go Tests with No Matches
DESCRIPTION: Shell command demonstrating how to run Go tests with a pattern that matches no tests, showing the no-tests-to-run output
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_tests_with_subtests.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -run ThisWillNotMatch standalone_sub_test.go\nstdout '^ok.*\[no tests to run\]'
```

----------------------------------------

TITLE: Listing Module Dependencies in Go
DESCRIPTION: This command lists all module dependencies, including available updates, focusing on the 'example.com/pseudoupgrade' module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade_pseudo.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
go list -m -u all
stdout '^example.com/pseudoupgrade v0.1.1-0.20190429073117-b5426c86b553$'
```

----------------------------------------

TITLE: Setting Go Environment Variables for Module Testing
DESCRIPTION: Sets environment variables to enable Go modules, use direct proxy, and disable sum database for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo_other_branch.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
env GOPROXY=direct
env GOSUMDB=off
```

----------------------------------------

TITLE: Testing CPU Profiling in Go with Default Output
DESCRIPTION: Runs a Go test with CPU profiling enabled on the errors package. It then checks if the default test executable 'errors.test' was created.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_profile.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go test -cpuprofile errors.prof errors
exists -exec errors.test$GOEXE
```

----------------------------------------

TITLE: Empty Go Package for Plugin Test
DESCRIPTION: A minimal Go package file that doesn't contain a main function. This is used to test the requirement that plugin buildmode needs a main package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_plugin_non_main.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p
```

----------------------------------------

TITLE: Test Command with Skip Conditions
DESCRIPTION: Build command with conditional skips based on network connectivity to GitHub and git availability.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_git_export_subst.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
# Testing that git export-subst is disabled
[!net:github.com] skip
[!git] skip
go build
```

----------------------------------------

TITLE: Empty Assembly Implementation
DESCRIPTION: Empty assembly file that could potentially contain implementations of the undefined Go functions
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_external_undef.txt#2025-04-22_snippet_2

LANGUAGE: assembly
CODE:
```
// Add an assembly function so as to leave open the possibility
// that body-less functions in Go might be defined in assembly.

// Currently we just need an empty file here.
```

----------------------------------------

TITLE: Fuzz Test Worker Detection Function
DESCRIPTION: Helper function to determine if the current process is running as a fuzz worker by checking test flags
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_fail.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
func isWorker() bool {
	f := flag.Lookup("test.fuzzworker")
	if f == nil {
		return false
	}
	get, ok := f.Value.(flag.Getter)
	if !ok {
		return false
	}
	return get.Get() == interface{}(true)
}
```

----------------------------------------

TITLE: Implementing Simple Go Package Function
DESCRIPTION: A minimal Go package containing a single function that returns a pointer to an integer.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_output.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package p
func f(x *int) *int { return x }
```

----------------------------------------

TITLE: Initializing Go Module errcycle in Go Language
DESCRIPTION: This Go module declaration specifies the usage of module 'errcycle' with Go version 1.16 as a setup for testing import cycle errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_err_cycle.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module errcycle

go 1.16
```

----------------------------------------

TITLE: Setting Environment Variables for Go Build Test
DESCRIPTION: Sets GOFLAGS to use -trimpath and defines a custom GOCACHE directory for the test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_trimpath_issue48557.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GOFLAGS=-trimpath
env GOCACHE=$WORK/gocache
```

----------------------------------------

TITLE: Defining Go Module Configuration
DESCRIPTION: Specifies the module configuration, including dependencies and replacements for the test environment.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
module example.com/m
go 1.13
require (
	example.com/a v0.1.0
	example.com/a/x v0.1.0
)
replace (
	example.com/a v0.1.0 => ./a
	example.com/a/x v0.1.0 => ./ax
)
```

----------------------------------------

TITLE: Testing Byte Fuzzing in Go
DESCRIPTION: This function tests Go's fuzzing capabilities with byte inputs. It panics when the input is not 0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_14

LANGUAGE: Go
CODE:
```
func FuzzByte(f *testing.F) {
	f.Add(byte(0))
	f.Fuzz(func(t *testing.T, a byte) {
		if a != 0 {
			panic("this input caused a crash!")
		}
	})
}
```

----------------------------------------

TITLE: Bad Package with Malformed Import
DESCRIPTION: This snippet defines the 'bad' package file (bad.go) which contains a malformed import path. It's used to trigger import errors in the tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_info_err.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
package bad

import _ "🐧.example.com/string"
```

----------------------------------------

TITLE: Package B Test File with Internal Dependency
DESCRIPTION: A test file for package 'b' that imports package 'a'. Used to test how test dependencies propagate through imported packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_test.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package b_test

import _ "m/a"
```

----------------------------------------

TITLE: Defining Golang Toolchain Module Path with Version
DESCRIPTION: Specifies the full module path for a test Golang toolchain with version 1.999testmod for Windows 386 architecture.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-386.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
golang.org/toolchain@v0.0.1-go1.999testmod.windows-386
```

----------------------------------------

TITLE: Testing GOSUMDB Configuration
DESCRIPTION: Tests toolchain behavior with various GOSUMDB configurations including bad URLs and disabled checksum verification.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_net.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
env oldsumdb=$GOSUMDB
env GOSUMDB=$oldsumdb' http://badurl'
go version
! stderr downloading
stdout go1.999testmod
```

----------------------------------------

TITLE: Importing Package from Git Repository
DESCRIPTION: A Go source file that imports a package from the test Git repository within SVN. Used to test cross-repository dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test1-svn-git.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p

import "vcs-test.swtch.com/go/test1-svn-git/git-README-only/pkg"

const _ = pkg.Message
```

----------------------------------------

TITLE: Setting Git Author and Committer Information in Bash
DESCRIPTION: Sets environment variables for Git author and committer information before creating commits.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/retract-pseudo.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GIT_AUTHOR_NAME='Jay Conrod'
env GIT_AUTHOR_EMAIL='jayconrod@google.com'
env GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
env GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL
```

----------------------------------------

TITLE: Test File for Package b - b/b_test.go
DESCRIPTION: Defines a test for package 'b' that imports a test-only dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package main
import "testing"
import _ "test/testdep"
func TestB(*testing.T) {}
```

----------------------------------------

TITLE: Go Module Update Original Configuration
DESCRIPTION: Initial Go module configuration with specific version requirements for quote and sampler packages
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
module m

go 1.16

require (
	rsc.io/quote v1.5.2
	rsc.io/sampler v1.2.1 // older version than in build list
)
```

----------------------------------------

TITLE: Testing Module Import and Error Detection
DESCRIPTION: Checks if the module import produces an error when using an older Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goline_order.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
! go list -deps -tags usem1
cmp go.mod go.mod.orig
stderr '^go: module ./m1 requires go >= 1.21.2 \(running go 1.21.1\)$'
```

----------------------------------------

TITLE: Module Configuration with Dependency Exclusion
DESCRIPTION: Go module configuration file specifying the module name, Go version requirement, and excluding a specific version of rsc.io/quote package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-exclude.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/cmd

go 1.16

exclude rsc.io/quote v1.5.2
```

----------------------------------------

TITLE: Build Commands with Gcflags Analysis
DESCRIPTION: Shell commands to build Go package with compiler flags for analyzing inlining and package staleness.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiler_output.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go install -gcflags=-m .
stderr 'can inline main'
go list -gcflags=-m -f '{{.Stale}}' .
stdout 'false'
! stderr 'can inline main'
```

----------------------------------------

TITLE: Defining Go Function in Go
DESCRIPTION: Returns a Go programming language proverb by calling GoV2() from an imported module. This function is part of the quote collection package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
// Go returns a Go proverb.
func Go() string {
	return quote.GoV2()
}
```

----------------------------------------

TITLE: Simple Go Package Implementation
DESCRIPTION: A basic Go package implementation with a single exported function F() that doesn't take any parameters and doesn't return any values.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo124_v0.0.1.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p

func F() {}
```

----------------------------------------

TITLE: Implementing Hello World in Go
DESCRIPTION: A minimal Go program that prints "hello world". This file is used as a test subject for the GOPATH validation tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_paths.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

func main() {
	println("hello world")
}
```

----------------------------------------

TITLE: Testing Go Get Help Output
DESCRIPTION: Checks the help documentation for the go get command, ensuring it shows usage information and module version details
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/help.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
go help get
stdout 'usage: go get'
stdout 'specific module versions'
```

----------------------------------------

TITLE: Go Module Checksum
DESCRIPTION: go.sum file containing checksums for rsc.io/quote v1.0.0
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
rsc.io/quote v1.0.0 h1:kQ3IZQzPTiDJxSZI98YaWgxFEhlNdYASHvh+MplbViw=
rsc.io/quote v1.0.0/go.mod h1:v83Ri/njykPcgJltBc/gEkJTmjTsNgtO1Y7vyIK1CQA=
```

----------------------------------------

TITLE: Testing Allowed Internal Package Import in Go
DESCRIPTION: A Go file that imports internal packages from its own module, which is allowed by Go's access control rules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_internal.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main
import _ "m/internal"
import _ "m/internal/z"
func main() {}
```

----------------------------------------

TITLE: Main Package Test Implementation (p_test.go)
DESCRIPTION: Test file for package p that imports p1 using relative path and compares function outputs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_relative_cmdline.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p

import (
	"./p1"

	"testing"
)

func TestF(t *testing.T) {
	if F() != p1.F() {
		t.Fatal(F())
	}
}
```

----------------------------------------

TITLE: Go Package Declaration
DESCRIPTION: Declares an empty package named 'c'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_c_v1.1.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package c
```

----------------------------------------

TITLE: Listing Standard Library Packages with Vendored Paths in Shell
DESCRIPTION: This shell command uses 'go list' to report vendored packages as standard library components, ensuring dependencies follow vendored paths. No external dependencies are required as it's a native Go tool invocation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_std.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list -f '{{if .Standard}}{{.ImportPath}}{{end}}' std cmd
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines the Go module configuration specifying module name 'm' and Go version requirement 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_exe.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: This go.mod file defines the module 'm' and specifies Go version 1.16 as the minimum required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_n_cgo.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Testing Go Fuzzing for Non-Recoverable Errors
DESCRIPTION: Tests that verify the behavior when encountering non-recoverable errors during fuzzing. This ensures that minimization is skipped appropriately when the fuzzing process terminates unexpectedly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize.txt#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
# Test that minimization doesn't run for non-recoverable errors.
! go test -fuzz=FuzzMinimizerNonrecoverable -run=FuzzMinimizerNonrecoverable -fuzztime=10000x .
! stdout '^ok'
! stdout 'minimizing'
stdout -count=1 '^\s+fuzzing process hung or terminated unexpectedly: exit status 99'
stdout FAIL

# Check that re-running the value causes a crash.
! go test -run=FuzzMinimizerNonrecoverable .
rm testdata
```

----------------------------------------

TITLE: Executing Go List with Newer Go Version
DESCRIPTION: Sets the TESTGO_VERSION environment variable to 1.21.0 and runs 'go list' command, demonstrating behavior with a newer Go version without updating the go line.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/old_tidy_toolchain.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
env TESTGO_VERSION=1.21.0
go list
```

----------------------------------------

TITLE: Go 1.20 Workspace Configuration File
DESCRIPTION: A Go 1.20 workspace configuration file that specifies the workspace version and includes the current directory and q subdirectory in the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_default.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
go 1.20
use .
use ./q
```

----------------------------------------

TITLE: Go Workspace Configuration File
DESCRIPTION: Workspace configuration file specifying Go version 1.18 and including module 'a'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_gowork.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go 1.18

use ./a
```

----------------------------------------

TITLE: Validating GOEXPERIMENT Values
DESCRIPTION: This snippet tests the validation of GOEXPERIMENT values when using 'go env -w'. It checks for invalid experiment names and demonstrates setting a valid experiment.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
# go env -w checks validity of GOEXPERIMENT
env GOEXPERIMENT=
! go env -w GOEXPERIMENT=badexp
stderr 'unknown GOEXPERIMENT badexp'
go env -w GOEXPERIMENT=fieldtrack
```

----------------------------------------

TITLE: Unprintable Module Implementation
DESCRIPTION: Implements a simple package for the 'unprintable' module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
package unprintable
```

----------------------------------------

TITLE: Adding Commits to v2 Branch in Mercurial
DESCRIPTION: Updates to the v2 branch in Mercurial and adds a dummy commit with specific author and date information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
hg update -C v2
hg branch v2
unquote ''
cp stdout dummy
hg add dummy
hg commit --user 'Russ Cox <rsc@golang.org>' --date '2018-06-27T12:15:24-04:00' -m 'dummy'
```

----------------------------------------

TITLE: Package with Indirect Deprecated Import - b.go
DESCRIPTION: Defines a package that indirectly imports a deprecated module through a local package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecated.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package b

import _ "local/use"
```

----------------------------------------

TITLE: Attempting Invalid Replacement of gopkg.in Module in Go
DESCRIPTION: This snippet demonstrates an invalid replacement attempt where a mismatched gopkg.in path tries to replace a different major version, resulting in an error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
cd ../3-to-gomod-4
! go list -m gopkg.in/src-d/go-git.v3
stderr '^go: gopkg\.in/src-d/go-git\.v3@v3\.2\.0 \(replaced by gopkg\.in/src-d/go-git\.v3@v3\.0\.0-20190801152248-0d1a009cbb60\): version "v3\.0\.0-20190801152248-0d1a009cbb60" invalid: go\.mod has non-\.\.\.\.\.v3 module path "gopkg\.in/src-d/go-git\.v4" at revision 0d1a009cbb60$'
```

----------------------------------------

TITLE: bar/go.mod file content
DESCRIPTION: The go.mod file for the 'bar' module, defining the module name.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_only_dirs.txt#_snippet_6

LANGUAGE: Go
CODE:
```
-- bar/go.mod --
module bar
```

----------------------------------------

TITLE: Defining Methods and Types for archive/zip Package in Go
DESCRIPTION: This snippet defines a SetComment method for the Writer type and adds fields to the FileHeader struct in the archive/zip package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
method (*Writer) SetComment(string) error

type FileHeader struct {
    Modified time.Time
    NonUTF8 bool
}
```

----------------------------------------

TITLE: Attempting Go Module Download with Excessive Redirects
DESCRIPTION: Tries to download a specific version of the 'rsc.io/quote' module, expecting it to fail due to too many redirects (11 configured in the proxy).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_too_many_redirects.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
! go mod download rsc.io/quote@v1.2.0
stderr 'stopped after 10 redirects'
```

----------------------------------------

TITLE: Nested module definition
DESCRIPTION: Module definition for 'example.com/m/nested', which has a path that appears to be inside the main module but is actually a separate module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
module example.com/m/nested
```

----------------------------------------

TITLE: Module D2 Configuration
DESCRIPTION: Go.mod file for the second replacement of module 'd' (v0.2.0).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
module example.com/d
```

----------------------------------------

TITLE: Implementing Quote Functions in Go
DESCRIPTION: Defines four functions (Hello, Glass, Go, Opt) that return different quotes or sayings. It imports and uses the 'rsc.io/sampler' package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.2.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

import "rsc.io/sampler"

// Hello returns a greeting.
func Hello() string {
	return sampler.Hello()
}

// Glass returns a useful phrase for world travelers.
func Glass() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return "I can eat glass and it doesn't hurt me."
}

// Go returns a Go proverb.
func Go() string {
	return "Don't communicate by sharing memory, share memory by communicating."
}

// Opt returns an optimization truth.
func Opt() string {
	// Wisdom from ken.
	return "If a program is too slow, it must have a loop."
}
```

----------------------------------------

TITLE: Testing go mod vendor command for repairing vendor/modules.txt
DESCRIPTION: Shows how 'go mod vendor' can repair vendor/modules.txt to make -mod=vendor work again in Go 1.14.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
env GOFLAGS=

go mod edit -go=1.14
go mod vendor

go list -f {{.Dir}} -tags tools -e all
stdout '^'$WORK'[/\\]auto$'
stdout '^'$WORK'[/\\]auto[/\\]vendor[/\\]example.com[/\\]printversion$'
stdout '^'$WORK'[/\\]auto[/\\]vendor[/\\]example.com[/\\]version$'

! go list -m all
stderr 'go: can''t compute ''all'' using the vendor directory\n\t(Use -mod=mod or -mod=readonly to bypass.)'

! go list -m -f '{{.Dir}}' all
stderr 'go: can''t compute ''all'' using the vendor directory\n\t(Use -mod=mod or -mod=readonly to bypass.)'
```

----------------------------------------

TITLE: Darwin ARM64 System Call Constants
DESCRIPTION: System call numbers for basic operations like file access, process management, and networking on Darwin ARM64.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_99

LANGUAGE: Go
CODE:
```
const SYS_ACCEPT = 30
const SYS_ACCESS = 33
const SYS_CHDIR = 12
const SYS_CHMOD = 15
const SYS_CHOWN = 16
const SYS_CLOSE = 6
const SYS_DUP = 41
const SYS_EXIT = 1
const SYS_FORK = 2
const SYS_FSTAT = 189
```

----------------------------------------

TITLE: Test package that imports unsafe
DESCRIPTION: A Go package that imports the built-in 'unsafe' package, used to test special package imports with the list command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package useunsafe
import _ "unsafe"
```

----------------------------------------

TITLE: Dependency Module Definition
DESCRIPTION: Secondary go.mod file for the replaced module 'example.com/r' requiring rsc.io/quote v1.5.0
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_old.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/r

require rsc.io/quote v1.5.0
```

----------------------------------------

TITLE: Setting Go Module Environment Variables
DESCRIPTION: Environment configuration for Go modules with GO111MODULE enabled and direct GOPROXY setting.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_git_export_subst.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
env GO111MODULE=on
env GOPROXY=direct
```

----------------------------------------

TITLE: Dependency Usage Implementation
DESCRIPTION: Go source file implementing package that uses a direct patch dependency through import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.0.1.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package usedepofdirectpatch

import _ "patch.example.com/depofdirectpatch"
```

----------------------------------------

TITLE: V1 Package in Nest Vendor
DESCRIPTION: Package defining v1 constant in the nest/vendor directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_complex.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package v1

const ComplexNestVendorV1 = true
```

----------------------------------------

TITLE: Defining an Empty Go Package - Go
DESCRIPTION: Declares the 'empty' package in Go with no implementation or exported symbols. This file serves as a placeholder to maintain package structure or satisfy build/tooling requirements. It requires no dependencies and does not provide any functionality. It is commonly found in Go projects to ensure a package directory compiles, even in the absence of logic.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-long.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package empty
```

----------------------------------------

TITLE: System Call Package Constants and Functions
DESCRIPTION: Platform-specific syscall constants and functions for various operating systems and architectures. Includes time conversion functions and error constants for Windows and OpenBSD.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_17

LANGUAGE: go
CODE:
```
// syscall platform-specific functions and constants
// Linux ARM
func TimevalToNsec(Timeval) int64 // linux-arm and linux-arm-cgo

// OpenBSD
const SYS_KILL = 122 // openbsd-386, openbsd-386-cgo, openbsd-amd64, openbsd-amd64-cgo

// Windows
const ERROR_DIR_NOT_EMPTY = 145 // windows-386, windows-amd64
const ERROR_DIR_NOT_EMPTY Errno // windows-386, windows-amd64
```

----------------------------------------

TITLE: Basic Go Package Source File
DESCRIPTION: A minimal Go source file defining a package 'mypkg' without any functions or types. Used as part of the staleness detection test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_rebuild_removed.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package mypkg
```

----------------------------------------

TITLE: Querying Latest Module Version Without Retraction using Go List
DESCRIPTION: Tests the selection of a previously released version for a module when querying the latest version without considering self-retractions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
# 'go list -m mod@latest' selects a previous release version, not self-retracted latest.\ngo list -m -f '{{.Version}}{{with .Retracted}} retracted{{end}}' example.com/retract/self/prev@latest\nstdout '^v1.1.0$'
```

----------------------------------------

TITLE: Main Go File with Multiple Imports
DESCRIPTION: Defines a main package that imports multiple modules to test the module resolution and replacement rules defined in go.mod.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_import.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package main
import (
	_ "example.com/a/b"
	_ "example.com/x/v3"
	_ "example.com/y/z/w"
	_ "example.com/v"
	_ "example.com/i"
)
func main() {}
```

----------------------------------------

TITLE: Secondary Go Module Definition with Dependencies
DESCRIPTION: Alternative go.mod file with explicit quoted requirements for rsc.io/sampler and rsc.io/quote packages
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_quote.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module x
require (
	"rsc.io/sampler" v1.3.0
	"rsc.io/quote" v1.5.2
)
```

----------------------------------------

TITLE: Module B Checksum File
DESCRIPTION: Checksum entries for Module B dependencies in go.sum format
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_sum.txt#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
rsc.io/quote v1.0.0 h1:kQ3IZQzPTiDJxSZI98YaWgxFEhlNdYASHvh+MplbViw=
rsc.io/quote v1.0.0/go.mod h1:v83Ri/njykPcgJltBc/gEkJTmjTsNgtO1Y7vyIK1CQA=
```

----------------------------------------

TITLE: Testing Production Toolchain Download
DESCRIPTION: Tests downloading and verification of an actual Go toolchain version from official servers with specific OS and architecture constraints.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_net.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
env GOPROXY=
[go-builder] env GOSUMDB=
[!go-builder] env GOSUMDB=sum.golang.org
env GOTOOLCHAIN=go1.20.1
env PATH=
env path=
go version
stderr '^go: downloading go1.20.1 '
stdout go1.20.1
```

----------------------------------------

TITLE: Package Import Collision Test
DESCRIPTION: Go source file demonstrating case-sensitive package import collision by importing same package with different case paths
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_case_collision.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package p
import (
	_ "example/a/pkg"
	_ "example/a/Pkg"
)
```

----------------------------------------

TITLE: Uppercase Module Definition
DESCRIPTION: A simple go.mod file that defines the uppercase module example.com/Foo.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_collision.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module example.com/Foo
```

----------------------------------------

TITLE: Testing Package Resolution Outside Main Module
DESCRIPTION: Tests error message for a package found in the filesystem but not part of the main module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
# golang.org/issue/30590: if a package is found in the filesystem
# but is not in the main module, the error message should not say
# "cannot find module providing package", and we shouldn't try
# to find a module providing the package.
! go list ./othermodule
! stderr 'cannot find module providing package'
stderr '^main module \(example\.com\) does not contain package example.com/othermodule$'
```

----------------------------------------

TITLE: Go Module with Deprecation Notice
DESCRIPTION: Shows a go.mod file with a deprecation notice in the form of a comment before the module directive. This indicates that the module is deprecated and provides additional information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_15

LANGUAGE: go
CODE:
```
// Deprecated: and the new one is not ready yet
module m
```

----------------------------------------

TITLE: Test file in onlytest package
DESCRIPTION: This snippet shows a test file in the onlytest package, containing a single empty test function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_10

LANGUAGE: Go
CODE:
```
package p

import "testing"

func TestMe(*testing.T) {}
```

----------------------------------------

TITLE: Error Package Example
DESCRIPTION: Package demonstrating an intentional compilation error with undefined reference.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package err

var X = DoesNotCompile
```

----------------------------------------

TITLE: Go Greeting Function Implementation
DESCRIPTION: Implements a simple Hello function in Go that returns a greeting string
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitreposubdir.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package greeter

func Hello() string {
	return "hello, world"
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module with a dependency on an incompatible v2 version of split-incompatible package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_issue41113.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module golang.org/issue/41113

go 1.16

require example.com/split-incompatible v2.1.0-pre+incompatible
```

----------------------------------------

TITLE: Testing Unsigned Integer Fuzzing in Go
DESCRIPTION: This fuzz test function demonstrates Go's fuzzing capabilities with unsigned integer inputs. It panics when the input is not 0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_11

LANGUAGE: Go
CODE:
```
func FuzzUint(f *testing.F) {
	f.Add(uint(0))
	f.Fuzz(func(t *testing.T, a uint) {
		if a != 0 {
			panic("this input caused a crash!")
		}
	})
}
```

----------------------------------------

TITLE: Basic Module Import in Go
DESCRIPTION: A simple Go file importing module 'a'. This demonstrates basic import functionality for modules defined in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package m

import _ "a"
```

----------------------------------------

TITLE: Dummy Quote Module
DESCRIPTION: Defines a dummy implementation of the rsc.io/quote module for testing replacement scenarios.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
module rsc.io/quote

go 1.16
```

LANGUAGE: go
CODE:
```
package quote
```

----------------------------------------

TITLE: Module Definition and Configuration
DESCRIPTION: Defines the Go module 'example' and specifies the Go version as 1.20. There are no external dependencies or specific configurations beyond the module name and Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_var_init_order.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example

go 1.20

```

----------------------------------------

TITLE: Replacing gopkg.in v4 Module with v0 Pseudo-version in Go
DESCRIPTION: This snippet shows the special case of replacing a gopkg.in v4 module with a v0 pseudo-version, which is still accepted for backwards compatibility.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
cd ../4-to-0
go list -m gopkg.in/src-d/go-git.v4
```

----------------------------------------

TITLE: Package A with Import
DESCRIPTION: Go source file for package 'a' that imports the 'example.com/dep' package as a blank import, establishing a dependency relationship for testing the flag patterns.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_perpkgflag.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package a

import _ "example.com/dep"
```

----------------------------------------

TITLE: Toolow Package Import
DESCRIPTION: Package file importing an older package version
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_indirect.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package toolow

import _ "example.net/indirect/oldpkg"
```

----------------------------------------

TITLE: Go Module with Unspecified Version
DESCRIPTION: Defines a Go module without version specification in go.mod, including the same foo package structure and external dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_buildmod_reason_issue67587.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package foo

import _ "github.com/foo/bar"
```

LANGUAGE: go
CODE:
```
module example.com
```

LANGUAGE: go
CODE:
```
package bar
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: This go.mod file defines the module for the project. It's a minimal module definition without any dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed_fmt.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module m
```

----------------------------------------

TITLE: Defining Minimal Go Module Configuration
DESCRIPTION: This `go.mod` file defines a simple Go module named 'x'. It serves as the necessary module configuration file when `GO111MODULE=on` is active for the `go fmt` test case.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gofmt_invalid.txt#2025-04-22_snippet_1

LANGUAGE: gomod
CODE:
```
module x
```

----------------------------------------

TITLE: Defining Dependent Go Module
DESCRIPTION: This snippet shows the go.mod file for the 'example.net/x' module, which is a dependency of the main module. It specifies Go 1.16 as the version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_gomod.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module example.net/x

go 1.16
```

----------------------------------------

TITLE: Testing vendor/modules.txt Generation with Indirect Dependencies in Go Modules
DESCRIPTION: This script tests that Go 1.14+ correctly generates a vendor/modules.txt file when running 'go mod vendor', even when the only dependencies in go.mod are marked as indirect. It sets the GO111MODULE environment variable, runs the vendor command, and compares the output to an expected result.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused_only.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on

go mod vendor
cmp go1.14-modules.txt vendor/modules.txt
```

----------------------------------------

TITLE: Module A v1.0.0 Configuration
DESCRIPTION: Go module configuration for example.com/a v1.0.0
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/a
go 1.22

require example.com/b v1.0.0
```

----------------------------------------

TITLE: Testing Quote Functions in Go
DESCRIPTION: Contains test functions for all the quote package functions. Sets up the environment for testing by setting LC_ALL to 'en', and verifies that each function returns the expected quote string. Includes tests for Hello(), Glass(), Go(), and Opt() functions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180628003336-dd9747d19b04.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package quote

import (
	"os"
	"testing"
)

func init() {
	os.Setenv("LC_ALL", "en")
}

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory, share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}

func TestOpt(t *testing.T) {
	opt := "If a program is too slow, it must have a loop."
	if out := Opt(); out != opt {
		t.Errorf("Opt() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Go Comment Heading Format Tests
DESCRIPTION: A series of test cases showing what does and doesn't constitute a valid Go comment heading format, including examples of valid and invalid heading patterns.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/head2.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
Almost a+heading

Don't be a heading

A.b is a heading

A. b is not a heading
```

----------------------------------------

TITLE: Declaring Function Prototypes in Go
DESCRIPTION: Declares 255 function prototypes (t0 to t254) without implementation. These functions are implemented in assembly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/dwarf5_gen_assembly_and_go.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
func t0()
func t1()
// ... (omitted for brevity)
func t253()
func t254()
```

----------------------------------------

TITLE: Conditional Package i Definition
DESCRIPTION: A Go package with build constraints that is used to test FindOnly mode's ability to locate packages regardless of build errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gobuild_import.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
// +build i

package i
```

----------------------------------------

TITLE: Preventing Internal Leakage with Vendor Replacement
DESCRIPTION: Attempts to get and build `./baddep` after setting up the vendor-like replacement for `golang.org/x/internal`. The build (`! go build`) is expected to fail, confirming that the vendored replacement still respects the original internal package boundaries.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_11

LANGUAGE: shell
CODE:
```
go get ./baddep
! go build ./baddep
stderr golang.org[/\\]notx[/\\]useinternal
stderr 'use of internal package golang.org/x/.* not allowed'
```

----------------------------------------

TITLE: Expected Module Graph Output
DESCRIPTION: Expected output from 'go mod graph' command showing module dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_skip_write.txt#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
m go@1.18
m golang.org/x/text@v0.0.0-20170915032832-14c0d48ead0c
m rsc.io/quote@v1.5.2
m rsc.io/sampler@v1.3.0
m rsc.io/testonly@v1.0.0
rsc.io/quote@v1.5.2 rsc.io/sampler@v1.3.0
rsc.io/sampler@v1.3.0 golang.org/x/text@v0.0.0-20170915032832-14c0d48ead0c
```

----------------------------------------

TITLE: X Module Test with Import
DESCRIPTION: A test file for package 'x' that imports module 'w'. This demonstrates test files importing modules that may be only needed for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
package x

import _ "w"
```

----------------------------------------

TITLE: Export Test Variable Definition
DESCRIPTION: Package files defining exported test variables for test consumption.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_list_issue11977.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package tx3

var Exported = true
```

LANGUAGE: go
CODE:
```
package tx2

var Exported = true
```

----------------------------------------

TITLE: Defining Go Toolchain Module Path
DESCRIPTION: Specifies the full module path for a test Go toolchain targeting Linux PowerPC 64-bit.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-ppc64.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
golang.org/toolchain@v0.0.1-go1.999testmod.linux-ppc64
```

----------------------------------------

TITLE: Testing Go PIE buildmode with race detector compatibility
DESCRIPTION: Shell script that tests the Go compiler's ability to build code with both PIE (position-independent executable) mode and race detection enabled. The script checks platform compatibility and verifies execution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pie_race.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# go build -buildmode=pie -race main.go on Darwin should work without errors

[!race] skip 'test requires race detector support'

[!GOOS:darwin] ! go build -buildmode=pie -race
[!GOOS:darwin] stderr '^-buildmode=pie not supported when -race is enabled on '$GOOS'/'$GOARCH'$'
[!GOOS:darwin] stop 'not testing -buildmode=pie -race on platform that does not support it'

go build -buildmode=pie -race bytes
! stderr .

[short] stop 'not linking a binary in -short mode'

go build -buildmode=pie -race main.go
! stderr .
exec ./main
stdout 'Hello, 世界'
```

----------------------------------------

TITLE: Test12 Package Implementation
DESCRIPTION: Package demonstrating vendor directory resolution with v1 and v2 imports, showing preference for sub/vendor over root vendor.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_complex.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package test12

// Check that vendor/v1 is used but vendor/v2 is NOT used (sub/vendor/v2 wins).

import (
	"v1"
	"v2"
)

const x = v1.ComplexNestVendorV1
const y = v2.ComplexNestSubVendorV2
```

----------------------------------------

TITLE: External Test File
DESCRIPTION: External test file (package main_test) verifying the vendored strings package message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_import.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main_test

import (
	"strings" // really ../vendor/strings
	"testing"
)

func TestMsgExternal(t *testing.T) {
	if strings.Msg != "hello, world" {
		t.Fatalf("unexpected msg: %v", strings.Msg)
	}
}
```

----------------------------------------

TITLE: Defining Network Control Constants in Go for Darwin ARM64 CGO
DESCRIPTION: This snippet defines constants related to network control operations for the syscall package on Darwin ARM64 with CGO. These constants are used for system-level network configuration and management.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_140

LANGUAGE: Go
CODE:
```
const CTL_MAXNAME = 12
const CTL_NET = 4
```

----------------------------------------

TITLE: Storing Module Version Information - JSON
DESCRIPTION: This snippet provides supplementary version metadata in JSON format, indicating that version 'v1.0.0-block' is relevant for this module. It typically accompanies the module on proxy servers or registries, allowing tools or consumers to query information without processing Go source code. The object is simple, containing just the 'Version' property, with its main constraint being strict adherence to JSON structure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-block.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{\"Version\":\"v1.0.0-block\"}
```

----------------------------------------

TITLE: Module Version Information in .info File
DESCRIPTION: JSON data storing version information for the module, defining it as version 'v1.0.0'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile3_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v1.0.0"}
```

----------------------------------------

TITLE: Module B Implementation
DESCRIPTION: Implementation of module 'b' that imports and uses package 'q'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_relevant_dependency.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package b

import (
	"example.com/q"
)

func Foo() {
	q.Q()
}
```

----------------------------------------

TITLE: Localized Text Testing in Go
DESCRIPTION: Test cases for verifying correct language-based text selection and translation lookup functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.3.1.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
func TestHello(t *testing.T) {
	for _, tt := range helloTests {
		text := Hello(tt.prefs...)
		if text != tt.text {
			t.Errorf("Hello(%v) = %q, want %q", tt.prefs, text, tt.text)
		}
	}
}
```

----------------------------------------

TITLE: Testing Fuzzing with Profiling Flag Incompatibility Shell Tests
DESCRIPTION: A series of shell commands that verify the Go test command rejects combining the -fuzz flag with various profiling flags. Each command tests a different profiling flag and checks for the appropriate error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_profile_flags.txt#2025-04-22_snippet_0

LANGUAGE: shellscript
CODE:
```
[!fuzz] skip

! go test -fuzz=FuzzTrivial -coverprofile=prof
! stdout .
stderr '^cannot use -coverprofile flag with -fuzz flag$'

! go test -fuzz=FuzzTrivial -blockprofile=prof
! stdout .
stderr '^cannot use -blockprofile flag with -fuzz flag$'

! go test -fuzz=FuzzTrivial -cpuprofile=prof
! stdout .
stderr '^cannot use -cpuprofile flag with -fuzz flag$'

! go test -fuzz=FuzzTrivial -memprofile=prof
! stdout .
stderr '^cannot use -memprofile flag with -fuzz flag$'

! go test -fuzz=FuzzTrivial -mutexprofile=prof
! stdout .
stderr '^cannot use -mutexprofile flag with -fuzz flag$'

! go test -fuzz=FuzzTrivial -trace=prof
! stdout .
stderr '^cannot use -trace flag with -fuzz flag$'
```

----------------------------------------

TITLE: Defining a Go Package with Import of Non-Existent Package
DESCRIPTION: This Go snippet defines a package that attempts to import a non-existent package. It is used to generate dependency errors for testing purposes. This snippet requires a Go development environment and access to the `x.go` file for execution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cmd_import_error.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
-- x.go --
package x

import _ "cmd/unknown"
```

----------------------------------------

TITLE: Additional Go Command Source File
DESCRIPTION: An auxiliary Go source file for the executable package. This file is used to test staleness when removing active source files from an executable package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_rebuild_removed.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package main
```

----------------------------------------

TITLE: Testing Go list TestImports field
DESCRIPTION: Verifies that 'go list' correctly reports imports from _test.go files in the TestImports field.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go list -f '{{.TestImports}}'
stdout net/http # from .TestImports
```

----------------------------------------

TITLE: Testing Complex Word Boundary Negation Patterns in Go Regexps
DESCRIPTION: Tests complex regular expressions using \B to match non-word boundaries combined with grouping and alternation. These patterns check how \B behaves with different character classes and specific words.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_6

LANGUAGE: regexp
CODE:
```
\B(foo|bar|[A-Z])
```

LANGUAGE: regexp
CODE:
```
^(?:\B(foo|bar|[A-Z]))$
```

LANGUAGE: regexp
CODE:
```
^(?:\B(foo|bar|[A-Z]))
```

LANGUAGE: regexp
CODE:
```
(?:\B(foo|bar|[A-Z]))$
```

----------------------------------------

TITLE: Forcing CGO_ENABLED On in Go
DESCRIPTION: This snippet shows how to force CGO_ENABLED to 1 by explicitly setting the environment variable, regardless of the CC setting. It clears CC and sets CGO_ENABLED to 1, then verifies the result.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/autocgo.txt#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
env CC=
env CGO_ENABLED=1
go env CGO_ENABLED
stdout 1
```

----------------------------------------

TITLE: Testing Non-Word Boundary Regex Patterns in Go
DESCRIPTION: Test cases for regular expressions using non-word boundary patterns (\B) with various strings. These tests verify the behavior of non-word boundary assertions in different contexts.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
"\\Bfoo\\B"
```

----------------------------------------

TITLE: Defining Module for Local Replacement
DESCRIPTION: Specifies the module definition for the 'p' package, which is used as a local replacement in the main module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc_path.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module example.com/p

go 1.19
```

----------------------------------------

TITLE: Testing Go Command Behavior with Workspace Modules
DESCRIPTION: This snippet includes multiple test cases for the Go command, checking its behavior when trying to access modules not listed in go.work. It tests various scenarios including listing, installing, and running packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_module_not_in_go_work.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
! go list ./...
stderr 'pattern ./...: directory prefix . does not contain modules listed in go.work or their selected dependencies'

! go list ./a/c
stderr 'directory a[\/]c is contained in a module that is not one of the workspace modules listed in go.work. You can add the module to the workspace using:\n\tgo work use a'

! go install ./a/c
stderr 'directory a[\/]c is contained in a module that is not one of the workspace modules listed in go.work. You can add the module to the workspace using:\n\tgo work use a'

cd a/c
! go run .
stderr 'current directory is contained in a module that is not one of the workspace modules listed in go.work. You can add the module to the workspace using:\n\tgo work use ..'

cd ../..
! go run .
stderr 'current directory outside modules listed in go.work or their selected dependencies'
```

----------------------------------------

TITLE: Configuring Module 'c' (Version 1)
DESCRIPTION: This go.mod file defines module 'c'. It represents one specific version of the 'c' module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
-- c1/go.mod --
module c

go 1.17
```

----------------------------------------

TITLE: Go Module Declaration
DESCRIPTION: Defines a Go module with an insecure import path and specifies Go version 1.13 as requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/insecurerepo.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/insecure/go/insecure

go 1.13
```

----------------------------------------

TITLE: Triggering a nil panic in Go
DESCRIPTION: A minimal Go program that demonstrates how to trigger a panic with nil as the argument. This showcases Go's panic mechanism with an explicit nil value.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_panicnil_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

func main() {
	panic(nil)
}
```

----------------------------------------

TITLE: Verifying Panicking Test Output in Go
DESCRIPTION: This snippet defines a test that panics. It's used to verify how 'go test -json' reports tests that panic during execution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_panic_exit.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package panic_test

import "testing"

func TestPanic(t *testing.T) {
	panic("oh no")
}
```

----------------------------------------

TITLE: Go Work Configuration File
DESCRIPTION: Initial go.work file configuration specifying Go version 1.8 and current directory usage.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_edit_toolchain.txt#2025-04-22_snippet_1

LANGUAGE: gomod
CODE:
```
go 1.8
use .
```

----------------------------------------

TITLE: Invalid String Type Redefinition in Go
DESCRIPTION: Go code attempting to redefine the built-in string type as []int, which demonstrates type aliasing syntax but would cause compilation errors
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_string_alias.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

type string = []int

func main() {}
```

----------------------------------------

TITLE: Submodule Definition
DESCRIPTION: Defines a submodule 'example.com/m/sub' that requires the main module as a dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_install_submodule.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com/m/sub

go 1.18

require example.com/m v1.0.0
```

----------------------------------------

TITLE: Standalone Go Test File
DESCRIPTION: This Go file contains a minimal test setup with an empty test function. It's used to demonstrate running tests with no matches.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_tests.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package standalone_test

import "testing"

func Test(t *testing.T) {
}
```

----------------------------------------

TITLE: Running Go Test with Example Line Endings
DESCRIPTION: Shell command to run the Go test file that verifies CRLF handling in example outputs (issue #51269).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_crlf_example.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test x_test.go
```

----------------------------------------

TITLE: Main Package Test Implementation
DESCRIPTION: Test file importing and using the main package, demonstrating proper package import behavior in test context.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main_archive.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main_test

import (
	. "main_test"
	"testing"
)

func Test1(t *testing.T) {
	F()
}
```

----------------------------------------

TITLE: Declaring standard file descriptors in syscall package for NetBSD ARM64
DESCRIPTION: Declaration of standard file descriptors (stdin, stdout, stderr) as variables in the syscall package for NetBSD ARM64 architecture.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_171

LANGUAGE: go
CODE:
```
var Stdin int
var Stdout int
var Stderr int
```

----------------------------------------

TITLE: Setting Test Environment Variables for Go Version Testing
DESCRIPTION: Sets environment variables to control the Go version used for testing and to enable version switching behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_modcmds.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env TESTGO_VERSION=go1.21.0
env TESTGO_VERSION_SWITCH=switch
```

----------------------------------------

TITLE: Expected Git Log Output
DESCRIPTION: Contains the expected output of the git log command showing two commits in the repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/insecurerepo.txt#2025-04-22_snippet_5

LANGUAGE: text
CODE:
```
6fecd21 (HEAD -> master) main: add Go source file
d1a15cd all: initialize module
```

----------------------------------------

TITLE: Git Tree Object References
DESCRIPTION: File containing Git tree object hashes for verification purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_git_missing_tree.txt#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
ac724c6e5e3f86815e057ff58a639cab613abf28
66400c89b45cc96da36d232844dbf9ea5daa6bcf
```

----------------------------------------

TITLE: Test Dependency Package with Import - testdep/testdep.go
DESCRIPTION: Defines a test-only dependency package that imports another test dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
package testdep
import _ "test/testdep2"
```

----------------------------------------

TITLE: Coverage Profiling for Compiler
DESCRIPTION: Commands for building and running the compiler with coverage instrumentation
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/README.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
$ go install -cover -coverpkg=cmd/compile/... cmd/compile
$ mkdir /tmp/coverdir
$ GOCOVERDIR=/tmp/coverdir go test [...]
$ go tool covdata textfmt -i=/tmp/coverdir -o coverage.out
$ go tool cover -html coverage.out
```

----------------------------------------

TITLE: Internal Package Implementation
DESCRIPTION: The implementation of the internal package with a constant 'Hacks' that is accessed by the test file. This is the package that will be subject to Go's visibility rules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_files.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package internal
const Hacks = true
```

----------------------------------------

TITLE: Implementing Localized Greeting Function in Go
DESCRIPTION: This function returns a localized greeting based on provided language preferences or default preferences if none are provided.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.0.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
func Hello(prefs ...language.Tag) string {
	if len(prefs) == 0 {
		prefs = DefaultUserPrefs()
	}
	return hello.find(prefs)
}
```

----------------------------------------

TITLE: Declaring Unicode Category Alias Map - Go
DESCRIPTION: Declares a map that stores Unicode category aliases, mapping abbreviated category names to their full forms.
SOURCE: https://github.com/golang/go/blob/master/api/next/70780.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
var CategoryAliases map[string]string
```

----------------------------------------

TITLE: HTML Documentation Links
DESCRIPTION: HTML formatted documentation links with proper anchor tags and href attributes
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist.txt#2025-04-22_snippet_2

LANGUAGE: html
CODE:
```
<p>Did you know?
<ul>
<li><a href="https://pkg.go.dev/encoding/json#Marshal">encoding/json.Marshal</a> is a doc link. So is <a href="https://pkg.go.dev/encoding/json#Unmarshal">encoding/json.Unmarshal</a>.
</ul>
```

----------------------------------------

TITLE: Go Executable Shell Script
DESCRIPTION: A simple shell script that serves as the 'go' executable, which prints a version identifier message when run.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-arm64.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
#!/bin/sh
echo go1.999testmod here!
```

----------------------------------------

TITLE: Minimal Go Benchmark Test Implementation
DESCRIPTION: Basic implementation of a benchmark test function in Go using the testing package. Provides the minimal structure required for a valid benchmark.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_benchmarks.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package standalone_benchmark

import "testing"

func Benchmark(b *testing.B) {
}
```

----------------------------------------

TITLE: Defining gen.go file content
DESCRIPTION: Contains a Go package with a generate directive to exclude a specific module version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_16

LANGUAGE: go
CODE:
```
//go:generate go mod edit -exclude example.com/exclude@v1.0.0

package main
```

----------------------------------------

TITLE: Implementing Gofmt Command Script
DESCRIPTION: A simple shell script that serves as a placeholder for the gofmt command, indicating that it's not actually used.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-386.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
echo i am unused
```

----------------------------------------

TITLE: Checking error for missing directory
DESCRIPTION: Uses 'go list' to check the error message for a non-existent directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_empty_err.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
go list -e -f {{.Error}} ./missing
stdout 'stat '$WORK'[/\\]missing: directory not found'
```

----------------------------------------

TITLE: Implementing Module 'n' Functionality
DESCRIPTION: This Go file implements the functionality for module 'n'. It imports and uses the 'example.com/dep' package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict_override.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package n

import "example.com/dep"

func F() {
	dep.G()
}
```

----------------------------------------

TITLE: Sample Go Package Importing Quote Module
DESCRIPTION: A simple Go package that imports rsc.io/quote, used for testing direct dependencies in the module system.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
package x
import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Defining Module Dependencies in Go
DESCRIPTION: This go.mod file for example.net/a module specifies its Go version and a dependency on example.net/b v0.2.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
module example.net/a

go 1.17

require example.net/b v0.2.0
```

----------------------------------------

TITLE: Defining Go Module for README Package
DESCRIPTION: This snippet defines a Go module named 'regexp/testdata/README'. It demonstrates how to specify a module name in a go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/src_file.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module regexp/testdata/README
```

----------------------------------------

TITLE: Verifying Git Commit History
DESCRIPTION: Displays the commit log in a condensed format and compares it with an expected output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/commit-after-tag.txt#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
git log --oneline --decorate=short
cmp stdout .git-log
```

----------------------------------------

TITLE: Importing 'all' Meta-Package in Go
DESCRIPTION: This Go file attempts to import the 'all' meta-package, which is not allowed and should result in an error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
package importall

import _ "all"
```

----------------------------------------

TITLE: Go Main Package Implementation
DESCRIPTION: This snippet demonstrates the implementation of a Go main package that imports and uses a function from another module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package main

import "example.com/a"

func main() {
	a.HelloFromA()
}
```

----------------------------------------

TITLE: Go Package Source File with Error
DESCRIPTION: A Go source file with a function calling an undefined function 'g()', which will cause a compilation error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_error.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package p

func f() {
	g()
}
```

----------------------------------------

TITLE: Invalid Flag Testing
DESCRIPTION: Series of tests for invalid flag configurations including typos and malformed flags.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goflags.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
env GOFLAGS=-typoflag
env GOFLAGS=-
env GOFLAGS=--
env GOFLAGS=---oops
env GOFLAGS=-=noname
```

----------------------------------------

TITLE: Deeply Nested Package Definition
DESCRIPTION: Go file defining package w inside a deeply nested directory structure, used to test recursive directory traversal behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
package w
```

----------------------------------------

TITLE: Importing 'std' Meta-Package in Go
DESCRIPTION: This Go file attempts to import the 'std' meta-package, which is not allowed and should result in an error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
package importstd

import _ "std"
```

----------------------------------------

TITLE: go.work File with First Listed Error
DESCRIPTION: Contents of go.work.firsterrlisted.txt file, containing multiple unknown godebug flags 'baz'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
godebug baz=1
godebug baz=1


```

----------------------------------------

TITLE: Implementing a Minimal Go Main Package
DESCRIPTION: Creates a minimal main.go file with an empty main function to serve as the entry point of the module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_empty.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Setting Environment Variables for Go Module Testing
DESCRIPTION: Sets the GOTOOLCHAIN to 'local' and GO111MODULE to 'on' for the test environment.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_toolchain.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GOTOOLCHAIN=local
env GO111MODULE=on
```

----------------------------------------

TITLE: Implementing Test Go Command Script for Plan9
DESCRIPTION: A Plan9 rc shell script that simulates the 'go' command by echoing a test version string.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-arm.txt#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
#!/bin/rc
echo go1.999testmod here!
```

----------------------------------------

TITLE: Main Package Using Upgraded Modules
DESCRIPTION: Defines a Go package that imports the upgraded modules for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
package use

import (
	_ "example.com/upgrade"
	_ "rsc.io/quote"
)
```

----------------------------------------

TITLE: Defining Go Module for Missing Package
DESCRIPTION: This snippet shows a go.mod file for a module that intentionally has no Go source files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
module example.net/missing

go 1.15
```

----------------------------------------

TITLE: Go module definition
DESCRIPTION: A minimal go.mod file that defines the module name and Go version requirement for the test project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_cgo.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module m

go 1.14
```

----------------------------------------

TITLE: Configuring Go Module
DESCRIPTION: This snippet defines a minimal Go module configuration. It specifies the module name as 'empty' and sets the Go version to 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_install.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module empty

go 1.16
```

----------------------------------------

TITLE: Defining Main Package in Go
DESCRIPTION: A simple Go file defining the main package. This file is used as part of the test cases for the 'go list' command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_ambiguous_path.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package main
```

----------------------------------------

TITLE: Broken Package with Invalid Embed Pattern
DESCRIPTION: Package demonstrating error handling for invalid embed file patterns.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_embed.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package brokendep

import _ "embed"

//go:embed ../foo.txt
var foo string
```

----------------------------------------

TITLE: Basic Go Package Declaration
DESCRIPTION: This snippet defines a basic Go package named 'quote'. No functionality is implemented, serving mainly as a placeholder for module checks.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_multirepo.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
package quote
```

----------------------------------------

TITLE: Subpackage Definition for Module 'm'
DESCRIPTION: Go file defining package y as a subpackage within module 'm'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package y
```

----------------------------------------

TITLE: Testing Invalid GOEXPERIMENT Values
DESCRIPTION: Verifies that unknown experiment names are rejected with appropriate error message
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_exp.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
env GOEXPERIMENT=bad
! go env GOEXPERIMENT
stderr 'unknown GOEXPERIMENT bad'
```

----------------------------------------

TITLE: Empty Package Declaration for Dependency
DESCRIPTION: This Go file declares an empty package 'n' within the dependency module, used to test the vendoring process.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_issue46867.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package n
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module named github.com/golang/issue65339 with Go 1.20 as the required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_git_missing_tree.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module github.com/golang/issue65339

go 1.20
```

----------------------------------------

TITLE: Importing Package in Go
DESCRIPTION: This snippet demonstrates how to import a package in a Go file, specifically importing rsc.io/quote as a blank import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_indirect.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
package m

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Markdown Input Example with Doc Links
DESCRIPTION: Example showing the difference between valid doc links and escaped bracket text in the input format.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink3.txt#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
[encoding/json.Marshal] is a doc link.

[rot13.Marshal] is not.
```

----------------------------------------

TITLE: Environment Setup for Go Module Testing
DESCRIPTION: Sets up Go environment variables for module testing with direct proxy and disabled sum database
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/reuse_git.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
env GOPROXY=direct
env GOSUMDB=off
```

----------------------------------------

TITLE: Minimal Go Program Implementation
DESCRIPTION: A basic Go program with an empty main function. This serves as the initial code for the repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/mainonly.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Internal Test Export for Dot Import
DESCRIPTION: Defines an internal test file that exports a variable for use in external tests with dot imports.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue11864.txt#2025-04-22_snippet_8

LANGUAGE: Go
CODE:
```
package tx2

var Exported = true
```

----------------------------------------

TITLE: Testing go work sync without go.mod
DESCRIPTION: Tests go work sync functionality after removing go.mod file to ensure command works in absence of module definition file
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_missing_module.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
rm go.mod
go work sync
```

----------------------------------------

TITLE: Defining Go Module for Fuzzing Test
DESCRIPTION: This snippet defines the Go module for the fuzzing test project, specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_dup_cache.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module fuzztest

go 1.17
```

----------------------------------------

TITLE: Module A Main Program
DESCRIPTION: Simple Go program that imports and uses rsc.io/quote package to print a hello message
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sum_mismatch.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"rsc.io/quote"
)

func main() {
	fmt.Println(quote.Hello())
}
```

----------------------------------------

TITLE: External Test with Main Import
DESCRIPTION: External test file (xtest) attempting to import main package, which should fail during testing
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_main.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package p_test

import (
	"testing"
	xmain "x"
)

var _ = xmain.X

func TestFoo(t *testing.T) {}
```

----------------------------------------

TITLE: Formatting Text in Markdown
DESCRIPTION: This snippet shows how to format the text in Markdown, including italics and hyperlinks.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/words.txt#2025-04-22_snippet_2

LANGUAGE: markdown
CODE:
```
This is an *italicword* and a [*linkedword*](https://example.com/linkedword) and Unicöde.
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module declaration specifying the module name 'example' and Go version 1.19.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_goroot.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example

go 1.19
```

----------------------------------------

TITLE: Go Type Definition with Method
DESCRIPTION: Defines a custom type T as an integer and implements a method M() that returns the integer value of T
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_mangle.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package a

type T int

func (t T) M() int {
	return int(t)
}
```

----------------------------------------

TITLE: Forced Rebuild with PGO
DESCRIPTION: Tests that using -a flag forces preprofile to run again
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_pgo.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go build -a -x -pgo=default.pgo lib.go
stderr 'preprofile.*default\.pgo'
```

----------------------------------------

TITLE: Defining Dependency Module 'b' in Go
DESCRIPTION: This go.mod file defines module 'example.net/b' with Go version 1.16, used as a dependency in the test setup.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue48511.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
module example.net/b

go 1.16
```

----------------------------------------

TITLE: Test Package Main Implementation
DESCRIPTION: Simple main package that prints the value of pkg.Text variable, used for testing GOPATH manipulations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cd_gopath_different.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import "my.pkg"

func main() {
	println(pkg.Text)
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: A Go module definition file that specifies the module name 'example.com/y' and sets the Go version to 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cache.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/y

go 1.16
```

----------------------------------------

TITLE: Defining module with vendor import
DESCRIPTION: Defines a module that tries to explicitly import a package from vendor, which should be disallowed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
module importvendor
```

LANGUAGE: go
CODE:
```
package importstd

import _ "vendor/golang.org/x/net/http2/hpack"
```

----------------------------------------

TITLE: Scan Package with Import
DESCRIPTION: Package containing an import statement for the want package and an invalid file with scan errors
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_load_err.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package scan

import _ "m/want"
```

----------------------------------------

TITLE: Go Module File with Initial Dependency
DESCRIPTION: This is the initial go.mod file for the test module, specifying a dependency on rsc.io/quote v1.5.1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_indirect.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
module x
require rsc.io/quote v1.5.1
```

----------------------------------------

TITLE: Testing Go Version Command with GOFLAGS
DESCRIPTION: Ensures that 'go version' works correctly with GOFLAGS environment variable set.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
env GOFLAGS='-m -v'
go version
stdout '^go version'
env GOFLAGS=
```

----------------------------------------

TITLE: Module A v1.0.1 Configuration
DESCRIPTION: Go module configuration for example.com/a v1.0.1 with a dependency note
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
// this module is technically invalid, since the dep example.com/b has a newer go line than this module,
// but we should still be able to handle it.
module example.com/a
go 1.22

require example.com/b v1.0.1
```

----------------------------------------

TITLE: Empty Go Package File
DESCRIPTION: Defines an empty package named 'pkg' without any exported functions or types.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package pkg
```

----------------------------------------

TITLE: Minimal Go Module Definition
DESCRIPTION: A simple Go module file that defines a module named 'x'. This provides the module context for the case sensitivity tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_case.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module x
```

----------------------------------------

TITLE: Setting Environment Variable for Module Formatting
DESCRIPTION: Sets an environment variable MODFMT to format module information, including path and version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_incompatible.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env MODFMT='{{with .Module}}{{.Path}} {{.Version}}{{end}}'
```

----------------------------------------

TITLE: Testing go work sync without modules
DESCRIPTION: Verifies that go work sync command executes successfully when no modules are defined in go.work file
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_missing_module.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go work sync
```

----------------------------------------

TITLE: Go Package Using External Module
DESCRIPTION: This snippet demonstrates a Go package that imports an external module (rsc.io/quote) for side effects only.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_partial.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package use

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Empty Go Package for Syntax Error Test
DESCRIPTION: This snippet defines an empty Go package named 'p'. It's part of the setup for the syntax error testing scenario.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_syntax_error_says_fail.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package p
```

----------------------------------------

TITLE: Module Definition for Dependency 'c'
DESCRIPTION: The `go.mod` file for module `c`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_12

LANGUAGE: gomod
CODE:
```
-- c1/go.mod --
module c

go 1.17
```

----------------------------------------

TITLE: Main Package with Embedded Files
DESCRIPTION: Main package implementation using embedded files from an imported package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_embed.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"

	"example.com/a"
)

func main() {
    fmt.Println(a.Str())
}
```

----------------------------------------

TITLE: Simple Go Package for Build Testing
DESCRIPTION: A minimal Go package file used as a test subject for the 'go build' command in the test script.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_relative_tmpdir.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package a
```

----------------------------------------

TITLE: Writing Go Test with Package Import
DESCRIPTION: This snippet demonstrates writing a Go test file with a package import for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_of_test_dep.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package a

import (
	"testing"

	_ "example.com/b"
)

func TestUsingB(t *testing.T) {
	// …
}
```

----------------------------------------

TITLE: Testing Go Test Command Error Handling and Help Output
DESCRIPTION: This snippet tests the 'go test' command's behavior with invalid flags and the -help flag. It verifies that invalid flags are reported once and that -help shows flag help.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flags.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
! go test -covermode=walrus ./x
stderr -count=1 'invalid value "walrus" for flag -covermode: valid modes are .*$'
stderr '^usage: go test .*$'
stderr '^Run ''go help test'' and ''go help testflag'' for details.$'

go test ./x -args -help
stdout 'usage_message'
```

----------------------------------------

TITLE: Importing Another External Package in Go
DESCRIPTION: This Go file imports an external package from rsc.io/sampler. It shows the use of a different external dependency in the project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_concurrent.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package y

import _ "rsc.io/sampler"
```

----------------------------------------

TITLE: Leaf Dependency Package - dep3/dep3.go
DESCRIPTION: Defines a leaf dependency package that is imported by multiple packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
package dep3
```

----------------------------------------

TITLE: Go Source File with Import
DESCRIPTION: Go source file containing a blank import of an indirect dependency
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package direct

import _ "patch.example.com/indirect"
```

----------------------------------------

TITLE: Overlay Function Definition
DESCRIPTION: Go file containing function f definition in package m.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_overlay.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package m

func f() {
}
```

----------------------------------------

TITLE: Formatted Go 1.20 Module with Exclude Block
DESCRIPTION: Properly formatted go.mod file for Go 1.20 showing standard version sorting in exclude block.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_exclude_go121.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module x.x/y/z

go 1.20

exclude (
	x.1 v1.10.0
	x.1 v1.11.0
	x.1 v1.9.0
)
```

----------------------------------------

TITLE: Plain Text Link Format
DESCRIPTION: Demonstrates how the documentation links appear in plain text format without markup.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink.txt#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
In this package, see Doc and Parser.Parse. There is no [Undef] or
[Undef.Method]. See also the comment package, especially comment.Doc and
comment.Parser.Parse.
```

----------------------------------------

TITLE: Go Module Definition Files
DESCRIPTION: Two identical module definition files specifying the module name 'rsc.io/needgo124' and the required Go version 1.24.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo124_v0.0.1.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module rsc.io/needgo124
go 1.24
```

----------------------------------------

TITLE: Importing Dot-Go Suffix Package in Go
DESCRIPTION: This Go file demonstrates the usage of the 'example.com/dotgo.go' package by importing it as a side-effect-only import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_trailing_slash.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package use

import _ "example.com/dotgo.go"
```

----------------------------------------

TITLE: Importing 'cmd' Meta-Package in Go
DESCRIPTION: This Go file attempts to import the 'cmd' meta-package, which is not allowed and should result in an error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
package importcmd

import _ "cmd"
```

----------------------------------------

TITLE: Module B Implementation with Import
DESCRIPTION: The package implementation for 'm/b' that imports 'm/a', completing the circular dependency chain and creating an import cycle between the packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_cycle.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package b
import _ "m/a"
```

----------------------------------------

TITLE: Invalid Go Debug Directive Example in Go
DESCRIPTION: A minimal Go program demonstrating an error case with an invalid //go:debug directive. The directive 'x=y' is not recognized by the Go compiler, causing a build error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_unknown.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
//go:debug x=y
package main
func main() {}
```

----------------------------------------

TITLE: Building and Versioning a Simple Go Program
DESCRIPTION: Builds a simple Go program and checks its version information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_4

LANGUAGE: Shell
CODE:
```
go build empty.go
go version empty$GOEXE
[cgo] go build -ldflags=-linkmode=external empty.go
[cgo] go version empty$GOEXE
```

----------------------------------------

TITLE: Raw Input Format Test
DESCRIPTION: Shows raw input format with dollar signs as delimiters and blank lines at start/end
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/blank.txt#2025-04-22_snippet_0

LANGUAGE: text
CODE:
```
	$
	Blank line at start and end.
	$
```

----------------------------------------

TITLE: Module C Configuration
DESCRIPTION: Go.mod file for module 'c' which requires module 'd' at version v0.2.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module example.com/c
require example.com/d v0.2.0
```

----------------------------------------

TITLE: MapFS Implementation Methods
DESCRIPTION: Implementation of Lstat and ReadLink methods for the MapFS type in the testing/fstest package.
SOURCE: https://github.com/golang/go/blob/master/api/next/49580.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
method (MapFS) Lstat(string) (fs.FileInfo, error)
method (MapFS) ReadLink(string) (string, error)
```

----------------------------------------

TITLE: Running Parallel Tests with Verbose Output
DESCRIPTION: Shell command to run parallel tests with verbose output, specifying a parallelism level of 3.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_parallel_success_run.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -parallel 3 chatty_parallel -v
```

----------------------------------------

TITLE: Upgrade Module Version 1
DESCRIPTION: Defines the go.mod and upgrade.go files for the first version of the example.com/upgrade module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
module example.com/upgrade

go 1.16
```

LANGUAGE: go
CODE:
```
package upgrade
```

----------------------------------------

TITLE: Go Toolchain Version Information in .info File
DESCRIPTION: JSON object in the .info file specifying the version of the Go toolchain module, matching the version in the module path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-riscv64.txt#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
{"Version":"v0.0.1-go1.999testmod.openbsd-riscv64"}
```

----------------------------------------

TITLE: Adding Size Methods to bufio Package in Go
DESCRIPTION: This snippet adds Size methods to both Reader and Writer types in the bufio package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
method (*Reader) Size() int
method (*Writer) Size() int
```

----------------------------------------

TITLE: Testing Go Version Command Without Arguments
DESCRIPTION: Verifies that running 'go version' without arguments prints Go's own version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go version
stdout '^go version'
```

----------------------------------------

TITLE: Gofmt Command Shell Script
DESCRIPTION: A shell script that mocks the gofmt command, with a comment noting it is unused.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-mips64x.txt#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
echo i am unused
```

----------------------------------------

TITLE: Importing fmt Package
DESCRIPTION: A single line Go import statement for the fmt standard library package, commonly used for formatted I/O operations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/internal/imports/testdata/test/want.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
fmt
```

----------------------------------------

TITLE: Module B Main Program
DESCRIPTION: Identical implementation to Module A, demonstrating parallel usage of the same dependency
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sum_mismatch.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"rsc.io/quote"
)

func main() {
	fmt.Println(quote.Hello())
}
```

----------------------------------------

TITLE: Git Credentials with Authentication
DESCRIPTION: Git credentials file containing HTTP basic authentication information for the test repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_git.txt#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
https://aladdin:opensesame@vcs-test.golang.org
```

----------------------------------------

TITLE: Declaring Syso2 Package
DESCRIPTION: Declares the syso2 package without any content, serving as a placeholder for the syso file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_deps.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
package syso2
```

----------------------------------------

TITLE: HTML Output Format
DESCRIPTION: Final HTML rendering of the list with proper link tag
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist3.txt#2025-04-22_snippet_4

LANGUAGE: html
CODE:
```
<p>Cool things:
<ul>
<li>Foo
<li><a href="https://go.dev/">Go</a>
<li>Bar
</ul>

```

----------------------------------------

TITLE: Go Module Configuration
DESCRIPTION: Module definition file specifying the module name and external dependency on rsc.io/quote package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sum.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go 1.18

module example.com/hi

require "rsc.io/quote" v1.5.2
```

----------------------------------------

TITLE: RecordHeaderError struct definition in crypto/tls
DESCRIPTION: Definition of the RecordHeaderError struct in the crypto/tls package for handling TLS record header errors.
SOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
type RecordHeaderError struct, Conn net.Conn
```

----------------------------------------

TITLE: Module A Definition
DESCRIPTION: Module definition for example.com/a which requires example.com/b v0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/a

go 1.17

require example.com/b v0.1.0
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Go module file defining the module path and Go version requirement for a v2 module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2repo.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/go/v2module/v2

go 1.12
```

----------------------------------------

TITLE: Testing Go Mod Edit Formatting
DESCRIPTION: Tests that 'go mod edit -fmt' sorts requirements in the go.mod file according to the standard format.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
go mod edit -fmt
cmp go.mod go.mod.tidy
```

----------------------------------------

TITLE: Package Declaration - Noread Package
DESCRIPTION: Simple package declaration for a package that will be made unreadable during testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_perm.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Package noread exists, but will be made unreadable.
package noread
```

----------------------------------------

TITLE: Test-Only Package Implementation
DESCRIPTION: A test-only package that imports example.com/q, creating another test-only dependency path in the module graph.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
package testonly_test

import _ "example.com/q"
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file specifying module name, Go version requirement, and dependency on an incompatible version of example.com/incompatiblewithsub.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_prefer_incompatible.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

go 1.15

require example.com/incompatiblewithsub v2.0.0+incompatible
```

----------------------------------------

TITLE: Simple p2 Package Definition
DESCRIPTION: A minimal Go package definition for p2 with no imports, serving as a dependency for the repository structure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-old.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package p2
```

----------------------------------------

TITLE: Formatting Text in Plain Format
DESCRIPTION: This snippet shows the original text without any formatting.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/words.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
This is an italicword and a linkedword and Unicöde.
```

----------------------------------------

TITLE: Setting Go Environment Variables for Testing
DESCRIPTION: Initial setup of environment variables for testing Go toolchain behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env TESTGO_VERSION=go1.21
env TESTGO_VERSION_SWITCH=switch
```

----------------------------------------

TITLE: Module A Configuration
DESCRIPTION: Go module configuration for example.com/a with dependencies and replacements
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_regression_hang.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/a

go 1.18

require example.com/b v1.0.0

replace example.com/b v1.0.0 => ../b
replace example.com/c v1.0.0 => ../c
```

----------------------------------------

TITLE: Intermediate Package Implementation
DESCRIPTION: Package 'b' that imports and uses the transitive package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_deps.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package b

import "transitive"

func F() {
	transitive.F()
}
```

----------------------------------------

TITLE: Listing and Comparing Go Module Dependencies
DESCRIPTION: Lists all module dependencies and compares the output with a reference file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go list -m all
cmp stdout m_all.txt
```

----------------------------------------

TITLE: Module Definition in go.mod
DESCRIPTION: Defines the Go module 'example.com' with Go version 1.18 as the dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_single_error.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com

go 1.18
```

----------------------------------------

TITLE: Local Module Definition
DESCRIPTION: A simple go.mod file for the local replacement module 'example.com/b'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_replace_file.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/b
```

----------------------------------------

TITLE: Error-generating Fuzz Test in Go
DESCRIPTION: Shows how to implement a fuzz test that generates an error using f.Error().
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package error_fuzz

import "testing"

func Fuzz(f *testing.F) {
    f.Error("error in target")
}
```

----------------------------------------

TITLE: Fetching Specific Module Version in Go
DESCRIPTION: This command fetches a specific version of the 'example.com/pseudoupgrade' module using a commit hash.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade_pseudo.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go get example.com/pseudoupgrade@b5426c8
```

----------------------------------------

TITLE: Main Program with Crypto Import
DESCRIPTION: Simple Go program that imports the sha256 crypto package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fips.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main
import _ "crypto/sha256"
func main() {
}
```

----------------------------------------

TITLE: Plain Text Output Format
DESCRIPTION: Text-only version with the link reference resolved to plain text
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist3.txt#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
Cool things:

  - Foo
  - Go
  - Bar

[Go]: https://go.dev/
```

----------------------------------------

TITLE: Go Module X Implementation
DESCRIPTION: Module X with test file that imports module Y. Provides a simple package for testing module dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
module example.com/x

go 1.18
```

LANGUAGE: go
CODE:
```
package x
```

LANGUAGE: go
CODE:
```
package x
import _ "example.com/y"
```

----------------------------------------

TITLE: Setting Environment Variable for Go Module Format
DESCRIPTION: Sets the MODFMT environment variable to format module information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_added.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env MODFMT='{{with .Module}}{{.Path}} {{.Version}}{{end}}'
```

----------------------------------------

TITLE: Self-Importing Go Package
DESCRIPTION: Go source file demonstrating an invalid self-import cycle where a package attempts to import itself
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_cycle.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package selfimport

import "selfimport"
```

----------------------------------------

TITLE: Initial Go Workspace Configuration
DESCRIPTION: Original go.work file containing references to existing and deleted module paths
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_deleted.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go 1.18

use (
	.
	./sub
	./sub/dir/deleted
)
```

----------------------------------------

TITLE: Defining Simple Go Module
DESCRIPTION: This go.mod file defines a simple module 'example.com/dep' without any dependencies or replacements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_main_module.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com/dep
```

----------------------------------------

TITLE: Package A Test File with Invalid Import
DESCRIPTION: Test file for package a containing an illegal internal package import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_internal.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package a

import (
  _ "a/x/internal/y"
)
```

----------------------------------------

TITLE: Importing Dependency in Module 'c' Version 1
DESCRIPTION: This Go file for module 'c' version 1 imports dependency 'b' as a blank import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_10

LANGUAGE: Go
CODE:
```
package c

import _ "example.net/b"
```

----------------------------------------

TITLE: Alternate GOROOT Module Definition
DESCRIPTION: Defines a Go module named 'std' for testing alternate GOROOT behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_19

LANGUAGE: go
CODE:
```
module std
go 1.13
```

----------------------------------------

TITLE: Go Module Definition for patch.example.com/direct
DESCRIPTION: The go.mod file defining the module name and its dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.1.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module patch.example.com/direct

require (
	patch.example.com/indirect v1.0.0
)
```

----------------------------------------

TITLE: Defining Go File with Import Cycle
DESCRIPTION: This snippet defines a Go file that creates an import cycle by importing itself.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_setup_error.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package p

import "m/cycle/p"
```

----------------------------------------

TITLE: Configuring Go Workspace
DESCRIPTION: This snippet defines a go.work file that specifies the Go version to be used in the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_no_mod_root_issue54419.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
go 1.25
```

----------------------------------------

TITLE: Command B Implementation
DESCRIPTION: Main package implementing command 'b' that prints version-specific output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main

import "fmt"

func main() { fmt.Println("b@v1.0.0") }
```

----------------------------------------

TITLE: Lowercase Module Definition
DESCRIPTION: A simple go.mod file that defines the lowercase module example.com/foo.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_collision.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.com/foo
```

----------------------------------------

TITLE: Go Module Definition File
DESCRIPTION: A simple Go module definition file that declares the module name.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/netrc_issue66832.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module private.example.com
```

----------------------------------------

TITLE: Original Go Module Definition
DESCRIPTION: Initial go.mod file defining the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_diff.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com

go 1.22
```

----------------------------------------

TITLE: Go Module Definition for Other Module Test
DESCRIPTION: Defines a Go module named 'example.com/othermodule' for testing module resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
module example.com/othermodule
go 1.13
```

----------------------------------------

TITLE: Initializing Git Repository
DESCRIPTION: Initializes a new Git repository in the current directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
git init
```

----------------------------------------

TITLE: go.work file content
DESCRIPTION: This is the content of the go.work file used in the tests. It specifies the Go version being used.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_only_dirs.txt#_snippet_2

LANGUAGE: Go
CODE:
```
-- go.work --
go 1.18
```

----------------------------------------

TITLE: Defining Simple Go Main Function
DESCRIPTION: Defines a minimal Go main function used for the build test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_trimpath_issue48557.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Dependency Test File
DESCRIPTION: Minimal Go test file that imports the testing package to verify dependency rebuilding behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_rebuildall.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package deps

import _ "testing"
```

----------------------------------------

TITLE: Testing Buggy Package in Go
DESCRIPTION: Contains a test function that always fails, demonstrating a buggy implementation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.2.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package buggy

import "testing"

func Test(t *testing.T) {
	t.Fatal("buggy!")
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module configuration specifying module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_limit_dup_entry.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file specifying Go version 1.16 requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_shuffle.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Go Module with Godebug Directive
DESCRIPTION: Shows a go.mod file with a godebug directive, which is used to set runtime debugging variables that affect the Go toolchain's behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_17

LANGUAGE: go
CODE:
```
module g

go 1.10

godebug key=value
```

----------------------------------------

TITLE: Testing go list and build commands with alternate file
DESCRIPTION: Verifies that go list and build commands update the alternate go.mod file when a dependency is missing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_7

LANGUAGE: shell
CODE:
```
go mod edit -droprequire rsc.io/quote
go list -mod=mod .
grep rsc.io/quote go.alt.mod
go build -n -mod=mod .
go test -n -mod=mod .
go get rsc.io/quote
```

----------------------------------------

TITLE: Copying Original go.mod File
DESCRIPTION: Creates a backup of the original go.mod file for later use in the tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_pkg.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
cp go.mod go.mod.orig
```

----------------------------------------

TITLE: Removing Indirect Mark from Dependency
DESCRIPTION: This snippet demonstrates how to remove the indirect mark from the dependency using 'go get .'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_indirect.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
go get .
grep 'rsc.io/quote v\d+\.\d+\.\d+$' go.mod
! grep 'rsc.io/quote v\d+\.\d+\.\d+ // indirect$' go.mod
```

----------------------------------------

TITLE: Defining Empty Package for Prerelease Version in Go
DESCRIPTION: This Go file defines an empty package a for the prerelease version of example.net/a.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
package a
```

----------------------------------------

TITLE: SVN Update and Log Commands
DESCRIPTION: Updates the working copy and generates an XML log of the repository history.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/hello.txt#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
svn update
svn log --xml
```

----------------------------------------

TITLE: Dependency P Implementation
DESCRIPTION: Implementation of shared dependency module 'p'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package p

func P() {}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module with version 1.22.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_commandline.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
module example.com/m

go 1.22.0
```

----------------------------------------

TITLE: Testing Invalid +incompatible Suffix for Canonical Version in Go
DESCRIPTION: This snippet tests that an invalid +incompatible suffix for a canonical version should error out, not resolve to a pseudo-version. It adds an invalid requirement and checks for the expected error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_version.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
cp go.mod.orig go.mod
go mod edit -require github.com/pierrec/lz4@v2.0.8+incompatible
cd outside
! go list -m github.com/pierrec/lz4
stderr '^go: github.com/pierrec/lz4@v2.0.8\+incompatible: invalid version: module contains a go.mod file, so module path must match major version \("github.com/pierrec/lz4/v2"\)$'
cd ..
! go list -m github.com/pierrec/lz4
stderr '^go: github.com/pierrec/lz4@v2.0.8\+incompatible: invalid version: module contains a go.mod file, so module path must match major version \("github.com/pierrec/lz4/v2"\)$'
```

----------------------------------------

TITLE: Testing go list -m all with alternate file
DESCRIPTION: Runs 'go list -m all' and checks that sums are added to the alternate go.sum file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
go list -m -mod=mod all
grep '^rsc.io/quote v1.5.2/go.mod ' go.alt.sum
! grep '^rsc.io/quote v1.5.2 ' go.alt.sum
```

----------------------------------------

TITLE: Replacement Go Module Definition for internal
DESCRIPTION: Defines a `go.mod` file for the replacement version of `golang.org/x/internal`, located within the `replace` directory structure. It declares the module path as `golang.org/x/internal`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_18

LANGUAGE: go
CODE:
```
-- replace/golang.org/notx/internal/go.mod --
module golang.org/x/internal
```

----------------------------------------

TITLE: Defining Buggy Test in Go
DESCRIPTION: A test file in the buggy subdirectory that purposely fails by calling t.Fatal(). This is likely used to test error handling or test framework behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.3-pre1.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package buggy

import "testing"

func Test(t *testing.T) {
	t.Fatal("buggy!")
}
```

----------------------------------------

TITLE: Regular Package in Test-Named Directory
DESCRIPTION: A Go package declaration for package 'd' located in a directory named 'd_test'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
package d
```

----------------------------------------

TITLE: Configuration JSON for Text Width
DESCRIPTION: JSON configuration object specifying text width parameter of 30 characters
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/text3.txt#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{"TextWidth": 30}
```

----------------------------------------

TITLE: Go Module Configuration
DESCRIPTION: Basic go.mod file configuration declaring module name and Go version requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_issue51125.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example

go 1.17
```

----------------------------------------

TITLE: Go Module W Implementation
DESCRIPTION: Module W with test file that imports module X. Includes go.mod file with dependency on module X v1.0.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
module example.com/w

go 1.18

require example.com/x v1.0.0
```

LANGUAGE: go
CODE:
```
package w
```

LANGUAGE: go
CODE:
```
package w

import _ "example.com/x"
```

----------------------------------------

TITLE: Package X v0.1.0 Implementation
DESCRIPTION: First version of package x with test dependency on package y.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.net/x

go 1.16
```

LANGUAGE: go
CODE:
```
package x
```

LANGUAGE: go
CODE:
```
package x

import _ "example.net/y"
```

----------------------------------------

TITLE: Stub Go file in subdirectory
DESCRIPTION: A minimal Go file in a subdirectory used for testing directory restrictions in 'go run'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_dirs.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main
```

----------------------------------------

TITLE: Direct Package Import
DESCRIPTION: Go source file implementing the direct package with an import of an indirect dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.0.1.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package direct

import _ "patch.example.com/indirect"
```

----------------------------------------

TITLE: Executing Go List Command in Shell
DESCRIPTION: This shell script snippet uses the `go list` command with custom formatting to fetch the import path and directory of the testdata. It checks stdout and stderr to ensure that testdata isn't wrongly recognized as a package. No additional dependencies are needed, but Go must be installed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_testdata.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list -f '{{.ImportPath}} {{.Dir}}' testdata
! stderr 'found package testdata in multiple modules'
stdout 'testdata '$WORK${/}'gopath'${/}'src'
```

----------------------------------------

TITLE: Implementing File Path Printing in Package Test
DESCRIPTION: Implements a function to print the file path of the current test file using runtime.Caller.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package pkg

import "runtime"

func PrintFileForTest() {
	_, file, _, _ := runtime.Caller(0)
	println(file)
}
```

----------------------------------------

TITLE: Malforming Go Module Declaration
DESCRIPTION: Includes a malformed `go.mod` file where the module declaration is invalid due to an incorrect path, used for testing error reporting.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path.txt#2025-04-22_snippet_6

LANGUAGE: Golang
CODE:
```
-- badname/go.mod --

module .\. 
```

----------------------------------------

TITLE: Testing Wildcard Pattern Matching with ASCII Characters
DESCRIPTION: Tests wildcard pattern matching with the '...' pattern against strings including 'abc'. Shows how boundary assertions and non-capturing groups affect match results.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_26

LANGUAGE: go
CODE:
```
"^...$"
-;-;-;-
0-3;0-3;0-3;0-3
"^(?:^...$)$"
-;-;-;-
0-3;0-3;0-3;0-3
"^(?:^...$)"
-;-;-;-
0-3;0-3;0-3;0-3
"(?:^...$)$"
-;-;-;-
0-3;0-3;0-3;0-3
```

----------------------------------------

TITLE: Defining Go Module with Test Dependencies
DESCRIPTION: This snippet defines a Go module with test dependencies in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_of_test_dep.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module example.com/a

go 1.15

require example.com/b v0.1.0
```

----------------------------------------

TITLE: Defining Go Module 'm'
DESCRIPTION: This `go.mod` file defines a Go module named 'm' and specifies the Go version `1.16` required for the project. It serves as the root for the helper Go programs (`now`, `mtime`, `before`) used in the test script.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue6480.txt#2025-04-22_snippet_1

LANGUAGE: go.mod
CODE:
```
-- go.mod --
module m

go 1.16
```

----------------------------------------

TITLE: Go Module Test Environment Setup
DESCRIPTION: Sets up the test environment with GO111MODULE=on to enable module mode for all subsequent commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goroot_errors.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Defining Empty Package in Go
DESCRIPTION: This snippet defines an empty Go package named 'empty' used for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_retract.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package empty
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module declaration file that defines the module name for the test package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_link_ldflags.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Toolchain Version Information
DESCRIPTION: JSON configuration specifying the toolchain version information for Windows ARM64 platform
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-arm64.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v0.0.1-go1.999testmod.windows-arm64"}
```

----------------------------------------

TITLE: Importing Package in Go Source File
DESCRIPTION: Imports the 'rsc.io/quote' package in a Go source file named 'x.go'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package x
import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Non-Main Package Pkg1
DESCRIPTION: Non-main package declaration for testing build behavior with non-executable packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_multi_main.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package pkg1
```

----------------------------------------

TITLE: Hello World Go Program
DESCRIPTION: Simple Go program used in the test cases to verify installation behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_install.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package main

func main() {
	println("hello world")
}
```

----------------------------------------

TITLE: Function Implementation for Internal Package 'i' in Go
DESCRIPTION: Internal package 'i' with a function I that returns 32.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_15

LANGUAGE: go
CODE:
```
package i

func I() int { return 32 }
```

----------------------------------------

TITLE: Compiler Debug and Help Flags
DESCRIPTION: Commands to view available compiler flags and their descriptions
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ go tool compile -h
$ go tool compile -d help
$ go tool compile -d ssa/help
```

----------------------------------------

TITLE: Basic Go module definition
DESCRIPTION: A minimal go.mod file defining a module named 'example' using Go 1.18.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_issue50958.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example
go 1.18
```

----------------------------------------

TITLE: Defining go.mod file content
DESCRIPTION: Contains a placeholder content for the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
ʕ◔ϖ◔ʔ
```

----------------------------------------

TITLE: Importing rsc.io/quote in Go Package
DESCRIPTION: Defines a Go package 'x' that imports the rsc.io/quote package as a side effect.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_9

LANGUAGE: Go
CODE:
```
package x
import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module named 'm' with Go version 1.18 requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_go_file.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.18
```

----------------------------------------

TITLE: Go Environment Check
DESCRIPTION: Checks go environment variables and verifies GOPATH warning message
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_issue46807.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go env
stdout 'GOPATH='
stderr '^go: warning: ignoring go.mod in \$GOPATH'
```

----------------------------------------

TITLE: Go Module with Test Suffix in Module Name
DESCRIPTION: A Go module definition for a module with a 'test' suffix in its name.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
module example.com/e_test
```

----------------------------------------

TITLE: Defining Go Module Configuration
DESCRIPTION: Specifies the module name and Go version requirement for rsc.io/needgo118.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo118_v0.0.1.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module rsc.io/needgo118
go 1.18
```

----------------------------------------

TITLE: Local Package with Deprecated Import - use.go
DESCRIPTION: Defines a local package that imports a deprecated module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecated.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package use

import _ "example.com/deprecated/b"
```

----------------------------------------

TITLE: Indirect Usage Module
DESCRIPTION: Go file demonstrating indirect import of the lazyupgrade module through 'direct' package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_upgrade_lazy.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package use

import _ "direct"
```

----------------------------------------

TITLE: Hello World Go Program
DESCRIPTION: Simple Go program that prints 'hello, world' to demonstrate build output behavior
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_dash_o_dev_null.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

func main() {
	println("hello, world")
}
```

----------------------------------------

TITLE: No Latest Version Module Definition
DESCRIPTION: Module definition for example.com/nolatest test module used in proxy response testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_update_nolatest.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/nolatest

go 1.17
```

----------------------------------------

TITLE: Module Definition in go.mod
DESCRIPTION: The go.mod file defining the golang.org/toolchain module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-mips64x.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Windows Batch Go Execution Script
DESCRIPTION: Batch script that echoes the Go test module version
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-arm64.txt#2025-04-22_snippet_2

LANGUAGE: batch
CODE:
```
@echo go1.999testmod here!
```

----------------------------------------

TITLE: Package D Main with Import
DESCRIPTION: Go main package that imports package b to test dependency handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_git.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package main

import _ "example.com/b"

func main() {}
```

----------------------------------------

TITLE: Go Module Definition for Q Package
DESCRIPTION: A Go 1.20 module definition for the q module used as a dependency in the tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_default.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
go 1.20
module q
```

----------------------------------------

TITLE: Minimal Go Main Package
DESCRIPTION: Simple Go main package with empty main function used for testing package installation
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_shadow_gopath.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module configuration file defining the module name and its dependency requirements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_b_v1.1.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/badchain/b

require example.com/badchain/c v1.1.0
```

----------------------------------------

TITLE: Assembly Implementation for AMD64
DESCRIPTION: Assembly implementation of an Add function for AMD64 architecture.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/toolexec.txt#2025-04-22_snippet_2

LANGUAGE: assembly
CODE:
```
TEXT ·Add(SB),$0-24
	MOVQ a+0(FP), AX
	ADDQ b+8(FP), AX
	MOVQ AX, ret+16(FP)
	RET
```

----------------------------------------

TITLE: Toolchain Version Information in JSON
DESCRIPTION: JSON metadata specifying the version of the toolchain module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-386.txt#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
{"Version":"v0.0.1-go1.999testmod.openbsd-386"}
```

----------------------------------------

TITLE: Basic Command Package B
DESCRIPTION: Minimal Go command package implementation with empty main function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-replace.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Module A Main Package
DESCRIPTION: Main package file for module a that imports modules b and c.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package a

import (
	_ "example.com/b"
	_ "example.com/c"
)
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vendor.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module vend/hello

go 1.16
```

----------------------------------------

TITLE: Minimal Vendored Package q
DESCRIPTION: A minimal vendored package 'q' that only contains a package declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package q
```

----------------------------------------

TITLE: V Package in Root Vendor
DESCRIPTION: Package defining Hello constant used in the main package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_complex.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package v

const Hello = "hello"
```

----------------------------------------

TITLE: Importing Syso2 Package in Syso
DESCRIPTION: Imports the syso2 package as a side-effect import in the syso package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_deps.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package syso

import _ "m/syso2"
```

----------------------------------------

TITLE: Module B Go Module Definition
DESCRIPTION: Go module configuration for module b requiring rsc.io/quote v1.5.2
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sum_mismatch.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
go 1.18

module example.com/hi2

require "rsc.io/quote" v1.5.2
```

----------------------------------------

TITLE: Go Workspace Configuration
DESCRIPTION: Workspace configuration file specifying Go version 1.18 and including the current directory in the workspace.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sum.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go 1.18

use .
```

----------------------------------------

TITLE: Command A Implementation
DESCRIPTION: Minimal Go program for cmd/a package used in wildcard testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tool.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package a

func main() {}
```

----------------------------------------

TITLE: JSON Test Overlay Configuration
DESCRIPTION: Defines file replacement mapping for test files using JSON overlay configuration
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_overlay.txt#2025-04-22_snippet_3

LANGUAGE: json
CODE:
```
{"Replace": {"foo_test.go": "../tmp/bar_test.go"}}
```

----------------------------------------

TITLE: Alternate GOROOT Builtin Package
DESCRIPTION: Defines a builtin package in the alternate GOROOT for testing package resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_20

LANGUAGE: go
CODE:
```
package builtin
```

----------------------------------------

TITLE: Module Definition with Broken Hash
DESCRIPTION: Module definition file intentionally modified with a comment to break hash verification.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badsum_v1.0.1.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module "rsc.io/badsum"
# break hash
```

----------------------------------------

TITLE: Package X Simple Function
DESCRIPTION: Package 'x' with a simple computation function
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_with_init.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package x

func XFunc() int {
	return 2 * 2
}
```

----------------------------------------

TITLE: Creating excluded Go file
DESCRIPTION: Defines a Go file with a build constraint to exclude it from compilation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_empty_err.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
// +build exclude

package exclude
```

----------------------------------------

TITLE: Long Module Implementation
DESCRIPTION: Implements a simple package for the 'long' module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
package long
```

----------------------------------------

TITLE: Tracking File Versions in Type Info - go/types - Go
DESCRIPTION: Info struct in go/types now contains FileVersions, mapping *ast.File pointers to string versions. Used for associating additional metadata, like compiler or language version, with each file during analysis.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_14

LANGUAGE: Go
CODE:
```
type Info struct {
    FileVersions map[*ast.File]string
}
```

----------------------------------------

TITLE: Defining Module Path for Go Toolchain
DESCRIPTION: Specifies the module path for a mock Go toolchain used in testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-386.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
golang.org/toolchain@v0.0.1-go1.999testmod.netbsd-386
```

----------------------------------------

TITLE: Basic Compilation Error Test
DESCRIPTION: Test file containing an undefined variable reference to verify basic compilation error reporting.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_json.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package compileerror

const x = y
```

----------------------------------------

TITLE: Go Package Import
DESCRIPTION: Go source file importing a submodule from the incompatible dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_prefer_incompatible.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package use

import _ "example.com/incompatiblewithsub/sub"
```

----------------------------------------

TITLE: Multiline Module Implementation
DESCRIPTION: Implements a simple package for the 'multiline' module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package multiline
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_goroot_PATH.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example

go 1.19
```

----------------------------------------

TITLE: Minimal Main Package Implementation
DESCRIPTION: Basic Go main package containing an empty main function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_empty_panic_GOPATH.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main
func main() {}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module configuration defining the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/testing_coverage.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module hello

go 1.20
```

----------------------------------------

TITLE: Storing Version Information in JSON
DESCRIPTION: This JSON snippet stores the version information for the module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo123_v0.0.1.txt#2025-04-22_snippet_2

LANGUAGE: JSON
CODE:
```
{"Version":"v0.0.1"}
```

----------------------------------------

TITLE: Module Version Information
DESCRIPTION: JSON configuration containing version information for the module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_c_v1.1.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v1.1.0"}
```

----------------------------------------

TITLE: Module A Definition v0.1.0
DESCRIPTION: Module a configuration and implementation requiring module b v0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_artifact.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/a

go 1.16

require example.com/b v0.1.0
```

LANGUAGE: go
CODE:
```
package a

import _ "example.com/b"
```

----------------------------------------

TITLE: Godeps JSON Configuration
DESCRIPTION: JSON configuration file specifying import path for package z
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_find.txt#2025-04-22_snippet_3

LANGUAGE: json
CODE:
```
{"ImportPath": "unexpected.com/z"}
```

----------------------------------------

TITLE: LazyUpgrade v0.1.1 Module Definition
DESCRIPTION: go.mod file for lazyupgrade module version 0.1.1
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_upgrade_lazy.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module example.com/lazyupgrade

go 1.17
```

----------------------------------------

TITLE: Plain Text Output
DESCRIPTION: Text output with standardized formatting and spacing.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list4.txt#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
Text.
 1. List

2. Not indented, not a list.
 3. Another list.
```

----------------------------------------

TITLE: Internal Subpackage Definition
DESCRIPTION: A minimal Go file that defines a subpackage within an internal package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_internal.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package y
```

----------------------------------------

TITLE: Vendored dependency implementation
DESCRIPTION: Contains the vendored version of the example.com/m dependency package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_redundant_requirement.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
package m
```

----------------------------------------

TITLE: Go Module Configuration for 'n' Directory
DESCRIPTION: Module configuration file for example.com/n using Go 1.24
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pattern_work.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com/n

go 1.24
```

----------------------------------------

TITLE: HTML Heading Implementation
DESCRIPTION: Shows the HTML equivalent of the heading with matching identifier
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/head3.txt#2025-04-22_snippet_2

LANGUAGE: html
CODE:
```
<h5 id="hdr-Heading">Heading</h5>
```

----------------------------------------

TITLE: Toolchain Module Definition
DESCRIPTION: Defines the Go module name for the toolchain in the .mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-386.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Valid Module Version Info
DESCRIPTION: Example of a valid JSON response for module version information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_empty.txt#2025-04-22_snippet_3

LANGUAGE: json
CODE:
```
{"Version": "v1.1.0"}
```

----------------------------------------

TITLE: Implicit Package Import
DESCRIPTION: Package declaration with an implicit import of the lazy module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_implicit.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package implicit

import _ "example.net/lazy"
```

----------------------------------------

TITLE: Initializing Go Module
DESCRIPTION: Defines the module name and Go version for the project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/dwarf5_gen_assembly_and_go.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module uses.asm

go 1.25
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module in the a subdirectory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_10

LANGUAGE: Go
CODE:
```
module example.com/a

go 1.18
```

----------------------------------------

TITLE: Error Package with Compilation Error
DESCRIPTION: Package demonstrating an intentional compilation error with undefined reference.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-newerself.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package err

var X = DoesNotCompile
```

----------------------------------------

TITLE: Deprecations in os package
DESCRIPTION: Lists deprecated constants in the os package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_26

LANGUAGE: Go
CODE:
```
pkg os, const SEEK_CUR //deprecated
pkg os, const SEEK_END //deprecated
pkg os, const SEEK_SET //deprecated
```

----------------------------------------

TITLE: Module C Implementation
DESCRIPTION: Package c implementation importing module B and providing function C()
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_regression_hang.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package c

import "example.com/b"

func C() {
	b.B()
}
```

----------------------------------------

TITLE: Package Implementation
DESCRIPTION: Simple Go package 'p' containing an empty function F()
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo1183_v0.0.1.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package p

func F() {}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Simple module declaration for the test package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_link_c.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Submodule Package Definition in z Directory
DESCRIPTION: Go file defining package z as part of a nested submodule that should be excluded from parent module's package listing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package z
```

----------------------------------------

TITLE: Expected stderr Output for Dependency Conflict
DESCRIPTION: This snippet shows the expected stderr output when there's a conflict between the requested version of a module and the version required by an indirect dependency. It demonstrates Go's behavior in resolving such conflicts.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_newcycle.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
-- stderr-expected --
go: example.com/newcycle/a@v1.0.0 indirectly requires example.com/newcycle/a@v1.0.1, not example.com/newcycle/a@v1.0.0
```

----------------------------------------

TITLE: Module Definition
DESCRIPTION: Go module definition specifying the module path and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_a_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/deprecated/a

go 1.17
```

----------------------------------------

TITLE: Defining Go File with Multiple Imports
DESCRIPTION: This snippet defines a Go file with multiple imports, including one that will cause an error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_setup_error.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package q

import (
	"m/bad"
	"m/cycle/p"
)
```

----------------------------------------

TITLE: Subsequent Package Build with PGO
DESCRIPTION: Verifies that subsequent builds don't trigger preprofile
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_pgo.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go build -x -pgo=default.pgo lib.go
! stderr 'preprofile.*default\.pgo'
```

----------------------------------------

TITLE: Validate V2 Module in a Subdirectory
DESCRIPTION: This snippet validates a v2 module located in a subdirectory by creating the directory, copying the necessary files, and using "go list -deps" to check that the module path is correctly included.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_multirepo.txt#2025-04-22_snippet_3

LANGUAGE: Bash
CODE:
```
mkdir v2
cp x.go v2/x.go
cp tmp/v2.mod v2/go.mod
go list -deps -f {{.Dir}}
stdout 'pkg[\/]mod[\/]rsc.io[\/]quote[\/]v2@v2.0.1$'
```

----------------------------------------

TITLE: Cgo Implementation File (Go/C)
DESCRIPTION: A Go file with Cgo code that imports and calls a C function. It includes a simple conditional branch to test coverage reporting on Go code that interfaces with C.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_extra_file.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p

/*
void
f(void)
{
}
*/
import "C"

var b bool

func F() {
	if b {
		for {
		}
	}
	C.f()
}
```

----------------------------------------

TITLE: Go Module Declaration
DESCRIPTION: Defines a Go module named 'm'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_mangle.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: HTTP Related Constants and Types - Go
DESCRIPTION: HTTP-related constants and types including SameSite cookie modes, status codes, and transport configuration options. These are used for HTTP server and client implementations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
const (
    SameSiteDefaultMode SameSite = 1
    SameSiteLaxMode SameSite = 2
    SameSiteStrictMode SameSite = 3
    StatusMisdirectedRequest = 421
)

type SameSite int

type Cookie struct {
    SameSite SameSite
}
```

----------------------------------------

TITLE: Running Fuzz Tests with Panic in Go
DESCRIPTION: This snippet demonstrates a fuzz test that causes a panic. It shows how panics are handled and reported in the context of fuzz testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_chatty.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package chatty_panic_fuzz

import "testing"

func Fuzz(f *testing.F) {
    panic("this is bad")
}
```

----------------------------------------

TITLE: Declaring the Unicode Version Constant - Go
DESCRIPTION: Specifies the Version constant in the unicode package, indicating the version of the Unicode standard currently supported (here, \"6.3.0\"). This constant is useful for developers needing to ensure text processing aligns with a specific Unicode revision. Consumers should check this value for compatibility or feature support in Unicode operations within the Go standard library.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_67

LANGUAGE: Go
CODE:
```
pkg unicode, const Version = "6.3.0"
```

----------------------------------------

TITLE: Defining Statfs_t Struct for Filesystem Statistics in Go Syscall Package
DESCRIPTION: The Statfs_t struct represents filesystem statistics in the syscall package for Darwin ARM64. It provides information about mounted filesystems, including capacity, usage, type, and location details.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_209

LANGUAGE: Go
CODE:
```
type Statfs_t struct {
    Bsize         uint32
    Iosize        int32
    Blocks        uint64
    Bfree         uint64
    Bavail        uint64
    Files         uint64
    Ffree         uint64
    Fsid          Fsid
    Owner         uint32
    Type          uint32
    Flags         uint32
    Fssubtype     uint32
    Fstypename    [16]int8
    Mntonname     [1024]int8
    Mntfromname   [1024]int8
    Reserved      [8]uint32
}
```

----------------------------------------

TITLE: Source Code for Package 'b/x' (Go)
DESCRIPTION: The source code for package `x` within module `b`. This package is imported by `a_test.go`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
-- b1/x/x.go --
package x
```

----------------------------------------

TITLE: Listing Available Toolchain Versions
DESCRIPTION: Uses the go list command to display available toolchain versions. It checks for the presence of specific versions, including release candidates.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_version.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
go list -m -versions toolchain
stdout go1.20.1 # among others
stdout go1.19rc2
```

----------------------------------------

TITLE: Defining an Invalid Fuzz Target Function in Go
DESCRIPTION: This code snippet demonstrates an incorrectly implemented fuzz test function that returns a value. Go's fuzzing framework requires that fuzz target functions do not return values, and this test case deliberately violates that requirement to demonstrate the validation error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_return.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
func Fuzz_returnErr(f *testing.F) {
	f.Add("hello, validation!")
	f.Fuzz(func(t *testing.T, in string) string {
		return in
	})
}
```

----------------------------------------

TITLE: Implementing Quote Functions in Go
DESCRIPTION: Defines four functions in the quote package that return various sayings and proverbs. The functions include Hello() which returns a greeting, Glass() which returns a phrase about eating glass, Go() which returns a Go programming proverb, and Opt() which returns an optimization truth.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180628003336-dd9747d19b04.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

import "rsc.io/sampler"

AN EVEN WORSE CHANGE!

// Hello returns a greeting.
func Hello() string {
	return sampler.Hello()
}

// Glass returns a useful phrase for world travelers.
func Glass() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return "I can eat glass and it doesn't hurt me."
}

// Go returns a Go proverb.
func Go() string {
	return "Don't communicate by sharing memory, share memory by communicating."
}

// Opt returns an optimization truth.
func Opt() string {
	// Wisdom from ken.
	return "If a program is too slow, it must have a loop."
}
```

----------------------------------------

TITLE: Configuring Go Environment and Testing Module Download - bash
DESCRIPTION: This bash snippet sets required Go module environment variables, then attempts to download a module known to be missing to provoke a controlled error, followed by downloading a module that exists. It depends on a Go installation (with access to `go` commands) and certain test modules on vcs-test.golang.org. Parameters like GO111MODULE enable modules, GOPROXY disables proxy use, and GOSUMDB disables sum database verification. Expected outputs are proper handling of a missing module (with an error check on stderr) and a successful fetch for an existing module, serving as regression protection for module handling bugs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_missing_repo.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# Regression test for golang.org/issue/34094: modules hosted within gitlab.com
# subgroups could not be fetched because the server returned bogus go-import
# tags for prefixes of the module path.

[short] skip
[!git] skip

env GO111MODULE=on
env GOPROXY=direct
env GOSUMDB=off

! go mod download vcs-test.golang.org/go/missingrepo/missingrepo-git@latest
stderr 'vcs-test.golang.org/go/missingrepo/missingrepo-git: git ls-remote .*: exit status .*'

go mod download vcs-test.golang.org/go/missingrepo/missingrepo-git/notmissing@latest
```

----------------------------------------

TITLE: Defining the 'x' Go Module
DESCRIPTION: This `go.mod` file defines a Go module named 'x'. It serves as the base module definition for the first test case. The shell script modifies this file to add specific dependencies and replacements before building the binary.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_modinfo.txt#2025-04-22_snippet_2

LANGUAGE: gomod
CODE:
```
-- x/go.mod --
module x
```

----------------------------------------

TITLE: Implementing Time Comparison Utility in Go
DESCRIPTION: A Go program that compares two timestamps stored in JSON format. It's used to verify if the mtime of cgo remains unchanged after the test operation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_install_cgo.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"time"
)


func main() {
	var t1 time.Time
	b1, err := os.ReadFile(os.Args[1])
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if err := json.Unmarshal(b1, &t1); err != nil  {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}

	var t2 time.Time
	b2, err := os.ReadFile(os.Args[2])
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if err := json.Unmarshal(b2, &t2); err != nil  {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}

	if !t1.Equal(t2) {
		fmt.Fprintf(os.Stderr, "time in %v (%v) is not the same as time in %v (%v)", os.Args[1], t1, os.Args[2], t2)
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: Panic-inducing Fuzz Test in Go
DESCRIPTION: Shows how to implement a fuzz test that triggers a panic with nil value.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package panic_fuzz

import "testing"

func Fuzz_panic(f *testing.F) {
    panic(nil)
}
```

----------------------------------------

TITLE: Removing Toolchain Directive
DESCRIPTION: Sets the toolchain to 'none', effectively removing the directive, and verifies its absence.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_toolchain.txt#2025-04-22_snippet_4

LANGUAGE: Shell
CODE:
```
go mod edit -toolchain=none
! grep toolchain go.mod
```

----------------------------------------

TITLE: Testing Go List Command with Package Patterns
DESCRIPTION: A series of shell commands testing the 'go list' functionality with various package patterns. It includes tests for single and multiple patterns, correct package identification, and error handling for non-existent files or directories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_ambiguous_path.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
# Ensures that we can correctly list package patterns ending in '.go'.
# See golang.org/issue/34653.

# A single pattern for a package ending in '.go'.
go list ./foo.go
stdout '^test/foo.go$'

# Multiple patterns for packages including one ending in '.go'.
go list ./bar ./foo.go
stdout '^test/bar$'
stdout '^test/foo.go$'

# A single pattern for a Go file.
go list ./a.go
stdout '^command-line-arguments$'

# A single typo-ed pattern for a Go file. This should
# treat the wrong pattern as if it were a package.
! go list ./foo.go/b.go
stderr '^stat .*[/\\]foo\.go[/\\]b\.go: directory not found$'

# Multiple patterns for Go files with a typo. This should
# treat the wrong pattern as if it were a nonexistent file.
! go list ./foo.go/a.go ./foo.go/b.go
[GOOS:plan9] stderr 'stat ./foo.go/b.go: ''./foo.go/b.go'' does not exist'
[GOOS:windows] stderr './foo.go/b.go: The system cannot find the file specified'
[!GOOS:plan9] [!GOOS:windows] stderr './foo.go/b.go: no such file or directory'
```

----------------------------------------

TITLE: Setting up environment and copying original files
DESCRIPTION: Sets the GOFLAGS environment variable to use an alternate mod file and creates copies of the original go.mod and go.sum files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GOFLAGS=-modfile=go.alt.mod
cp go.mod go.mod.orig
cp go.sum go.sum.orig
```

----------------------------------------

TITLE: Go Module with External Dependencies
DESCRIPTION: A Go program that imports an external module and uses the runtime/debug package to print build information including module dependencies. It also includes a go:generate directive to create a file during code generation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
//go:generate touch gen.txt

package main

import (
	"fmt"
	"os"
	"runtime/debug"

	_ "example.com/version"
)

func main() {
	info, ok := debug.ReadBuildInfo()
	if !ok {
		panic("missing build info")
	}
	fmt.Fprintf(os.Stdout, "path is %s\n", info.Path)
	fmt.Fprintf(os.Stdout, "main is %s %s\n", info.Main.Path, info.Main.Version)
	for _, m := range info.Deps {
		fmt.Fprintf(os.Stdout, "using %s %s\n", m.Path, m.Version)
	}
}
```

----------------------------------------

TITLE: Adding custom identifier support to text/scanner package
DESCRIPTION: Enhances the Scanner struct in the text/scanner package with an IsIdentRune function field, allowing for customization of what characters are considered valid in identifiers during scanning.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_32

LANGUAGE: go
CODE:
```
type Scanner struct {
    IsIdentRune func(int32, int) bool
    // other fields not shown
}
```

----------------------------------------

TITLE: Testing Go List Command for Import Errors
DESCRIPTION: This snippet uses the 'go list' command to check if line numbers are included in module import errors. It expects the output to include the file path, line number, and specific error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_info_err.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go list -e -mod=mod -deps -f '{{with .Error}}{{.Pos}}: {{.Err}}{{end}}' ./main
stdout '^bad[/\\]bad.go:3:8: malformed import path "🐧.example.com/string": invalid char ''🐧''$'
```

----------------------------------------

TITLE: Defining Go Module 'issue.56370'
DESCRIPTION: This `go.mod` file defines a Go module named 'issue.56370' and specifies that it requires Go version 1.20 or later. It serves as the root configuration for the project's dependencies and module path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_race_issue56370.txt#2025-04-22_snippet_1

LANGUAGE: go-mod
CODE:
```
-- go.mod --
module issue.56370

go 1.20
```

----------------------------------------

TITLE: Go Get with Multiple Retractions
DESCRIPTION: This snippet checks that 'go get' reports only the first retraction to avoid being overly verbose.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_12

LANGUAGE: go
CODE:
```
go get example.com/retract/rationale@v1.0.0-order
stderr '^go: warning: example.com/retract/rationale@v1.0.0-order: retracted by module author: degenerate range$'
go get example.com/retract/rationale@v1.0.1-order
stderr '^go: warning: example.com/retract/rationale@v1.0.1-order: retracted by module author: single version$'
```

----------------------------------------

TITLE: Go Module Download with Commit Hash (GOPROXY=direct)
DESCRIPTION: Downloads a module using a commit hash when GOPROXY is set to 'direct'. This test checks if the go command can re-resolve the commit to the highest appropriate pseudo-version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_pseudo_cache.txt#_snippet_2

LANGUAGE: Go
CODE:
```
env GOPROXY=direct
go mod download -json golang.org/x/text@a1b916ed6726
stdout '"Version": "v0.3.1-0.20171215141712-a1b916ed6726",'
```

----------------------------------------

TITLE: Testing Short Deprecation Message Display in Go Modules
DESCRIPTION: Tests how 'go get' handles a short single-line deprecation message, ensuring it displays the full message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go get short
stderr '^go: module short is deprecated: short$'
go list -m -u -f '{{.Deprecated}}' short
stdout '^short$'
```

----------------------------------------

TITLE: Downgraded Dependencies Go Module
DESCRIPTION: go.mod file after downgrading dependencies, showing indirect dependencies on golang.org/x/text and rsc.io/quote
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_changes.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module m

go 1.16

require (
	golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c // indirect
	rsc.io/quote v1.3.0 // indirect
)
```

----------------------------------------

TITLE: Defining Main Package with Conditional Build Tag
DESCRIPTION: Defines the main package with a conditional build tag and imports the m1 module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goline_order.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
//go:build usem1

package p

import _ "m1"
```

----------------------------------------

TITLE: Running Benchmark Test Outside GOPATH in Go
DESCRIPTION: This script copies a benchmark test file outside the GOPATH and runs the benchmark using the go test command. It checks for specific output patterns to ensure the test runs correctly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_benchmark_labels.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
cp $GOPATH/src/standalone_benchmark_test.go $WORK/tmp/standalone_benchmark_test.go
go test -run '^$' -bench . $WORK/tmp/standalone_benchmark_test.go
stdout '^goos: '$GOOS
stdout '^goarch: '$GOARCH
! stdout '^pkg:'
! stderr '^pkg:'
```

----------------------------------------

TITLE: Pruned Dependency Module
DESCRIPTION: A Go module file for the 'pruned' dependency which requires version 0.2.0 of the 'deleted' module where the package no longer exists.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
module example.net/pruned

go 1.17

require example.net/deleted v0.2.0
```

----------------------------------------

TITLE: Checking Dependencies in Test Mode
DESCRIPTION: This command uses 'go list -test' to check if vendored transitive dependencies of test imports appear in the Deps field with appropriate vendor prefixes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/std_vendor.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go list -test -f '{{.Deps}}'
```

----------------------------------------

TITLE: Building Package and Verifying Compilation
DESCRIPTION: Builds a package and verifies that compilation occurs. It sets up a clean GOCACHE, runs the build with verbose output, and checks for compilation-related messages in the stderr.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
env GOCACHE=$WORK/gocache

go build -x golang.org/x/text/language
stderr 'compile|cp|gccgo .*language\.a$'

go list -f '{{.Stale}}' golang.org/x/text/language
stdout ^false
```

----------------------------------------

TITLE: Migrating to Go Modules with v0.1.0 Tag
DESCRIPTION: Removes the README file, adds a go.mod file to establish the module, commits the changes, and tags it with v0.1.0 plus build metadata.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/odd-tags.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
git rm -r README.txt
git add go.mod
git commit -m 'migrate to Go modules'
git tag 'v0.1.0+build-metadata'
```

----------------------------------------

TITLE: Expected Module State After Tool Removal
DESCRIPTION: Expected go.mod state after removing the tool but keeping the dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tool.txt#2025-04-22_snippet_6

LANGUAGE: plaintext
CODE:
```
module example.com/foo

go 1.24

require example.com/tools v1.1.0 // indirect
```

----------------------------------------

TITLE: Defining Replacement Go Module
DESCRIPTION: This go.mod file defines the replacement module for 'example.com/mainmoda', which is used in the replacement directive of other modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_main_module.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.com/mainmoda
go 1.18
```

----------------------------------------

TITLE: Initializing Go Module and Verifying Tidy State
DESCRIPTION: This snippet copies the original go.mod file, runs go mod tidy, and compares the result with the original to ensure no changes were made.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect_pruned.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
cp go.mod go.mod.orig
go mod tidy
cmp go.mod.orig go.mod
```

----------------------------------------

TITLE: Recursive Go Work Usage Error Handling
DESCRIPTION: This snippet shows an example of using 'go work use -r' command. It demonstrates the expected error when a non-directory is supplied to the command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_only_dirs.txt#_snippet_1

LANGUAGE: Go
CODE:
```
! go work use -r qux
stderr '^go: qux is not a directory'
```

----------------------------------------

TITLE: IP Protocol Constants in Go Syscall Package for darwin-arm64
DESCRIPTION: Constants that define IP protocol numbers for various networking protocols. These are used in socket programming to specify the protocol for network communications.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_68

LANGUAGE: Go
CODE:
```
const IPPROTO_3PC = 34
const IPPROTO_3PC ideal-int
const IPPROTO_ADFS = 68
const IPPROTO_ADFS ideal-int
const IPPROTO_AH = 51
const IPPROTO_AH ideal-int
const IPPROTO_AHIP = 61
const IPPROTO_AHIP ideal-int
const IPPROTO_APES = 99
const IPPROTO_APES ideal-int
const IPPROTO_ARGUS = 13
const IPPROTO_ARGUS ideal-int
const IPPROTO_AX25 = 93
const IPPROTO_AX25 ideal-int
const IPPROTO_BHA = 49
const IPPROTO_BHA ideal-int
const IPPROTO_BLT = 30
const IPPROTO_BLT ideal-int
const IPPROTO_BRSATMON = 76
const IPPROTO_BRSATMON ideal-int
const IPPROTO_CFTP = 62
const IPPROTO_CFTP ideal-int
const IPPROTO_CHAOS = 16
const IPPROTO_CHAOS ideal-int
const IPPROTO_CMTP = 38
const IPPROTO_CMTP ideal-int
const IPPROTO_CPHB = 73
const IPPROTO_CPHB ideal-int
const IPPROTO_CPNX = 72
const IPPROTO_CPNX ideal-int
const IPPROTO_DDP = 37
const IPPROTO_DDP ideal-int
const IPPROTO_DGP = 86
const IPPROTO_DGP ideal-int
const IPPROTO_DIVERT = 254
const IPPROTO_DIVERT ideal-int
const IPPROTO_DONE = 257
const IPPROTO_DONE ideal-int
const IPPROTO_DSTOPTS = 60
const IPPROTO_DSTOPTS ideal-int
const IPPROTO_EGP = 8
const IPPROTO_EGP ideal-int
const IPPROTO_EMCON = 14
const IPPROTO_EMCON ideal-int
const IPPROTO_ENCAP = 98
const IPPROTO_ENCAP ideal-int
const IPPROTO_EON = 80
const IPPROTO_EON ideal-int
const IPPROTO_ESP = 50
const IPPROTO_ESP ideal-int
const IPPROTO_ETHERIP = 97
const IPPROTO_ETHERIP ideal-int
const IPPROTO_FRAGMENT = 44
const IPPROTO_FRAGMENT ideal-int
const IPPROTO_GGP = 3
const IPPROTO_GGP ideal-int
const IPPROTO_GMTP = 100
const IPPROTO_GMTP ideal-int
const IPPROTO_GRE = 47
const IPPROTO_GRE ideal-int
const IPPROTO_HELLO = 63
const IPPROTO_HELLO ideal-int
const IPPROTO_HMP = 20
const IPPROTO_HMP ideal-int
const IPPROTO_HOPOPTS = 0
const IPPROTO_HOPOPTS ideal-int
const IPPROTO_ICMP = 1
const IPPROTO_ICMP ideal-int
const IPPROTO_ICMPV6 = 58
const IPPROTO_ICMPV6 ideal-int
const IPPROTO_IDP = 22
const IPPROTO_IDP ideal-int
const IPPROTO_IDPR = 35
const IPPROTO_IDPR ideal-int
const IPPROTO_IDRP = 45
const IPPROTO_IDRP ideal-int
const IPPROTO_IGMP = 2
const IPPROTO_IGMP ideal-int
const IPPROTO_IGP = 85
const IPPROTO_IGP ideal-int
const IPPROTO_IGRP = 88
const IPPROTO_IGRP ideal-int
const IPPROTO_IL = 40
```

----------------------------------------

TITLE: Socket Control Constants - Darwin ARM64
DESCRIPTION: Socket control message and operation constants for Darwin ARM64. Includes definitions for socket options and control operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_94

LANGUAGE: Go
CODE:
```
const (
    SCM_CREDS = 3
    SCM_RIGHTS = 1
    SCM_TIMESTAMP = 2
    SCM_TIMESTAMP_MONOTONIC = 4
    SIOCADDMULTI = 2149607729
    SIOCAIFADDR = 2151704858
    // ... additional socket constants
)
```

----------------------------------------

TITLE: Empty In-Package Test File
DESCRIPTION: An empty test file within the package. This is part of the test case to verify coverage reporting works with both in-package and external tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_extra_test.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p
```

----------------------------------------

TITLE: Package B1 Implementation
DESCRIPTION: Simple implementation of package b v0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package b
```

----------------------------------------

TITLE: Testing GOTOOLCHAIN=local Behavior
DESCRIPTION: Tests how GOTOOLCHAIN=local enforces using only the local toolchain without switching, causing errors when dependencies require newer versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
# GOTOOLCHAIN=local should NOT run the newer toolchain
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get rsc.io/needgo121 rsc.io/needgo122 rsc.io/needgo123 rsc.io/needall
! stderr switching
stderr 'rsc.io/needgo122@v0.0.1 requires go >= 1.22'
stderr 'rsc.io/needgo123@v0.0.1 requires go >= 1.23'
stderr 'rsc.io/needall@v0.0.1 requires go >= 1.23'
stderr 'requires go >= 1.23'
! stderr 'requires go >= 1.21' # that's us!
cmp go.mod go.mod.new
```

----------------------------------------

TITLE: Go Module in 'testdata' Directory
DESCRIPTION: A Go source file placed in a 'testdata' directory that imports 'rsc.io/quote' to test dependency management in special directories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_in_testdata_dir.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package foo

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Defining a Go Module with Legacy Go Version
DESCRIPTION: This go.mod file defines a module using Go version 1.0 and requires the golang.org/x/text package. It demonstrates how very old Go versions can be specified in module files for compatibility testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_oldgo.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example.com/legacy/go1

go 1.0

require golang.org/x/text v0.3.0
```

----------------------------------------

TITLE: Vendored Strings Package Definition
DESCRIPTION: A simple Go package that defines a Msg variable with the 'hello, world' string, used as a vendored dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_vendor.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package strings

var Msg = "hello, world"
```

----------------------------------------

TITLE: Module Q v1.0.0 Implementation
DESCRIPTION: Package q implementation version 1.0.0 with PrintVersion function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package q

import "fmt"

func PrintVersion() {
	fmt.Println("version 1.0.0")
}
```

----------------------------------------

TITLE: AST Management in Go
DESCRIPTION: This section encompasses function and type declarations related to Abstract Syntax Tree (AST) manipulation. Key functions include IsGenerated, which checks if a file is generated, and NewPackage, which is deprecated. The section also includes details on the File struct and deprecated types like Importer, Object, Package, and Scope.
SOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
pkg go/ast, func IsGenerated(*File) bool #28089
```

LANGUAGE: Go
CODE:
```
pkg go/ast, func NewPackage //deprecated #52463
```

LANGUAGE: Go
CODE:
```
pkg go/ast, type File struct, GoVersion string #59033
```

LANGUAGE: Go
CODE:
```
pkg go/ast, type Importer //deprecated #52463
```

LANGUAGE: Go
CODE:
```
pkg go/ast, type Object //deprecated #52463
```

LANGUAGE: Go
CODE:
```
pkg go/ast, type Package //deprecated #52463
```

LANGUAGE: Go
CODE:
```
pkg go/ast, type Scope //deprecated #52463
```

----------------------------------------

TITLE: Listing Module Without Showing Retraction using Go List
DESCRIPTION: Validates that 'go list -m' does not produce retraction-related output when attempting to list module information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
# 'go list -m' does not show retraction.\ngo list -m -f '{{with .Retracted}}retracted{{end}}' example.com/retract\n! stdout .
```

----------------------------------------

TITLE: Fuzzing Test with Execution Counter
DESCRIPTION: Implements a fuzzing test that creates a unique file for each execution to track the number of times the fuzzer runs. Uses process ID and counter for unique filenames.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_fuzztime.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
func FuzzTestCount(f *testing.F) {
	pid := os.Getpid()
	n := 0
	f.Fuzz(func(t *testing.T, _ []byte) {
		name := fmt.Sprintf("count/%v.%d", pid, n)
		if err := os.WriteFile(name, nil, 0666); err != nil {
			t.Fatal(err)
		}
		n++
	})
}
```

----------------------------------------

TITLE: Defining Routing Table Constants (RTAX_*, RTA_*) in Go for darwin-arm64
DESCRIPTION: Constants for routing table management and attributes. These constants are used for accessing and modifying routing tables, specifying routing addresses, gateways, and network masks in routing operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_91

LANGUAGE: Go
CODE:
```
const RTAX_AUTHOR = 6
const RTAX_AUTHOR ideal-int
const RTAX_BRD = 7
const RTAX_BRD ideal-int
const RTAX_DST = 0
const RTAX_DST ideal-int
const RTAX_GATEWAY = 1
const RTAX_GATEWAY ideal-int
const RTAX_GENMASK = 3
const RTAX_GENMASK ideal-int
const RTAX_IFA = 5
const RTAX_IFA ideal-int
const RTAX_IFP = 4
const RTAX_IFP ideal-int
const RTAX_MAX = 8
const RTAX_MAX ideal-int
const RTAX_NETMASK = 2
const RTAX_NETMASK ideal-int
const RTA_AUTHOR = 64
const RTA_AUTHOR ideal-int
const RTA_BRD = 128
const RTA_BRD ideal-int
const RTA_DST = 1
const RTA_DST ideal-int
const RTA_GATEWAY = 2
const RTA_GATEWAY ideal-int
const RTA_GENMASK = 8
```

----------------------------------------

TITLE: Adding ELF File Handling Functions in Go
DESCRIPTION: New constants, methods, and types for handling ELF (Executable and Linkable Format) files in the debug/elf package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_11

LANGUAGE: Go
CODE:
```
const VER_FLG_BASE = 1
const VER_FLG_INFO = 4
const VER_FLG_WEAK = 2

type DynamicVersion struct {
    Deps []string
    Flags DynamicVersionFlag
    Name string
    Index uint16
}

type DynamicVersionDep struct {
    Dep string
    Flags DynamicVersionFlag
    Index uint16
}

type DynamicVersionFlag uint16

type DynamicVersionNeed struct {
    Name string
    Needs []DynamicVersionDep
}

type Symbol struct {
    HasVersion bool
    VersionIndex VersionIndex
}

type VersionIndex uint16
```

----------------------------------------

TITLE: Conditional Import with Build Constraint in Go
DESCRIPTION: A Go file with a build constraint 'abc' that imports module 'y'. This file will only be included in the build when the 'abc' build tag is specified. Note the non-standard package name 'mMmMmMm'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
// +build abc

package mMmMmMm

import _ "y"
```

----------------------------------------

TITLE: Testing Toolchain Switching with -C Flag
DESCRIPTION: Tests that the -C flag for changing directories is handled correctly during toolchain switching.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_11

LANGUAGE: shell
CODE:
```
# The -C flag should not happen more than once due to switching.
mkdir dir dir/dir
cp go.mod.new go.mod
cp go.mod.new dir/go.mod
cp go.mod.new dir/dir/go.mod
cp p.go dir/p.go
cp p.go dir/dir/p.go
go get -C dir rsc.io/needgo124
stderr '^go: rsc.io/needgo124@v0.0.1 requires go >= 1.24; switching to go1.24rc1$'
stderr '^go: upgraded go 1.1 => 1.24$'
! stderr '^go: added toolchain1$'
cmp go.mod.new go.mod
cmp go.mod.new dir/dir/go.mod
grep 'go 1.24$' dir/go.mod
```

----------------------------------------

TITLE: Rational Float Precision Query - math/big - Go
DESCRIPTION: FloatPrec() (int, bool) is a method on *Rat, exposing the float precision and whether the conversion is exact. Used to inspect the bit size needed for floating-point representations of rationals.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_19

LANGUAGE: Go
CODE:
```
func (r *Rat) FloatPrec() (int, bool)
```

----------------------------------------

TITLE: Syslog Priority Constants
DESCRIPTION: System log priority level constants used in the log/syslog package for Darwin ARM64. These constants define various logging levels and facilities for system logging.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_48

LANGUAGE: Go
CODE:
```
const (
    LOG_EMERG = 0
    LOG_ALERT = 1
    LOG_CRIT = 2
    LOG_ERR = 3
    LOG_WARNING = 4
    LOG_NOTICE = 5
    LOG_INFO = 6
    LOG_DEBUG = 7
)
```

----------------------------------------

TITLE: Defining Non-Main Go Package
DESCRIPTION: This snippet defines a non-main Go package named 'nonmain'. It includes a package comment describing that it is not a main package, which is relevant to the test cases in the file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_nonmain.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
// Package nonmain is not a main package.
package nonmain
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines the module name and Go version for the project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_outside_module.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module example.com/my-module

go 1.20
```

----------------------------------------

TITLE: Configuring Go Import Path with Mercurial VCS
DESCRIPTION: HTML meta tag that specifies the import path for a Go module using Mercurial (hg) version control system. Sets up vcs-test.golang.org as the import source with a custom Mercurial repository path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/custom-hg-hello.txt#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<meta name="go-import" content="vcs-test.golang.org/go/custom-hg-hello hg https://vcs-test.golang.org/hg/custom-hg-hello">
```

----------------------------------------

TITLE: Defining Go Module with Dependency
DESCRIPTION: This go.mod file defines the module 'example.com/mainmoda' with a dependency on 'example.com/dep' and a local replacement for that dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_main_module.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/mainmoda

go 1.18

require example.com/dep v1.0.0
replace example.com/dep => ../dep
```

----------------------------------------

TITLE: Configuring Module 'n' with Dependencies
DESCRIPTION: This go.mod file for module 'n' specifies its dependencies and includes a replace directive for 'example.com/dep'. This replace will also be overridden by the one in go.work.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict_override.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com/n

require example.com/dep v1.0.0
replace example.com/dep => ./dep2
```

----------------------------------------

TITLE: Detecting Sumdb Timeline Inconsistency in Go
DESCRIPTION: This snippet demonstrates how switching to a truthful sumdb detects timeline inconsistency, resulting in a security error indicating sumdb server misbehavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
cp go.mod.orig go.mod
env GOSUMDB=$sumdb
! go get rsc.io/fortune
stderr 'SECURITY ERROR\ngo.sum database server misbehavior detected!'
stderr 'proof of misbehavior:'
```

----------------------------------------

TITLE: Creating a Main Package Entry Point - Go
DESCRIPTION: This Go program specifies a main package with a minimal main function, establishing an executable program. No functionality is present; it acts as a skeletal entry point, often required for tools or command-line applications in Go projects.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main\n\nfunc main(){}\n
```

----------------------------------------

TITLE: Testing Repeated Path Error in go.work File
DESCRIPTION: Copies a go.work file with a repeated path and verifies the error message format when running 'go list'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
cp go.work.repeated.txt go.work
! go list
stderr '^go.work:4: path .* appears multiple times in workspace$'
```

----------------------------------------

TITLE: Vendored Package Test with Dot Import
DESCRIPTION: Test file for tx2 package using dot import syntax to access exported variables.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_list_issue11977.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package tx2_test

import . "vendor.org/tx2"
import "testing"

var Found = Exported

func TestNop(t *testing.T) {}
```

----------------------------------------

TITLE: Defining a Simple Package Documentation for Testing
DESCRIPTION: Defines a Go package 'y' with a simple package comment to test documentation discovery. This is the primary test package for the go doc command tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
// Package y is the next to last package of the alphabet.
package y
```

----------------------------------------

TITLE: Importing Dependencies in Go
DESCRIPTION: This Go file imports example.net/a, example.net/b, and example.net/c as blank imports, which are typically used for side effects.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package example

import (
	_ "example.net/a"
	_ "example.net/b"
	_ "example.net/c"
)
```

----------------------------------------

TITLE: Testing Go Module JSON Export
DESCRIPTION: Tests the 'go mod edit -json' functionality, which outputs the module file information in a structured JSON format. It validates JSON output in various scenarios including with retractions that have rationales, with deprecation notices, and with empty module files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
# go mod edit -json
go mod edit -json
cmpenv stdout $WORK/go.mod.json

# go mod edit -json (retractions with rationales)
go mod edit -json $WORK/go.mod.retractrationale
cmp stdout $WORK/go.mod.retractrationale.json

# go mod edit -json (deprecation)
go mod edit -json $WORK/go.mod.deprecation
cmp stdout $WORK/go.mod.deprecation.json

# go mod edit -json (empty mod file)
go mod edit -json $WORK/go.mod.empty
cmp stdout $WORK/go.mod.empty.json
```

----------------------------------------

TITLE: Routing-related Structs for darwin-arm64
DESCRIPTION: Collection of routing-related structure definitions used for network routing operations on darwin-arm64, including route messages and metrics.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_131

LANGUAGE: go
CODE:
```
type RouteMessage struct { //deprecated
	Header RtMsghdr
	Data []uint8
}

type RoutingMessage interface { //deprecated
	unexported methods
}

type RtMetrics struct {
	Locks uint32
	Mtu uint32
	Hopcount uint32
	Expire int32
	Recvpipe uint32
	Sendpipe uint32
	Ssthresh uint32
	Rtt uint32
	Rttvar uint32
	Pksent uint32
	Filler [4]uint32
}

type RtMsghdr struct {
	Msglen uint16
	Version uint8
	Type uint8
	Index uint16
	Pad_cgo_0 [2]uint8
	Flags int32
	Addrs int32
	Pid int32
	Seq int32
	Errno int32
	Use int32
	Inits uint32
	Rmx RtMetrics
}
```

----------------------------------------

TITLE: Main Package with Case-Insensitive Import Collision
DESCRIPTION: A Go file that imports two modules with names that differ only by case (example.com/Foo and example.com/foo), which will cause a build error in Go.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_collision.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

import (
	_ "example.com/Foo"
	_ "example.com/foo"
)

func main() {}
```

----------------------------------------

TITLE: Implementing Fuzz Test with Interrupt Simulation in Go
DESCRIPTION: A fuzz test implementation that simulates Ctrl-C interruption by sending SIGINT signals to parent and current test processes. The test retrieves process IDs, sets up environment variables for worker processes, and implements interrupt signal handling with delays to prevent CPU overuse.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test2json_interrupt.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package example_test

import (
	"fmt"
	"os"
	"strconv"
	"testing"
	"strings"
	"time"
)

func FuzzInterrupt(f *testing.F) {
	pids := os.Getenv("GO_TEST_INTERRUPT_PIDS")
	if pids == "" {
		// This is the main test process.
		// Set the environment variable for fuzz workers.
		pid := os.Getpid()
		ppid := os.Getppid()
		os.Setenv("GO_TEST_INTERRUPT_PIDS", fmt.Sprintf("%d,%d", ppid, pid))
	}

	sentInterrupt := false
	f.Fuzz(func(t *testing.T, orig string) {
		if !sentInterrupt {
			// Simulate a ctrl-C on the keyboard by sending SIGINT
			// to the main test process and its parent.
			for _, pid := range strings.Split(pids, ",") {
				i, err := strconv.Atoi(pid)
				if err != nil {
					t.Fatal(err)
				}
				if p, err := os.FindProcess(i); err == nil {
					p.Signal(os.Interrupt)
					sentInterrupt = true // Only send interrupts once.
				}
			}
		}
		time.Sleep(1 * time.Millisecond)  // Delay the fuzzer a bit to avoid wasting CPU.
	})
}
```

----------------------------------------

TITLE: Manual go.mod Editing with Commit Hash
DESCRIPTION: Tests that manually editing go.mod with a commit hash using 'go mod edit' does not interpret the commit as a version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_8

LANGUAGE: shell
CODE:
```
go mod edit -require rsc.io/quote@23179ee
grep 'rsc.io/quote 23179ee' go.mod
```

----------------------------------------

TITLE: Defining Go module and package
DESCRIPTION: Defines a simple Go module 'x' and a package that imports github.com/rsc/legacytest.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_14

LANGUAGE: go
CODE:
```
module x
```

LANGUAGE: go
CODE:
```
package x
import "github.com/rsc/legacytest"
```

----------------------------------------

TITLE: Declaring Module in go.mod File
DESCRIPTION: Standard Go module declaration file that defines the module path as example.com/nest/sub. This is the official way to declare a module in Go.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_sub_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/nest/sub
```

----------------------------------------

TITLE: Package 'a' with Import
DESCRIPTION: Defines package 'a' that imports package 'b' from the same module, creating a dependency relationship.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_single_error.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package a

import "example.com/b"
```

----------------------------------------

TITLE: Listing Standard Cmd Packages with Vendored Dependencies in Shell
DESCRIPTION: This 'go list' command highlights the inclusion of vendored dependencies as part of 'cmd' when reporting standard cmd packages, demonstrating Go’s treatment of internal vendoring.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_std.txt#2025-04-22_snippet_8

LANGUAGE: shell
CODE:
```
go list -f '{{if .Standard}}{{.ImportPath}}{{end}}' cmd
```

----------------------------------------

TITLE: Deprecations in syscall package for darwin-amd64-cgo
DESCRIPTION: Lists deprecated functions and types in the syscall package for darwin-amd64-cgo architecture.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_31

LANGUAGE: Go
CODE:
```
pkg syscall (darwin-amd64-cgo), func BpfBuflen //deprecated
pkg syscall (darwin-amd64-cgo), func BpfDatalink //deprecated
pkg syscall (darwin-amd64-cgo), func BpfHeadercmpl //deprecated
pkg syscall (darwin-amd64-cgo), func BpfInterface //deprecated
pkg syscall (darwin-amd64-cgo), func BpfJump //deprecated
pkg syscall (darwin-amd64-cgo), func BpfStats //deprecated
pkg syscall (darwin-amd64-cgo), func BpfStmt //deprecated
pkg syscall (darwin-amd64-cgo), func BpfTimeout //deprecated
pkg syscall (darwin-amd64-cgo), func CheckBpfVersion //deprecated
pkg syscall (darwin-amd64-cgo), func FlushBpf //deprecated
pkg syscall (darwin-amd64-cgo), func ParseRoutingMessage //deprecated
pkg syscall (darwin-amd64-cgo), func ParseRoutingSockaddr //deprecated
pkg syscall (darwin-amd64-cgo), func RouteRIB //deprecated
pkg syscall (darwin-amd64-cgo), func SetBpf //deprecated
pkg syscall (darwin-amd64-cgo), func SetBpfBuflen //deprecated
pkg syscall (darwin-amd64-cgo), func SetBpfDatalink //deprecated
pkg syscall (darwin-amd64-cgo), func SetBpfHeadercmpl //deprecated
pkg syscall (darwin-amd64-cgo), func SetBpfImmediate //deprecated
pkg syscall (darwin-amd64-cgo), func SetBpfInterface //deprecated
pkg syscall (darwin-amd64-cgo), func SetBpfPromisc //deprecated
pkg syscall (darwin-amd64-cgo), func SetBpfTimeout //deprecated
pkg syscall (darwin-amd64-cgo), func StringSlicePtr //deprecated
pkg syscall (darwin-amd64-cgo), type InterfaceAddrMessage //deprecated
pkg syscall (darwin-amd64-cgo), type InterfaceMessage //deprecated
pkg syscall (darwin-amd64-cgo), type InterfaceMulticastAddrMessage //deprecated
pkg syscall (darwin-amd64-cgo), type RouteMessage //deprecated
pkg syscall (darwin-amd64-cgo), type RoutingMessage //deprecated
```

----------------------------------------

TITLE: Adding RevocationList parsing and handling in Go's crypto/x509 package
DESCRIPTION: Introduces new functionality for parsing and handling certificate revocation lists (CRLs) in the crypto/x509 package. This includes methods for parsing, cloning, and checking signatures of revocation lists.
SOURCE: https://github.com/golang/go/blob/master/api/go1.19.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
func ParseRevocationList([]uint8) (*RevocationList, error)
method (*CertPool) Clone() *CertPool
method (*CertPool) Equal(*CertPool) bool
method (*RevocationList) CheckSignatureFrom(*Certificate) error

type RevocationList struct {
    AuthorityKeyId []uint8
    Extensions []pkix.Extension
    Issuer pkix.Name
    Raw []uint8
    RawIssuer []uint8
    RawTBSRevocationList []uint8
    Signature []uint8
}
```

----------------------------------------

TITLE: Testing Vendor Directory Contents
DESCRIPTION: This snippet checks the contents of the vendor directory, ensuring test dependencies are not copied and licenses are properly included.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
# Test dependencies should not be copied.
! exists vendor/x/testdata
! exists vendor/a/foo/bar/b/ignored.go
! exists vendor/a/foo/bar/b/main_test.go

# Licenses and other metadata for each module should be copied
# if any package within their module is copied.
exists vendor/a/foo/AUTHORS.txt
exists vendor/a/foo/CONTRIBUTORS
exists vendor/a/foo/LICENSE
exists vendor/a/foo/PATENTS
exists vendor/a/foo/COPYING
exists vendor/a/foo/COPYLEFT
exists vendor/x/NOTICE!
exists vendor/mysite/myname/mypkg/LICENSE.txt

! exists vendor/a/foo/licensed-to-kill
! exists vendor/w
! exists vendor/w/LICENSE
! exists vendor/x/x2
! exists vendor/x/x2/LICENSE
```

----------------------------------------

TITLE: Go Module Definition with Future Version Requirement
DESCRIPTION: A go.mod file defining a module named 'rsc.io/future' that requires Go version 1.999, which is a future version that doesn't exist yet.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_future_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module rsc.io/future
go 1.999
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module declaration for a Go submodule defining the module path using vcs-test.golang.org domain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/prefixtagtests.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/git/prefixtagtests.git/sub
```

----------------------------------------

TITLE: Defining Go Module for Major Version Suffix Test
DESCRIPTION: Creates a go.mod file defining the module and Go version for the test case.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_direct.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module example.com
go 1.13
```

----------------------------------------

TITLE: Defining Module 'd' in Go
DESCRIPTION: This go.mod file defines module 'd' without any dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_13

LANGUAGE: Go
CODE:
```
module example.net/d

go 1.16
```

----------------------------------------

TITLE: Testing Go 1.21 Feature Compatibility with go1.20 Build Constraint
DESCRIPTION: This snippet shows a Go program with a go1.20 build constraint that uses the 'max' function, which was introduced in Go 1.21. It tests the compiler's behavior when encountering a newer feature with an older build constraint in GOPATH mode.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue68658.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
//go:build go1.20

package p

import "fmt"

func main() {
    y := max(1, 2)  // max was added in Go 1.21
    fmt.Println(y)
}
```

----------------------------------------

TITLE: Main Package Import
DESCRIPTION: Example package importing the example.net/a dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_version_tooold.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package example

import "example.net/a"
```

----------------------------------------

TITLE: Testing Word Boundary Negation with \B in Go Regexps
DESCRIPTION: Tests the behavior of the \B assertion which matches positions that are not word boundaries. The tests include different patterns and string combinations to verify matching behavior.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_5

LANGUAGE: regexp
CODE:
```
\B
```

LANGUAGE: regexp
CODE:
```
^(?:\B)$
```

LANGUAGE: regexp
CODE:
```
^(?:\B)
```

LANGUAGE: regexp
CODE:
```
(?:\B)$
```

----------------------------------------

TITLE: Module A Configuration
DESCRIPTION: The go.mod file for module 'a' v0.1.0, requiring 'b' v0.1.0. This forms part of the dependency cycle in the test case.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module a

go 1.13

require b v0.1.0
```

----------------------------------------

TITLE: Defining Go Module with Version Mismatch
DESCRIPTION: This Go module definition for bad114 declares Go 1.13 but requires features from Go 1.14 or higher, creating a version mismatch.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
// Module bad114 requires Go 1.14 or higher, but declares Go 1.13.
module example.net/bad114

go 1.13
```

----------------------------------------

TITLE: Error Constants in Go Syscall Package for Darwin ARM64
DESCRIPTION: Error number constants (errno) used in system calls on Darwin ARM64. These constants represent different types of errors that can occur during system operations, such as file access errors, network errors, and resource limitation errors.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_144

LANGUAGE: Go
CODE:
```
const EALREADY = 37
const EAUTH = 80
const EAUTH Errno
const EBADARCH = 86
const EBADARCH Errno
const EBADEXEC = 85
const EBADEXEC Errno
const EBADF = 9
const EBADMACHO = 88
const EBADMACHO Errno
const EBADMSG = 94
const EBADMSG Errno
const EBADRPC = 72
const EBADRPC Errno
const EBUSY = 16
const ECANCELED = 89
const ECHILD = 10
```

----------------------------------------

TITLE: Defining Socket I/O Control Constants in Go for NetBSD ARM64
DESCRIPTION: This snippet defines constants for socket I/O control commands used in the NetBSD ARM64 syscall package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_145

LANGUAGE: Go
CODE:
```
const (
    SIOCADDMULTI = 2156947761
    SIOCADDRT = 2151182858
    SIOCAIFADDR = 2151704858
    SIOCALIFADDR = 2165860636
)
```

----------------------------------------

TITLE: Defining TCP Configuration Constants in Go for Darwin ARM64
DESCRIPTION: Constants defining TCP socket configuration options on Darwin ARM64 platform. These constants are used for configuring TCP socket behavior, including keepalive settings, window sizes, and other TCP-specific options.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_195

LANGUAGE: Go
CODE:
```
const TCP_CONNECTIONTIMEOUT = 32
const TCP_CONNECTIONTIMEOUT ideal-int
const TCP_ENABLE_ECN = 260
const TCP_ENABLE_ECN ideal-int
const TCP_KEEPALIVE = 16
const TCP_KEEPALIVE ideal-int
const TCP_KEEPCNT = 258
const TCP_KEEPCNT ideal-int
const TCP_KEEPINTVL = 257
const TCP_KEEPINTVL ideal-int
const TCP_MAXHLEN = 60
const TCP_MAXHLEN ideal-int
const TCP_MAXOLEN = 40
const TCP_MAXOLEN ideal-int
const TCP_MAXSEG = 2
const TCP_MAXSEG ideal-int
const TCP_MAXWIN = 65535
const TCP_MAXWIN ideal-int
const TCP_MAX_SACK = 4
const TCP_MAX_SACK ideal-int
const TCP_MAX_WINSHIFT = 14
const TCP_MAX_WINSHIFT ideal-int
const TCP_MINMSS = 216
const TCP_MINMSS ideal-int
const TCP_MSS = 512
const TCP_MSS ideal-int
const TCP_NOOPT = 8
const TCP_NOOPT ideal-int
const TCP_NOPUSH = 4
const TCP_NOPUSH ideal-int
const TCP_NOTSENT_LOWAT = 513
const TCP_NOTSENT_LOWAT ideal-int
const TCP_RXT_CONNDROPTIME = 128
const TCP_RXT_CONNDROPTIME ideal-int
const TCP_RXT_FINDROP = 256
const TCP_RXT_FINDROP ideal-int
const TCP_SENDMOREACKS = 259
const TCP_SENDMOREACKS ideal-int
```

----------------------------------------

TITLE: System Call Constants for darwin-arm64 in Go
DESCRIPTION: This snippet contains system call number definitions and other constants for the darwin-arm64 platform used in Go's syscall package. It includes values for system calls, file modes, structure sizes, and terminal I/O controls.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_110

LANGUAGE: Go
CODE:
```
// System call constants for darwin-arm64
const SYS___SEMWAIT_SIGNAL_NOCANCEL = 423
const SYS___SIGWAIT = 330
const SYS___SIGWAIT_NOCANCEL = 422
const SYS___SYSCTL = 202
const S_IEXEC = 64
const S_IFMT = 61440
const S_IFWHT = 57344
const S_IREAD = 256
const S_IRGRP = 32
const S_IROTH = 4
const S_IRWXG = 56
const S_IRWXO = 7
const S_IRWXU = 448
const S_ISTXT = 512
const S_IWGRP = 16
const S_IWOTH = 2
const S_IWRITE = 128
const S_IXGRP = 8
const S_IXOTH = 1

// Size constants for various system structures
const SizeofBpfHdr = 20
const SizeofBpfInsn = 8
const SizeofBpfProgram = 16
const SizeofBpfStat = 8
const SizeofBpfVersion = 4
const SizeofCmsghdr = 12
const SizeofICMPv6Filter = 32
const SizeofIPMreq = 8
const SizeofIPv6MTUInfo = 32
const SizeofIPv6Mreq = 20
const SizeofIfData = 96
const SizeofIfMsghdr = 112
const SizeofIfaMsghdr = 20
const SizeofIfmaMsghdr = 16
const SizeofIfmaMsghdr2 = 20
const SizeofInet4Pktinfo = 12
const SizeofInet6Pktinfo = 20
const SizeofLinger = 8
const SizeofMsghdr = 48
const SizeofRtMetrics = 56
const SizeofRtMsghdr = 92
const SizeofSockaddrAny = 108
const SizeofSockaddrDatalink = 20
const SizeofSockaddrInet4 = 16
const SizeofSockaddrInet6 = 28
const SizeofSockaddrUnix = 106

// Terminal I/O constants
const TCIFLUSH = 1
const TCIOFLUSH = 3
const TCOFLUSH = 2
const TCSAFLUSH = 2

// TCP related constants
const TCP_CONNECTIONTIMEOUT = 32
const TCP_ENABLE_ECN = 260
const TCP_KEEPALIVE = 16
const TCP_KEEPCNT = 258
const TCP_KEEPINTVL = 257
const TCP_MAXHLEN = 60
const TCP_MAXOLEN = 40
const TCP_MAXSEG = 2
const TCP_MAXWIN = 65535
const TCP_MAX_SACK = 4
const TCP_MAX_WINSHIFT = 14
const TCP_MINMSS = 216
const TCP_MSS = 512
const TCP_NOOPT = 8
const TCP_NOPUSH = 4
const TCP_NOTSENT_LOWAT = 513
const TCP_RXT_CONNDROPTIME = 128
const TCP_RXT_FINDROP = 256
const TCP_SENDMOREACKS = 259

// Terminal I/O control constants
const TIOCCBRK = 536900730
const TIOCCDTR = 536900728
const TIOCCONS = 2147775586
const TIOCDCDTIMESTAMP = 1074820184
const TIOCDRAIN = 536900702
const TIOCDSIMICROCODE = 536900693
const TIOCEXCL = 536900621
const TIOCEXT = 2147775584
const TIOCFLUSH = 2147775504
const TIOCGDRAINWAIT = 1074033750
const TIOCGETA = 1078490131
const TIOCGETD = 1074033690
const TIOCGPGRP = 1074033783
const TIOCGWINSZ = 1074295912
const TIOCIXOFF = 536900736
const TIOCIXON = 536900737
const TIOCMBIC = 2147775595
const TIOCMBIS = 2147775596
const TIOCMGDTRWAIT = 1074033754
const TIOCMGET = 1074033770
const TIOCMODG = 1074033667
const TIOCMODS = 2147775492
const TIOCMSDTRWAIT = 2147775579
```

----------------------------------------

TITLE: Go Module File Missing Go Version Directive
DESCRIPTION: A go.mod file that lacks the 'go' version directive, used to test automatic version addition.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_17

LANGUAGE: go
CODE:
```
module m

require (
	rsc.io/quote v1.5.2
	rsc.io/sampler v1.3.0 // indirect
	rsc.io/testonly v1.0.0 // indirect
)
```

----------------------------------------

TITLE: Testing Module Path Restrictions
DESCRIPTION: Tests that verify relative and absolute paths must be within the main module scope. Shows error cases for invalid path references.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_main.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go get ..
stderr '^go: \.\..*is not within module rooted at.*'
! go get $WORK
stderr '^go: '$WORK' is not within module rooted at.*'
! go get ../...
stderr '^go: \.\./.\.\..*is not within module rooted at.*'
! go get $WORK/...
stderr '^go: '$WORK'/... is not within module rooted at.*'
```

----------------------------------------

TITLE: Module B1 Definition
DESCRIPTION: Module definition for example.com/b v0.1.0 which requires example.com/c v0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.com/b

go 1.17

require example.com/c v0.1.0
```

----------------------------------------

TITLE: Main Package Definition
DESCRIPTION: Minimal main package implementation for testing purposes
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecate_install.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Defining Go Module for ABI Test
DESCRIPTION: This snippet defines the Go module for the ABI test program.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_ppc64_linker_funcs.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module abitest
```

----------------------------------------

TITLE: Defining Module A/X
DESCRIPTION: Specifies the module configuration for the 'example.com/a/x' module used to create ambiguous imports.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_10

LANGUAGE: Go
CODE:
```
module example.com/a/x
go 1.14
```

----------------------------------------

TITLE: Simple Go Package Declaration
DESCRIPTION: Simple Go package declaration for a package in the v2 directory structure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_23

LANGUAGE: go
CODE:
```
package q
```

----------------------------------------

TITLE: Go Source File with Unstable Import
DESCRIPTION: A Go source file that imports an unstable package from gopkg.in. This file is used to test Go's module resolution for unstable versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gopkg_unstable.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package x
import _ "gopkg.in/dummy.v2-unstable"
```

----------------------------------------

TITLE: Implementing Language Preference Detection in Go
DESCRIPTION: DefaultUserPrefs function that determines user language preferences by checking environment variables LC_ALL, LC_MESSAGES, and LANG in order of priority.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.99.99.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
func DefaultUserPrefs() []language.Tag {
    var prefs []language.Tag
    for _, k := range []string{"LC_ALL", "LC_MESSAGES", "LANG"} {
        if env := os.Getenv(k); env != "" {
            prefs = append(prefs, language.Make(env))
        }
    }
    return prefs
}
```

----------------------------------------

TITLE: Testing GOVCS Configuration Module Definition
DESCRIPTION: Basic Go module definition file declaring module 'm'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/govcs.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Package Definition and Import in Go
DESCRIPTION: This snippet defines a package 'p' with an empty function and imports another package 'coverdep/p1' for side-effects. It demonstrates basic package setup and the use case for underscore imports. Dependencies: Go packages specified must exist in the module's directory structure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_sync_atomic_import.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p

import _ "coverdep/p1"

func F() {
}
```

LANGUAGE: go
CODE:
```
package p1

import _ "errors"
```

----------------------------------------

TITLE: Testing Go Get with Multiple Module-Only Arguments
DESCRIPTION: A regression test for golang.org/issue/35317 that demonstrates using 'go get' with multiple module-only arguments at specific versions. The test creates a new module and attempts to fetch several dependencies simultaneously to verify that race conditions have been resolved.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_issue35317.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on
[short] skip

go mod init example.com
go get golang.org/x/text@v0.3.0 golang.org/x/internal@v0.1.0 golang.org/x/exp@none
```

----------------------------------------

TITLE: Running go vet on package with only test files
DESCRIPTION: This snippet shows running go vet on a package that contains only test files. It expects no error output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_4

LANGUAGE: Shell
CODE:
```
go vet m/onlytest
! stderr .
```

----------------------------------------

TITLE: Testing Go Version with Different GOTOOLCHAIN Settings
DESCRIPTION: This series of shell commands tests the behavior of 'go version' under various GOTOOLCHAIN settings and go.mod configurations. It verifies the correct toolchain selection based on environment variables and module settings.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_path.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
go version
stdout go1.21pre3

# GOTOOLCHAIN=go1.50.0
env GOTOOLCHAIN=go1.50.0
! go version
stderr 'running go1.50.0 from PATH'

# GOTOOLCHAIN=path with toolchain line
env GOTOOLCHAIN=local
go mod init m
go mod edit -toolchain=go1.50.0
grep go1.50.0 go.mod
env GOTOOLCHAIN=path
! go version
stderr 'running go1.50.0 from PATH'

# GOTOOLCHAIN=path with go line
env GOTOOLCHAIN=local
go mod edit -toolchain=none -go=1.50.0
grep 'go 1.50.0' go.mod
! grep toolchain go.mod
env GOTOOLCHAIN=path
! go version
stderr 'running go1.50.0 from PATH'

# GOTOOLCHAIN=auto with toolchain line
env GOTOOLCHAIN=local
go mod edit -toolchain=go1.50.0 -go=1.21
grep 'go 1.21$' go.mod
grep 'toolchain go1.50.0' go.mod
env GOTOOLCHAIN=auto
! go version
stderr 'running go1.50.0 from PATH'

# GOTOOLCHAIN=auto with go line
env GOTOOLCHAIN=local
go mod edit -toolchain=none -go=1.50.0
grep 'go 1.50.0$' go.mod
! grep toolchain go.mod
env GOTOOLCHAIN=auto
! go version
stderr 'running go1.50.0 from PATH'

# NewerToolchain should find Go 1.50.0.
env GOTOOLCHAIN=local
go mod edit -toolchain=none -go=1.21
grep 'go 1.21$' go.mod
! grep toolchain go.mod
env GOTOOLCHAIN=path
! go run rsc.io/fortune@v0.0.1
stderr 'running go1.50.0 from PATH'
```

----------------------------------------

TITLE: Accessing Verbose Help in Go CLI
DESCRIPTION: This command demonstrates how to access verbose help information using square brackets. The [verbose] option likely provides more detailed explanations of commands and features.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/script_help.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
help [verbose]
```

----------------------------------------

TITLE: Listing Excluded Module Version
DESCRIPTION: Uses 'go list' command with a custom modfile to list a specific excluded version of the rsc.io/quote module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go list -modfile=go.exclude.mod -m rsc.io/quote@v1.5.0
stdout '^rsc.io/quote v1.5.0$'
```

----------------------------------------

TITLE: Math/Big Float Operations
DESCRIPTION: Implements arbitrary-precision floating-point arithmetic operations and conversions
SOURCE: https://github.com/golang/go/blob/master/api/go1.5.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
type Float struct {}

func NewFloat(x float64) *Float
func ParseFloat(s string, base int, prec uint, mode RoundingMode) (*Float, int, error)

type RoundingMode uint8
type Accuracy int8
```

----------------------------------------

TITLE: Maintaining Version Information in JSON - JSON
DESCRIPTION: Stores the version metadata of the Go toolchain using a JSON object. This snippet can be processed by tools or custom scripts to programmatically access the version information. Input is structured as a JSON object with a Version field and expects consumers to handle parsing. There are no external dependencies beyond a JSON parser.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.0.linux-amd64.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{\"Version\":\"v0.0.1-go1.22.0.linux-amd64\"}
```

----------------------------------------

TITLE: Module Version Information
DESCRIPTION: JSON configuration specifying the module version
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
{"Version":"v1.0.0"}
```

----------------------------------------

TITLE: Resolving Package at Specific Commit
DESCRIPTION: Tests the resolution of a package (golang.org/x/text/language) at a specific commit without running the compiler. It uses the -x flag for verbose output and checks that no compilation occurs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go get -x golang.org/x/text/language@14c0d48
! stderr 'compile|cp|gccgo .*language\.a$'
```

----------------------------------------

TITLE: Vendor Directory Package with External Dependency
DESCRIPTION: Go file in the vendor directory demonstrating a package with an external dependency that would be ignored in module-aware mode.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package v
import _ "golang.org/x/crypto"
```

----------------------------------------

TITLE: Testing Go Build with Tags
DESCRIPTION: This script tests the Go build command with tag specifications. It first skips the test for gccgo, then tests a valid space-separated tag format, followed by an invalid format that improperly mixes commas and spaces in the tag list.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_tags_no_comma.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
[compiler:gccgo] skip 'gccgo has no standard packages'
go build -tags 'tag1 tag2' math
! go build -tags 'tag1,tag2 tag3' math
stderr 'space-separated list contains comma'
```

----------------------------------------

TITLE: Defining go.mod for Test GOROOT (Go Module)
DESCRIPTION: Defines the content of the `$WORK/goroot/src/go.mod` file. This minimal module file declares the module path as `std` (simulating the standard library) and specifies Go version 1.14. It's essential for testing module-aware command behavior within the simulated GOROOT.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_12

LANGUAGE: text
CODE:
```
-- $WORK/goroot/src/go.mod --
```

LANGUAGE: go
CODE:
```
module std

go 1.14
```

----------------------------------------

TITLE: Downloading Go module with 'master' branch
DESCRIPTION: This command downloads a Go module (rsc.io/quote) using the 'master' branch and verifies the presence of downloaded files in the module cache.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_hash.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go mod download rsc.io/quote@master
exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.3-0.20180709162918-a91498bed0a7.info
exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.3-0.20180709162918-a91498bed0a7.mod
exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.3-0.20180709162918-a91498bed0a7.zip
```

----------------------------------------

TITLE: Configuring Authentication Credentials and Response in JSON
DESCRIPTION: JSON configuration that defines username/password credentials and specifies HTTP response parameters including status code and a lengthy message. This appears to be for testing authentication handling or configuring an API response.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/oronelongline.txt#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{
	"Username": "aladdin",
	"Password": "opensesame",
	"StatusCode": 404,
	"Message": "blahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblah"
}
```

----------------------------------------

TITLE: OS File Constants
DESCRIPTION: Operating system constants for file operations on Darwin ARM64, including file open flags and path separators.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_50

LANGUAGE: Go
CODE:
```
const (
    DevNull = "/dev/null"
    O_APPEND = 8
    O_CREATE = 512
    O_EXCL = 2048
    O_SYNC = 128
    O_TRUNC = 1024
    PathListSeparator = 58
    PathSeparator = 47
)
```

----------------------------------------

TITLE: Executing Go List Command for Test Loading Verification
DESCRIPTION: The shell command 'go list -e -test d' verifies whether tests are still loaded when the package 'd' contains an error. It outputs the standard expected values. Dependencies can be added using the '-deps' flag to include them in the output as well.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/load_test_pkg_err.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list -e -test d
cmp stdout want_stdout
```

LANGUAGE: shell
CODE:
```
go list -e -test -deps d
stdout golang.org/fake/d
```

----------------------------------------

TITLE: Defining Local Dependency Package 'dep' (Go)
DESCRIPTION: This snippet defines the content of the `a/dep/dep.go` file. It declares a package named `dep` which contains a simple exported function `D`. This package serves as a local dependency within module 'a' for the main program `a.go`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_command_line_arguments.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
-- a/dep/dep.go --
package dep

func D() {}
```

----------------------------------------

TITLE: Package F Simple Helper Function
DESCRIPTION: Helper package 'f' containing a simple Id function returning a constant
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_with_init.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package f

func Id() int {
     return 42
}
```

----------------------------------------

TITLE: Internal Test Implementation
DESCRIPTION: Internal test file demonstrating imports within the same package with basic test function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_list_issue11977.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package t

import _ "vendor.org/p"
import _ "vendor.org/p1"
import "testing"

func TestNop(t *testing.T) {}
```

----------------------------------------

TITLE: Declaring Permissions Constants for Syscalls in Go
DESCRIPTION: This snippet introduces constant declarations for permission bits used in syscall operations across FreeBSD and OpenBSD in Go. Constants like S_IRWXG and S_IRWXO represent read, write, and execute permissions for group and others, respectively. These constants are utilized to simplify the specification of file permissions in system calls.
SOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_15

LANGUAGE: Go
CODE:
```
const S_IRWXG = 56
const S_IRWXG ideal-int
const S_IRWXO = 7
const S_IRWXO ideal-int
```

----------------------------------------

TITLE: Testing Go Run Command with Nonexistent Path
DESCRIPTION: Shell script to verify that 'go run' handles nonexistent package paths gracefully without panicking. Tests the fix for GitHub issue #28696 where 'go run x/...' would panic when directory x didn't exist.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_wildcard.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off

# Fix for https://github.com/golang/go/issues/28696:
# go run x/... should not panic when directory x doesn't exist.

! go run nonexistent/...
stderr '^go: no packages loaded from nonexistent/...$'
```

----------------------------------------

TITLE: Deprecations in database/sql/driver package
DESCRIPTION: Lists deprecated types and methods in the database/sql/driver package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_20

LANGUAGE: Go
CODE:
```
pkg database/sql/driver, type ColumnConverter //deprecated
pkg database/sql/driver, type Conn interface, Begin //deprecated
pkg database/sql/driver, type Execer //deprecated
pkg database/sql/driver, type Queryer //deprecated
pkg database/sql/driver, type Stmt interface, Exec //deprecated
pkg database/sql/driver, type Stmt interface, Query //deprecated
```

----------------------------------------

TITLE: Package p1 with External Module Imports
DESCRIPTION: Go package that imports modules from test repositories, including an old version, a new version, and a root module import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-old.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p1

import _ "vcs-test.golang.org/git/modlegacy1-old.git/p2"
import _ "vcs-test.golang.org/git/modlegacy1-new.git/p1"
import _ "vcs-test.golang.org/git/modlegacy1-new.git"
```

----------------------------------------

TITLE: Go 1.21 Module Definition File
DESCRIPTION: A Go 1.21 module definition that declares module m, requires q v1.0.0 with a local replacement, and depends on rsc.io/panicnil v1.0.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_default.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
go 1.21
module m
require q v1.0.0
replace q => ./q
require rsc.io/panicnil v1.0.0
```

----------------------------------------

TITLE: Main Package Implementation
DESCRIPTION: Main package that imports and uses level1a and level1b packages to demonstrate import conflicts.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_59905.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import (
	"test/main/level1a"
	"test/main/level1b"
)

func main() {
	level1a.Print()
	level1b.Print()
}
```

----------------------------------------

TITLE: Deprecations in debug/gosym package
DESCRIPTION: Lists deprecated methods in the debug/gosym package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_21

LANGUAGE: Go
CODE:
```
pkg debug/gosym, method (*LineTable) LineToPC //deprecated
pkg debug/gosym, method (*LineTable) PCToLine //deprecated
```

----------------------------------------

TITLE: Original Go Module Checksum
DESCRIPTION: Initial go.sum file containing the checksum for the rsc.io/quote dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_diff.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
rsc.io/quote v1.5.2 h1:3fEykkD9k7lYzXqCYrwGAf7iNhbk4yCjHmKBN9td4L0=
```

----------------------------------------

TITLE: Implementing Main Function in Go
DESCRIPTION: The main function calls 255 other functions (t0 to t254) sequentially. This demonstrates a large number of function calls in Go.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/dwarf5_gen_assembly_and_go.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
func main() {
	t0()
	t1()
	// ... (omitted for brevity)
	t253()
	t254()
}
```

----------------------------------------

TITLE: Testing Alternation Pattern Matching
DESCRIPTION: Tests alternation pattern '(fo|foo)' against the string 'foo'. Shows how different pattern configurations affect capturing group behavior with alternation.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_32

LANGUAGE: go
CODE:
```
"(fo|foo)"
-;-;-;-
0-3 0-3;0-2 0-2;0-3 0-3;0-3 0-3
"^(?:(fo|foo))$"
-;-;-;-
0-3 0-3;0-3 0-3;0-3 0-3;0-3 0-3
"^(?:(fo|foo))"
-;-;-;-
0-3 0-3;0-2 0-2;0-3 0-3;0-3 0-3
"(?:(fo|foo))$"
-;-;-;-
0-3 0-3;0-3 0-3;0-3 0-3;0-3 0-3
```

----------------------------------------

TITLE: Testing go list command with CGO disabled
DESCRIPTION: Tests the behavior of 'go list' when CGO is disabled, specifically verifying that packages using C imports are excluded from the results.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
# disabling cgo should drop useC
[short] skip
env CGO_ENABLED=0
go list -f '{{.ImportPath}}: {{.Match}}' all ... example.com/m/... ./... ./xyz...
! stdout example.com/m/useC
```

----------------------------------------

TITLE: Querying Module Versions with Exclusions
DESCRIPTION: Shows how version queries are affected by module exclusions when using 'go list' command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
go list -m rsc.io/quote@>=v1.5
stdout '^rsc.io/quote v1.5.0$'
go list -modfile=go.exclude.mod -m rsc.io/quote@>=v1.5
stdout '^rsc.io/quote v1.5.1$'
```

----------------------------------------

TITLE: Testing Byte-Based Character Matching with Unicode
DESCRIPTION: Tests the special \C pattern (matches single byte) against Unicode characters. Shows how multi-byte Unicode characters interact with byte-level matching.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_30

LANGUAGE: go
CODE:
```
"^\\C\\C\\C$"
-;-;-;-
0-3;0-3;0-3;0-3
"^(?:^\\C\\C\\C$)$"
-;-;-;-
0-3;0-3;0-3;0-3
"^(?:^\\C\\C\\C$)"
-;-;-;-
0-3;0-3;0-3;0-3
"(?:^\\C\\C\\C$)$"
-;-;-;-
0-3;0-3;0-3;0-3
```

----------------------------------------

TITLE: Defining Module Dependencies for z1
DESCRIPTION: This go.mod file for the z1 module defines its dependencies on specific versions of modules x and y.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence_loop.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
module example.net/z

go 1.16

require (
	example.net/x v0.2.0-pre
	example.net/y v0.2.0-pre
)
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file specifying module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_gowork.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module a

go 1.18
```

----------------------------------------

TITLE: Installing Go Binary With GOBIN Set
DESCRIPTION: Test case to ensure that with GOBIN set, binaries are installed to the specified GOBIN directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_install.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
env GOBIN=$WORK/bin1
mkdir -p $GOBIN
go install go-cmd-test
exists $GOBIN/go-cmd-test$GOEXE
```

----------------------------------------

TITLE: Defining Go Module golang.org/toolchain
DESCRIPTION: Defines the Go module path as 'golang.org/toolchain'. This declaration is present in both the conceptual '.mod' file representation and the actual 'go.mod' file, establishing the module's identity.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-arm.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
-- .mod --
module golang.org/toolchain
```

LANGUAGE: go
CODE:
```
-- go.mod --
module golang.org/toolchain
```

----------------------------------------

TITLE: CGO Integration with Angle Brackets Header
DESCRIPTION: Alternative CGO implementation that includes a header using angle brackets. Tests that overlays work with different header inclusion styles.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_17

LANGUAGE: go
CODE:
```
package main

// #include <cgo_header.h>
import "C"

func main() {
	C.say_hello()
}
```

----------------------------------------

TITLE: Nextafter32 Floating-Point Function - math Package - Go
DESCRIPTION: Implements Nextafter32, a floating-point function in the math package that returns the next representable float32 value after the first argument towards the second. It mimics the C99 function of the same name, requiring two input float32 numbers. Useful for numerical methods, strictly monotonic direction changes, and low-level math manipulation.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_15

LANGUAGE: Go
CODE:
```
func Nextafter32(float32, float32) float32
```

----------------------------------------

TITLE: Defining a Simple Package in Go
DESCRIPTION: This Go code snippet defines a simple package named 'p'. It declares a single constant 'v' with an integer value of 1. This file (`p.go`) serves as a basic example of source code within the module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/github.com_dmitshur-test_modtest5_v0.0.0-20190619020302-197a620e0c9a.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- p.go --
package p

const v = 1
```

----------------------------------------

TITLE: Setting Environment Variables for Go Module Tests
DESCRIPTION: Sets up environment variables for Go module proxy and checksum database testing. Includes settings for GO111MODULE, GOSUMDB, GOPROXY, and related variables.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_cache.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
env sumdb=$GOSUMDB
env proxy=$GOPROXY
env GOPROXY GONOPROXY GOSUMDB GONOSUMDB
```

----------------------------------------

TITLE: Go Module with Indirect Dependencies
DESCRIPTION: Module definition where all dependencies are marked as indirect
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_readonly.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module m

go 1.16

require (
	rsc.io/quote v1.5.2 // indirect
	rsc.io/sampler v1.3.0 // indirect
	rsc.io/testonly v1.0.0 // indirect
)
```

----------------------------------------

TITLE: Go Module Definition with Indirect Dependency
DESCRIPTION: A minimal go.mod file defining a module with Go 1.14 compatibility and a single indirect dependency. This is part of the test setup to verify vendor/modules.txt generation behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused_only.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/m
go 1.14

require example.com v1.0.0 // indirect
```

----------------------------------------

TITLE: Package Import Example
DESCRIPTION: Simple Go package demonstrating import of an external dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_main.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package x

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Defining Empty Package B in Go
DESCRIPTION: This Go file defines an empty package b for example.net/b.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_9

LANGUAGE: Go
CODE:
```
package b
```

----------------------------------------

TITLE: Dependency Package Definition
DESCRIPTION: Empty package definition for the external dependency example.net/x.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_lazy_self.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package x
```

----------------------------------------

TITLE: Package A Main Function
DESCRIPTION: Minimal main package implementation in directory 'a'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.9.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Main Package Import
DESCRIPTION: Go source file importing example.com/r package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_old.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package use

import _ "example.com/r"
```

----------------------------------------

TITLE: Minimal Go Main Package
DESCRIPTION: A minimal Go program with an empty main function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_pkg_version.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Defining Package r
DESCRIPTION: Creates an empty package 'r' as a placeholder.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_all_gobuild.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
package r
```

----------------------------------------

TITLE: Go Workspace Configuration
DESCRIPTION: Workspace configuration file (go.work) specifying usage of ./y module directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_issue55952.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
use ./y
```

----------------------------------------

TITLE: Go Module Definition File
DESCRIPTION: Basic go.mod file defining a module named example.com/m
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_no_modcache.txt#2025-04-22_snippet_1

LANGUAGE: gomod
CODE:
```
module example.com/m
```

----------------------------------------

TITLE: Vendored Package Definition
DESCRIPTION: Defines a vendored package p1 with an import path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue11864.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package p1 // import "vendor.org/p1"
```

----------------------------------------

TITLE: Command Package A Implementation
DESCRIPTION: Minimal main package implementation for command a.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-newerself.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Library Package
DESCRIPTION: Empty Go library package used for testing module dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_git.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package library
```

----------------------------------------

TITLE: Testing Go Module Edit Operations
DESCRIPTION: Demonstrates various 'go mod edit' operations including adding/dropping requirements, exclusions, replacements, and retractions. The test verifies that each operation produces the expected changes to the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# go mod edits
go mod edit -droprequire=x.1 -require=x.1@v1.0.0 -require=x.2@v1.1.0 -droprequire=x.2 -exclude='x.1 @ v1.2.0' -exclude=x.1@v1.2.1 -exclude=x.1@v2.0.0+incompatible -replace=x.1@v1.3.0=y.1@v1.4.0 -replace='x.1@v1.4.0 = ../z' -retract=v1.6.0 -retract=[v1.1.0,v1.2.0] -retract=[v1.3.0,v1.4.0] -retract=v1.0.0
cmpenv go.mod $WORK/go.mod.edit1
go mod edit -droprequire=x.1 -dropexclude=x.1@v1.2.1 -dropexclude=x.1@v2.0.0+incompatible -dropreplace=x.1@v1.3.0 -require=x.3@v1.99.0 -dropretract=v1.0.0 -dropretract=[v1.1.0,v1.2.0]
cmpenv go.mod $WORK/go.mod.edit2
```

----------------------------------------

TITLE: foo directory
DESCRIPTION: An empty directory named foo, used for testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_only_dirs.txt#_snippet_4

LANGUAGE: Go
CODE:
```
-- foo --
```

----------------------------------------

TITLE: Markdown Output Format
DESCRIPTION: Markdown format with inline link syntax
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist3.txt#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
Cool things:

  - Foo
  - [Go](https://go.dev/)
  - Bar

```

----------------------------------------

TITLE: Declaring Package in α.go
DESCRIPTION: Declares a package named 'α' in the Go module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile1_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package α
```

----------------------------------------

TITLE: Version Information JSON
DESCRIPTION: JSON file containing version information for the module
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v1.0.0"}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module definition requiring rsc.io/quote v1.0.0
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module x
require rsc.io/quote v1.0.0
```

----------------------------------------

TITLE: Defining Go Module in go.mod
DESCRIPTION: Specifies the module name for the Go project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile1_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module rsc.io/badfile1
```

----------------------------------------

TITLE: Vendored Strings Package
DESCRIPTION: Custom vendored strings package providing a message variable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_import.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package strings

var Msg = "hello, world"
```

----------------------------------------

TITLE: Basic Go Module File
DESCRIPTION: Defines a simple Go module named 'x'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_sum.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module x
```

----------------------------------------

TITLE: Defining Go Module in go.mod
DESCRIPTION: Specifies the module name for the Go package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_version_v1.1.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/version
```

----------------------------------------

TITLE: Go Module Declaration
DESCRIPTION: Module declaration in go.mod file specifying the module path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_depofdirectpatch_v1.0.1.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module patch.example.com/depofdirectpatch
```

----------------------------------------

TITLE: Basic Go Package Declaration
DESCRIPTION: Simple Go file containing only a package declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fmt_load_errors.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package x
```

----------------------------------------

TITLE: Go List with Multiple Retractions
DESCRIPTION: This snippet tests the order in which retractions are reported when a version is covered by multiple retractions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_11

LANGUAGE: go
CODE:
```
go list -m -retracted -f '{{range .Retracted}}{{.}},{{end}}' example.com/retract/rationale@v1.0.0-order
stdout '^degenerate range,single version,$'
go list -m -retracted -f '{{range .Retracted}}{{.}},{{end}}' example.com/retract/rationale@v1.0.1-order
stdout '^single version,degenerate range,$'
```

----------------------------------------

TITLE: Go Module Direct Access Test
DESCRIPTION: Tests direct module access failure scenario when proxy is bypassed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_proxy.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
cp go.mod.orig go.mod
env GOSUMDB=$sumdb
env GOPROXY=direct
! go get rsc.io/fortune@v1.0.0
stderr 'verifying module: rsc.io/fortune@v1.0.0: .*: no such host localhost.localdev'
rm $GOPATH/pkg/mod/cache/download/sumdb
rm go.sum
```

----------------------------------------

TITLE: Dependency Module v0.1.0
DESCRIPTION: A Go module file for the first version of the 'deleted' dependency which includes a package that will be removed in a later version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.net/deleted

go 1.17
```

----------------------------------------

TITLE: Defining Go Module in go.mod File
DESCRIPTION: Standard go.mod file declaration for the Go toolchain module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.ios-arm64.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Package A with Invalid Internal Import
DESCRIPTION: Package a demonstrating an illegal import of an internal package in both source and test files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_internal.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
// A package with bad imports in both src and test
package a

import (
  _ "a/x/internal/y"
)
```

----------------------------------------

TITLE: Initializing Git Repository
DESCRIPTION: Creates a new Git repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/commit-after-tag.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
git init
```

----------------------------------------

TITLE: Package p1 Implementation (p1.go)
DESCRIPTION: Supporting package p1 implementation with identical function F returning integer 1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_relative_cmdline.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package p1

func F() int { return 1 }
```

----------------------------------------

TITLE: Module B Configuration (v0.1.0)
DESCRIPTION: Basic configuration for module B version 0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue65363.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.net/b

go 1.16
```

LANGUAGE: go
CODE:
```
package b
```

----------------------------------------

TITLE: Go Module Path Declaration
DESCRIPTION: Defines the module path for a Go package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_c_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/badchain/c
```

----------------------------------------

TITLE: Package A Implementation
DESCRIPTION: Implementation of package a that imports package b.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_version.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package a

import _ "example.net/b"
```

----------------------------------------

TITLE: Declaring Test Package
DESCRIPTION: Declares an empty package named 'testonly'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_testonly_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package testonly
```

----------------------------------------

TITLE: Module C v1 Package
DESCRIPTION: Version 1 of module c with empty implementation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package c
```

----------------------------------------

TITLE: Dependency Q Implementation
DESCRIPTION: Implementation of shared dependency module 'q'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package q

func Q() {}
```

----------------------------------------

TITLE: Dependency R Implementation
DESCRIPTION: Implementation of shared dependency module 'r'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package r

func R() {}
```

----------------------------------------

TITLE: Setting GOPROXY Environment Variable in Go Builder
DESCRIPTION: Sets the GOPROXY environment variable to https://proxy.golang.org for the go-builder. This ensures that the correct proxy is used for fetching Go modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_version.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
[!go-builder] env GOPROXY=https://proxy.golang.org
```

----------------------------------------

TITLE: Module Definition
DESCRIPTION: Module declaration for rsc.io/sampler
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module "rsc.io/sampler"
```

----------------------------------------

TITLE: Setting and Checking Go Environment Variables
DESCRIPTION: This snippet sets up initial environment variables and checks the default GOENV location for different operating systems.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=off

# go env should default to the right places
env AppData=$HOME/windowsappdata
env home=$HOME/plan9home
go env GOENV
[GOOS:aix] stdout $HOME/.config/go/env
[GOOS:darwin] stdout $HOME'/Library/Application Support/go/env'
[GOOS:freebsd] stdout $HOME/.config/go/env
[GOOS:linux] stdout $HOME/.config/go/env
[GOOS:netbsd] stdout $HOME/.config/go/env
[GOOS:openbsd] stdout $HOME/.config/go/env
[GOOS:plan9] stdout $HOME/plan9home/lib/go/env
[GOOS:windows] stdout $HOME\\windowsappdata\\go\\env
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module declaration for the example package with Go 1.17 requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath_main.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/pkg

go 1.17
```

----------------------------------------

TITLE: Windows-specific syscall functionality
DESCRIPTION: Windows-specific system call functionality for both 32-bit and 64-bit architectures. Includes DLLError.Unwrap method for error handling and NoInheritHandles field in SysProcAttr struct to control handle inheritance.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
method (*DLLError) Unwrap() error
type SysProcAttr struct, NoInheritHandles bool
```

----------------------------------------

TITLE: Adding Module Dependency in Submodule
DESCRIPTION: Updates the submodule's go.mod to require the parent module at v1.1.0 and tags it as submod/v1.0.5.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_11

LANGUAGE: bash
CODE:
```
at 2018-02-19T18:12:59-05:00
git apply 0001-submod-go.mod-add-require-vgotest1-v1.1.0.patch
git commit -a -m 'submod/go.mod: add require vgotest1 v1.1.0'
git tag submod/v1.0.5
```

----------------------------------------

TITLE: Handling Relative Paths in GOMODCACHE
DESCRIPTION: This snippet tests the behavior of 'go env -w' when setting GOMODCACHE with relative paths. It demonstrates that absolute paths are required for this variable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
# go env -w should reject relative paths in GOMODCACHE environment.
! go env -w GOMODCACHE=~/test
stderr 'go: GOMODCACHE entry is relative; must be absolute path: "~/test"'
! go env -w GOMODCACHE=./test
stderr 'go: GOMODCACHE entry is relative; must be absolute path: "./test"'
```

----------------------------------------

TITLE: Setting GOPATH Mode via Environment Variable in Shell
DESCRIPTION: Sets the `GO111MODULE` environment variable to `off` for the execution of the subsequent command, ensuring the Go toolchain operates in the traditional GOPATH mode. This affects how package dependencies and vendoring are handled by the `go` command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_std.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off
```

----------------------------------------

TITLE: Testing GOMODCACHE with Relative Paths in Go
DESCRIPTION: This snippet tests Go's response to setting GOMODCACHE to relative paths. It first sets GO111MODULE to 'on', then attempts to use '~/test' and './test' as GOMODCACHE values, expecting both to fail with a 'must be absolute path' error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_cache_dir.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on

# Go should reject relative paths in GOMODCACHE environment.

env GOMODCACHE="~/test"
! go install example.com/tools/cmd/hello@latest
stderr 'must be absolute path'

env GOMODCACHE="./test"
! go install example.com/tools/cmd/hello@latest
stderr 'must be absolute path'
```

----------------------------------------

TITLE: Command B Implementation
DESCRIPTION: Minimal Go program for cmd/b package used in wildcard testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tool.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package b

func main() {}
```

----------------------------------------

TITLE: Module D Configuration (d/go.mod)
DESCRIPTION: Configuration file for module d.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
module example.com/d

go 1.15
```

----------------------------------------

TITLE: Testing Regexp with Single Unicode Character
DESCRIPTION: Tests matching patterns with a single Japanese character ('本'). Shows how boundary assertions and non-capturing groups affect matching results with Unicode characters.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_27

LANGUAGE: go
CODE:
```
"^本$"
-;-;-;-
0-3;0-3;0-3;0-3
"^(?:^本$)$"
-;-;-;-
0-3;0-3;0-3;0-3
"^(?:^本$)"
-;-;-;-
0-3;0-3;0-3;0-3
"(?:^本$)$"
-;-;-;-
0-3;0-3;0-3;0-3
```

----------------------------------------

TITLE: Initializing and Setting Up Git Repository with Tagged Subdirectory
DESCRIPTION: Initializes a Git repository, adds a subdirectory, commits it, renames the branch to master, and creates a version tag for the subdirectory. This sets up proper versioning for a Go module located in a subdirectory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitreposubdirv2.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
git init

git add subdir
git commit -m 'initial commit'
git branch -m master
git tag subdir/v2.0.0
git show-ref --tags --heads
cmp stdout .git-refs
```

----------------------------------------

TITLE: Testing Panic in Test Function
DESCRIPTION: This snippet tests a Go package where a test function panics. It verifies that the test is marked as failing using go test -json and go tool test2json commands, with and without the -test.v flag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
! go test -json ./testpanic
stdout '"Action":"fail"'
! stdout '"Action":"pass"'

! go tool test2json ./testpanic.exe -test.v
stdout '"Action":"fail"'
! stdout '"Action":"pass"'

! go tool test2json ./testpanic.exe
stdout '"Action":"fail"'
! stdout '"Action":"pass"'
```

----------------------------------------

TITLE: Dependency Module v0.2.0
DESCRIPTION: A Go module file for the second version of the 'deleted' dependency, where the package has been removed but the module still exists.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module example.net/deleted

go 1.17
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module declaration file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiled_files_issue28749.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/foo

go 1.20
```

----------------------------------------

TITLE: Testing Standard and Custom Flags in Go Test Commands
DESCRIPTION: Shell commands demonstrating how to use the go test command with various flag combinations, showing both valid usage patterns and error cases when combining -c with custom flags.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flag.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test flag_test.go -v -args -v=7 # Two distinct -v flags
go test -v flag_test.go -args -v=7 # Two distinct -v flags

# Using a custom flag mixed with regular 'go test' flags should be OK.
go test -count=1 -custom -args -v=7

# However, it should be an error to use custom flags when -c is used,
# since we know for sure that no test binary will run at all.
! go test -c -custom
stderr '^go: unknown flag -custom cannot be used with -c$'

# The same should apply even if -c comes after a custom flag.
! go test -custom -c
stderr '^go: unknown flag -custom cannot be used with -c$'
```

----------------------------------------

TITLE: Directory Validation Utility for Testing
DESCRIPTION: A Go utility that checks if a directory contains files. It's used in the test script to verify that the fuzzing process has written files to the fuzz cache directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cache.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"path/filepath"
	"io/ioutil"
	"os"
)

func main() {
	infos, err := ioutil.ReadDir(filepath.Clean(os.Args[1]))
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if len(infos) == 0 {
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: Creating v2 Branch with Tags in Git
DESCRIPTION: Creates a v2 branch, adds a file, and creates multiple tags (v2.3, v2.0.1) on the branch. Also creates a v2.3.4 branch with an associated tag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
at 2018-04-17T15:45:48-04:00
git branch v2
git checkout v2
echo 'v2'
cp stdout v2
git add v2
git commit -a -m 'v2'
git tag v2.3
git tag v2.0.1
git branch v2.3.4
git tag branch-v2.3.4
```

----------------------------------------

TITLE: Test Script Commands
DESCRIPTION: Shell commands and test assertions for verifying go list behavior with various package patterns and unreadable directories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_perm.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

go list ./noread/...
stdout '^example.com/noread$'

go list example.com/noread/...
stdout '^example.com/noread$'

go list ./empty/...
stderr 'matched no packages'

chmod 000 noread

! go list ./noread
! stdout '^example.com/noread$'
! stderr 'matched no packages'

! go list example.com/noread
! stdout '^example.com/noread$'
! stderr 'matched no packages'
```

----------------------------------------

TITLE: Invalid Godebug Configuration in go.mod
DESCRIPTION: A go.mod file configuration demonstrating an invalid godebug directive that should trigger an error message. The test ensures the error is formatted with file:line prefix for tool parsing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_errors_pos.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/bar

godebug foo=1
```

----------------------------------------

TITLE: Go Package with Init Panic
DESCRIPTION: Defines a 'pkg' package with an init function that panics with a TODO message, indicating incomplete functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
package pkg

func init() {
	panic("TODO")
}
```

----------------------------------------

TITLE: Testing 'go mod download' with GOTOOLCHAIN=go1.21 outside a module
DESCRIPTION: Tests that 'go mod download' with GOTOOLCHAIN=go1.21 fails when downloading modules requiring newer Go versions and correctly reports version requirements in error messages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
env GOTOOLCHAIN=go1.21
! go mod download rsc.io/needgo121@latest rsc.io/needgo122@latest rsc.io/needgo123@latest rsc.io/needall@latest
! stderr switching
stderr 'rsc.io/needgo122@v0.0.1 requires go >= 1.22'
stderr 'rsc.io/needgo123@v0.0.1 requires go >= 1.23'
stderr 'rsc.io/needall@v0.0.1 requires go >= 1.23'
stderr 'requires go >= 1.23'
! stderr 'requires go >= 1.21' # that's us!
```

----------------------------------------

TITLE: Sample Go Application with Missing Dependency
DESCRIPTION: A simple Go program that imports a package 'example.com/version' which is not initially available in the go.mod file. This program is used to test dependency resolution behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_issue52331.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"

	"example.com/version"
)

func main() {
	fmt.Println(version.V)
}
```

----------------------------------------

TITLE: Defining Go Module for SWIG/Cgo Integration - Go
DESCRIPTION: This 'go.mod' file initializes a minimal Go module named 'example', specifying Go 1.16, to serve as the namespace for the SWIG/Cgo integration test case. No actual code dependencies are included; it is only used to establish module identity and environment for the test scenario. This file must be present at the root of the module intended for go tool commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_swigcxx.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example

go 1.16
```

----------------------------------------

TITLE: Declaring Go Module for Testing Coverage Arguments – Go
DESCRIPTION: This Go module definition file (go.mod) declares 'module m' and sets Go version 1.20. It enables the following Go code to be built as part of a simple module structure, primarily for testing coverage-related build arguments. There are no dependencies besides the standard Go modules system. Input and output are implicit in the usage by the surrounding test harness. The main constraint is compatibility with Go 1.20+ tooling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_list.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
-- go.mod --\nmodule m\n\ngo 1.20\n
```

----------------------------------------

TITLE: Defining Version Constant in Go
DESCRIPTION: Declares a constant 'V' with the version string in a Go package named 'version'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_version_v1.1.0.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package version

const V = "v1.1.0"
```

----------------------------------------

TITLE: Indirect Package Implementation
DESCRIPTION: Implementation of the indirect package with nested dependency import
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_ambiguous.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package indirect

import _ "example.net/ambiguous/nested/pkg"
```

----------------------------------------

TITLE: Testing Go Module Loading Error
DESCRIPTION: Shell command to test go list behavior with a missing module 'y' referenced in go.work file. Expects an error message indicating the module cannot be loaded.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_issue55952.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go list .
stderr '^go: cannot load module y listed in go\.work file: open y'${/}'go\.mod:'
```

----------------------------------------

TITLE: Executing Go List Command with No Go Line
DESCRIPTION: Demonstrates running the 'go list' command in a module without a go line or toolchain specification in go.mod.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/old_tidy_toolchain.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go list
```

----------------------------------------

TITLE: Enabling Go Module Mode via Environment Variable (Shell)
DESCRIPTION: Sets the `GO111MODULE` environment variable to `on` for the execution of the subsequent command. This forces the Go toolchain to operate in module-aware mode.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_install_versioned.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Adding Version-Specific go.mod in v2 Directory
DESCRIPTION: Creates a v2 directory with its own go.mod file containing the v2 module path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_16

LANGUAGE: bash
CODE:
```
at 2018-02-19T17:31:34-05:00
mkdir v2
echo 'module "github.com/vgotest1/v2"'
cp stdout v2/go.mod
git add v2/go.mod
git commit -m 'add v2/go.mod'
```

----------------------------------------

TITLE: Vendor Directory Main Package
DESCRIPTION: A Go main package file in the vendor directory that would be handled specifically in module-aware mode.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package main
```

----------------------------------------

TITLE: Configuring Module 'c' (Version 2)
DESCRIPTION: This go.mod file defines module 'c'. It represents a second, different version of the 'c' module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
-- c2/go.mod --
module c

go 1.17
```

----------------------------------------

TITLE: Testing Explicit +incompatible Version Selection
DESCRIPTION: Confirms that explicitly requesting a +incompatible version still works even when it's not listed in standard version queries.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
go list -m github.com/russross/blackfriday@v2.0.0+incompatible
stdout '^github.com/russross/blackfriday v2\.0\.0\+incompatible$'
```

----------------------------------------

TITLE: Event and Notification Functions in syscall Package for NetBSD ARM64
DESCRIPTION: These functions provide event notification mechanisms including kqueue for monitoring file descriptors, signals, and other events efficiently without polling.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_79

LANGUAGE: Go
CODE:
```
func Kqueue() (int, error)
func Kevent(int, []Kevent_t, []Kevent_t, *Timespec) (int, error)
func SetKevent(*Kevent_t, int, int, int)
```

----------------------------------------

TITLE: Go Program with Nested Relative Import
DESCRIPTION: A Go program that imports a package from a subdirectory, which itself contains a relative import. This tests that files in relative-imported packages can use relative imports themselves.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_local.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main

import "./sub"

func main() {
	sub.Hello()
}
```

----------------------------------------

TITLE: Setting Environment Variables for Go List Output Formatting
DESCRIPTION: Sets environment variables PKGFMT and MODFMT to format the output of 'go list' commands for packages and modules respectively.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_0

LANGUAGE: Bash
CODE:
```
env PKGFMT='{{if .Module}}{{.ImportPath}}{{end}}'
env MODFMT='{{.Path}}'
```

----------------------------------------

TITLE: Package Depends-on-a Test
DESCRIPTION: Test file for package depends-on-a that imports package a.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_internal.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package depends

import (
  _ "a"
)
```

----------------------------------------

TITLE: Getting Module Version with Query and Exclusion
DESCRIPTION: Shows how 'go get' handles a version query when there's an excluded version, followed by listing the retrieved module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_6

LANGUAGE: Shell
CODE:
```
cp go.exclude.mod.orig go.exclude.mod
go get -modfile=go.exclude.mod rsc.io/quote@>=v1.5
go list -modfile=go.exclude.mod -m ...quote
stdout 'rsc.io/quote v1.5.[1-9]'
```

----------------------------------------

TITLE: Go File Importing Package with Vet Error
DESCRIPTION: This Go file imports a package that contains a vet error, used to test how vet handles errors in imported packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package p2

import _ "m/vetfail/p1"

func F() {
}
```

----------------------------------------

TITLE: Module B v1.2 Configuration
DESCRIPTION: Module B version 1.2's go.mod file requiring the latest dependency version
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchbound.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.net/b

go 1.16

require example.net/a v0.3.0
```

----------------------------------------

TITLE: Package Declarations for Dependent Modules
DESCRIPTION: These Go files contain package declarations for the dependent modules 'w', 'x', and 'sub' (within 'z'). The 'x' package also imports 'w.1'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package w
```

LANGUAGE: go
CODE:
```
package x
import _ "w.1"
```

LANGUAGE: go
CODE:
```
package sub
```

----------------------------------------

TITLE: Comparing Go Module Graphs Between Go 1.17 and 1.16
DESCRIPTION: A series of shell commands that test how Go 1.17 and 1.16 handle module dependencies differently, particularly focusing on pruning of retracted versions. The script creates and compares module graphs, validates specific dependency patterns, and verifies that version flags work correctly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_graph_version.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
cp go.mod go.mod.orig

go mod graph
cp stdout graph-1.17.txt
stdout '^example\.com/m example\.com/retract/incompatible@v1\.0\.0$'
stdout '^example\.net/lazy@v0\.1\.0 example\.com/retract/incompatible@v1\.0\.0$'
! stdout 'example\.com/retract/incompatible@v2\.0\.0\+incompatible'

go mod graph -go=1.17
cmp stdout graph-1.17.txt

cmp go.mod go.mod.orig


# Setting -go=1.16 should report the graph as viewed by Go 1.16,
# but should not edit the go.mod file.

go mod graph -go=1.16
cp stdout graph-1.16.txt
stdout '^example\.com/m example\.com/retract/incompatible@v1\.0\.0$'
stdout '^example\.net/lazy@v0\.1\.0 example.com/retract/incompatible@v1\.0\.0$'
stdout '^example.net/requireincompatible@v0.1.0 example.com/retract/incompatible@v2\.0\.0\+incompatible$'

cmp go.mod go.mod.orig


# If we actually update the go.mod file to the requested go version,
# we should get the same selected versions, but the roots of the graph
# may be updated.
#
# TODO(#45551): The roots should not be updated.

go mod edit -go=1.16
go mod graph
! stdout '^example\.com/m example\.com/retract/incompatible@v1\.0\.0$'
stdout '^example\.net/lazy@v0.1.0 example.com/retract/incompatible@v1\.0\.0$'
stdout '^example.net/requireincompatible@v0.1.0 example.com/retract/incompatible@v2\.0\.0\+incompatible$'
	# TODO(#45551): cmp stdout graph-1.16.txt


# Unsupported go versions should be rejected, since we don't know
# what versions they would report.
! go mod graph -go=1.99999999999
stderr '^invalid value "1\.99999999999" for flag -go: maximum supported Go version is '$goversion'\nusage: go mod graph \[-go=version\] \[-x\]\nRun ''go help mod graph'' for details.$'
```

----------------------------------------

TITLE: Verifying Fuzz Test Artifacts in Go
DESCRIPTION: This script checks if new fuzz test artifacts are correctly stored in the testdata directory. It verifies the presence of new mutations and the correctness of file naming based on content hashing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_17

LANGUAGE: Go
CODE:
```
package main

import (
	"bytes"
	"crypto/sha256"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
)

func main() {
	target := os.Args[1]
	dir := filepath.Join("testdata/fuzz", target)

	files, err := ioutil.ReadDir(dir)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}

	if len(files) == 0 {
		fmt.Fprintf(os.Stderr, "expect at least one new mutation to be written to testdata\n")
		os.Exit(1)
	}

	fname := files[0].Name()
	contents, err := ioutil.ReadFile(filepath.Join(dir, fname))
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if bytes.Equal(contents, []byte("aa")) {
		fmt.Fprintf(os.Stderr, "newly written testdata entry was not mutated\n")
		os.Exit(1)
	}
	// The hash of the bytes in the file should match the filename.
	h := []byte(fmt.Sprintf("%x", sha256.Sum256(contents)))
	if !bytes.HasPrefix(h, []byte(fname)) {
		fmt.Fprintf(os.Stderr, "hash of bytes %q does not match filename %q\n", h, fname)
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: Testing Go List with Coverage Build Flags – Shell
DESCRIPTION: This shell test script automates the process of installing and checking the staleness of a Go package (m/example), invoking build and list commands with and without coverage flags, and extracting and comparing build IDs to ensure correctness. It sets up the environment, manages build artifacts, and includes steps to verify that different coverage modes ('atomic', 'count') do not break basic build functionality. External dependencies: a Go toolchain (1.20+), access to the file system, and a Unix-like shell. Input includes Go package sources and test control logic; outputs are temporarily stored files and command exit statuses. Constraints: expects the 'go' binary and related tools to be on the PATH, provides limited error handling, and is designed for short, isolated runs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_list.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
# This test is intended to verify that \"go list\" accepts coverage related\n# build arguments (such as -cover, -covermode). See issue #57785.\n\n[short] skip\n\nenv GOBIN=$WORK/bin\n\n# Install a target and then do an ordinary staleness check on it.\ngo install m/example\n! stale m/example\n\n# Run a second staleness check with \"-cover\" as a build flag. The\n# installed target should indeed be stale, since we didn't build it\n# with -cover.\nstale -cover m/example\n\n# Collect build ID from for m/example built with -cover.\ngo list -cover -export -f '{{.BuildID}}' m/example\ncp stdout $WORK/listbuildid.txt\n\n# Now build the m/example binary with coverage.\ngo build -cover -o $WORK/m.exe m/example\n\n# Ask for the binary build ID by running \"go tool buildid\".\ngo tool buildid $WORK/m.exe\ncp stdout $WORK/rawtoolbuildid.txt\n\n# Make sure that the two build IDs agree with respect to the\n# m/example package. Build IDs from binaries are of the form X/Y/Z/W\n# where Y/Z is the package build ID; running the program below will\n# pick out the parts of the ID that we want.\nenv GOCOVERDIR=$WORK\nexec $WORK/m.exe $WORK/rawtoolbuildid.txt\ncp stdout $WORK/toolbuildid.txt\n\n# Build IDs should match here.\ncmp $WORK/toolbuildid.txt $WORK/listbuildid.txt\n\n# Make sure that the build succeeds regardless of covermode.\ngo list -export -covermode=atomic m/example\ngo list -export -covermode=count m/example\n
```

----------------------------------------

TITLE: Testing version resolution for v1.2.0
DESCRIPTION: Fetches v1.2.0 using a commit hash and verifies the version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_8

LANGUAGE: shell
CODE:
```
go get ...test@9f6f860
go list -m all
stdout '^github.com/rsc/legacytest v1\.2\.0$'
```

----------------------------------------

TITLE: Go Package with Direct Missing Import (Go)
DESCRIPTION: This Go source file defines a package named 'direct'. Its primary purpose in the test is to directly import a non-existent package ('example.com/notfound') using a blank identifier import, triggering a dependency error during 'go list' operations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_bad_import.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
-- example.com/direct/direct.go --
package direct
import _ "example.com/notfound"
```

----------------------------------------

TITLE: Transitive Package Implementation
DESCRIPTION: Final package in the dependency chain that provides the base functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_deps.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package transitive

func F() {
}
```

----------------------------------------

TITLE: Testing Invalid Module Paths for gopkg.in Modules in Go
DESCRIPTION: This snippet tests module path validation for gopkg.in modules, demonstrating that they require a version suffix in the format .vN. Each command is expected to fail with an error message suggesting the correct format for gopkg.in modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_invalid_major.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
! go mod init gopkg.in/pkg
stderr '(?s)^go: invalid module path "gopkg.in/pkg": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/pkg.v1$'

! go mod init gopkg.in/user/pkg
stderr '(?s)^go: invalid module path "gopkg.in/user/pkg": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v1$'

! go mod init gopkg.in/user/pkg/v0
stderr '(?s)^go: invalid module path "gopkg.in/user/pkg/v0": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v1$'

! go mod init gopkg.in/user/pkg/v1
stderr '(?s)^go: invalid module path "gopkg.in/user/pkg/v1": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v1$'

! go mod init gopkg.in/user/pkg/v2
stderr '(?s)^go: invalid module path "gopkg.in/user/pkg/v2": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v2$'

! go mod init gopkg.in/user/pkg.v
stderr '(?s)^go: invalid module path "gopkg.in/user/pkg.v": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v1$'

! go mod init gopkg.in/user/pkg.v0.1
stderr '(?s)^go: invalid module path "gopkg.in/user/pkg.v0.1": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v1$'

! go mod init gopkg.in/user/pkg.v.1
stderr '(?s)^go: invalid module path "gopkg.in/user/pkg.v.1": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v1$'

! go mod init gopkg.in/user/pkg.v01
stderr '(?s)^go: invalid module path "gopkg.in/user/pkg.v01": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v1$'

! go mod init gopkg.in/user/pkg.v.2.3
stderr '(?s)^go: invalid module path "gopkg.in/user/pkg.v.2.3": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v2$'
```

----------------------------------------

TITLE: Setting Up Git Environment Variables and Repository Initialization
DESCRIPTION: Configures Git author and committer information for the repository and initializes a new Git repository. Sets up environment variables for consistent authorship.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/querytest.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GIT_AUTHOR_NAME='Russ Cox'
env GIT_AUTHOR_EMAIL='rsc@golang.org'
env GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
env GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL

git init
```

----------------------------------------

TITLE: Main Package Implementation A
DESCRIPTION: Minimal main package implementation with empty main function in package a.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-exclude.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Testing go build -pgo=auto flag when default.pgo is absent
DESCRIPTION: Tests the behavior of go build with -pgo=auto flag when the default.pgo file is absent. It verifies that the build succeeds without applying PGO and that PGO is not mentioned in build info.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go build -n -pgo=auto -o nopgo.exe ./nopgo
stderr 'compile.*nopgo.go'
! stderr 'compile.*-pgoprofile'

# check that pgo doesn't appear in build info
! stderr 'build\\t-pgo='
```

----------------------------------------

TITLE: Testing Incompatible Suffix on Compatible Version in Go
DESCRIPTION: This snippet tests that a +incompatible suffix is not allowed on a version that is actually compatible. It uses go mod edit to add an invalid requirement and checks for the expected error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_version.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
cp go.mod.orig go.mod
go mod edit -require golang.org/x/text@v0.1.1-0.20170915032832-14c0d48ead0c+incompatible
cd outside
! go list -m golang.org/x/text
stderr 'go: example.com@v0.0.0 requires\n\tgolang.org/x/text@v0.1.1-0.20170915032832-14c0d48ead0c\+incompatible: invalid version: \+incompatible suffix not allowed: major version v0 is compatible'
cd ..
! go list -m golang.org/x/text
stderr 'golang.org/x/text@v0.1.1-0.20170915032832-14c0d48ead0c\+incompatible: invalid version: \+incompatible suffix not allowed: major version v0 is compatible'
```

----------------------------------------

TITLE: Module Checksum Configuration - B Only
DESCRIPTION: go.sum entries with complete checksums for module B and only build list entry for module A
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_ambiguous.txt#2025-04-22_snippet_4

LANGUAGE: text
CODE:
```
example.com/ambiguous/a v1.0.0/go.mod h1:TrBl/3xTPFJ2gmMIYz53h2gkNtg0dokszEMuyS1QEb0=
example.com/ambiguous/a/b v0.0.0-empty h1:xS29ReXXuhjT7jc79mo91h/PevaZ2oS9PciF1DucXtg=
example.com/ambiguous/a/b v0.0.0-empty/go.mod h1:MajJq5jPEBnnXP+NTWIeXX7kwaPS1sbVEJdooTmsePQ=
```

----------------------------------------

TITLE: Executing Trimpath Tests in Different Modes (Shell)
DESCRIPTION: These shell commands execute Go programs using `go run -trimpath` to test path trimming functionality. The tests cover running from the main module with vendoring enabled, running a vendored module directly, and running in GOPATH mode. Each command checks the standard output (`stdout`) for a specific pattern representing the expected trimmed path from the C `__FILE__` macro.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_trimpath_macro.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
# Test in main module.
go run -trimpath -mod=vendor ./main
stdout '(\_\_|/_)[\/]m[\/]c[\/]bar.h'

# Test in vendored module.
go run -trimpath -mod=vendor v.com/main
stdout '(\_\_|/_)[\/]vendor[\/]v.com[\/]c[\/]bar.h'

# Test in GOPATH mode.
env GO111MODULE=off
go run -trimpath ./main
stdout '(\_\_|/_)[\/]GOPATH[\/]src[\/]c[\/]bar.h'
```

----------------------------------------

TITLE: Testing go build -pgo=auto flag with wildcards
DESCRIPTION: Tests the behavior of go build with -pgo=auto flag when using wildcards (./a/...) to specify the build targets. It verifies that PGO is applied correctly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go build -n -pgo=auto ./a/...
stderr 'compile.*-pgoprofile=.*a1.go'

# check that pgo appears in build info
stderr 'build\\t-pgo=.*default\.pgo'
```

----------------------------------------

TITLE: Simple Go Main Program
DESCRIPTION: A minimal Go program that prints a message to standard output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/link/testdata/script/script_test_basics.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

func main() {
  println("Hi mom!")
}
```

----------------------------------------

TITLE: Using Go Module with Dependent Packages
DESCRIPTION: A simple Go module that imports a package from the example.net/pkgadded/subpkg dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downgrade_missing.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package m

import _ "example.net/pkgadded/subpkg"
```

----------------------------------------

TITLE: Inspecting Package Target and Asserting Binary Name (v1) (Shell)
DESCRIPTION: Uses `go list` with a format string `{{.Target}}` to retrieve the potential build target (binary name) for the `rsc.io/fortune` package. The subsequent `! stdout` and `stdout` lines are test assertions, likely from a script runner like `txtar`, verifying that the output does not match `fortune@v1` but does match the regular expression `fortune(\.exe)?$`, allowing for an optional `.exe` suffix.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_install_versioned.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go list -f '{{.Target}}' rsc.io/fortune
! stdout fortune@v1
stdout 'fortune(\.exe)?$'
```

----------------------------------------

TITLE: Package Import Resolution Test - Main Package
DESCRIPTION: Defines a package that imports golang.org/x/net/http2/hpack to test vendoring behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_std_vendor.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package vendoring17

import _ "golang.org/x/net/http2/hpack"
```

----------------------------------------

TITLE: Detecting Memory Aliasing Using Unsafe Pointers in Go
DESCRIPTION: This function checks if two byte slices have any overlapping memory. It uses unsafe pointers to compare memory addresses, making it efficient but not suitable for AppEngine environments.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_internal_v0.1.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
func AnyOverlap(x, y []byte) bool {
	return len(x) > 0 && len(y) > 0 &&
		uintptr(unsafe.Pointer(&x[0])) <= uintptr(unsafe.Pointer(&y[len(y)-1])) &&
		uintptr(unsafe.Pointer(&y[0])) <= uintptr(unsafe.Pointer(&x[len(x)-1]))
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module named 'coverbad' with Go 1.16 as the required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_error.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module coverbad

go 1.16
```

----------------------------------------

TITLE: non-english-content
DESCRIPTION: non-english-content
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.aix-ppc64.txt#2025-04-22_snippet_0

LANGUAGE: non-english-content
CODE:
```
non-english-content
```

----------------------------------------

TITLE: Testing GO111MODULE=off Module Resolution in Go
DESCRIPTION: Tests GO111MODULE=off behavior which should disable module mode entirely. This verifies that no go.mod files are detected regardless of their presence in the directory structure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_enabled.txt#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
env GO111MODULE=off

cd $GOPATH/src/x/y/z
go env GOMOD
! stdout .+

cd $GOPATH/foo
go env GOMOD
! stdout .+

cd $GOPATH/foo/bar/baz
go env GOMOD
! stdout .+
```

----------------------------------------

TITLE: Go Module Definition with Misleading Directory Name
DESCRIPTION: A Go module definition for a package in a directory with a 'test' suffix but with a regular module name.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
// Package d is an ordinary package in a deceptively-named directory.
module example.com/d
```

----------------------------------------

TITLE: Defining Module Name in go.mod File
DESCRIPTION: Specifies the module name in the go.mod file for the Go toolchain package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-386.txt#2025-04-22_snippet_3

LANGUAGE: plaintext
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Go Package Using CGO (`import \"C\"`) (Go)
DESCRIPTION: This Go file defines package 'p'. It uses CGO, indicated by the `import "C"` statement and the C preprocessor directive `#define X 1` within the comment block preceding it. This forces the Go build tool to invoke a C compiler during the build process, which is the core action being tested.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- p/p.go --
package p

// #define X 1
import "C"
```

----------------------------------------

TITLE: Module Checksum Configuration - Build List Only
DESCRIPTION: go.sum entries containing only build list checksums for ambiguous modules
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_ambiguous.txt#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
example.com/ambiguous/a v1.0.0/go.mod h1:TrBl/3xTPFJ2gmMIYz53h2gkNtg0dokszEMuyS1QEb0=
example.com/ambiguous/a/b v0.0.0-empty/go.mod h1:MajJq5jPEBnnXP+NTWIeXX7kwaPS1sbVEJdooTmsePQ=
```

----------------------------------------

TITLE: Standard Library Import Test
DESCRIPTION: A Go file that imports the standard library package 'encoding/json'. Used to test the behavior when GOROOT is set to an invalid location.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goroot_errors.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package importjson
import _ "encoding/json"
```

----------------------------------------

TITLE: Module 'x1' Definition with Dependencies
DESCRIPTION: The go.mod file for x v0.1.0 (located in directory x1) that requires modules 'b' and 'i'. This creates a circular dependency with module 'b'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_tidy.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module x
go 1.13
require (
	b v0.0.0
	i v0.0.0
)
```

----------------------------------------

TITLE: Testing version resolution with specific commit hash
DESCRIPTION: Fetches a specific commit and verifies the resulting version string.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go get ...test@7303f77
go list -m all
stdout '^github.com/rsc/legacytest v2\.0\.1-0\.\d{14}-7303f7796364\+incompatible$'
```

----------------------------------------

TITLE: Vendor modules information
DESCRIPTION: Specifies vendored modules information, including the explicit requirement and Go version for example.com/m.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_redundant_requirement.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
# example.com/m v0.0.0 => ./m
## explicit; go 1.17
example.com/m
```

----------------------------------------

TITLE: Module A Definition
DESCRIPTION: The go.mod file for module 'm/a', which is one of the modules in the circular dependency chain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_cycle.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module m/a
```

----------------------------------------

TITLE: First Example Test File Implementation
DESCRIPTION: Defines two example functions (Example_z and Example_a) that increment and print a shared counter. Tests execution order preservation within the first file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_source_order.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Make sure that go test runs Example_z before Example_a, preserving source order.

package p

import "fmt"

var n int

func Example_z() {
	n++
	fmt.Println(n)
	// Output: 1
}

func Example_a() {
	n++
	fmt.Println(n)
	// Output: 2
}
```

----------------------------------------

TITLE: Implementing a Compiler Command Wrapper in Go
DESCRIPTION: A Go program that wraps compiler commands, adding a define flag and forwarding all other arguments. This is used to verify that the compiler wrapper is correctly invoked through environment variables containing spaces and quotes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path_space_quote.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package main

import (
	"fmt"
	"os"
	"os/exec"
)

func main() {
	args := append([]string{"-DWRAPPER_WAS_USED=1"}, os.Args[2:]...)
	cmd := exec.Command(os.Args[1], args...)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Run(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: Go Test File Implementation
DESCRIPTION: Test file containing a simple test case that relies on environment variable checks in the main package initialization
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_loop.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import "testing"

func TestEnv(t *testing.T) {
	// the check is in func init in m.go
}
```

----------------------------------------

TITLE: Vendor Package Example Go File
DESCRIPTION: A simple Go file in the vendor/pkg directory for testing vendor resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_15

LANGUAGE: go
CODE:
```
package pkg
```

----------------------------------------

TITLE: Building Go Plugin with Consistent Output Test
DESCRIPTION: Shell commands to build the same Go file twice as plugins and compare the outputs to verify consistency. Uses trimpath and disables VCS info to ensure reproducible builds.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_plugin_reproducible.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go build -trimpath -buildvcs=false -buildmode=plugin -o a.so main.go
go build -trimpath -buildvcs=false -buildmode=plugin -o b.so main.go
cmp -q a.so b.so
```

----------------------------------------

TITLE: Go Test Command with Force Rebuild
DESCRIPTION: Shell command to test forced rebuilding of dependencies using 'go test -a'. Verifies that standard library components like regexp are recompiled when the -a flag is used.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_rebuildall.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off

go test -x -a -c testdata/dep_test.go
stderr '^.*[/\\]compile'$GOEXE'["]? (.* )?regexp .*[/\\]regexp\.go'
```

----------------------------------------

TITLE: Main Program with Invalid Import
DESCRIPTION: Go program attempting to import an invalid module path while maintaining valid Go syntax. Uses a blank import to prevent unused import errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_v1suffix.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main
import _ "example.com/invalidpath/v1"
func main() {}
```

----------------------------------------

TITLE: Main Function for Cache Validation in Go
DESCRIPTION: Entry point that processes command line arguments and checks all files in a directory for expected fuzzing cache contents. Returns exit code 1 if the expected value is not found.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_dirty_cov.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
func main() {
	dir, expected := os.Args[1], os.Args[2]
	ents, err := os.ReadDir(dir)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	for _, ent := range ents {
		name := filepath.Join(dir, ent.Name())
		if good, err := checkFile(name, expected); err != nil {
			fmt.Fprintln(os.Stderr, err)
			os.Exit(1)
		} else if good {
			os.Exit(0)
		}
	}
	fmt.Fprintln(os.Stderr, "input over minimized")
	os.Exit(1)
}
```

----------------------------------------

TITLE: Module A v0.2.0 Definition
DESCRIPTION: Definition for example.net/a module version 0.2.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchcycle.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.net/a

go 1.16
```

LANGUAGE: go
CODE:
```
package a
```

----------------------------------------

TITLE: Testing Go Syntax Error Handling (GO111MODULE off)
DESCRIPTION: This snippet tests the Go test command's behavior when encountering a syntax error in a test file with GO111MODULE set to off. It verifies that the error is diagnosed and that the test fails.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_syntax_error_says_fail.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=off
! go test syntaxerror
stderr 'x_test.go:' # check that the error is diagnosed
stdout 'FAIL' # check that go test says FAIL
```

----------------------------------------

TITLE: Go File with Printf Formatting Error
DESCRIPTION: This Go file contains a function with a Printf formatting error, which is used to demonstrate vet's ability to catch such issues in non-test files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p

import "fmt"

func F() {
	fmt.Printf("%d") // oops
}
```

----------------------------------------

TITLE: Adding QUICResumeSession and QUICStoreSession Constants in crypto/tls Package
DESCRIPTION: This snippet adds two new constants of type QUICEventKind to the crypto/tls package: QUICResumeSession and QUICStoreSession.
SOURCE: https://github.com/golang/go/blob/master/api/go1.23.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
const QUICResumeSession QUICEventKind = 8
const QUICStoreSession QUICEventKind = 9
```

----------------------------------------

TITLE: Go Test File for Package with Imported Vet Error
DESCRIPTION: This Go test file tests a function in a package that imports another package with a vet error, used to verify vet's behavior in such scenarios.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package p2

import "testing"

func TestF(t *testing.T) {
	F()
}
```

----------------------------------------

TITLE: Network Interface and Socket Structure Definitions for NetBSD-arm64 in Go
DESCRIPTION: This code contains system-level structure definitions for network interfaces, socket communications, and resource management in NetBSD-arm64. These structures are used to interact with the operating system kernel for functions related to network interface management, socket communications, and resource limits.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_163

LANGUAGE: Go
CODE:
```
// Network interface announcement message header structure
type IfAnnounceMsghdr struct {
    Msglen uint16
    Version uint8
    Type uint8
    Index uint16
    Name [16]int8
    What uint16
}

// Network interface data structure
type IfData struct {
    Type uint8
    Addrlen uint8
    Hdrlen uint8
    Pad_cgo_0 [1]uint8
    Link_state int32
    Mtu uint64
    Metric uint64
    Baudrate uint64
    Ipackets uint64
    Ierrors uint64
    Opackets uint64
    Oerrors uint64
    Collisions uint64
    Ibytes uint64
    Obytes uint64
    Imcasts uint64
    Omcasts uint64
    Iqdrops uint64
    Noproto uint64
    Lastchange Timespec
}

// Network interface message header structure
type IfMsghdr struct {
    Msglen uint16
    Version uint8
    Type uint8
    Addrs int32
    Flags int32
    Index uint16
    Pad_cgo_0 [2]uint8
    Data IfData
}

// IPv6 packet information structure
type Inet6Pktinfo struct {
    Addr [16]uint8
    Ifindex uint32
}

// Interface address message structure
type InterfaceAddrMessage struct {
    Header IfaMsghdr
    Data []uint8
}

// Interface announcement message structure
type InterfaceAnnounceMessage struct {
    Header IfAnnounceMsghdr
}

// Interface message structure
type InterfaceMessage struct {
    Header IfMsghdr
    Data []uint8
}

// I/O vector structure for scatter/gather I/O
type Iovec struct {
    Base *uint8
    Len uint64
}

// IPv6 MTU information structure
type IPv6MTUInfo struct {
    Addr RawSockaddrInet6
    Mtu uint32
}

// Kernel event structure
type Kevent_t struct {
    Ident uint64
    Filter uint32
    Flags uint32
    Fflags uint32
    Pad_cgo_0 [4]uint8
    Data int64
    Udata int64
}

// Memory cluster pool structure
type Mclpool [0]uint8

// Message header structure for socket operations
type Msghdr struct {
    Name *uint8
    Namelen uint32
    Pad_cgo_0 [4]uint8
    Iov *Iovec
    Iovlen int32
    Pad_cgo_1 [4]uint8
    Control *uint8
    Controllen uint32
    Flags int32
}

// Raw socket address structures
type RawSockaddrAny struct { Pad [92]int8 }

type RawSockaddrDatalink struct {
    Len uint8
    Family uint8
    Index uint16
    Type uint8
    Nlen uint8
    Alen uint8
    Slen uint8
    Data [12]int8
}

type RawSockaddrInet4 struct {
    Len uint8
    Family uint8
    Zero [8]int8
}

type RawSockaddrInet6 struct {
    Len uint8
    Family uint8
}

type RawSockaddr struct {
    Len uint8
    Family uint8
    Data [14]int8
}

type RawSockaddrUnix struct {
    Len uint8
    Family uint8
    Path [104]int8
}

// Resource limit structure
type Rlimit struct {
    Cur uint64
    Max uint64
}

// Route message structure
type RouteMessage struct {
    Header RtMsghdr
    Data []uint8
}

// Routing message interface
type RoutingMessage interface {
    // unexported methods
}

// Route metrics structure
type RtMetrics struct {
    Locks uint64
    Mtu uint64
    Hopcount uint64
    Recvpipe uint64
    Sendpipe uint64
    Ssthresh uint64
    Rtt uint64
    Rttvar uint64
    Pksent int64
    Expire int64
}

// Route message header structure
type RtMsghdr struct {
    Msglen uint16
    Version uint8
    Type uint8
    Index uint16
    Pad_cgo_0 [2]uint8
    Flags int32
    Addrs int32
    Pid int32
    Seq int32
    Errno int32
    Use int32
    Inits int32
    Pad_cgo_1 [4]uint8
    Rmx RtMetrics
}

// Resource usage structure
type Rusage struct {
    Utime Timeval
    Stime Timeval
    Maxrss int64
    Ixrss int64
    Idrss int64
    Isrss int64
    Minflt int64
    Majflt int64
    Nswap int64
    Inblock int64
    Oublock int64
    Msgsnd int64
    Msgrcv int64
    Nsignals int64
    Nvcsw int64
    Nivcsw int64
}

// Socket address datalink structure
type SockaddrDatalink struct {
    Len uint8
    Family uint8
    Index uint16
    Type uint8
    Nlen uint8
    Alen uint8
    Slen uint8
    Data [12]int8
}

// Socket control message structure
type SocketControlMessage struct {
    Header Cmsghdr
    Data []uint8
}

// File system statistics structure (empty placeholder)
type Statfs_t [0]uint8

// File status structure (empty placeholder)
type Stat_t struct {}
```

----------------------------------------

TITLE: Structure Definitions for OpenBSD in Go
DESCRIPTION: Defines various system structures used in OpenBSD syscalls. These structures represent file descriptors, events, statistics, and terminal configurations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_57

LANGUAGE: Go
CODE:
```
type Dirent struct {
    Fileno uint64
    Off int64
    X__d_padding [4]uint8
    // Other fields not shown
}

type FdSet struct {
    Bits [32]uint32
}

type Kevent_t struct {
    Ident uint64
    Data int64
    // Other fields not shown
}

type Mclpool struct {
    Grown int32
    // Other fields not shown
}

type RtMetrics struct {
    Expire int64
    Pad uint32
    // Other fields not shown
}

type Stat_t struct {
    Ino uint64
    Pad_cgo_0 [4]uint8
    // Other fields not shown
}

type Statfs_t struct {
    F_ctime uint64
    F_mntfromspec [90]int8
    Pad_cgo_1 [2]uint8
    // Other fields not shown
}

type Termios struct {
    Iflag uint32
    Oflag uint32
    Cflag uint32
    Lflag uint32
    Cc [20]uint8
    Ispeed int32
    Ospeed int32
}

type Timespec struct {
    Sec int64
    // Other fields not shown
}
```

----------------------------------------

TITLE: Reverting Root Module Path to v1
DESCRIPTION: Updates the root go.mod file to remove the v2 from the module path and tags it as v2.0.5, showing module version management.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
at 2018-02-19T19:03:59-05:00
env GIT_AUTHOR_DATE=2018-02-19T18:17:02-05:00
echo 'module "github.com/rsc/vgotest1" // root go.mod'
cp stdout go.mod
git add go.mod
git commit -m 'go.mod: drop v2'
git tag v2.0.5
```

----------------------------------------

TITLE: Updating Git Author and Creating Pre-release v2.6.0
DESCRIPTION: Changes the Git author information to Bryan C. Mills, checks out v2.5.5 tag, and creates commits and tag for v2.6.0-pre1. This simulates development by a different contributor.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/querytest.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
env GIT_AUTHOR_NAME='Bryan C. Mills'
env GIT_AUTHOR_EMAIL=bcmills@google.com
env GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
env GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL

git checkout v2.5.5

at 2019-05-13T17:13:56-04:00
echo 'before v2.6.0-pre1'
cp stdout status
git commit -a -m 'before v2.6.0-pre1'

at 2019-05-13T17:13:56-04:00
echo 'at v2.6.0-pre1'
cp stdout status
git commit -a -m 'at v2.6.0-pre1'
git tag 'v2.6.0-pre1'
```

----------------------------------------

TITLE: Declaring a Go Module - Go - none
DESCRIPTION: This code snippet declares the Go module path for the toolchain in a .mod file. It serves as a module pointer to establish a unique path for the toolchain package. There are no dependencies or parameters. This is standard for Go modules, and no input or output is expected other than serving as meta-information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-riscv64.txt#2025-04-22_snippet_0

LANGUAGE: none
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Standard go.mod file declaring the module path
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_invalidpath_v1_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/invalidpath/v1
```

----------------------------------------

TITLE: Go Module Definition in go.mod
DESCRIPTION: Defines the module name in the standard go.mod file format.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-arm.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Defining Go Module Path for modtest5
DESCRIPTION: This snippet contains the `go.mod` file content, which declares the canonical import path for the Go module as `github.com/dmitshur-test/modtest5`. This is the first line typically found in a `go.mod` file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/github.com_dmitshur-test_modtest5_v0.5.0-alpha.0.20190619023908-3da23a9deb9e.txt#2025-04-22_snippet_0

LANGUAGE: gomod
CODE:
```
module github.com/dmitshur-test/modtest5
```

----------------------------------------

TITLE: Go Module Path Declaration
DESCRIPTION: Defines the module path and version information for a Go module
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_newcycle_b_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
example.com/newcycle/b v1.0.0
```

----------------------------------------

TITLE: Testing Go List in Empty Subdirectory
DESCRIPTION: Verifies the behavior of 'go list' in a subdirectory with no Go files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
cd subdir
! go list
! stderr 'cannot find module providing package'
stderr '^no Go files in '$WORK'[/\\]gopath[/\\]src[/\\]dir[/\\]subdir$'
cd ..
```

----------------------------------------

TITLE: Defining a Minimal Go Main Package - Go
DESCRIPTION: Declares a minimal Go source file containing the definition of a main package with an empty main function. This file is used to simulate a Go project containing source code for the purpose of triggering module-related behaviors in the Go toolchain. There are no dependencies, input, or output; it simply provides necessary context for go mod commands. It requires at least Go version 1.12.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_off.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package sample\n\nfunc main() {}
```

----------------------------------------

TITLE: Testing Module Version Conflict Resolution
DESCRIPTION: Shell commands demonstrating how Go handles version conflicts between explicit version requests and pattern matching. Shows error handling for incompatible version requirements and wildcard pattern resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downgrade_missing.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
cp go.mod go.mod.orig

# getting a specific version of a module along with a pattern
# not yet present in that module should report the version mismatch
# rather than a "matched no packages" warning.

! go get example.net/pkgadded@v1.1.0 example.net/pkgadded/subpkg/...
stderr '^go: example.net/pkgadded@v1.1.0 conflicts with example.net/pkgadded/subpkg/...@upgrade \(v1.2.0\)$'
! stderr 'matched no packages'
cmp go.mod.orig go.mod


# A wildcard pattern should match the pattern with that path.

go get example.net/pkgadded/...@v1.0.0
go list -m all
stdout '^example.net/pkgadded v1.0.0'
cp go.mod.orig go.mod


# If we need to resolve a transitive dependency of a package,
# and another argument constrains away the version that provides that
# package, then 'go get' should fail with a useful error message.

! go get example.net/pkgadded@v1.0.0 .
stderr '^go: example.com/m imports\n\texample.net/pkgadded/subpkg: cannot find module providing package example.net/pkgadded/subpkg$'
! stderr 'example.net/pkgadded v1\.2\.0'
cmp go.mod.orig go.mod

go get example.net/pkgadded@v1.0.0
! go list -deps -mod=readonly .
stderr '^m.go:3:8: cannot find module providing package example\.net/pkgadded/subpkg: '
```

----------------------------------------

TITLE: Committing to Mercurial and Checking Version Metadata
DESCRIPTION: This snippet adds files to the Mercurial repository, commits them, and creates a tag. Then, it updates to a previous commit and installs the Go binary. It checks the version metadata to ensure the correct revision, time, and modified status are present.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_3

LANGUAGE: Shell
CODE:
```
exec hg add a README go.mod
exec hg commit -m 'initial commit' --user test-user --date '2024-07-31T01:21:27+00:00'
exec hg tag a/v1.2.3
# Switch back to the tagged branch.
# Tagging a commit causes a new commit to be created. (See https://repo.mercurial-scm.org/hg/help/revsets)
exec hg update '.~1'
cd a
go install
go version -m $GOBIN/a$GOEXE
stdout '^\tbuild\tvcs.revision=eae91df98b5dd3c4451accf64c683ddc3edff6a9$'
stdout '^\tbuild\tvcs.time=2024-07-31T01:21:27Z$'
stdout '^\tbuild\tvcs.modified=false$'
stdout '\s+mod\s+example.com/a\s+v1.2.3\s+'
rm $GOBIN/a$GOEXE
```

----------------------------------------

TITLE: Main Go Program
DESCRIPTION: Main package that imports and calls the ObjTest function from the syso package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_issue33139.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package main

import "m/syso"

func main() {
	syso.ObjTest()
}
```

----------------------------------------

TITLE: Testing Transitive Upgrades with 'go get -u' (Shell)
DESCRIPTION: Executes 'go get -u' to upgrade all dependencies and compares the result with the expected state.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue47979.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
cp go.mod.orig go.mod
go get -u .
cmp go.mod go.mod.want
```

----------------------------------------

TITLE: Testing Error Handling for Missing Packages
DESCRIPTION: Tests the go command's error handling when a matched module does not contain the expected package. It uses 'go mod tidy' in a directory with intentionally problematic imports.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_import.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
# The go command should print an informative error when the matched
# module does not contain a package.
# TODO(#26909): Ideally these errors should include line numbers for the imports within the main module.
cd fail
! go mod tidy
stderr '^go: localhost.fail imports\n\tw: module w@latest found \(v0.0.0-00010101000000-000000000000, replaced by ../w\), but does not contain package w$'
stderr '^go: localhost.fail imports\n\tnonexist: nonexist@v0.1.0: replacement directory ../nonexist does not exist$'
```

----------------------------------------

TITLE: Go Get with Multi-line Rationale (Block)
DESCRIPTION: This snippet tests 'go get' behavior when retraction appears in a block. It asserts only the first line of the reason is shown.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_4

LANGUAGE: go
CODE:
```
go get example.com/retract/rationale@v1.0.0-multiline2
stderr '^go: warning: example.com/retract/rationale@v1.0.0-multiline2: retracted by module author: short description$'
! stderr 'detail'
```

----------------------------------------

TITLE: Go Module Definition for C_test
DESCRIPTION: A Go module definition for a package with a 'test' suffix in its name.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module example.com/c_test
```

----------------------------------------

TITLE: Testing GOTOOLCHAIN=go1.21 Behavior
DESCRIPTION: Tests how GOTOOLCHAIN=go1.21 enforces using the specified toolchain without switching, causing errors when dependencies require newer versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
# GOTOOLCHAIN=go1.21 should NOT run the newer toolchain
env GOTOOLCHAIN=go1.21
cp go.mod.new go.mod
! go get rsc.io/needgo121 rsc.io/needgo122 rsc.io/needgo123 rsc.io/needall
! stderr switching
stderr 'rsc.io/needgo122@v0.0.1 requires go >= 1.22'
stderr 'rsc.io/needgo123@v0.0.1 requires go >= 1.23'
stderr 'rsc.io/needall@v0.0.1 requires go >= 1.23'
stderr 'requires go >= 1.23'
! stderr 'requires go >= 1.21' # that's us!
cmp go.mod go.mod.new
```

----------------------------------------

TITLE: Defining Go Module with Version
DESCRIPTION: A simple go.mod file that defines a module named 'example.com' with Go version 1.15.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_symlink_dotgo.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com
go 1.15
```

----------------------------------------

TITLE: Debug Package Components (Go)
DESCRIPTION: Includes declarations for debug-related packages including dwarf, macho, pe, and plan9obj with various type definitions and constants.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
type FatFile struct {
    Magic uint32
    Arches []FatArch
}

type OptionalHeader32 struct {
    Magic uint16
    MajorLinkerVersion uint8
    MinorLinkerVersion uint8
    SizeOfCode uint32
    // ... additional fields
}
```

----------------------------------------

TITLE: Go Module File Configuration
DESCRIPTION: Basic Go module configuration file specifying the module name
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
module m
```

----------------------------------------

TITLE: Importing Dependencies in Module C v0.1.0 in Go
DESCRIPTION: This Go file for module C v0.1.0 imports example.net/a as a blank import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_11

LANGUAGE: Go
CODE:
```
package c

import _ "example.net/a"
```

----------------------------------------

TITLE: Go List Command Test
DESCRIPTION: Shell command to test go list behavior with readonly mode and error reporting format
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_e_readonly.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go list -mod=readonly -e -deps -f '{{if .Error}}{{.ImportPath}}: {{.Error}}{{end}}' .
```

----------------------------------------

TITLE: Demonstrating Updated Panic Message in Go
DESCRIPTION: This snippet shows the new format for panic messages when a panic is recovered and re-raised. The message now includes '[recovered, reraised]' instead of repeating the panic value.
SOURCE: https://github.com/golang/go/blob/master/doc/next/4-runtime.md#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
panic: PANIC [recovered, reraised]
```

----------------------------------------

TITLE: Sub-module Source File
DESCRIPTION: Go source file in the sub-module importing the rsc.io/quote package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_goproxy_off.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package example

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Testing Custom Internal Package Access
DESCRIPTION: Tests importing an internal package from a relative path
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_internal.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p

import _ "./x/y/z/internal/w"
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: Specifies the Go version and module name for the project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_decoratemappings_comment.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
go 1.25
module m
```

----------------------------------------

TITLE: Module Sum File with Duplicates
DESCRIPTION: go.sum file containing duplicate hash entries that need to be cleaned up
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_duplicates.txt#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
rsc.io/quote v1.5.2 h1:3fEykkD9k7lYzXqCYrwGAf7iNhbk4yCjHmKBN9td4L0=
rsc.io/quote v1.5.2 h1:3fEykkD9k7lYzXqCYrwGAf7iNhbk4yCjHmKBN9td4L0=
rsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=
rsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=
rsc.io/sampler v1.3.0 h1:HLGR/BgEtI3r0uymSP/nl2uPLsUnNJX8toRyhfpBTII=
rsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=
rsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=
rsc.io/testonly v1.0.0 h1:K/VWHdO+Jv7woUXG0GzVNx1czBXUt3Ib1deaMn+xk64=
rsc.io/testonly v1.0.0/go.mod h1:OqmGbIFOcF+XrFReLOGZ6BhMM7uMBiQwZsyNmh74SzY=
```

----------------------------------------

TITLE: Testing Go Help Overview Command
DESCRIPTION: Verifies that the main 'go help' command shows basic overview and bug report information
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/help.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go help
stdout 'Go is a tool'
stdout 'bug.*start a bug report'
```

----------------------------------------

TITLE: Go Module Declaration for Test Project
DESCRIPTION: Defines the Go module for the test project named 'example'. This is the minimal module declaration needed for the test structure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_compile_multi_pkg.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: This snippet defines a Go module named 'p'. It's a minimal go.mod file that specifies the module name without any dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_prints.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module p
```

----------------------------------------

TITLE: Defining Go Module in go.mod File
DESCRIPTION: Creates a minimal go.mod file that defines the module name as 'x'. This is likely used as a placeholder for the test environment.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_filenames.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module x
```

----------------------------------------

TITLE: Go Module A Definition
DESCRIPTION: Module definition for example.com/a
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_overlay.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com/a
```

----------------------------------------

TITLE: Testing Multiple Internal Package Imports
DESCRIPTION: Tests importing both internal and regular packages from module paths
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_internal.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p

import (
	_ "testinternal4/q/internal/x"
	_ "testinternal4/q/j"
)
```

----------------------------------------

TITLE: Specifying Go Toolchain Version Identifier
DESCRIPTION: This line identifies the specific Go toolchain version being used, including the base version (go1.18.1) and the target platform (linux-amd64). It's likely part of a metadata or configuration file indicating which toolchain is active or required.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.1.linux-amd64.txt#2025-04-22_snippet_0

LANGUAGE: text
CODE:
```
golang.org/toolchain v0.0.1-go1.18.1.linux-amd64
```

----------------------------------------

TITLE: Module Declaration in go.mod
DESCRIPTION: Standard go.mod file declaring the Golang toolchain module name.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-386.txt#2025-04-22_snippet_3

LANGUAGE: plaintext
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Internal Test File
DESCRIPTION: Internal test file checking the vendored strings package message value.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_import.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import (
	"strings" // really ../vendor/strings
	"testing"
)

func TestMsgInternal(t *testing.T) {
	if strings.Msg != "hello, world" {
		t.Fatalf("unexpected msg: %v", strings.Msg)
	}
}
```

----------------------------------------

TITLE: Testing GOCACHE Priority in Go Build System
DESCRIPTION: This test script verifies that Go correctly prioritizes environment variables when determining the cache directory location. It tests the precedence order (GOCACHE > XDG_CACHE_HOME > HOME/.cache) and the fallback to 'off' when no location can be determined.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cache_unix.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=off

# Integration test for cache directory calculation (cmd/go/internal/cache).

[GOOS:windows] skip 'windows does not use XDG_CACHE_HOME'
[GOOS:darwin]  skip 'darwin does not use XDG_CACHE_HOME'
[GOOS:ios]     skip 'ios does not use XDG_CACHE_HOME'
[GOOS:plan9]   skip 'plan9 does not use XDG_CACHE_HOME'

mkdir $WORK/gocache
mkdir $WORK/xdg
mkdir $WORK/home

# Set GOCACHE, XDG_CACHE_HOME, and HOME.
env GOCACHE=$WORK/gocache
env XDG_CACHE_HOME=$WORK/xdg
env HOME=$WORK/home

# With all three set, we should prefer GOCACHE.
go env GOCACHE
stdout $WORK'/gocache$'

# Without GOCACHE, we should prefer XDG_CACHE_HOME over HOME.
env GOCACHE=
go env GOCACHE
stdout $WORK'/xdg/go-build$$'

# With only HOME set, we should use $HOME/.cache.
env XDG_CACHE_HOME=
go env GOCACHE
stdout $WORK'/home/.cache/go-build$'

# With no guidance from the environment, we must disable the cache, but that
# should not cause commands that do not write to the cache to fail.
env HOME=
go env GOCACHE
stdout 'off'
```

----------------------------------------

TITLE: Creating v2.0.0 Tag with Commit Message
DESCRIPTION: Checks out an earlier commit and creates a v2.0.0 tag with a specific commit message indicating v2 compatibility.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_19

LANGUAGE: bash
CODE:
```
git checkout --detach mytag~1
at 2018-07-18T21:21:27-04:00
env GIT_AUTHOR_DATE=2018-02-19T18:10:06-05:00
mkdir pkg
echo 'package p // pkg/p.go'
cp stdout pkg/p.go
git add pkg/p.go
unquote 'add pkg/p.go\n\nv2\n'
cp stdout COMMIT_MSG
git commit -F COMMIT_MSG
git tag v2.0.0
```

----------------------------------------

TITLE: Recording Semantic Version for Commit in go.mod
DESCRIPTION: Tests that getting a package by commit hash correctly records the semantic version in the go.mod file when available.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_7

LANGUAGE: shell
CODE:
```
go get rsc.io/quote@23179ee8
grep 'rsc.io/quote v1.5.1' go.mod
```

----------------------------------------

TITLE: Testing vendor consistency checks with Go 1.14
DESCRIPTION: Demonstrates that adding dependency information to a Go 1.14 go.mod file triggers errors if vendor/modules.txt is missing or incomplete.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_7

LANGUAGE: shell
CODE:
```
cp go.mod.orig go.mod
go mod edit -go=1.14
! go list -f {{.Dir}} -tags tools -e all
stderr '^go: inconsistent vendoring in '$WORK[/\\]auto':$'
stderr '^\texample.com/printversion@v1.0.0: is explicitly required in go.mod, but not marked as explicit in vendor/modules.txt'
stderr '^\texample.com/unused: is replaced in go.mod, but not marked as replaced in vendor/modules.txt'
stderr '^\texample.com/version@v1.2.0: is replaced in go.mod, but not marked as replaced in vendor/modules.txt'
stderr '^\tTo ignore the vendor directory, use -mod=readonly or -mod=mod.\n\tTo sync the vendor directory, run:\n\t\tgo mod vendor$'
```

----------------------------------------

TITLE: Accessing Outermost Boundaries in SectionReader - io - Go
DESCRIPTION: The Outer() method on *SectionReader returns the underlying io.ReaderAt plus starting and ending offsets (int64). Useful for locating the absolute boundaries of the section within the parent data.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_17

LANGUAGE: Go
CODE:
```
func (r *SectionReader) Outer() (ReaderAt, int64, int64)
```

----------------------------------------

TITLE: Defining Package 'c' Version 'v0.1.0' in Go
DESCRIPTION: This Go source file defines package 'c' with a constant `Version` set to "v0.1.0". This represents the implementation corresponding to module 'c' version 1, required directly by module 'x'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
-- c1/c.go --
package c

const Version = "v0.1.0"
```

----------------------------------------

TITLE: Defining Empty Package x for Module
DESCRIPTION: Creates an empty package x for the module. This simply declares the package without any functionality to establish the module's root package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package x
```

----------------------------------------

TITLE: Setting Up Go Module Environment
DESCRIPTION: Sets the GO111MODULE environment variable to 'on' and changes the current directory to the working directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on

cd $WORK
```

----------------------------------------

TITLE: Go Module File with Redundant Requirements
DESCRIPTION: A go.mod file containing redundant dependencies that aren't directly needed, used to test preservation behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_16

LANGUAGE: go
CODE:
```
module m

go 1.14

require (
	rsc.io/quote v1.5.2
	rsc.io/sampler v1.3.0 // indirect
	rsc.io/testonly v1.0.0 // indirect
)
```

----------------------------------------

TITLE: Expected Output on Darwin (macOS)
DESCRIPTION: Shows the expected output of the 'go env' command on macOS, demonstrating how special characters are escaped in GOFLAGS.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_sanitize.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
[GOOS:darwin] stdout 'GOFLAGS=''\$\(echo ''\\''''cc"''\\''''; echo ''\\''''OOPS="oops''\\''''\)'
```

----------------------------------------

TITLE: Configuring Transitive Dependency Go Module 'y' (Go Module)
DESCRIPTION: Defines the Go module named `y` using Go version 1.15. This module contains the package `y/fromotherdeptest`, which is imported only by tests in module `x`, making it a transitive test dependency relative to the main module `m`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_16

LANGUAGE: gomod
CODE:
```
-- y/go.mod --
module y

go 1.15
```

----------------------------------------

TITLE: HTML Module Discovery Metadata for Go Modules
DESCRIPTION: HTML file with go-import meta tag that helps Go's module system discover and locate the module source. It specifies that vcs-test.golang.org/auth/or404 is a module hosted at the specified URL.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/or404.txt#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<meta name="go-import" content="vcs-test.golang.org/auth/or404 mod https://vcs-test.golang.org/auth/or404">
```

----------------------------------------

TITLE: Running Go Program with Module Mode Off
DESCRIPTION: Shell commands to run a Go program with module mode disabled, demonstrating vendoring behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_vendor.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=off
cd vend/hello
go run hello.go
stdout 'hello, world'
```

----------------------------------------

TITLE: Implementing Interface with Duplicate Method
DESCRIPTION: This Go file defines interfaces that lead to a duplicate method when embedded, causing a compilation error in Go 1.14+.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package bad114

type XY interface {
	X()
	Y()
}

type YZ interface {
	Y()
	Z()
}

type XYZ interface {
	XY
	YZ
}
```

----------------------------------------

TITLE: Linux System Calls and Structures
DESCRIPTION: Common system call implementations and data structures for Linux across different architectures (386, amd64, arm). Includes file locking and message sending operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_17

LANGUAGE: Go
CODE:
```
func FcntlFlock(uintptr, int, *Flock_t) error
func SendmsgN(int, []uint8, []uint8, Sockaddr, int) (int, error)

type Flock_t struct {
    Type int16
    Whence int16
    Start int64
    Len int64
    Pid int32
    Pad_cgo_0 [4]uint8
    Pad_cgo_1 [4]uint8
}
```

----------------------------------------

TITLE: Generating Base64 Encoded Go 1.17 Binary
DESCRIPTION: Shell commands to build a Go 1.17 binary with specific platform settings, encode it to base64, and clean up. Uses GOTOOLCHAIN to ensure Go 1.17 is used, targeting Linux AMD64 architecture.
SOURCE: https://github.com/golang/go/blob/master/src/debug/buildinfo/testdata/go117/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
GOTOOLCHAIN=go1.17 GOOS=linux GOARCH=amd64 go build -trimpath
base64 go117 > go117.base64
rm go117
```

----------------------------------------

TITLE: Configuring Doc Link Base URL with JSON
DESCRIPTION: Defines the base URL for documentation links using a JSON configuration object that points to pkg.go.dev.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink5.txt#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{"DocLinkBaseURL": "https://pkg.go.dev"}
```

----------------------------------------

TITLE: Adding TLS Support for X25519MLKEM768 in Go
DESCRIPTION: New constant for X25519MLKEM768 curve in the crypto/tls package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_9

LANGUAGE: Go
CODE:
```
const X25519MLKEM768 = 4588
const X25519MLKEM768 CurveID
```

----------------------------------------

TITLE: Defining Terminal Control Constants (PAR*) in Go for darwin-arm64
DESCRIPTION: Constants for terminal control attributes related to parity and other terminal settings. These are used with termios interfaces to configure parity checking, odd/even parity, and input processing behaviors.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_86

LANGUAGE: Go
CODE:
```
const PARENB = 4096
const PARENB ideal-int
const PARMRK = 8
const PARMRK ideal-int
const PARODD = 8192
const PARODD ideal-int
const PENDIN = 536870912
const PENDIN ideal-int
```

----------------------------------------

TITLE: Test Function for Package B
DESCRIPTION: Defines a test for package 'b' that calls the G() function, which in turn calls the F() function from package 'a'. This will be used to verify coverage reporting.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dot_import.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package b

import "testing"

func TestG(t *testing.T) {
	G()
}
```

----------------------------------------

TITLE: Testing quote.go Functions in Go
DESCRIPTION: Test file for the quote package that verifies each function returns the expected string. It includes tests for Hello(), Glass(), Go(), and Opt() functions, with an initialization function that sets the locale to English.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.3-pre1.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package quote

import (
	"os"
	"testing"
)

func init() {
	os.Setenv("LC_ALL", "en")
}

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory, share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}

func TestOpt(t *testing.T) {
	opt := "If a program is too slow, it must have a loop."
	if out := Opt(); out != opt {
		t.Errorf("Opt() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Direct Dependency Module Definition
DESCRIPTION: go.mod file for the direct dependency module
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_upgrade_lazy.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module direct

go 1.17

require example.com/lazyupgrade v0.1.0
```

----------------------------------------

TITLE: Implementing Chatty Benchmark in Go
DESCRIPTION: This Go code defines a benchmark function that generates chatty output and errors. It creates three sub-benchmarks, each logging messages and an error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_chatty_fail.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package chatty_bench

import (
	"testing"
	"fmt"
)

func BenchmarkChatty(b *testing.B) {
    for i := 0; i < 3; i++ {
        b.Run(fmt.Sprintf("sub-%d", i), func(b *testing.B) {
            for j := 0; j < 2; j++ {
                b.Logf("this is sub-%d", i)
            }
            b.Errorf("error from sub-%d", i)
        })
    }
}
```

----------------------------------------

TITLE: Creating Go Test Package with Circular Import (Part 2) (Go)
DESCRIPTION: Defines the test package `sql` in `datastore/sql/sql_test.go`. It imports the `datastore` package (`golang.org/issue45863/datastore`) using a blank identifier (`_`) for its side effects (like initialization). This import, combined with the imports in `datastore/datastore_health.go`, completes the import cycle that issue 45863 aims to diagnose correctly when test dependencies are included.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_test_cycle.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
-- datastore/sql/sql_test.go --
package sql

import _ "golang.org/issue45863/datastore"
```

----------------------------------------

TITLE: Testing Default GOPROXY and GOSUMDB Settings in Go
DESCRIPTION: This snippet checks the default values for GOPROXY and GOSUMDB environment variables in Go. It verifies that GOPROXY defaults to 'https://proxy.golang.org,direct' and GOSUMDB defaults to 'sum.golang.org'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_golang.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GOPROXY=
env GOSUMDB=
go env GOPROXY
go env GOSUMDB
env GOPROXY=https://proxy.golang.org
go env GOSUMDB
```

----------------------------------------

TITLE: Testing Cross-Platform Build Environment Setup
DESCRIPTION: Shell script that unsets build variables and tests compilation across different platforms using GOENV
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_cross_build.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GOOS=
env GOARCH=
env GOEXPERIMENT=

env GOENV=windows-amd64
go build internal/abi

env GOENV=ios-arm64
go build internal/abi

env GOENV=linux-mips
go build internal/abi
```

----------------------------------------

TITLE: Module Checksum Configuration
DESCRIPTION: Go.sum file containing checksums for module dependencies including retracted versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
example.com/retract v1.0.0-bad h1:liAW69rbtjY67x2CcNzat668L/w+YGgNX3lhJsWIJis=
example.com/retract v1.0.0-bad/go.mod h1:0DvGGofJ9hr1q63cBrOY/jSY52OwhRGA0K47NE80I5Y=
example.com/retract/self/prev v1.1.0 h1:0/8I/GTG+1eJTFeDQ/fUbgrMsVHyKhh3Z8DSZp1fuA=
example.com/retract/self/prev v1.1.0/go.mod h1:xl2EcklWuZZHVtHWcpzfSJQmnzAGpKZYpA/Wto7SZN4=
```

----------------------------------------

TITLE: Defining SocketControlMessage Struct for Socket Control Messages in Go Syscall Package
DESCRIPTION: The SocketControlMessage struct represents control messages for socket operations in the syscall package for Darwin ARM64. It contains a header (Cmsghdr) and a data slice that holds the actual message content.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_207

LANGUAGE: Go
CODE:
```
type SocketControlMessage struct {
    Header Cmsghdr
    Data   []uint8
}
```

----------------------------------------

TITLE: Expected Tidy Module Definition
DESCRIPTION: Shows the expected state of go.mod after running 'go mod tidy', with the self-reference removed and proper dependency version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_lazy_self.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module golang.org/issue/46078

go 1.17

replace (
	example.net/x v0.1.0 => ./x
	example.net/x v0.2.0 => ./x
	golang.org/issue/46078 v0.1.0 => ./old
)

require example.net/x v0.2.0
```

----------------------------------------

TITLE: Shell Script for Go Version Display
DESCRIPTION: This shell script is used to display the version of Golang being tested, specifically 'go1.999testmod'. It uses a simple echo command to achieve this. This script does not have any complex dependencies other than a shell environment to execute it.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-arm.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
#!/bin/sh
echo go1.999testmod here!
```

----------------------------------------

TITLE: Adding Binary and Text Appender Interfaces in Go
DESCRIPTION: New interfaces for appending binary and text data in the encoding package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_12

LANGUAGE: Go
CODE:
```
type BinaryAppender interface {
    AppendBinary([]uint8) ([]uint8, error)
}

type TextAppender interface {
    AppendText([]uint8) ([]uint8, error)
}
```

----------------------------------------

TITLE: Go Module Download with Commit Hash (GOPROXY=off)
DESCRIPTION: Downloads a module version using a commit hash when GOPROXY is set to 'off'. This test verifies that the go command uses available pseudo-versions in the cache. The expected version is checked against the JSON output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_pseudo_cache.txt#_snippet_1

LANGUAGE: Go
CODE:
```
env GOPROXY=off
go mod download -json golang.org/x/text@a1b916ed6726
stdout '"Version": "v0.0.0-20171215141712-a1b916ed6726",'
```

----------------------------------------

TITLE: Testing Go Environment Cache Settings
DESCRIPTION: Shell commands to examine Go environment configuration and verify that compiler results are properly cached. Tests the output of go env commands and checks for specific output patterns.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_cache.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go env
go env -x
! stdout '\|\| true'
```

----------------------------------------

TITLE: Setting Environment Variable for Go List Output Format
DESCRIPTION: Defines a format string for 'go list' output, displaying the import path and any errors encountered.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env fmt='{{.ImportPath}}: {{if .Error}}{{.Error.Err}}{{else}}ok{{end}}'
```

----------------------------------------

TITLE: Building CGO Test Executable with Verbose Output in Go
DESCRIPTION: Builds the CGO test project into an executable named 'exe2' using the 'go build' command with verbose output (-x flag).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cgo_consistent_results.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go build -x -o $WORK/exe2$GOEXE cgotest
```

----------------------------------------

TITLE: Archive File Validator Utility
DESCRIPTION: A Go program that checks if a given file is a valid archive by examining its header bytes. It expects the file path as a command-line argument and validates that it starts with the archive signature '!<arch>'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_output.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

import (
	"bytes"
	"fmt"
	"io"
	"os"
)

func main() {
	f, err := os.Open(os.Args[1])
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	buf := make([]byte, 100)
	io.ReadFull(f, buf)
	f.Close()
	if !bytes.HasPrefix(buf, []byte("!<arch>\n")) {
		fmt.Fprintf(os.Stderr, "file %s exists but is not an archive\n", os.Args[1])
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: Go Module Tidy and Comparison
DESCRIPTION: Performs 'go mod tidy' and compares the result with the original go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
cp go.mod go.mod.orig
go mod tidy
cmp go.mod go.mod.orig
```

----------------------------------------

TITLE: Declaring System Call Functions in Go for NetBSD
DESCRIPTION: These function declarations represent system calls for file control and message sending on NetBSD. They provide low-level access to operating system functionality.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_23

LANGUAGE: Go
CODE:
```
func FcntlFlock(uintptr, int, *Flock_t) error
func SendmsgN(int, []uint8, []uint8, Sockaddr, int) (int, error)
```

----------------------------------------

TITLE: External Test for Package with Test Suffix
DESCRIPTION: A test file for the c_test package using the external test pattern, resulting in a c_test_test package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
package c_test_test

import "testing"

func Test(t *testing.T) {}
```

----------------------------------------

TITLE: Defining main package with import
DESCRIPTION: Defines a Go file 'p.go' in the main package that attempts to import package 'x', which is expected to be missing or not found during the build process.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_issue12156.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package p

import "x"
```

----------------------------------------

TITLE: Socket Configuration Constants for Darwin ARM64
DESCRIPTION: This snippet defines socket configuration constants including socket type (SOCK_*), socket option level (SOL_*), and maximum connection values (SOMAXCONN). These constants define fundamental socket behavior and configuration parameters.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_96

LANGUAGE: Go
CODE:
```
pkg syscall (darwin-arm64), const SOCK_MAXADDRLEN = 255
pkg syscall (darwin-arm64), const SOCK_MAXADDRLEN ideal-int
pkg syscall (darwin-arm64), const SOCK_RDM = 4
pkg syscall (darwin-arm64), const SOCK_RDM ideal-int
pkg syscall (darwin-arm64), const SOL_SOCKET = 65535
pkg syscall (darwin-arm64), const SOMAXCONN = 128
```

----------------------------------------

TITLE: Importing Version Package in Lazy Module
DESCRIPTION: Imports the version package in the lazy module to demonstrate dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
package lazy

import _ "example.com/version"
```

----------------------------------------

TITLE: Main Package Declaration with Export
DESCRIPTION: Basic main package declaration with an exported variable X and empty main function
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_main.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

var X int

func main() {}
```

----------------------------------------

TITLE: Package B Implementation
DESCRIPTION: Basic implementation of package b with test file importing package c.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_version.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package b
```

LANGUAGE: go
CODE:
```
package b_test

import _ "example.net/c"
```

----------------------------------------

TITLE: Go Module Definition for Benchmark Fatal Test
DESCRIPTION: A simple Go module definition file that specifies the module name as 'benchfatal' and requires Go 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_fatal.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module benchfatal

go 1.16
```

----------------------------------------

TITLE: Running Go benchmark with benchtime 1x flag
DESCRIPTION: Command to run the benchmark with the -benchtime 1x flag, ensuring only one iteration runs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_1x.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -run ^$ -bench . -benchtime 1x
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: Specifies the module name and Go version requirement for the project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_unsupported.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example

go 1.18
```

----------------------------------------

TITLE: Test File for CGO Integration
DESCRIPTION: A Go test file that tests the F() function which contains CGO code. This is used to verify that code coverage works correctly with CGO functions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p

import "testing"

func TestF(t *testing.T) {
	F()
}
```

----------------------------------------

TITLE: Hiding Retracted Versions in Go List with Versions
DESCRIPTION: Confirms the behavior of 'go list -m -versions' in hiding retracted versions and displays only non-retracted ones.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_11

LANGUAGE: Go
CODE:
```
# 'go list -m -versions' hides retracted versions.\ngo list -m -versions example.com/retract\nstdout '^example.com/retract v1.0.0-good v1.1.0$'
```

----------------------------------------

TITLE: Gofmt Output
DESCRIPTION: Text formatted according to Go formatting rules
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/hello.txt#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
Hello,
world

This is
a test.
```

----------------------------------------

TITLE: Defining SysProcAttr struct for Windows in syscall package
DESCRIPTION: Definition of the SysProcAttr struct fields specifically for Windows platforms (both 386 and AMD64 architectures). This shows platform-specific process attributes for process creation on Windows.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_172

LANGUAGE: go
CODE:
```
type SysProcAttr struct {
	ProcessAttributes *SecurityAttributes
	ThreadAttributes *SecurityAttributes
	// Other fields not shown
}
```

----------------------------------------

TITLE: Testing Undefined Variable Usage in Go
DESCRIPTION: This Go test file demonstrates the use of an undefined variable, which should cause a compilation error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_badtest.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package badvar_test

func f() {
	_ = notdefined
}
```

----------------------------------------

TITLE: Empty Go Package Declaration
DESCRIPTION: A minimal Go source file that only declares a package named 'p'. Used to verify that actual Go files are correctly identified by the test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_symlink_dotgo.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p
```

----------------------------------------

TITLE: Creating Root Package with Imported Dependency
DESCRIPTION: Root package file that imports a subpackage from the same module. This demonstrates package organization and import relationships within a module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-new.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package new

import _ "vcs-test.golang.org/git/modlegacy1-new.git/v2/p2"
```

----------------------------------------

TITLE: Image Package CMYK Implementation
DESCRIPTION: Defines CMYK image type and related color conversion functions for image processing
SOURCE: https://github.com/golang/go/blob/master/api/go1.5.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
type CMYK struct {
    Pix []uint8
    Rect Rectangle
    Stride int
}

func CMYKToRGB(c, m, y, k uint8) (uint8, uint8, uint8)
func RGBToCMYK(r, g, b uint8) (uint8, uint8, uint8, uint8)
```

----------------------------------------

TITLE: Testing Example Output with Line Feed Characters
DESCRIPTION: Go test example that prints output using explicit line feed characters to verify correct handling during testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_crlf_example.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
func Example_lf() {
	fmt.Print("foo", "\n", "bar")
	// Output:
	// foo
	// bar
}
```

----------------------------------------

TITLE: Testing Sleep Function in Go
DESCRIPTION: This Go test function demonstrates the use of 'time.Sleep' to pause execution within a test. It imports necessary packages like 'testing' and 'time' to perform the sleep operation. The test function 'TestSleep' is basic and serves to illustrate sleeping for 10 milliseconds during testing. The main limitation is that sleeping in tests is generally discouraged unless necessary.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cpu_profile_twice.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package x_test
import (
    "testing"
    "time"
)
func TestSleep(t *testing.T) {
    time.Sleep(10 * time.Millisecond)
}
```

----------------------------------------

TITLE: Module Definition for Other Test Package
DESCRIPTION: The go.mod file for an alternate test module other/x/y used in the tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gobuild_import.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module other/x/y
```

----------------------------------------

TITLE: Defining Go Module for Test-only Package
DESCRIPTION: This snippet shows a go.mod file for a test-only package module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
module example.net/testonly

go 1.15
```

----------------------------------------

TITLE: Go Module Dependency Declaration
DESCRIPTION: Declares a dependency on rsc.io/badfile1 version 1.0.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile2_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
rsc.io/badfile1 v1.0.0
```

----------------------------------------

TITLE: Defining Module Dependencies for Prerelease Version in Go
DESCRIPTION: This go.mod file for the prerelease version of example.net/a module specifies its Go version without additional dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
module example.net/a

go 1.17
```

----------------------------------------

TITLE: Nested Module Definition
DESCRIPTION: Module definition for the nested package with different versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_split.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.net/split/nested

go 1.16
```

----------------------------------------

TITLE: Go Module Command Execution
DESCRIPTION: Executes go mod tidy command and validates expected warning messages about go.mod in GOPATH
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_issue46807.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go mod tidy
stderr '^go: warning: ignoring go.mod in \$GOPATH'
stderr '^go: go.mod file not found in current directory or any parent directory; see \'go help modules\''
```

----------------------------------------

TITLE: Package dir2 Implementation
DESCRIPTION: Main file for the dir2 package which exports PrintMessage and calls a private implementation. Shows package structure spanning files in and outside the overlay.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package dir2

func PrintMessage() {
	printMessage()
}
```

----------------------------------------

TITLE: Go Module Checksums
DESCRIPTION: A go.sum file containing the cryptographic checksums for the example.com/dotname module. This ensures dependency integrity when the module is fetched.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path_dotname.txt#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
example.com/dotname v1.0.0 h1:Q0JMAn464CnwFVCshs1n4+f5EFiW/eRhnx/fTWjw2Ag=
example.com/dotname v1.0.0/go.mod h1:7K4VLT7QylRI8H7yZwUkeDH2s19wQnyfp/3oBlItWJ0=
```

----------------------------------------

TITLE: Testing Deadlock Detection in Go Fuzz Tests
DESCRIPTION: This function tests how Go's fuzzing handles a deadlock situation. It enters an infinite select{} when the input is not 0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_8

LANGUAGE: Go
CODE:
```
func FuzzDeadlock(f *testing.F) {
	f.Add(int(0))
	f.Fuzz(func(t *testing.T, n int) {
		if n != 0 {
			select {}
		}
	})
}
```

----------------------------------------

TITLE: Handling Special Cases in GCD and LCM Calculations with Go
DESCRIPTION: This code snippet demonstrates how GCD and LCM calculations handle special cases, such as when one or both input numbers are zero, or when both numbers are equal.
SOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/fips140/rsa/testdata/gcd_lcm_tests.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
A = 0
B = 8d9d4f30773c4edf
LCM = 0

GCD = 8d9d4f30773c4edf
A = 8d9d4f30773c4edf
B = 0
LCM = 0

GCD = 8d9d4f30773c4edf
A = 8d9d4f30773c4edf
B = 8d9d4f30773c4edf
LCM = 8d9d4f30773c4edf
```

----------------------------------------

TITLE: Defining an Empty Package - Go
DESCRIPTION: This Go snippet defines an empty package named 'pkg' in the 'pkg/pkg.go' file. It serves as a stub or placeholder for adding future functionality to this package. There are no functions, variables, or other declarations present, and no dependencies are specified or imported.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_noroot_v1.0.1.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package pkg
```

----------------------------------------

TITLE: Test package file in repository
DESCRIPTION: The main package file for the test repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_issue53955.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package issue53955
```

----------------------------------------

TITLE: Go Package Declaration for pkg/p.go
DESCRIPTION: Simple Go package declaration used in multiple versions of the repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_21

LANGUAGE: go
CODE:
```
package p // pkg/p.go
```

----------------------------------------

TITLE: Building and Testing Binary for Embedded Module Info Presence via Shell
DESCRIPTION: This shell script snippet changes the current directory to `unused`, builds the `unused` Go binary using `go build`, and then executes it using `exec ./unused$GOEXE`. This part of the test verifies that build information is still embedded within the binary itself, even if the program doesn't explicitly call `runtime/debug.ReadBuildInfo`. It relies on the Go toolchain being installed and the `unused` Go program existing in the subdirectory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_modinfo.txt#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
[short] skip

# Build a binary that accesses its debug info by reading the binary directly
# (rather than through debug.ReadBuildInfo).
# The debug info should still be present (golang.org/issue/28753).
cd unused
go build
exec ./unused$GOEXE
```

----------------------------------------

TITLE: Package P1 Definition
DESCRIPTION: Simple package p1 defining a string constant Name
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_export_e.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package p1

const Name = "p1"
```

----------------------------------------

TITLE: Declaring a Simple Go Package
DESCRIPTION: This Go source file (`p.go`) declares a basic package named `p`. It serves as a minimal placeholder file within the `example.com/retract/self/prev` module structure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prev_v1.9.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p
```

----------------------------------------

TITLE: Incorrect TestMain Function Signature in Go
DESCRIPTION: This snippet shows an incorrect implementation of the TestMain function with a wrong signature. It uses *testing.Main instead of the correct *testing.M parameter.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package standalone_main_wrong_test

import "testing"

func TestMain(m *testing.Main) {
}
```

----------------------------------------

TITLE: Testing Directory Access in Go Package b
DESCRIPTION: A test function for package b that verifies the existence of a testdata directory using os.Stat. The test attempts to access a testdata file in the parent directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package b

import (
	"os"
	"testing"
)

func TestDir(t *testing.T) {
	if _, err := os.Stat("../testdata/1"); err != nil {
		t.Fatalf("testdata: %v", err)
	}
}
```

----------------------------------------

TITLE: Verifying Module Mode and Absence of go.mod
DESCRIPTION: Checks if the environment is in module mode and confirms the absence of a go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go env GOMOD
stdout 'NUL|/dev/null'
```

----------------------------------------

TITLE: Go Get with Empty Rationale
DESCRIPTION: This snippet tests the behavior of 'go get' when a module version is retracted without a rationale. It asserts that a hard-coded message is printed to stderr.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_0

LANGUAGE: go
CODE:
```
go get example.com/retract/rationale@v1.0.0-empty
stderr '^go: warning: example.com/retract/rationale@v1.0.0-empty: retracted by module author$'
```

----------------------------------------

TITLE: Running Go Tests with No Matches
DESCRIPTION: This shell command runs Go tests using a pattern that matches no tests. It demonstrates the output when no tests are executed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_tests.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go test -run ThisWillNotMatch standalone_test.go
```

----------------------------------------

TITLE: Cleaning Go Module Cache
DESCRIPTION: Uses 'go clean -modcache' to remove the entire module cache, forcing subsequent commands to re-download modules if needed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
go clean -modcache
```

----------------------------------------

TITLE: Verifying Build Status After Upgrade
DESCRIPTION: Checks the build status after upgrading, expecting an error due to missing checksum for a new dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go list -deps -e -f $fmt
stdout 'rsc.io/quote: ok'
stdout 'rsc.io/sampler: missing go.sum entry for module providing package rsc.io/sampler'
```

----------------------------------------

TITLE: File Permission Constants in Go for NetBSD ARM64
DESCRIPTION: Constants representing file permission bits for the NetBSD operating system. These define read, write, and execute permissions for user, group, and others as well as special bits like sticky bit.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_60

LANGUAGE: Go
CODE:
```
const S_IREAD = 256
const S_IRGRP = 32
const S_IROTH = 4
const S_IRWXG = 56
const S_IRWXO = 7
const S_IRWXU = 448
const S_ISTXT = 512
const S_IWGRP = 16
const S_IWOTH = 2
const S_IWRITE = 128
const S_IXGRP = 8
const S_IXOTH = 1
const S_LOGIN_SET = 1
```

----------------------------------------

TITLE: Running Go Fuzz Tests with Various Configurations
DESCRIPTION: This shell script runs a series of Go fuzz tests with different configurations, including various -fuzz and -run flags, as well as different fuzztime settings. It tests both successful and failing scenarios.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_seed_corpus.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
! go test -fuzz=^FuzzWithAdd$ -run=^FuzzWithAdd$ -fuzztime=1x
! stdout ^ok
! stdout 'Failing input written to testdata[/\\]fuzz[/\\]FuzzWithAdd[/\\]'
stdout FAIL

go test -fuzz=FuzzWithGoodAdd -run=FuzzWithGoodAdd -fuzztime=1x
stdout ok
! stdout FAIL

! go test -fuzz=FuzzWithTestdata -run=FuzzWithTestdata -fuzztime=1x
! stdout ^ok
! stdout 'Failing input written to testdata[/\\]fuzz[/\\]FuzzWithTestdata[/\\]'
stdout 'failure while testing seed corpus entry: FuzzWithTestdata/1'
stdout FAIL

! go test -fuzz=FuzzWithNoCache -run=FuzzWithNoCache -fuzztime=1x
! stdout ^ok
stdout 'Failing input written to testdata[/\\]fuzz[/\\]FuzzWithNoCache[/\\]'
stdout FAIL

! go test -fuzz=FuzzWithCache -run=FuzzWithCache -fuzztime=1x
! stdout ^ok
stdout 'Failing input written to testdata[/\\]fuzz[/\\]FuzzWithCache[/\\]'
stdout FAIL

! go test -fuzz=FuzzWithMinimizableCache -run=FuzzWithMinimizableCache -fuzztime=10000x
! stdout ^ok
stdout 'gathering baseline coverage'
stdout 'got the minimum size!'
stdout 'contains a non-zero byte of length 10'
stdout 'Failing input written to testdata[/\\]fuzz[/\\]FuzzWithMinimizableCache[/\\]'
stdout FAIL
! stdout 'execs'

go clean -fuzzcache
! exists $GOCACHE/fuzz

! go test -fuzz=^FuzzWithAdd$ -run=None
! stdout ^ok
! stdout 'Failing input written to testdata[/\\]fuzz[/\\]FuzzWithAdd[/\\]'
stdout FAIL

go test -fuzz=FuzzWithGoodAdd -run=None -fuzztime=1x
stdout ok
! stdout FAIL

! go test -fuzz=FuzzWithTestdata -run=None -fuzztime=1x
! stdout ^ok
! stdout 'Failing input written to testdata[/\\]fuzz[/\\]FuzzWithTestdata[/\\]'
stdout FAIL

! go test -fuzz=FuzzRunNoneWithCache -run=None -fuzztime=1x
! stdout ^ok
stdout 'Failing input written to testdata[/\\]fuzz[/\\]FuzzRunNoneWithCache[/\\]'
stdout FAIL

go clean -fuzzcache
! exists $GOCACHE/fuzz

go test -c
! exec ./x.test$GOEXE -test.fuzz=^FuzzWithAdd$ -test.run=^FuzzWithAdd$ -test.fuzztime=1x -test.fuzzcachedir=$WORK/cache
! stdout ^ok
! stdout 'Failing input written to testdata[/\\]fuzz[/\\]FuzzWithAdd[/\\]'
stdout FAIL
stderr warning

go test -c
! exec ./x.test$GOEXE -test.fuzz=FuzzWithTestdata -test.run=^FuzzWithTestdata$ -test.fuzztime=1x -test.fuzzcachedir=$WORK/cache
! stdout ^ok
! stdout 'Failing input written to testdata[/\\]fuzz[/\\]FuzzWithTestdata[/\\]'
stdout FAIL
stderr warning
```

----------------------------------------

TITLE: Go Workspace Recursive Configuration
DESCRIPTION: Recursive go.work configuration showing expanded module paths after using the -r flag with foo module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go 1.18

use (
	./foo
	./foo/bar/baz
)
```

----------------------------------------

TITLE: Comparing go.mod Files Before and After Tidy in Shell
DESCRIPTION: This shell script copies the original go.mod file, runs 'go mod tidy', and then compares the original and modified files to check for any changes in module dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_oldgo.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
cp go.mod go.mod.orig
go mod tidy
cmp go.mod go.mod.orig
```

----------------------------------------

TITLE: Executing `go list` Under Normal Conditions (Shell)
DESCRIPTION: This snippet executes the `go list ./...` command in a shell environment. It's part of a test setup designed to verify that `go list` functions correctly under standard file and directory permissions. The preceding comment `# go list should work in ordinary conditions.` indicates the intent, and `! stdout _data` suggests the expected standard output should contain references related to the `_data` directory or its contents.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_perm.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
# go list should work in ordinary conditions.
go list ./...
! stdout _data
```

----------------------------------------

TITLE: Running Go Benchmark with Pattern Matching
DESCRIPTION: Shell command for running Go benchmarks with a pattern that intentionally matches no benchmarks. Shows expected output validation with no matching tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_benchmarks.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -run '^$' -bench ThisWillNotMatch standalone_benchmark_test.go
! stdout '^ok.*\[no tests to run\]'
! stderr '^ok.*\[no tests to run\]'
stdout '^ok'
```

----------------------------------------

TITLE: Module Replacement Test Script
DESCRIPTION: Bash script that tests various Go module replacement scenarios, including replacing with local packages, different module paths, and error handling for conflicting replacements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace.txt#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
env GO111MODULE=on
[short] skip

cp go.mod go.mod.orig

# Make sure the test builds without replacement.
go build -mod=mod -o a1.exe .
exec ./a1.exe
stdout 'Don''t communicate by sharing memory'

# Modules can be replaced by local packages.
cp go.mod.orig go.mod
go mod edit -replace=rsc.io/quote/v3=./local/rsc.io/quote/v3
go build -o a2.exe .
exec ./a2.exe
stdout 'Concurrency is not parallelism.'

# The module path of the replacement doesn't need to match.
# (For example, it could be a long-running fork with its own import path.)
cp go.mod.orig go.mod
go mod edit -replace=rsc.io/quote/v3=./local/not-rsc.io/quote/v3
go build -o a3.exe .
exec ./a3.exe
stdout 'Clear is better than clever.'

# However, the same module can't be used as two different paths.
cp go.mod.orig go.mod
go mod edit -replace=not-rsc.io/quote/v3@v3.0.0=rsc.io/quote/v3@v3.0.0 -require=not-rsc.io/quote/v3@v3.0.0
! go build -o a4.exe .
stderr 'rsc.io/quote/v3@v3.0.0 used for two different module paths \(not-rsc.io/quote/v3 and rsc.io/quote/v3\)'

# Modules that do not (yet) exist upstream can be replaced too.
cp go.mod.orig go.mod
go mod edit -replace=not-rsc.io/quote/v3@v3.1.0=./local/rsc.io/quote/v3
go build -mod=mod -o a5.exe ./usenewmodule
! stderr 'finding not-rsc.io/quote/v3'
grep 'not-rsc.io/quote/v3 v3.1.0' go.mod
exec ./a5.exe
stdout 'Concurrency is not parallelism.'

# Error messages for modules not found in replacements should
# indicate the replacement module.
cp go.mod.orig go.mod
go mod edit -replace=rsc.io/quote/v3=./local/rsc.io/quote/v3
! go get rsc.io/quote/v3/missing-package
stderr 'module rsc.io/quote/v3@upgrade found \(v3.0.0, replaced by ./local/rsc.io/quote/v3\), but does not contain package'

# The reported Dir and GoMod for a replaced module should be accurate.
cp go.mod.orig go.mod
go mod edit -replace=rsc.io/quote/v3=not-rsc.io/quote@v0.1.0-nomod
go mod download rsc.io/quote/v3
go list -m -f '{{.Path}} {{.Version}} {{.Dir}} {{.GoMod}}{{with .Replace}} => {{.Path}} {{.Version}} {{.Dir}} {{.GoMod}}{{end}}' rsc.io/quote/v3
stdout '^rsc.io/quote/v3 v3.0.0 '$GOPATH'[/\\]pkg[/\\]mod[/\\]not-rsc.io[/\\]quote@v0.1.0-nomod '$GOPATH'[/\\]pkg[/\\]mod[/\\]cache[/\\]download[/\\]not-rsc.io[/\\]quote[/\\]@v[/\\]v0.1.0-nomod.mod => not-rsc.io/quote v0.1.0-nomod '$GOPATH'[/\\]pkg[/\\]mod[/\\]not-rsc.io[/\\]quote@v0.1.0-nomod '$GOPATH'[/\\]pkg[/\\]mod[/\\]cache[/\\]download[/\\]not-rsc.io[/\\]quote[/\\]@v[/\\]v0.1.0-nomod.mod$'
```

----------------------------------------

TITLE: Testing Go Module Downloads and Caching
DESCRIPTION: This snippet sets up the environment and tests Go module downloads in readonly mode. It also checks the module cache for specific versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_file_proxy.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
env GOPATH=$WORK/gopath1
cd $WORK/x
go mod edit -fmt
go list -mod=readonly
env GOPROXY=file:///nonexist
go list
grep v1.5.1 $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/list
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a minimal Go module named 'm'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_json_with_f.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Defining Go Module in go.mod File
DESCRIPTION: Standard go.mod file specifying the module name as 'golang.org/x/useinternal'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_useinternal_v0.1.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module golang.org/x/useinternal
```

----------------------------------------

TITLE: Verifying Initial Module State
DESCRIPTION: Checks the initial state of go.mod and go.sum files before upgrades.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
cp go.mod.orig go.mod
cp go.sum.orig go.sum
go mod tidy
cmp go.mod.orig go.mod
cmp go.sum.orig go.sum
```

----------------------------------------

TITLE: Simple Go Program with Relative Import
DESCRIPTION: A basic Go program that demonstrates importing a package from a relative path. The program imports the 'easysub' package from a subdirectory and calls its Hello function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_local.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import "./easysub"

func main() {
	easysub.Hello()
}
```

----------------------------------------

TITLE: Module B Implementation
DESCRIPTION: Package b implementation with a simple exported function B().
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package b

func B() {
}
```

----------------------------------------

TITLE: Package with Nested Relative Import
DESCRIPTION: A Go package that demonstrates relative imports within a package. It imports a subpackage using a relative path and calls functions from both the current package and the imported subpackage.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_local.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package sub

import (
	"fmt"

	subsub "./sub"
)

func Hello() {
	fmt.Println("sub.Hello")
	subsub.Hello()
}
```

----------------------------------------

TITLE: Testing Go List Prefix Behavior in Shell
DESCRIPTION: This script tests the 'go list' command with a prefix argument to ensure it only reads relevant directories. It sets the GODEBUG environment variable to trace filesystem operations, executes 'go list m...', and checks the stderr output for expected and unexpected patterns.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fsys_walk.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GODEBUG=gofsystrace=1
go list m...
stderr mime
stderr mime[\/]multipart
! stderr archive
```

----------------------------------------

TITLE: Supporting Module Definitions
DESCRIPTION: Basic module definitions for supporting modules c, d, and e.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_artifact.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.com/c

go 1.16
package c
```

LANGUAGE: go
CODE:
```
module example.com/d

go 1.16
package d
```

LANGUAGE: go
CODE:
```
module example.com/e

go 1.16
package e
```

----------------------------------------

TITLE: Empty Package Z3 Implementation
DESCRIPTION: Minimal package z3 definition with no functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gcflags_patterns.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package z3
```

----------------------------------------

TITLE: Unresolved Package Implementation
DESCRIPTION: Implementation file for the unresolved package with documentation comment
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_symlink_issue35941.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
// Package unresolved exists, but 'go mod tidy' won't add it.
package unresolved
```

----------------------------------------

TITLE: Defining an Empty Go Package - Go
DESCRIPTION: Defines a minimal Go package named p with no implementation. This serves as an empty entry point for the module, satisfying Go's requirement for at least one package in each module version. There are no exported symbols, imports, or code logic present.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prerelease_v1.9.1-pre.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package p

```

----------------------------------------

TITLE: Test File Implementation
DESCRIPTION: Basic test file with empty test function
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fips.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main
import "testing"
func Test(t *testing.T) {}
```

----------------------------------------

TITLE: Testing Go Module with Leading Dot Import Path
DESCRIPTION: A series of test commands that verify Go's handling of import paths containing elements with a leading dot in another module. Tests include direct package fetching, importing packages with leading dots, and module management operations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path_dotname.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# 'go get' works with no version query.
cp go.mod.empty go.mod
go get example.com/dotname/.dot
go list -m example.com/dotname
stdout '^example.com/dotname v1.0.0$'

# 'go get' works with a version query.
cp go.mod.empty go.mod
go get example.com/dotname/.dot@latest
go list -m example.com/dotname
stdout '^example.com/dotname v1.0.0$'

# 'go get' works on an importing package.
cp go.mod.empty go.mod
go get .
go list -m example.com/dotname
stdout '^example.com/dotname v1.0.0$'

# 'go list' works on the dotted package.
go list example.com/dotname/.dot
stdout '^example.com/dotname/.dot$'

# 'go list' works on an importing package.
go list .
stdout '^m$'

# 'go mod tidy' works.
cp go.mod.empty go.mod
go mod tidy
go list -m example.com/dotname
stdout '^example.com/dotname v1.0.0$'
```

----------------------------------------

TITLE: Generating Diff Output for File Comparison
DESCRIPTION: This snippet demonstrates the resulting diff output from comparing the old and new file versions. It shows the unified diff format, highlighting additions, deletions, and context lines.
SOURCE: https://github.com/golang/go/blob/master/src/internal/diff/testdata/basic.txt#2025-04-22_snippet_1

LANGUAGE: diff
CODE:
```
diff old new
--- old
+++ new
@@ -1,7 +1,7 @@
+w
 a
 b
-c
-d
+x
+y
+z
 e
-f
-g
```

----------------------------------------

TITLE: Sample Go Module File with Proper Formatting
DESCRIPTION: A properly formatted go.mod file used as the reference for tidy operations in the tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
module m

go 1.14

require (
	rsc.io/quote v1.5.2
	rsc.io/testonly v1.0.0 // indirect
)
```

----------------------------------------

TITLE: Package Y v0.1.0 Implementation
DESCRIPTION: First version of package y with basic implementation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.net/y

go 1.16
```

LANGUAGE: go
CODE:
```
package y
```

----------------------------------------

TITLE: Attempting Go Module Initialization with Invalid Path (Shell)
DESCRIPTION: Attempts to initialize a Go module in the current directory using '.' as the module path. This fails because '.' is considered a local import path, which is invalid for module initialization. The '!' prefix indicates an expected command failure, and 'stderr' captures the expected error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_path.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
! go mod init .
stderr '^go: malformed module path ".": is a local import path$'
```

----------------------------------------

TITLE: Testing Go build command on empty packages
DESCRIPTION: Shell commands testing go build behavior with various error cases: packages with only test files, packages with no Go files, and packages with build constraints that exclude all files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_no_go.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go build ./empty/test
stderr 'no non-test Go files in '

! go build ./empty/xtest
stderr 'no non-test Go files in '

! go build ./empty/testxtest
stderr 'no non-test Go files in '

! go build ./exclude
stderr 'build constraints exclude all Go files in '

! go build ./exclude/ignore
stderr 'no Go files in '

! go build ./exclude/empty
stderr 'no Go files in '
```

----------------------------------------

TITLE: Go Module Dependency Check Command
DESCRIPTION: Command to list the version of module example.com/c
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_regression_hang.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go list -m -f '{{.Version}}' example.com/c
```

----------------------------------------

TITLE: Testing Go Module Dependency Management with Wildcard Pattern
DESCRIPTION: This snippet tests 'go get -u' behavior with a wildcard pattern. It demonstrates a known issue where a module (example.net/c) is added despite not being explicitly requested.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_extra.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
cp go.mod.orig go.mod

go get -u example.net/a@v0.1.0 example.net/b/...@v0.1.0
go list -m all
stdout '^example.net/a v0.1.0 '
stdout '^example.net/b v0.1.0 '
stdout '^example.net/c '  # BUG, but a minor and rare one
```

----------------------------------------

TITLE: Go List with Block Comment Rationale
DESCRIPTION: This snippet checks if the rationale is derived from the block comment when individual retractions don't have comments.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_10

LANGUAGE: go
CODE:
```
go list -m -retracted -f '{{.Retracted}}' example.com/retract/rationale@v1.0.0-block
stdout '^\\[block comment\\]$'
go list -m -retracted -f '{{.Retracted}}' example.com/retract/rationale@v1.0.0-blockwithcomment
stdout '^\\[inner comment\\]$'
```

----------------------------------------

TITLE: Tracking GC Pause End-Times - runtime and runtime/debug Packages - Go
DESCRIPTION: Adds PauseEnd arrays to the MemStats struct in runtime and GCStats struct in runtime/debug to track garbage collection pause end times. MemStats.PauseEnd is a fixed array [256]uint64; GCStats.PauseEnd is a slice of time.Time values. These fields assist in performance monitoring and diagnostics of the Go runtime's garbage collector.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_22

LANGUAGE: Go
CODE:
```
type MemStats struct {
    PauseEnd [256]uint64
    // ... other fields
}
// runtime/debug package
type GCStats struct {
    PauseEnd []time.Time
    // ... other fields
}
```

----------------------------------------

TITLE: Module B Configuration
DESCRIPTION: Module definition for example.com/b that requires and replaces module example.com/q.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
module example.com/b

go 1.21

require example.com/q v1.0.0

replace example.com/q v1.0.0 => ../q
```

----------------------------------------

TITLE: Go Build System Test Commands
DESCRIPTION: Shell commands to test the Go build system's handling of import cycles, including build attempt and error message verification using go list.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_import_cycle.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
! go build selfimport
go list -e -f '{{.Error}}' selfimport
```

----------------------------------------

TITLE: Testing End-of-Line Anchor Matching
DESCRIPTION: Tests patterns with end-of-line anchors (def$) against various strings. Shows how trailing anchors affect match positions with different pattern configurations.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_38

LANGUAGE: go
CODE:
```
"def$"
-;-;-;-
-;3-6;-;3-6
"^(?:def$)$"
-;-;-;-
-;-;-;-
"^(?:def$)"
-;-;-;-
-;-;-;-
"(?:def$)$"
-;-;-;-
-;3-6;-;3-6
```

----------------------------------------

TITLE: Go Generate Command Alias Test
DESCRIPTION: Test file demonstrating how go generate handles command aliases using the -command flag to create a custom 'run' command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test that go generate handles command aliases.

//go:generate -command run echo Now is the time
//go:generate run for all good men

package p
```

----------------------------------------

TITLE: Ed25519 Cryptographic Constants and Functions
DESCRIPTION: Defines constants and functions for Ed25519 public-key signature system operations, including key sizes, signature verification, and key generation. These are essential for implementing Ed25519 cryptographic operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
const PrivateKeySize = 64
const PublicKeySize = 32
const SeedSize = 32
const SignatureSize = 64
func GenerateKey(io.Reader) (PublicKey, PrivateKey, error)
func NewKeyFromSeed([]uint8) PrivateKey
func Sign(PrivateKey, []uint8) []uint8
func Verify(PublicKey, []uint8, []uint8) bool
method (PrivateKey) Public() crypto.PublicKey
method (PrivateKey) Seed() []uint8
method (PrivateKey) Sign(io.Reader, []uint8, crypto.SignerOpts) ([]uint8, error)
type PrivateKey []uint8
type PublicKey []uint8
```

----------------------------------------

TITLE: Testing Go Module Fetch Failure without Cache and go.sum
DESCRIPTION: Attempts to fetch a module without access to both cache and go.sum. Expects the command to fail with a 504 error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_cache.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
rm go.sum
env GOPROXY=$proxy/sumdb-504
! go get rsc.io/quote@v1.5.2
stderr 504
```

----------------------------------------

TITLE: Testing Vet Error (Go)
DESCRIPTION: This snippet tests a vet error. It checks the JSON output for specific vet error messages and build failure information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_build.txt#2025-04-22_snippet_4

LANGUAGE: Shell
CODE:
```
! go test -json -o=$devnull ./veterror
stdout '"ImportPath":"m/veterror \[m/veterror.test\]","Action":"build-output","Output":"# m/veterror\\n"'
stdout '"ImportPath":"m/veterror \[m/veterror.test\]","Action":"build-output","Output":"# \[m/veterror\]\\n"'
stdout '"ImportPath":"m/veterror \[m/veterror.test\]","Action":"build-output","Output":"veterror(/|\\\\)main_test.go:9:9: fmt.Printf format %s reads arg #1, but call has 0 args\\n"'
stdout '"ImportPath":"m/veterror \[m/veterror.test\]","Action":"build-fail"'
stdout '"Action":"start","Package":"m/veterror"'
stdout '"Action":"output","Package":"m/veterror","Output":"FAIL\\tm/veterror \[build failed\]\\n"'
stdout '"Action":"fail","Package":"m/veterror","Elapsed":.*,"FailedBuild":"m/veterror \[m/veterror.test\]"'
! stderr '.'
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module declaration file specifying Go version requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_n_cover.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module M

go 1.21
```

----------------------------------------

TITLE: Testing go list -m with alternate file
DESCRIPTION: Verifies that 'go list -m' prints the path to the alternate go.mod file when using the -modfile flag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go list -m -f '{{.GoMod}}'
stdout '^go.alt.mod$'
```

----------------------------------------

TITLE: Testing Go Module Update Failure with Path Mismatch (Shell)
DESCRIPTION: Attempts to update the `example.com/badchain/a` module using `go get`. This command is expected to fail (`!`) because a transitive dependency (`example.com/badchain/c@v1.1.0`) has a mismatch between its declared module path and the path used to require it. The script then compares the actual standard error output with the expected error message stored in `update-a-expected` and verifies that the `go.mod` file remains unchanged.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
# Try to update example.com/badchain/a (and its dependencies).
! go get example.com/badchain/a
cmp stderr update-a-expected
cmp go.mod go.mod.orig
```

----------------------------------------

TITLE: Testing Multiline Mode Anchor Matching
DESCRIPTION: Tests multiline mode patterns with the (?m) modifier for handling line anchors. Shows how multiline mode affects beginning and end-of-line assertions.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_39

LANGUAGE: go
CODE:
```
"(?m)^abc"
-;-;-;-
-;0-3;-;0-3
"^(?:(?m)^abc)$"
-;-;-;-
-;-;-;-
"^(?:(?m)^abc)"
-;-;-;-
-;0-3;-;0-3
"(?:(?m)^abc)$"
-;-;-;-
-;-;-;-
```

----------------------------------------

TITLE: Testing 'go mod download' with explicit versions inside a module
DESCRIPTION: Tests that 'go mod download' with explicit versions inside a module correctly upgrades the toolchain if needed but does not change the main module's toolchain version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
cd example
cp go.mod go.mod.orig

env GOTOOLCHAIN=auto
go mod download rsc.io/needgo121@latest rsc.io/needgo122@latest rsc.io/needgo123@latest rsc.io/needall@latest
stderr '^go: rsc.io/needall@v0.0.1 requires go >= 1.23; switching to go1.23.9$'
! stderr '\(running'
cmp go.mod go.mod.orig
```

----------------------------------------

TITLE: Testing Unparsable Directive Error in go.work File
DESCRIPTION: Copies a go.work file with an unparsable directive and verifies the error message format when running 'go list'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
cp go.work.unparsable.txt go.work
! go list
stderr '^go.work:5: unknown directive: notadirective'
```

----------------------------------------

TITLE: Testing 'go list' Command Outside Module
DESCRIPTION: Demonstrates that 'go list' fails when run in a directory without a module, but succeeds for standard library packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
! go list
stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'
go list -m
stdout '^command-line-arguments$'
! go list ./needmod
stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'

go list all
! stdout .
stderr 'warning: "all" matched no packages'

go list -deps cmd
stdout '^fmt$'
stdout '^cmd/go$'

go list $GOROOT/src/fmt
stdout '^fmt$'

go list ./needmod/needmod.go
stdout 'command-line-arguments'

! go list example.com/printversion
stderr '^no required module provides package example.com/printversion: go.mod file not found in current directory or any parent directory; see ''go help modules''$'
```

----------------------------------------

TITLE: Package Definition for '@at' Module
DESCRIPTION: Simple Go package for the 'at' module, used to test listing packages from directories with special characters.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
package at
```

----------------------------------------

TITLE: Vendored Strings Package
DESCRIPTION: Custom strings package implementation placed in vendor directory with a Msg variable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vendor.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package strings

var Msg = "hello, world"
```

----------------------------------------

TITLE: Testing go mod edit with alternate file
DESCRIPTION: Adds a requirement to the alternate go.mod file using go mod edit and verifies the change.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
go mod edit -require rsc.io/quote@v1.5.2
grep rsc.io/quote go.alt.mod
```

----------------------------------------

TITLE: Running Benchmark Tests with Validation Script in Shell
DESCRIPTION: Shell script that runs a Go benchmark test and verifies the output contains expected log messages but doesn't contain CONT lines from benchmarks.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_chatty_success.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Run chatty tests. Assert on CONT lines.
go test chatty_test.go -v -bench . chatty_bench

# Sanity check that output happens. We don't provide -count because the amount
# of output is variable.
stdout 'this is sub-0'
stdout 'this is sub-1'
stdout 'this is sub-2'

# Benchmarks should not print CONT.
! stdout CONT
```

----------------------------------------

TITLE: Explicitly Not Adding Conflicting Module
DESCRIPTION: Shows how to explicitly avoid adding a conflicting module by using @none.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_pkg.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
cp go.mod.orig go.mod
go mod edit -require=example.net/ambiguous@v0.1.0

go get example.net/ambiguous/nested/pkg@v0.1.0 example.net/ambiguous/nested@none
go list -m all
! stdout '^example.net/ambiguous/nested '
stdout '^example.net/ambiguous v0.1.0$'
```

----------------------------------------

TITLE: Declaring Unicode Cased Letter Range Table - Go
DESCRIPTION: Declares a RangeTable pointer for the Unicode LC (Cased Letter) category that defines the code point ranges for cased letters.
SOURCE: https://github.com/golang/go/blob/master/api/next/70780.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
var LC *RangeTable
```

----------------------------------------

TITLE: Empty Package Definition - nothing.go
DESCRIPTION: Defines an empty package used for testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecated.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package nothing
```

----------------------------------------

TITLE: Package Import Test Configuration
DESCRIPTION: Go source file defining a package 'b' with an import of package 'c/d'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_importmap.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package b

import _ "c/d"
```

----------------------------------------

TITLE: Main Package C2
DESCRIPTION: Second simple Go main package with empty main function for testing multiple package builds.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_multi_main.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Testing 'std' Import with Module Replacement in Go
DESCRIPTION: This snippet tests the import of 'std' package after attempting to replace it with a local module. It verifies that the import still fails, maintaining the restriction.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
go mod edit -replace std@v0.1.0=./modstd
go mod edit -require std@v0.1.0

! go list -deps ./importstd
stderr '^importstd[/\\]x.go:3:8: "std" is not an importable package; see ''go help packages''$'
```

----------------------------------------

TITLE: Testing GOFLAGS Environment Variable
DESCRIPTION: Verifies flag behavior when -modcacherw is set via GOFLAGS environment variable instead of command line.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_modcacherw_issue64282.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
env GOFLAGS=-modcacherw
! go install -cake=delicious example.com/printversion@v0.1.0
stderr '^flag provided but not defined: -cake$'
cp $WORK/extraneous.txt $GOPATH/pkg/mod/example.com/printversion@v0.1.0/extraneous_file.go
```

----------------------------------------

TITLE: Defining Main Package with Imports
DESCRIPTION: This Go file defines the main package 'a' and imports modules 'b' and 'c' for side effects.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect_pruned.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
package a

import (
	_ "example.com/b"
	_ "example.com/c"
)
```

----------------------------------------

TITLE: Adding test coverage functionality to Go testing package
DESCRIPTION: Implements a Coverage function in the testing package that returns the code coverage percentage as a float64. This allows programmatic access to coverage information during test execution.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_30

LANGUAGE: go
CODE:
```
func Coverage() float64
```

----------------------------------------

TITLE: Defining Package 'p' in Module 'm'
DESCRIPTION: This snippet defines package 'p' within module 'm', demonstrating that 'p' exists in 'm' but not in 'm/p'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_arg.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
// Package p is present in module m, but not module m/p.
package p
```

----------------------------------------

TITLE: Testing Go Fuzzing Minimization for Recoverable Errors
DESCRIPTION: Tests that validate the minimization process for recoverable errors, ensuring that the fuzzer correctly reduces test cases to the minimum size that still triggers the error. It verifies both the process and the resulting test data.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
# Test that minimization is working for recoverable errors.
! go test -fuzz=FuzzMinimizerRecoverable -run=FuzzMinimizerRecoverable -fuzztime=10000x .
! stdout '^ok'
stdout 'got the minimum size!'
# The error message that was printed should be for the one written to testdata.
stdout 'contains a non-zero byte of length 50'
stdout FAIL

# Check that the bytes written to testdata are of length 50 (the minimum size)
go run ./check_testdata FuzzMinimizerRecoverable 50

# Test that re-running the minimized value causes a crash.
! go test -run=FuzzMinimizerRecoverable .
rm testdata

# Test that minimization is working for recoverable errors. Run it with -v this
# time to ensure the command line output still looks right.
! go test -v -fuzz=FuzzMinimizerRecoverable -run=FuzzMinimizerRecoverable -fuzztime=10000x .
! stdout '^ok'
stdout 'got the minimum size!'
# The error message that was printed should be for the one written to testdata.
stdout 'contains a non-zero byte of length 50'
stdout FAIL

# Check that the bytes written to testdata are of length 50 (the minimum size)
go run ./check_testdata FuzzMinimizerRecoverable 50

# Test that re-running the minimized value causes a crash.
! go test -run=FuzzMinimizerRecoverable .
rm testdata
```

----------------------------------------

TITLE: Specifying Go Toolchain Module Path - go.mod
DESCRIPTION: These snippets indicate the root module path for the Go toolchain, using the 'golang.org/toolchain' identifier. This information is specified twice: once in a synthetic module manifest ('.mod') and once in an actual 'go.mod' file, possibly to support both static and dynamic module discovery by Go tooling. No dependencies are defined, and no versions other than the one tied to the toolchain are referenced.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.linux-amd64.txt#2025-04-22_snippet_1

LANGUAGE: go.mod
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: Detecting Memory Aliasing Using Reflection in Go for AppEngine
DESCRIPTION: This version of AnyOverlap uses reflection to check for memory overlap between byte slices. It's designed for compatibility with AppEngine environments where unsafe pointers are not allowed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_internal_v0.1.0.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
func AnyOverlap(x, y []byte) bool {
	return len(x) > 0 && len(y) > 0 &&
		reflect.ValueOf(&x[0]).Pointer() <= reflect.ValueOf(&y[len(y)-1]).Pointer() &&
		reflect.ValueOf(&y[0]).Pointer() <= reflect.ValueOf(&x[len(x)-1]).Pointer()
}
```

----------------------------------------

TITLE: Testing Empty GOPROXY List in Go Module Fetching
DESCRIPTION: Verifies that an error is reported when GOPROXY is not empty but contains no entries. Attempts to get golang.org/x/text package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gonoproxy.txt#2025-04-22_snippet_4

LANGUAGE: Shell
CODE:
```
env GOPROXY=','
! go get golang.org/x/text
stderr '^go: golang.org/x/text: GOPROXY list is not the empty string, but contains no entries$'
```

----------------------------------------

TITLE: Testing Unused Ambiguous Import
DESCRIPTION: Builds a package with an unused ambiguous import, which should not result in an error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
go build ./importy
```

----------------------------------------

TITLE: Windows Symlink Implementation
DESCRIPTION: Implements symbolic link support for Windows including constants for file attributes, reparse points, and functions for creating hard and symbolic links.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_26

LANGUAGE: Go
CODE:
```
const (
    ERROR_PRIVILEGE_NOT_HELD = 1314
    FILE_ATTRIBUTE_REPARSE_POINT = 1024
    FILE_FLAG_OPEN_REPARSE_POINT = 2097152
    SYMBOLIC_LINK_FLAG_DIRECTORY = 1
)

func CreateSymbolicLink(*uint16, *uint16, uint32) error
func CreateHardLink(*uint16, *uint16, uintptr) error
func LoadCreateSymbolicLink() error
```

----------------------------------------

TITLE: Testing 'go list std' in GOROOT/src (Module Mode) (Shell)
DESCRIPTION: While in $GOROOT/src and with Go module mode enabled, this executes `go list std`. It checks that standard library packages like `fmt` are correctly listed, confirming the standard library is discoverable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
go list std
stdout -count=1 '^.+$'
stdout '^fmt$'
```

----------------------------------------

TITLE: Declaring a Module Path and Version - go.mod - Go
DESCRIPTION: This go.mod file redundantly declares the module path and version, identical to the previous example. It is likely provided for clarity or as a duplicate from different folder references. All comments and functional concerns remain the same: it defines 'example.com/retract/rename' and sets Go 1.16 as the minimum version. No dependencies or replace directives are present. Expected input and output are the same as traditional go.mod files, providing foundational module identity.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rename_v1.0.0-bad.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module example.com/retract/rename

go 1.16
```

----------------------------------------

TITLE: Testing GOPATH Validation with Relative Paths
DESCRIPTION: Test script that validates Go's handling of various GOPATH configurations. It checks rejection of relative paths, blank paths, and proper handling of empty path entries in the GOPATH environment variable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_paths.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# Regression test for GOPATH validation in GOPATH mode.
env GO111MODULE=off

env ORIG_GOPATH=$GOPATH

# The literal path '.' in GOPATH should be rejected.
env GOPATH=.
! go build go-cmd-test/helloworld.go
stderr 'GOPATH entry is relative'

# It should still be rejected if the requested package can be
# found using another entry.
env GOPATH=${:}$ORIG_GOPATH${:}.
! go build go-cmd-test
stderr 'GOPATH entry is relative'

# GOPATH cannot be a relative subdirectory of the working directory.
env ORIG_GOPATH
stdout 'ORIG_GOPATH='$WORK[/\\]gopath
cd $WORK
env GOPATH=gopath
! go build gopath/src/go-cmd-test/helloworld.go
stderr 'GOPATH entry is relative'

# Blank paths in GOPATH should be rejected as relative (issue 21928).
env GOPATH=' '${:}$ORIG_GOPATH
! go build go-cmd-test
stderr 'GOPATH entry is relative'

[short] stop

# Empty paths in GOPATH should be ignored (issue 21928).
env GOPATH=${:}$ORIG_GOPATH
env GOPATH
go install go-cmd-test
exists $ORIG_GOPATH/bin/go-cmd-test$GOEXE
```

----------------------------------------

TITLE: Fetching Metadata of a Non-existent Module Version - Error Case
DESCRIPTION: This snippet attempts to fetch metadata for a non-existent latest version of a nested module, which results in an error. The output includes an error message and other metadata details like 'URL', 'Subdir', 'Ref', and 'Hash'. It is useful for testing how Go handles non-existent versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61415.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go list -json -m --versions -e vcs-test.golang.org/git/issue61415.git/nested@latest
cp stdout no-nested.json
```

----------------------------------------

TITLE: Package with Direct Deprecated Import - a.go
DESCRIPTION: Defines a package that directly imports a deprecated module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecated.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package a

import _ "example.com/deprecated/a"
```

----------------------------------------

TITLE: Low-level System Call Functions in syscall Package for NetBSD ARM64
DESCRIPTION: These functions provide the raw system call interface for direct kernel calls. They are the foundation for higher-level functions but require careful handling of arguments and return values.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_81

LANGUAGE: Go
CODE:
```
func Syscall(uintptr, uintptr, uintptr, uintptr) (uintptr, uintptr, Errno)
func Syscall6(uintptr, uintptr, uintptr, uintptr, uintptr, uintptr, uintptr) (uintptr, uintptr, Errno)
func Syscall9(uintptr, uintptr, uintptr, uintptr, uintptr, uintptr, uintptr, uintptr, uintptr, uintptr) (uintptr, uintptr, Errno)
func RawSyscall(uintptr, uintptr, uintptr, uintptr) (uintptr, uintptr, Errno)
func RawSyscall6(uintptr, uintptr, uintptr, uintptr, uintptr, uintptr, uintptr) (uintptr, uintptr, Errno)
```

----------------------------------------

TITLE: Fetching and Listing v3 Module
DESCRIPTION: Fetches a v3 module using go get and lists its version using go list. This tests the resolution of a module path ending with a v3 suffix.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_major.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go get vcs-test.golang.org/git/v3pkg.git/v3@v3.0.0

go list -m vcs-test.golang.org/git/v3pkg.git/v3
stdout '^vcs-test.golang.org/git/v3pkg.git/v3 v3.0.0$'
```

----------------------------------------

TITLE: Package Import Resolution Test - Test File
DESCRIPTION: Test file that imports both testing package and golang.org/x/net/http2/hpack to verify vendor resolution in test context.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_std_vendor.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package vendoring17

import _ "testing"
import _ "golang.org/x/net/http2/hpack"
```

----------------------------------------

TITLE: Adding FullPath function to Windows syscall package
DESCRIPTION: Implements the FullPath function for the syscall package on Windows for both 386 and amd64 architectures. This function converts a relative or incomplete path to a full absolute path.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_29

LANGUAGE: go
CODE:
```
func FullPath(string) (string, error)
```

----------------------------------------

TITLE: Importing C Package in Go for CGO Test
DESCRIPTION: Imports the C package and declares a variable of type C.int to ensure CGO functionality in the test project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cgo_consistent_results.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package cgotest

import "C"

var _ C.int
```

----------------------------------------

TITLE: Testing go mod init in empty directory
DESCRIPTION: Tests that 'go mod init' does not recommend running 'go mod tidy' in an empty directory that contains no non-hidden .go files or subdirectories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_tidy.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
cd empty
go mod init m
! stderr tidy
cd ..
```

----------------------------------------

TITLE: Gofmt List Formatting
DESCRIPTION: Displays the list formatted according to gofmt standards with normalized spacing and line breaks.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list8.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
Loose lists.

  - A

    B

  - C
    D

  - E

  - F
```

----------------------------------------

TITLE: Environment and Build Command Test Script
DESCRIPTION: Shell script that sets up test environment and executes go build with specific flags to verify gcflags override behavior. Tests that -shared=false flag can override default -shared behavior when building c-archive.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_gcflags.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off

# Test that the user can override default code generation flags.

[compiler:gccgo] skip  # gccgo does not use -gcflags
[!cgo] skip
[!GOOS:linux] skip  # test only works if c-archive implies -shared
[short] skip

env GOCACHE=$WORK/gocache  # Looking for compile commands, so need a clean cache.
go build -x -n -buildmode=c-archive -gcflags=all=-shared=false ./override.go
stderr '^.*/compile (.* )?-shared (.* )?-shared=false'
```

----------------------------------------

TITLE: Setting Git Author Date and Committing Files
DESCRIPTION: Sets the Git author date, adds go.mod and v3pkg.go files, commits them with a message, renames the branch to master, and tags the commit as v3.0.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v3pkg.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
at 2019-07-15T14:01:24-04:00
env GIT_AUTHOR_DATE=2019-07-15T13:59:34-04:00
git add go.mod v3pkg.go
git commit -a -m 'all: add go.mod with v3 path'
git branch -m master
git tag 'v3.0.0'
```

----------------------------------------

TITLE: Handling Partial Module Downloads in Go
DESCRIPTION: This snippet shows how Go handles partial module downloads by creating a .partial file. It demonstrates that 'go mod verify' doesn't fail for incomplete downloads, and 'go list' behaves as if the module isn't active.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_partial.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# Create a .partial file to simulate an failure extracting the zip file.
cp empty $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.2.partial

# 'go mod verify' should not fail, since the module hasn't been completely
# ingested into the cache.
go mod verify

# 'go list' should not load packages from the directory.
# NOTE: the message "directory $dir outside main module or its selected dependencies"
# is reported for directories not in the main module, active modules in the
# module cache, or local replacements. In this case, the directory is in the
# right place, but it's incomplete, so 'go list' acts as if it's not an
# active module.
! go list $GOPATH/pkg/mod/rsc.io/quote@v1.5.2
stderr 'outside main module or its selected dependencies'

# 'go list -m' should not print the directory.
go list -m -f '{{.Dir}}' rsc.io/quote
! stdout .
```

----------------------------------------

TITLE: Testing Go test caching for repeated runs
DESCRIPTION: Executes Go tests twice to verify that the second run is cached.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_cached.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go test -run=WriteTmp .
! stdout '(cached)'
go test -run=WriteTmp .
stdout '(cached)'
```

----------------------------------------

TITLE: Defining Module 'e' in Go
DESCRIPTION: This go.mod file defines module 'e' without any dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_15

LANGUAGE: Go
CODE:
```
module example.net/e

go 1.16
```

----------------------------------------

TITLE: Initializing Go Module for Image Package
DESCRIPTION: Defines a Go module named 'image' and a basic main program that prints 'hello world!'. This snippet establishes the module and provides a simple entry point. It requires module initialization via 'go mod init'. The main.go file serves as the executable entry of the module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_issue35270.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module image
```

LANGUAGE: Go
CODE:
```
package main

func main() {
    println("hello world!")
}
```

----------------------------------------

TITLE: Go Module Declaration with v2 Path
DESCRIPTION: Go module declaration with a v2 version path, used to specify compatibility with Go modules version 2.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_22

LANGUAGE: go
CODE:
```
module "github.com/rsc/vgotest1/v2" // root go.mod
```

----------------------------------------

TITLE: Updating Root go.mod to v2 Module Path
DESCRIPTION: Updates the root go.mod file to use the v2 module path, matching the subdirectory module path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_17

LANGUAGE: bash
CODE:
```
at 2018-02-19T17:32:37-05:00
echo 'module "github.com/vgotest1/v2"'
cp stdout go.mod
git add go.mod
git commit -m 'say v2 in root go.mod'
```

----------------------------------------

TITLE: Windows DLL Handle Utility Function
DESCRIPTION: Utility function that checks for the presence of ws2_32.dll using Windows API calls through syscall package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/ws2_32.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"syscall"
	"unsafe"
)

func hasModuleHandle() {
	const ws2_32 = "ws2_32.dll"
	getModuleHandle := syscall.MustLoadDLL("kernel32.dll").MustFindProc("GetModuleHandleW")
	mod, _, _ := getModuleHandle.Call(uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(ws2_32))))
	if mod != 0 {
		fmt.Println(ws2_32+":", "found")
	} else {
		fmt.Println(ws2_32+":", "not found")
	}
}
```

----------------------------------------

TITLE: Go File with Non-Vendored Import
DESCRIPTION: A Go file that imports a package 'r' which is not found in the immediate vendor directory, causing a potential build error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package subdir

import _ "r"
```

----------------------------------------

TITLE: Displaying Diff Between Old and New Numbered Lists
DESCRIPTION: This code snippet shows the differences between two numbered lists using the diff format. It demonstrates the removal of 'e' and 'pi' from the old list and the addition of numbers 1, 2, and 3 to the new list.
SOURCE: https://github.com/golang/go/blob/master/src/internal/diff/testdata/start.txt#2025-04-22_snippet_0

LANGUAGE: diff
CODE:
```
diff old new
--- old
+++ new
@@ -1,5 +1,6 @@
-e
-pi
+1
+2
+3
 4
 5
 6
```

----------------------------------------

TITLE: Debug PE (Portable Executable) Parser Types and Methods
DESCRIPTION: Provides types and methods for working with Portable Executable (PE) files in the debug/pe package. Includes structures for COFF symbols, relocations, and string tables.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
// debug/pe methods and types
func (*COFFSymbol) FullName(StringTable) (string, error)
func (StringTable) String(uint32) (string, error)

type File struct {
    COFFSymbols []COFFSymbol
    StringTable StringTable
}

type Reloc struct {
    SymbolTableIndex uint32
    Type uint16
    VirtualAddress uint32
}

type Section struct {
    Relocs []Reloc
}

type StringTable []uint8
```

----------------------------------------

TITLE: Testing 64-bit Floating-Point Conversion in Go
DESCRIPTION: This snippet demonstrates test cases for converting 64-bit floating-point numbers between binary and decimal representations. It includes stress inputs for conversion to 53-bit binary and from 53-bit binary to decimal, covering cases both less than and greater than 1/2 ULP (Unit in the Last Place).
SOURCE: https://github.com/golang/go/blob/master/src/strconv/testdata/testfp.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
float64 %b 5e+125 6653062250012735p+365
float64 %b 69e+267 4705683757438170p+841
float64 %b 999e-026 6798841691080350p-129
// ... more test cases ...
float64 %.21e 7363326733505337p+272 5.58769757362301140950e+97
float64 %.21e 8549497411294502p-448 1.176257830728540379990e-119
```

----------------------------------------

TITLE: Go Module File for Version 1.22
DESCRIPTION: Defines a Go module file for version 1.22, specifying the module and its dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_vendor.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module example.com/x
go 1.22

require "foo.com/internal/bar" v1.0.0
```

----------------------------------------

TITLE: Testing @upgrade Version Selection Preferring Compatible Versions
DESCRIPTION: Tests that @upgrade prefers compatible versions (v1.x) over +incompatible versions when a go.mod file exists in the compatible version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go list -m github.com/russross/blackfriday@upgrade
stdout '^github.com/russross/blackfriday v1\.'
```

----------------------------------------

TITLE: Testing Multiple Anchors with \B in Go Regexps
DESCRIPTION: Tests patterns with multiple repeated anchors combined with non-word boundary assertions. These tests verify how the regex engine handles redundant anchors with non-word boundary constraints.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_18

LANGUAGE: regexp
CODE:
```
^^^^^^^^\B$$$$$$$
```

LANGUAGE: regexp
CODE:
```
^(?:^^^^^^^^\B$$$$$$$)$
```

LANGUAGE: regexp
CODE:
```
^(?:^^^^^^^^\B$$$$$$$)
```

LANGUAGE: regexp
CODE:
```
(?:^^^^^^^^\B$$$$$$$)$
```

----------------------------------------

TITLE: Running Go List with Module Replacement
DESCRIPTION: This snippet tests the 'go list' command by ensuring a desired version of a module is listed from the module cache. Dependencies are first downloaded using 'go get'. The snippet checks the behavior of 'go list' with replaced module versions in golang.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_replace_dir.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Populate go.sum and download dependencies.
go get

# Ensure v1.5.2 is also in the cache so we can list it.
go mod download rsc.io/quote@v1.5.2

! go list $GOPATH/pkg/mod/rsc.io/quote@v1.5.2
stderr '^directory ..[/\\]pkg[/\\]mod[/\\]rsc.io[/\\]quote@v1.5.2 outside main module or its selected dependencies$'

go list $GOPATH/pkg/mod/rsc.io/quote@v1.5.1
stdout 'rsc.io/quote'
```

----------------------------------------

TITLE: Testing Go Workspace Configurations
DESCRIPTION: This snippet includes tests for various Go workspace configurations, including duplicate path handling, backwards compatibility, and command-line arguments processing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
# Test that duplicates in the use list return an error
cp go.work go.work.backup
cp go.work.dup go.work
! go run example.com/b
stderr 'go.work:6: path .* appears multiple times in workspace'
cp go.work.backup go.work

cp go.work.d go.work
go work use # update go version
go run example.com/d

# Test that we don't run into "newRequirements called with unsorted roots"
# panic with unsorted main modules.
cp go.work.backwards go.work
go work use # update go version
go run example.com/d

# Test that command-line-arguments work inside and outside modules.
# This exercises the code that determines which module command-line-arguments
# belongs to.
go list ./b/main.go
env GOWORK=off
go build -n -o foo foo.go
env GOWORK=
go build -n -o foo foo.go
```

----------------------------------------

TITLE: Defining Dependency Module 'dep'
DESCRIPTION: These snippets show the implementation of the 'example.com/dep' module in three different versions (dep1, dep2, dep3). Each version has a go.mod file and a dep.go file with the same content.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict_override.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.com/dep
```

LANGUAGE: go
CODE:
```
package dep

func G() {
}
```

----------------------------------------

TITLE: Go Module Definition (Go)
DESCRIPTION: A simple Go module definition for the cgocover4 package using Go 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_extra_file.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module cgocover4

go 1.16
```

----------------------------------------

TITLE: Main Package Implementation
DESCRIPTION: The main Go package that imports the example.com/a module. This forms the root of the dependency graph for the application code.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
package main

import _ "example.com/a"

func main() {}
```

----------------------------------------

TITLE: NetBSD ARM64 System Call Function Definitions
DESCRIPTION: Collection of core system call functions for file operations, process management, and network operations on NetBSD ARM64 platform. These functions provide low-level access to operating system services.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_161

LANGUAGE: Go
CODE:
```
func Listen(int, int) error
func Lstat(string, *Stat_t) error
func Open(string, int, uint32) (int, error)
func Read(int, []uint8) (int, error)
func Write(int, []uint8) (int, error)
func Close(int) error
```

----------------------------------------

TITLE: Testing 'go list' with '...' pattern for symlink warnings
DESCRIPTION: This snippet demonstrates that using 'go list' with a pattern containing '...' will show symlink warnings.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_issue35941.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
go list goproj/...
stderr 'warning: ignoring symlink'
```

----------------------------------------

TITLE: Removing Output Entries with Go
DESCRIPTION: Script written in Go to walk through a cache directory and remove entries that have output files ending with '-d'. It ensures that unnecessary or problematic entries are removed cleanly. Key parameters include the cache directory path, which is provided as an argument. The script outputs any errors encountered during the process.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_70600.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
-- remove_output_entries.go --
package main

import (
	"io/fs"
	"log"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	cachedir := os.Args[1]
	err := filepath.WalkDir(cachedir, func(path string, d fs.DirEntry, err error) error {
		if strings.HasSuffix(path, "-d") {
			if err := os.RemoveAll(path); err != nil {
				return err
			}
		}
		return nil
	})
	if err != nil {
		log.Fatal(err)
	}
}

```

----------------------------------------

TITLE: Handling Unknown Package Error
DESCRIPTION: Tests the error handling for unknown packages. It attempts to get a non-existent package and verifies that the correct error message is displayed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
! go get -x golang.org/x/text/foo@14c0d48
stderr '^go: module golang.org/x/text@14c0d48 found \(v0.3.0\), but does not contain package golang.org/x/text/foo$'
```

----------------------------------------

TITLE: Declaring a Root Go Module - Go
DESCRIPTION: Defines the root module 'example.net/ambiguous' with Go version 1.16 in the module definition file. This is the primary module declaration that sets the context for module resolution in the test. No external dependencies are specified beyond the Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_v0.1.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.net/ambiguous\n\ngo 1.16
```

----------------------------------------

TITLE: Testing Word Boundary Regex Patterns in Go
DESCRIPTION: Test cases for regular expressions using word boundary patterns (\b) with various strings. The tests check how word boundaries behave with different strings and combinations of anchors.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
"\\b(foo|bar|[A-Z])\\b"
```

----------------------------------------

TITLE: Installing Go Binary in Current Directory
DESCRIPTION: Test case to verify that installing to the current directory creates an executable (Issue 11065).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_install.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
cd go-cmd-test
env GOBIN=$PWD
go install
exists ./go-cmd-test$GOEXE
cd ..
```

----------------------------------------

TITLE: Go module definition
DESCRIPTION: Go module file specifying the module path and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue47650.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/git/issue47650.git

go 1.17
```

----------------------------------------

TITLE: Socket Option Constants (SO_* family) for Darwin ARM64
DESCRIPTION: This snippet defines socket option constants used with setsockopt/getsockopt calls to configure socket behavior on Darwin ARM64. These constants control various aspects of socket functionality including buffering, timing, error handling, and socket-specific features.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_97

LANGUAGE: Go
CODE:
```
pkg syscall (darwin-arm64), const SO_ACCEPTCONN = 2
pkg syscall (darwin-arm64), const SO_ACCEPTCONN ideal-int
pkg syscall (darwin-arm64), const SO_BROADCAST = 32
pkg syscall (darwin-arm64), const SO_DEBUG = 1
pkg syscall (darwin-arm64), const SO_DEBUG ideal-int
pkg syscall (darwin-arm64), const SO_DONTROUTE = 16
pkg syscall (darwin-arm64), const SO_DONTTRUNC = 8192
pkg syscall (darwin-arm64), const SO_DONTTRUNC ideal-int
pkg syscall (darwin-arm64), const SO_ERROR = 4103
pkg syscall (darwin-arm64), const SO_ERROR ideal-int
pkg syscall (darwin-arm64), const SO_KEEPALIVE = 8
pkg syscall (darwin-arm64), const SO_LABEL = 4112
pkg syscall (darwin-arm64), const SO_LABEL ideal-int
pkg syscall (darwin-arm64), const SO_LINGER = 128
pkg syscall (darwin-arm64), const SO_LINGER_SEC = 4224
pkg syscall (darwin-arm64), const SO_LINGER_SEC ideal-int
pkg syscall (darwin-arm64), const SO_NKE = 4129
pkg syscall (darwin-arm64), const SO_NKE ideal-int
pkg syscall (darwin-arm64), const SO_NOADDRERR = 4131
pkg syscall (darwin-arm64), const SO_NOADDRERR ideal-int
pkg syscall (darwin-arm64), const SO_NOSIGPIPE = 4130
pkg syscall (darwin-arm64), const SO_NOSIGPIPE ideal-int
pkg syscall (darwin-arm64), const SO_NOTIFYCONFLICT = 4134
pkg syscall (darwin-arm64), const SO_NOTIFYCONFLICT ideal-int
pkg syscall (darwin-arm64), const SO_NP_EXTENSIONS = 4227
pkg syscall (darwin-arm64), const SO_NP_EXTENSIONS ideal-int
pkg syscall (darwin-arm64), const SO_NREAD = 4128
pkg syscall (darwin-arm64), const SO_NREAD ideal-int
pkg syscall (darwin-arm64), const SO_NUMRCVPKT = 4370
pkg syscall (darwin-arm64), const SO_NUMRCVPKT ideal-int
pkg syscall (darwin-arm64), const SO_NWRITE = 4132
pkg syscall (darwin-arm64), const SO_NWRITE ideal-int
pkg syscall (darwin-arm64), const SO_OOBINLINE = 256
pkg syscall (darwin-arm64), const SO_OOBINLINE ideal-int
pkg syscall (darwin-arm64), const SO_PEERLABEL = 4113
pkg syscall (darwin-arm64), const SO_PEERLABEL ideal-int
pkg syscall (darwin-arm64), const SO_RANDOMPORT = 4226
pkg syscall (darwin-arm64), const SO_RANDOMPORT ideal-int
pkg syscall (darwin-arm64), const SO_RCVBUF = 4098
pkg syscall (darwin-arm64), const SO_RCVLOWAT = 4100
pkg syscall (darwin-arm64), const SO_RCVLOWAT ideal-int
pkg syscall (darwin-arm64), const SO_RCVTIMEO = 4102
pkg syscall (darwin-arm64), const SO_RCVTIMEO ideal-int
pkg syscall (darwin-arm64), const SO_REUSEADDR = 4
pkg syscall (darwin-arm64), const SO_REUSEPORT = 512
pkg syscall (darwin-arm64), const SO_REUSEPORT ideal-int
pkg syscall (darwin-arm64), const SO_REUSESHAREUID = 4133
pkg syscall (darwin-arm64), const SO_REUSESHAREUID ideal-int
pkg syscall (darwin-arm64), const SO_SNDBUF = 4097
pkg syscall (darwin-arm64), const SO_SNDLOWAT = 4099
pkg syscall (darwin-arm64), const SO_SNDLOWAT ideal-int
pkg syscall (darwin-arm64), const SO_SNDTIMEO = 4101
pkg syscall (darwin-arm64), const SO_SNDTIMEO ideal-int
pkg syscall (darwin-arm64), const SO_TIMESTAMP = 1024
pkg syscall (darwin-arm64), const SO_TIMESTAMP ideal-int
pkg syscall (darwin-arm64), const SO_TIMESTAMP_MONOTONIC = 2048
```

----------------------------------------

TITLE: Testing Go Fuzzing Minimization with Invalid Parameters
DESCRIPTION: Tests that validate the behavior of Go's fuzzing minimization feature when provided with invalid parameters like negative duration or negative iteration counts. The test ensures proper error messages are displayed when invalid parameters are provided.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# Test that fuzzminimizetime cannot be negative seconds
! go test -fuzz=FuzzMinimizerRecoverable -run=FuzzMinimizerRecoverable -fuzztime=10000x -fuzzminimizetime=-1ms .
! stdout '^ok'
! stdout 'contains a non-zero byte'
stdout 'invalid duration'
stdout FAIL

# Test that fuzzminimizetime cannot be negative times
! go test -fuzz=FuzzMinimizerRecoverable -run=FuzzMinimizerRecoverable -fuzztime=10000x -fuzzminimizetime=-1x .
! stdout '^ok'
! stdout 'contains a non-zero byte'
stdout 'invalid count'
stdout FAIL
```

----------------------------------------

TITLE: CGO Test Package
DESCRIPTION: Test package attempting to use cgo in tests, which is not allowed
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_load_err.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package cgo_test

// cgo is not allowed in tests.
// See golang.org/issue/18647

import "C"
import (
	"testing"
	_ "m/want"
)

func Test(t *testing.T) {}
```

----------------------------------------

TITLE: File and Type Methods in Go Libraries
DESCRIPTION: Defines File and Package types along with various methods within the go/token, go/types, and go/ast packages. The methods encapsulated include Lines for token files and the GoVersion method for package types, supporting detailed connectivity or parsing operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
pkg go/token, method (*File) Lines() []int #57708
```

LANGUAGE: Go
CODE:
```
pkg go/types, method (*Package) GoVersion() string #61175
```

----------------------------------------

TITLE: Checking Version Metadata with Untracked File
DESCRIPTION: This snippet adds an untracked file to the directory and installs the Go binary. It verifies that the version metadata includes the 'modified=true' flag. It also checks the module path to verify the `+dirty` suffix is added.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_6

LANGUAGE: Shell
CODE:
```
cp ../../outside/empty.txt .
go install
go version -m $GOBIN/a$GOEXE
stdout '^\tbuild\tvcs.modified=true$'
stdout '\s+mod\s+example.com/a\s+v1.2.3\+dirty\s+'
rm empty.txt
rm $GOBIN/a$GOEXE
```

----------------------------------------

TITLE: Rejecting Invalid CFLAGS in Go
DESCRIPTION: This collection of snippets illustrate the Go compiler's response to various invalid Cgo CFLAGS options such as '-fplugin=foo.so', '@foo', and '-D' without a required argument, enforcing proper flag usage.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_bad_directives.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package x
// #cgo CFLAGS: -fplugin=foo.so
import "C"
```

LANGUAGE: Go
CODE:
```
package x
// #cgo CFLAGS: -Ibar -fplugin=foo.so
import "C"
```

LANGUAGE: Go
CODE:
```
package x
// #cgo CFLAGS: @foo
import "C"
```

LANGUAGE: Go
CODE:
```
package x
// #cgo CFLAGS: -D
import "C"
```

LANGUAGE: Go
CODE:
```
package x
// #cgo CFLAGS: -D @foo
import "C"
```

LANGUAGE: Go
CODE:
```
package x
// #cgo CFLAGS: -D@foo
import "C"
```

----------------------------------------

TITLE: Go package y test with external import
DESCRIPTION: A test file for package 'y' that imports an external package 'rsc.io/quote', creating a test-only dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_why.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package y
import _ "rsc.io/quote"
```

----------------------------------------

TITLE: HTML Metadata for Go Module Import
DESCRIPTION: HTML file with go-import meta tag that defines the module import path and location for the package manager.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/or401.txt#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<meta name="go-import" content="vcs-test.golang.org/auth/or401 mod https://vcs-test.golang.org/auth/or401">
```

----------------------------------------

TITLE: Importing Non-existent Appengine Package
DESCRIPTION: This Go file imports a non-existent 'appengine' package to test error handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_domain.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
package useappengine
import _ "appengine" // package does not exist
```

----------------------------------------

TITLE: Go Module Definition for Package B
DESCRIPTION: A Go module definition for the 'b' module, specifying only the module path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.com/user/b
```

----------------------------------------

TITLE: Regular Package Definition
DESCRIPTION: A Go implementation file that defines a package named 'testonly2' which contains implementation files, used as a contrast to the test-only package in the build examples.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_test_only.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package testonly2
```

----------------------------------------

TITLE: Testing Octal Escape Sequence Matching
DESCRIPTION: Tests various octal escape sequences (\141, \060, etc.) for character matching. Shows how octal escapes match corresponding ASCII characters.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_33

LANGUAGE: go
CODE:
```
"\\141"
-;-;-;-
0-1;0-1;0-1;0-1
"^(?:\\141)$"
-;-;-;-
0-1;0-1;0-1;0-1
"^(?:\\141)"
-;-;-;-
0-1;0-1;0-1;0-1
"(?:\\141)$"
-;-;-;-
0-1;0-1;0-1;0-1
```

----------------------------------------

TITLE: Defining the Go module `golang.org/toolchain` (.mod)
DESCRIPTION: This snippet, found within a `.mod` file, defines the module path as `golang.org/toolchain`. This file format is part of the Go module system, likely used here in a testing or specific build context alongside the standard `go.mod`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.illumos-amd64.txt#2025-04-22_snippet_0

LANGUAGE: gomod
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Go package x with internal import
DESCRIPTION: A simple Go package 'x' that imports the 'z' package from the same module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_why.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package x
import _ "mymodule/z"
```

----------------------------------------

TITLE: Defining module with cmd/vendor import
DESCRIPTION: Defines a module that tries to explicitly import a package from cmd/vendor, which should be disallowed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
module importcmd
```

LANGUAGE: go
CODE:
```
package importcmd

import _ "cmd/vendor/golang.org/x/tools/go/analysis"
```

----------------------------------------

TITLE: Testing go list commands with -pgo=auto flag
DESCRIPTION: Tests that go list commands succeed as expected when using the -pgo=auto flag in various scenarios.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
go list -pgo=auto ./a/a1

go list -test -pgo=auto ./a/a1

go list -deps -pgo=auto ./a/a1
```

----------------------------------------

TITLE: Testing Mutex Profiling in Go with Custom Output Name
DESCRIPTION: Executes a Go test with mutex profiling and a custom output name for the test executable. It then verifies the existence of the custom-named executable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_profile.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
go test -mutexprofile errors.prof -o myerrors.test$GOEXE errors
exists -exec myerrors.test$GOEXE
```

----------------------------------------

TITLE: Running Go Program With Trimpath and Vendor Mode
DESCRIPTION: This snippet runs a Go program with both -trimpath and -mod=vendor flags, expecting the output to show a trimmed path including the module version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_trimpath.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go run -mod=vendor -trimpath main.go
stdout '^example.com/stack@v1.0.0/stack.go$'
```

----------------------------------------

TITLE: Test Script for Fuzzing Coverage Instrumentation in Go
DESCRIPTION: A test script that verifies the coverage instrumentation is working by running a fuzzer that should discover a specific pattern. It skips on short tests and when fuzzing instrumentation isn't available, and sets up a temporary GOCACHE directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cov.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
[short] skip
[!fuzz-instrumented] skip
env GOCACHE=$WORK/cache

# TODO(#51484): enabled debugging info to help diagnose a deadlock in the fuzzer
env GODEBUG=fuzzdebug=1
! go test -fuzz=FuzzCov -v
! stderr 'cov instrumentation working'
```

----------------------------------------

TITLE: Manually Adding Dependency with Go Mod Edit (Shell)
DESCRIPTION: This command uses `go mod edit -require` to manually add the specific version `v1.0.0` of the `rsc.io/badzip` module as a requirement to the `go.mod` file. This sets up the next step to test the build process with the problematic dependency already listed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badzip.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go mod edit -require rsc.io/badzip@v1.0.0
```

----------------------------------------

TITLE: Defining c Module with No Direct Dependencies - mod
DESCRIPTION: This go.mod file for the c module sets up a Go module with no required dependencies. This configuration is included to demonstrate modules that only take dependencies through imports, not through the go.mod 'require' stanza.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_7

LANGUAGE: mod
CODE:
```
module c
go 1.13
```

----------------------------------------

TITLE: Environment Setup and Build Test Commands
DESCRIPTION: Shell commands to test Go's handling of import cycles by attempting to build a self-importing package and checking list command behavior
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_cycle.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off

! go build selfimport
stderr -count=1 'import cycle not allowed'

# 'go list' shouldn't hang forever.
go list -e -json selfimport
```

----------------------------------------

TITLE: Defining Go Module 'm/p'
DESCRIPTION: This snippet shows the go.mod file for module 'm/p', demonstrating that it exists as a separate module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_arg.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module m/p

go 1.16
```

----------------------------------------

TITLE: Testing Go Module Resolution and Symlinks
DESCRIPTION: This bash script tests Go module resolution, package importing, and symlink handling. It verifies that 'go get' resolves modules correctly, creates a symlinked copy of the module, and checks that the copy functions identically to the original.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_symlink.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on
[!symlink] skip

# 'go get' should resolve modules of imported packages.
go get
go list -deps -f '{{.Module}}' .
stdout golang.org/x/text

go get ./subpkg
go list -deps -f '{{.Module}}' ./subpkg
stdout golang.org/x/text

# Create a copy of the module using symlinks in src/links.
mkdir links
symlink links/go.mod -> $GOPATH/src/go.mod
symlink links/go.sum -> $GOPATH/src/go.sum
symlink links/issue.go -> $GOPATH/src/issue.go
mkdir links/subpkg
symlink links/subpkg/issue.go -> $GOPATH/src/subpkg/issue.go

# We should see the copy as a valid module root.
cd links
go env GOMOD
stdout links[/\\]go.mod
go list -m
stdout golang.org/issue/28107

# The symlink-based copy should contain the same packages
# and have the same dependencies as the original.
go list -deps -f '{{.Module}}' .
stdout golang.org/x/text
go list -deps -f '{{.Module}}' ./subpkg
stdout golang.org/x/text
```

----------------------------------------

TITLE: Defining Terminal I/O Structure in Go for NetBSD
DESCRIPTION: This snippet defines the Termios struct for terminal I/O operations on NetBSD. It includes fields for various terminal settings such as input and output flags, control flags, and special characters.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_27

LANGUAGE: Go
CODE:
```
type Termios struct {
    Iflag uint32
    Oflag uint32
    Cflag uint32
    Lflag uint32
    Cc [20]uint8
    Ispeed int32
    Ospeed int32
}
```

----------------------------------------

TITLE: NetBSD ARM64 System Call Constants in Go
DESCRIPTION: Defines system call numbers for various operations in NetBSD on ARM64. These constants are used when making direct system calls from Go code running on NetBSD ARM64 platforms.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_151

LANGUAGE: Go
CODE:
```
const SYS___SIGTIMEDWAIT = 431
const SYS_SOCKET = 394
const SYS_SOCKETPAIR = 135
const SYS_SSTK = 70
const SYS_STAT = 439
const SYS_STATVFS1 = 357
const SYS_SWAPCTL = 271
const SYS_SYMLINK = 57
const SYS_SYMLINKAT = 470
const SYS_SYNC = 36
const SYS_SYSARCH = 165
const SYS___SYSCTL = 202
const SYS_TIMER_CREATE = 235
const SYS_TIMER_DELETE = 236
const SYS_TIMER_GETOVERRUN = 239
const SYS_TIMER_GETTIME = 447
const SYS_TIMER_SETTIME = 446
const SYS_TRUNCATE = 200
const SYS_UMASK = 60
const SYS_UNDELETE = 205
const SYS_UNLINK = 10
const SYS_UNLINKAT = 471
const SYS_UNMOUNT = 22
const SYS_UTIMENSAT = 467
const SYS_UTIMES = 420
const SYS_UTRACE = 306
const SYS_UUIDGEN = 355
const SYS_VADVISE = 72
const SYS_VFORK = 66
const SYS_WAIT4 = 449
const SYS_WRITE = 4
const SYS_WRITEV = 121
```

----------------------------------------

TITLE: Building C-Shared Object with Go
DESCRIPTION: This snippet builds a C-shared object named `external.so` from the `rsc.io/fortune` package using the `-buildmode=c-shared` flag. It requires that the environment variable `GO111MODULE` is set to `on` for module resolution. The resulting `.so` file can be used as a dynamic library in C/C++ projects.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_cshared.txt#_snippet_0

LANGUAGE: go
CODE:
```
env GO111MODULE=on

go get rsc.io/fortune
go build -buildmode=c-shared -o external.so rsc.io/fortune
```

----------------------------------------

TITLE: Adding NetConn method to Conn in crypto/tls package
DESCRIPTION: This snippet introduces a new NetConn method for the Conn type in the crypto/tls package. It returns a net.Conn.
SOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
pkg crypto/tls, method (*Conn) NetConn() net.Conn
```

----------------------------------------

TITLE: Defining Address Family Constants in Go for NetBSD ARM64
DESCRIPTION: Declaration of address family (AF_*) constants for network programming in NetBSD. These constants define the address families supported for socket communications.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_112

LANGUAGE: Go
CODE:
```
const AF_APPLETALK = 16
const AF_ARP = 28
const AF_BLUETOOTH = 31
const AF_CCITT = 10
const AF_CHAOS = 5
const AF_CNT = 21
const AF_COIP = 20
const AF_DATAKIT = 9
const AF_DECnet = 12
const AF_DLI = 13
const AF_E164 = 26
const AF_ECMA = 8
const AF_HYLINK = 15
const AF_IEEE80211 = 32
const AF_IMPLINK = 3
const AF_INET6 = 24
const AF_IPX = 23
const AF_ISDN = 26
const AF_ISO = 7
const AF_LAT = 14
const AF_LINK = 18
const AF_LOCAL = 1
const AF_MAX = 35
const AF_MPLS = 33
const AF_NATM = 27
const AF_NS = 6
const AF_OROUTE = 17
const AF_OSI = 7
const AF_PUP = 4
const AF_ROUTE = 34
const AF_SNA = 11
```

----------------------------------------

TITLE: Defining Process Priority Constants (PRIO_*) in Go for darwin-arm64
DESCRIPTION: Constants for process priority manipulation. These constants are used with setpriority(2) and getpriority(2) system calls to specify which entities (process, process group, or user) should have their priorities modified.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_87

LANGUAGE: Go
CODE:
```
const PRIO_PGRP = 1
const PRIO_PGRP ideal-int
const PRIO_PROCESS = 0
const PRIO_PROCESS ideal-int
const PRIO_USER = 2
const PRIO_USER ideal-int
```

----------------------------------------

TITLE: Defining System Call Constants for Darwin ARM64 CGO in Go
DESCRIPTION: This code defines system call constants for the Darwin operating system on ARM64 architecture with CGO enabled. These constants represent the system call numbers used by the operating system kernel to identify specific system functions.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_186

LANGUAGE: Go
CODE:
```
const SYS_GETAUID = 353
const SYS_GETDIRENTRIES = 196
const SYS_GETDIRENTRIES64 = 344
const SYS_GETDIRENTRIESATTR = 222
const SYS_GETDTABLESIZE = 89
const SYS_GETEGID = 43
const SYS_GETEUID = 25
const SYS_GETFH = 161
const SYS_GETFSSTAT = 18
const SYS_GETFSSTAT64 = 347
const SYS_GETGID = 47
const SYS_GETGROUPS = 79
const SYS_GETHOSTUUID = 142
const SYS_GETITIMER = 86
const SYS_GETLCID = 395
const SYS_GETLOGIN = 49
const SYS_GETPEERNAME = 31
const SYS_GETPGID = 151
const SYS_GETPGRP = 81
const SYS_GETPID = 20
const SYS_GETPPID = 39
const SYS_GETPRIORITY = 100
const SYS_GETRLIMIT = 194
const SYS_GETRUSAGE = 117
const SYS_GETSGROUPS = 288
const SYS_GETSID = 310
const SYS_GETSOCKNAME = 32
const SYS_GETSOCKOPT = 118
const SYS_GETTID = 286
const SYS_GETTIMEOFDAY = 116
const SYS_GETUID = 24
const SYS_GETWGROUPS = 290
const SYS_GETXATTR = 234
const SYS_IDENTITYSVC = 293
const SYS_INITGROUPS = 243
const SYS_IOCTL = 54
const SYS_IOPOLICYSYS = 322
const SYS_ISSETUGID = 327
const SYS_KAS_INFO = 439
const SYS_KDEBUG_TRACE = 180
const SYS_KEVENT = 363
const SYS_KEVENT64 = 369
const SYS_KILL = 37
const SYS_KQUEUE = 362
const SYS_LCHOWN = 364
const SYS_LEDGER = 373
const SYS_LINK = 9
const SYS_LIO_LISTIO = 320
const SYS_LISTEN = 106
const SYS_LISTXATTR = 240
const SYS_LSEEK = 199
const SYS_LSTAT = 190
const SYS_LSTAT64 = 340
const SYS_LSTAT64_EXTENDED = 342
const SYS_LSTAT_EXTENDED = 280
const SYS_MADVISE = 75
const SYS_MAXSYSCALL = 440
const SYS_MINCORE = 78
const SYS_MINHERIT = 250
const SYS_MKDIR = 136
const SYS_MKDIR_EXTENDED = 292
const SYS_MKFIFO = 132
const SYS_MKFIFO_EXTENDED = 291
const SYS_MKNOD = 14
const SYS_MLOCK = 203
const SYS_MLOCKALL = 324
const SYS_MMAP = 197
const SYS_MODWATCH = 233
const SYS_MOUNT = 167
const SYS_MPROTECT = 74
const SYS_MSGCTL = 258
const SYS_MSGGET = 259
const SYS_MSGRCV = 261
const SYS_MSGRCV_NOCANCEL = 419
const SYS_MSGSND = 260
const SYS_MSGSND_NOCANCEL = 418
const SYS_MSGSYS = 252
const SYS_MSYNC = 65
const SYS_MSYNC_NOCANCEL = 405
const SYS_MUNLOCK = 204
const SYS_MUNLOCKALL = 325
const SYS_MUNMAP = 73
const SYS_NFSCLNT = 247
const SYS_NFSSVC = 155
```

----------------------------------------

TITLE: Defining system call constants for NetBSD ARM64 in Go
DESCRIPTION: This code snippet defines system call number constants for NetBSD on the ARM64 architecture. Each system call is assigned a unique numeric identifier that is used by the Go syscall package to make system calls to the NetBSD kernel. The constants follow the pattern of SYS_NAME = value paired with SYS_NAME ideal-int type declarations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_149

LANGUAGE: Go
CODE:
```
const SYS_FORK = 2
const SYS_FORK ideal-int
const SYS_FPATHCONF = 192
const SYS_FPATHCONF ideal-int
const SYS_FREMOVEXATTR = 386
const SYS_FREMOVEXATTR ideal-int
const SYS_FSETXATTR = 377
const SYS_FSETXATTR ideal-int
const SYS_FSTAT = 440
const SYS_FSTATAT = 466
const SYS_FSTATAT ideal-int
const SYS_FSTAT ideal-int
const SYS_FSTATVFS1 = 358
const SYS_FSTATVFS1 ideal-int
const SYS_FSYNC = 95
const SYS_FSYNC ideal-int
const SYS_FSYNC_RANGE = 354
const SYS_FSYNC_RANGE ideal-int
const SYS_FTRUNCATE = 201
const SYS_FTRUNCATE ideal-int
const SYS_FUTIMENS = 472
const SYS_FUTIMENS ideal-int
const SYS_FUTIMES = 423
const SYS_FUTIMES ideal-int
const SYS_GETCONTEXT = 307
const SYS_GETCONTEXT ideal-int
const SYS___GETCWD = 296
const SYS___GETCWD ideal-int
const SYS_GETDENTS = 390
const SYS_GETDENTS ideal-int
const SYS_GETEGID = 43
const SYS_GETEGID ideal-int
const SYS_GETEUID = 25
const SYS_GETEUID ideal-int
const SYS_GETFH = 395
const SYS_GETFH ideal-int
const SYS_GETGID = 47
const SYS_GETGID ideal-int
const SYS_GETGROUPS = 79
const SYS_GETGROUPS ideal-int
const SYS_GETITIMER = 426
const SYS_GETITIMER ideal-int
const SYS___GETLOGIN = 49
const SYS___GETLOGIN ideal-int
const SYS_GETPEERNAME = 31
const SYS_GETPEERNAME ideal-int
const SYS_GETPGID = 207
const SYS_GETPGID ideal-int
const SYS_GETPGRP = 81
const SYS_GETPGRP ideal-int
const SYS_GETPID = 20
const SYS_GETPID ideal-int
const SYS_GETPPID = 39
const SYS_GETPPID ideal-int
const SYS_GETPRIORITY = 100
const SYS_GETPRIORITY ideal-int
const SYS_GETRLIMIT = 194
const SYS_GETRLIMIT ideal-int
const SYS_GETRUSAGE = 445
const SYS_GETRUSAGE ideal-int
const SYS_GETSID = 286
const SYS_GETSID ideal-int
const SYS_GETSOCKNAME = 32
const SYS_GETSOCKNAME ideal-int
const SYS_GETSOCKOPT = 118
const SYS_GETSOCKOPT ideal-int
const SYS_GETTIMEOFDAY = 418
const SYS_GETTIMEOFDAY ideal-int
const SYS_GETUID = 24
const SYS_GETUID ideal-int
const SYS_GETVFSSTAT = 356
const SYS_GETVFSSTAT ideal-int
const SYS_GETXATTR = 378
const SYS_GETXATTR ideal-int
const SYS_IOCTL = 54
const SYS_IOCTL ideal-int
const SYS_ISSETUGID = 305
const SYS_ISSETUGID ideal-int
const SYS_KEVENT = 435
const SYS_KEVENT ideal-int
const SYS_KILL = 37
const SYS_KILL ideal-int
const SYS_KQUEUE1 = 455
const SYS_KQUEUE1 ideal-int
const SYS_KQUEUE = 344
const SYS_KQUEUE ideal-int
const SYS_KTRACE = 45
const SYS_KTRACE ideal-int
const SYS_LCHFLAGS = 304
const SYS_LCHFLAGS ideal-int
const SYS_LCHMOD = 274
const SYS_LCHMOD ideal-int
const SYS_LCHOWN = 275
const SYS_LCHOWN ideal-int
const SYS_LGETXATTR = 379
const SYS_LGETXATTR ideal-int
const SYS_LINK = 9
const SYS_LINKAT = 457
const SYS_LINKAT ideal-int
const SYS_LINK ideal-int
const SYS_LISTEN = 106
const SYS_LISTEN ideal-int
const SYS_LISTXATTR = 381
const SYS_LISTXATTR ideal-int
const SYS_LLISTXATTR = 382
const SYS_LLISTXATTR ideal-int
const SYS_LREMOVEXATTR = 385
const SYS_LREMOVEXATTR ideal-int
const SYS_LSEEK = 199
const SYS_LSEEK ideal-int
const SYS_LSETXATTR = 376
const SYS_LSETXATTR ideal-int
const SYS_LSTAT = 441
const SYS_LSTAT ideal-int
const SYS_LUTIMES = 424
const SYS_LUTIMES ideal-int
const SYS__LWP_CONTINUE = 314
const SYS__LWP_CONTINUE ideal-int
const SYS__LWP_CREATE = 309
const SYS__LWP_CREATE ideal-int
const SYS__LWP_CTL = 325
const SYS__LWP_CTL ideal-int
const SYS__LWP_DETACH = 319
const SYS__LWP_DETACH ideal-int
const SYS__LWP_EXIT = 310
const SYS__LWP_EXIT ideal-int
const SYS__LWP_GETNAME = 324
const SYS__LWP_GETNAME ideal-int
const SYS__LWP_GETPRIVATE = 316
const SYS__LWP_GETPRIVATE ideal-int
const SYS__LWP_KILL = 318
const SYS__LWP_KILL ideal-int
const SYS__LWP_PARK = 434
const SYS__LWP_PARK ideal-int
const SYS__LWP_SELF = 311
const SYS__LWP_SELF ideal-int
const SYS__LWP_SETNAME = 323
const SYS__LWP_SETNAME ideal-int
const SYS__LWP_SETPRIVATE = 317
const SYS__LWP_SETPRIVATE ideal-int
const SYS__LWP_SUSPEND = 313
const SYS__LWP_SUSPEND ideal-int
const SYS__LWP_UNPARK = 321
const SYS__LWP_UNPARK_ALL = 322
const SYS__LWP_UNPARK_ALL ideal-int
const SYS__LWP_UNPARK ideal-int
const SYS__LWP_WAIT = 312
const SYS__LWP_WAIT ideal-int
const SYS__LWP_WAKEUP = 315
const SYS__LWP_WAKEUP ideal-int
const SYS_MADVISE = 75
const SYS_MADVISE ideal-int
const SYS_MINCORE = 78
const SYS_MINCORE ideal-int
const SYS_MINHERIT = 273
const SYS_MINHERIT ideal-int
const SYS_MKDIR = 136
const SYS_MKDIRAT = 461
const SYS_MKDIRAT ideal-int
const SYS_MKDIR ideal-int
const SYS_MKFIFO = 132
const SYS_MKFIFOAT = 459
const SYS_MKFIFOAT ideal-int
const SYS_MKFIFO ideal-int
const SYS_MKNOD = 450
const SYS_MKNODAT = 460
const SYS_MKNODAT ideal-int
const SYS_MKNOD ideal-int
const SYS_MLOCK = 203
const SYS_MLOCKALL = 242
const SYS_MLOCKALL ideal-int
const SYS_MLOCK ideal-int
const SYS_MMAP = 197
const SYS_MMAP ideal-int
const SYS_MODCTL = 246
const SYS_MODCTL ideal-int
const SYS_MOUNT = 410
const SYS_MOUNT ideal-int
const SYS_MPROTECT = 74
const SYS_MPROTECT ideal-int
const SYS_MREMAP = 411
```

----------------------------------------

TITLE: Defining Terminal Mode Constants in Go for NetBSD ARM64
DESCRIPTION: This snippet defines terminal mode flags for controlling terminal behavior on NetBSD ARM64. These constants are used in terminal control operations through the syscall package and affect how terminal input/output is processed.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_47

LANGUAGE: Go
CODE:
```
const OCRNL = 16
const ONLCR = 2
const ONLRET = 64
const ONOCR = 32
const ONOEOT = 8
const OPOST = 1
const PARENB = 4096
const PARMRK = 8
const PARODD = 8192
const PENDIN = 536870912
```

----------------------------------------

TITLE: Berkeley Packet Filter (BPF) Constants
DESCRIPTION: Defines constants for Berkeley Packet Filter operations and configurations on Darwin ARM64. These are used for network packet filtering and capture.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_53

LANGUAGE: Go
CODE:
```
const BIOCFLUSH = 536887912
const BIOCGBLEN = 1074020966
const BIOCGDLT = 1074020970
const BIOCGDLTLIST = 3222028921
const BPF_A = 16
const BPF_ABS = 32
const BPF_ADD = 0
const BPF_ALIGNMENT = 4
const BPF_ALU = 4
const BPF_AND = 80
```

----------------------------------------

TITLE: Defining Terminal and Network Interface Constants for Darwin ARM64 in Go
DESCRIPTION: This snippet defines constants related to terminal settings and network interfaces for the Darwin ARM64 architecture. These constants are used in system calls for configuring terminals and network devices.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_63

LANGUAGE: Go
CODE:
```
const HUPCL = 16384
const ICANON = 256
const ICMP6_FILTER = 18
const ICRNL = 256
const IEXTEN = 1024
const IFF_ALLMULTI = 512
const IFF_ALTPHYS = 16384
const IFF_DEBUG = 4
const IFF_LINK0 = 4096
const IFF_LINK1 = 8192
const IFF_LINK2 = 16384
const IFF_LOOPBACK = 8
const IFF_MULTICAST = 32768
const IFF_NOARP = 128
const IFF_NOTRAILERS = 32
const IFF_OACTIVE = 1024
const IFF_POINTOPOINT = 16
const IFF_PROMISC = 256
const IFF_RUNNING = 64
const IFF_SIMPLEX = 2048
const IFNAMSIZ = 16
```

----------------------------------------

TITLE: Module B v1 Configuration (b1/go.mod)
DESCRIPTION: Configuration file for version 1 of module b, requiring module c.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/b

go 1.15

require example.com/c v0.1.0
```

----------------------------------------

TITLE: Testing go mod init with existing GOPATH-mode vendor directory
DESCRIPTION: Verifies that 'go mod init' works with an existing GOPATH-mode vendor directory and uses -mod=vendor by default for Go versions prior to 1.23.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
rm go.mod
rm vendor/modules.txt

go mod init example.com/auto
go mod edit -go=1.22
go list -f {{.Dir}} -tags tools -e all
stdout '^'$WORK'[/\\]auto$'
stdout '^'$WORK'[/\\]auto[/\\]vendor[/\\]example.com[/\\]printversion$'
stdout '^'$WORK'[/\\]auto[/\\]vendor[/\\]example.com[/\\]version$'
```

----------------------------------------

TITLE: Defining Glass Function in Go
DESCRIPTION: Returns a phrase for world travelers by calling GlassV2() from an imported module. The quote relates to eating glass without injury.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Glass returns a useful phrase for world travelers.
func Glass() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return quote.GlassV2()
}
```

----------------------------------------

TITLE: Calling an Imported Package Function in Go
DESCRIPTION: This Go code snippet defines the package p2, which imports p1 from the same module and provides a function F that calls p1.F(). This enables p2 to expose p1's functionality, forming a cyclic package dependency used to test Go coverage behavior. No input parameters are required. The snippet does not output a value but ensures p1.F is invoked when p2.F is called.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dep_loop.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package p2

import "coverdep2/p1"

func F() {
	p1.F()
}
```

----------------------------------------

TITLE: Running go vet on package with external tests
DESCRIPTION: This snippet shows how to run go vet on a package with external tests. It expects an error message containing 'Printf'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
! go vet m/vetpkg
stderr 'Printf'
```

----------------------------------------

TITLE: Git User Configuration File
DESCRIPTION: This .gitconfig file sets up the Git user identity with a name and email, and configures the safe.bareRepository setting to explicit for security purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_git_bareRepository.txt#2025-04-22_snippet_2

LANGUAGE: gitconfig
CODE:
```
[user]
	name = Go Gopher
	email = gopher@golang.org
[safe]
	bareRepository = explicit
```

----------------------------------------

TITLE: Defining Original Go Module File
DESCRIPTION: Defines the original go.mod file content used in the tests. Contains only the module declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gonoproxy.txt#2025-04-22_snippet_8

LANGUAGE: Go
CODE:
```
module m
```

----------------------------------------

TITLE: Invalid Pkg-Config Flags in Go
DESCRIPTION: This snippet shows rejection messages from the Go compiler when invalid 'pkg-config' options '@foo' and '-foo' are included, affirming the necessity for valid package naming.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_bad_directives.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package x
// #cgo pkg-config: -foo
import "C"
```

LANGUAGE: Go
CODE:
```
package x
// #cgo pkg-config: @foo
import "C"
```

----------------------------------------

TITLE: Module B Command Implementation
DESCRIPTION: Main package in module B's cmd directory importing and using module C
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_regression_hang.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package main

import "example.com/c"

func main() {
	c.C()
}
```

----------------------------------------

TITLE: Listing Vendored Modules in Go
DESCRIPTION: This vendor/modules.txt file lists the vendored module 'foo.com/internal/bar' and its packages. It indicates that the module is explicitly required and includes the package 'foo.com/internal/bar/a'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_internal.txt#2025-04-22_snippet_2

LANGUAGE: Text
CODE:
```
# foo.com/internal/bar v1.0.0
## explicit
foo.com/internal/bar/a
```

----------------------------------------

TITLE: Testing Go Build Command for Import Errors
DESCRIPTION: This snippet tests the 'go build' command to verify error reporting for malformed import paths. It expects the build to fail and output an error message with file path and line number.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_info_err.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
! go build ./main
stderr '^bad[/\\]bad.go:3:8: malformed import path "🐧.example.com/string": invalid char ''🐧''$'
```

----------------------------------------

TITLE: Bad Import Module Definition
DESCRIPTION: Module definition for the badimport package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_errors.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com/badimport

go 1.16
```

----------------------------------------

TITLE: Checking for Root Package Absence (Shell)
DESCRIPTION: Attempts to list the package 'rsc.io/QUOTE' using 'go list' with the '-mod=readonly' flag. The leading '!' negates the exit status, meaning this command is expected to fail, confirming that the module 'rsc.io/QUOTE' does not contain a Go package in its root directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_sum_noroot.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
! go list -mod=readonly rsc.io/QUOTE
```

----------------------------------------

TITLE: Setting Go Module Mode in Go
DESCRIPTION: This command sets the GO111MODULE environment variable to 'on', enabling module-aware mode for Go commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade_pseudo.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: HTML Template for Valid Repository in SSH Subdirectory
DESCRIPTION: HTML template with a go-import meta tag for a valid repository in an SSH Git subdirectory. This maps a module path to an existing Git repository using HTTPS instead of SSH.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/missingrepo.txt#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<meta name="go-import" content="vcs-test.golang.org/go/missingrepo/missingrepo-git-ssh/notmissing git https://vcs-test.golang.org/git/mainonly">
```

----------------------------------------

TITLE: UTF-8 Rune Handling Function
DESCRIPTION: Adds AppendRune function to the unicode/utf8 package for appending a Unicode code point to a byte slice.
SOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
func AppendRune([]uint8, int32) []uint8
```

----------------------------------------

TITLE: Incorrect Modules.txt File
DESCRIPTION: Defines an incorrect modules.txt file that is missing a required package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_vendor.txt#2025-04-22_snippet_4

LANGUAGE: Text
CODE:
```
# foo.com/internal/bar v1.0.0
## explicit
foo.com/internal/bar/a
```

----------------------------------------

TITLE: Inner Module Configuration
DESCRIPTION: Go module configuration for the inner package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_issue60313.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.net/outer/inner

go 1.21
```

----------------------------------------

TITLE: Defining Socket Message Constants for NetBSD ARM64 in Go
DESCRIPTION: This snippet defines constants used for socket message handling on NetBSD ARM64. These constants are typically used with send, recv, and related socket operations to control message behavior.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_139

LANGUAGE: Go
CODE:
```
const MSG_BCAST = 256
const MSG_BCAST ideal-int
const MSG_CMSG_CLOEXEC = 2048
const MSG_CMSG_CLOEXEC ideal-int
const MSG_CONTROLMBUF = 33554432
```

----------------------------------------

TITLE: NetBSD ARM64 Directory Entry Structure Definition in Go
DESCRIPTION: Defines the Dirent structure representing directory entries in the filesystem. Contains fields for file number, name, name length, record length, and file type.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_89

LANGUAGE: go
CODE:
```
type Dirent struct {
	Fileno uint64
	Reclen uint16
	Type uint8
	Namelen uint16
	Pad_cgo_0 [3]uint8
	Name [512]int8
}
```

----------------------------------------

TITLE: Address Family Constants in Go for Darwin ARM64
DESCRIPTION: Defines address family constants used in network socket programming on Darwin ARM64 systems. These constants specify the communication domain for sockets.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_51

LANGUAGE: Go
CODE:
```
const AF_CCITT ideal-int
const AF_CHAOS = 5
const AF_CNT = 21
const AF_COIP = 20
const AF_DATAKIT = 9
const AF_DECnet = 12
const AF_DLI = 13
const AF_E164 = 28
const AF_ECMA = 8
const AF_HYLINK = 15
const AF_IEEE80211 = 37
const AF_IMPLINK = 3
const AF_INET6 = 30
const AF_IPX = 23
const AF_ISDN = 28
```

----------------------------------------

TITLE: Defining a Regular Function in a With-Test Package - Go
DESCRIPTION: Defines package 'withtest' and exports a simple Bar function as a minimal non-test code. Serves as the source for the related test file and allows verifying coverage for more traditional package structures. There are no inputs or outputs; Bar is only meant to be exercised by test code for coverage.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_imports.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package withtest

func Bar() {}
```

----------------------------------------

TITLE: Command Implementation
DESCRIPTION: Main program that prints the module version string using fmt package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_a_v1.0.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main

import "fmt"

func main() { fmt.Println("a@v1.0.0") }
```

----------------------------------------

TITLE: Go File with Invalid Import Path
DESCRIPTION: This snippet contains a Go file that demonstrates an invalid import path. It imports a package from the vendor directory using an incorrect path, which should trigger an error during compilation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_import_wrong.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package invalid

import "vend/x/invalid/vendor/foo"
```

----------------------------------------

TITLE: Go Package Source File with CGO and Error
DESCRIPTION: A Go source file that imports the C package and calls an undefined function 'j()', which will cause a compilation error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_error.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p

import "C"

func h() {
	j()
}
```

----------------------------------------

TITLE: Running Go Mod Tidy with -e Flag
DESCRIPTION: Executes 'go mod tidy -e' command to proceed past the first error and show version discrepancy.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_added.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go mod tidy -e

stderr '^go: example\.com/m imports\n\texample\.net/added: module example\.net/added@latest found \(v0\.3\.0, replaced by \.\./a1\), but does not contain package example\.net/added\ngo: example\.net/added failed to load from any module,\n\tbut go 1\.16 would load it from example\.net/added@v0\.2\.0$'

! stderr '\n\tgo mod tidy'
```

----------------------------------------

TITLE: Vendor Modules Definition
DESCRIPTION: Vendor modules.txt file explicitly declaring dependency on rsc.io/sampler.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_require_exclude.txt#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
# rsc.io/sampler v1.99.99
## explicit
```

----------------------------------------

TITLE: Setting up Go environment and running build test
DESCRIPTION: Sets environment variables, changes directory, and attempts to build a Go file that should fail due to a missing package import. Verifies that the build fails without panicking and produces the expected error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_issue12156.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=off
env GOPATH=$WORK/gopath/src/testvendor2 # vendor/x is directly in $GOPATH, not in $GOPATH/src
cd $WORK/gopath/src/testvendor2/src/p

! go build p.go
! stderr panic # Make sure it doesn't panic
stderr 'cannot find package "x"'
```

----------------------------------------

TITLE: Defining Module Dependencies for x1
DESCRIPTION: This go.mod file for the x1 module defines its dependencies on specific versions of modules z and w.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence_loop.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module example.net/x

go 1.16

require (
	example.net/z v0.2.0-pre
	example.net/w v0.2.0-pre
)
```

----------------------------------------

TITLE: Module B v1.0 Configuration
DESCRIPTION: Module B version 1.0's go.mod file with dependencies
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchbound.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.net/b

go 1.16

require example.net/a v0.1.0
```

----------------------------------------

TITLE: Vendoring Go Modules Without Version Information
DESCRIPTION: This snippet shows the process of vendoring Go modules without version information in vendor/modules.txt, demonstrating how this affects build outcomes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
go mod vendor

! grep 1.17 vendor/modules.txt
! go build example.net/need117
stderr '^vendor[/\\]example\.net[/\\]need117[/\\]need117.go:5:1[89]:'
stderr 'conversion of slice to array pointer requires go1\.17 or later'

! grep 1.13 vendor/modules.txt
go build example.net/bad114
```

----------------------------------------

TITLE: Setting GO111MODULE On and Running TestReadResponseErrors
DESCRIPTION: This snippet sets GO111MODULE to on and runs the TestReadResponseErrors test. It expects the test to pass without the httplaxcontentlength=1 setting.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_default_godebug_issue69203.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
go test net/http -run=^TestReadResponseErrors$
```

----------------------------------------

TITLE: Testing Go Module Download Without Credentials
DESCRIPTION: Attempts to run 'go mod tidy' without credentials, expecting it to fail with specific error messages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_auth.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
env NETRC=$WORK/empty
! go mod tidy
stderr '^\tserver response: ACCESS DENIED, buddy$'
stderr '^\tserver response: File\? What file\?$'
```

----------------------------------------

TITLE: Handling Go Module Download Errors
DESCRIPTION: This snippet illustrates how Go handles errors during module downloads. It shows that 'go mod download' doesn't leave behind a directory or a .partial file if there's an error extracting the zip file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_partial.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
# 'go mod download' should not leave behind a directory or a .partial file
# if there is an error extracting the zip file.
rm $GOPATH/pkg/mod/rsc.io/quote@v1.5.2
cp empty $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.2.zip
! go mod download
stderr 'not a valid zip file'
! exists $GOPATH/pkg/mod/rsc.io/quote@v1.5.2
! exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.2.partial
```

----------------------------------------

TITLE: Testing Invalid Flag with modcacherw
DESCRIPTION: Tests error handling when an invalid -cake flag is provided alongside the valid -modcacherw flag during package installation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_modcacherw_issue64282.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go install -cake=delicious -modcacherw example.com/printversion@v0.1.0
stderr '^flag provided but not defined: -cake$'
cp $WORK/extraneous.txt $GOPATH/pkg/mod/example.com/printversion@v0.1.0/extraneous_file.go
go clean -modcache
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module declaration for the fuzz testing package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_fail.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.17
```

----------------------------------------

TITLE: LookupSelection Function
DESCRIPTION: Function for looking up type selections in a package, returns a Selection and boolean indicating success
SOURCE: https://github.com/golang/go/blob/master/api/next/70250.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
func LookupSelection(Type, bool, *Package, string) (Selection, bool)
```

----------------------------------------

TITLE: Quote Module Definition
DESCRIPTION: Module definition for the quote package replacement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_readonly.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module rsc.io/quote

go 1.16
```

----------------------------------------

TITLE: Testing iOS ARM64 Build Requirements
DESCRIPTION: Verifies build failures and error messages when attempting to build Go programs for iOS/arm64 with CGO disabled.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_android_issue62123.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
env GOOS=ios GOARCH=arm64 CGO_ENABLED=0

! go build -o $devnull cmd/buildid
stderr 'ios/arm64 requires external \(cgo\) linking, but cgo is not enabled'
! stderr 'cannot find runtime/cgo'

! go test -c -o $devnull os
stderr '# os\nios/arm64 requires external \(cgo\) linking, but cgo is not enabled'
! stderr 'cannot find runtime/cgo'
```

----------------------------------------

TITLE: Defining a Struct Without Statements in pkg4 - Go
DESCRIPTION: This file creates package 'pkg4' and defines a struct type T with a single boolean field X. There are no executable statements, which is used to test tool handling of packages with no coverage points. No dependencies are required.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_statements.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package pkg4

type T struct {
	X bool
}
```

----------------------------------------

TITLE: Testing GONOPROXY Bypass in Go Module Fetching
DESCRIPTION: Verifies that GONOPROXY bypasses the proxy for specified modules. Attempts to get a non-existent package rsc.io/fortune to trigger a git ls-remote command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gonoproxy.txt#2025-04-22_snippet_6

LANGUAGE: Shell
CODE:
```
[!net:rsc.io] skip
[!git] skip
env GOPRIVATE=none
env GONOPROXY='*/fortune'
! go get rsc.io/fortune # does not exist in real world, only on test proxy
stderr 'git ls-remote'
```

----------------------------------------

TITLE: Defining an Empty Package for SWIG - Go
DESCRIPTION: This Go source file declares the 'swig' package, setting up a placeholder for sources that are to be combined with SWIG and Cgo-generated files. No functions or types are defined; its primary purpose is to ensure the package is recognized by the Go tooling, and that a.go is included in 'CompiledGoFiles'. The file must reside in the 'swig' directory of the module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_swigcxx.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package swig
```

----------------------------------------

TITLE: Package B2 Test with Import
DESCRIPTION: Test file for package b v0.2.0 which imports example.com/c.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
package b_test
import _ "example.com/c"
```

----------------------------------------

TITLE: Testing Go Get with GOINSECURE Setting
DESCRIPTION: Retries the download with GOINSECURE and GONOSUMDB set, which should succeed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
env GOINSECURE=insecure.go-get-issue-15410.appspot.com
env GONOSUMDB=insecure.go-get-issue-15410.appspot.com
go get -d insecure.go-get-issue-15410.appspot.com/pkg/p
```

----------------------------------------

TITLE: Defining Simple Go Functions for Testing (Go)
DESCRIPTION: This Go source file defines a `main` package containing two simple integer functions, `Mumble` and `Grumble`, intended to be tested. `Mumble` returns 42 for non-negative input and the absolute value for negative input. `Grumble` returns the negation of its input. An empty `main` function is included to make the package runnable, though it's primarily used for testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_localpkg_filepath.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
-- prog.go --
package main

func Mumble(x int) int {
	if x < 0 {
		return -x
	}
	return 42
}

func Grumble(y int) int {
	return -y
}

func main() {
}

```

----------------------------------------

TITLE: Basic Go Test Function
DESCRIPTION: Minimal Go test file containing an empty test function TestF. Used to verify module testing behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_go111module_cache.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import "testing"

func TestF(t *testing.T) {}
```

----------------------------------------

TITLE: Implementing PrintFile Function in Main Package
DESCRIPTION: Defines a PrintFile function in the pkg_test package that prints the current file path using runtime.Caller().
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath_test_suffix.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package pkg_test

import "runtime"

func PrintFile() {
	_, file, _, _ := runtime.Caller(0)
	println(file)
}
```

----------------------------------------

TITLE: Testing GOTOOLCHAIN=min+auto Behavior
DESCRIPTION: Tests how GOTOOLCHAIN=go1.21+auto switches to a newer toolchain when dependencies require it.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
# GOTOOLCHAIN=min+auto should run the newer toolchain
env GOTOOLCHAIN=go1.21+auto
cp go.mod.new go.mod
go get rsc.io/needgo121 rsc.io/needgo122 rsc.io/needgo123 rsc.io/needall
stderr '^go: rsc.io/needall@v0.0.1 requires go >= 1.23; switching to go1.23.9$'
! stderr '\(running'
stderr '^go: added rsc.io/needall v0.0.1'
grep 'go 1.23' go.mod
! grep toolchain go.mod
```

----------------------------------------

TITLE: Importing Dependencies in Main Module 'a'
DESCRIPTION: This Go file for module 'a' imports dependencies 'b' and 'c' as blank imports.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package a

import (
	_ "example.net/b"
	_ "example.net/c"
)
```

----------------------------------------

TITLE: Example Go Package With Future Dependency
DESCRIPTION: A minimal Go package that imports a dependency requiring a future Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_modcmds.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package example

import _ "rsc.io/future"
```

----------------------------------------

TITLE: Creating Test Go File with Import
DESCRIPTION: Defines a Go file that imports the test module to trigger version resolution during the test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo_other_branch.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package x

import _ "vcs-test.golang.org/git/tagtests.git"
```

----------------------------------------

TITLE: Main Package Test Implementation
DESCRIPTION: Test file for the main package that imports example.com/t module, which creates a test-only dependency path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
package main_test

import _ "example.com/t"
```

----------------------------------------

TITLE: Secondary Package with Vendor Import
DESCRIPTION: Package p2 that imports the vendor version of package p, creating the duplicate import scenario.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_vendor_dup_err.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p2

import _ "dupload/vendor/p"
```

----------------------------------------

TITLE: Testing Testdata Directory Package Path
DESCRIPTION: Verifies that 'go list ./testdata' correctly outputs the package path without synthesizing underscores.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
# golang.org/issue/28155: 'go list ./testdata' should not synthesize underscores.
go list ./testdata
stdout '^example.com/testdata'
```

----------------------------------------

TITLE: Checking Module Association for Local File with Go List (Shell)
DESCRIPTION: This shell snippet uses `go list` within the 'a' directory to check the module associated with a local Go file (`a.go`). It asserts that the output matches the pattern '^<nil>$', confirming that even for a source file within a module directory, providing it directly as a command-line argument results in it being treated as part of the `command-line-arguments` pseudo-package with no module association.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_command_line_arguments.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# ... even if the arguments are sources from that module
go list -f '{{.Module}}' a.go
stdout '^<nil>$'
```

----------------------------------------

TITLE: Testing Module with go 1.22.3 Requirement
DESCRIPTION: Tests how 'go get needgo1223' (which requires Go 1.22.3) uses exactly Go 1.22.3 when GOTOOLCHAIN=auto is set.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_9

LANGUAGE: shell
CODE:
```
# go get needgo1223 (says 'go 1.22.3') should use go 1.22.3
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get rsc.io/needgo1223
stderr '^go: rsc.io/needgo1223@v0.0.1 requires go >= 1.22.3 \(running go 1.21; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp go.mod.new go.mod
go get rsc.io/needgo1223
stderr '^go: upgraded go 1.1 => 1.22.3$'
stderr '^go: rsc.io/needgo1223@v0.0.1 requires go >= 1.22.3; switching to go1.22.9$'
! stderr '^go: added toolchain$'
```

----------------------------------------

TITLE: Running go vet on package with only cgo files
DESCRIPTION: This snippet demonstrates running go vet on a package that contains only cgo files. It skips the test if cgo is not available or if running in short mode.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_5

LANGUAGE: Shell
CODE:
```
[!cgo] skip
[short] skip
go vet m/onlycgo
! stderr .
```

----------------------------------------

TITLE: Main Go file with external dependency
DESCRIPTION: A Go file containing the main function that references a constant defined in another file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_dirs.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main
func main() { println(msg) }
```

----------------------------------------

TITLE: Cross-Package Fail Fast Test Cases in Go
DESCRIPTION: This snippet shows the implementation of failing tests in separate packages (a, b, and c) to test the cross-package fail-fast functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fail_fast.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package a

import "testing"

func TestFailingPkgA(t *testing.T) {
	t.Errorf("FAIL - %s", t.Name())
}
```

LANGUAGE: Go
CODE:
```
package b

import "testing"

func TestFailingPkgB(t *testing.T) {
	t.Errorf("FAIL - %s", t.Name())
}
```

LANGUAGE: Go
CODE:
```
package c

import "testing"

func TestFailingPkgC(t *testing.T) {
	t.Errorf("FAIL - %s", t.Name())
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file specifying the module name and its dependency on rsc.io/sampler package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180214005840-23179ee8a569.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module "rsc.io/quote"

require "rsc.io/sampler" v1.3.0
```

----------------------------------------

TITLE: Testing Go Module Version Formatting Commands
DESCRIPTION: Shell commands to test go.mod exclude block formatting across Go versions 1.20 and 1.21, verifying proper version sorting behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_exclude_go121.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
cp $WORK/go.mod.badfmtexclude go.mod
go mod edit -go=1.20
cmp go.mod $WORK/go.mod.goodfmtexclude120
go mod edit -go=1.21
cmp go.mod $WORK/go.mod.goodfmtexclude121
```

----------------------------------------

TITLE: Go Package Importing golang.org/x/internal
DESCRIPTION: Defines a Go package `useinternal` that directly imports `golang.org/x/internal/subtle`. This package is used to test whether such an import is allowed based on the module context.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
-- useinternal.go --
package useinternal
import _ "golang.org/x/internal/subtle"
```

----------------------------------------

TITLE: Defining Test Package with Ambiguous Import
DESCRIPTION: Creates a test package that imports an ambiguous package, used to test import resolution errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
package importx
import _ "example.com/a/x"
```

----------------------------------------

TITLE: Configuring and Running Go Tests with Relative Imports
DESCRIPTION: This snippet sets up the environment and runs Go tests using relative imports. It disables module mode, sets a custom GOPATH, and executes the test command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_relative_import.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=off # relative import not supported in module mode

# Run tests outside GOPATH.
env GOPATH=$WORK/tmp

go test ./testimport
stdout '^ok'
```

----------------------------------------

TITLE: TCP Socket Option Constants for NetBSD ARM64
DESCRIPTION: TCP socket option constants used for configuring TCP connection parameters on NetBSD. These constants are used with setsockopt/getsockopt system calls to control behavior like keep-alive timers, maximum segment size, and congestion control algorithms.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_70

LANGUAGE: Go
CODE:
```
const TCP_CONGCTL = 32
const TCP_CONGCTL ideal-int
const TCP_KEEPCNT = 6
const TCP_KEEPCNT ideal-int
const TCP_KEEPIDLE = 3
const TCP_KEEPIDLE ideal-int
const TCP_KEEPINIT = 7
const TCP_KEEPINIT ideal-int
const TCP_KEEPINTVL = 5
const TCP_KEEPINTVL ideal-int
const TCP_MAXBURST = 4
const TCP_MAXBURST ideal-int
const TCP_MAXSEG = 2
const TCP_MAXSEG ideal-int
const TCP_MAXWIN = 65535
const TCP_MAXWIN ideal-int
const TCP_MAX_WINSHIFT = 14
const TCP_MAX_WINSHIFT ideal-int
const TCP_MD5SIG = 16
const TCP_MD5SIG ideal-int
const TCP_MINMSS = 216
const TCP_MINMSS ideal-int
const TCP_MSS = 536
const TCP_MSS ideal-int
```

----------------------------------------

TITLE: Testing Version Listing with Direct VCS Connection
DESCRIPTION: Tests that +incompatible versions are omitted from version listings when fetching directly from version control when compatible versions exist with go.mod files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
[!git] stop
env GOPROXY=direct

go list -versions -m github.com/russross/blackfriday
stdout '^github.com/russross/blackfriday v1\.5\.1 v1\.5\.2' # and possibly others
! stdout ' v2\.'
```

----------------------------------------

TITLE: Test Script for Cgo Coverage
DESCRIPTION: A test script that verifies cgo coverage works with an external test. It skips certain conditions and ensures that the coverage report shows a non-zero percentage.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_xtest.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
[short] skip
[!cgo] skip
[compiler:gccgo] skip # gccgo has no cover tool

# Test cgo coverage with an external test.

go test -short -cover cgocover2
stdout  'coverage:.*[1-9][0-9.]+%'
! stderr '[^0-9]0\.0%'
```

----------------------------------------

TITLE: Test Environment Setup Commands
DESCRIPTION: Shell commands to set up the test environment in GOPATH mode and execute various go list commands to test dependency handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_bad_import.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
env GO111MODULE=off
[short] skip

env GO111MODULE=off
cd example.com
```

----------------------------------------

TITLE: Testing Android AMD64 Build Requirements
DESCRIPTION: Verifies build failures and error messages when attempting to build Go programs for Android/amd64 with CGO disabled.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_android_issue62123.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GOOS=android GOARCH=amd64 CGO_ENABLED=0

! go build -o $devnull cmd/buildid
stderr 'android/amd64 requires external \(cgo\) linking, but cgo is not enabled'
! stderr 'cannot find runtime/cgo'

! go test -c -o $devnull os
stderr '# os\nandroid/amd64 requires external \(cgo\) linking, but cgo is not enabled'
! stderr 'cannot find runtime/cgo'
```

----------------------------------------

TITLE: Defining a Go Module (Go)
DESCRIPTION: This snippet defines a simple Go module named 'm'. It serves as the root module file (`go.mod`) for the project structure used in the `go list` tests. This declaration is necessary for Go tools to recognize the directory as a Go module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_perm.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
-- go.mod --
module m
```

----------------------------------------

TITLE: Test-only Go files in testxtest package
DESCRIPTION: Two test-only Go files in the testxtest package: one with the same package name and one with the _test suffix package name.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_no_go.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p
```

LANGUAGE: go
CODE:
```
package p_test
```

----------------------------------------

TITLE: Module Definition Files for Testing
DESCRIPTION: Go module definition files and placeholder files used in the test script. These files establish the module structure needed to test the various GO111MODULE behaviors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_enabled.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
-- $GOPATH/src/x/y/z/go.mod --
module x/y/z
-- $GOPATH/src/x/y/z/w/w.txt --
-- $GOPATH/foo/go.mod --
module example.com/mod
-- $GOPATH/foo/bar/baz/quux.txt --
```

----------------------------------------

TITLE: Testing Go List Command with Malformed Module Paths
DESCRIPTION: This snippet tests the 'go list -m -versions' command with malformed module paths and verifies that appropriate error messages are displayed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_domain.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
! go list -m -versions appengine
stderr 'malformed module path "appengine": missing dot in first path element'
! go list -m -versions x/y.z
stderr 'malformed module path "x/y.z": missing dot in first path element'
```

----------------------------------------

TITLE: Testing Start Anchor with \B in Go Regexps
DESCRIPTION: Tests the interaction between start-of-string anchors (^) and non-word boundary assertions (\B). These tests verify how \B behaves at the beginning of strings.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_13

LANGUAGE: regexp
CODE:
```
^\B
```

LANGUAGE: regexp
CODE:
```
^(?:^\B)$
```

LANGUAGE: regexp
CODE:
```
^(?:^\B)
```

LANGUAGE: regexp
CODE:
```
(?:^\B)$
```

----------------------------------------

TITLE: Subdirectory Go Module with Relative Path Toolchain
DESCRIPTION: This go.mod file in the subdirectory also defines an 'exploit' module, but uses a relative path to reference the potentially malicious script as a toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain_slash.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
module exploit

go 1.21
toolchain go1.999999-/../../run.sh
```

----------------------------------------

TITLE: Testing go mod init with .go file in root
DESCRIPTION: Tests that 'go mod init' recommends running 'go mod tidy' when the directory contains a .go file in the root.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_tidy.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
cd pkginroot
go mod init m
stderr '^go: to add module requirements and sums:\n\tgo mod tidy$'
cd ..
```

----------------------------------------

TITLE: Package A Go File
DESCRIPTION: Defines package 'a' and imports package 'b' for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_vendor.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
package a
import _ "foo.com/internal/bar/b"
```

----------------------------------------

TITLE: Defining Module Path in Go
DESCRIPTION: This snippet establishes a Go module with a specific path, indicating that it is meant as a replacement for another module. It lists the Go version required to work with the module, which is set to 1.14.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_quote_v1.5.2.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module rsc.io/Quote

go 1.14
```

----------------------------------------

TITLE: Main Package with PGO Profile - a/a.go
DESCRIPTION: Defines a simple main package that imports two dependencies. This package has an associated default.pgo file for Profile-Guided Optimization.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main
import _ "test/dep"
import _ "test/dep2"
func main() {}
```

----------------------------------------

TITLE: Testing Vendor Package Import
DESCRIPTION: Tests that importing a vendor package incorrectly results in an error on the importing package. Verifies that 'vendor/p' must be imported as 'p'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_err.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package importvendor
import "vendor/p"
```

----------------------------------------

TITLE: Implementing Test Function with Panic in Background Goroutine
DESCRIPTION: This Go code implements a test function that spawns a background goroutine which panics, used to test the behavior of panics in background goroutines during tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_9

LANGUAGE: Go
CODE:
```
package testbgpanic_test

import "testing"

func TestPanicInBackground(*testing.T) {
	c := make(chan struct{})
	go func() {
		panic("haha no")
		close(c)
	}()
	<-c
}
```

----------------------------------------

TITLE: Initializing and Managing a Mercurial Repository for Go Code
DESCRIPTION: A sequence of Mercurial commands to initialize a repository, add a Go source file, commit changes with specified metadata, and display the commit history.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hello.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
hg init

hg add hello.go
hg commit --user 'bwk' --date '2017-09-21T21:14:14-04:00' --message 'hello world'

hg log -r ':' --template '{node|short} {desc|strip|firstline}\n'
cmp stdout .hg-log
```

----------------------------------------

TITLE: Testing Go Version Request with go@1.22rc1
DESCRIPTION: Tests how 'go get go@1.22rc1' uses the exact version 1.22rc1 and switches toolchains when GOTOOLCHAIN=auto is set.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
# go get go@1.22rc1 should use 1.22rc1 exactly, not a later release.
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get go@1.22rc1
stderr '^go: updating go.mod requires go >= 1.22rc1 \(running go 1.21; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp go.mod.new go.mod
go get go@1.22rc1
stderr '^go: updating go.mod requires go >= 1.22rc1; switching to go1.22.9$'
stderr '^go: upgraded go 1.1 => 1.22rc1$'
! stderr '^go: added toolchain$'
```

----------------------------------------

TITLE: Testing Valid +incompatible Pseudo-version for Module Without go.mod in Go
DESCRIPTION: This snippet tests that a +incompatible pseudo-version is valid for a revision of the module that lacks a go.mod file. It adds a requirement for such a version and verifies it's accepted.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_version.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
cp go.mod.orig go.mod
go mod edit -require github.com/pierrec/lz4@v2.0.4-0.20180826165652-dbe9298ce099+incompatible
cd outside
go list -m github.com/pierrec/lz4
stdout 'github.com/pierrec/lz4 v2.0.4-0.20180826165652-dbe9298ce099\+incompatible'
cd ..
go list -m github.com/pierrec/lz4
stdout 'github.com/pierrec/lz4 v2.0.4-0.20180826165652-dbe9298ce099\+incompatible'
```

----------------------------------------

TITLE: Listing Vendored Modules (text)
DESCRIPTION: This `vendor/modules.txt` file lists the modules that have been copied into the `vendor` directory. It indicates that `v.com` version `v1.0.0` is vendored and specifies the package `v.com/main` within it. This file is used by the Go toolchain when the `-mod=vendor` flag is active.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_trimpath_macro.txt#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
# v.com v1.0.0
## explicit; go 1.20
v.com/main
```

----------------------------------------

TITLE: Go Module File with Missing Indirect Annotations
DESCRIPTION: A go.mod file that doesn't properly mark indirect dependencies, used to test indirect comment addition.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_15

LANGUAGE: go
CODE:
```
module m

go 1.14

require (
	rsc.io/quote v1.5.2
	rsc.io/testonly v1.0.0
)
```

----------------------------------------

TITLE: Running Go Commands Across Modules
DESCRIPTION: This snippet demonstrates running Go commands across multiple modules in a workspace, including error handling for missing dependencies and successful execution after adding required packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
! go run  example.com/b
stderr 'a(\\|/)a.go:4:8: no required module provides package rsc.io/quote; to add it:\n\tcd '$WORK(\\|/)gopath(\\|/)src(\\|/)a'\n\tgo get rsc.io/quote'
cd a
go get rsc.io/quote
cat go.mod
go env GOMOD # go env GOMOD reports the module in a single module context
stdout $GOPATH(\\|/)src(\\|/)a(\\|/)go.mod
cd ..
go run example.com/b
stdout 'Hello, world.'

# And try from a different directory
cd c
go run  example.com/b
stdout 'Hello, world.'
cd $GOPATH/src
```

----------------------------------------

TITLE: Querying Module Version and Capturing Origin Metadata with go list - Shell
DESCRIPTION: This snippet queries the latest version of a Go module from a Git repository, saving the JSON response for reuse. It then asserts the presence and content of specific fields (Version, Origin, VCS, Hash, Ref, TagSum) in the output. This validates that proper origin metadata is attached when resolving directly from a VCS source. External dependencies include the Go toolchain and a valid Git-accessible module source.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61423.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# If we query a module version from a git repo, we expect its
# Origin data to be reusable.

go list -m -json vcs-test.golang.org/git/issue61415.git@latest
cp stdout git-latest.json
stdout '"Version": "v0.0.0-20231114180001-f213069baa68"'
stdout '"Origin":'
stdout '"VCS": "git"'
stdout '"Hash": "f213069baa68ec26412fb373c7cf6669db1f8e69"'
stdout '"Ref": "HEAD"'
stdout '"TagSum": "t1:47DEQpj8HBSa\+/TImW\+5JCeuQeRkm5NMpJWZG3hSuFU="'

```

----------------------------------------

TITLE: Vendored Package Definition
DESCRIPTION: Definition of vendored package 'x' in the vendor directory
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_resolve.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package x
```

----------------------------------------

TITLE: Creating Initial Commit with v2 Module Structure in Git
DESCRIPTION: Commits the initial Go files to set up a v2 module structure with both package v2sub and v2sub/v2. Tags this commit as v2.0.0 and renames the default branch to main.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2sub.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
at 2022-02-22T15:53:33-05:00
git add v2sub.go v2
git commit -m 'all: add package v2sub and v2sub/v2'
git branch -m main
git tag v2.0.0
```

----------------------------------------

TITLE: Defining Structs for System Call in Go
DESCRIPTION: This snippet defines structs such as Stat_t, Dirent, Statfs_t, and RawSockaddrUnix that are used in syscall operations across different operating systems like FreeBSD, OpenBSD, and Windows in the Go programming language. These structures hold filesystem metadata, directory entries, and socket address information. Operating system specific details like padding and byte alignment are included to ensure compatibility.
SOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_14

LANGUAGE: Go
CODE:
```
type Stat_t struct {
    Nlink uint64
    Padding0 int16
    Padding1 int32
    Rdev uint64
    Spare [10]uint64
}

type Dirent struct {
    Fileno uint64
    Namlen uint16
    Off int64
    Pad0 uint8
    Pad1 uint16
}

type Statfs_t struct {
    Mntfromname [1024]int8
    Mntonname [1024]int8
}

type RawSockaddrAny struct {
    Pad [100]int8
}

type RawSockaddrUnix struct {
    Family uint16
    Path [108]int8
}
```

----------------------------------------

TITLE: Defining Go Module Requiring Go 1.17
DESCRIPTION: This Go module definition for need117 specifies a requirement for Go 1.17 or higher.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
// Module need117 requires Go 1.17 or higher.
module example.net/need117

go 1.17
```

----------------------------------------

TITLE: Simple Go Function Implementation
DESCRIPTION: Basic Go package containing an Id function that returns a constant integer value
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_n_cover.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package f

func Id() int {
     return 42
}
```

----------------------------------------

TITLE: Listing Module Versions Without Exclusions
DESCRIPTION: Demonstrates listing all versions of rsc.io/quote module without showing the excluded version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
go list -m -versions rsc.io/quote
stdout '\bv1.5.0\b'
go list -modfile=go.exclude.mod -m -versions rsc.io/quote
! stdout '\bv1.5.0\b'
```

----------------------------------------

TITLE: Declaring a Go Module - Go
DESCRIPTION: This go.mod file snippet declares a minimal Go module named 'm' using Go version 1.16. It is required to initialize the project and enable dependency and package management for the test. No parameters are required. Inputs are the module path and Go version; outputs are the go.mod metadata for the project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_wildcard_skip_nonmatching.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
-- go.mod --\nmodule m\n\ngo 1.16\n
```

----------------------------------------

TITLE: Defining Go Module in go.mod
DESCRIPTION: Specifies the module name for the Go project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_indirect_v1.0.1.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module patch.example.com/indirect
```

----------------------------------------

TITLE: Syslog Facility Constants
DESCRIPTION: System log facility constants used to identify the source of log messages in the log/syslog package for Darwin ARM64.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_49

LANGUAGE: Go
CODE:
```
const (
    LOG_KERN = 0
    LOG_USER = 8
    LOG_MAIL = 16
    LOG_DAEMON = 24
    LOG_AUTH = 32
    LOG_SYSLOG = 40
    LOG_LPR = 48
    LOG_NEWS = 56
    LOG_UUCP = 64
    LOG_CRON = 72
    LOG_AUTHPRIV = 80
    LOG_FTP = 88
)
```

----------------------------------------

TITLE: Invalid Example Function with Parameter in Go
DESCRIPTION: A Go test file containing an invalid example function that has a parameter. This example is used to verify that the Go testing framework properly ignores examples with invalid signatures (golang.org/issue/35284).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_bad_example.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package  x

import "fmt"

func ExampleThisShouldNotHaveAParameter(thisShouldntExist int) {
	fmt.Println("X")
	// Output:
}
```

----------------------------------------

TITLE: Defining a Simple Constant in Go Package p
DESCRIPTION: This Go code snippet defines a package named `p`. Within this package, it declares a constant named `v` of inferred integer type and assigns it the value `3`. This represents a minimal Go source file within the module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/github.com_dmitshur-test_modtest5_v0.5.0-alpha.0.20190619023908-3da23a9deb9e.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p

const v = 3
```

----------------------------------------

TITLE: Declaring Go Module in go.mod
DESCRIPTION: Defines the module name for the Go project. This is essential for Go's module system to identify and manage dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_indirect_v1.1.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module patch.example.com/indirect
```

----------------------------------------

TITLE: Running Go Test with Specific Pattern
DESCRIPTION: This command runs a Go test, filtering for a specific subtest pattern that doesn't match any tests. It expects no tests to run.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_subtests_parallel.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -run Test/Sub/ThisWillNotMatch standalone_parallel_sub_test.go
```

----------------------------------------

TITLE: Handling Package Not in Standard Library
DESCRIPTION: Demonstrates a scenario where an attempt is made to import a package 'p' which is not found in the standard library. This provides insights into error messages associated with missing packages. The expected input is a program that uses a non-existing module, showcasing how such errors manifest during the build process.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_issue35270.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module test
```

LANGUAGE: Go
CODE:
```
package main

import (
    "p"
)

func main() {
    println(p.Add(1,1))
}
```

----------------------------------------

TITLE: Overlay JSON Configuration for Go Build
DESCRIPTION: JSON configuration file that maps replacement paths for various Go source files, assembly files, C files, and header files. This defines which files should be used from the overlay when building.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{
	"Replace": {
		"f.go": "overlay/f.go",
		"dir/g.go": "overlay/dir_g.go",
		"dir2/i.go": "overlay/dir2_i.go",
		"printpath/main.go": "overlay/printpath.go",
		"printpath/other.go": "overlay2/printpath2.go",
		"call_asm/asm_gc.s": "overlay/asm_gc.s",
		"call_asm/asm_gccgo.s": "overlay/asm_gccgo.s",
		"test_cache/main.go": "overlay/test_cache.go",
		"cgo_hello_replace/cgo_header.h": "overlay/cgo_head.h",
		"cgo_hello_replace/hello.c": "overlay/hello.c",
		"cgo_hello_quote/cgo_hello.go": "overlay/cgo_hello_quote.go",
		"cgo_hello_quote/cgo_header.h": "overlay/cgo_head.h",
		"cgo_hello_angle/cgo_hello.go": "overlay/cgo_hello_angle.go",
		"cgo_hello_angle/cgo_header.h": "overlay/cgo_head.h"
	}
}
```

----------------------------------------

TITLE: Dependency Module Definition
DESCRIPTION: Module definition for the dependent package x.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_nospace.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.net/x

go 1.16
```

----------------------------------------

TITLE: Importing Missing Package in Go
DESCRIPTION: Example showing a Go file that attempts to import a non-existent package 'notfound', which will trigger a build error. Located in the path vend/x/vendor/p/p/p.go.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_import_missing.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package p

import _ "notfound"
```

----------------------------------------

TITLE: Package Definition for Import Test
DESCRIPTION: Simple package definition used in testing case-sensitive import collisions
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_case_collision.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package pkg
```

----------------------------------------

TITLE: Simple C function for printing 'Hello World'
DESCRIPTION: A minimal C function that prints 'Hello, world!' using the standard puts() function. This is used as part of the cgo integration test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_cgo.txt#2025-04-22_snippet_0

LANGUAGE: c
CODE:
```
#include <stdio.h>

void say_hello() { puts("Hello, world!\n"); }
```

----------------------------------------

TITLE: Defining Package X
DESCRIPTION: A minimal Go package declaration that creates an empty package named 'x'. This serves as the main package for testing import behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/std_vendor.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package x
```

----------------------------------------

TITLE: VarKind Type Definition and Constants
DESCRIPTION: Defines the VarKind type and its constant values representing different kinds of variables in Go: package variables, local variables, receiver variables, parameter variables, result variables, and field variables
SOURCE: https://github.com/golang/go/blob/master/api/next/70250.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
type VarKind uint8

const (
    PackageVar VarKind = 1
    LocalVar   VarKind = 2
    RecvVar    VarKind = 3
    ParamVar   VarKind = 4
    ResultVar  VarKind = 5
    FieldVar   VarKind = 6
)
```

----------------------------------------

TITLE: Cross-Platform SVN Checkout Command
DESCRIPTION: Platform-specific commands for checking out an SVN repository, handling differences in file path formats between Windows and other operating systems.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test1-svn-git.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
[GOOS:windows] svn checkout file:///$ROOT .
[!GOOS:windows] svn checkout file://$ROOT .
```

----------------------------------------

TITLE: Test Source Code for Package 'a' (Go)
DESCRIPTION: The test file (`a_test.go`) for package `a`. It imports package `b/x` for side effects, establishing the initial test-only dependency path from `m` to `b` via `a`'s tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
-- a1/a_test.go --
package a_test

import _ "b/x"
```

----------------------------------------

TITLE: Non-existent Import Module (Go)
DESCRIPTION: Test file demonstrating import of non-existent package with ignore build tag to prevent errors during 'go mod tidy'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_lookup.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
// ignore tags prevents errors in 'go mod tidy'
// +build ignore

package use

import _ "example.com/join/subpkg/noexist"
```

----------------------------------------

TITLE: Testing Go Build Command with Non-existent Packages
DESCRIPTION: This snippet tests the 'go build' command with non-existent packages and verifies that appropriate error messages are displayed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_domain.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
! go build ./useappengine
stderr '^useappengine[/\\]x.go:2:8: cannot find package$'
! go build ./usenonexistent
stderr '^usenonexistent[/\\]x.go:2:8: no required module provides package nonexistent.rsc.io; to add it:\n\tgo get nonexistent.rsc.io$'
```

----------------------------------------

TITLE: Package A Implementation
DESCRIPTION: The implementation of package 'a' that imports package 'c', creating a dependency link in the test case's graph.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package a

import _ "c"
```

----------------------------------------

TITLE: Defining a Simple Main Package (Go)
DESCRIPTION: Defines a minimal Go program belonging to the 'main' package. It contains only an empty 'main' function. This file serves as the base package being tested and resides at '$GOPATH/src/pkg/pkg.go'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_split_main.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
// $GOPATH/src/pkg/pkg.go --
package main

func main() {}
```

----------------------------------------

TITLE: Initializing Go Module with Validation
DESCRIPTION: Tests the 'go mod init' command, verifying it fails without a module path and succeeds with a valid path. It also checks that re-initialization is rejected when a go.mod file already exists.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# go mod init
! go mod init
stderr 'cannot determine module path'
! exists go.mod

go mod init x.x/y/z
stderr 'creating new go.mod: module x.x/y/z'
cmpenv go.mod $WORK/go.mod.init

! go mod init
cmpenv go.mod $WORK/go.mod.init
```

----------------------------------------

TITLE: Running Go Tests with Empty TERM Environment Variable
DESCRIPTION: A shell script that sets the TERM environment variable to an empty string before running a Go test. It verifies the test output doesn't contain '[no tests to run]' but does contain 'ok'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_env_term.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env TERM=''
go test test_test.go
! stdout '^ok.*\[no tests to run\]'
stdout '^ok'
```

----------------------------------------

TITLE: Defining IP Protocol Constants for darwin-arm64-cgo in Go
DESCRIPTION: This code snippet defines a comprehensive set of Internet Protocol (IP) protocol constants for the syscall package on darwin-arm64-cgo platform. These constants represent protocol numbers used in socket programming and network communications, with each constant having both a numeric value and an ideal-int type declaration.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_153

LANGUAGE: Go
CODE:
```
// IP protocol constants for darwin-arm64-cgo platform
const IPPROTO_AHIP = 61
const IPPROTO_APES = 99
const IPPROTO_ARGUS = 13
const IPPROTO_AX25 = 93
const IPPROTO_BHA = 49
const IPPROTO_BLT = 30
const IPPROTO_BRSATMON = 76
const IPPROTO_CFTP = 62
const IPPROTO_CHAOS = 16
const IPPROTO_CMTP = 38
const IPPROTO_CPHB = 73
const IPPROTO_CPNX = 72
const IPPROTO_DDP = 37
const IPPROTO_DGP = 86
const IPPROTO_DIVERT = 254
const IPPROTO_DONE = 257
const IPPROTO_DSTOPTS = 60
const IPPROTO_EGP = 8
const IPPROTO_EMCON = 14
const IPPROTO_ENCAP = 98
const IPPROTO_EON = 80
const IPPROTO_ESP = 50
const IPPROTO_ETHERIP = 97
const IPPROTO_FRAGMENT = 44
const IPPROTO_GGP = 3
const IPPROTO_GMTP = 100
const IPPROTO_GRE = 47
const IPPROTO_HELLO = 63
const IPPROTO_HMP = 20
const IPPROTO_HOPOPTS = 0
const IPPROTO_ICMP = 1
const IPPROTO_ICMPV6 = 58
const IPPROTO_IDP = 22
const IPPROTO_IDPR = 35
const IPPROTO_IDRP = 45
const IPPROTO_IGMP = 2
const IPPROTO_IGP = 85
const IPPROTO_IGRP = 88
const IPPROTO_IL = 40
const IPPROTO_INLSP = 52
const IPPROTO_INP = 32
const IPPROTO_IPCOMP = 108
const IPPROTO_IPCV = 71
const IPPROTO_IPEIP = 94
const IPPROTO_IPIP = 4
const IPPROTO_IPPC = 67
const IPPROTO_IPV4 = 4
const IPPROTO_IRTP = 28
const IPPROTO_KRYPTOLAN = 65
const IPPROTO_LARP = 91
const IPPROTO_LEAF1 = 25
const IPPROTO_LEAF2 = 26
const IPPROTO_MAX = 256
const IPPROTO_MAXID = 52
const IPPROTO_MEAS = 19
const IPPROTO_MHRP = 48
const IPPROTO_MICP = 95
const IPPROTO_MTP = 92
const IPPROTO_MUX = 18
const IPPROTO_ND = 77
const IPPROTO_NHRP = 54
const IPPROTO_NONE = 59
const IPPROTO_NSP = 31
const IPPROTO_NVPII = 11
const IPPROTO_OSPFIGP = 89
const IPPROTO_PGM = 113
const IPPROTO_PIGP = 9
const IPPROTO_PIM = 103
const IPPROTO_PRM = 21
const IPPROTO_PUP = 12
const IPPROTO_PVP = 75
const IPPROTO_RAW = 255
const IPPROTO_RCCMON = 10
const IPPROTO_RDP = 27
const IPPROTO_ROUTING = 43
const IPPROTO_RSVP = 46
const IPPROTO_RVD = 66
const IPPROTO_SATEXPAK = 64
const IPPROTO_SATMON = 69
const IPPROTO_SCCSP = 96
const IPPROTO_SCTP = 132
const IPPROTO_SDRP = 42
const IPPROTO_SEP = 33
const IPPROTO_SRPC = 90
const IPPROTO_ST = 7
```

----------------------------------------

TITLE: Defining Networking Syscall Constants for Darwin ARM64
DESCRIPTION: Constant definitions for network-related system calls on Darwin ARM64 architecture. These include operations for sending and receiving data over sockets, with their corresponding numeric identifiers including their non-cancelable variants.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_106

LANGUAGE: Go
CODE:
```
const SYS_SENDFILE = 337
const SYS_SENDMSG = 28
const SYS_SENDMSG_NOCANCEL = 402
const SYS_SENDTO = 133
const SYS_SENDTO_NOCANCEL = 413
const SYS_RECVFROM = 29
const SYS_RECVFROM_NOCANCEL = 403
const SYS_RECVMSG = 27
const SYS_RECVMSG_NOCANCEL = 401
const SYS_SETSOCKOPT = 105
```

----------------------------------------

TITLE: Testing Invalid Flag Combination (Template then JSON)
DESCRIPTION: Verifies that using both -f and -json flags together (in that order) produces an error
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_json_with_f.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
! go list -f '{{.}}' -json ./...
```

----------------------------------------

TITLE: Map, doc and importer package declarations in Go
DESCRIPTION: Declarations for Map.Delete method in expvar, PreserveAST constant in go/doc, and ForCompiler function in go/importer.
SOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
method (*Map) Delete(string)
const PreserveAST = 4
const PreserveAST Mode
func ForCompiler(*token.FileSet, string, Lookup) types.Importer
```

----------------------------------------

TITLE: Enabling Go Modules via Environment Variable
DESCRIPTION: Sets the GO111MODULE environment variable to 'on'. This explicitly enables Go module support for the subsequent commands in the script, ensuring that the go command operates in module-aware mode.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Building Tests with FIPS 140 in Go
DESCRIPTION: Checks that building tests with FIPS 140 enabled uses the correct packages and caches the build appropriately.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fipssnap.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
go test -x -c
stderr link.*-fipso
go test -x -c
! stderr link
```

----------------------------------------

TITLE: Running Go Test with Non-Matching Pattern
DESCRIPTION: Command to run Go tests with a pattern that won't match any subtests, demonstrating the 'no tests to run' output behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_subtests.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go test -run Test/ThisWillNotMatch standalone_sub_test.go\nstdout '^ok.*\[no tests to run\]'
```

----------------------------------------

TITLE: Handling Failed Module Operations in Vendor Mode
DESCRIPTION: This snippet shows examples of operations that fail when using vendor mode, such as querying the latest version of a module or updating dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getmode_vendor.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
! go list -mod=vendor -m rsc.io/quote@latest
stderr 'go: rsc.io/quote@latest: cannot query module due to -mod=vendor'
! go get -mod=vendor -u
stderr 'flag provided but not defined: -mod'
```

----------------------------------------

TITLE: Go Source File with External Module Import
DESCRIPTION: A Go package file that imports the 'golang.org/x/mod/modfile' package as a blank import. This file demonstrates importing an external module dependency, which would be tracked in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_ignore.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p
import _ "golang.org/x/mod/modfile"
```

----------------------------------------

TITLE: Defining vendor package 'x'
DESCRIPTION: Defines an empty package 'x' in the vendor directory, which is not expected to be found during the build process due to the specific GOPATH setup in this test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_issue12156.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package x
```

----------------------------------------

TITLE: Module A v0.2.0 Definition
DESCRIPTION: Module definition and implementation for example.net/a v0.2.0
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_wild.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.net/a

go 1.16
```

LANGUAGE: go
CODE:
```
package a
```

----------------------------------------

TITLE: Providing Module Version Metadata in JSON for Go
DESCRIPTION: This JSON snippet contains metadata indicating the version 'v1.1.0' of a module or package, likely to accompany the .mod file for module resolution or testing purposes. It may be used by Go tooling or test harnesses to simulate responses from a module proxy. There are no external dependencies, parameters, or outputs beyond the single version string. The file must be named '.info' to be recognized in this role, and this approach is primarily for internal or testing scenarios.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split_v1.1.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{\"Version\": \"v1.1.0\"}
```

----------------------------------------

TITLE: Deprecations in crypto packages
DESCRIPTION: Lists deprecated methods, constants, and struct fields in various crypto packages.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_19

LANGUAGE: Go
CODE:
```
pkg crypto/rc4, method (*Cipher) Reset //deprecated
pkg crypto/tls, const VersionSSL30 //deprecated
pkg crypto/tls, method (*Config) BuildNameToCertificate //deprecated
pkg crypto/tls, type Config struct, NameToCertificate //deprecated
pkg crypto/tls, type Config struct, SessionTicketKey //deprecated
pkg crypto/tls, type ConnectionState struct, NegotiatedProtocolIsMutual //deprecated
pkg crypto/tls, type ConnectionState struct, TLSUnique //deprecated
pkg crypto/x509, func DecryptPEMBlock //deprecated
pkg crypto/x509, func EncryptPEMBlock //deprecated
pkg crypto/x509, func IsEncryptedPEMBlock //deprecated
pkg crypto/x509, type CertificateRequest struct, Attributes //deprecated
```

----------------------------------------

TITLE: Go Package Attempting Invalid Internal Import
DESCRIPTION: Defines a Go package `baddep` that attempts to import `golang.org/notx/useinternal`. This package is used in tests designed to fail, simulating an attempt to incorrectly access another module's internal implementation details or a non-existent package resulting from test setup.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_16

LANGUAGE: go
CODE:
```
-- baddep/useinternal.go --
package baddep
import _ "golang.org/notx/useinternal"
```

----------------------------------------

TITLE: Sample Go Module Definition
DESCRIPTION: Basic module definition file named x.mod declaring a module named 'm'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_nomod.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Testing GOMODCACHE Behavior with Unset GOPATH in Go
DESCRIPTION: This snippet tests GOMODCACHE behavior when neither GOMODCACHE nor GOPATH are set, expecting it to default to $HOME/go/pkg/mod.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache.txt#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
[GOOS:windows] env USERPROFILE=$WORK/home
[GOOS:plan9] env home=$WORK/home
[!GOOS:windows] [!GOOS:plan9] env HOME=$WORK/home
env GOMODCACHE=
env GOPATH=
go env GOMODCACHE
stdout $HOME[/\\]go[/\\]pkg[/\\]mod
```

----------------------------------------

TITLE: Toolexec Program Implementation
DESCRIPTION: Main implementation of the toolexec program that executes build tools and reports package information. It handles tool execution and environment variable reporting.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/toolexec.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
)

func main() {
	tool, args := os.Args[1], os.Args[2:]
	toolName := filepath.Base(tool)
	if len(args) > 0 && args[0] == "-V=full" {
		// We can't alter the version output.
	} else {
		// Print which tool we're running, and on what package.
		fmt.Fprintf(os.Stdout, "%s TOOLEXEC_IMPORTPATH=%q\n", toolName, os.Getenv("TOOLEXEC_IMPORTPATH"))
	}

	// Simply run the tool.
	cmd := exec.Command(tool, args...)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Run(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: Go Generate Package Environment Variable Test
DESCRIPTION: Test file for verifying the correct $GOPACKAGE environment variable value in test packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package main_test

//go:generate echo $GOPACKAGE
```

----------------------------------------

TITLE: Defining Module 'c' Version 2 in Go
DESCRIPTION: This go.mod file defines module 'c' version 2 and its dependency on module 'd'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_11

LANGUAGE: Go
CODE:
```
module example.net/c

go 1.16

require example.net/d v0.2.0
```

----------------------------------------

TITLE: Declaring Module Dependency with Prerelease Version - Go Module - go.mod
DESCRIPTION: Declares a Go module named 'example.com/usemissingpre' and specifies a dependency on 'example.com/missingpkg' at version 'v1.0.1-beta', which is a prerelease newer than the current latest version. This file is intended to be placed as 'go.mod' at the root of the module, and is required for Go module-aware builds. Key parameters include module path and required dependencies with their versions. It must follow the standard Go module file format.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_usemissingpre_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go.mod
CODE:
```
module example.com/usemissingpre

require example.com/missingpkg v1.0.1-beta
```

----------------------------------------

TITLE: Cache Test Implementation in Overlay
DESCRIPTION: Go file used to test build caching with overlays. Contains a function that prints "something" and will be modified to test if changing a file in the overlay properly invalidates the cache.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_18

LANGUAGE: go
CODE:
```
package foo

import "fmt"

func bar() {
	fmt.Println("something")
}
```

----------------------------------------

TITLE: Defining Go module for testing environment
DESCRIPTION: Creates a minimal go.mod file to set up the testing environment with a scratch module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_versioned.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module scratch
```

----------------------------------------

TITLE: Package definition for p1
DESCRIPTION: Definition of the p1 package in Go, containing a minimal package declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
package p1
```

----------------------------------------

TITLE: Importing dependency in main module
DESCRIPTION: Demonstrates usage of the example.com/m dependency in the main module through a blank import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_redundant_requirement.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package use

import _ "example.com/m"
```

----------------------------------------

TITLE: Go Package Declaration
DESCRIPTION: Go source file declaring package dotgo.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_dotgo.go_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package dotgo
```

----------------------------------------

TITLE: Main Package Source
DESCRIPTION: Empty package declaration for the main package p1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_import_error_stack.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p1
```

----------------------------------------

TITLE: Defining CGO Test Module in Go
DESCRIPTION: Defines the Go module for the CGO test project, specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cgo_consistent_results.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
module cgotest

go 1.16
```

----------------------------------------

TITLE: Importing Dependencies in Module C v0.2.0 in Go
DESCRIPTION: This Go file for module C v0.2.0 imports example.net/c as a blank import, which seems to be a circular import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_13

LANGUAGE: Go
CODE:
```
package c

import _ "example.net/c"
```

----------------------------------------

TITLE: Declaring Module Version Metadata with info File - JSON
DESCRIPTION: Provides metadata about the Go module, including the version identifier (v1.0.0-blockwithcomment). This info JSON is typically used by Go toolchains and proxy servers to track the published version of a module. The key 'Version' holds the semantic version and any associated identifiers. There are no required parameters beyond 'Version', and the file is expected to comply with JSON encoding standards.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-blockwithcomment.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{\"Version\":\"v1.0.0-blockwithcomment\"}
```

----------------------------------------

TITLE: Berkeley Packet Filter Functions for NetBSD ARM64
DESCRIPTION: Function signatures for Berkeley Packet Filter (BPF) operations in NetBSD on ARM64. These functions provide interfaces for network packet capture and filtering functionality.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_158

LANGUAGE: Go
CODE:
```
func BpfBuflen(int) (int, error)
func BpfDatalink(int) (int, error)
func BpfHeadercmpl(int) (int, error)
func BpfInterface(int, string) (string, error)
func BpfJump(int, int, int, int) *BpfInsn
func BpfStats(int) (*BpfStat, error)
func BpfStmt(int, int) *BpfInsn
func BpfTimeout(int) (*Timeval, error)
func CheckBpfVersion(int) error
func FlushBpf(int) error
```

----------------------------------------

TITLE: Defining Message Flags Constants in Go for Darwin ARM64
DESCRIPTION: This snippet defines constants for message flags used in network programming on Darwin ARM64. These flags are used with send and receive operations to control message behavior.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_161

LANGUAGE: Go
CODE:
```
const MSG_EOR = 8
const MSG_FLUSH = 1024
const MSG_HAVEMORE = 8192
const MSG_HOLD = 2048
const MSG_NEEDSA = 65536
const MSG_OOB = 1
const MSG_PEEK = 2
const MSG_RCVMORE = 16384
const MSG_SEND = 4096
const MSG_TRUNC = 16
const MSG_WAITALL = 64
const MSG_WAITSTREAM = 512
```

----------------------------------------

TITLE: External Test for Cgo Package
DESCRIPTION: An external test that imports the cgocover2 package and tests the F() function. This is used to verify that code coverage works correctly with cgo code.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_xtest.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p_test

import (
	. "cgocover2"
	"testing"
)

func TestF(t *testing.T) {
	F()
}
```

----------------------------------------

TITLE: Declaring a Minimal Go Package - Go
DESCRIPTION: This Go source file declares a package named 'retract'. It contains no functions, types, or other code elements, serving primarily as a placeholder or minimal package declaration for the module. There are no dependencies, parameters, or executable code. The file is necessary for the Go module system to recognize and build the module, but provides no exported functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_v1.1.0.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package retract
```

----------------------------------------

TITLE: Defining conflicting module path in go.mod
DESCRIPTION: A go.mod file that deliberately sets up a module path conflict by using 'example.com/hello/v2' when the directory path is 'example.com/hello'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_path.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/hello/v2
```

----------------------------------------

TITLE: Defining Go Module in .mod File
DESCRIPTION: Module declaration for gopkg.in/dummy.v2-unstable which defines the module's import path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/gopkg.in_dummy.v2-unstable_v2.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module gopkg.in/dummy.v2-unstable
```

----------------------------------------

TITLE: Go Module Definition File
DESCRIPTION: Defines a Go module with path vcs-test.golang.org/git/empty-v2-without-v1.git/v2 and specifies Go version 1.14 compatibility.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/empty-v2-without-v1.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/git/empty-v2-without-v1.git/v2

go 1.14
```

----------------------------------------

TITLE: Go Module Test Environment Setup
DESCRIPTION: Shell commands to set up test environment with multiple GOPATH entries and test package installation behavior
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_shadow_gopath.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off
env GOPATH=$WORK/gopath1${:}$WORK/gopath2

mkdir $WORK/gopath1/src/test
mkdir $WORK/gopath2/src/test
cp main.go $WORK/gopath2/src/test/main.go
cd $WORK/gopath2/src/test

! go install
stderr 'no install location for.*gopath2.src.test: hidden by .*gopath1.src.test'
```

----------------------------------------

TITLE: Module B2 Definition
DESCRIPTION: Module definition for example.com/b v0.2.0 which requires example.com/c v0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
module example.com/b

go 1.17

require example.com/c v0.1.0
```

----------------------------------------

TITLE: Issue Package Definition
DESCRIPTION: Main package file that imports the external dependency to demonstrate the version resolution behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_lazy_self.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package issue46078

import _ "example.net/x"
```

----------------------------------------

TITLE: External Test File for Cgo Coverage
DESCRIPTION: An external test file (in the p_test package) that imports and calls the package function to ensure coverage is measured correctly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_extra_test.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package p_test

import (
	. "cgocover3"
	"testing"
)

func TestF(t *testing.T) {
	F()
}
```

----------------------------------------

TITLE: Go Module Q v1.0.0 Implementation
DESCRIPTION: Module Q version 1.0.0 implementation with PrintVersion function that outputs version 1.0.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.com/q

go 1.18
```

LANGUAGE: go
CODE:
```
package q

import "fmt"

func PrintVersion() {
	fmt.Println("version 1.0.0")
}
```

----------------------------------------

TITLE: Blank Import for Dependency Inclusion in Mirror Module - Go
DESCRIPTION: This Go source file in 'mirror' imports 'golang.org/issue/pkg' using the blank identifier, ensuring that the package is included without referencing symbols directly. This supports the test's objective of forming dependency chains and exposing module graph issues. It requires 'golang.org/issue/pkg' to exist and be accessible via the configured module path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package mirror

import _ "golang.org/issue/pkg"
```

----------------------------------------

TITLE: Simple Go Main Function
DESCRIPTION: A minimal Go program with an empty main function, used as a test subject for the build and install commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_cleans_build.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main
func main() {}
```

----------------------------------------

TITLE: Disabling Go Modules via Environment Variable (Shell)
DESCRIPTION: Sets the GO111MODULE environment variable to 'off'. This forces the Go tools to operate in the older GOPATH mode, which is necessary for this specific test scenario involving package layout within $GOPATH.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_split_main.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off
```

----------------------------------------

TITLE: Function Implementation for Internal Package 'q' in Go
DESCRIPTION: Internal package 'q' with a function Q that returns 42.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_16

LANGUAGE: go
CODE:
```
package q

func Q() int {
	return 42
}
```

----------------------------------------

TITLE: Leaf Test Dependency Package - testdep2/testdep2.go
DESCRIPTION: Defines a leaf test-only dependency package without further imports.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
package testdep2
```

----------------------------------------

TITLE: Aligning Go 1.16 and 1.17 Module Versions
DESCRIPTION: Shows the process of aligning module versions between Go 1.16 and 1.17 using the suggested 'go mod tidy' commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_incompatible.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
cp go.mod.orig go.mod

go mod tidy -go=1.16
go list -f $MODFMT -deps ./...
stdout '^example.com/retract/incompatible v2\.0\.0\+incompatible$'
! stdout 'v1\.0\.0'

go mod tidy -go=1.17
go list -f $MODFMT -deps ./...
stdout '^example.com/retract/incompatible v2\.0\.0\+incompatible$'
! stdout 'v1\.0\.0'

go mod edit -go=1.16
go list -f $MODFMT -deps ./...
stdout '^example.com/retract/incompatible v2\.0\.0\+incompatible$'
! stdout 'v1\.0\.0'
```

----------------------------------------

TITLE: Upgrade Module Version 2
DESCRIPTION: Defines the go.mod and upgrade.go files for the second version of the example.com/upgrade module, which includes a new dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
module example.com/upgrade

go 1.16

require rsc.io/quote v1.5.2 // indirect
```

LANGUAGE: go
CODE:
```
package upgrade
```

----------------------------------------

TITLE: Testing Go Test Behavior with Vet Flags
DESCRIPTION: Demonstrates the behavior of 'go test' with various vet configurations for both user and standard packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_flags.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go test -n -run=none .
stderr '[/\\]vet'$GOEXE'["]? .* -errorsas .* ["]?\$WORK[/\\][^ ]*/[/\\]vet\.cfg'

go test -n -vet= -run=none .
stderr '[/\\]vet'$GOEXE'["]? .* -errorsas .* ["]?\$WORK[/\\][^ ]*/[/\\]vet\.cfg'

go test -n -run=none encoding/binary
stderr '[/\\]vet'$GOEXE'["]? -unsafeptr=false -unreachable=false ["]?\$WORK[/\\][^ ]*/[/\\]vet\.cfg'

go test -n -vet= -run=none encoding/binary
stderr '[/\\]vet'$GOEXE'["]? -unsafeptr=false -unreachable=false ["]?\$WORK[/\\][^ ]*/[/\\]vet\.cfg'

go test -n -vet=unreachable -run=none .
stderr '[/\\]vet'$GOEXE'["]? -unreachable ["]?\$WORK[/\\][^ ]*/[/\\]vet\.cfg'
go test -n -vet=unreachable -run=none encoding/binary
stderr '[/\\]vet'$GOEXE'["]? -unreachable ["]?\$WORK[/\\][^ ]*/[/\\]vet\.cfg'
```

----------------------------------------

TITLE: Creating Empty Go Package
DESCRIPTION: Defines an empty package named 'indirect' in a Go file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_indirect_v1.0.1.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package indirect
```

----------------------------------------

TITLE: GOVCS Configuration Test Script
DESCRIPTION: Shell script testing various GOVCS configurations including public/private repository access, pattern matching, and VCS restrictions. Tests cover git, svn, hg, fossil, and bzr version control systems.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/govcs.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
env proxy=$GOPROXY
env GOPROXY=direct

# GOVCS stops go get
env GOVCS='*:none'
! go get github.com/google/go-cmp
stderr '^go: GOVCS disallows using git for public github.com/google/go-cmp; see ''go help vcs''$'
env GOPRIVATE='github.com/google'
! go get github.com/google/go-cmp
stderr '^go: GOVCS disallows using git for private github.com/google/go-cmp; see ''go help vcs''$'

# public pattern works
env GOPRIVATE='github.com/google'
env GOVCS='public:all,private:none'
! go get github.com/google/go-cmp
stderr '^go: GOVCS disallows using git for private github.com/google/go-cmp; see ''go help vcs''$'

# private pattern works
env GOPRIVATE='hubgit.com/google'
env GOVCS='private:all,public:none'
! go get github.com/google/go-cmp
stderr '^go: GOVCS disallows using git for public github.com/google/go-cmp; see ''go help vcs''$'

# other patterns work (for more patterns, see TestGOVCS)
env GOPRIVATE=
env GOVCS='github.com:svn|hg'
! go get github.com/google/go-cmp
stderr '^go: GOVCS disallows using git for public github.com/google/go-cmp; see ''go help vcs''$'
env GOVCS='github.com/google/go-cmp/inner:git,github.com:svn|hg'
! go get github.com/google/go-cmp
stderr '^go: GOVCS disallows using git for public github.com/google/go-cmp; see ''go help vcs''$'

# bad patterns are reported (for more bad patterns, see TestGOVCSErrors)
env GOVCS='git'
! go get github.com/google/go-cmp
stderr '^go: github.com/google/go-cmp: malformed entry in GOVCS \(missing colon\): "git"$'

env GOVCS=github.com:hg,github.com:git
! go get github.com/google/go-cmp
stderr '^go: github.com/google/go-cmp: unreachable pattern in GOVCS: "github.com:git" after "github.com:hg"$'

# bad GOVCS patterns do not stop commands that do not need to check VCS
go list
env GOPROXY=$proxy
go get rsc.io/quote # ok because used proxy
env GOPROXY=direct

# svn is disallowed by default
env GOPRIVATE=
env GOVCS=
! go get rsc.io/nonexist.svn/hello
stderr '^go: rsc.io/nonexist.svn/hello: GOVCS disallows using svn for public rsc.io/nonexist.svn; see ''go help vcs''$'

# fossil is disallowed by default
env GOPRIVATE=
env GOVCS=
! go get rsc.io/nonexist.fossil/hello
stderr '^go: rsc.io/nonexist.fossil/hello: GOVCS disallows using fossil for public rsc.io/nonexist.fossil; see ''go help vcs''$'

# bzr is disallowed by default
env GOPRIVATE=
env GOVCS=
! go get rsc.io/nonexist.bzr/hello
stderr '^go: rsc.io/nonexist.bzr/hello: GOVCS disallows using bzr for public rsc.io/nonexist.bzr; see ''go help vcs''$'

# git is OK by default
env GOVCS=
env GONOSUMDB='*'
[net:rsc.io] [git] [!short] go get rsc.io/sampler

# hg is OK by default
env GOVCS=
env GONOSUMDB='*'
[exec:hg] [!short] go get vcs-test.golang.org/go/custom-hg-hello

# git can be disallowed
env GOVCS=public:hg
! go get rsc.io/nonexist.git/hello
stderr '^go: rsc.io/nonexist.git/hello: GOVCS disallows using git for public rsc.io/nonexist.git; see ''go help vcs''$'

# hg can be disallowed
env GOVCS=public:git
! go get rsc.io/nonexist.hg/hello
stderr '^go: rsc.io/nonexist.hg/hello: GOVCS disallows using hg for public rsc.io/nonexist.hg; see ''go help vcs''$'
```

----------------------------------------

TITLE: Empty Go Package
DESCRIPTION: Empty Go package file 'm.go' in module 'x'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_issue55952.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package m
```

----------------------------------------

TITLE: Setting GO111MODULE Environment Variable in Shell
DESCRIPTION: Sets the GO111MODULE environment variable to 'on' to enable Go modules for the subsequent commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Invalid Go Module with Custom Directives
DESCRIPTION: Shows an invalid go.mod setup with unknown directives, helpful for testing directives handling and error generation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badmod.txt#2025-04-22_snippet_4

LANGUAGE: text
CODE:
```
-- go.mod.bad --
module m
hello world
```

----------------------------------------

TITLE: Testing Go Package with No Go Files
DESCRIPTION: This snippet tests the behavior when running Go tests on a package with no Go files. It checks for the correct error message and test execution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_setup_error.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
! go test -o=$devnull . ./t
stderr '# \.\n.*no Go files in '$PWD'$'
stdout 'FAIL	. \[setup failed\]'
stdout 'ok  	m/t'
```

----------------------------------------

TITLE: Main Package Import
DESCRIPTION: Main package file importing the dependency package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_nospace.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package m
import _ "example.net/x"
```

----------------------------------------

TITLE: Handling Non-existent SVN Module Download in Go
DESCRIPTION: Tests the behavior of 'go mod download' when attempting to download a non-existent module from an SVN repository. Ensures it fails with an appropriate error message without panicking.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_svn.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
! go mod download vcs-test.golang.org/svn/nonexistent.svn@latest
! stderr panic
stderr 'go: module vcs-test.golang.org/svn/nonexistent.svn: no matching versions for query "latest"$'
```

----------------------------------------

TITLE: Level1a Package Implementation
DESCRIPTION: Level1a package implementation with conflicting imports of level2x and level2y packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_59905.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package level1a

import (
	"test/main/level1a/level2x"
	"test/main/level1a/level2y"
)

func Print() { println(level2x.Value, level2y.Value) }
```

----------------------------------------

TITLE: Network Interface Type Constants - Darwin ARM64
DESCRIPTION: Constants defining different types of network interfaces for Darwin ARM64 systems. Includes values for common interfaces like Ethernet, Bridge, WiFi, and various other network types.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_150

LANGUAGE: Go
CODE:
```
const IFT_BRIDGE = 209
const IFT_CARP = 248
const IFT_CELLULAR = 255
const IFT_CEPT = 19
const IFT_DS3 = 30
const IFT_ENC = 244
const IFT_EON = 25
const IFT_ETHER = 6
const IFT_FAITH = 56
const IFT_FDDI = 15
```

----------------------------------------

TITLE: Defining Directory Replacement in go.mod - Go
DESCRIPTION: This go.mod file configures the module m to replace example.com/deprecated/a with a local directory './a'. It is intended to check if the Go toolchain omits deprecation lookups for direct filesystem replacements. Requires Go 1.17 and the local ./a directory to exist as a valid Go module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_deprecated_replace.txt#2025-04-22_snippet_3

LANGUAGE: go.mod
CODE:
```
module m

go 1.17

require example.com/deprecated/a v1.0.0

replace example.com/deprecated/a => ./a
```

----------------------------------------

TITLE: Multiline String Definition
DESCRIPTION: Defines a multiline string to be used for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_14

LANGUAGE: go
CODE:
```
[short description
more

detail
suffix]
```

----------------------------------------

TITLE: Package with Test Suffix in Module Name
DESCRIPTION: A Go package declaration for a package named 'e_test', which is a regular package despite having a test suffix.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_14

LANGUAGE: go
CODE:
```
// Package e_test is the non-test package for its import path,
// in a deceptively-named directory!
package e_test
```

----------------------------------------

TITLE: Direct Dependency Implementation
DESCRIPTION: Go file implementing the direct dependency module
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_upgrade_lazy.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package direct

import _ "example.com/lazyupgrade"
```

----------------------------------------

TITLE: Initializing Git Repository
DESCRIPTION: Initializes a new Git repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v3pkg.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
git init
```

----------------------------------------

TITLE: Declaring Constants and Functions in Go
DESCRIPTION: The snippet provides details about function signatures and constant declarations across different Go packages, mainly focusing on system calls for FreeBSD and OpenBSD. Dependencies include the respective Go packages such as 'testing', 'text/scanner', 'text/template/parse', and 'syscall'. The constants are mainly integral values representing system-level syscalls, while function signatures describe method contracts for packages like 'testing'. Inputs and outputs vary by package and context.
SOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_10

LANGUAGE: Go
CODE:
```
pkg testing, func MainStart(func(string, string) (bool, error), []InternalTest, []InternalBenchmark, []InternalExample) *M
```

LANGUAGE: Go
CODE:
```
pkg testing, func MainStart(testDeps, []InternalTest, []InternalBenchmark, []InternalExample) *M
```

LANGUAGE: Go
CODE:
```
pkg testing, func RegisterCover(Cover)
```

LANGUAGE: Go
CODE:
```
pkg text/scanner, const GoTokens = 1012
```

LANGUAGE: Go
CODE:
```
pkg text/template/parse, type DotNode bool
```

LANGUAGE: Go
CODE:
```
pkg text/template/parse, type Node interface { Copy, String, Type }
```

LANGUAGE: Go
CODE:
```
pkg unicode, const Version = \"10.0.0\"
```

LANGUAGE: Go
CODE:
```
pkg unicode, const Version = \"11.0.0\"
```

LANGUAGE: Go
CODE:
```
pkg unicode, const Version = \"12.0.0\"
```

LANGUAGE: Go
CODE:
```
pkg unicode, const Version = \"13.0.0\"
```

LANGUAGE: Go
CODE:
```
pkg unicode, const Version = \"6.2.0\"
```

LANGUAGE: Go
CODE:
```
pkg unicode, const Version = \"6.3.0\"
```

LANGUAGE: Go
CODE:
```
pkg unicode, const Version = \"7.0.0\"
```

LANGUAGE: Go
CODE:
```
pkg unicode, const Version = \"8.0.0\"
```

LANGUAGE: Go
CODE:
```
pkg unicode, const Version = \"9.0.0\"
```

LANGUAGE: Go
CODE:
```
pkg html/template, method (*Template) Funcs(FuncMap) *Template
```

LANGUAGE: Go
CODE:
```
pkg html/template, type FuncMap map[string]interface{}
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386), const SYS_FSTAT = 189
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386), const SYS_FSTATAT = 493
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386), const SYS_FSTATFS = 397
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386), const SYS_GETDIRENTRIES = 196
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386), const SYS_GETFSSTAT = 395
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386), const SYS_LSTAT = 190
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386), const SYS_LSTAT ideal-int
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386), const SYS_MKNODAT = 498
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386), const SYS_STAT = 188
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386), const SYS_STAT ideal-int
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386), const SYS_STATFS = 396
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386-cgo), const SYS_FSTAT = 189
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386-cgo), const SYS_FSTATAT = 493
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386-cgo), const SYS_FSTATFS = 397
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386-cgo), const SYS_GETDIRENTRIES = 196
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386-cgo), const SYS_GETFSSTAT = 395
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386-cgo), const SYS_LSTAT = 190
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386-cgo), const SYS_LSTAT ideal-int
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386-cgo), const SYS_MKNODAT = 498
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386-cgo), const SYS_STAT = 188
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386-cgo), const SYS_STAT ideal-int
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386-cgo), const SYS_STATFS = 396
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64), const SYS_FSTAT = 189
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64), const SYS_FSTATAT = 493
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64), const SYS_FSTATFS = 397
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64), const SYS_GETDIRENTRIES = 196
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64), const SYS_GETFSSTAT = 395
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64), const SYS_LSTAT = 190
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64), const SYS_LSTAT ideal-int
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64), const SYS_MKNODAT = 498
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64), const SYS_STAT = 188
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64), const SYS_STAT ideal-int
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64), const SYS_STATFS = 396
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64-cgo), const SYS_FSTAT = 189
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64-cgo), const SYS_FSTATAT = 493
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64-cgo), const SYS_FSTATFS = 397
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64-cgo), const SYS_GETDIRENTRIES = 196
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64-cgo), const SYS_GETFSSTAT = 395
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64-cgo), const SYS_LSTAT = 190
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64-cgo), const SYS_LSTAT ideal-int
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64-cgo), const SYS_MKNODAT = 498
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64-cgo), const SYS_STAT = 188
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64-cgo), const SYS_STAT ideal-int
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-amd64-cgo), const SYS_STATFS = 396
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm), const SYS_FSTAT = 189
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm), const SYS_FSTATAT = 493
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm), const SYS_FSTATFS = 397
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm), const SYS_GETDIRENTRIES = 196
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm), const SYS_GETFSSTAT = 395
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm), const SYS_LSTAT = 190
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm), const SYS_LSTAT ideal-int
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm), const SYS_MKNODAT = 498
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm), const SYS_STAT = 188
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm), const SYS_STAT ideal-int
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm), const SYS_STATFS = 396
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm-cgo), const SYS_FSTAT = 189
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm-cgo), const SYS_FSTATAT = 493
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm-cgo), const SYS_FSTATFS = 397
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm-cgo), const SYS_GETDIRENTRIES = 196
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm-cgo), const SYS_GETFSSTAT = 395
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm-cgo), const SYS_LSTAT = 190
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm-cgo), const SYS_LSTAT ideal-int
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm-cgo), const SYS_MKNODAT = 498
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm-cgo), const SYS_STAT = 188
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm-cgo), const SYS_STAT ideal-int
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm-cgo), const SYS_STATFS = 396
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64), const SYS_FSTAT = 189
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64), const SYS_FSTATAT = 493
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64), const SYS_FSTATFS = 397
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64), const SYS_GETDIRENTRIES = 196
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64), const SYS_GETFSSTAT = 395
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64), const SYS_LSTAT = 190
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64), const SYS_LSTAT ideal-int
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64), const SYS_MKNODAT = 498
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64), const SYS_STAT = 188
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64), const SYS_STAT ideal-int
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64), const SYS_STATFS = 396
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64-cgo), const SYS_FSTAT = 189
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64-cgo), const SYS_FSTATAT = 493
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64-cgo), const SYS_FSTATFS = 397
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64-cgo), const SYS_GETDIRENTRIES = 196
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64-cgo), const SYS_GETFSSTAT = 395
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64-cgo), const SYS_LSTAT = 190
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64-cgo), const SYS_LSTAT ideal-int
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64-cgo), const SYS_MKNODAT = 498
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64-cgo), const SYS_STAT = 188
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64-cgo), const SYS_STAT ideal-int
```

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-arm64-cgo), const SYS_STATFS = 396
```

LANGUAGE: Go
CODE:
```
pkg syscall (openbsd-386), const ELAST = 91
```

LANGUAGE: Go
CODE:
```
pkg syscall (openbsd-386-cgo), const ELAST = 91
```

LANGUAGE: Go
CODE:
```
pkg syscall (openbsd-amd64), const ELAST = 91
```

LANGUAGE: Go
CODE:
```
pkg syscall (openbsd-amd64-cgo), const ELAST = 91
```

----------------------------------------

TITLE: Specifying Go Version for Dependency Module
DESCRIPTION: Sets the Go version for the dependency module m1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goline_order.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
go 1.21.2
```

----------------------------------------

TITLE: Dependency Module Definition
DESCRIPTION: Go module file for the 'example.com/dep' dependency, specifying Go 1.24 as the required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_perpkgflag.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com/dep

go 1.24
```

----------------------------------------

TITLE: Module Declaration for sub/inner
DESCRIPTION: Declares a Go module named 'new/sub/inner'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_legacy_mod.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module new/sub/inner
```

----------------------------------------

TITLE: Defining Go Module Configuration for Module A
DESCRIPTION: This snippet shows the content of the go.mod file for module 'example.com/a', specifying the module name and Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_module_not_in_go_work.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/a

go 1.18
```

----------------------------------------

TITLE: Module Definition for Broken Package
DESCRIPTION: This defines a Go module named 'broken' which will be used to demonstrate improper use of standard library vendored packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/std_vendor.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module broken
```

----------------------------------------

TITLE: Go Module Definition File
DESCRIPTION: Module definition file specifying dependencies and Go version requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_retractions_issue66403.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/m

go 1.22

require example.com/retract/newergoversion v1.0.0
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module with name vcs-test.golang.org/go/gitreposubdir and Go version requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitreposubdir.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module vcs-test.golang.org/go/gitreposubdir

go 1.23
```

----------------------------------------

TITLE: Defining System Constants for Kernel Events (NOTE_*) in Go for darwin-arm64
DESCRIPTION: Constants for kqueue event notifications in Darwin/macOS systems. These constants define various events that can be monitored through the kqueue interface, including file system events, process events, and VM-related notifications.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_83

LANGUAGE: Go
CODE:
```
const NOTE_PDATAMASK ideal-int
const NOTE_REAP = 268435456
const NOTE_REAP ideal-int
const NOTE_RENAME = 32
const NOTE_RENAME ideal-int
const NOTE_REVOKE = 64
const NOTE_REVOKE ideal-int
const NOTE_SECONDS = 1
const NOTE_SECONDS ideal-int
const NOTE_SIGNAL = 134217728
const NOTE_SIGNAL ideal-int
const NOTE_TRACK = 1
const NOTE_TRACK ideal-int
const NOTE_TRACKERR = 2
const NOTE_TRACKERR ideal-int
const NOTE_TRIGGER = 16777216
const NOTE_TRIGGER ideal-int
const NOTE_USECONDS = 2
const NOTE_USECONDS ideal-int
const NOTE_VM_ERROR = 268435456
const NOTE_VM_ERROR ideal-int
const NOTE_VM_PRESSURE = 2147483648
const NOTE_VM_PRESSURE ideal-int
const NOTE_VM_PRESSURE_SUDDEN_TERMINATE = 536870912
const NOTE_VM_PRESSURE_SUDDEN_TERMINATE ideal-int
const NOTE_VM_PRESSURE_TERMINATE = 1073741824
const NOTE_VM_PRESSURE_TERMINATE ideal-int
const NOTE_WRITE = 2
const NOTE_WRITE ideal-int
```

----------------------------------------

TITLE: Maintaining Module Boundaries within Standard Module using Shell
DESCRIPTION: Lists non-vendored packages inside the standard module, enforcing module integrity by excluding vendor-specific packages, which helps align with usual module boundary rules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_std.txt#2025-04-22_snippet_7

LANGUAGE: shell
CODE:
```
go list ./...
```

----------------------------------------

TITLE: Defining Package in y.go File
DESCRIPTION: Declares a Go package named 'y' within the module. This establishes a package that consumers of the module can import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_sub_v1.0.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package y
```

----------------------------------------

TITLE: Defining Toolchain Version Information - JSON - Go
DESCRIPTION: This JSON snippet encodes the version metadata for the golang.org/toolchain module. It is typically used by Go module tooling and server APIs to identify version releases. The single key, \"Version\", marks the version string, ensuring consumers can parse and utilize this information programmatically.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.7.linux-amd64.txt#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{\"Version\":\"v0.0.1-go1.22.7.linux-amd64\"}
```

----------------------------------------

TITLE: Module Get Commands
DESCRIPTION: Illustrates error cases when attempting to use 'go get' to upgrade the main module to specific versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_main.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go get rsc.io/quote@5d9f230b
go get rsc.io/quote@v1.5.2
go get rsc.io/quote@latest
```

----------------------------------------

TITLE: Basic Package Declaration in dummy.go
DESCRIPTION: Empty Go file that declares the package name as 'dummy', establishing the package identity.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/gopkg.in_dummy.v2-unstable_v2.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package dummy
```

----------------------------------------

TITLE: Incomplete Module Configuration
DESCRIPTION: Module configuration for incomplete package with missing dependency specification
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_indirect.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.net/incomplete

go 1.16

// This module omits a needed requirement on example.net/indirect.
```

----------------------------------------

TITLE: Defining Go Module with Dot-Go Suffix Dependency
DESCRIPTION: This go.mod file defines a module 'm' and specifies a dependency on 'example.com/dotgo.go' version 1.0.0. It sets the Go version to 1.13.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_trailing_slash.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module m

go 1.13

require example.com/dotgo.go v1.0.0
```

----------------------------------------

TITLE: Initializing Fuzzing Test Environment in Go
DESCRIPTION: Sets up the test environment for fuzzing, including log file creation and command-line flag parsing. It defines two fuzz targets (FuzzA and FuzzB) that write input to log files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutator.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package fuzz_test

import (
	"flag"
	"fmt"
	"os"
	"testing"
)

var (
	logPath = flag.String("log", "", "path to log file")
	logFile *os.File
)

func TestMain(m *testing.M) {
	flag.Parse()
	var err error
	logFile, err = os.OpenFile(*logPath, os.O_RDWR|os.O_CREATE|os.O_EXCL, 0666)
	if os.IsExist(err) {
		*logPath += ".worker"
		logFile, err = os.OpenFile(*logPath, os.O_RDWR|os.O_CREATE|os.O_EXCL, 0666)
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	os.Exit(m.Run())
}

func FuzzA(f *testing.F) {
	f.Add([]byte("seed"))
	f.Fuzz(func(t *testing.T, b []byte) {
		fmt.Fprintf(logFile, "FuzzA %q\n", b)
	})
}

func FuzzB(f *testing.F) {
	f.Add([]byte("seed"))
	f.Fuzz(func(t *testing.T, b []byte) {
		fmt.Fprintf(logFile, "FuzzB %q\n", b)
	})
}
```

----------------------------------------

TITLE: Deprecations in archive/tar package
DESCRIPTION: Lists deprecated constant and struct field in the archive/tar package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_16

LANGUAGE: Go
CODE:
```
pkg archive/tar, const TypeRegA //deprecated
pkg archive/tar, type Header struct, Xattrs //deprecated
```

----------------------------------------

TITLE: NetBSD ARM64 Routing Message Structures Definition in Go
DESCRIPTION: Defines structures for routing messages including RtMsghdr, RtMetrics, and RouteMessage. These are used for manipulating the kernel routing tables.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_99

LANGUAGE: go
CODE:
```
type RtMsghdr struct {
	Addrs int32
	Errno int32
}

type RtMetrics struct {
	Locks uint64
	Mtu uint64
	Hopcount uint64
	Recvpipe uint64
	Sendpipe uint64
	Ssthresh uint64
	Rtt uint64
	Rttvar uint64
	Pksent int64
	Expire int64
}

type RouteMessage struct {
	Header RtMsghdr
	Data []uint8
}
```

----------------------------------------

TITLE: Checking Go Package Dependency Resolution with go list and go mod (Shell Script)
DESCRIPTION: This shell script validates that the Go toolchain correctly identifies dependency paths for the 'net' standard package both outside and within the GOROOT. It tests that 'go list -deps net' prefers vendored dependencies by matching output to 'vendor/golang.org/x/net' and rejecting unvendored paths. The script further verifies that 'go mod why -m' shows module-based dependencies, ensuring tools like 'go get' do not use vendored copies. This snippet depends on an environment with Go installed, set GOROOT, and relevant source/context; it reads and writes temporary files and expects specific environment variables (e.g., $WORK).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_std_vendor.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# https://golang.org/issue/44725: packages in std should have the same
dependencies regardless of whether they are listed from within or outside
GOROOT/src.

# Control case: net, viewed from outside the 'std' module,
# should depend on vendor/golang.org/… instead of golang.org/….

go list -deps net
stdout '^vendor/golang.org/x/net'
! stdout '^golang.org/x/net'
cp stdout $WORK/net-deps.txt


# It should still report the same package dependencies when viewed from
# within GOROOT/src.

cd $GOROOT/src

go list -deps net
stdout '^vendor/golang.org/x/net'
! stdout '^golang.org/x/net'
cmp stdout $WORK/net-deps.txt


# However, 'go mod' and 'go get' subcommands should report the original module
# dependencies, not the vendored packages.

[!net:golang.org] stop

env GOPROXY=
env GOWORK=off
go mod why -m golang.org/x/net
stdout '^# golang.org/x/net\nnet\ngolang.org/x/net'

```

----------------------------------------

TITLE: Lazy Dependency Module
DESCRIPTION: A Go module file for the 'lazy' dependency which requires another module 'pruned' that will be used in testing dependency pruning behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
module example.net/lazy

go 1.17

require example.net/pruned v0.1.0
```

----------------------------------------

TITLE: Main Package Implementation with Undefined Reference
DESCRIPTION: Go source file containing a function with an undefined reference to function g()
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_build_failure.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package p

func f() {
	g()
}
```

----------------------------------------

TITLE: Package C Definition
DESCRIPTION: Go package 'c' importing package 'a', completing the import cycle.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_cycle_deps_errors.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package c

import _ "m/a"
```

----------------------------------------

TITLE: Defining Root Module without go.mod using Go Modules - Go
DESCRIPTION: This snippet specifies the root module path for a Go project that does not provide a go.mod file at the root, commonly occurring with +incompatible versions. It sets up the module name 'example.com/split-incompatible' to simulate projects before full Go module support. No dependencies are declared; the file simply provides the module path for testing module resolution logic.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split-incompatible_v2.0.0+incompatible.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/split-incompatible
```

----------------------------------------

TITLE: Initializing an Empty Go Source File for i - Go
DESCRIPTION: This Go source file declares package i. It is included only to ensure the module 'i' is recognized in imports and dependency resolution. There are no functions, exports, or logical content.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
package i
```

----------------------------------------

TITLE: Defining Error Constants for NetBSD ARM64 CGO in Go
DESCRIPTION: This snippet defines various error constants used in system calls for NetBSD on ARM64 architecture. These constants are part of the syscall package and are used to represent different error conditions that can occur during system operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_18

LANGUAGE: Go
CODE:
```
const EFTYPE = 79
const EFTYPE Errno
const EHOSTDOWN = 64
const EHOSTUNREACH = 65
const EIDRM = 82
const EILSEQ = 85
const EINPROGRESS = 36
const EINTR = 4
const EINVAL = 22
const EIO = 5
// ... (more error constants)
```

----------------------------------------

TITLE: Go Environment File Configuration - Path A
DESCRIPTION: Environment variable configuration file for path ./a/go.env defining proxy settings, AMD64 version, and FIPS mode
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_changed.txt#2025-04-22_snippet_1

LANGUAGE: properties
CODE:
```
GOPROXY=s
GOAMD64=v1
GOFIPS140=off
```

----------------------------------------

TITLE: Test Dependency Module Definition
DESCRIPTION: Defines the 'testdep' module used for testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_14

LANGUAGE: Go
CODE:
```
module example.com/testdep
```

----------------------------------------

TITLE: Dependency Module Definition
DESCRIPTION: Module definition for the external dependency example.net/x.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_lazy_self.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.net/x

go 1.17
```

----------------------------------------

TITLE: Creating Minimal go.mod with Cyclical Dependency - Go
DESCRIPTION: This minimal go.mod file declares 'golang.org/issue/mirror' as a module and requires 'golang.org/issue/root' at version v0.1.0, forming a cyclical dependency according to the test scenario. Such cycles can test correct graph traversal and cycle handling in module resolution logic. No additional requirements or dependencies are listed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_3

LANGUAGE: go.mod
CODE:
```
module golang.org/issue/mirror

require golang.org/issue/root v0.1.0
```

----------------------------------------

TITLE: Go Module Definition with Non-existent Dependency
DESCRIPTION: A Go module definition file that requires a non-existent GitHub package, used to test error handling in module downloads.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_issue51114.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module test

go 1.18

require github.com/golang/notexist/subdir v0.1.0
```

----------------------------------------

TITLE: New ELF Relocation Constants - debug/elf - Go
DESCRIPTION: Introduces constants for additional ELF relocation types for LoongArch and MIPS architectures in debug/elf. Each constant is named R_LARCH_* or R_MIPS_PC32 with explicit integer value, and includes an association with relocation families (e.g., R_LARCH, R_MIPS). These values are used for binary analysis or manipulation of ELF files.
SOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_9

LANGUAGE: Go
CODE:
```
const R_LARCH_64_PCREL = 109
const R_LARCH_64_PCREL R_LARCH
const R_LARCH_ADD6 = 105
const R_LARCH_ADD6 R_LARCH
const R_LARCH_ADD_ULEB128 = 107
const R_LARCH_ADD_ULEB128 R_LARCH
const R_LARCH_ALIGN = 102
const R_LARCH_ALIGN R_LARCH
const R_LARCH_CFA = 104
const R_LARCH_CFA R_LARCH
const R_LARCH_DELETE = 101
const R_LARCH_DELETE R_LARCH
const R_LARCH_PCREL20_S2 = 103
const R_LARCH_PCREL20_S2 R_LARCH
const R_LARCH_SUB6 = 106
const R_LARCH_SUB6 R_LARCH
const R_LARCH_SUB_ULEB128 = 108
const R_LARCH_SUB_ULEB128 R_LARCH
const R_MIPS_PC32 = 248
const R_MIPS_PC32 R_MIPS
```

----------------------------------------

TITLE: Testing Quote Functions in Go
DESCRIPTION: Contains test cases for all four quote functions, ensuring they return the expected strings. Includes environment setup for proper locale testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180214005840-23179ee8a569.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package quote

import (
	"os"
	"testing"
)

func init() {
	os.Setenv("LC_ALL", "en")
}

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

func TestGo(t *testing.T) {
	go1 := "Don't communicate by sharing memory, share memory by communicating."
	if out := Go(); out != go1 {
		t.Errorf("Go() = %q, want %q", out, go1)
	}
}

func TestOpt(t *testing.T) {
	opt := "If a program is too slow, it must have a loop."
	if out := Opt(); out != opt {
		t.Errorf("Opt() = %q, want %q", out, opt)
	}
}
```

----------------------------------------

TITLE: Function Implementation for Package 'aa' in Go
DESCRIPTION: Defines package 'aa' with an AA function that imports and uses the 'it' package to create a Conc object and call Callee.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package aa

import "M/it"

func AA(y int) int {
	c := it.Conc{}
	x := it.Callee(&c)
	println(x, y)
	return 0
}
```

----------------------------------------

TITLE: Version Information for Go Module
DESCRIPTION: This JSON snippet declares the version of the Go module, which is specified as v1.5.2. This version information is crucial for dependency management and module updates.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_quote_v1.5.2.txt#2025-04-22_snippet_1

LANGUAGE: JSON
CODE:
```
{"Version":"v1.5.2"}
```

----------------------------------------

TITLE: Testing Cgo Method Declaration Restrictions in Go
DESCRIPTION: This code attempts to define methods on an alias type for a C integer, which should be rejected by the Go compiler. The test expects specific error messages about not being able to define methods on non-local types.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_badmethod_issue60725.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package a

/*
typedef int T;
*/
import "C"

type A = C.T

func (A) m1() {}
func (*A) m2() {}
```

----------------------------------------

TITLE: Defining Go Package
DESCRIPTION: This code defines a placeholder for a Go package named 'subpkg'. It is used to represent a package that might be tested or relocated. No specific functionality is implemented.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package subpkg
```

----------------------------------------

TITLE: Working Import Comment
DESCRIPTION: Valid Go files with correct import path comments
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_import_comment.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package x // import "m/works/x"
```

LANGUAGE: go
CODE:
```
package x // important! not an import comment
```

----------------------------------------

TITLE: TLS Security Improvements - Go
DESCRIPTION: Implementation of TLS fallback SCSV and dynamic certificate handling for SNI support in the crypto/tls package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
pkg crypto/tls, const TLS_FALLBACK_SCSV = 22016
pkg crypto/tls, const TLS_FALLBACK_SCSV uint16

pkg crypto/tls, type ClientHelloInfo struct
pkg crypto/tls, type ClientHelloInfo struct, CipherSuites []uint16
pkg crypto/tls, type ClientHelloInfo struct, ServerName string
pkg crypto/tls, type ClientHelloInfo struct, SupportedCurves []CurveID
pkg crypto/tls, type ClientHelloInfo struct, SupportedPoints []uint8
```

----------------------------------------

TITLE: Setting New Go Version and Executing Go List with Same Toolchain
DESCRIPTION: Sets the Go version to 1.21 in go.mod, sets the TESTGO_VERSION environment variable to 1.21, and runs 'go list' command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/old_tidy_toolchain.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
env TESTGO_VERSION=1.21
go mod edit -go=1.21
go list
```

----------------------------------------

TITLE: Simple Go Main Package
DESCRIPTION: Minimal Go program with empty main function used as test code across different repository configurations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_nested.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main
func main() {}
```

----------------------------------------

TITLE: Package A Definition
DESCRIPTION: Go package 'a' with an import of package 'c'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/noncanonical_import.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package a\n\nimport _ "c"
```

----------------------------------------

TITLE: Testing Go File Inclusion/Exclusion Using go list - Shell Script
DESCRIPTION: This bash-like shell script orchestrates a sequence of environment manipulations and go list invocations, asserting that files and imports included in the metadata reflect build constraints like OS targets, cgo enablement, and build tags. It depends on a working Go installation and the go command, and requires the current module defined by go.mod to be present. Key parameters include GOOS, GOARCH, CGO_ENABLED, and go list --tags. Inputs and outputs are the standard streams, and output is checked against regular expressions. Limitations: test relies on go list output formats, and expects a consistent Go command environment.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Check that files and their imports are not included in 'go list' output
# when they are excluded by build constraints.

# Linux and cgo files should be included when building in that configuration.
env GOOS=linux
env GOARCH=amd64
env CGO_ENABLED=1
go list -f '{{range .GoFiles}}{{.}} {{end}}'
stdout '^cgotag.go empty.go suffix_linux.go tag.go $'
go list -f '{{range .CgoFiles}}{{.}} {{end}}'
stdout '^cgoimport.go $'
go list -f '{{range .Imports}}{{.}} {{end}}'
stdout '^C cgoimport cgotag suffix tag $'

# Disabling cgo should exclude cgo files and their imports.
env CGO_ENABLED=0
go list -f '{{range .GoFiles}}{{.}} {{end}}'
stdout 'empty.go suffix_linux.go tag.go'
go list -f '{{range .CgoFiles}}{{.}} {{end}}'
! stdout .
go list -f '{{range .Imports}}{{.}} {{end}}'
stdout '^suffix tag $'

# Changing OS should exclude linux sources.
env GOOS=darwin
go list -f '{{range .GoFiles}}{{.}} {{end}}'
stdout '^empty.go $'
go list -f '{{range .Imports}}{{.}} {{end}}'
stdout '^$'

# Enabling a tag should include files that require it.
go list -tags=extra -f '{{range .GoFiles}}{{.}} {{end}}'
stdout '^empty.go extra.go $'
go list -tags=extra -f '{{range .Imports}}{{.}} {{end}}'
stdout '^extra $'

# Packages that require a tag should not be listed unless the tag is on.
! go list ./tagonly
go list -tags=extra ./tagonly
stdout m/tagonly

```

----------------------------------------

TITLE: Defining Module Dependencies for w1
DESCRIPTION: This go.mod file for the w1 module defines its dependencies on specific versions of modules y and z.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence_loop.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module example.net/w

go 1.16

require (
	example.net/y v0.2.0-pre
	example.net/z v0.2.0-pre
)
```

----------------------------------------

TITLE: Package A Test File with External Dependency
DESCRIPTION: A test file for package 'a' that imports 'rsc.io/quote' as a test dependency. This is used to test how 'go get' handles test dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_test.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package a_test

import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Defining WaitStatus type for NetBSD ARM64 in syscall package
DESCRIPTION: Definition of the WaitStatus type in the syscall package for NetBSD ARM64 architecture. This type represents the status of a child process as returned by wait() system calls.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_170

LANGUAGE: go
CODE:
```
type WaitStatus uint32
```

----------------------------------------

TITLE: NetBSD Data Link Type Constants
DESCRIPTION: Constants defining various data link types (DLT) for network interfaces and packet capture on NetBSD ARM64. Includes Juniper-specific, PPP, USB, and other protocol constants.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_14

LANGUAGE: Go
CODE:
```
const DLT_JUNIPER_GGSN = 133
const DLT_JUNIPER_ISM = 194
const DLT_JUNIPER_MFR = 134
const DLT_JUNIPER_MLFR = 131
const DLT_JUNIPER_MLPPP = 130
```

----------------------------------------

TITLE: Defining Routing Message Types in Go for NetBSD ARM64
DESCRIPTION: This snippet defines constants for various routing message types used in the NetBSD ARM64 syscall package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_143

LANGUAGE: Go
CODE:
```
const (
    RTM_ADD = 1
    RTM_CHANGE = 3
    RTM_CHGADDR = 21
    RTM_DELADDR = 13
    RTM_DELETE = 2
    RTM_GET = 4
    RTM_IEEE80211 = 17
    RTM_IFANNOUNCE = 16
    RTM_IFINFO = 20
    RTM_LLINFO_UPD = 19
    RTM_LOCK = 8
    RTM_LOSING = 5
    RTM_MISS = 7
    RTM_NEWADDR = 12
    RTM_OIFINFO = 15
    RTM_OLDADD = 9
    RTM_OLDDEL = 10
    RTM_OOIFINFO = 14
    RTM_REDIRECT = 6
    RTM_RESOLVE = 11
    RTM_RTTUNIT = 1000000
    RTM_SETGATE = 18
    RTM_VERSION = 4
)
```

----------------------------------------

TITLE: Package Load Error Test
DESCRIPTION: Test file containing an invalid import to verify package loading error handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_json.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
// A bad import causes a failure directly in cmd/go during import processing.

package loaderror

import _ "x"
```

----------------------------------------

TITLE: Lowercase Module Implementation
DESCRIPTION: A simple Go file that defines the lowercase foo package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_collision.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package foo

```

----------------------------------------

TITLE: Declaring FreeBSD Socket Option and Routing Flags - Go
DESCRIPTION: This block defines network routing flags and socket options constants (e.g., RTF_GWFLAG_COMPAT, SIOCAIFADDR, SIOCGIFSTATUS, SIOCSIFPHYADDR, SOCK_CLOEXEC, SO_VENDOR, TCP_VENDOR, etc.) for use in network device, socket management, and routing operations. These values allow Go programs to perform advanced socket setup and interact with FreeBSD's networking stack at a low level. Intended for developers writing network or device drivers, or those needing raw access to socket layer.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_11

LANGUAGE: Go
CODE:
```
const RTF_GWFLAG_COMPAT = 2147483648
const RTF_GWFLAG_COMPAT ideal-int
const SIOCAIFADDR = 2151704858
const SIOCGIFSTATUS = 3274795323
const SIOCSIFPHYADDR = 2151704902
const SOCK_CLOEXEC = 268435456
const SOCK_CLOEXEC ideal-int
const SOCK_NONBLOCK = 536870912
const SOCK_NONBLOCK ideal-int
const SO_VENDOR = 2147483648
const SO_VENDOR ideal-int
const TCP_VENDOR = 2147483648
const TCP_VENDOR ideal-int

```

----------------------------------------

TITLE: Go List with Multi-line Rationale
DESCRIPTION: This snippet tests 'go list' with a module retracted with a multi-line message. It confirms that 'go list' displays the full multi-line message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_3

LANGUAGE: go
CODE:
```
go list -m -retracted -f '{{.Retracted}}' example.com/retract/rationale
cmp stdout multiline
```

----------------------------------------

TITLE: Executing Go Test with Failing Parent Test
DESCRIPTION: This command runs a Go test with a specific pattern that matches no subtests. It demonstrates that the parent test still fails even when no subtests are executed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_subtests_failure.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go test -run TestThatFails/ThisWillNotMatch standalone_fail_sub_test.go
! stdout '^ok.*\[no tests to run\]'
! stderr '^ok.*\[no tests to run\]'
stdout 'FAIL'
```

----------------------------------------

TITLE: Test Module Definition in go.mod
DESCRIPTION: A simple Go module definition file used for the test. It defines the module with a name that matches the issue being tested.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_cache_rw.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module golang.org/issue/31481
```

----------------------------------------

TITLE: Gofmt Formatted Links
DESCRIPTION: Shows how the documentation links appear after gofmt formatting.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink.txt#2025-04-22_snippet_1

LANGUAGE: text
CODE:
```
In this package, see [Doc] and [Parser.Parse].
There is no [Undef] or [Undef.Method].
See also the [comment] package,
especially [comment.Doc] and [comment.Parser.Parse].
```

----------------------------------------

TITLE: Running Go Module Verification Command
DESCRIPTION: A simple Go command to verify modules in the workspace, which is the core of the regression test for Issue #62663.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_verify_work.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go mod verify
```

----------------------------------------

TITLE: Testing Go Workspace Vendor Command
DESCRIPTION: A bash script that tests the 'go work vendor' command for proper handling of various error conditions involving inconsistencies between go.mod files and vendor/modules.txt.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go work vendor
cmp modules.txt.want vendor/modules.txt
go list example.com/a example.com/b

# Module required in go.mod but not marked explicit in modules.txt
cp modules.txt.required_but_not_explicit vendor/modules.txt
! go list example.com/a example.com/b
cmpenv stderr required_but_not_explicit_error.txt

# Replacement in go.mod but no replacement in modules.txt
cp modules.txt.missing_replacement vendor/modules.txt
! go list example.com/a example.com/b
cmpenv stderr missing_replacement_error.txt

# Replacement in go.mod but different replacement target in modules.txt
cp modules.txt.different_replacement vendor/modules.txt
! go list example.com/a example.com/b
cmpenv stderr different_replacement_error.txt

# Module marked explicit in modules.txt but not required in go.mod
cp modules.txt.extra_explicit vendor/modules.txt
! go list example.com/a example.com/b
cmpenv stderr extra_explicit_error.txt

# Replacement in modules.txt but not in go.mod
cp modules.txt.extra_replacement vendor/modules.txt
! go list example.com/a example.com/b
cmpenv stderr extra_replacement_error.txt
```

----------------------------------------

TITLE: Tag-based GOFLAGS Testing
DESCRIPTION: Tests the usage of build tags in GOFLAGS across different Go commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goflags.txt#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
env GOFLAGS='-tags=magic'
env GOFLAGS='"-tags=magic wizardry"'
```

----------------------------------------

TITLE: Verifying Passing Test Output in Go
DESCRIPTION: This snippet defines a passing test in Go. It's used to verify that 'go test -json' correctly reports a passing test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_panic_exit.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package pass_test

import "testing"

func TestPass(t *testing.T) {}
```

----------------------------------------

TITLE: Re-enabling CGO by Setting CC in Go
DESCRIPTION: This snippet demonstrates re-enabling cgo by setting the CC environment variable to 'cc'. It then verifies that CGO_ENABLED is set to 1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/autocgo.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
env CC=cc
go env CGO_ENABLED
stdout 1
```

----------------------------------------

TITLE: Testing Go Formatter Behavior with Missing Embedded File
DESCRIPTION: This shell script tests the behavior of 'go fmt' and 'go build' when dealing with a Go file that references a non-existent embedded file. It demonstrates that 'go fmt' ignores the missing file, while 'go build' reports an error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed_fmt.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
# go fmt ignores file not found
go fmt xnofmt.go
cmp xnofmt.go xfmt.ref
! go build xnofmt.go
stderr 'xnofmt.go:5:12: pattern missing.txt: no matching files found'
```

----------------------------------------

TITLE: Testing 'go list ./...' in GOPATH/src (GOPATH Mode) (Shell)
DESCRIPTION: Changes the directory to $GOPATH/src, ensures Go module mode is off (`GO111MODULE=off`), and runs `go list ./...`. It verifies that the command lists the synthesized GOPATH import path corresponding to the current directory ($GOPATH/src), demonstrating standard GOPATH behavior outside of GOROOT.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_10

LANGUAGE: sh
CODE:
```
# switch to GOPATH/src
cd $GOPATH/src

# GO111MODULE=off,GOPATH
env GO111MODULE=off
go list ./...
[!GOOS:windows] stdout ^_$WORK/gopath/src$
[GOOS:windows] stdout gopath/src$
```

----------------------------------------

TITLE: Test package that imports errors
DESCRIPTION: A Go package in the 'unused' module that imports the standard library 'errors' package, used to test how the list command handles packages in indirect dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package useerrors
import _ "errors"
```

----------------------------------------

TITLE: Testing Internal Package Visibility in Go Modules
DESCRIPTION: A bash script that tests how the Go toolchain handles internal package visibility in different contexts. It verifies access rules when testing from the same directory, from the vendor directory, and from outside the module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_files.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on

cd foo

# Testing an explicit source file should use the same import visibility as the
# package in the same directory.
go list -test -deps
go list -test -deps foo_test.go

# If the file is inside the main module's vendor directory, it should have
# visibility based on the vendor-relative import path.
mkdir vendor/example.com/foo
cp foo_test.go vendor/example.com/foo
go list -test -deps vendor/example.com/foo/foo_test.go

# If the file is outside the main module entirely, it should be treated as outside.
cp foo_test.go ../foo_test.go
! go list -test -deps ../foo_test.go
stderr 'use of internal package'
```

----------------------------------------

TITLE: Defining Empty Go Package
DESCRIPTION: Contents of p.go file defining an empty package 'p'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/old_tidy_toolchain.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
package p
```

----------------------------------------

TITLE: Linux system calls for 32-bit x86 architecture in syscall package
DESCRIPTION: System call functions for Linux 386 architecture. Includes AllThreadsSyscall variants for executing syscalls across all threads and functions to set effective group and user IDs.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
func AllThreadsSyscall(uintptr, uintptr, uintptr, uintptr) (uintptr, uintptr, Errno)
func AllThreadsSyscall6(uintptr, uintptr, uintptr, uintptr, uintptr, uintptr, uintptr) (uintptr, uintptr, Errno)
func Setegid(int) error
func Seteuid(int) error
```

----------------------------------------

TITLE: Darwin ARM64 Extended System Calls
DESCRIPTION: Extended and platform-specific system calls for Darwin ARM64, including file system operations and process management.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_100

LANGUAGE: Go
CODE:
```
const SYS_CHMOD_EXTENDED = 282
const SYS_FSTAT64 = 339
const SYS_FSTAT64_EXTENDED = 343
const SYS_FILEPORT_MAKEPORT = 430
const SYS_BSDTHREAD_CREATE = 360
```

----------------------------------------

TITLE: Testing Go Functions with Relative Imports
DESCRIPTION: This Go test file demonstrates the use of relative imports in test files. It imports a subpackage using a relative path and compares the output of functions from different packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_relative_import.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package p

import (
	"./p1"

	"testing"
)

func TestF(t *testing.T) {
	if F() != p1.F() {
		t.Fatal(F())
	}
}
```

----------------------------------------

TITLE: Setting Go Environment Variables for Module Testing
DESCRIPTION: Sets environment variables to enable Go modules, use direct proxy, and disable sum database for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_direct.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on
env GOPROXY=direct
env GOSUMDB=off
```

----------------------------------------

TITLE: Deprecations in syscall package for darwin-amd64
DESCRIPTION: Lists deprecated functions and types in the syscall package for darwin-amd64 architecture.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_30

LANGUAGE: Go
CODE:
```
pkg syscall (darwin-amd64), func BpfBuflen //deprecated
pkg syscall (darwin-amd64), func BpfDatalink //deprecated
pkg syscall (darwin-amd64), func BpfHeadercmpl //deprecated
pkg syscall (darwin-amd64), func BpfInterface //deprecated
pkg syscall (darwin-amd64), func BpfJump //deprecated
pkg syscall (darwin-amd64), func BpfStats //deprecated
pkg syscall (darwin-amd64), func BpfStmt //deprecated
pkg syscall (darwin-amd64), func BpfTimeout //deprecated
pkg syscall (darwin-amd64), func CheckBpfVersion //deprecated
pkg syscall (darwin-amd64), func FlushBpf //deprecated
pkg syscall (darwin-amd64), func ParseRoutingMessage //deprecated
pkg syscall (darwin-amd64), func ParseRoutingSockaddr //deprecated
pkg syscall (darwin-amd64), func RouteRIB //deprecated
pkg syscall (darwin-amd64), func SetBpf //deprecated
pkg syscall (darwin-amd64), func SetBpfBuflen //deprecated
pkg syscall (darwin-amd64), func SetBpfDatalink //deprecated
pkg syscall (darwin-amd64), func SetBpfHeadercmpl //deprecated
pkg syscall (darwin-amd64), func SetBpfImmediate //deprecated
pkg syscall (darwin-amd64), func SetBpfInterface //deprecated
pkg syscall (darwin-amd64), func SetBpfPromisc //deprecated
pkg syscall (darwin-amd64), func SetBpfTimeout //deprecated
pkg syscall (darwin-amd64), func StringSlicePtr //deprecated
pkg syscall (darwin-amd64), type InterfaceAddrMessage //deprecated
pkg syscall (darwin-amd64), type InterfaceMessage //deprecated
pkg syscall (darwin-amd64), type InterfaceMulticastAddrMessage //deprecated
pkg syscall (darwin-amd64), type RouteMessage //deprecated
pkg syscall (darwin-amd64), type RoutingMessage //deprecated
```

----------------------------------------

TITLE: Package Declaration in dot.go
DESCRIPTION: Go source file establishing the dot package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_dotname_v1.0.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package dot
```

----------------------------------------

TITLE: Go Module Configuration with Case-Insensitive Dependencies
DESCRIPTION: A go.mod file that requires two modules that differ only by case and uses replacements to point to local directories. This configuration will cause import collision errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_collision.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module play.ground

go 1.14

require (
	example.com/foo v0.1.0
	example.com/Foo v0.1.0
)

replace (
	example.com/foo => ./foo
	example.com/Foo => ./foo_alt
)
```

----------------------------------------

TITLE: Go Test File Setup
DESCRIPTION: Defines a test file for the package. This file is where test cases for the package functionality would be implemented.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_issue45477.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package pkg_test
```

----------------------------------------

TITLE: Testing Successful Installation with modcacherw
DESCRIPTION: Tests successful package installation with -modcacherw flag, skipped in short mode due to binary linking overhead.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_modcacherw_issue64282.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
[!short] go install -modcacherw example.com/printversion@v0.1.0
[!short] cp $WORK/extraneous.txt $GOPATH/pkg/mod/example.com/printversion@v0.1.0/extraneous_file.go
[!short] go clean -modcache
```

----------------------------------------

TITLE: Package A Definition
DESCRIPTION: Go package 'a' importing package 'b', forming part of the import cycle.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_cycle_deps_errors.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package a

import _ "m/b"
```

----------------------------------------

TITLE: Empty Go Workspace Configuration
DESCRIPTION: Minimal go.work file specifying Go version 1.21.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_empty_panic_GOPATH.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
go 1.21
```

----------------------------------------

TITLE: Defining Package in Go
DESCRIPTION: This snippet defines an empty package named pkg2 in Go.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_print.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package pkg2
```

----------------------------------------

TITLE: Main Program with Invalid Subdirectory Imports
DESCRIPTION: Example Go program showing incorrect usage of module imports with subdirectory specifications. This code demonstrates what not to do when importing modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_subdir.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import (
    "fmt"
    "vcs-test.golang.org/go/gitreposubdir/foo/subdir"
    "vcs-test.golang.org/go/gitreposubdirv2/v2/foo/subdir"
)

func main() {
    fmt.Println(greeter.Hello())
    fmt.Println(greeterv2.Hello())
}
```

----------------------------------------

TITLE: Basic Main Function in Go
DESCRIPTION: Provides a minimal main function implementation as part of the mainonly package. It serves as a standalone application entry point with no additional functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_multiple_mains.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Importing Dependencies in Module A in Go
DESCRIPTION: This Go file for module A imports example.net/b as a blank import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
package a

import _ "example.net/b"
```

----------------------------------------

TITLE: Defining Linux-specific Test for Package p
DESCRIPTION: Creates a test file for package 'p' with a build constraint for Linux, importing package 'q'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_all_gobuild.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
//go:build linux

package p

import "m/q"
```

----------------------------------------

TITLE: Defining Version Constant in Go
DESCRIPTION: This snippet defines a constant for the version number in a Go package. The version number is set as a string constant named V. This is aimed at standardizing the version reference across the codebase. No additional dependencies are required.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_version_v1.0.1.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package version

const V = "v1.0.1"
```

----------------------------------------

TITLE: Testing Package Import with Go Modules
DESCRIPTION: A main function that tests go/build's Import functionality with both relative and absolute source directories. It imports a package, reports its directory, and lists its Go files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gobuild_import.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"go/build"
	"log"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	// build.Import should support relative and absolute source dir paths.
	path := os.Args[1]
	srcDir := os.Args[2]
	p1, err := build.Import(path, srcDir, 0)
	if err != nil {
		log.Fatal(err)
	}
	absSrcDir, err := filepath.Abs(srcDir)
	if err != nil {
		log.Fatal(err)
	}
	p2, err := build.Import(path, absSrcDir, 0)
	if err != nil {
		log.Fatal(err)
	}
	if p1.Dir != p2.Dir {
		log.Fatalf("different packages loaded with relative and absolute paths:\n\t%s\n\t%s", p1.Dir, p2.Dir)
	}

	fmt.Printf("%s\n%s\n", p1.Dir, strings.Join(p1.GoFiles, " "))
}
```

----------------------------------------

TITLE: Testing Go Module Tidy with Incorrect Sumdb
DESCRIPTION: This snippet tests the 'go mod tidy' command with an incorrect sumdb setup, which results in a checksum mismatch and security error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
go mod edit -require rsc.io/quote@v1.5.2
! go mod tidy
stderr 'go: rsc.io/quote@v1.5.2: verifying go.mod: checksum mismatch'
stderr 'SECURITY ERROR\n'

rm go.sum
```

----------------------------------------

TITLE: Type Creation Functions in go/types Package
DESCRIPTION: Collection of functions for creating new type instances including arrays, channels, interfaces, maps, and more. These functions are fundamental to the type system implementation in Go.
SOURCE: https://github.com/golang/go/blob/master/api/go1.5.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
func NewArray(Type, int64) *Array
func NewChan(ChanDir, Type) *Chan
func NewInterface([]*Func, []*Named) *Interface
func NewMap(Type, Type) *Map
func NewSlice(Type) *Slice
func NewStruct([]*Var, []string) *Struct
```

----------------------------------------

TITLE: Setting up Git environment variables and repository initialization
DESCRIPTION: Configures Git author and committer information, then initializes a new Git repository.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue47650.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GIT_AUTHOR_NAME='Bryan C. Mills'
env GIT_AUTHOR_EMAIL='bcmills@google.com'
env GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
env GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL

git init
```

----------------------------------------

TITLE: Normal TestMain Function Implementation in Go
DESCRIPTION: This snippet demonstrates a basic implementation of the TestMain function in Go. It's a minimal example that doesn't include any specific test logic.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package standalone_main_normal_test

import "testing"

func TestMain(t *testing.T) {
}
```

----------------------------------------

TITLE: Testing Go List Command with Dot-Go Suffix Packages
DESCRIPTION: This snippet tests the 'go list' command with package names ending in '.go', ensuring it correctly identifies and lists these packages regardless of whether they correspond to local files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_trailing_slash.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go list example.com/dotgo.go
stdout ^example.com/dotgo.go$
go list example.com/dotgo.go/
stdout ^example.com/dotgo.go$
```

----------------------------------------

TITLE: Testing Loading Error in Test File (Go)
DESCRIPTION: This snippet tests a loading error in a test file. It checks the JSON output for specific setup failure messages and package information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_build.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
! go test -json -o=$devnull ./loaderror
stdout '"ImportPath":"x","Action":"build-output","Output":"# m/loaderror\\n"'
stdout '"ImportPath":"x","Action":"build-output","Output":".*package x is not in std.*"'
stdout '"ImportPath":"x","Action":"build-fail"'
stdout '"Action":"start","Package":"m/loaderror"'
stdout '"Action":"output","Package":"m/loaderror","Output":"FAIL\\tm/loaderror \[setup failed\]\\n"'
stdout '"Action":"fail","Package":"m/loaderror","Elapsed":.*,"FailedBuild":"x"'
! stderr '.'
```

----------------------------------------

TITLE: Testing Vendor Directory Import Conflict
DESCRIPTION: Tests import resolution when a package exists in both the main module and the vendor directory, expecting an error only when -mod=vendor is used.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
mkdir vendor/example.com/m/importy
cp $WORK/importy/importy.go vendor/example.com/m/importy/importy.go
go build example.com/m/importy
! go build -mod=vendor example.com/m/importy
stderr '^ambiguous import: found package example.com/m/importy in multiple directories:\n\t'$WORK'[/\\]importy\n\t'$WORK'[/\\]vendor[/\\]example.com[/\\]m[/\\]importy$'
```

----------------------------------------

TITLE: Defining Go Module for rsc.io/breaker
DESCRIPTION: Specifies the module name for the rsc.io/breaker package. This is typically placed in a go.mod file to define the module and its dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_breaker_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module rsc.io/breaker
```

----------------------------------------

TITLE: Go Module Definition for Main Test Directory
DESCRIPTION: Defines a Go module named 'example.com' for the main test directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
module example.com
go 1.13
```

----------------------------------------

TITLE: Go Module Definition File
DESCRIPTION: Original go.mod file that defines the module name for the test project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_git.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module private.example.com
```

----------------------------------------

TITLE: Defining Go Module (go.mod)
DESCRIPTION: This `go.mod` file declares a Go module named `m`. It serves as the root of the project structure containing packages `a`, `b`, `c`, `d`, and `main`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
-- go.mod --
module m
```

----------------------------------------

TITLE: Deprecations in regexp package
DESCRIPTION: Lists deprecated method in the regexp package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_28

LANGUAGE: Go
CODE:
```
pkg regexp, method (*Regexp) Copy //deprecated
```

----------------------------------------

TITLE: Testing Go Build Language Version Flag
DESCRIPTION: A shell command to build a Go file with the -n flag to show the commands without executing them. The stderr assertion checks that the -lang flag with Go version is present in the output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_vers.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go build -n x.go
stderr '-lang=go1\.[0-9]+'
```

----------------------------------------

TITLE: Module D Configuration
DESCRIPTION: Basic module configuration for example.com/d with Go 1.21.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue54372.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.com/d

go 1.21
```

----------------------------------------

TITLE: Testing No Deadline in Go
DESCRIPTION: This function tests that t.Deadline() returns the expected values when no deadline is set. It checks that the returned deadline is zero and the boolean flag is false.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_deadline.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
func TestNoDeadline(t *testing.T) {
	d, ok := t.Deadline()
	if ok || !d.IsZero() {
		t.Fatalf("t.Deadline() = %v, %v; want 0, false", d, ok)
	}
}
```

----------------------------------------

TITLE: Testing Start Anchor with \B and Capturing Groups in Go Regexps
DESCRIPTION: Tests patterns that combine start-of-string anchors (^) with non-word boundary assertions (\B) and capturing groups. These tests verify how these elements interact for matching at the beginning of strings.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_12

LANGUAGE: regexp
CODE:
```
^\B(fo|foo)\B
```

LANGUAGE: regexp
CODE:
```
^(?:^\B(fo|foo)\B)$
```

LANGUAGE: regexp
CODE:
```
^(?:^\B(fo|foo)\B)
```

LANGUAGE: regexp
CODE:
```
(?:^\B(fo|foo)\B)$
```

----------------------------------------

TITLE: Testing Double \B Assertions in Go Regexps
DESCRIPTION: Tests consecutive \B assertions without intervening patterns. These tests verify the behavior of multiple adjacent non-word boundary assertions.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_9

LANGUAGE: regexp
CODE:
```
\B\B
```

LANGUAGE: regexp
CODE:
```
^(?:\B\B)$
```

LANGUAGE: regexp
CODE:
```
^(?:\B\B)
```

LANGUAGE: regexp
CODE:
```
(?:\B\B)$
```

----------------------------------------

TITLE: Toolchain Module Definition
DESCRIPTION: Module definition files (.mod and go.mod) that define the toolchain module path without a version. These files establish the module identity for the toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.7.linux-amd64.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: Testing Go Module Vendoring Behavior
DESCRIPTION: This snippet demonstrates the steps to test the vendoring behavior of Go modules. It changes to a subdirectory, runs 'go mod vendor', and checks for the existence of specific files in the vendor directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_issue46867.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
cd subdir
go mod vendor
! exists vendor/example.net/NOTICE
exists vendor/example.net/m/NOTICE
```

----------------------------------------

TITLE: Allowing Dependency Internal Usage (Setup)
DESCRIPTION: Changes the current module path to `golang.org/notx` and gets the `./throughdep` package. This sets up a scenario where the main module (`golang.org/notx`) depends on a package (`./throughdep`) which in turn depends on `golang.org/x/useinternal`. The `golang.org/x/useinternal` package itself correctly uses `golang.org/x/internal`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
# Dependencies should be able to use their own internal modules...
go mod edit -module=golang.org/notx
go get ./throughdep
```

----------------------------------------

TITLE: Testing GOINSECURE with Checksum Lookup
DESCRIPTION: Verifies that GOINSECURE does not bypass checksum lookup. Expects the command to fail with a 504 error even with GOINSECURE set.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_cache.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
env GOINSECURE=rsc.io
env GOPROXY=$proxy/sumdb-504
! go get rsc.io/quote@v1.5.2
stderr 504
```

----------------------------------------

TITLE: Testing no caching for command-line file tests
DESCRIPTION: Executes Go tests on a specific file to verify that command-line file tests are never cached.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_cached.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
go test -run=WriteTmp ./foo_test.go
! stdout '(cached)'
go test -run=WriteTmp ./foo_test.go
! stdout '(cached)'
```

----------------------------------------

TITLE: Testing GO111MODULE=auto Module Resolution in Go
DESCRIPTION: Tests how GO111MODULE=auto detects go.mod files in parent directories. This section verifies that the auto setting correctly finds modules and reports their paths when navigating through nested directories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_enabled.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=auto

cd $GOPATH/src/x/y/z
go env GOMOD
stdout $GOPATH[/\\]src[/\\]x[/\\]y[/\\]z[/\\]go.mod
go list -m -f {{.GoMod}}
stdout $GOPATH[/\\]src[/\\]x[/\\]y[/\\]z[/\\]go.mod

cd $GOPATH/src/x/y/z/w
go env GOMOD
stdout $GOPATH[/\\]src[/\\]x[/\\]y[/\\]z[/\\]go.mod

cd $GOPATH/src/x/y
go env GOMOD
! stdout .

cd $GOPATH/foo
go env GOMOD
stdout foo[/\\]go.mod
go list -m -f {{.GoMod}}
stdout foo[/\\]go.mod

cd $GOPATH/foo/bar/baz
go env GOMOD
stdout foo[/\\]go.mod
```

----------------------------------------

TITLE: Running Go Tests with Output Ordering
DESCRIPTION: This command runs Go tests for all packages and checks the stdout for correct ordering of pkg1 and pkg2 output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_print.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go test ./...
stdout 'pkg1(.|
)*pkg2'
```

----------------------------------------

TITLE: RISC-V ELF Constants Addition in debug/elf Package
DESCRIPTION: Addition of two new constants PT_RISCV_ATTRIBUTES and SHT_RISCV_ATTRIBUTES to support RISC-V specific ELF file parsing capabilities in the debug/elf package.
SOURCE: https://github.com/golang/go/blob/master/doc/next/6-stdlib/99-minor/debug/elf/72843.md#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
PT_RISCV_ATTRIBUTES
SHT_RISCV_ATTRIBUTES
```

----------------------------------------

TITLE: Running `go list` with Specific Flags and Environment (Issue #25980) in Shell
DESCRIPTION: Sets the `GO111MODULE` environment variable to `off` to disable Go modules, then executes the `go list` command. The command uses the `-e` flag to report errors for erroneous packages, `-test` to include test dependencies, `-deps` to list dependencies, and `-f '{{.Error}}'` to format the output to show only the error message for package `p`. This setup tests a fix for issue #25980.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_e.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=off

# issue 25980: crash in go list -e -test
go list -e -test -deps -f '{{.Error}}' p
```

----------------------------------------

TITLE: Module A Configuration
DESCRIPTION: Configuration for module A requiring version 0.2.0 of module B.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue65363.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.net/a

go 1.18

require example.net/b v0.2.0
```

LANGUAGE: go
CODE:
```
package a

import _ "example.net/b"
```

----------------------------------------

TITLE: Setting Git Environment Variables
DESCRIPTION: Configures Git environment variables for author and committer information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/commit-after-tag.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GIT_AUTHOR_NAME='Bryan C. Mills'
env GIT_AUTHOR_EMAIL='bcmills@google.com'
env GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
env GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL
```

----------------------------------------

TITLE: Declaring FreeBSD Structure Size Constants - Go
DESCRIPTION: Defines constants for the sizes of key FreeBSD kernel structures (e.g., SizeofBpfHdr, SizeofIfData, SizeofIfMsghdr, SizeofSockaddrDatalink, SizeofSockaddrUnix), used for validating data alignment and marshaling native structs to and from Go memory. These are typically required when using unsafe or cgo-based syscalls for low-level device access or packet manipulation.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_13

LANGUAGE: Go
CODE:
```
const SizeofBpfHdr = 32
const SizeofIfData = 96
const SizeofIfMsghdr = 112
const SizeofSockaddrDatalink = 54
const SizeofSockaddrUnix = 106

```

----------------------------------------

TITLE: DWARF debug info listing utility
DESCRIPTION: A Go program that extracts and lists all source file paths from the DWARF debug information in a binary. This is used to verify whether source paths appear in the compiled binary.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_cgo.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package main

import (
	"debug/dwarf"
	"fmt"
	"io"
	"log"
	"os"
	"sort"
)

func main() {
	files, err := run(os.Args[1])
	if err != nil {
		log.Fatal(err)
	}
	for _, file := range files {
		fmt.Println(file)
	}
}

func run(exePath string) ([]string, error) {
	dwarfData, err := readDWARF(exePath)
	if err != nil {
		return nil, err
	}

	dwarfReader := dwarfData.Reader()
	files := make(map[string]bool)
	for {
		e, err := dwarfReader.Next()
		if err != nil {
			return nil, err
		}
		if e == nil {
			break
		}
		lr, err := dwarfData.LineReader(e)
		if err != nil {
			return nil, err
		}
		if lr == nil {
			continue
		}

		var le dwarf.LineEntry
		for {
			if err := lr.Next(&le); err != nil {
				if err == io.EOF {
					break
				}
				return nil, err
			}
			if le.EndSequence {
			    continue
			}
			files[le.File.Name] = true
		}
	}

	sortedFiles := make([]string, 0, len(files))
	for file := range files {
		sortedFiles = append(sortedFiles, file)
	}
	sort.Strings(sortedFiles)
	return sortedFiles, nil
}
```

----------------------------------------

TITLE: Testing x86 and WebAssembly Features
DESCRIPTION: Verifies x86 (386) architecture with SSE2 support and WebAssembly with satconv feature.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/tooltags.txt#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
env GOARCH=386
env GO386=sse2
go list -f '{{context.ToolTags}}'

env GOARCH=wasm
env GOWASM=satconv
go list -f '{{context.ToolTags}}'
```

----------------------------------------

TITLE: Assembly Integration Test in Overlay
DESCRIPTION: Main Go file that calls a function implemented in assembly. Used to test that overlay works correctly with assembly files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package main

func foo() // There will be a "missing function body" error if the assembly file isn't found.

func main() {
	foo()
}
```

----------------------------------------

TITLE: Testing Case-Insensitive Import Collision in Vendor Management
DESCRIPTION: A command that attempts to vendor dependencies with case-insensitive import collisions, which should fail with an error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_collision.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
! go mod vendor
stderr 'case-insensitive import collision'
```

----------------------------------------

TITLE: Using cgo CFLAGS and LDFLAGS in Go with main.go
DESCRIPTION: Implements a minimal Go program that demonstrates the specification of cgo CFLAGS and LDFLAGS via comments above an import of the 'C' pseudo-package. CFLAGS sets the '-flto' flag for Link Time Optimization, while LDFLAGS attempts to link against 'bad.dylib' using the '-lto_library' flag, which causes a build error ('invalid flag in #cgo LDFLAGS: -lto_library'). This setup requires cgo and a supported C toolchain; it is subject to platform-specific constraints and may fail during build if invalid flags are used, as shown in the attached stderr message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/darwin_lto_library_ldflag.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
-- main.go --\npackage main\n\n// #cgo CFLAGS: -flto\n// #cgo LDFLAGS: -lto_library bad.dylib\nimport \"C\"\n\nfunc main() {}
```

----------------------------------------

TITLE: Testing Go list on standard-vendored packages
DESCRIPTION: Verifies that 'go list' can find packages vendored in the standard library by checking their directory path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go list -f '{{.Dir}}' vendor/golang.org/x/net/http2/hpack
stdout $GOROOT[/\\]src[/\\]vendor
```

----------------------------------------

TITLE: Defining Minimal Go Package in Non-Go File (Go)
DESCRIPTION: This code snippet represents the content of the file `c.c`. Despite the `.c` extension, it contains a Go package declaration (`package c`). This file is used specifically to test how the `go list` command handles input files that do not have the expected `.go` extension.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_non_go_files.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
-- c.c --
package c
```

----------------------------------------

TITLE: File Operations Functions in syscall Package for NetBSD ARM64
DESCRIPTION: These functions provide file system operations including opening, reading, writing, seeking, and closing files. They also include functions for retrieving file information and manipulating directory entries.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_73

LANGUAGE: Go
CODE:
```
func Futimes(int, []Timeval) error
func Getdirentries(int, []uint8, *uintptr) (int, error)
func Lstat(string, *Stat_t) error
func Stat(string, *Stat_t) error
func Open(string, int, uint32) (int, error)
func Read(int, []uint8) (int, error)
func Write(int, []uint8) (int, error)
func Pread(int, []uint8, int64) (int, error)
func Pwrite(int, []uint8, int64) (int, error)
func Seek(int, int64, int) (int64, error)
func Truncate(string, int64) error
func ReadDirent(int, []uint8) (int, error)
func ParseDirent([]uint8, int, []string) (int, int, []string)
```

----------------------------------------

TITLE: Empty Go Package Declaration
DESCRIPTION: Declares an empty package named 'x' with no implementations
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_linkshared.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package x
```

----------------------------------------

TITLE: Installing Package After Build
DESCRIPTION: Tests that installing a package after building it does not trigger recompilation. It uses the -x flag for verbose output and checks that no compilation-related messages appear in the stderr.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
go install -x golang.org/x/text/language
! stderr 'compile|cp|gccgo .*language\.a$'
```

----------------------------------------

TITLE: Checking GOWORK Environment Variable in Go Project Root
DESCRIPTION: This snippet checks the GOWORK environment variable in the Go project root directory, ensuring it points to the correct go.work file location.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_env.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go env GOWORK
stdout '^'$GOPATH'[\/]src[\/]go.work$'
go env
stdout '^(set )?GOWORK=''?'$GOPATH'[\/]src[\/]go.work''?$'
```

----------------------------------------

TITLE: iOS ARM64 Platform Configuration
DESCRIPTION: Configuration settings for iOS ARM64 build environment
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_cross_build.txt#2025-04-22_snippet_2

LANGUAGE: conf
CODE:
```
GOOS=ios
GOARCH=arm64
```

----------------------------------------

TITLE: Linux MIPS Platform Configuration
DESCRIPTION: Configuration settings for Linux MIPS build environment
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_cross_build.txt#2025-04-22_snippet_3

LANGUAGE: conf
CODE:
```
GOOS=linux
GOARCH=mips
```

----------------------------------------

TITLE: Simple Go Main Program
DESCRIPTION: Minimal Go program with empty main function used for testing build and install commands
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_cross_gobin.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main
func main() {}
```

----------------------------------------

TITLE: Enabling Go Modules via Environment Variable (Shell)
DESCRIPTION: Sets the GO111MODULE environment variable to 'on'. This command ensures that subsequent Go commands operate in module-aware mode. This is a prerequisite for using 'go mod' commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_path.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Testing Go Work Vendor Command with Empty Workspace and Invalid Modules File
DESCRIPTION: A series of shell commands that test the 'go work vendor' command's behavior when no dependencies exist and when an invalid modules.txt file is present. The commands verify error messages and file existence.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_empty.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go work vendor
stderr 'go: no dependencies to vendor'
! exists vendor/modules.txt
! go list .
stderr 'go: no modules were found in the current workspace'
mkdir vendor
mv bad_modules.txt vendor/modules.txt
! go list .
stderr 'go: no modules were found in the current workspace'
```

----------------------------------------

TITLE: Defining broken module with vendored imports
DESCRIPTION: Defines a module that tries to use packages vendored in the standard library, which should fail to build.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
module broken
```

LANGUAGE: go
CODE:
```
package broken

import (
	_ "net/http"
	_ "golang.org/x/net/http2/hpack"
)
```

----------------------------------------

TITLE: go.work File with Bad Godebug Flag
DESCRIPTION: Contents of go.work.badgodebug.txt file, showing an unknown godebug flag 'foo'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```


godebug foo=1
```

----------------------------------------

TITLE: Go Module Configuration for Invalid Replacement of gopkg.in v3
DESCRIPTION: This go.mod file attempts an invalid replacement of a gopkg.in v3 module with a v4 module, which should result in an error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
module golang.org/issue/34254
go 1.13

require gopkg.in/src-d/go-git.v3 v3.2.0

// This replacement has a go.mod file declaring its path to be
// gopkg.in/src-d/go-git.v4, so it cannot be used as a replacement for v3.
replace gopkg.in/src-d/go-git.v3 v3.2.0 => gopkg.in/src-d/go-git.v3 v3.0.0-20190801152248-0d1a009cbb60
```

----------------------------------------

TITLE: Windows System Structures and Constants
DESCRIPTION: Windows-specific type definitions and constants for certificate handling and token management across 32-bit and 64-bit architectures.
SOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
const TOKEN_ADJUST_SESSIONID = 256
const TOKEN_ALL_ACCESS = 983551
type AddrinfoW struct { Addr Pointer }
type CertContext struct { CertInfo *CertInfo }
type CertInfo struct
type CertRevocationInfo struct { 
    CrlInfo *CertRevocationCrlInfo
    OidSpecificInfo Pointer
}
type Pointer *struct
```

----------------------------------------

TITLE: Testing Untagged Commit Resolution to +incompatible Pseudo-version
DESCRIPTION: Tests that requesting an untagged commit still produces an appropriate +incompatible pseudo-version when needed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_9

LANGUAGE: shell
CODE:
```
go list -m github.com/rsc/legacytest@7303f7796364
stdout '^github.com/rsc/legacytest v2\.0\.1-0\.20180717164253-7303f7796364\+incompatible$'
```

----------------------------------------

TITLE: Complete Go Module Dependencies
DESCRIPTION: Complete go.sum file containing all required module checksums for the build.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_missing_ziphash.txt#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:pvCbr/wm8HzDD3fVywevekufpn6tCGPY3spdHeZJEsw=
golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
rsc.io/quote v1.5.2 h1:3fEykkD9k7lYzXqCYrwGAf7iNhbk4yCjHmKBN9td4L0=
rsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=
rsc.io/sampler v1.3.0 h1:HLGR/BgEtI3r0uymSP/nl2uPLsUnNJX8toRyhfpBTII=
rsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=
rsc.io/testonly v1.0.0 h1:K/VWHdO+Jv7woUXG0GzVNx1czBXUt3Ib1deaMn+xk64=
rsc.io/testonly v1.0.0/go.mod h1:OqmGbIFOcF+XrFReLOGZ6BhMM7uMBiQwZsyNmh74SzY=
```

----------------------------------------

TITLE: Module Definition with Dropped Exclusion
DESCRIPTION: Simplified module definition after dropping excluded version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_require_exclude.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module x

go 1.13

exclude rsc.io/sampler v1.99.99
```

----------------------------------------

TITLE: Describing Module Evolution in Plaintext - Plaintext
DESCRIPTION: This snippet serves as a README to document versioned package additions within the module example.net/pkgadded. It outlines that the root package is added in v1.1.0 and a subpackage in v1.2.0, clarifying the intended use and timeline of these components for users and contributors. No specific dependencies are required, and it is meant to be read by humans rather than processed by tools.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
-- README.txt --
We will add the package example.net/pkgadded in v1.1.0,
and example.net/pkgadded/subpkg in v1.2.0.
```

----------------------------------------

TITLE: Deprecations in syscall package for freebsd-386
DESCRIPTION: Lists deprecated functions and types in the syscall package for freebsd-386 architecture.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_32

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386), func BpfBuflen //deprecated
pkg syscall (freebsd-386), func BpfDatalink //deprecated
pkg syscall (freebsd-386), func BpfHeadercmpl //deprecated
pkg syscall (freebsd-386), func BpfInterface //deprecated
pkg syscall (freebsd-386), func BpfJump //deprecated
pkg syscall (freebsd-386), func BpfStats //deprecated
pkg syscall (freebsd-386), func BpfStmt //deprecated
pkg syscall (freebsd-386), func BpfTimeout //deprecated
pkg syscall (freebsd-386), func CheckBpfVersion //deprecated
pkg syscall (freebsd-386), func FlushBpf //deprecated
pkg syscall (freebsd-386), func ParseRoutingMessage //deprecated
pkg syscall (freebsd-386), func ParseRoutingSockaddr //deprecated
pkg syscall (freebsd-386), func RouteRIB //deprecated
pkg syscall (freebsd-386), func SetBpf //deprecated
pkg syscall (freebsd-386), func SetBpfBuflen //deprecated
pkg syscall (freebsd-386), func SetBpfDatalink //deprecated
pkg syscall (freebsd-386), func SetBpfHeadercmpl //deprecated
pkg syscall (freebsd-386), func SetBpfImmediate //deprecated
pkg syscall (freebsd-386), func SetBpfInterface //deprecated
pkg syscall (freebsd-386), func SetBpfPromisc //deprecated
pkg syscall (freebsd-386), func SetBpfTimeout //deprecated
pkg syscall (freebsd-386), func StringSlicePtr //deprecated
pkg syscall (freebsd-386), type InterfaceAddrMessage //deprecated
pkg syscall (freebsd-386), type InterfaceAnnounceMessage //deprecated
pkg syscall (freebsd-386), type InterfaceMessage //deprecated
pkg syscall (freebsd-386), type InterfaceMulticastAddrMessage //deprecated
pkg syscall (freebsd-386), type RouteMessage //deprecated
pkg syscall (freebsd-386), type RoutingMessage //deprecated
```

----------------------------------------

TITLE: Go Module Requirements Configuration
DESCRIPTION: Defines a Go module named example.com/downgrade with a dependency on rsc.io/quote version 1.5.2.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_downgrade_v2.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/downgrade

require rsc.io/quote v1.5.2
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module named 'm' with Go 1.16 as the required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pattern.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Basic Go module definition file specifying the module name
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile5_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module rsc.io/badfile5
```

----------------------------------------

TITLE: Testing GODEBUG Fallback (Go)
DESCRIPTION: This snippet tests the GODEBUG fallback mechanism. It sets GODEBUG=gotestjsonbuildtext=1 and verifies the output format changes accordingly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_build.txt#2025-04-22_snippet_5

LANGUAGE: Shell
CODE:
```
env GODEBUG=gotestjsonbuildtext=1
! go test -json -o=$devnull ./builderror
stderr '# m/builderror \[m/builderror.test\]\n'
stderr 'builderror'${/}'main_test.go:3:11: undefined: y\n'
stdout '"Action":"start","Package":"m/builderror"'
stdout '"Action":"output","Package":"m/builderror","Output":"FAIL\\tm/builderror \[build failed\]\\n"'
stdout '"Action":"fail","Package":"m/builderror","Elapsed":[0-9.]+\}'
! stdout '"FailedBuild"'
```

----------------------------------------

TITLE: Initial Go Module Definition
DESCRIPTION: Basic go.mod file defining a module named 'x' without any dependencies
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_quote.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module x
```

----------------------------------------

TITLE: Testing Go Module Pseudo-Version Generation
DESCRIPTION: Performs a series of Go commands to test the pseudo-version generation for a module in a subdirectory, verifying that it's based on the correct prefixed tag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo_prefix.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go get vcs-test.golang.org/git/prefixtagtests.git/sub
go list -m all
stdout '^vcs-test.golang.org/git/prefixtagtests.git/sub v0.0.10$'

go get -u vcs-test.golang.org/git/prefixtagtests.git/sub@master
go list -m all
stdout '^vcs-test.golang.org/git/prefixtagtests.git/sub v0.0.11-0\.'
```

----------------------------------------

TITLE: Checking Default GOMODCACHE Location in Go
DESCRIPTION: This snippet verifies the default location of GOMODCACHE when it's not explicitly set, which should be $GOPATH[0]/pkg/mod.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache.txt#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
env GOMODCACHE=
go env GOMODCACHE
stdout $GOPATH[/\\]pkg[/\\]mod
go get rsc.io/quote@v1.0.0
exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.0.0.info
grep '{"Version":"v1.0.0","Time":"2018-02-14T00:45:20Z"}' $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.0.0.info
```

----------------------------------------

TITLE: Setting and Clearing GOTMPDIR
DESCRIPTION: This snippet demonstrates how to set and clear the GOTMPDIR environment variable using 'go env -w' and 'go env -u'. It also shows that the directory is not created automatically.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
# go env -w should accept absolute GOTMPDIR value
# and should not create it
[GOOS:windows] go env -w GOTMPDIR=$WORK\x\y\z
[!GOOS:windows] go env -w GOTMPDIR=$WORK/x/y/z
! exists $WORK/x/y/z
# we should be able to clear an env
go env -u GOTMPDIR
go env GOTMPDIR
stdout ^$

[GOOS:windows] go env -w GOTMPDIR=$WORK\x\y\z
[!GOOS:windows] go env -w GOTMPDIR=$WORK/x/y/z
go env -w GOTMPDIR=
go env GOTMPDIR
stdout ^$
```

----------------------------------------

TITLE: Data Link Types Definition - NetBSD ARM64
DESCRIPTION: Defines constants for various Data Link Types (DLT) used in network packet capture and analysis on NetBSD ARM64 platform. Includes definitions for Ethernet, FDDI, IEEE 802.11, and other network protocols.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_119

LANGUAGE: Go
CODE:
```
const (
    DLT_NULL = 0
    DLT_EN10MB = 1
    DLT_EN3MB = 2
    DLT_AX25 = 3
    DLT_CHAOS = 5
    DLT_IEEE802 = 6
    DLT_ARCNET = 7
    DLT_FDDI = 10
    DLT_ATM_RFC1483 = 11
    DLT_IEEE802_11 = 105
    DLT_IEEE802_11_RADIO = 127
    DLT_IEEE802_15_4 = 195
    DLT_IEEE802_16_MAC_CPS = 188
)
```

----------------------------------------

TITLE: Go Module Version Information
DESCRIPTION: This JSON snippet provides metadata about the module version, essential for version tracking and module distribution. It represents the version 'v2.0.1' of the module example.com/latemigrate/v2.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_latemigrate_v2_v2.0.1.txt#2025-04-22_snippet_1

LANGUAGE: JSON
CODE:
```
{"Version":"v2.0.1"}
```

----------------------------------------

TITLE: Initializing and Managing Go Module Dependencies
DESCRIPTION: This snippet demonstrates initializing a Go module, fetching dependencies, and listing all modules. It shows how Go handles dependencies from files with different build tags.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tags.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on

# get should add modules needed to build packages, even if those
# dependencies are in sources excluded by build tags.
# All build tags are considered true except "ignore".
go mod init m
go get .
go list -m all
stdout 'example.com/version v1.1.0'
stdout 'rsc.io/quote v1.5.2'
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_overlay.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Basic Go Program for Cross-Compilation Testing
DESCRIPTION: Minimal Go program with empty main function used to test cross-compilation functionality for ARM Linux platform. Functions as a validation test to ensure basic compilation works without math library dependency errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_arm.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Defining Module Version Metadata - JSON
DESCRIPTION: Provides version metadata (v1.0.0-long) for the Go module using a JSON object. This .info file is typically generated by the Go tooling and may be required by Go module proxies or for internal bookkeeping. The file includes a single key ('Version') and expects a semver version string as its value.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-long.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{\"Version\":\"v1.0.0-long\"}
```

----------------------------------------

TITLE: Testing Fuzzing Input Minimization in Go
DESCRIPTION: Shell script that tests the fuzzing engine's minimization capabilities. It builds a test binary, runs fuzzing tests, and verifies that discovered inputs are properly minimized before being stored in the cache.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_interesting.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go test -c -fuzz=.  # Build using shared build cache for speed.
env GOCACHE=$WORK/gocache
exec ./fuzz.test$GOEXE -test.fuzzcachedir=$GOCACHE/fuzz -test.fuzz=FuzzMinCache -test.fuzztime=1000x
go run check_cache/check_cache.go $GOCACHE/fuzz/FuzzMinCache
```

----------------------------------------

TITLE: Testing module version detection with commit hash
DESCRIPTION: Tests go get with a specific commit hash which should detect the correct pseudo-version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_issue53955.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
cd $WORK/m
go get -x github.com/golang/issue53955@2cb3d49f
stderr '^go: added github.com/golang/issue53955 v1.0.10-0.20220719150701-2cb3d49f8874$'
```

----------------------------------------

TITLE: Testing Go Module Security Protocol Fallback Behavior
DESCRIPTION: A regression test for issue #63845 that verifies the Go toolchain doesn't fall back to insecure protocols when secure protocols fail. The test sets environment variables to prevent network access and checks error messages for expected protocol attempts.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_insecure_issue63845.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
[!net:golang.org] skip
[!git] skip
[short] skip 'tries to access a nonexistent external Git repo'

env GOPRIVATE=golang.org
env CURLOPT_TIMEOUT_MS=100
env GIT_SSH_COMMAND=false

! go get -x golang.org/nonexist.git@latest
stderr '^git ls-remote https://golang.org/nonexist$'
stderr '^git ls-remote git\+ssh://golang.org/nonexist'
stderr '^git ls-remote ssh://golang.org/nonexist$'
! stderr 'git://'
stderr '^go: golang.org/nonexist.git@latest: no secure protocol found for repository$'
```

----------------------------------------

TITLE: Configuring Module 'a' with Dependency on 'b'
DESCRIPTION: This go.mod file defines module 'a'. It requires module 'b' at version v0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
-- a1/go.mod --
module a

go 1.17

require b v0.1.0
```

----------------------------------------

TITLE: Verifying go env GOMOD behavior
DESCRIPTION: Checks that 'go env GOMOD' returns the path to the original go.mod file, as it does not recognize the -modfile flag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go env GOMOD
stdout '^'$WORK${/}gopath${/}src${/}'go\.mod$'
```

----------------------------------------

TITLE: Invalid Go Package Declaration
DESCRIPTION: This file contains an invalid Go package declaration. It uses 'pkg mypackage' instead of the correct 'package mypackage' syntax, which would cause syntax errors during compilation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/pattern_syntax_error.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
pkg mypackage
```

----------------------------------------

TITLE: Defining Routing Table Constants in Go for Darwin ARM64 CGO
DESCRIPTION: This snippet defines constants for routing table operations used in system calls on Darwin ARM64 with CGO. These constants are used for network routing configuration.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_173

LANGUAGE: Go
CODE:
```
const RTAX_AUTHOR = 6
const RTAX_AUTHOR ideal-int
const RTAX_BRD = 7
const RTAX_BRD ideal-int
const RTAX_DST = 0
const RTAX_DST ideal-int
const RTAX_GATEWAY = 1
const RTAX_GATEWAY ideal-int
const RTAX_GENMASK = 3
const RTAX_GENMASK ideal-int
const RTAX_IFA = 5
const RTAX_IFA ideal-int
const RTAX_IFP = 4
const RTAX_IFP ideal-int
const RTAX_MAX = 8
const RTAX_MAX ideal-int
const RTAX_NETMASK = 2
const RTAX_NETMASK ideal-int
const RTA_AUTHOR = 64
const RTA_AUTHOR ideal-int
const RTA_BRD = 128
const RTA_BRD ideal-int
const RTA_DST = 1
const RTA_DST ideal-int
const RTA_GATEWAY = 2
const RTA_GATEWAY ideal-int
const RTA_GENMASK = 8
const RTA_GENMASK ideal-int
const RTA_IFA = 32
const RTA_IFA ideal-int
const RTA_IFP = 16
const RTA_IFP ideal-int
const RTA_NETMASK = 4
const RTA_NETMASK ideal-int
```

----------------------------------------

TITLE: Specifying Module Version Metadata in JSON
DESCRIPTION: This JSON snippet from a `.info` file provides metadata about a specific module version. It includes the 'Version' identifier ('v0.0.0-20190619020302-197a620e0c9a') and the 'Time' the version was created ('2019-06-18T19:03:02-07:00'). This is often used by Go tooling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/github.com_dmitshur-test_modtest5_v0.0.0-20190619020302-197a620e0c9a.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
-- .info --
{"Version":"v0.0.0-20190619020302-197a620e0c9a","Time":"2019-06-18T19:03:02-07:00"}
```

----------------------------------------

TITLE: Testing Go Get Failure with Bad Zip (Shell)
DESCRIPTION: This sequence attempts to fetch the `rsc.io/badzip` module using `go get`. The `!` prefix indicates the command is expected to fail. The `stderr` directive checks if the standard error output matches the expected message, confirming rejection due to the unexpected file name in the zip. The `! grep` command verifies that the problematic dependency was not added to the `go.mod` file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badzip.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
! go get rsc.io/badzip
stderr 'zip for rsc.io/badzip@v1.0.0 has unexpected file rsc.io/badzip@v1.0.0.txt'
! grep rsc.io/badzip go.mod
```

----------------------------------------

TITLE: Main Package Implementation in Overlay
DESCRIPTION: Main Go file in the overlay that imports the dir2 package and calls its PrintMessage function. This file is used to test the basic functionality of overlays.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

import "m/dir2"

func main() {
	dir2.PrintMessage()
}
```

----------------------------------------

TITLE: Validating go list Origin Output for Specific, Stable Proxy Version - Shell
DESCRIPTION: This snippet uses 'go list' to fetch a specific pseudo-version known to exist in the proxy. It then confirms that the proxy’s available VCS origin data is output, but fields such as 'Ref' and 'TagSum' are omitted if unavailable. This verifies that only origin data connected to that precise commit is shown, and that partial details are not fabricated. Requires local proxy with the relevant version present.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61423.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
# However, if we list a specific, stable version, we should get
# whatever origin metadata the proxy has for the version.

go list -m -json vcs-test.golang.org/git/issue61415.git@v0.0.0-20231114180000-08a4fa6bb9c0
cp stdout proxy-version.json
stdout '"Version": "v0.0.0-20231114180000-08a4fa6bb9c0"'
stdout '"Origin":'
stdout '"VCS": "git"'
stdout '"Hash": "08a4fa6bb9c04ffba03b26ae427b0d6335d90a2a"'
! stdout '"Ref":'
! stdout '"TagSum":'

```

----------------------------------------

TITLE: Empty Go Package for Path Separator Test
DESCRIPTION: An empty Go package file (pkg.go) used as part of the test setup. It only contains the package declaration without any actual code.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_script_cmdcd.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package pkg
```

----------------------------------------

TITLE: Initializing Empty Go Source File for b - Go
DESCRIPTION: This file declares package b with neither functions nor exports. It is present so that the module b can be imported and used in the dependency resolution process. No functionality or outputs are produced.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package b
```

----------------------------------------

TITLE: Implementing a Basic Function in pkg3 - Go
DESCRIPTION: This code defines package 'pkg3' with a single function F that prints 'pkg3' to the standard output. It exemplifies a minimal Go package meant to be fully covered by its test code for test runner verification.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_statements.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package pkg3

import "fmt"

func F() {
	fmt.Println("pkg3")
}
```

----------------------------------------

TITLE: Net Package Build Version
DESCRIPTION: Main function implementation for the net build tag version that imports the net package and calls the module handle check.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/ws2_32.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
//go:build net
package main

import _ "net"

func main() {
    hasModuleHandle()
}
```

----------------------------------------

TITLE: Merging Branches and Showing References
DESCRIPTION: Merges branch 'b' into master and displays all tags and branch references.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/tagtests.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
git checkout master
git merge b -m 'merge'

git show-ref --tags --heads
cmp stdout .git-refs
```

----------------------------------------

TITLE: Test2PKG Package Import Definition
DESCRIPTION: HTML template defining svn import path for test2PKG package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/test2-svn-git.txt#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<meta name="go-import" content="vcs-test.golang.org/go/test2-svn-git/test2PKG svn https://vcs-test.golang.org/svn/test2-svn-git">
```

----------------------------------------

TITLE: Testing Long CGO LDFLAGS with Go Generate
DESCRIPTION: A Go script that generates a file with excessively long CGO LDFLAGS (10,000 rpath entries) to test the build system's handling of long command lines. This addresses issue #66456 where "argument list too long" errors would occur.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_long_cmd.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
//go:build ignore

package main

import (
	"fmt"
	"log"
	"os"
	"bytes"
)

func main() {
	var buf bytes.Buffer
	buf.WriteString("package p\n")
	buf.WriteString("// #cgo LDFLAGS:")
	for i := range 10000 {
		fmt.Fprintf(&buf, " -Wl,-rpath,/nonexistentpath/%d", i)
	}
	buf.WriteString("\n")
	buf.WriteString(`import "C"`+"\n")
	if err := os.WriteFile("generated.go", buf.Bytes(), 0o644); err != nil {
		log.Fatal(err)
	}
}
```

----------------------------------------

TITLE: Reusing Metadata for a Nested Module
DESCRIPTION: This snippet reuses previously fetched metadata using a JSON file. The Go command leverages the '-reuse' flag to avoid fetching metadata again, reducing unnecessary computation. It assumes the existence of a valid JSON file with metadata information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61415.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go list -reuse=has-nested.json -json -m --versions -e vcs-test.golang.org/git/issue61415.git/nested@has-nested
```

----------------------------------------

TITLE: Testing 'go mod download' with dependency requiring newer Go version
DESCRIPTION: Tests that 'go mod download' without arguments updates the 'go' and 'toolchain' lines to be consistent with existing requirements in the module graph when a dependency requires a newer Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
go mod edit -require=rsc.io/needall@v0.0.1
cp go.mod go.mod.121

# If an upgrade is needed, GOTOOLCHAIN=go1.21 should cause
# the command to fail without changing go.mod.

env GOTOOLCHAIN=go1.21
! go mod download
stderr 'rsc.io/needall@v0.0.1 requires go >= 1.23'
! stderr switching
cmp go.mod go.mod.121

# If an upgrade is needed, GOTOOLCHAIN=auto should perform
# the upgrade and record the resulting toolchain version.

env GOTOOLCHAIN=auto
go mod download
stderr '^go: module rsc.io/needall@v0.0.1 requires go >= 1.23; switching to go1.23.9$'
cmp go.mod go.mod.final
```

----------------------------------------

TITLE: Lazy Package Implementation
DESCRIPTION: The implementation file for the 'lazy' package that is imported by the main module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
package lazy
```

----------------------------------------

TITLE: Testing pkg@version Syntax Rejection with 'go build' in Module-Aware Mode
DESCRIPTION: This test script verifies that the pkg@version syntax is properly rejected when using 'go build' command in module-aware mode (GO111MODULE=on), as this syntax is only allowed with 'go get' and 'go install' commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_versions.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
cd x
! go build rsc.io/quote@v1.5.1
stderr '^package rsc.io/quote@v1.5.1: can only use path@version syntax with ''go get'' and ''go install'' in module-aware mode$'
```

----------------------------------------

TITLE: Package Definition with '@' in Path
DESCRIPTION: Go file within a directory containing '@' in its name, used to test package resolution with special characters in the path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
package bad
```

----------------------------------------

TITLE: Handling Relative Paths in CC and CXX Variables
DESCRIPTION: This snippet tests the behavior of 'go env -w' when setting CC and CXX variables with relative paths. It demonstrates that absolute paths are required for these variables.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
# go env -w rejects relative CC values
[!GOOS:windows] go env -w CC=/usr/bin/clang
go env -w CC=clang
[!GOOS:windows] ! go env -w CC=./clang
[!GOOS:windows] ! go env -w CC=bin/clang
[!GOOS:windows] stderr 'go: CC entry is relative; must be absolute path'

[GOOS:windows] go env -w CC=$WORK\bin\clang
[GOOS:windows] ! go env -w CC=.\clang
[GOOS:windows] ! go env -w CC=bin\clang
[GOOS:windows] stderr 'go: CC entry is relative; must be absolute path'

# go env -w rejects relative CXX values
[!GOOS:windows] go env -w CC=/usr/bin/cpp
go env -w CXX=cpp
[!GOOS:windows] ! go env -w CXX=./cpp
[!GOOS:windows] ! go env -w CXX=bin/cpp
[!GOOS:windows] stderr 'go: CXX entry is relative; must be absolute path'

[GOOS:windows] go env -w CXX=$WORK\bin\cpp
[GOOS:windows] ! go env -w CXX=.\cpp
[GOOS:windows] ! go env -w CXX=bin\cpp
[GOOS:windows] stderr 'go: CXX entry is relative; must be absolute path'
```

----------------------------------------

TITLE: Testing Invalid Flag Combination (JSON then Template)
DESCRIPTION: Verifies that using both -json and -f flags together (in that order) produces an error
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_json_with_f.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
! go list -json -f '{{.}}' ./...
```

----------------------------------------

TITLE: Testing Module Download with Tag Tests
DESCRIPTION: Tests module download functionality using tagged versions and verifies metadata in the response.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/reuse_git.txt#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
go mod download -reuse=tagtests.json -x -json vcs-test.golang.org/git/tagtests.git@latest
```

----------------------------------------

TITLE: Defining Go Module Path - go.mod (Plain Text)
DESCRIPTION: This snippet contains the module path declaration for the Go toolchain project, essential for setting the module context in Go's dependency management system. By specifying 'golang.org/toolchain' as the module path, it informs the Go tooling where the root of the module is, which is critical for build and dependency resolution. No version is specified in this format; it relies on surrounding files such as go.mod or version tags for version information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.3.linux-amd64.txt#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: Module Definition in .mod File
DESCRIPTION: Defines the module name for the Go toolchain test package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-arm.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Providing Go Module Version Metadata - JSON
DESCRIPTION: Specifies module version information in a JSON format, typically used in Go module proxies or the module cache. This snippet contains the 'Version' key identifying the semantic version of the module. No dependencies or parameters are permitted; it serves as inline module metadata for Go tooling and consumers.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_incompatible_v2.0.0+incompatible.txt#2025-04-22_snippet_1

LANGUAGE: JSON
CODE:
```
{\"Version\":\"v2.0.0+incompatible\"}
```

----------------------------------------

TITLE: Test File with Import
DESCRIPTION: Test file importing package p2 as a dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_import_error_stack.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package p1

import _ "testdep/p2"
```

----------------------------------------

TITLE: ELF Dynamic Tags Constants
DESCRIPTION: Constants defining various dynamic tags used in ELF binary format. These constants are of type DynTag and represent different dynamic linking information.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
const (
    DT_ADDRRNGHI DynTag = 1879047935
    DT_ADDRRNGLO DynTag = 1879047680
    // ... additional DT_ constants
)
```

----------------------------------------

TITLE: Main Package File for Module 'm'
DESCRIPTION: Simple Go file defining package x in the main module 'm'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package x
```

----------------------------------------

TITLE: File System Operation Functions for Darwin ARM64 in Go
DESCRIPTION: Function declarations for file system operations in the syscall package for Darwin ARM64. These functions provide interfaces to system calls for operations like changing directory, flags, and root.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_119

LANGUAGE: Go
CODE:
```
pkg syscall (darwin-arm64), func Chflags(string, int) error
pkg syscall (darwin-arm64), func Chroot(string) error
pkg syscall (darwin-arm64), func Fchdir(int) error
pkg syscall (darwin-arm64), func Exchangedata(string, string, int) error
```

----------------------------------------

TITLE: Defining Empty Go Program
DESCRIPTION: Defines an empty Go program with a main function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_9

LANGUAGE: Go
CODE:
```
package main
func main(){}
```

----------------------------------------

TITLE: Simple Go Main Package
DESCRIPTION: A minimal Go program with an empty main function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/no-tags.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Testing Go Build Failure with Bad Zip Dependency (Shell)
DESCRIPTION: This command attempts to build the `rsc.io/badzip` module, forcing the use of the `go.mod` file (`-mod=mod`). The `!` prefix indicates the command is expected to fail. The `stderr` directive verifies that the build process fails with the same error message about the unexpected file in the zip archive, even though the dependency was manually added to `go.mod`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badzip.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
! go build -mod=mod rsc.io/badzip
stderr 'zip for rsc.io/badzip@v1.0.0 has unexpected file rsc.io/badzip@v1.0.0.txt'
```

----------------------------------------

TITLE: Testing \B with Dot and End Anchors in Go Regexps
DESCRIPTION: Tests patterns that combine non-word boundary assertions (\B) with the dot metacharacter and end anchors. These tests check how any character matches with non-word boundary constraints.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_11

LANGUAGE: regexp
CODE:
```
\B.$
```

LANGUAGE: regexp
CODE:
```
^(?:\B.$)$
```

LANGUAGE: regexp
CODE:
```
^(?:\B.$)
```

LANGUAGE: regexp
CODE:
```
(?:\B.$)$
```

----------------------------------------

TITLE: Testing t.Fatalf() in Go Fuzz Tests
DESCRIPTION: This function tests how Go's fuzzing handles a call to t.Fatalf(). It reports a fatal error and stops the test when the input is not 'aa'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
func FuzzWithFatalf(f *testing.F) {
	f.Add([]byte("aa"))
	f.Fuzz(func(t *testing.T, b []byte) {
		if string(b) != "aa" {
			t.Fatalf("fatalf was called here")
		}
	})
}
```

----------------------------------------

TITLE: Checksum Configuration
DESCRIPTION: Checksum files containing dependency verification information for the external packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sum.txt#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:pvCbr/wm8HzDD3fVywevekufpn6tCGPY3spdHeZJEsw=
golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
rsc.io/quote v1.5.2 h1:3fEykkD9k7lYzXqCYrwGAf7iNhbk4yCjHmKBN9td4L0=
rsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=
```

----------------------------------------

TITLE: Defining Simple External Package 'b' (Go)
DESCRIPTION: This snippet defines the content of the `b/b.go` file. It simply declares an empty package named `b`. This file exists in a separate directory and is used in the test to check how `go list` handles file paths outside the current module's immediate directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_command_line_arguments.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
-- b/b.go --
package b
```

----------------------------------------

TITLE: Defining Package 'b' in Go
DESCRIPTION: This Go source file defines a minimal package 'b'. It contains no exported identifiers and serves primarily as a node in the dependency graph.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
-- b1/b.go --
package b
```

----------------------------------------

TITLE: Testing 'go mod download' Command Outside Module
DESCRIPTION: Demonstrates the behavior of 'go mod download' when run outside a module, including downloading specific versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
! go mod download
stderr 'no modules specified'

rm -r $GOPATH/pkg/mod/cache/download/example.com
go mod download example.com/printversion@v1.0.0
exists $GOPATH/pkg/mod/cache/download/example.com/printversion/@v/v1.0.0.zip
! exists $GOPATH/pkg/mod/cache/download/example.com/version/@v/v1.0.0.zip

! go mod download all
stderr 'go: cannot match "all": go.mod file not found in current directory or any parent directory; see ''go help modules''$'
```

----------------------------------------

TITLE: Go Mod Definition
DESCRIPTION: Defines a sample go.mod file for the module 'm'. This module uses go version 1.14.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_13

LANGUAGE: go
CODE:
```
module m

go 1.14
```

----------------------------------------

TITLE: Buggy Test Implementation in Go
DESCRIPTION: A deliberately failing test in the buggy package that always calls t.Fatal. This appears to be used for testing error handling or test failures.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
func Test(t *testing.T) {
	t.Fatal("buggy!")
}
```

----------------------------------------

TITLE: Configuring Go Import Path for missingrepo-git/notmissing Repository in HTML
DESCRIPTION: HTML snippet with go-import metadata tag that maps the import path vcs-test.golang.org/go/missingrepo/missingrepo-git/notmissing to a Git repository at vcs-test.golang.org/git/mainonly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/missingrepo.txt#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<meta name="go-import" content="vcs-test.golang.org/go/missingrepo/missingrepo-git/notmissing git https://vcs-test.golang.org/git/mainonly">
```

----------------------------------------

TITLE: Testing Installation with Relative GOBIN Path in Shell
DESCRIPTION: Shell commands that test Go's installation behavior when GOBIN is set to a relative path ("."). The expected result is an error stating that GOBIN must be an absolute path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_relative_gobin_fail.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GOBIN=.
! go install
stderr 'cannot install, GOBIN must be an absolute path'
```

----------------------------------------

TITLE: Main Go File
DESCRIPTION: Empty main package definition for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_commandline.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
package main
```

----------------------------------------

TITLE: Testing t.Log() and t.Fail() Combination in Go Fuzz Tests
DESCRIPTION: This function tests how Go's fuzzing handles a combination of t.Log() and t.Fail(). It logs a message and fails the test when the input is not 'aa'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
func FuzzWithLogFail(f *testing.F) {
	f.Add([]byte("aa"))
	f.Fuzz(func(t *testing.T, b []byte) {
		if string(b) != "aa" {
			t.Log("logged something")
			t.Fail()
		}
	})
}
```

----------------------------------------

TITLE: Testing Go List Failure After Manual Module Edit (Shell)
DESCRIPTION: Restores the original `go.mod`, manually edits it to require `example.com/badchain/a@v1.1.0` (which has the problematic dependency chain), and then attempts to list all modules using `go list -m all`. This list command is expected to fail (`!`) due to the path mismatch encountered when resolving dependencies. The script compares the actual standard error output with the expected error message stored in `list-expected`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
# Update manually. Listing modules should produce an error.
cp go.mod.orig go.mod
go mod edit -require=example.com/badchain/a@v1.1.0
! go list -m all
cmp stderr list-expected
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: Defines a Go module named 'example.com/pkg_test' using Go version 1.17.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath_test_suffix.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/pkg_test

go 1.17
```

----------------------------------------

TITLE: Go Package Interface
DESCRIPTION: Go package declaration that exposes the ObjTest function implemented in assembly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_issue33139.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package syso

func ObjTest()
```

----------------------------------------

TITLE: Submodule X Configuration
DESCRIPTION: Configuration and implementation for the example.com/x submodule.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_replaced.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/x

go 1.16
```

LANGUAGE: go
CODE:
```
package x
```

----------------------------------------

TITLE: Defining Module Version Metadata for Go Tooling - JSON
DESCRIPTION: Provides version metadata ('v1.0.0-bad') for the Go module using a .info JSON file. This is typically generated by Go's proxy infrastructure for version tracking and validation. The file helps in managing and retrieving specific module versions, with 'Version' being the key parameter, and is consumed internally by Go tools, not directly by users.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prev_v1.0.0-bad.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{\"Version\":\"v1.0.0-bad\"}
```

----------------------------------------

TITLE: Socket and Network Functions in syscall Package for NetBSD ARM64
DESCRIPTION: These functions provide network socket operations including creating, binding, connecting, and closing sockets. They also handle options, addressing, and data transfer over sockets.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_74

LANGUAGE: Go
CODE:
```
func Socket(int, int, int) (int, error)
func Socketpair(int, int, int) ([2]int, error)
func Bind(int, Sockaddr) error
func Connect(int, Sockaddr) error
func Listen(int, int) error
func Getpeername(int) (Sockaddr, error)
func Getsockname(int) (Sockaddr, error)
func Recvfrom(int, []uint8, int) (int, Sockaddr, error)
func Sendto(int, []uint8, int, Sockaddr) error
func Recvmsg(int, []uint8, []uint8, int) (int, int, int, Sockaddr, error)
func Sendmsg(int, []uint8, []uint8, Sockaddr, int) error
func SendmsgN(int, []uint8, []uint8, Sockaddr, int) (int, error)
func Shutdown(int, int) error
```

----------------------------------------

TITLE: Test File for Package 'b'
DESCRIPTION: Empty test file for package 'b' that enables the package to be included in test coverage when running 'go test ./...'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_single_error.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package b
```

----------------------------------------

TITLE: Testing Go Get Command with Malformed Module Paths
DESCRIPTION: This snippet tests the 'go get' command with malformed module paths and verifies that appropriate error messages are displayed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_domain.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
! go get appengine
stderr '^go: malformed module path "appengine": missing dot in first path element$'
! go get x/y.z
stderr 'malformed module path "x/y.z": missing dot in first path element'
```

----------------------------------------

TITLE: Defining SysProcAttr Struct for Process Attributes in Go Syscall Package
DESCRIPTION: The SysProcAttr struct represents process creation attributes in the syscall package for Darwin ARM64. It allows configuration of process behaviors like process groups, credentials, terminal settings, and chroot environments when starting new processes.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_210

LANGUAGE: Go
CODE:
```
type SysProcAttr struct {
    Chroot       string
    Credential   *Credential
    Ctty         int
    Foreground   bool
    Noctty       bool
    Pgid         int
    Ptrace       bool
    Setctty      bool
    Setpgid      bool
    Setsid       bool
}
```

----------------------------------------

TITLE: Executing Go Module Commands
DESCRIPTION: This snippet shows attempts to download and list modules in the current workspace. Both commands result in an error indicating no modules were found.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_no_mod_root_issue54419.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
cd m
! go mod download
stderr 'no modules were found in the current workspace'

! go list -m all
stderr 'no modules were found in the current workspace'
```

----------------------------------------

TITLE: Defining Module in .mod File
DESCRIPTION: Simple .mod file declaring the module name for the Golang toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-386.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Testing 'go list .' in GOROOT/src (GOPATH Mode) (Shell)
DESCRIPTION: While in $GOROOT/src and with Go module mode disabled (GOPATH mode), this runs `go list .`. It checks that the command successfully outputs the synthesized GOPATH-style import path for the current directory (`$WORK/goroot/src` or `goroot/src` on Windows), confirming the expected legacy behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_9

LANGUAGE: sh
CODE:
```
go list .
[!GOOS:windows] stdout ^_$WORK/goroot/src$
[GOOS:windows] stdout goroot/src$
```

----------------------------------------

TITLE: Testing Directory Symlink Handling in Go Modules
DESCRIPTION: A test script that sets GO111MODULE=on, creates a symlink from dir.go to a directory, and verifies that 'go list' correctly ignores the symlink while including actual Go source files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_symlink_dotgo.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
[!symlink] skip

symlink dir.go -> dir

# Issue #39841: symlinks to directories should be ignored, not treated as source files.
go list -f '{{range .GoFiles}}{{.}}{{"\n"}}{{end}}' .
stdout 'p\.go$'
! stdout 'dir\.go$'
```

----------------------------------------

TITLE: Module Definitions for Test Dependencies
DESCRIPTION: A series of go.mod files for the test dependencies with different Go version requirements, used to test the toolchain switching mechanism.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
// a1/go.mod
module example.net/a

go 1.20
```

LANGUAGE: go
CODE:
```
// a2/go.mod
module example.net/a

go 1.22.0

toolchain go1.23.0
```

LANGUAGE: go
CODE:
```
// b1/go.mod
module example.net/b

go 1.22.0

toolchain go1.23.0
```

LANGUAGE: go
CODE:
```
// c1/go.mod
module example.net/c

go 1.22.0

require example.net/d v0.1.0
```

LANGUAGE: go
CODE:
```
// d1/go.mod
module example.net/d

go 1.22.0
```

LANGUAGE: go
CODE:
```
// d2/go.mod
module example.net/d

go 1.23.0
```

----------------------------------------

TITLE: Testing Directory Access in Go Package a
DESCRIPTION: A test function for package a that verifies the existence of a testdata directory using os.Stat. The test accesses a file in the local testdata directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package a

import (
	"os"
	"testing"
)

func TestDir(t *testing.T) {
	if _, err := os.Stat("./testdata/1"); err != nil {
		t.Fatalf("testdata: %v", err)
	}
}
```

----------------------------------------

TITLE: Custom Version and Package Installation Tests
DESCRIPTION: Verifies behavior with custom version strings and package installation scenarios
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_local.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
env TESTGO_VERSION=go1.500-bigcorp
go mod edit -go=1.499 -toolchain=none
go version
stdout go1.500-bigcorp
```

----------------------------------------

TITLE: Testing Go Test Command Output Directory Functionality for Multiple Packages
DESCRIPTION: Shell commands to verify that 'go test -c' can output multiple executables to a directory and test error cases for various command combinations. This script serves as a regression test for issue #62221 which had ETXTBSY errors on Unix platforms.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_compile_multi_pkg.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
[short] skip 'links test binaries'

# Verify test -c can output multiple executables to a directory.

# This test also serves as a regression test for https://go.dev/issue/62221:
# prior to the fix for that issue, it occasionally failed with ETXTBSY when
# run on Unix platforms.

go test -c -o $WORK/some/nonexisting/directory/ ./pkg/...
exists -exec $WORK/some/nonexisting/directory/pkg1.test$GOEXE
exists -exec $WORK/some/nonexisting/directory/pkg2.test$GOEXE

go test -c ./pkg/...
exists -exec pkg1.test$GOEXE
exists -exec pkg2.test$GOEXE

! go test -c -o $WORK/bin/test/bin.test.exe ./pkg/...
stderr '^with multiple packages, -o must refer to a directory or '$devnull

! go test -c ./...
stderr '^cannot write test binary pkg1.test for multiple packages:\nexample/anotherpkg/pkg1\nexample/pkg/pkg1'

! go test -c -o $WORK/bin/test/ ./...
stderr '^cannot write test binary pkg1.test for multiple packages:\nexample/anotherpkg/pkg1\nexample/pkg/pkg1'

! go test -o $WORK/bin/filename.exe ./pkg/...
stderr '^with multiple packages, -o must refer to a directory or '$devnull

! go test -o $WORK/bin/ ./...
stderr '^cannot write test binary pkg1.test for multiple packages:\nexample/anotherpkg/pkg1\nexample/pkg/pkg1'

go test -c -o $devnull ./...

rm pkg1.test$GOEXE
rm pkg2.test$GOEXE
go test -o . ./pkg/...
exists -exec pkg1.test$GOEXE
exists -exec pkg2.test$GOEXE
```

----------------------------------------

TITLE: Testing Vendor Directory Version Compatibility
DESCRIPTION: This snippet tests the scenario where a vendored dependency requires a newer Go version. It expects the build to fail with an error message indicating that a vendored package requires a newer Go version than the one running.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
rm go.work
mv notvendor vendor
! go build -mod=vendor .
stderr '^go: golang.org/x/text in vendor'${/}'modules.txt requires go >= 1.99999 \(running go 1\..+\)$'
```

----------------------------------------

TITLE: Testing Non-Existent Toolchain Version
DESCRIPTION: Tests behavior when requesting a non-existent Go toolchain version from network.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_net.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
env GOTOOLCHAIN=go1.9999x
! go version
stderr 'go: download go1.9999x for .*: toolchain not available'
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: Defines the main module 'example.com/m' with its dependencies and Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
// Module m happens to have the exact same build list as what would be
// selected under Go 1.16, but computes that build list without looking at
// as many go.mod files.
module example.com/m

go 1.17

replace example.net/lazy v0.1.0 => ./lazy

require (
	example.com/version v1.1.0
	example.net/lazy v0.1.0
)
```

----------------------------------------

TITLE: Defining Go Module (Go Module)
DESCRIPTION: This go.mod file defines a Go module named 'example.com'. It serves as the root of the module used in the test cases, establishing the module path context for package resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_bad_import.txt#2025-04-22_snippet_4

LANGUAGE: gomod
CODE:
```
-- example.com/go.mod --
module example.com
```

----------------------------------------

TITLE: Go module definition
DESCRIPTION: Defines a Go module named 'bench' with Go version 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_1x.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module bench

go 1.16
```

----------------------------------------

TITLE: Configuring Go Module
DESCRIPTION: Module definition file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_example_goexit.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module examplegoexit

go 1.16
```

----------------------------------------

TITLE: Testing Go Fuzzing with Race Detection
DESCRIPTION: A shell script that tests various combinations of race detection and coverage instrumentation to verify they work correctly together without false positives.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_test_race.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# Test with coverage instrumentation enabled (-fuzz) and race instrumentation
# but without actually fuzzing the target (by using a non-matching pattern)
go test -fuzz=xxx -race -v
! stderr 'race detected during execution of test'

# Test with just race instrumentation enabled
go test -race -v
! stderr 'race detected during execution of test'

# Test with coverage and race instrumentation enabled, and a matching fuzz
# pattern
go test -fuzz=FuzzRace -race -v -fuzztime=200x
! stderr 'race detected during execution of test'
```

----------------------------------------

TITLE: Shell Script for Testing Cache Behavior with Files and Environment
DESCRIPTION: A shell script that tests Go's test caching behavior when various external factors change, such as file content, environment variables, command-line arguments, and file timestamps. The script verifies when the cache is used correctly or invalidated.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_cache_inputs.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
env GO111MODULE=off

# Test that cached test results are invalidated in response to
# changes to the external inputs to the test.

[short] skip
[GODEBUG:gocacheverify=1] skip

# We're testing cache behavior, so start with a clean GOCACHE.
env GOCACHE=$WORK/cache

# Build a helper binary to invoke os.Chtimes.
go build -o mkold$GOEXE mkold.go

# Make test input files appear to be a minute old.
exec ./mkold$GOEXE 1m testcache/file.txt
exec ./mkold$GOEXE 1m testcache/script.sh

# If the test reads an environment variable, changes to that variable
# should invalidate cached test results.
env TESTKEY=x
go test testcache -run=TestLookupEnv
go test testcache -run=TestLookupEnv
stdout '\(cached\)'

# GODEBUG is always read
env GODEBUG=asdf=1
go test testcache -run=TestLookupEnv
! stdout '\(cached\)'
go test testcache -run=TestLookupEnv
stdout '\(cached\)'
env GODEBUG=

env TESTKEY=y
go test testcache -run=TestLookupEnv
! stdout '\(cached\)'
go test testcache -run=TestLookupEnv
stdout '\(cached\)'

# Changes in arguments forwarded to the test should invalidate cached test
# results.
go test testcache -run=TestOSArgs -v hello
! stdout '\(cached\)'
stdout 'hello'
go test testcache -run=TestOSArgs -v goodbye
! stdout '\(cached\)'
stdout 'goodbye'

# golang.org/issue/36134: that includes the `-timeout` argument.
go test testcache -run=TestOSArgs -timeout=20m -v
! stdout '\(cached\)'
stdout '-test\.timeout[= ]20m'
go test testcache -run=TestOSArgs -timeout=5s -v
! stdout '\(cached\)'
stdout '-test\.timeout[= ]5s'

# If the test stats a file, changes to the file should invalidate the cache.
go test testcache -run=FileSize
go test testcache -run=FileSize
stdout '\(cached\)'

cp 4x.txt testcache/file.txt
go test testcache -run=FileSize
! stdout '\(cached\)'
go test testcache -run=FileSize
stdout '\(cached\)'

# Files should be tracked even if the test changes its working directory.
go test testcache -run=Chdir
go test testcache -run=Chdir
stdout '\(cached\)'
cp 6x.txt testcache/file.txt
go test testcache -run=Chdir
! stdout '\(cached\)'
go test testcache -run=Chdir
stdout '\(cached\)'

# The content of files should affect caching, provided that the mtime also changes.
exec ./mkold$GOEXE 1m testcache/file.txt
go test testcache -run=FileContent
go test testcache -run=FileContent
stdout '\(cached\)'
cp 2y.txt testcache/file.txt
exec ./mkold$GOEXE 50s testcache/file.txt
go test testcache -run=FileContent
! stdout '\(cached\)'
go test testcache -run=FileContent
stdout '\(cached\)'

# Directory contents read via os.ReadDirNames should affect caching.
go test testcache -run=DirList
go test testcache -run=DirList
stdout '\(cached\)'
rm testcache/file.txt
go test testcache -run=DirList
! stdout '\(cached\)'
go test testcache -run=DirList
stdout '\(cached\)'

# Files outside GOROOT and GOPATH should not affect caching.
env TEST_EXTERNAL_FILE=$WORK/external.txt
go test testcache -run=ExternalFile
go test testcache -run=ExternalFile
stdout '\(cached\)'

rm $WORK/external.txt
go test testcache -run=ExternalFile
stdout '\(cached\)'

# The -benchtime flag without -bench should not affect caching.
go test testcache -run=Benchtime -benchtime=1x
go test testcache -run=Benchtime -benchtime=1x
stdout '\(cached\)'

go test testcache -run=Benchtime -bench=Benchtime -benchtime=1x
go test testcache -run=Benchtime -bench=Benchtime -benchtime=1x
! stdout '\(cached\)'

# golang.org/issue/47355: that includes the `-failfast` argument.
go test testcache -run=TestOSArgs -failfast
! stdout '\(cached\)'
go test testcache -run=TestOSArgs -failfast
stdout '\(cached\)'

# golang.org/issue/64638: that includes the `-fullpath` argument.
go test testcache -run=TestOSArgs -fullpath
! stdout '\(cached\)'
go test testcache -run=TestOSArgs -fullpath
stdout '\(cached\)'

# golang.org/issue/70692: that includes the `-skip` flag
go test testcache -run=TestOdd -skip=TestOddFile
! stdout '\(cached\)'
go test testcache -run=TestOdd -skip=TestOddFile
stdout '\(cached\)'

# Ensure that coverage profiles are being cached.
go test testcache -run=TestCoverageCache -coverprofile=coverage.out
go test testcache -run=TestCoverageCache -coverprofile=coverage.out
stdout '\(cached\)'
exists coverage.out
grep -q 'mode: set' coverage.out
grep -q 'testcache/hello.go:' coverage.out

# A new -coverprofile file should use the cached coverage profile contents.
go test testcache -run=TestCoverageCache -coverprofile=coverage2.out
stdout '\(cached\)'
cmp coverage.out coverage2.out

# Explicitly setting the default covermode should still use cache.
go test testcache -run=TestCoverageCache -coverprofile=coverage_set.out -covermode=set
stdout '\(cached\)'
cmp coverage.out coverage_set.out

# A new -covermode should not use the cached coverage profile.
go test testcache -run=TestCoverageCache -coverprofile=coverage_atomic.out -covermode=atomic
! stdout '\(cached\)'
! cmp coverage.out coverage_atomic.out
grep -q 'mode: atomic' coverage_atomic.out
grep -q 'testcache/hello.go:' coverage_atomic.out

# A new -coverpkg should not use the cached coverage profile.
go test testcache -run=TestCoverageCache -coverprofile=coverage_pkg.out -coverpkg=all
! stdout '\(cached\)'
! cmp coverage.out coverage_pkg.out

# Test that -v doesn't prevent caching.
go test testcache -v -run=TestCoverageCache -coverprofile=coverage_v.out
go test testcache -v -run=TestCoverageCache -coverprofile=coverage_v2.out
stdout '\(cached\)'
cmp coverage_v.out coverage_v2.out

# Test that -count affects caching.
go test testcache -run=TestCoverageCache -coverprofile=coverage_count.out -count=2
! stdout '\(cached\)'

# Executables within GOROOT and GOPATH should affect caching,
# even if the test does not stat them explicitly.

[!exec:/bin/sh] skip
chmod 0755 ./testcache/script.sh

exec ./mkold$GOEXEC 1m testcache/script.sh
go test testcache -run=Exec
go test testcache -run=Exec
stdout '\(cached\)'

exec ./mkold$GOEXE 50s testcache/script.sh
go test testcache -run=Exec
! stdout '\(cached\)'
go test testcache -run=Exec
stdout '\(cached\)'
```

----------------------------------------

TITLE: Matching Packages in GOPATH Mode with Shell
DESCRIPTION: Executes 'go list' to match packages under the 'cmd' directory, reflecting their discovery within GOPATH mode. This ensures the packages matched are consistent as per old package resolution strategies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_std.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go list cmd/...
```

----------------------------------------

TITLE: Adding IndexListExpr struct to go/ast package
DESCRIPTION: This snippet introduces a new IndexListExpr struct to the go/ast package, along with its fields and methods.
SOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
pkg go/ast, type IndexListExpr struct
pkg go/ast, type IndexListExpr struct, Indices []Expr
pkg go/ast, type IndexListExpr struct, Lbrack token.Pos
pkg go/ast, type IndexListExpr struct, Rbrack token.Pos
pkg go/ast, type IndexListExpr struct, X Expr
pkg go/ast, method (*IndexListExpr) End() token.Pos
pkg go/ast, method (*IndexListExpr) Pos() token.Pos
```

----------------------------------------

TITLE: Testing Go Build/Install Behavior with Test-Only Packages
DESCRIPTION: This snippet demonstrates the behavior of 'go build' and 'go install' commands when dealing with packages that only contain test files. When a test-only package is explicitly named, the commands fail with an error, but when matched through wildcards, these packages are silently ignored.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_test_only.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Named explicitly, test-only packages should be reported as
# unbuildable/uninstallable, even if there is a wildcard also matching.
! go build m/testonly m/testonly...
stderr 'no non-test Go files in'
! go install ./testonly
stderr 'no non-test Go files in'

# Named through a wildcard, the test-only packages should be silently ignored.
go build m/testonly...
go install ./testonly...
```

----------------------------------------

TITLE: Main Package Files
DESCRIPTION: Main package files that import the test packages
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_import_comment.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package p

import "m/bad"
```

LANGUAGE: go
CODE:
```
package p

import "m/conflict"
```

LANGUAGE: go
CODE:
```
package p

import _ "m/works/x"
```

LANGUAGE: go
CODE:
```
package p

import "m/wrongplace"
```

----------------------------------------

TITLE: Testing Go Module Fetch with Working Proxy
DESCRIPTION: Fetches a module through a working proxy. Expects the command to succeed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_cache.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
cp go.mod.orig go.mod
rm go.sum
env GOPROXY=$proxy
go get rsc.io/quote
```

----------------------------------------

TITLE: Testing Fallback to Direct Downloads in Go
DESCRIPTION: This snippet tests the fallback behavior when the proxy returns a 404 error. It sets an environment variable to simulate 404 errors from the proxy and then attempts to download modules, expecting a fallback to direct downloads.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_golang.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
env TESTGOPROXY404=1
go clean -modcache
rm go.sum

go list -mod=mod -x -m all  # Download go.mod files
go list -mod=mod -x rsc.io/quote  # Download module source.

cmp go.sum saved.sum
```

----------------------------------------

TITLE: Subdirectory Go Module Definition
DESCRIPTION: Go module file for a subdirectory that defines 'example/subdir/v2' module with Go 1.18 as requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_version_stamping_git.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example/subdir/v2

go 1.18
```

----------------------------------------

TITLE: Executing go fmt Test Case Asserting Panic in Shell
DESCRIPTION: This shell script snippet sets the `GO111MODULE` environment variable to `on` to enable Go modules. It then executes `go fmt x.go` and asserts that the command fails (indicated by `!`) and outputs a panic message to standard error (`! stderr panic`), specifically testing Go issue 26792.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gofmt_invalid.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
! go fmt x.go
! stderr panic
```

----------------------------------------

TITLE: Different Replacement Error Test
DESCRIPTION: Sample modules.txt with a module that has a different replacement target than specified in go.mod, along with the expected error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_4

LANGUAGE: plaintext
CODE:
```
## workspace
# example.com/p v1.0.0 => ./r
## explicit; go 1.21
# example.com/q v1.0.0 => ./q
## explicit; go 1.21
```

LANGUAGE: plaintext
CODE:
```
go: inconsistent vendoring in $GOPATH${/}src:
	example.com/p@v1.0.0: is replaced by ../p in a${/}go.mod, but marked as replaced by ./r in vendor/modules.txt

	To ignore the vendor directory, use -mod=readonly or -mod=mod.
	To sync the vendor directory, run:
		go work vendor
```

----------------------------------------

TITLE: Module A v0.1.0 Definition
DESCRIPTION: Module definition and implementation for example.net/a v0.1.0
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_wild.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.net/a

go 1.16
```

LANGUAGE: go
CODE:
```
package a
```

----------------------------------------

TITLE: Testing Go Module Documentation Lookup in Different GOPATH Configurations
DESCRIPTION: A test script that verifies how 'go doc' finds and displays package documentation in different module configurations. It tests behavior when modules are inside GOPATH/src, outside GOPATH/src, and when packages with same import paths exist in GOPATH.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on
env GOFLAGS=-mod=mod
[short] skip

# Check when module x is inside GOPATH/src.
go doc y
stdout 'Package y is.*alphabet'
stdout 'import "x/y"'
go doc x/y
stdout 'Package y is.*alphabet'
! go doc quote.Hello
stderr 'doc: symbol quote is not a type' # because quote is not in local cache
go list rsc.io/quote # now it is
go doc quote.Hello
stdout 'Hello returns a greeting'
go doc quote
stdout 'Package quote collects pithy sayings.'

# Double-check when module x is outside GOPATH/src.
env GOPATH=$WORK/emptygopath
go doc x/y
stdout 'Package y is.*alphabet'
go doc y
stdout 'Package y is.*alphabet'

# Triple-check when module x is outside GOPATH/src,
# but other packages with same import paths are in GOPATH/src.
# Since go doc is running in module mode here, packages in active module
# should be preferred over packages in GOPATH. See golang.org/issue/28992.
env GOPATH=$WORK/gopath2
go doc x/y
! stdout 'Package y is.*GOPATH'
stdout 'Package y is.*alphabet'
go doc rsc.io/quote
! stdout 'Package quote is located in a GOPATH workspace.'
stdout 'Package quote collects pithy sayings.'

# Check that a sensible error message is printed when a package is not found.
env GOPROXY=off
! go doc example.com/hello
stderr '^doc: cannot find module providing package example.com/hello: module lookup disabled by GOPROXY=off$'

# When in a module with a vendor directory, doc should use the vendored copies
# of the packages. 'std' and 'cmd' are convenient examples of such modules.
#
# When in those modules, the "// import" comment should refer to the same import
# path used in source code, not to the absolute path relative to GOROOT.

cd $GOROOT/src
env GOFLAGS=
env GOWORK=off
go doc cryptobyte
stdout '// import "golang.org/x/crypto/cryptobyte"'

cd $GOROOT/src/cmd/go
go doc modfile
stdout '// import "golang.org/x/mod/modfile"'

# When outside of the 'std' module, its vendored packages
# remain accessible using the 'vendor/' prefix, but report
# the correct "// import" comment as used within std.
cd $GOPATH
go doc vendor/golang.org/x/crypto/cryptobyte
stdout '// import "vendor/golang.org/x/crypto/cryptobyte"'

go doc cmd/vendor/golang.org/x/mod/modfile
stdout '// import "cmd/vendor/golang.org/x/mod/modfile"'
```

----------------------------------------

TITLE: Hello Text Initialization
DESCRIPTION: Defines multi-language hello messages in English, French, and Spanish
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.1.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package sampler

var hello = newText(`

English: en: Hello, world.
French: fr: Bonjour le monde.
Spanish: es: Hola Mundo.

`)
```

----------------------------------------

TITLE: Modified Main Module Source (Go)
DESCRIPTION: The modified version of the main program (`m.go.new`). It adds a direct import of package `b/y` from module `b`. This change triggers the dependency resolution logic being tested, especially under lazy loading, as `b` is no longer just a test-only dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- m.go.new --
package main

import (
	"fmt"

	_ "a"  // a_test imports b/x.
	"b/y"  // This is a new import, not yet reflected in the go.mod file.
)

func main() {
	fmt.Println(b.CVersion())
}
```

----------------------------------------

TITLE: Initializing Git Repository for Go Module
DESCRIPTION: Initializes a new Git repository with timestamp, adds go.mod file, makes initial commit, and renames the default branch.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/emptytest.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
git init

at 2018-07-03T22:35:49-04:00
git add go.mod
git commit -m 'initial'
git branch -m master
```

----------------------------------------

TITLE: Go List with Empty Rationale
DESCRIPTION: This snippet tests the behavior of 'go list' when a module version is retracted without a rationale. It checks if the output matches the expected hard-coded retraction message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_1

LANGUAGE: go
CODE:
```
go list -m -retracted -f '{{.Retracted}}' example.com/retract/rationale
stdout '^\[retracted by module author\]$'
```

----------------------------------------

TITLE: Go Test with Panic Without Cleanup
DESCRIPTION: A simple Go test file that contains a test function which panics without any cleanup function. This tests how the Go testing package handles a simple panic scenario.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_cleanup_failnow.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package panic_nocleanup_test
import "testing"
func TestX(t *testing.T) {
	t.Run("x", func(t *testing.T) {
		panic("die")
	})
}
```

----------------------------------------

TITLE: Defining an Empty Go Vendor Package - Go
DESCRIPTION: This code snippet provides the minimal definition of a Go package named 'v', used as a vendored dependency in the main program. The absence of exports or functionality is intentional for verifying vendoring behavior. This package is required to exist in the vendor directory for the main program to compile.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_vendor_issue14054.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package v
```

----------------------------------------

TITLE: Listing Packages Without Showing Retraction using Go List
DESCRIPTION: Checks that 'go list pkg' does not output retraction information. The command tries to list retraction details for 'example.com/retract' but expects no such information in package output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
# 'go list pkg' does not show retraction.\ngo list -f '{{with .Module}}{{with .Retracted}}retracted{{end}}{{end}}' example.com/retract\n! stdout .
```

----------------------------------------

TITLE: Testing Go Workspace Commands Without go.work File
DESCRIPTION: This snippet demonstrates the error messages returned when attempting to use Go workspace commands without a go.work file present. It covers the 'use', 'edit', and 'sync' subcommands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_nowork.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
! go work use
stderr '^go: no go\.work file found\n\t\(run ''go work init'' first or specify path using GOWORK environment variable\)$'

! go work use .
stderr '^go: no go\.work file found\n\t\(run ''go work init'' first or specify path using GOWORK environment variable\)$'

! go work edit
stderr '^go: no go\.work file found\n\t\(run ''go work init'' first or specify path using GOWORK environment variable\)$'

! go work edit -go=1.18
stderr '^go: no go\.work file found\n\t\(run ''go work init'' first or specify path using GOWORK environment variable\)$'

! go work sync
stderr '^go: no go\.work file found\n\t\(run ''go work init'' first or specify path using GOWORK environment variable\)$'
```

----------------------------------------

TITLE: Installing Go Program Outside GOPATH Without GOBIN
DESCRIPTION: Test case to ensure that installing a program outside GOPATH without GOBIN set fails.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_install.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
env GOPATH= # reset to default ($HOME/go, which does not exist)
env GOBIN=
! go install go-cmd-test/helloworld.go
stderr '^go: no install location for \.go files listed on command line \(GOBIN not set\)$'
```

----------------------------------------

TITLE: Package p2 Implementation (p2.go)
DESCRIPTION: Supporting package p2 implementation with identical function F returning integer 1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_relative_cmdline.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p2

func F() int { return 1 }
```

----------------------------------------

TITLE: Executing Go Fuzz Tests with Shell Commands
DESCRIPTION: This snippet contains shell commands to run various fuzz tests and verify their outputs. It demonstrates how to execute Go tests with different flags and how to check for expected stdout patterns.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_chatty.txt#2025-04-22_snippet_6

LANGUAGE: Shell
CODE:
```
env GOCACHE=$WORK/cache

# Run chatty fuzz targets with an error.
! go test -v chatty_error_fuzz_test.go
! stdout '^ok'
stdout 'FAIL'
stdout 'error in target'

# Run chatty fuzz targets with a fatal.
! go test -v chatty_fatal_fuzz_test.go
! stdout '^ok'
stdout 'FAIL'
stdout 'fatal in target'

# Run chatty fuzz target with a panic
! go test -v chatty_panic_fuzz_test.go
! stdout ^ok
stdout FAIL
stdout 'this is bad'

# Run skipped chatty fuzz targets.
go test -v chatty_skipped_fuzz_test.go
stdout ok
stdout SKIP
! stdout FAIL

# Run successful chatty fuzz targets.
go test -v chatty_fuzz_test.go
stdout ok
stdout PASS
stdout 'all good here'
! stdout FAIL

# Fuzz successful chatty fuzz target that includes a separate unit test.
go test -v chatty_with_test_fuzz_test.go -fuzz=Fuzz -fuzztime=1x
stdout ok
stdout PASS
! stdout FAIL
stdout -count=1 'all good here'
# Verify that the unit test is only run once.
stdout -count=1 'logged foo'
```

----------------------------------------

TITLE: Testing Offline Module Fetching
DESCRIPTION: Tests the behavior of 'go get' when the module cache is incomplete and offline mode is enabled.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
rm $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.2.zip
env GOPROXY=off
! go get example.com/upgrade@v0.0.2
stderr '^go: upgraded rsc.io/quote v1.0.0 => v1.5.2: error finding sum for rsc.io/quote@v1.5.2: module lookup disabled by GOPROXY=off$'
```

----------------------------------------

TITLE: Secondary File Path Printer in Overlay
DESCRIPTION: Second file for the printpath package that prints its own file path in an init function. Used to test multiple files in a package with overlays.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"path/filepath"
	"runtime"
)

func init() {
	_, file, _, _ := runtime.Caller(0)
	fmt.Println(filepath.FromSlash(file))
}
```

----------------------------------------

TITLE: Defining Toolchain Module Path in go.mod (Text)
DESCRIPTION: This plain text snippet represents the content of a minimal `go.mod` file, declaring the module path (`golang.org/toolchain`). This indicates the module identifier for the Go toolchain package itself.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.9.linux-amd64.txt#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: V2 Package in Sub Vendor
DESCRIPTION: Package defining v2 constant in the sub/vendor directory that takes precedence over root vendor.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_complex.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package v2

const ComplexNestSubVendorV2 = true
```

----------------------------------------

TITLE: Go Module Definition in .mod File
DESCRIPTION: Defines the module name in the .mod file for the Go toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-loong64.txt#2025-04-22_snippet_1

LANGUAGE: text
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Defining RTF (Routing Table Flag) Constants in Go Syscall Package for Darwin-arm64-cgo
DESCRIPTION: Constants for routing table flags used in network routing operations on Darwin systems. These flags indicate properties of routes such as whether a route is up, static, or represents a router.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_175

LANGUAGE: Go
CODE:
```
const RTF_UP = 1
const RTF_REJECT = 8
const RTF_XRESOLVE = 512
const RTF_STATIC = 2048
const RTF_PROTO2 = 16384
const RTF_WASCLONED = 131072
const RTF_PROTO3 = 262144
const RTF_PROXY = 134217728
const RTF_ROUTER = 268435456
```

----------------------------------------

TITLE: Module C Configuration
DESCRIPTION: Go module configuration for example.com/c with dependency on module B
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_regression_hang.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module example.com/c

go 1.18

require example.com/b v1.0.0
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: This snippet defines a Go module named 'example' using Go version 1.21.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_insecure_redirect.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example
go 1.21
```

----------------------------------------

TITLE: Adding Submodule go.mod File
DESCRIPTION: Adds a go.mod file to the submodule with its own module path and creates both regular and submodule-specific tags.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
at 2018-02-19T18:12:07-05:00
echo 'module "github.com/vgotest1/submod" // submod/go.mod'
cp stdout submod/go.mod
git add submod/go.mod
git commit -m 'submod/go.mod'
git tag v1.0.3
git tag submod/v1.0.4
```

----------------------------------------

TITLE: Other Package Implementation
DESCRIPTION: Implementation file for the 'other' package importing a non-existent package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_error.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package other

import "other.example.com/nonexist"
```

----------------------------------------

TITLE: Supporting Import Comment in Packages - go/build Package - Go
DESCRIPTION: Defines a constant and a field to facilitate import comment handling by the go/build package. The ImportComment constant and ImportComment field in Package struct allow tools to recognize and extract go:generate or similar source directives. Dependencies: go/build and syntax analysis components; the ImportComment string field is set based on the parsed source.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_10

LANGUAGE: Go
CODE:
```
const ImportComment = 4
// ...
const ImportComment ImportMode
// ...
type Package struct {
    ImportComment string
    // ... other fields
}
```

----------------------------------------

TITLE: Testing Path Separator and $PWD Matching in Go Project
DESCRIPTION: Shell script to test if matching against $PWD works correctly after a cd command, focusing on Windows compatibility. It changes directory to a specific path and uses 'go list' to verify the correct path is returned.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_script_cmdcd.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
cd $WORK/a/b/c/pkg

go list -find -f {{.Root}}
stdout $PWD
```

----------------------------------------

TITLE: JSON Format Go Workspace Configuration
DESCRIPTION: Structured JSON representation of go.work file settings including Go version, module usage, and replacements
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_edit.txt#2025-04-22_snippet_3

LANGUAGE: json
CODE:
```
{
	"Go": "1.19",
	"Use": [
		{
			"DiskPath": "../a"
		},
		{
			"DiskPath": "./b"
		}
	],
	"Replace": [
		{
			"Old": {
				"Path": "x.1",
				"Version": "v1.4.0"
			},
			"New": {
				"Path": "../z"
			}
		}
	]
}
```

----------------------------------------

TITLE: Building BoringCrypto Module for Linux AMD64
DESCRIPTION: Command to build the BoringCrypto module for Linux AMD64 architecture, generating syso/goboringcrypto_linux_amd64.syso file. Requires Docker for execution.
SOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/boring/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
GOARCH=amd64 ./build.sh
```

----------------------------------------

TITLE: Invoking go list on a Go File with Invalid Import - Shell
DESCRIPTION: Executes the 'go list' command targeting the file 'a.go' to enumerate build details, revealing how Go reacts to files with invalid import statements. It is expected to fail with a recognized error message. This command requires a Go installation and expects to find 'a.go' in the working directory; it will produce errors if the import path is invalid.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_empty_import.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go list a.go
```

----------------------------------------

TITLE: Package with External Import
DESCRIPTION: A Go package that imports another package from the test repository, demonstrating dependency management across the repository structure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test1-svn-git.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package other

import _ "vcs-test.swtch.com/go/test1-svn-git/git-README-only/other"
```

----------------------------------------

TITLE: Testing Import of 'std' Meta-Package in Go
DESCRIPTION: This snippet tests the import of the 'std' meta-package in Go. It expects the command to fail and produce a specific error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
! go list -deps ./importstd
! stderr 'internal error'
stderr '^importstd[/\\]x.go:3:8: "std" is not an importable package; see ''go help packages''$'
```

----------------------------------------

TITLE: Upgrading Main Module and Re-vendoring
DESCRIPTION: This snippet demonstrates upgrading the main module to Go 1.17, re-vendoring, and how this affects the build process for dependent modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
go mod edit -go=1.17
go mod vendor

grep '^## explicit; go 1.17$' vendor/modules.txt
go build example.net/need117

grep '^## explicit; go 1.13$' vendor/modules.txt
! go build example.net/bad114
stderr '^vendor[/\\]example\.net[/\\]bad114[/\\]bad114.go:15:2: duplicate method .?Y.?( .*)?$'
```

----------------------------------------

TITLE: Submodule with Custom Directives
DESCRIPTION: Defines a go.mod file for a submodule with custom, non-standard directives. This configuration would typically be used for testing misconfigurations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badmod.txt#2025-04-22_snippet_6

LANGUAGE: text
CODE:
```
-- sub/go.mod --
module sub
hello world
```

----------------------------------------

TITLE: Testing 'latest' version resolution with +incompatible tags
DESCRIPTION: Removes the existing requirement and fetches the latest version, expecting v2.0.0+incompatible.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go mod edit -droprequire github.com/rsc/legacytest
go get github.com/rsc/legacytest@latest
go list
go list -m all
stdout '^github.com/rsc/legacytest v2\.0\.0\+incompatible$'
```

----------------------------------------

TITLE: Overlay Configuration JSON
DESCRIPTION: JSON configuration for file overlays, specifying file replacements and removals.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_overlay.txt#2025-04-22_snippet_4

LANGUAGE: json
CODE:
```
{
    "Replace": {
        "f.go": "overlay/f_go",
        "dir/g.go": "overlay/dir_g_go",
        "dir2/i.go": "overlay/dir2_i_go",
        "dir3/bad.go": ""
    }
}
```

----------------------------------------

TITLE: Main Package with Duplicate Imports
DESCRIPTION: Main package demonstrating duplicate package import scenario where a package is imported both directly and through vendor directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_vendor_dup_err.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	_ "dupload/p2"
	_ "p"
)

func main() {}
```

----------------------------------------

TITLE: Disabling Go Modules via Environment Variable (Shell)
DESCRIPTION: Sets the `GO111MODULE` environment variable to `off`. This forces the Go toolchain to operate in the older GOPATH mode, disabling Go modules support for the commands executed in the same environment or sub-process.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_non_go_files.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off
```

----------------------------------------

TITLE: Defining C Library Function LibFn (C)
DESCRIPTION: This C source file `b/lib.c` defines the function `LibFn`, which simply returns its integer argument. This file is compiled and archived into `a/libb.a`, which package `a` links against via its `#cgo LDFLAGS`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_7

LANGUAGE: c
CODE:
```
-- b/lib.c --
int LibFn(int i) { return i; }
```

----------------------------------------

TITLE: Alternative Go Implementation for Enabled Fieldtrack
DESCRIPTION: A Go file with a build constraint that only compiles when the fieldtrack experiment is enabled. It outputs a message indicating that fieldtrack is on.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_tag_goexperiment.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
// +build goexperiment.fieldtrack

package main

func main() {
	println("fieldtrack on")
}
```

----------------------------------------

TITLE: Running Go Test with JSON Output and Timeout
DESCRIPTION: This command runs Go tests with JSON output format and a 1ms timeout. It's used to demonstrate test failure due to timeout.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_timeout.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
! go test -json -timeout=1ms
```

----------------------------------------

TITLE: Testing Panic in TestMain
DESCRIPTION: This snippet tests a Go package where TestMain panics. It verifies that the test is marked as failing using both go test -json and go tool test2json commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
! go test -json ./mainpanic
stdout '"Action":"fail"'
! stdout '"Action":"pass"'

! go tool test2json ./mainpanic.exe
stdout '"Action":"fail"'
! stdout '"Action":"pass"'
```

----------------------------------------

TITLE: Main with Additional Functionality
DESCRIPTION: Implements a main function with an additional Foo function in the mainwithtest package. This setup could aid in testing scenarios where multiple functions need to be validated.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_multiple_mains.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main

func main() {}

func Foo() {}
```

----------------------------------------

TITLE: Defining a Function in a Subpackage
DESCRIPTION: This Go code defines a package 'p1' with a function 'F' that returns an integer value of 1, similar to the main package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_relative_import.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package p1

func F() int { return 1 }
```

----------------------------------------

TITLE: Empty Passing Go Test Implementation
DESCRIPTION: Empty Go test file that will pass by default due to lack of test cases
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_status.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package y
```

----------------------------------------

TITLE: Testing Go Get Command with Non-existent Packages
DESCRIPTION: This snippet tests the 'go get' command with non-existent packages and verifies that appropriate error messages are displayed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_domain.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
go get ./useappengine  # TODO(#41315): This should fail.
 # stderr '^useappengine[/\\]x.go:2:8: cannot find package$'

! go get  ./usenonexistent
stderr '^go: x/usenonexistent imports\n\tnonexistent.rsc.io: cannot find module providing package nonexistent.rsc.io$'
```

----------------------------------------

TITLE: Testing 'go list ...' in GOROOT/src (Module Mode) (Shell)
DESCRIPTION: Changes the current directory to the configured $GOROOT/src, enables Go module mode (GO111MODULE=on), and runs `go list ...`. It asserts that standard library packages like `fmt` are listed exactly once, but local files (like `foo.go`) in GOROOT/src are not listed as importable packages, confirming they are ignored in module mode within GOROOT.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
# switch to GOROOT/src
cd $GOROOT/src

# In module mode, 'go list ./...' should not treat .go files in GOROOT/src as an
# importable package, since that directory has no valid import path.
env GO111MODULE=on
go list ...
stdout -count=1 '^.+$'
stdout '^fmt$'
! stdout foo
```

----------------------------------------

TITLE: Testing Go list -test reporting vendored dependencies
DESCRIPTION: Verifies that 'go list -test' reports vendored transitive dependencies of test imports in the Deps field.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go list -test -f '{{range .Deps}}{{.}}{{"\n"}}{{end}}'
stdout ^vendor/golang.org/x/crypto # dep of .TestImports
```

----------------------------------------

TITLE: Package B Test with Invalid Import
DESCRIPTION: Test file for package b containing an illegal internal package import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_internal.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package b

import (
  _ "a/x/internal/y"
)
```

----------------------------------------

TITLE: NetBSD ARM64 Credential Structure Definition in Go
DESCRIPTION: Defines the Credential structure used for process credential management. Contains fields for user ID, group ID, supplementary groups, and NoSetGroups flag.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_88

LANGUAGE: go
CODE:
```
type Credential struct {
	Uid uint32
	Gid uint32
	Groups []uint32
	NoSetGroups bool
}
```

----------------------------------------

TITLE: NetBSD ARM64 Interface Message Structures Definition in Go
DESCRIPTION: Defines message structures for network interface operations including InterfaceMessage, InterfaceAddrMessage, and InterfaceAnnounceMessage. Used for interface configuration through routing sockets.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_100

LANGUAGE: go
CODE:
```
type InterfaceMessage struct {
	Header IfMsghdr
	Data []uint8
}

type InterfaceAddrMessage struct {
	Header IfaMsghdr
	Data []uint8
}

type InterfaceAnnounceMessage struct {
	Header IfAnnounceMsghdr
}
```

----------------------------------------

TITLE: Testing Go module version resolution
DESCRIPTION: This snippet tests the 'go list' command with a specific module version, ensuring it correctly resolves and outputs the expected version string.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_git_decorate_full.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
# Test that Git log with user's global config '~/gitconfig' has log.decorate=full
# go mod download has an error 'v1.x.y is not a tag'
# with go1.16.14: 
# `go1.16.14 list -m vcs-test.golang.org/git/gitrepo1.git@v1.2.3`
# will output with error:
# go list -m: vcs-test.golang.org/git/gitrepo1.git@v1.2.3: invalid version: unknown revision v1.2.3
# See golang/go#51312.
go list -m vcs-test.golang.org/git/gitrepo1.git@v1.2.3
stdout 'vcs-test.golang.org/git/gitrepo1.git v1.2.3'
```

----------------------------------------

TITLE: Socket and File Operation Functions for Darwin ARM64 in Go
DESCRIPTION: Function declarations for socket and file operations in the syscall package for Darwin ARM64. These functions provide interfaces to system calls for network and file I/O operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_117

LANGUAGE: Go
CODE:
```
pkg syscall (darwin-arm64), func Accept(int) (int, Sockaddr, error)
pkg syscall (darwin-arm64), func Access(string, uint32) error
pkg syscall (darwin-arm64), func Adjtime(*Timeval, *Timeval) error
pkg syscall (darwin-arm64), func Bind(int, Sockaddr) error
pkg syscall (darwin-arm64), func Close(int) error
pkg syscall (darwin-arm64), func CloseOnExec(int)
pkg syscall (darwin-arm64), func CmsgLen(int) int
pkg syscall (darwin-arm64), func CmsgSpace(int) int
pkg syscall (darwin-arm64), func Connect(int, Sockaddr) error
pkg syscall (darwin-arm64), func Dup(int) (int, error)
pkg syscall (darwin-arm64), func Dup2(int, int) error
```

----------------------------------------

TITLE: HTML Hello World
DESCRIPTION: Hello world message formatted as HTML with paragraph tags.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/para.txt#2025-04-22_snippet_4

LANGUAGE: html
CODE:
```
<p>Hello, world.
This is a paragraph.
```

----------------------------------------

TITLE: Go Compiler Toolchain Support Functions
DESCRIPTION: Functions for go/doc and go/types packages that provide compiler toolchain support. Includes type checking, predeclared identifier verification, and defaulting of types.
SOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
// go/doc functions
func IsPredeclared(string) bool

// go/types functions
func Default(Type) Type
func IdenticalIgnoreTags(Type, Type) bool
```

----------------------------------------

TITLE: Minimal Go Program for Testing
DESCRIPTION: A simple Go program with an empty main function used for testing the build process with -trimpath flag. This minimal program allows focusing on compiler behavior rather than program complexity.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_matching_actionid.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main
func main() {}
```

----------------------------------------

TITLE: Declaring Go Package `w` with Dependency `x/y/z` (Go)
DESCRIPTION: This Go source file defines package `w`. It imports package `x/y/z`, indicating a dependency relationship managed by the vendoring structure set up in the accompanying shell script. This file is intended to be placed in `x/y/w/w.go` within the GOPATH.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_vendor_issue15201.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
-- w.go --
package w

import "x/y/z"
```

----------------------------------------

TITLE: Package Implementation with Breaker Import
DESCRIPTION: Go source file importing and using the rsc.io/breaker package with a placeholder variable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_incompatible.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package x
import "rsc.io/breaker"
var _ = breaker.XX
```

----------------------------------------

TITLE: Testing Go Vendor Resolution with Build Command
DESCRIPTION: A Go test script that verifies import resolution behavior with vendored dependencies. The test builds a package with various import statements and checks that there are no errors in stdout or stderr.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off
go build vend/x
! stdout .
! stderr .
```

----------------------------------------

TITLE: Defining Event Filter Constants in Go for NetBSD ARM64
DESCRIPTION: This snippet defines constants related to event filters and actions used in event-driven programming on NetBSD ARM64. These constants are typically used with the kqueue system for event notification.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_126

LANGUAGE: Go
CODE:
```
const EV_ADD = 1
const EV_ADD ideal-int
const EV_CLEAR = 32
const EV_CLEAR ideal-int
// ... (more EV_ and EVFILT_ constants)
```

----------------------------------------

TITLE: Defining Package 'x' in Go
DESCRIPTION: This Go source file defines a minimal package 'x'. It contains no exported identifiers but serves as a node in the dependency graph that directly depends on `c v0.1.0`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_15

LANGUAGE: go
CODE:
```
-- x1/x.go --
package x
```

----------------------------------------

TITLE: Setting Executable Permissions for Scripts in Go Module Exploit Test
DESCRIPTION: This snippet sets executable permissions (0777) for two shell scripts: 'go1.999999-/run.sh' and 'run.sh'. These scripts are part of the exploit test setup.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain_slash.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
chmod 0777 go1.999999-/run.sh
chmod 0777 run.sh
```

----------------------------------------

TITLE: Testing Deprecated Insecure Flag in Module Mode
DESCRIPTION: Sets GO111MODULE to on for module mode and attempts to use the deprecated -insecure flag with go get, which should produce an error message recommending GOINSECURE instead.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure_no_longer_supported.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
env GO111MODULE=on

# Modules: Fetch with insecure, should error
! go get -insecure test
stderr 'go: -insecure flag is no longer supported; use GOINSECURE instead'
```

----------------------------------------

TITLE: Setting GO111MODULE Environment Variable
DESCRIPTION: Sets the GO111MODULE environment variable to 'on' to ensure module mode is enabled.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_nodeps.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Defining Sysctlnode struct for NetBSD ARM64 in syscall package
DESCRIPTION: Definition of the Sysctlnode struct in the syscall package for NetBSD ARM64 architecture. This struct is used for interacting with the sysctl management information base (MIB) in NetBSD.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_165

LANGUAGE: go
CODE:
```
type Sysctlnode struct {
	Flags uint32
	Num int32
	Name [32]int8
	Ver uint32
	X__rsvd uint32
	Un [16]uint8
	X_sysctl_size [8]uint8
	X_sysctl_func [8]uint8
	X_sysctl_parent [8]uint8
	X_sysctl_desc [8]uint8
}
```

----------------------------------------

TITLE: Windows AMD64 Platform Configuration
DESCRIPTION: Configuration settings for Windows AMD64 build environment
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_cross_build.txt#2025-04-22_snippet_1

LANGUAGE: conf
CODE:
```
GOOS=windows
GOARCH=amd64
```

----------------------------------------

TITLE: Configuring Git Environment and Testing User Settings
DESCRIPTION: Sets up Git environment variables to use a test-specific .gitconfig file and verifies the user name configuration with the git config command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_issue51114.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GIT_CONFIG_GLOBAL=$WORK${/}home${/}gopher${/}.gitconfig
env HOME=$WORK${/}home${/}gopher
exec git config --global --show-origin user.name
stdout 'Go Gopher'

env GOPROXY=direct

! go mod download
stderr '^go: github\.com/golang/notexist/subdir@v0\.1\.0: reading github\.com/golang/notexist/subdir/go\.mod at revision subdir/v0\.1\.0: '
```

----------------------------------------

TITLE: Expected Go Workspace File
DESCRIPTION: The expected go.work file after running 'go work use'. It should contain an absolute path to the module rather than a relative path that could be problematic with symlinks.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_symlink_issue68383.txt#2025-04-22_snippet_3

LANGUAGE: gomod
CODE:
```
go 1.24

use $WORK${/}gopath${/}src${/}x${/}y
```

----------------------------------------

TITLE: Defining v3pkg Package
DESCRIPTION: Contains a simple Go package declaration for the v3pkg package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v3pkg.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package v3pkg
```

----------------------------------------

TITLE: Bad Import Comment File
DESCRIPTION: Go file with a malformed import comment syntax
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_import_comment.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package bad // import
```

----------------------------------------

TITLE: Package Function Definition in pkg2
DESCRIPTION: Creates an identical 'DoSomething' function in package 'pkg2'. This function is used in conjunction with 'pkg1' for coverage testing and demonstrates namespace separation in Go.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_nocoverpkg.txt#2025-04-22_snippet_4

LANGUAGE: Golang
CODE:
```
-- pkg2/file.go --
package pkg2

func DoSomething() bool {
	return true
}
```

----------------------------------------

TITLE: Testing FindOnly Mode in Package Import
DESCRIPTION: A main function that tests go/build's Import function with FindOnly flag, which should locate packages even when they contain build errors. It prints the directory and any errors encountered.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gobuild_import.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"go/build"
	"os"
)

func main() {
	p, err := build.Import(os.Args[1], os.Args[2], build.FindOnly)
	fmt.Printf("dir=%s err=%v\n", p.Dir, err)
}
```

----------------------------------------

TITLE: Asserting Expected Output for 'latest' Version (Tagged Preference)
DESCRIPTION: Specifies the expected standard output (stdout) for the preceding 'go list' command. The regular expression asserts that the resolved 'latest' version is the tagged version 'v0.5.0-alpha' (dated 2019-06-18), confirming that tagged versions are preferred over pseudo-versions when resolving '@latest'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
stdout '^github.com/dmitshur-test/modtest5 v0.5.0-alpha 2019-06-18$'
```

----------------------------------------

TITLE: Replacing gopkg.in v4 Module with v1 Pseudo-version in Go
DESCRIPTION: This snippet demonstrates another special case where a gopkg.in v4 module is replaced with a v1 pseudo-version, which is accepted for compatibility reasons.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
cd ../4-to-1
go list -m gopkg.in/src-d/go-git.v4
```

----------------------------------------

TITLE: Go Test File with Intentional Syntax Error
DESCRIPTION: This snippet contains a Go test file with an intentional syntax error. The function 'f' has an invalid return signature, which will cause a compilation error when running tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_syntax_error_says_fail.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package p

func f() (x.y, z int) {
}
```

----------------------------------------

TITLE: Left Module Definition and Implementation
DESCRIPTION: Left module files including go.mod and conditional import implementations based on the mirror build tag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tagged_import_cycle.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/left

go 1.14

require example.com/right v0.1.0

replace example.com/right v0.1.0 => ../right
```

LANGUAGE: go
CODE:
```
// +build !mirror

package left

import _ "example.com/right"
```

LANGUAGE: go
CODE:
```
// +build mirror

package left
```

----------------------------------------

TITLE: External Test in Test-Named Directory
DESCRIPTION: A test file using the external test pattern for package 'd', resulting in a d_test package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
package d_test

import "testing"

func Test(t *testing.T) {}
```

----------------------------------------

TITLE: Module A Main Package
DESCRIPTION: Main package implementation for module A importing and using module B
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_regression_hang.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main

import "example.com/b"

func main() {
	b.B()
}
```

----------------------------------------

TITLE: Original C Implementation Before Overlay
DESCRIPTION: Original version of the C implementation file before being replaced by the overlay. Implements say_goodbye instead of the required say_hello function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_13

LANGUAGE: c
CODE:
```
#include <stdio.h>

void say_goodbye() { puts("goodbye cgo\n"); fflush(stdout); }
```

----------------------------------------

TITLE: Type Definition for Package 'n' in Go
DESCRIPTION: Simple package 'n' that defines a type N as an alias for int.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
package n

type N int
```

----------------------------------------

TITLE: Test Script for Go Module Management
DESCRIPTION: Shell script that tests go mod tidy behavior by comparing module references before and after tidying, specifically checking for duplicate entries of rsc.io/quote
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_quote.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

go mod tidy
grep -count=1 rsc.io/quote go.mod

cp go.mod2 go.mod
go mod tidy
grep -count=1 rsc.io/quote go.mod
```

----------------------------------------

TITLE: Module B Go.mod File
DESCRIPTION: A Go module file for module 'example.com/b' which is the module being replaced in the test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_main_module_replaced.txt#2025-04-22_snippet_5

LANGUAGE: plaintext
CODE:
```
module example.com/b

go 1.21
```

----------------------------------------

TITLE: Go Module B Implementation
DESCRIPTION: Module B with a simple function implementation. Includes go.mod file with dependency on module Q v1.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com/b

go 1.18

require example.com/q v1.1.0
```

LANGUAGE: go
CODE:
```
package b

func B() {
}
```

----------------------------------------

TITLE: Main Module Package Declaration
DESCRIPTION: A minimal Go file for the main module that just declares package 'x'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package x
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module definition file for module 'x' specifying Go version 1.19.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_issue55952.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module x

go 1.19
```

----------------------------------------

TITLE: Declaring Go Toolchain Module Path (.mod)
DESCRIPTION: This snippet specifies the Go module path for the toolchain itself, 'golang.org/toolchain'. It is likely found within a `.mod` file associated directly with the toolchain definition.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.1.linux-amd64.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: Storing Version Information in JSON Format
DESCRIPTION: A JSON file containing version metadata for the module, specifically indicating an unused version 'v1.0.0-unused'. This information is likely used for module retraction mechanisms.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_v1.0.0-unused.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v1.0.0-unused"}
```

----------------------------------------

TITLE: Shell Test Script for Go Mod Tidy
DESCRIPTION: Test script that verifies error handling of go mod tidy command when executed in directories without go.mod file. Sets up test environment and validates error messages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_temp.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
env GOROOT=$TESTGO_GOROOT
env TMP=$WORK
env TMPDIR=$WORK
mkdir $WORK/child

! go mod tidy
! stdout .
stderr 'go: go.mod file not found in current directory or any parent directory'

cd $WORK/child
! go mod tidy
! stdout .
stderr 'go: go.mod file not found in current directory or any parent directory'
```

----------------------------------------

TITLE: Testing Commit Hash Resolution to +incompatible Version
DESCRIPTION: Tests that requesting a specific commit hash that corresponds to a +incompatible version still resolves to that version, even if it's no longer listed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_8

LANGUAGE: shell
CODE:
```
go list -m github.com/russross/blackfriday@cadec560ec52
stdout '^github.com/russross/blackfriday v2\.0\.0\+incompatible$'
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Main module definition file specifying the module name, Go version requirement, and dependency replacements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_error.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module issue27063

go 1.13

require issue27063/other v0.0.0
replace issue27063/other => ./other
```

----------------------------------------

TITLE: Defining Minimal Go Packages for Shadowing Tests - Go
DESCRIPTION: These Go code snippets declare minimal package stubs for use in package shadowing and conflict tests, as referenced by the shell script above. The packages 'foo' and 'math' are each defined only with a package statement and no implementation. These allow the Go tools to identify and process package directories during import and installation commands. No external dependencies are required beyond standard Go setup, and there are no additional parameters or exported functions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_shadow.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package foo
```

LANGUAGE: go
CODE:
```
package math
```

LANGUAGE: go
CODE:
```
package foo
```

----------------------------------------

TITLE: Minimal Go Module Configuration
DESCRIPTION: A minimal go.mod file for the test case that defines the module name and Go version requirement. This provides the basic module context for the test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_direct.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com

go 1.14
```

----------------------------------------

TITLE: Package Usage Implementation
DESCRIPTION: Go source file that imports the ambiguous package for testing purposes
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_ambiguous.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package use

import _ "example.com/ambiguous/a/b"
```

----------------------------------------

TITLE: Empty Package for Indirect Dependency
DESCRIPTION: Empty Go package used to trigger the indirect dependency in the test. This file is imported by the main package to ensure the indirect dependency is included in the build.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_downgrade_ambiguous.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package empty
```

----------------------------------------

TITLE: Defining Memory Locking Constants in Go for NetBSD ARM64
DESCRIPTION: Constants for the mlockall system call. These specify whether to lock current pages in memory, future pages, or both.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_40

LANGUAGE: go
CODE:
```
const MCL_CURRENT = 1
const MCL_FUTURE = 2
```

----------------------------------------

TITLE: Git Environment Configuration and Repository Setup
DESCRIPTION: Sets up git environment variables for author/committer information and initializes a new git repository with initial commit and tag
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitreposubdir.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GIT_AUTHOR_NAME='Sam Thanawalla'
env GIT_AUTHOR_EMAIL='samthanawalla@google.com'
env GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
env GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL

git init

git add foo/subdir
git commit -m 'initial commit'
git branch -m master
git tag foo/subdir/v1.2.3
```

----------------------------------------

TITLE: Defining an Auxiliary Go Library Package - Go
DESCRIPTION: This package statement for 'other' creates a minimal library placeholder within the auxiliary module. It forms the foundation for any subsequent library logic pertinent to example.com/other without additional code.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package other\n
```

----------------------------------------

TITLE: Go Get with Unprintable Rationale
DESCRIPTION: This snippet tests the behavior of 'go get' when a module version is retracted with a rationale containing unprintable characters. It verifies that the output indicates that the message was omitted due to the presence of these characters.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_8

LANGUAGE: go
CODE:
```
go get example.com/retract/rationale@v1.0.0-unprintable
stderr '^go: warning: example.com/retract/rationale@v1.0.0-unprintable: retracted by module author: \(message omitted: contains non-printable characters\)'
```

----------------------------------------

TITLE: Declaring Root Package pkgadded
DESCRIPTION: This snippet declares the root package 'pkgadded' which was added in version 1.1.0 of the module. It demonstrates how new packages can be introduced in module versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.2.0.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
// Package pkgadded was added in v1.1.0.
package pkgadded
```

----------------------------------------

TITLE: Validating go list Behavior for Proxy-Resolved Latest Version - Shell
DESCRIPTION: With the Go proxy and module cache set to local disk, this snippet runs 'go list' to resolve the latest version of the module and checks that the output deliberately omits the 'Origin' field. This tests that, when metadata is incomplete (because only one commit is available), the tooling does not emit partial origin details. Assertions check both presence and absence of expected fields. No external inputs beyond the local proxy are required.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61423.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
# If we resolve the "latest" version query using a proxy,
# it is only going to have Git origin information about the one
# commit — not the other tags that would go into resolving
# the underlying version list.
# 'go list' should not emit the partial information,
# since it isn't enough to reconstruct the result.

go list -m -json vcs-test.golang.org/git/issue61415.git@latest
cp stdout proxy-latest.json
stdout '"Version": "v0.0.0-20231114180000-08a4fa6bb9c0"'
! stdout '"Origin":'

```

----------------------------------------

TITLE: Defining Module 'b' Version 3 in Go
DESCRIPTION: This go.mod file defines module 'b' version 3 and its dependency on module 'd'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
module example.net/b

go 1.16

require example.net/d v0.2.0
```

----------------------------------------

TITLE: Socket Option Functions for NetBSD ARM64
DESCRIPTION: Function signatures for socket option operations in NetBSD on ARM64. These functions provide interfaces for getting socket options of various types, used for controlling network socket behavior.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_160

LANGUAGE: Go
CODE:
```
func Getsockname(int) (Sockaddr, error)
func GetsockoptByte(int, int, int) (uint8, error)
func GetsockoptICMPv6Filter(int, int, int) (*ICMPv6Filter, error)
func GetsockoptInet4Addr(int, int, int) ([4]uint8, error)
func GetsockoptInt(int, int, int) (int, error)
func GetsockoptIPMreq(int, int, int) (*IPMreq, error)
func GetsockoptIPv6Mreq(int, int, int) (*IPv6Mreq, error)
func GetsockoptIPv6MTUInfo(int, int, int) (*IPv6MTUInfo, error)
```

----------------------------------------

TITLE: Printer Configuration Example with Text Width
DESCRIPTION: Example showing how to configure the comment.Printer with JSON initialization and expected text wrapping output
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/README.md#2025-04-22_snippet_1

LANGUAGE: txt
CODE:
```
{"TextWidth": 20}
-- input --
Package gob manages streams of gobs - binary values exchanged between an
Encoder (transmitter) and a Decoder (receiver).
-- text --
Package gob
manages streams
of gobs - binary
values exchanged
between an Encoder
(transmitter) and a
Decoder (receiver).
```

----------------------------------------

TITLE: Testing pseudo-version resolution for v1.0.1-0
DESCRIPTION: Fetches a commit and verifies the pseudo-version format for v1.0.1-0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_11

LANGUAGE: shell
CODE:
```
go get ...test@fa4f5d6
go list -m all
stdout '^github.com/rsc/legacytest v1\.0\.1-0\.\d{14}-fa4f5d6a71c6$'
```

----------------------------------------

TITLE: Package Declaration
DESCRIPTION: Declares a Go package named 'c'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_c_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package c
```

----------------------------------------

TITLE: Testing Case-Insensitive Import Collision Error in Go
DESCRIPTION: A command that attempts to build Go code with case-insensitive import collisions, which should fail with an error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_collision.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
! go build
stderr 'case-insensitive import collision'
```

----------------------------------------

TITLE: Module Version Definitions
DESCRIPTION: Individual go.mod files for each version of the badgo module, testing different Go version formats including release candidates and invalid formats.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/badgo.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.net/badgo
go 1.17.0
```

LANGUAGE: go
CODE:
```
module example.net/badgo
go 1.17rc2
```

LANGUAGE: go
CODE:
```
module example.net/badgo
go 1.17.1
```

LANGUAGE: go
CODE:
```
module example.net/badgo
go v1.17.0
```

LANGUAGE: go
CODE:
```
module example.net/badgo
go v1.17.0-rc.2
```

LANGUAGE: go
CODE:
```
module example.net/badgo
go v1.17.1
```

LANGUAGE: go
CODE:
```
module example.net/badgo
go X.Y
```

----------------------------------------

TITLE: Package Declaration in Subpackage
DESCRIPTION: Empty package declaration in a subpackage, demonstrating module structure without root package implementation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_noroot_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package pkg
```

----------------------------------------

TITLE: CGO Flag Package
DESCRIPTION: Package with invalid cgo flag directive and want package import
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_load_err.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package cgoflag

// #cgo ʕ◔ϖ◔ʔ:

import _ "m/want"
```

----------------------------------------

TITLE: Defining a Simple Go Package `d`
DESCRIPTION: This snippet defines a minimal Go package named `d`. It serves as the base package being analyzed and imported in the associated test file (`d_test.go`) for the `go list` test case.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_e.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- p/d.go --
package d
```

----------------------------------------

TITLE: Defining Original go.mod File
DESCRIPTION: Defines the contents of the original go.mod file used in the tests. Contains only the module declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_cache.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Testing GOAUTH with Valid Netrc Credentials in Go
DESCRIPTION: This snippet tests GOAUTH behavior with valid credentials provided in a netrc file. It attempts to download a module requiring HTTPS basic auth, expecting success.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_netrc.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
# With credentials from a netrc file, it should succeed.
env NETRC=$WORK/netrc
go get vcs-test.golang.org/auth/or401
```

----------------------------------------

TITLE: Testing Bulk Module Downloads
DESCRIPTION: Tests multiple module downloads in bulk using cached results.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/reuse_git.txt#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
! go mod download -reuse=all.json -json vcs-test.golang.org/git/hello.git@latest vcs-test.golang.org/git/hello.git/v9@latest vcs-test.golang.org/git/hello.git/sub/v9@latest vcs-test.golang.org/git/tagtests.git@latest vcs-test.golang.org/git/tagtests.git@v0.2.2 vcs-test.golang.org/git/tagtests.git@master
```

----------------------------------------

TITLE: Defining a Go Module with go.mod - Go Mod - Go
DESCRIPTION: Defines the module path 'example.com/cov' in a go.mod file, which establishes the root for this collection of example Go packages targeting code coverage testing. No dependencies or module versions are specified beyond the root module. This file allows Go to recognize the working directory as a referenceable module for the subsequent test runs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_imports.txt#2025-04-22_snippet_0

LANGUAGE: Go Mod
CODE:
```
module example.com/cov
```

----------------------------------------

TITLE: Module Version Info JSON
DESCRIPTION: JSON configuration file specifying the module version information
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badzip_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v1.0.0"}
```

----------------------------------------

TITLE: Defining Ethernet Type Constants for NetBSD ARM64 CGO in Go
DESCRIPTION: This snippet defines a series of constants representing various Ethernet types used in network protocols. Each constant is defined with its corresponding numerical value and an 'ideal-int' type specification.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_21

LANGUAGE: Go
CODE:
```
const ETHERTYPE_CRONUS ideal-int
const ETHERTYPE_CRONUSVLN = 32771
const ETHERTYPE_CRONUSVLN ideal-int
const ETHERTYPE_DCA = 4660
const ETHERTYPE_DCA ideal-int
// ... (additional constants)
const ETHERTYPE_NBS = 2050
const ETHERTYPE_NBS ideal-int
const ETHERTYPE_NCD = 33097
```

----------------------------------------

TITLE: Deprecated syscall Functions for Linux
DESCRIPTION: List of deprecated syscall functions for Linux, including LSF (Linux Socket Filter) operations. These are marked for removal in future Go versions.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_36

LANGUAGE: Go
CODE:
```
pkg syscall (linux-386), func AttachLsf //deprecated
pkg syscall (linux-386), func DetachLsf //deprecated
pkg syscall (linux-386), func LsfJump //deprecated
pkg syscall (linux-386), func LsfSocket //deprecated
pkg syscall (linux-386), func LsfStmt //deprecated
pkg syscall (linux-386), func SetLsfPromisc //deprecated
pkg syscall (linux-386), func StringSlicePtr //deprecated
```

----------------------------------------

TITLE: File Descriptor and Pipe Functions in syscall Package for NetBSD ARM64
DESCRIPTION: These functions provide operations for managing file descriptors and creating pipes for interprocess communication. They include functions for duplicating descriptors and configuring their behavior.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_82

LANGUAGE: Go
CODE:
```
func Pipe([]int) error
func Pipe2([]int, int) error
func SetNonblock(int, bool) error
func Select(int, *FdSet, *FdSet, *FdSet, *Timeval) error
func Mkfifo(string, uint32) error
func Mknod(string, uint32, int) error
func Unmount(string, int) error
func Sendfile(int, int, *int64, int) (int, error)
```

----------------------------------------

TITLE: External Test with Dot Import
DESCRIPTION: Defines an external test file that uses a dot import to access an internal package's exported variable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue11864.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
package tx2_test

import . "vendor.org/tx2"
import "testing"

var Found = Exported

func TestNop(t *testing.T) {}
```

----------------------------------------

TITLE: Adding and Committing Main Go Source File
DESCRIPTION: Adds main.go to Git and creates a commit with a timestamp.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/insecurerepo.txt#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
at 2019-09-04T14:39:48-04:00
git add main.go
git commit -m 'main: add Go source file'
```

----------------------------------------

TITLE: Defining Windows Socket Error Constant in Go
DESCRIPTION: Declaration of WSAENOPROTOOPT error constant for Windows socket operations indicating protocol option is not available.
SOURCE: https://github.com/golang/go/blob/master/api/go1.23.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
const WSAENOPROTOOPT Errno
```

----------------------------------------

TITLE: Empty Go Package Declaration
DESCRIPTION: Minimal Go source file declaring package foo without any implementation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiled_files_issue28749.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package foo
```

----------------------------------------

TITLE: Network Interface Type Constants in Go for NetBSD ARM64
DESCRIPTION: Constants defining network interface types for NetBSD on ARM64. These include various network technology types like X.25 and Ethernet interfaces.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_130

LANGUAGE: Go
CODE:
```
const IFT_X25HUNTGROUP = 122
const IFT_X25 ideal-int
const IFT_X25MLP = 121
const IFT_X25PLE = 40
const IFT_XETHER = 26
```

----------------------------------------

TITLE: Main Package with Import of Module 'a'
DESCRIPTION: The main Go package that imports module 'a' but doesn't use it directly (blank import). This file is part of the test case to trigger module resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_tidy.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

import _ "a"

func main() {}
```

----------------------------------------

TITLE: Creating Initial Git Commit for Go Project
DESCRIPTION: Adds the main.go file to the repository, creates the initial commit with a message, and renames the default branch to 'master'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/mainonly.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
at 2019-09-05T14:07:43-04:00
git add main.go
git commit -a -m 'add main.go'
git branch -m master
```

----------------------------------------

TITLE: Go Module Main Source File
DESCRIPTION: Empty package declaration for module 'a'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_gowork.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package a
```

----------------------------------------

TITLE: Testing Go Vendor Consistency with Module Replacement
DESCRIPTION: A shell script that tests Go's vendor consistency check behavior when one main module replaces another. It demonstrates that removing a replace directive causes consistency checks to fail.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_main_module_replaced.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go work vendor
go list all # make sure the consistency checks pass
! stderr .

# Removing the replace causes consistency checks to fail
cp a_go_mod_no_replace a/go.mod
! go list all # consistency checks fail
stderr 'example.com/b@v0.0.0: is marked as replaced in vendor/modules.txt, but not replaced in the workspace'
```

----------------------------------------

TITLE: Testing Validity of Pseudo-Versions Based on Retracted Versions
DESCRIPTION: Checks that retraction does not affect the validity of existing pseudo-versions or make invalid pseudo-versions valid.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_pseudo_base.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
go get vcs-test.golang.org/git/retract-pseudo.git@v1.0.1-0.20201009173747-713affd19d7b
go list -m vcs-test.golang.org/git/retract-pseudo.git
stdout '^vcs-test.golang.org/git/retract-pseudo.git v1.0.1-0.20201009173747-713affd19d7b$'

! go get vcs-test.golang.org/git/retract-pseudo.git@v1.0.1-0.20201009173747-64c061ed4371
stderr '^go: vcs-test.golang.org/git/retract-pseudo.git@v1.0.1-0.20201009173747-64c061ed4371: invalid pseudo-version: tag \(v1.0.0\) found on revision 64c061ed4371 is already canonical, so should not be replaced with a pseudo-version derived from that tag$'
```

----------------------------------------

TITLE: Declaring Go Toolchain Version Metadata - JSON
DESCRIPTION: Declares the Go toolchain version metadata using a JSON object. This snippet specifies the version as v0.0.1-go1.22.5.linux-amd64 and is typically used by Go module infrastructure to track builds. The 'Version' field is necessary for automated tooling and information retrieval; it requires no dependencies beyond JSON parsing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.5.linux-amd64.txt#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{\"Version\":\"v0.0.1-go1.22.5.linux-amd64\"}
```

----------------------------------------

TITLE: Go Package a Declaration and Import
DESCRIPTION: Defines a Go package 'a' that imports package 'b'. This package is part of a test to demonstrate import path listing. It has no public members or functions, focusing solely on establishing an import relationship.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_imports.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package a; import _ "b"
```

----------------------------------------

TITLE: Minimal Go Package Definition
DESCRIPTION: A minimal Go package file that defines just the package name with no other contents. Used for testing basic package resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test1-svn-git.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package tiny
```

----------------------------------------

TITLE: Testing CGO_ENABLED with Default Settings in Go
DESCRIPTION: This snippet checks the default CGO_ENABLED setting on a system that can normally enable cgo. It uses the 'go env' command to verify the value.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/autocgo.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env CGO_ENABLED=
go env CGO_ENABLED
stdout 1
```

----------------------------------------

TITLE: Testing Go Mod Tidy and Vendor Commands
DESCRIPTION: This snippet tests the 'go mod tidy' and 'go mod vendor' commands and verifies that they ignore appengine imports.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_domain.txt#2025-04-22_snippet_4

LANGUAGE: Shell
CODE:
```
rm usenonexistent/x.go
go mod tidy
go mod vendor
```

----------------------------------------

TITLE: NetBSD ARM64 Socket Control Constants
DESCRIPTION: Socket control (SIOC) constants for network interface operations, including address management, media control, and interface configuration
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_146

LANGUAGE: Go
CODE:
```
const SIOCATMARK = 1074033415
const SIOCDELMULTI = 2156947762
const SIOCDELRT = 2151182859
const SIOCDIFADDR = 2156947737
const SIOCDIFPHYADDR = 2156947785
const SIOCDLIFADDR = 2165860638
```

----------------------------------------

TITLE: Getting Module Information from Shared Object
DESCRIPTION: This snippet extracts module dependency information from the `external.so` file using `go version -m`. The expected output includes the module path and version of the dependency. The `stdout` lines assert that the module path and version are correctly extracted.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_cshared.txt#_snippet_2

LANGUAGE: go
CODE:
```
go version -m external.so
stdout '^\tpath\trsc.io/fortune'
stdout '^\tmod\trsc.io/fortune\tv1.0.0'
```

----------------------------------------

TITLE: Command Line Options for CGo Source Generator in Makefile
DESCRIPTION: This snippet defines a command line tool interface for generating CGo source files, taking specific arguments including package path, file output path, and objdir. It parses command line arguments and sets up required variables for file processing.
SOURCE: https://github.com/golang/go/blob/master/src/compress/testdata/pi.txt#2025-04-22_snippet_1

LANGUAGE: Makefile
CODE:
```
46
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: A basic Go module definition for the cgocover test package. It specifies the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module cgocover

go 1.16
```

----------------------------------------

TITLE: Test Only Package Implementation
DESCRIPTION: Similar test function in a separate test-only package that verifies the absence of VCS settings in build info. Implements the same logic as the main package test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildvcs.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import (
	"runtime/debug"
	"strings"
	"testing"
)

func TestDetail(t *testing.T) {
	bi, ok := debug.ReadBuildInfo()
	if !ok {
		t.Fatal("BuildInfo not present")
	}
	for _, s := range bi.Settings {
		if strings.HasPrefix(s.Key, "vcs.") {
			t.Fatalf("unexpected VCS setting: %s=%s", s.Key, s.Value)
		}
	}
}
```

----------------------------------------

TITLE: Testing Package Dependencies with GO111MODULE On
DESCRIPTION: Shell commands testing package dependencies with module mode enabled, checking the same error conditions in a modular context.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_import_error_stack.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
cd testdep
! go test testdep/p1
stderr 'package testdep/p1 \(test\)\n\timports testdep/p2\n\timports testdep/p3: build constraints exclude all Go files '
! go vet testdep/p1
stderr 'package testdep/p1 \(test\)\n\timports testdep/p2\n\timports testdep/p3: build constraints exclude all Go files '
```

----------------------------------------

TITLE: Defining Error Constants in Go for NetBSD ARM64
DESCRIPTION: This snippet defines error constants used in system programming on NetBSD ARM64. These constants represent various error conditions that can occur during system calls or operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_125

LANGUAGE: Go
CODE:
```
const ETIME = 92
const ETIMEDOUT = 60
const ETIME Errno
const ETOOMANYREFS = 59
const ETXTBSY = 26
const EUSERS = 68
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: This snippet defines a Go module named 'x'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_domain.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
module x
```

----------------------------------------

TITLE: Defining Stat_t Struct for File Statistics in Go Syscall Package
DESCRIPTION: The Stat_t struct represents file statistics in the syscall package for Darwin ARM64. It contains detailed information about a file, including ownership, permissions, size, timestamps, and various system-specific attributes.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_208

LANGUAGE: Go
CODE:
```
type Stat_t struct {
    Dev           int32
    Mode          uint16
    Nlink         uint16
    Ino           uint64
    Uid           uint32
    Gid           uint32
    Rdev          int32
    Pad_cgo_0     [4]uint8
    Atimespec     Timespec
    Mtimespec     Timespec
    Ctimespec     Timespec
    Birthtimespec Timespec
    Size          int64
    Blocks        int64
    Blksize       int32
    Flags         uint32
    Gen           uint32
    Lspare        int32
    Qspare        [2]int64
}
```

----------------------------------------

TITLE: Defining IP Protocol Version Constants in Go for NetBSD ARM64
DESCRIPTION: Constants related to IPv6 protocol version identification and masking. These define the version number and bit mask for IPv6 packet headers.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_35

LANGUAGE: go
CODE:
```
const IPV6_VERSION = 96
const IPV6_VERSION_MASK = 240
```

----------------------------------------

TITLE: Build Verification Commands
DESCRIPTION: Shell commands to verify build reproducibility by comparing two separate builds of the same code
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue59571.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go build -a -o 1.a
go build -a -o 2.a
cmp -q 1.a 2.a
```

----------------------------------------

TITLE: Go Package Definition for Root Module
DESCRIPTION: Package declaration for the root module, defining a package named v2sub at the repository root.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2sub.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package v2sub
```

----------------------------------------

TITLE: Building CGO Test Executable in Go
DESCRIPTION: Builds the CGO test project into an executable named 'exe1' using the 'go build' command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cgo_consistent_results.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go build -o $WORK/exe1$GOEXE cgotest
```

----------------------------------------

TITLE: Testing Module Warning for System Temp Directories in Go
DESCRIPTION: Tests that GO111MODULE=auto properly ignores and warns about go.mod files in system temp directories. This verifies the security feature that prevents potentially malicious module files in temporary directories from being used.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_enabled.txt#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
env GO111MODULE=auto
cp $GOPATH/src/x/y/z/go.mod $WORK/tmp/go.mod
mkdir $WORK/tmp/mydir
cd $WORK/tmp/mydir
go env GOMOD
! stdout .+
stderr '^go: warning: ignoring go.mod in system temp root '
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Minimal Go module definition file specifying the module name and Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cgo.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.com/p

go 1.20
```

----------------------------------------

TITLE: GOPATH Test Package with Identical Import Path
DESCRIPTION: A test package y with different documentation but the same import path as the module package. This is used to verify that module packages are preferred over GOPATH packages in module mode.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
// Package y is located in a GOPATH workspace.
package y
```

----------------------------------------

TITLE: Verifying `go get` Accepts Package Paths with '+' (Shell)
DESCRIPTION: This shell snippet tests if the `go get` command can fetch packages whose paths contain the '+' character. It restores the main `go.mod` file, uses `go get` to fetch `example.net/cmd/x++`, and then uses `go list -m` to verify that the parent module (`example.net/cmd`) was correctly resolved and added, indicated by the replacement directive mapping.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path_plus.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
# 'go get' accepts package paths with pluses.
cp go.mod.orig go.mod
go get example.net/cmd/x++
go list -m example.net/cmd
stdout '^example.net/cmd v0.0.0-00010101000000-000000000000 => ./cmd$'
```

----------------------------------------

TITLE: Testing Go Package Loading Errors
DESCRIPTION: This snippet demonstrates running Go tests with expected loading errors. It checks for proper error reporting and test execution behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_setup_error.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go test -o=$devnull ./t1/p ./t
stderr '# m/t1/p\n.*package x is not in std'
stdout 'FAIL	m/t1/p \[setup failed\]'
stdout 'ok  	m/t'
```

----------------------------------------

TITLE: Skipped Test Implementation in Go
DESCRIPTION: A Go test file that demonstrates a skipped test by writing 'skipping' to stderr and exiting with status code 0 in TestMain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fail_newline.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package skip

import (
	"os"
	"testing"
)

func TestMain(m *testing.M) {
	os.Stderr.WriteString("skipping")
	os.Exit(0)
}
```

----------------------------------------

TITLE: Go Module Definition (Submodule)
DESCRIPTION: Submodule Go module definition file for the 'a' package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_bzr.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/a

go 1.18
```

----------------------------------------

TITLE: Testing Go Linker Output Reproducibility with Different GOMAXPROCS
DESCRIPTION: This shell script builds the cmd/gofmt package with different GOMAXPROCS values and compares the resulting executables to ensure consistent linker output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/repro_build.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# Check that goroutine scheduling does not affect linker output.
env GOMAXPROCS=16
go build -a -o gofmt16.exe cmd/gofmt
env GOMAXPROCS=17
go build -a -o gofmt17.exe cmd/gofmt
cmp -q gofmt16.exe gofmt17.exe
env GOMAXPROCS=18
go build -a -o gofmt18.exe cmd/gofmt
cmp -q gofmt16.exe gofmt18.exe
```

----------------------------------------

TITLE: Terminal Control Constants in Go Syscall Package for darwin-arm64
DESCRIPTION: Constants used for terminal control in the syscall package for darwin-arm64. These flags control input processing behavior like ignoring break conditions, carriage returns, and parity errors.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_66

LANGUAGE: Go
CODE:
```
const IGNBRK = 1
const IGNBRK ideal-int
const IGNCR = 128
const IGNCR ideal-int
const IGNPAR = 4
const IGNPAR ideal-int
const IMAXBEL = 8192
const IMAXBEL ideal-int
const INLCR = 64
const INLCR ideal-int
const INPCK = 16
const INPCK ideal-int
```

----------------------------------------

TITLE: go.work File with Unparsable Directive
DESCRIPTION: Contents of go.work.unparsable.txt file, containing an unknown directive 'notadirective'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```




notadirective
```

----------------------------------------

TITLE: System Call Function Signatures in Assembly
DESCRIPTION: Core system call dispatch function signatures implemented in assembly. These functions provide different levels of system call access, with Syscall and Syscall6 being standard interfaces and RawSyscall for low-level use.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/vendor/golang.org/x/sys/unix/README.md#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
func Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)
func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)
func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)
```

----------------------------------------

TITLE: Main Go Module Definition
DESCRIPTION: Main module definition file specifying module name, Go version requirement, and dependencies on retract packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_replace.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.14

require (
	example.com/retract v1.0.0-good
	example.com/retract/missingmod v1.0.0
)
```

----------------------------------------

TITLE: Defining a Confusing 'std' Package in Go
DESCRIPTION: This Go file defines a package named 'std', which is used to test import restrictions even with module replacements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_9

LANGUAGE: Go
CODE:
```
// Package std is an incredibly confusingly-named package.
package std
```

----------------------------------------

TITLE: Testing Pseudo-version Generation for Commit After Non-matching Major Version Tag in Go
DESCRIPTION: This snippet tests that the pseudo-version for a commit after a tag with a non-matching major version should be based on the last matching tag. It uses go mod edit to add a requirement and verifies the correct pseudo-version is generated.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_version.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
cp go.mod.orig go.mod
go mod edit -require github.com/pierrec/lz4@473cd7ce01a1
go list -m github.com/pierrec/lz4
stdout 'github.com/pierrec/lz4 v1.0.2-0.20190131084431-473cd7ce01a1'
cd outside
go list -m github.com/pierrec/lz4
stdout 'github.com/pierrec/lz4 v1.0.2-0.20190131084431-473cd7ce01a1'
cd ..
```

----------------------------------------

TITLE: Defining Go Module for Path Separator Test
DESCRIPTION: Go module definition file (go.mod) for the test package. It simply declares the module name as 'pkg'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_script_cmdcd.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module pkg
```

----------------------------------------

TITLE: Testing Go Get Command with Empty Local Module Patterns
DESCRIPTION: This snippet tests the 'go get' command with empty patterns that are local to the module. It verifies that the command warns about matched no packages exactly once for repeated executions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_nopkgs.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go get ./...
stderr -count=1 'matched no packages'

go get ./...
stderr -count=1 'matched no packages'
```

----------------------------------------

TITLE: Defining Linux-specific Package s
DESCRIPTION: Creates a Linux-specific implementation of package 's'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_all_gobuild.txt#2025-04-22_snippet_8

LANGUAGE: Go
CODE:
```
package s
```

----------------------------------------

TITLE: Running go list with vendor mode
DESCRIPTION: Executes 'go list' command with the -mod=vendor flag to test behavior with redundant requirements in go.mod.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_redundant_requirement.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go list -mod=vendor
```

----------------------------------------

TITLE: Defining IPv6 Option Constants in Go for Darwin ARM64 CGO
DESCRIPTION: This snippet defines constants for IPv6 options. These are used to set or get various IPv6-specific socket options.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_155

LANGUAGE: Go
CODE:
```
const IPV6_2292DSTOPTS = 23
const IPV6_2292DSTOPTS ideal-int
const IPV6_2292HOPLIMIT = 20
const IPV6_2292HOPLIMIT ideal-int
const IPV6_2292HOPOPTS = 22
const IPV6_2292HOPOPTS ideal-int
// ... more IPv6 option constants
```

----------------------------------------

TITLE: Updating Go Version in Module
DESCRIPTION: Shows how using -mod=mod updates the go version in go.mod, converting requirements from eager to lazy, and making requirements untidy.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
go list -mod=mod all
! stdout '^example.com/testdep$'
cmp stdout list-1.txt
cmpenv go.mod go.mod.untidy

go mod tidy
cmpenv go.mod go.mod.tidy
```

----------------------------------------

TITLE: Checking Module Association for External File with Go List (Shell)
DESCRIPTION: This shell snippet changes the current directory to 'a' and then uses `go list` to check the module associated with a Go file (`../b/b.go`) located outside the current directory but within the project structure. It asserts that the output matches the pattern '^<nil>$', indicating that Go correctly identifies the file specified by path as not belonging to a module in this context.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_command_line_arguments.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# The command-line-arguments package does not belong to a module...
cd a
go list -f '{{.Module}}' ../b/b.go
stdout '^<nil>$'
```

----------------------------------------

TITLE: Module C v0.2.0 Configuration
DESCRIPTION: The go.mod file for module 'c' v0.2.0, requiring 'b' v0.2.0. This creates a cycle in the dependency graph, which is the key aspect being tested.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
module c

go 1.13

require b v0.2.0
```

----------------------------------------

TITLE: Checking Toolchain Install Location
DESCRIPTION: Test cases to verify that toolchain components (e.g., cmd/fix) are installed to GOROOT/pkg, not affected by GOPATH or GOBIN settings.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_install.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
env GOPATH=$PWD
go list -f '{{.Target}}' cmd/fix
stdout $GOROOT'[/\\]pkg[/\\]tool[/\\]'$GOOS'_'$GOARCH'[/\\]fix'$GOEXE'$'

env GOBIN=$WORK/bin1
go list -f '{{.Target}}' cmd/fix
stdout $GOROOT'[/\\]pkg[/\\]tool[/\\]'$GOOS'_'$GOARCH'[/\\]fix'$GOEXE'$'
```

----------------------------------------

TITLE: Testing GOWORK Environment Variable Behavior
DESCRIPTION: Shell commands testing go list behavior with different GOWORK environment variable settings, including invalid paths and absolute path requirements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_gowork.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GOWORK=stop.work
! go list a # require absolute path
! stderr panic
env GOWORK=doesnotexist
! go list a
! stderr panic

env GOWORK=$GOPATH/src/stop.work
go list -n a
go build -n a
go test -n a
```

----------------------------------------

TITLE: Version Information in .info JSON
DESCRIPTION: JSON file containing version information for the module
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_invalidpath_v1_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v1.0.0"}
```

----------------------------------------

TITLE: Declaring an Empty Go Package - Go
DESCRIPTION: Defines an empty Go package named 'subpkg' in source file x.go. Contains only the package declaration, serving as a minimal starting point or test subject for package movement or discovery. No functions, types, or other code are included.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_join_subpkg_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package subpkg
```

----------------------------------------

TITLE: Empty Package Declaration
DESCRIPTION: Empty Go package file declaring package x without any content
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badzip_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package x
```

----------------------------------------

TITLE: Verifying Vendored Module Content in Go
DESCRIPTION: Compares the vendored module file with the local replacement to ensure correct vendoring.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
cmp vendor/rsc.io/quote/v3/quote.go local/not-rsc.io/quote/v3/quote.go
```

----------------------------------------

TITLE: V3 Package in Nest Vendor
DESCRIPTION: Package defining v3 constant in the nest/vendor directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_complex.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package v3

const ComplexNestVendorV3 = true
```

----------------------------------------

TITLE: Network Interface Type Constants Definition in Go for NetBSD ARM64
DESCRIPTION: This snippet contains constant definitions for network interface types in the syscall package for NetBSD ARM64 with CGO. These constants define standard identifiers for different types of network interfaces such as Ethernet, ATM, FDDI, wireless, etc. Each constant is defined both with its numeric value and as an ideal-int type.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_26

LANGUAGE: Go
CODE:
```
const IFT_ARCNETPLUS ideal-int
const IFT_ASYNC = 84
const IFT_ASYNC ideal-int
const IFT_ATM = 37
const IFT_ATMDXI = 105
const IFT_ATMDXI ideal-int
const IFT_ATMFUNI = 106
const IFT_ATMFUNI ideal-int
const IFT_ATM ideal-int
const IFT_ATMIMA = 107
const IFT_ATMIMA ideal-int
const IFT_ATMLOGICAL = 80
const IFT_ATMLOGICAL ideal-int
const IFT_ATMRADIO = 189
const IFT_ATMRADIO ideal-int
const IFT_ATMSUBINTERFACE = 134
const IFT_ATMSUBINTERFACE ideal-int
const IFT_ATMVCIENDPT = 194
const IFT_ATMVCIENDPT ideal-int
const IFT_ATMVIRTUAL = 149
const IFT_ATMVIRTUAL ideal-int
const IFT_BGPPOLICYACCOUNTING = 162
const IFT_BGPPOLICYACCOUNTING ideal-int
const IFT_BRIDGE = 209
const IFT_BRIDGE ideal-int
const IFT_BSC = 83
const IFT_BSC ideal-int
const IFT_CARP = 248
const IFT_CARP ideal-int
const IFT_CCTEMUL = 61
const IFT_CCTEMUL ideal-int
const IFT_CEPT = 19
const IFT_CEPT ideal-int
const IFT_CES = 133
const IFT_CES ideal-int
const IFT_CHANNEL = 70
const IFT_CHANNEL ideal-int
const IFT_CNR = 85
const IFT_CNR ideal-int
const IFT_COFFEE = 132
const IFT_COFFEE ideal-int
const IFT_COMPOSITELINK = 155
const IFT_COMPOSITELINK ideal-int
const IFT_DCN = 141
const IFT_DCN ideal-int
const IFT_DIGITALPOWERLINE = 138
const IFT_DIGITALPOWERLINE ideal-int
const IFT_DIGITALWRAPPEROVERHEADCHANNEL = 186
const IFT_DIGITALWRAPPEROVERHEADCHANNEL ideal-int
const IFT_DLSW = 74
const IFT_DLSW ideal-int
const IFT_DOCSCABLEDOWNSTREAM = 128
const IFT_DOCSCABLEDOWNSTREAM ideal-int
const IFT_DOCSCABLEMACLAYER = 127
const IFT_DOCSCABLEMACLAYER ideal-int
const IFT_DOCSCABLEUPSTREAM = 129
const IFT_DOCSCABLEUPSTREAMCHANNEL = 205
const IFT_DOCSCABLEUPSTREAMCHANNEL ideal-int
const IFT_DOCSCABLEUPSTREAM ideal-int
const IFT_DS0 = 81
const IFT_DS0BUNDLE = 82
const IFT_DS0BUNDLE ideal-int
const IFT_DS0 ideal-int
const IFT_DS1FDL = 170
const IFT_DS1FDL ideal-int
const IFT_DS3 = 30
const IFT_DS3 ideal-int
const IFT_DTM = 140
const IFT_DTM ideal-int
const IFT_DVBASILN = 172
const IFT_DVBASILN ideal-int
const IFT_DVBASIOUT = 173
const IFT_DVBASIOUT ideal-int
const IFT_DVBRCCDOWNSTREAM = 147
const IFT_DVBRCCDOWNSTREAM ideal-int
const IFT_DVBRCCMACLAYER = 146
const IFT_DVBRCCMACLAYER ideal-int
const IFT_DVBRCCUPSTREAM = 148
const IFT_DVBRCCUPSTREAM ideal-int
const IFT_ECONET = 206
const IFT_ECONET ideal-int
const IFT_EON = 25
const IFT_EON ideal-int
const IFT_EPLRS = 87
const IFT_EPLRS ideal-int
const IFT_ESCON = 73
const IFT_ESCON ideal-int
const IFT_ETHER = 6
const IFT_ETHER ideal-int
const IFT_FAITH = 242
const IFT_FAITH ideal-int
const IFT_FAST = 125
const IFT_FASTETHER = 62
const IFT_FASTETHERFX = 69
const IFT_FASTETHERFX ideal-int
const IFT_FASTETHER ideal-int
const IFT_FAST ideal-int
const IFT_FDDI = 15
const IFT_FDDI ideal-int
const IFT_FIBRECHANNEL = 56
const IFT_FIBRECHANNEL ideal-int
const IFT_FRAMERELAYINTERCONNECT = 58
const IFT_FRAMERELAYINTERCONNECT ideal-int
const IFT_FRAMERELAYMPI = 92
const IFT_FRAMERELAYMPI ideal-int
const IFT_FRDLCIENDPT = 193
const IFT_FRDLCIENDPT ideal-int
const IFT_FRELAY = 32
const IFT_FRELAYDCE = 44
const IFT_FRELAYDCE ideal-int
const IFT_FRELAY ideal-int
const IFT_FRF16MFRBUNDLE = 163
const IFT_FRF16MFRBUNDLE ideal-int
const IFT_FRFORWARD = 158
const IFT_FRFORWARD ideal-int
const IFT_G703AT2MB = 67
const IFT_G703AT2MB ideal-int
const IFT_G703AT64K = 66
const IFT_G703AT64K ideal-int
const IFT_GIF = 240
const IFT_GIF ideal-int
const IFT_GIGABITETHERNET = 117
const IFT_GIGABITETHERNET ideal-int
const IFT_GR303IDT = 178
const IFT_GR303IDT ideal-int
const IFT_GR303RDT = 177
const IFT_GR303RDT ideal-int
const IFT_H323GATEKEEPER = 164
const IFT_H323GATEKEEPER ideal-int
const IFT_H323PROXY = 165
const IFT_H323PROXY ideal-int
const IFT_HDH1822 = 3
const IFT_HDH1822 ideal-int
const IFT_HDLC = 118
const IFT_HDLC ideal-int
const IFT_HDSL2 = 168
const IFT_HDSL2 ideal-int
const IFT_HIPERLAN2 = 183
const IFT_HIPERLAN2 ideal-int
const IFT_HIPPI = 47
const IFT_HIPPI ideal-int
const IFT_HIPPIINTERFACE = 57
const IFT_HIPPIINTERFACE ideal-int
const IFT_HOSTPAD = 90
const IFT_HOSTPAD ideal-int
const IFT_HSSI = 46
const IFT_HSSI ideal-int
const IFT_HY = 14
const IFT_HY ideal-int
const IFT_IBM370PARCHAN = 72
const IFT_IBM370PARCHAN ideal-int
const IFT_IDSL = 154
const IFT_IDSL ideal-int
const IFT_IEEE1394 = 144
const IFT_IEEE1394 ideal-int
const IFT_IEEE80211 = 71
const IFT_IEEE80211 ideal-int
const IFT_IEEE80212 = 55
const IFT_IEEE80212 ideal-int
const IFT_IEEE8023ADLAG = 161
const IFT_IEEE8023ADLAG ideal-int
const IFT_IFGSN = 145
const IFT_IFGSN ideal-int
const IFT_IMT = 190
const IFT_IMT ideal-int
const IFT_INFINIBAND = 199
const IFT_INFINIBAND ideal-int
```

----------------------------------------

TITLE: Validating GOOS and GOARCH Combinations
DESCRIPTION: This snippet tests the validation of GOOS and GOARCH combinations when using 'go env -w' and 'go env -u'. It checks for invalid individual values and incompatible combinations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
# go env -w/-u checks validity of GOOS/ARCH combinations
env GOOS=
env GOARCH=
# check -w doesn't allow invalid GOOS
! go env -w GOOS=linuxx
stderr 'unsupported GOOS/GOARCH pair linuxx'
# check -w doesn't allow invalid GOARCH
! go env -w GOARCH=amd644
stderr 'unsupported GOOS/GOARCH.*/amd644$'
# check -w doesn't allow invalid GOOS with valid GOARCH
! go env -w GOOS=linuxx GOARCH=amd64
stderr 'unsupported GOOS/GOARCH pair linuxx'
# check a valid GOOS and GOARCH values but an incompatible combinations
! go env -w GOOS=android GOARCH=s390x
stderr 'unsupported GOOS/GOARCH pair android/s390x'
# check that -u considers explicit envs
go env -w GOOS=linux GOARCH=mips
env GOOS=windows
! go env -u GOOS
stderr 'unsupported GOOS/GOARCH.*windows/mips$'
env GOOS=
```

----------------------------------------

TITLE: Defining C Function for Syso Generation
DESCRIPTION: Defines a C function f() for generating a syso file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_deps.txt#2025-04-22_snippet_3

LANGUAGE: C
CODE:
```
//go:build ignore

void f() {}
```

----------------------------------------

TITLE: Configuring Go Module for Syso and Cgo Test
DESCRIPTION: Defines the Go module configuration for the test project.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_deps.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module m

go 1.18
```

----------------------------------------

TITLE: Tiny Package Definitions for Testing
DESCRIPTION: Two Go source files defining a simple package 'tiny' with integer and boolean variables. Used as test objects for the Go coverage instrumentation test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_cmdline_pkgs.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package tiny

var Tvar int
```

LANGUAGE: go
CODE:
```
package tiny

var Tvar2 bool
```

----------------------------------------

TITLE: Go Build Cache Test Script
DESCRIPTION: Shell script that tests Go's build caching behavior using various build commands and verifying compiler/linker execution patterns.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_output.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
env GO111MODULE=off
env GODEBUG=gocachetest=1

[!compiler:gc] skip
[short] skip # clears cache, rebuilds too much

# Set up fresh GOCACHE.
env GOCACHE=$WORK/gocache
mkdir $GOCACHE

# Building a trivial non-main package should run compiler the first time.
go build -x -gcflags=-m lib.go
stderr 'compile( |\.exe"?)'
stderr 'lib.go:2.* can inline f'

# ... but not the second, even though it still prints the compiler output.
go build -x -gcflags=-m lib.go
! stderr 'compile( |\.exe"?)'
stderr 'lib.go:2.* can inline f'
```

----------------------------------------

TITLE: CGO Integration with Quoted Header
DESCRIPTION: Alternative CGO implementation that includes a header using quotes. Tests that overlays work with different header inclusion styles.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_16

LANGUAGE: go
CODE:
```
package main

// #include "cgo_header.h"
import "C"

func main() {
	C.say_hello()
}
```

----------------------------------------

TITLE: GOPATH Test Package for External Dependency
DESCRIPTION: A test implementation of the rsc.io/quote package in GOPATH to verify that module dependencies are preferred over packages in GOPATH. Includes a Hello function to test function documentation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
// Package quote is located in a GOPATH workspace.
package quote

// Hello is located in a GOPATH workspace.
func Hello() string { return "" }
```

----------------------------------------

TITLE: Package with Undeprecated Import - undeprecated.go
DESCRIPTION: Defines a package that imports a module that is no longer deprecated in its latest version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecated.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package undeprecated

import _ "example.com/undeprecated"
```

----------------------------------------

TITLE: Providing Module Metadata Using .info File - JSON
DESCRIPTION: Specifies module version information in a standard Go module JSON metadata file (.info). The 'Version' key declares the module version (v1.0.0). Tools use this information to resolve and download the correct module versions. No other metadata fields are present.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_join_subpkg_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: JSON
CODE:
```
{\"Version\": \"v1.0.0\"}
```

----------------------------------------

TITLE: Darwin ARM64 Socket Option Constants
DESCRIPTION: Constants defining socket options for Darwin ARM64 systems, including timestamp, type, and behavior flags.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_98

LANGUAGE: Go
CODE:
```
const SO_TYPE = 4104
const SO_USELOOPBACK = 64
const SO_WANTMORE = 16384
const SO_WANTOOBFLAG = 32768
```

----------------------------------------

TITLE: Module Definition
DESCRIPTION: Defines the Go module name as rsc.io/CGO
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_!c!g!o_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module rsc.io/CGO
```

----------------------------------------

TITLE: Defining SSH Stub in Go
DESCRIPTION: Creates a Go program that stubs out uses of SSH by 'go get' and always exits with status 1.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
// stub out uses of ssh by go get
package main

import "os"

func main() {
	os.Exit(1)
}
```

----------------------------------------

TITLE: Modifying and Verifying Go Module Files
DESCRIPTION: This shell script segment modifies and verifies Go module files by updating the module path and ensuring the permissions are correctly set and maintained. It involves changing file permissions, updating the module, and running the script to verify the changes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_permissions.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```

chmod 0640 go.mod
chmod 0604 go.sum
go mod edit -module=golang.org/issue/34634

go get
cmp go.mod go.mod.want
cmp go.sum go.sum.want

go run .
stdout 'go.mod: 0640'
stdout 'go.sum: 0604'

```

----------------------------------------

TITLE: Import Error Test
DESCRIPTION: Test file that imports a package with compilation errors to verify error attribution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_json.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import _ "m/compileerror"
```

----------------------------------------

TITLE: Initial Package Build with PGO
DESCRIPTION: Tests first build with PGO which should trigger preprofile
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_pgo.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go build -x -pgo=default.pgo lib.go
stderr 'preprofile.*default\.pgo'
```

----------------------------------------

TITLE: Testing Package Split into Submodule
DESCRIPTION: Tests package resolution when a package is moved into a submodule in a newer version. Verifies that old version references continue to work and upgrades handle the transition correctly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_moved.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go mod init example.com/foo
go get example.com/split/subpkg@v1.0.0
go list -m all
stdout 'example.com/split v1.0.0'

go get example.com/split/subpkg@v1.1.0

rm go.mod
go mod init example.com/foo
go get example.com/split/subpkg
go list -m all
stdout 'example.com/split/subpkg v1.1.0'
```

----------------------------------------

TITLE: Testing Internal Package Re-export
DESCRIPTION: Tests re-exporting an internal package through a public package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_internal.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package j

import _ "testinternal4/q/internal/x"
```

----------------------------------------

TITLE: Git Repository Setup and Initial Commits
DESCRIPTION: Initializes a Git repository with author information and creates initial commit with LICENSE and README files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/vgotest1.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GIT_AUTHOR_NAME='Russ Cox'
env GIT_AUTHOR_EMAIL='rsc@golang.org'
env GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
env GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL

git init

git add LICENSE README.md
git commit -m 'initial commit'
git branch -m master
```

----------------------------------------

TITLE: Verifying cache invalidation on testdata modification
DESCRIPTION: Tests cache behavior when modifying files in the testdata directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_cached.txt#2025-04-22_snippet_4

LANGUAGE: Shell
CODE:
```
go test -run=ReadTestdata .
! stdout '(cached)'
go test -run=ReadTestdata .
stdout '(cached)'
cp testdata/bar.txt testdata/foo.txt
go test -run=ReadTestdata .
! stdout '(cached)'
```

----------------------------------------

TITLE: Git Environment Setup and Commands
DESCRIPTION: Sets up Git environment variables and executes a series of Git commands to manage repository state. Includes committing a nested Go module and then removing it.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue61415.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GIT_AUTHOR_NAME='Bryan C. Mills'
env GIT_AUTHOR_EMAIL='bcmills@google.com'
env GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
env GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL

git init

git add go.mod nested
git commit -m 'nested: add go.mod'
git branch -m main

git tag has-nested

git rm -r nested
git commit -m 'nested: delete subdirectory'

git show-ref --tags --heads
git log --pretty=oneline
```

----------------------------------------

TITLE: Defining Error Constants for Darwin ARM64 in Go
DESCRIPTION: This snippet defines various error constants for the Darwin ARM64 architecture. These constants represent different types of system errors that can occur during program execution.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_58

LANGUAGE: Go
CODE:
```
const EFTYPE = 79
const EFTYPE Errno
const EHOSTDOWN = 64
const EHOSTUNREACH = 65
const EIDRM = 90
const EILSEQ = 92
const EINPROGRESS = 36
const EINTR = 4
const EINVAL = 22
const EIO = 5
// ... more error constants ...
```

----------------------------------------

TITLE: Internal Package Test
DESCRIPTION: Test file in the same package testing the vendored strings.Msg value.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vendor.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import (
	"strings" // really ../vendor/strings
	"testing"
)

func TestMsgInternal(t *testing.T) {
	if strings.Msg != "hello, world" {
		t.Fatalf("unexpected msg: %v", strings.Msg)
	}
}
```

----------------------------------------

TITLE: Testing Go Help Doc Command in Shell
DESCRIPTION: This shell snippet tests the 'go help doc' command, ensuring it outputs correctly formatted documentation requests such as 'go doc <pkg>' and 'go doc <pkg> <sym> <method>'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/doc.txt#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
# go help doc
go help doc
stdout 'go doc'
stdout 'go doc <pkg>'
stdout 'go doc <sym>\[\.<methodOrField>\]'
stdout 'go doc \[<pkg>\.\]<sym>\[\.<methodOrField>\]'
stdout 'go doc \[<pkg>\.\]\[<sym>\.\]<methodOrField>'
stdout 'go doc <pkg> <sym>\[\.<methodOrField>\]'
```

----------------------------------------

TITLE: Testing Parallel Output Behavior with JSON Mode in Go
DESCRIPTION: Shell commands that run a parallel Go test with JSON output and verify that each test's output is correctly attributed to the respective subtest in the JSON result.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_parallel_fail.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
! go test -json -parallel 3 chatty_parallel_test.go -v
stdout -count=1 '"Test":"TestChattyParallel/sub-0","Output":"    chatty_parallel_test.go:38: error from sub-0\\n"'
stdout -count=1 '"Test":"TestChattyParallel/sub-1","Output":"    chatty_parallel_test.go:38: error from sub-1\\n"'
stdout -count=1 '"Test":"TestChattyParallel/sub-2","Output":"    chatty_parallel_test.go:38: error from sub-2\\n"'
```

----------------------------------------

TITLE: Testing Go List Command Error Handling
DESCRIPTION: Tests go list command's handling of invalid Go files and package errors, specifically for issue #39986 ensuring invalid files are listed in InvalidGoFiles.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_pkgerror.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go list -e -f '{{.Incomplete}}{{"\n"}}{{.Error}}{{"\n"}}{{.InvalidGoFiles}}{{"\n"}}' .
```

----------------------------------------

TITLE: Defining Constants for debug/elf Package in Go
DESCRIPTION: This snippet defines a large number of constants related to ELF file formats for different architectures including 386, AARCH64, and ARM.
SOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
const R_386_16 = 20
const R_386_16 R_386
const R_386_32PLT = 11
const R_386_32PLT R_386
// ... (many more constants)
const R_ARM_PLT32_ABS = 94
```

----------------------------------------

TITLE: Initializing Empty Go Source File for a - Go
DESCRIPTION: This Go file initializes the a package with no exported symbols or logic. Its purpose is solely to be importable and to satisfy the module's presence in the test dependency graph. It requires no dependencies, parameters, or outputs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package a
```

----------------------------------------

TITLE: Running Local Go Website Server
DESCRIPTION: Command to run a local instance of the Go website server for previewing release notes content.
SOURCE: https://github.com/golang/go/blob/master/doc/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
go run golang.org/x/website/cmd/golangorg@latest -goroot=..
```

----------------------------------------

TITLE: Go Test File with Intentional Timeout
DESCRIPTION: This Go test file contains a single test function that sleeps for 1 hour. It's designed to fail when run with a short timeout.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_timeout.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package p

import (
	"testing"
	"time"
)

func Test(t *testing.T) {
	time.Sleep(1*time.Hour)
}
```

----------------------------------------

TITLE: Error Handling When Repo Cannot Be Used
DESCRIPTION: This snippet simulates a scenario where a Mercurial repository exists but cannot be accessed due to a fake hg executable. It asserts that an error is produced suggesting the use of -buildvcs=false. It then cleans up the environment.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_1

LANGUAGE: Shell
CODE:
```
cd ..
mkdir .hg
env PATH=$WORK${/}fakebin${:}$oldpath
chmod 0755 $WORK/fakebin/hg
! exec hg help
cd a
! go install
stderr '^error obtaining VCS status: exit status 1\n\tUse -buildvcs=false to disable VCS stamping.$'
rm $GOBIN/a$GOEXE
cd ..
env PATH=$oldpath
rm .hg
```

----------------------------------------

TITLE: Getting Excluded Module Version
DESCRIPTION: Attempts to get an excluded module version using 'go get' command, which should fail with an error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_4

LANGUAGE: Shell
CODE:
```
cp go.exclude.mod go.exclude.mod.orig
! go get -modfile=go.exclude.mod rsc.io/quote@v1.5.0
stderr '^go: rsc.io/quote@v1.5.0: excluded by go.mod$'
```

----------------------------------------

TITLE: Berkeley Packet Filter (BPF) Functions in syscall Package for NetBSD ARM64
DESCRIPTION: These functions provide control of Berkeley Packet Filter (BPF) devices, allowing packet capture and network monitoring with various filtering options and configurations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_78

LANGUAGE: Go
CODE:
```
func SetBpf(int, []BpfInsn) error
func SetBpfBuflen(int, int) (int, error)
func SetBpfDatalink(int, int) (int, error)
func SetBpfHeadercmpl(int, int) error
func SetBpfImmediate(int, int) error
func SetBpfInterface(int, string) error
func SetBpfPromisc(int, int) error
func SetBpfTimeout(int, *Timeval) error
```

----------------------------------------

TITLE: Defining Time-Related Structs in Go Syscall Package
DESCRIPTION: Definitions for time-related structures in the syscall package for Darwin ARM64. These include Timespec (high-resolution time with seconds and nanoseconds), Timeval (time with seconds and microseconds), and Timeval32 (32-bit version for compatibility).
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_212

LANGUAGE: Go
CODE:
```
type Timespec struct {
    Sec  int64
    Nsec int64
}

type Timeval struct {
    Sec         int64
    Usec        int32
    Pad_cgo_0   [4]uint8
}

type Timeval32 struct {
    Sec  int32
    Usec int32
}
```

----------------------------------------

TITLE: Defining SysProcAttr Structure in Go for NetBSD ARM64
DESCRIPTION: Definition of the SysProcAttr struct which contains NetBSD-specific process attributes. It includes fields for process credentials, process group ID, controlling terminal, and various process creation flags.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_108

LANGUAGE: Go
CODE:
```
type SysProcAttr struct {
    Chroot string
    Credential *Credential
    Ctty int
    Foreground bool
    Noctty bool
    Pgid int
    Ptrace bool
    Setctty bool
    Setpgid bool
    Setsid bool
}
```

----------------------------------------

TITLE: Testing Package-Specific Flag Patterns in Go Build
DESCRIPTION: Shell script that tests how 'work=' and 'tool=' patterns in '-gcflags' affect different packages during compilation. It verifies that 'work=' applies flags only to the specified package while 'tool=' applies flags to the main package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_perpkgflag.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go build -n '-gcflags=work=-fakeflag' example.com/foo/a
stderr 'compile.*-p example.com/foo/a.*-fakeflag'
! stderr 'compile.*-p example.com/dep.*-fakeflag'

go build -n '-gcflags=tool=-fakeflag' example.com/foo/a example.com/dep/tooldep
! stderr 'compile.*-p example.com/foo/a.*-fakeflag'
! stderr 'compile.*-p example.com/dep.*-fakeflag'
stderr 'compile.*-p main.*-fakeflag.*main.go'
```

----------------------------------------

TITLE: Error Package with Compilation Error
DESCRIPTION: Go package demonstrating a compilation error with undefined reference to DoesNotCompile.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-replace.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package err

var X = DoesNotCompile
```

----------------------------------------

TITLE: Test Script for Import and FindOnly Functionality
DESCRIPTION: A bash script that tests go/build's Import functionality across different module modes (off, auto, on) and directory contexts (inside/outside GOPATH/src).
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gobuild_import.txt#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
# go/build's Import should find modules by invoking the go command

go build -o $WORK ./testimport ./testfindonly

# GO111MODULE=off
env GO111MODULE=off
! exec $WORK/testimport$GOEXE gobuild.example.com/x/y/z/w .

# GO111MODULE=auto in GOPATH/src
env GO111MODULE=auto
exec $WORK/testimport$GOEXE gobuild.example.com/x/y/z/w .

# GO111MODULE=auto outside GOPATH/src
cd $GOPATH/other
env GO111MODULE=auto
exec $WORK/testimport$GOEXE other/x/y/z/w .
stdout w2.go

! exec $WORK/testimport$GOEXE gobuild.example.com/x/y/z/w .
stderr 'no required module provides package gobuild.example.com/x/y/z/w; to add it:\n\tgo get gobuild.example.com/x/y/z/w'

cd z
exec $WORK/testimport$GOEXE other/x/y/z/w .
stdout w2.go

# GO111MODULE=on outside GOPATH/src
env GO111MODULE=
exec $WORK/testimport$GOEXE other/x/y/z/w .
stdout w2.go
env GO111MODULE=on
exec $WORK/testimport$GOEXE other/x/y/z/w .
stdout w2.go

# GO111MODULE=on in GOPATH/src
cd $GOPATH/src
env GO111MODULE=
exec $WORK/testimport$GOEXE gobuild.example.com/x/y/z/w .
stdout w1.go
env GO111MODULE=on
exec $WORK/testimport$GOEXE gobuild.example.com/x/y/z/w .
stdout w1.go
cd w
exec $WORK/testimport$GOEXE gobuild.example.com/x/y/z/w ..
stdout w1.go

# go/build's Import in FindOnly mode should find directories by invoking the go command
#
# Calling build.Import in build.FindOnly mode on an import path of a Go package
# that produces errors when loading (e.g., due to build constraints not matching
# the current build context) should return the package directory and nil error.

# Issue 31603: Import with non-empty srcDir should work.
env GO111MODULE=on
exec $WORK/testfindonly$GOEXE gobuild.example.com/x/y/z/i $WORK
! stdout 'build constraints'
stdout '^dir='$WORK'.+i err=<nil>$'

# Issue 37153: Import with empty srcDir should work.
env GO111MODULE=on
exec $WORK/testfindonly$GOEXE gobuild.example.com/x/y/z/i ''
! stdout 'build constraints'
stdout '^dir='$WORK'.+i err=<nil>$'
```

----------------------------------------

TITLE: Memory Protection Constants for OpenBSD in Go
DESCRIPTION: Defines memory protection constants used with mprotect() system call on OpenBSD. These constants control access permissions for memory pages.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_53

LANGUAGE: Go
CODE:
```
const PROT_NONE = 0         // No access
const PROT_READ = 1         // Pages can be read
const PROT_WRITE = 2        // Pages can be written
const PROT_EXEC = 4         // Pages can be executed
```

----------------------------------------

TITLE: Testing Go module download for nonexistent master branch
DESCRIPTION: This snippet tests the behavior of 'go mod download' when attempting to download the master branch of a nonexistent repository. It checks for specific error messages and ensures 'unknown revision' is not in the output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_private_vcs.txt#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
! go mod download github.com/golang/nonexist@master
stderr '^Confirm the import path was entered correctly.$'
stderr '^If this is a private repository, see https://golang.org/doc/faq#git_https for additional information.$'
! stderr 'unknown revision'
! stdout .
```

----------------------------------------

TITLE: Validating CompiledGoFiles with go list - Shell
DESCRIPTION: This shell snippet runs the 'go list' command with a customized output template to verify which files are reported as compiled Go files in a module utilizing SWIG and Cgo. It expects a.go and a precise count of cache-based files, ensuring SWIG-generated C++ sources are not included in CompiledGoFiles. Conditional stdout checks enforce correct behavior across different compilers (gc, gccgo). 'go' must be installed and available; the module structure must match the provided layout.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_swigcxx.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list -f '{{.CompiledGoFiles}}' -compiled=true example/swig

stdout a\.go
[compiler:gc] stdout -count=3 $GOCACHE
[compiler:gccgo] stdout -count=2 $GOCACHE
```

----------------------------------------

TITLE: Windows WSAECONNABORTED Constant Definition
DESCRIPTION: Defines WSAECONNABORTED constant and its Errno type for Windows systems, used for connection abort errors
SOURCE: https://github.com/golang/go/blob/master/api/go1.9.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
const WSAECONNABORTED Errno = 10053
```

----------------------------------------

TITLE: Importing Vendored Package in Go Main Program - Go
DESCRIPTION: This Go program demonstrates importing a vendored package 'v' using an import with the blank identifier, solely for side effects. The main function is empty, highlighting the minimal use case for package import. The code is intended to test vendoring and build mechanics rather than application logic. Requires the vendored 'v' package to exist at build time, no external dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_vendor_issue14054.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import _ `v`

func main () {}
```

----------------------------------------

TITLE: Implementing Process32 API for Windows in Go syscall package
DESCRIPTION: Defines Windows process management constants and functions in the syscall package for both 386 and amd64 architectures. Includes process enumeration capabilities with CreateToolhelp32Snapshot, Process32First, and Process32Next functions along with the ProcessEntry32 structure.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_28

LANGUAGE: go
CODE:
```
// Windows process-related constants
const TH32CS_INHERIT = 2147483648
const TH32CS_SNAPALL = 15
const TH32CS_SNAPHEAPLIST = 1
const TH32CS_SNAPMODULE = 8
const TH32CS_SNAPMODULE32 = 16
const TH32CS_SNAPPROCESS = 2
const TH32CS_SNAPTHREAD = 4

// Windows process management functions
func CreateToolhelp32Snapshot(uint32, uint32) (Handle, error)
func Process32First(Handle, *ProcessEntry32) error
func Process32Next(Handle, *ProcessEntry32) error

// ProcessEntry32 structure definition
type ProcessEntry32 struct {
    Size uint32
    Usage uint32
    ProcessID uint32
    DefaultHeapID uintptr
    ModuleID uint32
    Threads uint32
    ParentProcessID uint32
    PriClassBase int32
    Flags uint32
    ExeFile [260]uint16
}
```

----------------------------------------

TITLE: Empty Package Declaration
DESCRIPTION: Basic Go package declaration without implementation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_a_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package a
```

----------------------------------------

TITLE: Testing Goexit Behavior in Go Fuzz Tests
DESCRIPTION: This function tests how Go's fuzzing handles a call to runtime.Goexit(). It calls Goexit when the input is not 'aa'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
func FuzzWithGoexit(f *testing.F) {
	f.Add([]byte("aa"))
	f.Fuzz(func(t *testing.T, b []byte) {
		if string(b) != "aa" {
			runtime.Goexit()
		}
	})
}
```

----------------------------------------

TITLE: Go Module Definition File
DESCRIPTION: Basic go.mod file that defines a module named 'example' with Go 1.18 as the required version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_dot.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example
go 1.18
```

----------------------------------------

TITLE: Defining Memory Protection Constants (PROT_*) in Go for darwin-arm64
DESCRIPTION: Constants for memory protection flags used with mmap(2) and related system calls. These flags control whether memory can be read from, written to, or executed, or combinations of these permissions.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_88

LANGUAGE: Go
CODE:
```
const PROT_EXEC = 4
const PROT_EXEC ideal-int
const PROT_NONE = 0
const PROT_NONE ideal-int
const PROT_READ = 1
const PROT_READ ideal-int
const PROT_WRITE = 2
const PROT_WRITE ideal-int
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: Specifies the Go module configuration with Go version 1.17.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_all_gobuild.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
go 1.17
module m
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: A simple Go module definition for the test package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_test_race.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module test
```

----------------------------------------

TITLE: Defining SYSCTL Constants for NetBSD ARM64
DESCRIPTION: Defines SYSCTL-related constants for NetBSD ARM64 with CGO support. These constants are used for system configuration operations through the sysctl interface.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_65

LANGUAGE: Go
CODE:
```
const SYSCTL_VERS_0 = 0
const SYSCTL_VERS_1 = 16777216
const SYSCTL_VERSION = 16777216
const SYSCTL_VERS_MASK = 4278190080
```

----------------------------------------

TITLE: Declaring Unicode Unassigned Category Range Table - Go
DESCRIPTION: Declares a RangeTable pointer for the Unicode Cn (Unassigned) category that defines the code point ranges for unassigned characters.
SOURCE: https://github.com/golang/go/blob/master/api/next/70780.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
var Cn *RangeTable
```

----------------------------------------

TITLE: Defining Unicode version and new RangeTables in unicode package
DESCRIPTION: Declaration of the Unicode version constant and new RangeTable variables in the unicode package. These represent Unicode character ranges for various scripts added in Unicode 11.0.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_178

LANGUAGE: go
CODE:
```
const Version = "11.0.0"
var Dogra *RangeTable
var Gunjala_Gondi *RangeTable
var Hanifi_Rohingya *RangeTable
var Makasar *RangeTable
var Medefaidrin *RangeTable
var Old_Sogdian *RangeTable
var Sogdian *RangeTable
```

----------------------------------------

TITLE: Defining Go Module in Root Directory
DESCRIPTION: This snippet shows the contents of the go.mod file in the root directory, which defines the module name as 'x'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dir.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module x
```

----------------------------------------

TITLE: Testing GOAUTH=off Behavior in Go
DESCRIPTION: This snippet tests the behavior when GOAUTH is set to 'off'. It attempts to download a module requiring HTTPS basic auth, expecting failure even with valid netrc credentials.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_netrc.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
# GOAUTH=off should result in failures.
env GOAUTH='off'
# Without credentials, downloading a module from a path that requires HTTPS
# basic auth should fail.
env NETRC=$WORK/empty
! go get vcs-test.golang.org/auth/or401
stderr '^\tserver response: ACCESS DENIED, buddy$'

# GOAUTH='off' should ignore credentials from a valid netrc file.
env GOAUTH='off'
env NETRC=$WORK/netrc
! go get vcs-test.golang.org/auth/or401
stderr '^\tserver response: ACCESS DENIED, buddy$'
```

----------------------------------------

TITLE: Fake Package Implementation
DESCRIPTION: Simple fake package implementation with DoNothing function that returns a static string value.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue14613.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package fake

func DoNothing() string {
	return "Ok"
}
```

----------------------------------------

TITLE: Invalid Go File
DESCRIPTION: Go file without a package declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_overlay.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
// no package statement
```

----------------------------------------

TITLE: Expected vendor/modules.txt Content
DESCRIPTION: The expected content of the vendor/modules.txt file after running 'go mod vendor', which should include metadata about all replacement directives regardless of whether they're used.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_12

LANGUAGE: plaintext
CODE:
```
# example.com/a v0.1.0 => ./a
## explicit
example.com/a
# example.com/d v0.2.0 => ./d2
example.com/d
# example.com/b v0.1.0 => ./b1
# example.com/b v0.2.0-unused => ./b2
# example.com/c => ./c
# example.com/d v0.1.0 => ./d1
# example.com/e => example.com/e v0.1.0-unused
```

----------------------------------------

TITLE: Defining a Failing Input for `FuzzFail` (Go Fuzz Corpus)
DESCRIPTION: This file is an entry in the Go fuzzing corpus located in `testdata/fuzz/FuzzFail/`. It indicates the fuzzing engine version (`go test fuzz v1`) and contains a specific input (`[]byte("\x05")`) that previously caused the `FuzzFail` test to fail. This input is saved by the fuzzer to be reused in future test runs as a regression test case.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_fuzzfail_v0.2.0.txt#2025-04-22_snippet_4

LANGUAGE: text
CODE:
```
go test fuzz v1
[]byte("\x05")
```

----------------------------------------

TITLE: Testing Deprecated Insecure Flag in GOPATH Mode
DESCRIPTION: Sets GO111MODULE to off for GOPATH mode and attempts to use the deprecated -insecure flag with go get, which should produce an error message recommending GOINSECURE instead.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure_no_longer_supported.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=off

# GOPATH: Fetch with insecure, should error
! go get -insecure test
stderr 'go: -insecure flag is no longer supported; use GOINSECURE instead'
```

----------------------------------------

TITLE: Testing pkg@version Syntax Rejection in GOPATH Mode
DESCRIPTION: This test script verifies that the pkg@version syntax is properly rejected when modules are disabled with GO111MODULE=off. It tests both 'go get' and 'go build' commands to ensure they fail with appropriate error messages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_versions.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Test rejection of pkg@version in GOPATH mode.
env GO111MODULE=off
! go get rsc.io/quote@v1.5.1
stderr '^go: modules disabled by GO111MODULE=off'
! go build rsc.io/quote@v1.5.1
stderr '^package rsc.io/quote@v1.5.1: can only use path@version syntax with ''go get'' and ''go install'' in module-aware mode$'
```

----------------------------------------

TITLE: Handling Pseudo-Versions in Go List without Retraction
DESCRIPTION: Addresses the scenario where 'go list -m mod@latest' reports errors for pseudo-versions if all versions are retracted, with a TODO note on exposing the pseudo-version by the proxy.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_10

LANGUAGE: Go
CODE:
```
# 'go list -m mod@latest' reports an error if all versions are retracted.\ngo list -m -e -f '{{.Error.Err}}' example.com/retract/self/all@latest\nstdout '^module example.com/retract/self/all: no matching versions for query "latest"$'
```

----------------------------------------

TITLE: Unformatted Go Module with Exclude Block
DESCRIPTION: Initial unformatted go.mod file with poorly formatted exclude block containing version exclusions for x.1 module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_exclude_go121.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module     x.x/y/z
exclude  (
	x.1   v1.11.0
	x.1    v1.10.0
	x.1     v1.9.0
)
```

----------------------------------------

TITLE: Running Linting and Formatting Tools
DESCRIPTION: Command to run ESLint, Stylelint, and Prettier formatting tools on the codebase
SOURCE: https://github.com/golang/go/blob/master/src/cmd/vendor/golang.org/x/telemetry/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
./npm run all
```

----------------------------------------

TITLE: Go Module Y Implementation
DESCRIPTION: Module Y with minimal implementation, providing a simple dependency for testing module import chains.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
module example.com/y

go 1.18
```

LANGUAGE: go
CODE:
```
package y
```

----------------------------------------

TITLE: Setting up Go Build Environment
DESCRIPTION: Sets the PATH environment variable and builds an SSH stub program.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env PATH=$WORK/tmp/bin${:}$PATH
go build -o $WORK/tmp/bin/ssh ssh.go
```

----------------------------------------

TITLE: Fuzz Seed Corpus File (Passing Case)
DESCRIPTION: A test data file that defines a passing test case for the FuzzFoo function. It contains the string 'passes' which will not trigger any errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_run.txt#2025-04-22_snippet_3

LANGUAGE: plaintext
CODE:
```
go test fuzz v1
string("passes")
```

----------------------------------------

TITLE: Testing Go Build with Fake Clang Compiler
DESCRIPTION: This snippet runs the Go build command with the fake clang compiler and then breaks the fake clang to test error handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cc_cache_issue64589.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go build -x runtime/cgo

env GO_BREAK_CLANG=1
! go build -x runtime/cgo
stderr '# runtime/cgo\nGO_BREAK_CLANG is set'
```

----------------------------------------

TITLE: Testing Fuzzing Mutator Effectiveness in Go
DESCRIPTION: A test function to verify that the fuzzing mutator can generate a sufficient number of unique mutations. It tracks unique crashes and panics when a threshold is reached.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutator.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package fuzz_test

import (
	"testing"
)

// TODO(katiehockman): re-work this test once we have a better fuzzing engine
// (ie. more mutations, and compiler instrumentation)
func FuzzMutator(f *testing.F) {
	// TODO(katiehockman): simplify this once we can dedupe crashes (e.g.
	// replace map with calls to panic, and simply count the number of crashes
	// that were added to testdata)
	crashes := make(map[string]bool)
	// No seed corpus initiated
	f.Fuzz(func(t *testing.T, b []byte) {
		crashes[string(b)] = true
		if len(crashes) >= 10 {
			panic("mutator found enough unique mutations")
		}
	})
}
```

----------------------------------------

TITLE: Testing Invalid Toolchain in go.mod
DESCRIPTION: Tests behavior when invalid toolchain versions are specified in go.mod file. Verifies error messages for unsupported version formats.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_issue66175.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go mod init m
go mod edit -go=1.14 -toolchain=go1.22
! go version
stderr 'go: invalid toolchain: go1.22 is a language version but not a toolchain version (go1.22.x)'
```

----------------------------------------

TITLE: Module Definition
DESCRIPTION: Defines a Go module named 'm' with Go version 1.16
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_import_comment.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Initializing Go Module
DESCRIPTION: Creates a new Go module named 'm'
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_incompatible.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go mod init m
```

----------------------------------------

TITLE: Defining Go Module with Version Requirement
DESCRIPTION: This snippet shows the content of a go.mod file defining a module 'm' with Go version 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
module m

go 1.16
```

----------------------------------------

TITLE: Defining Go Module and Version
DESCRIPTION: This snippet defines a Go module with its version information. It is intended for testing module compatibility and package relocation. Requires Go modules to be initialized.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module example.com/split
```

----------------------------------------

TITLE: Go Module Test Configuration
DESCRIPTION: Basic go.mod file configuration for testing module behavior
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecate_install.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module m

go 1.17
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: This Go module file defines the module name as 'empty' and specifies the Go version requirement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_empty.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module empty

go 1.16
```

----------------------------------------

TITLE: Initializing Go Module
DESCRIPTION: This snippet shows the content of the go.mod file, which initializes a new Go module named 'm'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_golang.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Defining Go Module
DESCRIPTION: This snippet defines a Go module named 'm' in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_print.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module m
```

----------------------------------------

TITLE: Go Module Definition for Regression Test
DESCRIPTION: A minimal go.mod file required for the regression test. It defines a module named 'example' with Go version 1.19.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_insecure_issue63845.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example

go 1.19
```

----------------------------------------

TITLE: Testing go run command with files in different directories
DESCRIPTION: A bash script testing the requirement that all files specified in a 'go run' command must be in the same directory. It demonstrates error cases when mixing files from different directories.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_dirs.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
cd rundir

! go run x.go sub/sub.go
stderr 'named files must all be in one directory; have . and sub'
! go run sub/sub.go x.go
stderr 'named files must all be in one directory; have sub and .'

cd ../
go run rundir/foo.go ./rundir/bar.go
stderr 'hello world'
```

----------------------------------------

TITLE: Testing Module with go 1.24 Requirement
DESCRIPTION: Tests how 'go get needgo124' (which requires Go 1.24) uses Go 1.24rc1 when GOTOOLCHAIN=auto is set, as it's the only available version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_10

LANGUAGE: shell
CODE:
```
# go get needgo124 (says 'go 1.24') should use go 1.24rc1, the only version available
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get rsc.io/needgo124
stderr '^go: rsc.io/needgo124@v0.0.1 requires go >= 1.24 \(running go 1.21; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp go.mod.new go.mod
go get rsc.io/needgo124
stderr '^go: rsc.io/needgo124@v0.0.1 requires go >= 1.24; switching to go1.24rc1$'
stderr '^go: upgraded go 1.1 => 1.24$'
! stderr '^go: added toolchain$'
```

----------------------------------------

TITLE: Unused module definition
DESCRIPTION: Module definition for 'example.com/unused', which is an indirect dependency of the main module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module example.com/unused
```

----------------------------------------

TITLE: Environment Setup and Go Module Test
DESCRIPTION: Sets Go version environment variables and tests GOMOD path resolution without triggering toolchain download
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_gomod_issue61455.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env TESTGO_VERSION=go1.500
env TESTGO_VERSION_SWITCH=mismatch

# go env GOMOD should not trigger a toolchain download
cd $GOPATH/mod
go env GOMOD
stdout mod[/\\]go.mod
! stderr 'go: toolchain go1.500 invoked to provide go1.700'
```

----------------------------------------

TITLE: Module D Configuration
DESCRIPTION: Configuration for module D requiring an invalid dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue65363.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
module example.net/d

go 1.18

require example.net/invalid v0.1.0
```

LANGUAGE: go
CODE:
```
package d
```

LANGUAGE: go
CODE:
```
package d

import _ "example.net/invalid"
```

----------------------------------------

TITLE: Symlink Package Import
DESCRIPTION: Go file importing an unresolved package through symlink
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_symlink_issue35941.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package symlink

import _ "example.net/unresolved"
```

----------------------------------------

TITLE: Defining Package and Function in Go
DESCRIPTION: Declares a package 'p' and defines an empty function 'F()'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo1223_v0.0.1.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package p

func F() {}
```

----------------------------------------

TITLE: Disabling Go Modules for Test Execution (Shell)
DESCRIPTION: Sets the `GO111MODULE` environment variable to `off`. This ensures that the subsequent Go commands run in the traditional GOPATH mode rather than using Go modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_modes.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off
```

----------------------------------------

TITLE: Defining Syscall Constants for Darwin ARM64 CGO in Go
DESCRIPTION: This snippet defines various constants used in system calls for the Darwin ARM64 CGO platform. These constants are used for terminal I/O, process control, and other system operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_197

LANGUAGE: Go
CODE:
```
const VTDLY ideal-int
const VTIME = 17
const VTIME ideal-int
const VWERASE = 4
const VWERASE ideal-int
const WCONTINUED = 16
const WCONTINUED ideal-int
const WCOREFLAG = 128
const WCOREFLAG ideal-int
const WEXITED = 4
const WEXITED ideal-int
const WNOHANG = 1
const WNOHANG ideal-int
const WNOWAIT = 32
const WNOWAIT ideal-int
const WORDSIZE = 64
const WORDSIZE ideal-int
const WSTOPPED = 8
const WSTOPPED ideal-int
const WUNTRACED = 2
const WUNTRACED ideal-int
```

----------------------------------------

TITLE: Building Go File with Standard Library Import
DESCRIPTION: Demonstrates building a Go file (baz.go) that only imports the fmt package using different -mod flags. This build succeeds in all modes: mod, readonly, and vendor.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_outside_module.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
go build -x -mod=mod my-module/vendor/example.com/another-module/foo/bar/baz.go
go build -x -mod=readonly my-module/vendor/example.com/another-module/foo/bar/baz.go
go build -x -mod=vendor my-module/vendor/example.com/another-module/foo/bar/baz.go
```

----------------------------------------

TITLE: Defining Go Modules and Packages - Go
DESCRIPTION: These snippets define the module structure and basic scaffolding for a Go project. The go.mod file sets the module path and Go version, while the minimal Go source files declare new packages. No external dependencies are listed, and the files are intended as placeholders for testing module/package enumeration and symlink handling. Inputs are static files; outputs are derived by tooling based on these definitions. Changes to package naming or dependencies would affect module resolution and discoverability.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_dotdotdot.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
-- tree/go.mod --
module example.com/tree

go 1.20
```

LANGUAGE: go
CODE:
```
-- tree/tree.go --
package tree
```

LANGUAGE: go
CODE:
```
-- tree/branch/branch.go --
package branch
```

LANGUAGE: go
CODE:
```
-- dir2/squirrel.go --
package squirrel
```

----------------------------------------

TITLE: Main Test Program in Go
DESCRIPTION: A minimal Go program used as the primary test subject for PGO builds. This trivial program does nothing but serves as the target for the various build commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main
func main() {}
```

----------------------------------------

TITLE: Multi-Package Files
DESCRIPTION: Two files declaring different packages, with one importing the want package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_load_err.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package a
```

LANGUAGE: go
CODE:
```
package b

import _ "m/want"
```

----------------------------------------

TITLE: Verifying Go Module Tidiness Control Test
DESCRIPTION: Tests that the go.mod.tidy file is actually tidy by copying it to go.mod and verifying no changes occur after listing all modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
cp go.mod.tidy go.mod
go list -mod=mod all
cmp go.mod go.mod.tidy
```

----------------------------------------

TITLE: Basic Command Package A
DESCRIPTION: Minimal Go command package implementation with empty main function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-replace.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: C-Archive Go Source File
DESCRIPTION: Go source file defining a C-exportable function for testing build mode flags. Contains minimal implementation with an exported GoFunc and empty main function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_gcflags.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import "C"

//export GoFunc
func GoFunc() {}

func main() {}
```

----------------------------------------

TITLE: Enhancing COFF symbol handling in Go's debug/pe package
DESCRIPTION: Adds new constants and types for handling COFF (Common Object File Format) symbols in the debug/pe package. This includes constants for COMDAT selection and section characteristics, and a new type for auxiliary symbol information.
SOURCE: https://github.com/golang/go/blob/master/api/go1.19.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
const (
    IMAGE_COMDAT_SELECT_NODUPLICATES = 1
    IMAGE_COMDAT_SELECT_ANY = 2
    // ... (other IMAGE_COMDAT_SELECT constants)
)

const (
    IMAGE_SCN_CNT_CODE = 32
    IMAGE_SCN_CNT_INITIALIZED_DATA = 64
    // ... (other IMAGE_SCN constants)
)

type COFFSymbolAuxFormat5 struct {
    Size uint32
    NumRelocs uint16
    NumLineNumbers uint16
    Checksum uint32
    SecNum uint16
    Selection uint8
}

method (*File) COFFSymbolReadSectionDefAux(int) (*COFFSymbolAuxFormat5, error)
```

----------------------------------------

TITLE: Dependency Implementation v0.1.0
DESCRIPTION: The implementation file for the 'deleted' package in version 0.1.0 that will be imported by the main module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package deleted
```

----------------------------------------

TITLE: Minimal Go Test File
DESCRIPTION: A minimal Go test file containing an empty test function. Used to verify the basic functionality of go test -n command without any actual test logic.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_minus_n.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package x_test

import (
	"testing"
)

func TestEmpty(t *testing.T) {
}
```

----------------------------------------

TITLE: Extracting and Storing Build ID and Version Information
DESCRIPTION: Extracts the build ID and version information of the compiled binary and stores them in separate files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_trimpath_issue48557.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
go tool buildid a.exe
cp stdout ../foo-buildid.txt
go version a.exe
cp stdout ../foo-version.txt
cd ..
```

----------------------------------------

TITLE: Testing CGO LDFLAGS behavior (Shell)
DESCRIPTION: This shell script tests various scenarios of building Go packages with different CGO LDFLAGS configurations. It includes attempts to build packages with flags in #cgo directives and environment variables, and verifies linker output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/ldflag.txt#2025-04-22_snippet_4

LANGUAGE: Shell
CODE:
```
# Issue #42565

[!cgo] skip

# We can't build package bad, which uses #cgo LDFLAGS.
cd bad
! go build
stderr no-such-warning

# We can build package ok with the same flags in CGO_LDFLAGS.
env CGO_LDFLAGS=-Wno-such-warning -Wno-unknown-warning-option
cd ../ok
go build

# Build a main program that actually uses LDFLAGS.
cd ..
go build -ldflags=-v

# Because we passed -v the Go linker should print the external linker
# command which should include the flag we passed in CGO_LDFLAGS.
stderr no-such-warning
```

----------------------------------------

TITLE: Main Package with Launchpad.net Import
DESCRIPTION: This snippet defines a main package that imports a package from Launchpad.net. It's used to test build behavior when the required version control tool (bzr) is missing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vcs_missing.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package main

import _ "launchpad.net/gocheck"

func main() {}
```

----------------------------------------

TITLE: Testing Go Fuzzing Minimization Time Constraints
DESCRIPTION: Tests that validate the behavior when minimization is constrained by a time limit, ensuring that even if minimization is incomplete, the latest crash is logged and written to testdata properly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize.txt#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
# Clear the fuzzing cache. There may already be minimized inputs that would
# interfere with the next stage of the test.
go clean -fuzzcache

# Test that minimization can be cancelled by fuzzminimizetime and the latest
# crash will still be logged and written to testdata.
! go test -fuzz=FuzzMinimizerRecoverable -run=FuzzMinimizerRecoverable -fuzztime=100x -fuzzminimizetime=1x .
! stdout '^ok'
stdout 'testdata[/\\]fuzz[/\\]FuzzMinimizerRecoverable[/\\]'
! stdout 'got the minimum size!'  # it shouldn't have had enough time to minimize it
stdout FAIL

# Test that re-running the unminimized value causes a crash.
! go test -run=FuzzMinimizerRecoverable .
```

----------------------------------------

TITLE: Simple Go Program for Testing
DESCRIPTION: This is a minimal Go program used as input for the executable build test. It simply prints 'hello' to the console.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/slashpath.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main
func main() { println("hello") }
```

----------------------------------------

TITLE: Defining Test Dependency Package 'x/inall/fromtest' (Go)
DESCRIPTION: Defines the empty package `x/inall/fromtest` within the `x` module. This package is imported only by the tests of the main module `m` (`m_test.go`) and is used to test how `go list -deps all` handles test dependencies of packages in `all`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
-- x/inall/fromtest/fromtest.go --
package fromtest
```

----------------------------------------

TITLE: Main Package Example Implementation
DESCRIPTION: Minimal Go program implementation with empty main function
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_buildvcs_auto.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Defining message handling syscall constants for Darwin ARM64 CGO in Go
DESCRIPTION: This snippet defines constants used for message handling operations in system calls on the Darwin ARM64 CGO platform. It includes flags for controlling message behavior during send and receive operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_160

LANGUAGE: Go
CODE:
```
const MSG_CTRUNC = 32
const MSG_DONTROUTE = 4
const MSG_DONTWAIT = 128
const MSG_EOF = 256
```

----------------------------------------

TITLE: Defining Memory Mapping Constants in Go for NetBSD ARM64
DESCRIPTION: Memory mapping flags for the mmap system call. These constants define mapping attributes including alignment requirements, visibility, sharing, and special properties.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_39

LANGUAGE: go
CODE:
```
const MAP_ALIGNMENT_16MB = 402653184
const MAP_ALIGNMENT_1TB = 671088640
const MAP_ALIGNMENT_256TB = 805306368
const MAP_ALIGNMENT_4GB = 536870912
const MAP_ALIGNMENT_64KB = 268435456
const MAP_ALIGNMENT_64PB = 939524096
const MAP_ALIGNMENT_MASK = -16777216
const MAP_ALIGNMENT_SHIFT = 24
const MAP_ANON = 4096
const MAP_FILE = 0
const MAP_FIXED = 16
const MAP_HASSEMAPHORE = 512
const MAP_INHERIT = 128
const MAP_INHERIT_COPY = 1
const MAP_INHERIT_DEFAULT = 1
const MAP_INHERIT_DONATE_COPY = 3
const MAP_INHERIT_NONE = 2
const MAP_INHERIT_SHARE = 0
const MAP_NORESERVE = 64
const MAP_PRIVATE = 2
const MAP_RENAME = 32
const MAP_SHARED = 1
const MAP_STACK = 8192
const MAP_TRYFIXED = 1024
const MAP_WIRED = 2048
```

----------------------------------------

TITLE: Package Declaration in Go Source File
DESCRIPTION: Declares the package name 'depofdirectpatch' in the Go source file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_depofdirectpatch_v1.0.0.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package depofdirectpatch
```

----------------------------------------

TITLE: Defining a Simple Go Package
DESCRIPTION: This basic Go code snippet declares a package named 'p'. It sets the foundation for implementing package functionalities in Go. As it stands, the package is empty and requires further development to provide any functionality. The primary input is the package's name, while the output depends on subsequent code added within the package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prerelease_v1.9.0.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package p
```

----------------------------------------

TITLE: Empty Package Declaration
DESCRIPTION: Minimal Go package file with only the package declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_get_toolchain.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package p
```

----------------------------------------

TITLE: Module Definition in .mod File
DESCRIPTION: Defines the module name in a .mod file for the Go toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-386.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Testing Nil Panic Handling in Go Fuzz Tests
DESCRIPTION: This fuzz test function demonstrates how Go's fuzzing handles a nil panic. It panics with a nil value when the input is not 'aa'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
func FuzzWithNilPanic(f *testing.F) {
	f.Add([]byte("aa"))
	f.Fuzz(func(t *testing.T, b []byte) {
		if string(b) != "aa" {
			panic(nil)
		}
	})
}
```

----------------------------------------

TITLE: Go Module Test Environment Setup
DESCRIPTION: Shell script that tests module behavior with GO111MODULE both on and off. Verifies test output patterns using stdout checks.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_go111module_cache.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on
go mod init foo
go test
stdout ^ok\s+foo
env GO111MODULE=off
go test
stdout ^ok\s+
! stdout ^ok\s+(cache)$
```

----------------------------------------

TITLE: Gofmt Heading Format Output
DESCRIPTION: The gofmt formatted output showing how heading patterns are processed, with A.b being recognized as a proper heading with # prefix while other patterns remain unchanged.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/head2.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
Almost a+heading

Don't be a heading

# A.b is a heading

A. b is not a heading
```

----------------------------------------

TITLE: Testing Invalid Parallel Execution Parameters in Go Test Command
DESCRIPTION: These shell commands test that the 'go test' command rejects invalid -parallel flag values (-1 and 0). It verifies that appropriate error messages are displayed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_parallel_number.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
! go test -parallel -1 standalone_parallel_sub_test.go
stdout '-parallel can only be given'

! go test -parallel 0 standalone_parallel_sub_test.go
stdout '-parallel can only be given'
```

----------------------------------------

TITLE: Terminal I/O Control Constants for darwin-arm64-cgo in Go
DESCRIPTION: This snippet defines syscall package constants for terminal I/O control operations on darwin-arm64-cgo. The constants include terminal control commands (TIOC*), control character indices (V*), and terminal mode flags used in terminal manipulation functions.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_196

LANGUAGE: Go
CODE:
```
pkg syscall (darwin-arm64-cgo), const TIOCCDTR ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCCONS = 2147775586
pkg syscall (darwin-arm64-cgo), const TIOCCONS ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCDCDTIMESTAMP = 1074820184
pkg syscall (darwin-arm64-cgo), const TIOCDCDTIMESTAMP ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCDRAIN = 536900702
pkg syscall (darwin-arm64-cgo), const TIOCDRAIN ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCDSIMICROCODE = 536900693
pkg syscall (darwin-arm64-cgo), const TIOCDSIMICROCODE ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCEXCL = 536900621
pkg syscall (darwin-arm64-cgo), const TIOCEXCL ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCEXT = 2147775584
pkg syscall (darwin-arm64-cgo), const TIOCEXT ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCFLUSH = 2147775504
pkg syscall (darwin-arm64-cgo), const TIOCFLUSH ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCGDRAINWAIT = 1074033750
pkg syscall (darwin-arm64-cgo), const TIOCGDRAINWAIT ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCGETA = 1078490131
pkg syscall (darwin-arm64-cgo), const TIOCGETA ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCGETD = 1074033690
pkg syscall (darwin-arm64-cgo), const TIOCGETD ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCGPGRP = 1074033783
pkg syscall (darwin-arm64-cgo), const TIOCGPGRP ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCGWINSZ = 1074295912
pkg syscall (darwin-arm64-cgo), const TIOCGWINSZ ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCIXOFF = 536900736
pkg syscall (darwin-arm64-cgo), const TIOCIXOFF ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCIXON = 536900737
pkg syscall (darwin-arm64-cgo), const TIOCIXON ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCMBIC = 2147775595
pkg syscall (darwin-arm64-cgo), const TIOCMBIC ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCMBIS = 2147775596
pkg syscall (darwin-arm64-cgo), const TIOCMBIS ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCMGDTRWAIT = 1074033754
pkg syscall (darwin-arm64-cgo), const TIOCMGDTRWAIT ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCMGET = 1074033770
pkg syscall (darwin-arm64-cgo), const TIOCMGET ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCMODG = 1074033667
pkg syscall (darwin-arm64-cgo), const TIOCMODG ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCMODS = 2147775492
pkg syscall (darwin-arm64-cgo), const TIOCMODS ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCMSDTRWAIT = 2147775579
pkg syscall (darwin-arm64-cgo), const TIOCMSDTRWAIT ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCMSET = 2147775597
pkg syscall (darwin-arm64-cgo), const TIOCMSET ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCM_CAR = 64
pkg syscall (darwin-arm64-cgo), const TIOCM_CAR ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCM_CD = 64
pkg syscall (darwin-arm64-cgo), const TIOCM_CD ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCM_CTS = 32
pkg syscall (darwin-arm64-cgo), const TIOCM_CTS ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCM_DSR = 256
pkg syscall (darwin-arm64-cgo), const TIOCM_DSR ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCM_DTR = 2
pkg syscall (darwin-arm64-cgo), const TIOCM_DTR ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCM_LE = 1
pkg syscall (darwin-arm64-cgo), const TIOCM_LE ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCM_RI = 128
pkg syscall (darwin-arm64-cgo), const TIOCM_RI ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCM_RNG = 128
pkg syscall (darwin-arm64-cgo), const TIOCM_RNG ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCM_RTS = 4
pkg syscall (darwin-arm64-cgo), const TIOCM_RTS ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCM_SR = 16
pkg syscall (darwin-arm64-cgo), const TIOCM_SR ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCM_ST = 8
pkg syscall (darwin-arm64-cgo), const TIOCM_ST ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCNOTTY = 536900721
pkg syscall (darwin-arm64-cgo), const TIOCNOTTY ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCNXCL = 536900622
pkg syscall (darwin-arm64-cgo), const TIOCNXCL ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCOUTQ = 1074033779
pkg syscall (darwin-arm64-cgo), const TIOCOUTQ ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCPKT = 2147775600
pkg syscall (darwin-arm64-cgo), const TIOCPKT ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCPKT_DATA = 0
pkg syscall (darwin-arm64-cgo), const TIOCPKT_DATA ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCPKT_DOSTOP = 32
pkg syscall (darwin-arm64-cgo), const TIOCPKT_DOSTOP ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCPKT_FLUSHREAD = 1
pkg syscall (darwin-arm64-cgo), const TIOCPKT_FLUSHREAD ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCPKT_FLUSHWRITE = 2
pkg syscall (darwin-arm64-cgo), const TIOCPKT_FLUSHWRITE ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCPKT_IOCTL = 64
pkg syscall (darwin-arm64-cgo), const TIOCPKT_IOCTL ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCPKT_NOSTOP = 16
pkg syscall (darwin-arm64-cgo), const TIOCPKT_NOSTOP ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCPKT_START = 8
pkg syscall (darwin-arm64-cgo), const TIOCPKT_START ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCPKT_STOP = 4
pkg syscall (darwin-arm64-cgo), const TIOCPKT_STOP ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCPTYGNAME = 1082160211
pkg syscall (darwin-arm64-cgo), const TIOCPTYGNAME ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCPTYGRANT = 536900692
pkg syscall (darwin-arm64-cgo), const TIOCPTYGRANT ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCPTYUNLK = 536900690
pkg syscall (darwin-arm64-cgo), const TIOCPTYUNLK ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCREMOTE = 2147775593
pkg syscall (darwin-arm64-cgo), const TIOCREMOTE ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCSBRK = 536900731
pkg syscall (darwin-arm64-cgo), const TIOCSBRK ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCSCONS = 536900707
pkg syscall (darwin-arm64-cgo), const TIOCSCONS ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCSCTTY = 536900705
pkg syscall (darwin-arm64-cgo), const TIOCSCTTY ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCSDRAINWAIT = 2147775575
pkg syscall (darwin-arm64-cgo), const TIOCSDRAINWAIT ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCSDTR = 536900729
pkg syscall (darwin-arm64-cgo), const TIOCSDTR ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCSETA = 2152231956
pkg syscall (darwin-arm64-cgo), const TIOCSETA ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCSETAF = 2152231958
pkg syscall (darwin-arm64-cgo), const TIOCSETAF ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCSETAW = 2152231957
pkg syscall (darwin-arm64-cgo), const TIOCSETAW ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCSETD = 2147775515
pkg syscall (darwin-arm64-cgo), const TIOCSETD ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCSIG = 536900703
pkg syscall (darwin-arm64-cgo), const TIOCSIG ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCSPGRP = 2147775606
pkg syscall (darwin-arm64-cgo), const TIOCSPGRP ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCSTART = 536900718
pkg syscall (darwin-arm64-cgo), const TIOCSTART ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCSTAT = 536900709
pkg syscall (darwin-arm64-cgo), const TIOCSTAT ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCSTI = 2147578994
pkg syscall (darwin-arm64-cgo), const TIOCSTI ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCSTOP = 536900719
pkg syscall (darwin-arm64-cgo), const TIOCSTOP ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCSWINSZ = 2148037735
pkg syscall (darwin-arm64-cgo), const TIOCSWINSZ ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCTIMESTAMP = 1074820185
pkg syscall (darwin-arm64-cgo), const TIOCTIMESTAMP ideal-int
pkg syscall (darwin-arm64-cgo), const TIOCUCNTL = 2147775590
pkg syscall (darwin-arm64-cgo), const TIOCUCNTL ideal-int
pkg syscall (darwin-arm64-cgo), const TOSTOP = 4194304
pkg syscall (darwin-arm64-cgo), const TOSTOP ideal-int
pkg syscall (darwin-arm64-cgo), const VDISCARD = 15
pkg syscall (darwin-arm64-cgo), const VDISCARD ideal-int
pkg syscall (darwin-arm64-cgo), const VDSUSP = 11
pkg syscall (darwin-arm64-cgo), const VDSUSP ideal-int
pkg syscall (darwin-arm64-cgo), const VEOF = 0
pkg syscall (darwin-arm64-cgo), const VEOF ideal-int
pkg syscall (darwin-arm64-cgo), const VEOL = 1
pkg syscall (darwin-arm64-cgo), const VEOL ideal-int
pkg syscall (darwin-arm64-cgo), const VEOL2 = 2
pkg syscall (darwin-arm64-cgo), const VEOL2 ideal-int
pkg syscall (darwin-arm64-cgo), const VERASE = 3
pkg syscall (darwin-arm64-cgo), const VERASE ideal-int
pkg syscall (darwin-arm64-cgo), const VINTR = 8
pkg syscall (darwin-arm64-cgo), const VINTR ideal-int
pkg syscall (darwin-arm64-cgo), const VKILL = 5
pkg syscall (darwin-arm64-cgo), const VKILL ideal-int
pkg syscall (darwin-arm64-cgo), const VLNEXT = 14
pkg syscall (darwin-arm64-cgo), const VLNEXT ideal-int
pkg syscall (darwin-arm64-cgo), const VMIN = 16
pkg syscall (darwin-arm64-cgo), const VMIN ideal-int
pkg syscall (darwin-arm64-cgo), const VQUIT = 9
pkg syscall (darwin-arm64-cgo), const VQUIT ideal-int
pkg syscall (darwin-arm64-cgo), const VREPRINT = 6
pkg syscall (darwin-arm64-cgo), const VREPRINT ideal-int
pkg syscall (darwin-arm64-cgo), const VSTART = 12
pkg syscall (darwin-arm64-cgo), const VSTART ideal-int
pkg syscall (darwin-arm64-cgo), const VSTATUS = 18
pkg syscall (darwin-arm64-cgo), const VSTATUS ideal-int
pkg syscall (darwin-arm64-cgo), const VSTOP = 13
pkg syscall (darwin-arm64-cgo), const VSTOP ideal-int
pkg syscall (darwin-arm64-cgo), const VSUSP = 10
pkg syscall (darwin-arm64-cgo), const VSUSP ideal-int
pkg syscall (darwin-arm64-cgo), const VT0 = 0
pkg syscall (darwin-arm64-cgo), const VT0 ideal-int
pkg syscall (darwin-arm64-cgo), const VT1 = 65536
pkg syscall (darwin-arm64-cgo), const VT1 ideal-int
pkg syscall (darwin-arm64-cgo), const VTDLY = 65536
```

----------------------------------------

TITLE: Untidy Go Module Definition
DESCRIPTION: Module definition missing direct dependencies but containing indirect ones
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_readonly.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module m

go 1.16

require (
	rsc.io/sampler v1.3.0 // indirect
)
```

----------------------------------------

TITLE: Building a Go Package and Verifying Compiler Execution
DESCRIPTION: This snippet uses the 'go build' command to compile the 'lib.go' package.  The first command checks if the compiler runs the first time. The second checks if the compiler is skipped due to caching. The third forces a recompile with the -a flag. It uses stderr output to confirm the (non-)execution of the compiler.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_compile.txt#_snippet_1

LANGUAGE: Shell
CODE:
```
# Building trivial non-main package should run compiler the first time.
go build -x lib.go
stderr '(compile|gccgo)( |\.exe).*lib\.go'

# ... but not again ...
go build -x lib.go
! stderr '(compile|gccgo)( |\.exe).*lib\.go'

# ... unless we use -a.
go build -a -x lib.go
stderr '(compile|gccgo)( |\.exe)'
```

----------------------------------------

TITLE: Testing go mod init with subdirectory
DESCRIPTION: Tests that 'go mod init' recommends running 'go mod tidy' when the directory has a subdirectory, regardless of whether the subdirectory contains .go files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_tidy.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
cd subdir
go mod init m
stderr '^go: to add module requirements and sums:\n\tgo mod tidy$'
cd ..
```

----------------------------------------

TITLE: Go File with Interface Cycle
DESCRIPTION: This Go file defines a set of interfaces with a cycle, used to test vet's ability to detect interface cycles.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package p

type (
	_  interface{ m(B1) }
	A1 interface{ a(D1) }
	B1 interface{ A1 }
	C1 interface {
		B1 /* ERROR issue #18395 */
	}
	D1 interface{ C1 }
)

var _ A1 = C1 /* ERROR cannot use C1 */ (nil)
```

----------------------------------------

TITLE: Testing Go List Command Error Reporting
DESCRIPTION: Test script that verifies error reporting behavior when parsing invalid Go files. Tests both module-aware and traditional modes using the go list command with -e and -json flags.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_err_stack.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off
cd sandbox/foo
go list -e -json .
stdout '"sandbox/foo"'
stdout '"sandbox/bar"'
stdout '"Pos": "..(/|\\\\)bar(/|\\\\)bar.go:1:1"'
stdout '"Err": "expected \'package\', found ackage"'

env GO111MODULE=on
go list -e -json .
stdout '"sandbox/foo"'
stdout '"sandbox/bar"'
stdout '"Pos": "..(/|\\\\)bar(/|\\\\)bar.go:1:1"'
stdout '"Err": "expected \'package\', found ackage"'
```

----------------------------------------

TITLE: Testing Concurrent Go Builds and Module Downloads
DESCRIPTION: This shell script tests concurrent Go builds with module downloads and verifies go.sum updates. It uses environment variables, concurrent build commands, and file comparison.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_concurrent.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GO111MODULE=on

# Concurrent builds should succeed, even if they need to download modules.
go get ./x ./y
go build ./x &
go build ./y
wait

# Concurrent builds should update go.sum to the union of the hashes for the
# modules they read.
cmp go.sum go.sum.want
```

----------------------------------------

TITLE: IPv6 Socket Option Constants in Go for NetBSD ARM64
DESCRIPTION: Constants for IPv6 socket options in NetBSD ARM64. These control IPv6-specific behavior when used with setsockopt/getsockopt calls.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_135

LANGUAGE: Go
CODE:
```
const IPV6_CHECKSUM = 26
const IPV6_DEFAULT_MULTICAST_HOPS = 1
const IPV6_DEFAULT_MULTICAST_LOOP = 1
```

----------------------------------------

TITLE: Module B Implementation
DESCRIPTION: The main Go file for dependency module 'example.com/b' containing a simple package declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_conditional.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
package b
```

----------------------------------------

TITLE: Minimal Nested Vendored Package p
DESCRIPTION: A minimal vendored package 'p' in a nested directory that only contains a package declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
package p
```

----------------------------------------

TITLE: Declaring Go Toolchain Module Path (.mod)
DESCRIPTION: Declares the module path `golang.org/toolchain`. This specific content is typically found within the `.mod` file corresponding to a specific module version in the Go module cache, identifying the module's canonical path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.9.linux-amd64.txt#2025-04-22_snippet_1

LANGUAGE: text
CODE:
```
golang.org/toolchain
```

----------------------------------------

TITLE: Go Debug Test File with Invalid Debug Format
DESCRIPTION: A Go file with build tag 'godebugbad' that includes an invalid debug directive with a space in the value, used to test error handling for malformed debug directives.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_default.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
//go:build godebugbad
//go:debug default=go1.20 asynctimerchan=0

package main
```

----------------------------------------

TITLE: Testing Go Module Pattern Matching
DESCRIPTION: Series of tests verifying how Go handles module pattern matching with wildcards (...) and partial matches. Tests package resolution within modules and module upgrade behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patterns.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on
[short] skip

cp go.mod.orig go.mod
go get rsc.io/quote/...
grep 'require rsc.io/quote' go.mod

cp go.mod.orig go.mod
! go get rsc.io/quote/x...
stderr 'go: module rsc.io/quote@upgrade found \(v1.5.2\), but does not contain packages matching rsc.io/quote/x...'
! grep 'require rsc.io/quote' go.mod

! go get rsc.io/quote/x/...
stderr 'go: module rsc.io/quote@upgrade found \(v1.5.2\), but does not contain packages matching rsc.io/quote/x/...'
! grep 'require rsc.io/quote' go.mod

cp go.mod.orig go.mod
go mod edit -require example.com/nest@v1.0.0
go get example.com/nest/sub/y...
grep 'example.com/nest/sub v1.0.0' go.mod
grep 'example.com/nest v1.0.0' go.mod

go get example.com/n...t
grep 'example.com/nest v1.1.0' go.mod
grep 'example.com/nest/sub v1.0.0' go.mod
```

----------------------------------------

TITLE: System Call Constant Type Declarations for Darwin ARM64
DESCRIPTION: Type declarations for syscall constants in Go's syscall package for Darwin ARM64. These specify that the constants are of type 'ideal-int', which is Go's internal representation for untyped integer constants.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_108

LANGUAGE: Go
CODE:
```
const SYS_OPEN_NOCANCEL ideal-int
const SYS_PATHCONF ideal-int
const SYS_PID_HIBERNATE ideal-int
const SYS_PID_RESUME ideal-int
const SYS_PID_SHUTDOWN_SOCKETS ideal-int
const SYS_PID_SUSPEND ideal-int
const SYS_PIPE ideal-int
const SYS_POLL ideal-int
const SYS_POLL_NOCANCEL ideal-int
const SYS_POSIX_SPAWN ideal-int
const SYS_PREAD ideal-int
const SYS_PREAD_NOCANCEL ideal-int
const SYS_PROCESS_POLICY ideal-int
const SYS_PROC_INFO ideal-int
```

----------------------------------------

TITLE: Terminal I/O Control Constants for Darwin ARM64 in Go
DESCRIPTION: Constants for terminal I/O control operations (TIOC*) in the syscall package for Darwin ARM64. These constants are used with ioctl system calls to control terminal device behavior.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_111

LANGUAGE: Go
CODE:
```
pkg syscall (darwin-arm64), const TIOCMSET = 2147775597
pkg syscall (darwin-arm64), const TIOCM_CAR = 64
pkg syscall (darwin-arm64), const TIOCM_CD = 64
pkg syscall (darwin-arm64), const TIOCM_CTS = 32
pkg syscall (darwin-arm64), const TIOCM_DSR = 256
pkg syscall (darwin-arm64), const TIOCM_DTR = 2
pkg syscall (darwin-arm64), const TIOCM_LE = 1
pkg syscall (darwin-arm64), const TIOCM_RI = 128
pkg syscall (darwin-arm64), const TIOCM_RNG = 128
pkg syscall (darwin-arm64), const TIOCM_RTS = 4
pkg syscall (darwin-arm64), const TIOCM_SR = 16
pkg syscall (darwin-arm64), const TIOCM_ST = 8
```

----------------------------------------

TITLE: Debug ELF Constants and Types - Go
DESCRIPTION: Constants for ELF machine types and RISCV relocations, including machine architecture identifiers and relocation types. These are used for parsing and working with ELF format binary files.
SOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
const (
    EM_TI_PRU = 144
    EM_TMM_GPP = 96
    EM_TPC = 98
    // ... other EM_ constants

    R_RISCV_32 = 1
    R_RISCV_64 = 2
    // ... other R_RISCV constants
)

type R_RISCV int
```

----------------------------------------

TITLE: Root Package Main
DESCRIPTION: The main package for the root module that imports package 'a'. This establishes the start of the dependency chain for the test case.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

import _ "a"

func main() {}
```

----------------------------------------

TITLE: Creating v2 Package and Updating README
DESCRIPTION: Adds a detailed README.md explaining the repository structure and a new Go package in the v2 directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_18

LANGUAGE: bash
CODE:
```
git checkout --detach HEAD
at 2018-02-19T17:51:24-05:00
	# README.md at this commit lacked a trailing newline, so 'git apply' can't
	# seem to apply it correctly as a patch. Instead, we use 'echo -e' to write
	# the exact contents.
unquote 'This is a test repo for versioned go.\nThere''s nothing useful here.\n\n\tv0.0.0 - has pkg/p.go\n\tv0.0.1 - has go.mod\n\t\n\tv1.0.0 - has pkg/p.go\n\tv1.0.1 - has go.mod\n\tv1.0.2 - has submod/pkg/p.go\n\tv1.0.3 - has submod/go.mod\n\tsubmod/v1.0.4 - same\n\tsubmod/v1.0.5 - add requirement on v1.1.0\n\tv1.1.0 - add requirement on submod/v1.0.5\n\t\n\tv2.0.0 - has pkg/p.go\n\tv2.0.1 - has go.mod with v2 module path\n\tv2.0.2 - has go.mod with v1 (no version) module path\n\tv2.0.3 - has v2/go.mod with v2 module path\n\tv2.0.5 - has go.mod AND v2/go.mod with v2 module path\n\t'
cp stdout README.md
mkdir v2/pkg
echo 'package q'
cp stdout v2/pkg/q.go
git add README.md v2/pkg/q.go
git commit -m 'add q'
git tag v2.0.6
```

----------------------------------------

TITLE: HTML List Format
DESCRIPTION: Shows list formatted as HTML using unordered list tags and proper list item tags.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list.txt#2025-04-22_snippet_4

LANGUAGE: html
CODE:
```
<p>Text.
- Not a list.
<ul>
<li>Here is the list.
<li>Using multiple bullets.
<li>Indentation does not matter.
<li>Lots of bullets.
</ul>
<p>More text.
```

----------------------------------------

TITLE: Defining SockaddrDatalink Struct for Link-Layer Socket Addresses in Go Syscall Package
DESCRIPTION: The SockaddrDatalink struct represents link-layer socket addresses for network interfaces in the syscall package for Darwin ARM64. It contains fields for addressing information such as family type, length specifications, interface index, and the actual address data.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_206

LANGUAGE: Go
CODE:
```
type SockaddrDatalink struct {
    Len    uint8
    Family uint8
    Index  uint16
    Type   uint8
    Nlen   uint8
    Alen   uint8
    Slen   uint8
    Data   [12]int8
}
```

----------------------------------------

TITLE: Defining Go Module with Invalid Path
DESCRIPTION: This snippet shows the content of a go.mod file that declares a module with an invalid path. It sets the module path to 'vend/x/invalid' and specifies Go version 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_import_wrong.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module vend/x/invalid

go 1.16
```

----------------------------------------

TITLE: Commented Example: Setting GOEXPERIMENT=crashme via Environment Command Syntax
DESCRIPTION: This is a commented-out example demonstrating how the GOEXPERIMENT variable could potentially be set to 'crashme' using the same syntax. The leading '#' indicates it's inactive. This line serves as a placeholder or documentation for potentially testing a 'crashme' experimental flag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/check_goexperiment.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
#[GOEXPERIMENT:crashme] env
```

----------------------------------------

TITLE: Module A v0.1.1 Definition
DESCRIPTION: Definition for example.net/a module version 0.1.1 with dependency on example.net/b.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchcycle.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.net/a

go 1.16

require example.net/b v0.1.0
```

LANGUAGE: go
CODE:
```
package a

import _ "example.net/b"
```

----------------------------------------

TITLE: Setting Toolchain to Default
DESCRIPTION: Changes the toolchain to 'default' and verifies the update in go.mod.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_toolchain.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
go mod edit -toolchain=default
grep 'toolchain default' go.mod
```

----------------------------------------

TITLE: Describing loong64 Stack Frame Layout - Plaintext
DESCRIPTION: This snippet displays the stack frame layout for the loong64 Go ABI using ASCII-art. It highlights the order of locals, outgoing arguments, and return program counter, as pointed to by R3 (the stack pointer). The arrangement clarifies expectations for frame creation and teardown under both ABIInternal and ABI0 conventions, supporting correct return PC retrieval for function returns.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/abi-internal.md#2025-04-22_snippet_3

LANGUAGE: plaintext
CODE:
```
+------------------------------+\n| ... locals ...               |\n| ... outgoing arguments ...   |\n| return PC                    | \u2190 R3 points to\n+------------------------------+ \u2193 lower addresses
```

----------------------------------------

TITLE: Defining Go Toolchain Metadata - JSON
DESCRIPTION: This snippet provides a JSON object containing the version specification for the Go toolchain. It's typically used as part of Go module proxy infrastructure or custom Go toolchain management. The 'Version' property denotes the toolchain version string; the structure is intended to be parsed by automated tooling to identify the association with a specific toolchain build.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.linux-amd64.txt#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{\"Version\":\"v0.0.1-go1.18.linux-amd64\"}
```

----------------------------------------

TITLE: Storing Version Metadata (JSON)
DESCRIPTION: This JSON snippet contains version information for the associated Go module or package. It stores the version string "v1.1.0" under the key "Version". This likely serves as metadata for version control or build systems.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prev_v1.1.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
-- .info --
{"Version":"v1.1.0"}
```

----------------------------------------

TITLE: Adding Soyombo RangeTable to unicode package
DESCRIPTION: Adds support for the Soyombo script block by defining a new RangeTable in the unicode package. This allows identifying and handling characters from this Unicode block.
SOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_19

LANGUAGE: go
CODE:
```
pkg unicode, var Soyombo *RangeTable
```

----------------------------------------

TITLE: Go Module Version Information
DESCRIPTION: This JSON snippet provides version information for a Go module. It includes the `Version` key to specify the semantic version of the project, useful for package management and version control.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.1-order.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{\"Version\":\"v1.0.1-order\"}
```

----------------------------------------

TITLE: Specifying Go Toolchain Version for Linux AMD64
DESCRIPTION: Declares the specific version of the Go toolchain to be used, targeting Go 1.18.5 for Linux AMD64 systems.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.5.linux-amd64.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
golang.org/toolchain v0.0.1-go1.18.5.linux-amd64
```

----------------------------------------

TITLE: Creating and Testing Nested Go Modules
DESCRIPTION: Script that initializes nested Go modules, tests package path resolution, and then removes the inner module to verify caching behavior. The test verifies that a package's import path remains stable even after its module definition file is removed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/issue53586.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
go mod init example

cd subdir
go mod init example/subdir
sleep 2s  # allow go.mod mtime to be cached

go list -f '{{.Dir}}: {{.ImportPath}}' ./pkg
stdout $PWD${/}pkg': example/subdir/pkg$'

rm go.mod  # expose ../go.mod

go list -f '{{.Dir}}: {{.ImportPath}}' ./pkg
stdout $PWD${/}pkg': example/subdir/pkg$'
```

----------------------------------------

TITLE: Specifying Go Toolchain Version - Plain Text
DESCRIPTION: This snippet declares the version and target environment for the Go toolchain using a plain text string, following the convention 'package v<version>-<go version>.<os>-<arch>'. It is typically used by Go tools to determine toolchain compatibility and download sources. The format encodes version, Go release version, operating system, and architecture, and must match the expected pattern for proper toolchain identification.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.3.linux-amd64.txt#2025-04-22_snippet_0

LANGUAGE: text
CODE:
```
golang.org/toolchain v0.0.1-go1.18.3.linux-amd64
```

----------------------------------------

TITLE: Nosplit Function Annotation in Go Runtime
DESCRIPTION: Shows the usage of the //go:nosplit annotation for functions in the Go runtime. This annotation indicates that the function should not include the stack growth prologue.
SOURCE: https://github.com/golang/go/blob/master/src/runtime/HACKING.md#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
//go:nosplit
func someFunction() {
    // Function body
}
```

----------------------------------------

TITLE: Go File with Missing Embedded Resource
DESCRIPTION: This Go file demonstrates the use of the embed directive to include a non-existent file. It's used to test how different Go tools handle missing embedded resources.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed_fmt.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
package p

import "embed"

//go:embed missing.txt
var X  embed.FS
```

----------------------------------------

TITLE: Verifying Absence of Pseudo-Import Path in Go Coverage Profile (Shell)
DESCRIPTION: This shell command uses `grep` with negation (`!`) to assert that the string "command-line-arguments" is *not* present in the coverage profile `blah.prof`. This verifies that the profile uses proper file paths instead of the default pseudo-import path sometimes assigned by the Go toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_localpkg_filepath.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
! grep command-line-arguments blah.prof
```

----------------------------------------

TITLE: Empty Go Package File
DESCRIPTION: An empty Go package file used for testing toolchain behavior with actual Go code.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
package p
```

----------------------------------------

TITLE: Go Module File with Current Version
DESCRIPTION: This go.mod file specifies a current Go version (1.10) to contrast with the future version in the main test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_6

LANGUAGE: Plain Text
CODE:
```
module example
go 1.10
```

----------------------------------------

TITLE: Defining Standard File Descriptor Constants in Go for NetBSD ARM64
DESCRIPTION: Declaration of standard file descriptor constants (Stdin, Stdout, Stderr) for NetBSD ARM64 with CGO support.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_111

LANGUAGE: Go
CODE:
```
var Stdin int
var Stdout int
var Stderr int
```

----------------------------------------

TITLE: Minimal GOCACHEPROG Program Implementation
DESCRIPTION: A minimal Go program that implements a basic GOCACHEPROG interface, handling JSON encoding/decoding for known commands. The program only supports the 'close' command and exits immediately.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_gocacheprog.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// This is a minimal GOCACHEPROG program that can't actually do anything but exit.
package main

import (
    "encoding/json"
    "os"
)

func main() {
    json.NewEncoder(os.Stdout).Encode(map[string][]string{"KnownCommands": {"close"}})
    var res struct{}
    json.NewDecoder(os.Stdin).Decode(&res)
}
```

----------------------------------------

TITLE: Go Module Empty Module Definition
DESCRIPTION: Basic Go module definition file used as a template for tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_proxy.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module m
```

----------------------------------------

TITLE: Creating and Committing Go Files in Git
DESCRIPTION: Commands to add a Go file to Git, commit it with a message, and rename the default branch to 'master'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/hello.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
at 2017-09-21T21:05:58-04:00
git add hello.go
git commit -a -m 'hello'
git branch -m master
```

----------------------------------------

TITLE: Socket Option Constants in Go for NetBSD ARM64
DESCRIPTION: Constants for socket options and socket types in NetBSD. These are used to configure socket behavior using the setsockopt system call and for creating sockets with specific flags.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_62

LANGUAGE: Go
CODE:
```
const SO_ACCEPTCONN = 2
const SO_ACCEPTFILTER = 4096
const SO_BROADCAST = 32
const SOCK_CLOEXEC = 268435456
const SOCK_FLAGS_MASK = 4026531840
const SOCK_NONBLOCK = 536870912
const SOCK_NOSIGPIPE = 1073741824
const SOCK_RDM = 4
```

----------------------------------------

TITLE: Other Module Definition
DESCRIPTION: Submodule definition file for the 'other' package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_error.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module issue27063/other
```

----------------------------------------

TITLE: Defining File Event Notification Constants in Go for NetBSD ARM64
DESCRIPTION: File and process event notification flags for kqueue. These constants define events that can be monitored through the kqueue/kevent mechanism.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_45

LANGUAGE: go
CODE:
```
const NOTE_ATTRIB = 8
const NOTE_CHILD = 4
const NOTE_DELETE = 1
const NOTE_EXEC = 536870912
const NOTE_EXIT = 2147483648
const NOTE_EXTEND = 4
const NOTE_FORK = 1073741824
const NOTE_LINK = 16
const NOTE_LOWAT = 1
const NOTE_PCTRLMASK = 4026531840
const NOTE_PDATAMASK = 1048575
```

----------------------------------------

TITLE: Using go get with Tags to Fix Error
DESCRIPTION: Shows how 'go get' with specific tags can resolve the version incompatibility.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goline_order.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
cp go.mod.orig go.mod
go get -tags usem1
go list -deps -tags usem1
```

----------------------------------------

TITLE: Constants Declaration Go
DESCRIPTION: Defines a list of constants used for syscall operations on FreeBSD systems running on different architectures. These constants are crucial for handling various system call parameters and configurations. Dependencies include FreeBSD-specific system calls, as these constants directly map to kernel-level definitions.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
const MAP_ALIGNED_SUPER = 16777216
const MAP_ALIGNMENT_MASK = -16777216
const MAP_ALIGNMENT_SHIFT = 24
const MSG_CMSG_CLOEXEC = 262144
const NAME_MAX = 255
const O_CLOEXEC = 1048576
const RTF_GWFLAG_COMPAT = 2147483648
const RT_NORTREF = 2
const SIGLIBRT = 33
...
```

----------------------------------------

TITLE: Downloading Go module with specific commit hash
DESCRIPTION: This command downloads a Go module (rsc.io/quote) using a specific Git commit hash and verifies the presence of downloaded files in the module cache.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_hash.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go mod download rsc.io/quote@a91498bed0a73d4bb9c1fb2597925f7883bc40a7
exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.3-0.20180709162918-a91498bed0a7.info
exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.3-0.20180709162918-a91498bed0a7.mod
exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.3-0.20180709162918-a91498bed0a7.zip
```

----------------------------------------

TITLE: Defining Terminal Control Constants in Go for Darwin ARM64 CGO
DESCRIPTION: This snippet defines constants for terminal control flags used in system calls on Darwin ARM64 with CGO. These constants are used to configure terminal behavior and settings.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_168

LANGUAGE: Go
CODE:
```
const PARENB = 4096
const PARENB ideal-int
const PARMRK = 8
const PARMRK ideal-int
const PARODD = 8192
const PARODD ideal-int
const PENDIN = 536870912
const PENDIN ideal-int
```

----------------------------------------

TITLE: Defining Go Module with Incompatible Version
DESCRIPTION: Module declaration for example.com/incompatiblewithsub which is marked as v2.0.0+incompatible as indicated in the .info file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_incompatiblewithsub_v2.0.0+incompatible.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example.com/incompatiblewithsub
```

----------------------------------------

TITLE: Go Module File for 'std' Replacement
DESCRIPTION: This snippet shows the go.mod file for a local module named 'std', used in testing module replacement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_8

LANGUAGE: Go
CODE:
```
module std
go 1.16
```

----------------------------------------

TITLE: Testing explicit vendor prefix import restrictions
DESCRIPTION: Verifies that modules cannot explicitly use the 'cmd/vendor/' or 'vendor/' prefix to import vendored packages from the standard library.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
cd ../importcmd
! go build .
stderr 'use of vendored package'

cd ../importstd
! go build .
stderr 'use of vendored package'
```

----------------------------------------

TITLE: Defining File Type Constants for NetBSD ARM64
DESCRIPTION: These constants define file type identifiers used in directory entries on NetBSD ARM64. They are used to determine the type of a file when reading directory contents with functions like readdir().
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_121

LANGUAGE: Go
CODE:
```
const DT_BLK = 6
const DT_BLK ideal-int
const DT_CHR = 2
const DT_CHR ideal-int
const DT_DIR = 4
const DT_DIR ideal-int
const DT_FIFO = 1
const DT_FIFO ideal-int
const DT_LNK = 10
const DT_LNK ideal-int
const DT_REG = 8
const DT_REG ideal-int
const DT_SOCK = 12
const DT_SOCK ideal-int
const DT_UNKNOWN = 0
const DT_UNKNOWN ideal-int
const DT_WHT = 14
const DT_WHT ideal-int
```

----------------------------------------

TITLE: Gofmt Formatting Test
DESCRIPTION: Shows text formatted according to gofmt rules
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/blank.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
Blank line at start and end.
```

----------------------------------------

TITLE: Simple Go Package Importing Export-Subst
DESCRIPTION: A minimal Go package that imports the export-subst package to test git export-subst functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_git_export_subst.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package x

import _ "github.com/jasonkeene/export-subst"
```

----------------------------------------

TITLE: Testing Invalid Module Commands
DESCRIPTION: Shell commands to test module-related operations with an invalid path. Uses GO111MODULE=on to enforce module mode and attempts get/install operations that should fail.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_v1suffix.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

! go get example.com/invalidpath/v1
! go install .
```

----------------------------------------

TITLE: Empty Go Package Declaration in y.go
DESCRIPTION: A Go source file with a lowercase filename (y.go) declaring package x without any content. Creates case-sensitivity conflict with Y.go.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile4_v1.0.0.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package x
```

----------------------------------------

TITLE: Testing Go List on Nonexistent Directory
DESCRIPTION: Tests error message for 'go list' on a nonexistent directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
# golang.org/issue/27122: 'go build' of a nonexistent directory should produce
# a helpful "no Go files" error message, not a generic "unknown import path".
! go list ./subdir
stderr '^no Go files in '$WORK'[/\\]gopath[/\\]src[/\\]dir[/\\]subdir$'
```

----------------------------------------

TITLE: Testing 'go list' Directly on a Missing Dependency (Shell)
DESCRIPTION: Tests the behavior of 'go list' when attempting to list the non-existent package ('example.com/notfound') directly. It verifies that the command fails without the '-e' flag and checks the specific error message on stderr. It also confirms that using the '-e' flag allows the command to succeed while still reporting an error and incompleteness in the formatted output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_bad_import.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
# Listing the missing dependency directly should fail outright...
! go list -f '{{if .Error}}error{{end}} {{if .Incomplete}}incomplete{{end}}' example.com/notfound
stderr 'no required module provides package example.com/notfound; to add it:\n\tgo get example.com/notfound'
! stdout error
! stdout incomplete

# ...but listing with -e should succeed.
go list -e -f '{{if .Error}}error{{end}} {{if .Incomplete}}incomplete{{end}}' example.com/notfound
stdout error
stdout incomplete
```

----------------------------------------

TITLE: NetBSD System Constants
DESCRIPTION: System-level constants for NetBSD ARM64 platform including file modes, path separators and architecture identifiers.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
const (
    DevNull = "/dev/null"
    O_APPEND = 8
    O_CREATE = 512
    O_EXCL = 2048
    O_SYNC = 128
    O_TRUNC = 1024
    PathListSeparator = 58
    PathSeparator = 47
    GOARCH = "arm64"
    GOOS = "netbsd"
)
```

----------------------------------------

TITLE: Testing Module Download with Invalid Hash
DESCRIPTION: Tests reuse functionality when downloading a module with an invalid commit hash to verify error handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/reuse_git.txt#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
! go mod download -reuse=hellononhash.json -x -json vcs-test.golang.org/git/hello.git@1234567890123456789012345678901234567890
```

----------------------------------------

TITLE: Testing Module Paths with Spaces in Go
DESCRIPTION: This snippet tests that module paths with spaces are rejected as invalid. The commands attempt to initialize modules with paths containing spaces and expect specific error messages indicating the invalid character.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_invalid_major.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
# module paths with spaces are also rejected
! go mod init 'foo bar'
stderr '(?s)^go: malformed module path "foo bar": invalid char '' ''$'

! go mod init 'foo  bar baz'
stderr '(?s)^go: malformed module path "foo  bar baz": invalid char '' ''$'
```

----------------------------------------

TITLE: Bash Test Script for Go Fuzzing Crash Recovery
DESCRIPTION: A bash test script that verifies the Go fuzzing engine's ability to recover crashing inputs when workers terminate unexpectedly. It runs a fuzzing test that intentionally crashes after 100 iterations and then verifies the recovered input matches what was expected.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutator_repeat.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# TODO(jayconrod): support shared memory on more platforms.
[!GOOS:darwin] [!GOOS:linux] [!GOOS:windows] skip

# Verify that the fuzzing engine records the actual crashing input, even when
# a worker process terminates without communicating the crashing input back
# to the coordinator.

[short] skip
env GOCACHE=$WORK/cache

# Start fuzzing. The worker crashes after 100 iterations.
# The fuzz function writes the crashing input to "want" before exiting.
# The fuzzing engine reconstructs the crashing input and saves it to testdata.
! exists want
! go test -fuzz=. -parallel=1 -fuzztime=110x -fuzzminimizetime=10x -v
stdout '^\s+fuzzing process hung or terminated unexpectedly: exit status'
stdout 'Failing input written to testdata'

# Run the fuzz target without fuzzing. The fuzz function is called with the
# crashing input in testdata. The test passes if that input is identical to
# the one saved in "want".
exists want
go test -want=want
```

----------------------------------------

TITLE: Defining File Locking Constants for NetBSD ARM64 in Go
DESCRIPTION: This snippet defines constants used for file locking operations on NetBSD ARM64. These constants are typically used with the flock system call to control file access in multi-process environments.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_137

LANGUAGE: Go
CODE:
```
const LOCK_EX = 2
const LOCK_EX ideal-int
const LOCK_NB = 4
const LOCK_NB ideal-int
const LOCK_SH = 1
const LOCK_SH ideal-int
const LOCK_UN = 8
const LOCK_UN ideal-int
```

----------------------------------------

TITLE: Testing Go Run Flag Parsing
DESCRIPTION: Shell command testing the go run command's flag parsing behavior, specifically verifying that flags after the package name are not incorrectly interpreted as cmd/go flags. Tests fix for issue #64738.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_flags_issue64738.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go run -n example.com/printversion@v0.1.0 -p ignored
```

----------------------------------------

TITLE: Implementing TestOrphanCmd for Subprocess Management in Go
DESCRIPTION: Defines TestOrphanCmd function to create and manage a subprocess that simulates a hanging test. It sets up the environment, stdin, and stderr for the subprocess.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_timeout_stdin.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
func TestOrphanCmd(t *testing.T) {
	exe, err := os.Executable()
	if err != nil {
		t.Fatal(err)
	}

	cmd := exec.Command(exe)
	cmd.Env = append(cmd.Environ(), "TEST_TIMEOUT_HANG=1")

	// Hold stdin open until this (parent) process exits.
	if _, err := cmd.StdinPipe(); err != nil {
		t.Fatal(err)
	}

	// Forward stderr to the subprocess so that it can hold the stream open.
	cmd.Stderr = os.Stderr

	if err := cmd.Start(); err != nil {
		t.Fatal(err)
	}
	t.Logf("started %v", cmd)

	// Intentionally leak cmd when the test completes.
	// This will allow the test process itself to exit, but (at least on Unix
	// platforms) will keep the parent process's stderr stream open.
	go func() {
		if err := cmd.Wait(); err != nil {
			os.Exit(3)
		}
	}()
}
```

----------------------------------------

TITLE: Defining Go Module (Go)
DESCRIPTION: This Go module file defines the module name as 'mycmd' and specifies the Go version as 1.16.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_arch_mode.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module mycmd

go 1.16
```

----------------------------------------

TITLE: Defining Network Routing Constants in Go for NetBSD ARM64
DESCRIPTION: Network routing table constants for system management. These are used with sysctl to manage and inspect the system routing tables.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_44

LANGUAGE: go
CODE:
```
const NET_RT_DUMP = 1
const NET_RT_FLAGS = 2
const NET_RT_IFLIST = 5
const NET_RT_MAXID = 6
const NET_RT_OIFLIST = 4
const NET_RT_OOIFLIST = 3
```

----------------------------------------

TITLE: Module A Implementation with Import
DESCRIPTION: The package implementation for 'm/a' that imports 'm/b', continuing the circular dependency chain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_cycle.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package a
import _ "m/b"
```

----------------------------------------

TITLE: Testing Pseudo-Version Generation for Specific Commits
DESCRIPTION: Verifies that pseudo-versions are generated correctly for commits after a retracted version, and for the commit of the retracted version itself.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_pseudo_base.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
go list -m vcs-test.golang.org/git/retract-pseudo.git@713affd19d7b
stdout '^vcs-test.golang.org/git/retract-pseudo.git v0.0.0-20201009173747-713affd19d7b$'

go list -m vcs-test.golang.org/git/retract-pseudo.git@64c061ed4371
stdout '^vcs-test.golang.org/git/retract-pseudo.git v0.0.0-20201009173747-64c061ed4371'
```

----------------------------------------

TITLE: Sub Package Implementation
DESCRIPTION: Secondary Go program implementation with empty main function in sub directory
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_buildvcs_auto.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Empty Go Package Definition
DESCRIPTION: An empty Go package definition file that declares itself as package 'x'. This is used to test package structure handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_patterns_outside_gopath.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package x
```

----------------------------------------

TITLE: Testing Go module download for nonexistent commit
DESCRIPTION: This snippet tests the behavior of 'go mod download' when attempting to download a specific commit that doesn't exist. It verifies the error message for an unknown revision.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_private_vcs.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
! go mod download github.com/golang/term@86186f3aba07ed0212cfb944f3398997d2d07c6b
stderr '^go: github.com/golang/term@86186f3aba07ed0212cfb944f3398997d2d07c6b: invalid version: unknown revision 86186f3aba07ed0212cfb944f3398997d2d07c6b$'
! stdout .
```

----------------------------------------

TITLE: Simple Go Package Implementation for B
DESCRIPTION: An empty Go package declaration for package 'b'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package b
```

----------------------------------------

TITLE: Module 'x2' Definition
DESCRIPTION: The go.mod file for x v0.2.0 (located in directory x2) that defines just the module name and Go version without dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_tidy.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
module x
go 1.13
```

----------------------------------------

TITLE: Running Coverage Test for Cgo Code (Bash)
DESCRIPTION: A bash script for testing code coverage on a Go package that uses Cgo. It skips certain tests and verifies that the coverage report shows a non-zero coverage percentage.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_extra_file.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
[short] skip
[!cgo] skip
[compiler:gccgo] skip # gccgo has no cover tool

# Test coverage on cgo code. This test case includes an
# extra empty non-cgo file in the package being checked.

go test -short -cover cgocover4
stdout  'coverage:.*[1-9][0-9.]+%'
! stderr '[^0-9]0\.0%'
```

----------------------------------------

TITLE: Defining RUSAGE Constants in Go Syscall Package for Darwin-arm64-cgo
DESCRIPTION: Constants for resource usage measurement targets. These values are used with getrusage() system calls to specify whether to retrieve resource usage for the calling process or its terminated child processes.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_178

LANGUAGE: Go
CODE:
```
const RUSAGE_SELF = 0
const RUSAGE_CHILDREN = -1
```

----------------------------------------

TITLE: Main Package Definition
DESCRIPTION: Defines an empty main package causing intentional package conflict for testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_pkgerror.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package main
```

----------------------------------------

TITLE: Package B3 Test with Import
DESCRIPTION: Test file for package b v0.3.0 which imports example.com/c.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
package b_test
import _ "example.com/c"
```

----------------------------------------

TITLE: Defining BPF-related structs in Go for Darwin ARM64
DESCRIPTION: This snippet defines structures related to Berkeley Packet Filter (BPF) operations, including BpfHdr, BpfInsn, BpfProgram, BpfStat, and BpfVersion.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_123

LANGUAGE: Go
CODE:
```
type BpfHdr struct {
    Hdrlen uint16
    Pad_cgo_0 [2]uint8
    Tstamp Timeval32
}

type BpfInsn struct {
    Code uint16
    Jf uint8
    Jt uint8
    K uint32
}

type BpfProgram struct {
    Insns *BpfInsn
    Len uint32
    Pad_cgo_0 [4]uint8
}

type BpfStat struct {
    Drop uint32
    Recv uint32
}

type BpfVersion struct {
    Major uint16
    Minor uint16
}
```

----------------------------------------

TITLE: Setting FIPS 140 Environment Variables in Go
DESCRIPTION: Sets up environment variables for FIPS 140 testing, including the FIPS snapshot version and an alias.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fipssnap.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env snap=v1.0.0
env alias=inprocess

env GOFIPS140=$snap
```

----------------------------------------

TITLE: Network Interface Type Constants - NetBSD ARM64
DESCRIPTION: System constants that define different types of network interfaces for NetBSD ARM64. These constants are used to identify the type of network interface in system calls and network configuration.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_128

LANGUAGE: Go
CODE:
```
const IFT_ETHER = 6
const IFT_FDDI = 15
const IFT_ISDN = 63
const IFT_LOOP = 24
const IFT_IEEE80211 = 71
const IFT_L2VLAN = 135
const IFT_GIF = 240
const IFT_FAITH = 242
const IFT_IEEE1394 = 144
const IFT_INFINIBAND = 199
```

----------------------------------------

TITLE: Defining Available Pseudo-Versions in Tiny Proxy
DESCRIPTION: Defines the content of the file '$WORK/tinyproxy/dmitri.shuralyov.com/test/modtest3/@v/list'. This file simulates the list of available versions provided by a module proxy for 'modtest3', containing only pseudo-versions. It serves as input data for the second test scenario.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_10

LANGUAGE: text
CODE:
```
-- $WORK/tinyproxy/dmitri.shuralyov.com/test/modtest3/@v/list --
v0.1.0-0.20161023043300-000000000000
v0.0.0-20181023043359-a85b471d5412
```

----------------------------------------

TITLE: Deprecated Linux ARM CGO Functions
DESCRIPTION: List of deprecated syscall functions for Linux ARM with CGO support. These functions include LSF (Linux Socket Filter) related operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_37

LANGUAGE: go
CODE:
```
func LsfStmt
func SetLsfPromisc
func StringSlicePtr
```

----------------------------------------

TITLE: Deprecations in syscall package for freebsd-386-cgo
DESCRIPTION: Lists deprecated functions in the syscall package for freebsd-386-cgo architecture.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_33

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386-cgo), func BpfBuflen //deprecated
pkg syscall (freebsd-386-cgo), func BpfDatalink //deprecated
pkg syscall (freebsd-386-cgo), func BpfHeadercmpl //deprecated
pkg syscall (freebsd-386-cgo), func BpfInterface //deprecated
pkg syscall (freebsd-386-cgo), func BpfJump //deprecated
pkg syscall (freebsd-386-cgo), func BpfStats //deprecated
pkg syscall (freebsd-386-cgo), func BpfStmt //deprecated
pkg syscall (freebsd-386-cgo), func BpfTimeout //deprecated
pkg syscall (freebsd-386-cgo), func CheckBpfVersion //deprecated
pkg syscall (freebsd-386-cgo), func FlushBpf //deprecated
pkg syscall (freebsd-386-cgo), func ParseRoutingMessage //deprecated
pkg syscall (freebsd-386-cgo), func ParseRoutingSockaddr //deprecated
pkg syscall (freebsd-386-cgo), func RouteRIB //deprecated
pkg syscall (freebsd-386-cgo), func SetBpf //deprecated
pkg syscall (freebsd-386-cgo), func SetBpfBuflen //deprecated
pkg syscall (freebsd-386-cgo), func SetBpfDatalink //deprecated
```

----------------------------------------

TITLE: Testing Go Vet Help Output
DESCRIPTION: Checks the help output format for go vet command, ensuring it displays usage instructions and references to detailed help
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/help.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
! go vet -h
stderr 'usage: go vet .*'
stderr 'Run \'go help vet\' for details.'
stderr 'Run \'go tool vet help\' for a full list of flags and analyzers.'
stderr 'Run \'go tool vet -help\' for an overview.'
```

----------------------------------------

TITLE: Testing Package Dependencies with GO111MODULE Off
DESCRIPTION: Shell commands testing package dependencies with module mode disabled, verifying proper error handling for excluded Go files due to build constraints.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_import_error_stack.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off
! go test testdep/p1
stderr 'package testdep/p1 \(test\)\n\timports testdep/p2\n\timports testdep/p3: build constraints exclude all Go files '
! go vet testdep/p1
stderr 'package testdep/p1 \(test\)\n\timports testdep/p2\n\timports testdep/p3: build constraints exclude all Go files '
```

----------------------------------------

TITLE: go.work File with Repeated Path
DESCRIPTION: Contents of go.work.repeated.txt file, demonstrating a repeated 'use' directive for the 'foo' module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```


use foo
use foo
```

----------------------------------------

TITLE: Defining dependency module
DESCRIPTION: Specifies the go.mod file for the example.com/m dependency module with its Go version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_redundant_requirement.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module example.com/m

go 1.17
```

----------------------------------------

TITLE: Explaining Package Migration in Documentation - Golang - plaintext
DESCRIPTION: This snippet is a plaintext (comment) README that documents the migration of a Go package (pkg) from the top-level module to a nested module at the same version. No code is present, but it provides important historical context for maintainers and users. The documentation clarifies package location and helps avoid ambiguity when resolving dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_v0.2.0.txt#2025-04-22_snippet_3

LANGUAGE: plaintext
CODE:
```
// Package pkg no longer exists in this module at v0.2.0.
// Find it in module example.net/ambiguous/nested instead.
```

----------------------------------------

TITLE: Comment List Formatting - Input Style
DESCRIPTION: Shows original comment formatting with numbered list and extra spacing, including tab indentation and blank line within the comment block.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list10.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
	1. This list
	2. Starts the comment
	3. And also has a blank line before it.

All of which is a little weird.
```

----------------------------------------

TITLE: Mach-O Relocation Types and Structures - debug/macho
DESCRIPTION: Type definitions and structures for handling relocations in Mach-O binaries
SOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
type Reloc struct {
    Addr uint32
    Value uint32
    Type uint8
    Len uint8
    Pcrel bool
    Extern bool
    Scattered bool
}
```

----------------------------------------

TITLE: Defining ELF Compression Header Structs - Go
DESCRIPTION: Definitions of 32-bit and 64-bit ELF compression header structures used in the debug/elf package for handling compressed sections.
SOURCE: https://github.com/golang/go/blob/master/api/go1.6.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
type Chdr32 struct {
    Type uint32
    Size uint32
    Addralign uint32
}

type Chdr64 struct {
    Type uint32
    Size uint64
    Addralign uint64
}
```

----------------------------------------

TITLE: Go Types Package Structures and Interfaces
DESCRIPTION: Defines core types and interfaces for Go's type checking system, including Checker, Error, TypeAndValue, and various type definitions
SOURCE: https://github.com/golang/go/blob/master/api/go1.5.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
type Checker struct {
    *Info
}

type Error struct {
    Fset *token.FileSet
    Pos token.Pos
    Msg string
    Soft bool
}

type TypeAndValue struct {
    Type Type
    Value constant.Value
}
```

----------------------------------------

TITLE: Minimal Vendored Package in Nested Directory
DESCRIPTION: A minimal Go file in a nested directory structure within the vendor directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
package dir2
```

----------------------------------------

TITLE: Testing Go Module Fetch from Cache
DESCRIPTION: Attempts to fetch a module from cache without consulting the checksum database. Expects the command to succeed even with a failing sumdb proxy.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_cache.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
cp go.mod.orig go.mod
rm go.sum
env GOPROXY=$proxy/sumdb-503
go get rsc.io/quote
rm go.sum
```

----------------------------------------

TITLE: Adding new Machine constants to debug/elf package in Go
DESCRIPTION: Introduces a large number of new Machine constants in the debug/elf package, representing various processor architectures and embedded systems.
SOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
const EM_56800EX = 200
const EM_56800EX Machine
const EM_68HC05 = 72
const EM_68HC05 Machine
// ... (many more constants)
```

----------------------------------------

TITLE: Empty Root Module Definition
DESCRIPTION: Defines a Go module for testing empty root directory behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_17

LANGUAGE: go
CODE:
```
module example.com/emptyroot
```

----------------------------------------

TITLE: Declaring an Unconditional Package - Go
DESCRIPTION: This Go file declares an empty package p with no build tags or imports. It is always included in builds and serves as a baseline file when testing go list output. There are no dependencies and no exported symbols. Input/Output: none. Limitation: only defines the package statement.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p

```

----------------------------------------

TITLE: Module Declaration in .mod File
DESCRIPTION: Declares the module name 'patch.example.com/indirect' in the .mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_indirect_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module patch.example.com/indirect
```

----------------------------------------

TITLE: Simple Go Module Definition
DESCRIPTION: A basic Go module definition file that establishes the module name as 'example.prog'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_cmdline_pkgs.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module example.prog
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: This snippet defines the Go module for the test project. It specifies the module name as 'example.com/mod'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_support_buildx.txt#2025-04-22_snippet_1

LANGUAGE: Go
CODE:
```
module example.com/mod
```

----------------------------------------

TITLE: Dependency package implementation
DESCRIPTION: A simple dependency package that is imported by the main package to test PGO application to dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_11

LANGUAGE: go
CODE:
```
package dep
```

----------------------------------------

TITLE: Go Module File with Future Version
DESCRIPTION: This go.mod file specifies a future Go version (1.99999) to simulate a module requiring a newer Go version than currently available.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_4

LANGUAGE: Plain Text
CODE:
```
module example
go 1.99999
```

----------------------------------------

TITLE: Object Creation Functions in go/types Package
DESCRIPTION: Functions for creating various object types like constants, variables, functions, and type names. These are used for representing program entities during type checking.
SOURCE: https://github.com/golang/go/blob/master/api/go1.5.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
func NewConst(token.Pos, *Package, string, Type, constant.Value) *Const
func NewVar(token.Pos, *Package, string, Type) *Var
func NewFunc(token.Pos, *Package, string, *Signature) *Func
func NewTypeName(token.Pos, *Package, string, Type) *TypeName
```

----------------------------------------

TITLE: Testing GOARM Impact on Build ID (Shell)
DESCRIPTION: This shell script sets up the environment and runs commands to test if changing the GOARM value affects the build ID. It sets GOOS to linux, GOARCH to arm, and tests with GOARM values of 5 and 7.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_arch_mode.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
# Issue 9737: verify that GOARM affects the computed build ID

[short] skip

# arm
env GOOS=linux
env GOARCH=arm
env GOARM=5
go install mycmd
env GOARM=7
stale mycmd
```

----------------------------------------

TITLE: Terminal Control Constants in Go for NetBSD ARM64
DESCRIPTION: Constants used for terminal control operations in NetBSD ARM64. These flags control input processing behavior in terminal devices.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_131

LANGUAGE: Go
CODE:
```
const IGNBRK = 1
const IGNCR = 128
const IGNPAR = 4
const IMAXBEL = 8192
const INLCR = 64
const INPCK = 16
```

----------------------------------------

TITLE: Module Definition for '@at' Special Character Test
DESCRIPTION: Go module definition for a module with '@' in its directory path, used to test special character handling in file paths.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
module at

go 1.14
```

----------------------------------------

TITLE: Routing Table Constants - Darwin ARM64
DESCRIPTION: Constants for routing table operations and flags in Darwin ARM64 architecture. Includes masks, flags, and route types for network routing configuration.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_92

LANGUAGE: Go
CODE:
```
const (
    RTA_GENMASK = 8
    RTA_IFA = 32
    RTA_IFP = 16
    RTA_NETMASK = 4
    RTF_BLACKHOLE = 4096
    RTF_BROADCAST = 4194304
    RTF_CLONING = 256
    // ... additional routing constants
)
```

----------------------------------------

TITLE: Minimal Vendored Package r
DESCRIPTION: A minimal vendored package 'r' that only contains a package declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_10

LANGUAGE: go
CODE:
```
package r
```

----------------------------------------

TITLE: GCD and LCM Calculation with Large GCD
DESCRIPTION: This snippet shows the calculation of GCD and LCM for two large numbers with a large GCD (100000000). The LCM is still quite large due to the size of the input numbers.
SOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/fips140/rsa/testdata/gcd_lcm_tests.txt#2025-04-22_snippet_8

LANGUAGE: plaintext
CODE:
```
GCD = 100000000
A = f8b4f19e09f5862d79fb2931c4d616a1b8e0dd44781ca52902c8035166c8fca52d33a56ff484c365ec1257de7fa8ed2786163cfc051d5223b4aad859a049e8ba00000000
B = 6e54cb41b454b080e68a2c3dd0fa79f516eb80239af2be8250ca9cd377ba501aabafc09146fad4402bdc7a49f2c3eec815e25f4c0a223f58e36709eefd92410500000000
LCM = 6b3020a880ddeff9d17d3dc234da8771962de3322cd15ba7b1e4b1dd4a6a2a802a16c49653865c6fdf6c207cbe0940f8d81ef4cb0e159385fd709d515ee99d109ad9ad680031cbae4eab2ed62944babdade4e3036426b18920022f737897c7d751dce98d626cdda761fec48ad87a377fb70f97a0a15aa3d10d865785719cc5a200000000
```

----------------------------------------

TITLE: Building Go Compiler and Test Executable in Shell
DESCRIPTION: This snippet builds a fresh copy of the Go compiler and a test executable using the go build command. It creates new directories and sets up the environment for testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goroot_executable.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
mkdir $WORK/new/bin

go build -o $WORK/new/bin/go$GOEXE cmd/go &
go build -trimpath -o $WORK/bin/check$GOEXE check.go &
wait

env TESTGOROOT=$GOROOT
env GOROOT=
```

----------------------------------------

TITLE: Fuzzing Cache Validator for Minimization Tests
DESCRIPTION: Utility program that checks fuzzing cache files to verify input minimization. It confirms that at least one cached input has been properly minimized to a length of 1 or less, validating the minimizer's functionality.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_interesting.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
//go:build ignore
// +build ignore

// check_cache.go checks that each file in the cached corpus has a []byte
// of length at most 1. This verifies that at least one cached input is minimized.
package main

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"regexp"
	"strconv"
)

func main() {
	dir := os.Args[1]
	ents, err := os.ReadDir(dir)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	for _, ent := range ents {
		name := filepath.Join(dir, ent.Name())
		if good, err := checkCacheFile(name); err != nil {
			fmt.Fprintln(os.Stderr, err)
			os.Exit(1)
		} else if good {
			os.Exit(0)
		}
	}
	fmt.Fprintln(os.Stderr, "no cached inputs were minimized")
	os.Exit(1)
}

func checkCacheFile(name string) (good bool, err error) {
	data, err := os.ReadFile(name)
	if err != nil {
		return false, err
	}
	for _, line := range bytes.Split(data, []byte("\n")) {
		m := valRe.FindSubmatch(line)
		if m == nil {
			continue
		}
		if s, err := strconv.Unquote(string(m[1])); err != nil {
			return false, err
		} else if len(s) <= 1 {
			return true, nil
		}
	}
	return false, nil
}

var valRe = regexp.MustCompile(`^\[\]byte\(([^)]+)\)$`)
```

----------------------------------------

TITLE: Creating Custom bytes Package with Modified Import
DESCRIPTION: This Go file defines a custom 'bytes' package that imports a 'bytes/modified' package. It's used to test how package imports behave in a custom GOROOT environment.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_alt_goroot.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package bytes

import _"bytes/modified"
```

----------------------------------------

TITLE: Defining Kevent_t Struct in Go for Darwin ARM64 CGO
DESCRIPTION: Defines the Kevent_t struct used for kernel event notifications. It includes fields for identifier, filter, flags, and associated data.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_202

LANGUAGE: Go
CODE:
```
type Kevent_t struct {
    Data int64
    Fflags uint32
    Filter int16
    Flags uint16
    Ident uint64
    Udata *uint8
}
```

----------------------------------------

TITLE: Defining Routing Table Constants in Go for NetBSD ARM64
DESCRIPTION: This snippet defines routing table attribute and flag constants for NetBSD ARM64. These constants are used in network routing operations to manipulate the kernel routing tables and control how network packets are forwarded.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_51

LANGUAGE: Go
CODE:
```
const RTA_AUTHOR = 64
const RTA_BRD = 128
const RTA_DST = 1
const RTA_GATEWAY = 2
const RTA_GENMASK = 8
const RTA_IFA = 32
const RTA_IFP = 16
const RTA_NETMASK = 4
const RTA_TAG = 256
const RTAX_AUTHOR = 6
const RTAX_BRD = 7
const RTAX_DST = 0
const RTAX_GATEWAY = 1
const RTAX_GENMASK = 3
const RTAX_IFA = 5
const RTAX_IFP = 4
const RTAX_MAX = 9
const RTAX_NETMASK = 2
const RTAX_TAG = 8
const RTF_ANNOUNCE = 131072
const RTF_BLACKHOLE = 4096
const RTF_CLONED = 8192
const RTF_CLONING = 256
const RTF_DONE = 64
const RTF_DYNAMIC = 16
const RTF_GATEWAY = 2
const RTF_HOST = 4
const RTF_LLINFO = 1024
const RTF_MASK = 128
const RTF_MODIFIED = 32
const RTF_PROTO1 = 32768
const RTF_PROTO2 = 16384
const RTF_REJECT = 8
const RTF_SRC = 65536
const RTF_STATIC = 2048
const RTF_UP = 1
const RTF_XRESOLVE = 512
const RTM_ADD = 1
```

----------------------------------------

TITLE: Simple Go Program Using CGO for Testing
DESCRIPTION: A basic Go program (`main.go`) in package `main`. It imports the pseudo-package `C`, enabling CGO processing. The `main` function simply prints "ok" to standard output. This version is intended for use in test scenarios where CGO is enabled.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cwd_newline.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
-- $WORK/main.go --
package main

import "C"

func main() {
	/* nothing here */
	println("ok")
}
```

----------------------------------------

TITLE: Defining IP and IPv6 Firewall Constants in Go for Darwin ARM64 CGO
DESCRIPTION: This snippet defines constants related to IP and IPv6 firewalls. These are used for firewall configuration and management in network programming.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_156

LANGUAGE: Go
CODE:
```
const IPV6_FW_ADD = 30
const IPV6_FW_ADD ideal-int
const IPV6_FW_DEL = 31
const IPV6_FW_DEL ideal-int
const IPV6_FW_FLUSH = 32
const IPV6_FW_FLUSH ideal-int
// ... more firewall constants
```

----------------------------------------

TITLE: Module 'a' Package Declaration
DESCRIPTION: A simple Go file for module 'a' that just declares the package. This file exists to make module 'a' a valid Go module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_tidy.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package a
```

----------------------------------------

TITLE: Minimal Go Program with External Package Import
DESCRIPTION: This Go program imports the 'golang.org/x/text/language' package but doesn't use it directly. It serves as a minimal test case for module resolution and compatibility with very old declared Go versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_oldgo.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main

import _ "golang.org/x/text/language"

func main() {}
```

----------------------------------------

TITLE: Defining Syscall Constants for Darwin ARM64 in Go
DESCRIPTION: This snippet defines syscall constants for the Darwin ARM64 architecture. Each constant is defined with both its numeric value and as an ideal-int type. These constants represent various system calls available on the Darwin ARM64 platform.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_109

LANGUAGE: Go
CODE:
```
const SYS_SETTID = 285
const SYS_SETTID ideal-int
const SYS_SETTID_WITH_PID = 311
const SYS_SETTID_WITH_PID ideal-int
const SYS_SETTIMEOFDAY = 122
const SYS_SETTIMEOFDAY ideal-int
// ... (many more constants defined similarly)
const SYS___PTHREAD_SIGMASK = 329
const SYS___PTHREAD_SIGMASK ideal-int
```

----------------------------------------

TITLE: Testing Non-Word Boundaries with \B in Go Regexps
DESCRIPTION: Tests patterns using \B to match positions that are not word boundaries. These tests compare the behavior with \b by using the same test strings but opposite expectations.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_21

LANGUAGE: regexp
CODE:
```
\Bx\B
```

LANGUAGE: regexp
CODE:
```
^(?:\Bx\B)$
```

LANGUAGE: regexp
CODE:
```
^(?:\Bx\B)
```

LANGUAGE: regexp
CODE:
```
(?:\Bx\B)$
```

----------------------------------------

TITLE: Valid Go Package Declaration
DESCRIPTION: This file contains a valid Go package declaration. It defines a package named 'mypkg' without any additional content.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/pattern_syntax_error.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package mypkg
```

----------------------------------------

TITLE: Q Package Implementation
DESCRIPTION: A minimal Go implementation of q package with an empty main function, used as a test dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_default.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
package main
func main() {}
```

----------------------------------------

TITLE: Package A Test with Import
DESCRIPTION: Test file for package a which imports example.com/b, extending the dependency chain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package a_test

import _ "example.com/b"
```

----------------------------------------

TITLE: Executing Test Cases for Go Compiler in Shell
DESCRIPTION: This snippet runs various test cases to check the behavior of the Go compiler in different scenarios, including relocated executables, symlinked executables, and runtime GOROOT detection.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goroot_executable.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
exec $WORK/bin/check$GOEXE $WORK/new/bin/go$GOEXE $TESTGOROOT

mkdir $WORK/new/pkg/tool
exec $WORK/bin/check$GOEXE $WORK/new/bin/go$GOEXE $WORK/new

[!symlink] stop 'The rest of the test cases require symlinks'

mkdir $WORK/other/bin
symlink $WORK/other/bin/go$GOEXE -> $WORK/new/bin/go$GOEXE
exec $WORK/bin/check$GOEXE $WORK/new/bin/go$GOEXE $WORK/new

rm $WORK/new/pkg

symlink $WORK/new/src -> $TESTGOROOT/src
symlink $WORK/new/pkg -> $TESTGOROOT/pkg
exec $WORK/new/bin/go$GOEXE run check_runtime_goroot.go $WORK/new
```

----------------------------------------

TITLE: Adding Token field to SysProcAttr struct for Windows AMD64 architecture
DESCRIPTION: Extends the SysProcAttr struct in the syscall package for Windows 64-bit architecture with a Token field. This allows specifying a security token when creating new processes.
SOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_13

LANGUAGE: go
CODE:
```
pkg syscall (windows-amd64), type SysProcAttr struct, Token Token
```

----------------------------------------

TITLE: Initializing and Testing Go Module Dependencies
DESCRIPTION: A series of shell commands to test Go module behavior, specifically checking that 'go get package@none' is a no-op for non-active modules. The commands initialize a new module and verify module listing behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_none.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

go mod init example.com/foo

# 'go get bar@none' should be a no-op if module bar is not active.
go get example.com/bar@none
go list -m all
! stdout example.com/bar

go get example.com/bar@none
go list -m all
! stdout example.com/bar
```

----------------------------------------

TITLE: Package C Implementation
DESCRIPTION: Implementation of package c with test file importing package d.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_version.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package c
```

LANGUAGE: go
CODE:
```
package c_test

import _ "example.net/d"
```

----------------------------------------

TITLE: Defining ARM64 ELF Machine Type Constant in Go
DESCRIPTION: Defines the constant EM_AARCH64 with value 183 to represent the ARM64 machine type in ELF files.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
const EM_AARCH64 = 183
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Module declaration file defining the sandbox module
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_err_stack.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module sandbox
```

----------------------------------------

TITLE: Setting Git Operation Timestamp in Bash
DESCRIPTION: Sets a specific timestamp for Git operations to ensure reproducible commits.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/retract-pseudo.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
at 2020-10-09T13:37:47-04:00
```

----------------------------------------

TITLE: Go Module Checksums
DESCRIPTION: This go.sum file contains the checksums for the module dependencies, including 'golang.org/x/text', 'rsc.io/quote', and 'rsc.io/sampler'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_file_proxy.txt#2025-04-22_snippet_4

LANGUAGE: Text
CODE:
```
golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:pvCbr/wm8HzDD3fVywevekufpn6tCGPY3spdHeZJEsw=
golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
rsc.io/quote v1.5.1 h1:ZE3OgnVGrhXtFkGw90HwW992ZRqcdli/33DLqEYsoxA=
rsc.io/quote v1.5.1/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=
rsc.io/sampler v1.3.0 h1:HLGR/BgEtI3r0uymSP/nl2uPLsUnNJX8toRyhfpBTII=
rsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=
```

----------------------------------------

TITLE: Expected go.sum Content for Module Verification
DESCRIPTION: This file contains the expected content of go.sum after concurrent builds. It includes cryptographic hashes for the required modules and their versions.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_concurrent.txt#2025-04-22_snippet_4

LANGUAGE: Text
CODE:
```
golang.org/x/text v0.3.0 h1:ivTorhoiROmZ1mcs15mO2czVF0uy0tnezXpBVNzgrmA=
golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
rsc.io/sampler v1.0.0 h1:SRJnjyQ07sAtq6G4RcfJEmz8JxqLyj3PoGXG2VhbDWo=
rsc.io/sampler v1.0.0/go.mod h1:cqxpM3ZVz9VtirqxZPmrWzkQ+UkiNiGtkrN+B+i8kx8=
```

----------------------------------------

TITLE: Comparing Cached Module Version List with Expected List
DESCRIPTION: Compares the content of the automatically generated version list file within the local module cache (acting as a proxy) for 'modtest5' with a predefined expected list located at '$WORK/modtest5.list'. This command serves as an assertion to verify that the cache was populated correctly by the preceding 'go mod download' commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
cmp $GOPATH/pkg/mod/cache/download/github.com/dmitshur-test/modtest5/@v/list $WORK/modtest5.list
```

----------------------------------------

TITLE: Import Collision Test Module Definition
DESCRIPTION: Go module definition file specifying module name and Go version requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_case_collision.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
module example

go 1.16
```

----------------------------------------

TITLE: Version Info Configuration
DESCRIPTION: Version information file specifying v1.9.0 version
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_b_v1.9.0.txt#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{"Version":"v1.9.0"}
```

----------------------------------------

TITLE: Quote Package Implementation
DESCRIPTION: Empty package declaration for the quote replacement module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_readonly.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package quote

```

----------------------------------------

TITLE: Version Information Definition
DESCRIPTION: JSON configuration file defining the project version number.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_a_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{"Version":"v1.0.0"}
```

----------------------------------------

TITLE: Test Data Validation Utility
DESCRIPTION: A Go utility that checks the testdata generated by fuzz tests to validate the size of the test case that was written to the corpus. It verifies that minimization correctly reduced test cases to the expected size.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize.txt#2025-04-22_snippet_8

LANGUAGE: go
CODE:
```
package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strconv"
)

func main() {
	target := os.Args[1]
	numBytes, err := strconv.Atoi(os.Args[2])
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}

	// Open the file in testdata (there should only be one)
	dir := fmt.Sprintf("testdata/fuzz/%s", target)
	files, err := ioutil.ReadDir(dir)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if len(files) != 1 {
		fmt.Fprintf(os.Stderr, "expected one file, got %d", len(files))
		os.Exit(1)
	}
	got, err := ioutil.ReadFile(filepath.Join(dir, files[0].Name()))
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}

	// Trim the newline at the end of the file
	got = bytes.TrimSpace(got)

	// Make sure that there were exactly 100 bytes written to the corpus entry
	prefix := []byte("[]byte(")
	i := bytes.Index(got, prefix)
	gotBytes := got[i+len(prefix) : len(got)-1]
	s, err := strconv.Unquote(string(gotBytes))
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if want, got := numBytes, len(s); want != got {
		fmt.Fprintf(os.Stderr, "want %d bytes, got %d\n", want, got)
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: LazyUpgrade v0.1.0 Module Definition
DESCRIPTION: go.mod file for lazyupgrade module version 0.1.0
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_upgrade_lazy.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.com/lazyupgrade

go 1.17
```

----------------------------------------

TITLE: Testing Module Compatibility with Go 1.16
DESCRIPTION: Sets the Go version to 1.16 in go.mod and attempts to list dependencies, expecting a checksum error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_incompatible.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go mod edit -go=1.16
! go list -f $MODFMT -deps ./...
stderr -count=1 '^go: example\.net/lazy@v0\.1\.0 requires\n\texample\.net/requireincompatible@v0\.1\.0 requires\n\texample\.com/retract/incompatible@v2\.0\.0\+incompatible: missing go.sum entry for go.mod file; to add it:\n\tgo mod download example.com/retract/incompatible$'
```

----------------------------------------

TITLE: Vendor Replacement Go Module Definition for internal
DESCRIPTION: Defines a `go.mod` file for the vendor-style replacement version of `golang.org/x/internal`, located within the `vendor` directory structure. It declares the module path as `golang.org/x/internal`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_20

LANGUAGE: go
CODE:
```
-- vendor/golang.org/x/internal/go.mod --
module golang.org/x/internal
```

----------------------------------------

TITLE: Subdirectory Go Module Definition
DESCRIPTION: Module definition for the sub/dir directory
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_deleted.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example/sub/dir
go 1.18
```

----------------------------------------

TITLE: Adding new tag and testing version detection
DESCRIPTION: Adds a new tag v1.0.10 to the repository and verifies go get properly detects and uses the new tag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_issue53955.txt#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
cd $WORK/repo
exec git tag v1.0.10

cd $WORK/m
go get -x github.com/golang/issue53955@v1.0.10
! stderr 'v1\.0\.10 is not a tag'
stderr '^go: upgraded github.com/golang/issue53955 v.* => v1\.0\.10$'
```

----------------------------------------

TITLE: Fuzz Seed Corpus File (Failing Case)
DESCRIPTION: A test data file that defines a failing test case for the FuzzFoo function. It contains the string 'fails' which will trigger the error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_run.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
go test fuzz v1
string("fails")
```

----------------------------------------

TITLE: Defining Memory Advice Constants in Go for NetBSD ARM
DESCRIPTION: These constants define memory advice flags used in memory management syscalls on NetBSD ARM systems. They specify how the application intends to use the memory, which can help the kernel optimize memory usage.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_29

LANGUAGE: Go
CODE:
```
const MADV_NORMAL = 0
const MADV_RANDOM = 1
const MADV_SEQUENTIAL = 2
const MADV_WILLNEED = 3
const MADV_DONTNEED = 4
const MADV_FREE = 6
const MADV_SPACEAVAIL = 5
```

----------------------------------------

TITLE: JSON Overlay Configuration
DESCRIPTION: JSON configuration file defining the overlay replacement for go.work file
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_overlay.txt#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{"Replace": {"go.work": "overlaywork"}}
```

----------------------------------------

TITLE: Defining Test Go Source File for 'fmt' Package in GOROOT (Go)
DESCRIPTION: Defines the content of `$WORK/goroot/src/fmt/fmt.go`. This minimal Go file (`package fmt`) simulates the standard library `fmt` package within the test's GOROOT. It's required for tests involving `go list std` or listing dependencies like `fmt`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_14

LANGUAGE: text
CODE:
```
-- $WORK/goroot/src/fmt/fmt.go --
```

LANGUAGE: go
CODE:
```
package fmt
```

----------------------------------------

TITLE: Running Compiler Tests
DESCRIPTION: Commands for running specific compiler tests and test suites
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
$ go test cmd/internal/testdir
$ go test cmd/internal/testdir -run='Test/escape.*.go'
```

----------------------------------------

TITLE: Testing Go Version Command with Non-Go Files
DESCRIPTION: Verifies the behavior of 'go version' with files that don't contain Go build info.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
go version empty.txt
! stdout .
! stderr .
go version empty.exe
stderr 'could not read Go build info'
go version empty.so
stderr 'could not read Go build info'
go version empty.dll
stderr 'could not read Go build info'
```

----------------------------------------

TITLE: Testing Preservation of Redundant Requirements
DESCRIPTION: Tests that redundant dependencies are preserved during regular operations like 'go list' and 'go mod vendor'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
cp go.mod.redundant go.mod
go list all
cmp go.mod go.mod.redundant
go mod vendor
cmp go.mod go.mod.redundant
rm -r vendor
```

----------------------------------------

TITLE: Testing GOTOOLCHAIN Environment Variable
DESCRIPTION: Validates behavior with different GOTOOLCHAIN environment variable values, including valid versions, invalid versions, and auto-download scenarios.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_issue66175.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
env GOTOOLCHAIN=go1.14
go version
stdout 'go1.14'

env GOTOOLCHAIN=go1.20
! go version
stderr 'go: downloading go1.20 '
```

----------------------------------------

TITLE: FreeBSD ARM with CGO Constants and Functions
DESCRIPTION: System constants and function prototypes for FreeBSD ARM with CGO enabled, including socket address family limits, IO controls, system calls, and capabilities management functions.
SOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
const AF_MAX = 38
const BIOCGRTIMEOUT = 1074545262
const BIOCSRTIMEOUT = 2148287085
const ELAST = 94
const ImplementsGetwd = false
const O_CLOEXEC = 0
const SIOCAIFADDR = 2151967019
const SIOCGIFSTATUS = 3274991931
const SIOCSIFPHYADDR = 2151967046
const SYS_CAP_FCNTLS_GET = 537
const SYS_CAP_FCNTLS_LIMIT = 536
const SYS_CAP_IOCTLS_GET = 535
const SYS_CAP_IOCTLS_LIMIT = 534
const SYS_CAP_RIGHTS_GET = 515
const SYS_CAP_RIGHTS_LIMIT = 533
const SizeofBpfHdr = 24
const SizeofIfData = 88
const SizeofIfMsghdr = 104
const SizeofSockaddrDatalink = 56
const SizeofSockaddrUnix = 108
const TIOCTIMESTAMP = 1074558041

func Fchflags(string, int) error
func Mknod(string, uint32, int) error
```

----------------------------------------

TITLE: Defining Go Module in .mod File
DESCRIPTION: Declares the module name in the .mod file for the Go toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.ios-arm64.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Indirect Module Definition
DESCRIPTION: Module configuration for the indirect dependency
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_ambiguous.txt#2025-04-22_snippet_2

LANGUAGE: gomod
CODE:
```
module example.net/indirect

go 1.17

require example.net/ambiguous v0.1.0
```

----------------------------------------

TITLE: Socket Message Constants in Go for Darwin ARM64
DESCRIPTION: Constants for socket message flags used with send() and recv() operations. Controls handling of out-of-band data, peeking at incoming data, waiting for complete messages, and other message-related behaviors.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_78

LANGUAGE: Go
CODE:
```
const MSG_CTRUNC = 32
const MSG_DONTROUTE = 4
const MSG_DONTWAIT = 128
const MSG_EOF = 256
const MSG_EOR = 8
const MSG_FLUSH = 1024
const MSG_HAVEMORE = 8192
const MSG_HOLD = 2048
const MSG_NEEDSA = 65536
const MSG_OOB = 1
const MSG_PEEK = 2
const MSG_RCVMORE = 16384
const MSG_SEND = 4096
const MSG_TRUNC = 16
const MSG_WAITALL = 64
const MSG_WAITSTREAM = 512
```

----------------------------------------

TITLE: Module Definition in go.mod File for Go
DESCRIPTION: Declares the module path for the 'depofdirectpatch' package in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_depofdirectpatch_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module patch.example.com/depofdirectpatch
```

----------------------------------------

TITLE: No Version Module Definition
DESCRIPTION: Module definition for example.com/noversion test module used in proxy response testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_update_nolatest.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com/noversion

go 1.17
```

----------------------------------------

TITLE: Package A v0.1.0 Definition
DESCRIPTION: Module definition and implementation for example.net/a v0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patch.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.net/a

go 1.16

require example.net/b v0.1.0
```

LANGUAGE: go
CODE:
```
package a

import _ "example.net/b"
```

----------------------------------------

TITLE: Defining Expected Error Output for Listing Package with Missing Requirement (Text)
DESCRIPTION: Specifies the expected standard error output (`stderr`) when `go list m/use` fails after dropping the explicit requirement for `example.com/badchain/a`. The output shows the tool finding the module for the imported package `example.com/badchain/c` and then failing due to the path mismatch when parsing its `go.mod`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_16

LANGUAGE: text
CODE:
```
-- list-missing-expected --
go: finding module for package example.com/badchain/c
go: found example.com/badchain/c in example.com/badchain/c v1.1.0
go: m/use imports
	example.com/badchain/c: example.com/badchain/c@v1.1.0: parsing go.mod:
	module declares its path as: badchain.example.com/c
	        but was required as: example.com/badchain/c
```

----------------------------------------

TITLE: Go Test File for Vendored Package
DESCRIPTION: A test file that checks the content of the Msg variable from the vendored 'strings' package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_vendor.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package main

import (
	"strings" // really ../vendor/strings
	"testing"
)

func TestMsgInternal(t *testing.T) {
	if strings.Msg != "hello, world" {
		t.Fatalf("unexpected msg: %v", strings.Msg)
	}
}
```

----------------------------------------

TITLE: Plain Text Format Test
DESCRIPTION: Shows content in plain text format
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/blank.txt#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
Blank line at start and end.
```

----------------------------------------

TITLE: Incomplete Go Module Dependencies
DESCRIPTION: Incomplete go.sum file missing the hash for rsc.io/quote v1.5.2 to test error handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_missing_ziphash.txt#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:pvCbr/wm8HzDD3fVywevekufpn6tCGPY3spdHeZJEsw=
golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
rsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=
rsc.io/sampler v1.3.0 h1:HLGR/BgEtI3r0uymSP/nl2uPLsUnNJX8toRyhfpBTII=
rsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=
rsc.io/testonly v1.0.0 h1:K/VWHdO+Jv7woUXG0GzVNx1czBXUt3Ib1deaMn+xk64=
rsc.io/testonly v1.0.0/go.mod h1:OqmGbIFOcF+XrFReLOGZ6BhMM7uMBiQwZsyNmh74SzY=
```

----------------------------------------

TITLE: Cache File Validation Utility in Go
DESCRIPTION: Utility program that checks fuzzing cache files for specific expected values. Uses regex to parse byte array representations and validates their contents against an expected string.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_dirty_cov.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
func checkFile(name, expected string) (bool, error) {
	data, err := os.ReadFile(name)
	if err != nil {
		return false, err
	}
	for _, line := range bytes.Split(data, []byte("\n")) {
		m := valRe.FindSubmatch(line)
		if m == nil {
			continue
		}
		fmt.Println(strconv.Unquote(string(m[1])))
		if s, err := strconv.Unquote(string(m[1])); err != nil {
			return false, err
		} else if s == expected {
			return true, nil
		}
	}
	return false, nil
}
```

----------------------------------------

TITLE: Creating Symlinks and Running Go Commands - Shell
DESCRIPTION: This snippet illustrates how to use shell commands to create symbolic links between directories in a Go workspace and run Go tooling commands for module/package listing and validation. Dependencies include an environment with shell access, Go installed, and appropriate permissions to create and traverse symlinks. The key operations are creating symlinks (except those marked to skip), changing directories, listing Go packages, and comparing outputs for correctness. The commands are meant for integration or scenario testing with Go projects involving symlinks.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_dotdotdot.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# [!symlink] skip

symlink $WORK/gopath/src/sym -> $WORK/gopath/src/tree
symlink $WORK/gopath/src/tree/squirrel -> $WORK/gopath/src/dir2 # this symlink should not be followed
cd sym
go list ./...
cmp stdout $WORK/gopath/src/want_list.txt
```

----------------------------------------

TITLE: Simple Subpackage Implementation
DESCRIPTION: A simple Go subpackage that provides a Hello function which prints a message to stdout. This package is imported by the parent package using a relative import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_local.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package subsub

import "fmt"

func Hello() {
	fmt.Println("subsub.Hello")
}
```

----------------------------------------

TITLE: Package with Import Comment
DESCRIPTION: Go source file demonstrating package declaration with an import comment
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_find.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package x // import "x"
```

----------------------------------------

TITLE: Git Repository Initialization and Initial Commit
DESCRIPTION: Initializes a new Git repository and creates the first commit with go.mod and tagtests.go files.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/tagtests.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
git init

git add go.mod tagtests.go
git commit -m 'create module tagtests'
git branch -m master
git branch b
```

----------------------------------------

TITLE: Defining System Call Constants for Darwin ARM64 (CGO)
DESCRIPTION: This snippet defines a series of constants used in system calls for the Darwin ARM64 architecture. These constants include file descriptor flags, I/O control flags, network interface flags, and more. They are essential for low-level system programming on this platform.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_149

LANGUAGE: Go
CODE:
```
const EV_FLAG1 ideal-int
const EV_ONESHOT = 16
const EV_ONESHOT ideal-int
const EV_OOBAND = 8192
const EV_OOBAND ideal-int
const EV_POLL = 4096
const EV_POLL ideal-int
const EV_RECEIPT = 64
const EV_RECEIPT ideal-int
const EV_SYSFLAGS = 61440
const EV_SYSFLAGS ideal-int
const EWOULDBLOCK = 35
const EXDEV = 18
const EXTA = 19200
const EXTA ideal-int
const EXTB = 38400
const EXTB ideal-int
const EXTPROC = 2048
const EXTPROC ideal-int
const FD_CLOEXEC = 1
const FD_CLOEXEC ideal-int
const FD_SETSIZE = 1024
const FD_SETSIZE ideal-int
const FLUSHO = 8388608
const FLUSHO ideal-int
const F_ADDFILESIGS = 61
const F_ADDFILESIGS ideal-int
const F_ADDSIGS = 59
const F_ADDSIGS ideal-int
const F_ALLOCATEALL = 4
const F_ALLOCATEALL ideal-int
const F_ALLOCATECONTIG = 2
const F_ALLOCATECONTIG ideal-int
const F_CHKCLEAN = 41
const F_CHKCLEAN ideal-int
const F_DUPFD = 0
const F_DUPFD ideal-int
const F_DUPFD_CLOEXEC = 67
const F_DUPFD_CLOEXEC ideal-int
// ... (truncated for brevity)
const IFT_ARCNETPLUS = 36
const IFT_ARCNETPLUS ideal-int
const IFT_ATM = 37
const IFT_ATM ideal-int
```

----------------------------------------

TITLE: Testing Script for Loopvar Experiment
DESCRIPTION: Shell script used to test the loopvar experiment with inlining. It builds the code with specific flags to enable loop variable reporting and checks for expected error messages in the stderr output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_shorten_pkg.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
env GOEXPERIMENT=loopvar
go build -gcflags=inlines/a=-d=loopvar=2 .
stderr ^\.[\\/]b[\\/]b\.go:12:6:.*loop.inlined.into.a[\\/]a\.go
stderr ^\.[\\/]b[\\/]b\.go:12:9:.*loop.inlined.into.a[\\/]a\.go
```

----------------------------------------

TITLE: Module D Package
DESCRIPTION: Base module d implementation with no dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.com/d

go 1.15
```

----------------------------------------

TITLE: Error Constants for Darwin ARM64
DESCRIPTION: System error codes and their corresponding numeric values for error handling in system calls
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_57

LANGUAGE: Go
CODE:
```
const (
    E2BIG = 7
    EACCES = 13
    EADDRINUSE = 48
    EADDRNOTAVAIL = 49
    EAFNOSUPPORT = 47
    EAGAIN = 35
    // ... other error constants
)
```

----------------------------------------

TITLE: Defining Memory Protection Constants in Go for Darwin ARM64 CGO
DESCRIPTION: This snippet defines constants for memory protection flags used in system calls on Darwin ARM64 with CGO. These constants are used to specify memory access permissions.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_170

LANGUAGE: Go
CODE:
```
const PROT_EXEC = 4
const PROT_EXEC ideal-int
const PROT_NONE = 0
const PROT_NONE ideal-int
const PROT_READ = 1
const PROT_READ ideal-int
const PROT_WRITE = 2
const PROT_WRITE ideal-int
```

----------------------------------------

TITLE: Testing Preservation of Unsorted Requirements
DESCRIPTION: Verifies that the go command doesn't automatically sort requirements when running regular commands like 'go list'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
cp go.mod.unsorted go.mod
go list all
cmp go.mod go.mod.unsorted
```

----------------------------------------

TITLE: Defining Priority and Protection Constants in Go for NetBSD ARM64
DESCRIPTION: This snippet defines priority and memory protection constants for NetBSD ARM64. These constants are used in process management, memory mapping, and I/O scheduling operations through the syscall package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_48

LANGUAGE: Go
CODE:
```
const PRI_IOFLUSH = 124
const PRIO_PGRP = 1
const PRIO_PROCESS = 0
const PRIO_USER = 2
const PROT_EXEC = 4
const PROT_NONE = 0
const PROT_READ = 1
const PROT_WRITE = 2
```

----------------------------------------

TITLE: Testing Vendor Mode with go list
DESCRIPTION: Demonstrates how 'go mod vendor' affects the output of 'go list' commands when using '-mod=vendor'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_6

LANGUAGE: Bash
CODE:
```
go mod vendor

go list -f $PKGFMT -mod=vendor all

go list -test -f $PKGFMT -mod=vendor all

rm vendor
```

----------------------------------------

TITLE: Reference Go File for Formatting Comparison
DESCRIPTION: This Go file serves as a reference for the expected formatting output. It's used to compare against the formatted version of xnofmt.go to ensure 'go fmt' behaves as expected.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed_fmt.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package p

import "embed"

//go:embed missing.txt
var X embed.FS
```

----------------------------------------

TITLE: Testing Example Output with Println
DESCRIPTION: Go test example that uses fmt.Println to generate output with platform's default line endings to verify correct handling during testing.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_crlf_example.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
func Example_println() {
	fmt.Println("foo")
	fmt.Println("bar")
	// Output:
	// foo
	// bar
}
```

----------------------------------------

TITLE: Setting format template for go list command output
DESCRIPTION: Defines an environment variable FMT containing a template for formatting the output of 'go list' commands, showing path, error, version, and versions data.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_versions.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env FMT='{{.Path}}{{with .Error}}: {{printf "%q" .Err}}{{end}} {{printf "%q" .Version}}{{with .Versions}} {{.}}{{end}}'
```

----------------------------------------

TITLE: Go Test Package Importing golang.org/x/internal
DESCRIPTION: Defines a Go test file for the `useinternal` package (using `_test` naming convention). It also imports `golang.org/x/internal/subtle` and includes a basic test function `Test`. This is used to verify internal imports within test code.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_14

LANGUAGE: go
CODE:
```
-- useinternal_test.go --
package useinternal_test
import (
	"testing"
	_ "golang.org/x/internal/subtle"
)

func Test(*testing.T) {}
```

----------------------------------------

TITLE: Module B v0.1.0 Definition
DESCRIPTION: Module definition and implementation for example.net/b v0.1.0
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_wild.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module example.net/b

go 1.16
```

LANGUAGE: go
CODE:
```
package b
```

----------------------------------------

TITLE: Correct Modules.txt File
DESCRIPTION: Defines a correct modules.txt file that includes all required packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_vendor.txt#2025-04-22_snippet_5

LANGUAGE: Text
CODE:
```
# foo.com/internal/bar v1.0.0
## explicit
foo.com/internal/bar/a
foo.com/internal/bar/b
```

----------------------------------------

TITLE: Defining Terminal Control Constants for Darwin ARM64 in Go
DESCRIPTION: This snippet defines constants related to terminal control for the Darwin ARM64 platform. These constants are used for configuring terminal behavior and input processing.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_72

LANGUAGE: Go
CODE:
```
const ISIG = 128
const ISTRIP = 32
const IUTF8 = 16384
const IXANY = 2048
```

----------------------------------------

TITLE: Package Q Test File (m2/q/q_test.go)
DESCRIPTION: Test file for package q that imports the generics package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_issue56222.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package q

import _ "example.com/generics"
```

----------------------------------------

TITLE: Testing Go Experiment Environment Variable in Bash
DESCRIPTION: A bash script that tests the GOEXPERIMENT environment variable with fieldtrack being disabled and enabled, verifying that the correct build files are selected.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_tag_goexperiment.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# Reset all experiments so fieldtrack is definitely off.
env GOEXPERIMENT=none
go run m
stderr 'fieldtrack off'
# Turn fieldtrack on.
env GOEXPERIMENT=none,fieldtrack
go run m
stderr 'fieldtrack on'
```

----------------------------------------

TITLE: Corrected Go Module Checksums File (go.sum.after-tidy)
DESCRIPTION: This file represents the expected state of the `go.sum` file after executing `go mod tidy`. It contains the valid cryptographic checksums (h1 hashes) for all direct and indirect dependencies specified in `go.mod` and used by the project, including the corrected entry for `rsc.io/quote v1.5.2`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/malformed_gosum_issue62345.txt#2025-04-22_snippet_4

LANGUAGE: gosum
CODE:
```
-- go.sum.after-tidy --
golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:pvCbr/wm8HzDD3fVywevekufpn6tCGPY3spdHeZJEsw=
golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
rsc.io/quote v1.5.2 h1:3fEykkD9k7lYzXqCYrwGAf7iNhbk4yCjHmKBN9td4L0=
rsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=
rsc.io/sampler v1.3.0 h1:HLGR/BgEtI3r0uymSP/nl2uPLsUnNJX8toRyhfpBTII=
rsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=
rsc.io/testonly v1.0.0 h1:K/VWHdO+Jv7woUXG0GzVNx1czBXUt3Ib1deaMn+xk64=
rsc.io/testonly v1.0.0/go.mod h1:OqmGbIFOcF+XrFReLOGZ6BhMM7uMBiQwZsyNmh74SzY=
```

----------------------------------------

TITLE: Expected Output on Linux
DESCRIPTION: Shows the expected output of the 'go env' command on Linux, demonstrating how special characters are escaped in GOFLAGS.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_sanitize.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
[GOOS:linux] stdout 'GOFLAGS=''\$\(echo ''\\''''cc"''\\''''; echo ''\\''''OOPS="oops''\\''''\)'
```

----------------------------------------

TITLE: Building BoringCrypto Module for Linux ARM64
DESCRIPTION: Command to build the BoringCrypto module for Linux ARM64 architecture, generating syso/goboringcrypto_linux_arm64.syso file. Requires Docker and QEMU support for cross-platform building on x86 systems.
SOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/boring/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
GOARCH=arm64 ./build.sh
```

----------------------------------------

TITLE: Testing Internal Import within golang.org/x
DESCRIPTION: Sets the current module path to `golang.org/x/anything` using `go mod edit` and then runs `go get .` to resolve dependencies. This tests the scenario where a module within the `golang.org/x` hierarchy imports `golang.org/x/internal`, which should be allowed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# golang.org/x/internal should be importable from other golang.org/x modules.
go mod edit -module=golang.org/x/anything
go get .
```

----------------------------------------

TITLE: Implementing a Simple Filter Factory Function in Go
DESCRIPTION: This Go code defines a package named 'filter'. It contains a single function `New` which acts as a factory. `New` returns another function that accepts an error as input and always returns `false`. This structure might be a placeholder or a simplified example for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_race_issue56370.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- filter/filter.go --

package filter

func New() func(error) bool {
	return func(error) bool {
		return false
	}
}
```

----------------------------------------

TITLE: Defining Test Package with Unused Import
DESCRIPTION: Creates a test package with an unused import, used to verify that unused ambiguous imports don't cause errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
package importy
import _ "example.com/a/y"
```

----------------------------------------

TITLE: Verifying `go list -m` Rejects Module Paths with '+' (Shell)
DESCRIPTION: This shell snippet tests if `go list -m` correctly rejects module paths containing the '+' character. It attempts to list versions for a module path `example.net/bad++` which is intentionally invalid due to the '+'. The `!` prefix indicates the command is expected to fail, and the `stderr` directive checks for the specific error message confirming the rejection due to the invalid character.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path_plus.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# 'go list -m' rejects module paths with pluses.
! go list -versions -m 'example.net/bad++'
stderr '^go: malformed module path "example.net/bad\+\+": invalid char ''\+''$'
```

----------------------------------------

TITLE: Setting Up Environment for 'latest' Query (Pseudo-versions Only)
DESCRIPTION: Configures the environment for testing 'latest' version resolution when only pseudo-versions are available in the proxy. It sets the `GOPROXY` environment variable to point to a different local directory (`$WORK/tinyproxy`) which contains only pseudo-versions for a different test module ('dmitri.shuralyov.com/test/modtest3').
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
env GOPROXY=file:///$WORK/tinyproxy
```

----------------------------------------

TITLE: Package x with No Implementation
DESCRIPTION: Introduces a package named x meant for structuring tests or further implementations. It currently does not contain any code.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_multiple_mains.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package x
```

----------------------------------------

TITLE: Buggy Test Implementation in Go
DESCRIPTION: A test file that intentionally fails with a fatal error message. This is likely used for testing error handling or demonstrating test failures in the package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162816-fe488b867524.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package buggy

import "testing"

func Test(t *testing.T) {
	t.Fatal("buggy!")
}
```

----------------------------------------

TITLE: JSON overlay configuration for path mapping
DESCRIPTION: A JSON configuration file that maps files in the overlay directory structure. It's used with the -overlay flag to test path handling in the cgo build process.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_cgo.txt#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
{
	"Replace": {
		"hello_overlay/hello.go": "../../overlay/hello.go"
	}
}
```

----------------------------------------

TITLE: Go Module without Go Version
DESCRIPTION: Module definition without go version directive but with dependencies
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_readonly.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module m

require (
	rsc.io/quote v1.5.2
	rsc.io/testonly v1.0.0 // indirect
)
```

----------------------------------------

TITLE: Defining BPF Constants in Go for Darwin ARM64 CGO
DESCRIPTION: This snippet defines constants related to Berkeley Packet Filter (BPF) operations for the syscall package on Darwin ARM64 with CGO. These constants are used for packet filtering and network operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_138

LANGUAGE: Go
CODE:
```
const BPF_H ideal-int
const BPF_IMM = 0
const BPF_IND = 64
const BPF_JA = 0
const BPF_JEQ = 16
const BPF_JGE = 48
const BPF_JGT = 32
const BPF_JMP = 5
const BPF_JSET = 64
const BPF_K = 0
const BPF_LD = 0
const BPF_LDX = 1
const BPF_LEN = 128
const BPF_LSH = 96
const BPF_MAJOR_VERSION = 1
const BPF_MAXBUFSIZE = 524288
const BPF_MAXINSNS = 512
const BPF_MEM = 96
const BPF_MEMWORDS = 16
const BPF_MINBUFSIZE = 32
const BPF_MINOR_VERSION = 1
const BPF_MISC = 7
const BPF_MSH = 160
const BPF_MUL = 32
const BPF_NEG = 128
const BPF_OR = 64
const BPF_RELEASE = 199606
const BPF_RET = 6
const BPF_RSH = 112
const BPF_ST = 2
const BPF_STX = 3
const BPF_SUB = 16
const BPF_TAX = 0
const BPF_TXA = 128
const BPF_W = 0
const BPF_X = 8
```

----------------------------------------

TITLE: Defining an Empty Go Package - Go
DESCRIPTION: Establishes a minimal Go package named 'incompatible'. This file contains solely a package declaration, with no types, functions, or variables. It enables builds to recognize and import the package but provides no functionality. There are no dependencies or configuration parameters.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_incompatible_v2.0.0+incompatible.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package incompatible
```

----------------------------------------

TITLE: Empty Go Package Definition
DESCRIPTION: An empty Go package file that defines a package named 'm'. This is a minimal Go source file used in the staleness test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_stale.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package m
```

----------------------------------------

TITLE: Testing 'go install' Command Outside Module
DESCRIPTION: Checks the behavior of 'go install' when run outside a module, including success with explicit versions and failure for unresolved packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_8

LANGUAGE: shell
CODE:
```
rm $GOPATH/bin
go install example.com/printversion@v0.1.0
exists $GOPATH/bin/printversion$GOEXE

! go install example.com/printversion
stderr '^go: ''go install'' requires a version when current directory is not in a module\n\tTry ''go install example.com/printversion@latest'' to install the latest version$'

! go install ./needmod/needmod.go
stderr 'needmod[/\\]needmod.go:10:2: no required module provides package example.com/version: go.mod file not found in current directory or any parent directory; see ''go help modules''$'
```

----------------------------------------

TITLE: Testing Go Version Command with GOROOT Binary
DESCRIPTION: Builds a binary from GOROOT/src/cmd and checks its version information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_6

LANGUAGE: Shell
CODE:
```
go build -o test2json.exe cmd/test2json
go version -m test2json.exe
stdout -buildmode=exe
stdout '^test2json.exe: .+'
stdout '^\tpath\tcmd/test2json$'
! stdout 'mod[^e]'
```

----------------------------------------

TITLE: Storing Version Metadata in JSON
DESCRIPTION: This snippet contains JSON data, likely from a `.info` file associated with the module version. It stores the version string "v1.0.0" under the key "Version", commonly used for metadata purposes in the Go ecosystem.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_version_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v1.0.0"}
```

----------------------------------------

TITLE: Defining Toolchain Version Information in JSON
DESCRIPTION: JSON object containing the version information for the Go toolchain. This is likely used for internal version tracking and management.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.5.linux-amd64.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v0.0.1-go1.18.5.linux-amd64"}
```

----------------------------------------

TITLE: Module Version Information in .info File
DESCRIPTION: JSON configuration specifying the version of the module as v2.0.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/gopkg.in_dummy.v2-unstable_v2.0.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v2.0.0"}
```

----------------------------------------

TITLE: Archive Package Updates (Go)
DESCRIPTION: Defines new constants and type updates for the archive/tar package including TypeGNUSparse constant and Xattrs field addition to Header struct.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
const TypeGNUSparse = 83
type Header struct {
    Xattrs map[string]string
}
```

----------------------------------------

TITLE: Gofmt Output Format Example
DESCRIPTION: Shows how the text appears when processed through gofmt formatting.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code2.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
Text.

	A tab-indented
	(no, not eight-space indented)
	code block and haiku.

More text.
```

----------------------------------------

TITLE: Module JSON Info
DESCRIPTION: JSON file containing module version information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile2_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
{"Version":"v1.0.0"}
```

----------------------------------------

TITLE: Testing Vendor Directory Resolution
DESCRIPTION: Tests how vendor directories are handled under different -mod settings.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
# golang.org/issue/32921: vendor directories should only be accepted as directories
# if the directory would actually be used to load the package.
! go list ./vendor/nonexist
stderr '^no Go files in '$WORK'[/\\]gopath[/\\]src[/\\]dir[/\\]vendor[/\\]nonexist$'

! go list ./vendor/pkg
stderr '^without -mod=vendor, directory '$WORK'[/\\]gopath[/\\]src[/\\]dir[/\\]vendor[/\\]pkg has no package path$'

! go list -mod=vendor ./vendor/nonexist
stderr '^no Go files in '$WORK'[/\\]gopath[/\\]src[/\\]dir[/\\]vendor[/\\]nonexist$'

! go list -mod=vendor ./vendor/unlisted
stderr '^directory '$WORK'[/\\]gopath[/\\]src[/\\]dir[/\\]vendor[/\\]unlisted is not a package listed in vendor/modules.txt$'

go list -mod=vendor ./vendor/pkg
stdout '^pkg$'
```

----------------------------------------

TITLE: Specifying Go Module Version Metadata - JSON
DESCRIPTION: Provides metadata indicating the version ('v1.0.0') of the module 'example.com/newcycle/a'. Stored in a standard Go module .info file, this is used by tooling for version resolution, proxy caching, and reproducible builds. Inputs are the semantic version string, with the output being a JSON object; there are no dependencies. Typically auto-generated and not edited manually.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_newcycle_a_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{\"Version\":\"v1.0.0\"}
```

----------------------------------------

TITLE: Empty Go Package Declaration in Y.go
DESCRIPTION: A Go source file with an uppercase filename (Y.go) declaring package x without any content.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile4_v1.0.0.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package x
```

----------------------------------------

TITLE: Non-Windows I/O Error Simulation Implementation
DESCRIPTION: Platform-specific code for non-Windows systems that sends garbage data to the fuzzing coordinator. It writes invalid data to file descriptor 4 to simulate communication errors.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_io_error.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
// +build !windows

package io_error

import (
	"os"
	"testing"
)

func sendGarbageToCoordinator(tb testing.TB) {
	f := os.NewFile(4, "fuzz_out")
	if _, err := f.Write([]byte("!!"))); err != nil {
		tb.Fatalf("writing fuzz_out: %v", err)
	}
}
```

----------------------------------------

TITLE: Simple Go Main Package
DESCRIPTION: A minimal Go program with an empty main function. Used as a test target for the build commands in the test script.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_output.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Event Filter Constants in Go Syscall Package for Darwin ARM64
DESCRIPTION: Event filter constants used with kqueue/kevent system calls. These identify the different types of events that can be monitored, such as file descriptor readiness, process events, signals, and timers.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_147

LANGUAGE: Go
CODE:
```
const EVFILT_AIO = -3
const EVFILT_AIO ideal-int
const EVFILT_FS = -9
const EVFILT_FS ideal-int
const EVFILT_MACHPORT = -8
const EVFILT_MACHPORT ideal-int
const EVFILT_PROC = -5
const EVFILT_PROC ideal-int
const EVFILT_READ = -1
const EVFILT_READ ideal-int
const EVFILT_SIGNAL = -6
const EVFILT_SIGNAL ideal-int
const EVFILT_SYSCOUNT = 14
const EVFILT_SYSCOUNT ideal-int
const EVFILT_THREADMARKER = 14
const EVFILT_THREADMARKER ideal-int
const EVFILT_TIMER = -7
const EVFILT_TIMER ideal-int
const EVFILT_USER = -10
const EVFILT_USER ideal-int
const EVFILT_VM = -12
const EVFILT_VM ideal-int
const EVFILT_VNODE = -4
const EVFILT_VNODE ideal-int
const EVFILT_WRITE = -2
const EVFILT_WRITE ideal-int
```

----------------------------------------

TITLE: Second Main Package Definition
DESCRIPTION: Defines another minimal main package with an empty main() function. Used alongside main_one to test multiple main package build rejection.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_exe.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Defining System Call Constants for NetBSD ARM64 CGO in Go
DESCRIPTION: This snippet defines system call constants for the NetBSD ARM64 platform when using CGO. It includes constants for various system operations such as memory management, process control, file operations, and inter-process communication.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_67

LANGUAGE: Go
CODE:
```
const SYS_MUNLOCKALL = 243
const SYS_MUNLOCKALL ideal-int
const SYS_MUNLOCK ideal-int
const SYS_MUNMAP = 73
const SYS_MUNMAP ideal-int
const SYS_NANOSLEEP = 430
const SYS_NANOSLEEP ideal-int
// ... (truncated for brevity)
const SYS_SHUTDOWN = 134
const SYS_SHUTDOWN ideal-int
const SYS___SIGACTION_SIGTRAMP = 340
```

----------------------------------------

TITLE: Checking Git Repository Log
DESCRIPTION: Checks the Git log and compares it with the expected output to verify the repository setup was successful.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-old.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
git log --oneline --decorate=short
cmp stdout .git-log
```

----------------------------------------

TITLE: Testing Go Module Server Response Truncation and Error Handling
DESCRIPTION: A series of commands to test how Go handles module server responses in different edge cases. Tests verify truncation of responses with too many lines, truncation of very long single-line responses, and proper propagation of error messages from servers using the 'mod' protocol.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_proxy_errors.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on
env GOSUMDB=off
env GOPROXY=direct

# Server responses should be truncated to some reasonable number of lines.
# (For now, exactly eight.)
! go list -m vcs-test.golang.org/auth/ormanylines@latest
stderr '\tserver response:\n(.|\n)*\tline 8\n\t\[Truncated: too many lines.\]$'

# Server responses should be truncated to some reasonable number of characters.
! go list -m vcs-test.golang.org/auth/oronelongline@latest
! stderr 'blah{40}'
stderr '\tserver response: \[Truncated: too long\.\]$'

# Responses from servers using the 'mod' protocol should be propagated.
! go list -m vcs-test.golang.org/go/modauth404@latest
stderr '\tserver response: File\? What file\?'
```

----------------------------------------

TITLE: Testing Go Get Command for Import Errors
DESCRIPTION: This snippet tests the 'go get' command to check error reporting for malformed import paths. It expects the command to fail and output an error message with the import stack.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_info_err.txt#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
! go get ./main
stderr '^go: m/main imports\n\tm/bad imports\n\t🐧.example.com/string: malformed import path "🐧.example.com/string": invalid char ''🐧''$'
```

----------------------------------------

TITLE: Test Script Commands
DESCRIPTION: Shell commands for testing different GOPATH manipulation scenarios including building and executing the test program.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cd_gopath_different.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
env GO111MODULE=off
go build run_go.go

exec ./run_go$GOEXE $GOPATH/src/my.pkg/main $GOPATH IDENTITY build -o $WORK/tmp/a.exe -ldflags -X=my.pkg.Text=linkXworked
exec $WORK/tmp/a.exe
stderr 'linkXworked'
rm $WORK/tmp/a.exe
```

----------------------------------------

TITLE: Markdown Output Format
DESCRIPTION: Markdown-formatted version of the text showing standard markdown list formatting and spacing.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list6.txt#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
Text.

  - List immediately after.
  - Another.

More text.

  - List after blank line.
  - Another.

Even more text.

  - List immediately after.

  - Blank line between items.

Yet more text.

  - Another list after blank line.

  - Blank line between items.

Still more text.

  - One list item.

    Multiple paragraphs.



```

----------------------------------------

TITLE: Verifying No Non-Standard Packages in GOROOT/src using Go List in Shell
DESCRIPTION: Changes the current directory to the Go standard library source (`$GOROOT/src`) and uses `go list` with a custom format (`-f`) to find any packages recursively (`./...`) that are *not* marked as standard (`{{if not .Standard}}`). The command then asserts (`! stdout .`) that no such non-standard packages are found directly within `$GOROOT/src`, confirming its standard library contents.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_std.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# Listing GOROOT should only find standard packages.
cd $GOROOT/src
go list -f '{{if not .Standard}}{{.ImportPath}}{{end}}' ./...
! stdout .
```

----------------------------------------

TITLE: Checking Compiled Go Files
DESCRIPTION: Shell command to list compiled Go files in the current directory, verifying that foo.s is not included in output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiled_files_issue28749.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list -compiled -f {{.CompiledGoFiles}} .
! stdout 'foo.s'
```

----------------------------------------

TITLE: Minimal GOCACHEPROG Implementation
DESCRIPTION: This Go program implements a basic GOCACHEPROG that responds to the 'close' command. It encodes known commands to stdout and decodes an empty response from stdin.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cacheprog_issue70848.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
// This is a minimal GOCACHEPROG program that doesn't respond to close.
package main

import (
    "encoding/json"
    "os"
)

func main() {
    json.NewEncoder(os.Stdout).Encode(map[string][]string{"KnownCommands": {"close"}})
    var res struct{}
    json.NewDecoder(os.Stdin).Decode(&res)
}
```

----------------------------------------

TITLE: Executing Test Files in Specific Order
DESCRIPTION: Shell commands demonstrating how test file order affects execution. Shows both failing and passing test scenarios based on file ordering.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_source_order.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go test example2_test.go example1_test.go
go test example1_test.go example2_test.go
```

----------------------------------------

TITLE: Mocking Go Executable with Shell Script
DESCRIPTION: A shell script that simulates the 'go' command by echoing a version string. This is used for testing environments where the actual Go toolchain isn't needed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.solaris-amd64.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
#!/bin/sh
echo go1.999testmod here!
```

----------------------------------------

TITLE: RDS Package Declaration
DESCRIPTION: Empty RDS package declaration file used as a dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue14613.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package rds
```

----------------------------------------

TITLE: Package zz Definition
DESCRIPTION: Empty package declaration in mixed-case directory path
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile5_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package zz
```

----------------------------------------

TITLE: Setting Go Module Format Environment Variable
DESCRIPTION: Sets the MODFMT environment variable to format module information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env MODFMT='{{with .Module}}{{.Path}} {{.Version}}{{end}}'
```

----------------------------------------

TITLE: Z1 Test Implementation
DESCRIPTION: Test file for package z1 with a basic test function and z3 package import.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gcflags_patterns.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package z1_test
import "testing"
import _ "z3"
func Test(t *testing.T) {}
```

----------------------------------------

TITLE: Toolchain Version Information in JSON
DESCRIPTION: JSON metadata specifying the version of the toolchain module as v0.0.1-go1.999testmod.linux-mips64x.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-mips64x.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v0.0.1-go1.999testmod.linux-mips64x"}
```

----------------------------------------

TITLE: Testing Word Boundaries with \b in Go Regexps
DESCRIPTION: Tests the behavior of the \b assertion which matches word boundaries. These tests verify how \b behaves with different character contexts.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_20

LANGUAGE: regexp
CODE:
```
\bx\b
```

LANGUAGE: regexp
CODE:
```
^(?:\bx\b)$
```

LANGUAGE: regexp
CODE:
```
^(?:\bx\b)
```

LANGUAGE: regexp
CODE:
```
(?:\bx\b)$
```

----------------------------------------

TITLE: OpenBSD 386 Syscall Constants and Structures
DESCRIPTION: System call numbers, network interface constants, and data structures for OpenBSD on 386 architecture, including time-related functions, file operations, and network interface management.
SOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_6

LANGUAGE: go
CODE:
```
const BIOCGRTIMEOUT = 1074283118
const BIOCSRTIMEOUT = 2148024941
const ImplementsGetwd = false
const RTF_FMASK = 63496
const RTM_VERSION = 4
const SIOCBRDGDADDR = 2150132039
const SIOCBRDGGPARAM = 3224922456
const SIOCBRDGSADDR = 3223873860
const SYS_CLOCK_GETRES = 234
const SYS_CLOCK_GETTIME = 232
const SYS_CLOCK_SETTIME = 233
const SYS_FHSTATFS = 309
const SYS_FSTAT = 292
const SYS_FSTATAT = 316
const SYS_FSTATFS = 308
const SYS_FUTIMENS = 327
const SYS_FUTIMES = 206
const SYS_GETDIRENTRIES = 312
const SYS_GETFSSTAT = 306
const SYS_GETITIMER = 86
const SYS_GETRUSAGE = 117
const SYS_GETTIMEOFDAY = 116
const SYS_KEVENT = 270
const SYS_KILL = 37
const SYS_LSTAT = 293
const SYS_NANOSLEEP = 240
const SYS_SELECT = 93
const SYS_SETITIMER = 83
const SYS_SETTIMEOFDAY = 122
const SYS_STAT = 291
const SYS_STATFS = 307
const SYS_UTIMENSAT = 326
const SYS_UTIMES = 138
const SYS_WAIT4 = 7
const SYS___THRSLEEP = 300
const SizeofIfData = 208
const SizeofIfMsghdr = 232
const SizeofRtMetrics = 48
const SizeofRtMsghdr = 88
const TIOCGTSTAMP = 1074295899

type Dirent struct {
    Fileno uint32
    // other fields not shown
}

type FdSet struct {
    Bits [32]int32
}

type Kevent_t struct {
    Data int32
    // other fields not shown
}

type Mclpool struct {
    Grown uint32
    // other fields not shown
}

type RtMetrics struct {
    Expire uint32
    // other fields not shown
}

type Stat_t struct {
    Ino uint32
    Lspare0 int32
    Lspare1 int32
    Qspare [2]int64
    // other fields not shown
}

type Statfs_t struct {
    F_ctime uint32
    F_spare [3]uint32
    // other fields not shown
}

type Timespec struct {
    Sec int32
    // other fields not shown
}

type Timeval struct {
    Sec int32
    // other fields not shown
}
```

----------------------------------------

TITLE: Go Package with Invalid Absolute Path Import
DESCRIPTION: A Go source file that intentionally includes an invalid import statement using an absolute path '/'. This demonstrates the problematic import that should trigger an error rather than an infinite loop.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_issue42891.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package m

import "/"
```

----------------------------------------

TITLE: Main Module Source File with Import
DESCRIPTION: The main package file that imports the module 'example.com/a', which triggers the dependency chain for testing replacement directives.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package foo
import _ "example.com/a"
```

----------------------------------------

TITLE: Importing Text Package in Go Subpackage
DESCRIPTION: This Go file, located in a subpackage, imports the 'golang.org/x/text/language' package. It's used to test module resolution and package importing in subpackages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_symlink.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package issue

import _ "golang.org/x/text/language"
```

----------------------------------------

TITLE: Main Package with Imports
DESCRIPTION: Defines the main package 'm' with blank imports of two modules.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_added.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package m

import (
	_ "example.net/added"
	_ "example.net/lazy"
)
```

----------------------------------------

TITLE: Basic Go Command with Main Function
DESCRIPTION: A minimal Go executable source file with an empty main function. Used to test staleness detection for executable programs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_rebuild_removed.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package main
func main() {}
```

----------------------------------------

TITLE: Defining Termios struct for NetBSD ARM64 in syscall package
DESCRIPTION: Definition of the Termios struct in the syscall package for NetBSD ARM64 architecture. This struct is used for terminal I/O interfaces, containing control flags and settings for terminal devices.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_167

LANGUAGE: go
CODE:
```
type Termios struct {
	Iflag uint32
	Oflag uint32
	Cflag uint32
	Lflag uint32
	Cc [20]uint8
	Ispeed int32
	Ospeed int32
}
```

----------------------------------------

TITLE: Terminal Configuration Struct for darwin-arm64
DESCRIPTION: Definition of the Termios struct used for terminal I/O configuration on darwin-arm64 platforms, controlling terminal attributes like input/output processing and line discipline.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_136

LANGUAGE: go
CODE:
```
type Termios struct {
	Iflag uint64
	Oflag uint64
	Cflag uint64
	Lflag uint64
	Cc [20]uint8
	Ispeed uint64
	Ospeed uint64
	Pad_cgo_0 [4]uint8
}
```

----------------------------------------

TITLE: Updating Unicode version constant in unicode package
DESCRIPTION: Sets the Unicode version supported by the unicode package to 10.0.0. This constant indicates which Unicode standard version is implemented by the package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_15

LANGUAGE: go
CODE:
```
pkg unicode, const Version = "10.0.0"
```

----------------------------------------

TITLE: Gofmt Output Format
DESCRIPTION: Go-formatted version of the text with standardized indentation and spacing for lists and paragraphs.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list6.txt#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
Text.
  - List immediately after.
  - Another.

More text.

  - List after blank line.
  - Another.

Even more text.

  - List immediately after.

  - Blank line between items.

Yet more text.

  - Another list after blank line.

  - Blank line between items.

Still more text.

  - One list item.

    Multiple paragraphs.

```

----------------------------------------

TITLE: Testing Wildcard Matching with Mixed ASCII and Unicode Characters
DESCRIPTION: Tests matching patterns with '...' against '.本.' string that contains both ASCII and Unicode characters. Shows match positions across different pattern configurations.
SOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_29

LANGUAGE: go
CODE:
```
"^...$"
-;-;-;-
0-5;0-5;0-5;0-5
"^(?:^...$)$"
-;-;-;-
0-5;0-5;0-5;0-5
"^(?:^...$)"
-;-;-;-
0-5;0-5;0-5;0-5
"(?:^...$)$"
-;-;-;-
0-5;0-5;0-5;0-5
```

----------------------------------------

TITLE: Testing Internal Import within golang.org/x Tests
DESCRIPTION: Runs `go test` within the `golang.org/x/anything` module context. This verifies that test files within a `golang.org/x` module can also successfully import `golang.org/x/internal`. The expected output is `PASS`.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
# ...and their tests...
go test
stdout PASS
```

----------------------------------------

TITLE: Overlay JSON Configuration
DESCRIPTION: A JSON configuration file for Go's overlay system that maps a file path in an overlay directory to an actual file path. This allows building code from virtual locations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{ "Replace": { "overlaydir/paths.go": "paths.go" } }
```

----------------------------------------

TITLE: Adding new OSABI constants to debug/elf package in Go
DESCRIPTION: Introduces new OSABI (Operating System ABI) constants for AROS, CloudABI, and FenixOS in the debug/elf package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
const ELFOSABI_AROS = 15
const ELFOSABI_AROS OSABI
const ELFOSABI_CLOUDABI = 17
const ELFOSABI_CLOUDABI OSABI
const ELFOSABI_FENIXOS = 16
const ELFOSABI_FENIXOS OSABI
```

----------------------------------------

TITLE: Defining token, io, and log package elements in Go
DESCRIPTION: Declarations for File.LineStart method in go/token, StringWriter interface in io, and Logger.Writer method in log.
SOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
method (*File) LineStart(int) Pos
type StringWriter interface { WriteString }
type StringWriter interface, WriteString(string) (int, error)
method (*Logger) Writer() io.Writer
```

----------------------------------------

TITLE: Package z Definition
DESCRIPTION: Empty package declaration in lowercase directory path
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile5_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package z
```

----------------------------------------

TITLE: Go package y implementation
DESCRIPTION: A basic Go package 'y' with no imports.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_why.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package y
```

----------------------------------------

TITLE: Running Go Version Command on Non-Go Binaries
DESCRIPTION: This snippet runs the 'go version -m' command on the current directory, which contains the copied non-Go binaries. It expects no output on stdout or stderr.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/go_version.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
go version -m .
! stdout .
! stderr .
```

----------------------------------------

TITLE: Bar Package Go Implementation
DESCRIPTION: Go package bar with function declarations and implementation of Bar2.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/trampoline_reuse_test.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package bar

func Bar()

func Bar2() {
}
```

----------------------------------------

TITLE: Go Module Definition
DESCRIPTION: Defines a Go module with version 1.700 requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_gomod_issue61455.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.com

go 1.700
```

----------------------------------------

TITLE: Running Go Tool Chain Tests with Bash
DESCRIPTION: Commands to run the Go tool chain and runtime tests. The first command runs all tests in the testdir, while the second allows running tests from specific files.
SOURCE: https://github.com/golang/go/blob/master/test/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
../bin/go test cmd/internal/testdir
```

LANGUAGE: bash
CODE:
```
../bin/go test cmd/internal/testdir -run='Test/(file1.go|file2.go|...)'
```

----------------------------------------

TITLE: Compiling C code and Creating Static Library (Shell)
DESCRIPTION: These shell commands compile C source files into object files and create a static library. `b/b.c` is compiled into `a/b.syso`, which will be automatically picked up by the Go linker when building package `a`. `b/lib.c` is compiled into `b/lib.o` and then archived into `a/libb.a`. Package `a` explicitly links against `libb.a` using `#cgo LDFLAGS`. This setup ensures that the `.syso` file depends on the `.a` file within the same package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
cc -c -o a/b.syso b/b.c
cc -c -o b/lib.o b/lib.c
exec ar rc a/libb.a b/lib.o
```

----------------------------------------

TITLE: Cyclic Dependency Package
DESCRIPTION: Demonstration of cyclic dependency between packages a and b.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_replace.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package cycle

import (
	_ "golang.org/issue/30166/a"
	_ "golang.org/issue/30166/b"
)
```

----------------------------------------

TITLE: Empty Go Package File
DESCRIPTION: An empty Go source file that only contains a package declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badmod_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package x
```

----------------------------------------

TITLE: Main Package with PGO Profile - b/b.go
DESCRIPTION: Defines a simple main package that imports two dependencies. This package has an associated default.pgo file for Profile-Guided Optimization.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package main
import _ "test/dep"
import _ "test/dep2"
func main() {}
```

----------------------------------------

TITLE: Implementing dependency module
DESCRIPTION: Defines an empty package m for the example.com/m dependency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_redundant_requirement.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package m
```

----------------------------------------

TITLE: Defining System Call Constants for NetBSD ARM64 with CGO
DESCRIPTION: This snippet defines system call constants used for making system calls on NetBSD ARM64 architecture. These constants are numerical identifiers for specific kernel operations like socket creation, file operations, and process management.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_68

LANGUAGE: Go
CODE:
```
const SYS___SIGACTION_SIGTRAMP ideal-int
const SYS_SIGQUEUEINFO = 245
const SYS_SIGQUEUEINFO ideal-int
const SYS___SIGTIMEDWAIT = 431
const SYS___SIGTIMEDWAIT ideal-int
const SYS_SOCKET = 394
const SYS_SOCKET ideal-int
const SYS_SOCKETPAIR = 135
const SYS_SOCKETPAIR ideal-int
const SYS_SSTK = 70
const SYS_SSTK ideal-int
const SYS_STAT = 439
const SYS_STAT ideal-int
const SYS_STATVFS1 = 357
const SYS_STATVFS1 ideal-int
const SYS_SWAPCTL = 271
const SYS_SWAPCTL ideal-int
const SYS_SYMLINK = 57
const SYS_SYMLINKAT = 470
const SYS_SYMLINKAT ideal-int
const SYS_SYMLINK ideal-int
const SYS_SYNC = 36
const SYS_SYNC ideal-int
const SYS_SYSARCH = 165
const SYS_SYSARCH ideal-int
const SYS___SYSCTL = 202
const SYS___SYSCTL ideal-int
const SYS_TIMER_CREATE = 235
const SYS_TIMER_CREATE ideal-int
const SYS_TIMER_DELETE = 236
const SYS_TIMER_DELETE ideal-int
const SYS_TIMER_GETOVERRUN = 239
const SYS_TIMER_GETOVERRUN ideal-int
const SYS_TIMER_GETTIME = 447
const SYS_TIMER_GETTIME ideal-int
const SYS_TIMER_SETTIME = 446
const SYS_TIMER_SETTIME ideal-int
const SYS_TRUNCATE = 200
const SYS_TRUNCATE ideal-int
const SYS_UMASK = 60
const SYS_UMASK ideal-int
const SYS_UNDELETE = 205
const SYS_UNDELETE ideal-int
const SYS_UNLINK = 10
const SYS_UNLINKAT = 471
const SYS_UNLINKAT ideal-int
const SYS_UNLINK ideal-int
const SYS_UNMOUNT = 22
const SYS_UNMOUNT ideal-int
const SYS_UTIMENSAT = 467
const SYS_UTIMENSAT ideal-int
const SYS_UTIMES = 420
const SYS_UTIMES ideal-int
const SYS_UTRACE = 306
const SYS_UTRACE ideal-int
const SYS_UUIDGEN = 355
const SYS_UUIDGEN ideal-int
const SYS_VADVISE = 72
const SYS_VADVISE ideal-int
const SYS_VFORK = 66
const SYS_VFORK ideal-int
const SYS_WAIT4 = 449
const SYS_WAIT4 ideal-int
const SYS_WRITE = 4
const SYS_WRITE ideal-int
const SYS_WRITEV = 121
const SYS_WRITEV ideal-int
```

----------------------------------------

TITLE: Package dir Implementation in Overlay
DESCRIPTION: Implementation of the dir package in the overlay that provides a PrintMessage function which outputs "hello". This is the final package in the import chain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package dir

import "fmt"

func PrintMessage() {
	fmt.Println("hello")
}
```

----------------------------------------

TITLE: Defining Error Code Constants for NetBSD ARM64
DESCRIPTION: These constants define system error codes used in NetBSD ARM64. They represent various error conditions that can occur during system calls and are returned to indicate the specific error that occurred.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_122

LANGUAGE: Go
CODE:
```
const E2BIG = 7
const EACCES = 13
const EADDRINUSE = 48
const EADDRNOTAVAIL = 49
const EAFNOSUPPORT = 47
const EAGAIN = 35
const EALREADY = 37
const EAUTH = 80
const EAUTH Errno
const EBADF = 9
const EBADMSG = 88
const EBADMSG Errno
const EBADRPC = 72
const EBADRPC Errno
const EBUSY = 16
const ECANCELED = 87
const ECHILD = 10
const ECHO = 8
const ECHOCTL = 64
const ECHOCTL ideal-int
const ECHOE = 2
const ECHOE ideal-int
const ECHO ideal-int
const ECHOK = 4
const ECHOKE = 1
const ECHOKE ideal-int
const ECHOK ideal-int
const ECHONL = 16
const ECHONL ideal-int
const ECHOPRT = 32
const ECHOPRT ideal-int
const ECONNABORTED = 53
const ECONNREFUSED = 61
const ECONNRESET = 54
const EDEADLK = 11
const EDESTADDRREQ = 39
const EDOM = 33
const EDQUOT = 69
```

----------------------------------------

TITLE: Module B Test Implementation
DESCRIPTION: Test file for package b that imports and uses module 'q'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package b

import "example.com/q"

func TestB() {
	q.PrintVersion()
}
```

----------------------------------------

TITLE: Testing Go Test Help Output
DESCRIPTION: Verifies the concise help output format for go test command, directing users to detailed help documentation
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/help.txt#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
! go test -h
stderr 'usage: go test'
stderr 'Run \'go help test\' and \'go help testflag\' for details.'
```

----------------------------------------

TITLE: Right Module Definition and Implementation
DESCRIPTION: Right module files including go.mod and conditional import implementations based on the mirror build tag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tagged_import_cycle.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com/right

go 1.14

require example.com/left v0.1.0

replace example.com/left v0.1.0 => ../left
```

LANGUAGE: go
CODE:
```
// +build !mirror

package right
```

LANGUAGE: go
CODE:
```
// +build mirror

package right

import _ "example.com/left"
```

----------------------------------------

TITLE: Memory Advisory Constants in Go for Darwin ARM64
DESCRIPTION: Constants for madvise() system call to advise the kernel about memory usage patterns. Includes flags for normal, random, sequential access patterns, and freeing memory.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_75

LANGUAGE: Go
CODE:
```
const MADV_CAN_REUSE = 9
const MADV_DONTNEED = 4
const MADV_FREE = 5
const MADV_FREE_REUSABLE = 7
const MADV_FREE_REUSE = 8
const MADV_NORMAL = 0
const MADV_RANDOM = 1
const MADV_SEQUENTIAL = 2
const MADV_WILLNEED = 3
const MADV_ZERO_WIRED_PAGES = 6
```

----------------------------------------

TITLE: Testing Go Fuzzing with Zero Minimization Time
DESCRIPTION: Tests that verify the behavior when fuzzminimizetime is set to zero (either as a duration or an iteration count). These tests confirm that minimization is properly disabled when the time is set to zero.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
# Test that fuzzminimizetime can be zero seconds, and minimization is disabled
! go test -fuzz=FuzzMinimizeZeroDurationSet -run=FuzzMinimizeZeroDurationSet -fuzztime=10000x -fuzzminimizetime=0s .
! stdout '^ok'
! stdout 'minimizing'
stdout 'there was an Error'
stdout FAIL

# Test that fuzzminimizetime can be zero times, and minimization is disabled
! go test -fuzz=FuzzMinimizeZeroLimitSet -run=FuzzMinimizeZeroLimitSet -fuzztime=10000x -fuzzminimizetime=0x .
! stdout '^ok'
! stdout 'minimizing'
stdout -count=1 'there was an Error'
stdout FAIL
```

----------------------------------------

TITLE: Testing cgo with Go Assembly Compatibility Script
DESCRIPTION: A shell test script that verifies a cgo package containing a Go assembly file fails to build with the correct error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_asm_error.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
[!cgo] skip

# Test that cgo package can't contain a go assembly file.

# Ensure the build fails and reports that the package has a Go assembly file.
! go build cgoasm
stderr 'package using cgo has Go assembly file'
```

----------------------------------------

TITLE: Testing go list with unknown module
DESCRIPTION: Executes 'go list -m' command with an unknown module and verifies the expected error output format without the --versions flag.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_versions.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
go list -m -e -f $FMT example.com/retract/self/pseudo
stdout '^example.com/retract/self/pseudo: "module example.com/retract/self/pseudo: not a known dependency" ""$'
```

----------------------------------------

TITLE: Module Implementation
DESCRIPTION: Implements a simple function M() in the main module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_install_submodule.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package m

func M() {}
```

----------------------------------------

TITLE: Defining IP-related syscall constants for Darwin ARM64 CGO in Go
DESCRIPTION: This snippet defines various IP-related constants used in system calls for the Darwin ARM64 CGO platform. These constants include IP protocol options, multicast settings, and firewall configurations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_157

LANGUAGE: Go
CODE:
```
const IP_FW_RESETLOG ideal-int
const IP_FW_ZERO = 43
const IP_HDRINCL = 2
const IP_IPSEC_POLICY = 21
const IP_MAXPACKET = 65535
const IP_MAX_GROUP_SRC_FILTER = 512
const IP_MAX_MEMBERSHIPS = 4095
const IP_MAX_SOCK_MUTE_FILTER = 128
const IP_MAX_SOCK_SRC_FILTER = 128
const IP_MF = 8192
const IP_MIN_MEMBERSHIPS = 31
const IP_MSFILTER = 74
const IP_MSS = 576
const IP_MULTICAST_IF = 9
const IP_MULTICAST_IFINDEX = 66
const IP_MULTICAST_LOOP = 11
const IP_MULTICAST_TTL = 10
const IP_MULTICAST_VIF = 14
```

----------------------------------------

TITLE: Defining Memory Synchronization Constants in Go for NetBSD
DESCRIPTION: This snippet defines constants for memory synchronization options on NetBSD. These flags are used with the msync system call to control how memory is synchronized with storage.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_26

LANGUAGE: Go
CODE:
```
const MS_ASYNC = 1
const MS_INVALIDATE = 2
const MS_SYNC = 4
```

----------------------------------------

TITLE: Checking Default GODEBUG Setting in Go 1.24 Module
DESCRIPTION: Verifies that Go 1.24 modules have decoratemappings=0 as their default GODEBUG setting. This is important for ensuring consistent behavior in memory mapping annotations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_decoratemappings_124.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

# Go 1.24 module should disable decoratemappings.
go list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'
stdout decoratemappings=0

[!GOOS:linux] skip
[short] skip

# Programs in Go 1.24 module should never see annotations. This ensures that
# the runtime has not overridden the default.
go run .
```

----------------------------------------

TITLE: Berkeley Packet Filter I/O Control Constants in Go for NetBSD-arm64
DESCRIPTION: Constants for Berkeley Packet Filter (BPF) I/O control commands on NetBSD ARM64. These BIOC* constants are used for controlling packet capture behavior through ioctl calls within the syscall package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_116

LANGUAGE: Go
CODE:
```
const BIOCFEEDBACK = 2147762813
const BIOCFLUSH = 536887912
const BIOCGBLEN = 1074020966
const BIOCGDLT = 1074020970
const BIOCGDLTLIST = 3222291063
const BIOCGETIF = 1083196011
const BIOCGFEEDBACK = 1074020988
const BIOCGHDRCMPLT = 1074020980
const BIOCGRTIMEOUT = 1074807419
const BIOCGSEESENT = 1074020984
const BIOCGSTATS = 1082147439
const BIOCGSTATSOLD = 1074283119
const BIOCIMMEDIATE = 2147762800
const BIOCPROMISC = 536887913
const BIOCSBLEN = 3221504614
const BIOCSDLT = 2147762806
const BIOCSETF = 2148549223
const BIOCSETIF = 2156937836
const BIOCSFEEDBACK = 2147762813
const BIOCSHDRCMPLT = 2147762805
const BIOCSRTIMEOUT = 2148549242
const BIOCSSEESENT = 2147762809
const BIOCSTCPF = 2148549234
const BIOCSUDPF = 2148549235
const BIOCVERSION = 1074020977
```

----------------------------------------

TITLE: Package Declaration
DESCRIPTION: Main package declaration file defining the depofdirectpatch package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_depofdirectpatch_v1.0.1.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package depofdirectpatch
```

----------------------------------------

TITLE: Main Package Implementation
DESCRIPTION: Main package that imports package x.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package m

import _ "example.net/x"
```

----------------------------------------

TITLE: Go List with Unprintable Rationale
DESCRIPTION: This snippet tests 'go list' with a module retracted with a reason including unprintable characters. It asserts that 'go list' shows the full string with the unprintable characters.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_9

LANGUAGE: go
CODE:
```
go list -m -retracted -f '{{.Retracted}}' example.com/retract/rationale
stdout '^\\[Ends with a BEL character. Beep!\x07\\]$'
```

----------------------------------------

TITLE: Compiling Fake Go Toolchain in Go
DESCRIPTION: This snippet defines a simple Go program that simulates a Go toolchain executable. It prints a message indicating it's running from PATH and exits with an error code.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_path.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	exe, _ := os.Executable()
	name := filepath.Base(exe)
	name = strings.TrimSuffix(name, ".exe")
	fmt.Fprintf(os.Stderr, "running %s from PATH\n", name)
	os.Exit(1) // fail in case we are running this accidentally (like in "go mod edit")
}
```

----------------------------------------

TITLE: Race Condition Testing Configuration
DESCRIPTION: Sets up environment for testing race detector compatibility across different architectures.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goflags.txt#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
env GOFLAGS=-race OLDGOARCH=$GOARCH OLDGOOS=$GOOS GOARCH=386 GOOS=linux
```

----------------------------------------

TITLE: Markdown Link Formatting
DESCRIPTION: Escaped markdown syntax showing how links should be properly escaped and formatted
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link4.txt#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
These are not links.

\[x

\[x]:

\[x]:[https://go.dev](https://go.dev)

\[x][https://go.dev](https://go.dev)

\[x]: surprise://go.dev

\[x]: surprise!

But this is, with a tab (although it's unused).
```

----------------------------------------

TITLE: Testing Go Command Behavior with Syntax Errors
DESCRIPTION: This script sets GO111MODULE to off and executes three Go commands with the expectation that they will fail due to syntax errors in the package files. The commands tested are 'go list', 'go build', and 'go install'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/pattern_syntax_error.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=off

# patterns match directories with syntax errors
! go list ./...
! go build ./...
! go install ./...
```

----------------------------------------

TITLE: Go Test File for CRLF Handling in Examples
DESCRIPTION: Complete Go test file containing examples that verify correct handling of different line endings in example output. It imports necessary packages for I/O operations and platform detection.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_crlf_example.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package  x

import (
    "io"
    "fmt"
    "os"
    "runtime"
)

func Example_lf() {
	fmt.Print("foo", "\n", "bar")
	// Output:
	// foo
	// bar
}

func Example_println() {
	fmt.Println("foo")
	fmt.Println("bar")
	// Output:
	// foo
	// bar
}

func Example_crlf() {
	if runtime.GOOS == "windows" {
		io.WriteString(os.Stdout, "foo\r\nbar\r\n")
	} else {
		io.WriteString(os.Stdout, "foo\nbar\n")
	}
	// Output:
	// foo
	// bar
}
```

----------------------------------------

TITLE: Defining File and Socket Functions for OpenBSD in Go
DESCRIPTION: Function declarations for file control and socket operations on OpenBSD. These functions are used to manipulate file descriptors and perform socket communications.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_42

LANGUAGE: Go
CODE:
```
func FcntlFlock(uintptr, int, *Flock_t) error
func SendmsgN(int, []uint8, []uint8, Sockaddr, int) (int, error)
```

----------------------------------------

TITLE: Testing Go List Command with Incomplete Package
DESCRIPTION: Shell script testing go list -find behavior with incomplete packages and imports. Verifies incomplete status reporting and import list handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_find.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off

go list -f {{.Incomplete}} x/y/z...  # should probably exit non-zero but never has
stdout true
go list -find -f '{{.Incomplete}} {{.Imports}}' x/y/z...
stdout '^false \[\]'
```

----------------------------------------

TITLE: Go List Command Test
DESCRIPTION: Test command to verify module field population using go list with -e flag for error tolerance.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_module_when_error.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
go list -e -f {{.Module}}
stdout '^mod.com$'
```

----------------------------------------

TITLE: Testing go list with --versions flag and latest version query
DESCRIPTION: Executes 'go list -m' command with the --versions flag and @latest version query for an unknown module, verifying error output format consistency.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_versions.txt#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
go list -m -e -f $FMT --versions example.com/retract/self/pseudo@latest
stdout '^example.com/retract/self/pseudo: "module example.com/retract/self/pseudo: no matching versions for query \\"latest\\"" "latest"$'
```

----------------------------------------

TITLE: Testing Go List with Error Flag
DESCRIPTION: Tests the behavior of 'go list -e' which should report a nonexistent package with an error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
# golang.org/issue/29280: 'go list -e' for a nonexistent directory should
# report a nonexistent package with an error.
go list -e -json ./subdir
stdout '"Incomplete": true'
```

----------------------------------------

TITLE: Setting GO111MODULE Environment Variable
DESCRIPTION: Sets the GO111MODULE environment variable to 'on' to enable module mode for Go commands.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_clean_cache.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on
```

----------------------------------------

TITLE: Checking Default GODEBUG Settings for FIPS 140 in Go
DESCRIPTION: Verifies that the default GODEBUG settings include 'fips140=on' when FIPS is enabled.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fipssnap.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go list -f '{{.DefaultGODEBUG}}'
stdout fips140=on
```

----------------------------------------

TITLE: Implementing Simple Go Function
DESCRIPTION: Defines a package 'p' with an empty function 'F()'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo118_v0.0.1.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package p

func F() {}
```

----------------------------------------

TITLE: Minimal Vendored Package p
DESCRIPTION: A minimal vendored package 'p' that only contains a package declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package p
```

----------------------------------------

TITLE: Vendor Package Definition
DESCRIPTION: Definition of vendored package 'd' in the vendor directory structure
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_importmap.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package d
```

----------------------------------------

TITLE: Package Q Definition (m2/q/q.go)
DESCRIPTION: Empty package definition for the q package in m2 module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_issue56222.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package q
```

----------------------------------------

TITLE: Deprecated Network Interface Message Types
DESCRIPTION: Deprecated type definitions for network interface related messages including interface announcements, address messages, and routing messages. These types were used for network interface management and routing operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_42

LANGUAGE: go
CODE:
```
type InterfaceAddrMessage //deprecated
type InterfaceAnnounceMessage //deprecated
type InterfaceMessage //deprecated
type RouteMessage //deprecated
type RoutingMessage //deprecated
```

----------------------------------------

TITLE: Regressing Test for Non-Existent Package Import Using Go Command
DESCRIPTION: This shell script snippet verifies that attempting to list a non-existent package using the Go command in module mode outputs a clear error message. The test specifically checks the stderr output for the expected message format. It requires Go to be installed and configured properly, with module mode enabled.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cmd_import_error.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
! go list cmd/unknown
stderr '^package cmd/unknown is not in std \('$GOROOT'[/\\]src[/\\]cmd[/\\]unknown\)$'
```

LANGUAGE: shell
CODE:
```
go list -f '{{range .DepsErrors}}{{.Err}}{{end}}' x.go
stdout '^package cmd/unknown is not in std \('$GOROOT'[/\\]src[/\\]cmd[/\\]unknown\)$'
```

----------------------------------------

TITLE: Importing Vendored Package in Go
DESCRIPTION: This Go file defines package 'a' and imports the 'foo.com/internal/bar/b' package using a blank import for side effects.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_internal.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package a
import _ "foo.com/internal/bar/b"
```

----------------------------------------

TITLE: Defining Rusage Struct in Go for Darwin ARM64 CGO
DESCRIPTION: Defines the Rusage struct used for resource usage information. It includes fields for various system resource metrics.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_204

LANGUAGE: Go
CODE:
```
type Rusage struct {
    Idrss int64
    Inblock int64
    Isrss int64
    Ixrss int64
    Majflt int64
    Maxrss int64
    Minflt int64
    Msgrcv int64
    Msgsnd int64
    Nivcsw int64
    Nsignals int64
    Nswap int64
}
```

----------------------------------------

TITLE: Testing Relative -pkgdir Argument in Go Build Command
DESCRIPTION: This script tests if the Go command can accept a relative path for the -pkgdir flag. It sets up a custom GOCACHE directory, disables Go modules, and attempts to build the runtime package with a relative pkgdir path ('.') which should succeed if the issue is fixed.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_relative_pkgdir.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=off

# Regression test for golang.org/issue/21309: accept relative -pkgdir argument.

[short] skip

mkdir $WORK/gocache
env GOCACHE=$WORK/gocache
go build -pkgdir=. runtime
```

----------------------------------------

TITLE: Go Get with Multi-line Rationale
DESCRIPTION: This snippet tests the behavior of 'go get' when a module version is retracted with a multi-line rationale. It verifies that only the first line of the message is printed to stderr.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_2

LANGUAGE: go
CODE:
```
go get example.com/retract/rationale@v1.0.0-multiline1
stderr '^go: warning: example.com/retract/rationale@v1.0.0-multiline1: retracted by module author: short description$'
! stderr 'detail'
```

----------------------------------------

TITLE: Testing Go Module Proxy with File Cache
DESCRIPTION: This snippet tests using the download cache as a file proxy for Go modules. It sets up different GOPROXY paths for Windows and non-Windows systems.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_file_proxy.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
env GOPATH=$WORK/gopath2
[GOOS:windows] env GOPROXY=file:///C:/nonexist
[!GOOS:windows] env GOPROXY=file:///nonexist
! go list
[GOOS:windows] env GOPROXY=file:///$WORK/gopath1/pkg/mod/cache/download
[!GOOS:windows] env GOPROXY=file://$WORK/gopath1/pkg/mod/cache/download
go list
grep v1.5.1 $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/list
```

----------------------------------------

TITLE: Shell Test Script
DESCRIPTION: Test script for validating toolchain switching behavior including basic switching, version mismatches, and infinite loop detection
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_loop.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
env GOTOOLCHAIN=auto
env TESTGO_VERSION=go1.21.1

# Basic switch should work.
env TESTGO_VERSION_SWITCH=switch
go version
stdout go1.21.99

# Toolchain target mismatch should be detected.
env TESTGO_VERSION_SWITCH=mismatch
! go version
stderr '^go: toolchain go1.21.1 invoked to provide go1.21.99$'

# Toolchain loop should be detected.
env TESTGO_VERSION_SWITCH=loop
! go version
stderr -count=10 '^go: switching from go1.21.1 to go1.21.99 \[depth 9[0-9]\]$'
stderr -count=1 '^go: switching from go1.21.1 to go1.21.99 \[depth 100\]$'
stderr '^go: too many toolchain switches$'

[short] skip

# Internal env vars should not leak to go test or go run.
env TESTGO_VERSION_SWITCH=switch
go version
stdout go1.21.99
go test
stdout clean
go run .
stdout clean
```

----------------------------------------

TITLE: Windows DNS Resolution Constants and Functions
DESCRIPTION: Defines constants and functions for DNS resolution on Windows, including section identifiers and name comparison functionality for both 386 and amd64 architectures.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_25

LANGUAGE: Go
CODE:
```
const (
    DNS_INFO_NO_RECORDS = 9501
    DnsSectionQuestion = 0
    DnsSectionAnswer = 1
    DnsSectionAuthority = 2
    DnsSectionAdditional = 3
)

func DnsNameCompare(*uint16, *uint16) bool
```

----------------------------------------

TITLE: Size Constants for OpenBSD in Go
DESCRIPTION: Defines size constants for various OpenBSD structures. These constants specify the memory sizes of routing message structures.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_59

LANGUAGE: Go
CODE:
```
const SizeofRtMetrics = 56
const SizeofRtMsghdr = 96
```

----------------------------------------

TITLE: Checking Go Command Dependencies on macOS
DESCRIPTION: This shell command checks if cgo is used as a dependency in the cmd/go standard library package on macOS. It utilizes the `go list -deps` command to list all dependencies of the Go command and ensures the output does not include the `runtime/cgo`. This helps maintain predictable builds by avoiding dynamic linking issues on macOS.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/darwin_no_cgo.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list -deps cmd/go
! stdout runtime/cgo
```

----------------------------------------

TITLE: Package Y v0.2.0 Implementation
DESCRIPTION: Second version of package y with dependency on x v0.2.0-pre.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
module example.net/y

go 1.16

require example.net/x v0.2.0-pre
```

LANGUAGE: go
CODE:
```
package y

import _ "example.net/x/subpkg"
```

----------------------------------------

TITLE: Environment Setup and Build Command
DESCRIPTION: Shell command to disable Go modules and attempt building package with non-canonical imports
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/noncanonical_import.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off\n\n! go build canonical/d
```

----------------------------------------

TITLE: Non-Main Package Definition
DESCRIPTION: Defines a simple non-main package with a single empty function F(). Used to test build command rejection of non-main packages with -buildmode=exe.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_exe.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package not_main

func F() {}
```

----------------------------------------

TITLE: Empty Go Test File
DESCRIPTION: Defines an empty test function in the 'example' package, which is not expected to run due to the build failure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_issue35169.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
package  example

func Test(*testing.T) {}
```

----------------------------------------

TITLE: Representing an Empty Function in Go SSA
DESCRIPTION: Illustrates the SSA representation of an empty Go function. The example shows a single block with InitMem and Ret operations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/internal/ssa/README.md#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
foo func()
  b1:
    v1 = InitMem <mem>
    Ret v1
```

----------------------------------------

TITLE: Package C Implementation
DESCRIPTION: Simple implementation of package c.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_15

LANGUAGE: go
CODE:
```
package c
```

----------------------------------------

TITLE: Cache Directory Validation Program in Go
DESCRIPTION: Program that scans the Go build cache directory to check for duplicate action entries referencing the same object ID. It reads through cache directory entries with '-a' suffix and verifies that no two action entries point to the same object entry file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_modindex_dupactionid.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	"errors"
	"log"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	cachedir := os.Getenv("GOCACHE")
	if cachedir == "" {
		log.Fatal("GOCACHE env var is empty; expected it to be set")
	}

	dirs, err := os.ReadDir(cachedir)
	if err != nil {
		log.Fatal(err)
	}

	seen := map[string]string{} // object id -> action id

	for _, entry := range dirs {
		if entry.IsDir() && len(entry.Name()) == 2 {
			prefixdir := filepath.Join(cachedir, entry.Name())
			entries, err := os.ReadDir(prefixdir)
			if err != nil {
				log.Fatal(err)
			}

			for _, entry := range entries {
				if !strings.HasSuffix(entry.Name(), "-a") {
					continue
				}
				actionEntryFile := filepath.Join(prefixdir, entry.Name())
				objid, err := objectid(actionEntryFile)
				if err != nil {
					log.Fatal(err)
				}
				if other, ok := seen[objid]; ok {
					log.Printf("found two action entry files (%s, %s) pointing to the same object id: %s", other, entry.Name(), objid)
					os.Exit(1)
				}
				seen[objid] = entry.Name()
			}
		}
	}
}

func objectid(actionEntryFile string) (string, error) {
	const (
		HashSize  = 32
		hexSize   = HashSize * 2
		entrySize = 2 + 1 + hexSize + 1 + hexSize + 1 + 20 + 1 + 20 + 1
	)

	entry, err := os.ReadFile(actionEntryFile)
	if err != nil {
		return "", err
	}
	if len(entry) < entrySize {
		return "", errors.New("entry file incomplete")
	}
	if entry[0] != 'v' || entry[1] != '1' || entry[2] != ' ' || entry[3+hexSize] != ' ' || entry[3+hexSize+1+hexSize] != ' ' || entry[3+hexSize+1+hexSize+1+20] != ' ' || entry[entrySize-1] != '\n' {
		return "", errors.New("invalid header")
	}
	return string(entry[3+hexSize+1 : 3+hexSize+1+hexSize]), nil
}
```

----------------------------------------

TITLE: Recording Pseudo-Version in go.mod
DESCRIPTION: Tests that getting a package with a pseudo-version correctly records that version in the go.mod file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
go get rsc.io/quote@v0.0.0-20180214005840-23179ee8a569
grep 'rsc.io/quote v0.0.0-20180214005840-23179ee8a569' go.mod
```

----------------------------------------

TITLE: Simple Go Program for Testing Build Flags
DESCRIPTION: A minimal Go program that does nothing, used as test input for various build flag configurations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_msan_and_race_and_asan_require_cgo.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Testing Unprintable Character Handling in Deprecation Messages
DESCRIPTION: Tests how 'go get' handles a deprecation message containing unprintable characters, ensuring it displays a placeholder instead of the actual message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
go get unprintable
stderr '^go: module unprintable is deprecated: \(message omitted: contains non-printable characters\)$'
go list -m -u -f '{{.Deprecated}}' unprintable
stdout '^message contains ASCII BEL\x07$'
```

----------------------------------------

TITLE: Network Interface Socket Control Constants (SIOC*) for Darwin ARM64
DESCRIPTION: Defines socket I/O control (SIOC) constants used for network interface configuration and management in Darwin. These constants are used with the ioctl system call to perform operations on network interfaces.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_182

LANGUAGE: Go
CODE:
```
pkg syscall (darwin-arm64-cgo), const SIOCGIFKPI ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCGIFMAC = 3223349634
pkg syscall (darwin-arm64-cgo), const SIOCGIFMAC ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCGIFMEDIA = 3224135992
pkg syscall (darwin-arm64-cgo), const SIOCGIFMEDIA ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCGIFMETRIC = 3223349527
pkg syscall (darwin-arm64-cgo), const SIOCGIFMETRIC ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCGIFMTU = 3223349555
pkg syscall (darwin-arm64-cgo), const SIOCGIFMTU ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCGIFNETMASK = 3223349541
pkg syscall (darwin-arm64-cgo), const SIOCGIFNETMASK ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCGIFPDSTADDR = 3223349568
pkg syscall (darwin-arm64-cgo), const SIOCGIFPDSTADDR ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCGIFPHYS = 3223349557
pkg syscall (darwin-arm64-cgo), const SIOCGIFPHYS ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCGIFPSRCADDR = 3223349567
pkg syscall (darwin-arm64-cgo), const SIOCGIFPSRCADDR ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCGIFSTATUS = 3274795325
pkg syscall (darwin-arm64-cgo), const SIOCGIFSTATUS ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCGIFVLAN = 3223349631
pkg syscall (darwin-arm64-cgo), const SIOCGIFVLAN ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCGIFWAKEFLAGS = 3223349640
pkg syscall (darwin-arm64-cgo), const SIOCGIFWAKEFLAGS ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCGLOWAT = 1074033411
pkg syscall (darwin-arm64-cgo), const SIOCGLOWAT ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCGPGRP = 1074033417
pkg syscall (darwin-arm64-cgo), const SIOCGPGRP ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCIFCREATE = 3223349624
pkg syscall (darwin-arm64-cgo), const SIOCIFCREATE ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCIFCREATE2 = 3223349626
pkg syscall (darwin-arm64-cgo), const SIOCIFCREATE2 ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCIFDESTROY = 2149607801
pkg syscall (darwin-arm64-cgo), const SIOCIFDESTROY ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCIFGCLONERS = 3222301057
pkg syscall (darwin-arm64-cgo), const SIOCIFGCLONERS ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCRSLVMULTI = 3222300987
pkg syscall (darwin-arm64-cgo), const SIOCRSLVMULTI ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSDRVSPEC = 2150132091
pkg syscall (darwin-arm64-cgo), const SIOCSDRVSPEC ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSETVLAN = 2149607806
pkg syscall (darwin-arm64-cgo), const SIOCSETVLAN ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSHIWAT = 2147775232
pkg syscall (darwin-arm64-cgo), const SIOCSHIWAT ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFADDR = 2149607692
pkg syscall (darwin-arm64-cgo), const SIOCSIFADDR ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFALTMTU = 2149607749
pkg syscall (darwin-arm64-cgo), const SIOCSIFALTMTU ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFASYNCMAP = 2149607805
pkg syscall (darwin-arm64-cgo), const SIOCSIFASYNCMAP ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFBOND = 2149607750
pkg syscall (darwin-arm64-cgo), const SIOCSIFBOND ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFBRDADDR = 2149607699
pkg syscall (darwin-arm64-cgo), const SIOCSIFBRDADDR ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFCAP = 2149607770
pkg syscall (darwin-arm64-cgo), const SIOCSIFCAP ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFDSTADDR = 2149607694
pkg syscall (darwin-arm64-cgo), const SIOCSIFDSTADDR ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFFLAGS = 2149607696
pkg syscall (darwin-arm64-cgo), const SIOCSIFFLAGS ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFGENERIC = 2149607737
pkg syscall (darwin-arm64-cgo), const SIOCSIFGENERIC ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFKPI = 2149607814
pkg syscall (darwin-arm64-cgo), const SIOCSIFKPI ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFLLADDR = 2149607740
pkg syscall (darwin-arm64-cgo), const SIOCSIFLLADDR ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFMAC = 2149607811
pkg syscall (darwin-arm64-cgo), const SIOCSIFMAC ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFMEDIA = 3223349559
pkg syscall (darwin-arm64-cgo), const SIOCSIFMEDIA ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFMETRIC = 2149607704
pkg syscall (darwin-arm64-cgo), const SIOCSIFMETRIC ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFMTU = 2149607732
pkg syscall (darwin-arm64-cgo), const SIOCSIFMTU ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFNETMASK = 2149607702
pkg syscall (darwin-arm64-cgo), const SIOCSIFNETMASK ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFPHYADDR = 2151704894
pkg syscall (darwin-arm64-cgo), const SIOCSIFPHYADDR ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFPHYS = 2149607734
pkg syscall (darwin-arm64-cgo), const SIOCSIFPHYS ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSIFVLAN = 2149607806
pkg syscall (darwin-arm64-cgo), const SIOCSIFVLAN ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSLOWAT = 2147775234
pkg syscall (darwin-arm64-cgo), const SIOCSLOWAT ideal-int
pkg syscall (darwin-arm64-cgo), const SIOCSPGRP = 2147775240
pkg syscall (darwin-arm64-cgo), const SIOCSPGRP ideal-int
```

----------------------------------------

TITLE: Defining Empty Subdirectory Package
DESCRIPTION: This snippet defines a package named 'emptysubdir' with a comment indicating that it has a subdirectory containing no packages. This package is part of the test setup for the 'go get' command tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_nopkgs.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
// Package emptysubdir has a subdirectory containing no packages.
package emptysubdir
```

----------------------------------------

TITLE: Data Link Type Constants for Darwin ARM64
DESCRIPTION: Defines constants for different types of data link protocols and network interfaces supported by the system
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_56

LANGUAGE: Go
CODE:
```
const (
    DLT_NULL = 0
    DLT_EN10MB = 1
    DLT_EN3MB = 2
    DLT_AX25 = 3
    DLT_PRONET = 4
    DLT_CHAOS = 5
    // ... other DLT constants
)
```

----------------------------------------

TITLE: Go List with Multi-line Rationale (Block)
DESCRIPTION: Similar to the previous snippet, but testing 'go list' command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_5

LANGUAGE: go
CODE:
```
go list -m -retracted -f '{{.Retracted}}' example.com/retract/rationale
cmp stdout multiline
```

----------------------------------------

TITLE: Defining Go Toolchain Module Import Path
DESCRIPTION: Specifies the import path for a test Go toolchain module targeted for iOS ARM64 platform with version 1.999.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.ios-arm64.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
golang.org/toolchain@v0.0.1-go1.999testmod.ios-arm64
```

----------------------------------------

TITLE: Defining Nested Test Dependency Package 'x/inall/fromtestinall' (Go)
DESCRIPTION: Defines the empty package `x/inall/fromtestinall` within the `x` module. This package is imported only by the tests of package `x/inall` (`x/inall/inall_test.go`), representing a test dependency of a package within the `all` scope.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_9

LANGUAGE: go
CODE:
```
-- x/inall/fromtestinall/fromtestinall.go --
package fromtestinall
```

----------------------------------------

TITLE: Comparing go.mod Files in Go
DESCRIPTION: This snippet compares the current go.mod file with a previously saved version to check for changes after running 'go mod tidy'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_of_test_dep.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
cp go.mod go.mod.old
go mod tidy
cmp go.mod go.mod.old
```

----------------------------------------

TITLE: Process Wait Constants for Darwin ARM64 in Go
DESCRIPTION: Constants for process wait operations (W*) in the syscall package for Darwin ARM64. These define flags used with wait system calls to control behavior when waiting for child processes.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_116

LANGUAGE: Go
CODE:
```
pkg syscall (darwin-arm64), const WCONTINUED = 16
pkg syscall (darwin-arm64), const WCOREFLAG = 128
pkg syscall (darwin-arm64), const WEXITED = 4
pkg syscall (darwin-arm64), const WNOHANG = 1
pkg syscall (darwin-arm64), const WNOWAIT = 32
pkg syscall (darwin-arm64), const WORDSIZE = 64
pkg syscall (darwin-arm64), const WSTOPPED = 8
pkg syscall (darwin-arm64), const WUNTRACED = 2
```

----------------------------------------

TITLE: Testing Multi-line Deprecation Message Display in Go Modules
DESCRIPTION: Tests how 'go get' handles a multi-line deprecation message, ensuring it only displays the first line.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go get multiline
stderr '^go: module multiline is deprecated: first line$'
! stderr 'second line'
go list -m -u -f '{{.Deprecated}}' multiline
stdout '^first line\nsecond line.$'
```

----------------------------------------

TITLE: Go Main Package
DESCRIPTION: Defines a basic Go main package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_11

LANGUAGE: Go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Radvisory_t Struct Definition for darwin-arm64
DESCRIPTION: Definition of the Radvisory_t struct used in file system operations to provide advice about file access patterns on darwin-arm64 platforms.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_128

LANGUAGE: go
CODE:
```
type Radvisory_t struct {
	Offset int64
	Count int32
	Pad_cgo_0 [4]uint8
}
```

----------------------------------------

TITLE: Mach-O Flag Constants - debug/macho
DESCRIPTION: Flag constants for Mach-O binary format controlling various linking and execution behaviors
SOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_7

LANGUAGE: go
CODE:
```
const (
    FlagNoUndefs = 1
    FlagIncrLink = 2
    FlagDyldLink = 4
    FlagBindAtLoad = 8
    FlagPrebound = 16
)
```

----------------------------------------

TITLE: System Call Constants for Darwin ARM64
DESCRIPTION: Defines system call number constants for Darwin ARM64 architecture. These constants represent the system call numbers used by the operating system when making kernel-level operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_184

LANGUAGE: Go
CODE:
```
pkg syscall (darwin-arm64-cgo), const SYS_ACCEPT = 30
pkg syscall (darwin-arm64-cgo), const SYS_ACCEPT ideal-int
pkg syscall (darwin-arm64-cgo), const SYS_ACCEPT_NOCANCEL = 404
pkg syscall (darwin-arm64-cgo), const SYS_ACCEPT_NOCANCEL ideal-int
pkg syscall (darwin-arm64-cgo), const SYS_ACCESS = 33
pkg syscall (darwin-arm64-cgo), const SYS_ACCESS ideal-int
```

----------------------------------------

TITLE: Functions and Type Definitions in Go
DESCRIPTION: Declares functions and a struct related to system calls on FreeBSD, including Accept4, FcntlFlock, and SendmsgN with signatures for handling file descriptors and socket operations. The Termios struct handles terminal attributes. These function declarations rely on the termios struct for terminal operations and syscall interaction with file descriptors.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
func Accept4(int, int) (int, Sockaddr, error)
func FcntlFlock(uintptr, int, *Flock_t) error
func SendmsgN(int, []uint8, []uint8, Sockaddr, int) (int, error)
type Termios struct {
    Cc [20]uint8
    Cflag uint32
    Iflag uint32
    Ispeed uint32
    Lflag uint32
    Oflag uint32
    Ospeed uint32
}
```

----------------------------------------

TITLE: Including Non-existent C Header
DESCRIPTION: Attempts to include a non-existent C header file, which is expected to cause a build error.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cgo_error.txt#2025-04-22_snippet_2

LANGUAGE: C
CODE:
```
#include "doesnotexist.h"
```

----------------------------------------

TITLE: Lazy Package Declaration
DESCRIPTION: Empty package declaration for the lazy module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_irrelevant.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
package lazy
```

----------------------------------------

TITLE: Defining ARM64 ELF Relocation Type Constants in Go
DESCRIPTION: Defines various constants for ARM64 ELF relocation types, including both 32-bit and 64-bit architectures. These constants are used to identify different types of relocations in ELF files.
SOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_5

LANGUAGE: Go
CODE:
```
const R_AARCH64_NONE = 0
const R_AARCH64_ABS64 = 257
const R_AARCH64_ABS32 = 258
const R_AARCH64_ABS16 = 259
const R_AARCH64_PREL64 = 260
const R_AARCH64_PREL32 = 261
const R_AARCH64_PREL16 = 262
// ... (many more constants)
```

----------------------------------------

TITLE: Main Package Import
DESCRIPTION: Main package file importing the lazy module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_irrelevant.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package m

import _ "example.net/lazy"
```

----------------------------------------

TITLE: Indirect Package with Dependency Chain
DESCRIPTION: Go package that imports another package which has a missing dependency, used to test indirect dependency error handling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_bad_import.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package indirect
import _ "example.com/direct"
```

----------------------------------------

TITLE: Custom Git Configuration with GitHub SSH Setup
DESCRIPTION: A Git configuration file defining user information and URL rewriting to use SSH for GitHub repositories instead of HTTPS.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_issue51114.txt#2025-04-22_snippet_2

LANGUAGE: ini
CODE:
```
[user]
	name = Go Gopher
	email = gopher@golang.org
[url "git@github.com:"]
	insteadOf = https://github.com/
```

----------------------------------------

TITLE: P1 Package Implementation with Multiple Imports
DESCRIPTION: Package p1 implementation showing various import patterns including versioned modules and subdirectories
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_legacy_mod.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p1

import _ "old/p2"
import _ "new/v2"
import _ "new/v2/p2"
import _ "new/sub/v2/x/v1/y" // v2 is module, v1 is directory in module
import _ "new/sub/inner/x"   // new/sub/inner/go.mod overrides new/sub/go.mod
```

----------------------------------------

TITLE: Defining Linux-specific Test for Package r
DESCRIPTION: Creates a test file for package 'r' with a build constraint for Linux using the old '+build' syntax, importing package 's'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_all_gobuild.txt#2025-04-22_snippet_7

LANGUAGE: Go
CODE:
```
// +build linux

package r

import "m/s"
```

----------------------------------------

TITLE: Defining Process Tracing Constants (PTRACE_*, PT_*) in Go for darwin-arm64
DESCRIPTION: Constants for process tracing operations used with ptrace(2) system calls. These flags control process debugging operations including attaching to processes, reading and writing memory, and controlling execution.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_89

LANGUAGE: Go
CODE:
```
const PTRACE_CONT = 7
const PTRACE_CONT ideal-int
const PTRACE_KILL = 8
const PTRACE_KILL ideal-int
const PTRACE_TRACEME = 0
const PTRACE_TRACEME ideal-int
const PT_ATTACH = 10
const PT_ATTACH ideal-int
const PT_ATTACHEXC = 14
const PT_ATTACHEXC ideal-int
const PT_CONTINUE = 7
const PT_CONTINUE ideal-int
const PT_DENY_ATTACH = 31
const PT_DENY_ATTACH ideal-int
const PT_DETACH = 11
const PT_DETACH ideal-int
const PT_FIRSTMACH = 32
const PT_FIRSTMACH ideal-int
const PT_FORCEQUOTA = 30
const PT_FORCEQUOTA ideal-int
const PT_KILL = 8
const PT_KILL ideal-int
const PT_READ_D = 2
const PT_READ_D ideal-int
const PT_READ_I = 1
const PT_READ_I ideal-int
const PT_READ_U = 3
const PT_READ_U ideal-int
const PT_SIGEXC = 12
const PT_SIGEXC ideal-int
const PT_STEP = 9
const PT_STEP ideal-int
const PT_THUPDATE = 13
const PT_THUPDATE ideal-int
const PT_TRACE_ME = 0
const PT_TRACE_ME ideal-int
const PT_WRITE_D = 5
const PT_WRITE_D ideal-int
const PT_WRITE_I = 4
const PT_WRITE_I ideal-int
const PT_WRITE_U = 6
const PT_WRITE_U ideal-int
```

----------------------------------------

TITLE: go.work_want file content
DESCRIPTION: This is the expected content of the go.work file after certain operations. In this example it remains the same as initial go.work content.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_only_dirs.txt#_snippet_3

LANGUAGE: Go
CODE:
```
-- go.work_want --
go 1.18
```

----------------------------------------

TITLE: Expected Empty Module State
DESCRIPTION: Expected go.mod state after tidying the module.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tool.txt#2025-04-22_snippet_7

LANGUAGE: plaintext
CODE:
```
module example.com/foo

go 1.24
```

----------------------------------------

TITLE: Verifying Initial Absence of Toolchain Directive
DESCRIPTION: Checks that the go.mod file initially does not contain a toolchain directive.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_toolchain.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
! grep toolchain go.mod
```

----------------------------------------

TITLE: Fake Clang Implementation in Go
DESCRIPTION: A Go program that simulates a Clang compiler by wrapping the real Clang binary and injecting a vendor prefix into version strings. Includes error simulation via GO_BREAK_CLANG environment variable.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cc_cache_issue64423.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import (
	"bufio"
	"bytes"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

func main() {
	if os.Getenv("GO_BREAK_CLANG") != "" {
		os.Stderr.WriteString("GO_BREAK_CLANG is set\n")
		os.Exit(1)
	}

	b, err := os.ReadFile(filepath.Join(os.Getenv("WORK"), ".realclang"))
	if err != nil {
		log.Fatal(err)
	}
	clang := string(bytes.TrimSpace(b))
	cmd := exec.Command(clang, os.Args[1:]...)
	cmd.Stdout = os.Stdout
	stderr, err := cmd.StderrPipe()
	if err != nil {
		log.Fatal(err)
	}

	if err := cmd.Start(); err != nil {
		log.Fatal(err)
	}

	r := bufio.NewReader(stderr)
	for {
		line, err := r.ReadString('\n')
		if line != "" {
			if strings.Contains(line, "clang version") {
				// Simulate a clang version string with an arbitrary vendor prefix.
				const vendorString = "Gopher Solutions Unlimited "
				os.Stderr.WriteString(vendorString)
			}
			os.Stderr.WriteString(line)
		}
		if err != nil {
			break
		}
	}
	os.Stderr.Close()

	if err := cmd.Wait(); err != nil {
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: Mock Go Version Executable Implementation
DESCRIPTION: A Go program that simulates a Go toolchain executable, used for testing PATH-based toolchain resolution. Prints its own name and exits with status 1 to prevent accidental real usage.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_godebug_trace.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	exe, _ := os.Executable()
	name := filepath.Base(exe)
	name = strings.TrimSuffix(name, ".exe")
	fmt.Fprintf(os.Stderr, "running %s from PATH\n", name)
	os.Exit(1) // fail in case we are running this accidentally (like in "go mod edit")
}
```

----------------------------------------

TITLE: Main Package Go Implementation
DESCRIPTION: Main package implementation with function declarations and a call to external bar package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/trampoline_reuse_test.txt#2025-04-22_snippet_0

LANGUAGE: go
CODE:
```
package main

import "foo/bar"

func Func1()

func main() {
        Func1()
        bar.Bar2()
}
```

----------------------------------------

TITLE: Defining File Operation Constants for Darwin ARM64 in Go
DESCRIPTION: This snippet defines constants used in file operations for the Darwin ARM64 architecture. These constants are used with system calls to perform various file-related operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_62

LANGUAGE: Go
CODE:
```
const F_GETLK ideal-int
const F_GETLKPID = 66
const F_GETNOSIGPIPE = 74
const F_GETOWN = 5
const F_GETPATH = 50
const F_GETPATH_MTMINFO = 71
const F_GETPROTECTIONCLASS = 63
const F_GETPROTECTIONLEVEL = 77
const F_GLOBAL_NOCACHE = 55
const F_LOG2PHYS = 49
const F_LOG2PHYS_EXT = 65
const F_NOCACHE = 48
const F_NODIRECT = 62
const F_OK = 0
const F_PATHPKG_CHECK = 52
const F_PEOFPOSMODE = 3
const F_PREALLOCATE = 42
const F_RDADVISE = 44
const F_RDAHEAD = 45
const F_RDLCK = 1
const F_SETBACKINGSTORE = 70
const F_SETFD = 2
const F_SETFL = 4
const F_SETLK = 8
const F_SETLKW = 9
const F_SETLKWTIMEOUT = 10
const F_SETNOSIGPIPE = 73
const F_SETOWN = 6
const F_SETPROTECTIONCLASS = 64
const F_SETSIZE = 43
const F_SINGLE_WRITER = 76
const F_THAW_FS = 54
const F_TRANSCODEKEY = 75
const F_UNLCK = 2
const F_VOLPOSMODE = 4
const F_WRLCK = 3
```

----------------------------------------

TITLE: Importing Packages in Go Module
DESCRIPTION: This snippet shows the main package of the module, importing four packages from different modules. These imports set up the dependency structure for the test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence_loop.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
package m

import (
	_ "example.net/w"
	_ "example.net/x"
	_ "example.net/y"
	_ "example.net/z"
)
```

----------------------------------------

TITLE: Go Source File with Import
DESCRIPTION: Go source file that imports the rsc.io/quote package
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_sum.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package x
import _ "rsc.io/quote"
```

----------------------------------------

TITLE: Testing Go Build with Active Fossil Repository
DESCRIPTION: Verifies that Go build includes VCS information (revision, commit time, modification status) when building from an active Fossil repository with commits.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_fossil.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
exec fossil open ../repo.fossil -f
exec fossil add a README
exec fossil commit -m 'initial commit'
cd a
go install
go version -m $GOBIN/a$GOEXE
stdout '^\tbuild\tvcs=fossil\n'
stdout '^\tbuild\tvcs.revision='
stdout '^\tbuild\tvcs.time='
stdout '^\tbuild\tvcs.modified=false$'
rm $GOBIN/a$GOEXE
```

----------------------------------------

TITLE: Invalid Version Retraction in v2 Module
DESCRIPTION: go.mod file demonstrating an invalid retraction where the version number doesn't match the module's major version
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_fix_version.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
go 1.16

retract v3.0.1

module rsc.io/quote/v2
```

----------------------------------------

TITLE: Module B Definition v0.1.0
DESCRIPTION: Module b v0.1.0 configuration and implementation requiring module c v0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_artifact.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
module example.com/b

go 1.16

require example.com/c v0.1.0
```

LANGUAGE: go
CODE:
```
package b

import _ "example.com/c"
```

----------------------------------------

TITLE: Module B v0.1.0 Configuration
DESCRIPTION: The go.mod file for module 'b' v0.1.0, requiring 'c' v0.1.0. This continues building the dependency chain for the test case.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
module b

go 1.13

require c v0.1.0
```

----------------------------------------

TITLE: Module A v0.1.0 Definition
DESCRIPTION: Definition for example.net/a module version 0.1.0.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchcycle.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
module example.net/a

go 1.16
```

LANGUAGE: go
CODE:
```
package a
```

----------------------------------------

TITLE: Specifying Go Toolchain Version Metadata - Plaintext
DESCRIPTION: Declares the version of the Go toolchain used in the project in plaintext format, which is useful for custom scripts or tooling that need to reference or enforce a specific Go toolchain version. No external dependencies are required. The input is the toolchain string and the output is simple text, intended to be read by tools and maintainers. No strict format is imposed, but must match the project\'s actual toolchain version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.0.linux-amd64.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
golang.org/toolchain v0.0.1-go1.22.0.linux-amd64
```

----------------------------------------

TITLE: Testing First Listed Error in go.work File
DESCRIPTION: Copies a go.work file with multiple errors and verifies that the first error is reported when running 'go list'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
cp go.work.firsterrlisted.txt go.work
! go list
stderr '^go.work:1: unknown godebug "baz"$'
```

----------------------------------------

TITLE: Module C Definition
DESCRIPTION: Module definition for example.com/c with no dependencies, representing the leaf module in the dependency chain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_14

LANGUAGE: go
CODE:
```
module example.com/c

go 1.17
```

----------------------------------------

TITLE: Storing Version Information (JSON)
DESCRIPTION: This JSON snippet, found in a `.info` file, stores version information (`v0.2.0`). This metadata is likely used internally by Go tooling, possibly relating to the module or its dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_fuzzfail_v0.2.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v0.2.0"}
```

----------------------------------------

TITLE: Defining Go Module with Custom Toolchain Path
DESCRIPTION: This go.mod file defines a module named 'exploit' and specifies a custom toolchain path pointing to a potentially malicious script.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain_slash.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
module exploit

go 1.21
toolchain go1.999999-/run.sh
```

----------------------------------------

TITLE: Empty Package Declaration
DESCRIPTION: Package declaration file with no content
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_a_v1.9.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package a
```

----------------------------------------

TITLE: Empty Go Package Declaration
DESCRIPTION: Minimal Go package declaration for the sub package without any implementations.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/prefixtagtests.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package sub
```

----------------------------------------

TITLE: Deprecations in encoding packages
DESCRIPTION: Lists deprecated struct fields, variables, and types in encoding packages.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_22

LANGUAGE: Go
CODE:
```
pkg encoding/csv, type Reader struct, TrailingComma //deprecated
pkg encoding/csv, var ErrTrailingComma //deprecated
pkg encoding/json, type InvalidUTF8Error //deprecated
pkg encoding/json, type UnmarshalFieldError //deprecated
```

----------------------------------------

TITLE: Setting Environment and Running go list Concurrently - Shell
DESCRIPTION: Configures the Go environment by enabling modules (GO111MODULE=on), sets up a dedicated GOCACHE, and launches two background processes to run 'go list' with various flags for regression test purposes. The code also includes conditional skips and background execution with 'wait'. Designed to uncover cache-related issues in Go's build system when running concurrent list operations. Requires Go tools available in the PATH and directory write permissions for $WORK/gocache.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_compiled_concurrent.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=on

[short] skip
[!cgo] skip

# Regression test for golang.org/issue/29667:
# spurious 'failed to cache compiled Go files' errors.

env GOCACHE=$WORK/gocache
mkdir $GOCACHE

go list -json -compiled -test=false -export=false -deps=true -- . &
go list -json -compiled -test=false -export=false -deps=true -- . &
wait
```

----------------------------------------

TITLE: Setting Up and Running CGO Compiler Path Test (Shell)
DESCRIPTION: These shell commands configure and execute a test for CGO compiler discovery. It includes conditional skips based on build tags (!cgo, !cc:gcc, !cc:clang). A clean GOCACHE is set. For non-Windows systems, the PATH is modified to include the current directory (.), mock compiler scripts ('p/gcc', 'p/clang') are made executable, and their existence is checked. For Windows, the existence of batch script equivalents ('p/gcc.bat', 'p/clang.bat') is checked. The test then runs `go build -x` and asserts that a specific error occurs (`cannot run executable found relative to current directory`) and that the mock compiler scripts did not create the 'p/bug.txt' file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
[short] skip 'runs build'

[!cgo] skip

# Require that CC is something that requires a PATH lookup.
# Normally, the default is gcc or clang, but if CC was set during make.bash,
# that becomes the default.
[!cc:clang] [!cc:gcc] skip 'C compiler is not gcc or clang'

env GOCACHE=$WORK/gocache  # Looking for compile flags, so need a clean cache.
[!GOOS:windows] env PATH=.:$PATH
[!GOOS:windows] chmod 0755 p/gcc p/clang
[!GOOS:windows] exists -exec p/gcc p/clang
[GOOS:windows] exists -exec p/gcc.bat p/clang.bat
! exists p/bug.txt
! go build -x
stderr '^cgo: C compiler "(clang|gcc)" not found: exec: "(clang|gcc)": cannot run executable found relative to current directory'
! exists p/bug.txt
```

----------------------------------------

TITLE: Testing Main Module Update Failure with Path Mismatch (Shell)
DESCRIPTION: Attempts to update all dependencies of the main module using `go get -u ./...`. This command is expected to fail (`!`) due to the path mismatch in `example.com/badchain/c@v1.1.0`. The script compares the actual standard error output with the expected error message stored in `update-main-expected` and verifies that the `go.mod` file has been updated to include `example.com/badchain/c` (as defined in `go.mod.withc`), despite the error during resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
# Try to update the main module. This updates everything, including
# modules that aren't direct requirements, so the error stack is shorter.
go get -u ./...
cmp stderr update-main-expected
cmp go.mod go.mod.withc
```

----------------------------------------

TITLE: Testing Go Get Command with Missing Bzr
DESCRIPTION: This snippet tests the 'go get' command for a Launchpad.net package when 'bzr' is not installed. It expects the command to fail with a specific error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vcs_missing.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
cd empty
! go get launchpad.net/gocheck
stderr '"bzr": executable file not found'
cd ..
```

----------------------------------------

TITLE: Testing Automatic Toolchain Downloads
DESCRIPTION: Tests automatic toolchain download behavior with various Go versions, including specific version number handling and download formatting.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_issue66175.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
env GOTOOLCHAIN=auto
rm go.mod
go mod init m
go mod edit -go=1.300 -toolchain=none
! go version
stderr 'go: downloading go1.300.0 '
```

----------------------------------------

TITLE: File Count Verification Utility
DESCRIPTION: Utility program that counts files in a directory and verifies the count matches an expected value. Used to validate the execution count of fuzzing tests.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_fuzztime.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
func main() {
	dir, err := os.ReadDir(os.Args[1])
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	got := len(dir)
	want, _ := strconv.Atoi(os.Args[2])
	if got != want {
		fmt.Fprintf(os.Stderr, "got %d files; want %d\n", got, want)
		os.Exit(1)
	}
}
```

----------------------------------------

TITLE: Deprecated Module Definition
DESCRIPTION: Module definition file declaring a deprecated Go module with Go 1.17 requirement
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_a_v1.9.0.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
// Deprecated: in example.com/deprecated/a@v1.9.0
module example.com/deprecated/a

go 1.17
```

----------------------------------------

TITLE: Testing 'go list std' in GOROOT/src (GOPATH Mode) (Shell)
DESCRIPTION: While in $GOROOT/src and with Go module mode disabled (GOPATH mode), this runs `go list std`. It asserts that the synthesized GOPATH-style path for `GOROOT/src` is *not* included in the output, ensuring `go list std` only lists standard library packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_8

LANGUAGE: sh
CODE:
```
go list std
! stdout goroot/src
```

----------------------------------------

TITLE: Environment and Test Commands Configuration
DESCRIPTION: Shell commands setting up the test environment with GO111MODULE off and executing various go commands to verify package import behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main_archive.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
env GO111MODULE=off

env GOBIN=$WORK/bin
go test main_test
go install main_test

go list -f '{{.Stale}}' main_test
stdout false

go test main_test
```

----------------------------------------

TITLE: Deprecated NetBSD Routing Functions
DESCRIPTION: Set of deprecated routing-related functions for NetBSD systems. These functions handle routing message parsing and routing information base operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_39

LANGUAGE: go
CODE:
```
func ParseRoutingMessage
func ParseRoutingSockaddr
func RouteRIB
```

----------------------------------------

TITLE: System Constants for NetBSD
DESCRIPTION: Defines system call constants for NetBSD operating system across different architectures.
SOURCE: https://github.com/golang/go/blob/master/api/go1.17.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
const SYS_WAIT6 = 481
const WEXITED = 32
```

----------------------------------------

TITLE: Defining Module in .mod File for Go
DESCRIPTION: Specifies the module path for the 'depofdirectpatch' package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_depofdirectpatch_v1.0.0.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
module patch.example.com/depofdirectpatch
```

----------------------------------------

TITLE: Module Declaration in .mod File
DESCRIPTION: Declares the module name in the .mod file for the Go toolchain.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-amd64.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
module golang.org/toolchain
```

----------------------------------------

TITLE: Defining IP Protocol Constants in Go for NetBSD ARM64
DESCRIPTION: This snippet defines constants for IP protocol settings (IP_*) used in the syscall package for NetBSD ARM64 with CGO. These constants are used to configure IP-level socket options and behavior.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_31

LANGUAGE: Go
CODE:
```
const IP_ADD_MEMBERSHIP = 12
const IP_DEFAULT_MULTICAST_LOOP = 1
const IP_DEFAULT_MULTICAST_LOOP ideal-int
const IP_DEFAULT_MULTICAST_TTL = 1
const IP_DEFAULT_MULTICAST_TTL ideal-int
const IP_DF = 16384
const IP_DF ideal-int
// ... more IP_* constants
```

----------------------------------------

TITLE: Defining File Operation Constants in Go for Darwin ARM64 CGO
DESCRIPTION: This snippet defines constants for file operation flags used in system calls on Darwin ARM64 with CGO. These constants are used to specify file open modes, synchronization behavior, and other file-related operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_167

LANGUAGE: Go
CODE:
```
const O_DP_GETRAWENCRYPTED ideal-int
const O_DSYNC = 4194304
const O_DSYNC ideal-int
const O_EVTONLY = 32768
const O_EVTONLY ideal-int
const O_EXCL = 2048
const O_EXLOCK = 32
const O_EXLOCK ideal-int
const O_FSYNC = 128
const O_FSYNC ideal-int
const O_NDELAY = 4
const O_NDELAY ideal-int
const O_NOCTTY = 131072
const O_NOFOLLOW = 256
const O_NOFOLLOW ideal-int
const O_NONBLOCK = 4
const O_POPUP = 2147483648
const O_POPUP ideal-int
const O_SHLOCK = 16
const O_SHLOCK ideal-int
const O_SYMLINK = 2097152
const O_SYMLINK ideal-int
const O_SYNC = 128
const O_TRUNC = 1024
```

----------------------------------------

TITLE: NetBSD ARM64 File Descriptor Set Structure Definition in Go
DESCRIPTION: Defines the FdSet structure used for select() operations to monitor multiple file descriptors. Contains a bitmap for tracking file descriptors.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_90

LANGUAGE: go
CODE:
```
type FdSet struct {
	Bits [8]uint32
}
```

----------------------------------------

TITLE: Testing executable naming for fortune v2 module
DESCRIPTION: Builds the rsc.io/fortune/v2 module and checks that the executable is named 'fortune' instead of 'v2'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_versioned.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# The default executable name shouldn't be v2$GOEXE
go build rsc.io/fortune/v2
! exists v2$GOEXE
exists fortune$GOEXE
```

----------------------------------------

TITLE: Extra Replacement Error Test
DESCRIPTION: Sample modules.txt with a module marked as replaced but not replaced in the workspace, along with the expected error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_6

LANGUAGE: plaintext
CODE:
```
## workspace
# example.com/p v1.0.0 => ./p
## explicit; go 1.21
# example.com/q v1.0.0 => ./q
## explicit; go 1.21
# example.com/r v1.0.0 => ./r
example.com/r
## go 1.21
```

LANGUAGE: plaintext
CODE:
```
go: inconsistent vendoring in $GOPATH${/}src:
	example.com/r@v1.0.0: is marked as replaced in vendor/modules.txt, but not replaced in the workspace

	To ignore the vendor directory, use -mod=readonly or -mod=mod.
	To sync the vendor directory, run:
		go work vendor
```

----------------------------------------

TITLE: Rebuilding Go Binary in Different Directory
DESCRIPTION: Rebuilds the same Go binary in a different directory to verify cache usage and consistency of build outputs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_trimpath_issue48557.txt#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
mkdir bar
cp foo/main.go bar/main.go
cd bar
go build -x -o a.exe main.go
! stderr ${/}compile$GOEXE

go tool buildid a.exe
cp stdout ../bar-buildid.txt
go version a.exe
cp stdout ../bar-version.txt
cd ..
```

----------------------------------------

TITLE: Extra Explicit Module Error Test
DESCRIPTION: Sample modules.txt with a module marked as explicit but not required in any go.mod file, along with the expected error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_5

LANGUAGE: plaintext
CODE:
```
## workspace
# example.com/p v1.0.0 => ./p
## explicit; go 1.21
# example.com/q v1.0.0 => ./q
## explicit; go 1.21
# example.com/r v1.0.0
example.com/r
## explicit; go 1.21
```

LANGUAGE: plaintext
CODE:
```
go: inconsistent vendoring in $GOPATH${/}src:
	example.com/r@v1.0.0: is marked as explicit in vendor/modules.txt, but not explicitly required in a go.mod

	To ignore the vendor directory, use -mod=readonly or -mod=mod.
	To sync the vendor directory, run:
		go work vendor
```

----------------------------------------

TITLE: Markdown Format Example
DESCRIPTION: Shows the text formatted as markdown with code block indentation.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code2.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
Text.

	A tab-indented
	(no, not eight-space indented)
	code block and haiku.

More text.
```

----------------------------------------

TITLE: Terminal I/O Control Constants for NetBSD ARM64
DESCRIPTION: Constants used for terminal I/O control operations in NetBSD on ARM64. These values are used with ioctl calls to control terminal behavior such as flushing buffers, setting modes, and controlling terminal properties.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_154

LANGUAGE: Go
CODE:
```
const TIOCPKT_FLUSHREAD = 1
const TIOCPKT_FLUSHWRITE = 2
const TIOCPKT_IOCTL = 64
const TIOCPKT_NOSTOP = 16
const TIOCPKT_START = 8
const TIOCPKT_STOP = 4
const TIOCPTMGET = 1076393030
const TIOCPTSNAME = 1076393032
const TIOCRCVFRAME = 2148037701
const TIOCREMOTE = 2147775593
const TIOCSBRK = 536900731
const TIOCSCTTY = 536900705
const TIOCSDTR = 536900729
const TIOCSETA = 2150396948
const TIOCSETAF = 2150396950
const TIOCSETAW = 2150396949
const TIOCSETD = 2147775515
const TIOCSFLAGS = 2147775580
const TIOCSIG = 536900703
const TIOCSLINED = 2149610563
const TIOCSPGRP = 2147775606
const TIOCSQSIZE = 2147775616
const TIOCSSIZE = 2148037735
const TIOCSTART = 536900718
const TIOCSTAT = 2147775589
const TIOCSTI = 2147578994
const TIOCSTOP = 536900719
const TIOCSWINSZ = 2148037735
const TIOCUCNTL = 2147775590
const TIOCXMTFRAME = 2148037700
const TOSTOP = 4194304
```

----------------------------------------

TITLE: Markdown Formatted Output
DESCRIPTION: The content formatted as Markdown with escaped numbers and proper list formatting.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list4.txt#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
Text.

 1. List

2\. Not indented, not a list.

 3. Another list.
```

----------------------------------------

TITLE: Listing Standard Packages with FIPS 140 in Go
DESCRIPTION: Checks that the standard package list includes the FIPS snapshot package and excludes regular FIPS packages.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fipssnap.txt#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
go list std
stdout crypto/internal/fips140/$snap/sha256
! stdout crypto/internal/fips140/sha256
! stdout crypto/internal/fips140/check
```

----------------------------------------

TITLE: Importing Package for Vendoring Test
DESCRIPTION: This Go file imports a package from the module being tested for vendoring, ensuring it will be included in the vendor directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_issue46867.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package issue

import _ "example.net/m/n"
```

----------------------------------------

TITLE: External Test File with Vendor Imports
DESCRIPTION: Defines an external test file that imports vendored packages p and p1, and includes a no-op test function.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue11864.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package tx_test

import _ "vendor.org/p"
import _ "vendor.org/p1"
import "testing"

func TestNop(t *testing.T) {}
```

----------------------------------------

TITLE: Providing Module Version Metadata as JSON - JSON
DESCRIPTION: Encapsulates the module's version metadata using a JSON object, which is typically used by Go tooling for version tracking and module resolution. The 'Version' key specifies the exact module version, critical for dependency management and reproducible builds. The file requires no dependencies, accepts no parameters, and expects to be read by tooling rather than end users.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.darwin-amd64.txt#2025-04-22_snippet_1

LANGUAGE: JSON
CODE:
```
{\"Version\":\"v0.0.1-go1.999testmod.darwin-amd64\"}
```

----------------------------------------

TITLE: Defining Module Information in .info File
DESCRIPTION: JSON file containing metadata about the module, including version, name, and timestamp information.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_useinternal_v0.1.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v0.1.0","Name":"","Short":"","Time":"2018-07-25T17:24:00Z"}
```

----------------------------------------

TITLE: Specifying Go Toolchain Version in JSON (.info)
DESCRIPTION: Defines the Go toolchain module version `v0.0.1-go1.18.9.linux-amd64` using JSON format. This structure is typically found in the `.info` file associated with a Go module version within the module cache, storing metadata about the version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.9.linux-amd64.txt#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{"Version":"v0.0.1-go1.18.9.linux-amd64"}
```

----------------------------------------

TITLE: Module Information
DESCRIPTION: This JSON snippet contains version information for the Go toolchain module. It's used for tracking the specific version and platform, important for builds and consistency. It requires being part of the module's metadata and is read by Go-related tooling.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-amd64.txt#2025-04-22_snippet_2

LANGUAGE: JSON
CODE:
```
{\"Version\":\"v0.0.1-go1.999testmod.freebsd-amd64\"}
```

----------------------------------------

TITLE: Syscall Credential Structure Definition
DESCRIPTION: Defines the Credential structure with NoSetGroups field for OpenBSD systems on AMD64 architecture
SOURCE: https://github.com/golang/go/blob/master/api/go1.9.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
type Credential struct {
    NoSetGroups bool
}
```

----------------------------------------

TITLE: Network Interface Constants for NetBSD ARM64
DESCRIPTION: Defines constants for network interface types and flags used in NetBSD ARM64 syscalls. Includes definitions for interface capabilities, states and naming conventions.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_23

LANGUAGE: Go
CODE:
```
const (
    IFNAMSIZ = 16
    IFF_ALLMULTI = 512
    IFF_CANTCHANGE = 36690
    IFF_DEBUG = 4
    IFF_LINK0 = 4096
    IFF_LOOPBACK = 8
    IFF_MULTICAST = 32768
    IFF_NOARP = 128
    IFF_PROMISC = 256
    IFF_RUNNING = 64
)
```

----------------------------------------

TITLE: Minimal Go Source File for Build Test
DESCRIPTION: A minimal Go source file used as the test subject for the language version flag test. This file simply declares a main package without any actual implementation.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_vers.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main
```

----------------------------------------

TITLE: Minimal Go Program for Installation Test
DESCRIPTION: A trivial Go program with an empty main function. This serves as the code to be installed in the test scenario.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_relative_gobin_fail.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package main

func main() {}
```

----------------------------------------

TITLE: Checking Git Commit History
DESCRIPTION: Displays the Git commit log in a one-line format with decorations and compares it to an expected output file.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/insecurerepo.txt#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
git log --oneline --decorate=short
cmp stdout .git-log
```

----------------------------------------

TITLE: Setting Git Environment Variables for Author and Committer
DESCRIPTION: Sets Git environment variables for author and committer name and email.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v3pkg.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GIT_AUTHOR_NAME='Bryan C. Mills'
env GIT_AUTHOR_EMAIL='bcmills@google.com'
env GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
env GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL
```

----------------------------------------

TITLE: Debug ELF and PE constants in Go
DESCRIPTION: Constants for RISCV architecture in debug/elf package and ARM NT binary format in debug/pe package.
SOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_3

LANGUAGE: go
CODE:
```
const R_RISCV_32_PCREL = 57
const R_RISCV_32_PCREL R_RISCV
const IMAGE_FILE_MACHINE_ARMNT = 452
const IMAGE_FILE_MACHINE_ARMNT ideal-int
```

----------------------------------------

TITLE: Adding Nushu RangeTable to unicode package
DESCRIPTION: Adds support for the Nüshu script block by defining a new RangeTable in the unicode package. This allows identifying and handling characters from this Unicode block.
SOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_17

LANGUAGE: go
CODE:
```
pkg unicode, var Nushu *RangeTable
```

----------------------------------------

TITLE: Defining Filesystem Constants in Go for NetBSD ARM64
DESCRIPTION: Filesystem-related constants including maximum filename length. This defines the maximum length of a filename component in the filesystem.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_43

LANGUAGE: go
CODE:
```
const NAME_MAX = 511
```

----------------------------------------

TITLE: Correcting Module Path
DESCRIPTION: Updates the go.mod file with a corrected module path without version suffix and commits it as 'bad mod path'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_15

LANGUAGE: bash
CODE:
```
at 2018-02-19T17:30:45-05:00
echo 'module "github.com/vgotest1"'
cp stdout go.mod
git add go.mod
git commit -m 'bad mod path'
```

----------------------------------------

TITLE: Defining Empty Function in Go
DESCRIPTION: This Go code snippet defines a package 'p' with an empty function 'F()'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo123_v0.0.1.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package p

func F() {}
```

----------------------------------------

TITLE: Testing Go Module Management in 'testdata' Directory
DESCRIPTION: A bash script testing Go module management in a 'testdata' directory. It sets up a module, gets dependencies, verifies they're preserved after 'go mod tidy', and checks that vendoring works properly.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_in_testdata_dir.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
env GO111MODULE=on

# A module should be allowed in a directory named testdata.
cd $WORK/testdata
go mod init testdata.tld/foo

# Getting a package within that module should resolve its dependencies.
go get
grep 'rsc.io/quote' go.mod

# Tidying the module should preserve those dependencies.
go mod tidy
grep 'rsc.io/quote' go.mod

[short] stop

# Vendoring the module's dependencies should work too.
go mod vendor
exists vendor/rsc.io/quote

# The same should work in directories with names starting with underscores.
cd $WORK/_ignored
go mod init testdata.tld/foo

go get
grep 'rsc.io/quote' go.mod

go mod tidy
grep 'rsc.io/quote' go.mod

go mod vendor
exists vendor/rsc.io/quote
```

----------------------------------------

TITLE: Setting Up Environment and Executing 'go get' Command in Go
DESCRIPTION: This snippet sets up the Go environment with specific variables and executes a 'go get' command to test meta tag parsing in HTTPS 404 pages. It disables module sum verification for certain domains, enables module mode, sets the proxy to direct, and attempts to get a specific package.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_404_meta.txt#2025-04-22_snippet_0

LANGUAGE: Go
CODE:
```
env GONOSUMDB=bazil.org,github.com,golang.org
env GO111MODULE=on
env GOPROXY=direct
go get bazil.org/fuse/fs/fstestutil
```

----------------------------------------

TITLE: Empty Root Package Example Go File
DESCRIPTION: A Go file in the emptyroot/pkg directory for testing package resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_18

LANGUAGE: go
CODE:
```
package pkg
```

----------------------------------------

TITLE: Skipped Fuzz Test Implementation in Go
DESCRIPTION: Shows how to implement a fuzz test that is skipped using f.Skip().
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package skipped_fuzz

import "testing"

func Fuzz(f *testing.F) {
    f.Skip()
}
```

----------------------------------------

TITLE: Generating Fuzz Corpus in Go
DESCRIPTION: This Go program generates a fuzz corpus with potential duplicate entries. It creates 10 files, with values 0-5 duplicated and 6-9 unique, demonstrating handling of duplicate corpus entries.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_dup_cache.txt#2025-04-22_snippet_3

LANGUAGE: Go
CODE:
```
package main

import (
    "path/filepath"
	"fmt"
	"os"
)

func main() {
	for i := 0; i < 10; i++ {
		b := byte(0)
		if i > 5 {
			b = byte(i)
		}
        tmpl := "go test fuzz v1\nint(%d)\n"
		if err := os.WriteFile(filepath.Join(os.Args[1], fmt.Sprint(i)), []byte(fmt.Sprintf(tmpl, b)), 0777); err != nil {
			panic(err)
		}
	}
}
```

----------------------------------------

TITLE: Deprecated syscall Functions for FreeBSD
DESCRIPTION: List of deprecated syscall functions for FreeBSD, including BPF operations and routing-related functions. These are marked for removal in future Go versions.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_34

LANGUAGE: Go
CODE:
```
pkg syscall (freebsd-386-cgo), func SetBpfHeadercmpl //deprecated
pkg syscall (freebsd-386-cgo), func SetBpfImmediate //deprecated
pkg syscall (freebsd-386-cgo), func SetBpfInterface //deprecated
pkg syscall (freebsd-386-cgo), func SetBpfPromisc //deprecated
pkg syscall (freebsd-386-cgo), func SetBpfTimeout //deprecated
pkg syscall (freebsd-386-cgo), func StringSlicePtr //deprecated
```

----------------------------------------

TITLE: Setting Up Test Environment in Go
DESCRIPTION: Initializes the test environment by setting the LC_ALL environment variable to 'en' to ensure consistent test results across different locales.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
func init() {
	os.Setenv("LC_ALL", "en")
}
```

----------------------------------------

TITLE: Checking Directory Path for Vendored Packages
DESCRIPTION: This command checks how Go reports the directory of a standard-vendored package. It verifies that vendored packages are correctly located in the GOROOT/src/vendor directory.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/std_vendor.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
go list -f '{{.Dir}}' vendor/golang.org/x/net/http2/hpack
```

----------------------------------------

TITLE: HTML List Formatting with Large Numbers
DESCRIPTION: HTML implementation of an ordered list containing extremely large numeric values. Uses explicit value attribute to maintain large number formatting.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list5.txt#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<p>Text.
<ol>
<li>One
<li value="999999999999999999999">Big
<li>Bigger
<li>Biggest
</ol>
```

----------------------------------------

TITLE: Plain Text List Format
DESCRIPTION: Shows the list in plain text format with simplified spacing and alignment.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list8.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
Loose lists.

  - A

    B

  - C D

  - E

  - F
```

----------------------------------------

TITLE: IO Link Pattern Tests - Markdown Format
DESCRIPTION: Examples showing [io] links converted to markdown format with href attributes in different text positions.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink4.txt#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
[io](/io) at start of comment. [io](/io) at start of line. At end of line: [io](/io) At end of comment: [io](/io)
```

----------------------------------------

TITLE: Specifying Version Information in JSON
DESCRIPTION: This JSON snippet provides version information for the module, indicating an empty v1.0.0 version.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-empty.txt#2025-04-22_snippet_1

LANGUAGE: JSON
CODE:
```
{"Version":"v1.0.0-empty"}
```

----------------------------------------

TITLE: Go Program to Verify Absence of Memory Mapping Annotations
DESCRIPTION: A Go program that checks if /proc/self/maps contains Go annotations. It reads the memory maps file and fails if it finds any '[anon: Go:' annotations, verifying that decoratemappings=0 is being honored.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_decoratemappings_124.txt#2025-04-22_snippet_1

LANGUAGE: go
CODE:
```
package main

import (
	"log"
	"os"
	"strings"
)

func main() {
	b, err := os.ReadFile("/proc/self/maps")
	if err != nil {
		log.Fatalf("Error reading: %v", err)
	}

	if strings.Contains(string(b), "[anon: Go:") {
		log.Printf("/proc/self/maps:\n%s", string(b))
		log.Fatalf("/proc/self/maps contains Go annotation")
	}
}
```

----------------------------------------

TITLE: Defining NetBSD ARM64 Socket Control Message Constants in Go Syscall Package
DESCRIPTION: Socket control message constants for NetBSD. These define the types of ancillary data that can be attached to messages using sendmsg/recvmsg, including file descriptor passing (RIGHTS), credentials passing (CREDS), and timestamp information.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_56

LANGUAGE: Go
CODE:
```
const SCM_CREDS = 4
const SCM_CREDS ideal-int
const SCM_RIGHTS = 1
const SCM_RIGHTS ideal-int
const SCM_TIMESTAMP = 8
const SCM_TIMESTAMP ideal-int
```

----------------------------------------

TITLE: Initializing Fossil Repository for Go Build Test
DESCRIPTION: Sets up the environment and initializes a Fossil repository for testing Go's VCS integration. It creates necessary directories and files for the test.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_fossil.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
env GOBIN=$WORK/gopath/bin
env oldpath=$PATH
env HOME=$WORK
env USER=gopher
[!GOOS:windows] env fslckout=.fslckout
[GOOS:windows] env fslckout=_FOSSIL_
exec pwd
exec fossil init repo.fossil
cd repo/a
```

----------------------------------------

TITLE: Testing 'go mod download' with GOTOOLCHAIN=min+auto outside a module
DESCRIPTION: Tests that 'go mod download' with GOTOOLCHAIN=go1.21+auto correctly switches to a newer toolchain when needed outside a module context.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
env GOTOOLCHAIN=go1.21+auto
go mod download rsc.io/needgo121@latest rsc.io/needgo122@latest rsc.io/needgo123@latest rsc.io/needall@latest
stderr '^go: rsc.io/needall@v0.0.1 requires go >= 1.23; switching to go1.23.9$'
! stderr '\(running'
```

----------------------------------------

TITLE: Plain Text List Format
DESCRIPTION: Shows list in plain text format with normalized indentation.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list.txt#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
Text. - Not a list.
  - Here is the list.
  - Using multiple bullets.
  - Indentation does not matter.
  - Lots of bullets.

More text.
```

----------------------------------------

TITLE: Input Format Link Processing
DESCRIPTION: Raw input format showing package reference handling
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link7.txt#2025-04-22_snippet_0

LANGUAGE: text
CODE:
```
[math] is a package but this is not a doc link.

[io] is a doc link.

[math]: https://example.com
```

----------------------------------------

TITLE: Documentation Link Input Format
DESCRIPTION: Raw input format showing documentation references before URL transformation
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink6.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
[encoding/json.Marshal] is a doc link, and so is [rsc.io/quote.NonExist].
```

----------------------------------------

TITLE: Raw Input Format
DESCRIPTION: Original input text showing different list and paragraph combinations with varying spacing patterns.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list6.txt#2025-04-22_snippet_0

LANGUAGE: text
CODE:
```
Text.
 - List immediately after.
 - Another.

More text.

 - List after blank line.
 - Another.

Even more text.
 - List immediately after.

 - Blank line between items.

Yet more text.

 - Another list after blank line.

 - Blank line between items.

Still more text.
 - One list item.

   Multiple paragraphs.
```

----------------------------------------

TITLE: Raw Text Input Format
DESCRIPTION: Shows raw text input with mixed bullet point styles and varying indentation levels.
SOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list.txt#2025-04-22_snippet_0

LANGUAGE: text
CODE:
```
Text.
- Not a list.
 - Here is the list.
     • Using multiple bullets.
          * Indentation does not matter.
     + Lots of bullets.
More text.
```

----------------------------------------

TITLE: Test package that imports unicode
DESCRIPTION: A Go package that imports the standard library 'unicode' package, used to test standard library imports with the list command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package useunicode
import _ "unicode"
```

----------------------------------------

TITLE: Level2y Package Values
DESCRIPTION: Value definitions for level2y packages in both level1a and level1b hierarchies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_59905.txt#2025-04-22_snippet_5

LANGUAGE: go
CODE:
```
package level2x

var Value = "1a/2y"
```

LANGUAGE: go
CODE:
```
package level2x

var Value = "1b/2y"
```

----------------------------------------

TITLE: Module A Source File
DESCRIPTION: Source file for module 'a' that imports module 'd', extending the dependency chain for testing replacement resolution.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_4

LANGUAGE: go
CODE:
```
package a
import _ "example.com/d"
```

----------------------------------------

TITLE: Module B Configuration
DESCRIPTION: Second module configuration also with a name that sorts after 'go' alphabetically, reinforcing the test case requirements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_verify_work.txt#2025-04-22_snippet_3

LANGUAGE: plain text
CODE:
```
module hexample.com/b // important for test that module name sorts after 'go'

go 1.21
```

----------------------------------------

TITLE: Minimal Go Program for Testing
DESCRIPTION: Defines a minimal Go program with an empty main function for testing purposes.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_acl_windows.txt#2025-04-22_snippet_6

LANGUAGE: Go
CODE:
```
package main
func main() {}
```

----------------------------------------

TITLE: Testing 'go list all' in GOPATH/src (GOPATH Mode) (Shell)
DESCRIPTION: While in $GOPATH/src and with Go module mode disabled (GOPATH mode), this runs `go list all`. It asserts that the synthesized path for the current directory (`gopath/src`) is *not* listed in the output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_11

LANGUAGE: sh
CODE:
```
go list all
! stdout gopath/src
```

----------------------------------------

TITLE: Verifying Module Content Checksum in 'go.sum' (Shell)
DESCRIPTION: Uses 'grep' to search the 'go.sum' file for a line matching the checksum entry for the content (zip archive) of the specific version (v1.5.2) of the 'rsc.io/QUOTE' module. This verifies that 'go get' added the required checksum for the module's source code.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_sum_noroot.txt#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
grep '^rsc.io/QUOTE v1.5.2 ' go.sum
```

----------------------------------------

TITLE: Testing Dry Run Clean with -n Flag
DESCRIPTION: Tests the 'go clean -modcache -n' command which should print but not execute the clean operation. Verifies that module files still exist after the command.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_clean_cache.txt#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
go clean -modcache -n
stdout '^rm -rf .*pkg.mod$'
exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.info
exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.mod
exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.zip
```

----------------------------------------

TITLE: Testing Go Module Download with JSON Output
DESCRIPTION: Executes a Go module download command with JSON output for a specific version of 'rsc.io/quote'. The command is expected to fail due to sum database verification issues, and the output is checked for an error message.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_json.txt#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
! go mod download -json 'rsc.io/quote@<=v1.5.0'
stdout '"Error": ".*verifying (module|go.mod)'
```

----------------------------------------

TITLE: Describing Module Version Metadata - Go Module .info - JSON
DESCRIPTION: This snippet provides metadata for the Go module version v1.9.0 in JSON format. It specifies the version string and serves as auxiliary data for Go tooling to associate information with the retracted release. Inputs are expected from Go's module proxy or build tools, and the output is used alongside versioned artifacts. Main constraint: only the version number is stored; additional fields can be added per Go's module proxy requirements.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_all_v1.9.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{\"Version\":\"v1.9.0\"}
```

----------------------------------------

TITLE: PTY Control Constants for Darwin ARM64 in Go
DESCRIPTION: Constants for pseudoterminal (PTY) control in the syscall package for Darwin ARM64. These constants are used for operations such as granting, unlocking, and getting PTY names.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_113

LANGUAGE: Go
CODE:
```
pkg syscall (darwin-arm64), const TIOCPTYGNAME = 1082160211
pkg syscall (darwin-arm64), const TIOCPTYGRANT = 536900692
pkg syscall (darwin-arm64), const TIOCPTYUNLK = 536900690
pkg syscall (darwin-arm64), const TIOCREMOTE = 2147775593
pkg syscall (darwin-arm64), const TIOCSBRK = 536900731
pkg syscall (darwin-arm64), const TIOCSCONS = 536900707
pkg syscall (darwin-arm64), const TIOCSCTTY = 536900705
pkg syscall (darwin-arm64), const TIOCSDRAINWAIT = 2147775575
pkg syscall (darwin-arm64), const TIOCSDTR = 536900729
```

----------------------------------------

TITLE: Module Definition for Special Character Test
DESCRIPTION: Go module definition for testing directories with '@' in their path as part of the package path.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_12

LANGUAGE: go
CODE:
```
module badat

go 1.14
```

----------------------------------------

TITLE: Deprecated Generic String Conversion Functions
DESCRIPTION: Platform-independent deprecated string conversion functions for handling byte pointer and slice conversions.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_47

LANGUAGE: go
CODE:
```
func StringBytePtr() {} //deprecated
func StringByteSlice() {} //deprecated
```

----------------------------------------

TITLE: Importing Module in Go Main Package
DESCRIPTION: This snippet demonstrates a simple main package that imports the rsc.io/quote module as a side effect.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_replaced.txt#2025-04-22_snippet_4

LANGUAGE: Go
CODE:
```
package main

import _ "rsc.io/quote"

func main() {}
```

----------------------------------------

TITLE: Disable Go Build Cache
DESCRIPTION: Environment variable setting to disable the Go build cache.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_disabled.txt#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
env GOCACHE=off
```

----------------------------------------

TITLE: Defining Clone Flags in Go for NetBSD
DESCRIPTION: These constants define flags used in clone system calls on NetBSD. They control various aspects of process creation and resource sharing.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_20

LANGUAGE: Go
CODE:
```
const CLONE_VM = 256
const CLONE_FS = 512
const CLONE_FILES = 1024
const CLONE_SIGHAND = 2048
const CLONE_PID = 4096
const CLONE_PTRACE = 8192
const CLONE_VFORK = 16384
```

----------------------------------------

TITLE: Msghdr Struct Definition for darwin-arm64
DESCRIPTION: Definition of the Msghdr struct used for socket message handling in Go's syscall package for darwin-arm64. This structure is used when sending or receiving messages on sockets and contains fields for data buffers, control messages, and addressing.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_127

LANGUAGE: go
CODE:
```
type Msghdr struct {
	Name *uint8
	Namelen uint32
	Iov *Iovec
	Iovlen int32
	Control *uint8
	Controljen uint32
	Flags int32
	Pad_cgo_0 [4]uint8
	Pad_cgo_1 [4]uint8
}
```

----------------------------------------

TITLE: Terminal Control Character Constants for Darwin ARM64 in Go
DESCRIPTION: Constants for terminal control characters (V*) in the syscall package for Darwin ARM64. These define special character positions in the terminal control structure, used for operations like interrupt, erase, and flow control.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_115

LANGUAGE: Go
CODE:
```
pkg syscall (darwin-arm64), const VDISCARD = 15
pkg syscall (darwin-arm64), const VDSUSP = 11
pkg syscall (darwin-arm64), const VEOF = 0
pkg syscall (darwin-arm64), const VEOL = 1
pkg syscall (darwin-arm64), const VEOL2 = 2
pkg syscall (darwin-arm64), const VERASE = 3
pkg syscall (darwin-arm64), const VINTR = 8
pkg syscall (darwin-arm64), const VKILL = 5
pkg syscall (darwin-arm64), const VLNEXT = 14
pkg syscall (darwin-arm64), const VMIN = 16
pkg syscall (darwin-arm64), const VQUIT = 9
pkg syscall (darwin-arm64), const VREPRINT = 6
pkg syscall (darwin-arm64), const VSTART = 12
pkg syscall (darwin-arm64), const VSTATUS = 18
pkg syscall (darwin-arm64), const VSTOP = 13
pkg syscall (darwin-arm64), const VSUSP = 10
pkg syscall (darwin-arm64), const VT0 = 0
pkg syscall (darwin-arm64), const VT1 = 65536
pkg syscall (darwin-arm64), const VTDLY = 65536
pkg syscall (darwin-arm64), const VTIME = 17
pkg syscall (darwin-arm64), const VWERASE = 4
```

----------------------------------------

TITLE: Defining NetBSD ARM64 File System Constants in Go Syscall Package
DESCRIPTION: File system constants for NetBSD. These define architecture-specific flags, block sizes, file execution permissions, file type masks, and whiteout file types used in the filesystem.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_55

LANGUAGE: Go
CODE:
```
const S_ARCH1 = 65536
const S_ARCH1 ideal-int
const S_ARCH2 = 131072
const S_ARCH2 ideal-int
const S_BLKSIZE = 512
const S_BLKSIZE ideal-int
const S_IEXEC = 64
const S_IEXEC ideal-int
const S_IFMT = 61440
const S_IFWHT = 57344
const S_IFWHT ideal-int
```

----------------------------------------

TITLE: Socket Type and Option Constants for Darwin ARM64
DESCRIPTION: Defines constants for socket types, maximums, and socket-level options in Darwin. These include socket address length limits, socket types, and various socket option flags that control socket behavior.
SOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_183

LANGUAGE: Go
CODE:
```
pkg syscall (darwin-arm64-cgo), const SOCK_MAXADDRLEN = 255
pkg syscall (darwin-arm64-cgo), const SOCK_MAXADDRLEN ideal-int
pkg syscall (darwin-arm64-cgo), const SOCK_RDM = 4
pkg syscall (darwin-arm64-cgo), const SOCK_RDM ideal-int
pkg syscall (darwin-arm64-cgo), const SOL_SOCKET = 65535
pkg syscall (darwin-arm64-cgo), const SOMAXCONN = 128
pkg syscall (darwin-arm64-cgo), const SO_ACCEPTCONN = 2
pkg syscall (darwin-arm64-cgo), const SO_ACCEPTCONN ideal-int
pkg syscall (darwin-arm64-cgo), const SO_BROADCAST = 32
pkg syscall (darwin-arm64-cgo), const SO_DEBUG = 1
pkg syscall (darwin-arm64-cgo), const SO_DEBUG ideal-int
pkg syscall (darwin-arm64-cgo), const SO_DONTROUTE = 16
pkg syscall (darwin-arm64-cgo), const SO_DONTTRUNC = 8192
pkg syscall (darwin-arm64-cgo), const SO_DONTTRUNC ideal-int
pkg syscall (darwin-arm64-cgo), const SO_ERROR = 4103
pkg syscall (darwin-arm64-cgo), const SO_ERROR ideal-int
pkg syscall (darwin-arm64-cgo), const SO_KEEPALIVE = 8
pkg syscall (darwin-arm64-cgo), const SO_LABEL = 4112
pkg syscall (darwin-arm64-cgo), const SO_LABEL ideal-int
pkg syscall (darwin-arm64-cgo), const SO_LINGER = 128
pkg syscall (darwin-arm64-cgo), const SO_LINGER_SEC = 4224
pkg syscall (darwin-arm64-cgo), const SO_LINGER_SEC ideal-int
pkg syscall (darwin-arm64-cgo), const SO_NKE = 4129
pkg syscall (darwin-arm64-cgo), const SO_NKE ideal-int
pkg syscall (darwin-arm64-cgo), const SO_NOADDRERR = 4131
pkg syscall (darwin-arm64-cgo), const SO_NOADDRERR ideal-int
pkg syscall (darwin-arm64-cgo), const SO_NOSIGPIPE = 4130
pkg syscall (darwin-arm64-cgo), const SO_NOSIGPIPE ideal-int
pkg syscall (darwin-arm64-cgo), const SO_NOTIFYCONFLICT = 4134
pkg syscall (darwin-arm64-cgo), const SO_NOTIFYCONFLICT ideal-int
pkg syscall (darwin-arm64-cgo), const SO_NP_EXTENSIONS = 4227
pkg syscall (darwin-arm64-cgo), const SO_NP_EXTENSIONS ideal-int
pkg syscall (darwin-arm64-cgo), const SO_NREAD = 4128
pkg syscall (darwin-arm64-cgo), const SO_NREAD ideal-int
pkg syscall (darwin-arm64-cgo), const SO_NUMRCVPKT = 4370
pkg syscall (darwin-arm64-cgo), const SO_NUMRCVPKT ideal-int
pkg syscall (darwin-arm64-cgo), const SO_NWRITE = 4132
pkg syscall (darwin-arm64-cgo), const SO_NWRITE ideal-int
pkg syscall (darwin-arm64-cgo), const SO_OOBINLINE = 256
pkg syscall (darwin-arm64-cgo), const SO_OOBINLINE ideal-int
pkg syscall (darwin-arm64-cgo), const SO_PEERLABEL = 4113
pkg syscall (darwin-arm64-cgo), const SO_PEERLABEL ideal-int
pkg syscall (darwin-arm64-cgo), const SO_RANDOMPORT = 4226
pkg syscall (darwin-arm64-cgo), const SO_RANDOMPORT ideal-int
pkg syscall (darwin-arm64-cgo), const SO_RCVBUF = 4098
pkg syscall (darwin-arm64-cgo), const SO_RCVLOWAT = 4100
pkg syscall (darwin-arm64-cgo), const SO_RCVLOWAT ideal-int
pkg syscall (darwin-arm64-cgo), const SO_RCVTIMEO = 4102
pkg syscall (darwin-arm64-cgo), const SO_RCVTIMEO ideal-int
pkg syscall (darwin-arm64-cgo), const SO_REUSEADDR = 4
pkg syscall (darwin-arm64-cgo), const SO_REUSEPORT = 512
pkg syscall (darwin-arm64-cgo), const SO_REUSEPORT ideal-int
pkg syscall (darwin-arm64-cgo), const SO_REUSESHAREUID = 4133
pkg syscall (darwin-arm64-cgo), const SO_REUSESHAREUID ideal-int
pkg syscall (darwin-arm64-cgo), const SO_SNDBUF = 4097
pkg syscall (darwin-arm64-cgo), const SO_SNDLOWAT = 4099
pkg syscall (darwin-arm64-cgo), const SO_SNDLOWAT ideal-int
pkg syscall (darwin-arm64-cgo), const SO_SNDTIMEO = 4101
pkg syscall (darwin-arm64-cgo), const SO_SNDTIMEO ideal-int
pkg syscall (darwin-arm64-cgo), const SO_TIMESTAMP = 1024
pkg syscall (darwin-arm64-cgo), const SO_TIMESTAMP ideal-int
pkg syscall (darwin-arm64-cgo), const SO_TIMESTAMP_MONOTONIC = 2048
pkg syscall (darwin-arm64-cgo), const SO_TIMESTAMP_MONOTONIC ideal-int
pkg syscall (darwin-arm64-cgo), const SO_TYPE = 4104
pkg syscall (darwin-arm64-cgo), const SO_TYPE ideal-int
pkg syscall (darwin-arm64-cgo), const SO_UPCALLCLOSEWAIT = 4135
pkg syscall (darwin-arm64-cgo), const SO_UPCALLCLOSEWAIT ideal-int
pkg syscall (darwin-arm64-cgo), const SO_USELOOPBACK = 64
pkg syscall (darwin-arm64-cgo), const SO_USELOOPBACK ideal-int
pkg syscall (darwin-arm64-cgo), const SO_WANTMORE = 16384
pkg syscall (darwin-arm64-cgo), const SO_WANTMORE ideal-int
pkg syscall (darwin-arm64-cgo), const SO_WANTOOBFLAG = 32768
pkg syscall (darwin-arm64-cgo), const SO_WANTOOBFLAG ideal-int
```

----------------------------------------

TITLE: Go Module Test Commands for Issue #47738
DESCRIPTION: Shell commands that test Go's module dependency management behavior. The commands verify that when imports are rewritten to use a newer version (v3) while the go.mod still requires an older version (v1.5.2), the 'go mod tidy' command correctly handles the dependencies.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_downgrade_ambiguous.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
go list -m -f '{{.Path}}@{{.Version}}{{if .Indirect}} indirect{{end}}' all
stdout '^rsc.io/quote@v1.5.2$'
! stdout 'rsc.io/quote/v3'
go list -e all
! stdout '^rsc.io/quote$'

# 'go mod tidy' should preserve the requirement on rsc.io/quote but mark it
# indirect. This prevents a downgrade to v1.5.1, which could introduce
# an ambiguity.
go mod tidy
go list -m -f '{{.Path}}@{{.Version}}{{if .Indirect}} indirect{{end}}' all
stdout '^rsc.io/quote@v1.5.2 indirect$'
stdout '^rsc.io/quote/v3@v3.0.0$'
```

----------------------------------------

TITLE: Defining Empty Go Package
DESCRIPTION: This Go code snippet defines an empty package named 'p'. It serves as a placeholder for package content in the module structure.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_install.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package p
```

----------------------------------------

TITLE: Empty Go Package File - Go
DESCRIPTION: Declares an empty Go package named 'p'. This minimal file is used to satisfy the Go module's requirement for package content. No functions, types, or exports are defined, and there are no parameters or outputs.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prerelease_v1.0.0.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package p
```

----------------------------------------

TITLE: Specifying Module Version Metadata (JSON)
DESCRIPTION: This JSON snippet represents the content of a `.info` file for a Go module version. It specifies the exact version string (`v1.0.0`) for the `example.com/retract/incompatible` module. This file is used by the Go tooling and proxy ecosystem.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_incompatible_v1.0.0.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{"Version":"v1.0.0"}
```

----------------------------------------

TITLE: Buggy Test Implementation in Go
DESCRIPTION: A test file that intentionally fails, likely used for testing error handling or CI systems.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162749-b44a0b17b2d1.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package buggy

import "testing"

func Test(t *testing.T) {
	t.Fatal("buggy!")
}
```

----------------------------------------

TITLE: Socket Control Message Functions in syscall Package for NetBSD ARM64
DESCRIPTION: These functions provide handling of socket control messages (ancillary data) for advanced socket operations like passing file descriptors between processes.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_83

LANGUAGE: Go
CODE:
```
func ParseSocketControlMessage([]uint8) ([]SocketControlMessage, error)
func ParseUnixRights(*SocketControlMessage) ([]int, error)
func UnixRights(...int) []uint8
```

----------------------------------------

TITLE: Running Go Benchmark Test with Verbose Output
DESCRIPTION: This shell command runs a Go benchmark test with verbose output, asserting on CONT lines. It checks for specific output patterns and ensures benchmarks do not print CONT.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_chatty_fail.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
# Run chatty tests. Assert on CONT lines.
! go test chatty_test.go -v -bench . chatty_bench

# Sanity check that output occurs.
stdout -count=2 'this is sub-0'
stdout -count=2 'this is sub-1'
stdout -count=2 'this is sub-2'
stdout -count=1 'error from sub-0'
stdout -count=1 'error from sub-1'
stdout -count=1 'error from sub-2'

# Benchmarks should not print CONT.
! stdout CONT
```

----------------------------------------

TITLE: Shell Commands for Test Execution and Validation
DESCRIPTION: Shell script commands to run the test file and validate its output formatting. Specifically checks that non-parallel tests don't produce CONT lines in output.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_success.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Run chatty tests. Assert on CONT lines.
go test chatty_test.go -v

# Non-parallel tests should not print CONT.
! stdout CONT

# The assertion is condensed into one line so that it precisely matches output,
# rather than skipping lines and allow rogue CONT lines.
stdout '=== RUN   TestChatty\n=== RUN   TestChatty/sub-0\n    chatty_test.go:12: this is sub-0\n    chatty_test.go:12: this is sub-0\n=== RUN   TestChatty/sub-1\n    chatty_test.go:12: this is sub-1\n    chatty_test.go:12: this is sub-1\n=== RUN   TestChatty/sub-2\n    chatty_test.go:12: this is sub-2\n    chatty_test.go:12: this is sub-2\n--- PASS: TestChatty'
```

----------------------------------------

TITLE: Package B with Non-Canonical Import
DESCRIPTION: Go package 'b' demonstrating incorrect import path with trailing slash
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/noncanonical_import.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
package b\n\nimport _ "canonical/a/"
```

----------------------------------------

TITLE: NetBSD ARM64 File Lock Structure Definition in Go
DESCRIPTION: Defines the Flock_t structure used for file locking operations. Contains fields for lock type, whence, start position, length, and process ID.
SOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_91

LANGUAGE: go
CODE:
```
type Flock_t struct {
	Start int64
	Len int64
	Pid int32
	Type int16
	Whence int16
}
```

----------------------------------------

TITLE: Unlisted Vendor Package Example Go File
DESCRIPTION: A Go file not listed in modules.txt to test vendor resolution behavior.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_16

LANGUAGE: go
CODE:
```
package unlisted
```

----------------------------------------

TITLE: Defining Terminal and Time Structures for OpenBSD in Go
DESCRIPTION: Complete definition of Termios structure for terminal control and time-related structures for OpenBSD. Termios contains control flags and settings for terminal I/O operations.
SOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_44

LANGUAGE: Go
CODE:
```
type Termios struct {
	Cc [20]uint8
	Cflag uint32
	Iflag uint32
	Ispeed int32
	Lflag uint32
	Oflag uint32
	Ospeed int32
}

type Timespec struct {
	Sec int64
}

type Timeval struct {
	Sec int64
}
```

----------------------------------------

TITLE: Defining Go Module for Test Package
DESCRIPTION: Defines a simple Go module for the test package 'a'.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_fossil.txt#2025-04-22_snippet_8

LANGUAGE: Go
CODE:
```
module example.com/a

go 1.18
```

----------------------------------------

TITLE: Creating Empty Go Package
DESCRIPTION: This snippet creates an empty Go package named 'p'. It serves as a minimal Go source file to demonstrate package declaration.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/src_file.txt#2025-04-22_snippet_2

LANGUAGE: Go
CODE:
```
package p
```

----------------------------------------

TITLE: Declaring Go Package `z` (Go)
DESCRIPTION: This Go source file simply declares package `z`. It serves as a dependency for package `w` and is intended to be placed within the project structure, likely at `x/y/z/z.go` or potentially within the vendor directory as managed by the shell script.
SOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_vendor_issue15201.txt#2025-04-22_snippet_2

LANGUAGE: go
CODE:
```
-- z.go --
package z
```