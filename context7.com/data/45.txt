TITLE: Customizing Box with the sx Prop
DESCRIPTION: Demonstrates using the sx prop to customize a Box instance with theme-aware styling. The sx prop provides access to all style functions and theme properties from MUI System.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/box/box.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
{"demo": "BoxSx.js", "defaultCodeOpen": true }
```

----------------------------------------

TITLE: Rendering a Link in List Item Button (React/JSX)
DESCRIPTION: Demonstrates how to render a link within a ListItemButton component using the 'component' and 'href' props. This allows for seamless integration with navigation in React applications.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/lists/lists.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<ListItemButton component="a" href="#simple-list">
  <ListItemText primary="Spam" />
</ListItemButton>
```

----------------------------------------

TITLE: Setting Text Color from Theme Palette with sx Prop in Material UI JSX
DESCRIPTION: Demonstrates setting the text `color` using a theme palette path (e.g., 'primary.main') via the `color` key in the `sx` prop on a Material UI Box component. The string value maps directly to the theme's color definition.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
<Box sx={{ color: 'primary.main' }} />
// equivalent to color: theme => theme.palette.primary.main
```

----------------------------------------

TITLE: Equivalent Usage of sx with theme.spacing Function - MUI - JSX
DESCRIPTION: Shows how to use the sx prop with an explicit function referencing theme.spacing inside a React component. This is equivalent to the shorthand key usage and allows for dynamic calculations based on the current theme. Requires MUI's theme context and React. Input: number (3). Output: marginBottom set to theme.spacing(3).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/properties/properties.md#2025-04-22_snippet_4

LANGUAGE: JSX
CODE:
```
<Button sx={{ marginBottom: theme => theme.spacing(3)}} />
```

----------------------------------------

TITLE: Importing Box Component in React
DESCRIPTION: Shows how to import the Box component from MUI System. This is the basic import statement needed before using the Box component in your React application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/box/box.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Box from '@mui/system/Box';
```

----------------------------------------

TITLE: Using the sx Prop for Inline Styling in Material UI v5 (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates applying custom styles directly to a Material UI `Box` component using the `sx` prop, a feature introduced in v5. It sets the component's width, height, and background color (referencing theme colors like `primary.dark`). It also defines styles for the hover state (`&:hover`), changing the background color (`primary.main`) and applying responsive opacity values. This showcases how the `sx` prop allows for intuitive, inline styling using a superset of CSS, avoiding the need for the `styled()` API for one-off customizations. Requires `@mui/material/Box` and access to the Material UI theme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5-migration-update.md#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
```tsx
import * as React from 'react';
import Box from '@mui/material/Box';

export default function BoxSx() {
  return (
    <Box
      sx={{
        width: 300,
        height: 300,
        backgroundColor: 'primary.dark',
        '&:hover': {
          backgroundColor: 'primary.main',
          opacity: [0.9, 0.8, 0.7],
        },
      }}
    />
  );
}
```
```

----------------------------------------

TITLE: Overriding Default Styles for MUI Components - JavaScript
DESCRIPTION: Modify the default CSS styles of component slots using the `styleOverrides` key in the theme. This example targets the `root` slot of `MuiButton` to change its font size.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theme-components/theme-components.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const theme = createTheme({
  components: {
    // Name of the component
    MuiButton: {
      styleOverrides: {
        // Name of the slot
        root: {
          // Some CSS
          fontSize: '1rem',
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Creating Custom Theme with Primary and Secondary Colors in Material-UI
DESCRIPTION: Demonstrates how to create a custom theme using createTheme() function with specific primary and secondary color configurations including light, main, dark, and contrastText variants.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/color/color.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  palette: {
    primary: {
      light: '#757ce8',
      main: '#3f50b5',
      dark: '#002884',
      contrastText: '#fff',
    },
    secondary: {
      light: '#ff7961',
      main: '#f44336',
      dark: '#ba000d',
      contrastText: '#000',
    },
  },
});
```

----------------------------------------

TITLE: Setting Background Color using bgcolor Alias with sx Prop in Material UI JSX
DESCRIPTION: Illustrates using the `bgcolor` alias for `backgroundColor` within the `sx` prop to set the background color from the theme palette (e.g., 'primary.main'). This provides a shorter syntax for a common styling need.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
<Box sx={{ bgcolor: 'primary.main' }} />
// equivalent to backgroundColor: theme => theme.palette.primary.main
```

----------------------------------------

TITLE: Adding Accessibility Attributes to React Modal
DESCRIPTION: This code shows how to add proper ARIA attributes to a Modal component for improved accessibility, including labels and descriptions.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/modal/modal.md#2025-04-22_snippet_3

LANGUAGE: JSX
CODE:
```
<Modal aria-labelledby="modal-title" aria-describedby="modal-description">
  <h2 id="modal-title">My Title</h2>
  <p id="modal-description">My Description</p>
</Modal>
```

----------------------------------------

TITLE: Enabling Default Light/Dark Color Schemes in Material UI Theme - JavaScript
DESCRIPTION: This code creates a Material UI theme using `createTheme` and enables both the default light and dark color schemes by setting `colorSchemes: { light: true, dark: true }`. This allows the theme to automatically generate default color tokens for both modes without requiring explicit palette definitions for each.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/palette/palette.md#_snippet_1

LANGUAGE: js
CODE:
```
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  colorSchemes: {
    light: true,
    dark: true,
  },
});
```

----------------------------------------

TITLE: Implementing Theme with Material UI ThemeProvider
DESCRIPTION: Example of how to integrate a Sync-generated theme into a Next.js application using Material UI's ThemeProvider component. Shows complete theme setup with Switch component customization.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/design-resources/material-ui-sync/material-ui-sync.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { createTheme, ThemeProvider } from '@mui/material/styles';

const theme = createTheme({
  cssVariables: true,
  shape: {
    borderRadiusRound: 999,
  },
  components: {
    MuiSwitch: {
      styleOverrides: {
        root: {
          '&.MuiSwitch-sizeMedium:has(.MuiSwitch-colorPrimary)': {
            '&:has(.Mui-checked):not(:has(.Mui-disabled)):not(:has(.Mui-focusVisible))': {
              width: '40px',
              height: '21px',
              padding: '0',
              '& .MuiSwitch-switchBase': {
                transform: 'translateX(19px) translateY(2px)',
                padding: '0',
                '& .MuiSwitch-thumb': {
                  width: '17px',
                  height: '17px',
                  background: '#FAFAFA',
                },
                '& + .MuiSwitch-track': {
                  width: '38px',
                  height: '21px',
                  background: 'var(--mui-palette-success-light)',
                  borderRadius: 'var(--mui-shape-borderRadiusRound)',
                  opacity: '1',
                },
              },
            },
          },
        },
      },
    },
  },
});

export default function MyApp(props) {
  const { Component, pageProps } = props;

  return (
    <ThemeProvider theme={theme}>
      <Component {...pageProps} />
    </ThemeProvider>
  );
}
```

----------------------------------------

TITLE: Implementing Responsive Styles with Material UI Breakpoints
DESCRIPTION: Example showing how to use Material UI breakpoints to change background colors based on screen width using theme.breakpoints.up/down methods.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
const styles = (theme) => ({
  root: {
    padding: theme.spacing(1),
    [theme.breakpoints.down('md')]: {
      backgroundColor: theme.palette.secondary.main,
    },
    [theme.breakpoints.up('md')]: {
      backgroundColor: theme.palette.primary.main,
    },
    [theme.breakpoints.up('lg')]: {
      backgroundColor: green[500],
    },
  },
});
```

----------------------------------------

TITLE: Creating Styled Offset for Fixed App Bar
DESCRIPTION: Demonstrates how to create a styled offset component using theme mixins to handle fixed App Bar spacing.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/app-bar/app-bar.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
const Offset = styled('div')(({ theme }) => theme.mixins.toolbar);

function App() {
  return (
    <React.Fragment>
      <AppBar position="fixed">
        <Toolbar>{/* content */}</Toolbar>
      </AppBar>
      <Offset />
    </React.Fragment>
  );
}
```

----------------------------------------

TITLE: Creating ThemeRegistry Component for Joy UI and Next.js App Router
DESCRIPTION: This code snippet demonstrates how to create a custom ThemeRegistry component that combines Emotion's CacheProvider, Joy UI's CssVarsProvider, and Next.js's useServerInsertedHTML hook. It handles server-side rendering of styles and theme application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/next-js-app-router/next-js-app-router.md#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
// app/ThemeRegistry.tsx
'use client';
import createCache from '@emotion/cache';
import { useServerInsertedHTML } from 'next/navigation';
import { CacheProvider } from '@emotion/react';
import { CssVarsProvider } from '@mui/joy/styles';
import CssBaseline from '@mui/joy/CssBaseline';
import theme from '/path/to/custom/theme'; // OPTIONAL

// This implementation is from emotion-js
// https://github.com/emotion-js/emotion/issues/2928#issuecomment-1319747902
export default function ThemeRegistry(props) {
  const { options, children } = props;

  const [{ cache, flush }] = React.useState(() => {
    const cache = createCache(options);
    cache.compat = true;
    const prevInsert = cache.insert;
    let inserted: string[] = [];
    cache.insert = (...args) => {
      const serialized = args[1];
      if (cache.inserted[serialized.name] === undefined) {
        inserted.push(serialized.name);
      }
      return prevInsert(...args);
    };
    const flush = () => {
      const prevInserted = inserted;
      inserted = [];
      return prevInserted;
    };
    return { cache, flush };
  });

  useServerInsertedHTML(() => {
    const names = flush();
    if (names.length === 0) {
      return null;
    }
    let styles = '';
    for (const name of names) {
      styles += cache.inserted[name];
    }
    return (
      <style
        key={cache.key}
        data-emotion={`${cache.key} ${names.join(' ')}`}
        dangerouslySetInnerHTML={{
          __html: styles,
        }}
      />
    );
  });

  return (
    <CacheProvider value={cache}>
      <CssVarsProvider theme={theme}>
        {/* the custom theme is optional */}
        <CssBaseline />
        {children}
      </CssVarsProvider>
    </CacheProvider>
  );
}

// app/layout.tsx
export default function RootLayout(props) {
  return (
    <html lang="en">
      <body>
        <ThemeRegistry options={{ key: 'joy' }}>{props.children}</ThemeRegistry>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Enabling Accessible DOM Structure for MUI Field Components (JSX)
DESCRIPTION: This code activates enhanced accessibility in MUI DateField and DatePicker components via the enableAccessibleFieldDOMStructure prop. It restructures underlying DOM and manages ARIA attributes for better screen reader support, especially for complex or multi-input scenarios. The feature requires MUI X v7+ and the optional prop, and expects no other parameters but the prop itself; outputs are accessible date field/picker components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7.md#2025-04-22_snippet_4

LANGUAGE: JSX
CODE:
```
<DateField enableAccessibleFieldDOMStructure />
<DatePicker enableAccessibleFieldDOMStructure />
```

----------------------------------------

TITLE: Overriding MUI Theme Configuration Variables - JavaScript
DESCRIPTION: Adjust global style properties defined in the theme configuration variables. This snippet modifies the default `fontSize` for the `button` typography variant across the application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theme-components/theme-components.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const theme = createTheme({
  typography: {
    button: {
      fontSize: '1rem',
    },
  },
});
```

----------------------------------------

TITLE: Integrating Material UI Theme and Font Optimization in Next.js App Router
DESCRIPTION: Diff showing how to implement font optimization with Roboto font and Material UI ThemeProvider in the Next.js App Router layout.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_5

LANGUAGE: diff
CODE:
```
 import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';
+import { Roboto } from 'next/font/google';
+import { ThemeProvider } from '@mui/material/styles';
+import theme from '../theme';

+const roboto = Roboto({
+  weight: ['300', '400', '500', '700'],
+  subsets: ['latin'],
+  display: 'swap',
+  variable: '--font-roboto',
+});

 export default function RootLayout(props) {
   const { children } = props;
   return (
+    <html lang="en" className={roboto.variable}>
       <body>
          <AppRouterCacheProvider>
+           <ThemeProvider theme={theme}>
              {children}
+           </ThemeProvider>
          </AppRouterCacheProvider>
       </body>
     </html>
   );
 }
```

----------------------------------------

TITLE: Rendering a Basic Material UI Button Component in React
DESCRIPTION: This snippet demonstrates how to use the Material UI Button component in a React application. It showcases the basic usage and mentions the ability to change the variant prop to alter the button's style.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/learn/learn.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
{"demo": "../usage/ButtonUsage.js", "defaultCodeOpen": true}
```

----------------------------------------

TITLE: Fixing DOM Node Issues with Transition Components - Ref Forwarding Example
DESCRIPTION: Shows incorrect and correct implementations of custom components when used with Material UI transition components. Custom components must forward the ref to a DOM element.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/troubleshooting.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
// Ex. 2-1 ❌ This will cause an error because `CustomComponent` does not forward `ref` to the DOM:
function CustomComponent() {
  return <div>...</div>;
}

<Fade in>
  <CustomComponent />
</Fade>;
```

LANGUAGE: jsx
CODE:
```
// Ex. 2-2 ✅ Add `React.forwardRef` to forward `ref` to the DOM:
const CustomComponent = React.forwardRef(function CustomComponent(props, ref) {
  return (
    <div ref={ref}>
      ...
    </div>
  )
})

<Fade in>
  <CustomComponent />
</Fade>
```

----------------------------------------

TITLE: Using ThemeProvider with a Custom Theme in React
DESCRIPTION: This example demonstrates how to create a custom theme using createTheme() and apply it to a React application using ThemeProvider. The custom theme modifies the primary color to use red[500] from the MUI color palette.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theming/theming.md#2025-04-22_snippet_7

LANGUAGE: jsx
CODE:
```
import * as React from 'react';
import { red } from '@mui/material/colors';
import { ThemeProvider, createTheme } from '@mui/material/styles';

const theme = createTheme({
  palette: {
    primary: {
      main: red[500],
    },
  },
});

function App() {
  return <ThemeProvider theme={theme}>...</ThemeProvider>;
}
```

----------------------------------------

TITLE: Implementing Controlled Checkboxes in React
DESCRIPTION: Demonstrates how to create controlled checkboxes using the checked and onChange props.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_5

LANGUAGE: JSX
CODE:
```
{"demo": "ControlledCheckbox.js"}
```

----------------------------------------

TITLE: Configuring Color Schemes in Material UI Theme JavaScript
DESCRIPTION: This snippet shows how to configure support for multiple color schemes (light and dark) in Material UI v6 using the `colorSchemes` node within `createTheme`. Setting `dark: true` enables automatic generation and management of dark mode, simplifying theme setup. The `ThemeProvider` is used to apply the theme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
const theme = createTheme({ colorSchemes: { dark: true } });
// light is generated by default.

function App() {
  return <ThemeProvider theme={theme}>...</ThemeProvider>;
}
```

----------------------------------------

TITLE: Defining Styled Components with emotion/styled-components in JSX
DESCRIPTION: Demonstrates how to create styled components using the `styled()` API, which is the core styling primitive in MUI Core v5. This example shows creating a `div` with red text color using both the object syntax and the tagged template literal syntax, compatible with libraries like emotion and styled-components. This API replaces the older `makeStyles` from v4.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
const StyledDiv = styled('div')({
  color: 'red',
});

// or
const StyledDiv = styled.div`
  color: red;
`;
```

----------------------------------------

TITLE: Creating Custom Theme with Color Palette
DESCRIPTION: Demonstrates creating a custom theme with primary and secondary color palettes using createTheme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theming/theming.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
import { createTheme } from '@mui/material/styles';
import { green, purple } from '@mui/material/colors';

const theme = createTheme({
  palette: {
    primary: {
      main: purple[500],
    },
    secondary: {
      main: green[500],
    },
  },
});
```

----------------------------------------

TITLE: Customizing Border Colors with Material-UI Box Component
DESCRIPTION: Examples of applying different border colors using the Box component with the sx prop. Demonstrates using theme colors like primary, secondary, error, and text variants.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/borders/borders.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Box sx={{ borderColor: 'primary.main' }}>…
<Box sx={{ borderColor: 'secondary.main' }}>…
<Box sx={{ borderColor: 'error.main' }}>…
<Box sx={{ borderColor: 'grey.500' }}>…
<Box sx={{ borderColor: 'text.primary' }}>…
```

----------------------------------------

TITLE: Implementing Switch with Accessibility Label in React
DESCRIPTION: Example showing how to implement a Switch component with proper accessibility labels using inputProps. This demonstrates best practices for making switches accessible to assistive technologies.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/switches/switches.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
<Switch value="checkedA" inputProps={{ 'aria-label': 'Switch A' }} />
```

----------------------------------------

TITLE: Enabling CSS Theme Variables in Material UI JavaScript
DESCRIPTION: This snippet shows how to enable the generation of CSS variables from theme values in Material UI v6 by setting the `cssVariables` flag to `true` within the `createTheme` function. This allows theme properties like palette, spacing, and typography to be accessed as CSS variables.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
const theme = createTheme({ cssVariables: true, ... });
```

----------------------------------------

TITLE: Migrating Accordion Props to Slot Pattern in Material UI v7 (Diff)
DESCRIPTION: Shows the change required to migrate the `Accordion` component from using `TransitionComponent` and `TransitionProps` to the new `slots` and `slotProps` pattern introduced and standardized in Material UI v7. This pattern provides greater flexibility and consistency for replacing or modifying component inner elements. This specific example demonstrates replacing a custom transition component and its props.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v7-is-here.md#2025-04-22_snippet_0

LANGUAGE: diff
CODE:
```
 <Accordion
-  TransitionComponent={CustomTransition}
-  TransitionProps={{ unmountOnExit: true }}
+  slots={{ transition: CustomTransition }}
+  slotProps={{ transition: { unmountOnExit: true } }}
 />
```

----------------------------------------

TITLE: Using Stack with White Space Nowrap and Min Width
DESCRIPTION: Example showing how to handle white-space: nowrap with Stack by setting minWidth: 0 to prevent overflow issues.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/stack/stack.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Stack direction="row">
  <span style={{ whiteSpace: 'nowrap' }}>
```

----------------------------------------

TITLE: Importing and Using Joy UI Button Component in JavaScript
DESCRIPTION: This snippet demonstrates how to import and use a Joy UI Button component, encouraging users to experiment with different variants.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/usage/usage.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
{"demo": "ButtonUsage.js", "defaultCodeOpen": true}
```

----------------------------------------

TITLE: Using Responsive Spacing Values in Grid Components with React
DESCRIPTION: Shows how to implement responsive spacing in Grid containers by using an object with breakpoint keys that define different spacing values for different screen sizes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_8

LANGUAGE: jsx
CODE:
```
<Grid container spacing={{ xs: 2, md: 3 }} />
```

----------------------------------------

TITLE: Implementing Responsive Grid Layout with Multiple Breakpoints
DESCRIPTION: This example shows how to create a responsive grid layout using multiple breakpoints. It demonstrates how to set different column widths for various screen sizes using object notation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/grid/grid.md#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
<Grid container spacing={2}>
  <Grid size={{ xs: 12, sm: 6 }}>
    <Item>xs=12 sm=6</Item>
  </Grid>
  <Grid size={{ xs: 12, sm: 6 }}>
    <Item>xs=12 sm=6</Item>
  </Grid>
  <Grid size={{ xs: 12, sm: 6 }}>
    <Item>xs=12 sm=6</Item>
  </Grid>
  <Grid size={{ xs: 12, sm: 6 }}>
    <Item>xs=12 sm=6</Item>
  </Grid>
</Grid>
```

----------------------------------------

TITLE: Implementing Responsive Element Hiding in Material-UI
DESCRIPTION: Examples of responsive display properties to hide elements based on screen size. This demonstrates how to show or hide content for different device sizes using Material-UI's breakpoint system.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Box sx={{ display: { xs: 'block', md: 'none' } }}>
  hide on screens wider than md
</Box>
<Box sx={{ display: { xs: 'none', md: 'block' } }}>
  hide on screens smaller than md
</Box>
```

----------------------------------------

TITLE: Setting Default Color Scheme Mode in MUI InitColorSchemeScript - JS
DESCRIPTION: Shows how to set the `defaultMode` prop on the `InitColorSchemeScript` component. This script is used to prevent SSR hydration flickering and requires setting the `defaultMode` to match the value used in the `ThemeProvider`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#_snippet_9

LANGUAGE: JS
CODE:
```
<InitColorSchemeScript defaultMode="dark">
  ...
</InitColorSchemeScript>
```

----------------------------------------

TITLE: Extending Component Sizes in Joy UI
DESCRIPTION: Demonstrates how to add custom size options to Joy UI components. This example adds 'xs' and 'xl' sizes to Button components with appropriate styling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
extendTheme({
  components: {
    JoyButton: {
      styleOverrides: {
        root: ({ ownerState, theme }) => ({
          ...(ownerState.size === 'xs' && {
            '--Icon-fontSize': '1rem',
            '--Button-gap': '0.25rem',
            minHeight: 'var(--Button-minHeight, 1.75rem)',
            fontSize: theme.vars.fontSize.xs,
            paddingBlock: '2px',
            paddingInline: '0.5rem',
          }),
          ...(ownerState.size === 'xl' && {
            '--Icon-fontSize': '2rem',
            '--Button-gap': '1rem',
            minHeight: 'var(--Button-minHeight, 4rem)',
            fontSize: theme.vars.fontSize.xl,
            paddingBlock: '0.5rem',
            paddingInline: '2rem',
          }),
        }),
      },
    },
  },
});
```

----------------------------------------

TITLE: TextField-based Select Implementation
DESCRIPTION: Demonstrates using Select within TextField component for simplified label handling
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/selects/selects.md#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
<TextField id="select" label="Age" value="20" select>
  <MenuItem value="10">Ten</MenuItem>
  <MenuItem value="20">Twenty</MenuItem>
</TextField>
```

----------------------------------------

TITLE: Basic Chip Component Usage
DESCRIPTION: Basic implementation of Material-UI Chip component with both outlined and filled styling options.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/chips/chips.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
import * as React from 'react';
import Chip from '@mui/material/Chip';
import Stack from '@mui/material/Stack';

export default function BasicChips() {
  return (
    <Stack direction="row" spacing={1}>
      <Chip label="Chip Filled" />
      <Chip label="Chip Outlined" variant="outlined" />
    </Stack>
  );
}
```

----------------------------------------

TITLE: Configuring Data Grid Server-side Data Source with Editing - JavaScript/TypeScript
DESCRIPTION: Illustrates the configuration of a `GridDataSource` object for the MUI X Data Grid to handle server-side data operations. It shows the required `getRows` method for fetching data and the optional `updateRow` method to support server-side row updates, both returning Promises.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v8.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const dataSource: GridDataSource = {
  getRows: async (params: GridGetRowsParams) => {
    // Fetch rows from the server
  },
  updateRow: async (params: GridUpdateRowParams) => {
    // Update row on the server
  },
}
```

----------------------------------------

TITLE: Applying Media Queries with sx Prop - MUI/System - JSX
DESCRIPTION: This example illustrates how to apply styles based on CSS media queries using the `sx` prop. Styles for a specific media query, like `@media print`, are defined within a nested object where the key is the media query string.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/usage/usage.md#_snippet_5

LANGUAGE: jsx
CODE:
```
<Box
    sx={{    // some styles
      '@media print': {
        width: 300,
      },
    }}
  >
  
```

----------------------------------------

TITLE: Forwarding Refs to Material UI Button Component with React.forwardRef in JSX
DESCRIPTION: This snippet illustrates how to forward a React ref to a Material UI Button component, enabling direct access to the underlying DOM node. It uses React.useRef to create the reference, which is passed as the ref prop, following the React.forwardRef API. Dependencies: React (>=16.8.0) and @mui/material.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v4-is-out.md#2025-04-22_snippet_4

LANGUAGE: JSX
CODE:
```
import { Button } from '@mui/material';

function MyButton() {
  const myRef = React.useRef();

  return <Button ref={myRef}>;
}
```

----------------------------------------

TITLE: Using the Standalone DateField Component in MUI X v6 (JSX)
DESCRIPTION: This snippet shows how to import the `DateField` component from the `@mui/x-date-pickers/DateField` package and render it as a standalone input field. It demonstrates basic usage with a `label` prop. This component is part of the MUI X v6 revamp, offering improved usability over previous masked inputs.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/v6-beta-pickers.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import { DateField } from '@mui/x-date-pickers/DateField';

<DateField label="My first field" />;
```

----------------------------------------

TITLE: Applying Margin Spacing with sx Prop and System Keys - MUI - JSX
DESCRIPTION: Demonstrates how to use the sx prop and system property keys (mb) in a MUI Button or Box component to set margin-bottom using the spacing system. Dependencies: @mui/material Button and Box components, theme provider context. The mb key takes a numeric value, which is mapped via theme.spacing to a pixel value in the generated CSS. Expected input: a numeric value (e.g., 3) for the mb or marginBottom key. Output: the element has margin-bottom as determined by the theme spacing.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/properties/properties.md#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
<Button sx={{ mb: 3 }} />

// or
<Box mb={3}>
// or
<Box marginBottom={3}>
```

----------------------------------------

TITLE: Setting Flex Shrink with Material-UI Box Component in JSX
DESCRIPTION: Demonstrates how to control whether flex items should shrink when space is limited using the flexShrink property. flexShrink: 0 prevents shrinking, while flexShrink: 1 allows shrinking.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_8

LANGUAGE: jsx
CODE:
```
<Box sx={{ width: '100%' }}>Item 1</Box>
<Box sx={{ flexShrink: 1 }}>Item 2</Box>
<Box sx={{ flexShrink: 0 }}>Item 3</Box>
```

----------------------------------------

TITLE: Configuring Primary Colors in MUI Joy UI Theme
DESCRIPTION: Defines primary color palette and its variants for both light and dark themes. Includes color codes and various component states like plain, outlined, soft, and solid variants.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
const primary = {
  50: '#F4FAFF',
  100: '#DDF1FF',
  200: '#ADDBFF',
  300: '#6FB6FF',
  400: '#3990FF',
  500: '#096BDE',
  600: '#054DA7',
  700: '#02367D',
  800: '#072859',
  900: '#00153C',
};

extendTheme({
  colorSchemes: {
    light: {
      palette: {
        primary: {
          ...primary,
          plainColor: `var(--joy-palette-primary-600)`,
          plainHoverBg: `var(--joy-palette-primary-100)`,
          plainActiveBg: `var(--joy-palette-primary-200)`,
          plainDisabledColor: `var(--joy-palette-primary-200)`,

          outlinedColor: `var(--joy-palette-primary-500)`,
          outlinedBorder: `var(--joy-palette-primary-200)`,
          outlinedHoverBg: `var(--joy-palette-primary-100)`,
          outlinedHoverBorder: `var(--joy-palette-primary-300)`,
          outlinedActiveBg: `var(--joy-palette-primary-200)`,
          outlinedDisabledColor: `var(--joy-palette-primary-100)`,
          outlinedDisabledBorder: `var(--joy-palette-primary-100)`,

          softColor: `var(--joy-palette-primary-600)`,
          softBg: `var(--joy-palette-primary-100)`,
          softHoverBg: `var(--joy-palette-primary-200)`,
          softActiveBg: `var(--joy-palette-primary-300)`,
          softDisabledColor: `var(--joy-palette-primary-300)`,
          softDisabledBg: `var(--joy-palette-primary}-)50`,

          solidColor: '#fff',
          solidBg: `var(--joy-palette-primary-500)`,
          solidHoverBg: `var(--joy-palette-primary-600)`,
          solidActiveBg: `var(--joy-palette-primary-700)`,
          solidDisabledColor: `#fff`,
          solidDisabledBg: `var(--joy-palette-primary-200)`,
        },
      },
    },
    dark: {
      palette: {
        primary: {
          ...primary,
          plainColor: `var(--joy-palette-primary-300)`,
          plainHoverBg: `var(--joy-palette-primary-800)`,
          plainActiveBg: `var(--joy-palette-primary-700)`,
          plainDisabledColor: `var(--joy-palette-primary-800)`,

          outlinedColor: `var(--joy-palette-primary-200)`,
          outlinedBorder: `var(--joy-palette-primary-700)`,
          outlinedHoverBg: `var(--joy-palette-primary-800)`,
          outlinedHoverBorder: `var(--joy-palette-primary-600)`,
          outlinedActiveBg: `var(--joy-palette-primary-900)`,
          outlinedDisabledColor: `var(--joy-palette-primary-800)`,
          outlinedDisabledBorder: `var(--joy-palette-primary-800)`,

          softColor: `var(--joy-palette-primary-200)`,
          softBg: `var(--joy-palette-primary-900)`,
          softHoverBg: `var(--joy-palette-primary-800)`,
          softActiveBg: `var(--joy-palette-primary-700)`,
          softDisabledColor: `var(--joy-palette-primary-800)`,
          softDisabledBg: `var(--joy-palette-primary-900)`,

          solidColor: `#fff`,
          solidBg: `var(--joy-palette-primary-600)`,
          solidHoverBg: `var(--joy-palette-primary-700)`,
          solidActiveBg: `var(--joy-palette-primary-800)`,
          solidDisabledColor: `var(--joy-palette-primary-700)`,
          solidDisabledBg: `var(--joy-palette-primary-900)`,
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Disabling Double Rendering for SSR Hydration in MUI ThemeProvider - JSX
DESCRIPTION: Explains how to prevent the `ThemeProvider` from rerendering when the theme includes both light and dark color schemes by using the `noSsr` prop. This is useful for client-only apps or SSR with Suspense to prevent flickering and optimize performance.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#_snippet_7

LANGUAGE: JSX
CODE:
```
<ThemeProvider theme={theme} noSsr>
  ...
</ThemeProvider>
```

----------------------------------------

TITLE: Installing @mui/material Package with npm
DESCRIPTION: Command to install the @mui/material package, which is a peer dependency for @mui/docs. This is necessary if you're not already using Material UI in your project.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-docs/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm install @mui/material
```

----------------------------------------

TITLE: Installing Material UI with npm
DESCRIPTION: Installs Material UI along with its peer dependencies for emotion styling system. This command should be run in your project directory to add Material UI to your React application.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-material/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install @mui/material @emotion/react @emotion/styled
```

----------------------------------------

TITLE: Enabling CSS Layers in Material UI v7 with Next.js App Router (TSX)
DESCRIPTION: Demonstrates how to enable the opt-in CSS layer support in Material UI v7 within a Next.js App Router application. It involves wrapping the application layout with `AppRouterCacheProvider` from `@mui/material-nextjs/v15-appRouter` and setting the `enableCssLayer` option to `true`. A `GlobalStyles` component is also used to define the desired order of CSS layers (`theme`, `base`, `mui`, `components`, `utilities`), allowing for better integration with other CSS methodologies like Tailwind CSS.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v7-is-here.md#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
// App Router only, support for Pages Router is coming soon

// app/layout.tsx
import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';
import GlobalStyles from '@mui/material/GlobalStyles';

export default function RootLayout(props) {
  const { children } = props;
  return (
    <html lang="en">
      <body className={roboto.variable}>
        <AppRouterCacheProvider options={{ enableCssLayer: true }}>
          <GlobalStyles styles="@layer theme,base,mui,components,utilities;" />
          <ThemeProvider theme={theme}>{children}</ThemeProvider>
        </AppRouterCacheProvider>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Setting Default Props for MUI Components - JavaScript
DESCRIPTION: Configure the default values for component props globally within the theme. This snippet shows how to disable the ripple effect on all `MuiButtonBase` components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theme-components/theme-components.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const theme = createTheme({
  components: {
    // Name of the component
    MuiButtonBase: {
      defaultProps: {
        // The props to change the default for.
        disableRipple: true, // No more ripple, on the whole application 💣!
      },
    },
  },
});
```

----------------------------------------

TITLE: Customizing Box with MUI System Props
DESCRIPTION: Shows how to customize the Box component using MUI System properties as direct props. This allows for applying CSS utilities directly as component props.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/box/box.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
{"demo": "BoxSystemProps.js", "defaultCodeOpen": true }
```

----------------------------------------

TITLE: Customizing Material UI Breakpoint Values
DESCRIPTION: Example of customizing default breakpoint values in Material UI theme configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
const theme = createTheme({
  breakpoints: {
    values: {
      xs: 0,
      sm: 600,
      md: 900,
      lg: 1200,
      xl: 1536,
    },
  },
});
```

----------------------------------------

TITLE: Importing and Rendering Material UI Button Component in JavaScript
DESCRIPTION: This snippet demonstrates how to import and use a Material UI Button component. It shows a basic example of rendering a button with customizable properties like 'variant'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/usage/usage.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
{"demo": "ButtonUsage.js", "defaultCodeOpen": true}
```

----------------------------------------

TITLE: Applying Mode-Specific Styles using theme.applyStyles in JSX
DESCRIPTION: This snippet compares the previous method of applying dark mode styles (checking `theme.palette.mode`) with the new `theme.applyStyles('dark', { ... })` API in Material UI v6. The 'After' example shows using `theme.applyStyles` within a styled component to define styles specifically for dark mode, which helps prevent SSR flickering when used with CSS variables.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_8

LANGUAGE: jsx
CODE:
```
const StyledInput = styled(InputBase)(({ theme }) => ({
  padding: 10,
  width: '100%',
  borderBottom: '1px solid #eaecef',
  ...theme.applyStyles('dark', {
    borderBottom: '1px solid #30363d',
  }),
  '& input': {
    borderRadius: 4,
    backgroundColor: '#fff',
    ...theme.applyStyles('dark', {
      backgroundColor: '#0d1117',
    }),
  },
}));
```

LANGUAGE: jsx
CODE:
```
const StyledInput = styled(InputBase)(({ theme }) => ({
  padding: 10,
  width: '100%',
  borderBottom:
    theme.palette.mode === 'dark' ? '1px solid #30363d' : '1px solid #eaecef',
  '& input': {
    borderRadius: 4,
    backgroundColor: theme.palette.mode === 'dark' ? '#0d1117' : '#fff',
  },
}));
```

----------------------------------------

TITLE: Setting TypeScript Compiler Options for Material UI (JSON)
DESCRIPTION: This snippet shows the recommended minimum compiler options to include in your `tsconfig.json` file when using Material UI with TypeScript (version 4.9+). These settings ensure basic type compatibility and improve developer productivity.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/typescript/typescript.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "lib": ["es6", "dom"],
    "noImplicitAny": true,
    "noImplicitThis": true,
    "strictNullChecks": true,
    "allowSyntheticDefaultImports": true
  }
}
```

----------------------------------------

TITLE: Basic Grid Implementation
DESCRIPTION: Example demonstrating a basic grid layout where an item with size={6} occupies half of the container's width.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
{"demo": "BasicGrid.js", "bg": true}
```

----------------------------------------

TITLE: Applying Styles with sx Prop Directly on HTML Elements using Pigment CSS in JSX (Diff)
DESCRIPTION: This diff illustrates the simplification achieved with Pigment CSS integration in Material UI v6. It shows removing the need for a wrapping Box component and applying the `sx` prop directly to a standard HTML `img` element for custom styling. This leverages Pigment CSS's ability to process the `sx` prop on any JSX element during build time.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_11

LANGUAGE: diff
CODE:
```
-import Box from '@mui/material/Box';

-<Box component="img" sx={{ padding: 2 }} />
+<img sx={{ padding: 2 }} />
```

----------------------------------------

TITLE: Setting Grid Gap Using Theme Spacing with sx Prop in Material UI JSX
DESCRIPTION: Shows how CSS Grid properties `gap`, `rowGap`, and `columnGap` within the `sx` prop use theme spacing. The provided numeric value is multiplied by the `theme.spacing` unit (default 8px) to determine the final gap size.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
<Box sx={{ gap: 2 }} />
// equivalent to gap: theme => theme.spacing(2)
```

----------------------------------------

TITLE: Basic Codemod Usage - Bash Commands
DESCRIPTION: Shows the basic command structure and options for running MUI codemods using npx. Includes options for dry runs, parser selection, and jscodeshift configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx @mui/codemod <codemod> <paths...>

Applies a `@mui/codemod` to the specified paths

Positionals:
  codemod  The name of the codemod                                [string]
  paths    Paths forwarded to `jscodeshift`                       [string]

Options:
  --version  Show version number                                 [boolean]
  --help     Show help                                           [boolean]
  --dry      dry run (no changes are made to files)
                                                [boolean] [default: false]
  --parser   which parser for jscodeshift to use.
                                                [string] [default: 'tsx']
  --print    print transformed files to stdout, useful for development
                                                [boolean] [default: false]
  --jscodeshift                                  [string] [default: false]
```

----------------------------------------

TITLE: Basic Menu Implementation in React
DESCRIPTION: Demonstrates a basic menu that opens over an anchor element with configurable options and immediate selection confirmation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
{"demo": "BasicMenu.js"}
```

----------------------------------------

TITLE: Accessible Text Field Structure in Material-UI
DESCRIPTION: Illustrates the correct DOM structure for an accessible text field, linking the input to its label and helper text using appropriate ARIA attributes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
<div class="form-control">
  <label for="my-input">Email address</label>
  <input id="my-input" aria-describedby="my-helper-text" />
  <span id="my-helper-text">We'll never share your email.</span>
</div>
```

----------------------------------------

TITLE: Setting ID on Autocomplete Root Element in JSX
DESCRIPTION: Two equivalent examples showing how to set an ID on the root element of an Autocomplete component, either directly or using slotProps.root.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/overriding-component-structure/overriding-component-structure.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Autocomplete id="badge1">
```

LANGUAGE: jsx
CODE:
```
<Autocomplete slotProps={{ root: { id: 'badge1' } }}>
```

----------------------------------------

TITLE: Using Callback Function for Theme Access in sx Prop (Material UI JSX)
DESCRIPTION: Demonstrates using a callback function as the value for the `sx` prop. The callback receives the theme object as an argument, allowing access to theme values (like `theme.typography` or `theme.palette`) to compute dynamic styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_15

LANGUAGE: jsx
CODE:
```
<Box
  sx={(theme) => ({
    ...theme.typography.body,
    color: theme.palette.primary.main,
  })}
/>
```

----------------------------------------

TITLE: Implementing Custom Child Element for Tooltip in React
DESCRIPTION: This snippet demonstrates how to create a custom React component that can be used as a child of a Tooltip. It shows how to properly spread props and forward refs to ensure the Tooltip works correctly with the custom component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/tooltips/tooltips.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
const MyComponent = React.forwardRef(function MyComponent(props, ref) {
  //  Spread the props to the underlying DOM element.
  return (
    <div {...props} ref={ref}>
      Bin
    </div>
  );
});

// ...

<Tooltip title="Delete">
  <MyComponent />
</Tooltip>;
```

----------------------------------------

TITLE: Enabling System Preference Dark Mode with colorSchemes in MUI - JS
DESCRIPTION: Illustrates how to configure `createTheme` using the recommended `colorSchemes` API, enabling automatic switching between light and dark modes based on the user's system preference when `dark: true` is set. Requires wrapping the application with the configured `ThemeProvider`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#_snippet_2

LANGUAGE: JS
CODE:
```
import { ThemeProvider, createTheme } from '@mui/material/styles';

const theme = createTheme({
  colorSchemes: {
    dark: true,
  },
});

function App() {
  return <ThemeProvider theme={theme}>...</ThemeProvider>;
}
```

----------------------------------------

TITLE: Controlling HTML Input with Text Field Props
DESCRIPTION: Example showing how to pass attributes to the underlying HTML input element using slotProps.htmlInput
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
<TextField slotProps={{ htmlInput: { 'data-testid': '…' } }} />
```

----------------------------------------

TITLE: Using System Props on Material UI Button Component (React, JavaScript)
DESCRIPTION: This snippet demonstrates how to import the Button component from Material UI and use the 'mt' system prop to apply responsive margin-top spacing. The 'mt' prop uses breakpoints (xs and md) to set different top margins, showcasing the integration of Material UI's system for dynamic theming and responsive design. This requires '@mui/material' to be installed and available, and must be used within a React component. Inputs include responsive props such as 'mt', while the output is a styled Button rendered in the UI; custom system props depend on correct theming and prop support in your Material UI version.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v4-is-out.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
import { Button } from '@mui/material';

<Button mt={{ xs: 2, md: 3 }}>Hello worlds</Button>;
```

----------------------------------------

TITLE: Using Standalone DateField from @mui/x-date-pickers in React (JSX)
DESCRIPTION: Illustrates how to use the standalone DateField component from @mui/x-date-pickers for capturing date input in a form. Requires @mui/x-date-pickers installed as a dependency. The key parameter is label, which sets the field label for the UI. Input is user-entered date text, and output is a controlled or uncontrolled DateField value suitable for use in forms.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v6.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
import { DateField } from '@mui/x-date-pickers/DateField';

<DateField label="My first field" />;
```

----------------------------------------

TITLE: Using Array Syntax for Conditional Style Overrides in sx Prop (Material UI JSX)
DESCRIPTION: Demonstrates using an array as the value for the `sx` prop to apply styles conditionally. Later elements in the array override styles from earlier elements if their conditions (e.g., boolean flags like `foo`, `bar`) are met. This example focuses on merging `:hover` styles based on these flags.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_19

LANGUAGE: jsx
CODE:
```
<Box
  sx={[
    {
      '&:hover': {
        color: 'red',
        backgroundColor: 'white',
      },
    },
    foo && {
      '&:hover': { backgroundColor: 'grey' },
    },
    bar && {
      '&:hover': { backgroundColor: 'yellow' },
    },
  ]}
/>
```

----------------------------------------

TITLE: Importing Accordion Components in React
DESCRIPTION: Basic imports required to use the Joy UI Accordion components. Includes imports for Accordion, AccordionDetails, AccordionGroup, and AccordionSummary components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/accordion/accordion.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Accordion from '@mui/joy/Accordion';
import AccordionDetails from '@mui/joy/AccordionDetails';
import AccordionGroup from '@mui/joy/AccordionGroup';
import AccordionSummary from '@mui/joy/AccordionSummary';
```

----------------------------------------

TITLE: Default Theme Spacing Usage
DESCRIPTION: Demonstrates the default 8px scaling factor implementation using theme.spacing() helper
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/spacing/spacing.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const theme = createTheme();

theme.spacing(2); // `${8 * 2}px` = '16px'
```

----------------------------------------

TITLE: Installing Material UI Next.js Dependencies with npm
DESCRIPTION: Command to install the required dependencies for integrating Material UI with Next.js App Router using npm package manager.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install @mui/material-nextjs @emotion/cache
```

----------------------------------------

TITLE: Grid with Spacing Configuration
DESCRIPTION: Example showing how to control space between grid children using the spacing prop, which is converted to CSS using theme.spacing() helper.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
{"demo": "SpacingGrid.js", "bg": true}
```

----------------------------------------

TITLE: Implementing Accessible Badges in React Material-UI
DESCRIPTION: Demonstrates how to make badges accessible using aria-label for screen readers.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_9

LANGUAGE: JSX
CODE:
```
AccessibleBadges.js
```

----------------------------------------

TITLE: Installing Material Icons with npm
DESCRIPTION: Command to install @mui/icons-material and its dependencies using npm package manager.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/material-icons/material-icons.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install @mui/icons-material @mui/material @emotion/styled @emotion/react
```

----------------------------------------

TITLE: Creating a Custom Button Link with React Router
DESCRIPTION: This snippet shows how to create a custom button link that works with React Router by forwarding refs and overriding the role attribute to avoid accessibility issues.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/routing/routing.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
const LinkBehavior = React.forwardRef((props, ref) => (
  <RouterLink ref={ref} to="/" {...props} role={undefined} />
));
```

----------------------------------------

TITLE: Composing Accessible Form Control in Material-UI
DESCRIPTION: Shows how to compose an accessible form control using Material-UI components, ensuring proper relationships between the input, label, and helper text.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_7

LANGUAGE: jsx
CODE:
```
<FormControl>
  <InputLabel htmlFor="my-input">Email address</InputLabel>
  <Input id="my-input" aria-describedby="my-helper-text" />
  <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
</FormControl>
```

----------------------------------------

TITLE: Advanced Styling with Conditional Logic in Material UI Theme Overrides
DESCRIPTION: This snippet shows how to use an array to return multiple style objects based on component props and theme values, allowing for more complex styling logic in theme overrides.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/callback-support-in-style-overrides.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
{
  root: ({ ownerState, theme }) => [
    theme.unstable_sx({
      px: '12px',
      py: '6px',
      fontWeight: 500,
      borderRadius: '8px',
    }),
    ownerState.variant === 'outlined' && ownerState.color === 'default' &&
      theme.unstable_sx({
        borderColor: 'text.secondary',
      }),
    ownerState.size === 'small' &&
      theme.unstable_sx({
        fontSize: { xs: '0.875rem', sm: '0.75rem' },
      })
  ],
}
```

----------------------------------------

TITLE: Setting ARIA Label for Accessibility in Icon Buttons
DESCRIPTION: Example showing how to properly set the aria-label attribute for an IconButton to ensure accessibility for assistive technologies.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button/button.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
<IconButton aria-label="Add to favorites">
  <FavoriteBorder />
</IconButton>
```

----------------------------------------

TITLE: Setting Flex Wrap with Material-UI Box Component in JSX
DESCRIPTION: Demonstrates how to control whether flex items wrap onto multiple lines using the flexWrap property. Options include nowrap (default), wrap, and wrap-reverse.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Box sx={{ flexWrap: 'nowrap' }}>…
<Box sx={{ flexWrap: 'wrap' }}>…
<Box sx={{ flexWrap: 'wrap-reverse' }}>…
```

----------------------------------------

TITLE: Applying Typography Variant Styles with sx Prop in Material UI JSX
DESCRIPTION: Illustrates using the `typography` key in the `sx` prop to apply all CSS properties defined within a specific theme typography variant (e.g., 'body1'). This applies styles like font family, size, weight, etc., associated with `theme.typography.body1`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_14

LANGUAGE: jsx
CODE:
```
<Box sx={{ typography: 'body1' }} />
// equivalent to { ...theme.typography.body1 }
```

----------------------------------------

TITLE: Creating a Custom Button using MUI Base Unstyled Components (TSX)
DESCRIPTION: Illustrates the structure for building a custom button component using MUI Base (unstyled components). It utilizes the `useButton` hook to manage button state (active, disabled, focusVisible) and applies props to a root element (`CustomButtonRoot`). This approach separates logic from styling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_6

LANGUAGE: tsx
CODE:
```
const CustomButton = React.forwardRef(function CustomButton(
  props: ButtonUnstyledProps,
  ref: React.ForwardedRef<any>,
) {
  const { children } = props;
  const { active, disabled, focusVisible, getRootProps } = useButton({
    ...props,
    ref,
    component: CustomButtonRoot,
  });

  const classes = {
    active,
    disabled,
    focusVisible,
  };

  return (
    <CustomButtonRoot {...getRootProps()} className={clsx(classes)}>
      {children}
    </CustomButtonRoot>
  );
});
```

----------------------------------------

TITLE: Implementing Accessibility for Click-Away Listener
DESCRIPTION: This example demonstrates how to improve accessibility for the Click-Away Listener component by adding a 'role' attribute to its child element. This prevents screen readers from announcing the child as clickable when it isn't.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/click-away-listener/click-away-listener.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<ClickAwayListener>
  <div role="presentation">
    <h1>non-interactive heading</h1>
  </div>
</ClickAwayListener>
```

----------------------------------------

TITLE: Styling Stat Component with ownerState in Material UI
DESCRIPTION: This snippet demonstrates how to style the Stat component using ownerState. It adds a variant prop and uses it to conditionally apply styles to the root slot.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
const Stat = React.forwardRef(function Stat(props, ref) {
  const { value, unit, variant, ...other } = props;

  const ownerState = { ...props, variant };

  return (
    <StatRoot ref={ref} ownerState={ownerState} {...other}>
      <StatValue ownerState={ownerState}>{value}</StatValue>
      <StatUnit ownerState={ownerState}>{unit}</StatUnit>
    </StatRoot>
  );
});

const StatRoot = styled('div', {
  name: 'MuiStat',
  slot: 'root',
})(({ theme, ownerState }) => ({
  display: 'flex',
  flexDirection: 'column',
  gap: theme.spacing(0.5),
  padding: theme.spacing(3, 4),
  backgroundColor: theme.palette.background.paper,
  borderRadius: theme.shape.borderRadius,
  boxShadow: theme.shadows[2],
  letterSpacing: '-0.025em',
  fontWeight: 600,
  ...ownerState.variant === 'outlined' && {
    border: `2px solid ${theme.palette.divider}`,
  },
}));
```

----------------------------------------

TITLE: Importing Roboto Font with Fontsource
DESCRIPTION: TypeScript/JavaScript code snippet demonstrating how to import specific weights of the Roboto font from the Fontsource package in your application's entry point. This makes the font available for Material UI components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/installation/installation.md#_snippet_4

LANGUAGE: tsx
CODE:
```
import '@fontsource/roboto/300.css';
import '@fontsource/roboto/400.css';
import '@fontsource/roboto/500.css';
import '@fontsource/roboto/700.css';
```

----------------------------------------

TITLE: Custom Theming with Color Schemes and CSS Variables in Material-UI (JavaScript)
DESCRIPTION: This code sample builds upon isolated mode toggling by adding detailed custom palettes for both light and dark color schemes using Material-UI. It creates a ThemeProvider that receives customized palette definitions via the colorSchemes property, using props to drive CSS variable configuration. Requirements include @mui/material/styles and relevant palette objects; input props are cssVarPrefix and colorSchemeSelector. The output is a container whose theme can be varied for both color modes, offering fine control for documentation demos.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/demos.md#2025-04-22_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { ThemeProvider, createTheme, useColorScheme } from '@mui/material/styles';\n\nexport default function DemoModeToggleCustomTheme(props) {\n  const theme = createTheme({\n    cssVariables: {\n      cssVarPrefix: props.cssVarPrefix,\n      colorSchemeSelector: props.colorSchemeSelector || 'class',\n    },\n    colorSchemes: {\n      light: {\n        palette: {\n          // ...custom palette\n        },\n      },\n      dark: {\n        palette: {\n          // ...custom palette\n        },\n      },\n    },\n  });\n  return (\n    <ThemeProvider {...props} theme={theme}>\n      ...\n    </ThemeProvider>\n  );\n}\n
```

----------------------------------------

TITLE: Implementing sx Prop with Custom Components using unstable_styleFunctionSx
DESCRIPTION: Example of adding MUI System's sx prop functionality to a custom component using the unstable_styleFunctionSx utility. This approach provides the same styling capabilities as Box component but with reduced bundle size.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/custom-components/custom-components.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { unstable_styleFunctionSx } from '@mui/system';
import styled from '@mui/system/styled';

const Section = styled('div')(unstable_styleFunctionSx);

export default function StyleFunctionSxDemo() {
  return (
    <Section
      sx={{
        border: 1,
        borderColor: 'primary.main',
        p: 2,
        'span': {
          color: 'text.primary',
        },
      }}
    >
      <span>Inner content</span>
    </Section>
  );
}
```

----------------------------------------

TITLE: Applying Width Styles with Material-UI Box Component
DESCRIPTION: Examples of using the Box component with different width values, including fractions, pixels, percentages, and special values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/sizing/sizing.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Box sx={{ width: 1/4 }}> // Equivalent to width: '25%'
<Box sx={{ width: 300 }}> // Numbers are converted to pixel values.
<Box sx={{ width: '75%' }}> // String values are used as raw CSS.
<Box sx={{ width: 1 }}> // 100%
```

----------------------------------------

TITLE: Applying Additive Borders with Material-UI Box Component
DESCRIPTION: Examples of adding borders to elements using the Box component with the sx prop. Shows how to add all borders or specific borders (top, right, bottom, left).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/borders/borders.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Box sx={{ border: 1 }}>…
<Box sx={{ borderTop: 1 }}>…
<Box sx={{ borderRight: 1 }}>…
<Box sx={{ borderBottom: 1 }}>…
<Box sx={{ borderLeft: 1 }}>…
```

----------------------------------------

TITLE: Customizing Box Component with sx Prop
DESCRIPTION: This snippet shows how to customize the Box component using the sx prop, which allows for theme-aware styling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/box/box.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
{"demo": "BoxSx.js", "defaultCodeOpen": true }
```

----------------------------------------

TITLE: Applying Container Queries in Styled Components (JSX & CSS)
DESCRIPTION: This snippet demonstrates using Material UI v6's container queries utility within a styled component (JSX). It applies different `flexDirection` styles based on the container's width using `theme.containerQueries.up('sm')` (default container) and `theme.containerQueries('sidebar').up('400px')` (named container 'sidebar'). The simplified CSS output shows the corresponding `@container` rules.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_6

LANGUAGE: jsx JSX
CODE:
```
const Component = styled('div')(({ theme }) => ({
  display: 'flex',
  flexDirection: 'column',
  gap: theme.spacing(2),
  [theme.containerQueries.up('sm')]: {
    flexDirection: 'row',
  },
  [theme.containerQueries('sidebar').up('400px')]: {
    // @container sidebar (min-width: 400px)
    flexDirection: 'row',
  },
}));
```

LANGUAGE: css CSS
CODE:
```
/* Simplified CSS Output */

.Component-ad83f {
  display: flex;
  flex-direction: column;
  gap: 16px;
  @container (min-width: 600px) {
    flex-direction: row;
  }
  @container sidebar (min-width: 400px) {
    flex-direction: row;
  }
}
```

----------------------------------------

TITLE: Accessing Theme in React Components
DESCRIPTION: Shows how to access theme variables in functional React components using the useTheme hook.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theming/theming.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
import { useTheme } from '@mui/material/styles';

function DeepChild() {
  const theme = useTheme();
  return <span>{`spacing ${theme.spacing}`}</span>;
}
```

----------------------------------------

TITLE: Customizing Theme Tokens with extendTheme in Joy UI
DESCRIPTION: This snippet demonstrates how to customize theme tokens in Joy UI by using the extendTheme function to modify color schemes and font families. The customized tokens are deeply merged into the default theme and converted to CSS variables.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/approaches/approaches.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  colorSchemes: {
    light: {
      palette: {
        // affects all Joy components that has `color="primary"` prop.
        primary: {
          50: '#fffbeb',
          100: '#fef3c7',
          200: '#fde68a',
          // 300, 400, ..., 800,
          900: '#78350f',
        },
      },
    },
  },
  fontFamily: {
    display: 'Inter, var(--joy-fontFamily-fallback)',
    body: 'Inter, var(--joy-fontFamily-fallback)',
  },
});

function App() {
  return <CssVarsProvider theme={theme}>...</CssVarsProvider>;
}
```

----------------------------------------

TITLE: Responsive Grid with Multiple Breakpoints
DESCRIPTION: Grid implementation with responsive behavior that changes layout at defined breakpoints, using size props that vary by viewport width.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
{"demo": "FullWidthGrid.js", "bg": true}
```

----------------------------------------

TITLE: Creating a Material UI Theme for Server and Client
DESCRIPTION: Defines a shared theme instance that will be used on both server and client sides. Creates a theme with customized primary, secondary, and error color palettes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/server-rendering/server-rendering.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { createTheme } from '@mui/material/styles';
import { red } from '@mui/material/colors';

// Create a theme instance.
const theme = createTheme({
  palette: {
    primary: {
      main: '#556cd6',
    },
    secondary: {
      main: '#19857b',
    },
    error: {
      main: red.A400,
    },
  },
});

export default theme;
```

----------------------------------------

TITLE: TypeScript Module Augmentation for Table Props in Joy UI
DESCRIPTION: This snippet shows how to add new values to the Table props using TypeScript module augmentation in Joy UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/table/table.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
// this could be any file that's included in your tsconfig.json
declare module '@mui/joy/Table' {
  interface TablePropsBorderAxisOverrides {
    header: true;
  }
}
```

----------------------------------------

TITLE: Styling a MUI Button Using the sx Prop with Spacing Shortcuts - JavaScript
DESCRIPTION: This JavaScript example uses the sx prop available on MUI components to take advantage of spacing shortcut properties like 'mx: 1'. It imports Button from '@mui/material/Button' and defines a functional component that applies these styles to its children. No additional styling dependencies are needed except @mui/material.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import Button from '@mui/material/Button';

const MyStyledButton = (props) => (
  <Button
    sx={{
      mx: 1, // \u2714\ufe0f this shortcut is specific to the `sx` prop,
    }}
  >
    {props.children}
  </Button>
);
```

----------------------------------------

TITLE: TypeScript Theme Augmentation for Material UI
DESCRIPTION: Demonstrates how to extend Material UI theme types using TypeScript module augmentation to add custom variables.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theming/theming.md#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
declare module '@mui/material/styles' {
  interface Theme {
    status: {
      danger: string;
    };
  }
  // allow configuration using `createTheme()`
  interface ThemeOptions {
    status?: {
      danger?: string;
    };
  }
}
```

----------------------------------------

TITLE: Handling Disabled Elements with Tooltip in React
DESCRIPTION: This snippet demonstrates how to properly use a Tooltip with a disabled button element. It includes a workaround for Safari compatibility and shows how to handle pointer events for non-Material UI components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/tooltips/tooltips.md#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
<Tooltip title="You don't have permission to do this">
  <span>
    <button disabled={disabled} style={disabled ? { pointerEvents: 'none' } : {}}>
      A disabled button
    </button>
  </span>
</Tooltip>
```

----------------------------------------

TITLE: Applying Dark Mode Directly in MUI with createTheme - JS
DESCRIPTION: Demonstrates how to force your application to use the dark theme by setting `mode: 'dark'` within the `createTheme()` helper. This requires wrapping your app with `ThemeProvider` and including `CssBaseline` for background styling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#_snippet_0

LANGUAGE: JS
CODE:
```
import { ThemeProvider, createTheme } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';

const darkTheme = createTheme({
  palette: {
    mode: 'dark',
  },
});

export default function App() {
  return (
    <ThemeProvider theme={darkTheme}>
      <CssBaseline />
      <main>This app is using the dark mode</main>
    </ThemeProvider>
  );
}
```

----------------------------------------

TITLE: Adding Button and Link Components
DESCRIPTION: Adds login button and sign-up link with Typography component using endDecorator prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/tutorial/tutorial.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
<Button sx={{ mt: 1 /* margin top */ }}>
  Log in
</Button>
<Typography
  endDecorator={<Link href="/sign-up">Sign up</Link>}
  fontSize="sm"
  sx={{ alignSelf: 'center' }}
>
  Don't have an account?
</Typography>
```

----------------------------------------

TITLE: Container Query API Methods in Material UI
DESCRIPTION: Demonstrates various container query methods available in the Material UI breakpoints API, including up, down, only, between, and not.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/container-queries/container-queries.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
// For default breakpoints
theme.containerQueries.up('sm'); // => '@container (min-width: 600px)'
theme.containerQueries.down('md'); // => '@container (max-width: 900px)'
theme.containerQueries.only('md'); // => '@container (min-width: 600px) and (max-width: 900px)'
theme.containerQueries.between('sm', 'lg'); // => '@container (min-width: 600px) and (max-width: 1200px)'
theme.containerQueries.not('sm'); // => '@container (max-width: 600px)'
```

----------------------------------------

TITLE: Targeting Component States Using Class Selectors in Joy UI
DESCRIPTION: Illustrates how to override styles for specific component states by importing component class selectors and using them with the styleOverrides API.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { listItemButtonClasses } from '@mui/joy/ListItemButton';

extendTheme({
  components: {
    JoyListItemButton: {
      styleOverrides: {
        root: {
          [`&.${listItemButtonClasses.selected}`]: {
            color: 'rgba(255 255 255 / 0.7)',
          },
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Setting Flex Direction with Material-UI Box Component in JSX
DESCRIPTION: Shows how to control the direction of flex items using the flexDirection property. Options include row (default), row-reverse, column, and column-reverse.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Box sx={{ flexDirection: 'row' }}>…
<Box sx={{ flexDirection: 'row-reverse' }}>…
<Box sx={{ flexDirection: 'column' }}>…
<Box sx={{ flexDirection: 'column-reverse' }}>…
```

----------------------------------------

TITLE: Setting fontWeight Using Theme Typography Key with sx Prop in Material UI JSX
DESCRIPTION: Demonstrates setting `fontWeight` using a specific key (e.g., 'fontWeightLight') that maps directly to a value defined in the `theme.typography` object within the `sx` prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_12

LANGUAGE: jsx
CODE:
```
<Box sx={{ fontWeight: 'fontWeightLight' }} />
// equivalent to fontWeight: theme.typography.fontWeightLight
```

----------------------------------------

TITLE: Configuring _app.tsx for Material UI with Next.js Pages Router
DESCRIPTION: Diff showing how to modify the _app.tsx file to integrate AppCacheProvider for Material UI with Next.js Pages Router.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_12

LANGUAGE: diff
CODE:
```
+import { AppCacheProvider } from '@mui/material-nextjs/v15-pagesRouter';
 // Or `v1X-pages` if you are using Next.js v1X

 export default function MyApp(props) {
   return (
+    <AppCacheProvider {...props}>
       <Head>
         ...
       </Head>
       ...
+    </AppCacheProvider>
   );
 }
```

----------------------------------------

TITLE: Applying Theme Shadows with sx Prop in Material UI JSX
DESCRIPTION: Demonstrates applying a box shadow using a numeric index corresponding to the `theme.shadows` array via the `boxShadow` key in the `sx` prop. This leverages the predefined elevation shadows in the theme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_8

LANGUAGE: jsx
CODE:
```
<Box sx={{ boxShadow: 1 }} />
// equivalent to boxShadow: theme => theme.shadows[1]
```

----------------------------------------

TITLE: Setting fontWeight Using Shorthand Key with sx Prop in Material UI JSX
DESCRIPTION: Shows the shorthand method for setting `fontWeight` by omitting the property prefix and using just the weight key (e.g., 'light') from `theme.typography` within the `sx` prop. This maps to `theme.typography.fontWeightLight`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_13

LANGUAGE: jsx
CODE:
```
<Box sx={{ fontWeight: 'light' }} />
// equivalent to fontWeight: theme.typography.fontWeightLight
```

----------------------------------------

TITLE: Overriding MUI Component Styles Based on Existing Props - JavaScript
DESCRIPTION: Apply specific styles to a component when a particular prop value matches, using the `variants` key. This snippet thickens the border of the `outlined` variant for `MuiCard` components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theme-components/theme-components.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const theme = createTheme({
  components: {
    MuiCard: {
      styleOverrides: {
        root: {
          variants: [
            {
              props: { variant: 'outlined' },
              style: {
                borderWidth: '3px',
              },
            },
          ],
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Overriding Default Dark Palette Colors in MUI - JSX
DESCRIPTION: Shows how to customize specific colors within the dark mode palette by providing a custom `palette` object with desired colors (in hex, RGB, or HSL format) when creating the theme with `mode: 'dark'`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#_snippet_1

LANGUAGE: JSX
CODE:
```
const darkTheme = createTheme({
  palette: {
    mode: 'dark',
    primary: {
      main: '#ff5252',
    },
  },
});
```

----------------------------------------

TITLE: Centering Content in Grid Items
DESCRIPTION: Implementation showing how to center content within grid items by using display="flex" with justifyContent and alignItems properties.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_13

LANGUAGE: jsx
CODE:
```
{"demo": "ChildrenCenteredGrid.js"}
```

----------------------------------------

TITLE: Changing the default font in Joy UI
DESCRIPTION: Example of how to override the default Inter font in Joy UI theme by configuring the fontFamily property for display and body text.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-typography/theme-typography.md#2025-04-22_snippet_7

LANGUAGE: js
CODE:
```
extendTheme({
  fontFamily: {
    display: 'Noto Sans', // applies to `h1`–`h4`
    body: 'Noto Sans', // applies to `title-*` and `body-*`
  },
});
```

----------------------------------------

TITLE: Extending MUI Theme Palette and Button Colors (TSX)
DESCRIPTION: Shows how to add a custom color (`neutral`) to the MUI theme's palette and enable its use with the `Button` component's `color` prop. This involves extending the theme, declaring the new palette color and Button color override for TypeScript type safety, and then using the new color directly on the Button.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_3

LANGUAGE: tsx
CODE:
```
import { createTheme, Button } from '@mui/material';

// 1. Extend the theme.
const theme = createTheme({
  palette: {
    neutral: {
      main: '#d79b4a',
    },
  },
});

// 2. Notify TypeScript about the new color in the palette
declare module '@mui/material/styles' {
  interface Palette {
    neutral: Palette['primary'];
  }
  interface PaletteOptions {
    neutral: PaletteOptions['primary'];
  }
}

// 3. Update the Button's color prop options
declare module '@mui/material/Button' {
  interface ButtonPropsColorOverrides {
    neutral: true;
  }
}

// 4. Profit
<Button color="neutral"  />
```

----------------------------------------

TITLE: Configuring _document.tsx for Material UI with Next.js Pages Router
DESCRIPTION: Diff showing how to modify the _document.tsx file to integrate Material UI with Next.js Pages Router using DocumentHeadTags and documentGetInitialProps.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_11

LANGUAGE: diff
CODE:
```
+import {
+  DocumentHeadTags,
+  documentGetInitialProps,
+} from '@mui/material-nextjs/v15-pagesRouter';
 // or `v1X-pagesRouter` if you are using Next.js v1X

 export default function MyDocument(props) {
   return (
     <Html lang="en">
       <Head>
+        <DocumentHeadTags {...props} />
         ...
       </Head>
       <body>
         <Main />
         <NextScript />
       </body>
     </Html>
   );
 }

+MyDocument.getInitialProps = async (ctx) => {
+  const finalProps = await documentGetInitialProps(ctx);
+  return finalProps;
+};
```

----------------------------------------

TITLE: Installing Joy UI and Dependencies with Package Managers
DESCRIPTION: Commands for installing Joy UI and its required emotion dependencies using different package managers (npm, pnpm, yarn).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/installation/installation.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install @mui/joy @emotion/react @emotion/styled
```

LANGUAGE: bash
CODE:
```
pnpm add @mui/joy @emotion/react @emotion/styled
```

LANGUAGE: bash
CODE:
```
yarn add @mui/joy @emotion/react @emotion/styled
```

----------------------------------------

TITLE: Accessible Form Input Implementation with Joy UI
DESCRIPTION: This snippet demonstrates Joy UI's accessibility features with the Form Control component automatically generating unique IDs to link Input elements with Form Labels and Helper Text components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/overview/overview.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
{"demo": "../../components/input/InputField.js"}
```

----------------------------------------

TITLE: Button-based Link Implementation for Accessibility
DESCRIPTION: Demonstrates how to properly implement a link using a button element when there is no meaningful href, following accessibility best practices.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/links/links.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
{"demo": "ButtonLink.js"}
```

----------------------------------------

TITLE: Adding Accessibility Labels to Radio Component
DESCRIPTION: Example showing how to add accessibility attributes like aria-label to a Radio component using slotProps for the input element.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/radio-button/radio-button.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Radio
  value="radioA"
  slotProps={{
    input: {
      'aria-label': 'Radio A',
    },
  }}
/>
```

----------------------------------------

TITLE: Create Custom Rich Tree View Item Component (React)
DESCRIPTION: This React component example demonstrates how to build a custom Tree Item using the `useTreeItem` hook for the MUI X Rich Tree View. It wraps standard HTML elements and MUI X components (`TreeItemProvider`, `TreeItemRoot`, etc.) with props derived from the hook, allowing developers to compose their own item structure while retaining Tree View functionality. This hook is key to flexible item customization.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v8.md#_snippet_3

LANGUAGE: React
CODE:
```
const CustomTreeItemComponent = React.forwardRef(function CustomTreeItemComponent(
  { id, itemId, label, disabled, children }: TreeItemProps,
  ref: React.Ref<HTMLLIElement>,
) {
  const treeItemData = useTreeItem({ id, itemId, children, label, disabled, rootRef: ref });

  return (
    <TreeItemProvider {...treeItemData.getContextProviderProps()}>
      <TreeItemRoot {...treeItemData.getRootProps()}>
        <TreeItemContent {...treeItemData.getContentProps()}>
          <TreeItemLabel {...treeItemData.getLabelProps()} />
        </TreeItemContent>
        {children && <TreeItemGroupTransition {...treeItemData.getGroupTransitionProps()} />}
      </TreeItemRoot>
    </TreeItemProvider>
  );
}
```

----------------------------------------

TITLE: Applying Nested Selectors with sx Prop - MUI/System - JSX
DESCRIPTION: This snippet demonstrates using nested CSS selectors within the `sx` prop. It allows applying styles to child elements (e.g., `& .ChildSelector`) directly from the parent component's `sx` prop object, providing a concise way to style descendant elements.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/usage/usage.md#_snippet_6

LANGUAGE: jsx
CODE:
```
<Box
    sx={{    // some styles
      '& .ChildSelector': {
        bgcolor: 'primary.main',
      },
    }}
  >
  
```

----------------------------------------

TITLE: Native Select with Label Implementation
DESCRIPTION: Shows implementation of native select element with proper label association
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/selects/selects.md#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
<InputLabel htmlFor="select">Age</InputLabel>
<NativeSelect id="select">
  <option value="10">Ten</option>
  <option value="20">Twenty</option>
</NativeSelect>
```

----------------------------------------

TITLE: Setting Border Color from Theme Palette with sx Prop in Material UI JSX
DESCRIPTION: Shows how to set the border color using a theme palette path (e.g., 'primary.main') via the `borderColor` key in the `sx` prop on a Material UI Box component. The value resolves to the corresponding theme color.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Box sx={{ borderColor: 'primary.main' }} />
// equivalent to borderColor: theme => theme.palette.primary.main
```

----------------------------------------

TITLE: Customizing Specific Color Scheme Palettes in Material UI Theme - JavaScript
DESCRIPTION: This snippet demonstrates how to create a Material UI theme using `createTheme` and override default palette tokens for the light and dark color schemes using the `colorSchemes` object. It shows how to provide a `palette` object within the configuration for each specific scheme (e.g., `light` or `dark`) to define custom color values like the primary color.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/palette/palette.md#_snippet_2

LANGUAGE: js
CODE:
```
const theme = createTheme({
  colorSchemes: {
    light: {
      palette: {
        primary: {
          main: '#FF5733',
        },
        // ...other tokens
      },
    },
    dark: {
      palette: {
        primary: {
          main: '#E0C2FF',
        },
        // ...other tokens
      },
    },
  },
});
```

----------------------------------------

TITLE: Defining Styled Components - MUI/Styled-components - JSX
DESCRIPTION: This snippet demonstrates creating multiple reusable styled components using the `@mui/material/styles` `styled` utility. Each component defines specific CSS rules that can access the theme object, encapsulating styling logic for different parts of a UI element.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/usage/usage.md#_snippet_0

LANGUAGE: jsx
CODE:
```
const StatWrapper = styled('div')(
  ({ theme }) => `
  background-color: ${theme.palette.background.paper};
  box-shadow: ${theme.shadows[1]};
  border-radius: ${theme.shape.borderRadius}px;
  padding: ${theme.spacing(2)};
  min-width: 300px;
`,
);

const StatHeader = styled('div')(
  ({ theme }) => `
  color: ${theme.palette.text.secondary};
`,
);

const StyledTrend = styled(TrendingUpIcon)(
  ({ theme }) => `
  color: ${theme.palette.success.dark};
  font-size: 16px;
  vertical-alignment: sub;
`,
);

const StatValue = styled('div')(
  ({ theme }) => `
  color: ${theme.palette.text.primary};
  font-size: 34px;
  font-weight: ${theme.typography.fontWeightMedium};
`,
);

const StatDiff = styled('div')(
  ({ theme }) => `
  color: ${theme.palette.success.dark};
  display: inline;
  font-weight: ${theme.typography.fontWeightMedium};
  margin-left: ${theme.spacing(0.5)};
  margin-right: ${theme.spacing(0.5)};
`,
);

const StatPrevious = styled('div')(
  ({ theme }) => `
  color: ${theme.palette.text.secondary};
  display: inline;
  font-size: 12px;
`,
);

return (
  <StatWrapper>
    <StatHeader>Sessions</StatHeader>
    <StatValue>98.3 K</StatValue>
    <StyledTrend />
    <StatDiff>18.77%</StatDiff>
    <StatPrevious>vs last week</StatPrevious>
  </StatWrapper>
);
```

----------------------------------------

TITLE: Configuring Material UI Locale with ThemeProvider in JSX
DESCRIPTION: This snippet demonstrates how to set a specific locale (Simplified Chinese in this example) for Material UI components by integrating it into the theme. It requires importing the desired locale object and passing it to createTheme, then wrapping the application root with the ThemeProvider.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/localization/localization.md#_snippet_0

LANGUAGE: jsx
CODE:
```
import { createTheme, ThemeProvider } from '@mui/material/styles';
import { zhCN } from '@mui/material/locale';

const theme = createTheme(
  {
    palette: {
      primary: { main: '#1976d2' },
    },
  },
  zhCN,
);

<ThemeProvider theme={theme}>
  <App />
</ThemeProvider>;
```

----------------------------------------

TITLE: Customizing Base UI Components using slots and slotProps in TSX
DESCRIPTION: Demonstrates the current method for customizing Base UI components using the `slots` prop to change the underlying HTML element (e.g., changing Select's listbox to 'ol') and the `slotProps` prop to pass attributes to specific slots (e.g., adding a class to Badge's badge element). This API is mentioned as potentially being revised.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/base-ui-2024-plans.md#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
// Example of the slots prop
<Select slots={{ listbox: 'ol' }} defaultValue="First option">
  <Option value="First option">First option</Option>
  <Option value="Second option">Second option</Option>
</Select>

// Example of the slotProps prop
<Badge slotProps={{ badge: { className: 'my-badge' } }} />
```

----------------------------------------

TITLE: Setting Default Props for Joy UI Components in Theme
DESCRIPTION: Demonstrates how to define default props for a component at the theme level. This approach affects all instances of the component throughout the application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
extendTheme({
  components: {
    JoyIconButton: {
      defaultProps: {
        variant: 'outlined',
        color: 'neutral',
      },
    },
  },
});

// This is the same as:
// <IconButton variant="outlined" color="neutral">
<IconButton>...</IconButton>;
```

----------------------------------------

TITLE: Migrating Input Props to Slots API
DESCRIPTION: Transforms Input component from using the deprecated components/componentsProps API to the new slots/slotProps API pattern.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_54

LANGUAGE: diff
CODE:
```
 <Input
-  components={{ Input: CustomInput, Root: CustomRoot }}
-  componentsProps={{ input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }}
+  slots={{ input: CustomInput, root: CustomRoot }}
+  slotProps={{ input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }}
 />
```

----------------------------------------

TITLE: Detecting System Prefers-Color-Scheme Preference in MUI with useMediaQuery - JSX
DESCRIPTION: Demonstrates using the `useMediaQuery` hook with the `(prefers-color-scheme: dark)` media query string to programmatically check if the user's operating system or browser is set to prefer a dark color scheme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#_snippet_3

LANGUAGE: JSX
CODE:
```
import * as React from 'react';
import useMediaQuery from '@mui/material/useMediaQuery';
import { createTheme, ThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';

function App() {
  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');
  return <div>prefersDarkMode: {prefersDarkMode.toString()}</div>;
}
```

----------------------------------------

TITLE: Configuring Theme for Custom Selector Color Scheme Selection - JS
DESCRIPTION: Sets up the Material UI theme to use a custom CSS selector (e.g., `.theme-light`, `.theme-dark`) on the `<html>` element for toggling color schemes. This requires enabling `colorSchemes` and setting `colorSchemeSelector` to a string containing `%s` which will be replaced by 'light' or 'dark'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#_snippet_4

LANGUAGE: JS
CODE:
```
// The value must start with dot (.) for class or square brackets ([]) for data
createTheme({
  colorSchemes: { light: true, dark: true },
  cssVariables: {
    colorSchemeSelector: '.theme-%s'
  }
});

// CSS Result
.theme-light { ... }
.theme-dark { ... }
```

----------------------------------------

TITLE: Setting Up Express Server Skeleton for SSR
DESCRIPTION: Creates the basic structure of an Express server with placeholder functions for rendering and request handling. This outline will be filled with the actual implementation code in the following sections.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/server-rendering/server-rendering.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import express from 'express';

// We are going to fill these out in the sections to follow.
function renderFullPage(html, css) {
  /* ... */
}

function handleRender(req, res) {
  /* ... */
}

const app = express();

// This is fired every time the server-side receives a request.
app.use(handleRender);

const port = 3000;
app.listen(port);
```

----------------------------------------

TITLE: Adding Custom Theme Tokens in Material-UI
DESCRIPTION: Shows how to add custom key-value pairs to the theme input, which will be generated as part of the CSS theme variables. This example adds gradient and border tokens for both light and dark modes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/usage.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
const theme = createTheme({
  cssVariables: true,
  colorSchemes: {
    light: {
      palette: {
        gradient:
          'linear-gradient(to left, var(--mui-palette-primary-main), var(--mui-palette-primary-dark))',
        border: {
          subtle: 'var(--mui-palette-neutral-200)',
        },
      },
    },
    dark: {
      palette: {
        gradient:
          'linear-gradient(to left, var(--mui-palette-primary-light), var(--mui-palette-primary-main))',
        border: {
          subtle: 'var(--mui-palette-neutral-600)',
        },
      },
    },
  },
});

function App() {
  return <ThemeProvider theme={theme}>...</ThemeProvider>;
}
```

----------------------------------------

TITLE: Basic Theme Breakpoint Usage in React
DESCRIPTION: Demonstrates how to use the useMediaQuery hook with Material-UI theme breakpoints for responsive design.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/use-media-query/use-media-query.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import { useTheme } from '@mui/material/styles';
import useMediaQuery from '@mui/material/useMediaQuery';

function MyComponent() {
  const theme = useTheme();
  const matches = useMediaQuery(theme.breakpoints.up('sm'));

  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;
}
```

----------------------------------------

TITLE: Toggling Color Schemes with useColorScheme Hook in JSX
DESCRIPTION: This JSX snippet demonstrates using the `useColorScheme` hook from `@mui/material/styles` to read the current color mode (`mode`) and provide a function (`setMode`) to switch between 'system', 'light', and 'dark' modes. This allows users to control the application's theme preference.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
import { useColorScheme } from '@mui/material/styles';

function ModeSwitcher() {
  const { mode, setMode } = useColorScheme();
  if (!mode) return null;
  return (
    <select onChange={(event) => setMode(event.target.value)}>
      <option value="system">System</option>
      <option value="light">Light</option>
      <option value="dark">Dark</option>
    </select>
  );
}
```

----------------------------------------

TITLE: Initializing ThemeProvider with CSS Variables in React
DESCRIPTION: Sets up a Material-UI theme with CSS variables enabled and wraps the app with ThemeProvider. This generates CSS variables in the :root stylesheet of the HTML document.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/usage.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import { ThemeProvider, createTheme } from '@mui/material/styles';

const theme = createTheme({ cssVariables: true });

function App() {
  return <ThemeProvider theme={theme}>{/* ...your app */}</ThemeProvider>;
}
```

LANGUAGE: css
CODE:
```
:root {
  --mui-palette-primary-main: #1976d2;
  --mui-palette-primary-light: #42a5f5;
  --mui-palette-primary-dark: #1565c0;
  --mui-palette-primary-contrastText: #fff;
  /* ...other variables */
}
```

----------------------------------------

TITLE: Migrating Typography Color Prop to sx Prop in React
DESCRIPTION: Updating Typography components to use the sx prop for dynamic color values instead of the color prop, which is no longer a system prop in Material UI v6.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_18

LANGUAGE: diff
CODE:
```
-<Typography color={(theme) => theme.palette.primary.main}>
+<Typography sx={{ color: (theme) => theme.palette.primary.main }}>
```

----------------------------------------

TITLE: Applying Pseudo-selectors with sx Prop - MUI/System - JSX
DESCRIPTION: This snippet shows how to define styles that apply conditionally based on CSS pseudo-selectors, such as `:hover`, directly within the `sx` prop object. The styles for the pseudo-selector are nested under a key corresponding to the selector.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/usage/usage.md#_snippet_4

LANGUAGE: jsx
CODE:
```
<Box
    sx={{    // some styles
      ":hover": {
        boxShadow: 6,
      },
    }}
  >
  
```

----------------------------------------

TITLE: Extending Material UI Theme Type for Custom Properties in sx Prop Callback (TSX)
DESCRIPTION: Illustrates using TypeScript module augmentation to extend the Material UI `Theme` interface defined in `@mui/system`. This allows custom properties added to the theme (like `status.warning`) to be safely accessed with type checking within an `sx` prop callback function.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_18

LANGUAGE: tsx
CODE:
```
import * as React from 'react';
import Box from '@mui/material/Box';
import { createTheme, ThemeProvider } from '@mui/material/styles';
import { orange } from '@mui/material/colors';

declare module '@mui/system' {
  interface Theme {
    status: {
      warning: string;
    };
  }
}

const theme = createTheme({
  status: {
    warning: orange[500],
  },
});

export default function App() {
  return (
    <ThemeProvider theme={theme}>
      <Box
        sx={(theme) => ({
          bgcolor: theme.status.warning,
        })}
      >
        Example
      </Box>
    </ThemeProvider>
  );
}
```

----------------------------------------

TITLE: Implementing Mode Switching with useColorScheme Hook - JSX
DESCRIPTION: Demonstrates how to create a React component that utilizes the `useColorScheme` hook to manage the current theme mode and provide a UI control (like a select element) for users to switch between 'system', 'light', and 'dark' modes. This requires installing and importing `useColorScheme` from `@mui/material/styles` and wrapping the application with `ThemeProvider`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#_snippet_5

LANGUAGE: JSX
CODE:
```
import { useColorScheme } from '@mui/material/styles';

function ModeSwitcher() {
  const { mode, setMode } = useColorScheme();

  if (!mode) {
    return null;
  }

  return (
    <select
      value={mode}
      onChange={(event) => {
        setMode(event.target.value);
        // For TypeScript, cast `event.target.value as 'light' | 'dark' | 'system'`:
      }}
    >
      <option value="system">System</option>
      <option value="light">Light</option>
      <option value="dark">Dark</option>
    </select>
  );
}
```

----------------------------------------

TITLE: Basic Media Query Implementation
DESCRIPTION: Shows the basic implementation of useMediaQuery hook for responsive design in React components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/use-media-query/use-media-query.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
import * as React from 'react';
import useMediaQuery from '@mui/material/useMediaQuery';

export default function SimpleMediaQuery() {
  const matches = useMediaQuery('(min-width:600px)');

  return <span>{`(min-width:600px) matches: ${matches}`}</span>;
}
```

----------------------------------------

TITLE: Declaring Public Component with forwardRef (MUI/TypeScript)
DESCRIPTION: Shows the standard structure for declaring a public MUI component using `React.forwardRef`. It demonstrates using `useThemeProps` to handle default props, combining props into `ownerState`, using the `useUtilityClasses` hook for class composition, and rendering the styled root component with appropriate props and ref.
SOURCE: https://github.com/mui/material-ui/blob/master/TYPESCRIPT_CONVENTION.md#_snippet_9

LANGUAGE: TypeScript
CODE:
```
const Foo = React.forwardRef<HTMLSpanElement, FooProps>(function Foo(inProps, ref) {
  // pass args like this, otherwise will get error about theme at return section
  const props = useThemeProps<Theme, FooProps, 'MuiFoo'>({
    props: inProps,
    name: 'MuiFoo',
  });
  const { children, className, ...other } = props;

  // ...implementation

  const ownerState = { ...props, ...otherValue };

  const classes = useUtilityClasses(ownerState);

  return (
    <FooRoot
      ref={ref}
      className={clsx(classes.root, className)}
      ownerState={ownerState}
      {...other}
    >
      {children}
    </FooRoot>
  );
});
```

----------------------------------------

TITLE: Implementing Accessible Tabs with TabContext API in Material-UI
DESCRIPTION: Example demonstrating the new experimental TabContext API implementation that follows WAI-ARIA authoring practices for accessible tabs. Shows basic tab structure with TabList, Tab components and TabPanel content areas.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q2-update.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
<TabContext value={value}>
  <TabList onChange={handleChange} aria-label="simple tabs example">
    <Tab label="Item One" value="1" />
    <Tab label="Item Two" value="2" />
    <Tab label="Item Three" value="3" />
  </TabList>
  <TabPanel value="1">Item One</TabPanel>
  <TabPanel value="2">Item Two</TabPanel>
  <TabPanel value="3">Item Three</TabPanel>
</TabContext>
```

----------------------------------------

TITLE: Manual Migration from TextField to Input Component in React
DESCRIPTION: Example showing how to manually replace the TextField component with a composition of FormControl, FormLabel, FormHelperText, and Input components while preserving all props and functionality.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/text-field/text-field.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
-import TextField from '@mui/joy/TextField';
+import FormControl from '@mui/joy/FormControl';
+import FormLabel from '@mui/joy/FormLabel';
+import FormHelperText from '@mui/joy/FormHelperText';
+import Input from '@mui/joy/Input';

-<TextField
-  id="Id"
-  label="Label"
-  placeholder="Placeholder"
-  helperText="Help!"
-  name="Name"
-  type="tel"
-  autoComplete="on"
-  autoFocus
-  error
-  required
-  fullWidth
-  defaultValue="DefaultValue"
-  size="sm"
-  color="primary"
-  variant="outlined"
-/>
+<FormControl
+  id="Id"
+  required
+  size="sm"
+  color="primary">
+  <FormLabel>
+    Label
+  </FormLabel>
+  <Input
+    placeholder="Placeholder"
+    name="Name"
+    type="tel"
+    autoComplete="on"
+    autoFocus
+    error
+    fullWidth
+    defaultValue="DefaultValue"
+    variant="outlined" />
+  <FormHelperText>
+    Help!
+  </FormHelperText>
+</FormControl>
```

----------------------------------------

TITLE: Adding New Color Palettes - Joy UI Theme
DESCRIPTION: Demonstrates how to add a complete new color palette with TypeScript support and variant configurations for both light and dark modes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-colors/theme-colors.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  colorSchemes: {
    light: {
      palette: {
        secondary: {
          50: '#fdf2f8',
          100: '#fce7f3',
          200: '#fbcfe8',
          300: '#f9a8d4',
          400: '#f472b6',
          500: '#ec4899',
          600: '#db2777',
          700: '#be185d',
          800: '#9d174d',
          900: '#831843',
          solidBg: 'var(--joy-palette-secondary-400)',
          solidActiveBg: 'var(--joy-palette-secondary-500)',
          outlinedBorder: 'var(--joy-palette-secondary-500)',
          outlinedColor: 'var(--joy-palette-secondary-700)',
          outlinedActiveBg: 'var(--joy-palette-secondary-100)',
          softColor: 'var(--joy-palette-secondary-800)',
          softBg: 'var(--joy-palette-secondary-200)',
          softActiveBg: 'var(--joy-palette-secondary-300)',
          plainColor: 'var(--joy-palette-secondary-700)',
          plainActiveBg: 'var(--joy-palette-secondary-100)',
        },
      },
    },
    dark: {
      palette: {
        secondary: {
          // ... dark mode values
        }
      }
    }
  },
});
```

LANGUAGE: typescript
CODE:
```
// You can put this to any file that's included in your tsconfig
import type { PaletteRange } from '@mui/joy/styles';

declare module '@mui/joy/styles' {
  interface ColorPalettePropOverrides {
    // apply to all Joy UI components that support `color` prop
    secondary: true;
  }

  interface Palette {
    // this will make the node `secondary` configurable in `extendTheme`
    // and add `secondary` to the theme's palette.
    secondary: PaletteRange;
  }
}
```

----------------------------------------

TITLE: Replacing Box Component with HTML Element (JS/TSX)
DESCRIPTION: Shows how to replace instances of the `Box` component with equivalent standard HTML elements (e.g., `div`, `img`). This is possible because Pigment CSS enables the `sx` prop on any JSX element, removing the need for the `Box` wrapper in many cases.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_30

LANGUAGE: diff
CODE:
```
-import Box from '@mui/material/Box';

 function CustomCard() {
   return (
-    <Box sx={{ display: 'flex' }}>
-      <Box component="img" src="..." sx={{ width: 24, height: 24 }}>
-      ...
-    </Box>
+    <div sx={{ display: 'flex' }}>
+      <img src="..." sx={{ width: 24, height: 24 }}>
+      ...
+    </div>
   );
 }
```

----------------------------------------

TITLE: Using React Router Link with Button Component
DESCRIPTION: Demonstrates passing a React Router Link component to Material UI Button's component prop for navigation integration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/composition/composition.md#2025-04-22_snippet_3

LANGUAGE: tsx
CODE:
```
import { Link } from 'react-router';
import Button from '@mui/material/Button';

function Demo() {
  return (
    <Button component={Link} to="/react-router">
      React router link
    </Button>
  );
}
```

----------------------------------------

TITLE: Creating a Custom styled Utility with a Default Theme - JavaScript
DESCRIPTION: This JavaScript snippet illustrates how to create a customized styled utility with a user-defined default theme. It requires '@mui/system' to access createStyled and createTheme functions. The defaultTheme can be tailored to fit your design requirements. The styled function exported here will use your custom theme for all styled component instances.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { createStyled, createTheme } from '@mui/system';

const defaultTheme = createTheme({
  // your custom theme values
});

const styled = createStyled({ defaultTheme });

export default styled;
```

----------------------------------------

TITLE: Setting Justify Content with Material-UI Box Component in JSX
DESCRIPTION: Shows how to align flex items along the main axis using the justifyContent property. Options include flex-start, flex-end, center, space-between, space-around, and space-evenly.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<Box sx={{ justifyContent: 'flex-start' }}>…
<Box sx={{ justifyContent: 'flex-end' }}>…
<Box sx={{ justifyContent: 'center' }}>…
<Box sx={{ justifyContent: 'space-between' }}>…
<Box sx={{ justifyContent: 'space-around' }}>…
<Box sx={{ justifyContent: 'space-evenly' }}>…
```

----------------------------------------

TITLE: Migrating InputBase Props to Slots API
DESCRIPTION: Transforms InputBase component from using the deprecated components/componentsProps API to the new slots/slotProps API pattern.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_48

LANGUAGE: diff
CODE:
```
 <InputBase
-  components={{ Input: CustomInput, Root: CustomRoot }}
-  componentsProps={{ input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }}
+  slots={{ input: CustomInput, root: CustomRoot }}
+  slotProps={{ input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }}
 />
```

----------------------------------------

TITLE: Using Experimental sx Syntax in MUI StyleOverrides - TypeScript
DESCRIPTION: Demonstrates how to use the experimental `sx` prop syntax directly within `styleOverrides` in the theme object for shorthand CSS properties. This snippet applies padding, border-radius, and margin styles to different slots of the `MuiChip` component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theme-components/theme-components.md#_snippet_8

LANGUAGE: typescript
CODE:
```
const finalTheme = createTheme({
  components: {
    MuiChip: {
      styleOverrides: {
        root: ({ theme }) =>
          theme.unstable_sx({
            px: 1,
            py: 0.25,
            borderRadius: 1,
          }),
        label: {
          padding: 'initial',
        },
        icon: ({ theme }) =>
          theme.unstable_sx({
            mr: 0.5,
            ml: '-2px',
          }),
      },
    },
  },
});
```

----------------------------------------

TITLE: Setting Grid Column Properties
DESCRIPTION: Demonstrates how to set grid column positioning using either line numbers or span values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/grid/grid.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Box sx={{ gridColumn: '1 / 3' }}>…
```

LANGUAGE: jsx
CODE:
```
<Box sx={{ gridColumn: 'span 2' }}>…
```

----------------------------------------

TITLE: Configuring Next.js Font Optimization with Material UI
DESCRIPTION: Implementation of Next.js font optimization using the Roboto font with Material UI theming configuration in _app.tsx.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_18

LANGUAGE: diff
CODE:
```
 import * as React from 'react';
 import Head from 'next/head';
 import { AppProps } from 'next/app';
 import { AppCacheProvider } from '@mui/material-nextjs/v15-pagesRouter';
+import { ThemeProvider, createTheme } from '@mui/material/styles';
+import { Roboto } from 'next/font/google';

+const roboto = Roboto({
+  weight: ['300', '400', '500', '700'],
+  subsets: ['latin'],
+  display: 'swap',
+  variable: '--font-roboto',
+});

+const theme = createTheme({
+  typography: {
+    fontFamily: 'var(--font-roboto)',
+  },
+});

 export default function MyApp(props: AppProps) {
  const { Component, pageProps } = props;
  return (
    <AppCacheProvider {...props}>
      <Head>...</Head>
+     <ThemeProvider theme={theme}>
+       <main className={roboto.variable}>
          <Component {...pageProps} />
+       </main>
+     </ThemeProvider>
    </AppCacheProvider>
  );
 }
```

----------------------------------------

TITLE: Integrating Joy UI Link with React Router
DESCRIPTION: Demonstrates how to use the Joy UI Link component with React Router. It uses the 'component' prop to render the Link as a React Router Link component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/link/link.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { Link as RouterLink } from 'react-router';
import Link from '@mui/joy/Link';

<Link component={RouterLink} to="/docs">
  Read doc
</Link>;
```

----------------------------------------

TITLE: Implementing Responsive Grid Spacing in React
DESCRIPTION: This snippet demonstrates how to use the new Grid component features in Material-UI v5, including row and column spacing, responsive values, and custom column counts.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q2-update.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Grid container rowSpacing={1} columnSpacing={2} />
```

LANGUAGE: jsx
CODE:
```
<Grid container spacing={{ xs: 2, md: 3 }} />
```

LANGUAGE: jsx
CODE:
```
<Grid container columns={16}>
```

----------------------------------------

TITLE: Configuring Danger Colors in MUI Joy UI Theme
DESCRIPTION: Defines danger color palette and its variants for both light and dark themes. Includes styling for various component states like plain, outlined, soft, and solid variants.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
const danger = {
  50: '#FFF8F6',
  100: '#FFE9E8',
  200: '#FFC7C5',
  300: '#FF9192',
  400: '#FA5255',
  500: '#D3232F',
  600: '#A10E25',
  700: '#77061B',
  800: '#580013',
  900: '#39000D',
};

extendTheme({
  colorSchemes: {
    light: {
      palette: {
        danger: {
          ...danger,
          plainColor: `var(--joy-palette-danger-600)`,
          plainHoverBg: `var(--joy-palette-danger-100)`,
          plainActiveBg: `var(--joy-palette-danger-200)`,
          plainDisabledColor: `var(--joy-palette-danger-200)`,

          outlinedColor: `var(--joy-palette-danger-500)`,
          outlinedBorder: `var(--joy-palette-danger-200)`,
          outlinedHoverBg: `var(--joy-palette-danger-100)`,
          outlinedHoverBorder: `var(--joy-palette-danger-300)`,
          outlinedActiveBg: `var(--joy-palette-danger-200)`,
          outlinedDisabledColor: `var(--joy-palette-danger-100)`,
          outlinedDisabledBorder: `var(--joy-palette-danger-100)`,

          softColor: `var(--joy-palette-danger-600)`,
          softBg: `var(--joy-palette-danger-100)`,
          softHoverBg: `var(--joy-palette-danger-200)`,
          softActiveBg: `var(--joy-palette-danger-300)`,
          softDisabledColor: `var(--joy-palette-danger-300)`,
          softDisabledBg: `var(--joy-palette-danger}-)50`,

          solidColor: '#fff',
          solidBg: `var(--joy-palette-danger-500)`,
          solidHoverBg: `var(--joy-palette-danger-600)`,
          solidActiveBg: `var(--joy-palette-danger-700)`,
          solidDisabledColor: `#fff`,
          solidDisabledBg: `var(--joy-palette-danger-200)`,
        },
      },
    },
    dark: {
      palette: {
        danger: {
          ...danger,
          plainColor: `var(--joy-palette-danger-300)`,
          plainHoverBg: `var(--joy-palette-danger-800)`,
          plainActiveBg: `var(--joy-palette-danger-700)`,
          plainDisabledColor: `var(--joy-palette-danger-800)`,

          outlinedColor: `var(--joy-palette-danger-200)`,
          outlinedBorder: `var(--joy-palette-danger-700)`,
          outlinedHoverBg: `var(--joy-palette-danger-800)`,
          outlinedHoverBorder: `var(--joy-palette-danger-600)`,
          outlinedActiveBg: `var(--joy-palette-danger-900)`,



```

----------------------------------------

TITLE: Applying Styles with sx Prop - MUI/System Box - JSX
DESCRIPTION: This code demonstrates applying the same styling as the previous snippet using the MUI `Box` component and its `sx` prop. It allows defining styles directly on the component instance, mapping values to the theme and supporting CSS properties.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/usage/usage.md#_snippet_1

LANGUAGE: jsx
CODE:
```
<Box
  sx={{
    bgcolor: 'background.paper',
    boxShadow: 1,
    borderRadius: 1,
    p: 2,
    minWidth: 300,
  }}
>
  <Box sx={{ color: 'text.secondary' }}>Sessions</Box>
  <Box sx={{ color: 'text.primary', fontSize: 34, fontWeight: 'medium' }}>
    98.3 K
  </Box>
  <Box
    component={TrendingUpIcon}
    sx={{ color: 'success.dark', fontSize: 16, verticalAlign: 'sub' }}
  />
  <Box
    sx={{ color: 'success.dark', display: 'inline', fontWeight: 'medium', mx: 0.5 }}
  >
    18.77%
  </Box>
  <Box sx={{ color: 'text.secondary', display: 'inline', fontSize: 12 }}>
    vs. last week
  </Box>
</Box>
```

----------------------------------------

TITLE: Overriding DataGrid Internal Components using the `components` Prop in React (JSX)
DESCRIPTION: This JSX snippet shows how to replace a default internal component of the MUI DataGrid, specifically the `FilterPanelDeleteIcon`, with a custom `DeleteIcon` component. This is achieved by passing an object to the `components` prop where the key is the slot name (`FilterPanelDeleteIcon`) and the value is the custom component (`DeleteIcon`). This pattern allows for granular UI customization without modifying the core DataGrid structure. Requires React, MUI DataGrid, and a defined `DeleteIcon` component. The `{...data}` spread assumes existing row and column data props are passed.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/making-customizable-components.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
<DataGrid {...data} components={{ FilterPanelDeleteIcon: DeleteIcon }} />
```

----------------------------------------

TITLE: Defining Custom MUI Breakpoints in Theme (JSX)
DESCRIPTION: Creates a custom MUI theme by defining new breakpoint names (like mobile, tablet) and their corresponding pixel values within the `breakpoints.values` object. Demonstrates how to use these custom breakpoint names as keys within the `sx` prop object to apply responsive styles to a component. Requires `createTheme`, `ThemeProvider`, and the `Box` component from Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/usage/usage.md#_snippet_8

LANGUAGE: jsx
CODE:
```
import * as React from 'react';
import Box from '@mui/material/Box';
import { createTheme, ThemeProvider } from '@mui/material/styles';

const theme = createTheme({
  breakpoints: {
    values: {
      mobile: 0,
      tablet: 640,
      laptop: 1024,
      desktop: 1280,
    },
  },
});

export default function CustomBreakpoints() {
  return (
    <ThemeProvider theme={theme}>
      <Box
        sx={{
          width: {
            mobile: 100,
            laptop: 300,
          },
        }}
      >
        This box has a responsive width
      </Box>
    </ThemeProvider>
  );
}
```

----------------------------------------

TITLE: Setting Margin Using Theme Spacing with sx Prop in Material UI JSX
DESCRIPTION: Shows how spacing properties like `margin` (and `padding`, plus their longhand versions and aliases like `m`, `mt`, `p`, `px`, etc.) within the `sx` prop multiply their numeric value by the `theme.spacing` unit (default 8px) to calculate the final pixel value.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_11

LANGUAGE: jsx
CODE:
```
<Box sx={{ margin: 2 }} />
// equivalent to margin: theme => theme.spacing(2)
```

----------------------------------------

TITLE: Configuring Autocomplete Options
DESCRIPTION: Example showing how to structure options for the Autocomplete component using either objects with label and id properties or simple string arrays.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
const options = [
  { label: 'The Godfather', id: 1 },
  { label: 'Pulp Fiction', id: 2 },
];
// or
const options = ['The Godfather', 'Pulp Fiction'];
```

----------------------------------------

TITLE: Adding Custom Component Variants to MUI Theme (TSX)
DESCRIPTION: Demonstrates adding a custom variant (`dashed`) to the `MuiButton` component definition within the theme. This allows applying specific styles when the `variant="dashed"` and `color="error"` props are used together. TypeScript declarations are updated to recognize the new variant.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_4

LANGUAGE: tsx
CODE:
```
import { createTheme, Button } from '@mui/material';

// 1. Extend the theme.
const theme = createTheme({
  components: {
    MuiButton: {
      variants: [
        {
          props: { variant: 'dashed', color: 'error' },
          style: {
            border: '1px dashed red',
            color: 'red',
          }
        }
      ]
    }
  }
});

// 2. Update the Button's color prop options
declare module '@mui/material/Button' {
  interface ButtonPropsVariantOverrides {
    dashed: true;
  }
}

// 3. Profit
<Button variant="dashed" color="error">
  dashed
</Button>
```

----------------------------------------

TITLE: Integrating MUI CSS Variables Provider and Hook (React/JavaScript)
DESCRIPTION: This React/JavaScript code shows the top-level integration by wrapping the main application component (`App`) with the `CssVarsProvider`. It also demonstrates using the `useColorScheme` hook within `App` to retrieve the current mode and provide a function (`setMode`) to toggle between light and dark modes, which updates the CSS variables globally.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/experimental-api/css-theme-variables/css-theme-variables.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
// App.js
function App() {
  const { setMode, mode } = useColorScheme();
  const toggleMode = () => {
    setMode(mode === 'dark' ? 'light' : 'dark');
  };

  return (
    <div>
      <h1>Current Mode: {mode}</h1>
      <Button onClick={toggleMode}>Toggle Mode</Button>
    </div>
  );
}

// main.js
import * as React from 'react';
import * as ReactDOM from 'react-dom/client';
import App from './App';
import { CssVarsProvider } from './CssVarsProvider';

ReactDOM.createRoot(document.getElementById('root')).render(
  <CssVarsProvider>
    <App />
  </CssVarsProvider>,
);
```

----------------------------------------

TITLE: Configuring MUI Theme with Localization for Date Pickers in React
DESCRIPTION: This snippet demonstrates how to set up a MUI theme with localization support for date pickers, data grid, and core components. It imports necessary modules and creates a theme with Bulgarian translations.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/date-pickers-stable-v5.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import { createTheme, ThemeProvider } from '@mui/material/styles';
import { DataGrid, bgBG as dataGridBgBG } from '@mui/x-data-grid';
import { bgBG as coreBgBG } from '@mui/material/locale';
import bgLocale from 'date-fns/locale/bg';
import { CalendarPicker, LocalizationProvider, bgBG } from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';

const theme = createTheme(
  {
    palette: {
      primary: { main: '#1976d2' },
    },
  },
  bgBG, // x-date-pickers translations
  dataGridBgBG, // x-data-grid translations
  coreBgBG, // core translations
);
```

----------------------------------------

TITLE: Using CSS color-mix Function for Runtime Calculations
DESCRIPTION: Shows how to perform runtime color calculations using CSS functions like color-mix instead of JavaScript. This approach is recommended for operations like adjusting color transparency.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
const Custom = styled('div')(({ theme }) => ({
  color: `color-mix(in srgb, ${theme.vars.palette.text.primary}, transparent 50%)`,
}));
```

----------------------------------------

TITLE: Adding Custom Styles Based on New Prop Values - JavaScript
DESCRIPTION: Define styles for a new, custom prop value using the `variants` key. This example adds a `dashed` variant to the `MuiButton` component with specific text transformation and border styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theme-components/theme-components.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const theme = createTheme({
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          variants: [
            {
              // `dashed` is an example value, it can be any name.
              props: { variant: 'dashed' },
              style: {
                textTransform: 'none',
                border: `2px dashed ${blue[500]}`,
              },
            },
          ],
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Applying Text Colors with Material-UI Box Component
DESCRIPTION: This snippet shows how to set text colors using the 'color' prop of the Box component. It demonstrates various color options from the Material-UI palette, including primary, secondary, error, warning, info, success, and different text variants.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/palette/palette.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Box sx={{ color: 'primary.main' }}>…
<Box sx={{ color: 'secondary.main' }}>…
<Box sx={{ color: 'error.main' }}>…
<Box sx={{ color: 'warning.main' }}>…
<Box sx={{ color: 'info.main' }}>…
<Box sx={{ color: 'success.main' }}>…
<Box sx={{ color: 'text.primary' }}>…
<Box sx={{ color: 'text.secondary' }}>…
<Box sx={{ color: 'text.disabled' }}>…
```

----------------------------------------

TITLE: Defining Custom MUI Theme with CSS Variables (JavaScript)
DESCRIPTION: This JavaScript code defines a custom theme object for use with MUI's CSS variable provider. It sets up light and dark color schemes and uses `@mui/system` utilities (`unstable_createGetCssVar`, `unstable_prepareCssVars`) to prepare and attach CSS variables to the theme object, making them accessible via `theme.vars`. This theme object will then be passed to the `createCssVarsProvider` function.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/experimental-api/css-theme-variables/css-theme-variables.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
// extendTheme.js
import {
  unstable_createGetCssVar as systemCreateGetCssVar,
  unstable_prepareCssVars as prepareCssVars,
} from '@mui/system';

const lightColorScheme = {
  palette: {
    mode: 'light',
    primary: {
      default: '#3990FF',
      dark: '#02367D',
    },
    text: {
      default: '#111111',
    },
    // ... other colors
  },
};

const darkColorScheme = {
  palette: {
    mode: 'dark',
    primary: {
      default: '#265D97',
      dark: '#132F4C',
      main: '#5090D3',
    },
    text: {
      default: '#ffffff',
    },
    // ... other colors
  },
};

const createGetCssVar = (cssVarPrefix = 'my-app') =>
  systemCreateGetCssVar(cssVarPrefix);

function extendTheme({ cssVarPrefix = 'my-app' } = {}) {
  const getCssVar = createGetCssVar(cssVarPrefix);
  const theme = {
    colorSchemes: {
      light: lightColorScheme,
      dark: darkColorScheme,
    },
    // ... any other objects independent of color-scheme,
    // like fontSizes, spacing tokens, etc
  };

  const { vars: themeVars, generateCssVars } = prepareCssVars(
    { colorSchemes: theme.colorSchemes },
    {
      prefix: cssVarPrefix,
    },
  );
  theme.vars = themeVars;
  theme.generateCssVars = generateCssVars;
  theme.palette = {
    ...theme.colorSchemes.light.palette,
    colorScheme: 'light',
  };

  return theme;
}

const myCustomDefaultTheme = extendTheme();

export default myCustomDefaultTheme;
```

----------------------------------------

TITLE: Handling Click Events in React Button Component
DESCRIPTION: Demonstrates how to handle click events on a Button component using the onClick prop. This example shows a simple alert being triggered when the button is clicked.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/buttons/buttons.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
<Button
  onClick={() => {
    alert('clicked');
  }}
>
  Click me
</Button>
```

----------------------------------------

TITLE: Implementing Nested Grids with Material UI Grid v2 (JavaScript)
DESCRIPTION: Example showing how to create nested grid structures using Material UI's Grid v2 (`Unstable_Grid2`). Inner grid containers automatically inherit `spacing` from their parent container unless explicitly overridden, resolving a limitation of Grid v1.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/build-layouts-faster-with-grid-v2.md#2025-04-22_snippet_6

LANGUAGE: js
CODE:
```
import Grid from '@mui/material/Unstable_Grid2';

// root grid container
<Grid container spacing={2}>
  <Grid>...</Grid>
  <Grid container>
    {/* inherits spacing from the root container */}
    <Grid>...</Grid>
    <Grid>...</Grid>
  </Grid>
  <Grid>...</Grid>
</Grid>;
```

----------------------------------------

TITLE: Customizing Typography Variant Mapping in Material-UI Theme
DESCRIPTION: JavaScript code to customize the global mapping of typography variants to HTML elements in the Material-UI theme configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/typography/typography.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
const theme = createTheme({
  components: {
    MuiTypography: {
      defaultProps: {
        variantMapping: {
          h1: 'h2',
          h2: 'h2',
          h3: 'h2',
          h4: 'h2',
          h5: 'h2',
          h6: 'h2',
          subtitle1: 'h2',
          subtitle2: 'h2',
          body1: 'span',
          body2: 'span',
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Styling Button Padding Using styled and sx in MUI - JavaScript
DESCRIPTION: Compares the difference in padding meaning between styled and the sx prop. Using styled, 'padding: 1' means '1px', while in the sx prop, 'padding: 1' resolves to 'theme.spacing(1)'. Both examples are self-contained and require @mui/material or @mui/system, and showcase how developer intent is expressed differently.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
const MyStyledButton = styled('button')({
  padding: 1, // means "1px", NOT "theme.spacing(1)"
});
```

LANGUAGE: javascript
CODE:
```
import Button from '@mui/material/Button';

const MyStyledButton = (props) => (
  <Button
    sx={{
      padding: 1, // means "theme.spacing(1)", NOT "1px"
    }}
  >
    {props.children}
  </Button>
);
```

----------------------------------------

TITLE: Integrating Breadcrumbs with React Router
DESCRIPTION: Demonstrates how to integrate the Breadcrumbs component with React Router for dynamic breadcrumb generation based on the current route.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_7

LANGUAGE: JSX
CODE:
```
{"demo": "RouterBreadcrumbs.js", "bg": true}
```

----------------------------------------

TITLE: Customizing Joy UI Components through Theme Configuration
DESCRIPTION: This example shows how to customize specific component styles globally by targeting them directly in the theme. It demonstrates changing the default font size of all Button components to large using the component identifier in the theme configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/approaches/approaches.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';
import Button from '@mui/joy/Button';

const theme = extendTheme({
  components: {
    // The component identifier always start with `Joy${ComponentName}`.
    JoyButton: {
      styleOverrides: {
        root: ({ theme }) => {
          // theme.vars.* return the CSS variables.
          fontSize: theme.vars.fontSize.lg, // 'var(--joy-fontSize-lg)'
        },
      },
    },
  },
});

function MyApp() {
  return (
    <CssVarsProvider theme={theme}>
      <Button>Text</Button>
    </CssVarsProvider>
  );
}
```

----------------------------------------

TITLE: Creating a Basic Grid Layout in React
DESCRIPTION: This snippet demonstrates how to create a basic grid layout using the Grid component. It shows the usage of the container prop and setting column widths using the size prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/grid/grid.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
<Grid container spacing={2}>
  <Grid size={6}>
    <Item>xs=6</Item>
  </Grid>
  <Grid size={6}>
    <Item>xs=6</Item>
  </Grid>
  <Grid size={6}>
    <Item>xs=6</Item>
  </Grid>
  <Grid size={6}>
    <Item>xs=6</Item>
  </Grid>
</Grid>
```

----------------------------------------

TITLE: Configuring TypeScript for Material-UI Theme Variables
DESCRIPTION: Demonstrates how to enable TypeScript typings for theme variables in Material-UI. This includes importing the necessary module augmentation and showing a typed-safe usage example.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/usage.md#2025-04-22_snippet_5

LANGUAGE: ts
CODE:
```
// The import can be in any file that is included in your `tsconfig.json`
import type {} from '@mui/material/themeCssVarsAugmentation';
import { styled } from '@mui/material/styles';

const StyledComponent = styled('button')(({ theme }) => ({
  // ✅ typed-safe
  color: theme.vars.palette.primary.main,
}));
```

----------------------------------------

TITLE: Extending Theme with Primary Color Palette in JavaScript
DESCRIPTION: This JavaScript snippet defines a `primary` object containing color shades (50, 100, 200). It then utilizes the `extendTheme` function (presumably from a UI library like Joy UI/MUI) to customize the light color scheme's palette. It assigns the defined `primary` colors and configures related properties for plain components (`plainColor`, `plainHoverBg`, `plainActiveBg`, `plainDisabledColor`) using CSS variables derived from the theme's palette.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/markdown.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
const primary = {
  50: '#F4FAFF',
  100: '#DDF1FF',
  200: '#ADDBFF',
};

extendTheme({
  colorSchemes: {
    light: {
      palette: {
        primary: {
          ...primary,
          plainColor: `var(--joy-palette-primary-600)`,
          plainHoverBg: `var(--joy-palette-primary-100)`,
          plainActiveBg: `var(--joy-palette-primary-200)`,
          plainDisabledColor: `var(--joy-palette-primary-200)`,
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Implementing Basic Checkboxes in React
DESCRIPTION: Demonstrates the basic usage of checkboxes in a React component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
{"demo": "Checkboxes.js"}
```

----------------------------------------

TITLE: Using sx Prop Shorthands - MUI/System - JSX
DESCRIPTION: This example demonstrates using various shorthand properties provided by the `sx` prop to quickly apply common styles based on the theme. It includes shorthands for shadow, color, margin, padding (including responsive), and z-index.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/usage/usage.md#_snippet_3

LANGUAGE: jsx
CODE:
```
<Box
  sx={{  boxShadow: 1, // theme.shadows[1]
    color: 'primary.main', // theme.palette.primary.main
    m: 1, // margin: theme.spacing(1)
    p: {
      xs: 1, // [theme.breakpoints.up('xs')]: { padding: theme.spacing(1) }
    },
    zIndex: 'tooltip', // theme.zIndex.tooltip
  }}
>

```

----------------------------------------

TITLE: Synchronizing Material UI ThemeProvider and InitColorSchemeScript Default Mode (TypeScript)
DESCRIPTION: Shows that if a `defaultMode` is specified on the `InitColorSchemeScript` component, the same `defaultMode` value must also be set on the `ThemeProvider` component wrapping the application. This ensures consistency in the initial mode applied both by the script and the React component tree.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/init-color-scheme-script/init-color-scheme-script.md#_snippet_7

LANGUAGE: TypeScript
CODE:
```
<ThemeProvider theme={theme} defaultMode="dark">
```

----------------------------------------

TITLE: Implementing Accessible Radio Button
DESCRIPTION: Example showing how to add accessibility attributes to a Radio component using inputProps.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/radio-buttons/radio-buttons.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Radio
  value="radioA"
  inputProps={{
    'aria-label': 'Radio A',
  }}
/>
```

----------------------------------------

TITLE: Migrating Deprecated sx Prop Callback Syntax
DESCRIPTION: Shows the deprecated syntax where a callback was used for an individual `sx` property value and contrasts it with the recommended pattern where the entire `sx` prop value is a callback returning a style object.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_16

LANGUAGE: diff
CODE:
```
- sx={{ height: (theme) => theme.spacing(10) }}
+ sx={(theme) => ({ height: theme.spacing(10) })}
```

----------------------------------------

TITLE: Rendering Button Components with Global Variants in Joy UI
DESCRIPTION: Demonstrates how to use the four global variants (solid, soft, outlined, plain) with the Button component in Joy UI. This showcases the consistency and ease of use across components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/first-look-at-joy.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
<Button variant="solid">
<Button variant="soft">
<Button variant="outlined">
<Button variant="plain">
```

----------------------------------------

TITLE: Ref Forwarding Class Component Pattern
DESCRIPTION: Shows how to properly forward refs in class components to avoid React.StrictMode warnings when using Material UI components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/composition/composition.md#2025-04-22_snippet_4

LANGUAGE: diff
CODE:
```
 class Component extends React.Component {
   render() {
-    const { props } = this;
+    const { forwardedRef, ...props } = this.props;
     return <div {...props} ref={forwardedRef} />;
   }
 }

-export default Component;
+export default React.forwardRef((props, ref) => <Component {...props} forwardedRef={ref} />);
```

----------------------------------------

TITLE: Configuring App Layout for Material UI with Next.js App Router
DESCRIPTION: Diff showing how to modify the app/layout.tsx file to integrate AppRouterCacheProvider for Material UI with Next.js App Router.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_3

LANGUAGE: diff
CODE:
```
+import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';
 // or `v1X-appRouter` if you are using Next.js v1X

 export default function RootLayout(props) {
   return (
     <html lang="en">
       <body>
+        <AppRouterCacheProvider>
           {props.children}
+        </AppRouterCacheProvider>
       </body>
     </html>
   );
 }
```

----------------------------------------

TITLE: Providing Per-Field Functions in styled vs. sx (Not Recommended) - JavaScript
DESCRIPTION: Demonstrates that styled does not support per-field property functions for style fields (as seen in syntax 'backgroundColor: (props) => ...'); this usage is discouraged for readability. Instead, one top-level function should be used. The sx prop, however, allows functions per style property. Dependencies include MUI's Emotion or styled-components engine for styled, and @mui/material for sx.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
// You may find this syntax in the wild, but for code readability
// we recommend using only one top-level function
const MyStyledButtonPropsPerField = styled('button')({
  backgroundColor: (props) => props.myBackgroundColor,
});
```

LANGUAGE: javascript
CODE:
```
import Button from '@mui/material/Button';
import { lighten } from 'polished';

const MyStyledButton = (props) => (
  <Button
    sx={{ backgroundColor: (theme) => lighten(0.2, theme.palette.primary.main) }}
  >
    {props.children}
  </Button>
);
// Note: for direct theme access without modification, you can also use a shortcut by providing the key as a string
const MyStyledButton = (props) => (
  <Button sx={{ backgroundColor: 'primary.main' }}>{props.children}</Button>
);
```

----------------------------------------

TITLE: Implementing Server-Side Rendering with Dark Mode in Next.js using Joy UI
DESCRIPTION: Demonstrates how to set up server-side rendering with dark mode support in a Next.js application using Joy UI's InitColorSchemeScript component. This prevents UI flicker when users refresh or re-enter a page with dark mode enabled.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/first-look-at-joy.md#2025-04-22_snippet_2

LANGUAGE: JavaScript
CODE:
```
// A Next.js example
import Document, { Html, Head, Main, NextScript } from 'next/document';
import InitColorSchemeScript from '@mui/joy/InitColorSchemeScript';

export default class MyDocument extends Document {
  render() {
    return (
      <Html data-color-scheme="light">
        <Head>...</Head>
        <body>
          <InitColorSchemeScript />
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}
```

----------------------------------------

TITLE: Using Joy UI Components in Next.js Server Components
DESCRIPTION: This example shows how to use Joy UI components in a Next.js server component (page.tsx) without any additional directives. It demonstrates the proper way to use Joy UI components in a server-rendered context.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/next-js-app-router/next-js-app-router.md#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
// app/page.tsx
import Sheet from '@mui/joy/Sheet';
import Typography from '@mui/joy/Typography';

export default function Page() {
  return (
    <Sheet>
      <Typography fontSize="sm">Hello World</Typography>
    </Sheet>
  );
}
```

----------------------------------------

TITLE: Combining Objects and Callbacks in sx Prop Array (Material UI JSX)
DESCRIPTION: Shows that elements within an `sx` prop array can be either plain style objects or callback functions that receive the theme. This allows mixing static styles, theme-dependent styles accessed via the callback, and conditional overrides within a single `sx` prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_20

LANGUAGE: jsx
CODE:
```
<Box
  sx={[
    { mr: 2, color: 'red' },
    (theme) => ({
      '&:hover': {
        color: theme.palette.primary.main,
      },
    }),
  ]}
/>
```

----------------------------------------

TITLE: TypeScript Interface Extension for Material UI Button Props
DESCRIPTION: This TypeScript snippet shows how to extend the ButtonPropsVariantOverrides interface to add custom variants to the Button component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/callback-support-in-style-overrides.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
declare module '@mui/material/Button' {
  interface ButtonPropsVariantOverrides {
    dashed: true;
  }
}
```

----------------------------------------

TITLE: CSS z-index Values for Material UI Components
DESCRIPTION: Default z-index values used by various Material UI components to ensure proper stacking order in the UI. These values start at 1000 and can be customized through the theme's zIndex key.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/z-index/z-index.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
mobile stepper { z-index: 1000; }
fab { z-index: 1050; }
speed dial { z-index: 1050; }
app bar { z-index: 1100; }
drawer { z-index: 1200; }
modal { z-index: 1300; }
snackbar { z-index: 1400; }
tooltip { z-index: 1500; }
```

----------------------------------------

TITLE: Customizing Badge Styling in React Material-UI
DESCRIPTION: Example of custom styling and overriding default Badge component styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
CustomizedBadges.js
```

----------------------------------------

TITLE: Running Grid Migration Codemod
DESCRIPTION: Commands to run the codemod for automatically migrating Grid component props to the new format.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/migrating-to-v6/migrating-to-v6.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v6.0.0/grid-v2-props <path/to/folder>
```

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v6.0.0/grid-v2-props <path/to/folder> --jscodeshift='--muiBreakpoints=mobile,desktop'
```

----------------------------------------

TITLE: Passing Props to DataGrid Slots using `componentsProps` in React (JSX)
DESCRIPTION: This JSX snippet demonstrates how to pass custom props to an internal component (slot) of the MUI DataGrid using the `componentsProps` prop. It specifically passes `{ columnsSort: 'asc' }` to the `filterPanel` slot, customizing the column sorting behavior directly within the DataGrid definition. This approach avoids creating separate wrapper components for simple prop overrides. Requires React and MUI DataGrid.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/making-customizable-components.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
<DataGrid
  componentsProps={{
    filterPanel: {
      columnsSort: 'asc',
    },
  }}
/>
```

----------------------------------------

TITLE: Implementing Simple Badge in React Material-UI
DESCRIPTION: Demonstrates basic usage of the Badge component with text content using primary and secondary colors.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
SimpleBadge.js
```

----------------------------------------

TITLE: Importing the styled Utility from MUI System or Material - TypeScript
DESCRIPTION: This code provides two ways to import the styled utility into a TypeScript project. If you are using the general MUI System, you import from '@mui/system'. If working within @mui/material, you import from '@mui/material/styles'. No parameters are required for this import, but you must have one of these packages installed. The resultant styled function enables custom component styling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { styled } from '@mui/system';
// If you are using @mui/material
import { styled } from '@mui/material/styles';
```

----------------------------------------

TITLE: Fixing white-space: nowrap Issues in Stack (JSX)
DESCRIPTION: Demonstrates the solution to the white-space: nowrap conflict by setting minWidth: 0 on the Stack component, which keeps the text within the container boundaries.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stack/stack.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
<Stack direction="row" sx={{ minWidth: 0 }}>
  <Typography noWrap>
```

----------------------------------------

TITLE: Demonstrating theme.applyStyles Specificity - MUI JSX
DESCRIPTION: Provides examples using the `styled` function to show how styles applied with `theme.applyStyles` in a base component override styles defined outside `applyStyles` in a derived component when `cssVariables: true`. Shows how to correctly override `applyStyles` styles by using `applyStyles` in the derived component as well.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#_snippet_12

LANGUAGE: jsx
CODE:
```
const BaseButton = styled('button')(({ theme }) =>
  theme.applyStyles('dark', {
    backgroundColor: 'white',
  }),
);

const AliceblueButton = styled(BaseButton)({
  backgroundColor: 'aliceblue', // In dark mode, backgroundColor will be white as theme.applyStyles() has higher specificity
});

const PinkButton = styled(BaseButton)(({ theme }) =>
  theme.applyStyles('dark', {
    backgroundColor: 'pink', // In dark mode, backgroundColor will be pink
  }),
);
```

----------------------------------------

TITLE: Configuring Input Props for HTML Input Element
DESCRIPTION: Shows how to pass props directly to the inner HTML input element using the slotProps property.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/input/input.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<Input
  slotProps={{
    input: {
      id: 'unique-id',
      // other HTML input props
    }
  }}
/>
```

----------------------------------------

TITLE: Integrating Next.js Font Variable - Diff
DESCRIPTION: Diff illustrating how to configure `next/font` with a CSS variable and apply that variable to the `body` className in the Next.js root layout for font optimization.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_9

LANGUAGE: diff
CODE:
```
 import { Roboto } from 'next/font/google';

 const roboto = Roboto({
   weight: ['300', '400', '500', '700'],
   subsets: ['latin'],
   display: 'swap',
+  variable: '--my-font-family',
 });

export default function RootLayout(props) {
   const { children } = props;
   return (
     <html lang="en">
+      <body className={roboto.variable}>
          {children}
       </body>
     </html>
   );
 }
```

----------------------------------------

TITLE: Running ListItem Button Migration Codemod for Material UI v6
DESCRIPTION: Command to run the codemod that automatically converts ListItem components with button prop to the new ListItemButton component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_14

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v6.0.0/list-item-button-prop <path/to/folder>
```

----------------------------------------

TITLE: Configuring Shared Theme with Custom Components
DESCRIPTION: Implementation of AppTheme with custom themed components for charts, data grid, date pickers, and tree view customizations.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
import AppTheme from '../shared-theme/AppTheme';

const xThemeComponents = {
  ...chartsCustomizations,
  ...dataGridCustomizations,
  ...datePickersCustomizations,
  ...treeViewCustomizations,
};

export default function Dashboard(props: { disableCustomTheme?: boolean }) {
  return (
    <AppTheme {...props} themeComponents={xThemeComponents}>...</AppTheme>
  )
}
```

----------------------------------------

TITLE: Disabling Ripple Effect in Material UI Theme
DESCRIPTION: Configuration to globally disable the ripple effect across all Material UI components by modifying the theme settings.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { createTheme } from '@mui/material';

const theme = createTheme({
  components: {
    // Name of the component ⚛️
    MuiButtonBase: {
      defaultProps: {
        // The props to apply
        disableRipple: true, // No more ripple, on the whole application 💣!
      },
    },
  },
});
```

----------------------------------------

TITLE: Creating a Theme with Font Integration for Next.js App Router
DESCRIPTION: JavaScript code for creating a Material UI theme with Next.js font integration using CSS variables.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
'use client';
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  typography: {
    fontFamily: 'var(--font-roboto)',
  },
});

export default theme;
```

----------------------------------------

TITLE: Using Component Props for Styling with styled and sx - JavaScript
DESCRIPTION: Illustrates the pattern for using component props in styles. With styled, a function is passed that receives props, while with sx, props are accessed inline with the component. No external dependencies except MUI for the styled or sx prop are necessary.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
const MyStyledButton = styled('button')((props) => ({
  backgroundColor: props.myBackgroundColor,
}));
```

LANGUAGE: javascript
CODE:
```
import Button from '@mui/material/Button';

const MyStyledButton = (props) => (
  <Button sx={{ backgroundColor: props.myCustomColor }}>{props.children}</Button>
);
```

----------------------------------------

TITLE: TypeScript Interface Augmentation for Custom Variants in Joy UI
DESCRIPTION: Shows how to add type safety for custom variant values using TypeScript module augmentation, enabling proper type checking with custom variants.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_13

LANGUAGE: typescript
CODE:
```
// This part could be declared in your theme file
declare module '@mui/joy/Sheet' {
  interface SheetPropsVariantOverrides {
    glass: true;
  }
}

// typed-safe
<Sheet variant="glass" />;
```

----------------------------------------

TITLE: Implementing Responsive Typography with Media Queries
DESCRIPTION: Shows how to create responsive typography using media queries and breakpoints in Material UI theme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/typography/typography.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
const theme = createTheme();

theme.typography.h3 = {
  fontSize: '1.2rem',
  '@media (min-width:600px)': {
    fontSize: '1.5rem',
  },
  [theme.breakpoints.up('md')]: {
    fontSize: '2.4rem',
  },
};
```

----------------------------------------

TITLE: TypeScript Declaration for Custom Shadow Keys
DESCRIPTION: Shows how to augment the Shadow interface in TypeScript when adding custom shadow keys to the Joy UI theme, ensuring type safety and autocompletion.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-shadow/theme-shadow.md#2025-04-22_snippet_2

LANGUAGE: ts
CODE:
```
// You can put this to any file that's included in your tsconfig
declare module '@mui/joy/styles' {
  interface Shadow {
    subtle: string;
    strong: string;
  }
}
```

----------------------------------------

TITLE: Installing Dependencies and Running Development Server (Bash)
DESCRIPTION: These commands install all necessary project dependencies listed in the `package.json` file using npm, and then start the Next.js development server, typically accessible at http://localhost:3000. Requires Node.js and npm to be installed.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Adding sx Prop to Custom Component - MUI/Styled - JSX
DESCRIPTION: This snippet shows how to make a custom React component, like a simple `div`, compatible with the `sx` prop. By wrapping it with the `styled` utility from `@mui/material/styles`, the component gains the ability to process and apply styles defined via `sx`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/usage/usage.md#_snippet_2

LANGUAGE: jsx
CODE:
```
import { styled } from '@mui/material/styles';

const Div = styled('div')``;
```

----------------------------------------

TITLE: CSS State Classes Example
DESCRIPTION: Example showing how to customize component states using CSS classes with proper specificity
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/how-to-customize/how-to-customize.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
.Button {
  color: black;
}

/* Increase the specificity */
.Button:disabled {
  color: white;
}
```

LANGUAGE: jsx
CODE:
```
<Button disabled className="Button">
```

----------------------------------------

TITLE: Creating Accessible Text Rating in React with Material-UI
DESCRIPTION: Demonstrates how to create an accessible rating component with text labels. This is important for meeting WCAG 2.1 success criteria and ensuring the component is usable for all users.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/rating/rating.md#2025-04-22_snippet_6

LANGUAGE: JSX
CODE:
```
{"demo": "TextRating.js"}
```

----------------------------------------

TITLE: Installing MUI Icons Package with npm
DESCRIPTION: Command to install the MUI Icons package which provides Material Design icons as React components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
npm install @mui/icons-material
```

----------------------------------------

TITLE: Setting Flexbox Display with Material-UI Box Component in JSX
DESCRIPTION: Demonstrates how to use the display property to create flex and inline-flex containers using the Material-UI Box component. This is the foundational property for enabling flexbox layout.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Box sx={{ display: 'flex' }}>…
<Box sx={{ display: 'inline-flex' }}>…
```

----------------------------------------

TITLE: Basic Divider Implementation in Joy UI
DESCRIPTION: Demonstrates the basic implementation of a Divider component in a React application using Joy UI. This code shows the minimal setup required to render a simple divider.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/divider/divider.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Divider from '@mui/joy/Divider';

export default function MyApp() {
  return <Divider />;
}
```

----------------------------------------

TITLE: Applying Different Styles per Color Scheme in Joy UI Theme
DESCRIPTION: This snippet shows how to use theme.getColorSchemeSelector to apply different styles for light and dark modes in a Joy UI component. It modifies the boxShadow property of a JoyChip component, setting a shadow for light mode and removing it for dark mode.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
extendTheme({
  components: {
    JoyChip: {
      styleOverrides: {
        root: ({ ownerState, theme }) => ({
          // for the default color scheme (light)
          boxShadow: theme.vars.shadow.sm,

          // the result is `[data-joy-color-scheme="dark"] &`
          [theme.getColorSchemeSelector('dark')]: {
            boxShadow: 'none',
          },
        }),
      },
    },
  },
});
```

----------------------------------------

TITLE: Installing Material Icons Package
DESCRIPTION: Commands to install the `@mui/icons-material` package containing prebuilt SVG Material Icons using npm, pnpm, or yarn. This allows importing individual icons as React components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/installation/installation.md#_snippet_6

LANGUAGE: bash
CODE:
```
npm install @mui/icons-material
```

LANGUAGE: bash
CODE:
```
pnpm add @mui/icons-material
```

LANGUAGE: bash
CODE:
```
yarn add @mui/icons-material
```

----------------------------------------

TITLE: Customizing MUI Select Listbox Variant using slotProps in JavaScript (JSX)
DESCRIPTION: Illustrates how to apply a different style variant specifically to the listbox part of the MUI `Select` component. While the main component (button) uses the `plain` variant, the `slotProps` property is used to override the `listbox` slot's variant to `plain` (demonstrating the capability, though using the same variant here).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_20

LANGUAGE: javascript
CODE:
```
<Select
  variant="plain"
  slotProps={{
    listbox: {
      variant: 'plain',
    }
  }}
>

```

----------------------------------------

TITLE: Configuring Theme for Class-Based Color Scheme Selection - JS
DESCRIPTION: Sets up the Material UI theme to use CSS classes (`.light`, `.dark`) on the `<html>` element for toggling between light and dark color schemes. This requires enabling `colorSchemes` for both modes and setting `colorSchemeSelector` to 'class' within the `cssVariables` option.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#_snippet_2

LANGUAGE: JS
CODE:
```
createTheme({
  colorSchemes: { light: true, dark: true },
  cssVariables: {
    colorSchemeSelector: 'class'
  }
});

// CSS Result
.light { ... }
.dark { ... }
```

----------------------------------------

TITLE: Running MUI Codemod for sx Prop Callback Migration (Bash)
DESCRIPTION: Provides the bash command using `npx` to execute the Material UI codemod (`@mui/codemod@latest v6.0.0/sx-prop`). This tool automatically refactors code from the deprecated `sx` prop callback syntax to the new syntax in the specified files or folders.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_17

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v6.0.0/sx-prop path/to/file-or-folder
```

----------------------------------------

TITLE: Implementing useTheme hook with CSS variables
DESCRIPTION: Example of accessing theme variables using the useTheme hook in a component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/using-css-variables/using-css-variables.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
import { useTheme } from '@mui/joy/styles';

const SomeComponent = () => {
  const theme = useTheme(); // The runtime theme.

  return (
    <div>
      <p style={{ color: {theme.vars.palette.primary[500]} }}>Some text here.</p>
    </div>
  );
};
```

----------------------------------------

TITLE: Increasing CSS Specificity for Selected Menu Item (CSS)
DESCRIPTION: This CSS snippet shows how to increase selector specificity when customizing Material UI components via direct class overrides, specifically for a selected MenuItem. The first rule applies a base color, while the second selector with .Mui-selected increases specificity to override styles when the menu item is selected. Users must be aware that Material UI's global classes allow direct targeting for state-based custom styling. The approach relies on global class names being available and requires developers to understand state classes in Material UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v4-is-out.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
.MenuItem {\n  color: black;\n}\n/* We increase the specificity */\n.MenuItem.Mui-selected {\n  color: blue;\n}
```

----------------------------------------

TITLE: Installing MUI Base via npm in Bash
DESCRIPTION: This command installs the MUI Base package using npm. It's one of the methods provided to add MUI Base to a project, allowing developers to start using the library's components and hooks.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/introducing-base-ui.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm install @mui/base
```

----------------------------------------

TITLE: Configuring Row and Column Spacing in Grid
DESCRIPTION: This snippet demonstrates how to set different spacing for rows and columns in a Grid layout using the rowSpacing and columnSpacing props.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/grid/grid.md#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
<Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>
  <Grid size={6}>
    <Item>1</Item>
  </Grid>
  <Grid size={6}>
    <Item>2</Item>
  </Grid>
  <Grid size={6}>
    <Item>3</Item>
  </Grid>
  <Grid size={6}>
    <Item>4</Item>
  </Grid>
</Grid>
```

----------------------------------------

TITLE: Preventing SSR Flickering with theme.applyStyles - JS
DESCRIPTION: Provides a code diff demonstrating the recommended approach for applying dark mode specific styles in SSR applications using the `theme.applyStyles('dark', { ... })` helper function within the `sx` prop array. This replaces direct checks for `theme.palette.mode === 'dark'` to avoid hydration mismatches.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#_snippet_8

LANGUAGE: JS
CODE:
```
import Card from '@mui/material/Card';

function App() {
  return (
    <Card
-      sx={(theme) => ({
-        backgroundColor: theme.palette.mode === 'dark' ? '#000' : '#fff',
-        '&:hover': {
-          backgroundColor: theme.palette.mode === 'dark' ? '#333' : '#f5f5f5',
-        },
-      })}
+      sx={[
+        {
+          backgroundColor: '#fff',
+          '&:hover': {
+            backgroundColor: '#f5f5f5',
+          },
+        },
+        (theme) =>
+          theme.applyStyles('dark', {
+            backgroundColor: '#000',
+            '&:hover': {
+              backgroundColor: '#333',
+            },
+          }),
+      ]}
    />
  );
}
```

----------------------------------------

TITLE: Implementing Basic Breadcrumbs in React
DESCRIPTION: Demonstrates the basic usage of the Breadcrumbs component in a React application. This snippet shows how to create a simple breadcrumb navigation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
{"demo": "BasicBreadcrumbs.js"}
```

----------------------------------------

TITLE: Applying Border Width with sx Prop in Material UI JSX
DESCRIPTION: Demonstrates setting a solid black border using the `border` key within the `sx` prop on a Material UI Box component. A numeric value provided to `border` defines the border width in pixels.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Box sx={{ border: 1 }} />
// equivalent to border: '1px solid black'
```

----------------------------------------

TITLE: Adding InitColorSchemeScript to Next.js Pages Router Document - JSX
DESCRIPTION: Demonstrates how to include the `InitColorSchemeScript` component within the custom `pages/_document.js` file of a Next.js Pages Router application. This script injects initial color scheme styles on the client side to prevent flickering during hydration in SSR setups. Requires importing necessary components and placing the script before `<Main />`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#_snippet_10

LANGUAGE: JSX
CODE:
```
import Document, { Html, Head, Main, NextScript } from 'next/document';
import InitColorSchemeScript from '@mui/material/InitColorSchemeScript';

export default class MyDocument extends Document {
  render() {
    return (
      <Html>
        <Head>...</Head>
        <body>
          {/* must come before the <Main> element */}
          <InitColorSchemeScript attribute="class" />
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}
```

----------------------------------------

TITLE: Replacing Hidden Component with sx Prop (CSS Implementation)
DESCRIPTION: Demonstrates how to replace the deprecated Hidden component (CSS implementation) with the sx prop for responsive display control.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_18

LANGUAGE: diff
CODE:
```
-<Hidden implementation="css" xlUp><Paper /></Hidden>
+<Paper sx={{ display: { xl: 'none', xs: 'block' } }} />
```

LANGUAGE: diff
CODE:
```
-<Hidden implementation="css" mdDown><Paper /></Hidden>
+<Paper sx={{ display: { xs: 'none', md: 'block' } }} />
```

----------------------------------------

TITLE: Importing Modal Component in React
DESCRIPTION: Basic example showing how to import and use the Modal component from Joy UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/modal/modal.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Modal from '@mui/joy/Modal';

export default function MyApp() {
  return <Modal>{children}</Modal>;
}
```

----------------------------------------

TITLE: Generating the Full HTML Page Template with Injected Components and CSS
DESCRIPTION: Defines the HTML template that will be sent to the client. The server-rendered component HTML and extracted CSS are injected into this template, along with required meta tags and font resources.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/server-rendering/server-rendering.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
function renderFullPage(html, css) {
  return `
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8" />
        <title>My page</title>
        ${css}
        <meta name="viewport" content="initial-scale=1, width=device-width" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap"
        />
      </head>
      <body>
        <div id="root">${html}</div>
      </body>
    </html>
  `;
}
```

----------------------------------------

TITLE: Implementing Flash-Free Dark Mode with Next.js Pages Router
DESCRIPTION: This code snippet demonstrates how to use the InitColorSchemeScript component from Joy UI to enable flash-free dark mode in a Next.js application using the Pages Router. It shows the placement of the component before the main script to apply the correct stylesheet before component rendering.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/main-features/dark-mode-optimization/dark-mode-optimization.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Document, { Html, Head, Main, NextScript } from 'next/document';
import InitColorSchemeScript from '@mui/joy/InitColorSchemeScript';

export default class MyDocument extends Document {
  render() {
    return (
      <Html data-color-scheme="light">
        <Head>...</Head>
        <body>
          <InitColorSchemeScript />
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}
```

----------------------------------------

TITLE: Enabling CSS Theme Variables
DESCRIPTION: Configuration for enabling CSS theme variables in Material UI theme setup.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_19

LANGUAGE: diff
CODE:
```
 'use client';
 const theme = createTheme({
+  cssVariables: true,
 });
```

----------------------------------------

TITLE: Creating an Emotion Cache Configuration
DESCRIPTION: Creates a shared Emotion cache configuration to be used by both the server and client sides. This ensures consistent styling between server-rendered and client-rendered components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/server-rendering/server-rendering.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import createCache from '@emotion/cache';

export default function createEmotionCache() {
  return createCache({ key: 'css' });
}
```

----------------------------------------

TITLE: Clickable Chip Implementation
DESCRIPTION: Example of clickable chips with onClick handlers and different variants.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/chips/chips.md#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
import * as React from 'react';
import Chip from '@mui/material/Chip';
import Stack from '@mui/material/Stack';

export default function ClickableChips() {
  const handleClick = () => {
    console.info('You clicked the Chip.');
  };

  return (
    <Stack direction="row" spacing={1}>
      <Chip label="Clickable" onClick={handleClick} />
      <Chip label="Clickable" variant="outlined" onClick={handleClick} />
    </Stack>
  );
}
```

----------------------------------------

TITLE: Enabling CSS Layers in Material UI v7 for Client-Side Applications (TSX)
DESCRIPTION: Illustrates how to enable the opt-in CSS layer support in Material UI v7 for client-side applications (e.g., using Vite or Create React App). It utilizes the `StyledEngineProvider` component from `@mui/material/styles` with the `enableCssLayer` prop set to `true`. Similar to the Next.js example, `GlobalStyles` are used to define the layer order (`theme`, `base`, `mui`, `components`, `utilities`), facilitating integration with tools that rely on CSS layers.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v7-is-here.md#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
// main.js
import { StyledEngineProvider } from '@mui/material/styles';
import GlobalStyles from '@mui/material/GlobalStyles';
import App from './App';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <StyledEngineProvider enableCssLayer>
      <GlobalStyles styles="@layer theme,base,mui,components,utilities;" />
      <App />
    </StyledEngineProvider>
  </StrictMode>,
);
```

----------------------------------------

TITLE: Accessing DOM Elements with Refs in Material UI
DESCRIPTION: Example showing how to access DOM elements of Material UI components using React refs.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
// or a ref setter function
const ref = React.createRef();
// render
<Button ref={ref} />;
// usage
const element = ref.current;
```

----------------------------------------

TITLE: Adding Material Icons via Google Fonts CDN
DESCRIPTION: HTML code snippet to be placed in the `<head>` tag to load the Material Icons font using the Google Web Fonts CDN. This enables the use of the Material UI `Icon` component with the Material Icons font glyphs.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/installation/installation.md#_snippet_7

LANGUAGE: html
CODE:
```
<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/icon?family=Material+Icons"
/>
```

----------------------------------------

TITLE: Installing Joy UI and Dependencies
DESCRIPTION: Command to install Joy UI and its required Emotion dependencies via npm package manager. These packages are necessary to use Joy UI components in a React project.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-joy/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install @mui/joy @emotion/react @emotion/styled
```

----------------------------------------

TITLE: Extending Styled Component Interface (MUI/TypeScript)
DESCRIPTION: Illustrates how to extend the props interface of a styled component by passing arguments to the generic type of the `styled` utility. This allows the component to accept additional, type-checked props like `component` and provides typed access to the `ownerState` object within the styling function.
SOURCE: https://github.com/mui/material-ui/blob/master/TYPESCRIPT_CONVENTION.md#_snippet_8

LANGUAGE: TypeScript
CODE:
```
const BarRoot = styled(Typography)<{
  component?: React.ElementType;
  ownerState: BarProps;
}>(({ theme, ownerState }) => ({
  // styling
}));
// passing `component` to BarRoot is safe and we don't forget to pass ownerState
// <BarRoot component="span" ownerState={ownerState} />
```

----------------------------------------

TITLE: InputBase Props Codemod Command
DESCRIPTION: Bash command to automatically transform deprecated InputBase component props using MUI's codemod utility.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_50

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest deprecations/input-base-props <path>
```

----------------------------------------

TITLE: Forcing Label Shrink State in Material-UI TextField
DESCRIPTION: Demonstrates how to force the 'shrink' state of the label in a Material-UI TextField component. This can be useful when the input's shrink state cannot be automatically determined.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<TextField slotProps={{ inputLabel: { shrink: true } }} />
```

----------------------------------------

TITLE: Importing Flexbox Utilities from Material-UI System in JavaScript
DESCRIPTION: Shows how to import flexbox utilities from the @mui/system package to use them in custom components or styling solutions. These utilities provide a programmatic way to apply flexbox properties.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_10

LANGUAGE: js
CODE:
```
import { flexbox } from '@mui/system';
```

----------------------------------------

TITLE: Basic Select Implementation in React
DESCRIPTION: Basic implementation of the Select component with Option elements for selecting between dog and cat values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/select/select.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Select from '@mui/joy/Select';
import Option from '@mui/joy/Option';

export default function SelectBasic() {
  return (
    <Select defaultValue="dog">
      <Option value="dog">Dog</Option>
      <Option value="cat">Cat</Option>
    </Select>
  );
}
```

----------------------------------------

TITLE: Implementing Scroll Trigger for App Bar
DESCRIPTION: Example of using the useScrollTrigger hook to create responsive behavior based on scroll position.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/app-bar/app-bar.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
import useScrollTrigger from '@mui/material/useScrollTrigger';

function HideOnScroll(props) {
  const trigger = useScrollTrigger();
  return (
    <Slide in={!trigger}>
      <div>Hello</div>
    </Slide>
  );
}
```

----------------------------------------

TITLE: Configuring Neutral Colors in MUI Joy UI Theme
DESCRIPTION: Defines neutral color palette and its variants for both light and dark themes, including background colors and common color values. Includes various component states and text colors.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
const neutral = {
  50: '#F7F7F8',
  100: '#EBEBEF',
  200: '#D8D8DF',
  300: '#B9B9C6',
  400: '#8F8FA3',
  500: '#73738C',
  600: '#5A5A72',
  700: '#434356',
  800: '#25252D',
  900: '#131318',
};

extendTheme({
  colorSchemes: {
    light: {
      palette: {
        neutral: {
          ...neutral,
          plainColor: `var(--joy-palette-neutral-800)`,
          plainHoverColor: `var(--joy-palette-neutral-900)`,
          plainHoverBg: `var(--joy-palette-neutral-100)`,
          plainActiveBg: `var(--joy-palette-neutral-200)`,
          plainDisabledColor: `var(--joy-palette-neutral-300)`,

          outlinedColor: `var(--joy-palette-neutral-800)`,
          outlinedBorder: `var(--joy-palette-neutral-200)`,
          outlinedHoverColor: `var(--joy-palette-neutral-900)`,
          outlinedHoverBg: `var(--joy-palette-neutral-100)`,
          outlinedHoverBorder: `var(--joy-palette-neutral-300)`,
          outlinedActiveBg: `var(--joy-palette-neutral-200)`,
          outlinedDisabledColor: `var(--joy-palette-neutral-300)`,
          outlinedDisabledBorder: `var(--joy-palette-neutral-100)`,

          softColor: `var(--joy-palette-neutral-800)`,
          softBg: `var(--joy-palette-neutral-100)`,
          softHoverColor: `var(--joy-palette-neutral-900)`,
          softHoverBg: `var(--joy-palette-neutral-200)`,
          softActiveBg: `var(--joy-palette-neutral-300)`,
          softDisabledColor: `var(--joy-palette-neutral-300)`,
          softDisabledBg: `var(--joy-palette-neutral-50)`,
          solidColor: `var(--joy-palette-common-white)`,
          solidBg: `var(--joy-palette-neutral-600)`,
          solidHoverBg: `var(--joy-palette-neutral-700)`,
          solidActiveBg: `var(--joy-palette-neutral-800)`,
          solidDisabledColor: `var(--joy-palette-neutral-300)`,
          solidDisabledBg: `var(--joy-palette-neutral-50)`,
        },
        common: {
          white: '#FFF',
          black: '#09090D',
        },
        text: {
          secondary: 'var(--joy-palette-neutral-600)',
          tertiary: 'var(--joy-palette-neutral-500)',
        },
        background: {
          body: 'var(--joy-palette-common-white)',
          tooltip: 'var(--joy-palette-neutral-800)',
          backdrop: 'rgba(255 255 255 / 0.5)',
        },
      },
    },
    dark: {
      palette: {
        neutral: {
          ...neutral,
          plainColor: `var(--joy-palette-neutral-200)`,
          plainHoverColor: `var(--joy-palette-neutral-50)`,
          plainHoverBg: `var(--joy-palette-neutral-800)`,
          plainActiveBg: `var(--joy-palette-neutral-700)`,
          plainDisabledColor: `var(--joy-palette-neutral-700)`,

          outlinedColor: `var(--joy-palette-neutral-200)`,
          outlinedBorder: `var(--joy-palette-neutral-800)`,
          outlinedHoverColor: `var(--joy-palette-neutral-50)`,
          outlinedHoverBg: `var(--joy-palette-neutral-800)`,
          outlinedHoverBorder: `var(--joy-palette-neutral-700)`,
          outlinedActiveBg: `var(--joy-palette-neutral-800)`,
          outlinedDisabledColor: `var(--joy-palette-neutral-800)`,
          outlinedDisabledBorder: `var(--joy-palette-neutral-800)`,

          softColor: `var(--joy-palette-neutral-200)`,
          softBg: `var(--joy-palette-neutral-800)`,
          softHoverColor: `var(--joy-palette-neutral-50)`,
          softHoverBg: `var(--joy-palette-neutral-700)`,
          softActiveBg: `var(--joy-palette-neutral-600)`,
          softDisabledColor: `var(--joy-palette-neutral-700)`,
          softDisabledBg: `var(--joy-palette-neutral-900)`,

          solidColor: `var(--joy-palette-common-white)`,
          solidBg: `var(--joy-palette-neutral-600)`,
          solidHoverBg: `var(--joy-palette-neutral-700)`,
          solidActiveBg: `var(--joy-palette-neutral-800)`,
          solidDisabledColor: `var(--joy-palette-neutral-700)`,
          solidDisabledBg: `var(--joy-palette-neutral-900)`,
        },
        common: {
          white: '#FFF',
          black: '#09090D',
        },
        background: {
          body: 'var(--joy-palette-neutral-900)',
          surface: 'var(--joy-palette-common-black)',
          popup: 'var(--joy-palette-neutral-900)',
          level1: 'var(--joy-palette-neutral-800)',
          level2: 'var(--joy-palette-neutral-700)',
          level3: 'var(--joy-palette-neutral-600)',
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Array-based Custom Spacing
DESCRIPTION: Shows how to implement custom spacing using an array of predefined values
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/spacing/spacing.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
const theme = createTheme({
  spacing: [0, 4, 8, 16, 32, 64],
});

theme.spacing(2); // = '8px'
```

----------------------------------------

TITLE: Extending MUI Theme with Custom Colors in React
DESCRIPTION: This snippet demonstrates how to extend the MUI theme with custom colors and use them in components. It includes steps for creating a custom theme, notifying TypeScript about the new color, and using the custom color in a Button component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q1-update.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import { createMuiTheme, Button } from '@mui/material';

// 1. Extend the theme.
const theme = createMuiTheme({
  palette: {
    neutral: {
      main: '#5c6ac4',
    },
  },
});

// 2. Notify TypeScript about the new color in the palette
declare module '@mui/material/styles' {
  interface Palette {
    neutral: Palette['primary'];
  }
  interface PaletteOptions {
    neutral: PaletteOptions['primary'];
  }
}

// 3. Profit
<Button color="neutral"  />
```

----------------------------------------

TITLE: Setting Up Dark Mode in Next.js App Router with Joy UI
DESCRIPTION: Configures a Next.js App Router project to support dark mode with Joy UI, preventing screen flickering on initial load by using InitColorSchemeScript in the root layout file.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/dark-mode/dark-mode.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
import InitColorSchemeScript from '@mui/joy/InitColorSchemeScript';
import { CssVarsProvider } from '@mui/joy/styles';
import CssBaseline from '@mui/joy/CssBaseline';

export default function RootLayout(props) {
  return (
    <html lang="en" suppressHydrationWarning={true}>
      <body>
        <InitColorSchemeScript />
        <CssVarsProvider>
          <CssBaseline />
          {props.children}
        </CssVarsProvider>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Styling MUI Component with styled and Casting (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates how to use the `styled` utility from `@mui/material/styles` to customize a Material UI component (like Button). It includes type casting (`as typeof Button`) which is necessary to handle potential TypeScript complications that arise when composing or extending components in this manner.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/typescript/typescript.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import Button from '@mui/material/Button';
import { styled } from '@mui/material/styles';

const CustomButton = styled(Button)({
  // your custom styles go here
}) as typeof Button;
```

----------------------------------------

TITLE: Implementing Simple Bottom Navigation in React with Material-UI
DESCRIPTION: This snippet demonstrates how to create a basic Bottom Navigation component with three actions, displaying both icons and text labels at all times.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/bottom-navigation/bottom-navigation.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
"SimpleBottomNavigation.js"
```

----------------------------------------

TITLE: Implementing Dark Mode Toggle
DESCRIPTION: Creates a mode toggle component using useColorScheme hook for switching between light and dark themes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/tutorial/tutorial.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
function ModeToggle() {
  const { mode, setMode } = useColorScheme();
  const [mounted, setMounted] = React.useState(false);

  // necessary for server-side rendering
  // because mode is undefined on the server
  React.useEffect(() => {
    setMounted(true);
  }, []);
  if (!mounted) {
    return null;
  }

  return (
    <Select
      value={mode}
      onChange={(event, newMode) => {
        setMode(newMode);
      }}
      sx={{ width: 'max-content' }}
    >
      <Option value="system">System</Option>
      <Option value="light">Light</Option>
      <Option value="dark">Dark</Option>
    </Select>
  );
}
```

----------------------------------------

TITLE: Implementing Accessible Checkboxes in React
DESCRIPTION: Demonstrates how to add accessibility attributes to checkboxes when a label can't be used.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_10

LANGUAGE: JSX
CODE:
```
<Checkbox
  value="checkedA"
  inputProps={{
    'aria-label': 'Checkbox A',
  }}
/>
```

----------------------------------------

TITLE: Implementing Simple Backdrop with Circular Progress in React
DESCRIPTION: This code snippet demonstrates a basic implementation of the Backdrop component with a Circular Progress indicator. It shows how to create a button that toggles the visibility of the Backdrop and how to handle its closure.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/backdrop/backdrop.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
SimpleBackdrop.js
```

----------------------------------------

TITLE: Defining TypeScript Interface for Autocomplete Options
DESCRIPTION: TypeScript interface defining the structure of options that can be used with the Autocomplete component. Supports both object with label property and simple string options.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface AutocompleteOption {
  label: string;
}
// or
type AutocompleteOption = string;
```

----------------------------------------

TITLE: Installing Material UI and Emotion using Yarn (Bash)
DESCRIPTION: This command installs the `@mui/material`, `@emotion/react`, and `@emotion/styled` packages using the Yarn package manager. `@emotion/react` and `@emotion/styled` are required peer dependencies for Material UI. This snippet is presented within a tabbed `codeblock` component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/codeblock.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
```bash yarn
yarn add @mui/material @emotion/react @emotion/styled
# `@emotion/react` and `@emotion/styled` are peer dependencies
```
```

----------------------------------------

TITLE: Downloading - Material UI/Next.js Example - Bash
DESCRIPTION: This Bash command sequence downloads the specific Next.js Pages Router example from the Material UI GitHub repository and changes the current directory into the extracted project folder. It's the initial step to obtain the example code locally.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs-pages-router/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-nextjs-pages-router
cd material-ui-nextjs-pages-router
```

----------------------------------------

TITLE: Implementing Conditional Rendering with Skeleton in React JSX
DESCRIPTION: This snippet demonstrates how to conditionally render either an image or a Skeleton component based on the availability of data. It shows the basic usage of the Skeleton component as a placeholder.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/skeleton/skeleton.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
{
  item ? (
    <img
      style={{
        width: 210,
        height: 118,
      }}
      alt={item.title}
      src={item.src}
    />
  ) : (
    <Skeleton variant="rectangular" width={210} height={118} />
  );
}
```

----------------------------------------

TITLE: Configuring High-Density Theme for Material UI Components in JavaScript
DESCRIPTION: This code snippet demonstrates how to create a Material UI theme with high-density settings applied to various components. It sets default props for components like Button, FilledInput, FormControl, and others to achieve a more compact layout.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/density/density.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
const theme = createTheme({
  components: {
    MuiButton: {
      defaultProps: {
        size: 'small',
      },
    },
    MuiFilledInput: {
      defaultProps: {
        margin: 'dense',
      },
    },
    MuiFormControl: {
      defaultProps: {
        margin: 'dense',
      },
    },
    MuiFormHelperText: {
      defaultProps: {
        margin: 'dense',
      },
    },
    MuiIconButton: {
      defaultProps: {
        size: 'small',
      },
    },
    MuiInputBase: {
      defaultProps: {
        margin: 'dense',
      },
    },
    MuiInputLabel: {
      defaultProps: {
        margin: 'dense',
      },
    },
    MuiListItem: {
      defaultProps: {
        dense: true,
      },
    },
    MuiOutlinedInput: {
      defaultProps: {
        margin: 'dense',
      },
    },
    MuiFab: {
      defaultProps: {
        size: 'small',
      },
    },
    MuiTable: {
      defaultProps: {
        size: 'small',
      },
    },
    MuiTextField: {
      defaultProps: {
        margin: 'dense',
      },
    },
    MuiToolbar: {
      defaultProps: {
        variant: 'dense',
      },
    },
  },
});
```

----------------------------------------

TITLE: Augmenting MUI Component Prop Types for New Variants - TypeScript
DESCRIPTION: Extend the TypeScript type definitions for a Material UI component to include newly added custom variants or colors. This example uses module augmentation to declare the 'dashed' variant for `ButtonPropsVariantOverrides`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theme-components/theme-components.md#_snippet_5

LANGUAGE: typescript
CODE:
```
declare module '@mui/material/Button' {
  interface ButtonPropsVariantOverrides {
    dashed: true;
  }
}
```

----------------------------------------

TITLE: Adding Custom Component to Material UI Theme Types
DESCRIPTION: This TypeScript code adds the custom Stat component to the Material UI theme types, enabling proper type checking and autocompletion for theme customization.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import {
  ComponentsOverrides,
  ComponentsVariants,
  Theme as MuiTheme,
} from '@mui/material/styles';
import { StatProps } from 'path/to/Stat';

type Theme = Omit<MuiTheme, 'components'>;

declare module '@mui/material/styles' {
  interface ComponentNameToClassKey {
    MuiStat: 'root' | 'value' | 'unit';
  }

  interface ComponentsPropsList {
    MuiStat: Partial<StatProps>;
  }

  interface Components {
    MuiStat?: {
      defaultProps?: ComponentsPropsList['MuiStat'];
      styleOverrides?: ComponentsOverrides<Theme>['MuiStat'];
      variants?: ComponentsVariants['MuiStat'];
    };
  }
}
```

----------------------------------------

TITLE: TypeScript Implementation of Custom Material UI Component
DESCRIPTION: This code demonstrates the TypeScript implementation of the custom Stat component in Material UI, including type-safe styling and prop handling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
const StatRoot = styled('div', {
  name: 'MuiStat',
  slot: 'root',
})<{ ownerState: StatOwnerState }>(({ theme, ownerState }) => ({
  display: 'flex',
  flexDirection: 'column',
  gap: theme.spacing(0.5),
  padding: theme.spacing(3, 4),
  backgroundColor: theme.palette.background.paper,
  borderRadius: theme.shape.borderRadius,
  boxShadow: theme.shadows[2],
  letterSpacing: '-0.025em',
  fontWeight: 600,
  // typed-safe access to the `variant` prop
  ...(ownerState.variant === 'outlined' && {
    border: `2px solid ${theme.palette.divider}`,
    boxShadow: 'none',
  }),
}));

// …do the same for other slots

const Stat = React.forwardRef<HTMLDivElement, StatProps>(function Stat(inProps, ref) {
  const props = useThemeProps({ props: inProps, name: 'MuiStat' });
  const { value, unit, variant, ...other } = props;

  const ownerState = { ...props, variant };

  return (
    <StatRoot ref={ref} ownerState={ownerState} {...other}>
      <StatValue ownerState={ownerState}>{value}</StatValue>
      <StatUnit ownerState={ownerState}>{unit}</StatUnit>
    </StatRoot>
  );
});
```

----------------------------------------

TITLE: Installing Material Icons with yarn
DESCRIPTION: Command to install @mui/icons-material and its dependencies using yarn package manager.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/material-icons/material-icons.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
yarn add @mui/icons-material @mui/material @emotion/styled @emotion/react
```

----------------------------------------

TITLE: Multiple Arguments Spacing Syntax
DESCRIPTION: Demonstrates the use of multiple arguments in theme.spacing() to reduce boilerplate code
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/spacing/spacing.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
-padding: `${theme.spacing(1)} ${theme.spacing(2)}`, // '8px 16px'
+padding: theme.spacing(1, 2), // '8px 16px'
```

----------------------------------------

TITLE: Defining Spacing CSS Variables in Grid v2 Container (JavaScript)
DESCRIPTION: Demonstrates how the Grid v2 container component sets CSS custom properties (`--Grid-rowSpacing`, `--Grid-columnSpacing`) based on the value of its `spacingProp`. This allows child items to reference these variables for their own styling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/build-layouts-faster-with-grid-v2.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
// The code is simplified for readability
{
  '--Grid-rowSpacing': spacingProp,
  '--Grid-columnSpacing': spacingProp,
}
```

----------------------------------------

TITLE: Grouping Checkboxes with FormGroup in React
DESCRIPTION: Illustrates how to use the FormGroup component to group selection control components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_7

LANGUAGE: JSX
CODE:
```
{"demo": "CheckboxesGroup.js"}
```

----------------------------------------

TITLE: Creating Custom Modal Layout with Theme Overrides
DESCRIPTION: Example of extending the theme to create a custom 'top' layout for Modal Dialog using styleOverrides.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/modal/modal.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
const theme = extendTheme({
  components: {
    JoyModalDialog: {
      defaultProps: { layout: 'top' },
      styleOverrides: {
        root: ({ ownerState }) => ({
          ...(ownerState.layout === 'top' && {
            top: '12vh',
            left: '50%',
            transform: 'translateX(-50%)',
          }),
        }),
      },
    },
  },
});
```

----------------------------------------

TITLE: Installing Material UI v5 and Styles Package with Yarn
DESCRIPTION: Command to add the main Material UI v5 package and the styles package using Yarn. This is part of the core migration process.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
yarn add @mui/material @mui/styles
```

----------------------------------------

TITLE: Applying Theme-Based Border Radius with sx Prop in Material UI JSX
DESCRIPTION: Illustrates applying border radius using the `borderRadius` key in the `sx` prop. The numeric value is multiplied by the `theme.shape.borderRadius` value (defaulting to 4px) to calculate the final pixel value.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Box sx={{ borderRadius: 2 }} />
// equivalent to borderRadius: theme => 2 * theme.shape.borderRadius
```

----------------------------------------

TITLE: Custom Named Breakpoints Configuration
DESCRIPTION: Example showing how to define custom breakpoint names with corresponding width values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
const theme = createTheme({
  breakpoints: {
    values: {
      mobile: 0,
      tablet: 640,
      laptop: 1024,
      desktop: 1200,
    },
  },
});
```

----------------------------------------

TITLE: Horizontal Centering in Material-UI
DESCRIPTION: Example of centering an element horizontally using margin auto values and fixed width.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/spacing/spacing.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
<Box sx={{ mx: 'auto', width: 200 }}>…
```

----------------------------------------

TITLE: Augmenting MUI Breakpoint Types for Custom Names (TypeScript)
DESCRIPTION: Provides the TypeScript type augmentation required when using custom breakpoint names (like tablet, laptop, desktop) in a MUI theme as defined in the previous example. It overrides the default `BreakpointOverrides` interface to optionally remove standard breakpoints and add the custom ones, ensuring type safety. This declaration should be placed in a file that TypeScript includes in the project.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/usage/usage.md#_snippet_9

LANGUAGE: ts
CODE:
```
declare module '@mui/material/styles' {
  interface BreakpointOverrides {
    xs: false; // removes the `xs` breakpoint
    sm: false;
    md: false;
    lg: false;
    xl: false;
    tablet: true; // adds the `tablet` breakpoint
    laptop: true;
    desktop: true;
  }
}
```

----------------------------------------

TITLE: Styling Component States with Nested Selectors in Joy UI
DESCRIPTION: Demonstrates how to use nested CSS selectors to target specific component states and interactions, such as hover effects for clickable components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
extendTheme({
  components: {
    JoyChip: {
      styleOverrides: {
        root: ({ ownerState, theme }) => ({
          ...(ownerState.variant === 'solid' &&
            ownerState.clickable && {
              color: 'rgba(255 255 255 / 0.72)',
              '&:hover': {
                color: '#fff',
              },
            }),
        }),
      },
    },
  },
});
```

----------------------------------------

TITLE: Setting Background Colors with Material-UI Box Component
DESCRIPTION: This example illustrates how to apply background colors using the 'bgcolor' prop of the Box component. It showcases various background color options from the Material-UI palette, including primary, secondary, error, warning, info, success, and different text variants.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/palette/palette.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Box sx={{ bgcolor: 'primary.main' }}>…
<Box sx={{ bgcolor: 'secondary.main' }}>…
<Box sx={{ bgcolor: 'error.main' }}>…
<Box sx={{ bgcolor: 'warning.main' }}>…
<Box sx={{ bgcolor: 'info.main' }}>…
<Box sx={{ bgcolor: 'success.main' }}>…
<Box sx={{ bgcolor: 'text.primary' }}>…
<Box sx={{ bgcolor: 'text.secondary' }}>…
<Box sx={{ bgcolor: 'text.disabled' }}>…
```

----------------------------------------

TITLE: Configuring Media Query-Based Color Scheme in Joy UI
DESCRIPTION: Sets up a theme using the media query-based color scheme selector instead of the default data attribute approach. This allows the application to respond to the user's system preferences using @media (prefers-color-scheme).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/dark-mode/dark-mode.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  colorSchemeSelector: 'media',
});

function App() {
  return <CssVarsProvider theme={theme}>...</CssVarsProvider>;
}
```

----------------------------------------

TITLE: Using the Box Component with Custom HTML Element
DESCRIPTION: Demonstrates how to use the Box component with a custom HTML element using the component prop. This example changes the default div to a section element.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/box/box.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
{"demo": "BoxBasic.js", "defaultCodeOpen": true }
```

----------------------------------------

TITLE: Responsive Grid with Breakpoint-Based Values
DESCRIPTION: Grid example showing how to switch prop values based on active breakpoints for responsive layouts.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
{"demo": "ResponsiveGrid.js", "bg": true}
```

----------------------------------------

TITLE: Defining Public Component Props Interface (MUI/TypeScript)
DESCRIPTION: Shows the structure of the `FooProps` interface for a public MUI component. It includes the `classes` prop for overriding styles using a partial of the component's `FooClasses` interface and the `sx` prop for system overrides, adhering to MUI's standard prop patterns.
SOURCE: https://github.com/mui/material-ui/blob/master/TYPESCRIPT_CONVENTION.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
// Foo.tsx
import { FooClasses } from './fooClasses';

export interface FooProps {
  /**
   * Override or extend the styles applied to the component.
   */
  classes?: Partial<FooClasses>;
  // ...other props
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx?: SxProps<Theme>;
}
```

----------------------------------------

TITLE: Customizing Components with Theme Overrides in Joy UI
DESCRIPTION: Creates a custom theme with component-specific overrides by using the extendTheme function. This example shows how to modify default props and style overrides for the Chip component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  components: {
    JoyChip: {
      defaultProps: {
        size: 'sm',
      },
      styleOverrides: {
        root: {
          borderRadius: '4px',
        },
      },
    },
  },
});

function App() {
  return <CssVarsProvider theme={theme}>...</CssVarsProvider>;
}
```

----------------------------------------

TITLE: Migrating from LoadingButton to Button in Material UI v6
DESCRIPTION: Updates to import statements when migrating from the Lab's LoadingButton to the standard Button component, which now includes loading functionality in v6.4.0+.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_16

LANGUAGE: diff
CODE:
```
-import { LoadingButton } from '@mui/lab';
+import { Button } from '@mui/material';
```

----------------------------------------

TITLE: Customizing Autocomplete Slot Properties
DESCRIPTION: Shows how to customize specific slots within the Autocomplete component using slotProps. This example sets different variants for the component and its listbox.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
<Autocomplete
  variant="plain"
  slotProps={{
    listbox: {
      variant: 'outlined',
    },
  }}
/>
```

----------------------------------------

TITLE: Implementing Customized Slider in React
DESCRIPTION: Demonstrates various ways to customize the Slider component in Material-UI, including styling and behavior modifications.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_11

LANGUAGE: JSX
CODE:
```
{"demo": "CustomizedSlider.js"}
```

----------------------------------------

TITLE: MenuItem State Customization
DESCRIPTION: Demonstrates how to customize the selected state of a MenuItem component using Material UI state classes
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/how-to-customize/how-to-customize.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
.MenuItem {
  color: black;
}

/* Increase the specificity */
.MenuItem.Mui-selected {
  color: blue;
}
```

LANGUAGE: jsx
CODE:
```
<MenuItem selected className="MenuItem">
```

----------------------------------------

TITLE: Auto-Layout Grid Implementation
DESCRIPTION: Auto-layout configuration that makes grid items share available space equitably, allowing one item's width to be set while others automatically resize.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_7

LANGUAGE: jsx
CODE:
```
{"demo": "AutoGrid.js", "bg": true}
```

----------------------------------------

TITLE: Adding Start Icon to Material-UI Button (JSX)
DESCRIPTION: Demonstrates how to prepend an icon to a Material-UI Button component using the `startIcon` prop introduced in a recent update. This requires importing the desired icon component (e.g., `DeleteIcon` from `@mui/icons-material`) and passing it as a React element to the `startIcon` prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/september-2019-update.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import DeleteIcon from '@mui/icons-material/Delete';

<Button startIcon={<DeleteIcon />}>Delete</Button>;
```

----------------------------------------

TITLE: Adding InitColorSchemeScript to Next.js App Router Layout - JSX
DESCRIPTION: Shows how to integrate the `InitColorSchemeScript` component into the root layout file (`app/layout.js`) of a Next.js App Router application. This script helps prevent SSR flickering by injecting initial color scheme styles on the client before hydration. Requires importing the component and adding `suppressHydrationWarning` to the `<html>` tag.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#_snippet_9

LANGUAGE: JSX
CODE:
```
import InitColorSchemeScript from '@mui/material/InitColorSchemeScript';

export default function RootLayout(props) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        {/* must come before the <main> element */}
        <InitColorSchemeScript attribute="class" />
        <main>{children}</main>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Creating CSS Grid Layout with Material-UI Box Component
DESCRIPTION: This code snippet shows how to create a CSS grid layout using the Box component from Material-UI, demonstrating an alternative to the Grid component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q2-update.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Box display="grid" gridTemplateColumns="repeat(12, 1fr)" gap={2}>
  <Box gridColumn="span 8">
    <Item>xs=8</Item>
  </Box>
  <Box gridColumn="span 4">
    <Item>xs=4</Item>
  </Box>
  <Box gridColumn="span 4">
    <Item>xs=4</Item>
  </Box>
  <Box gridColumn="span 8">
    <Item>xs=8</Item>
  </Box>
</Box>
```

----------------------------------------

TITLE: Setting Flex Item Order with Material-UI Box Component in JSX
DESCRIPTION: Demonstrates how to control the order in which flex items appear in the flex container using the order property. Higher values appear later in the visual order.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
<Box sx={{ order: 2 }}>Item 1</Box>
<Box sx={{ order: 3 }}>Item 2</Box>
<Box sx={{ order: 1 }}>Item 3</Box>
```

----------------------------------------

TITLE: Using prefers-color-scheme with CSS Variables and Color Schemes (JSX & CSS)
DESCRIPTION: This snippet shows the theme setup (JSX) enabling both `cssVariables` and `colorSchemes`. The corresponding CSS output demonstrates how Material UI v6 automatically uses the `prefers-color-scheme: dark` media query to apply dark mode styles by default when these features are enabled, defining CSS variables within the media query block.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_5

LANGUAGE: js JSX
CODE:
```
import { createTheme, ThemeProvider } from '@mui/material/styles';

const theme = createTheme({
  cssVariables: true,
  colorSchemes: { dark: true },
});

function App() {
  return <ThemeProvider theme={theme}>...</ThemeProvider>;
}
```

LANGUAGE: css CSS
CODE:
```
:root {
  --mui-palette-primary-main: #1976d2;
  --mui-palette-background-default: #fff;
  ...
}

@media (prefers-color-scheme: dark) {
  :root {
    --mui-palette-primary-main: #90caf9;
    --mui-palette-background-default: #121212;
    ...
  }
}
```

----------------------------------------

TITLE: Using Custom Color Values with Joy UI Components
DESCRIPTION: Demonstrates how to use custom color values with Joy UI components after defining them in the theme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
<Button color="secondary">Secondary color</Button>
<Button color="tertiary">Tertiary color</Button>
```

----------------------------------------

TITLE: Controlling Badge Visibility in React Material-UI
DESCRIPTION: Demonstrates visibility control of badges using the invisible prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_3

LANGUAGE: JSX
CODE:
```
BadgeVisibility.js
```

----------------------------------------

TITLE: Using CSS Variables with styled-components in Material-UI
DESCRIPTION: Demonstrates how to use theme.vars.* to reference CSS variables directly in styled components. This is the recommended approach for working with themes that use CSS variables.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
const Custom = styled('div')(({ theme }) => ({
  color: theme.vars.palette.text.primary,
  background: theme.vars.palette.primary.main,
}));
```

----------------------------------------

TITLE: Applying Theme zIndex with sx Prop in Material UI JSX
DESCRIPTION: Shows how to set the `zIndex` using a key from the `theme.zIndex` object (e.g., 'tooltip') within the `sx` prop. This allows using predefined z-index levels from the theme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_7

LANGUAGE: jsx
CODE:
```
<Box sx={{ zIndex: 'tooltip' }} />
// equivalent to zIndex: theme => theme.zIndex.tooltip
```

----------------------------------------

TITLE: TypeScript Interfaces for Custom Material UI Component
DESCRIPTION: This snippet defines TypeScript interfaces for the props and ownerState of the custom Stat component in Material UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
interface StatProps {
  value: number | string;
  unit: string;
  variant?: 'outlined';
}

interface StatOwnerState extends StatProps {
  // …key value pairs for the internal state that you want to style the slot
  // but don't want to expose to the users
}
```

----------------------------------------

TITLE: Configuring Material UI Theme for Color Scheme SSR (JavaScript)
DESCRIPTION: Demonstrates how to configure a Material UI theme using `createTheme` to enable CSS variables and set the `colorSchemeSelector` to 'data'. This setting is required for the `InitColorSchemeScript` component to correctly apply the color scheme attribute for server-side rendering. It wraps an example `App` component with the configured `ThemeProvider`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/init-color-scheme-script/init-color-scheme-script.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { ThemeProvider, createTheme } from '@mui/material/styles';

const theme = createTheme({
  cssVariables: {
    colorSchemeSelector: 'data',
  },
});

function App() {
  return <ThemeProvider theme={theme}>{/* Your app */}</ThemeProvider>;
}
```

----------------------------------------

TITLE: Implementing Self-hosted Fonts in Material UI
DESCRIPTION: Shows how to import and configure self-hosted fonts using CssBaseline component with font-face declaration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/typography/typography.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import RalewayWoff2 from './fonts/Raleway-Regular.woff2';

const theme = createTheme({
  typography: {
    fontFamily: 'Raleway, Arial',
  },
  components: {
    MuiCssBaseline: {
      styleOverrides: `
        @font-face {
          font-family: 'Raleway';
          font-style: normal;
          font-display: swap;
          font-weight: 400;
          src: local('Raleway'), local('Raleway-Regular'), url(${RalewayWoff2}) format('woff2');
          unicodeRange: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF;
        }
      `,
    },
  },
});

return (
  <ThemeProvider theme={theme}>
    <CssBaseline />
    <Box sx={{ fontFamily: 'Raleway' }}>Raleway</Box>
  </ThemeProvider>
);
```

----------------------------------------

TITLE: Applying Padding using CSS Variables in Grid v2 Item (JavaScript)
DESCRIPTION: Shows how a Grid v2 item calculates its padding using the CSS `calc()` function, referencing the `--Grid-rowSpacing` and `--Grid-columnSpacing` variables set by its container component. This decouples the item from the container's implementation details.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/build-layouts-faster-with-grid-v2.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
{
  padding: `calc(var(--Grid-rowSpacing) / 2) calc(var(--Grid-columnSpacing) / 2)`,
}
```

----------------------------------------

TITLE: Initializing CssVarsProvider in Joy UI
DESCRIPTION: Basic setup for using CSS variables by wrapping the app with CssVarsProvider component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/using-css-variables/using-css-variables.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import { CssVarsProvider } from '@mui/joy/styles';

function App() {
  return <CssVarsProvider>...</CssVarsProvider>;
}
```

----------------------------------------

TITLE: Extended FAB Size Implementation
DESCRIPTION: Demonstrates the implementation of extended Floating Action Buttons with different sizes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/floating-action-button/floating-action-button.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
FloatingActionButtonExtendedSize.js
```

----------------------------------------

TITLE: Implementing Server-Side Rendering with Express and Material UI
DESCRIPTION: Full implementation of the Express middleware for server-side rendering. Creates an Emotion cache, renders the React app to a string, extracts critical CSS, and sends the complete HTML page to the client.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/server-rendering/server-rendering.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
import express from 'express';
import * as React from 'react';
import * as ReactDOMServer from 'react-dom/server';
import CssBaseline from '@mui/material/CssBaseline';
import { ThemeProvider } from '@mui/material/styles';
import { CacheProvider } from '@emotion/react';
import createEmotionServer from '@emotion/server/create-instance';
import App from './App';
import theme from './theme';
import createEmotionCache from './createEmotionCache';

function handleRender(req, res) {
  const cache = createEmotionCache();
  const { extractCriticalToChunks, constructStyleTagsFromChunks } =
    createEmotionServer(cache);

  // Render the component to a string.
  const html = ReactDOMServer.renderToString(
    <CacheProvider value={cache}>
      <ThemeProvider theme={theme}>
        {/* CssBaseline kickstart an elegant, consistent, and simple baseline
            to build upon. */}
        <CssBaseline />
        <App />
      </ThemeProvider>
    </CacheProvider>,
  );

  // Grab the CSS from emotion
  const emotionChunks = extractCriticalToChunks(html);
  const emotionCss = constructStyleTagsFromChunks(emotionChunks);

  // Send the rendered page back to the client.
  res.send(renderFullPage(html, emotionCss));
}

const app = express();

app.use('/build', express.static('build'));

// This is fired every time the server-side receives a request.
app.use(handleRender);

const port = 3000;
app.listen(port);
```

----------------------------------------

TITLE: Replacing Nested Class Selectors with Global Class Names
DESCRIPTION: Example demonstrating how to replace nested class selectors with global class names when migrating from JSS to Emotion in theme styleOverrides.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_1

LANGUAGE: diff
CODE:
```
 const theme = createTheme({
   components: {
     MuiOutlinedInput: {
       styleOverrides: {
         root: {
-          '& $notchedOutline': {
+          '& .MuiOutlinedInput-notchedOutline': {
             borderWidth: 1,
           }
         }
       }
     }
   }
 });
```

----------------------------------------

TITLE: List Component with Custom Root Element
DESCRIPTION: Example of using the component prop to change the root element of a List component from ul to menu.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/composition/composition.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<List component="menu">
  <ListItem>
    <ListItemButton>
      <ListItemText primary="Trash" />
    </ListItemButton>
  </ListItem>
  <ListItem>
    <ListItemButton>
      <ListItemText primary="Spam" />
    </ListItemButton>
  </ListItem>
</List>
```

----------------------------------------

TITLE: Setting Flex Grow with Material-UI Box Component in JSX
DESCRIPTION: Shows how to make flex items grow to fill available space using the flexGrow property. Items with flexGrow: 1 will expand to fill any remaining space in the container.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_7

LANGUAGE: jsx
CODE:
```
<Box sx={{ flexGrow: 1 }}>Item 1</Box>
<Box>Item 2</Box>
<Box>Item 3</Box>
```

----------------------------------------

TITLE: Setting Default Color Mode for InitColorSchemeScript (TypeScript)
DESCRIPTION: Shows how to use the `defaultMode` prop on the `InitColorSchemeScript` component. Setting it to "dark" or "light" ensures that this mode is applied if the user's system preference is not detected or on their first visit. This default must also be set on the `ThemeProvider`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/init-color-scheme-script/init-color-scheme-script.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
<InitColorSchemeScript defaultMode="dark" />
```

----------------------------------------

TITLE: Creating custom styled components with theme typography in Joy UI
DESCRIPTION: Example of using the styled function to create a custom component that applies theme typography styles along with additional styling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-typography/theme-typography.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
import { styled } from '@mui/joy/styles';

const Tag = styled('span')((theme) => ({
  ...theme.typography['body-sm'],
  color: 'inherit',
  borderRadius: theme.vars.radius.xs,
  boxShadow: theme.vars.shadow.sm,
  padding: '0.125em 0.375em',
}));
```

----------------------------------------

TITLE: Using theme.breakpoints.down Example
DESCRIPTION: Example of using theme.breakpoints.down to apply styles for screens narrower than the md breakpoint.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
const styles = (theme) => ({
  root: {
    backgroundColor: 'blue',
    // Match [0, md)
    //       [0, 900px)
    [theme.breakpoints.down('md')]: {
      backgroundColor: 'red',
    },
  },
});
```

----------------------------------------

TITLE: Adding Custom Typography Variants with TypeScript Support
DESCRIPTION: Shows how to add new typography variants and disable existing ones, including TypeScript type declarations.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/typography/typography.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
declare module '@mui/material/styles' {
  interface TypographyVariants {
    poster: React.CSSProperties;
  }

  interface TypographyVariantsOptions {
    poster?: React.CSSProperties;
  }
}

declare module '@mui/material/Typography' {
  interface TypographyPropsVariantOverrides {
    poster: true;
    h3: false;
  }
}
```

----------------------------------------

TITLE: TypeScript Breakpoint Configuration
DESCRIPTION: TypeScript module augmentation for custom breakpoint values in Material UI theme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
declare module '@mui/material/styles' {
  interface BreakpointOverrides {
    xs: false; // removes the `xs` breakpoint
    sm: false;
    md: false;
    lg: false;
    xl: false;
    mobile: true; // adds the `mobile` breakpoint
    tablet: true;
    laptop: true;
    desktop: true;
  }
}
```

----------------------------------------

TITLE: Customizing Typography Variants in Material UI
DESCRIPTION: Demonstrates how to customize individual typography variants with specific styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/typography/typography.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
const theme = createTheme({
  typography: {
    subtitle1: {
      fontSize: 12,
    },
    body1: {
      fontWeight: 500,
    },
    button: {
      fontStyle: 'italic',
    },
  },
});
```

----------------------------------------

TITLE: Implementing Fuzzy Matching with match-sorter
DESCRIPTION: Example of implementing advanced filtering using the match-sorter library for fuzzy matching capabilities in the Autocomplete component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
import { matchSorter } from 'match-sorter';

const filterOptions = (options, { inputValue }) => matchSorter(options, inputValue);

<Autocomplete filterOptions={filterOptions} />;
```

----------------------------------------

TITLE: Implementing a Nested Grid Layout
DESCRIPTION: This snippet demonstrates how to create a nested grid layout. It shows that nested grid containers inherit columns and spacing from their parent container.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/grid/grid.md#2025-04-22_snippet_4

LANGUAGE: JSX
CODE:
```
<Grid container spacing={1}>
  <Grid container item spacing={3}>
    <Grid item size={4}>
      <Item>4</Item>
    </Grid>
    <Grid item size={4}>
      <Item>4</Item>
    </Grid>
    <Grid item size={4}>
      <Item>4</Item>
    </Grid>
  </Grid>
</Grid>
```

----------------------------------------

TITLE: Custom CSS Styling for MUI Switch Subcomponents (CSS)
DESCRIPTION: This CSS snippet targets subcomponents of a Material UI `Switch` that has the 'uglySwitch' class applied. It overrides default styles for the thumb, touch ripple, and track by using more specific selectors (two classes vs. the default single class), demonstrating CSS customization based on specificity.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/making-customizable-components.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
/* two classes are more specific than the default single class selector */
.uglySwitch .MuiSwitch-thumb {
  background-color: green;
}

.uglySwitch .MuiTouchRipple-root {
  border: 2px solid red;
}

.uglySwitch .MuiSwitch-track {
  background-color: orange;
  opacity: 1;
}
```

----------------------------------------

TITLE: Implementing Fluid Container in React MUI
DESCRIPTION: Creates a fluid container with a maximum width defined by the maxWidth prop. The width is responsive and bounded by the specified size (sm in this example).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/container/container.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Container maxWidth="sm">
```

----------------------------------------

TITLE: Creating an Auto-layout Grid in React
DESCRIPTION: This example shows how to create an auto-layout grid where items are given equal space. It demonstrates the use of the size="auto" prop for flexible item sizing.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/grid/grid.md#2025-04-22_snippet_3

LANGUAGE: JSX
CODE:
```
<Grid container spacing={3}>
  <Grid size="auto">
    <Item>Variable width content</Item>
  </Grid>
  <Grid size={6}>
    <Item>xs=6</Item>
  </Grid>
  <Grid size="auto">
    <Item>Variable width content</Item>
  </Grid>
</Grid>
```

----------------------------------------

TITLE: Customizing Default Color Values - Joy UI Theme
DESCRIPTION: Shows how to extend the theme to customize default color values for dark mode using the extendTheme function.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-colors/theme-colors.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  colorSchemes: {
    dark: {
      palette: {
        primary: {
          50: '#C0CCD9',
          100: '#A5B8CF',
          200: '#6A96CA',
          300: '#4886D0',
          400: '#2178DD',
          500: '#096BDE',
          600: '#1B62B5',
          700: '#265995',
          800: '#2F4968',
          900: '#2F3C4C',
        },
      },
    },
  },
});

// Then, pass it to `<CssVarsProvider theme={theme}>`.
```

----------------------------------------

TITLE: Installing React Dependencies with Package Manager
DESCRIPTION: Commands for installing specific versions of React and React DOM using different package managers (npm, pnpm, yarn).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install react@<version> react-dom@<version>
```

LANGUAGE: bash
CODE:
```
pnpm add react@<version> react-dom@<version>
```

LANGUAGE: bash
CODE:
```
yarn add react@<version> react-dom@<version>
```

----------------------------------------

TITLE: Augmenting Palette Interfaces for Custom Tokens in TypeScript
DESCRIPTION: Shows how to augment the PaletteOptions and Palette interfaces to add new tokens to the theme palette in TypeScript. This example adds gradient and border tokens.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/usage.md#2025-04-22_snippet_6

LANGUAGE: ts
CODE:
```
declare module '@mui/material/styles' {
  interface PaletteOptions {
    gradient: string;
    border: {
      subtle: string;
    };
  }
  interface Palette {
    gradient: string;
    border: {
      subtle: string;
    };
  }
}
```

----------------------------------------

TITLE: Applying MUI Styles Based on Conditional Props with Variants - JavaScript
DESCRIPTION: Use a callback function within the `variants` array to apply styles based on arbitrary conditions derived from the component's props. This example styles a button with a dashed border if its variant is 'dashed' and its color is not 'secondary'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theme-components/theme-components.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const theme = createTheme({
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          variants: [
            {
              props: (props) =>
                props.variant === 'dashed' && props.color !== 'secondary',
              style: {
                textTransform: 'none',
                border: `2px dashed ${blue[500]}`, // Assuming blue[500] is defined
              },
            },
          ],
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Integrating Joy UI Link with Next.js Pages Router
DESCRIPTION: Shows how to integrate the Joy UI Link component with Next.js Pages Router. It uses the Next.js Link component wrapped around the Joy UI Link for proper routing.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/link/link.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import NextLink from 'next/link';
import Link from '@mui/joy/Link';

<NextLink href="/docs" passHref>
  <Link>Read doc</Link>
</NextLink>;
```

----------------------------------------

TITLE: Variable Width Content Grid
DESCRIPTION: Grid implementation where size is set to "auto" for certain breakpoints to allow column width to be based on natural content width.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_8

LANGUAGE: jsx
CODE:
```
{"demo": "VariableWidthGrid.js", "bg": true}
```

----------------------------------------

TITLE: Inferring Dimensions from Children in React JSX
DESCRIPTION: This snippet illustrates how to use the Skeleton component to infer dimensions from its children, in this case, an Avatar component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/skeleton/skeleton.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
loading ? (
  <Skeleton variant="circular">
    <Avatar />
  </Skeleton>
) : (
  <Avatar src={data.avatar} />
);
```

----------------------------------------

TITLE: Defining a Styled Button Without sx Shortcuts - JavaScript
DESCRIPTION: This code demonstrates that when using the styled function, 'mx: 1' is not a valid shortcut—those are exclusive to the sx prop. The MyStyledButton component is styled using direct style properties and will interpret 'mx: 1' as a custom property rather than spacing. This technique requires the @mui/system or @mui/material styling pipeline.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
const MyStyledButton = styled('button')({
  mx: 1, // \u274C don't use this! This shortcut is only provided by the `sx` prop
});
```

----------------------------------------

TITLE: Updating ThemeProvider Import Path
DESCRIPTION: Diff showing the updated import path for ThemeProvider, moving from @mui/styles to @mui/material/styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_20

LANGUAGE: diff
CODE:
```
-import { ThemeProvider } from '@mui/styles';
+import { ThemeProvider } from '@mui/material/styles';
```

----------------------------------------

TITLE: Setting Width Percentages with Material-UI Box Component
DESCRIPTION: Demonstrates how to set various width percentages using the Box component's sx prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/sizing/sizing.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Box sx={{ width: '25%' }}>…
<Box sx={{ width: '50%' }}>…
<Box sx={{ width: '75%' }}>…
<Box sx={{ width: '100%' }}>…
<Box sx={{ width: 'auto' }}>…
```

----------------------------------------

TITLE: Masonry Image List Implementation in Material-UI
DESCRIPTION: Shows implementation of a masonry layout with dynamic container heights based on image aspect ratios.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/image-list/image-list.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
{"demo": "MasonryImageList.js"}
```

----------------------------------------

TITLE: React Popper with Transition Effects
DESCRIPTION: Shows how to add transition animations to the Popper component using react-transition-group library.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/popper/popper.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import * as React from 'react';
import Box from '@mui/material/Box';
import Popper from '@mui/material/Popper';
import Fade from '@mui/material/Fade';

export default function TransitionsPopper() {
  const [open, setOpen] = React.useState(false);
  const [anchorEl, setAnchorEl] = React.useState(null);

  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
    setOpen((previousOpen) => !previousOpen);
  };

  const canBeOpen = open && Boolean(anchorEl);
  const id = canBeOpen ? 'transition-popper' : undefined;

  return (
    <div>
      <button aria-describedby={id} type="button" onClick={handleClick}>
        Transitions Popper
      </button>
      <Popper id={id} open={open} anchorEl={anchorEl} transition>
        {({ TransitionProps }) => (
          <Fade {...TransitionProps} timeout={350}>
            <Box sx={{ border: 1, p: 1, bgcolor: 'background.paper' }}>
              The content of the Popper.
            </Box>
          </Fade>
        )}
      </Popper>
    </div>
  );
}
```

----------------------------------------

TITLE: Customizing transition easing functions in MUI theme
DESCRIPTION: Example of how to customize transition easing values in the Material-UI theme. Shows the default cubic-bezier values and their intended use cases, which can be overridden or extended.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/transitions/transitions.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
const theme = createTheme({
  transitions: {
    easing: {
      // This is the most common easing curve.
      easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
      // Objects enter the screen at full velocity from off-screen and
      // slowly decelerate to a resting point.
      easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
      // Objects leave the screen at full velocity. They do not decelerate when off-screen.
      easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
      // The sharp curve is used by objects that may return to the screen at any time.
      sharp: 'cubic-bezier(0.4, 0, 0.6, 1)',
    },
  },
});
```

----------------------------------------

TITLE: Disabling All Transitions and Animations in Material UI
DESCRIPTION: Comprehensive approach to disable all transitions and animation effects using CssBaseline component configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { createTheme } from '@mui/material';

const theme = createTheme({
  components: {
    // Name of the component ⚛️
    MuiCssBaseline: {
      styleOverrides: {
        '*, *::before, *::after': {
          transition: 'none !important',
          animation: 'none !important',
        },
      },
    },
  },
});
```

LANGUAGE: css
CODE:
```
*,
*::before,
*::after {
  transition: 'none !important';
  animation: 'none !important';
}
```

----------------------------------------

TITLE: Disabling Modal Outline in React
DESCRIPTION: This snippet demonstrates how to disable the outline (often blue or gold) of a Modal component using CSS.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/modal/modal.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
<Modal outline={0} />
```

----------------------------------------

TITLE: Updating Deep Import Paths for v7
DESCRIPTION: Diff showing how to replace deep import paths with proper module imports, as deep imports with more than one level are no longer supported in v7.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_3

LANGUAGE: diff
CODE:
```
-import createTheme from '@mui/material/styles/createTheme';
+import { createTheme } from '@mui/material/styles';
```

----------------------------------------

TITLE: Creating Custom Theme Variables in Material UI
DESCRIPTION: Example of adding custom variables to Material UI theme using createTheme. Shows how to extend the theme with custom status indicators.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theming/theming.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
const theme = createTheme({
  status: {
    danger: orange[500],
  },
});
```

----------------------------------------

TITLE: Using Custom Size Values with Joy UI Components
DESCRIPTION: Shows how to use custom size values with Joy UI components after defining them in the theme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_9

LANGUAGE: jsx
CODE:
```
<Button size="xs">Extra small</Button>
<Button size="xl">Extra large</Button>
```

----------------------------------------

TITLE: Unsupported Owner State Callback (theme) - JS
DESCRIPTION: Example showing the use of an `ownerState` callback within `styleOverrides` in the Material UI theme configuration, a pattern not supported by Pigment CSS's build-time extraction.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_14

LANGUAGE: js
CODE:
```
const theme = createTheme({
  components: {
    MuiCard: {
      styleOverrides: {
        root: {
          color: ({ ownerState }) => ({
            // ❌ Pigment CSS cannot extract this style.
            ...(ownerState.variant === 'outlined' && {
              borderWidth: 3,
            }),
          }),
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Using Portal Component with Server-Side Rendering in React
DESCRIPTION: Demonstrates how to use the Portal component with server-side rendering by utilizing the container prop callback. This approach is necessary when the DOM API is not available on the server.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/portal/portal.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Portal container={() => document.getElementById('filter-panel')!}>
  <Child />
</Portal>
```

----------------------------------------

TITLE: Installing React Type Declarations with Package Manager
DESCRIPTION: Command examples for installing React type declarations with different package managers (npm, pnpm, yarn), where <version> should be replaced with the major version of React being used.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install @types/react@<version> @types/react-dom@<version>
```

LANGUAGE: bash
CODE:
```
pnpm add @types/react@<version> @types/react-dom@<version>
```

LANGUAGE: bash
CODE:
```
yarn add @types/react@<version> @types/react-dom@<version>
```

----------------------------------------

TITLE: Configuring Flexbox Gap for All Stack Instances (JavaScript)
DESCRIPTION: Creates a theme that applies the useFlexGap prop to all Stack instances by default. This enables flexbox gap spacing implementation which removes some known limitations of the default implementation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stack/stack.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';
import Stack from '@mui/joy/Stack';

const theme = extendTheme({
  components: {
    JoyStack: {
      defaultProps: {
        useFlexGap: true,
      },
    },
  },
});

function App() {
  return (
    <CssVarsProvider theme={theme}>
      <Stack>…</Stack> {/* uses flexbox gap by default */}
    </CssVarsProvider>
  );
}
```

----------------------------------------

TITLE: Using theme.breakpoints.up Example
DESCRIPTION: Example of using theme.breakpoints.up to apply styles for screens wider than the md breakpoint.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
const styles = (theme) => ({
  root: {
    backgroundColor: 'blue',
    // Match [md, ∞)
    //       [900px, ∞)
    [theme.breakpoints.up('md')]: {
      backgroundColor: 'red',
    },
  },
});
```

----------------------------------------

TITLE: Creating a Custom Tree Item with useTreeItem2 Hook in MUI Tree View (JSX)
DESCRIPTION: This React code defines a custom tree item component utilizing the new useTreeItem2 hook for full control over Tree View item rendering, behaviors, and subcomponent customization. It leverages destructuring of props and hooks for roots, labels, icons, and group transitions, demonstrating how to orchestrate flexible tree views. Required dependencies include React, MUI's Tree View components (TreeItem2, TreeItem2Provider, etc.), and the useTreeItem2 hook. The component expects typical tree item props and outputs a fully composable tree item for use as a RichTreeView slot.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7.md#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
const CustomTreeItem = React.forwardRef(function CustomTreeItem(
  props: TreeItem2Props,
  ref: React.Ref<HTMLLIElement>,
) {
  const { id, nodeId, label, disabled, children, ...other } = props;

  const {
    getRootProps,
    getContentProps,
    getIconContainerProps,
    getLabelProps,
    getGroupTransitionProps,
    status,
  } = useTreeItem2({ id, nodeId, children, label, disabled, rootRef: ref });

  // Compose and implement your tree item as you need
  return (
    <TreeItem2Provider nodeId={nodeId}>
      <TreeItem2Root {...getRootProps(other)}>
        <TreeItemContent {...getContentProps()}>
          <TreeItem2IconContainer {...getIconContainerProps()}>
            <TreeItem2Icon status={status} />
          </TreeItem2IconContainer>
          <Box sx={{ flexGrow: 1, display: 'flex', gap: 1 }}>
              {(label as string)[0]}
            </Avatar>
            <TreeItem2Label {...getLabelProps()} />
          </Box>
        </TreeItemContent>
        {children && <TreeItem2GroupTransition {...getGroupTransitionProps()} />}
      </TreeItem2Root>
    </TreeItem2Provider>
  );
});
```

----------------------------------------

TITLE: Configuring Mode Toggle with CSS Variables in Material-UI (JavaScript)
DESCRIPTION: This snippet provides an example of a React component enabling theme mode toggling with Material-UI using CSS variables for full isolation. The ThemeProvider is configured with colorSchemes and a cssVariables object, using props to define custom CSS variable prefixes and selectors. Dependencies include @mui/material/styles and the respective props for theming; inputs involve cssVarPrefix and colorSchemeSelector, while output is an isolated themed section. System mode is defaulted on page refresh, and mode is not stored in localStorage.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/demos.md#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { ThemeProvider, createTheme, useColorScheme } from '@mui/material/styles';\n\nfunction ModeToggle() {\n  const { mode, setMode } = useColorScheme();\n}\n\nexport default function DemoModeToggle(props) {\n  return (\n    <ThemeProvider\n      {...props}\n      theme={createTheme({\n        colorSchemes: { light: true, dark: true },\n        cssVariables: {\n          // required to make the demo isolated\n          cssVarPrefix: props.cssVarPrefix,\n          colorSchemeSelector: props.colorSchemeSelector || 'class',\n        },\n      })}\n    >\n      ...\n    </ThemeProvider>\n  );\n}\n
```

----------------------------------------

TITLE: Creating Custom Filter Options for MUI Autocomplete
DESCRIPTION: Shows how to use createFilterOptions to customize the filtering behavior of the Autocomplete component. Demonstrates configuration options for case sensitivity, accent handling, and result limiting.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { createFilterOptions } from '@mui/material/Autocomplete';
```

----------------------------------------

TITLE: Updating Breakpoint Usage in Material-UI v5
DESCRIPTION: This snippet shows how to update breakpoint usage in theme utilities and the Hidden component. It adjusts the breakpoint keys to match the new behavior in v5, where breakpoints are treated as values instead of ranges.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_48

LANGUAGE: diff
CODE:
```
-theme.breakpoints.down('sm') // '@media (max-width:959.95px)' - [0, sm + 1) => [0, md)
+theme.breakpoints.down('md') // '@media (max-width:959.95px)' - [0, md)
```

LANGUAGE: diff
CODE:
```
-theme.breakpoints.between('sm', 'md') // '@media (min-width:600px) and (max-width:1279.95px)' - [sm, md + 1) => [0, lg)
+theme.breakpoints.between('sm', 'lg') // '@media (min-width:600px) and (max-width:1279.95px)' - [0, lg)
```

LANGUAGE: diff
CODE:
```
-theme.breakpoints.between('sm', 'xl') // '@media (min-width:600px)'
+theme.breakpoints.up('sm') // '@media (min-width:600px)'
```

LANGUAGE: diff
CODE:
```
-<Hidden smDown>{...}</Hidden> // '@media (min-width:600px)'
+<Hidden mdDown>{...}</Hidden> // '@media (min-width:600px)'
```

----------------------------------------

TITLE: Setting Default Row Grouping in DataGridPro (JavaScript)
DESCRIPTION: This code demonstrates how to set a default row grouping configuration using the initialState prop. It groups the data first by 'Director' and then by 'BoxOffice'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/introducing-the-row-grouping-feature.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
<DataGridPro
  experimentalFeatures={{ rowGrouping: true }}
  initialState={{
    rowGrouping: {
      model: ['Director', 'BoxOffice'],
    },
  }}
  {...otherProps}
/>
```

----------------------------------------

TITLE: Handling Modal Backdrop Clicks with onClose Callback
DESCRIPTION: Demonstrates how to handle backdrop clicks in Modal components using the onClose callback, which replaces the deprecated onBackdropClick prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_20

LANGUAGE: jsx
CODE:
```
function Example() {
  const [open, setOpen] = React.useState(false);

  const handleClose = (event, reason) => {
    if (reason === 'backdropClick') {
      // Handle the backdrop click
    }
    setOpen(false);
  };

  return (
    <Modal open={open} onClose={handleClose}>
      {/* Modal content */}
    </Modal>
  );
}
```

----------------------------------------

TITLE: Installing Dependencies and Running Development Server (Bash)
DESCRIPTION: This snippet executes two `npm` commands. `npm install` downloads and installs all necessary project dependencies defined in the `package.json` file. `npm run dev` starts the development server, typically configured in `package.json` to run the Vite development server, allowing the user to view and work on the example project.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-vite/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Implementing Global CSS Reset with CssBaseline in Joy UI
DESCRIPTION: This snippet demonstrates how to use the CssBaseline component to apply a global style reset. The component must be used under CssVarsProvider to work properly.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/css-baseline/css-baseline.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import * as React from 'react';
import { CssVarsProvider } from '@mui/joy/styles';
import CssBaseline from '@mui/joy/CssBaseline';

export default function MyApp() {
  return (
    <CssVarsProvider>
      {/* must be used under CssVarsProvider */}
      <CssBaseline />

      {/* The rest of your application */}
    </CssVarsProvider>
  );
}
```

----------------------------------------

TITLE: Updating CssVarsProvider and extendTheme Imports in React
DESCRIPTION: Updates to import statements for the now-stable CssVarsProvider and extendTheme APIs, removing the experimental prefixes used in v5.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_23

LANGUAGE: diff
CODE:
```
-import { experimental_extendTheme as extendTheme, Experimental_CssVarsProvider as CssVarsProvider } from '@mui/material/styles';
+import { extendTheme, CssVarsProvider } from '@mui/material/styles';
```

----------------------------------------

TITLE: Customizing Stepper Connector in React
DESCRIPTION: This code shows how to customize the connector between steps using the 'sx' prop. It targets the '::after' pseudo-element of the Step component to modify the connector's appearance.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stepper/stepper.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
<Stepper>
  <Step
    sx={{
      '&::after': {
        borderStyle: 'dashed',
        borderWidth: '1px',
      },
    }}
  >
    Select campaign settings
  </Step>
  <Step>
    Create an ad group
  </Step>
  <Step>
    Create an ad
  </Step>
</Stepper>
```

----------------------------------------

TITLE: Setting HTML Direction Attribute Globally
DESCRIPTION: Add the dir="rtl" attribute to the root HTML element to set right-to-left text direction across the entire application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/right-to-left/right-to-left.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<html dir="rtl"></html>
```

----------------------------------------

TITLE: Overriding MUI Component Styles Based on Multiple Props - JavaScript
DESCRIPTION: Apply styles when a combination of prop values matches, including both existing and new custom values, using the `variants` key. This snippet sets a thicker dashed border for `MuiButton` when `variant` is 'dashed' and `color` is 'secondary'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theme-components/theme-components.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const theme = createTheme({
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          variants: [
            {
              props: { variant: 'dashed', color: 'secondary' },
              style: {
                border: `4px dashed ${red[500]}`, // Assuming red[500] is defined
              },
            },
          ],
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Inline Style Object with SX Prop
DESCRIPTION: An alternative solution is to pass the style object directly to the SX prop. TypeScript correctly infers literal types when the object is defined inline, avoiding the type widening issue.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_23

LANGUAGE: typescript
CODE:
```
export default function App() {
  return <Button sx={{ flexDirection: 'column' }}>Example</Button>;
}
```

----------------------------------------

TITLE: Importing Snackbar Component in React
DESCRIPTION: Basic import statement for the Material-UI Snackbar component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/snackbars/snackbars.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Snackbar from '@mui/material/Snackbar';
```

----------------------------------------

TITLE: Demonstrating Theme Behavior with CSS Variables in Material-UI
DESCRIPTION: Illustrates how the theme object remains constant when using CSS variables with light and dark color schemes, even when the color mode changes. The mode state from useColorScheme changes, but the theme.palette.mode remains the same.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
import {
  ThemeProvider,
  createTheme,
  useTheme,
  useColorScheme,
} from '@mui/material/styles';

const theme = createTheme({
  cssVariables: {
    colorSchemeSelector: 'class',
  },
  colorSchemes: {
    light: true,
    dark: true,
  },
});
console.log(theme.palette.mode); // 'light' is the default mode

function ColorModeToggle() {
  const { setMode, mode } = useColorScheme();
  const theme = useTheme();

  React.useEffect(() => {
    console.log(mode); // logged 'light' at first render, and 'dark' after the button click
  }, [mode]);

  React.useEffect(() => {
    // logged 'light' at first render, no log after the button click
    console.log(theme.palette.mode);
  }, [theme]);

  return <button onClick={() => setMode('dark')}>Toggle dark mode</button>;
}

function App() {
  return (
    <ThemeProvider theme={theme}>
      <ColorModeToggle />
    </ThemeProvider>
  );
}
```

----------------------------------------

TITLE: Configuring Font Size in Material UI Theme
DESCRIPTION: Example of adjusting the base font size in Material UI theme, which affects the entire typography scale.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/typography/typography.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
const theme = createTheme({
  typography: {
    // In Chinese and Japanese the characters are usually larger,
    // so a smaller fontsize may be appropriate.
    fontSize: 12,
  },
});
```

----------------------------------------

TITLE: Creating Theme with Material Color References
DESCRIPTION: Shows how to create a theme using Material-UI's built-in color references, importing specific colors and using their shade values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/color/color.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import { createTheme } from '@mui/material/styles';
import { purple } from '@mui/material/colors';

const theme = createTheme({
  palette: {
    primary: {
      main: purple[500],
    },
    secondary: {
      main: '#f44336',
    },
  },
});
```

----------------------------------------

TITLE: Custom Typography Scale Configuration
DESCRIPTION: Theme configuration for creating custom typography scales with custom styles and CSS selectors.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/typography/typography.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
extendTheme({
  typography: {
    subtitle: {
      fontSize: 'var(--joy-fontSize-lg)',
      fontWeight: 'var(--joy-fontWeight-md)',
      '& + p': {
        marginTop: '4px',
      },
    },
    label: {
      fontSize: 'var(--joy-fontSize-sm)',
      fontWeight: 'var(--joy-fontWeight-lg)',
      lineHeight: 'var(--joy-lineHeight-lg)',
      marginBottom: '3px',
    },
  },
});
```

----------------------------------------

TITLE: Image Layout with Masonry Component
DESCRIPTION: Shows how to use Masonry specifically for image layouts, organizing content by rows instead of columns.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
ImageMasonry.js
```

----------------------------------------

TITLE: TypeScript type augmentation for removing typography levels in Joy UI
DESCRIPTION: Example of how to augment TypeScript types to exclude default typography levels from the theme structure.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-typography/theme-typography.md#2025-04-22_snippet_5

LANGUAGE: ts
CODE:
```
// You can put this to any file that's included in your tsconfig
declare module '@mui/joy/styles' {
  interface TypographySystemOverrides {
    'title-sm': false;
    'title-xs': false;
  }
}
```

----------------------------------------

TITLE: Customizing Picker Layout with Slots in MUI X (TypeScript)
DESCRIPTION: This TypeScript/React code defines a custom layout component for MUI X Pickers using the slots concept, enabling advanced rearrangement and customization of subcomponents like toolbar, tabs, content, and actionBar. It uses the usePickerLayout hook to extract layout elements from the props, wraps subcomponents within styled root and content wrapper elements, and integrates with StaticDatePicker by providing a layout slot. Dependencies include React, MUI X Pickers (with PickersLayoutRoot, PickersLayoutContentWrapper, pickersLayout, usePickerLayout, StaticDatePicker), and proper setup of the MUI theming system. Inputs are layout props, and output is a customized static date picker UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v6.md#2025-04-22_snippet_3

LANGUAGE: TypeScript
CODE:
```
function MyCustomLayout(props) {
  const { toolbar, tabs, content, actionBar } = usePickerLayout(props);

  return (
    <PickersLayoutRoot className={pickersLayout.root} ownerState={props}>
      {toolbar}
      {actionBar}
      <PickersLayoutContentWrapper className={pickersLayout.contentWrapper}>
        {tabs}
        {content}
      </PickersLayoutContentWrapper>
    </PickersLayoutRoot>
  );
}

export default function CustomStaticDatePicker() {
  return <StaticDatePicker slots={{ layout: MyCustomLayout }} />;
}
```

----------------------------------------

TITLE: Implementing Custom Input Component for Third-Party Libraries
DESCRIPTION: Demonstrates how to create a custom input component that can be used with third-party input formatting libraries. This example shows the structure and interface implementation required for integration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
const MyInputComponent = React.forwardRef((props, ref) => {
  const { component: Component, ...other } = props;

  // implement `InputElement` interface
  React.useImperativeHandle(ref, () => ({
    focus: () => {
      // logic to focus the rendered component from 3rd party belongs here
    },
    // hiding the value e.g. react-stripe-elements
  }));

  // `Component` will be your `SomeThirdPartyComponent` from below
  return <Component {...other} />;
});

// usage
<TextField
  slotProps={{
    input: {
      inputComponent: MyInputComponent,
      inputProps: {
        component: SomeThirdPartyComponent,
      },
    },
  }}
/>;
```

----------------------------------------

TITLE: Applying Container Queries using the sx Prop (JSX & CSS)
DESCRIPTION: This snippet shows how to apply container queries directly using the `sx` prop in JSX. It uses shorthand syntax like `'@sm'` (referencing theme breakpoints) and `'@400/sidebar'` (specifying width and container name) to conditionally set `flexDirection`. The simplified CSS output illustrates the resulting `@container` rules.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_7

LANGUAGE: jsx JSX
CODE:
```
<Card
  sx={{
    '@sm': {
      flexDirection: 'row',
    },
    '@400/sidebar': {
      flexDirection: 'row',
    },
  }}
/>
```

LANGUAGE: css CSS
CODE:
```
/* Simplified CSS Output */

.MuiCard-root-dn383 {
  @container (min-width: 600px) {
    flex-direction: row;
  }
  @container sidebar (min-width: 400px) {
    flex-direction: row;
  }
}
```

----------------------------------------

TITLE: Implementing Value Set Enforcement in Toggle Buttons
DESCRIPTION: Code example showing how to ensure at least one toggle button remains active by implementing custom change handlers for both single and multiple selection scenarios.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/toggle-button/toggle-button.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
const handleAlignment = (event, newAlignment) => {
  if (newAlignment !== null) {
    setAlignment(newAlignment);
  }
};

const handleDevices = (event, newDevices) => {
  if (newDevices.length) {
    setDevices(newDevices);
  }
};
```

----------------------------------------

TITLE: Basic Links Implementation in Material-UI
DESCRIPTION: Demonstrates basic usage of the Link component built on top of Typography component with default props color='primary' and variant='inherit'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/links/links.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
{"demo": "Links.js"}
```

----------------------------------------

TITLE: Adding Responsive Meta Tag in HTML
DESCRIPTION: This HTML snippet shows how to add a responsive viewport meta tag to ensure proper rendering and touch zooming across all devices.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/usage/usage.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<meta name="viewport" content="initial-scale=1, width=device-width" />
```

----------------------------------------

TITLE: Styling with styled function in Joy UI
DESCRIPTION: Example of using theme.vars notation with styled function to apply CSS variable-based styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/using-css-variables/using-css-variables.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
const Div = styled('div')(({ theme }) => ({
  // Outputs 'var(--joy-palette-primary-500)'
  color: theme.vars.palette.primary[500],
}));
```

----------------------------------------

TITLE: Stack Row Direction Example
DESCRIPTION: Example showing how to position items horizontally in a Stack component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/stack/stack.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Stack direction="row">
  <Typography noWrap>
```

----------------------------------------

TITLE: Setting Align Self with Material-UI Box Component in JSX
DESCRIPTION: Shows how to override the alignItems value for individual flex items using the alignSelf property. This allows individual items to have different alignment on the cross axis.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_9

LANGUAGE: jsx
CODE:
```
<Box>Item 1</Box>
<Box sx={{ alignSelf: 'flex-end' }}>Item 2</Box>
<Box>Item 3</Box>
```

----------------------------------------

TITLE: Rendering RichTreeView with Data - React JSX
DESCRIPTION: This React JSX code renders the RichTreeView component from MUI X using a previously defined dataset as its 'items' prop. The 'multiSelect' prop enables support for selecting multiple tree nodes. Requires '@mui/x-tree-view' with RichTreeView installed as a dependency. The component expects 'items' to be a tree-structured array of objects, typically matching the pattern shown in the myDataSet example. Input: JavaScript data array; Output: Rendered tree view with optional multi-selection.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7-beta.md#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
<RichTreeView items={myDataSet} multiSelect />
```

----------------------------------------

TITLE: Defining Options Structure for Autocomplete
DESCRIPTION: Shows the different ways to structure options for the Autocomplete component. Options can be defined as strings or objects with a label property.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
const options = [
  { label: 'The Godfather', id: 1 },
  { label: 'Pulp Fiction', id: 2 },
];
// or
const options = ['The Godfather', 'Pulp Fiction'];
```

----------------------------------------

TITLE: Configuring Drawer Modal Props
DESCRIPTION: Example showing how to configure the Modal props of a temporary drawer, specifically the keepMounted property which affects DOM presence of drawer contents.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/drawers/drawers.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Drawer
  variant="temporary"
  ModalProps={{
    keepMounted: false,
  }}
/>
```

----------------------------------------

TITLE: Positioned Menu Implementation
DESCRIPTION: Menu positioning using Popover component with custom anchor positioning.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_4

LANGUAGE: JSX
CODE:
```
{"demo": "PositionedMenu.js"}
```

----------------------------------------

TITLE: Illustrating Redundant Nesting with MUI FormControl and TextField (JSX)
DESCRIPTION: This JSX snippet demonstrates a potential issue when composing Material UI components. Wrapping a `TextField` inside a `FormControl` is redundant because the `TextField` component inherently renders its own `FormControl` internally, potentially leading to unexpected layout or styling issues. The comment shows the equivalent, problematic nested structure.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/making-customizable-components.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<FormControl>
  <TextField>
</FormControl>

// Equivalent to

<FormControl>
  <FormControl>
    <InputLabel />
    <Input />
    <FormHelperText />
  </FormControl>
</FormControl>
```

----------------------------------------

TITLE: Moving Component Overrides to components.styleOverrides
DESCRIPTION: Diff showing the relocation of component style overrides from overrides to components.styleOverrides in the theme structure.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_19

LANGUAGE: diff
CODE:
```
 import { createTheme } from '@mui/material/styles';

 const theme = createTheme({
-  overrides: {
-    MuiButton: {
-      root: { padding: 0 },
-    },
-  },
+  components: {
+    MuiButton: {
+      styleOverrides: {
+        root: { padding: 0 },
+      },
+    },
+  },
 });
```

----------------------------------------

TITLE: Migrating Color Mode Styles to theme.applyStyles in React
DESCRIPTION: Example of updating component styles to use the new theme.applyStyles utility instead of checking theme.palette.mode for dark mode styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_24

LANGUAGE: diff
CODE:
```
 const MyComponent = styled('button')(({ theme }) => ({
   padding: '0.5rem 1rem',
   border: '1px solid,
-  borderColor: theme.palette.mode === 'dark' ? '#fff' : '#000',
+  borderColor: '#000',
+  ...theme.applyStyles('dark', {
+    borderColor: '#fff',
+  })
 }))
```

----------------------------------------

TITLE: Customizing Scrollbar Colors in Material-UI Dark Theme
DESCRIPTION: This snippet demonstrates how to customize scrollbar colors for better contrast in dark mode using Material-UI's theme customization. It uses the darkScrollbar utility function.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/css-baseline/css-baseline.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
import darkScrollbar from '@mui/material/darkScrollbar';

const theme = createTheme({
  components: {
    MuiCssBaseline: {
      styleOverrides: (themeParam) => ({
        body: themeParam.palette.mode === 'dark' ? darkScrollbar() : null,
      }),
    },
  },
});
```

----------------------------------------

TITLE: Stack with Margin on Children Example (JSX)
DESCRIPTION: Demonstrates a limitation where applying margin directly to Stack children is not supported by default, as shown in this example where the Button's marginTop will be ignored.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stack/stack.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<Stack>
  <Button sx={{ marginTop: '30px' }}>...</Button>
</Stack>
```

----------------------------------------

TITLE: Applying Custom Theme to CssVarsProvider
DESCRIPTION: Example of implementing the custom theme with CssVarsProvider component
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';

const theme = extendTheme({ … });

function App() {
  return <CssVarsProvider theme={theme}>…</CssVarsProvider>;
}
```

----------------------------------------

TITLE: Replacing State Class Names in Theme StyleOverrides with Emotion
DESCRIPTION: Example showing how to replace JSS local rule references ($syntax) with valid class selectors when migrating theme styleOverrides to Emotion. This demonstrates changing a state class reference.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_0

LANGUAGE: diff
CODE:
```
 const theme = createTheme({
   components: {
     MuiOutlinedInput: {
       styleOverrides: {
         root: {
-          '&$focused': {
+          '&.Mui-focused': {
             borderWidth: 1,
           }
         }
       }
     }
   }
 });
```

----------------------------------------

TITLE: Configuring Custom Emotion Cache for Material UI with Pages Router
DESCRIPTION: Diff showing how to set up a custom Emotion cache for Material UI in the Next.js Pages Router _document.tsx file.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_13

LANGUAGE: diff
CODE:
```
 ...

 MyDocument.getInitialProps = async (ctx) => {
   const finalProps = await documentGetInitialProps(ctx, {
+    emotionCache: createCustomCache(),
   });
   return finalProps;
 };
```

----------------------------------------

TITLE: Custom Image List Implementation
DESCRIPTION: Shows implementation of a customized image list with custom gradient backgrounds, positioned title bars, and adjusted gap spacing.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/image-list/image-list.md#2025-04-22_snippet_7

LANGUAGE: jsx
CODE:
```
{"demo": "CustomImageList.js", "defaultCodeOpen": false}
```

----------------------------------------

TITLE: Extending the SX Prop Functionality in Material-UI
DESCRIPTION: Shows how to add new keys to be processed by the sx prop by extending the unstable_sxConfig option in the theme. This allows custom properties to be handled by the sx prop system.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/experimental-api/configure-the-sx-prop/configure-the-sx-prop.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
ExtendTheSxProp.js
```

----------------------------------------

TITLE: Preventing Default Key Handler Behavior in Autocomplete (JSX)
DESCRIPTION: This snippet demonstrates how to prevent the default key handler behavior in the Autocomplete component by setting the event's defaultMuiPrevented property to true. It specifically shows how to handle the 'Enter' key press event.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
<Autocomplete
  onKeyDown={(event) => {
    if (event.key === 'Enter') {
      // Prevent's default 'Enter' behavior.
      event.defaultMuiPrevented = true;
      // your handler code
    }
  }}
/>
```

----------------------------------------

TITLE: Applying Custom CSS Class to MUI Switch (JSX)
DESCRIPTION: This snippet demonstrates applying a custom CSS class named 'uglySwitch' to a Material UI `Switch` component. This class is used to target the component and its sub-elements for custom styling via CSS.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/making-customizable-components.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Switch className="uglySwitch" />
```

----------------------------------------

TITLE: Adding Custom Shadows to Joy UI Theme
DESCRIPTION: Demonstrates how to add new custom shadow keys to the Joy UI theme. This allows for creating custom shadow values beyond the default T-shirt sizes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-shadow/theme-shadow.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
import { extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  shadow: {
    subtle: '{CSS box-shadow}',
    strong: '{CSS box-shadow}',
  },
});

// Then, pass it to `<CssVarsProvider theme={theme}>`.
```

----------------------------------------

TITLE: Migrating ListItemText Typography Props to SlotProps
DESCRIPTION: Transforms ListItemText component from using primaryTypographyProps and secondaryTypographyProps to the new slotProps API.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_39

LANGUAGE: diff
CODE:
```
 <ListItemText
-  primaryTypographyProps={primaryTypographyProps}
+  slotProps={{ primary: primaryTypographyProps }}
-  secondaryTypographyProps={secondaryTypographyProps}
+  slotProps={{ secondary: secondaryTypographyProps }}
 />
```

----------------------------------------

TITLE: Removing Borders with Material-UI Box Component
DESCRIPTION: Examples of removing borders from elements using the Box component with the sx prop. Shows how to remove all borders or specific borders (top, right, bottom, left).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/borders/borders.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Box sx={{ border: 0 }}>…
<Box sx={{ borderTop: 0 }}>…
<Box sx={{ borderRight: 0 }}>…
<Box sx={{ borderBottom: 0 }}>…
<Box sx={{ borderLeft: 0 }}>…
```

----------------------------------------

TITLE: Implementing Global Reset with CssBaseline in React
DESCRIPTION: This snippet demonstrates how to use the CssBaseline component to apply a global reset in a React application. It wraps the entire application to ensure consistent styling across all elements.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/css-baseline/css-baseline.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import * as React from 'react';
import CssBaseline from '@mui/material/CssBaseline';

export default function MyApp() {
  return (
    <React.Fragment>
      <CssBaseline />
      {/* The rest of your application */}
    </React.Fragment>
  );
}
```

----------------------------------------

TITLE: Loading ButtonGroup Implementation
DESCRIPTION: Demonstrates how to implement loading state in ButtonGroup using the loading prop from Button component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/button-group/button-group.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
<ButtonGroup>
  <Button loading>Submit</Button>
  <Button>Cancel</Button>
</ButtonGroup>
```

----------------------------------------

TITLE: Implementing Fixed App Bar with Toolbar
DESCRIPTION: Shows how to implement a fixed App Bar with a secondary Toolbar to prevent content overlap.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/app-bar/app-bar.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
function App() {
  return (
    <React.Fragment>
      <AppBar position="fixed">
        <Toolbar>{/* content */}</Toolbar>
      </AppBar>
      <Toolbar />
    </React.Fragment>
  );
}
```

----------------------------------------

TITLE: CSS Theme Variables Configuration
DESCRIPTION: Example of enabling CSS variables generation from Material UI theme configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theming/theming.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
const theme = createTheme({
  cssVariables: true,
});

function App() {
  return <ThemeProvider theme={theme}>...</ThemeProvider>;
}
```

----------------------------------------

TITLE: Selected Menu with Initial Focus
DESCRIPTION: Menu implementation with selected items and initial focus handling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_3

LANGUAGE: JSX
CODE:
```
{"demo": "SimpleListMenu.js"}
```

----------------------------------------

TITLE: Creating a Custom Box Component with createBox Utility
DESCRIPTION: Shows how to create a custom version of the Box component using the createBox utility. This is useful for exposing the container to a different theme than the default library theme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/box/box.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
import { createBox, createTheme } from '@mui/system';

const defaultTheme = createTheme({
  // your custom theme values
});

const Box = createBox({ defaultTheme });

export default Box;
```

----------------------------------------

TITLE: Replacing Hidden Component with sx Prop in React
DESCRIPTION: Replaces the deprecated Hidden component with the sx prop for responsive visibility control.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_19

LANGUAGE: diff
CODE:
```
-<Hidden implementation="css" xlUp><Paper /></Hidden>
-<Hidden implementation="css" xlUp><button /></Hidden>
+<Paper sx={{ display: { xl: 'none', xs: 'block' } }} />
+<Box component="button" sx={{ display: { xl: 'none', xs: 'block' } }} />
```

----------------------------------------

TITLE: Importing and Using Material Color Values
DESCRIPTION: Example of importing specific colors from Material-UI's color palette and accessing their values using different notation methods.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/color/color.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { purple, red } from '@mui/material/colors';

const primary = red[500]; // #f44336
const accent = purple['A200']; // #e040fb
const accent = purple.A200; // #e040fb (alternative method)
```

----------------------------------------

TITLE: Defining Public Component Styled Root (MUI/TypeScript)
DESCRIPTION: Demonstrates creating a styled component for the root element of a public component using MUI's `styled` utility. It includes the `name`, `slot`, and `overridesResolver` options, which are essential for public component styling and theming integration.
SOURCE: https://github.com/mui/material-ui/blob/master/TYPESCRIPT_CONVENTION.md#_snippet_6

LANGUAGE: TypeScript
CODE:
```
const FooRoot = styled(Typography, {
  name: 'MuiFoo',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root,
})({
  // styling
});
```

----------------------------------------

TITLE: Woven Image List Implementation in Material-UI
DESCRIPTION: Demonstrates a woven image list layout using alternating container ratios for rhythmic content presentation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/image-list/image-list.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
{"demo": "WovenImageList.js"}
```

----------------------------------------

TITLE: Linear Progress with Label Example
DESCRIPTION: Shows how to implement a LinearProgress component with an accompanying label to display progress information.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/linear-progress/linear-progress.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
LinearProgressWithLabel.js
```

----------------------------------------

TITLE: React Value Memoization Example
DESCRIPTION: Demonstrates proper value handling in controlled Autocomplete components using useMemo to ensure referential stability of filtered values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// ⚠️ BAD
return <Autocomplete multiple value={allValues.filter((v) => v.selected)} />;

// 👍 GOOD
const selectedValues = React.useMemo(
  () => allValues.filter((v) => v.selected),
  [allValues],
);
return <Autocomplete multiple value={selectedValues} />;
```

----------------------------------------

TITLE: Configuring Text Alignment in Material-UI with JSX
DESCRIPTION: Shows how to set text alignment (left, center, right) using the Box component in Material-UI. This affects how text is positioned within its container.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Box sx={{ textAlign: 'left' }}>…
<Box sx={{ textAlign: 'center' }}>…
<Box sx={{ textAlign: 'right' }}>…
```

----------------------------------------

TITLE: Configuring Material UI Theme for React Router Integration
DESCRIPTION: This snippet demonstrates how to configure the Material UI theme to use React Router's Link component globally. It maps Material UI's href prop to React Router's to prop using a custom LinkBehavior component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/routing/routing.md#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
import { Link as RouterLink, LinkProps as RouterLinkProps } from 'react-router';
import { LinkProps } from '@mui/material/Link';

const LinkBehavior = React.forwardRef<
  HTMLAnchorElement,
  Omit<RouterLinkProps, 'to'> & { href: RouterLinkProps['to'] }
>((props, ref) => {
  const { href, ...other } = props;
  // Map href (Material UI) -> to (react-router)
  return <RouterLink ref={ref} to={href} {...other} />;
});

const theme = createTheme({
  components: {
    MuiLink: {
      defaultProps: {
        component: LinkBehavior,
      } as LinkProps,
    },
    MuiButtonBase: {
      defaultProps: {
        LinkComponent: LinkBehavior,
      },
    },
  },
});
```

----------------------------------------

TITLE: Rendering InitColorSchemeScript in Next.js Pages Router _document (TypeScript)
DESCRIPTION: Illustrates how to include the `InitColorSchemeScript` component in a custom `_document.tsx` file for a Next.js Pages Router application. It should be placed within the `<body>` tag before `Main` to ensure it runs early in the server-rendering process and applies the color scheme correctly on initial load.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/init-color-scheme-script/init-color-scheme-script.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { Html, Head, Main, NextScript } from 'next/document';
import InitColorSchemeScript from '@mui/material/InitColorSchemeScript';

export default function MyDocument(props) {
  return (
    <Html lang="en">
      <Head>{/* tags */}</Head>
      <body>
        <InitColorSchemeScript />
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}
```

----------------------------------------

TITLE: Implementing Client-Side Hydration for Material UI
DESCRIPTION: Sets up the client-side part of the server-side rendering. Creates an Emotion cache and uses ReactDOM.hydrateRoot to attach to the server-rendered HTML, maintaining the same component structure that was used on the server.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/server-rendering/server-rendering.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import CssBaseline from '@mui/material/CssBaseline';
import { ThemeProvider } from '@mui/material/styles';
import { CacheProvider } from '@emotion/react';
import App from './App';
import theme from './theme';
import createEmotionCache from './createEmotionCache';

const cache = createEmotionCache();

function Main() {
  return (
    <CacheProvider value={cache}>
      <ThemeProvider theme={theme}>
        {/* CssBaseline kickstart an elegant, consistent, and simple baseline
            to build upon. */}
        <CssBaseline />
        <App />
      </ThemeProvider>
    </CacheProvider>
  );
}

ReactDOM.hydrateRoot(document.querySelector('#root'), <Main />);
```

----------------------------------------

TITLE: Customizing Column Count in Grid Components with React
DESCRIPTION: Demonstrates how to customize the number of columns in a Grid container by using the columns prop, changing from the default 12 columns to a custom value.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_9

LANGUAGE: jsx
CODE:
```
<Grid container columns={16}>
```

----------------------------------------

TITLE: Setting Max-Width with Material-UI Box Component
DESCRIPTION: Shows how to set a max-width constraint using a breakpoint value from the theme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/sizing/sizing.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<Box sx={{ maxWidth: 'md' }}>…
```

----------------------------------------

TITLE: Switch Component with ARIA Label
DESCRIPTION: Example of adding accessibility attributes to a Switch component using slotProps.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/switch/switch.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Switch value="checkedA" slotProps={{ 'aria-label': 'Switch A' }} />
```

----------------------------------------

TITLE: Theming with Component Classes Diff
DESCRIPTION: This diff highlights the recommended approach for theming and customization using component-specific class objects (e.g., `outlinedInputClasses`) instead of hardcoded string class names. This ensures themes correctly inherit the class name generator configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/classname-generator/classname-generator.md#_snippet_7

LANGUAGE: diff
CODE:
```
+import { outlinedInputClasses } from '@mui/material/OutlinedInput';

   const theme = createTheme({
     components: {
       MuiOutlinedInput: {
         styleOverrides: {
           root: {
  -          '& .MuiOutlinedInput-notchedOutline': {
  +          // the result will contain the prefix.
  +          [`& .${outlinedInputClasses.notchedOutline}`]: {
               borderWidth: 1,
             }
           }
         }
       }
     }
   });
```

----------------------------------------

TITLE: Column Header Grouping in React Table
DESCRIPTION: Example of implementing grouped column headers in a table by using multiple TableRow components within TableHead.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/table/table.md#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
<TableHead>
  <TableRow />
  <TableRow />
</TableHead>
```

----------------------------------------

TITLE: Adding Units to System `gap` Props in JSX
DESCRIPTION: Illustrates the change required for system `gap` properties (`gap`, `rowGap`, `columnGap`) in MUI v5. Numerical values previously interpreted as spacing units now require explicit units (e.g., 'px') to bypass the theme spacing transformation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_37

LANGUAGE: diff
CODE:
```
  <Box
-  gap={2}
+  gap="2px"
  >
```

----------------------------------------

TITLE: Migrating from Deprecated Grid to GridLegacy
DESCRIPTION: Diff showing how to update imports, class names, and theme customization when continuing to use the deprecated Grid component (now renamed to GridLegacy).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_7

LANGUAGE: diff
CODE:
```
    // imports
-import Grid, { gridClasses, GridProps } from '@mui/material/Grid';
+import Grid, { gridLegacyClasses, GridLegacyProps } from '@mui/material/GridLegacy';

-import { Grid } from '@mui/material';
+import { GridLegacy as Grid } from '@mui/material';

    // theme
    const theme = createTheme({
      components: {
-    MuiGrid: {
+    MuiGridLegacy: {
          // ...
        },
      },
    });

    // CSS classes
-.MuiGrid-root
+.MuiGridLegacy-root
```

----------------------------------------

TITLE: Configuring Success Color Palette in Joy UI Theme
DESCRIPTION: Defines a success color palette with shades from 50 to 900 and configures component states for light and dark themes. This includes styling for plain, outlined, soft, and solid variant states.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
const success = {
  50: '#F3FEF5',
  100: '#D7F5DD',
  200: '#77EC95',
  300: '#4CC76E',
  400: '#2CA24D',
  500: '#1A7D36',
  600: '#0F5D26',
  700: '#034318',
  800: '#002F0F',
  900: '#001D09',
};

extendTheme({
  colorSchemes: {
    light: {
      palette: {
        success: {
          ...success,
          plainColor: `var(--joy-palette-success-600)`,
          plainHoverBg: `var(--joy-palette-success-100)`,
          plainActiveBg: `var(--joy-palette-success-200)`,
          plainDisabledColor: `var(--joy-palette-success-200)`,

          outlinedColor: `var(--joy-palette-success-500)`,
          outlinedBorder: `var(--joy-palette-success-200)`,
          outlinedHoverBg: `var(--joy-palette-success-100)`,
          outlinedHoverBorder: `var(--joy-palette-success-300)`,
          outlinedActiveBg: `var(--joy-palette-success-200)`,
          outlinedDisabledColor: `var(--joy-palette-success-100)`,
          outlinedDisabledBorder: `var(--joy-palette-success-100)`,

          softColor: `var(--joy-palette-success-600)`,
          softBg: `var(--joy-palette-success-100)`,
          softHoverBg: `var(--joy-palette-success-200)`,
          softActiveBg: `var(--joy-palette-success-300)`,
          softDisabledColor: `var(--joy-palette-success-300)`,
          softDisabledBg: `var(--joy-palette-success}-)50`,

          solidColor: '#fff',
          solidBg: `var(--joy-palette-success-500)`,
          solidHoverBg: `var(--joy-palette-success-600)`,
          solidActiveBg: `var(--joy-palette-success-700)`,
          solidDisabledColor: `#fff`,
          solidDisabledBg: `var(--joy-palette-success-200)`,
        },
      },
    },
    dark: {
      palette: {
        success: {
          ...success,
          plainColor: `var(--joy-palette-success-300)`,
          plainHoverBg: `var(--joy-palette-success-800)`,
          plainActiveBg: `var(--joy-palette-success-700)`,
          plainDisabledColor: `var(--joy-palette-success-800)`,

          outlinedColor: `var(--joy-palette-success-200)`,
          outlinedBorder: `var(--joy-palette-success-700)`,
          outlinedHoverBg: `var(--joy-palette-success-800)`,
          outlinedHoverBorder: `var(--joy-palette-success-600)`,
          outlinedActiveBg: `var(--joy-palette-success-900)`,
          outlinedDisabledColor: `var(--joy-palette-success-800)`,
          outlinedDisabledBorder: `var(--joy-palette-success-800)`,

          softColor: `var(--joy-palette-success-200)`,
          softBg: `var(--joy-palette-success-900)`,
          softHoverBg: `var(--joy-palette-success-800)`,
          softActiveBg: `var(--joy-palette-success-700)`,
          softDisabledColor: `var(--joy-palette-success-800)`,
          softDisabledBg: `var(--joy-palette-success-900)`,

          solidColor: '#fff',
          solidBg: `var(--joy-palette-success-600)`,
          solidHoverBg: `var(--joy-palette-success-700)`,
          solidActiveBg: `var(--joy-palette-success-800)`,
          solidDisabledColor: `var(--joy-palette-success-700)`,
          solidDisabledBg: `var(--joy-palette-success-900)`,
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Importing Adapter for date-fns v2.x - React JavaScript
DESCRIPTION: This code snippet demonstrates how to import the AdapterDateFns for integrating MUI X Date Pickers with date-fns version 2.x. Requires installation of '@mui/x-date-pickers' and peer dependency 'date-fns@^2'. The import enables date pickers to interpret and format dates using date-fns v2 APIs. No parameters are required; simply import and use the adapter as the 'dateAdapter' prop in date picker components. Limitations: Only compatible with v2.x of date-fns.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7-beta.md#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
// date-fns v2.x
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
```

----------------------------------------

TITLE: Custom Pagination Options Configuration in React Table
DESCRIPTION: Examples of configuring custom pagination options for TablePagination component using both number arrays and object arrays with labels.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/table/table.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
<TablePagination rowsPerPageOptions={[10, 50]} />
```

LANGUAGE: JSX
CODE:
```
<TablePagination rowsPerPageOptions={[10, 50, { value: -1, label: 'All' }]} />
```

----------------------------------------

TITLE: Applying Color Inversion to Styled Component in React
DESCRIPTION: Shows how to use the applySolidInversion utility with the styled API to create a custom component with color inversion capabilities. This method allows for reusable components with built-in color inversion.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/main-features/color-inversion/color-inversion.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
const Parent = styled('div')([{ ...baseStyles }, applySolidInversion('neutral')]);
```

----------------------------------------

TITLE: Applying Percentage and Pixel Widths with sx Prop in Material UI JSX
DESCRIPTION: Illustrates how the `width` property in the `sx` prop handles fractional values (0 < value <= 1) as percentages (e.g., 1/2 becomes '50%') and other numeric values as pixels (e.g., 20 becomes '20px'), based on the internal transform function.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_10

LANGUAGE: jsx
CODE:
```
<Box sx={{ width: 1/2 }} /> // equivalent to width: '50%'
<Box sx={{ width: 20 }} /> // equivalent to width: '20px'
```

----------------------------------------

TITLE: Implementing Radio Group Rating in React with Material-UI
DESCRIPTION: Shows how to implement the Rating component as a radio group. The highlightSelectedOnly prop is used to restore the natural behavior of radio buttons.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/rating/rating.md#2025-04-22_snippet_5

LANGUAGE: JSX
CODE:
```
{"demo": "RadioGroupRating.js"}
```

----------------------------------------

TITLE: Changing Typography Semantic Element in React
DESCRIPTION: JSX code demonstrating how to change the semantic element of a Typography component while maintaining its visual style.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/typography/typography.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<Typography variant="h1" component="h2">
  h1. Heading
</Typography>
```

----------------------------------------

TITLE: Importing Box Component in React
DESCRIPTION: Basic import statement for the Box component from Joy UI package.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/box/box.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Box from '@mui/joy/Box';
```

----------------------------------------

TITLE: Creating Customized Checkboxes in React
DESCRIPTION: Shows an example of customizing the Checkbox component in Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_9

LANGUAGE: JSX
CODE:
```
{"demo": "CustomizedCheckbox.js"}
```

----------------------------------------

TITLE: Configuring Timezone in MUI X TimePicker (TSX)
DESCRIPTION: This TSX snippet demonstrates how to configure the timezone for the MUI X `TimePicker` component using the `timezone` prop. It requires the `TimePicker` component and typically state variables for value management (`value`, `setValue`). The example sets the timezone to 'Pacific/Honolulu', causing the component to display and handle time relative to that zone.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-mid-v6-features.md#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
<TimePicker
  value={value}
  onChange={setValue}
  timezone="Pacific/Honolulu" // Can be in any timezone of your choice
  label={'Rendered in "Pacific/Honolulu"'}
/>
```

----------------------------------------

TITLE: Split Button Implementation
DESCRIPTION: Demonstrates how to create a split button using ButtonGroup with dropdown functionality.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/button-group/button-group.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
<ButtonGroup variant="contained">
  <Button>Split Button</Button>
  <Button size="small" aria-label="select merge strategy">
    <ArrowDropDownIcon />
  </Button>
</ButtonGroup>
```

----------------------------------------

TITLE: Basic Usage of Box Component with Custom HTML Element
DESCRIPTION: This example demonstrates how to use the Box component with a custom HTML element (section) using the component prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/box/box.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
{"demo": "BoxBasic.js", "defaultCodeOpen": true }
```

----------------------------------------

TITLE: Setting List Component to Use Ordered List Element
DESCRIPTION: Example of using the component prop to change the semantic HTML element rendered by the List component from the default ul to ol.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
<List component="ol">
```

----------------------------------------

TITLE: Replacing Hidden Component with useMediaQuery (JS Implementation)
DESCRIPTION: Shows how to replace the deprecated Hidden component (JavaScript implementation) with the useMediaQuery hook for responsive display control.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_19

LANGUAGE: diff
CODE:
```
-<Hidden implementation="js" xlUp><Paper /></Hidden>
+const hidden = useMediaQuery(theme => theme.breakpoints.up('xl'));
+return hidden ? null : <Paper />;
```

----------------------------------------

TITLE: Adding Hover Feedback to Rating in React with Material-UI
DESCRIPTION: Illustrates how to display a label on hover to help users pick the correct rating value. This example uses the onChangeActive prop for hover feedback.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/rating/rating.md#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
{"demo": "HoverRating.js"}
```

----------------------------------------

TITLE: Implementing Custom Separators in React Breadcrumbs
DESCRIPTION: Demonstrates how to use custom separators in Breadcrumbs, including string separators and SVG icons. This allows for more personalized breadcrumb designs.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
{"demo": "CustomSeparator.js"}
```

----------------------------------------

TITLE: Configuring Font Family in Material-UI with JSX
DESCRIPTION: Demonstrates how to set font family using the Box component in Material-UI. It shows using the default theme font and a specific font family.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
<Box sx={{ fontFamily: 'default' }}>…
<Box sx={{ fontFamily: 'Monospace' }}>…
```

----------------------------------------

TITLE: Accessing System Mode when Current Mode is 'system' - JS
DESCRIPTION: Shows how to use the `useColorScheme` hook to retrieve both the currently set `mode` and the user's system preference via `systemMode`. If the current `mode` is set to 'system', `systemMode` will contain the actual 'light' or 'dark' system preference.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#_snippet_6

LANGUAGE: JS
CODE:
```
const { mode, systemMode } = useColorScheme();

console.log(mode); // 'system'
console.log(systemMode); // 'light' | 'dark'
```

----------------------------------------

TITLE: Creating Material UI Theme with Contrast Threshold - JavaScript
DESCRIPTION: This snippet demonstrates how to create a custom Material UI theme using `createTheme`. It sets the `contrastThreshold` value within the `palette` configuration to 4.5, aiming to meet WCAG 2.1 accessibility requirements for minimum contrast. This threshold influences how colors are calculated to ensure sufficient contrast.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/palette/palette.md#_snippet_0

LANGUAGE: js
CODE:
```
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  palette: {
    contrastThreshold: 4.5,
  },
});
```

----------------------------------------

TITLE: Importing and Using Sheet Component in Joy UI
DESCRIPTION: Basic example of importing and using the Sheet component from Joy UI. The Sheet component acts as a generic container that supports Joy UI's global variants.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/sheet/sheet.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Sheet from '@mui/joy/Sheet';

export default function MyApp() {
  return <Sheet>Holy sheet!</Sheet>;
}
```

----------------------------------------

TITLE: Image List with Title Bars Implementation
DESCRIPTION: Example of using ImageListItemBar to add overlay titles and actions to image list items.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/image-list/image-list.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
{"demo": "TitlebarImageList.js"}
```

----------------------------------------

TITLE: Setting Block Display in Material-UI
DESCRIPTION: Example of using the Box component with block display property. This transforms inline elements to behave as block elements, placing each on a new line.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Box component="span" sx={{ display: 'block' }}>block</Box>
<Box component="span" sx={{ display: 'block' }}>block</Box>
```

----------------------------------------

TITLE: Configuring Next.js Plugin - JS
DESCRIPTION: Shows how to integrate the `@pigment-css/nextjs-plugin` into your Next.js configuration file (`next.config.mjs` or `next.config.js`), wrapping the existing config and specifying which libraries (`@mui/material`) should be transformed.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_2

LANGUAGE: js
CODE:
```
import { withPigment } from '@pigment-css/nextjs-plugin';

const nextConfig = {
  // ...Your nextjs config.
};

/**
 * @type {import('@pigment-css/nextjs-plugin').PigmentOptions}
 */
const pigmentConfig = {
  transformLibraries: ['@mui/material'],
};

export default withPigment(nextConfig, pigmentConfig);
```

LANGUAGE: js
CODE:
```
const { withPigment } = require('@pigment-css/nextjs-plugin');

const nextConfig = {
  // ...Your nextjs config.
};

/**
 * @type {import('@pigment-css/nextjs-plugin').PigmentOptions}
 */
const pigmentConfig = {
  transformLibraries: ['@mui/material'],
};

module.exports = withPigment(nextConfig, pigmentConfig);
```

----------------------------------------

TITLE: Adding Custom Color Tokens - Joy UI Theme
DESCRIPTION: Example of adding new color tokens to the theme and TypeScript type augmentation for custom palette values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-colors/theme-colors.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
extendTheme({
  colorSchemes: {
    light: {
      palette: {
        // `gradient` is a new color token
        gradient: {
          primary: 'linear-gradient(to top, var(--joy-palette-primary-main), #000)',
        },
      },
    },
  },
});

// `sx` prop usage example:
<Button sx={{ background: (theme) => theme.vars.palette.gradient.primary }} />;
```

LANGUAGE: typescript
CODE:
```
// You can put this to any file that's included in your tsconfig
declare module '@mui/joy/styles' {
  interface Palette {
    gradient: {
      primary: string;
    };
  }
}
```

----------------------------------------

TITLE: Using adaptV4Theme Helper for Theme Migration
DESCRIPTION: Example demonstrating how to use the adaptV4Theme helper to migrate from Material UI v4 theme structure to v5 theme structure for a smoother transition.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_10

LANGUAGE: diff
CODE:
```
-import { createMuiTheme } from '@mui/material/styles';
+import { createTheme, adaptV4Theme } from '@mui/material/styles';

-const theme = createMuiTheme({
+const theme = createTheme(adaptV4Theme({
   // v4 theme
-});
+}));
```

----------------------------------------

TITLE: Configuring themed components with CSS variables
DESCRIPTION: Example of using theme variables in component customization through theme extension.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/using-css-variables/using-css-variables.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
extendTheme({
  components: {
    JoyButton: {
      root: ({ theme }) => ({
        // Outputs 'var(--joy-fontFamily-display)'
        fontFamily: theme.vars.fontFamily.display,
      }),
    },
  },
});
```

----------------------------------------

TITLE: Box Component System Props Example
DESCRIPTION: Demonstration of using MUI System properties directly as props on the Box component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/box/box.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import Box from '@mui/joy/Box';

<Box px={2} py={1} bgcolor="primary.500">
  This Box uses system props for padding and background color.
</Box>
```

----------------------------------------

TITLE: Using Flattened Props with MUI CSS Utility Components in React
DESCRIPTION: This snippet shows how to use flattened props with MUI CSS utility components like Box, Typography, Stack, and Grid. It demonstrates the usage of display, color, and margin props directly on these components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q1-update.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Box display="grid" />
<Typography p={2} color="text.secondary" />
<Stack mt={1} />
<Grid color="success.main" />
```

----------------------------------------

TITLE: Installing MUI Lab Dependencies
DESCRIPTION: Command to install the required peer dependencies - Material-UI core components and Emotion styling library.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-lab/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm install @mui/material @emotion/react @emotion/styled
```

----------------------------------------

TITLE: Wrapping Components with muiName in JSX
DESCRIPTION: Demonstrates how to properly wrap a Material UI component while preserving the muiName static property for component identification.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/composition/composition.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
const WrappedIcon = (props) => <Icon {...props} />;
WrappedIcon.muiName = Icon.muiName;
```

----------------------------------------

TITLE: Creating Responsive Layouts with CSS Grid and Box Components in React
DESCRIPTION: Shows how to implement a responsive grid layout using the Box component with CSS Grid properties as an alternative to the Grid component, defining column spans for child elements.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_10

LANGUAGE: jsx
CODE:
```
<Box display="grid" gridTemplateColumns="repeat(12, 1fr)" gap={2}>
  <Box gridColumn="span 8">
    <Item>xs=8</Item>
  </Box>
  <Box gridColumn="span 4">
    <Item>xs=4</Item>
  </Box>
  <Box gridColumn="span 4">
    <Item>xs=4</Item>
  </Box>
  <Box gridColumn="span 8">
    <Item>xs=8</Item>
  </Box>
</Box>
```

----------------------------------------

TITLE: Implementing Custom Filter with Start Match
DESCRIPTION: Example of implementing a custom filter that matches options from the start of the string, using the filterOptions configuration with custom stringify function.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
const filterOptions = createFilterOptions({
  matchFrom: 'start',
  stringify: (option) => option.title,
});

<Autocomplete filterOptions={filterOptions} />;
```

----------------------------------------

TITLE: Installing MUI Lab Package Dependencies
DESCRIPTION: Commands to install @mui/lab and @mui/material packages using different package managers (npm, pnpm, yarn).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/about-the-lab/about-the-lab.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install @mui/lab @mui/material
```

LANGUAGE: bash
CODE:
```
pnpm add @mui/lab @mui/material
```

LANGUAGE: bash
CODE:
```
yarn add @mui/lab @mui/material
```

----------------------------------------

TITLE: Accessible Tabs with Selection Following Focus
DESCRIPTION: Implementation of Tabs with automatic selection following focus behavior for improved accessibility.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/tabs/tabs.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
/* Tabs where selection follows focus */
<Tabs selectionFollowsFocus />
```

----------------------------------------

TITLE: Basic Switch Component Implementation
DESCRIPTION: Basic setup for using the Switch component from Joy UI after installation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/switch/switch.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Switch from '@mui/joy/Switch';

export default function MyApp() {
  return <Switch />;
}
```

----------------------------------------

TITLE: Basic Select Input Implementation
DESCRIPTION: Example showing basic usage of Select component with InputLabel and MenuItem elements
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/selects/selects.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
<InputLabel id="label">Age</InputLabel>
<Select labelId="label" id="select" value="20">
  <MenuItem value="10">Ten</MenuItem>
  <MenuItem value="20">Twenty</MenuItem>
</Select>
```

----------------------------------------

TITLE: Customizing Table Theme in Joy UI
DESCRIPTION: This snippet demonstrates how to customize the Table theme based on the borderAxis prop using the extendTheme() function in Joy UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/table/table.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  components: {
    JoyTable: {
      styleOverrides: {
        root: ({ ownerState }) => ({
          ...(ownerState.borderAxis === 'header' && {
            // this example applies borders between <thead> and <tbody>
            '& thead th:not([colspan])': {
              borderBottom: '2px solid var(--TableCell-borderColor)',
            },
          }),
        });
      }
    }
  }
})

<CssVarsProvider theme={theme}>…</CssVarsProvider>
```

----------------------------------------

TITLE: Account Menu with Avatar
DESCRIPTION: Menu implementation combined with Avatar component for account-related actions.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_6

LANGUAGE: JSX
CODE:
```
{"demo": "AccountMenu.js"}
```

----------------------------------------

TITLE: Grid with Row and Column Spacing
DESCRIPTION: Implementation demonstrating independent control of row and column gaps using rowSpacing and columnSpacing props.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
{"demo": "RowAndColumnSpacing.js", "bg": true}
```

----------------------------------------

TITLE: Using a Custom Tree Item in RichTreeView (JSX)
DESCRIPTION: This example shows how to pass the previously defined CustomTreeItem component to the RichTreeView's slots prop for item rendering. It demonstrates how to swap out standard tree items in favor of fully customized behavior and styling using RichTreeView's composable slot API. The snippet expects a dataset (myDataSet) and a CustomTreeItem implementation and outputs a rendered tree with advanced item customization.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7.md#2025-04-22_snippet_3

LANGUAGE: JSX
CODE:
```
<RichTreeView items={myDataSet} slots={{ item: CustomTreeItem }} />
```

----------------------------------------

TITLE: Extending Theme with Custom Info Palette
DESCRIPTION: Implementation of custom info palette in Joy UI theme including light and dark mode configurations
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { extendTheme } from '@mui/joy/styles';

const info = {
  50: '#FDF7FF',
  100: '#F4EAFF',
  200: '#E1CBFF',
  300: '#C69EFF',
  400: '#A374F9',
  500: '#814DDE',
  600: '#5F35AE',
  700: '#452382',
  800: '#301761',
  900: '#1D0A42'
};

const theme = extendTheme({
  colorSchemes: {
    light: {
      palette: {
        info: {
          ...info,
          plainColor: `var(--joy-palette-info-600)`,
          plainHoverBg: `var(--joy-palette-info-100)`,
          plainActiveBg: `var(--joy-palette-info-200)`,
          plainDisabledColor: `var(--joy-palette-info-200)`,
          outlinedColor: `var(--joy-palette-info-500)`,
          outlinedBorder: `var(--joy-palette-info-200)`,
          outlinedHoverBg: `var(--joy-palette-info-100)`,
          outlinedHoverBorder: `var(--joy-palette-info-300)`,
          outlinedActiveBg: `var(--joy-palette-info-200)`,
          outlinedDisabledColor: `var(--joy-palette-info-100)`,
          outlinedDisabledBorder: `var(--joy-palette-info-100)`,
          softColor: `var(--joy-palette-info-600)`,
          softBg: `var(--joy-palette-info-100)`,
          softHoverBg: `var(--joy-palette-info-200)`,
          softActiveBg: `var(--joy-palette-info-300)`,
          softDisabledColor: `var(--joy-palette-info-300)`,
          softDisabledBg: `var(--joy-paletteinfo}-50)`,
          solidColor: '#fff',
          solidBg: `var(--joy-palette-info-500)`,
          solidHoverBg: `var(--joy-palette-info-600)`,
          solidActiveBg: `var(--joy-palette-info-700)`,
          solidDisabledColor: `#fff`,
          solidDisabledBg: `var(--joy-palette-info-200)`
        }
      }
    },
    dark: {
      palette: {
        info: {
          ...info,
          plainColor: `var(--joy-palette-info-300)`,
          plainHoverBg: `var(--joy-palette-info-800)`,
          plainActiveBg: `var(--joy-palette-info-700)`,
          plainDisabledColor: `var(--joy-palette-info-800)`,
          outlinedColor: `var(--joy-palette-info-200)`,
          outlinedBorder: `var(--joy-palette-info-700)`,
          outlinedHoverBg: `var(--joy-palette-info-800)`,
          outlinedHoverBorder: `var(--joy-palette-info-600)`,
          outlinedActiveBg: `var(--joy-palette-info-900)`,
          outlinedDisabledColor: `var(--joy-palette-info-800)`,
          outlinedDisabledBorder: `var(--joy-palette-info-800)`,
          softColor: `var(--joy-palette-info-200)`,
          softBg: `var(--joy-palette-info-900)`,
          softHoverBg: `var(--joy-palette-info-800)`,
          softActiveBg: `var(--joy-palette-info-700)`,
          softDisabledColor: `var(--joy-palette-info-800)`,
          softDisabledBg: `var(--joy-palette-info-900)`,
          solidColor: `#fff`,
          solidBg: `var(--joy-palette-info-600)`,
          solidHoverBg: `var(--joy-palette-info-700)`,
          solidActiveBg: `var(--joy-palette-info-800)`,
          solidDisabledColor: `var(--joy-palette-info-700)`,
          solidDisabledBg: `var(--joy-palette-info-900)`
        }
      }
    }
  }
});
```

----------------------------------------

TITLE: Replacing TextField with Input Components in Joy UI
DESCRIPTION: This codemod replaces the TextField component with a composition of FormControl, FormLabel, Input, and FormHelperText components in Joy UI. It updates the props and structure to match the new component API.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_67

LANGUAGE: diff
CODE:
```
-import TextField from '@mui/joy/TextField';
+import FormControl from '@mui/joy/FormControl';
+import FormLabel from '@mui/joy/FormLabel';
+import FormHelperText from '@mui/joy/FormHelperText';
+import Input from '@mui/joy/Input';

-<TextField
-  id="Id"
-  label="Label"
-  placeholder="Placeholder"
-  helperText="Help!"
-  name="Name"
-  type="tel"
-  autoComplete="on"
-  autoFocus
-  error
-  required
-  fullWidth
-  defaultValue="DefaultValue"
-  size="sm"
-  color="primary"
-  variant="outlined"
-/>
+<FormControl
+  id="Id"
+  required
+  size="sm"
+  color="primary">
+  <FormLabel>
+    Label
+  </FormLabel>
+  <JoyInput
+    placeholder="Placeholder"
+    name="Name"
+    type="tel"
+    autoComplete="on"
+    autoFocus
+    error
+    fullWidth
+    defaultValue="DefaultValue"
+    variant="outlined" />
+  <FormHelperText id="Id-helper-text">
+    Help!
+  </FormHelperText>
+</FormControl>
```

----------------------------------------

TITLE: Implementing Custom Switch Component with MUI Base Hook in TypeScript
DESCRIPTION: This snippet demonstrates how to create a custom Switch component using the useSwitch hook from MUI Base. It shows how to apply the hook's returned props to custom elements, allowing for full control over the component's structure and styling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/introducing-base-ui.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
function MySwitch(props: UseSwitchParameters) {
  const { getInputProps, checked, disabled } = useSwitch(props);

  return (
    <span className={clsx('root', { checked, disabled })}>
      <span className="thumb" />
      <input className="input" {...getInputProps()} />
    </span>
  );
}
```

----------------------------------------

TITLE: Exclusive Selection with Toggle Button Group in React
DESCRIPTION: This example demonstrates how to use the Toggle Button Group component in exclusive selection mode. When the value provided is not an array, only one button can be selected at a time.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/toggle-button-group/toggle-button-group.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<ToggleButtonGroup spacing={{ xs: 0, md: 2, lg: 3 }}>…</ToggleButtonGroup>
```

----------------------------------------

TITLE: Unsupported Dynamic Styling (useState) - JS
DESCRIPTION: Example illustrating a dynamic style pattern using a React state variable (`color`) within the `sx` prop, which Pigment CSS cannot extract at build time and will cause an error.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_13

LANGUAGE: js
CODE:
```
import Card from '@mui/material/Card';

function App() {
  const [color, setColor] = useState('#000000');

  return (
    <Card
      sx={{
        color, // ❌ Pigment CSS cannot extract this style.
      }}
    />
  );
}
```

----------------------------------------

TITLE: Simplifying Grid Size and Offset for Single Breakpoint in React
DESCRIPTION: When size or offset values are consistent across all breakpoints, this snippet demonstrates how to simplify Grid props in v6 using a single value instead of an object.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_7

LANGUAGE: diff
CODE:
```
-<Grid xs={6} xsOffset={2}>
+<Grid size={6} offset={2}>
```

----------------------------------------

TITLE: Rendering InitColorSchemeScript in Next.js App Router Layout (TypeScript)
DESCRIPTION: Shows the placement of the `InitColorSchemeScript` component within the root `layout.tsx` file for a Next.js App Router application. It must be placed as the first child inside the `<body>` tag to execute before React renders the main application content, preventing dark mode flicker. Includes the basic structure of a `RootLayout` component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/init-color-scheme-script/init-color-scheme-script.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import InitColorSchemeScript from '@mui/material/InitColorSchemeScript';

export default function RootLayout(props: { children: React.ReactNode }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <InitColorSchemeScript />
        {props.children}
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: TypeScript Module Augmentation for Custom Breakpoints in Grid Component
DESCRIPTION: This code snippet shows how to extend the theme breakpoints interface in TypeScript to support custom breakpoint names. This allows you to use custom breakpoint names as responsive props in the Grid component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/grid/grid.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
declare module '@mui/system' {
  interface BreakpointOverrides {
    // Your custom breakpoints
    laptop: true;
    tablet: true;
    mobile: true;
    desktop: true;
    // Remove default breakpoints
    xs: false;
    sm: false;
    md: false;
    lg: false;
    xl: false;
  }
}
```

----------------------------------------

TITLE: Applying Scoped CSS Baseline in React with ScopedCssBaseline
DESCRIPTION: This code snippet shows how to use the ScopedCssBaseline component to apply baseline styles only to its children. This is useful for progressive migration or when global reset is not an option.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/css-baseline/css-baseline.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import * as React from 'react';
import ScopedCssBaseline from '@mui/material/ScopedCssBaseline';
import MyApp from './MyApp';

export default function MyApp() {
  return (
    <ScopedCssBaseline>
      {/* The rest of your application */}
      <MyApp />
    </ScopedCssBaseline>
  );
}
```

----------------------------------------

TITLE: Handling Snackbar Close Events
DESCRIPTION: Example of accessing the close reason in the onClose callback function. The reason can be 'timeout', 'clickaway', or 'escapeKeyDown'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/snackbar/snackbar.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
<Snackbar onClose={(event, reason) => {
  // reason will be one of: timeout, clickaway, escapeKeyDown
}}>
```

----------------------------------------

TITLE: Implementing Basic Timeline in React
DESCRIPTION: Demonstrates a basic timeline showing a list of events in chronological order.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
{"demo": "BasicTimeline.js"}
```

----------------------------------------

TITLE: Custom Columns Grid
DESCRIPTION: Example showing how to change the default number of columns (12) using the columns prop for different layout structures.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_9

LANGUAGE: jsx
CODE:
```
{"demo": "ColumnsGrid.js", "bg": true}
```

----------------------------------------

TITLE: Using Individual Style Functions from MUI System
DESCRIPTION: Demonstrates how to import and use specific style functions from MUI System independently for bundle size optimization. Shows combination of multiple style utilities to create custom styling logic.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/custom-components/custom-components.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { styled } from '@mui/system';
import { spacing, palette } from '@mui/system';

const Div = styled('div')(spacing, palette);

export default function CombiningStyleFunctionsDemo() {
  return (
    <Div
      p={2}
      bgcolor="primary.main"
      color="white"
    >
      Custom component using individual style functions
    </Div>
  );
}
```

----------------------------------------

TITLE: Initializing Basic Joy UI Sheet Component
DESCRIPTION: Sets up the basic Sheet component with CssVarsProvider for Joy UI styling support.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/tutorial/tutorial.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import * as React from 'react';
import { CssVarsProvider } from '@mui/joy/styles';
import Sheet from '@mui/joy/Sheet';

export default function App() {
  return (
    <CssVarsProvider>
      <Sheet variant="outlined">Welcome!</Sheet>
    </CssVarsProvider>
  );
}
```

----------------------------------------

TITLE: Installing RTL Style Plugin Dependencies
DESCRIPTION: Commands to install the necessary stylis and stylis-plugin-rtl packages for RTL styling with different package managers.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/right-to-left/right-to-left.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
npm install stylis stylis-plugin-rtl
```

LANGUAGE: bash
CODE:
```
pnpm add stylis stylis-plugin-rtl
```

LANGUAGE: bash
CODE:
```
yarn add stylis stylis-plugin-rtl
```

----------------------------------------

TITLE: Configuring Default Wave Animation for Skeleton Components
DESCRIPTION: Example of configuring theme defaults to set 'wave' animation as the default for all Skeleton components in a Joy UI application. Uses the CssVarsProvider and extendTheme utilities.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/skeleton/skeleton.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  components: {
    JoySkeleton: {
      defaultProps: {
        animation: 'wave',
      },
    },
  },
});

function App() {
  return (
    <CssVarsProvider theme={theme}>
      <Skeleton />{' '}
      {/* The Skeleton component will have the wave animation by default */}
    </CssVarsProvider>
  );
}
```

----------------------------------------

TITLE: Implementing Controlled Speed Dial in React
DESCRIPTION: Shows how to create a Speed Dial component with controlled open state using open/onOpen/onClose props.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/speed-dial/speed-dial.md#2025-04-22_snippet_2

LANGUAGE: JavaScript
CODE:
```
{"demo": "ControlledOpenSpeedDial.js"}
```

----------------------------------------

TITLE: Extending Component Variants in Joy UI
DESCRIPTION: Shows how to add custom variant options to Joy UI components. This example adds a 'glass' variant to the Sheet component with glassmorphism styling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
extendTheme({
  components: {
    JoySheet: {
      styleOverrides: {
        root: ({ ownerState, theme }) => ({
          ...(ownerState.variant === 'glass' && {
            color: theme.vars.palette.text.primary,
            background: 'rgba(255, 255, 255, 0.14)',
            backdropFilter: 'blur(5px)',
            border: '1px solid rgba(255, 255, 255, 0.3)',
            boxShadow: '0 4px 30px rgba(0, 0, 0, 0.1)',
          }),
        }),
      },
    },
  },
});
```

----------------------------------------

TITLE: Using theme.breakpoints.between Example
DESCRIPTION: Example of using theme.breakpoints.between to apply styles for screens between sm and md breakpoints.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_8

LANGUAGE: js
CODE:
```
const styles = (theme) => ({
  root: {
    backgroundColor: 'blue',
    // Match [sm, md)
    //       [600px, 900px)
    [theme.breakpoints.between('sm', 'md')]: {
      backgroundColor: 'red',
    },
  },
});
```

----------------------------------------

TITLE: Importing Card Component in React
DESCRIPTION: Basic import statement for the Joy UI Card component which serves as a surface-level container for grouping related components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/card/card.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Card from '@mui/joy/Card';
```

----------------------------------------

TITLE: Importing IconButton Component in Joy UI
DESCRIPTION: Basic import statement for using the IconButton component from Joy UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button/button.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
import IconButton from '@mui/joy/IconButton';
```

----------------------------------------

TITLE: Creating a Custom DataGrid Filter Panel Component in React (JSX)
DESCRIPTION: This JSX snippet defines a functional React component `CustomFilterPanel` that wraps the default `GridFilterPanel` from `@mui/x-data-grid`. It passes all received props (`{...props}`) down to the `GridFilterPanel` while also explicitly setting the `columnsSort` prop to `'asc'`, customizing the column sorting behavior within the filter panel. This demonstrates extending default slot components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/making-customizable-components.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
import { GridFilterPanel } from '@mui/x-data-grid';

function CustomFilterPanel(props) {
  return <GridFilterPanel {...props} columnsSort="asc" />;
}
```

----------------------------------------

TITLE: Implementing Inline Display in Material-UI
DESCRIPTION: Example of using the Box component with inline display property. This sets elements to display inline, allowing them to sit next to each other horizontally.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Box component="div" sx={{ display: 'inline' }}>inline</Box>
<Box component="div" sx={{ display: 'inline' }}>inline</Box>
```

----------------------------------------

TITLE: Adding Custom Margin to MUI Slider using JSX
DESCRIPTION: This code snippet demonstrates how to customize the vertical margin of the Material-UI Slider component using the sx prop in JSX. It sets a vertical margin ('my: 1') to add spacing above and below the Slider, enhancing layout flexibility within a React component. Requires @mui/material as a dependency and expects that the Slider component is imported from this library. No input is required; the output is a React element with the adjusted margin styling applied.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/blog/blog.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
// add margin: 8px 0px;
<Slider sx={{ my: 1 }} />
```

----------------------------------------

TITLE: Implementing Horizontal Linear Stepper in React
DESCRIPTION: This code demonstrates a horizontal linear stepper implementation. It uses the Stepper, Step, and StepLabel components to create a sequence of steps with labels. The stepper is controlled by the activeStep prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/steppers/steppers.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Stepper activeStep={activeStep}>
  {steps.map((label, index) => {
    const stepProps = {};
    const labelProps = {};
    if (isStepOptional(index)) {
      labelProps.optional = (
        <Typography variant="caption">Optional</Typography>
      );
    }
    if (isStepSkipped(index)) {
      stepProps.completed = false;
    }
    return (
      <Step key={label} {...stepProps}>
        <StepLabel {...labelProps}>{label}</StepLabel>
      </Step>
    );
  })}
</Stepper>
```

----------------------------------------

TITLE: Supporting Theme Default Props in Material UI Component
DESCRIPTION: This code snippet shows how to support theme default props in a custom Material UI component using the useThemeProps API.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { useThemeProps } from '@mui/material/styles';

const Stat = React.forwardRef(function Stat(inProps, ref) {
  const props = useThemeProps({ props: inProps, name: 'MuiStat' });
  const { value, unit, ...other } = props;

  return (
    <StatRoot ref={ref} {...other}>
      <StatValue>{value}</StatValue>
      <StatUnit>{unit}</StatUnit>
    </StatRoot>
  );
});
```

----------------------------------------

TITLE: Implementing Vertical Slider in React
DESCRIPTION: Demonstrates how to create a vertical slider by setting the 'orientation' prop to 'vertical' in Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_13

LANGUAGE: JSX
CODE:
```
{"demo": "VerticalSlider.js"}
```

----------------------------------------

TITLE: Fixing DOM Node Issues with Transition Components - Fragment Example
DESCRIPTION: Shows incorrect and correct ways to use React.Fragment with Material UI transition components like Fade. The transition components require a DOM node as their direct child.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/troubleshooting.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
// Ex. 1-1 ❌ This will cause an error because the Fragment is not a DOM node:
<Fade in>
  <React.Fragment>
    <CustomComponent />
  </React.Fragment>
</Fade>
```

LANGUAGE: jsx
CODE:
```
// Ex. 1-2 ✅ Add a DOM node such as this div:
<Fade in>
  <div>
    <CustomComponent />
  </div>
</Fade>
```

----------------------------------------

TITLE: Applying Box Shadows in Material-UI (JSX)
DESCRIPTION: This snippet demonstrates how to apply different levels of box shadows to Box components in Material-UI. It shows four levels of elevation, from 0 to 3.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/shadows/shadows.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Box sx={{ boxShadow: 0 }}>…
<Box sx={{ boxShadow: 1 }}>…
<Box sx={{ boxShadow: 2 }}>…
<Box sx={{ boxShadow: 3 }}>…
```

----------------------------------------

TITLE: Setting Border Radius with Material-UI Box Component
DESCRIPTION: Examples of applying different border radius values using the Box component with the sx prop. Shows percentage, theme-based, and explicit pixel values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/borders/borders.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<Box sx={{ borderRadius: '50%' }}>…
<Box sx={{ borderRadius: 1 }}>… // theme.shape.borderRadius * 1
<Box sx={{ borderRadius: '16px' }}>…
```

----------------------------------------

TITLE: Adding RtlProvider in React App (TSX)
DESCRIPTION: Shows how to wrap the application root with the `RtlProvider` component from `@mui/material-pigment-css/RtlProvider`. This component provides context about the current RTL direction to descendant components. Includes an example of managing the `rtl` state.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_34

LANGUAGE: diff
CODE:
```
+ import RtlProvider from '@mui/material-pigment-css/RtlProvider';

 function App() {
+  const [rtl, setRtl] = React.useState(false);
   return (
+    <RtlProvider value={rtl}>
       {/* Your app */}
+    </RtlProvider>
   )
 }
```

----------------------------------------

TITLE: Basic Box Spacing Example in Material-UI
DESCRIPTION: Basic example of using padding and margin spacing utilities with the Box component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/spacing/spacing.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
<Box sx={{ p: 1 }}>…
<Box sx={{ m: 1 }}>…
<Box sx={{ p: 2 }}>…
```

----------------------------------------

TITLE: Replacing `innerRef` with `ref` Prop in JavaScript/JSX
DESCRIPTION: Demonstrates replacing the `innerRef` prop with the standard `ref` prop when using components wrapped with `withStyles` in MUI v5. Refs are now automatically forwarded, making the `innerRef` prop obsolete.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_35

LANGUAGE: diff
CODE:
```
  import * as React from 'react';
  import { withStyles } from '@mui/styles';

  const MyComponent = withStyles({
    root: {
      backgroundColor: 'red',
    },
  })(({ classes }) => <div className={classes.root} />);

  function MyOtherComponent(props) {
    const ref = React.useRef();
-  return <MyComponent innerRef={ref} />;
+  return <MyComponent ref={ref} />;
  }
```

----------------------------------------

TITLE: Customizing transition durations in MUI theme
DESCRIPTION: Example of how to customize transition duration values in the Material-UI theme. Shows all default duration values in milliseconds that can be overridden or extended.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/transitions/transitions.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
const theme = createTheme({
  transitions: {
    duration: {
      shortest: 150,
      shorter: 200,
      short: 250,
      // most basic recommended timing
      standard: 300,
      // this is to be used in complex animations
      complex: 375,
      // recommended when something is entering screen
      enteringScreen: 225,
      // recommended when something is leaving screen
      leavingScreen: 195,
    },
  },
});
```

----------------------------------------

TITLE: Implementing Typography Components
DESCRIPTION: Shows how to use Typography components for consistent text hierarchy with different levels.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/tutorial/tutorial.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<div>
  <Typography level="h4" component="h1">
    Welcome!
  </Typography>
  <Typography level="body-sm">Sign in to continue.</Typography>
</div>
```

----------------------------------------

TITLE: Basic Button Group Usage
DESCRIPTION: Shows basic implementation of ButtonGroup component wrapping Button and IconButton components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button-group/button-group.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
{"demo": "BasicButtonGroup.js"}
```

----------------------------------------

TITLE: Emotion RTL Cache Configuration
DESCRIPTION: Setup of RTL cache provider for Emotion styling with stylis-plugin-rtl integration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/right-to-left/right-to-left.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
import { CacheProvider } from '@emotion/react';
import createCache from '@emotion/cache';
import { prefixer } from 'stylis';
import rtlPlugin from 'stylis-plugin-rtl';

// Create rtl cache
const rtlCache = createCache({
  key: 'muirtl',
  stylisPlugins: [prefixer, rtlPlugin],
});

function Rtl(props) {
  return <CacheProvider value={rtlCache}>{props.children}</CacheProvider>;
}
```

----------------------------------------

TITLE: Tooltip Button Group Integration
DESCRIPTION: Example showing ButtonGroup implementation with Tooltip components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button-group/button-group.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
{"demo": "TooltipButtonGroup.js"}
```

----------------------------------------

TITLE: Fixing SX Prop TypeScript Issues with 'as const'
DESCRIPTION: This solution fixes the type widening issue by using TypeScript's 'as const' assertion. This narrows the type of flexDirection from string to the literal 'column', making it compatible with the SX prop's expected type.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_22

LANGUAGE: typescript
CODE:
```
const style = {
  flexDirection: 'column',
} as const;

export default function App() {
  return <Button sx={style}>Example</Button>;
}
```

----------------------------------------

TITLE: Disabling Global Transitions in Material UI
DESCRIPTION: Method to disable all transitions globally in Material UI applications through theme configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { createTheme } from '@mui/material';

const theme = createTheme({
  transitions: {
    // So `transition: none;` gets applied everywhere
    create: () => 'none',
  },
});
```

----------------------------------------

TITLE: Adding Icons to React Breadcrumbs
DESCRIPTION: Shows how to incorporate icons into Breadcrumbs for enhanced visual representation of navigation hierarchy.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_3

LANGUAGE: JSX
CODE:
```
{"demo": "IconBreadcrumbs.js"}
```

----------------------------------------

TITLE: Fixing Theme-Related Errors with ThemeProvider in Material UI v5
DESCRIPTION: Demonstrates the correct way to structure components using styles to avoid errors when a component tries to access theme properties outside of a ThemeProvider context.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/troubleshooting.md#2025-04-22_snippet_7

LANGUAGE: js
CODE:
```
function AppContent(props) {
  const classes = useStyles(); // ✅ This is safe because it is called inside ThemeProvider
  return <Card className={classes.root}>...</Card>;
}

function App(props) {
  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <AppContent {...props} />
    </ThemeProvider>
  );
}
```

----------------------------------------

TITLE: Assembling the Stat Component in Material UI
DESCRIPTION: This code snippet shows how to assemble the Stat component using the previously created slots. It includes the component structure and basic props handling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
// /path/to/Stat.js
import * as React from 'react';

const StatRoot = styled('div', {
  name: 'MuiStat',
  slot: 'root',
})(…);

const StatValue = styled('div', {
  name: 'MuiStat',
  slot: 'value',
})(…);

const StatUnit = styled('div', {
  name: 'MuiStat',
  slot: 'unit',
})(…);

const Stat = React.forwardRef(function Stat(props, ref) {
  const { value, unit, ...other } = props;

  return (
    <StatRoot ref={ref} {...other}>
      <StatValue>{value}</StatValue>
      <StatUnit>{unit}</StatUnit>
    </StatRoot>
  );
});

export default Stat;
```

----------------------------------------

TITLE: Implementing Continuous Slider in React
DESCRIPTION: Demonstrates how to create a basic continuous slider component using Material-UI in React. This slider allows users to select a value along a subjective range.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
{"demo": "ContinuousSlider.js"}
```

----------------------------------------

TITLE: Accessible Accordion Implementation
DESCRIPTION: Example showing proper accessibility attributes for Accordion components following WAI-ARIA guidelines.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/accordion/accordion.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<Accordion>
  <AccordionSummary id="panel-header" aria-controls="panel-content">
    Header
  </AccordionSummary>
  <AccordionDetails>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
  </AccordionDetails>
</Accordion>
```

----------------------------------------

TITLE: Implementing Slider with Input Field in React
DESCRIPTION: Demonstrates how to create a slider with an input field that allows setting a discrete value in Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_9

LANGUAGE: JSX
CODE:
```
{"demo": "InputSlider.js"}
```

----------------------------------------

TITLE: Implementing Visually Hidden Elements with Material UI Utils
DESCRIPTION: Demonstrates how to use the visuallyHidden utility from MUI Utils to hide elements visually while keeping them accessible to screen readers. This approach works when you don't have strict Content Security Policy (CSP) restrictions.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/screen-readers/screen-readers.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import { visuallyHidden } from '@mui/utils';

<div style={visuallyHidden}>about how to visually hide elements</div>;
```

----------------------------------------

TITLE: Configuring StyledEngineProvider for Proper CSS Injection Order
DESCRIPTION: Example showing how to configure StyledEngineProvider with injectFirst option to ensure proper CSS injection order when using both Emotion and JSS styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_8

LANGUAGE: jsx
CODE:
```
import * as React from 'react';
import { StyledEngineProvider } from '@mui/material/styles';

export default function GlobalCssPriority() {
  return (
    {/* Inject Emotion before JSS */}
    <StyledEngineProvider injectFirst>
      {/* Your component tree. Now you can override Material UI's styles. */}
    </StyledEngineProvider>
  );
}
```

----------------------------------------

TITLE: Configuring Global Variant Tokens in Joy UI Theme (JavaScript)
DESCRIPTION: This snippet demonstrates how to define custom tokens for the 'solid' variant in the Joy UI theme configuration. It shows the structure for both light and dark color schemes, focusing on the primary and neutral palettes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/main-features/global-variants/global-variants.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
{
  colorSchemes: {
    light: {
      palette: {
        primary: {
          solidBg: 'var(--joy-palette-primary-600)',       // the initial background
          solidColor: '#fff',                              // the initial color
          solidHoverBg: 'var(--joy-palette-primary-700)',  // the :hover background
          solidActiveBg: 'var(--joy-palette-primary-800)', // the :active background
          // ...other tokens
        },
        neutral: {
          solidBg: 'var(--joy-palette-primary-700)',
          solidColor: '#fff',
          solidHoverBg: 'var(--joy-palette-primary-800)',
          solidActiveBg: 'var(--joy-palette-primary-900)',
          // ...other tokens
        },
        // ...other palettes
      }
    },
    dark: {
      palette: {
        // similar structure but different values
      }
    },
  }
}
```

----------------------------------------

TITLE: Basic Linear Progress Implementation in React
DESCRIPTION: Shows the basic implementation of the LinearProgress component from MUI Joy UI. This is the minimal setup required to use the component in a React application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/linear-progress/linear-progress.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import LinearProgress from '@mui/joy/LinearProgress';

export default function MyApp() {
  return <LinearProgress />;
}
```

----------------------------------------

TITLE: TypeScript Interface Definition for Joy UI Component
DESCRIPTION: Defines TypeScript interfaces for component props and ownerState, including proper type definitions for theme integration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
interface StatProps {
  value: number | string;
  unit: string;
  variant?: 'outlined';
}

interface StatOwnerState extends StatProps {
  // …key value pairs for the internal state that you want to style the slot
  // but don't want to expose to the users
}

declare module '@mui/joy/styles' {
  interface Components {
    JoyStat?: {
      defaultProps?: Partial<StatProps>;
      styleOverrides?: StyleOverrides<StatProps, StatOwnerState, Theme>;
    };
  }
}
```

----------------------------------------

TITLE: Extending Component Colors in Joy UI
DESCRIPTION: Shows how to add custom colors to a component beyond the built-in color options. This example adds a 'secondary' color option to Button components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
extendTheme({
  components: {
    JoyButton: {
      styleOverrides: {
        root: ({ ownerState, theme }) => ({
          ...(ownerState.color === 'secondary' && {
            color: theme.vars.palette.text.secondary,
            backgroundColor: theme.vars.palette.background.level1,
          }),
        }),
      },
    },
  },
});
```

----------------------------------------

TITLE: Implementing Zero Value Display in Badge
DESCRIPTION: Shows how to handle zero values in badges using the showZero prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_4

LANGUAGE: JSX
CODE:
```
ShowZeroBadge.js
```

----------------------------------------

TITLE: Preventing Clickaway Closure for Snackbar
DESCRIPTION: Code pattern to prevent a Snackbar from closing when a user clicks outside of it by checking the close reason and returning early if it's 'clickaway'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/snackbar/snackbar.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
<Snackbar
  onClose={(event, reason) => {
    if (reason === 'clickaway') {
      return;
    }
  }}
>
```

----------------------------------------

TITLE: Adding DefaultPropsProvider in React App (TSX)
DESCRIPTION: Demonstrates wrapping the application root with `DefaultPropsProvider` and providing default props for specific Material UI components (`MuiButtonBase`, `MuiSelect`). This moves default prop management outside the theme configuration. Requires importing `DefaultPropsProvider` from '@mui/material/DefaultPropsProvider'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_19

LANGUAGE: diff
CODE:
```
+ import DefaultPropsProvider from '@mui/material/DefaultPropsProvider';

  function App() {
    return (
+     <DefaultPropsProvider value={{
+       MuiButtonBase: {
+         disableRipple: true,
+       },
+       MuiSelect: {
+         IconComponent: DropdownIcon,
+       },
+     }}>
        {/* Your app */}
+     </DefaultPropsProvider>
    );
  }
```

----------------------------------------

TITLE: TypeScript Interface Augmentation for Custom Sizes in Joy UI
DESCRIPTION: Demonstrates how to add type safety for custom size values using TypeScript module augmentation, enabling proper type checking with custom sizes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
// This part could be declared in your theme file
declare module '@mui/joy/Button' {
  interface ButtonPropsSizeOverrides {
    xs: true;
    xl: true;
  }
}

// typed-safe
<Button size="xs" />
<Button size="xl" />
```

----------------------------------------

TITLE: Basic Slider Implementation in Joy UI
DESCRIPTION: Demonstrates the basic usage of the Slider component from Joy UI. The example shows how to import the component and implement a slider with a default value of 3 and a maximum value of 10.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/slider/slider.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Slider from '@mui/joy/Slider';

export default function MyApp() {
  return <Slider defaultValue={3} max={10} />;
}
```

----------------------------------------

TITLE: Customizing InitColorSchemeScript with Arbitrary Attribute Placeholder (TypeScript)
DESCRIPTION: Demonstrates using `%s` as a placeholder within the `attribute` prop of `InitColorSchemeScript`. This allows applying more complex attribute patterns like `[data-theme='%s']` or `.mode-%s`, where `%s` will be replaced by the determined color mode (e.g., 'dark'). This requires the theme's `colorSchemeSelector` to match the pattern.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/init-color-scheme-script/init-color-scheme-script.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
<InitColorSchemeScript attribute="[data-theme='%s']" /> // <html data-theme="dark">
<InitColorSchemeScript attribute=".mode-%s" /> // <html class="mode-dark">
```

----------------------------------------

TITLE: Configuring Font Size in Material-UI with JSX
DESCRIPTION: Shows how to set font size using the Box component in Material-UI. It demonstrates using theme values, specific component sizes, and pixel values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
<Box sx={{ fontSize: 'default' }}>…  // theme.typography.fontSize
<Box sx={{ fontSize: 'h6.fontSize' }}>…
<Box sx={{ fontSize: 16 }}>…
```

----------------------------------------

TITLE: Styling Components with Variants
DESCRIPTION: Example of creating styled components with variant-based conditional styling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
import { styled } from '@pigment-css/react';

const Heading = styled('div')({
  fontSize: '2rem',
  color: '#9FADBC',
  fontWeight: 'bold',
  margin: '1rem',
  variants: [
    {
      props: { variant: 'success' },
      style: { color: '#23AD79' },
    },
    {
      props: { size: 'small' },
      style: { fontSize: '1.5rem' },
    },
  ],
});
```

----------------------------------------

TITLE: Adding Prepend Option to Emotion Cache in React
DESCRIPTION: Adds 'prepend: true' to Emotion 'createCache' configuration. This codemod updates the Emotion cache configuration to ensure proper style injection order in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_81

LANGUAGE: diff
CODE:
```
 const cache = emotionCreateCache({
   key: 'css',
+  prepend: true,
 });
```

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/create-theme <path>
```

----------------------------------------

TITLE: Define Tree View Selection Propagation Config (TypeScript)
DESCRIPTION: This TypeScript type definition outlines the structure for configuring automatic parent/child selection propagation in the MUI X Rich Tree View. It defines optional `descendants` and `parents` boolean properties to control whether selecting a node propagates the selection to its children or ancestors, respectively. This configuration is used to customize the Tree View's selection behavior.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v8.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
type TreeViewSelectionPropagation = {
  descendants?: boolean; // default: false
  parents?: boolean; // default: false
};
```

----------------------------------------

TITLE: Creating MUI CSS Variables Provider (JavaScript)
DESCRIPTION: This JavaScript snippet uses the `unstable_createCssVarsProvider` function from `@mui/system` to create the `CssVarsProvider` component and the `useColorScheme` hook. It configures the provider with a default color scheme definition and the custom theme object created previously, allowing theme variables to be consumed and color modes to be managed within the application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/experimental-api/css-theme-variables/css-theme-variables.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
// CssVarsProvider.js
import { unstable_createCssVarsProvider as createCssVarsProvider } from '@mui/system';

const { CssVarsProvider, useColorScheme } = createCssVarsProvider({
  defaultColorScheme: {
    light: 'light',
    dark: 'dark',
  },
  theme: myCustomDefaultTheme,
});

export { CssVarsProvider, useColorScheme };
```

----------------------------------------

TITLE: Basic FAB Implementation in React
DESCRIPTION: Demonstrates the basic implementation of Floating Action Buttons with different variants and icons.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/floating-action-button/floating-action-button.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
FloatingActionButtons.js
```

----------------------------------------

TITLE: Implementing Callback in styleOverrides for Material UI Theme
DESCRIPTION: This snippet demonstrates how to use a callback function in the styleOverrides of a Material UI theme to dynamically style components based on props and theme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/callback-support-in-style-overrides.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import { ThemeProvider, createTheme } from '@mui/material/styles';

<ThemeProvider
  theme={createTheme({
    components: {
      MuiChip: {
        styleOverrides: {
          // you can now use the theme without creating the initial theme!
          root: ({ ownerState, theme }) => ({
            padding: {
              small: '8px 4px',
              medium: '12px 6px',
              large: '16px 8px',
            }[ownerState.size],
            ...(ownerState.variant === 'outlined' && {
              borderWidth: '2px',
              ...(ownerState.variant === 'primary' && {
                borderColor: theme.palette.primary.light,
              }),
            }),
          }),
          label: {
            padding: 0,
          },
        },
      },
    },
  })}
>
  ...your app
</ThemeProvider>;
```

----------------------------------------

TITLE: Custom Numeric Spacing Configuration
DESCRIPTION: Shows how to customize spacing by providing a number value to modify the base spacing unit
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/spacing/spacing.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
const theme = createTheme({
  spacing: 4,
});

theme.spacing(2); // `${4 * 2}px` = '8px'
```

----------------------------------------

TITLE: Implementing Dynamic Button Variants with Material-UI Theme in TypeScript
DESCRIPTION: This snippet demonstrates how to add new variants to Material-UI components using the theme. It shows the creation of a 'dashed' variant for the Button component, including type safety declarations.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q3-update.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
// Define the style that should be applied for specific props.
const theme = createMuiTheme({
  components: {
    MuiButton: {
      variants: [
        {
          props: { variant: 'dashed', color: 'secondary' },
          styles: {
            border: `4px dashed ${red[500]}`,
          },
        },
      ],
    },
  },
});

// Optionally retain type safety:
declare module '@mui/material/Button' {
  interface ButtonPropsVariantOverrides {
    dashed: true;
  }
}

// Enjoy!
<Button variant="dashed" color="secondary" />;
```

----------------------------------------

TITLE: Installing Material Icons with NPM
DESCRIPTION: Command to install Material Icons and Material UI packages using NPM, with webpack configuration for aliasing.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/icon-libraries/icon-libraries.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm install @mui/icons-material @mui/material
```

LANGUAGE: diff
CODE:
```
 module.exports = {
   //...
+  resolve: {
+    alias: {
+      '@mui/material': '@mui/joy',
+    },
+  },
 };
```

LANGUAGE: diff
CODE:
```
 {
   "compilerOptions": {
+    "paths": {
+      "@mui/material": ["./node_modules/@mui/joy"]
+    }
   }
 }
```

----------------------------------------

TITLE: Migrating Tree View Imports in JavaScript
DESCRIPTION: This snippet demonstrates how to update import statements when migrating from @mui/lab to @mui/x-tree-view for the TreeView and TreeItem components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/lab-tree-view-to-mui-x.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
-import TreeView from '@mui/lab/TreeView';
-import TreeItem from '@mui/lab/TreeItem';
+import { TreeView } from '@mui/x-tree-view/TreeView';
+import { TreeItem } from '@mui/x-tree-view/TreeItem';
```

LANGUAGE: javascript
CODE:
```
-import { TreeView, TreeItem } from '@mui/lab';
+import { TreeView, TreeItem } from '@mui/x-tree-view';
```

----------------------------------------

TITLE: Updating Grid Component Import
DESCRIPTION: Changes required to import the stabilized Grid component without the Unstable_ prefix.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/migrating-to-v6/migrating-to-v6.md#2025-04-22_snippet_1

LANGUAGE: diff
CODE:
```
- import { Unstable_Grid as Grid } from '@mui/system';
+ import { Grid } from '@mui/system';
```

LANGUAGE: diff
CODE:
```
- import Grid from '@mui/system/Unstable_Grid';
+ import Grid from '@mui/system/Grid';
```

----------------------------------------

TITLE: Configuring Warning Color Palette in Joy UI Theme
DESCRIPTION: Defines a warning color palette with shades from 50 to 900 and configures component states for light and dark themes. This includes styling for plain, outlined, soft, and solid variant states.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
const warning = {
  50: '#FFF8C5',
  100: '#FAE17D',
  200: '#EAC54F',
  300: '#D4A72C',
  400: '#BF8700',
  500: '#9A6700',
  600: '#7D4E00',
  700: '#633C01',
  800: '#4D2D00',
  900: '#3B2300',
};

extendTheme({
  colorSchemes: {
    light: {
      palette: {
        warning: {
          ...warning,
          plainColor: `var(--joy-palette-warning-800)`,
          plainHoverBg: `var(--joy-palette-warning-50)`,
          plainActiveBg: `var(--joy-palette-warning-200)`,
          plainDisabledColor: `var(--joy-palette-warning-200)`,

          outlinedColor: `var(--joy-palette-warning-800)`,
          outlinedBorder: `var(--joy-palette-warning-200)`,
          outlinedHoverBg: `var(--joy-palette-warning-50)`,
          outlinedHoverBorder: `var(--joy-palette-warning-300)`,
          outlinedActiveBg: `var(--joy-palette-warning-200)`,
          outlinedDisabledColor: `var(--joy-palette-warning-100)`,
          outlinedDisabledBorder: `var(--joy-palette-warning-100)`,

          softColor: `var(--joy-palette-warning-800)`,
          softBg: `var(--joy-palette-warning-50)`,
          softHoverBg: `var(--joy-palette-warning-100)`,
          softActiveBg: `var(--joy-palette-warning-200)`,
          softDisabledColor: `var(--joy-palette-warning-200)`,
          softDisabledBg: `var(--joy-palette-warning-50)`,

          solidColor: `var(--joy-palette-warning-800)`,
          solidBg: `var(--joy-palette-warning-200)`,
          solidHoverBg: `var(--joy-palette-warning-300)`,
          solidActiveBg: `var(--joy-palette-warning-400)`,
          solidDisabledColor: `var(--joy-palette-warning-200)`,
          solidDisabledBg: `var(--joy-palette-warning-50)`,
        },
      },
    },
    dark: {
      palette: {
        warning: {
          ...warning,
          plainColor: `var(--joy-palette-warning-300)`,
          plainHoverBg: `var(--joy-palette-warning-800)`,
          plainActiveBg: `var(--joy-palette-warning-700)`,
          plainDisabledColor: `var(--joy-palette-warning-800)`,

          outlinedColor: `var(--joy-palette-warning-200)`,
          outlinedBorder: `var(--joy-palette-warning-700)`,
          outlinedHoverBg: `var(--joy-palette-warning-800)`,
          outlinedHoverBorder: `var(--joy-palette-warning-600)`,
          outlinedActiveBg: `var(--joy-palette-warning-900)`,
          outlinedDisabledColor: `var(--joy-palette-warning-800)`,
          outlinedDisabledBorder: `var(--joy-palette-warning-800)`,

          softColor: `var(--joy-palette-warning-200)`,
          softBg: `var(--joy-palette-warning-900)`,
          softHoverBg: `var(--joy-palette-warning-800)`,
          softActiveBg: `var(--joy-palette-warning-700)`,
          softDisabledColor: `var(--joy-palette-warning-800)`,
          softDisabledBg: `var(--joy-palette-warning-900)`,

          solidColor: `var(--joy-palette-common-black)`,
          solidBg: `var(--joy-palette-warning-300)`,
          solidHoverBg: `var(--joy-palette-warning-400)`,
          solidActiveBg: `var(--joy-palette-warning-500)`,
          solidDisabledColor: `var(--joy-palette-warning-700)`,
          solidDisabledBg: `var(--joy-palette-warning-900)`,
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Customizing the DataGrid Toolbar with Styled Components - React JSX
DESCRIPTION: This example demonstrates how to customize the DataGrid toolbar in previous MUI X versions by using styled-components. The custom GridToolbarContainerStyled applies extra padding only when the component has the .MuiDataGrid-toolbarContainer class, due to higher CSS specificity requirements. Dependencies include MUI X's DataGrid and styling utilities, and the example expects a React environment. The App component renders a DataGrid with the custom toolbar in a styled container, and key props include components={{ Toolbar: MyCustomToolbar }} to override the default toolbar.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v5.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
const GridToolbarContainerStyled = styled(GridToolbarContainer)({
  '&.MuiDataGrid-toolbarContainer': {
    padding: 40,
  },
});

function MyCustomToolbar() {
  return (
    <GridToolbarContainerStyled>My custom toolbar</GridToolbarContainerStyled>
  );
}

export default function App() {
  return (
    <div style={{ height: 400, width: '100%' }}>
      <DataGrid components={{ Toolbar: MyCustomToolbar }} />
    </div>
  );
}
```

----------------------------------------

TITLE: RTL Style Override
DESCRIPTION: Example of opting out of RTL transformation for specific styles using the @noflip directive.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/right-to-left/right-to-left.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
const LeftToRightTextInRtlApp = styled('div')`
  /* @noflip */
  text-align: left;
`;
```

----------------------------------------

TITLE: Configuring Danger Color Palette Styles in Joy UI Theme
DESCRIPTION: Defines CSS variables for danger color palette in dark theme. This includes styling for outlined, soft, and solid variant states in different interaction modes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
          outlinedDisabledColor: `var(--joy-palette-danger-800)`,
          outlinedDisabledBorder: `var(--joy-palette-danger-800)`,

          softColor: `var(--joy-palette-danger-200)`,
          softBg: `var(--joy-palette-danger-900)`,
          softHoverBg: `var(--joy-palette-danger-800)`,
          softActiveBg: `var(--joy-palette-danger-700)`,
          softDisabledColor: `var(--joy-palette-danger-800)`,
          softDisabledBg: `var(--joy-palette-danger-900)`,

          solidColor: `#fff`,
          solidBg: `var(--joy-palette-danger-600)`,
          solidHoverBg: `var(--joy-palette-danger-700)`,
          solidActiveBg: `var(--joy-palette-danger-800)`,
          solidDisabledColor: `var(--joy-palette-danger-700)`,
          solidDisabledBg: `var(--joy-palette-danger-900)`,
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Setting up Joy UI and Material UI Providers
DESCRIPTION: Demonstrates how to properly nest Joy UI's CssVarsProvider inside Material UI's ThemeProvider using THEME_ID for theme separation. Shows the basic provider setup with CssBaseline component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/material-ui/material-ui.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import {
  createTheme,
  ThemeProvider,
  THEME_ID as MATERIAL_THEME_ID,
} from '@mui/material/styles';
import { CssVarsProvider as JoyCssVarsProvider } from '@mui/joy/styles';
import CssBaseline from '@mui/material/CssBaseline';

const materialTheme = createTheme();

export default function App() {
  return (
    <ThemeProvider theme={{ [MATERIAL_THEME_ID]: materialTheme }}>
      <JoyCssVarsProvider>
        <CssBaseline enableColorScheme />
        ...Material UI and Joy UI components
      </JoyCssVarsProvider>
    </ThemeProvider>
  );
}
```

----------------------------------------

TITLE: Creating Custom Filter Options for Autocomplete
DESCRIPTION: Demonstrates using the createFilterOptions factory to create custom filtering behavior. This example configures the filter to match from the start of options.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
const filterOptions = createFilterOptions({
  matchFrom: 'start',
  stringify: (option) => option.title,
});

<Autocomplete filterOptions={filterOptions} />;
```

----------------------------------------

TITLE: Customizing MUI Autocomplete Listbox Variant using slotProps in JavaScript (JSX)
DESCRIPTION: Shows how to apply a different style variant specifically to the listbox part of the MUI `Autocomplete` component. While the main component uses the `plain` variant, the `slotProps` property is used to override the `listbox` slot's variant to `plain` (demonstrating the capability, though using the same variant here).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
<Autocomplete
  variant="plain"
  slotProps={{
    listbox: {
      variant: 'plain',
    }
  }}
>

```

----------------------------------------

TITLE: Using Radio Group Hook
DESCRIPTION: Example of using the useRadioGroup hook for advanced customization of radio group components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/radio-buttons/radio-buttons.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import { useRadioGroup } from '@mui/material/RadioGroup';
```

----------------------------------------

TITLE: Configuring Fade Transition with unmountOnExit
DESCRIPTION: Example showing how to optimize performance by enabling the unmountOnExit prop on a Fade transition component. This prevents mounting of expensive component trees when not visible.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/transitions/transitions.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Fade in={false} unmountOnExit />
```

----------------------------------------

TITLE: Basic React Popper Implementation
DESCRIPTION: Demonstrates basic usage of the Popper component with a button trigger and simple positioned content.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/popper/popper.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import * as React from 'react';
import Box from '@mui/material/Box';
import Popper from '@mui/material/Popper';

export default function SimplePopper() {
  const [anchorEl, setAnchorEl] = React.useState(null);

  const handleClick = (event) => {
    setAnchorEl(anchorEl ? null : event.currentTarget);
  };

  const open = Boolean(anchorEl);
  const id = open ? 'simple-popper' : undefined;

  return (
    <div>
      <button aria-describedby={id} type="button" onClick={handleClick}>
        Toggle Popper
      </button>
      <Popper id={id} open={open} anchorEl={anchorEl}>
        <Box sx={{ border: 1, p: 1, bgcolor: 'background.paper' }}>
          The content of the Popper.
        </Box>
      </Popper>
    </div>
  );
}
```

----------------------------------------

TITLE: Using theme.transitions.create() method in JavaScript
DESCRIPTION: Example showing how to use the theme.transitions.create() helper to create transitions for multiple CSS properties. This helper ensures consistent transition behavior throughout your UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/transitions/transitions.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
theme.transitions.create(['background-color', 'transform']);
```

----------------------------------------

TITLE: Enabling CSS Cascade Layers in _app.tsx for Next.js Pages Router
DESCRIPTION: Diff showing how to enable CSS cascade layers in the _app.tsx file for Material UI with Next.js Pages Router.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_15

LANGUAGE: diff
CODE:
```
+import { createEmotionCache } from '@mui/material-nextjs/v15-pagesRouter';
  ...

const clientCache = createEmotionCache({ enableCssLayer: true });

+ export default function MyApp({ emotionCache = clientCache }) {
    return (
+     <AppCacheProvider emotionCache={emotionCache}>
        <Head>
          ...
        </Head>
        ...
      </AppCacheProvider>
    );
  }
```

----------------------------------------

TITLE: Customizing Input Focus Ring with CSS Variables
DESCRIPTION: Example of using CSS variables to control the appearance of the input's focus ring, including position, size, and color.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/input/input.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Input sx={{ '&:focus-within::before': { boxShadow: '...your custom value' } }} />
```

----------------------------------------

TITLE: Implementing Clickable Steps in React Stepper
DESCRIPTION: This code shows how to make steps clickable by using the StepButton component. It allows users to navigate between steps by clicking on them, enhancing interactivity.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stepper/stepper.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<Stepper>
  <Step>
    <StepButton>Select campaign settings</StepButton>
  </Step>
  <Step>
    <StepButton>Create an ad group</StepButton>
  </Step>
  <Step>
    <StepButton>Create an ad</StepButton>
  </Step>
</Stepper>
```

----------------------------------------

TITLE: Defining a Dataset for RichTreeView - React JSX
DESCRIPTION: This snippet demonstrates how to define a hierarchical data structure in JavaScript suitable for use with the RichTreeView component in MUI X. The example shows an array of nodes each identified by a unique 'id', a 'label', and an optional 'children' array for nesting. The required input structure enables the RichTreeView to recursively generate tree nodes based on this dataset. No external dependencies are needed other than React and the MUI X RichTreeView component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
const myDataSet = [
  {
    id: 'node-1',
    label: 'Node 1',
    children: [
      { id: 'node-1-1', label: 'Node 1.1' },
      { id: 'node-1-2', label: 'Node 1.2' },
    ],
  },
  {
    id: 'node-2',
    label: 'Node 2',
  },
];
```

----------------------------------------

TITLE: Creating Slider with Minimum Distance in React
DESCRIPTION: Shows how to enforce a minimum distance between values in a range slider using the 'onChange' event handler in Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_8

LANGUAGE: JSX
CODE:
```
{"demo": "MinimumDistanceSlider.js"}
```

----------------------------------------

TITLE: Restricting Slider Values in React
DESCRIPTION: Demonstrates how to restrict selectable values to those provided with the 'marks' prop by setting 'step' to null in Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_5

LANGUAGE: JSX
CODE:
```
{"demo": "DiscreteSliderValues.js"}
```

----------------------------------------

TITLE: Migrating from createMuiTheme to createTheme
DESCRIPTION: Shows the required import change when migrating from the deprecated createMuiTheme function to the current createTheme function.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_15

LANGUAGE: diff
CODE:
```
-import { createMuiTheme } from '@mui/material/styles';
+import { createTheme } from '@mui/material/styles';
```

----------------------------------------

TITLE: Creating a Vertical Linear Stepper in React
DESCRIPTION: This snippet shows how to implement a vertical linear stepper. It uses the Stepper component with a vertical orientation, and includes Step, StepLabel, and StepContent components to display step information vertically.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/steppers/steppers.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Stepper activeStep={activeStep} orientation="vertical">
  {steps.map((step, index) => (
    <Step key={step.label}>
      <StepLabel
        optional={
          index === 2 ? (
            <Typography variant="caption">Last step</Typography>
          ) : null
        }
      >
        {step.label}
      </StepLabel>
      <StepContent>
        <Typography>{step.description}</Typography>
        <Box sx={{ mb: 2 }}>
          <div>
            <Button
              variant="contained"
              onClick={handleNext}
              sx={{ mt: 1, mr: 1 }}
            >
              {index === steps.length - 1 ? 'Finish' : 'Continue'}
            </Button>
            <Button
              disabled={index === 0}
              onClick={handleBack}
              sx={{ mt: 1, mr: 1 }}
            >
              Back
            </Button>
          </div>
        </Box>
      </StepContent>
    </Step>
  ))}
</Stepper>
```

----------------------------------------

TITLE: Customizing Autocomplete Props with SlotProps
DESCRIPTION: Example showing how to add custom data-testid to the Autocomplete component's popper slot using slotProps.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/overriding-component-structure/overriding-component-structure.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Autocomplete slotProps={{ popper: { 'data-testid': 'my-popper' } }} />
```

----------------------------------------

TITLE: Basic Tooltip Implementation in React with Joy UI
DESCRIPTION: Basic implementation showing how to import and use the Tooltip component from Joy UI after installation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/tooltip/tooltip.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Tooltip from '@mui/joy/Tooltip';

export default function MyApp() {
  return <Tooltip />;
}
```

----------------------------------------

TITLE: Applying Styles with sx Prop and theme.applyStyles - MUI JSX
DESCRIPTION: Shows how to use the `sx` prop on a MUI `Button` component to apply styles conditionally based on the theme mode. It uses an array of style objects/functions, with one function calling `theme.applyStyles('dark', ...)` to define dark mode specific styles. Requires the MUI Button component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#_snippet_11

LANGUAGE: jsx
CODE:
```
import Button from '@mui/material/Button';

<Button
  sx={[
    (theme) => ({
      color: '#fff',
      backgroundColor: theme.palette.primary.main,
      '&:hover': {
        boxShadow: theme.shadows[3],
        backgroundColor: theme.palette.primary.dark,
      },
    }),
    (theme) =>
      theme.applyStyles('dark', {
        backgroundColor: theme.palette.secondary.main,
        '&:hover': {
          backgroundColor: theme.palette.secondary.dark,
        },
      }),
  ]}
>
  Submit
</Button>;
```

----------------------------------------

TITLE: Setting Align Content with Material-UI Box Component in JSX
DESCRIPTION: Shows how to align flex lines within a flex container when there is extra space on the cross axis. Options include flex-start, flex-end, center, space-between, space-around, and stretch.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
<Box sx={{ alignContent: 'flex-start' }}>…
<Box sx={{ alignContent: 'flex-end' }}>…
<Box sx={{ alignContent: 'center' }}>…
<Box sx={{ alignContent: 'space-between' }}>…
<Box sx={{ alignContent: 'space-around' }}>…
<Box sx={{ alignContent: 'stretch' }}>…
```

----------------------------------------

TITLE: Creating Form Input Fields
DESCRIPTION: Implements form control components with email and password input fields using Joy UI's Form components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/tutorial/tutorial.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<FormControl>
  <FormLabel>Email</FormLabel>
  <Input
    // html input attribute
    name="email"
    type="email"
    placeholder="johndoe@email.com"
  />
</FormControl>
<FormControl>
  <FormLabel>Password</FormLabel>
  <Input
    name="password"
    type="password"
    placeholder="password"
  />
</FormControl>
```

----------------------------------------

TITLE: Updated Provider Implementation
DESCRIPTION: Example of the new LocalizationProvider implementation with date adapter.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/pickers-migration/pickers-migration.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
import AdapterDateFns from '@mui/lab/AdapterDateFns';
import LocalizationProvider from '@mui/lab/LocalizationProvider';


function App() {
  return (
    <LocalizationProvider dateAdapter={AdapterDateFns}>
      ...
    </LocalizationProvider>
  )
);
```

----------------------------------------

TITLE: Removing Legacy Grid Props
DESCRIPTION: Shows how to remove the deprecated 'item' and 'zeroMinWidth' props when migrating to the new Grid component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_3

LANGUAGE: diff
CODE:
```
-<Grid item zeroMinWidth>
+<Grid>
```

----------------------------------------

TITLE: Replacing `css` Prop with `sx` in MUI System JSX
DESCRIPTION: Shows how to replace the `css` prop with the `sx` prop on MUI System components like `Box`. This change avoids potential collisions with the `css` prop used by libraries like styled-components and Emotion.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_38

LANGUAGE: diff
CODE:
```
-<Box css={{ color: 'primary.main' }} />
+<Box sx={{ color: 'primary.main' }} />
```

----------------------------------------

TITLE: TypeScript type augmentation for adding new typography levels in Joy UI
DESCRIPTION: Example of how to augment TypeScript types to include new custom typography levels in the theme structure.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-typography/theme-typography.md#2025-04-22_snippet_6

LANGUAGE: ts
CODE:
```
// You can put this to any file that's included in your tsconfig
declare module '@mui/joy/styles' {
  interface TypographySystemOverrides {
    kbd: true;
  }
}
```

----------------------------------------

TITLE: Using Theme Variables in Styled Components
DESCRIPTION: Shows how to use theme variables in styled components. This example creates a Button component with background and text colors from the theme variables.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/usage.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
const Button = styled('button')(({ theme }) => ({
  backgroundColor: theme.vars.palette.primary.main, // var(--mui-palette-primary-main)
  color: theme.vars.palette.primary.contrastText, // var(--mui-palette-primary-contrastText)
}));
```

----------------------------------------

TITLE: Creating Translucent Colors with Color Channel Tokens
DESCRIPTION: Demonstrates how to use color channel tokens to create translucent colors. This example customizes the Chip component's background color with translucency.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/usage.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
const theme = createTheme({
  cssVariables: true,
  components: {
    MuiChip: {
      styleOverrides: {
        root: ({ theme }) => ({
          variants: [
            {
              props: { variant: 'outlined', color: 'primary' },
              style: {
                backgroundColor: `rgba(${theme.vars.palette.primary.mainChannel} / 0.12)`,
              },
            },
          ],
        }),
      },
    },
  },
});
```

----------------------------------------

TITLE: Setting Visibility in Material-UI
DESCRIPTION: Examples of visibility property usage to control element visibility. Unlike display:none, visibility:hidden keeps the element in the layout flow but makes it invisible.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
<Box component="div" sx={{ visibility: 'visible' }}>
  Visible container
</Box>
<Box component="div" sx={{ visibility: 'hidden' }}>
  Invisible container
</Box>
```

----------------------------------------

TITLE: Applying Both Light and Dark Styles Using colorSchemes Object
DESCRIPTION: Demonstrates how to access theme.colorSchemes directly to apply different styles for light and dark modes when CSS-based approaches aren't possible.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
const Custom = styled('div')(({ theme }) => ({
  color: alpha(theme.colorSchemes.light.palette.text.primary, 0.5),
  ...theme.applyStyles('dark', {
    color: alpha(theme.colorSchemes.dark.palette.text.primary, 0.5),
  }),
}));
```

----------------------------------------

TITLE: Switch Component with Custom Role
DESCRIPTION: Example of changing the Switch component's ARIA role using slotProps.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/switch/switch.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Switch slotProps={{ input: { role: 'switch' } }}>
```

----------------------------------------

TITLE: Alert with Background Fix for Snackbar - React/JSX
DESCRIPTION: Example showing how to fix background bleed-through when using Alert with Snackbar by adding background color via sx prop
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/alert/alert.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Alert sx={{ bgcolor: 'background.paper' }} />
```

----------------------------------------

TITLE: Detecting System Color Scheme Mode in Joy UI
DESCRIPTION: Uses the useColorScheme hook to detect whether the user's system preference is set to light or dark mode. This allows the application to respond to system settings.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/dark-mode/dark-mode.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { useColorScheme } from '@mui/joy/styles';

function SomeComponent() {
  const { mode, systemMode } = useColorScheme();
  console.log(mode); // "system"
  console.log(systemMode); // "light" | "dark" based on the user's preference.
}
```

----------------------------------------

TITLE: Updating styled Import and Usage
DESCRIPTION: Diff showing the changes to import styled from @mui/styles instead of @mui/material/styles and adding ThemeProvider for theme context.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_31

LANGUAGE: diff
CODE:
```
-import { styled } from '@mui/material/styles';
+import { styled } from '@mui/styles';
+import { createTheme, ThemeProvider } from '@mui/material/styles';

+const theme = createTheme();
  const MyComponent = styled('div')(({ theme }) => ({ background: theme.palette.primary.main }));

  function App(props) {
-  return <MyComponent />;
+  return <ThemeProvider theme={theme}><MyComponent {...props} /></ThemeProvider>;
  }
```

----------------------------------------

TITLE: Comparing Flat Prop vs sx Prop for Typography Color in MUI (JSX)
DESCRIPTION: Illustrates the equivalence between using a dedicated flat prop (`color`) and the `sx` prop for styling the color of a `Typography` component in MUI. Both examples achieve the same result of setting the text color using a theme palette value ('grey.600').
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Typography color="grey.600">

// is equivalent to
<Typography sx={{ color: 'grey.600' }}>
```

----------------------------------------

TITLE: Merging Slot Props with Custom Tooltip in TypeScript
DESCRIPTION: Shows how to use mergeSlotProps utility to combine custom props with slot props while handling special cases for className, style, and event handlers.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/composition/composition.md#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
import Tooltip, { TooltipProps } from '@mui/material/Tooltip';
import { mergeSlotProps } from '@mui/material/utils';

export const CustomTooltip = (props: TooltipProps) => {
  const { children, title, sx: sxProps } = props;

  return (
    <Tooltip
      {...props}
      title={<Box sx={{ p: 4 }}>{title}</Box>}
      slotProps={{
        ...props.slotProps,
        popper: mergeSlotProps(props.slotProps?.popper, {
          className: 'custom-tooltip-popper',
          disablePortal: true,
          placement: 'top',
        }),
      }}
    >
      {children}
    </Tooltip>
  );
};
```

----------------------------------------

TITLE: Basic Autocomplete Implementation in React with Joy UI
DESCRIPTION: Demonstrates the minimal implementation of an Autocomplete component with basic options. Imports the necessary components and renders a simple autocomplete with string options.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Autocomplete from '@mui/joy/Autocomplete';
import Input from '@mui/joy/Input';

export default function App() {
  return <Autocomplete options={['Option 1', 'Option 2']} />;
}
```

----------------------------------------

TITLE: Chip with Delete Button Implementation - React/JSX
DESCRIPTION: Implementation showing how to use the ChipDelete component to add delete functionality to a chip. The delete action can be triggered by keyboard events (Backspace, Enter, Delete) or by clicking.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/chip/chip.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import ChipDelete from '@mui/joy/ChipDelete';
```

----------------------------------------

TITLE: Setting Custom Inset for Nested Lists
DESCRIPTION: Example of using CSS variables to customize the spacing at the start of nested lists, providing better visual hierarchy.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_8

LANGUAGE: js
CODE:
```
<List sx={{ '--List-nestedInsetStart': '1rem' }}> {/* This is the root List */}
```

----------------------------------------

TITLE: Configuring SwipeableDrawer for iOS Compatibility
DESCRIPTION: Code snippet showing how to configure SwipeableDrawer component with special handling for iOS devices, including performance optimizations and disabling discovery feature for iOS.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/drawers/drawers.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
const iOS =
  typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);

<SwipeableDrawer disableBackdropTransition={!iOS} disableDiscovery={iOS} />;
```

----------------------------------------

TITLE: Using Custom Option Structure with getOptionLabel
DESCRIPTION: Demonstrates how to use the getOptionLabel prop to handle custom option structures where the display text is in a different property.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
const options = [
  { title: 'Pulp Fiction', id: 2 },
  // ...
];

<Autocomplete getOptionLabel={option => option.title}>
```

----------------------------------------

TITLE: Basic Chip Component Implementation - React/JSX
DESCRIPTION: Basic implementation of the Chip component showing how to import and use it in a React application. The component comes with medium size, primary color, and solid variant by default.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/chip/chip.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Chip from '@mui/joy/Chip';

export default function MyApp() {
  return <Chip>My chip</Chip>;
}
```

----------------------------------------

TITLE: Configuring RTL with styled-components
DESCRIPTION: Setup for RTL support with styled-components by using StyleSheetManager with the stylis-plugin-rtl plugin.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/right-to-left/right-to-left.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
import { StyleSheetManager } from 'styled-components';
import rtlPlugin from 'stylis-plugin-rtl';

function Rtl(props) {
  return (
    <StyleSheetManager stylisPlugins={[rtlPlugin]}>
      {props.children}
    </StyleSheetManager>
  );
}
```

----------------------------------------

TITLE: Stack with Min Width Fix
DESCRIPTION: Example showing how to fix white-space: nowrap issues by setting minimum width.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/stack/stack.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<Stack direction="row" sx={{ minWidth: 0 }}>
  <Typography noWrap>
```

----------------------------------------

TITLE: Preventing Default ClickAway in Snackbar
DESCRIPTION: Example showing how to prevent the default click away behavior in Snackbar using event.defaultMuiPrevented.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/snackbars/snackbars.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Snackbar
  slotProps={{
    clickAwayListener: {
      onClickAway: (event) => {
        // Prevent's default 'onClickAway' behavior.
        event.defaultMuiPrevented = true;
      },
    },
  }}
/>
```

----------------------------------------

TITLE: Creating a Basic Stepper in React
DESCRIPTION: This code demonstrates the basic usage of the Stepper and Step components to create a simple stepper. It shows how to structure the components and add content to each step.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stepper/stepper.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Stepper>
  <Step>
    <Typography>Select campaign settings</Typography>
  </Step>
  <Step>
    <Typography>Create an ad group</Typography>
  </Step>
  <Step>
    <Typography>Create an ad</Typography>
  </Step>
</Stepper>
```

----------------------------------------

TITLE: Using CSS Baseline to apply default typography styles in Joy UI
DESCRIPTION: Example showing how CSS Baseline component applies 'body-md' as the default typography level on the global stylesheet.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-typography/theme-typography.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<CssBaseline />

// inherits the `theme.typography['body-md']` styles
<p>Hello World</p>
```

----------------------------------------

TITLE: Renaming Collapse Component Props in React
DESCRIPTION: Renames Collapse's 'collapsedHeight' prop to 'collapsedSize' and updates the 'container' class to 'root'. This codemod aligns the Collapse component with the new API in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_75

LANGUAGE: diff
CODE:
```
-<Collapse collapsedHeight={40} />
-<Collapse classes={{ container: 'collapse' }} />
+<Collapse collapsedSize={40} />
+<Collapse classes={{ root: 'collapse' }} />
```

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/collapse-rename-collapsedheight <path>
```

----------------------------------------

TITLE: Using the Typography Component with theme levels in Joy UI
DESCRIPTION: Example of using the Typography component with the 'level' prop to apply predefined typography styles from the theme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-typography/theme-typography.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
// use the `theme.typography['body-sm']` styles
<Typography level="body-sm">Secondary info</Typography>
```

----------------------------------------

TITLE: Applying Text Transformations in Material-UI with JSX
DESCRIPTION: Illustrates how to apply text transformations (capitalize, lowercase, uppercase) using the Box component in Material-UI. This affects the casing of the text content.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Box sx={{ textTransform: 'capitalize' }}>…
<Box sx={{ textTransform: 'lowercase' }}>…
<Box sx={{ textTransform: 'uppercase' }}>…
```

----------------------------------------

TITLE: Styled-Components RTL Configuration
DESCRIPTION: Integration of RTL support in styled-components using StyleSheetManager and stylis-plugin-rtl.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/right-to-left/right-to-left.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
import { StyleSheetManager } from 'styled-components';
import rtlPlugin from 'stylis-plugin-rtl';

function Rtl(props) {
  return (
    <StyleSheetManager stylisPlugins={[rtlPlugin]}>
      {props.children}
    </StyleSheetManager>
  );
}
```

----------------------------------------

TITLE: Implementing Collapsed Breadcrumbs in React
DESCRIPTION: Demonstrates how to create collapsed breadcrumbs, useful for managing long navigation paths in a compact format.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_4

LANGUAGE: JSX
CODE:
```
{"demo": "CollapsedBreadcrumbs.js"}
```

----------------------------------------

TITLE: Enabling CSS Theme Variables in Material UI Theme
DESCRIPTION: Diff showing how to enable CSS theme variables in a Material UI theme for use with Next.js.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_6

LANGUAGE: diff
CODE:
```
 'use client';
 const theme = createTheme({
+  cssVariables: true,
 });
```

----------------------------------------

TITLE: Next.js Image Integration - React/JSX
DESCRIPTION: Example showing how to use the AspectRatio component with Next.js Image component. The Image component must use layout="fill" property for proper integration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/aspect-ratio/aspect-ratio.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import Image from 'next/image';
import AspectRatio from '@mui/joy/AspectRatio';

function App() {
  return (
    <AspectRatio variant="outlined" ratio="1" objectFit="cover">
      <Image alt="Mountains" src={mountains} layout="fill" placeholder="blur" />
    </AspectRatio>
  );
}
```

----------------------------------------

TITLE: Customizing Breadcrumbs in React
DESCRIPTION: Illustrates how to customize the Breadcrumbs component, allowing for more advanced styling and behavior modifications.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_6

LANGUAGE: JSX
CODE:
```
{"demo": "CustomizedBreadcrumbs.js"}
```

----------------------------------------

TITLE: Menu with Fade Transition
DESCRIPTION: Menu implementation with custom fade transition effect.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_10

LANGUAGE: JSX
CODE:
```
{"demo": "FadeMenu.js"}
```

----------------------------------------

TITLE: Implementing Range Slider in React
DESCRIPTION: Demonstrates the creation of a range slider by supplying an array of values to the 'value' prop in Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_7

LANGUAGE: JSX
CODE:
```
{"demo": "RangeSlider.js"}
```

----------------------------------------

TITLE: Implementing Advanced Filtering with match-sorter
DESCRIPTION: Shows how to implement richer filtering mechanisms using the match-sorter library for features like fuzzy matching in the Autocomplete component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
import { matchSorter } from 'match-sorter';

const filterOptions = (options, { inputValue }) => matchSorter(options, inputValue);

<Autocomplete filterOptions={filterOptions} />;
```

----------------------------------------

TITLE: Disabling Portal for iOS VoiceOver Compatibility (JSX)
DESCRIPTION: This snippet demonstrates how to disable the portal feature of the Autocomplete component's listbox to improve compatibility with VoiceOver on iOS Safari. This workaround addresses issues with the aria-owns attribute support.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_8

LANGUAGE: jsx
CODE:
```
<Autocomplete
  slotProps={{
    listbox: {
      disablePortal: true,
    },
  }}
/>
```

----------------------------------------

TITLE: Updating InputBase Theme Default Props
DESCRIPTION: Updates MuiInputBase theme configuration to use the new slots/slotProps API instead of components/componentsProps.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_49

LANGUAGE: diff
CODE:
```
 MuiInputBase: {
   defaultProps: {
-    components: { Input: CustomInput, Root: CustomRoot }
-    componentsProps: { input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }
+    slots: { input: CustomInput, root: CustomRoot },
+    slotProps: { input: { id: 'test-input-id' }, root: { id: 'test-root-id' } },
   },
 },
```

----------------------------------------

TITLE: Configuring no-restricted-imports for MUI Projects
DESCRIPTION: Configuration example for using the standard ESLint no-restricted-imports rule as a replacement for the deprecated restricted-path-imports rule. This configuration prevents imports from deeply nested MUI module paths.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/eslint-plugin-material-ui/README.md#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{
  "rules": {
    "no-restricted-imports": [
      "error",
      {
        "patterns": ["@mui/*/*/*"]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Customizing Shadow Colors in Joy UI Theme
DESCRIPTION: Demonstrates how to change the shadow color by customizing the shadowChannel token for both light and dark color schemes. The shadowChannel must be specified as RGB channel values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-shadow/theme-shadow.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
import { extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  colorSchemes: {
    light: {
      shadowChannel: '12 12 12',
    },
    dark: {
      shadowChannel: '0 0 0',
    },
  },
});

// Then, pass it to `<CssVarsProvider theme={theme}>`.
```

----------------------------------------

TITLE: Using Custom Icons for Checkboxes in React
DESCRIPTION: Shows how to use custom icons for checkboxes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_4

LANGUAGE: JSX
CODE:
```
{"demo": "IconCheckboxes.js"}
```

----------------------------------------

TITLE: Setting Align Items with Material-UI Box Component in JSX
DESCRIPTION: Shows how to align flex items along the cross axis using the alignItems property. Options include flex-start, flex-end, center, stretch, and baseline.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
<Box sx={{ alignItems: 'flex-start' }}>…
<Box sx={{ alignItems: 'flex-end' }}>…
<Box sx={{ alignItems: 'center' }}>…
<Box sx={{ alignItems: 'stretch' }}>…
<Box sx={{ alignItems: 'baseline' }}>…
```

----------------------------------------

TITLE: Basic Textarea Implementation in React with Joy UI
DESCRIPTION: Basic implementation of the Textarea component from Joy UI. This snippet shows the minimum code required to use the component in a React application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/textarea/textarea.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Textarea from '@mui/joy/Textarea';

export default function MyApp() {
  return <Textarea placeholder="Type anything…" />;
}
```

----------------------------------------

TITLE: Creating Active Last Breadcrumb in React
DESCRIPTION: Shows how to keep the last breadcrumb interactive in a React application. This is useful for maintaining navigation functionality on the current page.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
{"demo": "ActiveLastBreadcrumb.js"}
```

----------------------------------------

TITLE: Running the color-imports codemod with custom paths
DESCRIPTION: Command with additional options to specify custom import and target paths for the color-imports codemod.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_125

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v1.0.0/color-imports <path> -- --importPath='mui/styles/colors' --targetPath='mui/colors'
```

----------------------------------------

TITLE: ButtonGroup with Custom Sizes and Colors
DESCRIPTION: Illustrates how to use size and color props to customize the appearance of button groups.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/button-group/button-group.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<ButtonGroup size="large" color="secondary" aria-label="large secondary button group">
  <Button>One</Button>
  <Button>Two</Button>
  <Button>Three</Button>
</ButtonGroup>
```

----------------------------------------

TITLE: Converting Theme Palette Type to Mode
DESCRIPTION: Renames the theme palette 'type' property to 'mode' for dark/light mode configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_116

LANGUAGE: diff
CODE:
```
 {
   palette: {
-    type: 'dark',
+    mode: 'dark',
   },
 }
```

----------------------------------------

TITLE: Implementing Colored Checkboxes in React
DESCRIPTION: Demonstrates how to apply different colors to checkboxes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_3

LANGUAGE: JSX
CODE:
```
{"demo": "ColorCheckboxes.js"}
```

----------------------------------------

TITLE: Creating Condensed Breadcrumbs with Menu in React
DESCRIPTION: Shows how to implement condensed breadcrumbs with a dropdown menu, providing an alternative way to display long navigation paths.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_5

LANGUAGE: JSX
CODE:
```
{"demo": "CondensedWithMenu.js"}
```

----------------------------------------

TITLE: Implementing Nested Typography Components in Joy UI
DESCRIPTION: Demonstrates how Typography components automatically adjust their HTML tag rendering based on nesting. Parent Typography renders as a <p> tag while nested Typography renders as a <span> tag for semantic correctness.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/main-features/automatic-adjustment/automatic-adjustment.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
<Typography> // the parent Typography renders as a <p>
  This is a very
    <Typography fontWeight="lg">important</Typography> // the child renders as a <span>
  message.
</Typography>
```

----------------------------------------

TITLE: Applying Dark Styles to Material-UI Card Component
DESCRIPTION: Demonstrates how to customize styles for dark mode using the theme.applyStyles() function. This example shows how to change the background color of a Card component in dark mode.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/usage.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
import Card from '@mui/material/Card';

<Card
  sx={[
    (theme) => ({
      backgroundColor: theme.vars.palette.background.default,
    }),
    (theme) =>
      theme.applyStyles('dark', {
        backgroundColor: theme.vars.palette.grey[900],
      }),
  ]}
/>;
```

----------------------------------------

TITLE: Setting Font Weight in Material-UI with JSX
DESCRIPTION: Demonstrates how to set font weight using the Box component in Material-UI. It shows both named weights and numeric values, which can be defined in the theme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<Box sx={{ fontWeight: 'light' }}>… // theme.typography.fontWeightLight
<Box sx={{ fontWeight: 'regular' }}>…
<Box sx={{ fontWeight: 'medium' }}>…
<Box sx={{ fontWeight: 500 }}>…
<Box sx={{ fontWeight: 'bold' }}>…
```

----------------------------------------

TITLE: Grouped Menu with Headers
DESCRIPTION: Menu implementation with categorized items using ListSubheader component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_12

LANGUAGE: JSX
CODE:
```
{"demo": "GroupedMenu.js"}
```

----------------------------------------

TITLE: Customizing Checkbox Sizes in React
DESCRIPTION: Illustrates how to change the size of checkboxes using the size prop or by customizing the SVG icon font size.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
{"demo": "SizeCheckboxes.js"}
```

----------------------------------------

TITLE: Customizing Input Components with Automatic Adjustments in Joy UI
DESCRIPTION: Shows how to create and customize Input components in Joy UI, including the use of decorators and automatic adjustment of child components. It also demonstrates how to override styles using the sx prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/first-look-at-joy.md#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
<Input
  placeholder="password"
  endDecorator={<IconButton size="sm"><Visibility /></IconButton>}
/>

<Input
  size="lg"
  placeholder="password"
  endDecorator={<IconButton><Visibility /></IconButton>}
  sx={{ '--Input-radius': '24px' }}
/>
```

----------------------------------------

TITLE: Updating StyledEngineProvider Import Path
DESCRIPTION: Shows how to update the import path for StyledEngineProvider from the deprecated @mui/material to the correct @mui/material/styles path.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_23

LANGUAGE: diff
CODE:
```
-import { StyledEngineProvider } from '@mui/material';
+import { StyledEngineProvider } from '@mui/material/styles';
```

----------------------------------------

TITLE: Migrating from experimentalStyled to styled
DESCRIPTION: Shows the required import change when migrating from the deprecated experimentalStyled function to the current styled function.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_17

LANGUAGE: diff
CODE:
```
-import { experimentalStyled as styled } from '@mui/material/styles';
+import { styled } from '@mui/material/styles';
```

----------------------------------------

TITLE: Stack with white-space: nowrap Issue Example (JSX)
DESCRIPTION: Shows an example of a positioning conflict that occurs when Stack children use white-space: nowrap, which can cause overflow issues.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stack/stack.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
<Stack direction="row">
  <Typography noWrap>
```

----------------------------------------

TITLE: Implementing Fixed Container in React MUI
DESCRIPTION: Creates a fixed-width container where the max-width matches the min-width of the current breakpoint. Useful for designs targeting specific viewport sizes rather than fluid layouts.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/container/container.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Container fixed>
```

----------------------------------------

TITLE: Installing Material UI and Emotion using npm (Bash)
DESCRIPTION: This command installs the `@mui/material`, `@emotion/react`, and `@emotion/styled` packages using the npm package manager. `@emotion/react` and `@emotion/styled` are required peer dependencies for Material UI. This snippet is presented within a tabbed `codeblock` component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/codeblock.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
```bash npm
npm install @mui/material @emotion/react @emotion/styled
# `@emotion/react` and `@emotion/styled` are peer dependencies
```
```

----------------------------------------

TITLE: Custom Function-based Spacing
DESCRIPTION: Demonstrates implementing custom spacing using a function that returns rem units (Bootstrap-style approach)
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/spacing/spacing.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
const theme = createTheme({
  spacing: (factor) => `${0.25 * factor}rem`, // (Bootstrap strategy)
});

theme.spacing(2); // = 0.25 * 2rem = 0.5rem = 8px
```

----------------------------------------

TITLE: Configuring RTL with Emotion's CacheProvider
DESCRIPTION: Setup for RTL support with Emotion by creating a cache with the stylis-plugin-rtl plugin and using CacheProvider to wrap your application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/right-to-left/right-to-left.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
import { CacheProvider } from '@emotion/react';
import createCache from '@emotion/cache';
import { prefixer } from 'stylis';
import rtlPlugin from 'stylis-plugin-rtl';

// Create rtl cache
const cacheRtl = createCache({
  key: 'muirtl',
  stylisPlugins: [prefixer, rtlPlugin],
});

function Rtl(props) {
  return <CacheProvider value={cacheRtl}>{props.children}</CacheProvider>;
}
```

----------------------------------------

TITLE: Controlling Print Display with sx Prop in Material UI JSX
DESCRIPTION: Demonstrates using the `displayPrint` key within the `sx` prop to set the CSS `display` property specifically for print media, effectively applying styles within an `@media print` query. This example hides the element when printed.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<Box sx={{ displayPrint: 'none' }} /> // equivalent to '@media print': { display: 'none' }
```

----------------------------------------

TITLE: Restoring Old MUI JoyAlert Default Props using extendTheme in JavaScript
DESCRIPTION: Provides a theme customization snippet using `extendTheme` to set the default props for the `JoyAlert` component back to their previous values. Specifically, it changes the default `variant` to 'soft' and the default `color` to 'primary'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
extendTheme({
  components: {
    JoyAlert: {
      defaultProps: {
        variant: 'soft',
        color: 'primary',
      },
    },
  },
});
```

----------------------------------------

TITLE: Customizing Badge Colors in React Material-UI
DESCRIPTION: Shows how to apply different theme palette colors to the Badge component using the color prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
ColorBadge.js
```

----------------------------------------

TITLE: Customizing Autocomplete with slotProps in JSX
DESCRIPTION: This example shows how to add a custom data-testid attribute to the listbox slot of an Autocomplete component using the slotProps prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/overriding-component-structure/overriding-component-structure.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Autocomplete slotProps={{ listbox: { 'data-testid': 'my-listbox' } }} />
```

----------------------------------------

TITLE: Removing item and zeroMinWidth props in Grid v2 (Diff)
DESCRIPTION: A diff highlighting the simplification in Grid v2 usage compared to v1. The `item` prop is no longer needed as every Grid is implicitly an item, and the `zeroMinWidth` prop is removed as text truncation is handled automatically by Grid v2.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/build-layouts-faster-with-grid-v2.md#2025-04-22_snippet_5

LANGUAGE: diff
CODE:
```
 <Grid container spacing={2}>
-  <Grid item zeroMinWidth><Typography>Long text...</Typography></Grid>
+  <Grid><Typography>Long text...</Typography></Grid>
 </Grid>
```

----------------------------------------

TITLE: Using Divider with aria-hidden Attribute in React
DESCRIPTION: This code demonstrates how to use the Divider component with the aria-hidden attribute for improved accessibility when used as a purely stylistic element.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/dividers/dividers.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Divider aria-hidden="true" />
```

----------------------------------------

TITLE: Preventing Autofill in Autocomplete TextField
DESCRIPTION: Shows how to prevent browser autofill suggestions in the Autocomplete component by setting specific autoComplete attributes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_8

LANGUAGE: jsx
CODE:
```
<TextField
  {...params}
  inputProps={{
    ...params.inputProps,
    autoComplete: 'new-password',
  }}
/>
```

----------------------------------------

TITLE: Creating Label-less Bottom Navigation for 4-5 Actions in React
DESCRIPTION: This example shows how to implement a Bottom Navigation component with four or five actions, displaying inactive views as icons only without labels.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/bottom-navigation/bottom-navigation.md#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
"LabelBottomNavigation.js"
```

----------------------------------------

TITLE: TypeScript Configuration for Custom Info Palette
DESCRIPTION: TypeScript module augmentation for adding info palette types to Joy UI theme
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import type { PaletteRange } from '@mui/joy/styles';

declare module '@mui/joy/styles' {
  interface ColorPalettePropOverrides {
    info: true;
  }

  interface Palette {
    info: PaletteRange;
  }
}
```

----------------------------------------

TITLE: Customizing CssBaseline with GlobalStyles in Joy UI
DESCRIPTION: This example demonstrates how to customize the styles produced by CssBaseline by appending GlobalStyles component and defining custom CSS object styles for HTML elements.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/css-baseline/css-baseline.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
import { CssVarsProvider } from '@mui/joy/styles';
import CssBaseline from '@mui/joy/CssBaseline';
import GlobalStyles from '@mui/joy/GlobalStyles';

function App() {
  return (
    <CssVarsProvider>
      <CssBaseline /> {/* CssBaseline must come first */}
      <GlobalStyles
        styles={{
          // CSS object styles
          html: {
            // ...
          },
          body: {
            // ...
          },
        }}
      />
    </CssVarsProvider>
  );
}
```

----------------------------------------

TITLE: Theme Configuration for Typography Level Mapping
DESCRIPTION: Configuration to customize HTML element mapping for different typography levels in the theme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/typography/typography.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
const theme = extendTheme({
  components: {
    JoyTypography: {
      defaultProps: {
        levelMapping: {
          h1: 'h2',
          h2: 'h2',
          h3: 'h3',
          h4: 'h3',
          'title-lg': 'p',
          'title-md': 'p',
          'title-sm': 'p',
          'body-md': 'p',
          'body-sm': 'p',
          'body-xs': 'span',
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Manual Selection Tabs Implementation
DESCRIPTION: Basic implementation of Tabs requiring manual selection for each tab.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/tabs/tabs.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
/* Tabs where each tab needs to be selected manually */
<Tabs />
```

----------------------------------------

TITLE: CSS Grid Layout Implementation
DESCRIPTION: Example demonstrating how to use MUI System and CSS Grid Layout as an alternative to the Grid component's internal flexbox implementation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_12

LANGUAGE: jsx
CODE:
```
{"demo": "CSSGrid.js", "bg": true}
```

----------------------------------------

TITLE: Extending Pigment CSS Theme Types - TS
DESCRIPTION: TypeScript code snippet demonstrating how to use module augmentation to extend the `@mui/material-pigment-css` `ThemeArgs` interface to include the Material UI `Theme` type, enabling type checking for theme access.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_11

LANGUAGE: ts
CODE:
```
// e.g. App.tsx
import { Theme } from '@mui/material/styles';

declare module '@mui/material-pigment-css' {
  interface ThemeArgs {
    theme: Theme;
  }
}
```

----------------------------------------

TITLE: Creating Reusable Styles with Template Syntax
DESCRIPTION: Example of creating reusable styles using Pigment CSS template syntax.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
const bodyBackground = css`
  background-color: #000;
  color: #fff;
`;
```

----------------------------------------

TITLE: Customizing Grid Breakpoints in React
DESCRIPTION: This example shows how to use custom breakpoints with the Grid component. It demonstrates setting up custom breakpoint names and using them in responsive layouts.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/grid/grid.md#2025-04-22_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { ThemeProvider, createTheme } from '@mui/material/styles';

function Demo() {
  return (
    <ThemeProvider
      theme={createTheme({
        breakpoints: {
          values: {
            laptop: 1024,
            tablet: 640,
            mobile: 0,
            desktop: 1280,
          },
        },
      })}
    >
      <Grid container spacing={{ mobile: 1, tablet: 2, laptop: 3 }}>
        {Array.from(Array(4)).map((_, index) => (
          <Grid key={index} size={{ mobile: 6, tablet: 4, laptop: 3 }}>
            <div>{index + 1}</div>
          </Grid>
        ))}
      </Grid>
    </ThemeProvider>
  );
}
```

----------------------------------------

TITLE: Customizing Accordion Heading Component in Material UI v6
DESCRIPTION: Example of how to customize the heading element of an Accordion component using the slotProps.heading.component prop to change the default h3 to h4.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Accordion slotProps={{ heading: { component: 'h4' } }}>
  <AccordionSummary
    expandIcon={<ExpandMoreIcon />}
    aria-controls="panel1-content"
    id="panel1-header"
  >
    Accordion
  </AccordionSummary>
  <AccordionDetails>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada
    lacus ex, sit amet blandit leo lobortis eget.
  </AccordionDetails>
</Accordion>
```

----------------------------------------

TITLE: Installing Material UI with styled-components
DESCRIPTION: Commands to install Material UI and configure it to use styled-components instead of Emotion as the styling engine. This requires installing the specific styled-engine package and the styled-components library.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/installation/installation.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm install @mui/material @mui/styled-engine-sc styled-components
```

LANGUAGE: bash
CODE:
```
pnpm add @mui/material @mui/styled-engine-sc styled-components
```

LANGUAGE: bash
CODE:
```
yarn add @mui/material @mui/styled-engine-sc styled-components
```

----------------------------------------

TITLE: Implementing Custom Escape Key Handling for Chip Component
DESCRIPTION: Custom implementation to maintain the v5 behavior of Chip losing focus on Escape key press, which changed in v6 where Chip retains focus like other button components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
import * as React from 'react';
import Chip from '@mui/material/Chip';

export default function ChipExample() {
  const chipRef = React.useRef(null);
  const keyUpHandler = (event) => {
    if (event.key === 'Escape' && chipRef.current) {
      chipRef.current.blur();
    }
  };
  return (
    <Chip
      label="Chip Outlined"
      variant="outlined"
      ref={chipRef}
      onKeyUp={keyUpHandler}
    />
  );
}
```

----------------------------------------

TITLE: Changing styled Import Source (JS/TS)
DESCRIPTION: Instructs users to change the import path for the `styled` utility from `@mui/material/styles` to `@mui/material-pigment-css` when migrating to Pigment CSS, enabling compatibility with the new styling engine.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_24

LANGUAGE: diff
CODE:
```
-import { styled } from '@mui/material/styles';
+import { styled } from '@mui/material-pigment-css';
```

----------------------------------------

TITLE: Customizing Checkbox Label Placement in React
DESCRIPTION: Demonstrates how to change the placement of checkbox labels.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_8

LANGUAGE: JSX
CODE:
```
{"demo": "FormControlLabelPosition.js"}
```

----------------------------------------

TITLE: Using Material UI CSS Theme Variables in Plain CSS
DESCRIPTION: This CSS snippet illustrates how Material UI's generated CSS theme variables can be directly used within a standard CSS file (e.g., `styles.css`) to style elements consistently with the Material UI theme. This requires enabling the `cssVariables` flag in the theme configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
.custom-card {
  background-color: var(--mui-palette-background-default);
  color: var(--mui-palette-text-primary);
  padding: var(--mui-spacing-2);
  font: var(--mui-font-body1);
}
```

----------------------------------------

TITLE: Implementing Slider with Removed Track in React
DESCRIPTION: Demonstrates how to create a slider without a visible track by setting the 'track' prop to false in Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_15

LANGUAGE: JSX
CODE:
```
{"demo": "TrackFalseSlider.js"}
```

----------------------------------------

TITLE: Implementing Fixed Container in React with Material-UI
DESCRIPTION: This snippet shows how to create a fixed-width Container. The fixed prop sets the max-width to match the min-width of the current breakpoint, suitable for designs with a fixed set of sizes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/container/container.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Container fixed>
```

----------------------------------------

TITLE: Customizing Slider Marks Placement in React
DESCRIPTION: Shows how to customize the placement of marks for minimum and maximum values on a slider in Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_14

LANGUAGE: JSX
CODE:
```
{"demo": "CustomMarks.js"}
```

----------------------------------------

TITLE: Styling Component with theme.applyStyles - MUI JSX
DESCRIPTION: Demonstrates creating a styled `div` component in MUI using the `styled` utility. It applies base styles and then uses `theme.applyStyles('dark', ...)` to add styles specific to the dark mode, overriding the base styles when dark mode is active. Requires `@mui/material/styles`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#_snippet_10

LANGUAGE: jsx
CODE:
```
import { styled } from '@mui/material/styles';

const MyComponent = styled('div')(({ theme }) => [
  {
    color: '#fff',
    backgroundColor: theme.palette.primary.main,
    '&:hover': {
      boxShadow: theme.shadows[3],
      backgroundColor: theme.palette.primary.dark,
    },
  },
  theme.applyStyles('dark', {
    backgroundColor: theme.palette.secondary.main,
    '&:hover': {
      backgroundColor: theme.palette.secondary.dark,
    },
  }),
]);
```

----------------------------------------

TITLE: Configuring Badge Overlap in React Material-UI
DESCRIPTION: Demonstrates how to control badge positioning relative to the wrapped element using the overlap prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_7

LANGUAGE: JSX
CODE:
```
BadgeOverlap.js
```

----------------------------------------

TITLE: Converting JSS to Styled API in React
DESCRIPTION: Replaces JSS styling with 'makeStyles' or 'withStyles' to 'styled' API. This codemod helps migrate from JSS to the new styled API in Material-UI v5, including updating class names and styling structure.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_88

LANGUAGE: diff
CODE:
```
 import Typography from '@material-ui/core/Typography';
-import makeStyles from '@material-ui/styles/makeStyles';
+import { styled } from '@material-ui/core/styles';

-const useStyles = makeStyles((theme) => ({
-  root: {
-    display: 'flex',
-    alignItems: 'center',
-    backgroundColor: theme.palette.primary.main
-  },
-  cta: {
-    borderRadius: theme.shape.radius
-  },
-  content: {
-    color: theme.palette.common.white,
-    fontSize: 16,
-    lineHeight: 1.7
-  },
-}))
+const PREFIX = 'MyCard';
+const classes = {
+  root: `${PREFIX}-root`,
+  cta: `${PREFIX}-cta`,
+  content: `${PREFIX}-content`,
+}
+const Root = styled('div')((theme) => ({
+  [`&.${classes.root}`]: {
+    display: 'flex',
+    alignItems: 'center',
+    backgroundColor: theme.palette.primary.main
+  },
+  [`& .${classes.cta}`]: {
+    borderRadius: theme.shape.radius
+  },
+  [`& .${classes.content}`]: {
+    color: theme.palette.common.white,
+    fontSize: 16,
+    lineHeight: 1.7
+  },
+}))

 export const MyCard = () => {
   const classes = useStyles();
   return (
-    <div className={classes.root}>
+    <Root className={classes.root}>
       <Typography className={classes.content}>...</Typography>
       <Button className={classes.cta}>Go</Button>
-    </div>
+    </Root>
   )
 }
```

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/jss-to-styled <path>
```

----------------------------------------

TITLE: Setting Typography Variants in Material-UI with JSX
DESCRIPTION: Demonstrates how to apply different typography variants using the Box component in Material-UI. These variants are defined in the theme's typography object.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Box sx={{ typography: 'subtitle2' }}>… // theme.typography.subtitle2
<Box sx={{ typography: 'body1' }}>…
<Box sx={{ typography: 'body2' }}>…
```

----------------------------------------

TITLE: Customizing ScopedCssBaseline Using Themed Components Approach
DESCRIPTION: This snippet demonstrates how to customize ScopedCssBaseline using Joy UI's themed components approach. It extends the theme with component-specific style overrides for the root slot.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/css-baseline/css-baseline.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';
import ScopedCssBaseline from '@mui/joy/ScopedCssBaseline';
import MyApp from './MyApp';

const theme = extendTheme({
  components: {
    JoyScopedCssBaseline: {
      styleOverrides: {
        root: ({ theme }) => ({
          // ...CSS object styles
        })
      }
    }
  }
})

export default function MyApp() {
  const [root, setRoot] = React.useState(null);
  return (
    {/* target the node to ScopedCssBaseline's div */}
    <CssVarsProvider colorSchemeNode={root}>
      {/* must be used under CssVarsProvider */}
      <ScopedCssBaseline ref={(element) => setRoot(element)}>
        {/* The rest of your application */}
        <MyApp />
      </ScopedCssBaseline>
    </CssVarsProvider>
  );
}
```

----------------------------------------

TITLE: Implementing a Mobile Stepper with Text in React
DESCRIPTION: This code shows how to create a mobile stepper with text display. It uses the MobileStepper component and includes buttons for navigation between steps. The current step and total steps are displayed as text.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/steppers/steppers.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<MobileStepper
  variant="text"
  steps={maxSteps}
  position="static"
  activeStep={activeStep}
  nextButton={
    <Button
      size="small"
      onClick={handleNext}
      disabled={activeStep === maxSteps - 1}
    >
      Next
      {theme.direction === 'rtl' ? (
        <KeyboardArrowLeft />
      ) : (
        <KeyboardArrowRight />
      )}
    </Button>
  }
  backButton={
    <Button size="small" onClick={handleBack} disabled={activeStep === 0}>
      {theme.direction === 'rtl' ? (
        <KeyboardArrowRight />
      ) : (
        <KeyboardArrowLeft />
      )}
      Back
    </Button>
  }
/>
```

----------------------------------------

TITLE: Importing Roboto Font Weights in React
DESCRIPTION: TypeScript/JavaScript code to import specific weights of the Roboto font in a React application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/typography/typography.md#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
import '@fontsource/roboto/300.css';
import '@fontsource/roboto/400.css';
import '@fontsource/roboto/500.css';
import '@fontsource/roboto/700.css';
```

----------------------------------------

TITLE: Fixing White Space Nowrap in Stack Components
DESCRIPTION: Solution for handling white-space: nowrap within Stack components by setting minWidth: 0 to prevent overflow issues.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/stack/stack.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Stack direction="row" sx={{ minWidth: 0 }}>
  <span style={{ whiteSpace: 'nowrap' }}>
```

----------------------------------------

TITLE: Updating Slider Classes in MUI
DESCRIPTION: Changes to Slider component class names for size and color variants, updating both JS and CSS implementations
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_60

LANGUAGE: diff
CODE:
```
import { sliderClasses } from '@mui/material/Slider';

MuiSlider: {
  styleOverrides: {
    root: {
-      [`& .${sliderClasses.thumbSizeSmall}`]: {
+      [`&.${sliderClasses.sizeSmall} > .${sliderClasses.thumb}`]: {
        color: 'red',
      },
[...additional class changes...]
```

----------------------------------------

TITLE: Performance Optimization with GlobalStyles
DESCRIPTION: Example showing how to optimize Text Field performance by disabling global style injection and manually adding required styles
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
import { GlobalStyles, createTheme, ThemeProvider } from '@mui/material';

const theme = createTheme({
  components: {
    MuiInputBase: {
      defaultProps: {
        disableInjectingGlobalStyles: true,
      },
    },
  },
});

export default function App() {
  return (
    <ThemeProvider theme={theme}>
      <GlobalStyles
        styles={{
          '@keyframes mui-auto-fill': { from: { display: 'block' } },
          '@keyframes mui-auto-fill-cancel': { from: { display: 'block' } },
        }}
      />
      ...
    </ThemeProvider>
  );
}
```

----------------------------------------

TITLE: ButtonGroup with Disabled Elevation
DESCRIPTION: Shows how to remove the elevation effect from ButtonGroup using the disableElevation prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/button-group/button-group.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
<ButtonGroup disableElevation variant="contained">
  <Button>One</Button>
  <Button>Two</Button>
</ButtonGroup>
```

----------------------------------------

TITLE: Removing default typography levels in Joy UI
DESCRIPTION: Example of how to remove unwanted typography levels from the theme by setting them to undefined in the theme configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-typography/theme-typography.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
const customTheme = extendTheme({
  typography: {
    'title-sm': undefined,
    'title-xs': undefined,
  },
});
```

----------------------------------------

TITLE: Customizing List Component in React using Joy UI
DESCRIPTION: This snippet demonstrates how to customize the List component using built-in CSS variables to match the design of the Gatsby documentation side nav. The example shows a collapsible list implementation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/overview/overview.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
{"demo": "../../components/list/ExampleCollapsibleList.js"}
```

----------------------------------------

TITLE: Restoring Old MUI JoyChipDelete Default Props using extendTheme in JavaScript
DESCRIPTION: Provides a theme customization snippet using `extendTheme` to restore the previous default props for the `JoyChipDelete` component. It changes the default `variant` to 'solid' and the default `color` to 'primary'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_17

LANGUAGE: javascript
CODE:
```
extendTheme({
  components: {
    JoyChipDelete: {
      defaultProps: {
        variant: 'solid',
        color: 'primary',
      },
    },
  },
});
```

----------------------------------------

TITLE: Disabling Built-in Filtering
DESCRIPTION: Example showing how to disable the Autocomplete component's built-in filtering functionality by overriding the filterOptions prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<Autocomplete filterOptions={(x) => x} />
```

----------------------------------------

TITLE: Creating Responsive Circular Skeleton
DESCRIPTION: Example of creating a responsive circular Skeleton component with different dimensions on mobile and desktop using object notation for width and height properties.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/skeleton/skeleton.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
<Skeleton
  variant="circular"
  width={{ xs: 40, md: 48 }}
  height={{ xs: 40, md: 48 }}
/>
```

----------------------------------------

TITLE: Implementing Fluid Container in React with Material-UI
DESCRIPTION: This snippet demonstrates how to use a fluid Container component with a maximum width constraint. The maxWidth prop determines the maximum width of the container.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/container/container.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Container maxWidth="sm">
```

----------------------------------------

TITLE: Forcing Dark Mode on Subtree using Selectors - JSX
DESCRIPTION: Demonstrates how to override the globally selected color scheme for a specific section of your application by applying a CSS class or data attribute corresponding to the dark mode selector directly to a container element. This forces all components within this subtree to render using the dark color scheme. Requires configuring `colorSchemeSelector` in your theme to use classes or data attributes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#_snippet_12

LANGUAGE: JS
CODE:
```
// if the selector is '.mode-%s'
<div className=".mode-dark">
  <Paper sx={{ p: 2 }}>
    <TextField label="Email" type="email" margin="normal" />
    <TextField label="Password" type="password" margin="normal" />
    <Button>Sign in</Button>
  </Paper>
  {/* other components */}
</div>
```

LANGUAGE: JS
CODE:
```
// if the selector is '[data-mode-%s]'
<div data-mode-dark>
  <Paper sx={{ p: 2 }}>
    <TextField label="Email" type="email" margin="normal" />
    <TextField label="Password" type="password" margin="normal" />
    <Button>Sign in</Button>
  </Paper>
  {/* other components */}
</div>
```

----------------------------------------

TITLE: Customizing the DataGrid Toolbar with the sx Prop - React JSX
DESCRIPTION: This example illustrates another method for customizing the DataGrid toolbar by leveraging the sx prop. This approach utilizes the sx shorthand to apply custom theme-based spacing for padding within the GridToolbarContainer. Dependencies are the same as before (MUI X DataGrid and styling system), and the sx prop automatically adapts padding based on the active theme's spacing. This approach provides a modern and concise way to style components in a React application using MUI X.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v5.md#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
function MyCustomToolbar() {
  // means "padding: theme.spacing(5)", NOT "5px"
  return (
    <GridToolbarContainer sx={{ p: 5 }}>My custom toolbar</GridToolbarContainer>
  );
}

export default function App() {
  return (
    <div style={{ height: 400, width: '100%' }}>
      <DataGrid components={{ Toolbar: MyCustomToolbar }} />
    </div>
  );
}
```

----------------------------------------

TITLE: Updating Modal Props in MUI
DESCRIPTION: Transformation of Modal component props from components/componentsProps pattern to slots/slotProps pattern.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_58

LANGUAGE: diff
CODE:
```
<Modal
-  components={{ Root: CustomRoot, Backdrop: CustomBackdrop }}
-  componentsProps={{ root: { testid: 'root-id' }, backdrop: { testid: 'backdrop-id' } }}
+  slots={{ root: CustomRoot, backdrop: CustomBackdrop }}
+  slotProps={{ root: { testid: 'root-id' }, backdrop: { testid: 'backdrop-id' } }}
/>
```

----------------------------------------

TITLE: Using useRtl Hook Instead of theme.direction (TSX)
DESCRIPTION: Demonstrates migrating from accessing `theme.direction` via the `useTheme` hook to using the `useRtl` hook from `@mui/material-pigment-css/RtlProvider` to determine the current RTL status for conditional logic within a component. Requires importing `useRtl`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_35

LANGUAGE: diff
CODE:
```
- import { useTheme } from '@mui/material/styles';
+ import { useRtl } from '@mui/material-pigment-css/RtlProvider';

 function App() {
-  const theme = useTheme();
+  const isRtl = useRtl();

   return (
     <Box sx={{ display: 'flex', alignItems: 'center', pl: 1, pb: 1 }}>
       <IconButton aria-label="previous">
-        {theme.direction === 'rtl' ? <SkipNextIcon /> : <SkipPreviousIcon />}
+        {isRtl ? <SkipNextIcon /> : <SkipPreviousIcon />}
       </IconButton>
       <IconButton aria-label="play/pause">
         <PlayArrowIcon sx={{ height: 38, width: 38 }} />
       </IconButton>
       <IconButton aria-label="next">
-        {theme.direction === 'rtl' ? <SkipPreviousIcon /> : <SkipNextIcon />}
+        {isRtl ? <SkipPreviousIcon /> : <SkipNextIcon />}
       </IconButton>
     </Box>
   );
 }
```

----------------------------------------

TITLE: Implementing Discrete Slider with Marks in React
DESCRIPTION: Demonstrates the creation of a discrete slider with value indicators and marks for each step using Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
{"demo": "DiscreteSlider.js"}
```

----------------------------------------

TITLE: Updating Grid Styling Overrides in Material-UI Theme
DESCRIPTION: Changes the method for overriding Grid styles in the theme, using a callback function instead of direct class overrides.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_17

LANGUAGE: diff
CODE:
```
 const theme = createTheme({
   components: {
     MuiGrid: {
-      styleOverrides: {
-        'align-items-xs-flex-end': {
-          marginTop: 20,
-        },
-      },
+      styleOverrides: ({ ownerState }) => ({
+        ...ownerState.alignItems === 'flex-end' && {
+          marginTop: 20,
+        },
+      }),
     },
   },
 });
```

----------------------------------------

TITLE: Optimizing Linear Progress Bar Transitions in CSS
DESCRIPTION: CSS snippet to disable transition animations on LinearProgress component for high-frequency updates (30+ renders per second).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/progress/progress.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
.MuiLinearProgress-bar {
  transition: none;
}
```

----------------------------------------

TITLE: Installing Pigment CSS with Next.js
DESCRIPTION: Commands to install Pigment CSS and its Next.js plugin dependencies.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install @pigment-css/react
npm install --save-dev @pigment-css/nextjs-plugin
```

----------------------------------------

TITLE: Function-based Theme Spacing in Material-UI
DESCRIPTION: Illustrates spacing transformation when theme spacing is configured as a function. The function is called with the prop value to calculate the margin.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/spacing/spacing.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
const theme = {
  spacing: value => value * 2,
}

<Box sx={{ m: 0 }} /> // margin: 0px;
<Box sx={{ m: 2 }} /> // margin: 4px;
```

----------------------------------------

TITLE: Aligning Table Cells in Joy UI
DESCRIPTION: This snippet shows how to align table cells using the sx prop and CSS selectors in a Joy UI Table.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/table/table.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Table sx={{ '& tr > *:not(:first-child)': { textAlign: 'right' } }}>
```

----------------------------------------

TITLE: Applying Styles in Shadow DOM with Material UI
DESCRIPTION: This snippet demonstrates how to create a shadow DOM container and apply styles within it using Material UI's CacheProvider.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/shadow-dom/shadow-dom.md#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
const container = document.querySelector('#root');
const shadowContainer = container.attachShadow({ mode: 'open' });
const shadowRootElement = document.createElement('div');
shadowContainer.appendChild(shadowRootElement);

const cache = createCache({
  key: 'css',
  prepend: true,
  container: shadowContainer,
});

ReactDOM.createRoot(shadowRootElement).render(
  <CacheProvider value={cache}>
    <App />
  </CacheProvider>,
);
```

----------------------------------------

TITLE: Configuring Pigment CSS with Vite
DESCRIPTION: Configuration setup for integrating Pigment CSS with Vite using the pigment plugin.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
// main.tsx
import { pigment } from '@pigment-css/vite-plugin';

export default defineConfig({
  plugins: [
    pigment(),
    // ... Your other plugins.
  ],
});
```

----------------------------------------

TITLE: Material UI Theme RTL Configuration
DESCRIPTION: Configuration of RTL direction in Material UI theme using createTheme API.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/right-to-left/right-to-left.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  direction: 'rtl',
});
```

----------------------------------------

TITLE: InputElement Interface for Custom Input Components
DESCRIPTION: Defines the TypeScript interface that custom input components should implement when integrating with Material-UI TextField.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_8

LANGUAGE: ts
CODE:
```
interface InputElement {
  focus(): void;
  value?: string;
}
```

----------------------------------------

TITLE: Menu with Popup State Management
DESCRIPTION: Menu implementation using material-ui-popup-state package for state management.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_13

LANGUAGE: JSX
CODE:
```
{"demo": "MenuPopupState.js"}
```

----------------------------------------

TITLE: Forcing ThemeProvider Re-render on Mode Change - JSX
DESCRIPTION: Applies the `forceThemeRerender` prop to the `ThemeProvider` component. By default, ThemeProvider does not re-render when switching modes if `cssVariables: true` is set; this prop overrides that behavior, forcing a re-render of the theme context consumers upon mode change.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#_snippet_15

LANGUAGE: JSX
CODE:
```
<ThemeProvider forceThemeRerender />
```

----------------------------------------

TITLE: Importing Toggle Button Group in React
DESCRIPTION: This snippet shows how to import the ToggleButtonGroup component from Joy UI. It's the basic setup required to use the component in a React application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/toggle-button-group/toggle-button-group.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import ToggleButtonGroup from '@mui/joy/ToggleButtonGroup';
```

----------------------------------------

TITLE: Updating Grid Import Statements for Material UI v5
DESCRIPTION: Shows how to update import statements when migrating from Grid to Unstable_Grid2 in Material UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_2

LANGUAGE: diff
CODE:
```
// The legacy Grid component is named Grid
-import Grid from '@mui/material/Grid';

// The updated Grid component is named Unstable_Grid2
+import Grid from '@mui/material/Unstable_Grid2';
```

----------------------------------------

TITLE: Icon Menu with Desktop Padding
DESCRIPTION: Implementation of a menu with icons and increased padding for desktop viewport.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
{"demo": "IconMenu.js", "bg": true}
```

----------------------------------------

TITLE: Customizing Grouping Behavior with groupingValueGetter (JavaScript)
DESCRIPTION: This snippet shows how to use the groupingValueGetter property to customize the grouping behavior. In this example, it groups movies by decade instead of exact release date.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/introducing-the-row-grouping-feature.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
groupingValueGetter: ({ value }) => `${Math.floor(value.getFullYear() / 10)}0's`;
```

----------------------------------------

TITLE: Creating a Vertical Stepper with Extra Content in React
DESCRIPTION: This snippet demonstrates how to create a vertical stepper with additional content. It uses the 'orientation' prop and shows how to include extra information within each step.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stepper/stepper.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
<Stepper orientation="vertical">
  {steps.map((step, index) => (
    <Step key={step.label}>
      <StepButton>
        <Typography level="h4">{step.label}</Typography>
      </StepButton>
      <Box sx={{ px: 2, pb: 2 }}>
        <Typography level="body-sm">{step.description}</Typography>
      </Box>
    </Step>
  ))}
</Stepper>
```

----------------------------------------

TITLE: Migrating Custom Component sx Prop Usage (JS/TSX)
DESCRIPTION: Shows how to modify a custom component that accepts an `sx` prop and passes it to an underlying Material UI component like `ButtonBase`. The change removes the complex logic for handling arrays of `sx` props, relying on the new Pigment CSS compatibility where `sx` can be passed directly.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_23

LANGUAGE: diff
CODE:
```
 import ButtonBase from '@mui/material/ButtonBase';

 function ActiveButton({ sx, ...props }) {
   return (
     <ButtonBase
       sx={[
         {
           '&:active': {
             opacity: 0.5,
           },
         },
-        ...Array.isArray(sx) ? sx : [sx],
       ]}
       {...props}
     />
   );
 }
```

----------------------------------------

TITLE: Updating styled Box Components in Material UI v6
DESCRIPTION: Changes needed when using styled with Box components due to type changes in v6, either by switching to div elements or using type casting.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_21

LANGUAGE: diff
CODE:
```
-const StyledBox = styled(Box)`
+const StyledDiv = styled('div')`
   color: white;
 `;
```

----------------------------------------

TITLE: Augmenting DefaultTheme in TypeScript for Material UI v5
DESCRIPTION: Fixes TypeScript errors related to missing theme properties by extending the DefaultTheme interface from @mui/styles with the Theme from @mui/material/styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/troubleshooting.md#2025-04-22_snippet_5

LANGUAGE: ts
CODE:
```
// it could be your App.tsx file or theme file that is included in your tsconfig.json
import { Theme } from '@mui/material/styles';

declare module '@mui/styles/defaultTheme' {
  // eslint-disable-next-line @typescript-eslint/no-empty-interface (remove this line if you don't have the rule enabled)
  interface DefaultTheme extends Theme {}
}
```

----------------------------------------

TITLE: Setting Root ID on Autocomplete Component
DESCRIPTION: Two equivalent examples of setting an ID on the Autocomplete component's root element.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/overriding-component-structure/overriding-component-structure.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Autocomplete id="badge1">
```

LANGUAGE: jsx
CODE:
```
<Autocomplete slotProps={{ root: { id: 'badge1' } }}>
```

----------------------------------------

TITLE: Number-based Theme Spacing in Material-UI
DESCRIPTION: Demonstrates spacing transformation when theme spacing is configured as a number. The prop value is multiplied by the theme value to generate pixel-based margins.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/spacing/spacing.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
const theme = {
  spacing: 8,
}

<Box sx={{ m: -2 }} /> // margin: -16px;
<Box sx={{ m: 0 }} /> // margin: 0px;
<Box sx={{ m: 0.5 }} /> // margin: 4px;
<Box sx={{ m: 2 }} /> // margin: 16px;
```

----------------------------------------

TITLE: Installing @emotion/babel-plugin with npm in Bash
DESCRIPTION: Shows the npm command required to install the @emotion/babel-plugin package, which is necessary to enable component selectors when using the emotion styled engine with MUI. This plugin must be present in the Babel configuration for component selectors to work. Run this command in the terminal at the root of your project.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
npm install @emotion/babel-plugin
```

----------------------------------------

TITLE: Implementing Fixed-Position Bottom Navigation in React
DESCRIPTION: This code demonstrates how to create a Bottom Navigation component that remains fixed to the bottom of the screen, regardless of the amount of content displayed.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/bottom-navigation/bottom-navigation.md#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
"FixedBottomNavigation.js"
```

----------------------------------------

TITLE: Configuring Autocomplete for Autofill Prevention (JSX)
DESCRIPTION: This code snippet shows how to configure the Autocomplete component to prevent browser autofill suggestions. It sets the autoComplete attribute to 'new-password' on the input slot, which can help avoid autofill in some browsers.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_7

LANGUAGE: jsx
CODE:
```
<Autocomplete
  slotProps={{
    input: {
      autoComplete: 'new-password',
    },
  }}
/>
```

----------------------------------------

TITLE: Multiline Chip Component
DESCRIPTION: Example of chips supporting multiline content using custom styling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/chips/chips.md#2025-04-22_snippet_3

LANGUAGE: JavaScript
CODE:
```
import * as React from 'react';
import Chip from '@mui/material/Chip';
import Stack from '@mui/material/Stack';

export default function MultilineChips() {
  return (
    <Stack direction="row" spacing={1}>
      <Chip
        sx={{ height: 'auto', '& .MuiChip-label': { whiteSpace: 'normal' } }}
        label="This is a chip that has multiple lines."
      />
    </Stack>
  );
}
```

----------------------------------------

TITLE: Styling Sheet Component with sx Prop
DESCRIPTION: Demonstrates styling the Sheet component using the sx prop with flexbox and spacing properties.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/tutorial/tutorial.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Sheet
  sx={{
    width: 300,
    mx: 'auto', // margin left & right
    my: 4, // margin top & bottom
    py: 3, // padding top & bottom
    px: 2, // padding left & right
    display: 'flex',
    flexDirection: 'column',
    gap: 2,
    borderRadius: 'sm',
    boxShadow: 'md',
  }}
>
  Welcome!
</Sheet>
```

----------------------------------------

TITLE: Configuring TypeScript Theme Augmentation
DESCRIPTION: TypeScript code example showing how to extend the default theme structure with lab components using module augmentation and apply custom styles to lab components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/about-the-lab/about-the-lab.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type {} from '@mui/lab/themeAugmentation';

const theme = createTheme({
  components: {
    MuiTimeline: {
      styleOverrides: {
        root: {
          backgroundColor: 'red',
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Implementing Hydration Mismatch Prevention in Joy UI
DESCRIPTION: Demonstrates how to prevent hydration mismatch errors when using color scheme detection with server-side rendering. The component only renders the actual UI after client-side mounting.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/dark-mode/dark-mode.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
function ModeToggle() {
  const { mode, setMode } = useColorScheme();
  const [mounted, setMounted] = React.useState(false);

  React.useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    // to avoid layout shift, render a placeholder button
    return <Button variant="outlined" color="neutral" sx={{ width: 120 }} />;
  }

  return (
    <Button
      variant="outlined"
      color="neutral"
      onClick={() => setMode(mode === 'dark' ? 'light' : 'dark')}
    >
      {mode === 'dark' ? 'Turn light' : 'Turn dark'}
    </Button>
  );
};
```

----------------------------------------

TITLE: Implementing Grid Display Property with MUI Box
DESCRIPTION: Examples of setting up a grid container using the display property with values 'grid' and 'inline-grid'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/grid/grid.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Box sx={{ display: 'grid' }}>…</Box>
<Box sx={{ display: 'inline-grid' }}>…</Box>
```

----------------------------------------

TITLE: Enabling CSS Cascade Layers in _document.tsx for Next.js Pages Router
DESCRIPTION: Diff showing how to enable CSS cascade layers in the _document.tsx file for Material UI with Next.js Pages Router.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_14

LANGUAGE: diff
CODE:
```
+import { createEmotionCache } from '@mui/material-nextjs/v15-pagesRouter';
 ...

 MyDocument.getInitialProps = async (ctx) => {
   const finalProps = await documentGetInitialProps(ctx, {
+    emotionCache: createEmotionCache({ enableCssLayer: true }),
   });
   return finalProps;
 };
```

----------------------------------------

TITLE: Implementing Scoped CSS Reset with ScopedCssBaseline in Joy UI
DESCRIPTION: This snippet shows how to apply CSS baseline styles only to specific children using the ScopedCssBaseline component. It demonstrates referencing the component for color scheme application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/css-baseline/css-baseline.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import * as React from 'react';
import { CssVarsProvider } from '@mui/joy/styles';
import ScopedCssBaseline from '@mui/joy/ScopedCssBaseline';
import MyApp from './MyApp';

export default function MyApp() {
  const [root, setRoot] = React.useState(null);
  return (
    {/* target the node to ScopedCssBaseline's div */}
    <CssVarsProvider colorSchemeNode={root}>
      {/* must be used under CssVarsProvider */}
      <ScopedCssBaseline ref={(element) => setRoot(element)}>
        {/* The rest of your application */}
        <MyApp />
      </ScopedCssBaseline>
    </CssVarsProvider>
  );
}
```

----------------------------------------

TITLE: Replacing theme.breakpoints.width in Material-UI v5
DESCRIPTION: This snippet demonstrates how to replace the removed theme.breakpoints.width utility with theme.breakpoints.values to get the same values in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_50

LANGUAGE: diff
CODE:
```
-theme.breakpoints.width('md')
+theme.breakpoints.values.md
```

----------------------------------------

TITLE: Customizing Rating Component in React with Material-UI
DESCRIPTION: Provides examples of customizing the Rating component. This snippet showcases various ways to override the default styling and behavior.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/rating/rating.md#2025-04-22_snippet_4

LANGUAGE: JSX
CODE:
```
{"demo": "CustomizedRating.js"}
```

----------------------------------------

TITLE: Using Channel Tokens in Typography Component - Joy UI
DESCRIPTION: Demonstrates how to use channel tokens to create translucent colors with rgba in Joy UI Typography component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-colors/theme-colors.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import Typography from '@mui/joy/Typography';

<Typography
  sx={theme => ({
    color: `rgba(${theme.vars.palette.primary.mainChannel} / 0.72)`,
  })}
>
```

----------------------------------------

TITLE: Responsive Spacing in Masonry
DESCRIPTION: Demonstrates responsive spacing implementation in Masonry layouts.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
ResponsiveSpacing.js
```

----------------------------------------

TITLE: Applying Z-Index in Material-UI with JSX
DESCRIPTION: Demonstrates how to apply z-index values using Material-UI's Box component and the sx prop. The example shows setting z-index to predefined values like 'tooltip' and 'modal'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/positions/positions.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Box sx={{ zIndex: 'tooltip' }}>
<Box sx={{ zIndex: 'modal' }}>
```

----------------------------------------

TITLE: Importing Material UI Grid v1 and v2 in JavaScript
DESCRIPTION: Demonstrates the import statements for both the legacy Grid v1 (`@mui/material/GridLegacy`) and the new Grid v2 (`@mui/material/Grid`) components in a JavaScript/React project using Material UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/build-layouts-faster-with-grid-v2.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
import Grid from '@mui/material/GridLegacy'; // The legacy grid, a.k.a. Grid v1
import Grid from '@mui/material/Grid'; // The updated grid, a.k.a. Grid v2
```

----------------------------------------

TITLE: Implementing Dot Badge in React Material-UI
DESCRIPTION: Shows how to create a dot-style badge for notification purposes without displaying a count.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_6

LANGUAGE: JSX
CODE:
```
DotBadge.js
```

----------------------------------------

TITLE: Deletable Chip Component
DESCRIPTION: Implementation of chips with delete functionality using onDelete prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/chips/chips.md#2025-04-22_snippet_2

LANGUAGE: JavaScript
CODE:
```
import * as React from 'react';
import Chip from '@mui/material/Chip';
import Stack from '@mui/material/Stack';

export default function DeletableChips() {
  const handleDelete = () => {
    console.info('You clicked the delete icon.');
  };

  return (
    <Stack direction="row" spacing={1}>
      <Chip label="Deletable" onDelete={handleDelete} />
      <Chip label="Deletable" variant="outlined" onDelete={handleDelete} />
    </Stack>
  );
}
```

----------------------------------------

TITLE: Installing Material UI Next.js Dependencies with yarn
DESCRIPTION: Command to install the required dependencies for integrating Material UI with Next.js App Router using yarn package manager.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
yarn add @mui/material-nextjs @emotion/cache
```

----------------------------------------

TITLE: Customizing CSS Variable Prefix with createTheme (any) - JS
DESCRIPTION: Configures the `createTheme` function to set a custom prefix (e.g., 'any') for generated CSS variables instead of the default '--mui'. This requires enabling the `cssVariables` option within the theme configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#_snippet_0

LANGUAGE: JS
CODE:
```
createTheme({ cssVariables: { cssVarPrefix: 'any' } });

// generated stylesheet:
// --any-palette-primary-main: ...;
```

----------------------------------------

TITLE: Installing Material UI Next.js Dependencies for Pages Router with npm
DESCRIPTION: Command to install the required dependencies for integrating Material UI with Next.js Pages Router using npm package manager.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
npm install @mui/material-nextjs @emotion/cache @emotion/server
```

----------------------------------------

TITLE: Updating ListItemText Theme Default Props
DESCRIPTION: Updates MuiListItemText theme configuration to use the new slotProps API instead of primaryTypographyProps and secondaryTypographyProps.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_40

LANGUAGE: diff
CODE:
```
 MuiListItemText: {
   defaultProps: {
-  primaryTypographyProps:primaryTypographyProps
+  slotProps:{ primary: primaryTypographyProps }
-  secondaryTypographyProps:secondaryTypographyProps
+  slotProps:{ secondary: secondaryTypographyProps }
  },
 },
```

----------------------------------------

TITLE: Using Skeleton with Typography in React JSX
DESCRIPTION: This example shows how to use the Skeleton component with Typography, demonstrating its ability to infer dimensions from typography elements.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/skeleton/skeleton.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Typography variant="h1">{loading ? <Skeleton /> : 'h1'}</Typography>
```

----------------------------------------

TITLE: Configuring Theme for Data-Attribute Color Scheme Selection - JS
DESCRIPTION: Sets up the Material UI theme to use data attributes (`[data-light]`, `[data-dark]`) on the `<html>` element for toggling between light and dark color schemes. This requires enabling `colorSchemes` for both modes and setting `colorSchemeSelector` to 'data' within the `cssVariables` option.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#_snippet_3

LANGUAGE: JS
CODE:
```
createTheme({
  colorSchemes: { light: true, dark: true },
  cssVariables: {
    colorSchemeSelector: 'data'
  }
});

// CSS Result
[data-light] { ... }
[data-dark] { ... }
```

----------------------------------------

TITLE: Creating Component Slots with Styled API in Material UI
DESCRIPTION: This snippet demonstrates how to create component slots using the styled API in Material UI. It defines three slots: root, value, and unit, each with specific styling applied.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import * as React from 'react';
import { styled } from '@mui/material/styles';

const StatRoot = styled('div', {
  name: 'MuiStat', // The component name
  slot: 'root', // The slot name
})(({ theme }) => ({
  display: 'flex',
  flexDirection: 'column',
  gap: theme.spacing(0.5),
  padding: theme.spacing(3, 4),
  backgroundColor: theme.palette.background.paper,
  borderRadius: theme.shape.borderRadius,
  boxShadow: theme.shadows[2],
  letterSpacing: '-0.025em',
  fontWeight: 600,
}));

const StatValue = styled('div', {
  name: 'MuiStat',
  slot: 'value',
})(({ theme }) => ({
  ...theme.typography.h3,
}));

const StatUnit = styled('div', {
  name: 'MuiStat',
  slot: 'unit',
})(({ theme }) => ({
  ...theme.typography.body2,
  color: theme.palette.text.secondary,
}));
```

----------------------------------------

TITLE: Implementing Colored Timeline in React
DESCRIPTION: Shows how to use different colors from the theme palette for TimelineDot components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_4

LANGUAGE: JavaScript
CODE:
```
{"demo": "ColorsTimeline.js"}
```

----------------------------------------

TITLE: Updating Input Theme Default Props
DESCRIPTION: Updates MuiInput theme configuration to use the new slots/slotProps API instead of components/componentsProps.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_55

LANGUAGE: diff
CODE:
```
 MuiInput: {
   defaultProps: {
-    components: { Input: CustomInput, Root: CustomRoot }
-    componentsProps: { input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }
+    slots: { input: CustomInput, root: CustomRoot },
+    slotProps: { input: { id: 'test-input-id' }, root: { id: 'test-root-id' } },
   },
 },
```

----------------------------------------

TITLE: Generic Component Prop Renaming in React
DESCRIPTION: A generic codemod to rename any component prop. This versatile codemod can be used to update prop names across various components when migrating to Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_76

LANGUAGE: diff
CODE:
```
-<Component prop="value" />
-<Component prop />
+<Component newProp="value" />
+<Component newProp />
```

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/component-rename-prop <path> -- --component=Grid --from=prop --to=newProp
```

----------------------------------------

TITLE: Customizing Slider Steps in React
DESCRIPTION: Shows how to adjust the default step increment and shift step for a discrete slider in Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_3

LANGUAGE: JSX
CODE:
```
{"demo": "DiscreteSliderSteps.js"}
```

----------------------------------------

TITLE: Configuring Vite for MUI System v7 Modern Bundle (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates configuring Vite for the MUI System v7 modern bundle. Adding `'mui-modern'` to the `resolve.conditions` array instructs Vite to use the optimized bundle, excluding legacy browser code for reduced size. Ensure it's placed appropriately within the existing conditions.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
// vite.config.js
{
  resolve: {
    conditions: ['mui-modern', 'module', 'browser', 'development|production']
  }
}
```

----------------------------------------

TITLE: Markdown Service and Sponsorship Documentation
DESCRIPTION: Comprehensive markdown documentation detailing MUI's sponsorship structure, key service providers, and tier-specific benefits including logo placement and visibility across various platforms.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/discover-more/backers/backers.md#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
### What's the difference between Open Collective and the for-profit?

Funds donated via Open Collective are managed transparently and aimed to sustain the MIT projects.
The MUI non-profit organzation benefits from the Open Collective's fiscal sponsorship (hosted as a non-profit), in exchange for 10% of the donations.

Funds transferred to the MUI for-profit organization support the company's mission.

## Services

These great services sponsor our open-source projects:

<span class="only-light-mode">
  <img src="/static/readme/github-lightmode.svg" alt="GitHub logo" loading="lazy" width="300" height="107" style="width:80px; display: block; margin-bottom: 2px;">
</span>
<span class="only-dark-mode">
  <img src="/static/readme/github-darkmode.svg" alt="GitHub logo" loading="lazy" width="300" height="107" style="width:80px; display: block; margin-bottom: 2px;">
</span>

[GitHub](https://github.com/) lets us host the Git repository and coordinate contributions.

<span class="only-light-mode">
  <img src="/static/readme/netlify-lightmode.svg" alt="Netlify logo" loading="lazy" width="180" height="49" style="width: 100px; margin-top: 1.2rem; margin-bottom: 2px; display: block;">
</span>
<span class="only-dark-mode">
  <img src="/static/readme/netlify-darkmode.svg" alt="Netlify logo" loading="lazy" width="180" height="49" style="width: 100px; margin-top: 1.2rem; margin-bottom: 2px; display: block;">
</span>

[Netlify](https://www.netlify.com/) lets us distribute the documentation.

<span class="only-light-mode">
  <img src="/static/readme/browserstack-lightmode.svg" alt="BrowserStack logo" loading="lazy" width="180" height="32" style="width: 140px; margin-top: 1.2rem; margin-bottom: 2px; display: block;">
</span>
<span class="only-dark-mode">
  <img src="/static/readme/browserstack-darkmode.svg" alt="BrowserStack logo" loading="lazy" width="180" height="32" style="width: 140px; margin-top: 1.2rem; margin-bottom: 2px; display: block;">
</span>

[BrowserStack](https://www.browserstack.com/) lets us test in real browsers.

<img loading="lazy" alt="CodeCov logo" src="https://avatars.githubusercontent.com/u/8226205?s=210" width="36" height="36" style="margin-top: 1.2rem; margin-bottom: 2px; display: block;">

[CodeCov](https://about.codecov.io/) lets us monitor test coverage.

## Tier benefits

### Diamond

Your organization logo will be prominently featured:

- on the sidebar of all content pages (4m+ sessions, 900k+ unique visitors/month)
- the [homepage](https://mui.com/#sponsors) (500k+ pageviews and 150k+ unique visitors/month)
- the [README.md](https://github.com/mui/material-ui#sponsors) (80k+ unique visitors/month)
- the [Diamond sponsor list](#diamond-sponsors)

Please contact us at sponsoring@mui.com before subscribing to this tier to get preliminary approval.

### Gold

Your organization logo will be placed in:

- the [homepage](https://mui.com/#sponsors) (500k+ pageviews and 150k+ unique visitors/month)
- the [README.md](https://github.com/mui/material-ui#sponsors) (80k+ unique visitors/month)
- the [Gold sponsor list](#gold-sponsors)

\*for backlink sponsors, your logo won't be visible.

### Silver

Your organization logo will be placed in the [Silver sponsor list](#silver-sponsors).

### Bronze

Your organization logo will be placed in the [Bronze sponsor list](#bronze-sponsors).

### Backers

Help support more open-source development by becoming a Backer.
We'll thank you by including your avatar in the [backers list](#backers).
```

----------------------------------------

TITLE: Wrapping Disabled Button for Custom Cursor in React
DESCRIPTION: Demonstrates an alternative approach to customizing the cursor for disabled buttons by wrapping the Button component in a span element with a custom style.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/buttons/buttons.md#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
<span style={{ cursor: 'not-allowed' }}>
  <Button component={Link} disabled>
    disabled
  </Button>
</span>
```

----------------------------------------

TITLE: Customizing Textarea Focus Ring with CSS Variables
DESCRIPTION: Shows how to customize the Textarea's focus ring appearance by setting CSS variables through the sx prop. This allows controlling the position, size, and color of the focus ring.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/textarea/textarea.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Textarea sx={{ '&:focus-within::before': { boxShadow: '...your custom value' } }} />
```

----------------------------------------

TITLE: Customizing Avatar Image Slot with Next.js
DESCRIPTION: TypeScript example showing how to customize the Avatar component's img slot using Next.js Image component with proper type safety.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/overriding-component-structure/overriding-component-structure.md#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
import Image, { ImageProps } from 'next/image';
import Avatar, { AvatarProps } from '@mui/material/Avatar';

<Avatar
  slots={{
    img: Image,
  }}
  slotProps={
    {
      img: {
        src: 'https://example.com/image.jpg',
        alt: 'Image',
        width: 40,
        height: 40,
        blurDataURL: 'data:image/png;base64',
      } satisfies ImageProps,
    } as AvatarProps['slotProps']
  }
/>;
```

----------------------------------------

TITLE: Quilted Image List Implementation in Material-UI
DESCRIPTION: Shows how to create a quilted image list layout with varied container sizes and ratios to establish visual hierarchy.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/image-list/image-list.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
{"demo": "QuiltedImageList.js"}
```

----------------------------------------

TITLE: Applying typography styles with the sx prop in Joy UI
DESCRIPTION: Example of using the sx prop with the typography property to apply theme typography styles to any component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-typography/theme-typography.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
// to apply the `theme.typography['body-sm']` styles:
<Box sx={{ typography: 'body-sm' }}>Small text</Box>
```

----------------------------------------

TITLE: Updating Tooltip interactivity in React
DESCRIPTION: Changes Tooltip to be interactive by default and renames the prop to disableInteractive to reflect the new default behavior.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_45

LANGUAGE: diff
CODE:
```
-<Tooltip>
+<Tooltip disableInteractive>

 # Interactive tooltips no longer need the `interactive` prop.
-<Tooltip interactive>
+<Tooltip>
```

----------------------------------------

TITLE: Optimizing Accordion Performance
DESCRIPTION: Configuration for unmounting Accordion content when collapsed to improve performance.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/accordion/accordion.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Accordion slotProps={{ transition: { unmountOnExit: true } }} />
```

----------------------------------------

TITLE: Rendering RichTreeView Component with Multi-Select - React JSX
DESCRIPTION: This code snippet depicts usage of the RichTreeView React component using a 'items' prop populated with the hierarchical dataset 'myDataSet'. The 'multiSelect' prop enables selection of multiple tree items at once. Requires the RichTreeView component from MUI X v7, the defined dataset, and a React environment. The expected input is a properly formatted hierarchical data array; output is a rendered tree view component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7.md#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
<RichTreeView items={myDataSet} multiSelect />
```

----------------------------------------

TITLE: Converting to top-level imports from @material-ui/core
DESCRIPTION: This codemod converts individual submodule imports from @material-ui/core to consolidated root-level imports, which can help with bundle optimization in some cases.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_118

LANGUAGE: diff
CODE:
```
-import List from '@material-ui/core/List';
-import { withStyles } from '@material-ui/core/styles';
+import { List, withStyles } from '@material-ui/core';
```

----------------------------------------

TITLE: Vertical ButtonGroup Orientation
DESCRIPTION: Shows how to create a vertical button group using the orientation prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/button-group/button-group.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<ButtonGroup orientation="vertical" aria-label="vertical button group">
  <Button>Button 1</Button>
  <Button>Button 2</Button>
  <Button>Button 3</Button>
</ButtonGroup>
```

----------------------------------------

TITLE: Importing Adapter for date-fns v3.x - React JavaScript
DESCRIPTION: This code snippet demonstrates how to import the AdapterDateFns adapter for usage with date-fns v3.x in MUI X Date Pickers. Prerequisites include installation of '@mui/x-date-pickers' and 'date-fns@^3'. The import exposes date-fns v3-specific parsing and formatting through the MUI X API. Use this adapter as the 'dateAdapter' prop with Date/Time Picker components to ensure compatibility with date-fns v3. Limitations: AdapterDateFnsV3 is not compatible with earlier date-fns versions.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7-beta.md#2025-04-22_snippet_3

LANGUAGE: JSX
CODE:
```
// date-fns v3.x
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV3';
```

----------------------------------------

TITLE: Creating Styled Component Slots with Joy UI
DESCRIPTION: Demonstrates how to create styled component slots using Joy UI's styled API with name and slot parameters for a statistics component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import * as React from 'react';
import { styled } from '@mui/joy/styles';

const StatRoot = styled('div', {
  name: 'JoyStat', // The component name
  slot: 'root', // The slot name
})(({ theme }) => ({
  display: 'flex',
  flexDirection: 'column',
  gap: theme.spacing(0.5),
  padding: theme.spacing(3, 4),
  backgroundColor: theme.vars.palette.background.surface,
  borderRadius: theme.vars.radius.sm,
  boxShadow: theme.vars.shadow.md,
}));

const StatValue = styled('div', {
  name: 'JoyStat',
  slot: 'value',
})(({ theme }) => ({
  ...theme.typography.h2,
}));

const StatUnit = styled('div', {
  name: 'JoyStat',
  slot: 'unit',
})(({ theme }) => ({
  ...theme.typography['body-sm'],
  color: theme.vars.palette.text.tertiary,
}));
```

----------------------------------------

TITLE: Installing Material Icons with Yarn
DESCRIPTION: Command to install Material Icons and Material UI packages using Yarn, with required dependency workaround using resolutions.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/icon-libraries/icon-libraries.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
yarn add @mui/icons-material @mui/material
```

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "@mui/material": "npm:@mui/joy@latest"
  },
  "resolutions": {
    "@mui/material": "npm:@mui/joy@latest"
  }
}
```

----------------------------------------

TITLE: Updating Date and Time Pickers imports from @mui/lab to @mui/x-date-pickers
DESCRIPTION: This codemod updates the imports of Date and Time Pickers from '@mui/lab' to '@mui/x-date-pickers' and '@mui/x-date-pickers-pro'. It helps migrate to the new package structure.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_69

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/date-pickers-moved-to-x <path>
```

----------------------------------------

TITLE: Configuring Stack Theme with Flexbox Gap
DESCRIPTION: Theme configuration to enable flexbox gap spacing implementation for all Stack instances.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/stack/stack.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
import { ThemeProvider, createTheme } from '@mui/material/styles';
import Stack from '@mui/material/Stack';

const theme = createTheme({
  components: {
    MuiStack: {
      defaultProps: {
        useFlexGap: true,
      },
    },
  },
});

function App() {
  return (
    <ThemeProvider theme={theme}>
      <Stack>…</Stack> {/* uses flexbox gap by default */}
    </ThemeProvider>
  );
}
```

----------------------------------------

TITLE: Installing/Running - Material UI/Next.js Example - Bash
DESCRIPTION: These Bash commands install the project dependencies using npm and then start the Next.js development server. Running these commands after downloading the code is necessary to run the example application locally.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs-pages-router/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Basic Container Query Usage in Material UI
DESCRIPTION: Demonstrates basic usage of container queries using theme.containerQueries with breakpoint values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/container-queries/container-queries.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
theme.containerQueries.up('sm'); // => '@container (min-width: 600px)'
```

----------------------------------------

TITLE: Handling Text Overflow in Material-UI
DESCRIPTION: Examples of textOverflow property usage to control how text behaves when it exceeds its container. This demonstrates clipping text or showing ellipsis when text overflows.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
<Box component="div" sx={{ textOverflow: 'clip' }}>
  Lorem Ipsum is simply dummy text
</Box>
<Box component="div" sx={{ textOverflow: 'ellipsis' }}>
  Lorem Ipsum is simply dummy text
</Box>
```

----------------------------------------

TITLE: Implementing Numbered Lists with Decimal Markers
DESCRIPTION: Shows how to create a numbered list using the component and marker props together to achieve a decimal-style ordered list.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
<List component="ol" marker="decimal">
```

----------------------------------------

TITLE: Using the Default DatePicker with Integrated Field in MUI X v6 (JSX)
DESCRIPTION: This code demonstrates the simplified usage of the `DatePicker` component in MUI X v6. It shows importing the `DatePicker` and rendering it with a label. Notably, it highlights that the new `DatePicker` uses the improved 'Field' component internally by default, eliminating the need to explicitly provide a `renderInput` prop with a `TextField` for standard use cases.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/v6-beta-pickers.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import { DatePicker } from '@mui/x-date-pickers/DatePicker';

<DatePicker label="My first v6 picker" />;
```

----------------------------------------

TITLE: Alert Component HTML Structure
DESCRIPTION: The basic HTML structure of the Alert component, showing its root element with the 'alert' role for accessibility.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/alert/alert.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<div role="alert" class="MuiAlert-root">
  <!-- Alert contents -->
</div>
```

----------------------------------------

TITLE: Updating Tabs default prop values in React
DESCRIPTION: Changes the default indicatorColor and textColor prop values to 'primary' for Tabs component, and shows how to keep v4 color styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_33

LANGUAGE: diff
CODE:
```
-<Tabs />
+<Tabs indicatorColor="secondary" textColor="inherit" />
```

----------------------------------------

TITLE: Configuring Shadow Ring in Joy UI Theme
DESCRIPTION: Shows how to customize the shadow ring for both light and dark color schemes in the Joy UI theme. The shadow ring creates a consistent outline effect for shadowed elements.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-shadow/theme-shadow.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
import { extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  colorSchemes: {
    light: {
      // This creates a 1px box-shadow.
      shadowRing: '0 0 0 1px rgba(0 0 0 / 0.1)',
    },
    dark: {
      shadowChannel: '0 0 0 1px rgba(255 255 255 / 0.1)',
    },
  },
});

// Then, pass it to `<CssVarsProvider theme={theme}>`.
```

----------------------------------------

TITLE: Configuring Webpack for MUI System v7 Modern Bundle (JavaScript)
DESCRIPTION: This JavaScript snippet shows how to configure Webpack to leverage the modern bundle in MUI System v7. By adding `'mui-modern'` to the `resolve.conditionNames` array, Webpack will prioritize the bundle that excludes legacy browser support, resulting in a potentially smaller application size.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
// webpack.config.js
{
  resolve: {
    conditionNames: ['mui-modern', '...'],
  }
}
```

----------------------------------------

TITLE: Implementing Basic Rating in React with Material-UI
DESCRIPTION: Demonstrates the basic usage of the Rating component. This snippet shows how to render a simple rating control.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/rating/rating.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
{"demo": "BasicRating.js"}
```

----------------------------------------

TITLE: Creating Half-Star Rating in React with Material-UI
DESCRIPTION: Shows how to implement a rating component with half-star precision. The precision prop is used to define the minimum increment value change allowed.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/rating/rating.md#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
{"demo": "HalfRating.js"}
```

----------------------------------------

TITLE: Split Button Implementation in React
DESCRIPTION: Demonstrates how to create a split button using ButtonGroup component with dropdown functionality.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button-group/button-group.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
{"demo": "SplitButton.js"}
```

----------------------------------------

TITLE: Custom Separator Button Group
DESCRIPTION: Implementation showing how to create custom separators between buttons using the Divider component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button-group/button-group.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
{"demo": "CustomSeparatorButtonGroup.js"}
```

----------------------------------------

TITLE: Installing MUI Lab Package using NPM
DESCRIPTION: Command to install the @mui/lab package which contains experimental Material-UI components.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-lab/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install @mui/lab
```

----------------------------------------

TITLE: Installing Dependencies and Running - Bash
DESCRIPTION: These commands install the project's dependencies using npm install and then start the development server using npm start. This makes the example application accessible in a browser.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/joy-ui-cra-ts/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm start
```

----------------------------------------

TITLE: Creating Reverse Alternating Timeline in React
DESCRIPTION: Demonstrates a timeline that displays events on alternating sides in reverse order.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_3

LANGUAGE: JavaScript
CODE:
```
{"demo": "AlternateReverseTimeline.js"}
```

----------------------------------------

TITLE: Theme Composition with Dependencies
DESCRIPTION: Shows how to create a theme in multiple steps when theme options depend on other theme values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theming/theming.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
import { createTheme } from '@mui/material/styles';

let theme = createTheme({
  palette: {
    primary: {
      main: '#0052cc',
    },
    secondary: {
      main: '#edf2ff',
    },
  },
});

theme = createTheme(theme, {
  palette: {
    info: {
      main: theme.palette.secondary.main,
    },
  },
});
```

----------------------------------------

TITLE: Configuring Pigment CSS Theme - Diff
DESCRIPTION: Diff demonstrating how to add theme configuration to the `pigmentConfig` object in your Next.js or Vite config, importing `createTheme` from `@mui/material` and enabling CSS variables.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_7

LANGUAGE: diff
CODE:
```
+import { createTheme } from '@mui/material';

 const pigmentConfig = {
   transformLibraries: ['@mui/material'],
+  theme: createTheme({
+    cssVariables: true,
+    /* other parameters, if any */
+  }),
 };
```

----------------------------------------

TITLE: CSS Specificity Example for Styling MUI Components
DESCRIPTION: Example of a React component using the Chip component with a CSS class for styling the delete icon. This demonstrates how to apply custom styles to Material UI components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_11

LANGUAGE: js
CODE:
```
import './style.css';
import Chip from '@mui/material/Chip';

const ChipWithGreenIcon = () => (
  <Chip
    classes={{ deleteIcon: 'green' }}
    label="delete icon is green"
    onDelete={() => {}}
  />
);
```

----------------------------------------

TITLE: Running Grid Codemod for v7 Migration
DESCRIPTION: Command to run the Material UI codemod for upgrading from the deprecated grid to Grid v2, which automates the necessary changes to component imports and props.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx @mui/codemod v7.0.0/grid-props <path/to/folder>
```

----------------------------------------

TITLE: Enabling Kept Mounted Modal in React
DESCRIPTION: This code shows how to keep the Modal content mounted even when closed, which can be useful for SEO or rendering expensive component trees.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/modal/modal.md#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
<Modal keepMounted />
```

----------------------------------------

TITLE: Configuring Third-party Icons with Joy UI
DESCRIPTION: Example of configuring global styles for third-party icons to work with Joy UI, including CSS variables for color, margin, and font size.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/icon-libraries/icon-libraries.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
import { CssVarsProvider } from '@mui/joy/styles';
import GlobalStyles from '@mui/joy/GlobalStyles';

function App() {
  return (
    <CssVarsProvider>
      <GlobalStyles styles={{
        '{selector}': {
          color: "var(--Icon-color)",
          margin: "var(--Icon-margin)",
          fontSize: "var(--Icon-fontSize, 20px)",
          width: "1em",
          height: "1em"
        }
      }}>
    </CssVarsProvider>
  )
}
```

----------------------------------------

TITLE: Popper State Management with Popup State
DESCRIPTION: Demonstrates using material-ui-popup-state library to manage Popper state with less boilerplate code.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/popper/popper.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
import * as React from 'react';
import Typography from '@mui/material/Typography';
import Box from '@mui/material/Box';
import Popper from '@mui/material/Popper';
import PopupState, { bindToggle, bindPopper } from 'material-ui-popup-state';

export default function PopperPopupState() {
  return (
    <PopupState variant="popper" popupId="demo-popup-popper">
      {(popupState) => (
        <div>
          <button variant="contained" {...bindToggle(popupState)}>
            Toggle Popper
          </button>
          <Popper {...bindPopper(popupState)} transition>
            <Box sx={{ border: 1, p: 1, bgcolor: 'background.paper' }}>
              <Typography sx={{ p: 2 }}>The content of the Popper.</Typography>
            </Box>
          </Popper>
        </div>
      )}
    </PopupState>
  );
}
```

----------------------------------------

TITLE: Responsive Button Group Spacing
DESCRIPTION: Example of implementing responsive spacing in ButtonGroup using breakpoint objects.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button-group/button-group.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<ButtonGroup spacing={{ xs: 0, sm: 1, md: '2rem' }}>...</ButtonGroup>
```

----------------------------------------

TITLE: Creating a Custom Aggregation Function in MUI X Data Grid
DESCRIPTION: Implements a custom aggregation function that returns the first value in alphabetical order from a column of string values. The function defines the aggregation logic, display label, and which column types it applies to.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/aggregation-functions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const firstAlphabeticalAggregation: GridAggregationFunction<
  string,
  string | null
> = {
  apply: (params) => {
    if (params.values.length === 0) {
      return null;
    }
    const sortedValue = params.values.sort((a = '', b = '') =>
      a.localeCompare(b),
    );
    return sortedValue[0];
  },
  // The `label` defines what's displayed in the column header when this
  // aggregation is active.
  label: 'First Alphabetical',
  // The `types` property defines which type of columns can use this
  // aggregation function. Here, we only want to propose this aggregation
  // function for `string` columns. If not defined, aggregation will be
  // available for all column types.
  columnTypes: ['string'],
};
```

----------------------------------------

TITLE: Using Null in MUI Breakpoints Array (JSX)
DESCRIPTION: Demonstrates defining responsive width using an array for MUI's `sx` prop. Shows how to skip specific breakpoints in the array using `null` values, applying the width only at larger breakpoints (starting from the third item in this example). Requires Material-UI's Box component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/usage/usage.md#_snippet_7

LANGUAGE: jsx
CODE:
```
<Box sx={{ width: [null, null, 300] }}>This box has a responsive width.</Box>
```

----------------------------------------

TITLE: Renaming Grid Justify Prop in React
DESCRIPTION: Renames the 'justify' prop to 'justifyContent' on Grid components to align with CSS property naming.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_16

LANGUAGE: diff
CODE:
```
-<Grid justify="center">
+<Grid justifyContent="center">
```

----------------------------------------

TITLE: Menu List Composition
DESCRIPTION: Custom menu composition using MenuList component with Popper for positioning.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_5

LANGUAGE: JSX
CODE:
```
{"demo": "MenuListComposition.js", "bg": true}
```

----------------------------------------

TITLE: Using Link Component as a Button in Joy UI
DESCRIPTION: Demonstrates how to use the Link component as a button when there's no meaningful href or when the design resembles a button more than a link. It uses the 'component' prop to change the rendered element.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/link/link.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
<Link
  component="button"
  onClick={() => {
    // ...process something
  }}
>
  Do something
</Link>
```

----------------------------------------

TITLE: Importing useButton Hook from MUI Base
DESCRIPTION: Demonstrates importing the useButton hook from the unstyled components package. This hook provides button functionality without styles for maximum customization.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q3-update.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import { useButton } from '@mui/base/ButtonUnstyled';
```

----------------------------------------

TITLE: Restoring Old MUI JoyIconButton Default Props using extendTheme in JavaScript
DESCRIPTION: Provides a theme customization snippet using `extendTheme` to set the default props for the `JoyIconButton` component back to their older values. It sets the default `variant` to 'soft' and the default `color` to 'primary'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_18

LANGUAGE: javascript
CODE:
```
extendTheme({
  components: {
    JoyIconButton: {
      defaultProps: {
        variant: 'soft',
        color: 'primary',
      },
    },
  },
});
```

----------------------------------------

TITLE: Illustrating Palette vs ColorSchemes Priority in Material UI Theme - JavaScript
DESCRIPTION: This snippet demonstrates a potential conflict in Material UI theme configuration when both a top-level `palette` and nested `palette` objects within `colorSchemes` are provided using `createTheme`. It highlights that the root `palette` configuration will override any identical properties defined within the color scheme palettes, making the nested definitions ineffective for those specific properties.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/palette/palette.md#_snippet_3

LANGUAGE: js
CODE:
```
const theme = createTheme({
  palette: {
    primary: {
      main: '...',
    },
  },
  colorSchemes: {
    light: {
      // This will be replaced by the palette defined above
      palette: {
        primary: {
          main: '...',
        },
      },
    },
    dark: { ... },
  },
});
```

----------------------------------------

TITLE: Migrating Date and Time Picker Imports in JavaScript
DESCRIPTION: This snippet demonstrates how to update import statements when migrating Date and Time Picker components from @mui/lab to @mui/x-date-pickers or @mui/x-date-pickers-pro. It shows the changes needed for both individual and bulk imports.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/lab-date-pickers-to-mui-x.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
-import DatePicker from '@mui/lab/DatePicker';
+import { DatePicker } from '@mui/x-date-pickers/DatePicker';

-import DateRangePicker from '@mui/lab/DateRangePicker';
+import { DateRangePicker } from '@mui/x-date-pickers-pro/DateRangePicker';

-import { DatePicker, DateRangePicker } from '@mui/lab';
+import { DatePicker } from '@mui/x-date-pickers';
+import { DateRangePicker } from '@mui/x-date-pickers-pro';
// DatePicker is also available in `@mui/x-date-pickers-pro`
```

----------------------------------------

TITLE: Using Custom Variant Values with Joy UI Components
DESCRIPTION: Demonstrates how to use custom variant values with Joy UI components after defining them in the theme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_12

LANGUAGE: jsx
CODE:
```
<Sheet variant="glass">Glassmorphism</Sheet>
```

----------------------------------------

TITLE: Implementing Value Normalization for Progress Components in React
DESCRIPTION: Function to normalize values from any range to 0-100 scale for progress components. Includes a React component example that uses the normalization function for both circular and linear progress indicators.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/progress/progress.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
// MIN = Minimum expected value
// MAX = Maximum expected value
// Function to normalise the values (MIN / MAX could be integrated)
const normalise = (value) => ((value - MIN) * 100) / (MAX - MIN);

// Example component that utilizes the `normalise` function at the point of render.
function Progress(props) {
  return (
    <React.Fragment>
      <CircularProgress variant="determinate" value={normalise(props.value)} />
      <LinearProgress variant="determinate" value={normalise(props.value)} />
    </React.Fragment>
  );
}
```

----------------------------------------

TITLE: Migrating Grid Size and Offset Props in React
DESCRIPTION: Updates to Grid component props in v6, replacing individual breakpoint props with consolidated size and offset objects. This snippet shows how to update from the previous API to the new structure.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_6

LANGUAGE: diff
CODE:
```
 <Grid
-  xs={12}
-  sm={6}
-  xsOffset={2}
-  smOffset={3}
+  size={{ xs: 12, sm: 6 }}
+  offset={{ xs: 2, sm: 3 }}
 >
```

----------------------------------------

TITLE: TypeScript Styled Component Props
DESCRIPTION: TypeScript interface definition for extending component props with styled utility
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/how-to-customize/how-to-customize.md#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
import * as React from 'react';
import { styled } from '@mui/material/styles';
import Slider, { SliderProps } from '@mui/material/Slider';

interface StyledSliderProps extends SliderProps {
  success?: boolean;
}

const StyledSlider = styled(Slider, {
  shouldForwardProp: (prop) => prop !== 'success',
})<StyledSliderProps>(({ success, theme }) => ({
  ...(success &&
    {
      // the overrides added when the new prop is used
    }),
}));
```

----------------------------------------

TITLE: Adding TypeScript Document Props
DESCRIPTION: TypeScript configuration for adding DocumentHeadTagsProps to the Document component props interface.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_17

LANGUAGE: diff
CODE:
```
+import type { DocumentHeadTagsProps } from '@mui/material-nextjs/v15-pagesRouter';
 // or `v1X-pagesRouter` if you are using Next.js v1X

+export default function MyDocument(props: DocumentProps & DocumentHeadTagsProps) {
   ...
 }
```

----------------------------------------

TITLE: Adding new scroll button props to Tabs in React
DESCRIPTION: Splits the API that controls scroll buttons into two props: scrollButtons and allowScrollButtonsMobile for Tabs component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_35

LANGUAGE: diff
CODE:
```
-<Tabs scrollButtons="on" />
-<Tabs scrollButtons="desktop" />
-<Tabs scrollButtons="off" />
+<Tabs scrollButtons allowScrollButtonsMobile />
+<Tabs scrollButtons />
+<Tabs scrollButtons={false} />
```

----------------------------------------

TITLE: Restoring Old MUI Joy UI Tabs Design using extendTheme in JavaScript
DESCRIPTION: Demonstrates how to revert the MUI Joy UI `Tabs` component design to its previous appearance using `extendTheme`. It overrides default props (`variant`, `disableUnderline`, `disableIndicator`) and applies specific style overrides to `JoyTabList` and `JoyTab` components to replicate the old look and feel.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_19

LANGUAGE: javascript
CODE:
```
extendTheme({
  components: {
    JoyTabList: {
      defaultProps: {
        variant: 'soft',
        disableUnderline: true,
      },
      styleOverrides: {
        root: {
          gap: '0.25rem',
          padding: '0.25rem',
          '--List-padding': '0.25rem',
          borderRadius: 'var(--joy-radius-xl)',
          '--List-radius': 'var(--joy-radius-xl)',
        },
      },
    },
    JoyTab: {
      defaultProps: {
        disableIndicator: true,
      },
      styleOverrides: {
        root: {
          '&[aria-selected="true"]': {
            boxShadow: 'var(--joy-shadow-sm)',
            backgroundColor: 'var(--joy-palette-background-surface)',
          },
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Importing Inter Font in React
DESCRIPTION: Code snippet showing how to import the Inter font from Fontsource in a React application entry point.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/installation/installation.md#2025-04-22_snippet_3

LANGUAGE: tsx
CODE:
```
import '@fontsource/inter';
```

----------------------------------------

TITLE: Context Menu Implementation
DESCRIPTION: Right-click context menu implementation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_11

LANGUAGE: JSX
CODE:
```
{"demo": "ContextMenu.js"}
```

----------------------------------------

TITLE: Integrating ClassNameGenerator in Next.js App Router Diff
DESCRIPTION: This diff demonstrates how to import the `ClassNameGenerator` setup file (`MuiClassNameSetup.js`) into the root `page.js` file in a Next.js App Router project, ensuring it runs before component imports.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/classname-generator/classname-generator.md#_snippet_9

LANGUAGE: diff
CODE:
```
+'use client';
+import './MuiClassNameSetup';
 import * as React from 'react';
 import Button from '@mui/material/Button';

 export default function Page() {
   return (
     <Button>Text</Button>
   );
 }
```

----------------------------------------

TITLE: Importing MUI X date-fns Adapter for v2 and v3 (JSX)
DESCRIPTION: These import statements illustrate how to select between AdapterDateFns implementations for date-fns v2.x and v3.x with MUI X pickers. Use the standard AdapterDateFns import for v2 and AdapterDateFnsV3 for v3. Required dependencies are the appropriate version of 'date-fns' and @mui/x-date-pickers package. No runtime parameters are needed, and these imports are consumed as adapters within MUI date/time picker components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7.md#2025-04-22_snippet_5

LANGUAGE: JSX
CODE:
```
// date-fns v2.x
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';

// date-fns v3.x
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV3';
```

----------------------------------------

TITLE: Incorrect Usage of Joy UI Button in Next.js Server Component
DESCRIPTION: This code snippet illustrates an incorrect way of using a Joy UI Button component in a Next.js server component. The onClick handler is non-serializable, which causes issues with server-side rendering.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/next-js-app-router/next-js-app-router.md#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
// app/page.tsx
import Button from '@mui/joy/Button';
import Sheet from '@mui/joy/Sheet';

export default function Page() {
  return (
    <Sheet>
      {/* Next.js won't render this button without 'use-client' */}
      <Button
        onClick={() => {
          console.log('handle click');
        }}
      >
        Submit
      </Button>
    </Sheet>
  );
}
```

----------------------------------------

TITLE: Mixed String Values Spacing
DESCRIPTION: Shows how to combine numeric spacing values with string values like 'auto'
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/spacing/spacing.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
margin: theme.spacing(1, 'auto'), // '8px auto'
```

----------------------------------------

TITLE: Styling Nested Components via MUI Styled API in JSX
DESCRIPTION: Demonstrates how to use styled components as selectors when styling parent and child elements using @emotion/styled. The snippet shows how a parent styled component can target a child styled component via selector interpolation, causing nested children to have different styles than those outside the parent. Requires @emotion/styled as a dependency. Expects React environment with rendering capabilities.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_8

LANGUAGE: jsx
CODE:
```
import styled from '@emotion/styled';\n\nconst Child = styled.div`\n  color: red;\n`;\n\nconst Parent = styled.div`\n  ${Child} {\n    color: green;\n  }\n`;\n\nrender(\n  <div>\n    <Parent>\n      <Child>Green because I am inside a Parent</Child>\n    </Parent>\n    <Child>Red because I am not inside a Parent</Child>\n  </div>,\n);
```

----------------------------------------

TITLE: Problematic TypeScript Usage with SX Prop
DESCRIPTION: This example demonstrates a common TypeScript error caused by type widening when using the sx prop with a separate style object. The type of flexDirection is inferred as string, which is too wide for the SX prop's expected type.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_21

LANGUAGE: typescript
CODE:
```
const style = {
  flexDirection: 'column',
};

export default function App() {
  return <Button sx={style}>Example</Button>;
}

// Type '{ flexDirection: string; }' is not assignable to type 'SxProps<Theme> | undefined'
// Type '{ flexDirection: string; }' is not assignable to type 'CSSSelectorObject<Theme>'
//   Property 'flexDirection' is incompatible with index signature
//     Type 'string' is not assignable to type 'SystemStyleObject<Theme>'
```

----------------------------------------

TITLE: Animated FAB with Zoom Transition
DESCRIPTION: Shows how to implement animated Floating Action Buttons using the Zoom transition effect with enter delay.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/floating-action-button/floating-action-button.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
FloatingActionButtonZoom.js
```

----------------------------------------

TITLE: Framework ClassNameGenerator Initializer JS
DESCRIPTION: This JavaScript snippet shows a common pattern for creating an initializer file for `ClassNameGenerator` in frameworks, including the `'use client'` directive relevant for React Server Components environments like Next.js App Router.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/classname-generator/classname-generator.md#_snippet_8

LANGUAGE: js
CODE:
```
// create a new file called `MuiClassNameSetup.js` at the root or src folder.
'use client'; // remove this line if you are not using React Server Components
import { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/material/className';

ClassNameGenerator.configure(
  // Do something with the componentName
  (componentName) => componentName,
);

export default null;
```

----------------------------------------

TITLE: Customizing Default Shadow in Joy UI
DESCRIPTION: Shows how to override the default shadow tokens in the Joy UI theme using the extendTheme function. This snippet demonstrates how to provide custom CSS box-shadow values to the shadow keys.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-shadow/theme-shadow.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
import { extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  shadow: {
    xs: '{CSS box-shadow}',
    sm: '{CSS box-shadow}',
    md: '{CSS box-shadow}',
    lg: '{CSS box-shadow}',
    xl: '{CSS box-shadow}',
  },
});

// Then, pass it to `<CssVarsProvider theme={theme}>`.
```

----------------------------------------

TITLE: Creating Small-Sized Slider in React
DESCRIPTION: Shows how to implement a smaller-sized slider using the 'size' prop set to 'small' in Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
{"demo": "SliderSizes.js"}
```

----------------------------------------

TITLE: ListSubheader with Props Implementation
DESCRIPTION: Alternative implementation of custom ListSubheader using props pattern
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/selects/selects.md#2025-04-22_snippet_4

LANGUAGE: TypeScript
CODE:
```
export default function MyListSubheader(
  props: ListSubheaderProps & { muiSkipListHighlight: boolean },
) {
  const { muiSkipListHighlight, ...other } = props;
  return <ListSubheader {...other} />;
}
```

----------------------------------------

TITLE: Installing Material Icons with pnpm
DESCRIPTION: Command to install @mui/icons-material and its dependencies using pnpm package manager.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/material-icons/material-icons.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
pnpm add @mui/icons-material @mui/material @emotion/styled @emotion/react
```

----------------------------------------

TITLE: Updating FormControlLabel Theme Default Props
DESCRIPTION: Updates MuiFormControlLabel theme configuration to use the new slotProps API instead of componentsProps.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_34

LANGUAGE: diff
CODE:
```
 MuiFormControlLabel: {
   defaultProps: {
-    componentsProps={{ typography: typographyProps }}
+    slotProps={{ typography: typographyProps }}
   },
 },
```

----------------------------------------

TITLE: Material-UI Styles Import Migration Codemod
DESCRIPTION: This codemod moves JSS imports from @material-ui/core/styles to @material-ui/styles. It handles multiple imports and rearranges them appropriately to maintain compatibility with v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_93

LANGUAGE: diff
CODE:
```
-import {
-  createGenerateClassName,
-  createStyles,
-  jssPreset,
-  makeStyles,
-  ServerStyleSheets,
-  useThemeVariants,
-  withStyles,
-  withTheme,
-  ThemeProvider,
-  styled,
-  getStylesCreator,
-  mergeClasses,
-} from '@material-ui/core/styles';
+import { ThemeProvider, styled } from '@material-ui/core/styles';
+import createGenerateClassName from '@material-ui/styles/createGenerateClassName';
+import createStyles from '@material-ui/styles/createStyles';
+import jssPreset from '@material-ui/styles/jssPreset';
+import makeStyles from '@material-ui/styles/makeStyles';
+import ServerStyleSheets from '@material-ui/styles/ServerStyleSheets';
+import useThemeVariants from '@material-ui/styles/useThemeVariants';
+import withStyles from '@material-ui/styles/withStyles';
+import withTheme from '@material-ui/styles/withTheme';
+import getStylesCreator from '@material-ui/styles/getStylesCreator';
 import mergeClasses from '@material-ui/styles/mergeClasses';
```

----------------------------------------

TITLE: Importing Color Inversion Utilities in JavaScript
DESCRIPTION: Demonstrates how to import the applySolidInversion and applySoftInversion utilities from the Joy UI package. These utilities are used to apply color inversion to custom components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/main-features/color-inversion/color-inversion.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
import { applySolidInversion, applySoftInversion } from '@mui/joy/colorInversion';
```

----------------------------------------

TITLE: Installing Material UI with Emotion
DESCRIPTION: Commands to install Material UI along with its default styling engine, Emotion, using npm, pnpm, or yarn. These packages are necessary to use Material UI components out-of-the-box.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/installation/installation.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install @mui/material @emotion/react @emotion/styled
```

LANGUAGE: bash
CODE:
```
pnpm add @mui/material @emotion/react @emotion/styled
```

LANGUAGE: bash
CODE:
```
yarn add @mui/material @emotion/react @emotion/styled
```

----------------------------------------

TITLE: Comparing Methods for Customizing MUI TextField Border Color (TSX)
DESCRIPTION: Compares three approaches to customizing the border color of an outlined `TextField` in MUI v5 using the `styled` API. Option 1 uses a global class name directly. Option 2 uses the same global class name but imports it via `outlinedInputClasses` for type safety. Option 3 shows the older, more verbose method using the `classes` prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_5

LANGUAGE: tsx
CODE:
```
import TextField from '@mui/material/TextField';
import { outlinedInputClasses } from '@mui/material/OutlinedInput';
import { styled } from '@mui/material/styles';

// Option 1: global class
const CustomizedTextField1 = styled(TextField)({
  '& .MuiOutlinedInput-notchedOutline': {
    borderColor: 'red',
  },
});

// Option 2: global class + const
const CustomizedTextField2 = styled(TextField)({
  [`& .${outlinedInputClasses.notchedOutline}`]: {
    borderColor: 'red',
  },
});

// Option 3: classes prop (before)
const CustomizedTextField3 = styled((props) => (
  <TextField
    {...props}
    variant="outlined"
    InputProps={{ classes: { notchedOutline: 'foo' } }}
  />
))({
  '& .foo': {
    borderColor: 'red',
  },
}) as typeof TextField;
```

----------------------------------------

TITLE: Implementing Fade Transition with React Component
DESCRIPTION: Example showing how to properly implement a Fade transition component with ref forwarding and style prop handling. Demonstrates the correct way to structure a child component for Material-UI transitions.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/transitions/transitions.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
// The `props` object contains a `style` prop.
// You need to provide it to the `div` element as shown here.
const MyComponent = React.forwardRef(function (props, ref) {
  return (
    <div ref={ref} {...props}>
      Fade
    </div>
  );
});

export default function Main() {
  return (
    <Fade>
      {/* MyComponent must be the only child */}
      <MyComponent />
    </Fade>
  );
}
```

----------------------------------------

TITLE: Setting Height Percentages with Material-UI Box Component
DESCRIPTION: Demonstrates how to set various height percentages using the Box component's sx prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/sizing/sizing.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
<Box sx={{ height: '25%' }}>…
<Box sx={{ height: '50%' }}>…
<Box sx={{ height: '75%' }}>…
<Box sx={{ height: '100%' }}>…
```

----------------------------------------

TITLE: Automatic Input Dimension Adjustment in Joy UI
DESCRIPTION: This demo showcases how the Input component in Joy UI automatically calculates and adjusts its dimensions relative to the border radius, improving developer experience.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/overview/overview.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
{"demo": "../../main-features/automatic-adjustment/InputVariables.js"}
```

----------------------------------------

TITLE: Restoring theme.palette.text.hint Key
DESCRIPTION: Example showing how to restore the removed theme.palette.text.hint key if your application depends on it.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_17

LANGUAGE: diff
CODE:
```
  import { createTheme } from '@mui/material/styles';

-const theme = createTheme(),
+const theme = createTheme({
+  palette: { text: { hint: 'rgba(0, 0, 0, 0.38)' } },
+});
```

----------------------------------------

TITLE: Installing Emotion Dependencies with npm
DESCRIPTION: Command to install Emotion packages which are peer dependencies of Material UI v5. Emotion replaces JSS as the default styling solution.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
npm install @emotion/react @emotion/styled
```

----------------------------------------

TITLE: Migrating from GridList to ImageList in React
DESCRIPTION: Renames GridList components to ImageList and updates related props to align with current Material Design naming conventions.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_18

LANGUAGE: diff
CODE:
```
-import GridList from '@mui/material/GridList';
-import GridListTile from '@mui/material/GridListTile';
-import GridListTileBar from '@mui/material/GridListTileBar';
+import ImageList from '@mui/material/ImageList';
+import ImageListItem from '@mui/material/ImageListItem';
+import ImageListItemBar from '@mui/material/ImageListItemBar';

-<GridList spacing={8} cellHeight={200}>
-  <GridListTile>
+<ImageList gap={8} rowHeight={200}>
+  <ImageListItem>
    <img src="file.jpg" alt="Image title" />
-    <GridListTileBar
+    <ImageListItemBar
      title="Title"
      subtitle="Subtitle"
    />
-  </GridListTile>
-</GridList>
+  </ImageListItem>
+</ImageList>
```

----------------------------------------

TITLE: Overriding Existing SX Prop Behavior in Material-UI
DESCRIPTION: Demonstrates how to change the default behavior of existing sx prop properties by providing a custom configuration. The example shows restricting borderRadius to specific values instead of allowing any number.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/experimental-api/configure-the-sx-prop/configure-the-sx-prop.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
ChangeTheBehaviorSxProp.js
```

----------------------------------------

TITLE: Importing Portal Component from MUI Base
DESCRIPTION: Demonstrates importing the Portal component from @mui/base. This component allows rendering children into a different DOM node.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q3-update.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
import { Portal } from '@mui/base/Portal';
```

----------------------------------------

TITLE: Implementing Custom Pagination with DataGrid apiRef in React (TypeScript)
DESCRIPTION: Demonstrates usage of the DataGrid apiRef from MUI X v6 to programmatically control pagination via the Data Grid API. Depends on MUI X DataGrid component and the useGridApiRef hook. The key parameter is apiRef, which provides an imperative handle to set the page (e.g., setPage(0)), and is passed into the DataGrid. The input is user interaction (button click), and the output is the DataGrid updating to the first page; ensure you have @mui/x-data-grid@v6 installed. Requires React and supporting MUI dependencies.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v6.md#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
function CustomDataGrid(props) {
  const apiRef = useGridApiRef();

  return (
    <div>
      <Button onClick={() => apiRef.current.setPage(0)}>
        Go to page first page
      </Button>
      <DataGrid apiRef={apiRef} {...other} />
    </div>
  );
}
```

----------------------------------------

TITLE: React Peer Dependencies Configuration
DESCRIPTION: JSON configuration showing React version requirements for MUI System. Supports React versions 17, 18, and 19.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/installation/installation.md#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
"peerDependencies": {
  "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
}
```

----------------------------------------

TITLE: SX Prop Migration Codemod (v6.0.0)
DESCRIPTION: Updates the sx prop usage to be compatible with @pigment-css/react, transforming theme-dependent styles.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_65

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v6.0.0/sx-prop <path>
```

LANGUAGE: diff
CODE:
```
 <Box
-  sx={{
-    backgroundColor: (theme) =>
-      theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[900],
-  }}
+  sx={theme => ({
+    backgroundColor: theme.palette.grey[900],
+    ...theme.applyStyles("light", {
+      backgroundColor: theme.palette.grey[100]
+    })
+  })}
 />
```

----------------------------------------

TITLE: Removing CSS Variable Prefix with createTheme - JS
DESCRIPTION: Configures the `createTheme` function to remove the default '--mui' prefix for generated CSS variables by setting the `cssVarPrefix` property to an empty string. This requires enabling the `cssVariables` option within the theme configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#_snippet_1

LANGUAGE: JS
CODE:
```
createTheme({ cssVariables: { cssVarPrefix: '' } });

// generated stylesheet:
// --palette-primary-main: ...;
```

----------------------------------------

TITLE: Forcing Label Shrink State with InputLabel Component
DESCRIPTION: Shows an alternative method to force the 'shrink' state using the InputLabel component directly.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
<InputLabel shrink>Count</InputLabel>
```

----------------------------------------

TITLE: styled Component with Dynamic Props (JS) - Before
DESCRIPTION: Example of a `styled` component where CSS properties like `top` and `height` are calculated dynamically within the style function based on props passed to the component. This approach is not directly compatible with Pigment CSS's static extraction.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_26

LANGUAGE: js
CODE:
```
const FlashCode = styled('div')(
  ({ theme, startLine = 0, endLine = startLine, lineHeight = '0.75rem' }) => ({
    top: `calc(${lineHeight} * 1.5 * ${startLine})`,
    height: `calc(${lineHeight} * 1.5 * ${endLine - startLine + 1})`,
    ...theme.typography.caption,
  }),
);

export default FlashCode;
```

----------------------------------------

TITLE: Renaming TextField props in React
DESCRIPTION: Renames rowsMax prop to maxRows and rows to minRows for consistency with HTML attributes in TextField component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_38

LANGUAGE: diff
CODE:
```
-<TextField rowsMax={6}>
+<TextField maxRows={6}>

-<TextField rows={2} maxRows={5} />
+<TextField minRows={2} maxRows={5} />
```

----------------------------------------

TITLE: Select Theme Customization
DESCRIPTION: Configuration for customizing the Select component's indicator through theme settings.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/select/select.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
import { extendTheme, CssVarsProvider } from '@mui/joy/styles';
import Select from '@mui/joy/Select';

const theme = extendTheme({
  components: {
    JoySelect: {
      defaultProps: {
        indicator: '↕',
      },
    },
  },
});

const App = () => (
  <CssVarsProvider theme={theme}>
    <Select>...options</Select>
  </CssVarsProvider>
);
```

----------------------------------------

TITLE: Integrating Material UI with Chakra UI
DESCRIPTION: Shows how to use Material UI alongside Chakra UI by nesting Material UI's ThemeProvider inside Chakra UI's provider and assigning the Material UI theme to the THEME_ID property.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/theme-scoping/theme-scoping.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { ChakraProvider, extendTheme as chakraExtendTheme } from '@chakra-ui/react';
import {
  ThemeProvider as MaterialThemeProvider,
  createTheme as muiCreateTheme,
  THEME_ID,
} from '@mui/material/styles';

const chakraTheme = chakraExtendTheme();
const materialTheme = muiCreateTheme();

function App() {
  return (
    <ChakraProvider theme={chakraTheme} resetCSS>
      <MaterialThemeProvider theme={{ [THEME_ID]: materialTheme }}>
        Chakra UI components and Material UI components
      </MaterialThemeProvider>
    </ChakraProvider>
  );
}
```

----------------------------------------

TITLE: Handling Multiple Snackbars with Escape Key
DESCRIPTION: Example demonstrating how to handle multiple Snackbar instances and their dismissal using the Escape key.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/snackbars/snackbars.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
export default function MyComponent() {
  const [open, setOpen] = React.useState(true);

  return (
    <React.Fragment>
      <Snackbar
        open={open}
        onClose={(event, reason) => {
          // `reason === 'escapeKeyDown'` if `Escape` was pressed
          setOpen(false);
          // call `event.preventDefault` to only close one Snackbar at a time.
        }}
      />
      <Snackbar open={open} onClose={() => setOpen(false)} />
    </React.Fragment>
  );
}
```

----------------------------------------

TITLE: Importing Typography Utilities from Material-UI System
DESCRIPTION: Shows how to import typography-related utilities from the @mui/system package. These utilities can be used to apply typography styles in a more programmatic way.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_9

LANGUAGE: js
CODE:
```
import { typography } from '@mui/system';
```

----------------------------------------

TITLE: Replacing Grid 'true' Value with 'grow' in React
DESCRIPTION: In Material UI v6, the Grid component's boolean 'true' value for size props is replaced with the string 'grow', as shown in this migration example.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_8

LANGUAGE: diff
CODE:
```
-<Grid xs>
+<Grid size="grow">
```

----------------------------------------

TITLE: Using theme.breakpoints.not Example
DESCRIPTION: Example of using theme.breakpoints.not to apply styles for all screens except the md breakpoint range.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_7

LANGUAGE: js
CODE:
```
const styles = (theme) => ({
  root: {
    backgroundColor: 'blue',
    // Match [xs, md) and [md + 1, ∞)
    //       [xs, md) and [lg, ∞)
    //       [0px, 900px) and [1200px, ∞)
    [theme.breakpoints.not('md')]: {
      backgroundColor: 'red',
    },
  },
});
```

----------------------------------------

TITLE: Disabling Focus Enforcement in React Modal
DESCRIPTION: This snippet demonstrates how to disable the focus trap behavior of the Modal component, which can be necessary when users need to interact with other parts of the page.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/modal/modal.md#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
<Modal disableEnforceFocus />
```

----------------------------------------

TITLE: Configuring Line Height in Material-UI with JSX
DESCRIPTION: Illustrates how to set line height using the Box component in Material-UI. It shows using the 'normal' keyword and a specific pixel value.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_8

LANGUAGE: jsx
CODE:
```
<Box sx={{ lineHeight: 'normal' }}>…
<Box sx={{ lineHeight: 10 }}>…
```

----------------------------------------

TITLE: Disabling Storage Manager for MUI Color Schemes - TSX
DESCRIPTION: Demonstrates how to disable the built-in or custom storage manager for color scheme preferences by passing `null` to the `storageManager` prop of the `ThemeProvider` component. Note that this will reset the mode to default upon page refresh.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#_snippet_5

LANGUAGE: TSX
CODE:
```
<ThemeProvider theme={theme} storageManager={null}>
  ...
</ThemeProvider>
```

----------------------------------------

TITLE: Verifying Pigment CSS Theme Types - TS
DESCRIPTION: TypeScript code snippet using `styled` from `@mui/material-pigment-css` to verify that the extended theme types are correctly recognized by the TypeScript compiler when accessing theme properties like `theme.palette.primary.main`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_12

LANGUAGE: ts
CODE:
```
// e.g. App.tsx
import { styled } from '@mui/material-pigment-css';

const TestThemeTypes = styled('div')(({ theme }) => ({
  color: theme.palette.primary.main,
}));
```

----------------------------------------

TITLE: Customizing Timeline Component in React
DESCRIPTION: Provides an example of customizing the Timeline component using Material-UI's customization options.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_7

LANGUAGE: JavaScript
CODE:
```
{"demo": "CustomizedTimeline.js"}
```

----------------------------------------

TITLE: Optimal Imports Codemod Example
DESCRIPTION: This codemod fixes private import paths by converting them to use the recommended public import paths, making code more maintainable and compatible with tree-shaking.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_104

LANGUAGE: diff
CODE:
```
-import red from '@material-ui/core/colors/red';
-import createTheme from '@material-ui/core/styles/createTheme';
+import { red } from '@material-ui/core/colors';
+import { createTheme } from '@material-ui/core/styles';
```

----------------------------------------

TITLE: Runtime-Based Styling
DESCRIPTION: Example of styling components based on runtime values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
const Heading = styled('h1')({
  color: ({ isError }) => (isError ? 'red' : 'black'),
});
```

----------------------------------------

TITLE: Updating Import Path for MUI System Components (Diff)
DESCRIPTION: This diff illustrates the required change for importing MUI System components like `Box` in v7. Deep imports (more than one level) are no longer allowed due to the updated package layout using Node.js exports. You must now import directly from the component's top-level export.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_0

LANGUAGE: diff
CODE:
```
-import Box from '@mui/system/Box/Box';
+import Box from '@mui/system/Box';
```

----------------------------------------

TITLE: Initializing Tree Data Structure - React JSX
DESCRIPTION: This JavaScript code snippet defines a hierarchical dataset for use with MUI X Tree View components. The dataset is composed of nodes, each with unique 'id' and 'label' properties, and optional 'children' arrays for nesting. There are no external dependencies beyond standard ES6 syntax. The primary purpose is to provide sample input for the RichTreeView component, illustrating how to structure tree items for rendering. Input: static JS object; Output: JavaScript array data for use as a prop in MUI X tree views. No side effects or asynchronous operations occur.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7-beta.md#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
const myDataSet = [
  {
    id: 'node-1',
    label: 'Node 1',
    children: [
      { id: 'node-1-1', label: 'Node 1.1' },
      { id: 'node-1-2', label: 'Node 1.2' },
    ],
  },
  {
    id: 'node-2',
    label: 'Node 2',
  },
];
```

----------------------------------------

TITLE: Running Codemod to Remove Owner State - Bash
DESCRIPTION: Command to execute the `@mui/codemod` utility with the `theme-v6` transform, aimed at automatically removing owner state callbacks from the specified theme configuration file (`next.config.mjs`).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_15

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v6.0.0/theme-v6 next.config.mjs
```

----------------------------------------

TITLE: Underline Behavior Configuration in Material-UI Links
DESCRIPTION: Shows how to configure the underline behavior of Link components using the underline prop with a default value of 'always'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/links/links.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
{"demo": "UnderlineLink.js"}
```

----------------------------------------

TITLE: Applying Custom Shadows to Specific Elements
DESCRIPTION: Shows the correct way to customize shadow properties on individual elements. This example demonstrates how to properly apply custom shadow colors and ring effects to a Button component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-shadow/theme-shadow.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
// ✅
<Button
  sx={(theme) => ({
    boxShadow: theme.shadow.md,
    '--joy-shadowChannel': theme.vars.palette.primary.mainChannel,
    '--joy-shadowRing': 'inset 0 -3px 0 rgba(0 0 0 / 0.24)',
  })}
>

// ❌ Both of these do not work
<Button
  sx={(theme) => ({
    boxShadow: 'md',
    '--joy-shadowChannel': theme.vars.palette.primary.mainChannel,
    '--joy-shadowRing': 'inset 0 -3px 0 rgba(0 0 0 / 0.24)',
  })}
>
<Button
  sx={(theme) => ({
    boxShadow: theme.vars.shadow.md,
    '--joy-shadowChannel': theme.vars.palette.primary.mainChannel,
    '--joy-shadowRing': 'inset 0 -3px 0 rgba(0 0 0 / 0.24)',
  })}
>
```

----------------------------------------

TITLE: Adding Roboto Font via Google Fonts CDN
DESCRIPTION: HTML code snippet to be placed in the `<head>` tag to load the Roboto font with specific weights (300, 400, 500, 700) directly from the Google Fonts CDN. This is an alternative to using Fontsource.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/installation/installation.md#_snippet_5

LANGUAGE: html
CODE:
```
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap"
/>
```

----------------------------------------

TITLE: Updating TextareaAutosize props in React
DESCRIPTION: Replaces rows with minRows, renames rowsMax to maxRows, and renames rowsMin to minRows in TextareaAutosize component for consistency with HTML attributes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_42

LANGUAGE: diff
CODE:
```
-<TextareaAutosize rows={2} />
+<TextareaAutosize minRows={2} />

-<TextareaAutosize rowsMax={6}>
+<TextareaAutosize maxRows={6}>

-<TextareaAutosize rowsMin={1}>
+<TextareaAutosize minRows={1}>
```

----------------------------------------

TITLE: Creating Reusable Styles with Object Syntax
DESCRIPTION: Example of creating reusable styles using Pigment CSS object syntax.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
const mainClass = css({
  display: '#000',
  color: '#fff',
});
```

----------------------------------------

TITLE: Named Containment Context Query in Material UI
DESCRIPTION: Shows how to create container queries with named containment contexts for specific container references.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/container-queries/container-queries.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
theme.containerQueries('sidebar').up('500px'); // => '@container sidebar (min-width: 500px)'
```

----------------------------------------

TITLE: Renaming components and componentsProps to slots and slotProps in Joy UI
DESCRIPTION: This codemod renames the 'components' and 'componentsProps' props to 'slots' and 'slotProps' respectively in Joy UI components. It updates the prop names to match the new API.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_68

LANGUAGE: diff
CODE:
```
 <Autocomplete
-  components={{ listbox: CustomListbox }}
-  componentsProps={{ root: { className: 'root' }, listbox: { 'data-testid': 'listbox' } }}
+  slots={{ listbox: CustomListbox }}
+  slotProps={{ root: { className: 'root' }, listbox: { 'data-testid': 'listbox' } }}
 />;
```

----------------------------------------

TITLE: Using sx Prop with Dynamic Values (JS) - After
DESCRIPTION: Demonstrates migrating dynamic `sx` prop values to use CSS variables (`--offset`, `--bg`). The CSS variables are then set using the inline `style` prop on the element, allowing dynamic values to be handled outside the `sx` prop's static scope.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_22

LANGUAGE: js
CODE:
```
<div>
  {items.map((item, index) => (
    <Box
      key={index}
      sx={{
        borderRadius: '50%',
        width: `max(6px - var(--offset), 3px)`,
        height: `max(6px - var(--offset), 3px)`,
        bgcolor: `var(--bg)`,
      }}
      style={{
        '--offset': `${index}px`,
        '--bg':
          index === 0
            ? 'var(--mui-palette-primary-solidBg)'
            : 'var(--mui-palette-background-level3)',
      }}
    />
  ))}
</div>
```

----------------------------------------

TITLE: Comparing Old and New MUI Joy UI Typography Levels
DESCRIPTION: Illustrates the restructuring of the default typography level scale (`theme.typography.*`). It shows the removal of `display1`, `display2`, `h5`, `h6`, `body1` through `body5`, and the addition of `title-lg`, `title-md`, `title-sm`, `body-lg`, `body-md`, `body-sm`, and `body-xs`. Recommendations for replacements are provided in the comments.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_12

LANGUAGE: diff
CODE:
```
  h1
  h2
  h3
  h4
+ title-lg
+ title-md
+ title-sm
+ body-lg
+ body-md
+ body-sm
+ body-xs
- display1
- display2
- h5 // recommend to use `title-lg` instead
- h6 // recommend to use `title-md` instead
- body1 // recommend to use `body-md` instead
- body2 // recommend to use `body-sm` instead
- body3 // recommend to use `body-xs` instead
- body4
- body5
```

----------------------------------------

TITLE: Updating Core Styles Import in React
DESCRIPTION: Renames private import from 'core/styles/*' to 'core/styles'. This codemod updates the import statement to use the new structure in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_77

LANGUAGE: diff
CODE:
```
-import { darken, lighten } from '@material-ui/core/styles/colorManipulator';
+import { darken, lighten } from '@material-ui/core/styles';
```

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/core-styles-import <path>
```

----------------------------------------

TITLE: Applying preset-safe transformations for v4 to v5 migration
DESCRIPTION: This codemod applies a combination of all important transformers for migrating from Material-UI v4 to v5. It includes various component-specific and general transformations to update the codebase.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_71

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/preset-safe <path|folder>
```

----------------------------------------

TITLE: Running Root Ref Codemod Command
DESCRIPTION: Command to execute the root-ref codemod on a specified path. This removes RootRef usage from the codebase as it has been deprecated in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_106

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/root-ref <path>
```

----------------------------------------

TITLE: Server-Side Rendering with Masonry
DESCRIPTION: Demonstrates server-side rendering implementation using defaultHeight, defaultColumns, and defaultSpacing props.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_8

LANGUAGE: jsx
CODE:
```
SSRMasonry.js
```

----------------------------------------

TITLE: Running TextField to Input Codemod in Bash
DESCRIPTION: Command for running the codemod tool that automatically converts TextField components to Input compositions in your project files.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/text-field/text-field.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/joy-text-field-to-input <path>
```

----------------------------------------

TITLE: Customizing Stepper Indicator in React
DESCRIPTION: This snippet shows how to customize the Step component with a StepIndicator. It demonstrates the use of different variants for the indicator, which can be 'soft', 'solid', 'outlined', or 'plain'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stepper/stepper.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Stepper>
  <Step indicator={<StepIndicator variant="solid">1</StepIndicator>}>
    Select campaign settings
  </Step>
  <Step indicator={<StepIndicator>2</StepIndicator>}>
    Create an ad group
  </Step>
  <Step indicator={<StepIndicator variant="outlined">3</StepIndicator>}>
    Create an ad
  </Step>
</Stepper>
```

----------------------------------------

TITLE: RenderInput Prop Usage
DESCRIPTION: Examples of using the new required renderInput prop with DatePicker component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/pickers-migration/pickers-migration.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<DatePicker renderInput={(props) => <TextField {...props} />} />
<TimePicker renderInput={(props) => <TextField {...props} />} />
```

----------------------------------------

TITLE: Updating TablePagination label customization in React
DESCRIPTION: Changes the way labels are customized for TablePagination actions, using the getItemAriaLabel prop instead of individual text props.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_30

LANGUAGE: diff
CODE:
```
  <TablePagination
-  backIconButtonText="Back"
-  nextIconButtonText="Next"
+  getItemAriaLabel={…}
```

----------------------------------------

TITLE: Creating Indeterminate Checkboxes in React
DESCRIPTION: Shows how to implement and customize indeterminate checkboxes using the indeterminateIcon prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_6

LANGUAGE: JSX
CODE:
```
{"demo": "IndeterminateCheckbox.js"}
```

----------------------------------------

TITLE: Implementing Custom Class Component for Tooltip in React
DESCRIPTION: This snippet shows how to create a custom class component that can be used with a Tooltip. It demonstrates the proper way to forward refs and wrap the component to ensure compatibility with the Tooltip component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/tooltips/tooltips.md#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
class MyComponent extends React.Component {
  render() {
    const { innerRef, ...props } = this.props;
    //  Spread the props to the underlying DOM element.
    return (
      <div {...props} ref={innerRef}>
        Bin
      </div>
    );
  }
}

// Wrap MyComponent to forward the ref as expected by Tooltip
const WrappedMyComponent = React.forwardRef(function WrappedMyComponent(props, ref) {
  return <MyComponent {...props} innerRef={ref} />;
});

// ...

<Tooltip title="Delete">
  <WrappedMyComponent />
</Tooltip>;
```

----------------------------------------

TITLE: Implementing Custom Storage Manager for MUI Color Schemes - TSX
DESCRIPTION: Shows how to create and provide a custom storage manager function to the `ThemeProvider`'s `storageManager` prop. This allows overriding the default `localStorage` behavior for persisting user color scheme preferences, requiring implementations for `get`, `set`, and `subscribe` methods.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#_snippet_4

LANGUAGE: TSX
CODE:
```
import { ThemeProvider, createTheme } from '@mui/material/styles';
import type { StorageManager } from '@mui/material/styles';

const theme = createTheme({
  colorSchemes: {
    dark: true,
  },
});

function storageManager(params): StorageManager {
  return {
    get: (defaultValue) => {
      // Your implementation
    },
    set: (value) => {
      // Your implementation
    },
    subscribe: (handler) => {
      // Your implementation
      return () => {
        // cleanup
      };
    },
  };
}

function App() {
  return (
    <ThemeProvider theme={theme} storageManager={storageManager}>
      ...
    </ThemeProvider>
  );
}
```

----------------------------------------

TITLE: Setting Up CSS Layer Support with AppRouterCacheProvider
DESCRIPTION: Code snippet showing how to enable CSS layer support when using other styling solutions with Material UI in Next.js App Router.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_7

LANGUAGE: js
CODE:
```
<AppRouterCacheProvider options={{ enableCssLayer: true }}>
```

----------------------------------------

TITLE: Download and Extract Remix Material UI Example - Bash
DESCRIPTION: This snippet downloads the Material UI Remix TypeScript example project from the GitHub repository using curl and tar, then changes the current directory to the extracted project folder. Requires curl and tar utilities to be installed.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-remix-ts/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-remix-ts
cd material-ui-remix-ts
```

----------------------------------------

TITLE: Disabling Mode Transition with ThemeProvider Prop - JSX
DESCRIPTION: Applies the `disableTransitionOnChange` prop to the `ThemeProvider` component. This prevents any CSS transitions from occurring when the color scheme is switched, resulting in an instant change between modes. Requires wrapping the application or a part of it with the `ThemeProvider`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#_snippet_14

LANGUAGE: JSX
CODE:
```
<ThemeProvider disableTransitionOnChange />
```

----------------------------------------

TITLE: Migrating ListItem Props to Slots API
DESCRIPTION: Transforms ListItem component from using the deprecated components/componentsProps API to the new slots/slotProps API pattern.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_36

LANGUAGE: diff
CODE:
```
 <ListItem
-  components={{ Root: CustomRoot }}
-  componentsProps={{ root: { testid: 'test-id' } }}
+  slots={{ root: CustomRoot }}
+  slotProps={{ root: { testid: 'test-id' } }}
 />
```

----------------------------------------

TITLE: Running Styled Engine Provider Codemod Command
DESCRIPTION: Command to execute the styled-engine-provider codemod on a specified path. This applies StyledEngineProvider to files containing ThemeProvider to support the new styling approach.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_109

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/styled-engine-provider <path>
```

----------------------------------------

TITLE: Migrating FilledInput Props to Slots API
DESCRIPTION: Transforms FilledInput component from using the deprecated components/componentsProps API to the new slots/slotProps API pattern.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_30

LANGUAGE: diff
CODE:
```
 <FilledInput
-  components={{ Input: CustomInput, Root: CustomRoot }}
-  componentsProps={{ input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }}
+  slots={{ input: CustomInput, root: CustomRoot }}
+  slotProps={{ input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }}
 />
```

----------------------------------------

TITLE: Running Codemod for Date Picker Migration in Bash
DESCRIPTION: This command uses the MUI codemod tool to automatically migrate Date and Time Picker imports in a codebase from @mui/lab to @mui/x-date-pickers or @mui/x-date-pickers-pro.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/lab-date-pickers-to-mui-x.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/date-pickers-moved-to-x <path>
```

----------------------------------------

TITLE: Customizing Cursor for Disabled Buttons using CSS
DESCRIPTION: Shows how to override the default cursor behavior for disabled buttons using CSS. This snippet removes the pointer-events style and sets the cursor to not-allowed for disabled buttons.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/buttons/buttons.md#2025-04-22_snippet_1

LANGUAGE: CSS
CODE:
```
.MuiButtonBase-root:disabled {
  cursor: not-allowed;
  pointer-events: auto;
}
```

----------------------------------------

TITLE: Customized Menus
DESCRIPTION: Example of menu component customization with custom styles and behavior.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_7

LANGUAGE: JSX
CODE:
```
{"demo": "CustomizedMenus.js"}
```

----------------------------------------

TITLE: Typography TypeScript Module Augmentation
DESCRIPTION: TypeScript type definitions for custom typography scale values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/typography/typography.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
declare module '@mui/joy/styles' {
  interface TypographySystemOverrides {
    subtitle: true;
    label: true;
  }
}
```

----------------------------------------

TITLE: String-based Spacing in Material-UI
DESCRIPTION: Shows how string values are handled in spacing props. String values are passed directly as raw CSS values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/spacing/spacing.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<Box sx={{ m: '2rem' }} /> // margin: 2rem;
<Box sx={{ mx: 'auto' }} /> // margin-left: auto; margin-right: auto;
```

----------------------------------------

TITLE: Changing useTheme Hook Import Source (JS/TS)
DESCRIPTION: Instructs users to change the import path for the `useTheme` hook from `@mui/material/styles` to `@mui/material-pigment-css` when migrating to Pigment CSS.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_32

LANGUAGE: diff
CODE:
```
-import { useTheme } from '@mui/material/styles';
+import { useTheme } from '@mui/material-pigment-css';
```

----------------------------------------

TITLE: Removing Default Button Color
DESCRIPTION: Updates Button component by removing 'default' color prop since 'primary' is now the default color.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_5

LANGUAGE: diff
CODE:
```
-<Button color="default">
+<Button>
```

----------------------------------------

TITLE: Adding Custom Marks to Slider in React
DESCRIPTION: Illustrates how to add custom marks to a slider by providing a rich array to the 'marks' prop in Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_4

LANGUAGE: JSX
CODE:
```
{"demo": "DiscreteSliderMarks.js"}
```

----------------------------------------

TITLE: Testing Media Queries with Jest
DESCRIPTION: Shows how to set up media query testing using css-mediaquery for mocking matchMedia in Jest environment.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/use-media-query/use-media-query.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
import mediaQuery from 'css-mediaquery';

function createMatchMedia(width) {
  return (query) => ({
    matches: mediaQuery.match(query, {
      width,
    }),
    addEventListener: () => {},
    removeEventListener: () => {},
  });
}

describe('MyTests', () => {
  beforeAll(() => {
    window.matchMedia = createMatchMedia(window.innerWidth);
  });
});
```

----------------------------------------

TITLE: Disabling MUI System Styling Features with styled - Diff
DESCRIPTION: This diff shows how to disable specific MUI System styling features by editing the options object passed to the styled function. It demonstrates removing the theme.components[name].styleOverrides resolver and disabling both variants and the sx prop. Dependencies include MUI System and either Emotion or styled-components. Modifying these options controls how much MUI-specific integration is enabled in the styling process.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_1

LANGUAGE: diff
CODE:
```
 const StyledComponent = styled('div', {}, {
   name: 'MuiStyled',
   slot: 'Root',
-  overridesResolver: (props, styles) => styles.root, // disables theme.components[name].styleOverrides
+  skipVariantsResolver: true, // disables theme.components[name].variants
+  skipSx: true, // disables the sx prop
 });
```

----------------------------------------

TITLE: Correct CSS Specificity for MUI Components
DESCRIPTION: CSS example showing how to properly target Material UI components by increasing specificity with parent selectors. This approach is necessary when using external CSS files with MUI components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_12

LANGUAGE: css
CODE:
```
.MuiChip-root .green {
  color: green;
}
```

----------------------------------------

TITLE: Importing Link Component for Breadcrumbs in React (Joy UI)
DESCRIPTION: Import statement for the Link component that is commonly used with Breadcrumbs to create clickable navigation items.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import Link from '@mui/joy/Link';
```

----------------------------------------

TITLE: Diff Showing Deprecated ownerState Callback vs. Variants - JavaScript
DESCRIPTION: Illustrates the structural change from using a callback function directly on a slot in `styleOverrides` (deprecated) to using the `variants` array approach (recommended). This shows how to refactor older theme overrides.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theme-components/theme-components.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const theme = createTheme({
  components: {
    MuiButton: {
      styleOverrides: {
-        root: ({ ownerState, theme }) => ({ ... }),
+        root: {
+          variants: [...],
         },
      },
    },
  },
});
```

----------------------------------------

TITLE: Customizing the DataGrid Toolbar with Reduced CSS Specificity - React JSX
DESCRIPTION: This snippet shows how to style the DataGrid toolbar in MUI X v5, where the reduced CSS specificity of built-in classes allows direct overrides. The custom GridToolbarContainerStyled no longer needs to target a specific class and applies padding universally. The setup reduces the complexity required for custom styling, relying on the styled function and React components. The App component integrates the custom toolbar using the components prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v5.md#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
const GridToolbarContainerStyled = styled(GridToolbarContainer)({
  padding: 40,
});

function MyCustomToolbar() {
  return (
    <GridToolbarContainerStyled>
      My custom toolbar
    </GridToolbarContainer>
  );
};

export default function App() {
  return (
    <div style={{ height: 400, width: '100%' }}>
      <DataGrid components={{ Toolbar: MyCustomToolbar }} />
    </div>
  );
}
```

----------------------------------------

TITLE: Synchronizing Color Mode Between Joy UI and Material UI
DESCRIPTION: Implementation of a color mode toggle that synchronizes the theme mode between Joy UI and Material UI using their respective hooks and setMode functions.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/material-ui/material-ui.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { useColorScheme as useJoyColorScheme } from '@mui/joy/styles';
import { useColorScheme as useMaterialColorScheme } from '@mui/material/styles';

const ModeToggle = () => {
  const { mode, setMode: setMaterialMode } = useMaterialColorScheme();
  const { setMode: setJoyMode } = useJoyColorScheme();
  const [mounted, setMounted] = React.useState(false);
  React.useEffect(() => {
    setMounted(true);
  }, []);
  if (!mounted) {
    // prevent server-side rendering mismatch
    // because `mode` is undefined on the server.
    return null;
  }
  return (
    <IconButton
      onClick={() => {
        setMaterialMode(mode === 'dark' ? 'light' : 'dark');
        setJoyMode(mode === 'dark' ? 'light' : 'dark');
      }}
    >
      {/** You can use `mode` from Joy UI or Material UI since they are synced **/}
      {mode === 'dark' ? <DarkMode /> : <LightMode />}
    </IconButton>
  );
};
```

----------------------------------------

TITLE: Integrating Material UI with TanStack Router
DESCRIPTION: This snippet demonstrates how to integrate Material UI's Link component with TanStack Router using the createLink helper function, enabling custom link behavior.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/routing/routing.md#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
import { createLink } from '@tanstack/react-router';
import { Link as MUILink } from '@mui/material';

const CustomLink = createLink(MUILink);

function App() {
  return (
    <CustomLink underline="none" to="/about">
      Link to about page
    </CustomLink>
  );
}
```

----------------------------------------

TITLE: Using Experimental sx Function in Material UI Theme Overrides
DESCRIPTION: This example demonstrates how to use the experimental unstable_sx function from the theme to apply sx-like syntax in global theme overrides for the Chip component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/callback-support-in-style-overrides.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
import { ThemeProvider, createTheme } from '@mui/material/styles';

<ThemeProvider
  theme={createTheme({
    components: {
      MuiChip: {
        styleOverrides: {
          root: ({ theme }) =>
            theme.unstable_sx({
              px: '12px', // shorthand for padding-left & right
              py: '6px', // shorthand for padding-top & bottom
              fontWeight: 500,
              borderRadius: '8px',
            }),
          label: {
            padding: 0,
          },
        },
      },
    },
  })}
>
  ...your app
</ThemeProvider>;
```

----------------------------------------

TITLE: Creating Left-Aligned Timeline in React
DESCRIPTION: Demonstrates how to adjust the Timeline component to be left-aligned within its container.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_8

LANGUAGE: JavaScript
CODE:
```
{"demo": "LeftAlignedTimeline.js"}
```

----------------------------------------

TITLE: Implementing MenuItem with Prop Spreading in React
DESCRIPTION: Example showing how to disable ripple effects on MenuItem component through prop spreading behavior
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/api/api.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<MenuItem disableRipple />
```

----------------------------------------

TITLE: Updating LinearProgress Classes in MUI
DESCRIPTION: Code changes for LinearProgress component classes, updating class selectors to use the new nested structure with buffer, determinate, and indeterminate variants.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_57

LANGUAGE: diff
CODE:
```
import { linearProgressClasses } from '@mui/material/LinearProgress';

 MuiLinearProgress: {
   styleOverrides: {
     root: {
-      [`&.${linearProgressClasses.bar1Buffer}`]: {},
+      [`&.${linearProgressClasses.buffer} > .${linearProgressClasses.bar1}`]: {},
-      [`&.${linearProgressClasses.bar1Determinate}`]: {},
+      [`&.${linearProgressClasses.determinate} > .${linearProgressClasses.bar1}`]: {},
-      [`&.${linearProgressClasses.bar1Indeterminate}`]: {},
+      [`&.${linearProgressClasses.indeterminate} > .${linearProgressClasses.bar1}`]: {},
-      [`&.${linearProgressClasses.bar2Buffer}`]: {},
+      [`&.${linearProgressClasses.buffer} > .${linearProgressClasses.bar2}`]: {},
-      [`&.${linearProgressClasses.bar2Indeterminate}`]: {},
+      [`&.${linearProgressClasses.indeterminate} > .${linearProgressClasses.bar2}`]: {},
-      [`&.${linearProgressClasses.barColorPrimary}`]: {},
+      [`&.${linearProgressClasses.colorPrimary} > .${linearProgressClasses.bar}`]: {},
-      [`&.${linearProgressClasses.barColorSecondary}`]: {},
+      [`&.${linearProgressClasses.colorSecondary} > .${linearProgressClasses.bar}`]: {},
-      [`&.${linearProgressClasses.dashedColorPrimary}`]: {},
+      [`&.${linearProgressClasses.colorPrimary} > .${linearProgressClasses.dashed}`]: {},
-      [`&.${linearProgressClasses.dashedColorSecondary}`]: {},
+      [`&.${linearProgressClasses.colorSecondary} > .${linearProgressClasses.dashed}`]: {},
     },
   },
  }
```

----------------------------------------

TITLE: Enabling Cell Selection in DataGridPremium (JSX)
DESCRIPTION: Shows how to activate the unstable cell selection feature in the DataGridPremium component in MUI X v6. This allows users to select individual or groups of cells in a grid, similar to Excel. The key dependency is DataGridPremium with the unstable_cellSelection prop. The main parameter is unstable_cellSelection, which must be set to enable the experimental feature. Input is user selection within the grid; output is visual cell selection. This feature is unstable, may change, and requires a Premium license and the corresponding MUI X packages.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v6.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<DataGridPremium unstable_cellSelection />
```

----------------------------------------

TITLE: Installing MUI X Premium Package with yarn - JavaScript
DESCRIPTION: This snippet shows how to add the MUI X Premium data grid package with yarn, serving as an alternative to npm for managing dependencies. It requires yarn to be installed and should be executed in the repository root. The effect is to add @mui/x-data-grid-premium to the package.json dependencies, enabling access to Premium features.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/premium-plan-release.md#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
yarn add @mui/x-data-grid-premium
```

----------------------------------------

TITLE: Implementing Non-Linear Scale Slider in React
DESCRIPTION: Demonstrates how to create a slider with a non-linear scale using the 'scale' prop in Material-UI, representing values on a logarithmic scale.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_17

LANGUAGE: JSX
CODE:
```
{"demo": "NonLinearSlider.js"}
```

----------------------------------------

TITLE: Spacing System Import in Material-UI
DESCRIPTION: Shows how to import the spacing utility from the MUI system package.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/spacing/spacing.md#2025-04-22_snippet_6

LANGUAGE: js
CODE:
```
import { spacing } from '@mui/system';
```

----------------------------------------

TITLE: Setting RTL Direction for Modal Components
DESCRIPTION: Example showing how to correctly apply RTL direction to components that use React portals, like Modal, which don't inherit the dir attribute from parent elements.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/right-to-left/right-to-left.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Box dir="rtl">
  <Modal /> // ❌ this Modal will still be left-to-right (the default)
</Box>
<Box dir="rtl">
  <Modal dir="rtl" /> // ✅ this Modal will be right-to-left as intended
</Box>
```

----------------------------------------

TITLE: Adding InitColorSchemeScript to Gatsby SSR - JSX
DESCRIPTION: Shows how to use the `onRenderBody` API in Gatsby's `gatsby-ssr.js` file to add the `InitColorSchemeScript` component to the beginning of the document body. This is used in SSR setups to initialize the color scheme on the client before hydration and prevent flickering. Requires importing the component and using `setPreBodyComponents`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#_snippet_11

LANGUAGE: JSX
CODE:
```
import * as React from 'react';
import InitColorSchemeScript from '@mui/material/InitColorSchemeScript';

export function onRenderBody({ setPreBodyComponents }) {
  setPreBodyComponents([<InitColorSchemeScript attribute="class" />]);
}
```

----------------------------------------

TITLE: Implementing List Items with Automatic Tag Adjustment in Joy UI
DESCRIPTION: Shows how ListItem components automatically adjust their HTML tag rendering based on their parent List component's type. When List is not a semantic list element, ListItem renders as a div instead of li.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/main-features/automatic-adjustment/automatic-adjustment.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
<List component="div">
  <ListItem> // automatically renders as a <div>
    ...
  </ListItem>
</List>
```

----------------------------------------

TITLE: Implementing Alternating Timeline in React
DESCRIPTION: Illustrates a timeline that displays events on alternating sides.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_2

LANGUAGE: JavaScript
CODE:
```
{"demo": "AlternateTimeline.js"}
```

----------------------------------------

TITLE: Installing Material UI Next.js Dependencies for Pages Router with pnpm
DESCRIPTION: Command to install the required dependencies for integrating Material UI with Next.js Pages Router using pnpm package manager.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
pnpm add @mui/material-nextjs @emotion/cache @emotion/server
```

----------------------------------------

TITLE: Creating a Playground for Speed Dial in React
DESCRIPTION: Provides an interactive playground for experimenting with various Speed Dial configurations and options.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/speed-dial/speed-dial.md#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
{"demo": "PlaygroundSpeedDial.js"}
```

----------------------------------------

TITLE: Running the variant-prop codemod for Material-UI v5 migration
DESCRIPTION: This command runs the variant-prop codemod which applies variant='standard' to TextField, FormControl, and Select components if no variant is defined, maintaining the v4 default behavior.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_16

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/variant-prop <path>
```

----------------------------------------

TITLE: Using Typography Color Prop with Theme Colors in React
DESCRIPTION: Example of using the Typography color prop with direct theme color values, which is still supported in Material UI v6 for specific theme colors.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_19

LANGUAGE: jsx
CODE:
```
<Typography color="textSecondary">Secondary text</Typography>
```

----------------------------------------

TITLE: Displaying Always Visible Label on Slider in React
DESCRIPTION: Shows how to force the thumb label to be always visible on a slider using the 'valueLabelDisplay' prop in Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_6

LANGUAGE: JSX
CODE:
```
{"demo": "DiscreteSliderLabel.js"}
```

----------------------------------------

TITLE: Sequential Order in Masonry
DESCRIPTION: Shows how to implement sequential ordering of items from left to right instead of by column height.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_7

LANGUAGE: jsx
CODE:
```
Sequential.js
```

----------------------------------------

TITLE: Accessing System Mode when Current Mode is not 'system' - JS
DESCRIPTION: Illustrates that the `systemMode` property obtained from the `useColorScheme` hook will be `undefined` when the current `mode` is explicitly set to 'light' or 'dark'. The `systemMode` is only relevant when the current mode is 'system'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#_snippet_7

LANGUAGE: JS
CODE:
```
const { mode, systemMode } = useColorScheme();

console.log(mode); // 'light' | 'dark'
console.log(systemMode); // undefined
```

----------------------------------------

TITLE: Installing Dependencies and Running Development Server - Bash
DESCRIPTION: These commands install the necessary Node.js dependencies for the project using npm install and then starts the development server using npm run dev. Requires Node.js and npm to be installed and executed within the project directory.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/joy-ui-nextjs-ts/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Fixed Spacing in Masonry
DESCRIPTION: Examples of implementing fixed spacing between Masonry items using the spacing prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
FixedSpacing.js
```

----------------------------------------

TITLE: Importing ListDivider Component in React
DESCRIPTION: Shows how to import the ListDivider component, which is used to create separators between list items with various inset options.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
import ListDivider from '@mui/joy/ListDivider';
```

----------------------------------------

TITLE: Updating TextField default variant in React
DESCRIPTION: Changes the default variant of TextField from 'standard' to 'outlined' and shows how to keep using the 'standard' variant.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_37

LANGUAGE: diff
CODE:
```
-<TextField value="Standard" />
-<TextField value="Outlined" variant="outlined" />
+<TextField value="Standard" variant="standard" />
+<TextField value="Outlined" />
```

----------------------------------------

TITLE: Accordion Props Migration - Component Code Changes
DESCRIPTION: Shows migration from TransitionComponent/TransitionProps to slots/slotProps pattern for Accordion component.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_2

LANGUAGE: diff
CODE:
```
<Accordion
-  TransitionComponent={CustomTransition}
-  TransitionProps={{ unmountOnExit: true }}
+  slots={{ transition: CustomTransition }}
+  slotProps={{ transition: { unmountOnExit: true } }}
/>
```

----------------------------------------

TITLE: Customizing Tabs Scroll Buttons with CSS
DESCRIPTION: CSS customization to control the opacity of disabled scroll buttons in Tabs component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/tabs/tabs.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
.MuiTabs-scrollButtons.Mui-disabled {
  opacity: 0.3;
}
```

----------------------------------------

TITLE: Configuring Babel for Emotion Styled with MUI in JavaScript
DESCRIPTION: Presents the necessary Babel configuration to map MUI's styled utilities to emotion's canonical imports for compatibility with @emotion/babel-plugin. Defines importMap for @mui/system, @mui/material, and @mui/material/styles, mapping their styled exports to emotion's styled function. Ensure this configuration is in babel.config.js and that @emotion/babel-plugin is listed (and ordered) appropriately in your plugins.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_10

LANGUAGE: js
CODE:
```
module.exports = {\n  ...\n  plugins: [\n    [\n      "@emotion",\n      {\n        importMap: {\n          "@mui/system": {\n            styled: {\n              canonicalImport: ["@emotion/styled", "default"],\n              styledBaseImport: ["@mui/system", "styled"]\n            }\n          },\n          "@mui/material": {\n            styled: {\n              canonicalImport: ["@emotion/styled", "default"],\n              styledBaseImport: ["@mui/material", "styled"]\n            }\n          },\n          "@mui/material/styles": {\n            styled: {\n              canonicalImport: ["@emotion/styled", "default"],\n              styledBaseImport: ["@mui/material/styles", "styled"]\n            }\n          }\n        }\n      }\n    ]\n  ]\n};
```

----------------------------------------

TITLE: Overriding theme.applyStyles Function - MUI JavaScript
DESCRIPTION: Illustrates how to create a custom theme in MUI using `createTheme` and provide a new implementation for the `applyStyles` function. The example custom function formats the output as a CSS string suitable for template literals, demonstrating how to change its return type and behavior. Requires `@mui/material/styles` or `@mui/system`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#_snippet_13

LANGUAGE: js
CODE:
```
const theme = createTheme({
  cssVariables: {
    colorSchemeSelector: '.mode-%s',
  },
  colorSchemes: {
    dark: {},
    light: {},
  },
  applyStyles: function (key: string, styles: any) {
    // return a string instead of an object
    return `*:where(.mode-${key}) & {${styles}}`;
  },
});

const StyledButton = styled('button')`
  ${theme.applyStyles(
    'dark', `
      background: white;
    `
  )}
`;
```

----------------------------------------

TITLE: Creating Left-Positioned Timeline in React
DESCRIPTION: Shows how to position the main content of the timeline on the left side relative to the time axis.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
{"demo": "LeftPositionedTimeline.js"}
```

----------------------------------------

TITLE: Using MUI Slider with sx Prop in React (JSX)
DESCRIPTION: This JSX snippet demonstrates rendering an MUI `Slider` component within a React application. It utilizes the `sx` prop to apply inline styling, specifically setting a vertical margin (`my: 1`, which typically translates to `margin-top: 8px; margin-bottom: 8px;` based on the default theme spacing, as indicated by the comment). Requires React and `@mui/material` dependencies.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/blog/blog-custom-card.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
// add margin: 8px 0px;
<Slider sx={{ my: 1 }} />
```

----------------------------------------

TITLE: Importing Unstyled Slider Component from Material-UI Lab
DESCRIPTION: This code snippet shows how to import the unstyled version of the Slider component from the Material-UI lab. This lightweight version allows for full customization of appearance while retaining core functionality.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q3-update.md#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
import SliderUnstyled from '@mui/lab/SliderUnstyled';
```

----------------------------------------

TITLE: Migrating Badge Component Props in JSX
DESCRIPTION: Shows how to migrate Badge component props from the deprecated 'components/componentsProps' pattern to the newer 'slots/slotProps' approach in JSX code.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_7

LANGUAGE: diff
CODE:
```
 <Badge
-  components={{ Root: CustomRoot }}
-  componentsProps={{ root: { testid: 'test-id' } }}
+  slots={{ root: CustomRoot }}
+  slotProps={{ root: { testid: 'test-id' } }}
 />
```

----------------------------------------

TITLE: Controlling Column Width with Inline Styles in Joy UI Table
DESCRIPTION: This snippet demonstrates how to control column width using inline styles on the <th> element in a Joy UI Table.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/table/table.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<thead>
  <tr>
    <th style={{ width: '40%' }}>Column 1</th>
    <th style={{ width: '64px' }}>Column 2</th>
  </tr>
</thead>
```

----------------------------------------

TITLE: FAB Size Variations
DESCRIPTION: Shows how to implement different sizes of Floating Action Buttons using the size prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/floating-action-button/floating-action-button.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
FloatingActionButtonSize.js
```

----------------------------------------

TITLE: Updating ListItem Class Names for Button States in React
DESCRIPTION: Changes needed to update class names for button states that were moved from ListItem to ListItemButton in Material UI v6.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_15

LANGUAGE: diff
CODE:
```
-import { listItemClasses } from '@mui/material/ListItem';
+import { listItemButtonClasses } from '@mui/material/ListItemButton';

-listItemClasses.button
+listItemButtonClasses.root

-listItemClasses.focusVisible
+listItemButtonClasses.focusVisible

-listItemClasses.disabled
+listItemButtonClasses.disabled

-listItemClasses.selected
+listItemButtonClasses.selected
```

----------------------------------------

TITLE: Using Stabilized Grid v2 Component in JSX
DESCRIPTION: This JSX snippet demonstrates the usage of the stabilized `Grid v2` component (`@mui/material/Grid2`) in Material UI v6. It shows how to define responsive grid item sizes using the consolidated `size` prop with breakpoint keys (xs, sm, lg). Grid v2 uses the CSS `gap` property for spacing.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_9

LANGUAGE: jsx
CODE:
```
import Grid from '@mui/material/Grid2';

<Grid container>
  <Grid size={{ xs: 6, sm: 4, lg: 3 }} />
  <Grid size={{ xs: 6, sm: 4, lg: 3 }} />
  <Grid size={{ xs: 6, sm: 4, lg: 3 }} />
</Grid>;
```

----------------------------------------

TITLE: Updating `withTheme` HOC Usage in JavaScript/JSX
DESCRIPTION: Shows the required updates for using the `withTheme` HOC in MUI v5. The import path changes from '@mui/material/styles' to '@mui/styles'. Similar to `withStyles`, components using `withTheme` now need to be wrapped in a `ThemeProvider` from '@mui/material/styles' with a defined theme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_36

LANGUAGE: diff
CODE:
```
-import { withTheme } from '@mui/material/styles';
+import { withTheme } from '@mui/styles';
+import { createTheme, ThemeProvider } from '@mui/material/styles';

+const theme = createTheme();
  const MyComponent = withTheme(({ theme }) => <div>{theme.direction}</div>);

  function App(props) {
-  return <MyComponent />;
+  return <ThemeProvider theme={theme}><MyComponent {...props} /></ThemeProvider>;
  }
```

----------------------------------------

TITLE: Customizing CSS variable prefixes
DESCRIPTION: Examples of customizing and removing the default 'joy' prefix from CSS variables.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/using-css-variables/using-css-variables.md#2025-04-22_snippet_7

LANGUAGE: jsx
CODE:
```
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';

function App() {
  return (
    <CssVarsProvider theme={extendTheme({ cssVarPrefix: 'company' })}>
      ...
    </CssVarsProvider>
  );
}
```

LANGUAGE: jsx
CODE:
```
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';

function App() {
  return (
    <CssVarsProvider theme={extendTheme({ cssVarPrefix: '' })}>...</CssVarsProvider>
  );
}
```

----------------------------------------

TITLE: Creating custom CSS variables with theme values
DESCRIPTION: Example of creating new CSS variables using raw theme values instead of theme.vars.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/using-css-variables/using-css-variables.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
const Div = styled('div')(({ theme }) => ({
  // Note that it's using `theme.shadow`, not `theme.vars.shadow`
  boxShadow: theme.shadow.sm.replace(/,/g, ', inset'),
}));
```

----------------------------------------

TITLE: Handling Custom Key Events in Autocomplete
DESCRIPTION: Demonstrates how to prevent default key handler behavior in the Autocomplete component by setting the defaultMuiPrevented property.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_7

LANGUAGE: jsx
CODE:
```
<Autocomplete
  onKeyDown={(event) => {
    if (event.key === 'Enter') {
      // Prevent's default 'Enter' behavior.
      event.defaultMuiPrevented = true;
      // your handler code
    }
  }}
/>
```

----------------------------------------

TITLE: Styling Implementation with CSS Classes
DESCRIPTION: Example demonstrating the styling structure using CSS classes with variants and modifiers
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/api/api.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
const styles = {
  root: {
    color: green[600],
    '&$checked': {
      color: green[500],
    },
  },
  checked: {},
}
```

----------------------------------------

TITLE: Importing Material-UI Components with Top-Level Imports in JavaScript
DESCRIPTION: This snippet demonstrates how to import Material-UI components using top-level imports, which helps in minimizing bundle size. The example shows importing Button and TextField components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/july-2019-update.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { Button, TextField } from '@mui/material';
```

----------------------------------------

TITLE: Updating Material-UI Package Imports
DESCRIPTION: Replaces old @material-ui package imports with new @mui namespaced imports.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_117

LANGUAGE: diff
CODE:
```
-import Alert from '@material-ui/core/Alert';
+import Alert from '@mui/material/Alert';
```

----------------------------------------

TITLE: Demonstrating Emotion Props Handling in MUI Components
DESCRIPTION: Shows how Emotion props like 'as' are not propagated when using the component prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<MuiComponent component={SomeOtherComponent} as="button" />
```

----------------------------------------

TITLE: Setting Badge Alignment in React Material-UI
DESCRIPTION: Shows how to position badges at different corners using the anchorOrigin prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_8

LANGUAGE: JSX
CODE:
```
BadgeAlignment.js
```

----------------------------------------

TITLE: Migrating from StepButtonIcon Type
DESCRIPTION: Shows how to update code that uses the deprecated StepButtonIcon type to use StepButtonProps['icon'] instead.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_22

LANGUAGE: diff
CODE:
```
-import { StepButtonIcon } from '@mui/material/StepButton';
+import { StepButtonProps } from '@mui/material/StepButton';

-StepButtonIcon
+StepButtonProps['icon']
```

----------------------------------------

TITLE: Using Component Classes Constants for Nested Selectors
DESCRIPTION: Example showing how to use exported component classes constants instead of hardcoding class names when migrating theme styleOverrides to Emotion.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_2

LANGUAGE: diff
CODE:
```
+import { outlinedInputClasses } from '@mui/material/OutlinedInput';

 const theme = createTheme({
   components: {
     MuiOutlinedInput: {
       styleOverrides: {
         root: {
-          '& $notchedOutline': {
+          [`& .${outlinedInputClasses.notchedOutline}`]: {
             borderWidth: 1,
           }
         }
       }
     }
   }
 });
```

----------------------------------------

TITLE: Setting Maximum Value in Badge
DESCRIPTION: Demonstrates how to cap the maximum value displayed in a badge using the max prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_5

LANGUAGE: JSX
CODE:
```
BadgeMax.js
```

----------------------------------------

TITLE: Triggering Input Focus Ring Programmatically
DESCRIPTION: Demonstrates how to trigger the input's focus ring using a CSS variable, useful for custom focus management.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/input/input.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Input
  sx={{
    '--Input-focused': 1,
  }}
/>
```

----------------------------------------

TITLE: Migrating from ListItem Button Prop to ListItemButton Component in React
DESCRIPTION: Updates to replace the deprecated 'button' prop in ListItem with the dedicated ListItemButton component in Material UI v6.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_13

LANGUAGE: diff
CODE:
```
-<ListItem button />
+<ListItemButton />
```

----------------------------------------

TITLE: Configuring Theme Direction with extendTheme
DESCRIPTION: Use Joy UI's extendTheme API to set the theme direction to RTL in your application's theme configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/right-to-left/right-to-left.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
import { extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  direction: 'rtl',
});
```

----------------------------------------

TITLE: Setting Font Style in Material-UI with JSX
DESCRIPTION: Illustrates how to set font style (normal, italic, oblique) using the Box component in Material-UI. This affects the slant of the text.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
<Box sx={{ fontStyle: 'normal' }}>…
<Box sx={{ fontStyle: 'italic' }}>…
<Box sx={{ fontStyle: 'oblique' }}>…
```

----------------------------------------

TITLE: Standard Image List Implementation in Material-UI
DESCRIPTION: Demonstrates implementation of a standard image list with uniform container sizes and spacing for items of equal importance.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/image-list/image-list.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
{"demo": "StandardImageList.js"}
```

----------------------------------------

TITLE: Fixing Container Width Issues
DESCRIPTION: Shows how to make the new Grid component grow to full width using the sx prop, addressing a common migration issue.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_10

LANGUAGE: diff
CODE:
```
-<GridLegacy container>
+<Grid container sx={{ width: '100%' }}>

 // alternatively, if the Grid's parent is a flex container:
-<GridLegacy container>
+<Grid container sx={{ flexGrow: 1 }}>
```

----------------------------------------

TITLE: Running Divider Props Codemod Command
DESCRIPTION: Command to automatically update deprecated Divider props in a codebase using MUI's codemod tool.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_23

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest deprecations/divider-props <path>
```

----------------------------------------

TITLE: Comparing CSS Theme Variables to Default Method in Material UI
DESCRIPTION: A markdown table comparing the performance metrics of using CSS theme variables versus the default method in Material UI for server-side applications. It highlights differences in HTML size, First Contentful Paint (FCP), and Time to Interactive (TTI).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/overview.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
|                                                              | Compare to the default method | Reason                                                                                                         |
| :----------------------------------------------------------- | :---------------------------- | :------------------------------------------------------------------------------------------------------------- |
| HTML size                                                    | Bigger                        | CSS variables are generated for both light and dark mode at build time.                                        |
| [First Contentful Paint (FCP)](https://web.dev/articles/fcp) | Longer                        | Since the HTML size is bigger, the time to download the HTML before showing the content is a bit longer.       |
| [Time to Interactive (TTI)](https://web.dev/articles/tti)    | Shorter (for dark mode)       | Stylesheets are not regenerated between light and dark mode, a lot less time is spent running JavaScript code. |
```

----------------------------------------

TITLE: Installing Material UI Next.js Dependencies with pnpm
DESCRIPTION: Command to install the required dependencies for integrating Material UI with Next.js App Router using pnpm package manager.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
pnpm add @mui/material-nextjs @emotion/cache
```

----------------------------------------

TITLE: Importing Multiple Material UI Components with ES Module Destructuring in JavaScript
DESCRIPTION: This snippet demonstrates how to use destructured imports to include multiple Material UI components in a single ES module import statement. This approach improves developer experience and enables better tree shaking for smaller bundle sizes. Ensure your environment supports ES modules and install @mui/material as a dependency.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v4-is-out.md#2025-04-22_snippet_3

LANGUAGE: JavaScript
CODE:
```
import {
  Table
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  Paper,
} from '@mui/material';
```

----------------------------------------

TITLE: Restoring Old MUI Joy UI Shadow Scale using extendTheme in JavaScript
DESCRIPTION: Demonstrates how to override the default shadow scale in MUI Joy UI by providing the previous shadow definitions (`xs` to `xl`) within the `extendTheme` function. This configuration restores the visual appearance of shadows from before the update.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
extendTheme({
  shadow: {
    xs: `var(--joy-shadowRing, 0 0 #000),
        0 1px 2px 0 rgba(var(--joy-shadowChannel, 187 187 187) / 0.12)`,
    sm: `var(--joy-shadowRing, 0 0 #000),
        0.3px 0.8px 1.1px rgba(var(--joy-shadowChannel, 187 187 187) / 0.11),
        0.5px 1.3px 1.8px -0.6px rgba(var(--joy-shadowChannel, 187 187 187) / 0.18),
        1.1px 2.7px 3.8px -1.2px rgba(var(--joy-shadowChannel, 187 187 187) / 0.26)`,
    md: `var(--joy-shadowRing, 0 0 #000),
        0.3px 0.8px 1.1px rgba(var(--joy-shadowChannel, 187 187 187) / 0.12),
        1.1px 2.8px 3.9px -0.4px rgba(var(--joy-shadowChannel, 187 187 187) / 0.17),
        2.4px 6.1px 8.6px -0.8px rgba(var(--joy-shadowChannel, 187 187 187) / 0.23),
        5.3px 13.3px 18.8px -1.2px rgba(var(--joy-shadowChannel, 187 187 187) / 0.29)`,
    lg: `var(--joy-shadowRing, 0 0 #000),
        0.3px 0.8px 1.1px rgba(var(--joy-shadowChannel, 187 187 187) / 0.11),
        1.8px 4.5px 6.4px -0.2px rgba(var(--joy-shadowChannel, 187 187 187) / 0.13),
        3.2px 7.9px 11.2px -0.4px rgba(var(--joy-shadowChannel, 187 187 187) / 0.16),
        4.8px 12px 17px -0.5px rgba(var(--joy-shadowChannel, 187 187 187) / 0.19),
        7px 17.5px 24.7px -0.7px rgba(var(--joy-shadowChannel, 187 187 187) / 0.21)`,
    xl: `var(--joy-shadowRing, 0 0 #000),
        0.3px 0.8px 1.1px rgba(var(--joy-shadowChannel, 187 187 187) / 0.11), 
        1.8px 4.5px 6.4px -0.2px rgba(var(--joy-shadowChannel, 187 187 187) / 0.13), 
        3.2px 7.9px 11.2px -0.4px rgba(var(--joy-shadowChannel, 187 187 187) / 0.16), 
        4.8px 12px 17px -0.5px rgba(var(--joy-shadowChannel, 187 187 187) / 0.19), 
        7px 17.5px 24.7px -0.7px rgba(var(--joy-shadowChannel, 187 187 187) / 0.21), 
        10.2px 25.5px 36px -0.9px rgba(var(--joy-shadowChannel, 187 187 187) / 0.24), 
        14.8px 36.8px 52.1px -1.1px rgba(var(--joy-shadowChannel, 187 187 187) / 0.27), 21px 52.3px 74px -1.2px rgba(var(--joy-shadowChannel, 187 187 187) / 0.29)`,
  },
});
```

----------------------------------------

TITLE: Implementing Persistent Tooltips for Speed Dial Actions in React
DESCRIPTION: Shows how to display persistent tooltips for SpeedDialActions, useful for touch devices or enhanced user experience.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/speed-dial/speed-dial.md#2025-04-22_snippet_4

LANGUAGE: JavaScript
CODE:
```
{"demo": "SpeedDialTooltipOpen.js"}
```

----------------------------------------

TITLE: Converting Array-based Background Values to String-based Values
DESCRIPTION: Example of replacing JSS array-based syntax for space- and comma-separated values with standard string-based values required by Emotion.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
const theme = createTheme({
  overrides: {
    MuiBox: {
      root: {
        background: [
          ['url(image1.png)', 'no-repeat', 'top'],
          ['url(image2.png)', 'no-repeat', 'center'],
          '!important',
        ],
      },
    },
  },
});
```

----------------------------------------

TITLE: Updating CircularProgress Variant
DESCRIPTION: Renames 'static' variant to 'determinate' in CircularProgress component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_10

LANGUAGE: diff
CODE:
```
-<CircularProgress variant="static" classes={{ static: 'className' }} />
+<CircularProgress variant="determinate" classes={{ determinate: 'className' }} />
```

----------------------------------------

TITLE: Updating Switch default color prop in React
DESCRIPTION: Changes the default color of the Switch component to 'primary' and shows how to explicitly set it to 'secondary' if needed.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_27

LANGUAGE: diff
CODE:
```
-<Switch />
+<Switch color="secondary" />
```

----------------------------------------

TITLE: Updating OutlinedInput Label Prop in React
DESCRIPTION: Replaces the labelWidth prop with a label prop in OutlinedInput components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_23

LANGUAGE: diff
CODE:
```
-<OutlinedInput labelWidth={20} />
+<OutlinedInput label="First Name" />
```

----------------------------------------

TITLE: Updating Switch CSS classes in HTML
DESCRIPTION: Updates the CSS classes for the Switch component, removing .MuiIconButton-root and .MuiIconButton-label, and targeting .MuiButtonBase-root instead.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_28

LANGUAGE: diff
CODE:
```
  <span class="MuiSwitch-root">
-  <span class="MuiIconButton-root MuiButtonBase-root MuiSwitch-switchBase PrivateSwitchBase-root">
-    <span class="MuiIconButton-label">
-      <input class="MuiSwitch-input PrivateSwitchBase-input">
+  <span class="MuiButtonBase-root MuiSwitch-switchBase PrivateSwitchBase-root">
+    <span class="MuiSwitch-input PrivateSwitchBase-input">
```

----------------------------------------

TITLE: Migrating Backdrop Component Props in JSX
DESCRIPTION: Shows how to migrate Backdrop component props from the deprecated 'components/componentsProps' pattern to the newer 'slots/slotProps' approach in JSX code.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_3

LANGUAGE: diff
CODE:
```
 <Backdrop
-  components={{ Root: CustomRoot }}
-  componentsProps={{ root: { testid: 'test-id' } }}
+  slots={{ root: CustomRoot }}
+  slotProps={{ root: { testid: 'test-id' } }}
 />
```

----------------------------------------

TITLE: Inefficient Conditional Styling in Joy UI Theme (Anti-pattern)
DESCRIPTION: This snippet demonstrates an inefficient way of applying different styles based on color scheme using a conditional operator. This approach is not recommended as it creates styles for both color schemes, leading to performance issues.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
// 🚫 Don't do this
extendTheme({
  components: {
    JoyChip: {
      styleOverrides: {
        root: ({ ownerState, theme }) => ({
          // styles will be created for both color schemes which is not performant
          boxShadow: theme.palette.mode === 'dark' ? 'none' : theme.vars.shadow.sm,
        }),
      },
    },
  },
});
```

----------------------------------------

TITLE: Exporting Public Component Class Keys Type (MUI/TypeScript)
DESCRIPTION: Shows how to define and export the `FooClassKey` type for a public component using `keyof FooClasses`. This creates a union of string literals representing the valid class names, which is useful for type-checking when working with class keys.
SOURCE: https://github.com/mui/material-ui/blob/master/TYPESCRIPT_CONVENTION.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
// fooClasses.ts
export interface FooClasses {
  ...
}

export type FooClassKey = keyof FooClasses;
// verify that FooClassKey is union of string literal
```

----------------------------------------

TITLE: Migrating Backdrop TransitionComponent Prop
DESCRIPTION: Shows how to migrate the Backdrop TransitionComponent prop to the newer slots pattern for specifying custom transitions.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_5

LANGUAGE: diff
CODE:
```
 <Backdrop
-  TransitionComponent={CustomTransition}
+  slots={{ transition: CustomTransition }}
 />
```

----------------------------------------

TITLE: Updating Firevent for Ripple Effect in React Tests
DESCRIPTION: Updates to testing code to handle the improved ripple effect in Material UI v6, wrapping fireEvent calls in act and using async/await to avoid React warnings.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_20

LANGUAGE: diff
CODE:
```
- fireEvent.click(button);
+ await act(async () => fireEvent.mouseDown(button));
```

----------------------------------------

TITLE: Using sx Prop with Dynamic Values (JS) - Before
DESCRIPTION: Example of a React component using the `sx` prop within a map loop, where CSS property values (`width`, `height`, `bgcolor`) are dynamically calculated based on the `index` variable. This approach needs migration for Pigment CSS compatibility.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_21

LANGUAGE: js
CODE:
```
<div>
  {items.map((item, index) => (
    <Box
      key={index}
      sx={{
        borderRadius: '50%',
        width: `max(${6 - index}px, 3px)`,
        height: `max(${6 - index}px, 3px)`,
        bgcolor: index === 0 ? 'primary.solidBg' : 'background.level3',
      }}
    />
  ))}
</div>
```

----------------------------------------

TITLE: Importing Stack Component in React
DESCRIPTION: Basic import statement for the Stack component from the MUI system package.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/stack/stack.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Stack from '@mui/system/Stack';
```

----------------------------------------

TITLE: TypeScript Interface for Virtual Element Popover
DESCRIPTION: TypeScript interface definition for implementing a virtual DOM element as an anchor for the Popover component. The interface requires nodeType and getBoundingClientRect properties.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/popover/popover.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface PopoverVirtualElement {
  nodeType: 1;
  getBoundingClientRect: () => DOMRect;
}
```

----------------------------------------

TITLE: Change in theme.spacing Return Value Format
DESCRIPTION: Example showing how theme.spacing now returns pixel values with px suffix by default, improving integration with styled-components and Emotion.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
theme.spacing(2) => 16
```

LANGUAGE: javascript
CODE:
```
theme.spacing(2) => '16px'
```

----------------------------------------

TITLE: Extending HTMLAttributes for sx Prop (TypeScript)
DESCRIPTION: Provides TypeScript declaration merging code to add optional `sx` props (`SxProps<Theme>`) to the `HTMLAttributes` and `SVGProps` interfaces. This enables type checking when using the `sx` prop directly on standard HTML or SVG elements after replacing the `Box` component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_31

LANGUAGE: ts
CODE:
```
import type { Theme, SxProps } from '@mui/material/styles';

declare global {
  namespace React {
    interface HTMLAttributes<T> {
      sx?: SxProps<Theme>;
    }
    interface SVGProps<T> {
      sx?: SxProps<Theme>;
    }
  }
}
```

----------------------------------------

TITLE: Downloading and Navigating to Material UI SSR Example (Bash)
DESCRIPTION: Uses `curl` to download the specified tarball from the Material UI repository, pipes it to `tar` for extraction of the relevant example directory while stripping parent directories, and then uses `cd` to navigate into the extracted project folder. This prepares the environment for installing dependencies.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-express-ssr/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-express-ssr
cd material-ui-express-ssr
```

----------------------------------------

TITLE: Importing Material UI Component Modules
DESCRIPTION: Component import declarations showing the modular structure of Material UI, organized by functional categories including inputs, data display, feedback, surface, navigation, layout, lab, and utilities.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/all-components/all-components.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
"component": "modules/components/MaterialUIComponents/MaterialInputComponents.js"
```

LANGUAGE: js
CODE:
```
"component": "modules/components/MaterialUIComponents/MaterialDataDisplayComponents.js"
```

LANGUAGE: js
CODE:
```
"component": "modules/components/MaterialUIComponents/MaterialFeedbackComponents.js"
```

LANGUAGE: js
CODE:
```
"component": "modules/components/MaterialUIComponents/MaterialSurfaceComponents.js"
```

LANGUAGE: js
CODE:
```
"component": "modules/components/MaterialUIComponents/MaterialNavigationComponents.js"
```

LANGUAGE: js
CODE:
```
"component": "modules/components/MaterialUIComponents/MaterialLayoutComponents.js"
```

LANGUAGE: js
CODE:
```
"component": "modules/components/MaterialUIComponents/MaterialLabComponents.js"
```

LANGUAGE: js
CODE:
```
"component": "modules/components/MaterialUIComponents/MaterialUtilComponents.js"
```

----------------------------------------

TITLE: Importing CardOverflow Component
DESCRIPTION: Import statement for the CardOverflow component, which is used as a wrapper to eliminate whitespace and expand content to fill all edges of a Card.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/card/card.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import CardOverflow from '@mui/joy/CardOverflow';
```

----------------------------------------

TITLE: Adding Prepend Option to Emotion Cache for Correct Style Injection
DESCRIPTION: Example showing how to add the prepend option to Emotion's createCache to ensure proper CSS injection order when using a custom cache configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_9

LANGUAGE: diff
CODE:
```
 import * as React from 'react';
 import { CacheProvider } from '@emotion/react';
 import createCache from '@emotion/cache';

 const cache = createCache({
   key: 'css',
+  prepend: true,
 });

 export default function PlainCssPriority() {
   return (
     <CacheProvider value={cache}>
       {/* Your component tree. Now you can override Material UI's styles. */}
     </CacheProvider>
   );
 }
```

----------------------------------------

TITLE: Grid Component Props Update for v7.0.0
DESCRIPTION: Transforms Grid component props to use new size and offset prop structure, supporting custom breakpoints
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_62

LANGUAGE: diff
CODE:
```
<Grid
-   xs={12}
-   sm={6}
-   xsOffset={2}
-   smOffset={3}
+   size={{ xs: 12, sm: 6 }}
+   offset={{ xs: 2, sm: 3 }}
/>
```

----------------------------------------

TITLE: Configuring Theme Typography with Font Variable (Next.js) - Diff
DESCRIPTION: Diff showing how to update the `typography.fontFamily` in the Material UI theme configuration within `next.config.mjs` to use the CSS variable defined by `next/font`.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_10

LANGUAGE: diff
CODE:
```
 const pigmentConfig = {
   transformLibraries: ['@mui/material'],
   theme: createTheme({
+    typography: {
+      fontFamily: 'var(--my-font-family)',
+    },
   }),
 };
```

----------------------------------------

TITLE: Setting Letter Spacing in Material-UI with JSX
DESCRIPTION: Shows how to adjust letter spacing using the Box component in Material-UI. The values represent the space between characters in pixels.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_7

LANGUAGE: jsx
CODE:
```
<Box sx={{ letterSpacing: 6 }}>…
<Box sx={{ letterSpacing: 10 }}>…
```

----------------------------------------

TITLE: Updating MobileStepper Props in MUI
DESCRIPTION: Transformation of MobileStepper LinearProgressProps to the new slotProps pattern.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_59

LANGUAGE: diff
CODE:
```
<MobileStepper
-  LinearProgressProps={{ color: 'primary' }}
+  slotProps={{ progress: { color: 'primary' } }}
/>
```

----------------------------------------

TITLE: Removing Button Span Wrapper
DESCRIPTION: Removes span element that wraps button children and the label classKey.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_6

LANGUAGE: diff
CODE:
```
 <button class="MuiButton-root">
-  <span class="MuiButton-label">
     children
-  </span>
 </button>
```

----------------------------------------

TITLE: Implementing Purple Palette in Joy UI
DESCRIPTION: Code snippet for adding back the removed purple palette with color values from 50 to 900
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const purple = {
  50: '#FDF7FF',
  100: '#F4EAFF',
  200: '#E1CBFF',
  300: '#C69EFF',
  400: '#A374F9',
  500: '#814DDE',
  600: '#5F35AE',
  700: '#452382',
  800: '#301761',
  900: '#1D0A42'
};
```

----------------------------------------

TITLE: Creating Slider with Inverted Track in React
DESCRIPTION: Shows how to implement a slider with an inverted track by setting the 'track' prop to 'inverted' in Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_16

LANGUAGE: JSX
CODE:
```
{"demo": "TrackInvertedSlider.js"}
```

----------------------------------------

TITLE: Renaming TextField CSS classes in React
DESCRIPTION: Renames marginDense and inputMarginDense classes to sizeSmall and inputSizeSmall to match the prop in TextField component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_40

LANGUAGE: diff
CODE:
```
-<Input margin="dense" />
+<Input size="small" />
```

----------------------------------------

TITLE: Migrating Backdrop Component Props in Theme Configuration
DESCRIPTION: Shows how to update the theme defaultProps for Backdrop component from deprecated 'components/componentsProps' pattern to the newer 'slots/slotProps' approach.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_4

LANGUAGE: diff
CODE:
```
 MuiBackdrop: {
   defaultProps: {
-    components: { Root: CustomRoot }
-    componentsProps: { root: { testid: 'root-id' } }
+    slots: { root: CustomRoot },
+    slotProps: { root: { testid: 'root-id' } },
  },
 },
```

----------------------------------------

TITLE: Basic Alert Import and Usage - React/JSX
DESCRIPTION: Basic import statement for using the Alert component from Material UI
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/alert/alert.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Alert from '@mui/material/Alert';
```

----------------------------------------

TITLE: Accessing CSS Theme Variables in Styled Components (JSX & CSS)
DESCRIPTION: This snippet demonstrates how to access Material UI CSS theme variables within a styled component using the `theme.vars` object in JSX. It also shows the resulting CSS output, where component styles use the generated CSS variables (e.g., `var(--mui-palette-background-default)`). Requires `cssVariables: true` in theme configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_1

LANGUAGE: js JSX
CODE:
```
const CustomComponent = styled('div')(({ theme }) => ({
  backgroundColor: theme.vars.palette.background.default,
  color: theme.vars.palette.text.primary,
}));
```

LANGUAGE: css CSS
CODE:
```
.CustomComponent-ae73f {
  background-color: var(--mui-palette-background-default);
  color: var(--mui-palette-text-primary);
}
```

----------------------------------------

TITLE: Synchronizing Material UI Theme colorSchemeSelector with InitColorSchemeScript Attribute (JavaScript)
DESCRIPTION: Provides a reminder snippet showing that the `colorSchemeSelector` property within the `cssVariables` theme configuration must exactly match the value provided to the `attribute` prop of the `InitColorSchemeScript` component. This ensures that the theme's CSS variables respond correctly to the attribute set by the script.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/init-color-scheme-script/init-color-scheme-script.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const theme = createTheme({
  cssVariables: {
    colorSchemeSelector: 'same value as the `attribute` prop',
  },
});
```

----------------------------------------

TITLE: Removing Default Props from MUI Theme Config (JS/TS)
DESCRIPTION: Shows how to remove default props for components like MuiButtonBase and MuiSelect from the theme configuration (e.g., in next.config.js or vite.config.js), preparing to move them to the DefaultPropsProvider. This is a step in migrating default props management.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_18

LANGUAGE: diff
CODE:
```
 import { createTheme } from '@mui/material';

 const customTheme = createTheme({
   // ...other tokens.
   components: {
     MuiButtonBase: {
-      defaultProps: {
-        disableRipple: true,
-      },
     },
     MuiSelect: {
-      defaultProps: {
-        IconComponent: DropdownIcon,
-      },
     }
   }
 });
```

----------------------------------------

TITLE: Importing Box Component in React
DESCRIPTION: This snippet shows how to import the Box component from Material UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/box/box.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Box from '@mui/material/Box';
```

----------------------------------------

TITLE: Renaming Fade to Alpha in React Styles
DESCRIPTION: Renames the 'fade' style utility import and calls to 'alpha()'. This codemod updates the color manipulation utility to use the new naming convention in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_84

LANGUAGE: diff
CODE:
```
-import { fade, lighten } from '@material-ui/core/styles';
+import { alpha, lighten } from '@material-ui/core/styles';

-const foo = fade('#aaa');
+const foo = alpha('#aaa');
```

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/fade-rename-alpha <path>
```

----------------------------------------

TITLE: Updating Typography Style Overrides in Material-UI v5 Theme
DESCRIPTION: This snippet demonstrates how to update the theme configuration for Typography component style overrides. It replaces static style keys with a callback function that uses ownerState to apply conditional styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_47

LANGUAGE: diff
CODE:
```
 const theme = createTheme({
   components: {
     MuiTypography: {
-      styleOverrides: {
-        colorSecondary: {
-          marginTop: '20px',
-        },
-      },
+      styleOverrides: ({ ownerState }) => ({
+        ...ownerState.color === 'secondary' && {
+          marginTop: '20px',
+        },
+      }),
     },
   },
 });
```

----------------------------------------

TITLE: Customizing InitColorSchemeScript to Use Class Attribute (TypeScript)
DESCRIPTION: Shows how to set the `attribute` prop of the `InitColorSchemeScript` component to "class". This causes the script to apply a class name (e.g., `dark` or `light`) to the color scheme element (typically `<html>`) instead of a data attribute, which must be matched by the theme configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/init-color-scheme-script/init-color-scheme-script.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
<InitColorSchemeScript attribute="class" />
```

----------------------------------------

TITLE: AccordionSummary CSS Class Renaming
DESCRIPTION: Shows the change in CSS class names from expandIcon to expandIconWrapper.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_1

LANGUAGE: diff
CODE:
```
-'.MuiAccordionSummary-expandIcon': {
+'.MuiAccordionSummary-expandIconWrapper': {
```

----------------------------------------

TITLE: Importing Menu Component for Breadcrumbs with Dropdown in React (Joy UI)
DESCRIPTION: Import statement for the Menu component that can be used to create dropdown menus for condensed breadcrumbs navigation patterns.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
import Menu from '@mui/joy/Menu';
```

----------------------------------------

TITLE: Class Name Prefix Example
DESCRIPTION: Example showing how class name prefixes work with both Joy UI and Material UI components, demonstrating potential styling conflicts due to shared class names.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/material-ui/material-ui.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import MaterialTypography, {
  typographyClasses as materialTypographyClasses,
} from '@mui/material/Typography';
import JoyTypography, {
  typographyClasses as joyTyographyClasses,
} from '@mui/joy/Typography';
import Stack from '@mui/material/Stack';

<Stack
  sx={{
    // similar to `& .${joyTyographyClasses.root}`
    [`& .${materialTypographyClasses.root}`]: {
      color: 'red',
    },
  }}
>
  {/* Both components are red. */}
  <MaterialTypography>Red</MaterialTypography>
  <JoyTypography>Red</JoyTypography>
</Stack>;
```

----------------------------------------

TITLE: Handling Dialog Backdrop Clicks with onClose Callback
DESCRIPTION: Demonstrates how to handle backdrop clicks in Dialog components using the onClose callback, which replaces the deprecated onBackdropClick prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_16

LANGUAGE: jsx
CODE:
```
function Example() {
  const [open, setOpen] = React.useState(false);

  const handleClose = (event, reason) => {
    if (reason === 'backdropClick') {
      // Handle the backdrop click
    }
    setOpen(false);
  };

  return (
    <Dialog open={open} onClose={handleClose}>
      {/* Dialog content */}
    </Dialog>
  );
}
```

----------------------------------------

TITLE: Adding Accessibility Role to Decorative Dividers
DESCRIPTION: Shows how to properly set accessibility attributes when using the Divider component for decorative purposes. This ensures screen readers can correctly interpret the content.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/divider/divider.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
<Divider component="div" role="presentation">
  {/* any elements nested inside the role="presentation" preserve their semantics. */}
</Divider>
```

----------------------------------------

TITLE: Updating CSS Selectors for Divider Component
DESCRIPTION: Migration example showing how to update CSS selectors for the Divider component, which now renders as a div instead of hr when using vertical orientation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_3

LANGUAGE: diff
CODE:
```
-import Divider from '@mui/material/Divider';
+import Divider, { dividerClasses } from '@mui/material/Divider';

 const Main = styled.main({
-  '& hr': {
+  [`& .${dividerClasses.root}`]: {
     marginTop: '16px',
   },
 });
```

----------------------------------------

TITLE: Updating theme.palette.augmentColor in Material-UI v5
DESCRIPTION: This snippet shows the change in signature for the theme.palette.augmentColor helper function in Material-UI v5. It now requires an object with color and name properties instead of just the color value.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_51

LANGUAGE: diff
CODE:
```
-theme.palette.augmentColor(red);
+theme.palette.augmentColor({ color: red, name: 'brand' });
```

----------------------------------------

TITLE: Updating Theme Declaration Module Paths
DESCRIPTION: Diff showing how to update theme augmentation declarations to use the correct module path and interface names for v7.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_6

LANGUAGE: diff
CODE:
```
-declare module '@mui/material/styles/createTypography' {
+declare module '@mui/material/styles' {
-  interface TypographyOptions {
+  interface TypographyVariantsOptions {
     // ...
   }

-  interface Typography {
+  interface TypographyVariants {
     // ...
   }
 }
```

----------------------------------------

TITLE: Running Skeleton Variant Codemod Command
DESCRIPTION: Command to execute the skeleton-variant codemod on a specified path. This updates Skeleton component variant values to the new naming convention.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_108

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/skeleton-variant <path>
```

----------------------------------------

TITLE: Importing Skeleton Component in React
DESCRIPTION: Basic import statement for the Skeleton component from Joy UI, which is the first step to using it in a React application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/skeleton/skeleton.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Skeleton from '@mui/joy/Skeleton';
```

----------------------------------------

TITLE: Importing Basic List Components in React
DESCRIPTION: Demonstrates how to import the fundamental List and ListItem components from Joy UI. These are the core components needed to create a basic list.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import List from '@mui/joy/List';
import ListItem from '@mui/joy/ListItem';
```

----------------------------------------

TITLE: Importing Badge Component in React
DESCRIPTION: Basic import statement for the Badge component from MUI Joy UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/badge/badge.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Badge from '@mui/joy/Badge';
```

----------------------------------------

TITLE: Replacing Deprecated Divider Light Prop with SX Prop
DESCRIPTION: Shows how to replace the deprecated 'light' prop on the Divider component with an equivalent styling using the 'sx' prop.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_22

LANGUAGE: diff
CODE:
```
 <Divider
-  light
+  sx={{ opacity: 0.6 }}
 />
```

----------------------------------------

TITLE: Managing Overflow in Material-UI
DESCRIPTION: Examples of overflow property implementation to handle content that exceeds its container. This shows how to hide overflowing content or enable scrolling within a container.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
<Box component="div" sx={{ overflow: 'hidden' }}>
  Not scrollable, overflow is hidden
</Box>
<Box component="div" sx={{ overflow: 'auto' }}>
  Try scrolling this overflow auto box
</Box>
```

----------------------------------------

TITLE: Running JSS to TSS-React Codemod Command
DESCRIPTION: Command to execute the JSS to TSS-React migration codemod on a specified path. This transforms JSS styling with makeStyles or withStyles to use tss-react API.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_90

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/jss-to-tss-react <path>
```

----------------------------------------

TITLE: Modal Props Codemod Example
DESCRIPTION: This codemod removes the deprecated disableBackdropClick and onEscapeKeyDown props from Modal components to match API changes in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_97

LANGUAGE: diff
CODE:
```
 <Modal
-  disableBackdropClick
-  onEscapeKeyDown={handleEscapeKeyDown}
 />
```

----------------------------------------

TITLE: Importing Pigment CSS Stylesheet (Vite Main) - Diff
DESCRIPTION: Diff showing the addition of the required Pigment CSS stylesheet import (`@mui/material-pigment-css/styles.css`) at the top of the main entry file (e.g., `src/main.js` or `src/main.tsx`) in a Vite project.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_6

LANGUAGE: diff
CODE:
```
 import * as React from 'react';
+import '@mui/material-pigment-css/styles.css';
 import App from './App';

 ReactDOM.createRoot(document.getElementById('root')).render(
   <React.StrictMode>
     <App />
   </React.StrictMode>,
 );
```

----------------------------------------

TITLE: Dense Menu with Reduced Padding
DESCRIPTION: Menu implementation with reduced padding and text size for long lists using the dense prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
{"demo": "DenseMenu.js", "bg": true}
```

----------------------------------------

TITLE: Calculating Grid Item Width using CSS Variables in JavaScript
DESCRIPTION: Shows a JavaScript object representing CSS rules where a grid item's width is calculated using the CSS `calc()` function and a CSS variable `--Grid-columns` provided by its container. This approach, used in Grid v2, simplifies the logic compared to Grid v1.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/build-layouts-faster-with-grid-v2.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
{
  // --Grid-columns is defined in the grid container
  width: `calc(100% * ${value} / var(--Grid-columns))`,
}
```

----------------------------------------

TITLE: Implementing a Material UI Slider with Custom CSS (JSX)
DESCRIPTION: This React component (`PlainCssSliderDeep1`) renders two Material UI `Slider` components. Both have a default value of 30. The second slider additionally has the class name `slider` applied, presumably for custom styling defined in the imported `PlainCssSliderDeep1.css` file. Requires React, `@mui/material` and a CSS file.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/codeblock.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
```jsx title="PlainCssSliderDeep1.js"
import * as React from 'react';
import Slider from '@mui/material/Slider';
import './PlainCssSliderDeep1.css';

export default function PlainCssSliderDeep1() {
  return (
    <div>
      <Slider defaultValue={30} />
      <Slider defaultValue={30} className="slider" />
    </div>
  );
}
```
```

----------------------------------------

TITLE: Restoring Old MUI JoyChip Default Props using extendTheme in JavaScript
DESCRIPTION: Provides a theme customization snippet using `extendTheme` to revert the default props for the `JoyChip` component. It sets the default `variant` back to 'solid' and the default `color` back to 'primary'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
extendTheme({
  components: {
    JoyChip: {
      defaultProps: {
        variant: 'solid',
        color: 'primary',
      },
    },
  },
});
```

----------------------------------------

TITLE: Embedding JSX UI Component within Info Callout - JSX
DESCRIPTION: Presents a React functional component that imports MUI's Stack component and displays it within an info callout block, demonstrating how to include live code snippets and usage examples inside styled documentation containers. Dependencies include React and '@mui/material/Stack'. The component accepts no parameters and simply renders a Stack with full width and default spacing, expected to be displayed as a working example within a documentation context.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/callouts.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
import * as React from 'react';\nimport Stack from '@mui/material/Stack';\n\nexport default function BasicAlerts() {\n  return <Stack sx={{ width: '100%' }} spacing={2} />;\n}
```

----------------------------------------

TITLE: styled Component with Dynamic Props (JS) - After
DESCRIPTION: Demonstrates migrating a `styled` component with dynamic props. The core styles are moved to a `FlashCodeRoot` component using CSS variables. A wrapper component (`FlashCode`) then sets these CSS variables using the inline `style` prop based on the incoming component props.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_27

LANGUAGE: js
CODE:
```
const FlashCodeRoot = styled('div')(({ theme }) => ({
  top: `calc(var(--Flashcode-lineHeight) * 1.5 * var(--Flashcode-startLine))`,
  height: `calc(var(--Flashcode-lineHeight) * 1.5 * (var(--Flashcode-endLine) - var(--Flashcode-startLine) + 1))`,
  ...theme.typography.caption,
}));

const FlashCode = React.forwardRef(function FlashCode(props, ref) {
  const {
    children,
    startLine = 0,
    endLine = startLine,
    lineHeight = '0.75rem',
    ...other
  } = props;

  return (
    <FlashCodeRoot
      ref={ref}
      {...other}
      style={{
        '--Flashcode-lineHeight': lineHeight,
        '--Flashcode-startLine': startLine,
        '--Flashcode-endLine': endLine,
        ...other.style,
      }}
    >
      {children}
    </FlashCodeRoot>
  );
});

export default FlashCode;
```

----------------------------------------

TITLE: Importing Click-Away Listener in Material-UI
DESCRIPTION: This snippet shows how to import the Click-Away Listener component from Material-UI. It's the first step in using the component in a React application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/click-away-listener/click-away-listener.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import ClickAwayListener from '@mui/material/ClickAwayListener';
```

----------------------------------------

TITLE: Configuring Class Name Prefix with ClassNameGenerator JS
DESCRIPTION: This JavaScript snippet shows how to use `ClassNameGenerator.configure` to add a custom prefix ('foo-bar-') to all generated Material UI class names.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/classname-generator/classname-generator.md#_snippet_3

LANGUAGE: js
CODE:
```
// MuiClassNameSetup.js
import { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/material/className';

ClassNameGenerator.configure((componentName) => `foo-bar-${componentName}`);
```

----------------------------------------

TITLE: Implementing Basic Speed Dial in React
DESCRIPTION: Demonstrates how to create a basic Speed Dial component that displays related actions when pressed.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/speed-dial/speed-dial.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
{"demo": "BasicSpeedDial.js"}
```

----------------------------------------

TITLE: Applying Color Inversion to Custom Component with sx Prop in React
DESCRIPTION: Demonstrates how to use the applySolidInversion utility with the sx prop to add color inversion to a custom Box component. This allows color inversion to be applied to components not natively supported by Joy UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/main-features/color-inversion/color-inversion.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Box sx={[{ ...baseStyles }, applySolidInversion('neutral')]}>...</Box>
```

----------------------------------------

TITLE: JavaScript HTML Direction Setup
DESCRIPTION: Alternative approach to set RTL direction using JavaScript API when direct HTML modification is not possible.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/right-to-left/right-to-left.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
document.documentElement.setAttribute('dir', 'rtl');
```

----------------------------------------

TITLE: Opting Out of RTL for Specific Components
DESCRIPTION: Use the /* @noflip */ directive in styled components to prevent specific CSS properties from being flipped in RTL mode.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/right-to-left/right-to-left.md#2025-04-22_snippet_7

LANGUAGE: js
CODE:
```
const LeftToRightTextInRtlApp = styled('div')`
  /* @noflip */
  text-align: left;
`;
```

----------------------------------------

TITLE: Updating Grid Import Statements for Material UI v6
DESCRIPTION: Shows how to update import statements when migrating from Grid to Grid2 in Material UI v6.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_1

LANGUAGE: diff
CODE:
```
// The legacy Grid component is named Grid
-import Grid from '@mui/material/Grid';

// The updated Grid component is named Grid2
+import Grid from '@mui/material/Grid2';
```

----------------------------------------

TITLE: Dynamic Color After Migration (theme) - JS
DESCRIPTION: Migrated version of the `MuiCard` theme `styleOverrides`, replacing the owner state callback with the `variants` property to define dynamic styles based on props like `palette`, compatible with Pigment CSS.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_17

LANGUAGE: js
CODE:
```
const theme = createTheme({
  components: {
    MuiCard: {
      styleOverrides: {
        root: ({ theme }) => ({
          variants: [
            ...Object.entries(theme.palette)
              .filter(([, palette]) => palette && palette.main)
              .map(([palette, { main }]) => ({
                props: { palette },
                style: {
                  color: main,
                },
              })),
          ],
        }),
      },
    },
  },
});
```

----------------------------------------

TITLE: Basic ClassNameGenerator Configuration Setup JS
DESCRIPTION: This JavaScript snippet shows the basic structure for setting up the `ClassNameGenerator`. It imports the unstable API and calls `configure` with a simple identity function as the class name generation logic.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/classname-generator/classname-generator.md#_snippet_1

LANGUAGE: js
CODE:
```
// create a new file called `MuiClassNameSetup.js` at the root or src folder.
import { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/material/className';

ClassNameGenerator.configure(
  // Do something with the componentName
  (componentName) => componentName,
);
```

----------------------------------------

TITLE: Downloading and Extracting Material UI Vite Example (Bash)
DESCRIPTION: This snippet uses `curl` to download the Material UI repository as a tarball, pipes it to `tar` to extract the specific Vite example directory, stripping parent directories, and then changes the current directory into the extracted project folder. It is used to quickly obtain the example code without cloning the full repository.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-vite/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-vite
cd material-ui-vite
```

----------------------------------------

TITLE: Updating ButtonGroup CSS Class Selectors
DESCRIPTION: CSS selector transformations for ButtonGroup components, showing the transition from descendant selectors to direct child selectors with more specific class combinations.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_14

LANGUAGE: css
CODE:
```
.MuiButtonGroup-root.MuiButtonGroup-horizontal > .MuiButtonGroup-grouped
.MuiButtonGroup-root.MuiButtonGroup-vertical > .MuiButtonGroup-grouped
.MuiButtonGroup-root.MuiButtonGroup-text > .MuiButtonGroup-grouped
.MuiButtonGroup-root.MuiButtonGroup-text.MuiButtonGroup-horizontal > .MuiButtonGroup-grouped
.MuiButtonGroup-root.MuiButtonGroup-text.MuiButtonGroup-vertical > .MuiButtonGroup-grouped
```

----------------------------------------

TITLE: Configuring Theme for Portals in Shadow DOM
DESCRIPTION: This code snippet shows how to configure the Material UI theme to render portals inside the shadow DOM container for components like Menu, Dialog, and Popover.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/shadow-dom/shadow-dom.md#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
const theme = createTheme({
  components: {
    MuiPopover: {
      defaultProps: {
        container: shadowRootElement,
      },
    },
    MuiPopper: {
      defaultProps: {
        container: shadowRootElement,
      },
    },
    MuiModal: {
      defaultProps: {
        container: shadowRootElement,
      },
    },
  },
});

// ...

<ThemeProvider theme={theme}>
  <App />
</ThemeProvider>;
```

----------------------------------------

TITLE: Minimal TypeScript Type Definition for Tabbed Display (TypeScript)
DESCRIPTION: This snippet shows a simple empty type alias `type A = {}` in TypeScript. It's intended as example code within the 'TS' tab of a `@mui/docs/HighlightedCodeWithTabs` component configuration, demonstrating how to embed code snippets within component props.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/codeblock.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
type A = {}
```

----------------------------------------

TITLE: Running Pigment CSS Vite Demo Project
DESCRIPTION: Set of commands for installing dependencies, starting the development server, and building the project code. These should be executed in the project directory after building the workspace packages.
SOURCE: https://github.com/mui/material-ui/blob/master/apps/pigment-css-vite-app/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
pnpm install
pnpm dev
pnpm build
```

----------------------------------------

TITLE: Card Component HTML Anatomy
DESCRIPTION: The HTML structure of the Card component and its supplementary components, showing how they nest within a single root div element.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/card/card.md#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<div class="MuiCard-root">
  <div class="MuiCardCover-root">
    <!-- optional Card Cover layer -->
  </div>
  <div class="MuiCardContent-root">
    <!-- optional Card Content layer -->
  </div>
  <div class="MuiCardOverflow-root">
    <!-- optional Card Overflow utility -->
  </div>
  <div class="MuiCardActions-root">
    <!-- optional Card Actions layer -->
  </div>
</div>
```

----------------------------------------

TITLE: Updating Collapse Props
DESCRIPTION: Renames collapsedHeight prop to collapsedSize and updates classes key.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_11

LANGUAGE: diff
CODE:
```
-<Collapse collapsedHeight={40}>
+<Collapse collapsedSize={40}>

-<Collapse classes={{ container: 'collapse' }}>
+<Collapse classes={{ root: 'collapse' }}>
```

----------------------------------------

TITLE: Updating `withStyles` HOC Usage in JavaScript/JSX
DESCRIPTION: Illustrates the necessary changes when using the `withStyles` HOC during migration to MUI v5. The import path is changed from '@mui/material/styles' to '@mui/styles'. Additionally, it demonstrates the requirement of wrapping the component with `ThemeProvider` from '@mui/material/styles' and providing a theme, as `defaultTheme` is no longer available automatically.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_34

LANGUAGE: diff
CODE:
```
-import { withStyles } from '@mui/material/styles';
+import { withStyles } from '@mui/styles';
+import { createTheme, ThemeProvider } from '@mui/material/styles';

+const defaultTheme = createTheme();
  const MyComponent = withStyles((props) => {
    const { classes, className, ...other } = props;
    return <div className={clsx(className, classes.root)} {...other} />
  })(({ theme }) => ({ root: { background: theme.palette.primary.main }}));

  function App() {
-  return <MyComponent />;
+  return <ThemeProvider theme={defaultTheme}><MyComponent /></ThemeProvider>;
  }
```

----------------------------------------

TITLE: Disabling CSS Color Scheme Property with createTheme - JS
DESCRIPTION: Configures the `createTheme` function to prevent the default CSS `color-scheme` property from being automatically added to the `:root` element based on the palette mode. Set `disableCssColorScheme` to `true` within the `cssVariables` option to disable this behavior.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#_snippet_13

LANGUAGE: JS
CODE:
```
createTheme({
  cssVariables: { disableCssColorScheme: true },
});
```

----------------------------------------

TITLE: Changing Layout Component Import Sources (JS/TS)
DESCRIPTION: Instructs users to change the import paths for Material UI layout components (`Container`, `Grid`, `Stack`, `Hidden`) to use the Pigment CSS compatible versions from `@mui/material-pigment-css`. Note that the `Grid` component's behavior changes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_28

LANGUAGE: diff
CODE:
```
-import Container from '@mui/material/Container';
+import Container from '@mui/material-pigment-css/Container';

-import Grid from '@mui/material/Grid';
+import Grid from '@mui/material-pigment-css/Grid';

-import Stack from '@mui/material/Stack';
+import Stack from '@mui/material-pigment-css/Stack';

-import Hidden from '@mui/material/Hidden';
+import Hidden from '@mui/material-pigment-css/Hidden';
```

----------------------------------------

TITLE: Alternative Grid2 Import Update
DESCRIPTION: Another example of updating the import path for the Grid2 component when importing directly from its module.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_5

LANGUAGE: diff
CODE:
```
-import Grid from '@mui/material/Unstable_Grid2';
+import Grid from '@mui/material/Grid2';
```

----------------------------------------

TITLE: Integrating ClassNameGenerator in Create React App Diff
DESCRIPTION: This diff illustrates how to import the `ClassNameGenerator` setup file (`MuiClassNameSetup.js`) into the main `index.js` file of a Create React App project to apply the configuration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/classname-generator/classname-generator.md#_snippet_11

LANGUAGE: diff
CODE:
```
+import './MuiClassNameSetup';
 import * as React from 'react';
 import * as ReactDOM from 'react-dom';
 import App from './App';

 ReactDOM.render(<App />);
```

----------------------------------------

TITLE: Setting Up Dark Mode in Next.js Pages Router with Joy UI
DESCRIPTION: Configures a Next.js Pages Router project to support dark mode with Joy UI, preventing screen flickering on initial load by using InitColorSchemeScript before the main application script.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/dark-mode/dark-mode.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
import Document, { Html, Head, Main, NextScript } from 'next/document';
import InitColorSchemeScript from '@mui/joy/InitColorSchemeScript';

export default class MyDocument extends Document {
  render() {
    return (
      <Html data-color-scheme="light">
        <Head>...</Head>
        <body>
          <InitColorSchemeScript />
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}
```

----------------------------------------

TITLE: Running MUI sx Prop Codemod (Bash)
DESCRIPTION: Provides the command to run a codemod script using `npx` to automatically migrate certain `sx` prop usages to be compatible with Pigment CSS. This automates common migration tasks. Requires the `@mui/codemod` package.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_20

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v6.0.0/sx-prop path/to/folder
```

----------------------------------------

TITLE: Assembling Joy UI Component with Slots
DESCRIPTION: Shows how to assemble a complete component using the previously created styled slots.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
// /path/to/Stat.js
import * as React from 'react';

const StatRoot = styled('div', {
  name: 'JoyStat',
  slot: 'root',
})(…);

const StatValue = styled('div', {
  name: 'JoyStat',
  slot: 'value',
})(…);

const StatUnit = styled('div', {
  name: 'JoyStat',
  slot: 'unit',
})(…);

const Stat = React.forwardRef(function Stat(props, ref) {
  const { value, unit, ...other } = props;

  return (
    <StatRoot ref={ref} {...other}>
      <StatValue>{value}</StatValue>
      <StatUnit>{unit}</StatUnit>
    </StatRoot>
  );
});

export default Stat;
```

----------------------------------------

TITLE: Type Casting for styled Box Components in Material UI v6
DESCRIPTION: Alternative approach to handle Box component type issues with styled by casting the result to the Box type.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_22

LANGUAGE: diff
CODE:
```
 const StyledBox = styled(Box)`
   color: white;
-`;
+` as typeof Box;
```

----------------------------------------

TITLE: Implementing Theme Scoping with Material UI
DESCRIPTION: Shows how to configure Material UI's ThemeProvider with THEME_ID to work alongside another UI library. This approach prevents theme conflicts by scoping the Material UI theme separately from other libraries.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/theme-scoping/theme-scoping.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { ThemeProvider, THEME_ID, createTheme } from '@mui/material/styles';
import { AnotherThemeProvider } from 'another-ui-library';

const materialTheme = createTheme(/* your theme */);

function App() {
  return (
    <AnotherThemeProvider>
      <ThemeProvider theme={{ [THEME_ID]: materialTheme }}>
        {/* components from another library and Material UI */}
      </ThemeProvider>
    </AnotherThemeProvider>
  );
}
```

----------------------------------------

TITLE: Implementing Removed theme.typography.round Helper in Material-UI v5
DESCRIPTION: This snippet provides a JavaScript function to replace the removed theme.typography.round helper in Material-UI v5. It rounds a value to 5 decimal places.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_52

LANGUAGE: javascript
CODE:
```
function round(value) {
  return Math.round(value * 1e5) / 1e5;
}
```

----------------------------------------

TITLE: Updating Info Color Usage
DESCRIPTION: Diff showing migration from info to neutral color in Chip component
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_1

LANGUAGE: diff
CODE:
```
- <Chip color="info" variant="soft">
+ <Chip color="neutral" variant="soft">
```

----------------------------------------

TITLE: Updating Dialog Transition Props
DESCRIPTION: Consolidates Dialog transition props into TransitionProps object.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_13

LANGUAGE: diff
CODE:
```
  <Dialog
-  onEnter={onEnter}
-  onEntered={onEntered}
-  onEntering={onEntering}
-  onExit={onExit}
-  onExited={onExited}
-  onExiting={onExiting}
+  TransitionProps={{
+    onEnter,
+    onEntered,
+    onEntering,
+    onExit,
+    onExited,
+    onExiting,
+  }}
  >
```

----------------------------------------

TITLE: Updating Grid2 Import Path
DESCRIPTION: Shows how to update imports for Grid2 component which was stabilized in v6 by removing the Unstable_ prefix from import paths.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_4

LANGUAGE: diff
CODE:
```
-import { Unstable_Grid2 as Grid2 } from '@mui/material';
+import { Grid2 } from '@mui/material';
```

----------------------------------------

TITLE: Setting Grid Row Properties
DESCRIPTION: Shows how to set grid row positioning using either line numbers or span values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/grid/grid.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Box sx={{ gridRow: '1 / 3' }}>…
```

LANGUAGE: jsx
CODE:
```
<Box sx={{ gridRow: 'span 2' }}>…
```

----------------------------------------

TITLE: Applying Inline Margin using the sx Prop in MUI (JSX)
DESCRIPTION: Demonstrates using the `sx` prop on an MUI `Slider` component to apply vertical margin directly. The `my: 1` corresponds to `margin-top: theme.spacing(1)` and `margin-bottom: theme.spacing(1)`, which typically defaults to 8px.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
// add margin: 8px 0px;
<Slider sx={{ my: 1 }} />
```

----------------------------------------

TITLE: Importing ClassNameGenerator Setup File JS
DESCRIPTION: This JavaScript snippet demonstrates how to import the `MuiClassNameSetup.js` file in the application's main entry point, ensuring that the class name generator is configured before any Material UI components are imported.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/classname-generator/classname-generator.md#_snippet_2

LANGUAGE: js
CODE:
```
import './MuiClassNameSetup';
import Button from '@mui/material/Button';
// ...other component imports

function App() {
  return <Button>Text</Button>;
}
```

----------------------------------------

TITLE: Configuring Vite Plugin - JS
DESCRIPTION: Shows how to import and add the `pigment` plugin to the `plugins` array in your Vite configuration file, specifying `@mui/material` for transformation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_5

LANGUAGE: js
CODE:
```
import { defineConfig } from 'vite';
import { pigment } from '@pigment-css/vite-plugin';

/**
 * @type {import('@pigment-css/vite-plugin').PigmentOptions}
 */
const pigmentConfig = {
  transformLibraries: ['@mui/material'],
};

export default defineConfig({
  plugins: [
    pigment(pigmentConfig),
    // ... Your other plugins.
  ],
});
```

----------------------------------------

TITLE: Updating Tabs onChange event type in React TypeScript
DESCRIPTION: Changes the event type in onChange to React.SyntheticEvent instead of React.ChangeEvent for Tabs component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_34

LANGUAGE: diff
CODE:
```
-<Tabs onChange={(event: React.ChangeEvent<{}>, value: unknown) => {}} />
+<Tabs onChange={(event: React.SyntheticEvent, value: unknown) => {}} />
```

----------------------------------------

TITLE: Applying Conditional Styling Based on Component Props in Joy UI
DESCRIPTION: Shows how to conditionally apply styles based on component props using a callback function in styleOverrides. The function receives ownerState and theme as arguments.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
extendTheme({
  components: {
    JoyChip: {
      styleOverrides: {
        // `ownerState` contains the component props and internal state
        root: ({ ownerState, theme }) => ({
          ...(ownerState.size === 'sm' && {
            borderRadius: theme.vars.radius.xs,
          }),
        }),
      },
    },
  },
});
```

----------------------------------------

TITLE: Updating Chip Variant
DESCRIPTION: Renames Chip 'default' variant to 'filled' for consistency with other components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_7

LANGUAGE: diff
CODE:
```
-<Chip variant="default">
+<Chip>
```

----------------------------------------

TITLE: Alert Import Path Update
DESCRIPTION: Shows the migration of Alert component import from lab to core.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_3

LANGUAGE: diff
CODE:
```
-import Alert from '@mui/lab/Alert';
-import AlertTitle from '@mui/lab/AlertTitle';
+import Alert from '@mui/material/Alert';
+import AlertTitle from '@mui/material/AlertTitle';
```

----------------------------------------

TITLE: Customizing Accordion Heading Level
DESCRIPTION: Example showing how to change the default heading level of the Accordion component using slotProps.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/accordion/accordion.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Accordion slotProps={{ heading: { component: 'h4' } }}>
  <AccordionSummary
    expandIcon={<ExpandMoreIcon />}
    aria-controls="panel1-content"
    id="panel1-header"
  >
    Accordion
  </AccordionSummary>
  <AccordionDetails>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada
    lacus ex, sit amet blandit leo lobortis eget.
  </AccordionDetails>
</Accordion>
```

----------------------------------------

TITLE: Updating FormControl Default Variant in React
DESCRIPTION: Changes the default variant of FormControl from 'standard' to 'outlined' to align with Material Design guidelines. The 'standard' variant prop must now be explicitly specified if needed.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_14

LANGUAGE: diff
CODE:
```
-<FormControl value="Standard" />
-<FormControl value="Outlined" variant="outlined" />
+<FormControl value="Standard" variant="standard" />
+<FormControl value="Outlined" />
```

----------------------------------------

TITLE: Updating Tabs Variant Props
DESCRIPTION: Removal of deprecated fullWidth and scrollable props in favor of variant prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_19

LANGUAGE: diff
CODE:
```
-<Tabs fullWidth scrollable />
+<Tabs variant="scrollable" />
```

----------------------------------------

TITLE: Enabling Aggregation Feature in MUI X Data Grid Premium
DESCRIPTION: Shows how to activate the aggregation functionality in the DataGridPremium component using the experimentalFeatures prop. This enables the Aggregation option in column menus for supported column types.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/aggregation-functions.md#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
<DataGridPremium experimentalFeatures={{ aggregation: true }} {...otherProps} />
```

----------------------------------------

TITLE: Updating Modal Event Handling in React
DESCRIPTION: Replaces specific event props with more generic onClose handlers in Modal components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_22

LANGUAGE: diff
CODE:
```
 <Modal
-  disableBackdropClick
-  onClose={handleClose}
+  onClose={(event, reason) => {
+    if (reason !== 'backdropClick') {
+      handleClose(event, reason);
+    }
+  }}
 />
```

LANGUAGE: diff
CODE:
```
 <Modal
-  onEscapeKeyDown={handleEscapeKeyDown}
+  onClose={(event, reason) => {
+    if (reason === 'escapeKeyDown') {
+      handleEscapeKeyDown(event);
+    }
+  }}
 />
```

----------------------------------------

TITLE: Removing Vite Icons Package Alias
DESCRIPTION: Diff showing how to remove the Vite alias for forcing ESM imports for the icons package, which is no longer necessary in v7.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_5

LANGUAGE: diff
CODE:
```
 // vite.config.js
   resolve: {
     alias: [
-      {
-        find: /^@mui\/icons-material\/(.*)/,
-        replacement: "@mui/icons-material/esm/$1",
-      },
     ],
   },
```

----------------------------------------

TITLE: Defining Grid Area Names
DESCRIPTION: Example of naming grid areas for use with grid-template-areas property.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/grid/grid.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<Box sx={{ gridArea: 'header' }}>…
```

----------------------------------------

TITLE: Theme configuration example to avoid link-underline-hover codemod
DESCRIPTION: Example showing a theme configuration that sets the default Link underline property to 'always'. If this configuration is present, you should not run the link-underline-hover codemod.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_17

LANGUAGE: js
CODE:
```
// if you have theme setup like this, ❌ don't run this codemod.
// this default props can be removed later because `always` is the default value in v5
createMuiTheme({
  components: {
    MuiLink: {
      defaultProps: {
        underline: 'always',
      },
    },
  },
});
```

----------------------------------------

TITLE: Disabling Color Scheme Change Transitions in MUI ThemeProvider - JSX
DESCRIPTION: Shows how to make the switch between light and dark color schemes instantaneous without any visual transition by adding the `disableTransitionOnChange` prop to the `ThemeProvider` component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#_snippet_6

LANGUAGE: JSX
CODE:
```
<ThemeProvider theme={theme} disableTransitionOnChange>
  ...
</ThemeProvider>
```

----------------------------------------

TITLE: TypeScript Interface Augmentation for Custom Colors in Joy UI
DESCRIPTION: Shows how to add type safety for custom color values using TypeScript module augmentation, enabling proper type checking with custom colors.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
// This part could be declared in your theme file
declare module '@mui/joy/Button' {
  interface ButtonPropsColorOverrides {
    secondary: true;
    tertiary: true;
  }
}

// typed-safe
<Button color="secondary" />
<Button color="tertiary" />
```

----------------------------------------

TITLE: Setting Default Color Scheme Mode in MUI ThemeProvider - JS
DESCRIPTION: Demonstrates how to explicitly set the initial default color scheme mode when using the `colorSchemes` API by passing `'light'`, `'dark'`, or `'system'` to the `defaultMode` prop of the `ThemeProvider` component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#_snippet_8

LANGUAGE: JS
CODE:
```
<ThemeProvider theme={theme} defaultMode="dark">
  ...
</ThemeProvider>
```

----------------------------------------

TITLE: Using String-based Background Values with Emotion
DESCRIPTION: Example of the correct way to specify background values using string-based syntax with Emotion instead of JSS array-based syntax.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
const theme = createTheme({
  components: {
    MuiBox: {
      styleOverrides: {
        root: {
          background:
            'url(image1.png) no-repeat top, url(image2.png) no-repeat center !important',
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Running Theme Migration Codemods for Material UI v6
DESCRIPTION: Commands to run codemods that automatically convert theme.palette.mode checks to theme.applyStyles in styled components, sx props, and theme files.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_25

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v6.0.0/styled <path/to/folder-or-file>
npx @mui/codemod@latest v6.0.0/sx-prop <path/to/folder-or-file>
npx @mui/codemod@latest v6.0.0/theme-v6 <path/to/theme-file>
```

----------------------------------------

TITLE: Updating createStyles Import Path
DESCRIPTION: Diff showing the updated import path for createStyles, which was moved from @mui/material/styles to @mui/styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_24

LANGUAGE: diff
CODE:
```
-import { createStyles } from '@mui/material/styles';
+import { createStyles } from '@mui/styles';
```

----------------------------------------

TITLE: Configuring Font Family in Material UI Theme
DESCRIPTION: Demonstrates how to customize the font family in a Material UI theme using system fonts instead of the default Roboto font.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/typography/typography.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const theme = createTheme({
  typography: {
    fontFamily: [
      '-apple-system',
      'BlinkMacSystemFont',
      '"Segoe UI"',
      'Roboto',
      '"Helvetica Neue"',
      'Arial',
      'sans-serif',
      '"Apple Color Emoji"',
      '"Segoe UI Emoji"',
      '"Segoe UI Symbol"',
    ].join(','),
  },
});
```

----------------------------------------

TITLE: Migrating Badge Component Props in Theme Configuration
DESCRIPTION: Shows how to update the theme defaultProps for Badge component from deprecated 'components/componentsProps' pattern to the newer 'slots/slotProps' approach.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_8

LANGUAGE: diff
CODE:
```
 MuiBadge: {
   defaultProps: {
-    components: { Root: CustomRoot }
-    componentsProps: { root: { testid: 'test-id' }}
+    slots: { root: CustomRoot },
+    slotProps: { root: { testid: 'test-id' } },
  },
 },
```

----------------------------------------

TITLE: Stack Component HTML Structure
DESCRIPTION: The basic HTML structure of the Stack component showing the root div element with its class.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/stack/stack.md#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<div class="MuiStack-root">
  <!-- Stack contents -->
</div>
```

----------------------------------------

TITLE: Controlling White Space in Material-UI
DESCRIPTION: Examples of whiteSpace property usage to control text wrapping and line breaks. This demonstrates nowrap to prevent text wrapping and normal to allow standard wrapping behavior.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_7

LANGUAGE: jsx
CODE:
```
<Box component="div" sx={{ whiteSpace: 'nowrap' }}>
  Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.
</Box>
<Box component="div" sx={{ whiteSpace: 'normal' }}>
  Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.
</Box>
```

----------------------------------------

TITLE: Configuring Class Name to Remove Mui Prefix JS
DESCRIPTION: This JavaScript snippet demonstrates how to use `ClassNameGenerator.configure` to remove the default 'Mui' prefix from generated Material UI class names using string replacement.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/classname-generator/classname-generator.md#_snippet_5

LANGUAGE: js
CODE:
```
// MuiClassNameSetup.js
import { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/material/className';

ClassNameGenerator.configure((componentName) => componentName.replace('Mui', ''));
```

----------------------------------------

TITLE: Updating Flat Button Variant
DESCRIPTION: Diff showing the migration from the deprecated 'flat' button variant to the new 'text' variant.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_12

LANGUAGE: diff
CODE:
```
-<Button variant="flat" />
+<Button variant="text" />
```

----------------------------------------

TITLE: Array-based Theme Spacing in Material-UI
DESCRIPTION: Shows spacing transformation when theme spacing is configured as an array. The prop value is used as array index to determine the margin value.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/spacing/spacing.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
const theme = {
  spacing: [0, 2, 3, 5, 8],
}

<Box sx={{ m: -2 }} /> // margin: -3px;
<Box sx={{ m: 0 }} /> // margin: 0px;
<Box sx={{ m: 2 }} /> // margin: 3px;
```

----------------------------------------

TITLE: Implementing Row and Column Spacing in Grid Components with React
DESCRIPTION: Demonstrates how to use the rowSpacing and columnSpacing props in the Grid container component to create different spacing between rows and columns.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_7

LANGUAGE: jsx
CODE:
```
<Grid container rowSpacing={1} columnSpacing={2} />
```

----------------------------------------

TITLE: Adding Responsive Viewport Meta Tag in HTML
DESCRIPTION: This HTML snippet shows how to add a responsive viewport meta tag to ensure proper rendering and touch zooming for all devices when using Material UI components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/usage/usage.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<meta name="viewport" content="initial-scale=1, width=device-width" />
```

----------------------------------------

TITLE: Customizing Divider Component with Text in React
DESCRIPTION: This snippet shows how to customize the Divider component to wrap other elements like text, using the component prop and setting the appropriate ARIA role.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/dividers/dividers.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<Divider component="div" role="presentation">
  <Typography>Text element</Typography>
</Divider>
```

----------------------------------------

TITLE: Updating Button CSS Class Selectors
DESCRIPTION: Shows how to update deprecated Button CSS class selectors with the new separate variant and color class pattern.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_11

LANGUAGE: diff
CODE:
```
-.MuiButton-textInherit
+.MuiButton-text.MuiButton-colorInherit
-.MuiButton-textPrimary
+.MuiButton-text.MuiButton-colorPrimary
-.MuiButton-textSecondary
+.MuiButton-text.MuiButton-colorSecondary
-.MuiButton-textSuccess
+.MuiButton-text.MuiButton-colorSuccess
-.MuiButton-textError
+.MuiButton-text.MuiButton-colorError
-.MuiButton-textInfo
+.MuiButton-text.MuiButton-colorInfo
-.MuiButton-textWarning
+.MuiButton-text.MuiButton-colorWarning
-.MuiButton-outlinedInherit
+.MuiButton-outlined.MuiButton-colorInherit
-.MuiButton-outlinedPrimary
+.MuiButton-outlined.MuiButton-colorPrimary
-.MuiButton-outlinedSecondary
+.MuiButton-outlined.MuiButton-colorSecondary
-.MuiButton-outlinedSuccess
+.MuiButton-outlined.MuiButton-colorSuccess
-.MuiButton-outlinedError
+.MuiButton-outlined.MuiButton-colorError
-.MuiButton-outlinedInfo
+.MuiButton-outlined.MuiButton-colorInfo
-.MuiButton-outlinedWarning
+.MuiButton-outlined.MuiButton-colorWarning
-.MuiButton-containedInherit
+.MuiButton-contained.MuiButton-colorInherit
-.MuiButton-containedPrimary
+.MuiButton-contained.MuiButton-colorPrimary
-.MuiButton-containedSecondary
+.MuiButton-contained.MuiButton-colorSecondary
-.MuiButton-containedSuccess
+.MuiButton-contained.MuiButton-colorSuccess
-.MuiButton-containedError
+.MuiButton-contained.MuiButton-colorError
-.MuiButton-containedInfo
+.MuiButton-contained.MuiButton-colorInfo
-.MuiButton-containedWarning
+.MuiButton-contained.MuiButton-colorWarning
-.MuiButton-textSizeSmall
+.MuiButton-text.MuiButton-sizeSmall
-.MuiButton-textSizeMedium
+.MuiButton-text.MuiButton-sizeMedium
-.MuiButton-textSizeLarge
+.MuiButton-text.MuiButton-sizeLarge
-.MuiButton-outlinedSizeSmall
+.MuiButton-outlined.MuiButton-sizeSmall
-.MuiButton-outlinedSizeMedium
+.MuiButton-outlined.MuiButton-sizeMedium
-.MuiButton-outlinedSizeLarge
+.MuiButton-outlined.MuiButton-sizeLarge
-.MuiButton-containedSizeSmall
+.MuiButton-contained.MuiButton-sizeSmall
-.MuiButton-containedSizeMedium
+.MuiButton-contained.MuiButton-sizeMedium
-.MuiButton-containedSizeLarge
+.MuiButton-contained.MuiButton-sizeLarge
-.MuiButton-root .MuiButton-iconSizeSmall
+.MuiButton-root.MuiButton-sizeSmall > .MuiButton-icon
-.MuiButton-root .MuiButton-iconSizeMedium
+.MuiButton-root.MuiButton-sizeMedium > .MuiButton-icon
-.MuiButton-root .MuiButton-iconSizeLarge
+.MuiButton-root.MuiButton-sizeLarge > .MuiButton-icon
```

----------------------------------------

TITLE: Installing Inter Font using Package Managers
DESCRIPTION: Commands for installing the Inter font package through Fontsource using different package managers.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/installation/installation.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npm install @fontsource/inter
```

LANGUAGE: bash
CODE:
```
pnpm add @fontsource/inter
```

LANGUAGE: bash
CODE:
```
yarn add @fontsource/inter
```

----------------------------------------

TITLE: Importing FocusTrap Component from MUI Base
DESCRIPTION: Shows how to import the FocusTrap component from @mui/base. This component traps the keyboard focus within its children.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q3-update.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
import { FocusTrap } from '@mui/base/FocusTrap';
```

----------------------------------------

TITLE: Setting Up CSS Theme Variables for Shadow DOM
DESCRIPTION: This snippet demonstrates how to configure CSS theme variables to work within the shadow DOM by setting the appropriate selectors and colorSchemeNode.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/shadow-dom/shadow-dom.md#2025-04-22_snippet_2

LANGUAGE: diff
CODE:
```
 const theme = createTheme({
+  cssVariables: {
+    rootSelector: ':host',
+    colorSchemeSelector: 'class',
+  },
   components: {
     // ...same as above steps
   }
 })
```

LANGUAGE: diff
CODE:
```
 <ThemeProvider
   theme={theme}
+  colorSchemeNode={shadowRootElement}
 >
```

----------------------------------------

TITLE: Importing usePagination Hook in React
DESCRIPTION: This snippet demonstrates how to import the usePagination hook from Material-UI for advanced customization of pagination functionality.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/pagination/pagination.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import usePagination from '@mui/material/usePagination';
```

----------------------------------------

TITLE: Updating ServerStyleSheets Import Path
DESCRIPTION: Diff showing the updated import path for ServerStyleSheets, which was moved from @mui/material/styles to @mui/styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_30

LANGUAGE: diff
CODE:
```
-import { ServerStyleSheets } from '@mui/material/styles';
+import { ServerStyleSheets } from '@mui/styles';
```

----------------------------------------

TITLE: Removing Gutters Abstraction from Theme
DESCRIPTION: Example showing how to replace the theme.mixins.gutters() abstraction with explicit padding definitions, as the gutters abstraction has been removed in v5.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_11

LANGUAGE: diff
CODE:
```
-theme.mixins.gutters(),
+paddingLeft: theme.spacing(2),
+paddingRight: theme.spacing(2),
+[theme.breakpoints.up('sm')]: {
+  paddingLeft: theme.spacing(3),
+  paddingRight: theme.spacing(3),
+},
```

----------------------------------------

TITLE: Removing Modern Bundle Aliases
DESCRIPTION: Diff showing how to remove the configuration for modern bundle aliases which are no longer needed in v7 as the modern bundles have been removed.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_4

LANGUAGE: diff
CODE:
```
 {
   resolve: {
     alias: {
-      '@mui/material': '@mui/material/modern',
-      '@mui/styled-engine': '@mui/styled-engine/modern',
-      '@mui/system': '@mui/system/modern',
-      '@mui/base': '@mui/base/modern',
-      '@mui/utils': '@mui/utils/modern',
-      '@mui/lab': '@mui/lab/modern',
     }
   }
 }
```

----------------------------------------

TITLE: Running Optimal Imports Codemod Command
DESCRIPTION: Command to execute the optimal-imports codemod on a specified path. This fixes private import paths to use the recommended public import structure.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_105

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/optimal-imports <path>
```

----------------------------------------

TITLE: Updating Drawer Classes for Proper Selector Hierarchy
DESCRIPTION: Transforms Drawer component class selectors to use a proper parent-child relationship in styling. Changes paperAnchor* classes to use the anchor* and paper classes with appropriate relationship selectors.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_27

LANGUAGE: diff
CODE:
```
 import { drawerClasses } from '@mui/material/Drawer';

 MuiDrawer: {
   styleOverrides: {
     root: {
-      [`.${drawerClasses.paperAnchorBottom}`]: {
+      [`&.${drawerClasses.anchorBottom} > .${drawerClasses.paper}`]: {
         color: 'red',
       },
-      [`.${drawerClasses.paperAnchorLeft}`]: {
+      [`&.${drawerClasses.anchorLeft} > .${drawerClasses.paper}`]: {
         color: 'red',
       },
-      [`.${drawerClasses.paperAnchorRight}`]: {
+      [`&.${drawerClasses.anchorRight} > .${drawerClasses.paper}`]: {
         color: 'red',
       },
-      [`.${drawerClasses.paperAnchorTop}`]: {
+      [`&.${drawerClasses.anchorTop} > .${drawerClasses.paper}`]: {
         color: 'red',
       },
-      [`.${drawerClasses.paperAnchorDockedBottom}`]: {
+      [`&.${drawerClasses.docked}.${drawerClasses.anchorBottom} > .${drawerClasses.paper}`]: {
         color: 'red',
       },
-      [`.${drawerClasses.paperAnchorDockedLeft}`]: {
+      [`&.${drawerClasses.docked}.${drawerClasses.anchorLeft} > .${drawerClasses.paper}`]: {
         color: 'red',
       },
-      [`.${drawerClasses.paperAnchorDockedRight}`]: {
+      [`&.${drawerClasses.docked}.${drawerClasses.anchorRight} > .${drawerClasses.paper}`]: {
         color: 'red',
       },
-      [`.${drawerClasses.paperAnchorDockedTop}`]: {
+      [`&.${drawerClasses.docked}.${drawerClasses.anchorTop} > .${drawerClasses.paper}`]: {
         color: 'red',
       },
     },
   },
 },
```

----------------------------------------

TITLE: Updating Theme Breakpoint Logic
DESCRIPTION: Modifies theme breakpoint values to align with new breakpoint logic in v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_115

LANGUAGE: diff
CODE:
```
-theme.breakpoints.down('sm')
-theme.breakpoints.between('sm', 'md')
+theme.breakpoints.down('md')
+theme.breakpoints.between('sm', 'lg')
```

----------------------------------------

TITLE: Setting HTML Direction Attribute
DESCRIPTION: Basic HTML configuration to enable RTL direction globally by setting the dir attribute on the HTML root element.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/right-to-left/right-to-left.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<html dir="rtl"></html>
```

----------------------------------------

TITLE: Non-Working Responsive Grid Example
DESCRIPTION: Example of an incorrect implementation where a grid item is missing a breakpoint value that exists in the container, causing layout issues.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
<Grid container columns={{ xs: 4, md: 12 }}>
  <Grid size={{ xs: 2 }} />
</Grid>
```

----------------------------------------

TITLE: Integrating ClassNameGenerator in Next.js Pages Router Diff
DESCRIPTION: This diff shows the integration of the `ClassNameGenerator` setup file (`MuiClassNameSetup.js`) by importing it into the `_app.js` file in a Next.js Pages Router project.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/classname-generator/classname-generator.md#_snippet_10

LANGUAGE: diff
CODE:
```
+import './MuiClassNameSetup';
 import * as React from 'react';
 import PropTypes from 'prop-types';
 import Head from 'next/head';

 export default function MyApp(props) {
   const { Component, pageProps } = props;

   return (
     <Component {...pageProps} />
   );
 }
```

----------------------------------------

TITLE: Removing default fontSize prop from SvgIcon in React
DESCRIPTION: Removes the fontSize="default" prop from SvgIcon as the default value was changed from 'default' to 'medium' for consistency.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_25

LANGUAGE: diff
CODE:
```
-<SvgIcon fontSize="default">
+<SvgIcon>
   <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" />
 </SvgIcon>
```

----------------------------------------

TITLE: Updating IconButton Size in React
DESCRIPTION: Changes the default size of IconButton and introduces a new 'large' size prop for the previous default size.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_20

LANGUAGE: diff
CODE:
```
- <IconButton>
+ <IconButton size="large">
```

----------------------------------------

TITLE: Updating Menu Transition Props in React
DESCRIPTION: Replaces individual transition event props with a single TransitionProps object in Menu components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_21

LANGUAGE: diff
CODE:
```
 <Menu
-  onEnter={onEnter}
-  onEntered={onEntered}
-  onEntering={onEntering}
-  onExit={onExit}
-  onExited={onExited}
-  onExiting={onExiting}
+  TransitionProps={{
+    onEnter,
+    onEntered,
+    onEntering,
+    onExit,
+    onExited,
+    onExiting,
+  }}
 >
```

----------------------------------------

TITLE: Select Decorator Event Handler
DESCRIPTION: Example of stopping event propagation for interactive decorators in Select component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/select/select.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<IconButton
  onMouseDown={(event) => {
    // don't open the popup when clicking on this button
    event.stopPropagation();
  }}
  onClick={() => {
    // click handler goes here
  }
>...</IconButton>
```

----------------------------------------

TITLE: Installing Material UI v4 and React 17 with npm
DESCRIPTION: Command to install Material UI v4.11.2 and React 17 as prerequisites for the migration process. This ensures compatibility before proceeding with the v5 upgrade.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install @material-ui/core@^4.11.2 react@^17.0.0
```

----------------------------------------

TITLE: Updating Grid Size Props for Object Syntax
DESCRIPTION: Shows how to convert individual breakpoint props to the new object-based size prop syntax in Material UI v6/v7.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_4

LANGUAGE: diff
CODE:
```
 <Grid
-  xs={12}
-  sm={6}
+  size={{ xs: 12, sm: 6 }}
 >
```

----------------------------------------

TITLE: Defining Public Component Utility Classes Generator & Hook (MUI/TypeScript)
DESCRIPTION: Demonstrates creating a utility function (`getFooUtilityClass`) for generating individual slot classes and a hook (`useUtilityClasses`) for public components. The hook uses `composeClasses` to combine generated utility classes with user-provided `classes` prop values, leveraging `ownerState` for conditional classes.
SOURCE: https://github.com/mui/material-ui/blob/master/TYPESCRIPT_CONVENTION.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
// fooClasses.ts
export function getFooUtilityClass(slot: string) {
  return generateUtilityClass('MuiFoo', slot);
}

const useUtilityClasses = (ownerState: FooProps & { extraProp: boolean }) => {
  // extraProp might be the key/value from react context that this component access
  const { foo, disabled, classes } = ownerState;

  const slots = {
    root: ['root', foo && 'foo', disabled && 'disabled'],
  };

  return composeClasses(slots, getFooUtilityClass, classes);
};
```

----------------------------------------

TITLE: Configuring Pigment CSS for RTL Support (JS/TS)
DESCRIPTION: Demonstrates adding the `css` property to the Pigment CSS configuration object to enable Right-to-Left (RTL) support. This involves specifying the `defaultDirection` and setting `generateForBothDir` to true.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_33

LANGUAGE: diff
CODE:
```
 const pigmentConfig = {
   theme: createTheme(),
+  css: {
+    // Specify your default CSS authoring direction
+    defaultDirection: 'ltr',
+    // Generate CSS for the opposite of the `defaultDirection`
+    // This is set to `false` by default
+    generateForBothDir: true,
+  },
 }
```

----------------------------------------

TITLE: Rename theme.palette.type to theme.palette.mode
DESCRIPTION: Code diff showing the renaming of theme.palette.type to theme.palette.mode to better follow the conventional "dark mode" terminology.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_13

LANGUAGE: diff
CODE:
```
 import { createTheme } from '@mui/material/styles';
-const theme = createTheme({ palette: { type: 'dark' } }),
+const theme = createTheme({ palette: { mode: 'dark' } }),
```

----------------------------------------

TITLE: Implementing a Basic react-admin Interface (JSX)
DESCRIPTION: This snippet shows a basic setup for a `react-admin` application. It uses the `Admin` component as a provider, configures a `simpleRestProvider` for data fetching, and defines a 'users' resource using `ListGuesser` to automatically display the data list. This illustrates the subcomponent composition approach favored by react-admin.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/making-customizable-components.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
import * as React from 'react';
import { Admin, Resource, ListGuesser } from 'react-admin';
import simpleRestProvider from 'ra-data-simple-rest';

const dataProvider = simpleRestProvider('https://domain.tld/api');

export default function App() {
  return (
    <Admin dataProvider={dataProvider}>
      <Resource name="users" list={ListGuesser} />
    </Admin>
  );
}
```

----------------------------------------

TITLE: Importing Accordion Components in React
DESCRIPTION: Basic imports for the core Accordion components from Material UI library.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/accordion/accordion.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Accordion from '@mui/material/Accordion';
import AccordionDetails from '@mui/material/AccordionDetails';
import AccordionSummary from '@mui/material/AccordionSummary';
```

----------------------------------------

TITLE: Responsive Columns in Masonry
DESCRIPTION: Shows how to implement responsive column layouts in Masonry using breakpoints.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
ResponsiveColumns.js
```

----------------------------------------

TITLE: Custom ListSubheader Component Implementation
DESCRIPTION: Example of creating a custom ListSubheader component with proper Material-UI integration
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/selects/selects.md#2025-04-22_snippet_3

LANGUAGE: TypeScript
CODE:
```
function MyListSubheader(props: ListSubheaderProps) {
  return <ListSubheader {...props} />;
}

MyListSubheader.muiSkipListHighlight = true;
export default MyListSubheader;
```

----------------------------------------

TITLE: Configuring Pigment CSS with Next.js
DESCRIPTION: Configuration setup for integrating Pigment CSS with Next.js using the withPigment plugin.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
// next.config.js
import { withPigment } from '@pigment-css/nextjs-plugin';

export default withPigment(nextConfig);
```

----------------------------------------

TITLE: Adjusting Rating Size in React with Material-UI
DESCRIPTION: Demonstrates how to change the size of the Rating component using the size prop. This allows for larger or smaller ratings as needed.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/rating/rating.md#2025-04-22_snippet_3

LANGUAGE: JSX
CODE:
```
{"demo": "RatingSize.js"}
```

----------------------------------------

TITLE: Removing span wrapper from ToggleButton in HTML
DESCRIPTION: Removes the span element that wraps children and the label classKey from ToggleButton component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_44

LANGUAGE: diff
CODE:
```
  <button class="MuiToggleButton-root">
-  <span class="MuiToggleButton-label">
      {children}
-  </span>
  </button>
```

----------------------------------------

TITLE: Using String-based Padding Values with Units in Emotion
DESCRIPTION: Example of the correct way to specify padding values with units using string-based syntax with Emotion instead of JSS array-based syntax.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
const theme = createTheme({
  components: {
    MuiOutlinedInput: {
      styleOverrides: {
        root: {
          padding: '5px 8px 6px',
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Default Material UI Class Name Generation HTML
DESCRIPTION: This HTML snippet demonstrates the default class names generated by Material UI components, showing the standard 'Mui...' prefix and generated CSS hashes before any custom configuration is applied.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/classname-generator/classname-generator.md#_snippet_0

LANGUAGE: html
CODE:
```
<button
  class="MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-sizeMedium MuiButton-textSizeMedium MuiButtonBase-root css-1ujsas3"
>
  Text
</button>
```

----------------------------------------

TITLE: Simplifying FormControlLabel Usage in React
DESCRIPTION: Removes FormControlLabel when no label is needed, replacing it with just the control component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_15

LANGUAGE: diff
CODE:
```
-<FormControlLabel control={<Checkbox />} />
+<Checkbox />
```

----------------------------------------

TITLE: Updating ImageListItemBar CSS Classes for Action Position Left
DESCRIPTION: Transforms CSS selectors for ImageListItemBar's titleWrap when action position is left.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_44

LANGUAGE: diff
CODE:
```
- .MuiImageListItemBar-titleWrapActionPosLeft
+.MuiImageListItemBar-actionPositionLeft > .MuiImageListItemBar-titleWrap
```

----------------------------------------

TITLE: Creating Music Player Slider in React
DESCRIPTION: Shows how to implement a slider component styled as a music player control using Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_12

LANGUAGE: JSX
CODE:
```
{"demo": "MusicPlayerSlider.js", "bg": "inline"}
```

----------------------------------------

TITLE: Linear Progress with use-count-up Integration
DESCRIPTION: Demonstrates how to integrate the LinearProgress component with the use-count-up package to create animated counting effects alongside the progress bar.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/linear-progress/linear-progress.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
LinearProgressCountUp.js
```

----------------------------------------

TITLE: Installing Pigment CSS with Vite
DESCRIPTION: Commands to install Pigment CSS and its Vite plugin dependencies.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm install @pigment-css/react
npm install --save-dev @pigment-css/vite-plugin
```

----------------------------------------

TITLE: Migrating FormControlLabel Props to Slots API
DESCRIPTION: Transforms FormControlLabel component from using the deprecated componentsProps to the new slotProps API pattern.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_33

LANGUAGE: diff
CODE:
```
 <FormControlLabel
-  componentsProps={{ typography: typographyProps }}
+  slotProps={{ typography: typographyProps }}
 />
```

----------------------------------------

TITLE: Declaring Internal Component (MUI/TypeScript)
DESCRIPTION: Illustrates the declaration of a simple internal component. It shows internal utility class generation, defining a styled root component that uses these classes, and a functional component declaration that doesn't require `React.forwardRef`. It demonstrates applying conditional classes using the `clsx` utility.
SOURCE: https://github.com/mui/material-ui/blob/master/TYPESCRIPT_CONVENTION.md#_snippet_10

LANGUAGE: TypeScript
CODE:
```
const classes = generateUtilityClasses('PrivateBar', ['selected']);

const BarRoot = styled('div')(({ theme }) => ({
  [`&.${classes.selected}`]: {
    color: theme.palette.text.primary,
  },
}));

// if this component does not need React.forwardRef, don't use React.FC
const Bar = (props: BarProps) => {
  const { className, selected, ...other } = props;
  return <BarRoot className={clsx({ [classes.selected]: selected })} {...other} />;
};
```

----------------------------------------

TITLE: Enabling MUI X Telemetry (JavaScript)
DESCRIPTION: This snippet demonstrates how to enable the opt-in telemetry feature in MUI X v8. It imports the `muiXTelemetrySettings` object from the `@mui/x-license` package and calls the `enableTelemetry` method. This configuration step should be placed in your project, typically close to where license validation is handled, to activate telemetry and help improve the product.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v8.md#_snippet_4

LANGUAGE: js
CODE:
```
import { muiXTelemetrySettings } from '@mui/x-license';

muiXTelemetrySettings.enableTelemetry();
```

----------------------------------------

TITLE: Rendered HTML Input Structure
DESCRIPTION: The resulting HTML structure when rendering a Text Field with custom input attributes
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_1

LANGUAGE: HTML
CODE:
```
<input
  aria-invalid="false"
  class="MuiInputBase-input MuiOutlinedInput-input"
  type="text"
  data-testid="…"
/>
```

----------------------------------------

TITLE: Defining Internal Component Styled Root (MUI/TypeScript)
DESCRIPTION: Shows creating a basic styled component for the root element of an internal component. Unlike public components, internal styled components typically do not require specifying `name`, `slot`, or `overridesResolver` options.
SOURCE: https://github.com/mui/material-ui/blob/master/TYPESCRIPT_CONVENTION.md#_snippet_7

LANGUAGE: TypeScript
CODE:
```
const BarRoot = styled(Typography)({
  // styling
});
```

----------------------------------------

TITLE: Defining Internal Component Classes Generator (MUI/TypeScript)
DESCRIPTION: Shows how to generate utility classes internally within an internal component using `generateUtilityClasses`. It follows the convention of using the `Private` prefix for the component name in the class generation for internal components.
SOURCE: https://github.com/mui/material-ui/blob/master/TYPESCRIPT_CONVENTION.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
// Bar.tsx
// in case that classes is not exposed.
// `classes` is used internally in this component
const classes = generateUtilityClasses('PrivateBar', ['root', 'bar']);
```

----------------------------------------

TITLE: RTL Plugin Installation Commands
DESCRIPTION: Package installation commands for stylis-plugin-rtl using different package managers.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/right-to-left/right-to-left.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
npm install stylis stylis-plugin-rtl
```

LANGUAGE: bash
CODE:
```
pnpm add stylis stylis-plugin-rtl
```

LANGUAGE: bash
CODE:
```
yarn add stylis stylis-plugin-rtl
```

----------------------------------------

TITLE: Updating Theme Spacing Usage
DESCRIPTION: Diff showing the migration from theme.spacing.unit to the new theme.spacing() function API.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_9

LANGUAGE: diff
CODE:
```
 label: {
   [theme.breakpoints.up('sm')]: {
-    paddingTop: theme.spacing.unit * 12,
+    paddingTop: theme.spacing(12),
   },
 }
```

----------------------------------------

TITLE: Setting HTML Direction Attribute via JavaScript
DESCRIPTION: Use JavaScript to set the dir attribute on the document's root element as a workaround when direct HTML modification isn't possible.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/right-to-left/right-to-left.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
document.documentElement.setAttribute('dir', 'rtl');
```

----------------------------------------

TITLE: Removing disableEqualOverflow Prop
DESCRIPTION: Removal of the deprecated disableEqualOverflow prop from Grid component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/migrating-to-v6/migrating-to-v6.md#2025-04-22_snippet_5

LANGUAGE: diff
CODE:
```
-<Grid disableEqualOverflow>
+<Grid>
```

----------------------------------------

TITLE: Configuring ThemeProvider with JSS
DESCRIPTION: Example of how to properly set up ThemeProvider at the root of a React application using Material UI v4 styling system. This configuration is required before migrating to v5.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
import { ThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';

const theme = createMuiTheme();

const useStyles = makeStyles((theme) => {
  root: {
    // some CSS that accesses the theme
  }
});

function App() {
  const classes = useStyles(); // ❌ If you have this, consider moving it
  // inside of a component wrapped with <ThemeProvider />
  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;
}
```

----------------------------------------

TITLE: Augmenting DefaultTheme in JavaScript for Material UI v5
DESCRIPTION: Creates a type definition file to fix IDE type inference for JavaScript projects using Material UI v5 with @mui/styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/troubleshooting.md#2025-04-22_snippet_6

LANGUAGE: js
CODE:
```
// index.d.ts
declare module '@mui/private-theming' {
  import type { Theme } from '@mui/material/styles';

  interface DefaultTheme extends Theme {}
}
```

----------------------------------------

TITLE: System Props Migration Example
DESCRIPTION: Code diff showing how to migrate from deprecated system props to the sx prop for styling grid components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_10

LANGUAGE: jsx
CODE:
```
- <Grid mt={2} />
+ <Grid sx={{ mt: 2 }} />
```

----------------------------------------

TITLE: Component Structure - HTML
DESCRIPTION: The HTML structure of the AspectRatio component showing the root and content elements with their respective classes and attributes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/aspect-ratio/aspect-ratio.md#2025-04-22_snippet_2

LANGUAGE: html
CODE:
```
<div class="MuiAspectRatio-root">
  <div class="MuiAspectRatio-content">
    <some-element data-first-child>
      <!-- Aspect Ratio contents -->
    </some-element>
  </div>
</div>
```

----------------------------------------

TITLE: Material UI Class Names with Mui Prefix Removed HTML
DESCRIPTION: This HTML snippet shows the resulting class names after configuring `ClassNameGenerator` to remove the 'Mui' prefix.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/classname-generator/classname-generator.md#_snippet_6

LANGUAGE: html
CODE:
```
<div
  class="Chip-root Chip-filled Chip-sizeMedium Chip-colorDefault Chip-filledDefault css-mttbc0"
>
  Chip
</div>
```

----------------------------------------

TITLE: Updating CssBaseline Styling
DESCRIPTION: Migrates CssBaseline component to use @mui/styled-engine and updates styling syntax.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_12

LANGUAGE: diff
CODE:
```
 const theme = createTheme({
   components: {
     MuiCssBaseline: {
-      styleOverrides: {
-        '@global': {
-          html: {
-            WebkitFontSmoothing: 'auto',
-          },
-        },
-      },
+      styleOverrides: `
+        html {
+          -webkit-font-smoothing: auto;
+        }
+      `
     },
   },
 });
```

----------------------------------------

TITLE: Using clsx Utility for Conditional Classnames
DESCRIPTION: Example showing how to use the clsx utility to construct conditional className strings in React components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
import clsx from 'clsx';

return (
  <div
    className={clsx('MuiButton-root', {
      'Mui-disabled': disabled,
      'Mui-selected': selected,
    })}
  />
);
```

----------------------------------------

TITLE: Updating Grid Size and Offset Props
DESCRIPTION: Changes to Grid component props structure for sizes and offsets using the new API.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/migrating-to-v6/migrating-to-v6.md#2025-04-22_snippet_2

LANGUAGE: diff
CODE:
```
 <Grid
-  xs={12}
-  sm={6}
-  xsOffset={2}
-  smOffset={3}
+  size={{ xs: 12, sm: 6 }}
+  offset={{ xs: 2, sm: 3 }}
  >
```

LANGUAGE: diff
CODE:
```
-<Grid xs={6} xsOffset={2}>
+<Grid size={6} offset={2}>
```

LANGUAGE: diff
CODE:
```
-<Grid xs>
+<Grid size="grow">
```

----------------------------------------

TITLE: Updating InputLabel Size Prop
DESCRIPTION: Diff showing how to update the InputLabel size prop from 'normal' to 'medium' to follow the standard naming convention in v7.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_9

LANGUAGE: diff
CODE:
```
-<InputLabel size="normal">Label</InputLabel>
+<InputLabel size="medium">Label</InputLabel>
```

----------------------------------------

TITLE: Basic ButtonGroup Implementation in React
DESCRIPTION: Demonstrates the basic usage of ButtonGroup component to group related buttons together. Buttons must be immediate children of the ButtonGroup component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/button-group/button-group.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<ButtonGroup variant="contained" aria-label="Basic button group">
  <Button>One</Button>
  <Button>Two</Button>
  <Button>Three</Button>
</ButtonGroup>
```

----------------------------------------

TITLE: Installing Vite Pigment Plugin - Bash
DESCRIPTION: Commands to install the `@pigment-css/vite-plugin` as a development dependency using npm or yarn (pnpm has a known issue).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install --save-dev @pigment-css/vite-plugin
```

LANGUAGE: bash
CODE:
```
yarn add -D @pigment-css/vite-plugin
```

----------------------------------------

TITLE: Autocomplete Import and Props Update
DESCRIPTION: Shows multiple changes in Autocomplete including import paths and prop updates.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_4

LANGUAGE: diff
CODE:
```
-import Autocomplete from '@mui/lab/Autocomplete';
-import useAutocomplete  from '@mui/lab/useAutocomplete';
+import Autocomplete from '@mui/material/Autocomplete';
+import useAutocomplete from '@mui/material/useAutocomplete';
```

----------------------------------------

TITLE: Installing Roboto Font via Fontsource in React
DESCRIPTION: Commands to install the Roboto font using Fontsource with different package managers (npm, pnpm, yarn).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/typography/typography.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install @fontsource/roboto
```

LANGUAGE: bash
CODE:
```
pnpm add @fontsource/roboto
```

LANGUAGE: bash
CODE:
```
yarn add @fontsource/roboto
```

----------------------------------------

TITLE: Updating InputAdornment position prop in React
DESCRIPTION: Sets the InputAdornment position prop to 'start' or 'end' based on its usage as startAdornment or endAdornment in TextField.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_41

LANGUAGE: diff
CODE:
```
-<TextField startAdornment={<InputAdornment>kg</InputAdornment>} />
-<TextField endAdornment={<InputAdornment>kg</InputAdornment>} />
+<TextField startAdornment={<InputAdornment position="start">kg</InputAdornment>} />
+<TextField endAdornment={<InputAdornment position="end">kg</InputAdornment>} />
```

----------------------------------------

TITLE: Controlling Display for Print Media in Material-UI
DESCRIPTION: Example of using displayPrint property to control element visibility during printing. This allows developers to hide certain elements when printing and show others that are only meant for print output.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<Box sx={{ display: 'block', displayPrint: 'none' }}>
  Screen Only (Hide on print only)
</Box>
<Box sx={{ display: 'none', displayPrint: 'block' }}>
  Print Only (Hide on screen only)
</Box>
```

----------------------------------------

TITLE: Converting Array-based Padding Values with Units
DESCRIPTION: Example showing how to convert JSS array-based padding values to string-based values with appropriate units for Emotion.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
const theme = createTheme({
  overrides: {
    MuiOutlinedInput: {
      root: {
        padding: [[5, 8, 6]],
      },
    },
  },
});
```

----------------------------------------

TITLE: Updating Button Variant Properties
DESCRIPTION: Diff showing the migration from deprecated button variants (flat, raised) to the new variants (text, contained).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_11

LANGUAGE: diff
CODE:
```
-<Button variant="raised" />
+<Button variant="contained" />
```

----------------------------------------

TITLE: Changing Box Component Import Source (JS/TS)
DESCRIPTION: If continuing to use the `Box` component, replace its import path to use the Pigment CSS compatible version from `@mui/material-pigment-css` for proper integration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_29

LANGUAGE: diff
CODE:
```
-import Box from '@mui/material/Box';
+import Box from '@mui/material-pigment-css/Box';
```

----------------------------------------

TITLE: Updating Grid Import Statements for Material UI v7
DESCRIPTION: Shows how to update import statements when migrating from GridLegacy to Grid in Material UI v7.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_0

LANGUAGE: diff
CODE:
```
// The legacy Grid component is named GridLegacy
-import Grid from '@mui/material/GridLegacy';

// The updated Grid component is named Grid
+import Grid from '@mui/material/Grid';
```

----------------------------------------

TITLE: Alert DOM Structure - HTML
DESCRIPTION: Example of the DOM structure for a basic Alert component showing the root element, icon, message, and action areas
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/alert/alert.md#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<div class="MuiPaper-root MuiAlert-root" role="alert">
  <div class="MuiAlert-icon">
    <!-- svg icon here -->
  </div>
  <div class="MuiAlert-message">This is how an Alert renders in the DOM.</div>
  <div class="MuiAlert-action">
    <!-- optional action element here -->
  </div>
</div>
```

----------------------------------------

TITLE: Install Dependencies and Start Development Server Bash
DESCRIPTION: After navigating into the project directory, this command sequence first runs `npm install` to install all necessary dependencies listed in the project's `package.json` file. Subsequently, `npm run dev` is executed to start the Next.js development server, making the application accessible locally, typically on `http://localhost:3000`.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs-pages-router-ts/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Grid Component DOM Structure
DESCRIPTION: HTML structure showing the anatomy of the Grid component, which consists of a single root div element with the MuiGrid-root class.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_14

LANGUAGE: html
CODE:
```
<div class="MuiGrid-root">
  <!-- Grid contents -->
</div>
```

----------------------------------------

TITLE: Joy UI Peer Dependencies Configuration
DESCRIPTION: The peer dependencies configuration showing required React and React DOM versions for Joy UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/installation/installation.md#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
"peerDependencies": {
  "react": "^17.0.0 || ^18.0.0 || ^19.0.0",
  "react-dom": "^17.0.0 || ^18.0.0 || ^19.0.0"
},
```

----------------------------------------

TITLE: Removing span wrapper from Tab in HTML
DESCRIPTION: Removes the span element that wraps children and the wrapper classKey from Tab component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_36

LANGUAGE: diff
CODE:
```
  <button class="MuiTab-root">
-  <span class="MuiTab-wrapper">
      {icon}
      {label}
-  </span>
  </button>
```

----------------------------------------

TITLE: Importing ListItemContent Component in React
DESCRIPTION: Demonstrates how to import the ListItemContent component, which is used for managing content within list items, particularly useful for implementing ellipsis truncation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
import ListItemContent from '@mui/joy/ListItemContent';
```

----------------------------------------

TITLE: Embedding Media Content in Markdown - HTML in Markdown
DESCRIPTION: This snippet demonstrates how to embed a video file inside a Markdown document using raw HTML tags. It utilizes the <video> HTML element with attributes such as autoplay, muted, loop, playsinline, and sets the width and height. A <source> tag identifies the video file, while its type is specified for browser compatibility. This method requires the Markdown renderer to support raw HTML blocks, and works best for local or server-hosted media. Be aware of file accessibility and browser support for the video format.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q1-update.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<video autoplay muted loop playsinline width="382" height="408">
  <source src="/static/blog/2020-q1-update/autocomplete.mp4" type="video/mp4" />
</video>
```

----------------------------------------

TITLE: Installing MUI System with npm
DESCRIPTION: Command to install MUI System along with its Emotion dependencies in your project using npm.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-system/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install @mui/system @emotion/react @emotion/styled
```

----------------------------------------

TITLE: Using theme.breakpoints.only Example
DESCRIPTION: Example of using theme.breakpoints.only to apply styles specifically for the md breakpoint range.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_6

LANGUAGE: js
CODE:
```
const styles = (theme) => ({
  root: {
    backgroundColor: 'blue',
    // Match [md, md + 1)
    //       [md, lg)
    //       [900px, 1200px)
    [theme.breakpoints.only('md')]: {
      backgroundColor: 'red',
    },
  },
});
```

----------------------------------------

TITLE: Updating Custom Breakpoints Grid Props
DESCRIPTION: Changes required for Grid components using custom breakpoint names.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/migrating-to-v6/migrating-to-v6.md#2025-04-22_snippet_4

LANGUAGE: diff
CODE:
```
-<Grid mobile={12} mobileOffset={2} desktop={6} desktopOffset={4}>
+<Grid size={{ mobile: 12, desktop: 6 }} offset={{ mobile: 2, desktop: 4 }}>
```

----------------------------------------

TITLE: Forcing Theme Re-rendering with ThemeProvider
DESCRIPTION: Shows how to opt out of the default theme behavior by using the forceThemeRerender prop on the ThemeProvider component, which will cause the theme to re-render when the mode changes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
<ThemeProvider forceThemeRerender />
```

----------------------------------------

TITLE: Implementing Responsive Full-Screen Dialog in React
DESCRIPTION: Example of creating a responsive full-screen dialog using useMediaQuery hook from Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/dialogs/dialogs.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import useMediaQuery from '@mui/material/useMediaQuery';

function MyComponent() {
  const theme = useTheme();
  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));

  return <Dialog fullScreen={fullScreen} />;
}
```

----------------------------------------

TITLE: Incorrect CSS Specificity for MUI Components
DESCRIPTION: CSS example showing an incorrect approach to styling Material UI components that will not work due to insufficient specificity.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_13

LANGUAGE: css
CODE:
```
.green {
  color: green;
}
```

----------------------------------------

TITLE: Installing Material UI Icons Package Dependencies
DESCRIPTION: Command to install the Material Icons package along with its required dependencies including Material UI core and Emotion packages.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-icons-material/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install @mui/icons-material @mui/material @emotion/styled @emotion/react
```

----------------------------------------

TITLE: ButtonGroup with Different Variants
DESCRIPTION: Shows how to implement ButtonGroup with different variants like contained, outlined, and text.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/button-group/button-group.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<ButtonGroup variant="outlined" aria-label="outlined button group">
  <Button>One</Button>
  <Button>Two</Button>
  <Button>Three</Button>
</ButtonGroup>
```

----------------------------------------

TITLE: Using Codemod for Grid Props Migration in v7
DESCRIPTION: Command to run the codemod for automatically updating Grid props to the new format in Material UI v7.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
npx @mui/codemod@next v7.0.0/grid-props <path/to/folder>
```

----------------------------------------

TITLE: Starting Development Server - Bash
DESCRIPTION: Commands to start the local development server using npm, pnpm, or yarn after configuring Pigment CSS.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_8

LANGUAGE: bash
CODE:
```
npm run dev
```

LANGUAGE: bash
CODE:
```
pnpm dev
```

LANGUAGE: bash
CODE:
```
yarn dev
```

----------------------------------------

TITLE: Variable Height Items in Masonry
DESCRIPTION: Example of Masonry handling items with different heights, optimizing space by placing items in the shortest column.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
MasonryWithVariableHeightItems.js
```

----------------------------------------

TITLE: Portal Implementation with DOM Node Props
DESCRIPTION: Example demonstrating proper implementation of Portal component with DOM node handling in React.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
function App() {
  const [container, setContainer] = React.useState(null);
  const handleRef = React.useCallback(
    (instance) => setContainer(instance),
    [setContainer],
  );

  return (
    <div className="App">
      <Portal container={container}>
        <span>Portaled</span>
      </Portal>
      <div ref={handleRef} />
    </div>
  );
}
```

----------------------------------------

TITLE: Basic Masonry Implementation in React
DESCRIPTION: Demonstrates basic usage of the Masonry component as a container for various elements like div and img tags.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
BasicMasonry.js
```

----------------------------------------

TITLE: Using sx prop with theme variables
DESCRIPTION: Demonstrates using theme variables with the sx prop in both long and shorthand syntax.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/using-css-variables/using-css-variables.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
// Outputs 'var(--joy-shadow-sm)'
<Chip sx={(theme) => ({ boxShadow: theme.vars.shadow.sm })} />
```

LANGUAGE: js
CODE:
```
<Chip
  sx={{
    border: '1px solid',

    // For color properties, lookup from `theme.vars.palette`
    color: 'neutral.800', // 'var(--joy-palette-neutral-800)'
    borderColor: 'neutral.400', // 'var(--joy-palette-neutral-400)'

    // lookup from `theme.vars.shadow`
    shadow: 'sm', // 'var(--joy-shadow-sm)'

    // lookup from `theme.vars.fontSize`
    fontSize: 'sm', // 'var(--joy-fontSize-sm)'
  }}
/>
```

----------------------------------------

TITLE: Creating Styled Components
DESCRIPTION: Example of creating a styled component with basic styling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
import { styled } from '@pigment-css/react';

const Heading = styled('div')({
  fontSize: '2rem',
  color: '#9FADBC',
  fontWeight: 'bold',
  margin: '1rem',
});
```

----------------------------------------

TITLE: Adjusting color opacity with CSS variables
DESCRIPTION: Demonstrates how to adjust color opacity using channel tokens in Joy UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/using-css-variables/using-css-variables.md#2025-04-22_snippet_6

LANGUAGE: js
CODE:
```
const Div = styled('div')(({ theme }) => ({
  backgroundColor: `rgba(${theme.vars.palette.primary.mainChannel} / 0.2)`,
}));
```

----------------------------------------

TITLE: Running the top-level-imports codemod
DESCRIPTION: Command to execute the codemod that converts @material-ui/core submodule imports to the root module.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_119

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v4.0.0/top-level-imports <path>
```

----------------------------------------

TITLE: Title Bar Below Image Implementation (Standard)
DESCRIPTION: Shows how to position title bars below images in a standard image list layout.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/image-list/image-list.md#2025-04-22_snippet_5

LANGUAGE: jsx
CODE:
```
{"demo": "TitlebarBelowImageList.js"}
```

----------------------------------------

TITLE: Installing MUI System with Emotion
DESCRIPTION: Command to install MUI System with its default styling engine Emotion using different package managers.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/installation/installation.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install @mui/system @emotion/react @emotion/styled
```

LANGUAGE: bash
CODE:
```
pnpm add @mui/system @emotion/react @emotion/styled
```

LANGUAGE: bash
CODE:
```
yarn add @mui/system @emotion/react @emotion/styled
```

----------------------------------------

TITLE: Running the Codemod for Lab Component Migration
DESCRIPTION: Command to run the codemod that automatically updates imports for components that have moved from @mui/lab to @mui/material in Material-UI v7.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_25

LANGUAGE: bash
CODE:
```
npx @mui/codemod v7.0.0/lab-removed-components <path/to/folder>
```

----------------------------------------

TITLE: Importing SnackbarContent Component in React
DESCRIPTION: Import statement for the SnackbarContent component used to add custom content to Snackbars.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/snackbars/snackbars.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import SnackbarContent from '@mui/material/SnackbarContent';
```

----------------------------------------

TITLE: Updating Checkbox CSS Classes
DESCRIPTION: Removes IconButton-related class names from Checkbox component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_9

LANGUAGE: diff
CODE:
```
-<span class="MuiIconButton-root MuiButtonBase-root MuiCheckbox-root PrivateSwitchBase-root">
-  <span class="MuiIconButton-label">
-    <input class="PrivateSwitchBase-input">
+<span class="MuiButtonBase-root MuiCheckbox-root PrivateSwitchBase-root">
+  <span class="PrivateSwitchBase-input">
```

----------------------------------------

TITLE: Customizing Slider Color in React
DESCRIPTION: Shows how to customize the color of a slider component in Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_10

LANGUAGE: JSX
CODE:
```
{"demo": "ColorSlider.js"}
```

----------------------------------------

TITLE: Title Bar Below Image Implementation (Masonry)
DESCRIPTION: Demonstrates title bar placement below images in a masonry layout.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/image-list/image-list.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
{"demo": "TitlebarBelowMasonryImageList.js"}
```

----------------------------------------

TITLE: Importing Divider Component in React
DESCRIPTION: This snippet shows how to import the Divider component from Material UI in a React application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/dividers/dividers.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Divider from '@mui/material/Divider';
```

----------------------------------------

TITLE: Implementing Timeline with Opposite Content in React
DESCRIPTION: Illustrates how to display content on opposite sides of the timeline.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_6

LANGUAGE: JavaScript
CODE:
```
{"demo": "OppositeContentTimeline.js"}
```

----------------------------------------

TITLE: Importing Pigment CSS Styles
DESCRIPTION: Import statement for including Pigment CSS styles in the application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import '@pigment-css/react/styles.css';
```

----------------------------------------

TITLE: Updating Typography Variant Mapping
DESCRIPTION: Prop rename from headlineMapping to variantMapping for better clarity.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_24

LANGUAGE: diff
CODE:
```
-<Typography headlineMapping={headlineMapping}>
+<Typography variantMapping={variantMapping}>
```

----------------------------------------

TITLE: Importing Stepper Components in React
DESCRIPTION: This snippet shows how to import the basic Stepper and Step components from Joy UI. These are the fundamental building blocks for creating a stepper in your React application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stepper/stepper.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Stepper from '@mui/joy/Stepper';
import Step from '@mui/joy/Step';
```

----------------------------------------

TITLE: Adding Labels to Checkboxes using FormControlLabel
DESCRIPTION: Shows how to add labels to checkboxes using the FormControlLabel component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
{"demo": "CheckboxLabels.js"}
```

----------------------------------------

TITLE: Fixed Columns Configuration in Masonry
DESCRIPTION: Demonstrates setting a fixed number of columns in the Masonry layout.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
FixedColumns.js
```

----------------------------------------

TITLE: Scrollable Long Menu
DESCRIPTION: Menu implementation with internal scrolling for long content.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_8

LANGUAGE: JSX
CODE:
```
{"demo": "LongMenu.js"}
```

----------------------------------------

TITLE: Customizing Speed Dial Icon in React
DESCRIPTION: Demonstrates how to provide custom icons for closed and open states of the Speed Dial using the SpeedDialIcon component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/speed-dial/speed-dial.md#2025-04-22_snippet_3

LANGUAGE: JavaScript
CODE:
```
{"demo": "OpenIconSpeedDial.js"}
```

----------------------------------------

TITLE: Adding Inter Font using Google Web Fonts CDN
DESCRIPTION: HTML code for including the Inter font from Google Fonts CDN by adding links in the document head.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/installation/installation.md#2025-04-22_snippet_4

LANGUAGE: html
CODE:
```
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
/>
```

----------------------------------------

TITLE: Mask Implementation Examples
DESCRIPTION: Demonstrates mask usage in the new date picker implementation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/pickers-migration/pickers-migration.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
<DatePicker
  mask="mm"
  value={new Date()}
  onChange={console.log}
  renderInput={(props) => (
    <TextField {...props} helperText="invalid mask" />
  )}
/>

<DatePicker
  value={new Date()}
  onChange={console.log}
  renderInput={(props) => (
    <TextField {...props} helperText="valid mask" />
  )}
/>
```

----------------------------------------

TITLE: Input Props Codemod Command
DESCRIPTION: Bash command to automatically transform deprecated Input component props using MUI's codemod utility.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_56

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest deprecations/input-props <path>
```

----------------------------------------

TITLE: Updating TextField and TextareaAutosize Row Props
DESCRIPTION: Transforms the rowsMin/rowsMax props to minRows/maxRows in TextField and TextareaAutosize components.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_114

LANGUAGE: diff
CODE:
```
-<TextField rowsMin={3} rowsMax={6} />
-<TextareaAutosize rows={2} />
-<TextareaAutosize rowsMin={3} rowsMax={6} />
+<TextField minRows={3} maxRows={6} />
+<TextareaAutosize minRows={2} />
+<TextareaAutosize minRows={3} maxRows={6} />
```

----------------------------------------

TITLE: Updating Color Import Paths
DESCRIPTION: Diff showing the change in import path for colors from nested imports to top-level imports.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_22

LANGUAGE: diff
CODE:
```
-import red from '@mui/material/colors/red';
+import { red } from '@mui/material/colors';
```

----------------------------------------

TITLE: HTML Structure of Circular Progress Component
DESCRIPTION: Displays the underlying HTML structure of the Circular Progress component, including the root span, SVG element, and circles for track and progress.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/circular-progress/circular-progress.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<span role="progressbar" class="MuiCircularProgress-root">
  <svg class="MuiCircularProgress-svg">
    <circle class="MuiCircularProgress-track"></circle>
    <circle class="MuiCircularProgress-progress"></circle>
  </svg>
  <!-- children are nested here when present -->
</span>
```

----------------------------------------

TITLE: Updating Drawer CSS Classes
DESCRIPTION: CSS selector transformations for the Drawer component, replacing old paperAnchor* selectors with proper parent-child relationships between anchor positions, docked status, and paper elements.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_28

LANGUAGE: diff
CODE:
```
-.MuiDrawer-paperAnchorBottom
+.MuiDrawer-anchorBottom > .MuiDrawer-paper
-.MuiDrawer-paperAnchorLeft
+.MuiDrawer-anchorLeft > .MuiDrawer-paper
-.MuiDrawer-paperAnchorRight
+.MuiDrawer-anchorRight > .MuiDrawer-paper
-.MuiDrawer-paperAnchorTop
+.MuiDrawer-anchorTop > .MuiDrawer-paper
-.MuiDrawer-paperAnchorDockedBottom
+.MuiDrawer-docked.MuiDrawer-anchorBottom > .MuiDrawer-paper
-.MuiDrawer-paperAnchorDockedLeft
+.MuiDrawer-docked.MuiDrawer-anchorLeft > .MuiDrawer-paper
-.MuiDrawer-paperAnchorDockedRight
+.MuiDrawer-docked.MuiDrawer-anchorRight > .MuiDrawer-paper
-.MuiDrawer-paperAnchorDockedTop
+.MuiDrawer-docked.MuiDrawer-anchorTop > .MuiDrawer-paper
```

----------------------------------------

TITLE: Updating TablePagination CSS classes in React
DESCRIPTION: Separates classes for different table pagination labels and moves the custom class on input to select in TablePagination.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_32

LANGUAGE: diff
CODE:
```
  <TablePagination
-  classes={{ caption: 'foo' }}
+  classes={{ selectLabel: 'foo', displayedRows: 'foo' }}
  />

  <TablePagination
-  classes={{ input: 'foo' }}
+  classes={{ select: 'foo' }}
  />
```

----------------------------------------

TITLE: Renaming Table padding prop value in React
DESCRIPTION: Renames the 'default' value of the padding prop to 'normal' for Table and TableCell components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_29

LANGUAGE: diff
CODE:
```
-<Table padding="default" />
-<TableCell padding="default" />
+<Table padding="normal" />
+<TableCell padding="normal" />
```

----------------------------------------

TITLE: Server-Side Media Query Implementation
DESCRIPTION: Demonstrates server-side implementation of useMediaQuery using ua-parser-js and css-mediaquery for device detection.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/use-media-query/use-media-query.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
import * as ReactDOMServer from 'react-dom/server';
import parser from 'ua-parser-js';
import mediaQuery from 'css-mediaquery';
import { createTheme, ThemeProvider } from '@mui/material/styles';

function handleRender(req, res) {
  const deviceType = parser(req.headers['user-agent']).device.type || 'desktop';
  const ssrMatchMedia = (query) => ({
    matches: mediaQuery.match(query, {
      width: deviceType === 'mobile' ? '0px' : '1024px',
    }),
  });

  const theme = createTheme({
    components: {
      MuiUseMediaQuery: {
        defaultProps: {
          ssrMatchMedia,
        },
      },
    },
  });

  const html = ReactDOMServer.renderToString(
    <ThemeProvider theme={theme}>
      <App />
    </ThemeProvider>,
  );

  // …
}
```

----------------------------------------

TITLE: Updating ToggleButton import in React
DESCRIPTION: Moves the ToggleButton and ToggleButtonGroup components from lab to core as they are now stable.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_43

LANGUAGE: diff
CODE:
```
-import ToggleButton from '@mui/lab/ToggleButton';
-import ToggleButtonGroup from '@mui/lab/ToggleButtonGroup';
+import ToggleButton from '@mui/material/ToggleButton';
+import ToggleButtonGroup from '@mui/material/ToggleButtonGroup';
```

----------------------------------------

TITLE: Running Material-UI Styles Codemod Command
DESCRIPTION: Command to execute the material-ui-styles codemod on a specified path. This transforms style imports from @material-ui/core/styles to @material-ui/styles.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_94

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/material-ui-styles <path>
```

----------------------------------------

TITLE: Installing MUI X Premium Package with npm - JavaScript
DESCRIPTION: This snippet demonstrates how to install the MUI X Premium data grid package using npm. It is necessary for users who want to upgrade to or start using the Premium features in their projects. The command should be run in the terminal, and it requires Node.js and npm to be installed on the development machine. The result is that the @mui/x-data-grid-premium package will be added to the project's dependencies.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/premium-plan-release.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
npm install @mui/x-data-grid-premium
```

----------------------------------------

TITLE: Implementing Right-Aligned Timeline in React
DESCRIPTION: Shows how to create a right-aligned Timeline component within its container.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_9

LANGUAGE: JavaScript
CODE:
```
{"demo": "RightAlignedTimeline.js"}
```

----------------------------------------

TITLE: Theme configuration example to avoid variant-prop codemod
DESCRIPTION: Example showing a theme configuration that sets the default variant to 'outlined'. If this configuration is present, you should not run the variant-prop codemod as it would conflict with your theme settings.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_15

LANGUAGE: js
CODE:
```
// ❌ if you have a theme setup like this, don't run this codemod.
// these default props can be removed later because `outlined` is the default value in v5
createMuiTheme({
  components: {
    MuiTextField: {
      defaultProps: {
        variant: 'outlined',
      },
    },
  },
});
```

----------------------------------------

TITLE: Creating Timeline without Opposite Content in React
DESCRIPTION: Illustrates a left-aligned Timeline component without opposite content.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_10

LANGUAGE: JavaScript
CODE:
```
{"demo": "NoOppositeContent.js"}
```

----------------------------------------

TITLE: Integrating Material UI with Theme UI
DESCRIPTION: Demonstrates how to use Material UI alongside Theme UI by nesting the Material UI ThemeProvider inside Theme UI's provider and assigning the Material UI theme to the THEME_ID property.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/theme-scoping/theme-scoping.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { ThemeUIProvider } from 'theme-ui';
import { createTheme as materialCreateTheme, THEME_ID } from '@mui/material/styles';

const themeUITheme = {
  fonts: {
    body: 'system-ui, sans-serif',
    heading: '"Avenir Next", sans-serif',
    monospace: 'Menlo, monospace',
  },
  colors: {
    text: '#000',
    background: '#fff',
    primary: '#33e',
  },
};

const materialTheme = materialCreateTheme();

function App() {
  return (
    <ThemeUIProvider theme={themeUITheme}>
      <MaterialThemeProvider theme={{ [THEME_ID]: materialTheme }}>
        Theme UI components and Material UI components
      </MaterialThemeProvider>
    </ThemeUIProvider>
  );
}
```

----------------------------------------

TITLE: System Props Migration Codemod (v6.0.0)
DESCRIPTION: Moves system props into the sx prop for better compatibility and consistency.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_66

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v6.0.0/system-props <path>
```

LANGUAGE: diff
CODE:
```
-<Box ml="2px" py={1} color="primary.main" />
+<Box sx={{ ml: '2px', py: 1, color: 'primary.main' }} />
```

----------------------------------------

TITLE: HTML Structure of Material UI Divider Component
DESCRIPTION: This HTML snippet illustrates the basic structure of the rendered Divider component, showing its root element and class.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/dividers/dividers.md#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<hr class="MuiDivider-root">
  <!-- Divider children goes here -->
</hr>
```

----------------------------------------

TITLE: Importing RSC-Compatible Layout Components with Pigment CSS in JSX
DESCRIPTION: This snippet shows how to import Material UI v6 layout components (Grid, Container, Stack) that are compatible with React Server Components (RSC). These specific imports from '@mui/material-pigment-css' are required when using the experimental Pigment CSS integration for RSC environments.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_10

LANGUAGE: jsx
CODE:
```
import Grid from '@mui/material-pigment-css/Grid';
import Container from '@mui/material-pigment-css/Container';
import Stack from '@mui/material-pigment-css/Stack';
```

----------------------------------------

TITLE: Joy UI Starting Links Collection Component
DESCRIPTION: A component that renders a collection of useful links to help users get started with Joy UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/overview/overview.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
{"component": "modules/components/JoyStartingLinksCollection.js"}
```

----------------------------------------

TITLE: Importing Components from Both Material-UI Versions
DESCRIPTION: Demonstrates how to import components from both v0.x and v1.x versions of Material-UI in the same file for gradual migration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import FlatButton from 'material-ui/FlatButton'; // v0.x
import Button from '@material-ui/core/Button'; // v1.x
```

----------------------------------------

TITLE: Defining Public Component Classes Interface & Utilities (MUI/TypeScript)
DESCRIPTION: Demonstrates defining and exporting the `FooClasses` interface for a public MUI component, including JSDoc comments for API documentation generation. Also shows the creation of the `fooClasses` utility object using `generateUtilityClasses` for generating class names based on a component name and slots.
SOURCE: https://github.com/mui/material-ui/blob/master/TYPESCRIPT_CONVENTION.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// fooClasses.tsx

export interface FooClasses {
  /** Styles applied to the root element. */
  root: string;
  /** Styles applied to the foo element. */
  foo: string;
  /** Styles applied to the root element if `disabled=true`. */
  disabled: string;
}

const fooClasses: FooClasses = generateUtilityClasses('MuiFoo', ['root', 'foo', 'disabled']);

export default fooClasses;
```

----------------------------------------

TITLE: Typography Menu Workaround
DESCRIPTION: Menu implementation using Typography component to handle text overflow.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_9

LANGUAGE: JSX
CODE:
```
{"demo": "TypographyMenu.js", "bg": true}
```

----------------------------------------

TITLE: Dynamic Styling with makeStyles and React Hooks (Material UI, JSX)
DESCRIPTION: This React snippet demonstrates using the makeStyles hook API for dynamic, prop-driven styling in Material UI. The makeStyles function declares CSS rules that derive values from component props, supporting both property-based and function-based patterns. The example shows creating a useStyles hook that consumes props to generate classes, which are then applied to an element. Required dependencies include @mui/styles, and the main parameters are the props object (defining backgroundColor and color). The output is a div styled dynamically according to provided props. This pattern allows for high flexibility and theme-aware customization in React functional components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v4-is-out.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
const useStyles = makeStyles({\n  // style rule\n  foo: (props) => ({\n    backgroundColor: props.backgroundColor,\n  }),\n  bar: {\n    // CSS property\n    color: (props) => props.color,\n  },\n});\n\nfunction MyComponent() {\n  // Simulated props for the purpose of the example\n  const props = {\n    backgroundColor: 'black',\n    color: 'white',\n  };\n  // Pass the props as the first argument of useStyles()\n  const classes = useStyles(props);\n\n  return <div className={`${classes.foo} ${classes.bar}`} />;\n}
```

----------------------------------------

TITLE: Importing Basic Card Components in React
DESCRIPTION: Basic import statements for the core Card components from Material-UI library. These components are essential for creating simple card layouts.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/cards/cards.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
```

----------------------------------------

TITLE: Updating ButtonGroup JavaScript Class Selectors
DESCRIPTION: JavaScript code transformations for ButtonGroup component styling overrides. Shows changes from descendant selectors to more specific class combinations using buttonGroupClasses utility.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
import { buttonGroupClasses } from '@mui/material/ButtonGroup';

MuiButtonGroup: {
  styleOverrides: {
    root: {
      [`&.${buttonGroupClasses.horizontal} > .${buttonGroupClasses.grouped}`]: {
         color: 'red',
      },
      [`&.${buttonGroupClasses.vertical} > .${buttonGroupClasses.grouped}`]: {
         color: 'red',
      },
      [`&.${buttonGroupClasses.text} > .${buttonGroupClasses.grouped}`]: {
         color: 'red',
      },
      [`&.${buttonGroupClasses.text}.${buttonGroupClasses.horizontal} > .${buttonGroupClasses.grouped}`]: {
         color: 'red',
      },
      [`&.${buttonGroupClasses.text}.${buttonGroupClasses.vertical} > .${buttonGroupClasses.grouped}`]: {
         color: 'red',
      }
    }
  }
}
```

----------------------------------------

TITLE: Importing Card Layer Components
DESCRIPTION: Import statements for CardCover and CardContent, which are used to create multiple layers in a Card where CardCover can display background images or gradients beneath CardContent.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/card/card.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
import CardCover from '@mui/joy/CardCover';
import CardContent from '@mui/joy/CardContent';
```

----------------------------------------

TITLE: Importing Tab Components from Joy UI
DESCRIPTION: Basic import statement for the main Tab components from Joy UI. This snippet shows how to import the Tabs, TabList, and Tab components needed for implementing tabbed interfaces.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/tabs/tabs.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Tabs from '@mui/joy/Tabs';
import TabList from '@mui/joy/TabList';
import Tab from '@mui/joy/Tab';
```

----------------------------------------

TITLE: Importing Basic List Components (JavaScript/React)
DESCRIPTION: Shows the import statements for the fundamental List and ListItem components from Material UI. These are the building blocks for creating basic lists in React applications.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/lists/lists.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
```

----------------------------------------

TITLE: Importing Sizing Utilities from Material-UI System
DESCRIPTION: Shows how to import sizing utilities from the Material-UI system package.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/sizing/sizing.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import { sizing } from '@mui/system';
```

----------------------------------------

TITLE: Importing Palette Function from Material-UI System
DESCRIPTION: This snippet shows how to import the palette function from the Material-UI system package. The palette function provides access to color-related utilities for custom styling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/palette/palette.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
import { palette } from '@mui/system';
```

----------------------------------------

TITLE: Strict Mode Theme Configuration
DESCRIPTION: Example of creating a theme that reduces warnings in React.StrictMode using unstable_createMuiStrictModeTheme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theming/theming.md#2025-04-22_snippet_6

LANGUAGE: js
CODE:
```
import { unstable_createMuiStrictModeTheme } from '@mui/material/styles';

const theme = unstable_createMuiStrictModeTheme();

function App() {
  return (
    <React.StrictMode>
      <ThemeProvider theme={theme}>
        <LandingPage />
      </ThemeProvider>
    </React.StrictMode>
  );
}
```

----------------------------------------

TITLE: Importing Stack Component in React
DESCRIPTION: Basic import statement for the Stack component from Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/stack/stack.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Stack from '@mui/material/Stack';
```

----------------------------------------

TITLE: Augmenting MUI Joy UI Theme Scales for Letter Spacing in TypeScript
DESCRIPTION: Defines the structure for the old `letterSpacing` scale within the MUI Joy UI theme types using TypeScript module augmentation. This allows TypeScript projects to recognize and use the `sm`, `md`, and `lg` keys if added back to the theme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
// You can put this to any file that's included in your tsconfig
declare module '@mui/joy/styles' {
  interface ThemeScales {
    letterSpacing: {
      sm: string;
      md: string;
      lg: string;
    };
  }
}
```

----------------------------------------

TITLE: Importing Button Component in Joy UI
DESCRIPTION: Basic import statement for using the Button component from Joy UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button/button.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Button from '@mui/joy/Button';
```

----------------------------------------

TITLE: Importing Alert Component in React
DESCRIPTION: Basic import statement for the Alert component from Joy UI package.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/alert/alert.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Alert from '@mui/joy/Alert';
```

----------------------------------------

TITLE: Importing Drawer Component in Joy UI
DESCRIPTION: Basic import statement for the Drawer component from Joy UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/drawer/drawer.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Drawer from '@mui/joy/Drawer';
```

----------------------------------------

TITLE: Importing Link Component in Joy UI
DESCRIPTION: Shows how to import the Link component from Joy UI. This is the basic setup required to use the Link component in a React application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/link/link.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Link from '@mui/joy/Link';
```

----------------------------------------

TITLE: Importing Stack Component in Joy UI (JSX)
DESCRIPTION: Basic import statement for the Stack component from Joy UI library.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stack/stack.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Stack from '@mui/joy/Stack';
```

----------------------------------------

TITLE: Importing Portal Component in React
DESCRIPTION: Shows how to import the Portal component from Material-UI in a React application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/portal/portal.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Portal from '@mui/material/Portal';
```

----------------------------------------

TITLE: Button Component HTML Structure
DESCRIPTION: The basic HTML structure of the Button component, showing its DOM representation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button/button.md#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<button class="MuiButton-root" type="button">
  <!-- Button contents -->
</button>
```

----------------------------------------

TITLE: Renaming Omit Type in @mui/types for Material-UI v5
DESCRIPTION: This snippet shows how to update the import statement for the renamed Omit type, now called DistributiveOmit, in the @mui/types module for Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_53

LANGUAGE: diff
CODE:
```
-import { Omit } from '@mui/types';
+import { DistributiveOmit } from '@mui/types';
```

----------------------------------------

TITLE: Removing disableEqualOverflow Prop from Grid in React
DESCRIPTION: Migration example for removing the disableEqualOverflow prop from Grid components, as it's no longer needed in v6 where Grid is contained within its parent's padding by default.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_12

LANGUAGE: diff
CODE:
```
-<Grid disableEqualOverflow>
+<Grid>
```

----------------------------------------

TITLE: Updating Switch onChange handler in React TypeScript
DESCRIPTION: Modifies the onChange handler of the Switch component to remove the deprecated second argument and access the checked state from event.target.checked.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_26

LANGUAGE: diff
CODE:
```
 function MySwitch() {
-  const handleChange = (event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {
+  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
+    const checked = event.target.checked;
   };

   return <Switch onChange={handleChange} />;
 }
```

----------------------------------------

TITLE: Running Codemod for Tree View Migration
DESCRIPTION: This bash command runs a codemod to automatically migrate Tree View imports from @mui/lab to @mui/x-tree-view across a codebase.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/lab-tree-view-to-mui-x.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/tree-view-moved-to-x <path>
```

----------------------------------------

TITLE: Updating Chip Component Class Names in CSS
DESCRIPTION: Shows the transformation of Chip component CSS class names. The changes separate combined classes into individual classes and change the selector pattern to use child selectors for nested elements.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_17

LANGUAGE: diff
CODE:
```
-.MuiChip-clickableColorPrimary
+.MuiChip-clickable.MuiChip-colorPrimary
-.MuiChip-clickableColorSecondary
+.MuiChip-clickable.MuiChip-colorSecondary
-.MuiChip-deletableColorPrimary
+.MuiChip-deletable.MuiChip-colorPrimary
-.MuiChip-deletableColorSecondary
+.MuiChip-deletable.MuiChip-colorSecondary
-.MuiChip-outlinedPrimary
+.MuiChip-outlined.MuiChip-colorPrimary
-.MuiChip-outlinedSecondary
+.MuiChip-outlined.MuiChip-colorSecondary
-.MuiChip-filledPrimary
+.MuiChip-filled.MuiChip-colorPrimary
-.MuiChip-filledSecondary
+.MuiChip-filled.MuiChip-colorSecondary
-.MuiChip-root .MuiChip-avatarSmall
+.MuiChip-root.MuiChip-sizeSmall > .MuiChip-avatar
-.MuiChip-root .MuiChip-avatarMedium
+.MuiChip-root.MuiChip-sizeMedium > .MuiChip-avatar
-.MuiChip-root .MuiChip-avatarColorPrimary
+.MuiChip-root.MuiChip-colorPrimary > .MuiChip-avatar
-.MuiChip-root .MuiChip-avatarColorSecondary
+.MuiChip-root.MuiChip-colorSecondary > .MuiChip-avatar
-.MuiChip-root .MuiChip-iconSmall
+.MuiChip-root.MuiChip-sizeSmall > .MuiChip-icon
-.MuiChip-root .MuiChip-iconMedium
+.MuiChip-root.MuiChip-sizeMedium > .MuiChip-icon
-.MuiChip-root .MuiChip-iconColorPrimary
+.MuiChip-root.MuiChip-colorPrimary > .MuiChip-icon
-.MuiChip-root .MuiChip-iconColorSecondary
+.MuiChip-root.MuiChip-colorSecondary > .MuiChip-icon
-.MuiChip-root .MuiChip-labelSmall
+.MuiChip-root.MuiChip-sizeSmall > .MuiChip-label
-.MuiChip-root .MuiChip-labelMedium
+.MuiChip-root.MuiChip-sizeMedium > .MuiChip-label
-.MuiChip-root .MuiChip-deleteIconSmall
+.MuiChip-root.MuiChip-sizeSmall > .MuiChip-deleteIcon
-.MuiChip-root .MuiChip-deleteIconMedium
+.MuiChip-root.MuiChip-sizeMedium > .MuiChip-deleteIcon
-.MuiChip-root .MuiChip-deleteIconColorPrimary
+.MuiChip-root.MuiChip-colorPrimary > .MuiChip-deleteIcon
-.MuiChip-root .MuiChip-deleteIconColorSecondary
+.MuiChip-root.MuiChip-colorSecondary > .MuiChip-deleteIcon
-.MuiChip-root .MuiChip-deleteIconOutlinedColorPrimary
+.MuiChip-root.MuiChip-outlined.MuiChip-colorPrimary > .MuiChip-deleteIcon
-.MuiChip-root .MuiChip-deleteIconOutlinedColorSecondary
+.MuiChip-root.MuiChip-outlined.MuiChip-colorSecondary > .MuiChip-deleteIcon
-.MuiChip-root .MuiChip-deleteIconFilledColorPrimary
+.MuiChip-root.MuiChip-filled.MuiChip-colorPrimary > .MuiChip-deleteIcon
-.MuiChip-root .MuiChip-deleteIconFilledColorSecondary
+.MuiChip-root.MuiChip-filled.MuiChip-colorSecondary > .MuiChip-deleteIcon
```

----------------------------------------

TITLE: Stack HTML Structure
DESCRIPTION: Basic HTML structure of the Stack component showing the root element.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/stack/stack.md#2025-04-22_snippet_4

LANGUAGE: html
CODE:
```
<div class="MuiStack-root">
  <!-- Stack contents -->
</div>
```

----------------------------------------

TITLE: Updating Fab Variant Prop in React
DESCRIPTION: Changes the Fab 'variant' prop value from 'round' to 'circular'. This codemod updates the Fab component to use the new variant naming in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_83

LANGUAGE: diff
CODE:
```
-<Fab variant="round" />
+<Fab variant="circular" />
```

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/fab-variant <path>
```

----------------------------------------

TITLE: Migrating Subheader from v0.x to v1.x
DESCRIPTION: Shows the changes needed to migrate Subheader components from Material-UI v0.x to v1.x using the new ListSubheader component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_7

LANGUAGE: diff
CODE:
```
-import Subheader from 'material-ui/Subheader';
+import ListSubheader from '@material-ui/core/ListSubheader';

-<Subheader>Sub Heading</Subheader>
+<ListSubheader>Sub Heading</ListSubheader>
```

----------------------------------------

TITLE: Creating Outlined Timeline in React
DESCRIPTION: Demonstrates an outlined version of the timeline component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_5

LANGUAGE: JavaScript
CODE:
```
{"demo": "OutlinedTimeline.js"}
```

----------------------------------------

TITLE: Moved Lab Modules Codemod Examples
DESCRIPTION: This codemod updates imports for @material-ui/lab components that have been moved to @material-ui/core in v5. It handles both named and default imports.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_99

LANGUAGE: diff
CODE:
```
-import Skeleton from '@material-ui/lab/Skeleton';
+import Skeleton from '@material-ui/core/Skeleton';
```

----------------------------------------

TITLE: Table Props Codemod Example
DESCRIPTION: This codemod renames props in Table-related components to match the updated API in Material-UI v5, including event handlers and class names changes.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_110

LANGUAGE: diff
CODE:
```
-<>
-  <TablePagination onChangeRowsPerPage={() => {}} onChangePage={() => {}} />
-  <TablePagination classes={{ input: 'foo' }} />
-  <Table padding="default" />
-  <TableCell padding="default" />
-</>
+<>
+  <TablePagination onRowsPerPageChange={() => {}} onPageChange={() => {}} />
+  <TablePagination classes={{ select: 'foo' }} />
+  <Table padding="normal" />
+  <TableCell padding="normal" />
+</>
```

----------------------------------------

TITLE: Renaming GridList to ImageList in React
DESCRIPTION: Renames 'GridList*' components to 'ImageList*'. This codemod updates the component names to reflect the new naming convention in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_86

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/grid-list-component <path>
```

----------------------------------------

TITLE: FilledInput Props Codemod Command
DESCRIPTION: Bash command to automatically transform deprecated FilledInput component props using MUI's codemod utility.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_32

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest deprecations/filled-input-props <path>
```

----------------------------------------

TITLE: Updating Button Color Prop in React
DESCRIPTION: Removes the outdated 'color' prop value 'default' from Button components. This codemod helps migrate to the new Button API in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_72

LANGUAGE: diff
CODE:
```
-<Button color="default">
+<Button>
```

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/button-color-prop <path>
```

----------------------------------------

TITLE: Updating Grid Justify Prop in React
DESCRIPTION: Renames Grid's 'justify' prop to 'justifyContent'. This codemod updates the Grid component to use the new prop naming in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_85

LANGUAGE: diff
CODE:
```
-<Grid justify="left">Item</Grid>
+<Grid item justifyContent="left">Item</Grid>
```

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/grid-justify-justifycontent <path>
```

----------------------------------------

TITLE: Installing Material UI v4 and React 17 with Yarn
DESCRIPTION: Command to upgrade Material UI to v4.11.2 and React to v17 using Yarn. This is a necessary step before migrating to v5.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
yarn upgrade @material-ui/core@^4.11.2 react@^17.0.0
```

----------------------------------------

TITLE: RadioGroup Component HTML Structure
DESCRIPTION: The HTML structure of a RadioGroup component showing the root div element that wraps multiple Radio components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/radio-button/radio-button.md#2025-04-22_snippet_4

LANGUAGE: html
CODE:
```
<div class="MuiRadioGroup-root">
  <!-- Radio components here -->
</div>
```

----------------------------------------

TITLE: Updating Theme Palette augmentColor Usage
DESCRIPTION: Diff showing the updated usage of theme.palette.augmentColor() which now returns a new object instead of modifying the input.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_7

LANGUAGE: diff
CODE:
```
-const background = { main: color };
-theme.palette.augmentColor(background);
+const background = theme.palette.augmentColor({ main: color });

 console.log({ background });
```

----------------------------------------

TITLE: Configuring Webpack Resolution for MUI Styles
DESCRIPTION: Webpack configuration to resolve @mui/styles module conflicts by setting explicit alias resolution.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_9

LANGUAGE: diff
CODE:
```
 resolve: {
+  alias: {
+    '@mui/styles': path.resolve(appFolder, 'node_modules', '@mui/styles'),
+  },
 },
```

----------------------------------------

TITLE: InputBase Box Sizing Update
DESCRIPTION: New default box sizing model for InputBase component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_23

LANGUAGE: css
CODE:
```
box-sizing: border-box;
```

----------------------------------------

TITLE: Updating Color Conversion Function Import
DESCRIPTION: Diff showing the rename of convertHexToRGB to hexToRgb and updated import path in the color manipulator module.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_5

LANGUAGE: diff
CODE:
```
-import { convertHexToRgb } from '@material-ui/core/styles/colorManipulator';
+import { hexToRgb } from '@material-ui/core/styles';
```

----------------------------------------

TITLE: Configuring Fixed AppBar with Template Frame
DESCRIPTION: Example of adjusting AppBar positioning to account for template frame height using CSS variables.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
<AppBar
  position="fixed"
  sx={{
    top: 'var(--template-frame-height, 0px)',
    // ...other styles
  }}
>
```

----------------------------------------

TITLE: Download and Navigate to Example Project Bash
DESCRIPTION: This command sequence uses curl to download a tarball of the master branch of the Material UI repository, pipes it to tar to extract the specific example directory (`material-ui-nextjs-pages-router-ts`), stripping the initial directory levels, and finally navigates into the extracted project directory using `cd`.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs-pages-router-ts/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-nextjs-pages-router-ts
cd material-ui-nextjs-pages-router-ts
```

----------------------------------------

TITLE: Updating ImageListItemBar CSS Classes for Action Icon
DESCRIPTION: Transforms CSS selectors for ImageListItemBar's actionIcon when action position is left.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_46

LANGUAGE: diff
CODE:
```
- .MuiImageListItemBar-actionIconActionPosLeft
+.MuiImageListItemBar-actionPositionLeft > .MuiImageListItemBar-actionIcon
```

----------------------------------------

TITLE: Updating ref forwarding in custom TextField input component
DESCRIPTION: Changes ref forwarding expectations on custom inputComponent for TextField, using the ref prop instead of inputRef.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_39

LANGUAGE: diff
CODE:
```
-function NumberFormatCustom(props) {
-  const { inputRef, onChange, ...other } = props;
+const NumberFormatCustom = React.forwardRef(function NumberFormatCustom(
+  props,
+  ref,
+) {
  const { onChange, ...other } = props;

  return (
    <NumberFormat
      {...other}
-     getInputRef={inputRef}
+     getInputRef={ref}
```

----------------------------------------

TITLE: Updating Checkbox Color
DESCRIPTION: Changes Checkbox default color to 'primary' requiring explicit 'secondary' color prop if needed.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_8

LANGUAGE: diff
CODE:
```
-<Checkbox />
+<Checkbox color="secondary" />
```

----------------------------------------

TITLE: Renaming TablePagination event handler props in React
DESCRIPTION: Renames onChangeRowsPerPage to onRowsPerPageChange and onChangePage to onPageChange for API consistency in TablePagination.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_31

LANGUAGE: diff
CODE:
```
  <TablePagination
-  onChangeRowsPerPage={()=>{}}
-  onChangePage={()=>{}}
+  onRowsPerPageChange={()=>{}}
+  onPageChange={()=>{}}
```

----------------------------------------

TITLE: Disabling Color Scheme in CssBaseline and ScopedCssBaseline
DESCRIPTION: This snippet shows how to disable the default CSS color-scheme by using the disableColorScheme prop with both CssBaseline and ScopedCssBaseline components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/css-baseline/css-baseline.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
<CssVarsProvider>
  <CssBaseline disableColorScheme />
</CssVarsProvider>

// or
<CssVarsProvider>
  <ScopedCssBaseline disableColorScheme >
    {/* The rest of your application */}
  </ScopedCssBaseline>
</CssVarsProvider>
```

----------------------------------------

TITLE: Implementing Server-Side Rendering with styled-components and JSS
DESCRIPTION: Example of implementing getInitialProps for server-side rendering of styles using both styled-components and JSS. The code demonstrates plugin configuration for style collection and injection.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
import { ServerStyleSheet } from 'styled-components';

MyDocument.getInitialProps = async (ctx) => {
  const jssSheets = new JSSServerStyleSheets();
  const styledComponentsSheet = new ServerStyleSheet();

  try {
    const finalProps = await documentGetInitialProps(ctx, {
      emotionCache: createEmotionCache(),
      plugins: [
        {
          // styled-components
          enhanceApp: (App) => (props) =>
            styledComponentsSheet.collectStyles(<App {...props} />),
          resolveProps: async (initialProps) => ({
            ...initialProps,
            styles: [
              styledComponentsSheet.getStyleElement(),
              ...initialProps.styles,
            ],
          }),
        },
        {
          // JSS
          enhanceApp: (App) => (props) => jssSheets.collect(<App {...props} />),
          resolveProps: async (initialProps) => {
            const css = jssSheets.toString();
            return {
              ...initialProps,
              styles: [
                ...initialProps.styles,
                <style
                  id="jss-server-side"
                  key="jss-server-side"
                  // eslint-disable-next-line react/no-danger
                  dangerouslySetInnerHTML={{ __html: css }}
                />,
                <style id="insertion-point-jss" key="insertion-point-jss" />,
              ],
            };
          },
        },
      ],
    });
    return finalProps;
  } finally {
    styledComponentsSheet.seal();
  }
};
```

----------------------------------------

TITLE: Updating Button Classes in JavaScript Styling
DESCRIPTION: Shows how to update deprecated Button class names in JavaScript styling code with the new separate variant and color class pattern.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_10

LANGUAGE: diff
CODE:
```
 import { buttonClasses } from '@mui/material/Button';

 MuiButton: {
   styleOverrides: {
     root: {
-      [`&.${buttonClasses.textInherit}`]: {
+      [`&.${buttonClasses.text}.${buttonClasses.colorInherit}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.textPrimary}`]: {
+      [`&.${buttonClasses.text}.${buttonClasses.colorPrimary}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.textSecondary}`]: {
+      [`&.${buttonClasses.text}.${buttonClasses.colorSecondary}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.textSuccess}`]: {
+      [`&.${buttonClasses.text}.${buttonClasses.colorSuccess}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.textError}`]: {
+      [`&.${buttonClasses.text}.${buttonClasses.colorError}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.textInfo}`]: {
+      [`&.${buttonClasses.text}.${buttonClasses.colorInfo}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.textWarning}`]: {
+      [`&.${buttonClasses.text}.${buttonClasses.colorWarning}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.outlinedInherit}`]: {
+      [`&.${buttonClasses.outlined}.${buttonClasses.colorInherit}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.outlinedPrimary}`]: {
+      [`&.${buttonClasses.outlined}.${buttonClasses.colorPrimary}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.outlinedSecondary}`]: {
+      [`&.${buttonClasses.outlined}.${buttonClasses.colorSecondary}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.outlinedSuccess}`]: {
+      [`&.${buttonClasses.outlined}.${buttonClasses.colorSuccess}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.outlinedError}`]: {
+      [`&.${buttonClasses.outlined}.${buttonClasses.colorError}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.outlinedInfo}`]: {
+      [`&.${buttonClasses.outlined}.${buttonClasses.colorInfo}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.outlinedWarning}`]: {
+      [`&.${buttonClasses.outlined}.${buttonClasses.colorWarning}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.containedInherit}`]: {
+      [`&.${buttonClasses.contained}.${buttonClasses.colorInherit}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.containedPrimary}`]: {
+      [`&.${buttonClasses.contained}.${buttonClasses.colorPrimary}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.containedSecondary}`]: {
+      [`&.${buttonClasses.contained}.${buttonClasses.colorSecondary}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.containedSuccess}`]: {
+      [`&.${buttonClasses.contained}.${buttonClasses.colorSuccess}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.containedError}`]: {
+      [`&.${buttonClasses.contained}.${buttonClasses.colorError}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.containedInfo}`]: {
+      [`&.${buttonClasses.contained}.${buttonClasses.colorInfo}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.containedWarning}`]: {
+      [`&.${buttonClasses.contained}.${buttonClasses.colorWarning}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.containedSizeSmall}`]: {
+      [`&.${buttonClasses.contained}.${buttonClasses.sizeSmall}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.containedSizeMedium}`]: {
+      [`&.${buttonClasses.contained}.${buttonClasses.sizeMedium}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.containedSizeLarge}`]: {
+      [`&.${buttonClasses.contained}.${buttonClasses.sizeLarge}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.textSizeSmall}`]: {
+      [`&.${buttonClasses.text}.${buttonClasses.sizeSmall}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.textSizeMedium}`]: {
+      [`&.${buttonClasses.text}.${buttonClasses.sizeMedium}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.textSizeLarge}`]: {
+      [`&.${buttonClasses.text}.${buttonClasses.sizeLarge}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.outlinedSizeSmall}`]: {
+      [`&.${buttonClasses.outlined}.${buttonClasses.sizeSmall}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.outlinedSizeMedium}`]: {
+      [`&.${buttonClasses.outlined}.${buttonClasses.sizeMedium}`]: {
         color: 'red',
       },
-      [`&.${buttonClasses.outlinedSizeLarge}`]: {
+      [`&.${buttonClasses.outlined}.${buttonClasses.sizeLarge}`]: {
         color: 'red',
       },
-      [`& .${buttonClasses.iconSizeSmall}`]: {
+      [`&.${buttonClasses.sizeSmall} > .${buttonClasses.icon}`]: {
         color: 'red',
       },
-      [`& .${buttonClasses.iconSizeMedium}`]: {
+      [`&.${buttonClasses.sizeMedium} > .${buttonClasses.icon}`]: {
         color: 'red',
       },
-      [`& .${buttonClasses.iconSizeLarge}`]: {
+      [`&.${buttonClasses.sizeLarge} > .${buttonClasses.icon}`]: {
         color: 'red',
       },
     },
   },
 },
```

----------------------------------------

TITLE: ListItemText Props Codemod Command
DESCRIPTION: Bash command to automatically transform deprecated ListItemText component props using MUI's codemod utility.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_41

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest deprecations/list-item-text-props <path>
```

----------------------------------------

TITLE: Initializing Basic Menu Components in React with Joy UI
DESCRIPTION: This snippet demonstrates how to import and use the basic menu components from Joy UI. It includes the Dropdown, MenuButton, Menu, and MenuItem components to create a simple menu structure.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/menu/menu.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Menu from '@mui/joy/Menu';
import MenuButton from '@mui/joy/MenuButton';
import MenuItem from '@mui/joy/MenuItem';
import Dropdown from '@mui/joy/Dropdown';

export default function MyApp() {
  return (
    <Dropdown>
      <MenuButton>Actions</MenuButton>
      <Menu>
        <MenuItem>Add item</MenuItem>
      </Menu>
    </Dropdown>
  );
}
```

----------------------------------------

TITLE: Migrating JSS to TSS-React Codemod
DESCRIPTION: This codemod transforms JSS styling with makeStyles or withStyles to the corresponding tss-react API. It handles complex scenarios including class references, object destructuring, and component configuration patterns.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_89

LANGUAGE: diff
CODE:
```
-import clsx from 'clsx';
-import {makeStyles, createStyles} from '@material-ui/core/styles';
+import { makeStyles } from 'tss-react/mui';

-const useStyles = makeStyles((theme) => createStyles<
-  'root' | 'small' | 'child', {color: 'primary' | 'secondary', padding: number}
->
-({{
-  root: ({color, padding}) => ({{
+const useStyles = makeStyles<{color: 'primary' | 'secondary', padding: number}, 'child' | 'small'>({name: 'App'})((theme, { color, padding }, classes) => ({{
+  root: {{
     padding: padding,
-    '&:hover $child': {{
+    [`&:hover .${classes.child}`]: {{
       backgroundColor: theme.palette[color].main,
     }}
-  }}),
+  }},
   small: {{}},
   child: {{
     border: '1px solid black',
     height: 50,
-    '&$small': {{
+    [`&.${classes.small}`]: {{
       height: 30
     }}
   }}
-}}), {{name: 'App'}};
+}}));

 function App({{classes: classesProp}}: {{classes?: any}}) {{
-  const classes = useStyles({{color: 'primary', padding: 30, classes: classesProp}});
+  const {{ classes, cx }} = useStyles({{
+    color: 'primary',
+    padding: 30
+  }}, {{
+    props: {{
+      classes: classesProp
+    }}
+  }});

   return (
     <div className={{classes.root}}>
       <div className={{classes.child}}>
         The Background take the primary theme color when the mouse hovers the parent.
       </div>
-      <div className={{clsx(classes.child, classes.small)}}>
+      <div className={{cx(classes.child, classes.small)}}>
         The Background take the primary theme color when the mouse hovers the parent.
         I am smaller than the other child.
       </div>
     </div>
   );
 }}

 export default App;
```

----------------------------------------

TITLE: Running the menu-item-primary-text codemod
DESCRIPTION: Command to execute the codemod that updates MenuItem components from using primaryText prop to using children.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_129

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v1.0.0/menu-item-primary-text <path>
```

----------------------------------------

TITLE: Running Button Classes Codemod
DESCRIPTION: Command to automatically update Button component class names using the MUI codemod tool.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_12

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest deprecations/button-classes <path>
```

----------------------------------------

TITLE: Running Table Props Codemod Command
DESCRIPTION: Command to execute the table-props codemod on a specified path. This updates Table component props to match the renamed API properties in v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_111

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/table-props <path>
```

----------------------------------------

TITLE: Skeleton Variant Codemod Example
DESCRIPTION: This codemod renames Skeleton component variant values to match the updated API in Material-UI v5, changing 'circle' to 'circular' and 'rect' to 'rectangular'.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_107

LANGUAGE: diff
CODE:
```
-<Skeleton variant="circle" />
-<Skeleton variant="rect" />
+<Skeleton variant="circular" />
+<Skeleton variant="rectangular" />
```

----------------------------------------

TITLE: Updating `useThemeVariants` Import in JavaScript/JSX
DESCRIPTION: Shows how to update the import path for the `useThemeVariants` hook. In MUI v5, this hook is no longer exported from '@mui/material/styles' and should be imported from the deprecated '@mui/styles' package if needed during migration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_33

LANGUAGE: diff
CODE:
```
-import { useThemeVariants } from '@mui/material/styles';
+import { useThemeVariants } from '@mui/styles';
```

----------------------------------------

TITLE: Accordion Component Structure
DESCRIPTION: HTML structure showing the anatomy of a rendered Accordion component with its CSS classes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/accordion/accordion.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
<div class="MuiAccordion-root">
  <h3 class="MuiAccordion-heading">
    <button class="MuiButtonBase-root MuiAccordionSummary-root" aria-expanded="">
      <!-- Accordion summary goes here -->
    </button>
  </h3>
  <div class="MuiAccordion-region" role="region">
    <div class="MuiAccordionDetails-root">
      <!-- Accordion content goes here -->
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Alternative LoadingButton Import Migration for Material UI v6
DESCRIPTION: Another import pattern update when switching from the Lab's LoadingButton to the standard Button component with loading functionality.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_17

LANGUAGE: diff
CODE:
```
-import LoadingButton from '@mui/lab/LoadingButton';
+import Button from '@mui/material/Button';
```

----------------------------------------

TITLE: Basic Transfer List Demo Reference
DESCRIPTION: Reference to a basic transfer list implementation that includes 'move all' buttons for transferring items between lists.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/transfer-list/transfer-list.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
{"demo": "TransferList.js", "bg": true}
```

----------------------------------------

TITLE: Rendering Material Free Templates Collection in React
DESCRIPTION: This code snippet renders a React component that displays a collection of free Material UI templates. The component is likely defined in a separate file and imported here.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/templates/templates.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
{"component": "modules/components/MaterialFreeTemplatesCollection.js"}
```

----------------------------------------

TITLE: Renaming createMuiTheme to createTheme
DESCRIPTION: Diff showing the renaming of createMuiTheme function to createTheme for more intuitive usage with ThemeProvider.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_26

LANGUAGE: diff
CODE:
```
-import { createMuiTheme } from '@mui/material/styles';
+import { createTheme } from '@mui/material/styles';

-const theme = createMuiTheme({
+const theme = createTheme({
```

----------------------------------------

TITLE: Migrating DatePicker Variant Usage
DESCRIPTION: Shows how to migrate from variant-based DatePicker to dedicated Desktop/Mobile components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/pickers-migration/pickers-migration.md#2025-04-22_snippet_1

LANGUAGE: diff
CODE:
```
-import { DatePicker } from '@material-ui/pickers';
+import DesktopDatePicker from '@mui/lab/DesktopDatePicker';

-<DatePicker variant="inline" />
+<DesktopDatePicker />
```

----------------------------------------

TITLE: TypeScript Module Augmentation for Modal Dialog
DESCRIPTION: TypeScript code showing how to augment the ModalDialog component to support a custom 'top' layout option.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/modal/modal.md#2025-04-22_snippet_2

LANGUAGE: ts
CODE:
```
// at the root or theme file
declare module '@mui/joy/ModalDialog' {
  interface ModalDialogPropsLayoutOverrides {
    top: true;
  }
}
```

----------------------------------------

TITLE: Configuring Legacy Negative Margins in v5
DESCRIPTION: Shows how to apply negative margins similar to GridLegacy in Material UI v5 by setting theme default props.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_9

LANGUAGE: js
CODE:
```
import { createTheme, ThemeProvider } from '@mui/material/styles';
import Grid from '@mui/material/Unstable_Grid2';

const theme = createTheme({
  components: {
    MuiGrid2: {
      defaultProps: {
        // all grids under this theme will apply
        // negative margin on the top and left sides.
        disableEqualOverflow: true,
      },
    },
  },
});

function Demo() {
  return (
    <ThemeProvider theme={theme}>
      <Grid container>...grids</Grid>
    </ThemeProvider>
  );
}
```

----------------------------------------

TITLE: Updating ListItem Theme Default Props
DESCRIPTION: Updates MuiListItem theme configuration to use the new slots/slotProps API instead of components/componentsProps.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_37

LANGUAGE: diff
CODE:
```
 MuiListItem: {
   defaultProps: {
-    components: { Root: CustomRoot }
-    componentsProps: { root: { testid: 'test-id' }}
+    slots: { root: CustomRoot },
+    slotProps: { root: { testid: 'test-id' } },
  },
 },
```

----------------------------------------

TITLE: Radio Component HTML Structure
DESCRIPTION: The HTML structure of a Radio component showing nested span elements for the radio button, icon, action, input, and label.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/radio-button/radio-button.md#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<span class="MuiRadio-root">
  <span class="MuiRadio-radio">
    <span class="MuiRadio-icon"></span>
    <span class="MuiRadio-action">
      <input class="MuiRadio-input">
    </span>
  </span>
  <label class="MuiRadio-label">
</span>
```

----------------------------------------

TITLE: Install Dependencies and Run Remix Development Server - Bash
DESCRIPTION: This snippet installs the project's dependencies using npm install and then starts the Remix development server using npm run dev. This allows you to run and test the example application locally. Requires Node.js and npm to be installed.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-remix-ts/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Cloning Material UI x Pigment CSS Vite Example - Bash
DESCRIPTION: This command downloads the specific example directory from the Material UI GitHub repository using curl and tar, and then navigates into the newly created project directory.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-pigment-css-vite-ts/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-pigment-css-vite-ts
cd material-ui-pigment-css-vite-ts
```

----------------------------------------

TITLE: Typography Component HTML Structure
DESCRIPTION: Basic HTML structure showing how Typography components are rendered in the DOM.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/typography/typography.md#2025-04-22_snippet_4

LANGUAGE: html
CODE:
```
<p class="MuiTypography-root MuiTypography-body-md">
  <!-- Typography content -->
  <span class="MuiTypography-root MuiTypography-inherit">
    <!-- Nested Typography content -->
  </span>
</p>
```

----------------------------------------

TITLE: Installing Dependencies and Running Development Server - Bash
DESCRIPTION: This command sequence first installs all necessary project dependencies listed in the package.json file using npm. After dependencies are installed, it runs the development script defined in package.json, typically starting a local server for development on http://localhost:3000. It requires Node.js and npm.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs-ts/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: HTML Button with Title for Accessibility
DESCRIPTION: Example of HTML button with title attribute that acts as an accessible description, illustrating the difference between labeling and describing.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/tooltip/tooltip.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<button title="some more information">A button</button>
```

----------------------------------------

TITLE: Configuring Webpack Vendor Chunk for MUI Styles
DESCRIPTION: Webpack configuration to create a vendor chunk for @mui/styles to avoid multiple instances in multiple applications.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_10

LANGUAGE: diff
CODE:
```
  module.exports = {
    entry: {
+     vendor: ['@mui/styles'],
      app1: './src/app.1.js',
      app2: './src/app.2.js',
    },
    plugins: [
+     new webpack.optimize.CommonsChunkPlugin({
+       name: 'vendor',
+       minChunks: Infinity,
+     }),
    ]
  }
```

----------------------------------------

TITLE: List Component HTML Structure
DESCRIPTION: Shows the HTML structure generated by the List component hierarchy, including ListItem, ListItemButton, ListItemDecorator, and ListItemContent components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_9

LANGUAGE: html
CODE:
```
<ul class="MuiList-root">
  <li class="MuiListItem-root">
    <div class="MuiListItemButton-root" role="button">
      <span class="MuiListItemDecorator-root">
        <!-- Icon for List Item Decorator -->
      </span>
      <div class="MuiListItemContent-root">
        <!-- List Item content -->
      </div>
    </div>
  </li>
</ul>
```

----------------------------------------

TITLE: Running MUI v6 Migration Codemods - Bash
DESCRIPTION: Lists the Bash commands required to execute specific MUI v6 codemods using `npx`. These codemods assist in automatically migrating code that previously used `theme.palette.mode` or standard styling approaches to the new `theme.applyStyles` and CSS variable methods. Requires `npx` and the `@mui/codemod` package.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#_snippet_14

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v6.0.0/styled <path/to/folder-or-file>
npx @mui/codemod@latest v6.0.0/sx-prop <path/to/folder-or-file>
npx @mui/codemod@latest v6.0.0/theme-v6 <path/to/theme-file>
```

----------------------------------------

TITLE: Stack Component DOM Structure (HTML)
DESCRIPTION: Shows the HTML structure of the Stack component which consists of a single root div element with the MuiStack-root class.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stack/stack.md#2025-04-22_snippet_2

LANGUAGE: html
CODE:
```
<div class="MuiStack-root">
  <!-- Stack contents -->
</div>
```

----------------------------------------

TITLE: Downloading Example Project - Bash
DESCRIPTION: This command downloads the specific Joy UI example directory from the MUI Material-UI repository using curl and tar, then changes the current directory to the extracted project folder. This is the first step to getting the example code locally.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/joy-ui-cra-ts/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/joy-ui-cra-ts
cd joy-ui-cra-ts
```

----------------------------------------

TITLE: Updating InputBase Classes for Proper Selector Hierarchy
DESCRIPTION: Transforms InputBase component class selectors to use proper parent-child relationship in styling for various input states like size, multiline, and adorned.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_51

LANGUAGE: diff
CODE:
```
 import { inputBaseClasses } from '@mui/material/InputBase';

 MuiInputBase: {
   styleOverrides: {
     root: {
-      [`& .${inputBaseClasses.inputSizeSmall}`]: {
+      [`&.${inputBaseClasses.sizeSmall} > .${inputBaseClasses.input}`]: {
         color: 'red',
       },
-      [`& .${inputBaseClasses.inputMultiline}`]: {
+      [`&.${inputBaseClasses.multiline} > .${inputBaseClasses.input}`]: {
         color: 'red',
       },
-      [`& .${inputBaseClasses.inputAdornedStart}`]: {
+      [`&.${inputBaseClasses.adornedStart} > .${inputBaseClasses.input}`]: {
         color: 'red',
       },
-      [`& .${inputBaseClasses.inputAdornedEnd}`]: {
+      [`&.${inputBaseClasses.adornedEnd} > .${inputBaseClasses.input}`]: {
         color: 'red',
       },
-      [`& .${inputBaseClasses.inputHiddenLabel}`]: {
+      [`&.${inputBaseClasses.hiddenLabel} > .${inputBaseClasses.input}`]: {
         color: 'red',
       },
     },
   },
 },
```

----------------------------------------

TITLE: Updating Tree View imports from @mui/lab to @mui/x-tree-view
DESCRIPTION: This codemod updates the imports of Tree View from '@mui/lab' to '@mui/x-tree-view'. It helps migrate to the new package structure for the Tree View component.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_70

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/tree-view-moved-to-x <path>
```

----------------------------------------

TITLE: Moved Lab Modules Codemod Named Import Example
DESCRIPTION: Another example of the moved-lab-modules codemod showing how it handles named imports for components moved from @material-ui/lab to @material-ui/core.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_100

LANGUAGE: diff
CODE:
```
-import { SpeedDial } from '@material-ui/lab';
+import { SpeedDial } from '@material-ui/core';
```

----------------------------------------

TITLE: Updating Chip Component Class Naming Patterns in JavaScript
DESCRIPTION: Demonstrates changes to MUI Chip component class patterns in JavaScript. This updates the class selectors to a more consistent pattern where variant and color classes are separate rather than combined into single classes.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_16

LANGUAGE: diff
CODE:
```
 import { chipClasses } from '@mui/material/Chip';

  MuiChip: {
   styleOverrides: {
     root: {
-      [`&.${chipClasses.clickableColorPrimary}`]: {
+      [`&.${chipClasses.clickable}.${chipClasses.colorPrimary}`]: {
         color: 'red',
       },
-      [`&.${chipClasses.clickableColorSecondary}`]: {
+      [`&.${chipClasses.clickable}.${chipClasses.colorSecondary}`]: {
         color: 'red',
       },
-      [`&.${chipClasses.deletableColorPrimary}`]: {
+      [`&.${chipClasses.deletable}.${chipClasses.colorPrimary}`]: {
         color: 'red',
       },
-      [`&.${chipClasses.deletableColorSecondary}`]: {
+      [`&.${chipClasses.deletable}.${chipClasses.colorSecondary}`]: {
         color: 'red',
       },
-      [`&.${chipClasses.outlinedPrimary}`]: {
+      [`&.${chipClasses.outlined}.${chipClasses.colorPrimary}`]: {
         color: 'red',
       },
-      [`&.${chipClasses.outlinedSecondary}`]: {
+      [`&.${chipClasses.outlined}.${chipClasses.colorSecondary}`]: {
         color: 'red',
       },
-      [`&.${chipClasses.filledPrimary}`]: {
+      [`&.${chipClasses.filled}.${chipClasses.colorPrimary}`]: {
         color: 'red',
       },
-      [`&.${chipClasses.filledSecondary}`]: {
+      [`&.${chipClasses.filled}.${chipClasses.colorSecondary}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.avatarSmall}`]: {
+      [`&.${chipClasses.sizeSmall} > .${chipClasses.avatar}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.avatarMedium}`]: {
+      [`&.${chipClasses.sizeMedium} > .${chipClasses.avatar}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.avatarColorPrimary}`]: {
+      [`&.${chipClasses.colorPrimary} > .${chipClasses.avatar}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.avatarColorSecondary}`]: {
+      [`&.${chipClasses.colorSecondary} > .${chipClasses.avatar}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.iconSmall}`]: {
+      [`&.${chipClasses.sizeSmall} > .${chipClasses.icon}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.iconMedium}`]: {
+      [`&.${chipClasses.sizeMedium} > .${chipClasses.icon}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.iconColorPrimary}`]: {
+      [`&.${chipClasses.colorPrimary} > .${chipClasses.icon}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.iconColorSecondary}`]: {
+      [`&.${chipClasses.colorSecondary} > .${chipClasses.icon}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.labelSmall}`]: {
+      [`&.${chipClasses.sizeSmall} > .${chipClasses.label}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.labelMedium}`]: {
+      [`&.${chipClasses.sizeMedium} > .${chipClasses.label}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.deleteIconSmall}`]: {
+      [`&.${chipClasses.sizeSmall} > .${chipClasses.deleteIcon}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.deleteIconMedium}`]: {
+      [`&.${chipClasses.sizeMedium} > .${chipClasses.deleteIcon}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.deleteIconColorPrimary}`]: {
+      [`&.${chipClasses.colorPrimary} > .${chipClasses.deleteIcon}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.deleteIconColorSecondary}`]: {
+      [`&.${chipClasses.colorSecondary} > .${chipClasses.deleteIcon}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.deleteIconOutlinedColorPrimary}`]: {
+      [`&.${chipClasses.outlined}.${chipClasses.colorPrimary} > .${chipClasses.deleteIcon}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.deleteIconOutlinedColorSecondary}`]: {
+      [`&.${chipClasses.outlined}.${chipClasses.colorSecondary} > .${chipClasses.deleteIcon}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.deleteIconFilledColorPrimary}`]: {
+      [`&.${chipClasses.filled}.${chipClasses.colorPrimary} > .${chipClasses.deleteIcon}`]: {
         color: 'red',
       },
-      [`& .${chipClasses.deleteIconFilledColorSecondary}`]: {
+      [`&.${chipClasses.filled}.${chipClasses.colorSecondary} > .${chipClasses.deleteIcon}`]: {
         color: 'red',
       },
     },
   },
  },
```

----------------------------------------

TITLE: Resulting CSS from Theme Spacing - CSS
DESCRIPTION: Displays the CSS output resulting from applying marginBottom via the MUI sx prop or Box prop, mapped using the theme.spacing helper (with a default of 8px spacing). No direct dependencies, illustrates the result in a CSS class after processing by MUI's styling system. The variable X is replaced by the computed pixel value (e.g., 24px).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/properties/properties.md#2025-04-22_snippet_3

LANGUAGE: CSS
CODE:
```
.my-class {
  margin-bottom: Xpx;
}
```

----------------------------------------

TITLE: Removing DialogTitle Typography Prop in React
DESCRIPTION: Removes the 'disableTypography' prop from DialogTitle component. This codemod updates the DialogTitle component to match the new API in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_80

LANGUAGE: diff
CODE:
```
-<DialogTitle disableTypography />
+<DialogTitle />
```

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/dialog-title-props <path>
```

----------------------------------------

TITLE: Adding Module Augmentation for DefaultTheme in TypeScript
DESCRIPTION: TypeScript code to add module augmentation for DefaultTheme when using @mui/styles with @mui/material.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_21

LANGUAGE: typescript
CODE:
```
// in the file where you are creating the theme (invoking the function `createTheme()`)
import { Theme } from '@mui/material/styles';

declare module '@mui/styles' {
  interface DefaultTheme extends Theme {}
}
```

----------------------------------------

TITLE: Fixing Ref Type Specificity for Material UI Components
DESCRIPTION: Example showing how to fix type errors by specifying correct element types for refs when working with Material UI components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_7

LANGUAGE: diff
CODE:
```
 import * as React from 'react';
 import Card from '@mui/material/Card';
 import ListItem from '@mui/material/ListItem';

 export default function SpecificRefType() {
-  const cardRef = React.useRef<HTMLElement>(null);
+  const cardRef = React.useRef<HTMLDivElement>(null);

-  const listItemRef = React.useRef<HTMLElement>(null);
+  const listItemRef = React.useRef<HTMLLIElement>(null);
   return (
     <div>
       <Card ref={cardRef}></Card>
       <ListItem ref={listItemRef}></ListItem>
     </div>
   );
 }
```

----------------------------------------

TITLE: Updating Keyboard DatePicker Imports
DESCRIPTION: Example showing how to update the import and usage of KeyboardDatePicker to the new DatePicker component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/pickers-migration/pickers-migration.md#2025-04-22_snippet_0

LANGUAGE: diff
CODE:
```
-import { KeyboardDatePicker } from '@material-ui/pickers';
+import DatePicker from '@mui/lab/DatePicker';

-<KeyboardDatePicker />
+<DatePicker />
```

----------------------------------------

TITLE: Running Grid Codemod with Custom Breakpoints for Material UI v6
DESCRIPTION: Command to run the Grid migration codemod with custom breakpoint names provided as an argument, allowing the tool to properly update non-standard breakpoint props.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_11

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v6.0.0/grid-v2-props <path/to/folder> --jscodeshift='--muiBreakpoints=mobile,desktop'
```

----------------------------------------

TITLE: Running Grid Migration Codemod for Material UI v6
DESCRIPTION: Command to automatically migrate Grid component props using the provided codemod tool. This helps convert from the old prop format to the new v6 format.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v6.0.0/grid-v2-props <path/to/folder>
```

----------------------------------------

TITLE: Updating Dialog Component Class Names in CSS
DESCRIPTION: Shows the transformation of Dialog component CSS class names. The changes separate the scroll behavior class from the paper element class using child selectors.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_25

LANGUAGE: diff
CODE:
```
-.MuiDialog-root .MuiDialog-paperScrollBody
+.MuiDialog-root .MuiDialog-scrollBody > .MuiDialog-paper
-.MuiDialog-root .MuiDialog-paperScrollPaper
+.MuiDialog-root .MuiDialog-scrollPaper > .MuiDialog-paper
```

----------------------------------------

TITLE: Migrating Tooltip Props to Slots API
DESCRIPTION: Updates Tooltip component props to use the new slots API pattern, replacing legacy component and props structure
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_61

LANGUAGE: diff
CODE:
```
<Tooltip
-  components={{ Arrow: CustomArrow }}
-  componentsProps={{ arrow: { testid: 'test-id' } }}
-  PopperComponent={CustomPopperComponent}
-  TransitionComponent={CustomTransitionComponent}
-  PopperProps={CustomPopperProps}
-  TransitionProps={CustomTransitionProps}
+  slots={{
+    arrow: CustomArrow,
+    popper: CustomPopperComponent,
+    transition: CustomTransitionComponent,
+  }}
+  slotProps={{
+    arrow: { testid: 'test-id' },
+    popper: CustomPopperProps,
+    transition: CustomTransitionProps,
+  }}
/>
```

----------------------------------------

TITLE: Importing useSwitch Hook from MUI Base
DESCRIPTION: Shows how to import the useSwitch hook from @mui/base. This hook provides switch functionality without styling for maximum customization.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q3-update.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
import { useSwitch } from '@mui/base/SwitchUnstyled';
```

----------------------------------------

TITLE: InputBase Classes Codemod Command
DESCRIPTION: Bash command to automatically transform deprecated InputBase class selectors using MUI's codemod utility.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_53

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest deprecations/input-base-classes <path>
```

----------------------------------------

TITLE: Updating MuiThemeProvider to ThemeProvider
DESCRIPTION: Diff showing the replacement of MuiThemeProvider with ThemeProvider.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_27

LANGUAGE: diff
CODE:
```
-import { MuiThemeProvider } from '@mui/material/styles';
+import { ThemeProvider } from '@mui/material/styles';
```

----------------------------------------

TITLE: Running the link-underline-hover codemod for Material-UI v5 migration
DESCRIPTION: This command runs the link-underline-hover codemod which applies underline='hover' to Link components if no underline prop is defined, maintaining the v4 default behavior.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_18

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/link-underline-hover <path>
```

----------------------------------------

TITLE: Avatar Component HTML Structure
DESCRIPTION: The basic HTML structure of the Avatar component, showing how it renders as a root div that can contain SVG, image, or text content.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/avatar/avatar.md#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<div class="MuiAvatar-root">
  <!-- Avatar contents -->
</div>
```

----------------------------------------

TITLE: Running Backdrop Props Codemod
DESCRIPTION: Command to automatically migrate Backdrop component props using the MUI codemod tool.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest deprecations/backdrop-props <path>
```

----------------------------------------

TITLE: Removing Default Chip Variant Prop in React
DESCRIPTION: Removes the Chip 'variant' prop if the value is 'default'. This codemod simplifies Chip component usage in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_73

LANGUAGE: diff
CODE:
```
-<Chip variant="default">
+<Chip>
```

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/chip-variant-prop <path>
```

----------------------------------------

TITLE: Importing Pigment CSS Stylesheet (Next.js Layout) - Diff
DESCRIPTION: Diff showing the addition of the required Pigment CSS stylesheet import (`@mui/material-pigment-css/styles.css`) at the top of the root layout file in a Next.js App Router project.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_3

LANGUAGE: diff
CODE:
```
 import type { Metadata } from 'next';
 import { Inter } from 'next/font/google';

+import '@mui/material-pigment-css/styles.css';

 export default function RootLayout(props) {
   return (
     <html lang="en">
       <body className={`${inter.className}`}>
         {props.children}
       </body>
     </html>
   );
 }
```

----------------------------------------

TITLE: Running the svg-icon-imports codemod
DESCRIPTION: Command to execute the codemod that updates SVG icon import paths for Material UI v1.0.0.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_127

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v1.0.0/svg-icon-imports <path>
```

----------------------------------------

TITLE: Box Component HTML Structure
DESCRIPTION: Shows the HTML anatomy of the Box component. The Box renders as a single root div element with the MuiBox-root class name containing its child elements.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/box/box.md#2025-04-22_snippet_5

LANGUAGE: html
CODE:
```
<div className="MuiBox-root">
  <!-- contents of the Box -->
</div>
```

----------------------------------------

TITLE: Removing srOnly Typography variant in React
DESCRIPTION: Removes the srOnly variant from Typography component and shows how to use the visuallyHidden utility with the sx prop instead.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_46

LANGUAGE: diff
CODE:
```
+import { visuallyHidden } from '@mui/utils';

-<Typography variant="srOnly">Create a user</Typography>
+<span style={visuallyHidden}>Create a user</span>
```

----------------------------------------

TITLE: Rendering Default Theme Viewer in React
DESCRIPTION: This code snippet demonstrates how to render the JoyDefaultTheme component, which displays the default theme object for Material-UI. It uses the 'demo' property to specify the component and includes additional configuration options.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/default-theme-viewer/default-theme-viewer.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
{"demo": "JoyDefaultTheme.js", "hideToolbar": true, "bg": "inline"}
```

----------------------------------------

TITLE: Installing Pigment CSS Packages - Bash
DESCRIPTION: Provides commands to install the core Material UI wrapper for Pigment CSS and the Pigment CSS React package using npm, pnpm, or yarn.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install @mui/material-pigment-css @pigment-css/react
```

LANGUAGE: bash
CODE:
```
pnpm add @mui/material-pigment-css @pigment-css/react
```

LANGUAGE: bash
CODE:
```
yarn add @mui/material-pigment-css @pigment-css/react
```

----------------------------------------

TITLE: Defining Internal Component Interfaces (MUI/TypeScript)
DESCRIPTION: Illustrates how to define `BarClasses` and `BarProps` interfaces for an internal component that accepts a `classes` prop. Unlike public components, JSDoc comments for API documentation are not required for internal component interfaces.
SOURCE: https://github.com/mui/material-ui/blob/master/TYPESCRIPT_CONVENTION.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// Bar.tsx

// if this internal component can accept classes as prop
export interface BarClasses {
  root: string;
}

export interface BarProps {
  classes?: Partial<BarClasses>;
  sx?: SxProps<Theme>;
}
```

----------------------------------------

TITLE: Importing useAutocomplete Hook from MUI Base
DESCRIPTION: Shows how to import the useAutocomplete hook from the unstyled components package @mui/base. This is part of the headless component approach introduced in v5.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q3-update.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import { useAutocomplete } from '@mui/base/AutocompleteUnstyled';
```

----------------------------------------

TITLE: Interactive Grid Demo
DESCRIPTION: An interactive demo that allows exploration of different grid settings and their visual results.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_11

LANGUAGE: jsx
CODE:
```
{"demo": "InteractiveGrid.js", "hideToolbar": true, "bg": true}
```

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Command to start the Next.js development server for the Pigment CSS demo application.
SOURCE: https://github.com/mui/material-ui/blob/master/apps/pigment-css-next-app/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
pnpm run --filter=@app/pigment-css-next-app dev
```

----------------------------------------

TITLE: Importing Border Utilities from MUI System
DESCRIPTION: Shows how to import border utilities from the MUI System package. This is needed when using the border utilities directly rather than through the Box component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/borders/borders.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
import { borders } from '@mui/system';
```

----------------------------------------

TITLE: Setting up Storybook Preview with ThemeProvider for Material UI v5
DESCRIPTION: Configures the Storybook preview to use both Emotion and Material UI theme providers. This prevents the Docs tab from displaying an empty page when using Material UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/troubleshooting.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
// .storybook/preview.js

import { ThemeProvider, createTheme } from '@mui/material/styles';
import { ThemeProvider as Emotion10ThemeProvider } from 'emotion-theming';

const defaultTheme = createTheme(); // or your custom theme

const withThemeProvider = (Story, context) => {
  return (
    <Emotion10ThemeProvider theme={defaultTheme}>
      <ThemeProvider theme={defaultTheme}>
        <Story {...context} />
      </ThemeProvider>
    </Emotion10ThemeProvider>
  );
};

export const decorators = [withThemeProvider];

// ...other storybook exports
```

----------------------------------------

TITLE: Link Underline Hover Codemod Example
DESCRIPTION: This codemod applies the underline="hover" property to Link components that don't define an underline prop. This maintains the same behavior as in Material-UI v4.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_91

LANGUAGE: diff
CODE:
```
-<Link />
+<Link underline="hover" />
```

----------------------------------------

TITLE: Installing Material-UI v0.x and v1.x Side by Side with NPM
DESCRIPTION: Shows how to install both Material-UI versions simultaneously using NPM package manager to facilitate a gradual migration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm install material-ui
npm install @material-ui/core
```

----------------------------------------

TITLE: Installing MUI Base via Yarn in Bash
DESCRIPTION: This command installs the MUI Base package using Yarn. It provides another option for adding MUI Base to a project, catering to developers who use Yarn as their preferred package manager.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/introducing-base-ui.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
yarn add @mui/base
```

----------------------------------------

TITLE: AccordionSummary Theme Override Update
DESCRIPTION: Demonstrates the change in theme override configuration for AccordionSummary component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_2

LANGUAGE: diff
CODE:
```
 createTheme({
   components: {
     MuiAccordionSummary: {
       styleOverrides: {
-        expandIcon: {
+        expandIconWrapper: {
          // ...
         },
       },
     },
   },
 });
```

----------------------------------------

TITLE: Running Moved Lab Modules Codemod Command
DESCRIPTION: Command to execute the moved-lab-modules codemod on a specified path. This updates imports for @material-ui/lab components that have moved to @material-ui/core.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_101

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/moved-lab-modules <path>
```

----------------------------------------

TITLE: Renaming fade Function to alpha
DESCRIPTION: Diff showing the renaming of the fade function to alpha to better describe its functionality of overriding alpha values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_23

LANGUAGE: diff
CODE:
```
-import { fade } from '@mui/material/styles';
+import { alpha } from '@mui/material/styles';

  const classes = makeStyles(theme => ({
-  backgroundColor: fade(theme.palette.primary.main, theme.palette.action.selectedOpacity),
+  backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
  }));
```

----------------------------------------

TITLE: Migrating Grid with Custom Breakpoints in React
DESCRIPTION: Example of updating Grid component with custom breakpoints (like mobile and desktop) to use the new v6 size and offset prop format.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_10

LANGUAGE: diff
CODE:
```
-<Grid mobile={12} mobileOffset={2} desktop={6} desktopOffset={4}>
+<Grid size={{ mobile: 12, desktop: 6 }} offset={{ mobile: 2, desktop: 4 }}>
```

----------------------------------------

TITLE: Importing Display API Components from Material-UI System
DESCRIPTION: Example of importing display-related utilities from the MUI system package. This snippet shows how to import the display module which contains various display-related properties.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_8

LANGUAGE: js
CODE:
```
import { display } from '@mui/system';
```

----------------------------------------

TITLE: Importing AspectRatio Component - React/JSX
DESCRIPTION: Basic import statement for the AspectRatio component from Joy UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/aspect-ratio/aspect-ratio.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import AspectRatio from '@mui/joy/AspectRatio';
```

----------------------------------------

TITLE: Importing AvatarGroup Component in Joy UI
DESCRIPTION: Import statement for the AvatarGroup component, which is used to group multiple Avatars together.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/avatar/avatar.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import AvatarGroup from '@mui/joy/AvatarGroup';
```

----------------------------------------

TITLE: Customizing Divider Child Position
DESCRIPTION: Demonstrates how to control the position of content within a Divider by overriding the CSS variable that determines child element placement.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/divider/divider.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
<Divider sx={{ '--Divider-childPosition': '20%' }}> {/* the value can be any CSS valid unit */}
```

----------------------------------------

TITLE: Running Tabs Scroll Buttons Codemod Command
DESCRIPTION: Command to execute the tabs-scroll-buttons codemod on a specified path. This transforms Tabs scrollButtons prop values to the new format in v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_113

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/tabs-scroll-buttons <path>
```

----------------------------------------

TITLE: Renaming Theme Creation Function in React
DESCRIPTION: Renames the function 'createMuiTheme()' to 'createTheme()'. This codemod updates the theme creation function to use the new naming convention in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_78

LANGUAGE: diff
CODE:
```
-import { createMuiTheme } from '@material-ui/core/styles';
+import { createTheme } from '@material-ui/core/styles';
```

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/create-theme <path>
```

----------------------------------------

TITLE: Updating Grid Size Props for Single Value
DESCRIPTION: Shows how to convert a uniform breakpoint prop to the simplified size prop in Material UI v6/v7.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_5

LANGUAGE: diff
CODE:
```
-<Grid xs={6}>
+<Grid size={6}>
```

----------------------------------------

TITLE: Installing Material UI Next.js Dependencies for Pages Router with yarn
DESCRIPTION: Command to install the required dependencies for integrating Material UI with Next.js Pages Router using yarn package manager.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
yarn add @mui/material-nextjs @emotion/cache @emotion/server
```

----------------------------------------

TITLE: Moving Component Props to components.defaultProps
DESCRIPTION: Diff showing the relocation of component props from props to components.defaultProps in the theme structure.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_18

LANGUAGE: diff
CODE:
```
 import { createTheme } from '@mui/material/styles';

 const theme = createTheme({
-  props: {
-    MuiButton: {
-      disableRipple: true,
-    },
-  },
+  components: {
+    MuiButton: {
+      defaultProps: {
+        disableRipple: true,
+      },
+    },
+  },
 });
```

----------------------------------------

TITLE: Importing TextareaAutosize in React
DESCRIPTION: Shows how to import the TextareaAutosize component from Material-UI package.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/textarea-autosize/textarea-autosize.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import TextareaAutosize from '@mui/material/TextareaAutosize';
```

----------------------------------------

TITLE: Updating Default Breakpoint Sizes in Material-UI v5
DESCRIPTION: This snippet shows the changes to default breakpoint sizes in Material-UI v5. It provides a diff of the old and new values, as well as a code example for reverting to the old breakpoint values if desired.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_49

LANGUAGE: diff
CODE:
```
 {
   xs: 0,
   sm: 600,
-  md: 960,
+  md: 900,
-  lg: 1280,
+  lg: 1200,
-  xl: 1920,
+  xl: 1536,
 }
```

LANGUAGE: javascript
CODE:
```
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  breakpoints: {
    values: {
      xs: 0,
      sm: 600,
      md: 960,
      lg: 1280,
      xl: 1920,
    },
  },
});
```

----------------------------------------

TITLE: Running Badge Props Codemod
DESCRIPTION: Command to automatically migrate Badge component props using the MUI codemod tool.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest deprecations/badge-props <path>
```

----------------------------------------

TITLE: Updating Grid Size Props for Auto-Growing
DESCRIPTION: Shows how to convert the auto-growing 'true' value for breakpoint props to the new 'grow' value in Material UI v6/v7.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_6

LANGUAGE: diff
CODE:
```
-<Grid xs>
+<Grid size="grow">
```

----------------------------------------

TITLE: Running Link Underline Hover Codemod Command
DESCRIPTION: Command to execute the link-underline-hover codemod on a specified path. This adds the underline="hover" property to Link components that don't define the underline prop.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_92

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/link-underline-hover <path>
```

----------------------------------------

TITLE: Updating IconButton Size Prop in React
DESCRIPTION: Adds 'size="large"' if 'size' is not defined to get the same appearance as v4. This codemod ensures consistent IconButton sizing when migrating to Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_87

LANGUAGE: diff
CODE:
```
-<IconButton size="medium" />
-<IconButton />
+<IconButton size="medium" />
+<IconButton size="large" />
```

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/icon-button-size <path>
```

----------------------------------------

TITLE: Spacing Prop Alternative Syntax in Material-UI
DESCRIPTION: Demonstrates alternative syntax for spacing props using full property names instead of shorthand.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/spacing/spacing.md#2025-04-22_snippet_7

LANGUAGE: jsx
CODE:
```
-<Box sx={{ pt: 2 }} />
+<Box sx={{ paddingTop: 2 }} />

-<Box sx={{ px: 2 }} />
+<Box sx={{ paddingX: 2 }} />
```

----------------------------------------

TITLE: Configuring Storybook Webpack for Emotion with Material UI v5
DESCRIPTION: Updates the Storybook webpack configuration to support Emotion with Material UI v5. Creates aliases for Emotion packages to ensure compatibility.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/troubleshooting.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
// .storybook/main.js

const path = require('path');
const toPath = (filePath) => path.join(process.cwd(), filePath);

module.exports = {
  webpackFinal: async (config) => {
    return {
      ...config,
      resolve: {
        ...config.resolve,
        alias: {
          ...config.resolve.alias,
          '@emotion/core': toPath('node_modules/@emotion/react'),
          'emotion-theming': toPath('node_modules/@emotion/react'),
        },
      },
    };
  },
};
```

----------------------------------------

TITLE: Dynamic Color Before Migration (theme) - JS
DESCRIPTION: Example of theme `styleOverrides` for `MuiCard` where the color is dynamically determined based on `ownerState.palette` using a callback function, incompatible with Pigment CSS.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_16

LANGUAGE: js
CODE:
```
const theme = createTheme({
  components: {
    MuiCard: {
      styleOverrides: {
        root: ({ theme, ownerState }) => ({
          color: theme.palette[ownerState.palette]?.main,
        }),
      },
    },
  },
});
```

----------------------------------------

TITLE: Enabling Row Grouping in DataGridPro (JavaScript)
DESCRIPTION: This snippet shows how to enable the experimental row grouping feature in the DataGridPro component. It's currently available in the Pro plan by setting the experimentalFeatures prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/introducing-the-row-grouping-feature.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
<DataGridPro experimentalFeatures={{ rowGrouping: true }} {...otherProps} />
```

----------------------------------------

TITLE: Updating CSS Keyframes Animation Syntax
DESCRIPTION: Diff showing the updated syntax for CSS keyframes in JSS, requiring the $ prefix for animation names to properly scope animations.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_6

LANGUAGE: diff
CODE:
```
  rippleVisible: {
    opacity: 0.3,
-   animation: 'mui-ripple-enter 100ms cubic-bezier(0.4, 0, 0.2, 1)',
+   animation: '$mui-ripple-enter 100ms cubic-bezier(0.4, 0, 0.2, 1)',
  },
  '@keyframes mui-ripple-enter': {
    '0%': {
      opacity: 0.1,
    },
    '100%': {
      opacity: 0.3,
    },
  },
```

----------------------------------------

TITLE: Switching to Documentation Branch
DESCRIPTION: Git command to switch to the detached HEAD state at material-ui-docs/latest.
SOURCE: https://github.com/mui/material-ui/blob/master/scripts/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
git switch --detach material-ui-docs/latest
```

----------------------------------------

TITLE: Updating SvgIcon Color Prop
DESCRIPTION: Prop rename from nativeColor to htmlColor for consistency with React naming conventions.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_18

LANGUAGE: diff
CODE:
```
-<AddIcon nativeColor="#fff" />
+<AddIcon htmlColor="#fff" />
```

----------------------------------------

TITLE: Example Output CSS from sx Prop Mapping - CSS
DESCRIPTION: Shows the final CSS that results from applying a spacing value of 3 with the default MUI theme. The value 3 is multiplied by the theme's spacing unit (default 8px), resulting in margin-bottom: 24px. This demonstrates the mapping from the system prop to the actual CSS applied.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/properties/properties.md#2025-04-22_snippet_5

LANGUAGE: CSS
CODE:
```
.my-class {
  margin-bottom: 24px;
}
```

----------------------------------------

TITLE: Setting up Material UI Repository with Git
DESCRIPTION: Commands for cloning the Material UI repository and setting up the upstream remote for contribution.
SOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/<your username>/material-ui.git
cd material-ui
git remote add upstream https://github.com/mui/material-ui.git
```

----------------------------------------

TITLE: Running Modal Props Codemod Command
DESCRIPTION: Command to execute the modal-props codemod on a specified path. This removes deprecated disableBackdropClick and onEscapeKeyDown props from Modal components.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_98

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/modal-props <path>
```

----------------------------------------

TITLE: Cloning and Navigating Example Directory - Bash
DESCRIPTION: This snippet provides bash commands to download a specific example directory (`joy-ui-vite-ts`) from the `material-ui` GitHub repository master branch. It downloads the tarball, extracts the required subdirectory while stripping parent directories, and then changes the current directory into the extracted example folder.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/joy-ui-vite-ts/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/joy-ui-vite-ts
cd joy-ui-vite-ts
```

----------------------------------------

TITLE: Mapping MUI System Props to CSS and Theme Values (Markdown)
DESCRIPTION: This Markdown table provides a comprehensive mapping between Material UI System properties (used as props on MUI components), the CSS properties they control, links to the relevant MUI System documentation pages, and the path to corresponding values within the MUI theme object. It covers properties related to palette (colors), positions, sizing, and spacing, serving as a reference for translating system props to styles and leveraging theme customization.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/properties/properties.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
| `bgcolor`             | `background-color`                                                                           | [`bgcolor`](/system/palette/#background-color)               | [`theme.palette[value]`](/material-ui/customization/default-theme/?expand-path=$.palette)           |
| `color`               | `color`                                                                                      | [`color`](/system/palette/#color)                            | [`theme.palette[value]`](/material-ui/customization/default-theme/?expand-path=$.palette)           |
| `bottom`              | `bottom`                                                                                     | [`bottom`](/system/positions/)                               | none                                                                                                |
| `left`                | `left`                                                                                       | [`left`](/system/positions/)                                 | none                                                                                                |
| `position`            | `position`                                                                                   | [`position`](/system/positions/)                             | none                                                                                                |
| `right`               | `right`                                                                                      | [`right`](/system/positions/)                                | none                                                                                                |
| `top`                 | `top`                                                                                        | [`top`](/system/positions/)                                  | none                                                                                                |
| `zIndex`              | `z-index`                                                                                    | [`zIndex`](/system/positions/#z-index)                       | [`theme.zIndex[value]`](/material-ui/customization/default-theme/?expand-path=$.zIndex)             |
| `height`              | `height`                                                                                     | [`height`](/system/sizing/#height)                           | none                                                                                                |
| `maxHeight`           | `max-height`                                                                                 | [`maxHeight`](/system/sizing/)                               | none                                                                                                |
| `maxWidth`            | `max-width`                                                                                  | [`maxWidth`](/system/sizing/)                                | none                                                                                                |
| `minHeight`           | `min-height`                                                                                 | [`minHeight`](/system/sizing/)                               | none                                                                                                |
| `minWidth`            | `min-width`                                                                                  | [`minWidth`](/system/sizing/)                                | none                                                                                                |
| `width`               | `width`                                                                                      | [`width`](/system/sizing/#width)                             | none                                                                                                |
| `boxSizing`           | `box-sizing`                                                                                 | [`boxSizing`](/system/sizing/)                               | none                                                                                                |
| `m`, `margin`         | `margin`                                                                                     | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `mb`, `marginBottom`  | `margin-bottom`                                                                              | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `ml`, `marginLeft`    | `margin-left`                                                                                | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `mr`, `marginRight`   | `margin-right`                                                                               | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `mt`, `marginTop`     | `margin-top`                                                                                 | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `mx`, `marginX`       | `margin-left`, `margin-right`                                                                | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `my`, `marginY`       | `margin-top`, `margin-bottom`                                                                | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `marginInline`        | `margin-inline`                                                                              | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `marginInlineStart`   | `margin-inline-start`                                                                        | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `marginInlineEnd`     | `margin-inline-end`                                                                          | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `marginBlock`         | `margin-block`                                                                               | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `marginBlockStart`    | `margin-block-start`                                                                         | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `marginBlockEnd`      | `margin-block-end`                                                                           | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `p`, `padding`        | `padding`                                                                                    | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `pb`, `paddingBottom` | `padding-bottom`                                                                             | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `pl`, `paddingLeft`   | `padding-left`                                                                               | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `pr`, `paddingRight`  | `padding-right`                                                                              | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `pt`, `paddingTop`    | `padding-top`                                                                                | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
| `px`, `paddingX`      | `padding-left`, `padding-right`                                                              | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |
```

----------------------------------------

TITLE: ButtonGroup Classes Migration Command
DESCRIPTION: Command line instruction for running the codemod to automatically transform ButtonGroup class names in a project.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_15

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest deprecations/button-group-classes <path>
```

----------------------------------------

TITLE: Installing @mui/docs Package with npm
DESCRIPTION: Command to install the @mui/docs package in your project. This package hosts the documentation building blocks for Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-docs/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install @mui/docs
```

----------------------------------------

TITLE: Updating withTheme API Usage
DESCRIPTION: Diff showing the simplified withTheme() function usage which no longer requires an empty first argument in v4.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_4

LANGUAGE: diff
CODE:
```
-const DeepChild = withTheme()(DeepChildRaw);
+const DeepChild = withTheme(DeepChildRaw);
```

----------------------------------------

TITLE: Change in Default theme.palette.warning Colors
DESCRIPTION: Diff showing the updated default warning color palette to meet AA accessibility standards in both light and dark modes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_16

LANGUAGE: diff
CODE:
```
  warning = {
-  main: orange[500],
+  main: '#ED6C02', // orange[400] in "dark" mode

-  light: orange[300],
+  light: orange[500], // orange[300] in "dark" mode

-  dark: orange[700],
+  dark: orange[900], // orange[700] in "dark" mode
  }
```

----------------------------------------

TITLE: Migrating from Grid2 to Grid
DESCRIPTION: Diff showing how to update imports, class names, and theme customization when using Grid2 (now renamed to Grid) in v7.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_8

LANGUAGE: diff
CODE:
```
    // imports
-import Grid, { grid2Classes as gridClasses, Grid2Props as GridProps } from '@mui/material/Grid2';
+import Grid, { gridClasses, GridProps } from '@mui/material/Grid';

-import { Grid2 as Grid } from '@mui/material';
+import { Grid } from '@mui/material';

    // theme
    const theme = createTheme({
      components: {
-    MuiGrid2: {
+    MuiGrid: {
          // ...
        },
      },
    });

    // CSS classes
-.MuiGrid2-root
+.MuiGrid-root
```

----------------------------------------

TITLE: Installing Dependencies and Running Development Server - Bash
DESCRIPTION: These bash commands are used within the example project directory. The first command (`npm install`) installs all project dependencies listed in the `package.json` file. The second command (`npm run dev`) executes the development script defined in `package.json`, typically starting a local development server provided by Vite.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/joy-ui-vite-ts/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: InputLabel Size Update Codemod (v7.0.0)
DESCRIPTION: Updates the InputLabel's size prop value from 'normal' to 'medium'
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_64

LANGUAGE: bash
CODE:
```
npx @mui/codemod v7.0.0/input-label-size-normal-medium <path>
```

LANGUAGE: diff
CODE:
```
-<InputLabel size="normal">Label</InputLabel>
+<InputLabel size="medium">Label</InputLabel>
```

----------------------------------------

TITLE: Creating a Styled Component with makeStyles Hook from @mui/styles in JSX
DESCRIPTION: This snippet showcases how to create a custom styled button component using the makeStyles hook from @mui/material/styles (part of the @mui/styles system). It defines a 'root' style using JavaScript object syntax and applies it via className to a button. Prerequisites: React, @mui/material, and proper setup to support hooks and CSS-in-JS.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v4-is-out.md#2025-04-22_snippet_5

LANGUAGE: JSX
CODE:
```
import * as React from 'react';
import { makeStyles } from '@mui/material/styles';

const useStyles = makeStyles({
  root: {
    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',
    border: 0,
    borderRadius: 3,
    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',
    color: 'white',
    height: 48,
    padding: '0 30px',
  },
});

export default function Hook() {
  const classes = useStyles();
  return <button className={classes.root}>Hook</button>;
}
```

----------------------------------------

TITLE: Importing SliderUnstyled Component from MUI Base
DESCRIPTION: Demonstrates importing the unstyled slider component from the @mui/base package. This provides slider functionality without predefined styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q3-update.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
import { SliderUnstyled } from '@mui/base/SliderUnstyled';
```

----------------------------------------

TITLE: Importing ModalUnstyled Component from MUI Base
DESCRIPTION: Shows how to import the unstyled modal component from @mui/base. This provides the functionality of a modal dialog without pre-defined styling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q3-update.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
import { ModalUnstyled } from '@mui/base/ModalUnstyled';
```

----------------------------------------

TITLE: Migrating Toggle from v0.x to v1.x
DESCRIPTION: Shows the changes needed to migrate Toggle components from Material-UI v0.x to v1.x using the new Switch component with updated prop names.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_8

LANGUAGE: diff
CODE:
```
-import Toggle from 'material-ui/Toggle';
+import Switch from '@material-ui/core/Switch';

-<Toggle
-  toggled={this.state.checkedA}
-  onToggle={this.handleToggle}
-/>
+<Switch
+  checked={this.state.checkedA}
+  onChange={this.handleSwitch}
+/>
```

----------------------------------------

TITLE: Installing Next.js Pigment Plugin - Bash
DESCRIPTION: Commands to install the `@pigment-css/nextjs-plugin` as a development dependency using npm, pnpm, or yarn.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install --save-dev @pigment-css/nextjs-plugin
```

LANGUAGE: bash
CODE:
```
pnpm add -D @pigment-css/nextjs-plugin
```

LANGUAGE: bash
CODE:
```
yarn add -D @pigment-css/nextjs-plugin
```

----------------------------------------

TITLE: Updating Lab Component Imports
DESCRIPTION: Demonstrates how to update imports for components that have moved from @mui/lab to @mui/material, such as Alert, Autocomplete, and others.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_24

LANGUAGE: diff
CODE:
```
-import Alert from '@mui/lab/Alert';
+import Alert from '@mui/material/Alert';

-import { Alert } from '@mui/lab';
+import { Alert } from '@mui/material';
```

----------------------------------------

TITLE: Updating InputBase CSS Classes
DESCRIPTION: CSS selector transformations for the InputBase component, replacing old nested class selectors with proper parent-child relationship selectors for various input states.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_52

LANGUAGE: diff
CODE:
```
-.MuiInputBase-root .MuiInputBase-inputSizeSmall
+.MuiInputBase-root.MuiInputBase-sizeSmall > .MuiInputBase-input
-.MuiInputBase-root .MuiInputBase-inputMultiline
+.MuiInputBase-root.MuiInputBase-multiline > .MuiInputBase-input
-.MuiInputBase-root .MuiInputBase-inputAdornedStart
+.MuiInputBase-root.MuiInputBase-adornedStart > .MuiInputBase-input
-.MuiInputBase-root .MuiInputBase-inputAdornedEnd
+.MuiInputBase-root.MuiInputBase-adornedEnd > .MuiInputBase-input
-.MuiInputBase-root .MuiInputBase-inputHiddenLabel
+.MuiInputBase-root.MuiInputBase-hiddenLabel > .MuiInputBase-input
```

----------------------------------------

TITLE: Updating ImageListItemBar CSS Classes for Action Position Right
DESCRIPTION: Transforms CSS selectors for ImageListItemBar's titleWrap when action position is right.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_45

LANGUAGE: diff
CODE:
```
- .MuiImageListItemBar-titleWrapActionPosRight
+.MuiImageListItemBar-actionPositionRight > .MuiImageListItemBar-titleWrap
```

----------------------------------------

TITLE: Material UI Class Names with Custom Prefix HTML
DESCRIPTION: This HTML snippet displays the resulting class names after applying the `ClassNameGenerator` configuration to add a custom 'foo-bar-' prefix.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/classname-generator/classname-generator.md#_snippet_4

LANGUAGE: html
CODE:
```
<button
  class="foo-bar-MuiButton-root foo-bar-MuiButton-text foo-bar-MuiButton-textPrimary foo-bar-MuiButton-sizeMedium foo-bar-MuiButton-textSizeMedium foo-bar-MuiButtonBase-root css-1ujsas3"
>
  Button
</button>
```

----------------------------------------

TITLE: Boolean Props Type Definition
DESCRIPTION: Type definition example showing boolean props structure for component variations
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/api/api.md#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
type Props = {
  contained: boolean;
  fab: boolean;
};
```

----------------------------------------

TITLE: Creating and Starting Playground Environment
DESCRIPTION: Commands to create and start a development playground for isolated component testing.
SOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
pnpm docs:create-playground && pnpm start
```

----------------------------------------

TITLE: Change in Default theme.palette.success Colors
DESCRIPTION: Diff showing the updated default success color palette to meet AA accessibility standards in both light and dark modes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_15

LANGUAGE: diff
CODE:
```
  success = {
-  main: green[500],
+  main: green[800], // green[400] in "dark" mode

-  light: green[300],
+  light: green[500], // green[300] in "dark" mode

-  dark: green[700],
+  dark: green[900], // green[700] in "dark" mode
  }
```

----------------------------------------

TITLE: Change in Default theme.palette.info Colors
DESCRIPTION: Diff showing the updated default info color palette to meet AA accessibility standards in both light and dark modes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_14

LANGUAGE: diff
CODE:
```
  info = {
-  main: cyan[500],
+  main: lightBlue[700], // lightBlue[400] in "dark" mode

-  light: cyan[300],
+  light: lightBlue[500], // lightBlue[300] in "dark" mode

-  dark: cyan[700],
+  dark: lightBlue[900], // lightBlue[700] in "dark" mode
  }
```

----------------------------------------

TITLE: Updating TableCell Padding
DESCRIPTION: Migration from dense padding prop to size prop for small cells.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_21

LANGUAGE: diff
CODE:
```
-<TableCell padding="dense" />
+<TableCell size="small" />
```

----------------------------------------

TITLE: Running MUI styled Codemod (Bash)
DESCRIPTION: Provides the command to run a codemod script using `npx` to automatically migrate certain `styled` API usages to be compatible with Pigment CSS. This helps automate the update process. Requires the `@mui/codemod` package.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#_snippet_25

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v6.0.0/styled path/to/folder
```

----------------------------------------

TITLE: Running Pagination Round to Circular Codemod Command
DESCRIPTION: Command to execute the pagination-round-circular codemod on a specified path. This renames shape values from 'round' to 'circular' in Pagination components.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_103

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/pagination-round-circular <path>
```

----------------------------------------

TITLE: Updating CircularProgress Variant Prop in React
DESCRIPTION: Renames the CircularProgress 'static' variant to 'determinate'. This codemod updates the CircularProgress component to use the new variant naming in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_74

LANGUAGE: diff
CODE:
```
-<CircularProgress variant="static" classes={{ static: 'className' }} />
+<CircularProgress variant="determinate" classes={{ determinate: 'className' }} />
```

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/circularprogress-variant <path>
```

----------------------------------------

TITLE: Removing Dialog Backdrop Click Prop in React
DESCRIPTION: Removes the 'disableBackdropClick' prop from Dialog component. This codemod aligns the Dialog component with the updated API in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_79

LANGUAGE: diff
CODE:
```
-<Dialog disableBackdropClick />
+<Dialog />
```

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/dialog-props <path>
```

----------------------------------------

TITLE: Updating makeStyles Import and Usage
DESCRIPTION: Diff showing the changes to import makeStyles from @mui/styles instead of @mui/material/styles and adding ThemeProvider for theme context.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_29

LANGUAGE: diff
CODE:
```
-import { makeStyles } from '@mui/material/styles';
+import { makeStyles } from '@mui/styles';
+import { createTheme, ThemeProvider } from '@mui/material/styles';

+const theme = createTheme();
  const useStyles = makeStyles((theme) => ({
    background: theme.palette.primary.main,
  }));
  function Component() {
    const classes = useStyles();
    return <div className={classes.root} />
  }

  // In the root of your app
  function App(props) {
-  return <Component />;
+  return <ThemeProvider theme={theme}><Component {...props} /></ThemeProvider>;
  }
```

----------------------------------------

TITLE: Updating TableCell Alignment
DESCRIPTION: Migration from deprecated numeric prop to align prop for right alignment.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_20

LANGUAGE: diff
CODE:
```
-<TableCell numeric>{row.calories}</TableCell>
+<TableCell align="right">{row.calories}</TableCell>
```

----------------------------------------

TITLE: Fetching Latest Documentation Changes
DESCRIPTION: Git command to fetch the latest changes from the material-ui-docs remote repository.
SOURCE: https://github.com/mui/material-ui/blob/master/scripts/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
git fetch material-ui-docs latest
```

----------------------------------------

TITLE: Returning to Previous Branch
DESCRIPTION: Git command to switch back to the previously checked out branch.
SOURCE: https://github.com/mui/material-ui/blob/master/scripts/README.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
git checkout -
```

----------------------------------------

TITLE: Downloading and Extracting Example Project - Bash
DESCRIPTION: This command downloads the Material UI repository archive, extracts the specific 'material-ui-nextjs-ts' example directory while stripping parent directories, and then changes the current directory into the extracted project folder. It requires curl and tar utilities.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs-ts/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-nextjs-ts
cd material-ui-nextjs-ts
```

----------------------------------------

TITLE: Tabs Scroll Buttons Codemod Example
DESCRIPTION: This codemod updates the Tabs component's scrollButtons prop values to match the new API in Material-UI v5, replacing string values with boolean or object properties.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_112

LANGUAGE: diff
CODE:
```
-<Tabs scrollButtons="on" />
-<Tabs scrollButtons="desktop" />
-<Tabs scrollButtons="off" />
+<Tabs scrollButtons allowScrollButtonsMobile />
+<Tabs scrollButtons />
+<Tabs scrollButtons={false} />
```

----------------------------------------

TITLE: Using MUI CSS Variables in Styled Component (JavaScript)
DESCRIPTION: This JavaScript code defines a styled `button` component using `@mui/system`'s `styled` utility. Inside the style function, it accesses the generated CSS variables from the theme object (`theme.vars.palette...`) to dynamically set CSS properties like `backgroundColor`, `border`, and `color`. This demonstrates how components can consume the theme's variables to apply styles that adapt based on the active color scheme.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/experimental-api/css-theme-variables/css-theme-variables.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
// Button.js
import { styled } from '@mui/system';

const Button = styled('button')(({ theme }) => ({
  backgroundColor: theme.vars.palette.primary.default,
  border: `1px solid ${theme.vars.palette.primary.dark}`,
  color: theme.vars.palette.text.default,
}));

export default Button;
```

----------------------------------------

TITLE: Installing MUI Base via pnpm in Bash
DESCRIPTION: This command installs the MUI Base package using pnpm. It's an alternative method to add MUI Base to a project for developers who prefer using pnpm as their package manager.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/introducing-base-ui.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
pnpm add @mui/base
```

----------------------------------------

TITLE: Updating Dialog Component Class Patterns in JavaScript
DESCRIPTION: Demonstrates changes to MUI Dialog component class patterns. Updates selectors to separate the scroll behavior class from the paper element class.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_24

LANGUAGE: diff
CODE:
```
 import { dialogClasses } from '@mui/material/Dialog';

 MuiDialog: {
   styleOverrides: {
     root: {
-      [`& .${dialogClasses.paperScrollBody}`]: {
+      [`& .${dialogClasses.scrollBody} > .${dialogClasses.paper}`]: {
         color: 'red',
       },
-      [`& .${dialogClasses.paperScrollPaper}`]: {
+      [`& .${dialogClasses.scrollPaper} > .${dialogClasses.paper}`]: {
         color: 'red',
       },
     },
   },
 },
```

----------------------------------------

TITLE: Drawer Classes Codemod Command
DESCRIPTION: Bash command to automatically transform deprecated drawer classes using MUI's codemod utility.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_29

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest deprecations/drawer-classes <path>
```

----------------------------------------

TITLE: Updating CircularProgress Component Class Patterns in JavaScript
DESCRIPTION: Demonstrates changes to MUI CircularProgress component class patterns. Updates the selectors to use parent component state classes with child element selectors for better composition.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_19

LANGUAGE: diff
CODE:
```
 import { circularProgressClasses } from '@mui/material/CircularProgress';

 MuiCircularProgress: {
   styleOverrides: {
     root: {
-      [`& .${circularProgressClasses.circleDeterminate}`]: {
+      [`&.${circularProgressClasses.determinate} > .${circularProgressClasses.circle}`]: {
         color: 'red',
       },
-      [`& .${circularProgressClasses.circleIndeterminate}`]: {
+      [`&.${circularProgressClasses.indeterminate} > .${circularProgressClasses.circle}`]: {
         color: 'red',
       },
     },
   },
 },
```

----------------------------------------

TITLE: Updating ImageListItemBar Classes for Proper Selector Hierarchy
DESCRIPTION: Transforms ImageListItemBar component class selectors to use proper parent-child relationships in styling. Updates class structure for position and action components.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_42

LANGUAGE: diff
CODE:
```
 import { imageListItemBarClasses } from '@mui/material/ImageListItemBar';

 MuiImageListItemBar: {
   styleOverrides: {
     root: {
-      [`& .${imageListItemBarClasses.titleWrapBelow}`]: {
+      [`&.${imageListItemBarClasses.positionBelow} > .${imageListItemBarClasses.titleWrap}`]: {
         color: 'red',
       },
-      [`& .${imageListItemBarClasses.titleWrapActionPosLeft}`]: {
+      [`&.${imageListItemBarClasses.actionPositionLeft} > .${imageListItemBarClasses.titleWrap}`]: {
         color: 'red',
       },
-      [`& .${imageListItemBarClasses.titleWrapActionPosRight}`]: {
+      [`&.${imageListItemBarClasses.actionPositionRight} > .${imageListItemBarClasses.titleWrap}`]: {
         color: 'red',
       },
-      [`& .${imageListItemBarClasses.actionIconActionPosLeft}`]: {
+      [`&.${imageListItemBarClasses.actionPositionLeft} > .${imageListItemBarClasses.actionIcon}`]: {
         color: 'red',
       },
     },
   },
 },
```

----------------------------------------

TITLE: Running CircularProgress Classes Codemod Command
DESCRIPTION: Command to automatically update deprecated CircularProgress class names in a codebase using MUI's codemod tool.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_21

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest deprecations/circular-progress-classes <path>
```

----------------------------------------

TITLE: Importing Position Utilities from MUI System
DESCRIPTION: Shows how to import the positions utility from the MUI System package. This import provides access to various position-related props and CSS properties.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/positions/positions.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
import { positions } from '@mui/system';
```

----------------------------------------

TITLE: Using injectFirst with StylesProvider in Material UI (React, JSX)
DESCRIPTION: This React JSX snippet demonstrates wrapping your application tree in the StylesProvider component with the injectFirst prop. This ensures that custom styles are injected first in the <head>, allowing CSS-in-JS solutions (like styled-components) to safely override Material UI's default styles. To use this pattern, you must install @mui/styles and wrap your root component. The main parameter is injectFirst, which must be set on StylesProvider. The pattern is essential when you want custom CSS specificity to take precedence over Material UI defaults.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v4-is-out.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import { StylesProvider } from '@mui/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Styled components can override Material UI's styles. */}\n</StylesProvider>;
```

----------------------------------------

TITLE: Updating createGenerateClassName Import Path
DESCRIPTION: Diff showing the update to import createGenerateClassName from @mui/styles instead of @mui/material/styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_25

LANGUAGE: diff
CODE:
```
-import { createGenerateClassName } from '@mui/material/styles';
+import { createGenerateClassName } from '@mui/styles';
```

----------------------------------------

TITLE: Initializing Isolated Demo with ThemeProvider in Material-UI (JavaScript)
DESCRIPTION: This snippet defines a React component demonstrating how to use Material-UI's ThemeProvider to create a locally themed and isolated demo environment. It imports core theming utilities and uses props to configure the provider, allowing for encapsulation from the main documentation theme. Prerequisites include @mui/material/styles and React, with custom theme options adjustable within the ThemeProvider. It expects props for theme isolation and outputs a wrapped demo area within the provided theme context.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/demos.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { ThemeProvider, createTheme, useColorScheme } from '@mui/material/styles';\n\nfunction ModeToggle() {\n  const { mode, setMode } = useColorScheme();\n}\n\nexport default function DemoIsolated(props) {\n  return (\n    <ThemeProvider\n      {...props}\n      theme={createTheme({\n        // ...custom theme\n      })}\n    >\n      ...\n    </ThemeProvider>\n  );\n}\n
```

----------------------------------------

TITLE: Running Browser Benchmark Command
DESCRIPTION: Command to execute browser-based performance benchmarks in the Material-UI project.
SOURCE: https://github.com/mui/material-ui/blob/master/benchmark/browser/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pnpm benchmark:browser
```

----------------------------------------

TITLE: Running Visual Regression Tests Commands in Material-UI
DESCRIPTION: A set of npm commands for running visual regression tests in the Material-UI project. Includes options for full test runs, development mode, watch mode, building fixtures, and serving the fixture bundle.
SOURCE: https://github.com/mui/material-ui/blob/master/test/regressions/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pnpm test:regressions        # Full run
pnpm test:regressions:dev    # Prepares the fixtures to be able to test in watchmode
pnpm test:regressions:run    # Runs the tests (requires dev or build+server)
pnpm test:regressions:build  # Builds the vite bundle for viewing the fixtures
pnpm test:regressions:server # Serves the fixture bundle.
```

----------------------------------------

TITLE: Running Pigment CSS Vite Demo App in Development Mode
DESCRIPTION: This command uses pnpm and nx to run the Pigment CSS Vite demo app in development mode for active development and testing.
SOURCE: https://github.com/mui/material-ui/blob/master/apps/README.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
pnpm nx run @app/pigment-css-vite-app:dev
```

----------------------------------------

TITLE: Installing Roboto Font with Fontsource
DESCRIPTION: Commands to install the Roboto font package via Fontsource using npm, pnpm, or yarn. This method is an alternative to using the Google Fonts CDN for including the Roboto font.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/installation/installation.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install @fontsource/roboto
```

LANGUAGE: bash
CODE:
```
pnpm add @fontsource/roboto
```

LANGUAGE: bash
CODE:
```
yarn add @fontsource/roboto
```

----------------------------------------

TITLE: Installing Material UI v5 and Styles Package with npm
DESCRIPTION: Command to install the main Material UI v5 package and the styles package which provides backward compatibility with JSS.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
npm install @mui/material @mui/styles
```

----------------------------------------

TITLE: Defining Global Styles
DESCRIPTION: Example of defining global styles using the globalCss API.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
import { globalCss } from '@pigment-css/react';

globalCss`
  body {
    margin: 0;
    padding: 0;
  }
`;
```

----------------------------------------

TITLE: Updating FilledInput Theme Default Props
DESCRIPTION: Updates MuiFilledInput theme configuration to use the new slots/slotProps API instead of components/componentsProps.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_31

LANGUAGE: diff
CODE:
```
 MuiFilledInput: {
   defaultProps: {
-    components: { Input: CustomInput, Root: CustomRoot }
-    componentsProps: { input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }
+    slots: { input: CustomInput, root: CustomRoot },
+    slotProps: { input: { id: 'test-input-id' }, root: { id: 'test-root-id' } },
   },
 },
```

----------------------------------------

TITLE: Importing Dialog Components in React
DESCRIPTION: Basic import statements for using Dialog and DialogTitle components from Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/dialogs/dialogs.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Dialog from '@mui/material/Dialog';
import DialogTitle from '@mui/material/DialogTitle';
```

----------------------------------------

TITLE: Updating CircularProgress Component Class Names in CSS
DESCRIPTION: Shows the transformation of CircularProgress component CSS class names. The changes separate the state class (determinate/indeterminate) from the circle element class.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_20

LANGUAGE: diff
CODE:
```
-.MuiCircularProgress-circleDeterminate
+.MuiCircularProgress-determinate > .MuiCircularProgress-circle
```

LANGUAGE: diff
CODE:
```
-.MuiCircularProgress-circleIndeterminate
+.MuiCircularProgress-indeterminate > .MuiCircularProgress-circle
```

----------------------------------------

TITLE: Updating Stepper padding in React
DESCRIPTION: Adds inline padding style to Stepper component to maintain the previously built-in 24px padding that was removed in v5.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_24

LANGUAGE: diff
CODE:
```
-<Stepper>
+<Stepper style={{ padding: 24 }}>
    <Step>
      <StepLabel>Hello world</StepLabel>
    </Step>
  </Stepper>
```

----------------------------------------

TITLE: Badge Component HTML Structure
DESCRIPTION: Shows the basic HTML structure of the Badge component, consisting of a root span element containing the child element and badge span.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/badge/badge.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<span class="MuiBadge-root">
  <!-- the element the Badge is attached to -->
  <span class="MuiBadge-badge">
    <!-- Badge content -->
  </span>
</span>
```

----------------------------------------

TITLE: Migrating from Fab Button Variant to Fab Component
DESCRIPTION: Diff showing the migration from using Button with variant='fab' to the dedicated Fab component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_13

LANGUAGE: diff
CODE:
```
-import Button from '@material-ui/core/Button';
-<Button variant="fab" />
+import Fab from '@material-ui/core/Fab';
+<Fab />
```

----------------------------------------

TITLE: Importing ListItemButton Component in React
DESCRIPTION: Shows how to import the ListItemButton component, which is used to create interactive, clickable list items within a list.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_7

LANGUAGE: jsx
CODE:
```
import ListItemButton from '@mui/joy/ListItemButton';
```

----------------------------------------

TITLE: Installing Dependencies and Running Dev Server - npm
DESCRIPTION: These npm commands install the project's dependencies using the package.json file and then start the Vite development server, making the example application accessible locally.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-pigment-css-vite-ts/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: ImageListItemBar Classes Codemod Command
DESCRIPTION: Bash command to automatically transform deprecated ImageListItemBar class selectors using MUI's codemod utility.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_47

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest deprecations/image-list-item-bar-classes <path>
```

----------------------------------------

TITLE: Downloading Material UI Pigment CSS Nextjs Example - Bash
DESCRIPTION: This command downloads a specific example directory from the Material UI GitHub repository as a tarball, extracts it, stripping parent directories, and then changes the current directory into the extracted example project folder. It's used to quickly obtain the example code without cloning the entire repository.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-pigment-css-nextjs-ts/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-pigment-css-nextjs-ts
cd material-ui-pigment-css-nextjs-ts
```

----------------------------------------

TITLE: Automating MUI X Migration with Codemods (Bash)
DESCRIPTION: This Bash code snippet executes the @mui/x-codemod package using NPX to automatically migrate a codebase to the MUI X 6.0.0 preset. The 'preset-safe' migration ensures compatibility with the latest breaking changes in v6, simplifying the upgrade process. Dependencies include Node.js, npx, and internet access; <path> should be replaced with the target source directory or file to transform.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v6.md#2025-04-22_snippet_4

LANGUAGE: Bash
CODE:
```
npx @mui/x-codemod@latest v6.0.0/preset-safe <path>
```

----------------------------------------

TITLE: Updating Rating's readOnly CSS Class
DESCRIPTION: Shows the CSS class change required when targeting readOnly Rating components, from the deprecated MuiRating-readOnly to the Mui-readOnly global class.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_21

LANGUAGE: diff
CODE:
```
-.MuiRating-readOnly
+.Mui-readOnly
```

----------------------------------------

TITLE: Importing FormControl and FormHelperText Components
DESCRIPTION: Import statements for FormControl and FormHelperText components, used to add helper text to Checkboxes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/checkbox/checkbox.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import FormControl from '@mui/joy/FormControl';
import FormHelperText from '@mui/joy/FormHelperText';
```

----------------------------------------

TITLE: Importing Badge Component for Use with Avatars
DESCRIPTION: Import statement for the Badge component, which can be combined with Avatar to show status indicators.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/avatar/avatar.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
import Badge from '@mui/joy/Badge';
```

----------------------------------------

TITLE: Running the preset-safe codemod for Material-UI v5 migration
DESCRIPTION: This command runs the preset-safe codemod which contains most of the transformers necessary for migration from Material-UI v4 to v5. It should only be applied once per folder.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_14

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/preset-safe <path>
```

----------------------------------------

TITLE: Installing Material-UI v0.x and v1.x Side by Side with Yarn
DESCRIPTION: Shows how to install both Material-UI versions simultaneously using Yarn package manager to facilitate a gradual migration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
yarn add material-ui
yarn add @material-ui/core
```

----------------------------------------

TITLE: Importing Circular Progress Component in React
DESCRIPTION: Shows how to import the CircularProgress component from the Joy UI library.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/circular-progress/circular-progress.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import CircularProgress from '@mui/joy/CircularProgress';
```

----------------------------------------

TITLE: Importing Snackbar Component in React
DESCRIPTION: Basic import statement for using the Snackbar component from Joy UI in a React application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/snackbar/snackbar.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Snackbar from '@mui/joy/Snackbar';
```

----------------------------------------

TITLE: End-to-End Testing Commands for Material-UI
DESCRIPTION: List of npm commands available for running end-to-end tests, including development, full run, build, and server commands.
SOURCE: https://github.com/mui/material-ui/blob/master/test/e2e/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pnpm test:e2e        # Full run
pnpm test:e2e:dev    # Prepares the fixtures for watchmode
pnpm test:e2e:run    # Runs the tests
pnpm test:e2e:build  # Builds webpack bundle for fixtures
pnpm test:e2e:server # Serves the fixture bundle
```

----------------------------------------

TITLE: Applying Grid Item Padding via Child Combinator (v1) in JavaScript
DESCRIPTION: Illustrates the Grid v1 approach where the container component uses a CSS child combinator (`>`) and a helper function (`getOffset`) to apply padding directly to its immediate item children (`.${gridClasses.item}`). This method could complicate customization and is improved in v2.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/build-layouts-faster-with-grid-v2.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
function getOffset(val) {
  const parse = parseFloat(val);
  return `${parse}${String(val).replace(String(parse), '') || 'px'}`;
}
// ...The code is shorten for readability
({
  [`& > .${gridClasses.item}`]: {
    // Grid item's padding is controlled by its container
    paddingTop: getOffset(themeSpacing),
  },
});
```

----------------------------------------

TITLE: Styling Responsive Image Height - CSS
DESCRIPTION: Defines a CSS rule to set the height of an image element with the ID `blog-responsive-image`. It includes a media query to adjust the height for screens up to 600px wide, making the image layout responsive.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v8.md#_snippet_0

LANGUAGE: css
CODE:
```
#blog-responsive-image {
  height: 230px;
  @media (max-width: 600px) {
    height: 167px;
  }
}
```

----------------------------------------

TITLE: Running the import-path codemod for v0.15.0
DESCRIPTION: Command to execute the codemod that updates import paths for Material UI v0.15.0's reorganized folder structure.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_131

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v0.15.0/import-path <path>
```

----------------------------------------

TITLE: Running @mui/system Synthetic Benchmark
DESCRIPTION: Command to run the MUI system benchmark with performance comparisons between styling system implementations from styled-system/css, chakra-ui, and MUI's styleFunctionSx. The chakra-ui implementation shows the highest performance.
SOURCE: https://github.com/mui/material-ui/blob/master/benchmark/server/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
pnpm server:system

@styled-system/css x 64,606 ops/sec ±0.45% (188 runs sampled)
@chakra-ui/system/css x 126,272 ops/sec ±0.21% (191 runs sampled)
@mui/system styleFunctionSx x 40,867 ops/sec ±0.50% (191 runs sampled)
```

----------------------------------------

TITLE: Optimizing Vite for Pigment CSS Demo
DESCRIPTION: Optional command to optimize Vite if errors occur while running the development server. This forces a fresh optimization of dependencies.
SOURCE: https://github.com/mui/material-ui/blob/master/apps/pigment-css-vite-app/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
pnpm vite optimize --force
```

----------------------------------------

TITLE: Installing MUI Lab Package with npm
DESCRIPTION: Command to install the MUI Lab package which contains experimental components and features not yet ready for the core package.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
npm install @mui/lab
```

----------------------------------------

TITLE: Installing MUI Lab Package with Yarn
DESCRIPTION: Command to add the MUI Lab package using Yarn, which is needed if you were previously using @material-ui/lab.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
yarn add @mui/lab
```

----------------------------------------

TITLE: Running MUI Codemod from CodeSandbox CI
DESCRIPTION: Example command showing how to test a codemod using the CodeSandbox CI build link. This simulates a consumer-facing experience before merging a PR.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/CONTRIBUTING.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx @mui/codemod@https://pkg.csb.dev/mui/material-ui/commit/39bf9464/@mui/codemod deprecations/accordion-props docs/src/modules/brandingTheme.ts
```

----------------------------------------

TITLE: Downloading Material UI Next.js Example (Bash)
DESCRIPTION: This command sequence downloads a compressed archive of the Material UI repository's master branch, extracts the specific Next.js example directory, and changes the current working directory into the extracted project folder. Requires `curl` and `tar` to be installed.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-nextjs
cd material-ui-nextjs
```

----------------------------------------

TITLE: Installing Dependencies and Running Material UI Preact Example (bash)
DESCRIPTION: This snippet executes `npm install` to download and install all project dependencies listed in the `package.json` file. Following successful installation, it runs the `start` script defined in `package.json` using `npm run start`, which typically starts a local development server for the application. This requires Node.js and npm to be installed and configured.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-preact/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run start
```

----------------------------------------

TITLE: Installing MUI System with styled-components
DESCRIPTION: Command to install MUI System with styled-components as the styling engine using different package managers.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/installation/installation.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npm install @mui/system @mui/styled-engine-sc styled-components
```

LANGUAGE: bash
CODE:
```
pnpm add @mui/system @mui/styled-engine-sc styled-components
```

LANGUAGE: bash
CODE:
```
yarn add @mui/system @mui/styled-engine-sc styled-components
```

----------------------------------------

TITLE: Installing Material UI and Emotion using pnpm (Bash)
DESCRIPTION: This command installs the `@mui/material`, `@emotion/react`, and `@emotion/styled` packages using the pnpm package manager. `@emotion/react` and `@emotion/styled` are required peer dependencies for Material UI. This snippet is presented within a tabbed `codeblock` component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/codeblock.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
```bash pnpm
pnpm add @mui/material @emotion/react @emotion/styled
# `@emotion/react` and `@emotion/styled` are peer dependencies
```
```

----------------------------------------

TITLE: Installing Emotion Dependencies with Yarn
DESCRIPTION: Command to add Emotion packages using Yarn. These are required peer dependencies for Material UI v5's styling system.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
yarn add @emotion/react @emotion/styled
```

----------------------------------------

TITLE: Migrating Drop Down Menu from v0.x to v1.x
DESCRIPTION: Shows the changes needed to migrate Drop Down Menu components from Material-UI v0.x to v1.x using the new Select component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_12

LANGUAGE: diff
CODE:
```
-import DropDownMenu from 'material-ui/DropDownMenu';
+import Select from '@material-ui/core/Select';

-<DropDownMenu></DropDownMenu>
+<Select value={this.state.value}></Select>
```

----------------------------------------

TITLE: Lab Components Migration Codemod (v7.0.0)
DESCRIPTION: Updates imports of components moved from @mui/lab to @mui/material, including Alert, Autocomplete, and other components.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_63

LANGUAGE: bash
CODE:
```
npx @mui/codemod v7.0.0/lab-removed-components <path>
```

LANGUAGE: diff
CODE:
```
- import { Alert } from '@mui/lab';
+ import { Alert } from '@mui/material';
```

LANGUAGE: diff
CODE:
```
- import Alert, { alertClasses } from '@mui/lab/Alert';
+ import Alert, { alertClasses } from '@mui/material/Alert';
```

----------------------------------------

TITLE: Using Codemod for Grid Props Migration in v6
DESCRIPTION: Command to run the codemod for automatically updating Grid props to the new format in Material UI v6.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v6.0.0/grid-v2-props <path/to/folder>
```

----------------------------------------

TITLE: Running Dialog Classes Codemod Command
DESCRIPTION: Command to automatically update deprecated Dialog class names in a codebase using MUI's codemod tool.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_26

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest deprecations/dialog-classes <path>
```

----------------------------------------

TITLE: Renaming ExpansionPanel to Accordion in React
DESCRIPTION: Renames 'ExpansionPanel*' components to 'Accordion*'. This codemod updates the component names to reflect the new naming convention in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_82

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/expansion-panel-component <path>
```

----------------------------------------

TITLE: Running @mui/envinfo via npx to get system environment information
DESCRIPTION: This command demonstrates how to use npx to run the @mui/envinfo package, which displays system information, installed binaries, browsers, and relevant npm packages installed in the current environment. This information is useful when reporting issues to the MUI team.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-envinfo/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ npx @mui/envinfo

  System:
    OS: Linux 5.4 Ubuntu 20.04.1 LTS (Focal Fossa)
  Binaries:
    Node: 12.20.0 - ~/.nvm/versions/node/v12.20.0/bin/node
    Yarn: 1.22.4 - /usr/bin/yarn
    npm: 6.14.8 - ~/.nvm/versions/node/v12.20.0/bin/npm
  Browsers:
    Chrome: 87.0.4280.66
    Firefox: 83.0
  npmPackages:
    @emotion/react: ^11.0.0 => 11.1.1
    @emotion/styled: ^11.0.0 => 11.0.0
    @mui/codemod:  5.0.0-alpha.17
    @mui/material:  5.0.0-alpha.18
    @mui/docs:  5.0.0-alpha.1
    @mui/envinfo:  2.0.0
    @mui/icons-material:  5.0.0-alpha.15
    @mui/lab:  5.0.0-alpha.18
    @mui/styled-engine:  5.0.0-alpha.18
    @mui/styled-engine-sc:  5.0.0-alpha.18
    @mui/styles:  5.0.0-alpha.18
    @mui/system:  5.0.0-alpha.18
    @mui/types:  5.1.0
    @mui/base:  5.0.0-alpha.18
    @mui/utils:  5.0.0-alpha.18
    @types/react: ^17.0.0 => 17.0.0
    react: ^16.14.0 => 16.14.0
    react-dom: ^16.14.0 => 16.14.0
    styled-components:  5.2.1
    typescript: ^4.0.2 => 4.0.5
```

----------------------------------------

TITLE: Updating Material-UI Styles Import Path (Diff)
DESCRIPTION: Illustrates the change in the recommended import path for Material-UI styling utilities like `makeStyles`. Starting from v4.5.1, imports should be made from `@mui/material/styles` instead of the previously used `@mui/styles` to prevent package duplication and reduce confusion.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/september-2019-update.md#2025-04-22_snippet_1

LANGUAGE: diff
CODE:
```
-import { makeStyles } from '@mui/styles';
+import { makeStyles } from '@mui/material/styles';
```

----------------------------------------

TITLE: Including Theme Builder Component in Markdown
DESCRIPTION: This snippet embeds the JoyThemeBuilder React component into the markdown documentation, which provides a visual interface for creating custom color palettes for Joy UI themes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-builder/theme-builder.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
{"component": "modules/components/JoyThemeBuilder.tsx"}
```

----------------------------------------

TITLE: Importing Shadows from Material-UI System (JavaScript)
DESCRIPTION: This snippet shows how to import the shadows utility from the Material-UI system package. This import is necessary to use the boxShadow prop in components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/shadows/shadows.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
import { shadows } from '@mui/system';
```

----------------------------------------

TITLE: Importing Paper Component in React
DESCRIPTION: Basic import statement for the Paper component from Material UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/paper/paper.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Paper from '@mui/material/Paper';
```

----------------------------------------

TITLE: Importing Typography Component in React
DESCRIPTION: Basic import statement for the Typography component from MUI Joy UI library.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/typography/typography.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Typography from '@mui/joy/Typography';
```

----------------------------------------

TITLE: Importing RadioGroup Component in React
DESCRIPTION: Import statement for the RadioGroup component which serves as a wrapper for multiple Radio components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/radio-button/radio-button.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import RadioGroup from '@mui/joy/RadioGroup';
```

----------------------------------------

TITLE: Importing Grid Component from Joy UI
DESCRIPTION: Basic import statement for the Grid component from Joy UI package.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Grid from '@mui/joy/Grid';
```

----------------------------------------

TITLE: Importing ModalClose Component in Joy UI
DESCRIPTION: Import statement for the ModalClose component which adds a close button to the Drawer.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/drawer/drawer.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import ModalClose from '@mui/joy/ModalClose';
```

----------------------------------------

TITLE: Importing Checkbox Component in React
DESCRIPTION: Basic import statement for the Checkbox component from Joy UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/checkbox/checkbox.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Checkbox from '@mui/joy/Checkbox';
```

----------------------------------------

TITLE: Updating MUI System Package Version
DESCRIPTION: Changes required in package.json to use the beta release of MUI System v6.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/migrating-to-v6/migrating-to-v6.md#2025-04-22_snippet_0

LANGUAGE: diff
CODE:
```
-"@mui/system": "latest",
+"@mui/system": "next",
```

----------------------------------------

TITLE: Rendering Material UI Starting Links Collection in JSX
DESCRIPTION: This snippet renders a custom React component called MaterialStartingLinksCollection, which likely displays a collection of links to help users get started with Material UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/overview/overview.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
{"component": "modules/components/MaterialStartingLinksCollection.js"}
```

----------------------------------------

TITLE: Running Material-UI Types Codemod Command
DESCRIPTION: Command to execute the material-ui-types codemod on a specified path. This renames Omit imports from @material-ui/types to DistributiveOmit.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_96

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v5.0.0/material-ui-types <path>
```

----------------------------------------

TITLE: Defining Custom Transform Function for Sizing Props in Material UI System JS
DESCRIPTION: Presents the JavaScript transform function used internally by Material UI System for sizing properties (`width`, `height`, `minHeight`, `maxHeight`, `minWidth`, `maxWidth`). Values between 0 and 1 (exclusive of 0) are converted to percentages; otherwise, they are treated as pixel values.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_9

LANGUAGE: js
CODE:
```
function transform(value) {
  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
}
```

----------------------------------------

TITLE: Migrating Raised Button from v0.x to v1.x
DESCRIPTION: Shows the changes needed to migrate Raised Button components from Material-UI v0.x to v1.x using the Button component with the contained variant.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_6

LANGUAGE: diff
CODE:
```
-import RaisedButton from 'material-ui/RaisedButton';
+import Button from '@material-ui/core/Button';

-<RaisedButton />
+<Button variant="contained" />
```

----------------------------------------

TITLE: MUI System Grid Import Statement
DESCRIPTION: Shows how to import grid functionality from MUI System.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/grid/grid.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
import { grid } from '@mui/system';
```

----------------------------------------

TITLE: Migrating Circular Progress from v0.x to v1.x
DESCRIPTION: Shows the changes needed to migrate Circular Progress components from Material-UI v0.x to v1.x with updated prop names.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_11

LANGUAGE: diff
CODE:
```
-import CircularProgress from 'material-ui/CircularProgress';
+import CircularProgress from '@material-ui/core/CircularProgress';

-<CircularProgress mode="indeterminate" />
+<CircularProgress variant="indeterminate" />
```

----------------------------------------

TITLE: Handling Dialog Actions with Toolpad API in React
DESCRIPTION: Example of using the useDialogs hook from @toolpad/core to handle dialog actions like prompts, confirmations, and custom dialogs.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/dialogs/dialogs.md#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
const handleDelete = async () => {
  const id = await dialogs.prompt('Enter the ID to delete', {
    okText: 'Delete',
    cancelText: 'Cancel',
  });

  if (id) {
    const deleteConfirmed = await dialogs.confirm(
      `Are you sure you want to delete "${id}"?`,
    );
    if (deleteConfirmed) {
      try {
        setIsDeleting(true);
        await mockApiDelete(id);
        dialogs.alert('Deleted!');
      } catch (error) {
        const message = error instanceof Error ? error.message : 'Unknown error';
        await dialogs.open(MyCustomDialog, { id, error: message });
      } finally {
        setIsDeleting(false);
      }
    }
  }
};
```

----------------------------------------

TITLE: Updating jssPreset Import Path
DESCRIPTION: Diff showing the updated import path for jssPreset, which was moved from @mui/material/styles to @mui/styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_28

LANGUAGE: diff
CODE:
```
-import { jssPreset } from '@mui/material/styles';
+import { jssPreset } from '@mui/styles';
```

----------------------------------------

TITLE: Importing Table Component in Joy UI
DESCRIPTION: This snippet shows how to import the Table component from Joy UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/table/table.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Table from '@mui/joy/Table';
```

----------------------------------------

TITLE: Importing Typography Component for Breadcrumbs in React (Joy UI)
DESCRIPTION: Import statement for the Typography component used with Breadcrumbs to display text elements, often used for the current page indicator.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
import Typography from '@mui/joy/Typography';
```

----------------------------------------

TITLE: Generating API Documentation Commands
DESCRIPTION: Commands to update the component API documentation after making changes to TypeScript declaration files.
SOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
$ pnpm proptypes
$ pnpm docs:api
```

----------------------------------------

TITLE: Generating Switch Component Theme Styles
DESCRIPTION: Theme configuration generated by Sync plugin for customizing the Switch component's checked state, medium size, and primary color to match iOS styling.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/design-resources/material-ui-sync/material-ui-sync.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
{
  components: {
    MuiSwitch: {
      styleOverrides: {
        root: {
          '&.MuiSwitch-sizeMedium:has(.MuiSwitch-colorPrimary)': {
            '&:has(.Mui-checked):not(:has(.Mui-disabled)):not(:has(.Mui-focusVisible))': {
              width: '40px',
              height: '21px',
              padding: '0',
              '& .MuiSwitch-switchBase': {
                transform: 'translateX(19px) translateY(2px)',
                padding: '0',
                '& .MuiSwitch-thumb': {
                  width: '17px',
                  height: '17px',
                  background: '#FAFAFA',
                },
                '& + .MuiSwitch-track': {
                  width: '38px',
                  height: '21px',
                  background: 'var(--mui-palette-success-light)',
                  opacity: '1',
                },
              },
            },
          },
        },
      },
    },
  },
}
```

----------------------------------------

TITLE: Installing MUI Icons Package with Yarn
DESCRIPTION: Command to add the MUI Icons package using Yarn, which is needed if you were previously using @material-ui/icons.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
yarn add @mui/icons-material
```

----------------------------------------

TITLE: Downloading and Navigating to Example Project Directory - Bash
DESCRIPTION: This snippet uses `curl` to download a tarball of the specified branch/tag from the Material UI GitHub repository, pipes it to `tar` to extract it while stripping directory levels, and then changes the current directory (`cd`) into the extracted project folder. It is the first step to getting the example project locally.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs-ts-v4-v5-migration/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-nextjs-ts-v4-v5-migration
cd material-ui-nextjs-ts-v4-v5-migration
```

----------------------------------------

TITLE: Customizing OG Card Content using Markdown Frontmatter
DESCRIPTION: This markup snippet demonstrates how to override the default Open Graph card title and description within a Markdown file's frontmatter (header section delimited by `---`). Use the `cardTitle` and `cardDescription` keys to provide custom text. Asterisks (`*`) within the `cardTitle` value delimit text sections that should be highlighted in the generated image.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/og-card.md#2025-04-22_snippet_0

LANGUAGE: markup
CODE:
```
--
cardTitle: A *different* title than the page title
cardDecription: The word "different" on the title is highlighted
--
```

----------------------------------------

TITLE: Embedding Contributor Profile Images in Markdown - HTML Image Tag
DESCRIPTION: This snippet shows how to include contributor headshot images within a Markdown document using an <img> tag. It sets the image source to a GitHub avatar URL, provides alternative text for accessibility, and applies inline styling to control width, margin, and border radius for a visually consistent profile presentation. Ensure external links are reliable and mindful of remote resource performance.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q1-update.md#2025-04-22_snippet_4

LANGUAGE: html
CODE:
```
<img src="https://avatars.githubusercontent.com/u/16926049" alt="dmitriy" style="max-width: 160px; margin: unset; margin-bottom: 24px; border-radius: 2px;" />
```

----------------------------------------

TITLE: Embedding Images for Roadmap and Feature Illustrations - HTML Image Tag
DESCRIPTION: This snippet uses the <img> HTML element within Markdown to insert graphical assets (e.g., product screenshots, feature illustrations) relevant to roadmap and announcement sections. It customizes image display properties with inline styles for size, maintains alternate text for accessibility, and ensures visual clarity in documentation. This pattern is repeated for icons, feature preview images, and design tool logos throughout the file.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q1-update.md#2025-04-22_snippet_5

LANGUAGE: html
CODE:
```
<img src="/static/blog/2020-q1-update/figma.png" alt="figma" style="max-width: 160px; margin-bottom: 24px;" />
```

----------------------------------------

TITLE: Importing No-SSR Component in React
DESCRIPTION: Shows how to import the No-SSR component from Material-UI for use in a React application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/no-ssr/no-ssr.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import NoSsr from '@mui/material/NoSsr';
```

----------------------------------------

TITLE: Building Production Application
DESCRIPTION: Command to build the Pigment CSS Next.js demo application for production deployment.
SOURCE: https://github.com/mui/material-ui/blob/master/apps/pigment-css-next-app/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
pnpm run --filter=@app/pigment-css-next-app build
```

----------------------------------------

TITLE: Installing Dependencies and Running Development Server - Bash
DESCRIPTION: These commands first install all necessary project dependencies listed in the package.json file using npm. Then, the `npm run dev` command starts the Next.js development server, typically accessible at http://localhost:3000, allowing you to view the application in development mode.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-pigment-css-nextjs-ts/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Format Property Update
DESCRIPTION: Shows the change from format to inputFormat prop.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/pickers-migration/pickers-migration.md#2025-04-22_snippet_5

LANGUAGE: diff
CODE:
```
 <DatePicker
-  format="DD-MM-YYYY"
+  inputFormat="DD-MM-YYYY"
```

----------------------------------------

TITLE: Applying Custom Margins to Stack Children (Unsupported Example)
DESCRIPTION: Example showing that direct margin styling on Stack children is not supported by default and will be ignored.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/stack/stack.md#2025-04-22_snippet_4

LANGUAGE: jsx
CODE:
```
<Stack>
  <button style={{ marginTop: '30px' }}>...</button>
</Stack>
```

----------------------------------------

TITLE: Material-UI Types Codemod Example
DESCRIPTION: This codemod renames the Omit import from @material-ui/types to DistributiveOmit to match API changes in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_95

LANGUAGE: diff
CODE:
```
-import { Omit } from '@material-ui/types';
+import { DistributiveOmit } from '@material-ui/types';
```

----------------------------------------

TITLE: Implementing Page Container with Breadcrumbs in Toolpad
DESCRIPTION: Shows how to use the PageContainer component from @toolpad/core, which includes built-in support for breadcrumbs, page title, and actions in a dashboard layout.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_8

LANGUAGE: JSX
CODE:
```
{"demo": "PageContainerBasic.js", "height": 400, "bg": "inline", "defaultExpanded": false}
```

----------------------------------------

TITLE: Running InputLabel Size Codemod for v7 Migration
DESCRIPTION: Command to run the Material UI codemod that automatically updates InputLabel size prop values from 'normal' to 'medium' for consistency with other components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npx @mui/codemod v7.0.0/input-label-size-normal-medium <path/to/folder>
```

----------------------------------------

TITLE: FormControlLabel Props Codemod Command
DESCRIPTION: Bash command to automatically transform deprecated FormControlLabel component props using MUI's codemod utility.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_35

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest deprecations/form-control-label-props <path>
```

----------------------------------------

TITLE: Running Chip Classes Codemod Command
DESCRIPTION: Command to automatically update deprecated Chip class names in a codebase using MUI's codemod tool. This transforms old class naming patterns to the new pattern consistently.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_18

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest deprecations/chip-classes <path>
```

----------------------------------------

TITLE: Importing ListSubheader Component in React
DESCRIPTION: Demonstrates how to import the ListSubheader component, which is used for creating labels for nested lists or sections within a list.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_6

LANGUAGE: jsx
CODE:
```
import ListSubheader from '@mui/joy/ListSubheader';
```

----------------------------------------

TITLE: Package Dependency Update for Preview Builds
DESCRIPTION: Example of updating package.json to use a preview build from CodeSandbox CI instead of the released version.
SOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_8

LANGUAGE: diff
CODE:
```
diff --git a//package.json b//package.json
index 791a7da1f4..a5db13b414 100644
--- a/package.json
+++ b/package.json
@@ -61,7 +61,7 @@
   "dependencies": {
     "@babel/runtime": "^7.4.4",
     "@mui/styled-engine": "^5.0.0-alpha.16",
-    "@mui/material": "^5.0.0-alpha.15",
+    "@mui/material": "https://pkg.csb.dev/mui/material-ui/commit/371c952b/@mui/material",
     "@mui/system": "^5.0.0-alpha.16",
```

----------------------------------------

TITLE: Embedding Images in Markdown - HTML Image Tag
DESCRIPTION: This example illustrates embedding an image directly into a Markdown document with the <img> HTML tag. The src, alt, and style attributes control the image's source, accessibility text, and styling such as size and margin. This approach is useful for fine-tuned presentation where Markdown's default image syntax is insufficient. Verify that paths to images are correct and that the Markdown processor supports raw HTML.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q1-update.md#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<img src="/static/blog/2020-q1-update/sketch.png" alt="sketch" style="max-width: 160px;" />
```

----------------------------------------

TITLE: Installing Local Package Build
DESCRIPTION: Command to install a locally built MUI package for testing.
SOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
$test-project> npm i ./path-to-file/mui-material-x.x.x.tar.gz
```

----------------------------------------

TITLE: Running Pigment CSS Next.js Demo App in Development Mode
DESCRIPTION: This command uses pnpm and nx to run the Pigment CSS Next.js demo app in development mode for active development and testing.
SOURCE: https://github.com/mui/material-ui/blob/master/apps/README.md#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
pnpm nx run @app/pigment-css-next-app:dev
```

----------------------------------------

TITLE: Running Pigment CSS Next.js Demo App in Preview Mode
DESCRIPTION: This command uses pnpm and nx to run the Pigment CSS Next.js demo app in preview mode after automatically building it.
SOURCE: https://github.com/mui/material-ui/blob/master/apps/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm nx run @app/pigment-css-next-app:preview
```

----------------------------------------

TITLE: Building Workspace Packages
DESCRIPTION: Command to build all packages in the workspace before starting the application.
SOURCE: https://github.com/mui/material-ui/blob/master/apps/pigment-css-next-app/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pnpm build
```

----------------------------------------

TITLE: Installing Dependencies and Starting Material UI SSR App (Bash)
DESCRIPTION: These commands are used within the example project directory to set up and launch the application. `npm install` fetches and installs all necessary project packages based on `package.json`, and `npm run start` runs the predefined start script, typically launching the web server for the application.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-express-ssr/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
```

LANGUAGE: bash
CODE:
```
npm run start
```

----------------------------------------

TITLE: Installing Dependencies and Starting Development Server - Bash
DESCRIPTION: This snippet executes two sequential commands. `npm install` downloads and installs all required project dependencies listed in the `package.json` file. `npm run dev` then runs the script defined as `dev` in the `package.json`, which typically starts the Next.js development server.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs-ts-v4-v5-migration/README.md#_snippet_1

LANGUAGE: Bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Importing Stepper Components in React
DESCRIPTION: This snippet shows how to import the basic Stepper components from Material-UI. It includes the main Stepper container, individual Step, and StepLabel components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/steppers/steppers.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Stepper from '@mui/material/Stepper';
import Step from '@mui/material/Step';
import StepLabel from '@mui/material/StepLabel';
```

----------------------------------------

TITLE: Updating InputLabel Classes
DESCRIPTION: Migration from FormLabelClasses to classes prop for style overrides.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_22

LANGUAGE: diff
CODE:
```
 <InputLabel
-  FormLabelClasses={{ asterisk: 'bar' }}
+  classes={{ asterisk: 'bar' }}
 >
   Foo
 </InputLabel>
```

----------------------------------------

TITLE: ListItem Props Codemod Command
DESCRIPTION: Bash command to automatically transform deprecated ListItem component props using MUI's codemod utility.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_38

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest deprecations/list-item-props <path>
```

----------------------------------------

TITLE: Paper Component HTML Structure
DESCRIPTION: The basic HTML structure of the Paper component showing its root element and content placement.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/paper/paper.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<div class="MuiPaper-root">
  <!-- Paper contents -->
</div>
```

----------------------------------------

TITLE: Creating and Pushing Feature Branch
DESCRIPTION: Commands for creating a new topic branch and pushing changes to your fork.
SOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
git checkout -b my-topic-branch
git push -u origin HEAD
```

----------------------------------------

TITLE: Running @mui/docs Synthetic Benchmark
DESCRIPTION: Command to run the MUI documentation components benchmark with results for the MarkdownElement component, showing its performance in operations per second.
SOURCE: https://github.com/mui/material-ui/blob/master/benchmark/server/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
pnpm server:docs

MarkdownElement x 3,941 ops/sec ±5.53% (185 runs sampled)
```

----------------------------------------

TITLE: Opening Material UI CDN Example HTML - Bash
DESCRIPTION: These bash commands show how to open the example HTML file in a web browser after setting up the example directory. It provides two options: 'index.html' for React 19+ and 'react-18-example.html' for React 18, accommodating different React versions.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-via-cdn/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
# React 19 or later
open index.html
# React 18
open react-18-example.html
```

----------------------------------------

TITLE: Watching Pigment CSS Package Changes
DESCRIPTION: Command to watch and automatically rebuild Pigment CSS package files during development.
SOURCE: https://github.com/mui/material-ui/blob/master/apps/pigment-css-next-app/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
pnpm watch:zero
```

----------------------------------------

TITLE: Installing Material UI Styles v4 with npm or yarn
DESCRIPTION: Command line instructions for installing Material UI styles version 4 using either npm or yarn package managers.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
npm install @material-ui/styles

or

yarn add @material-ui/styles
```

----------------------------------------

TITLE: Migrating Font Icon from v0.x to v1.x
DESCRIPTION: Shows the changes needed to migrate Font Icon components from Material-UI v0.x to v1.x using the new Icon component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_10

LANGUAGE: diff
CODE:
```
-import FontIcon from 'material-ui/FontIcon';
+import Icon from '@material-ui/core/Icon';

-<FontIcon>home</FontIcon>
+<Icon>home</Icon>
```

----------------------------------------

TITLE: Starting MUI Documentation in Development Mode with pnpm
DESCRIPTION: Command to start the MUI documentation website in development mode using pnpm. This must be run from the project root, and other package managers like npm or Yarn are not supported.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pnpm docs:dev
```

----------------------------------------

TITLE: Defining a Feature List using Custom HTML Tag
DESCRIPTION: This snippet demonstrates the use of a custom HTML tag '<featureList>' to create a formatted list of features within the documentation. The content inside the tag, typically list items, describes the features. This relies on the documentation system's custom parser to recognize and render the '<featureList>' element appropriately.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/custom-components.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<featureList>
- Manages modal stacking when one-at-a-time just isn't enough.
- Creates a backdrop, for disabling interaction below the modal.est
- It disables scrolling of the page content while open.
- It properly manages focus; moving to the modal content, and keeping it there until the modal is closed.
- Adds the appropriate ARIA roles automatically.
</featureList>
```

----------------------------------------

TITLE: Importing List Item Decorator Component in React
DESCRIPTION: Shows how to import the ListItemDecorator component, which is used to add icons or other decorative elements to list items.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import ListItemDecorator from '@mui/joy/ListItemDecorator';
```

----------------------------------------

TITLE: Basic Tabs Import in React
DESCRIPTION: Basic import statement for using Material-UI Tabs component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/tabs/tabs.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
```

----------------------------------------

TITLE: Downloading and Extracting Material UI CDN Example - Bash
DESCRIPTION: This bash command downloads the master branch of the Material UI repository, extracts the 'examples/material-ui-via-cdn' directory, removes parent directories, and then changes the current directory into the extracted example directory. This prepares the environment to run the example.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-via-cdn/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-via-cdn
cd material-ui-via-cdn
```

----------------------------------------

TITLE: Local Package Building Commands
DESCRIPTION: Commands for building and packaging MUI components locally for testing.
SOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
$> cd packages/mui-material # or path to any other mui package
$packages\mui-material> pnpm build
$packages\mui-material> cd ./build
$packages\mui-material> pnpm pack
```

----------------------------------------

TITLE: Rendering Template Collection Component in Markdown
DESCRIPTION: This code snippet embeds a React component called TemplateCollection.js into the markdown document. It uses a custom syntax to render the demo with specific options like hiding the toolbar and setting the background to inline.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/templates/index.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
{{"demo": "TemplateCollection.js", "hideToolbar": true, "bg": "inline"}}
```

----------------------------------------

TITLE: Box Component HTML Structure
DESCRIPTION: This code snippet illustrates the basic HTML structure of the Box component, which consists of a single root div element.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/box/box.md#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<div className="MuiBox-root">
  <!-- contents of the Box -->
</div>
```

----------------------------------------

TITLE: Importing DialogContent Component in Joy UI
DESCRIPTION: Import statement for the DialogContent component which creates a scrollable container inside the Drawer.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/drawer/drawer.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
import DialogContent from '@mui/joy/DialogContent';
```

----------------------------------------

TITLE: Instructing on Manual Visual Regression Testing for Material-UI
DESCRIPTION: This snippet outlines the process for conducting manual visual regression tests in the Material-UI project. It suggests moving the test to a temporary folder and running the visual regression test suite to obtain a screenshot.
SOURCE: https://github.com/mui/material-ui/blob/master/test/regressions/manual/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# manual visual regression tests

These are expensive tests that should only be consulted if you suspect that something changed.
Move the test you want to check inside a temporary folder in `../test` and run the visual regression test suite to get a screenshot.
```

----------------------------------------

TITLE: Updating Container Import Path
DESCRIPTION: Diff showing the updated import path for the Container component which moved from lab to core package.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_10

LANGUAGE: diff
CODE:
```
-import Container from '@material-ui/lab/Container';
+import Container from '@material-ui/core/Container';
```

----------------------------------------

TITLE: Running the import-path codemod for v1.0.0
DESCRIPTION: Command to execute the codemod that updates import paths for the new component locations in Material UI v1.0.0.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_121

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v1.0.0/import-path <path>
```

----------------------------------------

TITLE: Recast Options Configuration - Bash Command
DESCRIPTION: Demonstrates how to pass printer options to recast through jscodeshift's printOptions argument.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest <transform> <path> --jscodeshift="--printOptions='{\"quote\":\"double\"}'"
```

----------------------------------------

TITLE: Renaming Switch Component Classes
DESCRIPTION: Class name changes for Switch component to match specification wording.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_17

LANGUAGE: diff
CODE:
```
-icon
-bar
+thumb
+track
```

----------------------------------------

TITLE: Install Dependencies and Run Gatsby Development Server Bash
DESCRIPTION: After downloading the example, this snippet installs the project's required dependencies using npm. It then starts the Gatsby development server, allowing you to view and work on the project locally.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-gatsby/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run develop
```

----------------------------------------

TITLE: Box Component HTML Structure
DESCRIPTION: The basic HTML structure showing how the Box component is rendered in the DOM.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/box/box.md#2025-04-22_snippet_2

LANGUAGE: html
CODE:
```
<div className="MuiBox-root">
  <!-- contents of the Box -->
</div>
```

----------------------------------------

TITLE: Alert Title Import - React/JSX
DESCRIPTION: Import statement for the AlertTitle component to add titles to Alert elements
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/alert/alert.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
import AlertTitle from '@mui/material/AlertTitle';
```

----------------------------------------

TITLE: Updating Material UI Styles Dependency
DESCRIPTION: JSON configuration showing how to update the Material UI styles dependency in package.json to version 4.0.0.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
"dependencies": {
  "@material-ui/styles": "^4.0.0"
}
```

----------------------------------------

TITLE: Installing Material UI Core v4 with npm or yarn
DESCRIPTION: Command line instructions for installing Material UI core version 4 using either npm or yarn package managers.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm install @material-ui/core

or

yarn add @material-ui/core
```

----------------------------------------

TITLE: Enum Props Type Definition
DESCRIPTION: Type definition example showing enum props structure for component variations
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/api/api.md#2025-04-22_snippet_3

LANGUAGE: tsx
CODE:
```
type Props = {
  variant: 'text' | 'contained' | 'fab';
};
```

----------------------------------------

TITLE: Pushing Changes to Documentation Repository
DESCRIPTION: Git command to push the selected changes to the material-ui-docs repository.
SOURCE: https://github.com/mui/material-ui/blob/master/scripts/README.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
git push material-ui-docs HEAD:latest
```

----------------------------------------

TITLE: Synchronizing Local Master Branch
DESCRIPTION: Commands to synchronize the local master branch with the upstream repository.
SOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
git checkout master
git pull upstream master
```

----------------------------------------

TITLE: Running @mui/material Synthetic Benchmark
DESCRIPTION: Command to run the material UI core components benchmark with results showing operations per second for various button implementations. ButtonBase, HocButton, and NakedButton components are compared, with NakedButton showing the highest performance.
SOURCE: https://github.com/mui/material-ui/blob/master/benchmark/server/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pnpm server:core

ButtonBase x 40,724 ops/sec ±1.58% (189 runs sampled)
HocButton x 166,229 ops/sec ±1.04% (191 runs sampled)
NakedButton x 228,473 ops/sec ±0.99% (187 runs sampled)
ButtonBase enable ripple x 56,019 ops/sec ±0.87% (189 runs sampled)
ButtonBase disable ripple x 61,748 ops/sec ±0.35% (190 runs sampled)
```

----------------------------------------

TITLE: Migrating from Extended Fab Button to Fab Component
DESCRIPTION: Diff showing the migration from Button with variant='extendedFab' to the Fab component with variant='extended'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_14

LANGUAGE: diff
CODE:
```
-import Button from '@material-ui/core/Button';
-<Button variant="extendedFab" />
+import Fab from '@material-ui/core/Fab';
+<Fab variant="extended" />
```

----------------------------------------

TITLE: Updating Slider Import Path
DESCRIPTION: Migration step for importing Slider component from core instead of lab package.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_16

LANGUAGE: diff
CODE:
```
-import Slider from '@material-ui/lab/Slider'
+import Slider from '@material-ui/core/Slider'
```

----------------------------------------

TITLE: Updating StylesProvider Import Path
DESCRIPTION: Diff showing the updated import path for StylesProvider, which was moved from @mui/material/styles to @mui/styles.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_32

LANGUAGE: diff
CODE:
```
-import { StylesProvider } from '@mui/material/styles';
+import { StylesProvider } from '@mui/styles';
```

----------------------------------------

TITLE: Building Workspace Packages for Pigment CSS Vite Demo
DESCRIPTION: Command to build all packages in the workspace before running the Pigment CSS Vite demo project. This is a necessary prerequisite step.
SOURCE: https://github.com/mui/material-ui/blob/master/apps/pigment-css-vite-app/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pnpm build
```

----------------------------------------

TITLE: Migrating Flat Button from v0.x to v1.x
DESCRIPTION: Shows the changes needed to migrate Flat Button components from Material-UI v0.x to v1.x using the new Button component.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_5

LANGUAGE: diff
CODE:
```
-import FlatButton from 'material-ui/FlatButton';
+import Button from '@material-ui/core/Button';

-<FlatButton />
+<Button />
```

----------------------------------------

TITLE: Starting Documentation Development Server
DESCRIPTION: Command to start the local documentation development server.
SOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
pnpm start
```

----------------------------------------

TITLE: Removing Deprecated Typography Next Variants Flag
DESCRIPTION: Diff showing the removal of the useNextVariants flag which is no longer needed in Material UI v4.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_8

LANGUAGE: diff
CODE:
```
 typography: {
-  useNextVariants: true,
 },
```

----------------------------------------

TITLE: Adding Material-UI Docs Remote Repository
DESCRIPTION: Git command to add the material-ui-docs remote repository for documentation deployment.
SOURCE: https://github.com/mui/material-ui/blob/master/scripts/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
git remote add material-ui-docs https://github.com/mui/material-ui-docs.git
```

----------------------------------------

TITLE: Transforming Sizing Values in JavaScript
DESCRIPTION: A function that transforms sizing values. If the value is between 0 and 1 (exclusive), it's converted to a percentage. Otherwise, it's used as-is.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/sizing/sizing.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
function transform(value) {
  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
}
```

----------------------------------------

TITLE: Migrating Svg Icon from v0.x to v1.x
DESCRIPTION: Shows the changes needed to migrate Svg Icon components from Material-UI v0.x to v1.x, including import path changes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_4

LANGUAGE: diff
CODE:
```
-import AddIcon from 'material-ui/svg-icons/Add';
+import AddIcon from '@mui/icons-material/Add';

 <AddIcon />
```

----------------------------------------

TITLE: Running the Material Icons Builder Build Process
DESCRIPTION: Commands to install dependencies, build the Material Design Icons, and publish the generated package. This process downloads SVG icons and generates the appropriate JavaScript components.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-icons-material/builder.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pnpm install
pnpm build
cd build
pnpm publish
```

----------------------------------------

TITLE: Material UI Peer Dependencies Listing
DESCRIPTION: A JSON snippet showing the required peer dependencies for Material UI, specifically specifying compatible React and React DOM versions. Users should ensure these versions are installed in their project before installing Material UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/installation/installation.md#_snippet_1

LANGUAGE: json
CODE:
```
"peerDependencies": {
  "react": "^17.0.0 || ^18.0.0 || ^19.0.0",
  "react-dom": "^17.0.0 || ^18.0.0 || ^19.0.0"
},
```

----------------------------------------

TITLE: Updating import paths for Material UI v1.0.0
DESCRIPTION: This codemod flattens the import paths by changing from destructured imports to direct component imports, which aligns with Material UI v1.0.0's new structure.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_120

LANGUAGE: diff
CODE:
```
-import { MenuItem } from '@material-ui/core/Menu';
+import MenuItem from '@material-ui/core/MenuItem';
```

----------------------------------------

TITLE: Creating Success Callout Block - Markup
DESCRIPTION: Shows how to add a success-styled callout in markdown documentation using the ':::success' container. This format draws attention to actionable tips or confirmations and supports list items, bold text, inline code, and links. Use in environments that support custom container directives for rendering styled blocks. No parameters; content is predetermined for use in static documentation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/callouts.md#2025-04-22_snippet_1

LANGUAGE: markup
CODE:
```
:::success\nThis is a success callout.\nIt says, \"Here's an actionable suggestion to help you succeed.\"\n\n- emphasised: **bold text**\n- some code `<div/>`\n- a [link](#link).\n:::
```

----------------------------------------

TITLE: Importing Radio Component in React
DESCRIPTION: Basic import statement for the Radio component from Joy UI package.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/radio-button/radio-button.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Radio from '@mui/joy/Radio';
```

----------------------------------------

TITLE: Importing Input Component in React
DESCRIPTION: Basic import statement for the Input component from Joy UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/input/input.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Input from '@mui/joy/Input';
```

----------------------------------------

TITLE: Importing Avatar Component in Joy UI
DESCRIPTION: Basic import statement for the Avatar component from Joy UI package.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/avatar/avatar.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Avatar from '@mui/joy/Avatar';
```

----------------------------------------

TITLE: Importing Breadcrumbs Component in React (Joy UI)
DESCRIPTION: Basic import statement for the Breadcrumbs component from Joy UI. This is the primary component for implementing navigation breadcrumbs in a React application.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import Breadcrumbs from '@mui/joy/Breadcrumbs';
```

----------------------------------------

TITLE: Migrating Menu Item from v0.x to v1.x
DESCRIPTION: Shows the changes needed to migrate Menu Item components from Material-UI v0.x to v1.x with updated props and children usage.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_9

LANGUAGE: diff
CODE:
```
-import MenuItem from 'material-ui/MenuItem';
+import MenuItem from '@material-ui/core/MenuItem';

-<MenuItem primaryText="Profile" />
+<MenuItem>Profile</MenuItem>
```

----------------------------------------

TITLE: Migrating Box API Import Statement in Material-UI (diff)
DESCRIPTION: This diff code snippet demonstrates how to update the import statement for the Box component in Material-UI. The migration removes the unstable_Box import and uses the stable Box API from '@material-ui/core/Box'. No additional dependencies are required aside from Material-UI v4. The key change is replacing the unstable import path with the direct Box import, which improves code stability and alignment with the API's finalized status.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/march-2019-update.md#2025-04-22_snippet_0

LANGUAGE: diff
CODE:
```
-import { unstable_Box as Box } from '@material-ui/core/Box';\n+import Box from '@material-ui/core/Box';
```

----------------------------------------

TITLE: Download Material UI Gatsby Example Bash
DESCRIPTION: This snippet downloads the Material UI repository as a tarball, extracts the specific Gatsby example directory, and navigates into that directory. It's the initial step to obtain the project files.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-gatsby/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-gatsby
cd material-ui-gatsby
```

----------------------------------------

TITLE: Updating import paths for Material UI v0.15.0
DESCRIPTION: This codemod updates import paths to match the reorganized folder structure in Material UI v0.15.0, handling both source and npm imports.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_130

LANGUAGE: diff
CODE:
```
 // From the source
-import FlatButton from 'material-ui/src/flat-button';
+import FlatButton from 'material-ui/src/FlatButton';

 // From npm
-import RaisedButton from 'material-ui/lib/raised-button';
+import RaisedButton from 'material-ui/RaisedButton';
```

----------------------------------------

TITLE: Documenting Initial Release in Markdown
DESCRIPTION: This code snippet represents the Markdown syntax used to document the initial 1.0.0 release of the MUI Material-UI project as an npm package. It uses heading levels to structure the changelog information.
SOURCE: https://github.com/mui/material-ui/blob/master/packages-internal/test-utils/CHANGELOG.md#2025-04-22_snippet_0

LANGUAGE: Markdown
CODE:
```
# Changelog

## 1.0.0

Initial release as an npm package.
```

----------------------------------------

TITLE: Running @mui/styles Synthetic Benchmark
DESCRIPTION: Command to run the MUI styles benchmark with performance comparisons between different styling approaches including JSS, styled-components, Emotion, and various MUI styling implementations. EmotionCssButton and Naked components show the highest performance.
SOURCE: https://github.com/mui/material-ui/blob/master/benchmark/server/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
pnpm server:styles

Box x 3,850 ops/sec ±3.58% (178 runs sampled)
JSS naked x 35,493 ops/sec ±2.29% (183 runs sampled)
WithStylesButton x 16,844 ops/sec ±0.34% (191 runs sampled)
HookButton x 23,213 ops/sec ±0.88% (191 runs sampled)
StyledComponentsButton x 7,442 ops/sec ±2.09% (180 runs sampled)
EmotionButton x 11,345 ops/sec ±2.45% (185 runs sampled)
EmotionCssButton x 53,807 ops/sec ±0.40% (191 runs sampled)
EmotionServerCssButton x 43,701 ops/sec ±1.04% (190 runs sampled)
Naked x 58,694 ops/sec ±0.86% (188 runs sampled)
```

----------------------------------------

TITLE: Downloading and Extracting Material UI Preact Example (bash)
DESCRIPTION: This snippet downloads the Material UI repository tarball using `curl`, extracts the specific `material-ui-preact` example directory from the archive while stripping leading path components using `tar`, and finally changes the current working directory to the extracted project folder. It requires `curl` and `tar` utilities to be available on the system.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-preact/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-preact
cd material-ui-preact
```

----------------------------------------

TITLE: Embedding Media Content in Markdown - HTML Video for Animation Demo
DESCRIPTION: This snippet embeds a demonstration animation using the <video> HTML tag within a Markdown document. It applies inline styling to control video dimensions and margin, and uses multiple attributes for automatic, muted, looping, and inline playback. Developers should verify that the video format is widely supported and that inline HTML rendering is enabled in documentation tools.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q1-update.md#2025-04-22_snippet_2

LANGUAGE: html
CODE:
```
<video style="max-height: 95px; margin-bottom: 24px;" autoplay muted loop playsinline>
  <source src="/static/blog/2020-q1-update/skeleton.webm" type="video/webm" />
</video>
```

----------------------------------------

TITLE: Using Both Theme Providers Simultaneously in React
DESCRIPTION: Shows how to use both v0.x and v1.x versions of MuiThemeProvider together to support components from both versions during migration.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
import * as React from 'react';
import { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'; // v1.x
import { MuiThemeProvider as V0MuiThemeProvider } from 'material-ui';
import getMuiTheme from 'material-ui/styles/getMuiTheme';

const theme = createMuiTheme({
  /* theme for v1.x */
});
const themeV0 = getMuiTheme({
  /* theme for v0.x */
});

function App() {
  return (
    <MuiThemeProvider theme={theme}>
      <V0MuiThemeProvider muiTheme={themeV0}>{/*Components*/}</V0MuiThemeProvider>
    </MuiThemeProvider>
  );
}

export default App;
```

----------------------------------------

TITLE: Cherry-picking Commits for Deployment
DESCRIPTION: Git command to cherry-pick specific commits for documentation deployment.
SOURCE: https://github.com/mui/material-ui/blob/master/scripts/README.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
git cherry-pick <commit>
```

----------------------------------------

TITLE: Updating Divider Inset Property
DESCRIPTION: Diff showing the migration from the deprecated 'inset' prop to using the 'variant' prop with value 'inset'.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_15

LANGUAGE: diff
CODE:
```
-<Divider inset />
+<Divider variant="inset" />
```

----------------------------------------

TITLE: Updating UMD Global Access
DESCRIPTION: Change in global namespace access for Material-UI when used via CDN.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_25

LANGUAGE: diff
CODE:
```
 const {
   Button,
   TextField,
-} = window['material-ui'];
+} = MaterialUI;
```

----------------------------------------

TITLE: Adding Roboto Font via Google Web Fonts CDN
DESCRIPTION: HTML code to include the Roboto font from Google Web Fonts CDN in a web project.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/typography/typography.md#2025-04-22_snippet_2

LANGUAGE: html
CODE:
```
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap"
/>
```

----------------------------------------

TITLE: Creating a Markdown Link to the Careers Page
DESCRIPTION: This Markdown snippet creates a hyperlink. The visible link text is \"Visit our careers page now!\", and it points to the relative path `/careers/`, presumably the company's careers page.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2023-mui-values.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
[Visit our careers page now!](/careers/)
```

----------------------------------------

TITLE: Embedding Media Content in Markdown - HTML Paragraph with Link
DESCRIPTION: This snippet adds an HTML paragraph element within Markdown to provide a styled description for the media above. It includes an anchor link referencing additional documentation, allowing for advanced formatting beyond standard Markdown. This approach is useful when more precise UI or rich in-line links are needed in documentation. Ensure the Markdown parser allows raw HTML and that external URLs are valid.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q1-update.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<p class="blog-description">useAutocomplete <a href="https://mui.com/material-ui/react-autocomplete/#useautocomplete">hook</a> example, 4.5 kB gzipped.</p>
```

----------------------------------------

TITLE: Creating Template Page in React with MUI
DESCRIPTION: Basic template setup for creating a new page in Material UI documentation using AppTheme and TemplateFrame components.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
import * as React from 'react';
import AppTheme from 'docs/src/modules/components/AppTheme';
import TemplateFrame from 'docs/src/modules/components/TemplateFrame';
import Template from 'docs/data/material/getting-started/templates/<name>/<Template>';

export default function Page() {
  return (
    <AppTheme>
      <TemplateFrame>
        <Template />
      </TemplateFrame>
    </AppTheme>
  );
}
```

----------------------------------------

TITLE: Defining a Description Paragraph in HTML
DESCRIPTION: This HTML snippet defines a paragraph (`<p>`) element assigned the CSS class `description`. It's used to display the introductory description text for the job role, allowing specific styling to be applied via CSS rules associated with the 'description' class.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/careers/full-stack-engineer.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<p class="description">You will join the Toolpad team, to explore the role of MUI in the low code space and help bring the early prototype to a usable product.</p>
```

----------------------------------------

TITLE: Configuring Robots.txt Crawler Access - Plain Text
DESCRIPTION: Specifies permissions for all user agents in robots.txt format, allowing full site access. The file contains a custom verification token as a comment and uses standard directives ('User-agent', 'Allow') recognized by web crawlers. No dependencies or parameters are required; the content should be placed at the root of the public directory to be recognized by search engines.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/public/robots.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
# Algolia-Crawler-Verif: 98C49CAFF7AEED76\n\nUser-agent: *\nAllow: /
```

----------------------------------------

TITLE: Displaying Supported Material-UI Versions in Markdown
DESCRIPTION: This markdown table shows the different versions of Material-UI, their release dates, and current support status for security updates. It uses checkmarks and x marks to indicate support status.
SOURCE: https://github.com/mui/material-ui/blob/master/SECURITY.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
| Material UI version | Release    | Supported                            |
| ------------------: | :--------- | :----------------------------------- |
|              ^6.0.0 | 2024-08-26 | :white_check_mark: Stable major      |
|              ^5.0.0 | 2021-09-16 | :white_check_mark: Long-term support |
|              ^4.0.0 | 2019-06-23 | :x:                                  |
|              ^3.0.0 | 2018-08-27 | :x:                                  |
|              ^2.0.0 | /          | :x:                                  |
|              ^1.0.0 | 2018-06-18 | :x:                                  |
|             <=1.0.0 | 2014-10-05 | :x:                                  |
```

----------------------------------------

TITLE: Defining Description Paragraph using HTML
DESCRIPTION: This HTML snippet uses a paragraph tag (`<p>`) assigned the CSS class `description`. Its purpose is to display the main introductory sentence describing the Developer Advocate role, likely styled distinctly based on the 'description' class within the webpage's CSS.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/careers/developer-advocate.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<p class="description">You will strategize and implement educational initiatives from end to end to help developers build better UIs, faster.</p>
```

----------------------------------------

TITLE: Updating MenuItem primaryText to children in Material UI v1.0.0
DESCRIPTION: This codemod transforms MenuItem components by moving the primaryText prop value to become the component's children, which aligns with Material UI v1.0.0's API changes.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_128

LANGUAGE: diff
CODE:
```
-<MenuItem primaryText="Profile" />
-<MenuItem primaryText={"Profile" + "!"} />
+<MenuItem>Profile</MenuItem>
+<MenuItem>{"Profile" + "!"}</MenuItem>
```

----------------------------------------

TITLE: Creating DynamoDB Table with Provisioned Throughput
DESCRIPTION: AWS CLI command to create a DynamoDB table with provisioned throughput for storing feedback data. The table uses 'id' as partition key and 'page' as sort key.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/feedback/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
aws dynamodb create-table --profile claudia --region us-east-1 \
  --attribute-definitions AttributeName=id,AttributeType=S AttributeName=page,AttributeType=S \
  --key-schema AttributeName=id,KeyType=HASH AttributeName=page,KeyType=RANGE \
  --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=1 \
  --query TableDescription.TableArn --output text \
  --table-name feedback-dev
```

----------------------------------------

TITLE: Importing DefaultTheme Component in React
DESCRIPTION: A demo component reference used to display the theme structure viewer. The component is configured to hide the toolbar and display with an inline background.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/default-theme/default-theme.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
{"demo": "DefaultTheme.js", "hideToolbar": true, "bg": "inline"}
```

----------------------------------------

TITLE: Updating SVG icon imports for Material UI v1.0.0
DESCRIPTION: This codemod updates SVG icon import paths to use the new @material-ui/icons package structure in v1.0.0.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_126

LANGUAGE: diff
CODE:
```
-import AccessAlarmIcon from 'material-ui/svg-icons/device/AccessAlarm';
-import ThreeDRotation from 'material-ui/svg-icons/action/ThreeDRotation';
+import AccessAlarmIcon from '@material-ui/icons/AccessAlarm';
+import ThreeDRotation from '@material-ui/icons/ThreeDRotation';
```

----------------------------------------

TITLE: Demonstrating Original Import Format in Material-UI Build Output
DESCRIPTION: Example showing the current import format in Material-UI's build output before applying the plugin. These imports follow Node.js resolution which allows omitting file extensions.
SOURCE: https://github.com/mui/material-ui/blob/master/packages-internal/babel-plugin-resolve-imports/README.md#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
// packages/mui-material/build/index.js
export * from './Accordion';

// packages/mui-material/build/Breadcrumbs/BreadcrumbCollapsed.js
import MoreHorizIcon from '../internal/svg-icons/MoreHoriz';
```

----------------------------------------

TITLE: Creating Warning Callout Block - Markup
DESCRIPTION: Illustrates warning callout blocks in markdown using ':::warning' syntax, intended to caution users and highlight issues to avoid. Markup includes emphasized, bold, and code-formatted elements, as well as links. Requires a documentation processor that interprets this container style. Designed for static content with no additional dependencies.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/callouts.md#2025-04-22_snippet_2

LANGUAGE: markup
CODE:
```
:::warning\nThis is a warning callout.\nIt says, \"Be careful! Keep this detail in mind to avoid potential issues.\"\n\n- emphasised: **bold text**\n- some code `<div/>`\n- a [link](#link).\n:::
```

----------------------------------------

TITLE: Embedding Material-UI ErrorDecoder Demo Component
DESCRIPTION: This configuration directive is used within the Material-UI documentation system to dynamically embed a React component demo. It specifies the path to the component (`pages/production-error/ErrorDecoder.js`), hides the standard demo toolbar (`hideToolbar: true`), and sets an inline background (`bg: \"inline\"`). The referenced component (`ErrorDecoder.js`) is intended to help users decode minified production error messages generated by Material-UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/src/pages/production-error/index.md#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{{"demo": "pages/production-error/ErrorDecoder.js", "hideToolbar": true, "bg": "inline"}}
```

----------------------------------------

TITLE: Demonstrating Proper GitHub Issue Title Format in Markdown
DESCRIPTION: This snippet illustrates the correct and incorrect ways to format GitHub issue titles for Joy UI components. It emphasizes the importance of including the component name and providing a clear, succinct description.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/support/support.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
- ❌ _"It doesn't work"_
- ✅ _"[button] Add support for {{new feature}}"_
```

----------------------------------------

TITLE: Updating color imports for Material UI v1.0.0
DESCRIPTION: This codemod updates color imports to match the new location and structure of Material UI color palettes in v1.0.0.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_123

LANGUAGE: diff
CODE:
```
-import { blue, teal500 } from 'material-ui/styles/colors';
+import blue from '@material-ui/core/colors/blue';
+import teal from '@material-ui/core/colors/teal';
+const teal500 = teal['500'];
```

----------------------------------------

TITLE: Running Real-world Benchmark with Bombardier
DESCRIPTION: Commands to start the benchmark server and run Bombardier to test real-world performance of the Avatar component. The test uses 100 concurrent connections over 30 seconds, measuring requests per second and latency distribution.
SOURCE: https://github.com/mui/material-ui/blob/master/benchmark/server/README.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
pnpm server:server

bombardier \
  -c 100 \
  -l \
  -d 30s \
  -m GET \
  '0.0.0.0:3001/avatar'

Statistics        Avg      Stdev        Max
  Reqs/sec       442.47      55.44     547.63
  Latency      225.64ms    17.11ms   471.31ms
  Latency Distribution
     50%   221.98ms
     75%   230.69ms
     90%   241.19ms
     95%   247.87ms
     99%   273.88ms
  HTTP codes:
    1xx - 0, 2xx - 26642, 3xx - 0, 4xx - 0, 5xx - 0
    others - 0
  Throughput:    11.61MB/s
```

----------------------------------------

TITLE: Silver/Bronze Sponsors Display HTML
DESCRIPTION: HTML code for embedding SVG object to display Silver and Bronze tier sponsors from OpenCollective.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/discover-more/backers/backers.md#2025-04-22_snippet_2

LANGUAGE: html
CODE:
```
<p style="overflow: auto;">
  <object type="image/svg+xml" data="https://opencollective.com/mui-org/tiers/silver-sponsor.svg?avatarHeight=70&width=600" style="border-radius: 10px;">Silver Sponsors</object>
</p>
```

----------------------------------------

TITLE: Adding New Demo Component Path
DESCRIPTION: Example path structure for adding new component demos to the documentation.
SOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
docs/src/pages/components/buttons/
```

----------------------------------------

TITLE: Updating material-ui to @material-ui/core imports
DESCRIPTION: Manual migration step needed when moving from pre-v1.0 to v1.0, changing import paths from 'material-ui' to '@material-ui/core'.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_122

LANGUAGE: diff
CODE:
```
-import Typography from 'material-ui/Typography';
+import Typography from '@material-ui/core/Typography';
```

----------------------------------------

TITLE: Running Pigment CSS Vite Demo App in Preview Mode
DESCRIPTION: This command uses pnpm and nx to run the Pigment CSS Vite demo app in preview mode after automatically building it.
SOURCE: https://github.com/mui/material-ui/blob/master/apps/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
pnpm nx run @app/pigment-css-vite-app:preview
```

----------------------------------------

TITLE: Updating Package Dependencies for Material UI Core
DESCRIPTION: JSON configuration showing how to update the Material UI core dependency in package.json to version 4.0.0.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
"dependencies": {
  "@material-ui/core": "^4.0.0"
}
```

----------------------------------------

TITLE: Updating ImageListItemBar CSS Classes
DESCRIPTION: CSS selector transformations for the ImageListItemBar component, replacing old nested class selectors with proper parent-child relationship selectors for position and action components.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_43

LANGUAGE: diff
CODE:
```
- .MuiImageListItemBar-titleWrapBelow
+.MuiImageListItemBar-positionBelow > .MuiImageListItemBar-titleWrap
```

----------------------------------------

TITLE: Embedding TypeScript Demo Image using Markdown
DESCRIPTION: Uses Markdown syntax to embed an image illustrating the availability of Material-UI demos in TypeScript. The syntax includes alternative text ('TypeScript demo') and the path to the image file.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/november-2019-update.md#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
![TypeScript demo](/static/blog/november-2019-update/typescript-demos.png)
```

----------------------------------------

TITLE: Pagination Round to Circular Codemod Example
DESCRIPTION: This codemod renames Pagination and PaginationItem's shape values from 'round' to 'circular' to match the API changes in Material-UI v5.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_102

LANGUAGE: diff
CODE:
```
-<Pagination shape="round" />
-<PaginationItem shape="round" />
+<Pagination shape="circular" />
+<PaginationItem shape="circular" />
```

----------------------------------------

TITLE: Rendering Material UI Showcase Component
DESCRIPTION: Component inclusion directive for the Material UI showcase module that displays example applications. Uses a custom component syntax to inject the MaterialShowcase.js module.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/discover-more/showcase/showcase.md#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{"component": "modules/components/MaterialShowcase.js"}
```

----------------------------------------

TITLE: Embedding After-State Avatar Loading Video using HTML
DESCRIPTION: Embeds a video using the HTML <video> tag to demonstrate the improved loading experience of the Material-UI Avatar component after recent enhancements. The video is configured to autoplay, loop, be muted, and play inline.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/november-2019-update.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<video autoplay muted loop playsinline width="872" height="154">
  <source src="/static/blog/november-2019-update/loading-avatar-after.mp4" type="video/mp4" />
</video>
```

----------------------------------------

TITLE: Embedding Before-State Avatar Loading Video using HTML
DESCRIPTION: Embeds a video using the HTML <video> tag to demonstrate the loading experience of the Material-UI Avatar component before recent improvements. The video is configured to autoplay, loop, be muted, and play inline.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/november-2019-update.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<video autoplay muted loop playsinline width="872" height="154">
  <source src="/static/blog/november-2019-update/loading-avatar-before.mp4" type="video/mp4" />
</video>
```

----------------------------------------

TITLE: Creating Error Callout Block - Markup
DESCRIPTION: Demonstrates an error callout using ':::error' in documentation markup, meant to signify critical warnings or failure states to users. The content supports markdown formatting such as bold text, code snippets, and hyperlinks. Usage assumes a renderer capable of understanding container directives. Used to provide non-interactive but highly visible alerts in documentation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/callouts.md#2025-04-22_snippet_3

LANGUAGE: markup
CODE:
```
:::error\nThis is an error callout.\nIt says, \"You will fail if you don't heed this dire warning.\"\n\n- emphasised: **bold text**\n- some code `<div/>`\n- a [link](#link).\n:::
```

----------------------------------------

TITLE: Creating Info Callout Block - Markup
DESCRIPTION: Defines an info callout using markdown-like markup syntax, suitable for adding emphasized informational blocks to documentation. The content includes formatted text, inline code, bolding, and links. This pattern requires a renderer or documentation framework that recognizes ':::info' syntax and renders it as a styled info callout. No explicit parameters; content is static, but format supports markdown semantics within the block.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/callouts.md#2025-04-22_snippet_0

LANGUAGE: markup
CODE:
```
:::info\nThis is an info callout.\nIt says, \"Here's a bit of extra insight to help you understand this feature.\"\n\n- emphasised: **bold text**\n- some code `<div/>`\n- a [link](#link).\n:::
```

----------------------------------------

TITLE: Embedding Header Chip Component via Custom Syntax (JSX/Custom)
DESCRIPTION: This snippet shows how a custom component, specifically '@mui/docs/ComponentLinkHeader', is embedded into the documentation using a special object-like syntax. This likely triggers the rendering of a predefined React component responsible for displaying header chips or links within the documentation page. It depends on the documentation generation system's ability to parse this syntax.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/custom-components.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
{{"component": "@mui/docs/ComponentLinkHeader"}}
```

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install project dependencies using pnpm package manager.
SOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Running the color-imports codemod
DESCRIPTION: Command to execute the codemod that updates color import paths for Material UI v1.0.0.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_124

LANGUAGE: bash
CODE:
```
npx @mui/codemod@latest v1.0.0/color-imports <path>
```

----------------------------------------

TITLE: Gold Sponsors Display HTML
DESCRIPTION: HTML code block for displaying Gold tier sponsor logos with tracking and styling attributes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/discover-more/backers/backers.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<p style="display: flex; justify-content: start; align-items: center; flex-wrap: wrap;">
  <a data-ga-event-category="sponsor" data-ga-event-action="docs-backers" data-ga-event-label="goread.io" href="https://goread.io/?utm_source=mui.com&utm_medium=referral&utm_content=backers" rel="noopener sponsored" target="_blank" class="remove-link-arrow" style="margin-right: 16px; display:flex;"><img height="26" width="23" src="https://images.opencollective.com/goread_io/eb6337d/logo/26.png" srcset="https://images.opencollective.com/goread_io/eb6337d/logo/78.png 3x" alt="goread.io" title="Goread.io: Instagram followers, likes, views, and comments." loading="lazy" style="margin-right: 6px;" />Goread.io</a>
</p>
```

----------------------------------------

TITLE: Displaying GitHub Avatar using HTML img Tag
DESCRIPTION: Embeds a GitHub user's avatar image using an HTML `<img>` tag sourced from GitHub avatars. Inline CSS styles are applied via the `style` attribute to control the maximum width (160px), remove default margins (`margin: unset`), add bottom margin (24px), and apply slightly rounded corners (2px).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q3-update.md#2025-04-22_snippet_2

LANGUAGE: html
CODE:
```
<img src="https://avatars.githubusercontent.com/u/4512430?s=320" alt="marija" style="max-width: 160px; margin: unset; margin-bottom: 24px; border-radius: 2px;" />
```

----------------------------------------

TITLE: Embedding a CodeSandbox Demo using an iframe in HTML
DESCRIPTION: Embeds an interactive CodeSandbox demo within the page using an HTML `iframe` element. This specific example showcases Base UI animation features (CSS Animation transition) discussed in the surrounding text.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/base-ui-2024-plans.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<iframe src="https://codesandbox.io/embed/3pdm56?view=preview&module=%2Fdemo.tsx&hidenavigation=1"
  style="width:100%; height: 300px; border:0; border-radius: 4px; overflow:hidden;" title="/blog/base-ui-2024-plans/" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
```

----------------------------------------

TITLE: Material UI Version Support Table
DESCRIPTION: Markdown table showing Material UI versions and their support status, including release dates and level of support provided.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/support/support.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
| Material UI version | Release    | Supported                                                          |
| ------------------: | :--------- | :----------------------------------------------------------------- |
|              ^7.0.0 | 2025-03-26 | ✅ Stable major (Continuous support)                               |
|              ^6.0.0 | 2024-08-26 | ⚠️ Long-term support (Support for security issues and regressions) |
|              ^5.0.0 | 2021-09-16 | ❌                                                                 |
|              ^4.0.0 | 2019-06-23 | ❌                                                                 |
|              ^3.0.0 | 2018-08-27 | ❌                                                                 |
|              ^2.0.0 | /          | ❌                                                                 |
|              ^1.0.0 | 2018-06-18 | ❌                                                                 |
|             <=1.0.0 | 2014-10-05 | ❌                                                                 |
```

----------------------------------------

TITLE: Identifying Dependency Issues with npm for Material UI v5 Migration
DESCRIPTION: Shows how to use npm to check for remaining v4 dependencies that might be causing style issues after migration. The example shows that @material-ui/core is still present as a dependency of @mui/x-data-grid.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/troubleshooting.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ npm ls @material-ui/core
project@0.1.0 /path/to/project
└─┬  @mui/x-data-grid@4.0.0
  └── @material-ui/core@4.12.3
```

----------------------------------------

TITLE: Diamond Sponsor Display HTML
DESCRIPTION: HTML snippet for displaying Diamond tier sponsor logos with specific styling and tracking attributes.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/discover-more/backers/backers.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<p style="display: flex; justify-content: start; align-items: center; flex-wrap: wrap; margin-top: 8px;">
  <a data-ga-event-category="sponsor" data-ga-event-action="docs-backers" data-ga-event-label="doit.com" href="https://www.doit.com/flexsave/?utm_source=mui.com&utm_medium=referral&utm_content=backers" rel="noopener sponsored" target="_blank" class="remove-link-arrow" class="remove-link-arrow" style="margin-right: 24px;"><img height="128" width="128" src="/static/sponsors/doit-square.svg" alt="doit" title="Management platform for Google Cloud and AWS" loading="lazy" /></a>
</p>
```

----------------------------------------

TITLE: Displaying Material-UI Components Demo in JavaScript
DESCRIPTION: This code snippet demonstrates how to include a demo of Material-UI components using a custom demo component. It uses specific properties to control the display of the demo, such as hiding the toolbar and setting a background.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/supported-components/supported-components.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
{"demo": "MaterialUIComponents.js", "hideToolbar": true, "bg": true}
```

----------------------------------------

TITLE: Embedding Framer X Support Image using HTML
DESCRIPTION: Embeds an image showcasing the newly added Framer X support for Material-UI using the HTML <img> tag. The 'src' attribute points to the image file, 'alt' provides text description, and 'width' sets the display width.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/november-2019-update.md#2025-04-22_snippet_2

LANGUAGE: html
CODE:
```
<img src="/static/blog/november-2019-update/framer.jpg" alt="Framer X" width="300" />
```

----------------------------------------

TITLE: Rendering Material UI Design Resources Component in Markdown
DESCRIPTION: This code snippet embeds a React component that displays Material UI design resources. It uses a custom syntax to include a JavaScript module within the Markdown file.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/design-resources/design-resources.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
{{"component": "modules/components/MaterialUIDesignResources.js"}}
```

----------------------------------------

TITLE: Minimal JSX Example for Tabbed Display (JSX)
DESCRIPTION: This snippet shows a simple `<div>Hello</div>` structure in JSX. It's intended as example code within the 'JS' tab of a `@mui/docs/HighlightedCodeWithTabs` component configuration, demonstrating how to embed code snippets within component props.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/codeblock.md#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
<div>Hello</div>
```

----------------------------------------

TITLE: Embedding Company Value Illustrations using HTML img Tag
DESCRIPTION: This HTML `img` tag embeds a specific image (`values-illustrations.png`) used to visually represent MUI's company values. It includes attributes for accessibility (alt text), image source, display dimensions, and lazy loading for performance optimization.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2023-mui-values.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<img alt=\"Custom-designed illustrations for each MUI company value.\" src=\"/static/blog/2023-mui-values/values-illustrations.png\" width=\"2400\" height=\"1000\" loading=\"lazy\" />
```

----------------------------------------

TITLE: Retrieving Feedback by ID
DESCRIPTION: cURL command to retrieve feedback data for a specific UUID from the API.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/feedback/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
curl <API-URL>/feedback/d6890562-3606-4c14-a765-da81919057d1
```

----------------------------------------

TITLE: Component Link Header Reference
DESCRIPTION: Reference to a Material-UI documentation component header.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/transfer-list/transfer-list.md#2025-04-22_snippet_2

LANGUAGE: markdown
CODE:
```
{"component": "@mui/docs/ComponentLinkHeader"}
```

----------------------------------------

TITLE: Downloading Joy UI Next.js Example - Bash
DESCRIPTION: This command sequence downloads the specific Joy UI Next.js TypeScript example directory from the MUI repository archive using curl, extracts it using tar, and then changes the current directory to the newly created project folder. Requires curl and tar to be installed.
SOURCE: https://github.com/mui/material-ui/blob/master/examples/joy-ui-nextjs-ts/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/joy-ui-nextjs-ts
cd joy-ui-nextjs-ts
```

----------------------------------------

TITLE: Configuring NPM Authentication Token
DESCRIPTION: Example of the npm authentication token configuration in .npmrc file required for publishing releases.
SOURCE: https://github.com/mui/material-ui/blob/master/scripts/README.md#2025-04-22_snippet_0

LANGUAGE: text
CODE:
```
//registry.npmjs.org/:_authToken=npm_000000000000000000000000000000000000
```

----------------------------------------

TITLE: Displaying GitHub Avatar using HTML img Tag (Instance 2)
DESCRIPTION: Embeds a different GitHub user's avatar image using an HTML `<img>` tag sourced from GitHub avatars. Inline CSS styles are applied via the `style` attribute to control the maximum width (160px), remove default margins (`margin: unset`), add bottom margin (24px), and apply slightly rounded corners (2px). Note the `alt` attribute has a potential typo ('marija') which is preserved from the original source.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q3-update.md#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<img src="https://avatars.githubusercontent.com/u/5858539?s=320" alt="marija" style="max-width: 160px; margin: unset; margin-bottom: 24px; border-radius: 2px;" />
```

----------------------------------------

TITLE: Running Local End-to-End Tests for Material-UI Docs in Bash
DESCRIPTION: Commands to start the development docs server and run end-to-end tests locally. It includes an option for running tests in headed browsers using Playwright CLI.
SOURCE: https://github.com/mui/material-ui/blob/master/test/e2e-website/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pnpm docs:dev
```

LANGUAGE: bash
CODE:
```
pnpm test:e2e-website
```

LANGUAGE: bash
CODE:
```
--headed
```

----------------------------------------

TITLE: Triggering CircleCI Bundling Workflow for Material-UI PR
DESCRIPTION: A curl command to trigger the bundling workflow in CircleCI for a specific PR. The command uses the CircleCI API to initiate a pipeline run with parameters to specifically run the bundling workflow. A personal Circle token is required as an environment variable.
SOURCE: https://github.com/mui/material-ui/blob/master/test/bundling/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
curl --request POST \
  --url https://circleci.com/api/v2/project/gh/mui/material-ui/pipeline \
  --header 'content-type: application/json' \
  --header 'Circle-Token: $CIRCLE_TOKEN' \
  --data-raw '{"branch":"pull/24289/head","parameters":{"workflow":"bundling"}}'
```

----------------------------------------

TITLE: DynamoDB On-Demand Throughput Configuration
DESCRIPTION: Configuration parameter for setting up DynamoDB with on-demand throughput instead of provisioned throughput.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/feedback/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
  --billing-mode PAY_PER_REQUEST \
```

----------------------------------------

TITLE: MUI System Properties Documentation Header
DESCRIPTION: Markdown header and description section introducing the MUI System properties API documentation.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/properties/properties.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# Properties

<p class="description">This API page lists all the custom MUI System properties, how they are linked with the theme, and which CSS properties they compute.</p>
```

----------------------------------------

TITLE: Styling Blog Text using HTML p Tag with Class
DESCRIPTION: Uses an HTML `<p>` tag with a specific CSS class (`blog-description`) to display and style a descriptive text element within the blog post. This is likely used in conjunction with a CSS stylesheet to apply specific formatting rules defined for the `blog-description` class.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q3-update.md#2025-04-22_snippet_5

LANGUAGE: html
CODE:
```
<p class="blog-description">% of download relative to react-dom</p>
```

----------------------------------------

TITLE: Benchmark Results Output
DESCRIPTION: Sample output showing performance metrics for various UI scenarios including baseline, grid systems, tables, React components, and styling solutions. Results are shown in milliseconds or percentage with margin of error.
SOURCE: https://github.com/mui/material-ui/blob/master/benchmark/browser/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
noop (baseline):
  02.53 ±00.11ms
Grid (html):
  28.34 ±01.80ms
Grid System:
  167 ±2%
Grid Material UI:
  179 ±1%
Table:
  128 ±3%
React primitives:
  54 ±1%
React components:
  58 ±1%
Styled MUI:
  94 ±1%
Styled emotion:
  96 ±1%
Styled SC:
  94 ±1%
makeStyles:
  83 ±0%
Box Baseline:
  106 ±1%
Box MUI:
  180 ±1%
Box Theme-UI:
  201 ±1%
Box Chakra-UI:
  131 ±1%
styled-components Box + @mui/system:
  184 ±3%
styled-components Box + styled-system:
  154 ±3%
```

----------------------------------------

TITLE: Building and Publishing MUI Internal Docs Utils
DESCRIPTION: Commands for building the project and publishing artifacts to npm registry. Requires pnpm package manager.
SOURCE: https://github.com/mui/material-ui/blob/master/packages-internal/docs-utils/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pnpm build
```

LANGUAGE: bash
CODE:
```
pnpm release:publish
```

----------------------------------------

TITLE: Embedding Blog Chart Image using HTML img Tag
DESCRIPTION: Displays a chart image within the blog post using an HTML `<img>` tag. The source points to a static image file located within the project's static assets. Inline CSS styles are used to set a specific width (588px) and add bottom margin (16px).
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q3-update.md#2025-04-22_snippet_4

LANGUAGE: html
CODE:
```
<img src="/static/blog/2020-q3-update/react-share.png" alt="" style="width: 588px; margin-bottom: 16px;" />
```

----------------------------------------

TITLE: Demonstrating Transformed Import Format with Extensions
DESCRIPTION: Example showing the transformed import format after applying the plugin. File extensions and directory indexes are added to comply with ESM module resolution requirements.
SOURCE: https://github.com/mui/material-ui/blob/master/packages-internal/babel-plugin-resolve-imports/README.md#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
// packages/mui-material/build/index.js
export * from './Accordion/index.js';

// packages/mui-material/build/Breadcrumbs/BreadcrumbCollapsed.js
import MoreHorizIcon from '../internal/svg-icons/MoreHoriz.js';
```

----------------------------------------

TITLE: Testing Accordion Props Codemod Locally
DESCRIPTION: Command for running a local test of the accordion-props codemod during development. This allows developers to check if the transformation is working correctly on a test file.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/CONTRIBUTING.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
node packages/mui-codemod/codemod deprecations/accordion-props packages/mui-codemod/src/deprecations/accordion-props/test-cases/theme.actual.js
```

----------------------------------------

TITLE: Creating New Feedback Entry
DESCRIPTION: cURL command to create a new feedback entry by posting JSON data to the API endpoint.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/feedback/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
curl -H "Content-Type: application/json" -X POST --data @example.json <API-URL>/feedback
```

----------------------------------------

TITLE: Building and Publishing MUI Internal Test Utils Package
DESCRIPTION: Commands for building the project and publishing the build artifacts to npm. These steps are typically part of the release process for the @mui/internal-test-utils package.
SOURCE: https://github.com/mui/material-ui/blob/master/packages-internal/test-utils/README.md#2025-04-22_snippet_0

LANGUAGE: Markdown
CODE:
```
1. Build the project: `pnpm build`
2. Publish the build artifacts to npm: `pnpm release:publish`
```

----------------------------------------

TITLE: Embedding a Material UI Button Example with CodeSandbox
DESCRIPTION: This HTML snippet uses an iframe to embed an interactive CodeSandbox example directly into the webpage. The embedded content, specified by the 'src' attribute (pointing to 'https://codesandbox.io/embed/4j7m47vlm4'), demonstrates a basic Material UI button component. The iframe itself requires no specific dependencies, but the content it loads depends on React and Material UI.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v1-is-out.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<iframe src="https://codesandbox.io/embed/4j7m47vlm4" width="100%" height="300px" frameborder=0></iframe>
```

----------------------------------------

TITLE: Material UI Figma Version Comparison Table
DESCRIPTION: Markdown table comparing features between Community and Full versions of Material UI for Figma
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/design-resources/material-ui-for-figma/material-ui-for-figma.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
|                                   | Community | Full version |
| :-------------------------------- | --------: | -----------: |
| Components without customizations |       All |          All |
| Components with customizations    |         4 |          All |
| Figma variables                   |         - |           ✅ |
```

----------------------------------------

TITLE: Embedding Tooltip Arrow Image using Markdown
DESCRIPTION: Uses Markdown syntax to embed an image showing the new arrow feature added to the Material-UI Tooltip component. The syntax includes alternative text ('Tooltip arrow') and the path to the image file.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/november-2019-update.md#2025-04-22_snippet_4

LANGUAGE: markdown
CODE:
```
![Tooltip arrow](/static/blog/november-2019-update/arrow.png)
```

----------------------------------------

TITLE: Retrieving Average Ratings
DESCRIPTION: cURL command to fetch average feedback ratings for all pages from the API.
SOURCE: https://github.com/mui/material-ui/blob/master/packages/feedback/README.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
curl <API-URL>/feedback/average
```

----------------------------------------

TITLE: Enhanced Transfer List Demo Reference
DESCRIPTION: Reference to an enhanced transfer list implementation featuring a select all/none checkbox and item counter functionality.
SOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/transfer-list/transfer-list.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
{"demo": "SelectAllTransferList.js", "bg": true}
```