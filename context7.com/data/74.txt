TITLE: Creating a Flowchart with Mermaid JavaScript
DESCRIPTION: This snippet demonstrates how to define a simple flowchart using Mermaid syntax. No external dependencies are required besides Mermaid itself; the flow goes from a 'Hard' node to 'Round', branching via a decision node to two results. Inputs are node and edge definitions, and the output is a rendered flowchart. This basic structure can be expanded for more complex workflows and is subject to Mermaid's flowchart syntax constraints.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
flowchart LR

A[Hard] -->|Text| B(Round)
B --> C{Decision}
C -->|One| D[Result 1]
C -->|Two| E[Result 2]
```

----------------------------------------

TITLE: Creating a Basic Flowchart in Mermaid
DESCRIPTION: This code snippet demonstrates creating a simple flowchart using Mermaid syntax. It defines nodes with different shapes (square, circle, rounded rectangle, rhombus) and connects them with links. Link text can also be added. No dependencies required, Mermaid library needs to be integrated.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
graph LR
    A[Square Rect] -- Link text --> B((Circle))
    A --> C(Round Rect)
    B --> D{Rhombus}
    C --> D
```

----------------------------------------

TITLE: Basic HTML Diagram Implementation
DESCRIPTION: Example of how to add a Mermaid diagram to an HTML page using a pre tag with class="mermaid" containing the graph definition.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_1

LANGUAGE: html
CODE:
```
<pre class="mermaid">
    graph LR
    A --- B
    B-->C[fa:fa-ban forbidden]
    B-->D(fa:fa-spinner);
</pre>
```

----------------------------------------

TITLE: Embedding Mermaid in Markdown
DESCRIPTION: Shows how to embed a Mermaid diagram in a Markdown document using a code block with the mermaid language identifier, which is supported by platforms like GitHub and GitLab.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/getting-started.md#_snippet_1

LANGUAGE: markdown
CODE:
```
The following code-block will be rendered as a Mermaid diagram:

```mermaid
flowchart LR
  A --> B
```
```

----------------------------------------

TITLE: API Usage for Rendering Mermaid Diagrams
DESCRIPTION: HTML and JavaScript example showing how to use Mermaid's API to render a diagram from a string definition and insert it into the DOM.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_9

LANGUAGE: html
CODE:
```
<script type="module">
  import mermaid from './mermaid.esm.mjs';
  mermaid.initialize({ startOnLoad: false });

  // Example of using the render function
  const drawDiagram = async function () {
    element = document.querySelector('#graphDiv');
    const graphDefinition = 'graph TB\na-->b';
    const { svg } = await mermaid.render('graphDiv', graphDefinition);
    element.innerHTML = svg;
  };

  await drawDiagram();
</script>
```

----------------------------------------

TITLE: Importing and Initializing Mermaid API using CDN in HTML
DESCRIPTION: This HTML snippet demonstrates how to import the Mermaid JavaScript library using a script tag with type='module' from a CDN URL. It then calls `mermaid.initialize()` with `startOnLoad: true` to automatically scan the document for '.mermaid' elements and render diagrams when the page loads.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/getting-started.md#_snippet_2

LANGUAGE: HTML
CODE:
```
<body>
  <script type="module">
    import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
    mermaid.initialize({ startOnLoad: true });
  </script>
</body>
```

----------------------------------------

TITLE: Mermaid Configuration Initialization via API
DESCRIPTION: This snippet demonstrates how to set Mermaid configuration options using the 'mermaid.initialize' method, the preferred approach. It imports Mermaid, defines configuration settings (like startOnLoad and flowchart HTML labels), and initializes Mermaid with these options. It requires the Mermaid JavaScript module and the Mermaid API documentation for options.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_17

LANGUAGE: HTML/JavaScript
CODE:
```
<script type="module">
  import mermaid from './mermaid.esm.mjs';
  let config = { startOnLoad: true, flowchart: { useMaxWidth: false, htmlLabels: true } };
  mermaid.initialize(config);
</script>
```

----------------------------------------

TITLE: Basic HTML with Embedded Mermaid Diagram
DESCRIPTION: A simple HTML example showing how to embed a Mermaid diagram definition within a pre tag with the mermaid class, which will be rendered as a diagram when the page loads.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/getting-started.md#_snippet_2

LANGUAGE: html
CODE:
```
<body>
  Here is a mermaid diagram:
  <pre class="mermaid">
        graph TD
        A[Client] --> B[Load Balancer]
        B --> C[Server01]
        B --> D[Server02]
  </pre>
</body>
```

----------------------------------------

TITLE: Complete HTML Example with Mermaid Diagram
DESCRIPTION: This is a complete HTML example which includes the Mermaid diagram definition wrapped in a `<pre>` tag with the class `mermaid`, and the necessary `<script>` tag to import and initialize Mermaid. It will render the diagram within the browser.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_2

LANGUAGE: html
CODE:
```
<!doctype html>
<html lang="en">
  <body>
    <pre class="mermaid">
  graph LR
      A --- B
      B-->C[fa:fa-ban forbidden]
      B-->D(fa:fa-spinner);
    </pre>
    <script type="module">
      import mermaid from '<CDN_URL>/mermaid@<MERMAID_VERSION>/dist/mermaid.esm.min.mjs';
    </script>
  </body>
</html>
```

----------------------------------------

TITLE: Including Mermaid Script via ESM Import
DESCRIPTION: Example of how to include the Mermaid JavaScript library in an HTML page using a script tag with ESM import.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_2

LANGUAGE: html
CODE:
```
<script type="module">
  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
</script>
```

----------------------------------------

TITLE: Embedding a Mermaid Diagram in HTML
DESCRIPTION: This HTML snippet demonstrates how to embed a Mermaid diagram within a web page using `<pre>` tags with the class `mermaid`. The Mermaid library will automatically render the diagram specified within the tags. Requires the mermaid.esm.min.mjs module via a script tag.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_1

LANGUAGE: html
CODE:
```
<pre class="mermaid">
    graph LR
    A --- B
    B-->C[fa:fa-ban forbidden]
    B-->D(fa:fa-spinner);
</pre>
```

LANGUAGE: html
CODE:
```
<script type="module">
  import mermaid from '<CDN_URL>/mermaid@<MERMAID_VERSION>/dist/mermaid.esm.min.mjs';
</script>
```

----------------------------------------

TITLE: Defining a Basic Gantt Chart in Mermaid
DESCRIPTION: This snippet demonstrates the basic syntax for creating a Gantt chart in Mermaid. It includes defining sections, tasks with dates, durations, dependencies using 'after', task IDs, and metadata tags like 'done', 'active', 'crit', and 'milestone'. It also shows how to set the date format and exclude specific periods like weekends.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_1

LANGUAGE: mermaid-example
CODE:
```
gantt
    dateFormat  YYYY-MM-DD
    title       Adding GANTT diagram functionality to mermaid
    excludes    weekends
    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week ("sunday") or "weekends", but not the word "weekdays".)

    section A section
    Completed task            :done,    des1, 2014-01-06,2014-01-08
    Active task               :active,  des2, 2014-01-09, 3d
    Future task               :         des3, after des2, 5d
    Future task2              :         des4, after des3, 5d

    section Critical tasks
    Completed task in the critical line :crit, done, 2014-01-06,24h
    Implement parser and jison          :crit, done, after des1, 2d
    Create tests for parser             :crit, active, 3d
    Future task in critical line        :crit, 5d
    Create tests for renderer           :2d
    Add to mermaid                      :until isadded
    Functionality added                 :milestone, isadded, 2014-01-25, 0d

    section Documentation
    Describe gantt syntax               :active, a1, after des1, 3d
    Add gantt diagram to demo page      :after a1  , 20h
    Add another diagram to demo page    :doc1, after a1  , 48h

    section Last section
    Describe gantt syntax               :after doc1, 3d
    Add gantt diagram to demo page      :20h
    Add another diagram to demo page    :48h
```

LANGUAGE: mermaid
CODE:
```
gantt
    dateFormat  YYYY-MM-DD
    title       Adding GANTT diagram functionality to mermaid
    excludes    weekends
    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week ("sunday") or "weekends", but not the word "weekdays".)

    section A section
    Completed task            :done,    des1, 2014-01-06,2014-01-08
    Active task               :active,  des2, 2014-01-09, 3d
    Future task               :         des3, after des2, 5d
    Future task2              :         des4, after des3, 5d

    section Critical tasks
    Completed task in the critical line :crit, done, 2014-01-06,24h
    Implement parser and jison          :crit, done, after des1, 2d
    Create tests for parser             :crit, active, 3d
    Future task in critical line        :crit, 5d
    Create tests for renderer           :2d
    Add to mermaid                      :until isadded
    Functionality added                 :milestone, isadded, 2014-01-25, 0d

    section Documentation
    Describe gantt syntax               :active, a1, after des1, 3d
    Add gantt diagram to demo page      :after a1  , 20h
    Add another diagram to demo page    :doc1, after a1  , 48h

    section Last section
    Describe gantt syntax               :after doc1, 3d
    Add gantt diagram to demo page      :20h
    Add another diagram to demo page   :48h
```

----------------------------------------

TITLE: Complete HTML Implementation with Interactive Class Diagram
DESCRIPTION: A comprehensive example showing a complete HTML implementation with an interactive class diagram that includes callbacks and URL links. Also demonstrates initialization of Mermaid with custom configuration.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_28

LANGUAGE: html
CODE:
```
<body>
  <pre class="mermaid">
    classDiagram
    Animal <|-- Duck
    Animal <|-- Fish
    Animal <|-- Zebra
    Animal : +int age
    Animal : +String gender
    Animal: +isMammal()
    Animal: +mate()
    class Duck{
      +String beakColor
      +swim()
      +quack()
      }
    class Fish{
      -int sizeInFeet
      -canEat()
      }
    class Zebra{
      +bool is_wild
      +run()
      }

      callback Duck "callback" "Tooltip"
      link Zebra "https://www.github.com" "This is a link"
  </pre>

  <script>
    const callback = function () {
      alert('A callback was triggered');
    };
    const config = {
      startOnLoad: true,
      securityLevel: 'loose',
    };
    mermaid.initialize(config);
  </script>
</body>
```

----------------------------------------

TITLE: Using Actors in Sequence Diagram Mermaid
DESCRIPTION: Illustrates how to define actors in a sequence diagram to use the actor symbol. Demonstrates how to use the actor keyword to specify actors. No dependencies. Expected output: A sequence diagram using actor symbols for Alice and Bob.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    actor Alice
    actor Bob
    Alice->>Bob: Hi Bob
    Bob->>Alice: Hi Alice
```

----------------------------------------

TITLE: Rendering Mermaid Diagrams in TypeScript
DESCRIPTION: The `render` function is used to render a Mermaid diagram. It takes an `id`, the mermaid diagram text, and an optional `svgContainingElement` as input. The function returns a Promise that resolves with a `RenderResult` object. This method is designed for direct rendering of diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_6

LANGUAGE: TypeScript
CODE:
```
render: (`id`, `text`, `svgContainingElement`?) => `Promise`<[`RenderResult`](RenderResult.md)>
```

----------------------------------------

TITLE: Full Example of Interactive Mermaid.js Diagram in HTML
DESCRIPTION: Shows a complete HTML example embedding a Mermaid diagram with interactive links and callbacks, initializing Mermaid with customized configuration and security settings.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_53

LANGUAGE: html
CODE:
```
<body>
  <pre class="mermaid">
    flowchart LR
        A-->B
        B-->C
        C-->D
        click A callback
        click B "https://www.github.com" "This is a link"
        click C call callback()
        click D href "https://www.github.com" "This is a link"
  </pre>

  <script>
    window.callback = function () {
      alert('A callback was triggered');
    };
    const config = {
      startOnLoad: true,
      flowchart: { useMaxWidth: true, htmlLabels: true, curve: 'cardinal' },
      securityLevel: 'loose',
    };
    mermaid.initialize(config);
  </script>
</body>
```

----------------------------------------

TITLE: Configuring Mermaid Using the Initialize Method
DESCRIPTION: The recommended approach for configuring Mermaid.js using the initialize method. This example shows how to set up configuration options for startOnLoad and flowchart settings using ES modules.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_15

LANGUAGE: html
CODE:
```
<script type="module">
  import mermaid from './mermaid.esm.mjs';
  let config = { startOnLoad: true, flowchart: { useMaxWidth: false, htmlLabels: true } };
  mermaid.initialize(config);
</script>
```

----------------------------------------

TITLE: Sequence Diagram Example in Mermaid
DESCRIPTION: Shows a sequence diagram depicting interactions between participants Alice, John, and Bob, including message passing, looping, and notes. Utilizes Mermaid sequence syntax for communication flows.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Alice
    participant Bob
    Alice->>John: Hello John, how are you?
    loop HealthCheck
        John->>John: Fight against hypochondria
    end
    Note right of John: Rational thoughts <br/>prevail!
    John-->>Alice: Great!
    John->>Bob: How about you?
    Bob-->>John: Jolly good!
```

----------------------------------------

TITLE: Defining a Class Diagram with Mermaid JavaScript
DESCRIPTION: This code defines a class diagram with inheritance, interfaces, member variables, and methods using Mermaid's classDiagram syntax. No extra dependencies are needed; classes and relationships are textual. Key parameters include class names, relationships (inheritance, aggregation), and member specifications. The output is a structured class diagram visual, limited to features supported by Mermaid's class diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
classDiagram
Class01 <|-- AveryLongClass : Cool
<<Interface>> Class01
Class09 --> C2 : Where am I?
Class09 --* C3
Class09 --|> Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  <<service>>
  int id
  size()
}

```

----------------------------------------

TITLE: Creating a Link with Arrow Head and Text
DESCRIPTION: This snippet demonstrates creating a link with an arrowhead and text.  It supports two equivalent syntaxes: `A-->|text|B` and `A-- text -->B`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_24

LANGUAGE: mermaid
CODE:
```
flowchart LR
    A-->|text|B
```

LANGUAGE: mermaid
CODE:
```
flowchart LR
    A-- text -->B
```

----------------------------------------

TITLE: Complete HTML Example with Mermaid Implementation
DESCRIPTION: A full HTML document example showing how to implement a Mermaid diagram with the required script import.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_3

LANGUAGE: html
CODE:
```
<!doctype html>
<html lang="en">
  <body>
    <pre class="mermaid">
  graph LR
      A --- B
      B-->C[fa:fa-ban forbidden]
      B-->D(fa:fa-spinner);
    </pre>
    <script type="module">
      import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
    </script>
  </body>
</html>
```

----------------------------------------

TITLE: Defining Entities with Attributes in Mermaid ER Diagram Syntax
DESCRIPTION: Illustrates how to define entities along with their attributes inside a Mermaid ER diagram. Each entity block specifies multiple typed attributes (e.g., string, int, float), shaping a richer ER model. This snippet showcases the addition of attributes to entities CUSTOMER, ORDER, and LINE-ITEM using Mermaid's attribute block syntax, enhancing clarity and detail of the model.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
erDiagram
    CUSTOMER ||--o{ ORDER : places
    CUSTOMER {
        string name
        string custNumber
        string sector
    }
    ORDER ||--|{ LINE-ITEM : contains
    ORDER {
        int orderNumber
        string deliveryAddress
    }
    LINE-ITEM {
        string productCode
        int quantity
        float pricePerUnit
    }
```

----------------------------------------

TITLE: Creating a Larger Flowchart with Styling in Mermaid
DESCRIPTION: This snippet demonstrates a larger flowchart with styling in Mermaid. It defines nodes with different shapes, subgraphs, and styling using `classDef`. It also shows how to add line breaks in node text and edge comments. Comments are also included for better understanding. No dependencies required, Mermaid library needs to be integrated.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
graph TB
    sq[Square shape] --> ci((Circle shape))

    subgraph A
        od>Odd shape]-- Two line<br/>edge comment --> ro
        di{Diamond with <br/> line break} -.-> ro(Rounded<br>square<br>shape)
        di==>ro2(Rounded square shape)
    end

    %% Notice that no text in shape are added here instead that is appended further down
    e --> od3>Really long text with linebreak<br>in an Odd shape]

    %% Comments after double percent signs
    e((Inner / circle<br>and some odd <br>special characters)) --> f(,.?!+-*ز)

    cyr[Cyrillic]-->cyr2((Circle shape Начало));

     classDef green fill:#9f6,stroke:#333,stroke-width:2px;
     classDef orange fill:#f96,stroke:#333,stroke-width:4px;
     class sq,e green
     class di orange
```

----------------------------------------

TITLE: Customizing Diagram Look and Theme via Configuration Metadata (mermaid)
DESCRIPTION: This snippet shows how to choose custom visual styles for Mermaid diagrams using configuration metadata in YAML frontmatter. The parameters set here include the 'look' (handDrawn) and 'theme' (neutral), affecting the flowchart's rendering style. After the configuration block, a simple left-to-right flowchart is defined. Users must use a Mermaid environment that supports the specified look and theme. Input is a mix of frontmatter configuration and flowchart definitions; output is a diagram rendered with the selected appearance.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/syntax-reference.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
---
config:
  look: handDrawn
  theme: neutral
---
flowchart LR
  A[Start] --> B{Decision}
  B -->|Yes| C[Continue]
  B -->|No| D[Stop]
```

----------------------------------------

TITLE: Visualizing Basic Git Workflow - Mermaid
DESCRIPTION: This snippet demonstrates a simple GitGraph diagram showing basic git operations: sequential commits, branching, checking out a branch, further commits, merging a branch back into main, and additional commits. No dependencies are required since this uses standard Mermaid syntax. Input consists of inline gitGraph commands following the described commit and branch patterns. The rendered output visualizes branching and merging flows commonly found in development workflows.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
---
title: Example Git diagram
---
gitGraph
   commit
   commit
   branch develop
   checkout develop
   commit
   commit
   checkout main
   merge develop
   commit
   commit
```

----------------------------------------

TITLE: Mermaid Initialization Sequence Using Mermaid Syntax
DESCRIPTION: This snippet illustrates the high-level initialization sequence of Mermaid using a sequence diagram in Mermaid syntax. It shows the site invoking the initialize method on Mermaid, followed by content loading, which triggers Mermaid's internal API initialization (mermaidAPI.init). This clarifies the order and responsibilities during the setup phase and indicates that the 'initialize' method is called only once by the site integrator to set up site-level configuration overrides.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/configuration.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
	Site->>mermaid: initialize
	Site->>mermaid: content loaded
	mermaid->>mermaidAPI: init
```

----------------------------------------

TITLE: Activating/Deactivating Actors in Mermaid
DESCRIPTION: Demonstrates how to activate and deactivate actors, visually indicating their active state. Shows both explicit activate/deactivate commands and the +/- shortcut notation. No dependencies. Expected output: A sequence diagram showing John as activated and then deactivated during message exchange.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->>John: Hello John, how are you?
    activate John
    John-->>Alice: Great!
    deactivate John
```

----------------------------------------

TITLE: Rendering a Mermaid Diagram using API
DESCRIPTION: This JavaScript code demonstrates how to render a Mermaid diagram using the API. It imports the mermaid library, initializes it with `startOnLoad: false`, defines a graph definition, and then uses `mermaid.render` to generate the SVG code.  The SVG code is then inserted into the DOM. Requires mermaid library to be imported.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_11

LANGUAGE: html
CODE:
```
<script type="module">
  import mermaid from './mermaid.esm.mjs';
  mermaid.initialize({ startOnLoad: false });

  // Example of using the render function
  const drawDiagram = async function () {
    element = document.querySelector('#graphDiv');
    const graphDefinition = 'graph TB\na-->b';
    const { svg } = await mermaid.render('graphDiv', graphDefinition);
    element.innerHTML = svg;
  };

  await drawDiagram();
</script>
```

----------------------------------------

TITLE: Creating a Basic Flowchart in Mermaid
DESCRIPTION: Shows how to create a simple flowchart using `graph LR` which specifies a Left-to-Right orientation. It demonstrates defining nodes with different shapes (default rectangle `A`, square brackets `A[Square Rect]`, double parentheses `B((Circle))`, parentheses `C(Round Rect)`, braces `D{Rhombus}`) and connecting them with labeled (`-- Link text -->`) or unlabeled (`-->`) links.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/examples.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
graph LR
    A[Square Rect] -- Link text --> B((Circle))
    A --> C(Round Rect)
    B --> D{Rhombus}
    C --> D
```

----------------------------------------

TITLE: Flowchart Diagram Example in Mermaid
DESCRIPTION: Defines a simple flowchart illustrating directional relationships between nodes A, B, C, and D using Mermaid syntax. Demonstrates basic node linkage with arrow notation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
```

----------------------------------------

TITLE: Defining a Mermaid Gantt Chart
DESCRIPTION: Illustrates the basic syntax for creating a Gantt chart in Mermaid, including setting the title, date format, axis format, tick intervals, sections, tasks, and milestones.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_24

LANGUAGE: Mermaid
CODE:
```
gantt
    title Timeline - Gantt Sampler
    dateFormat YYYY
    axisFormat %y
    %% this next line doesn't recognise 'decade' or 'year', but will silently ignore
    tickInterval 1decade

    section Issue19062
    71   :            item71, 1900, 1930
    section Issue19401
    36   :            item36, 1913, 1935
    section Issue1300
    94   :            item94, 1910, 1915
    5    :            item5,  1920, 1925
    0    : milestone, item0,  1918, 1s
    9    : vert,              1906, 1s   %% not yet official
    64   : workaround,        1923, 1s   %% custom CSS object https://github.com/mermaid-js/mermaid/issues/3250
```

----------------------------------------

TITLE: Rendering User Journey Diagram with Mermaid - Mermaid
DESCRIPTION: This snippet demonstrates how to write a user journey diagram using Mermaid syntax. It includes sections for different phases (e.g., "Go to work", "Go home"), each with tasks, numeric scores, and lists of actors involved. To use this, save the code block within Markdown files and render with tools that support Mermaid (such as GitHub, VS Code extensions, or the Mermaid Live Editor). Key parameters are the journey title, section headers, tasks (with scores and actors), and the overall indentation. No external dependencies are required beyond a Mermaid-compatible renderer.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/userJourney.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
journey
    title My working day
    section Go to work
      Make tea: 5: Me
      Go upstairs: 3: Me
      Do work: 1: Me, Cat
    section Go home
      Go downstairs: 5: Me
      Sit down: 5: Me
```

----------------------------------------

TITLE: Defining a C4 Deployment Diagram for an Internet Banking System in Mermaid
DESCRIPTION: This Mermaid code defines a C4 Deployment diagram illustrating the infrastructure and deployment environment for an Internet Banking System. It includes customer devices (mobile, computer), a data center with application servers (API, Web) and databases (primary, secondary), showing containers, relationships, and communication protocols like HTTPS and JDBC. Relationship styles are adjusted for better readability.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/c4.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
    C4Deployment
    title Deployment Diagram for Internet Banking System - Live

    Deployment_Node(mob, "Customer's mobile device", "Apple IOS or Android"){
        Container(mobile, "Mobile App", "Xamarin", "Provides a limited subset of the Internet Banking functionality to customers via their mobile device.")
    }

    Deployment_Node(comp, "Customer's computer", "Microsoft Windows or Apple macOS"){
        Deployment_Node(browser, "Web Browser", "Google Chrome, Mozilla Firefox,<br/> Apple Safari or Microsoft Edge"){
            Container(spa, "Single Page Application", "JavaScript and Angular", "Provides all of the Internet Banking functionality to customers via their web browser.")
        }
    }

    Deployment_Node(plc, "Big Bank plc", "Big Bank plc data center"){
        Deployment_Node(dn, "bigbank-api*** x8", "Ubuntu 16.04 LTS"){
            Deployment_Node(apache, "Apache Tomcat", "Apache Tomcat 8.x"){
                Container(api, "API Application", "Java and Spring MVC", "Provides Internet Banking functionality via a JSON/HTTPS API.")
            }
        }
        Deployment_Node(bb2, "bigbank-web*** x4", "Ubuntu 16.04 LTS"){
            Deployment_Node(apache2, "Apache Tomcat", "Apache Tomcat 8.x"){
                Container(web, "Web Application", "Java and Spring MVC", "Delivers the static content and the Internet Banking single page application.")
            }
        }
        Deployment_Node(bigbankdb01, "bigbank-db01", "Ubuntu 16.04 LTS"){
            Deployment_Node(oracle, "Oracle - Primary", "Oracle 12c"){
                ContainerDb(db, "Database", "Relational Database Schema", "Stores user registration information, hashed authentication credentials, access logs, etc.")
            }
        }
        Deployment_Node(bigbankdb02, "bigbank-db02", "Ubuntu 16.04 LTS") {
            Deployment_Node(oracle2, "Oracle - Secondary", "Oracle 12c") {
                ContainerDb(db2, "Database", "Relational Database Schema", "Stores user registration information, hashed authentication credentials, access logs, etc.")
            }
        }
    }

    Rel(mobile, api, "Makes API calls to", "json/HTTPS")
    Rel(spa, api, "Makes API calls to", "json/HTTPS")
    Rel_U(web, spa, "Delivers to the customer's web browser")
    Rel(api, db, "Reads from and writes to", "JDBC")
    Rel(api, db2, "Reads from and writes to", "JDBC")
    Rel_R(db, db2, "Replicates data to")

    UpdateRelStyle(spa, api, $offsetY="-40")
    UpdateRelStyle(web, spa, $offsetY="-40")
    UpdateRelStyle(api, db, $offsetY="-20", $offsetX="5")
    UpdateRelStyle(api, db2, $offsetX="-40", $offsetY="-20")
    UpdateRelStyle(db, db2, $offsetY="-10")
```

----------------------------------------

TITLE: Embedding and Initializing Multiple Diagrams via CDN in HTML
DESCRIPTION: This complete HTML example shows how to embed multiple Mermaid diagram definitions within '<pre class="mermaid">' tags and then initialize the Mermaid library imported from a CDN. The `mermaid.initialize({ startOnLoad: true })` call processes all found definitions and renders them.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/getting-started.md#_snippet_3

LANGUAGE: HTML
CODE:
```
<html>
  <body>
    Here is one mermaid diagram:
    <pre class="mermaid">
            graph TD
            A[Client] --> B[Load Balancer]
            B --> C[Server1]
            B --> D[Server2]
    </pre>

    And here is another:
    <pre class="mermaid">
            graph TD
            A[Client] -->|tcp_123| B
            B(Load Balancer)
            B -->|tcp_456| C[Server1]
            B -->|tcp_456| D[Server2]
    </pre>

    <script type="module">
      import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
      mermaid.initialize({ startOnLoad: true });
    </script>
  </body>
</html>
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Hexagon
DESCRIPTION: This snippet uses the shape keyword to define a hexagon-shaped node in a Mermaid flowchart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_28

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: hex, label: "Prepare conditional" }
```

----------------------------------------

TITLE: SVG with accessible title and description in Mermaid
DESCRIPTION: This HTML snippet shows how to include accessible titles and descriptions within an SVG element in Mermaid. It uses the `aria-labelledby` and `aria-describedby` attributes to link the SVG to the `<title>` and `<desc>` elements, which contain the accessible title and description respectively. This helps users with assistive technologies understand the diagram's purpose and content.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_1

LANGUAGE: html
CODE:
```
<svg
  aria-labelledby="chart-title-mermaid-1668725057758"
  aria-describedby="chart-desc-mermaid-1668725057758"
  xmlns="http://www.w3.org/2000/svg"
  width="100%"
  id="mermaid-1668725057758"
>
  <title id="chart-title-mermaid-1668725057758">This is the accessible title</title>
  <desc id="chart-desc-mermaid-1668725057758">This is an accessible description</desc>
</svg>
```

----------------------------------------

TITLE: Creating a New Branch in GitGraph - Mermaid
DESCRIPTION: This snippet shows how to create and immediately switch to a new branch with the 'branch' keyword followed by a name. Subsequent commits are attached to the new branch, which becomes the current context. This allows diagramming feature development or parallel work streams starting from the main branch within the Mermaid gitGraph environment.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
gitGraph
   commit
   commit
   branch develop
   commit
   commit
   commit
```

----------------------------------------

TITLE: Creating a Node with Round Edges in Mermaid Flowchart
DESCRIPTION: This snippet demonstrates how to create a node with round edges in a Mermaid flowchart. The text is enclosed in parentheses `()`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_6

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    id1(This is the text in the box)
```

----------------------------------------

TITLE: Creating a Basic Sequence Diagram in Mermaid
DESCRIPTION: This snippet shows how to create a basic sequence diagram in Mermaid. It defines participants (Alice, Bob, John) and their interactions, including synchronous and asynchronous messages. It uses `Note` to add additional information. No dependencies required, Mermaid library needs to be integrated.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice ->> Bob: Hello Bob, how are you?
    Bob-->>John: How about you John?
    Bob--x Alice: I am good thanks!
    Bob-x John: I am good thanks!
    Note right of John: Bob thinks a long<br/>long time, so long<br/>that the text does<br/>not fit on a row.

    Bob-->Alice: Checking with John...
    Alice->John: Yes... John, how are you?
```

----------------------------------------

TITLE: Stacked Activations in Mermaid
DESCRIPTION: Shows how activations can be stacked for the same actor.  This is useful for representing nested or concurrent activities. No dependencies. Expected output: A sequence diagram showing John with stacked activations when receiving multiple messages from Alice.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_8

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->>+John: Hello John, how are you?
    Alice->>+John: John, can you hear me?
    John-->>-Alice: Hi Alice, I can hear you!
    John-->>-Alice: I feel great!
```

----------------------------------------

TITLE: Defining a Basic Gantt Diagram in Mermaid
DESCRIPTION: This snippet demonstrates the basic structure of a Mermaid Gantt diagram. It includes setting a title, defining the date format, creating sections, and listing tasks with their identifiers, start dates or dependencies, and durations.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_0

LANGUAGE: mermaid-example
CODE:
```
gantt
    title A Gantt Diagram
    dateFormat YYYY-MM-DD
    section Section
        A task          :a1, 2014-01-01, 30d
        Another task    :after a1, 20d
    section Another
        Task in Another :2014-01-12, 12d
        another task    :24d
```

LANGUAGE: mermaid
CODE:
```
gantt
    title A Gantt Diagram
    dateFormat YYYY-MM-DD
    section Section
        A task          :a1, 2014-01-01, 30d
        Another task    :after a1, 20d
    section Another
        Task in Another :2014-01-12, 12d
        another task    :24d
```

----------------------------------------

TITLE: Basic Gantt Diagram in Mermaid
DESCRIPTION: This snippet demonstrates the basic structure of a Gantt diagram in Mermaid. It defines the chart title, date format, and includes two sections with multiple tasks, showing how to specify task IDs, start dates, durations, and dependencies.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_0

LANGUAGE: Mermaid
CODE:
```
gantt
    title A Gantt Diagram
    dateFormat YYYY-MM-DD
    section Section
        A task          :a1, 2014-01-01, 30d
        Another task    :after a1, 20d
    section Another
        Task in Another :2014-01-12, 12d
        another task    :24d
```

----------------------------------------

TITLE: Initializing Mermaid JavaScript API with CDN
DESCRIPTION: Shows how to initialize the Mermaid JavaScript API by importing it from a CDN and configuring it to automatically render diagrams on page load.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/getting-started.md#_snippet_3

LANGUAGE: html
CODE:
```
<body>
  <script type="module">
    import mermaid from '<CDN_URL>/mermaid@<MERMAID_VERSION>/dist/mermaid.esm.min.mjs';
    mermaid.initialize({ startOnLoad: true });
  </script>
</body>
```

----------------------------------------

TITLE: Basic Sequence Diagram Example Mermaid
DESCRIPTION: Illustrates a basic sequence diagram with two participants, Alice and John, exchanging messages.  The diagram shows a simple greeting and response. No specific dependencies required, this is the fundamental syntax. Expected output: a sequence diagram visually representing the interactions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->>John: Hello John, how are you?
    John-->>Alice: Great!
    Alice-)John: See you later!
```

----------------------------------------

TITLE: Defining a Flowchart in Mermaid Syntax
DESCRIPTION: This snippet demonstrates the basic syntax for defining a simple flowchart using the Mermaid language. It shows nodes with different shapes (rectangle, cylinder, decision) and directional arrows between them, illustrating the flow of a diagram editing process.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/getting-started.md#_snippet_0

LANGUAGE: Mermaid
CODE:
```
graph TD
    A[Enter Chart Definition] --> B(Preview)
    B --> C{decide}
    C --> D[Keep]
    C --> E[Edit Definition]
    E --> B
    D --> F[Save Image and Code]
    F --> B
```

----------------------------------------

TITLE: Setting Flowchart Direction Left to Right (LR) in Mermaid
DESCRIPTION: This snippet demonstrates how to set the direction of a Mermaid flowchart to left-to-right using the `LR` keyword. It creates a simple flowchart with two nodes connected by an edge.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_5

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    Start --> Stop
```

----------------------------------------

TITLE: Sequence Diagram Example in Mermaid
DESCRIPTION: Illustrates a sequence diagram with interactions between Alice, John, and Bob, including a health check loop and notes. This demonstrates Mermaid's ability to visualize communication and process flows in sequence.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md#_snippet_1

LANGUAGE: Markdown
CODE:
```
sequenceDiagram
Alice->>John: Hello John, how are you?
loop HealthCheck
    John->>John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John-->>Alice: Great!
John->>Bob: How about you?
Bob-->>John: Jolly good!
```

LANGUAGE: Markdown
CODE:
```
sequenceDiagram
Alice->>John: Hello John, how are you?
loop HealthCheck
    John->>John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John-->>Alice: Great!
John->>Bob: How about you?
Bob-->>John: Jolly good!
```

----------------------------------------

TITLE: Installing Mermaid via NPM/Yarn/PNPM
DESCRIPTION: These commands install the Mermaid.js library using Node Package Manager (npm), Yarn, or pnpm. The commands add Mermaid as a dependency to your project, enabling you to use it in your JavaScript applications.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_0

LANGUAGE: bash
CODE:
```
# NPM
npm install mermaid
# Yarn
yarn add mermaid
# PNPM
pnpm add mermaid
```

----------------------------------------

TITLE: Current Syntax State Diagram
DESCRIPTION: Defines the current standard syntax for Mermaid state diagrams with the 'stateDiagram' directive. It is functionally equivalent to previous examples and showcases current best practices.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
stateDiagram
    [*] --> Still
    Still --> [*]

    Still --> Moving
    Moving --> Still
    Moving --> Crash
    Crash --> [*]
```

----------------------------------------

TITLE: Embedding Mermaid Diagram Definition in HTML
DESCRIPTION: This HTML snippet shows how to embed a Mermaid diagram definition directly within an HTML document using a `<pre>` tag with the class 'mermaid'. This tag serves as a container for the Mermaid code that will be rendered by the Mermaid JavaScript library.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/getting-started.md#_snippet_1

LANGUAGE: HTML
CODE:
```
<body>
  Here is a mermaid diagram:
  <pre class="mermaid">
        graph TD
        A[Client] --> B[Load Balancer]
        B --> C[Server01]
        B --> D[Server02]
  </pre>
</body>
```

----------------------------------------

TITLE: Creating a Basic Sequence Diagram in Mermaid
DESCRIPTION: Illustrates the syntax for a basic sequence diagram using `sequenceDiagram`. It shows implicit participant declaration, different arrow types for messages (`->>`, `-->>`, `--x`, `-x` representing solid/dotted lines and open/cross arrowheads for synchronous/asynchronous messages), and adding notes positioned relative to participants (`Note right of John`).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/examples.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice ->> Bob: Hello Bob, how are you?
    Bob-->>John: How about you John?
    Bob--x Alice: I am good thanks!
    Bob-x John: I am good thanks!
    Note right of John: Bob thinks a long<br/>long time, so long<br/>that the text does<br/>not fit on a row.

    Bob-->Alice: Checking with John...
    Alice->John: Yes... John, how are you?
```

----------------------------------------

TITLE: Adding Text on a Link
DESCRIPTION: This snippet shows how to add text to a link in a flowchart. It supports two equivalent syntaxes: `A-- This is the text! ---B` and `A---|This is the text|B`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_23

LANGUAGE: mermaid
CODE:
```
flowchart LR
    A-- This is the text! ---B
```

LANGUAGE: mermaid
CODE:
```
flowchart LR
    A---|This is the text|B
```

----------------------------------------

TITLE: Creating a Styled Flowchart with Subgraphs in Mermaid
DESCRIPTION: Presents a more complex flowchart (`graph TB` for Top-to-Bottom orientation) including subgraphs (`subgraph A ... end`), various node shapes (square `sq[]`, circle `ci(())`, odd `od>]`, diamond `di{}`, rounded `ro()`), different edge types (`-->`, `-.->`, `==>`) with labels, multiline text in nodes using `<br>`, comments (`%%`), and applying custom CSS styles using `classDef` to define classes (e.g., `green`, `orange`) and `class` to assign them to specific nodes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/examples.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
graph TB
    sq[Square shape] --> ci((Circle shape))

    subgraph A
        od>Odd shape]-- Two line<br/>edge comment --> ro
        di{Diamond with <br/> line break} -.-> ro(Rounded<br>square<br>shape)
        di==>ro2(Rounded square shape)
    end

    %% Notice that no text in shape are added here instead that is appended further down
    e --> od3>Really long text with linebreak<br>in an Odd shape]

    %% Comments after double percent signs
    e((Inner / circle<br>and some odd <br>special characters)) --> f(,.?!+-*ز)

    cyr[Cyrillic]-->cyr2((Circle shape Начало));

     classDef green fill:#9f6,stroke:#333,stroke-width:2px;
     classDef orange fill:#f96,stroke:#333,stroke-width:4px;
     class sq,e green
     class di orange
```

----------------------------------------

TITLE: Complete HTML Example with Multiple Mermaid Diagrams
DESCRIPTION: A full HTML example showing how to include multiple Mermaid diagrams in a single page and initialize the Mermaid API to render them all at once.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/getting-started.md#_snippet_4

LANGUAGE: html
CODE:
```
<html>
  <body>
    Here is one mermaid diagram:
    <pre class="mermaid">
            graph TD
            A[Client] --> B[Load Balancer]
            B --> C[Server1]
            B --> D[Server2]
    </pre>

    And here is another:
    <pre class="mermaid">
            graph TD
            A[Client] -->|tcp_123| B
            B(Load Balancer)
            B -->|tcp_456| C[Server1]
            B -->|tcp_456| D[Server2]
    </pre>

    <script type="module">
      import mermaid from '<CDN_URL>/mermaid@<MERMAID_VERSION>/dist/mermaid.esm.min.mjs';
      mermaid.initialize({ startOnLoad: true });
    </script>
  </body>
</html>
```

----------------------------------------

TITLE: Comments in Mermaid Flowcharts
DESCRIPTION: Shows how to insert comments within Mermaid flowcharts using lines starting with '%%', which are ignored by the parser but useful for documentation within the diagram code.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_54

LANGUAGE: mermaid
CODE:
```
flowchart LR
%% this is a comment A -- text --> B{node}
   A -- text --> B -- text2 --> C
```

----------------------------------------

TITLE: Creating a Default Node in Mermaid Flowchart
DESCRIPTION: This snippet demonstrates how to create a basic node with a default shape in a Mermaid flowchart. The `id` is used as both the identifier and the displayed text within the node.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_0

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    id
```

----------------------------------------

TITLE: Mermaid Graph Syntax Validation Function
DESCRIPTION: This method uses 'mermaid.parse' to validate Mermaid graph definitions without rendering. It returns an object indicating the diagram type for valid syntax or false (when suppressErrors is true) or throws an error for invalid diagrams. Custom error handling can be implemented by overriding 'mermaid.parseError'. It requires the 'mermaid' library for syntax validation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
mermaid.parseError = function (err, hash) {
  displayErrorInGui(err);
};

const textFieldUpdated = async function () {
  const textStr = getTextFromFormField('code');

  if (await mermaid.parse(textStr)) {
    reRender(textStr);
  }
};

bindEventHandler('change', 'code', textFieldUpdated);
```

----------------------------------------

TITLE: Loops in Sequence Diagram Mermaid
DESCRIPTION: Shows how to express loops in a sequence diagram.  This is done using the loop keyword. No dependencies. Expected output: A sequence diagram with a loop labeled "Every minute".
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_13

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->John: Hello John, how are you?
    loop Every minute
        John-->Alice: Great!
    end
```

----------------------------------------

TITLE: Rendering a Class Diagram
DESCRIPTION: This snippet demonstrates a basic class diagram using Mermaid syntax. It illustrates classes, relationships (inheritance, association), attributes, and methods.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
--- 
title: Animal example
---
classDiagram
    note "From Duck till Zebra"
    Animal <|-- Duck
    note for Duck "can fly\ncan swim\ncan dive\ncan help in debugging"
    Animal <|-- Fish
    Animal <|-- Zebra
    Animal : +int age
    Animal : +String gender
    Animal: +isMammal()
    Animal: +mate()
    class Duck{
        +String beakColor
        +swim()
        +quack()
    }
    class Fish{
        -int sizeInFeet
        -canEat()
    }
    class Zebra{
        +bool is_wild
        +run()
    }
```

----------------------------------------

TITLE: Binding Functions After Mermaid SVG Rendering in JavaScript
DESCRIPTION: Demonstrates usage of the optional bindFunctions method from the RenderResult interface to attach event listeners to SVG elements after rendering a Mermaid diagram. The snippet shows extracting the SVG string and binding functions from the render call, inserting the SVG into a container element in the DOM, and conditionally invoking bindFunctions if it exists. This ensures interactive behaviors can be attached after SVG insertion.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/RenderResult.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const { svg, bindFunctions } = await mermaid.render('id1', 'graph TD;A-->B');
div.innerHTML = svg;
bindFunctions?.(div); // To call bindFunctions only if it's present.
```

----------------------------------------

TITLE: Creating a Sequence Diagram with Mermaid JavaScript
DESCRIPTION: This snippet provides Mermaid syntax for a sequence diagram, modeling interactions between 'Alice', 'John', and 'Bob'. It uses features like message arrows, loops, and notes. The only prerequisite is Mermaid; all elements are self-contained. The input is a series of participant-interaction definitions, delivering an ordered communication diagram as output.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
Alice->>John: Hello John, how are you?
loop HealthCheck
    John->>John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John-->>Alice: Great!
John->>Bob: How about you?
Bob-->>John: Jolly good!
```

----------------------------------------

TITLE: Creating a Simple Flowchart in Mermaid
DESCRIPTION: A basic example of a Mermaid flowchart diagram showing a decision-making process with nodes for entering chart definition, previewing, deciding, and saving.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/getting-started.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
graph TD
    A[Enter Chart Definition] --> B(Preview)
    B --> C{decide}
    C --> D[Keep]
    C --> E[Edit Definition]
    E --> B
    D --> F[Save Image and Code]
    F --> B
```

----------------------------------------

TITLE: Creating Flowcharts with Mermaid Syntax in mermaid
DESCRIPTION: This snippet demonstrates how to create a basic flowchart using Mermaid's graph syntax. It defines nodes and directed edges representing transitions between nodes. There are no external dependencies beyond Mermaid itself. The diagram starts from node A branching to B and C, which both lead to D. Input is the Mermaid graph syntax string and output is a rendered flowchart visualization. This example illustrates simple node linkage for flow visualization.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
```

----------------------------------------

TITLE: Defining Participants Explicitly - Mermaid
DESCRIPTION: Shows how to explicitly define participants using the `participant` keyword. This allows controlling the order in which participants appear in the diagram, regardless of their first message.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Alice
    participant Bob
    Bob->>Alice: Hi Alice
    Alice->>Bob: Hi Bob
```

----------------------------------------

TITLE: Creating a Cylindrical Node in Mermaid Flowchart
DESCRIPTION: This snippet demonstrates how to create a cylindrical node in a Mermaid flowchart, commonly used to represent databases. The text is enclosed in parentheses `()`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_9

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    id1[(Database)]
```

----------------------------------------

TITLE: Defining Entities with Attributes and Relationships Using Mermaid ER Diagram Syntax
DESCRIPTION: Defines detailed entity attribute blocks for CAR and PERSON entities along with their relationship to NAMED-DRIVER. The snippet shows how to declare typed attributes inside curly braces, with attributes like registrationNumber, make, model for CAR, and firstName, lastName, age for PERSON. This enhances diagram clarity by embedding entity details alongside relationship declarations.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
erDiagram
    CAR ||--o{ NAMED-DRIVER : allows
    CAR {
        string registrationNumber
        string make
        string model
    }
    PERSON ||--o{ NAMED-DRIVER : is
    PERSON {
        string firstName
        string lastName
        int age
    }
```

----------------------------------------

TITLE: State Diagram with Title and Description
DESCRIPTION: This mermaid.js snippet includes a state diagram with an accessible title and description, defined via the `accTitle` and `accDescr` keywords for accessibility.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_13

LANGUAGE: markdown
CODE:
```
```mermaid-example
   stateDiagram
      accTitle: My State Diagram
      accDescr: My State Diagram Description

       s1 --> s2
```
```

----------------------------------------

TITLE: HTML with Local Mermaid File Reference
DESCRIPTION: An HTML example showing how to reference a local Mermaid JavaScript file instead of using a CDN, and using it to render multiple diagrams with different styles.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/getting-started.md#_snippet_5

LANGUAGE: html
CODE:
```
<html lang="en">
  <head>
    <meta charset="utf-8" />
  </head>
  <body>
    <pre class="mermaid">
            graph LR
            A --- B
            B-->C[fa:fa-ban forbidden]
            B-->D(fa:fa-spinner);
    </pre>
    <pre class="mermaid">
            graph TD
            A[Client] --> B[Load Balancer]
            B --> C[Server1]
            B --> D[Server2]
    </pre>
    <script type="module">
      import mermaid from 'The/Path/In/Your/Package/mermaid.esm.mjs';
      mermaid.initialize({ startOnLoad: true });
    </script>
  </body>
</html>
```

----------------------------------------

TITLE: Entity Relationship Diagram with Title and Description
DESCRIPTION: This mermaid.js snippet demonstrates an entity relationship diagram with an accessible title and description.  It uses the `accTitle` and `accDescr` keywords to specify the title and description respectively.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_7

LANGUAGE: markdown
CODE:
```
```mermaid-example
   erDiagram
      accTitle: My Entity Relationship Diagram
      accDescr: My Entity Relationship Diagram Description

    CUSTOMER ||--o{ ORDER : places
    ORDER ||--|{ LINE-ITEM : contains
    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses

```
```

----------------------------------------

TITLE: Declaring Directives with Initialization
DESCRIPTION: This code snippet demonstrates how to declare directives to set global and diagram-specific configurations in Mermaid. It uses the 'init' directive to define configurations such as theme, fontFamily, logLevel, flowchart settings (htmlLabels, curve), and sequence diagram settings (mirrorActors).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_0

LANGUAGE: JSON
CODE:
```
%%{
  init: {
    "theme": "dark",
    "fontFamily": "monospace",
    "logLevel": "info",
    "flowchart": {
      "htmlLabels": true,
      "curve": "linear"
    },
    "sequence": {
      "mirrorActors": true
    }
  }
}%%
```

----------------------------------------

TITLE: Defining Critical Regions with Options in Mermaid Sequence Diagrams
DESCRIPTION: Explains how to use the `critical`, `option`, and `end` keywords in Mermaid to model atomic actions with conditional paths based on different circumstances. This example shows establishing a DB connection, with options for handling network timeouts or rejected credentials.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_17

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    critical Establish a connection to the DB
        Service-->DB: connect
    option Network timeout
        Service-->Service: Log error
    option Credentials rejected
        Service-->Service: Log different error
    end
```

----------------------------------------

TITLE: State Diagram Example in Mermaid
DESCRIPTION: Depicts a simple state machine with states like Moving, Crash, Moving, and an initial and terminal state. Demonstrates Mermaid's capacity for modeling state transitions in systems.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md#_snippet_4

LANGUAGE: Markdown
CODE:
```
stateDiagram-v2
[*] --> Still
Still --> [*]
Still --> Moving
Moving --> Still
Moving --> Crash
Crash --> [*]
```

LANGUAGE: Markdown
CODE:
```
stateDiagram-v2
[*] --> Still
Still --> [*]
Still --> Moving
Moving --> Still
Moving --> Crash
Crash --> [*]
```

----------------------------------------

TITLE: Modeling Business Process Flow with Mermaid Block Diagrams
DESCRIPTION: Represents a business process flow with decision points and multiple stages using Mermaid block diagrams. Uses different node shapes, labeled arrows, and styled endpoints to visualize a complete workflow with decision paths.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_8

LANGUAGE: mermaid
CODE:
```
block-beta
  columns 3
  Start(("Start")) space:2
  down<[" "]>(down) space:2
  Decision{{"Make Decision"}} right<["Yes"]>(right) Process1["Process A"]
  downAgain<["No"]>(down) space r3<["Done"]>(down)
  Process2["Process B"] r2<["Done"]>(right) End(("End"))

  style Start fill:#969;
  style End fill:#696;
```

----------------------------------------

TITLE: Adding Simple Labels to Relationships - Mermaid-Example
DESCRIPTION: Provides labeled Mermaid example code for class relationships with annotations explaining their semantics in UML ('implements', 'composition', 'aggregation'). Intended for documentation and visual communication, it requires only Mermaid support and outputs a labelled class diagram for educational or design purposes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
classDiagram
classA <|-- classB : implements
classC *-- classD : composition
classE o-- classF : aggregation

```

----------------------------------------

TITLE: Defining a Bank Account Class
DESCRIPTION: This snippet defines a `BankAccount` class with attributes and methods (deposit, withdrawal), showing a class definition with member details using a simple colon syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
--- 
title: Bank example
---
classDiagram
    class BankAccount
    BankAccount : +String owner
    BankAccount : +Bigdecimal balance
    BankAccount : +deposit(amount)
    BankAccount : +withdrawal(amount)
```

----------------------------------------

TITLE: Creating an Open Link
DESCRIPTION: This snippet demonstrates the creation of an open link (a line without arrowheads) between two nodes in a flowchart.  It uses the `---` syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_22

LANGUAGE: mermaid
CODE:
```
flowchart LR
    A --- B
```

----------------------------------------

TITLE: Example State Diagram (mermaid-example syntax)
DESCRIPTION: Illustrates a simple state diagram with states 'Still', 'Moving', and 'Crash', including transitions between them. Uses the mermaid-example syntax which includes a front matter section for title and the stateDiagram-v2 directive.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
---
title: Simple sample
---
stateDiagram-v2
    [*] --> Still
    Still --> [*]

    Still --> Moving
    Moving --> Still
    Moving --> Crash
    Crash --> [*]
```

----------------------------------------

TITLE: Flowchart Diagram Example in Mermaid
DESCRIPTION: Sample Mermaid code demonstrating how to create a flowchart with nodes and directional edges, illustrating decision points and process flow. Dependencies include Mermaid syntax reference and a Mermaid live editor for visualization.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md#_snippet_0

LANGUAGE: Markdown
CODE:
```
flowchart LR
A[Hard] -->|Text| B(Round)
B --> C{Decision}
C -->|One| D[Result 1]
C -->|Two| E[Result 2]
```

LANGUAGE: Markdown
CODE:
```
flowchart LR
A[Hard] -->|Text| B(Round)
B --> C{Decision}
C -->|One| D[Result 1]
C -->|Two| E[Result 2]
```

----------------------------------------

TITLE: Click Event Binding - JavaScript
DESCRIPTION: This JavaScript snippet defines a callback function that can be triggered when a node in a Mermaid flowchart is clicked.  The callback function receives the node ID as a parameter and displays an alert message. This requires setting `securityLevel='loose'`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_98

LANGUAGE: JavaScript
CODE:
```
<script>
  window.callback = function () {
    alert('A callback was triggered');
  };
</script>
```

----------------------------------------

TITLE: Retrieving Current Mermaid Configuration with getConfig()
DESCRIPTION: The `getConfig()` function retrieves the active configuration object (`MermaidConfig`) used by Mermaid.js. It takes no arguments and returns the current configuration. It's recommended to call this function once and store the result in a variable rather than calling it repeatedly for performance reasons.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/config/functions/getConfig.md#_snippet_0

LANGUAGE: typescript
CODE:
```
getConfig(): MermaidConfig
```

----------------------------------------

TITLE: Styling Mermaid Gantt Chart with CSS
DESCRIPTION: Example CSS rules targeting classes used by Mermaid Gantt charts, such as `.grid .tick`, `.taskText`, and `#tag`, to customize appearance like stroke, fill, and positioning.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_15

LANGUAGE: CSS
CODE:
```
.grid .tick {
  stroke: lightgrey;
  opacity: 0.3;
  shape-rendering: crispEdges;
}
.grid path {
  stroke-width: 0;
}

#tag {
  color: white;
  background: #fa283d;
  width: 150px;
  position: absolute;
  display: none;
  padding: 3px 6px;
  margin-left: -80px;
  font-size: 11px;
}

#tag:before {
  border: solid transparent;
  content: ' ';
  height: 0;
  left: 50%;
  margin-left: -5px;
  position: absolute;
  width: 0;
  border-width: 10px;
  border-bottom-color: #fa283d;
  top: -20px;
}
.taskText {
  fill: white;
  text-anchor: middle;
}
.taskTextOutsideRight {
  fill: black;
  text-anchor: start;
}
.taskTextOutsideLeft {
  fill: black;
  text-anchor: end;
}
```

----------------------------------------

TITLE: Applying Frontmatter Configuration to Mermaid Diagrams in YAML
DESCRIPTION: This snippet demonstrates how Mermaid diagram authors can override the default rendering configuration by specifying a YAML frontmatter block at the top of a diagram. The frontmatter includes a title and a 'config' section where themes and theme variables like primaryColor can be customized. It requires Mermaid's frontmatter functionality enabled since v10.5.0, and adjusts how diagrams appear without changing global site configuration.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/configuration.md#_snippet_0

LANGUAGE: yaml
CODE:
```
---
title: Hello Title
config:
  theme: base
  themeVariables:
    primaryColor: "#00ff00"
---
flowchart
	Hello --> World
```

----------------------------------------

TITLE: Complete Example with Interactive Links in HTML
DESCRIPTION: This is a full, working example of a Mermaid class diagram embedded in an HTML page with interactive links and a JavaScript callback. The example includes Mermaid.js initialization and demonstrates the integration of the diagram with JavaScript.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_24

LANGUAGE: html
CODE:
```
<body>
  <pre class="mermaid">
    classDiagram
    Animal <|-- Duck
    Animal <|-- Fish
    Animal <|-- Zebra
    Animal : +int age
    Animal : +String gender
    Animal: +isMammal()
    Animal: +mate()
    class Duck{
      +String beakColor
      +swim()
      +quack()
      }
    class Fish{
      -int sizeInFeet
      -canEat()
      }
    class Zebra{
      +bool is_wild
      +run()
      }

      callback Duck "callback" "Tooltip"
      link Zebra "https://www.github.com" "This is a link"
  </pre>

  <script>
    const callback = function () {
      alert('A callback was triggered');
    };
    const config = {
      startOnLoad: true,
      securityLevel: 'loose',
    };
    mermaid.initialize(config);
  </script>
</body>
```

----------------------------------------

TITLE: State Declaration: stateId
DESCRIPTION: This snippet defines a state using only an identifier (id).  This is the simplest way to define a state in a state diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_2

LANGUAGE: mermaid-example
CODE:
```
stateDiagram-v2
    stateId
```

----------------------------------------

TITLE: CSS Class Example - HTML/Mermaid
DESCRIPTION: This example demonstrates how to predefine CSS classes and apply them to nodes in a Mermaid flowchart. The CSS styles will override the default Mermaid styles.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_113

LANGUAGE: HTML
CODE:
```
<style>
  .cssClass > rect {
    fill: #ff0000;
    stroke: #ffff00;
    stroke-width: 4px;
  }
</style>
```

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    A-->B[AAA<span>BBB</span>]
    B-->D
    class A cssClass
```

----------------------------------------

TITLE: Enabling and Configuring Sequence Numbering in Mermaid with HTML and Mermaid Syntax
DESCRIPTION: This snippet demonstrates how to enable automatic numbering of message arrows in sequence diagrams. It can be configured globally by initializing Mermaid via JavaScript with `mermaid.initialize` and setting `sequence.showSequenceNumbers` to true. Alternatively, it can be enabled within the Mermaid diagram code using the `autonumber` directive. This requires Mermaid version supporting sequence numbering. Inputs include diagram code optionally containing `autonumber`, the output is diagrams with each arrow automatically labeled with a sequence number.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_23

LANGUAGE: html
CODE:
```
<script>
  mermaid.initialize({ sequence: { showSequenceNumbers: true } });
</script>
```

----------------------------------------

TITLE: HTML Example with Interactive Mermaid Gantt Chart
DESCRIPTION: Provides a complete HTML page example demonstrating how to embed a Mermaid Gantt chart with interactive click events bound to tasks. Includes the necessary JavaScript functions and Mermaid initialization with 'securityLevel' set to 'loose'.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_18

LANGUAGE: HTML
CODE:
```
<body>
  <pre class="mermaid">
    gantt
      dateFormat  YYYY-MM-DD

      section Clickable
      Visit mermaidjs         :active, cl1, 2014-01-07, 3d
      Print arguments         :cl2, after cl1, 3d
      Print task              :cl3, after cl2, 3d

      click cl1 href "https://mermaidjs.github.io/"
      click cl2 call printArguments("test1", "test2", test3)
      click cl3 call printTask()
  </pre>

  <script>
    const printArguments = function (arg1, arg2, arg3) {
      alert('printArguments called with arguments: ' + arg1 + ', ' + arg2 + ', ' + arg3);
    };
    const printTask = function (taskId) {
      alert('taskId: ' + taskId);
    };
    const config = {
      startOnLoad: true,
      securityLevel: 'loose',
    };
    mermaid.initialize(config);
  </script>
</body>
```

----------------------------------------

TITLE: Configuring Class Diagrams to Hide Empty Members Box
DESCRIPTION: Demonstrates how to configure a class diagram to hide empty members boxes using the configuration option. This creates a cleaner diagram when classes don't have member details to display.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_34

LANGUAGE: mermaid
CODE:
```
---
  config:
    class:
      hideEmptyMembersBox: true
---
classDiagram
  class Duck
```

----------------------------------------

TITLE: Defining Class Members with Brackets Syntax
DESCRIPTION: This snippet shows an alternative way to define class members using curly brackets (`{}`) to group multiple members at once.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
classDiagram
class BankAccount{
    +String owner
    +BigDecimal balance
    +deposit(amount)
    +withdrawal(amount)
}
```

----------------------------------------

TITLE: Creating a Sequence Diagram with Accessibility Metadata in Mermaid-js
DESCRIPTION: This snippet defines a sequence diagram illustrating interactions between Alice and John, with an accessibility title and description. It uses Mermaid.js sequence syntax to depict message exchanges, suitable for illustrating process flows with accessible annotations.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_14

LANGUAGE: mermaid
CODE:
```
   sequenceDiagram
      accTitle: My Sequence Diagram
      accDescr: My Sequence Diagram Description

      Alice->>John: Hello John, how are you?
      John-->>Alice: Great!
      Alice-)John: See you later!
```

----------------------------------------

TITLE: Creating a Basic Pie Chart in Mermaid
DESCRIPTION: This snippet demonstrates how to create a basic pie chart using Mermaid syntax. It defines the chart's title and specifies the labels and values for each slice of the pie.  No dependencies required, Mermaid library needs to be integrated.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
pie title NETFLIX
         "Time spent looking for movie" : 90
         "Time spent watching it" : 10
```

----------------------------------------

TITLE: Cardinality Definition in Mermaid Class Diagram
DESCRIPTION: This code snippet demonstrates the use of cardinality notation in Mermaid class diagrams to indicate the number of instances of one class linked to another. It uses the syntax `[classA] "cardinality1" [Arrow] "cardinality2" [ClassB]:LabelText` within a `classDiagram` block.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_15

LANGUAGE: mermaid
CODE:
```
classDiagram
    Customer "1" --> "*" Ticket
    Student "1" --> "1..*" Course
    Galaxy --> "many" Star : Contains
```

----------------------------------------

TITLE: Creating a Combined Bar and Line XY Chart (Mermaid)
DESCRIPTION: Demonstrates the basic syntax for creating an XY chart in Mermaid, plotting both bar and line data series. It includes defining a title, setting categorical x-axis labels, specifying a numerical y-axis range and title, and providing data arrays for both chart types.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/xyChart.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
xychart-beta
    title "Sales Revenue"
    x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]
    y-axis "Revenue (in $)" 4000 --> 11000
    bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]
    line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]
```

----------------------------------------

TITLE: Aliases for Actors/Participants in Mermaid
DESCRIPTION: Shows how to define aliases for actors or participants.  This allows using shorter identifiers in the diagram while displaying more descriptive labels. No dependencies. Expected output: A sequence diagram with Alice and John identified by 'A' and 'J' respectively.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant A as Alice
    participant J as John
    A->>J: Hello John, how are you?
    J->>A: Great!
```

----------------------------------------

TITLE: Defining Interaction in Mermaid Class Diagrams
DESCRIPTION: This snippet shows how to define interactions (links and callbacks) in Mermaid class diagrams. Interaction actions are defined after class declarations, and involve defining the node, reference, and tooltip. The example demonstrates both linking to a URL and calling a JavaScript callback function.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_19

LANGUAGE: mermaid
CODE:
```
classDiagram
    class Class01
    class Class02
    callback Class01 "callbackFunction" "Callback tooltip"
    link Class02 "https://www.github.com" "This is a link"
    class Class03
    class Class04
    click Class03 call callbackFunction() "Callback tooltip"
    click Class04 href "https://www.github.com" "This is a link"
```

----------------------------------------

TITLE: Initializing Mermaid Diagrams in TypeScript
DESCRIPTION: The `initialize` function is used to set configurations for mermaid rendering.  It takes a MermaidConfig object as input, which specifies various settings. This method should be called before the `run` function.  The configurations affect how the diagrams will be rendered. It returns void.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
initialize: (`config`) => `void`
```

----------------------------------------

TITLE: Creating ER Diagram
DESCRIPTION: This snippet demonstrates the syntax for defining an Entity Relationship Diagram (ERD) in Mermaid. The `erDiagram` declaration specifies the diagram type, followed by definitions of entities and their relationships. The diagram visually represents entities, their attributes, and the relationships between them.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/syntax-reference.md#_snippet_0

LANGUAGE: mermaid-example
CODE:
```
erDiagram
          CUSTOMER }|..|{ DELIVERY-ADDRESS : has
          CUSTOMER ||--o{ ORDER : places
          CUSTOMER ||--o{ INVOICE : "liable for"
          DELIVERY-ADDRESS ||--o{ ORDER : receives
          INVOICE ||--|{ ORDER : covers
          ORDER ||--|{ ORDER-ITEM : includes
          PRODUCT-CATEGORY ||--|{ PRODUCT : contains
          PRODUCT ||--o{ ORDER-ITEM : "ordered in"
```

----------------------------------------

TITLE: Defining Classes for Styling Nodes in ERD
DESCRIPTION: This snippet introduces class definitions to apply styles more efficiently, using the `classDef` statement.  It provides an example of how to define a class and then attach it to specific nodes or a list of nodes.  The example defines the class `someclass` and uses it for multiple nodes using the ::: operator. This technique promotes code reusability.  Requires Mermaid.js.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_11

LANGUAGE: mermaid
CODE:
```
erDiagram
    direction TB
    CAR:::someclass {
        string registrationNumber
        string make
        string model
    }
    PERSON:::someclass {
        string firstName
        string lastName
        int age
    }
    HOUSE:::someclass

    classDef someclass fill:#f96
```

LANGUAGE: mermaid
CODE:
```
erDiagram
    CAR {
        string registrationNumber
        string make
        string model
    }
    PERSON {
        string firstName
        string lastName
        int age
    }
    PERSON:::foo ||--|| CAR : owns
    PERSON o{--|| HOUSE:::bar : has

    classDef foo stroke:#f00
    classDef bar stroke:#0f0
    classDef foobar stroke:#00f
```

----------------------------------------

TITLE: Using Loops, Alternatives, and Optional Blocks in Mermaid Sequence Diagrams
DESCRIPTION: Demonstrates advanced sequence diagram features within `sequenceDiagram`: `loop` for repeating sequences (e.g., `Daily query`), `alt` for modeling alternative flows based on conditions (e.g., `is sick` vs `is well`), and `opt` for representing optional sequences (e.g., `Extra response`). These blocks structure the diagram to show conditional or repetitive interactions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/examples.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    loop Daily query
        Alice->>Bob: Hello Bob, how are you?
        alt is sick
            Bob->>Alice: Not so good :(
        else is well
            Bob->>Alice: Feeling fresh like a daisy
        end

        opt Extra response
            Bob->>Alice: Thanks for asking
        end
    end
```

----------------------------------------

TITLE: Defining Class Members with Colon Syntax
DESCRIPTION: This snippet demonstrates defining class members (attributes and methods) using the colon (`:`) syntax. It focuses on defining members one at a time.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
classDiagram
class BankAccount
BankAccount : +String owner
BankAccount : +BigDecimal balance
BankAccount : +deposit(amount)
BankAccount : +withdrawal(amount)
```

----------------------------------------

TITLE: Creating a Basic Sankey Diagram with Example Data
DESCRIPTION: This snippet demonstrates a basic Sankey diagram definition. It includes configuration options to control the diagram's rendering (in this case, hiding the data values).  The core functionality involves defining nodes and links with corresponding values using the `sankey-beta` keyword followed by CSV formatted data.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_0

LANGUAGE: Mermaid
CODE:
```
```mermaid-example
---
config:
  sankey:
    showValues: false
---
sankey-beta

Agricultural 'waste',Bio-conversion,124.729
Bio-conversion,Liquid,0.597
Bio-conversion,Losses,26.862
Bio-conversion,Solid,280.322
Bio-conversion,Gas,81.144
Biofuel imports,Liquid,35
Biomass imports,Solid,35
Coal imports,Coal,11.606
Coal reserves,Coal,63.965
Coal,Solid,75.571
District heating,Industry,10.639
District heating,Heating and cooling - commercial,22.505
District heating,Heating and cooling - homes,46.184
Electricity grid,Over generation / exports,104.453
Electricity grid,Heating and cooling - homes,113.726
Electricity grid,H2 conversion,27.14
Electricity grid,Industry,342.165
Electricity grid,Road transport,37.797
Electricity grid,Agriculture,4.412
Electricity grid,Heating and cooling - commercial,40.858
Electricity grid,Losses,56.691
Electricity grid,Rail transport,7.863
Electricity grid,Lighting & appliances - commercial,90.008
Electricity grid,Lighting & appliances - homes,93.494
Gas imports,Ngas,40.719
Gas reserves,Ngas,82.233
Gas,Heating and cooling - commercial,0.129
Gas,Losses,1.401
Gas,Thermal generation,151.891
Gas,Agriculture,2.096
Gas,Industry,48.58
Geothermal,Electricity grid,7.013
H2 conversion,H2,20.897
H2 conversion,Losses,6.242
H2,Road transport,20.897
Hydro,Electricity grid,6.995
Liquid,Industry,121.066
Liquid,International shipping,128.69
Liquid,Road transport,135.835
Liquid,Domestic aviation,14.458
Liquid,International aviation,206.267
Liquid,Agriculture,3.64
Liquid,National navigation,33.218
Liquid,Rail transport,4.413
Marine algae,Bio-conversion,4.375
Ngas,Gas,122.952
Nuclear,Thermal generation,839.978
Oil imports,Oil,504.287
Oil reserves,Oil,107.703
Oil,Liquid,611.99
Other waste,Solid,56.587
Other waste,Bio-conversion,77.81
Pumped heat,Heating and cooling - homes,193.026
Pumped heat,Heating and cooling - commercial,70.672
Solar PV,Electricity grid,59.901
Solar Thermal,Heating and cooling - homes,19.263
Solar,Solar Thermal,19.263
Solar,Solar PV,59.901
Solid,Agriculture,0.882
Solid,Thermal generation,400.12
Solid,Industry,46.477
Thermal generation,Electricity grid,525.531
Thermal generation,Losses,787.129
Thermal generation,District heating,79.329
Tidal,Electricity grid,9.452
UK land based bioenergy,Bio-conversion,182.01
Wave,Electricity grid,19.013
Wind,Electricity grid,289.366
```
```

----------------------------------------

TITLE: Loading and Registering ELK Layout in Mermaid via CDN in HTML Module Script
DESCRIPTION: This HTML example uses ES module imports inside a `<script type="module">` tag to load Mermaid and the ELK layout package directly from CDN URLs. It subsequently registers ELK layouts with Mermaid. This approach enables usage of ELK layouts in browsers without a bundler or build step.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid-layout-elk/README.md#_snippet_3

LANGUAGE: HTML
CODE:
```
<script type="module">
  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
  import elkLayouts from 'https://cdn.jsdelivr.net/npm/@mermaid-js/layout-elk@0/dist/mermaid-layout-elk.esm.min.mjs';

  mermaid.registerLayoutLoaders(elkLayouts);
</script>
```

----------------------------------------

TITLE: Creating a Basic Mermaid Mindmap with Icons
DESCRIPTION: Demonstrates the fundamental syntax for a Mermaid mindmap, showing a root node, nested nodes using indentation, and the inclusion of icons (`::icon(...)`) for specific nodes using classes like Font Awesome (`fa`) and Material Design Icons (`mdi`).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_0

LANGUAGE: Mermaid
CODE:
```
mindmap
  root((mindmap))
    Origins
      Long history
      ::icon(fa fa-book)
      Popularisation
        British popular psychology author Tony Buzan
    Research
      On effectiveness<br/>and features
      On Automatic creation
        Uses
            Creative techniques
            Strategic planning
            Argument mapping
    Tools
      Pen and paper
      Mermaid
```

LANGUAGE: Mermaid
CODE:
```
mindmap
  root((mindmap))
    Origins
      Long history
      ::icon(fa fa-book)
      Popularisation
        British popular psychology author Tony Buzan
    Research
      On effectiveness<br/>and features
      On Automatic creation
        Uses
            Creative techniques
            Strategic planning
            Argument mapping
    Tools
      Pen and paper
      Mermaid
```

----------------------------------------

TITLE: Visualizing Git Commit History with Mermaid Git Graphs
DESCRIPTION: Demonstrates how to create a Git graph visualization using `gitGraph`. It shows basic Git operations like `commit` (optionally with specific author, id, tag, or type like HIGHLIGHT), creating and switching branches (`branch newbranch`, `checkout newbranch`), and merging branches (`merge newbranch`). This visualizes the commit history and branching structure.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/examples.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
gitGraph:
    commit "Ashish"
    branch newbranch
    checkout newbranch
    commit id:"1111"
    commit tag:"test"
    checkout main
    commit type: HIGHLIGHT
    commit
    merge newbranch
    commit
    branch b2
    commit
```

----------------------------------------

TITLE: Rendering Mermaid Diagrams in Python using mermaid.ink
DESCRIPTION: This Python script defines a function `mm` that takes a Mermaid diagram definition string as input. It encodes the definition, sends it to the `mermaid.ink` service to generate an image, retrieves the image, displays it using `matplotlib.pyplot` and `IPython.display` (suitable for Jupyter notebooks), and saves it as 'image.png' with high resolution. Dependencies include `base64`, `io`, `requests`, `IPython.display`, `PIL`, and `matplotlib.pyplot`. The example usage demonstrates rendering a simple graph.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/ecosystem/tutorials.md#_snippet_0

LANGUAGE: python
CODE:
```
import base64
import io, requests
from IPython.display import Image, display
from PIL import Image as im
import matplotlib.pyplot as plt

def mm(graph):
    graphbytes = graph.encode("utf8")
    base64_bytes = base64.urlsafe_b64encode(graphbytes)
    base64_string = base64_bytes.decode("ascii")
    img = im.open(io.BytesIO(requests.get('https://mermaid.ink/img/' + base64_string).content))
    plt.imshow(img)
    plt.axis('off') # allow to hide axis
    plt.savefig('image.png', dpi=1200)

mm("""
graph LR;
    A--> B & C & D
    B--> A & E
    C--> A & E
    D--> A & E
    E--> B & C & D
""")
```

----------------------------------------

TITLE: Applying the init Directive to a Graph Definition (Mermaid)
DESCRIPTION: Illustrates how to use the `init` directive (`%%{init: ...}%%`) immediately before a Mermaid graph definition (`graph LR ...`) to apply specific configurations only to that diagram. The directive accepts a valid JSON object argument to override parameters like `theme` and `logLevel`, provided they are not restricted by the `secure` array. Requires Mermaid.js v8.6.0+.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/8.6.0_docs.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
%%{init: {"theme": "default", "logLevel": 1 }}%%
 graph LR
  a-->b
  b-->c
  c-->d
  d-->e
  e-->f
  f-->g
  g-->h
```

----------------------------------------

TITLE: Adding Notes to Sequence Diagram Mermaid
DESCRIPTION: Illustrates how to add notes to a sequence diagram, positioned relative to participants. Shows how to add notes to the right of a participant. No dependencies. Expected output: A sequence diagram with a note positioned to the right of John.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_9

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant John
    Note right of John: Text in note
```

----------------------------------------

TITLE: Setting Security Level in Mermaid
DESCRIPTION: JavaScript code showing how to initialize Mermaid with a specific security level to enable click events and tags in nodes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_4

LANGUAGE: javascript
CODE:
```
mermaid.initialize({
  securityLevel: 'loose',
});
```

----------------------------------------

TITLE: Deprecation and Replacement of mermaid.init and mermaid.initThrowsErrors (JavaScript)
DESCRIPTION: Demonstrates migration from the deprecated 'init' and 'initThrowsErrors' methods to their recommended replacements: 'initialize' and 'run'. The configuration object is now properly used. Required: a 'config' object, CSS selector, and an optional callback. Outputs are controlled rendering and initialization of Mermaid diagrams; error suppression can be toggled via the 'suppressErrors' parameter.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CHANGELOG.md#_snippet_4

LANGUAGE: js
CODE:
```
// < v10
mermaid.init(config, selector, cb);

//>= v10
mermaid.initialize(config);
mermaid.run({
  querySelector: selector,
  postRenderCallback: cb,
  suppressErrors: true,
});
```

LANGUAGE: js
CODE:
```
// < v10
mermaid.initThrowsErrors(config, selector, cb);

//>= v10
mermaid.initialize(config);
mermaid.run({
  querySelector: selector,
  postRenderCallback: cb,
  suppressErrors: false,
});
```

----------------------------------------

TITLE: Binding Events to Mermaid SVG Diagrams
DESCRIPTION: JavaScript example showing how to bind interactive events to Mermaid diagrams after rendering them with the API.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_11

LANGUAGE: javascript
CODE:
```
// Example of using the bindFunctions
const drawDiagram = async function () {
  element = document.querySelector('#graphDiv');
  const graphDefinition = 'graph TB\na-->b';
  const { svg, bindFunctions } = await mermaid.render('graphDiv', graphDefinition);
  element.innerHTML = svg;
  // This can also be written as `bindFunctions?.(element);` using the `?` shorthand.
  if (bindFunctions) {
    bindFunctions(element);
  }
};
```

----------------------------------------

TITLE: Defining Sequence Diagrams with Mermaid Syntax in mermaid
DESCRIPTION: This snippet illustrates how to define a sequence diagram in Mermaid notation. It includes participants (Alice, Bob, John), messages exchanged between them, loops, and notes. The syntax supports directed message arrows, loops named 'HealthCheck', and annotations attached to participants. The input is the Mermaid sequenceDiagram syntax string, which outputs a rendered sequence diagram representing interactions over time. Dependencies require Mermaid's sequence diagram rendering module. This example highlights messaging flows and synchronous/asynchronous communication.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Alice
    participant Bob
    Alice->>John: Hello John, how are you?
    loop HealthCheck
        John->>John: Fight against hypochondria
    end
    Note right of John: Rational thoughts <br/>prevail!
    John-->>Alice: Great!
    John->>Bob: How about you?
    Bob-->>John: Jolly good!
```

----------------------------------------

TITLE: Mermaid Timeline Basic Syntax Structure
DESCRIPTION: Illustrates the general text structure for defining time periods and events within a Mermaid timeline diagram using colon separators. Events can be on the same line or subsequent indented lines.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_1

LANGUAGE: json
CODE:
```
{time period} : {event}

```

LANGUAGE: json
CODE:
```
{time period} : {event} : {event}

```

LANGUAGE: json
CODE:
```
{time period} : {event}
              : {event}
              : {event}
```

----------------------------------------

TITLE: GitGraph with Dark Theme Configuration
DESCRIPTION: This snippet demonstrates how to configure a GitGraph diagram with the dark theme.  It sets the logLevel to 'debug' and the theme to 'dark' within the config section. The GitGraph then defines a series of commits, branches, checkouts, and merges to simulate a basic git workflow.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_24

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'dark'
---
      gitGraph
        commit
        branch hotfix
        checkout hotfix
        commit
        branch develop
        checkout develop
        commit id:"ash" tag:"abc"
        branch featureB
        checkout featureB
        commit type:HIGHLIGHT
        checkout main
        checkout hotfix
        commit type:NORMAL
        checkout develop
        commit type:REVERSE
        checkout featureB
        commit
        checkout main
        merge hotfix
        checkout featureB
        commit
        checkout develop
        branch featureA
        commit
        checkout develop
        merge hotfix
        checkout featureA
        commit
        checkout featureB
        commit
        checkout develop
        merge featureA
        branch release
        checkout release
        commit
        checkout main
        commit
        checkout release
        merge main
        checkout develop
        merge release
```

----------------------------------------

TITLE: XY Chart in Mermaid
DESCRIPTION: Creates a bar and line chart illustrating monthly sales revenue, with axes labeled for months and revenue in dollars. It demonstrates plotting multiple series in Mermaid.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_13

LANGUAGE: mermaid
CODE:
```
xychart-beta
  title "Sales Revenue"
  x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]
  y-axis "Revenue (in $)" 4000 --> 11000
  bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]
  line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]
```

----------------------------------------

TITLE: Attaching a Class to Multiple Nodes - Mermaid
DESCRIPTION: This snippet shows how to attach a class to multiple nodes in a Mermaid flowchart using the `class` directive in one statement.  Separate the node IDs with commas.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_110

LANGUAGE: Mermaid
CODE:
```
class nodeId1,nodeId2 className;
```

----------------------------------------

TITLE: Kanban Diagram with Todo and In Progress Columns in Mermaid
DESCRIPTION: Illustrates a Kanban board with 'Todo' and 'In progress' columns, listing multiple tasks under each column. This demonstrates how to populate columns with task items.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/diagrams/kanban/samples.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
kanban
  Todo
    Create JISON
    Update DB function
    Create parsing tests
    define getData
    Create renderer
  In progress
    Design grammar
```

----------------------------------------

TITLE: Full Kanban Diagram Example with Configuration and Metadata in Mermaid
DESCRIPTION: Presents a complete Kanban diagram example including a YAML configuration block for ticketBaseUrl, multiple columns with unique identifiers and titles, tasks under each column, and task metadata annotations such as assigned, ticket, and priority. This snippet showcases practical usage and indentation rules to build a comprehensive Kanban workflow visualization.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/kanban.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
---
config:
  kanban:
    ticketBaseUrl: 'https://mermaidchart.atlassian.net/browse/#TICKET#'
---
kanban
  Todo
    [Create Documentation]
    docs[Create Blog about the new diagram]
  [In progress]
    id6[Create renderer so that it works in all cases. We also add some extra text here for testing purposes. And some more just for the extra flare.]
  id9[Ready for deploy]
    id8[Design grammar]@{ assigned: 'knsv' }
  id10[Ready for test]
    id4[Create parsing tests]@{ ticket: MC-2038, assigned: 'K.Sveidqvist', priority: 'High' }
    id66[last item]@{ priority: 'Very Low', assigned: 'knsv' }
  id11[Done]
    id5[define getData]
    id2[Title of diagram is more than 100 chars when user duplicates diagram with 100 char]@{ ticket: MC-2036, priority: 'Very High'}
    id3[Update DB function]@{ ticket: MC-2037, assigned: knsv, priority: 'High' }

  id12[Can't reproduce]
    id3[Weird flickering in Firefox]
```

----------------------------------------

TITLE: Defining a Service in Architecture Diagram
DESCRIPTION: This snippet illustrates the syntax for declaring a service within an architecture diagram. It uses the `service` keyword, followed by a unique identifier, an icon name in parentheses, and a title within brackets. This establishes individual components within the architecture. The output depicts a visual representation of the specified service.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_4

LANGUAGE: Mermaid
CODE:
```
service database1(database)[My Database]
```

----------------------------------------

TITLE: Class Diagram Example in Mermaid
DESCRIPTION: Defines a class diagram illustrating inheritance, composition, aggregation, and relationship types between classes. Key elements include class declarations, relationships (like inheritance, composition, and association), and class methods or properties. Dependencies involve Mermaid syntax support for class diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
classDiagram
Class01 <|-- AveryLongClass : Cool
Class03 *-- Class04
Class05 o-- Class06
Class07 .. Class08
Class09 --> C2 : Where am i?
Class09 --* C3
Class09 --|> Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
Class08 <--> C2: Cool label
```

----------------------------------------

TITLE: Modeling Service Communication with Mermaid Sequence Diagrams
DESCRIPTION: Provides a complex sequence diagram modeling interactions between multiple services (Web Browser, Blog Service, Account Service, etc.) in a blogging application. It demonstrates participant aliasing (`participant web as Web Browser`), activation/deactivation markers (`+` to indicate start of activation, `-` to indicate end), notes spanning multiple participants (`Note over web,db`), alternative logic (`alt Credentials not found ... else Credentials found ... end`), and parallel actions (`par Notifications ... and Response ... end`).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/examples.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant web as Web Browser
    participant blog as Blog Service
    participant account as Account Service
    participant mail as Mail Service
    participant db as Storage

    Note over web,db: The user must be logged in to submit blog posts
    web->>+account: Logs in using credentials
    account->>db: Query stored accounts
    db->>account: Respond with query result

    alt Credentials not found
        account->>web: Invalid credentials
    else Credentials found
        account->>-web: Successfully logged in

        Note over web,db: When the user is authenticated, they can now submit new posts
        web->>+blog: Submit new post
        blog->>db: Store post data

        par Notifications
            blog--)mail: Send mail to blog subscribers
            blog--)db: Store in-site notifications
        and Response
            blog-->>-web: Successfully posted
        end
    end
```

----------------------------------------

TITLE: Class Diagram with Title and Description
DESCRIPTION: This mermaid.js snippet shows a class diagram with an accessible title and description. The title and description are defined using the `accTitle` and `accDescr` keywords, followed by a colon and the string value.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_6

LANGUAGE: markdown
CODE:
```
```mermaid-example
   classDiagram
      accTitle: My Class Diagram
      accDescr: My Class Diagram Description

      Vehicle <|-- Car
```
```

----------------------------------------

TITLE: Initialize Site-wide Mermaid Theme (JavaScript)
DESCRIPTION: Sets the default theme for all Mermaid diagrams on a page using the `mermaid.initialize` method. This example sets the theme to 'base', which is required for theme variable customization.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/theming.md#_snippet_0

LANGUAGE: Javascript
CODE:
```
mermaid.initialize({
  securityLevel: 'loose',
  theme: 'base'
});
```

----------------------------------------

TITLE: Using FontAwesome Icons in Mermaid Flowcharts - mermaid
DESCRIPTION: This snippet illustrates how to integrate FontAwesome icons into Mermaid flowcharts using icon syntax (`fa:` prefix) embedded within node labels. It supports icon packs registrations for versions 7+ with various prefixes (`fa`, `fab`, `fas`, etc.) and fallback to CSS-based FontAwesome. The snippet also shows usage of custom icons with the `fak` prefix requiring relevant FontAwesome kit imports. Nodes can display icons inline or standalone with text descriptions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_58

LANGUAGE: mermaid
CODE:
```
flowchart TD
    B["fa:fa-twitter for peace"]
    B-->C[fa:fa-ban forbidden]
    B-->D(fa:fa-spinner)
    B-->E(A fa:fa-camera-retro perhaps?)
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    B[fa:fa-twitter] %% standard icon
    B-->E(fak:fa-custom-icon-name) %% custom icon
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    B["fa:fa-twitter for peace"]
    B-->C["fab:fa-truck-bold a custom icon"]
```

----------------------------------------

TITLE: Sequence Diagram with Loops, Alt, and Opt in Mermaid
DESCRIPTION: This snippet demonstrates a sequence diagram with advanced features such as loops, alt (alternative paths), and opt (optional sections) in Mermaid. It showcases how to represent conditional logic and repeating actions in a sequence diagram. No dependencies required, Mermaid library needs to be integrated.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    loop Daily query
        Alice->>Bob: Hello Bob, how are you?
        alt is sick
            Bob->>Alice: Not so good :(
        else is well
            Bob->>Alice: Feeling fresh like a daisy
        end

        opt Extra response
            Bob->>Alice: Thanks for asking
        end
    end
```

----------------------------------------

TITLE: Constructing Gantt Charts with Mermaid Syntax in mermaid
DESCRIPTION: This snippet shows how to define a Gantt chart using Mermaid's syntax. It sets a date format, chart title, excluded days, and multiple task sections with different statuses including completed, active, and future tasks with dependencies. The input format accepts date definitions and relative scheduling. Outputs include visually structured task timelines indicating progress and planned tasks. Dependencies require Mermaid's Gantt rendering capabilities. This snippet is valuable for project scheduling and timeline visualization.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
gantt
    dateFormat  YYYY-MM-DD
    title Adding GANTT diagram to mermaid
    excludes weekdays 2014-01-10

    section A section
    Completed task            :done,    des1, 2014-01-06,2014-01-08
    Active task               :active,  des2, 2014-01-09, 3d
    Future task               :         des3, after des2, 5d
    Future task2               :         des4, after des3, 5d
```

----------------------------------------

TITLE: Init Directive Example
DESCRIPTION: This example shows how to use the init directive to modify Mermaid configurations.  It sets the theme to "default" and the logLevel to 1. The directive is enclosed in `%%{ }%%` and the JSON object passed as the argument must be valid and properly quoted to be parsed correctly.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/8.6.0_docs.md#_snippet_1

LANGUAGE: Mermaid
CODE:
```
%%{init: {"theme": "default", "logLevel": 1 }}%%
```

----------------------------------------

TITLE: Configuring Mermaid Diagrams with YAML Frontmatter (mermaid)
DESCRIPTION: This example illustrates how to use YAML frontmatter for configuring Mermaid diagrams. The snippet includes settings such as title, displayMode, theme, and specific diagram parameters within the frontmatter section, delineated by triple-dash lines (---). Inputs are configuration options and a Gantt chart definition; outputs include a customized diagram appearance and behavior. Consistent indentation and correct YAML syntax are required to avoid diagram errors. No external dependencies other than Mermaid syntax support are necessary.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/syntax-reference.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
---
title: Frontmatter Example
displayMode: compact
config:
  theme: forest
gantt:
    useWidth: 400
    compact: true
---
gantt
    section Waffle
        Iron  : 1982, 3y
        House : 1986, 3y
```

----------------------------------------

TITLE: Rendering a Basic Pie Chart with Mermaid
DESCRIPTION: This snippet demonstrates a basic pie chart. It defines the chart type as "pie" and then provides the data for the chart. The labels for the pie slices are enclosed in quotes, followed by a colon and the numerical value.  This example requires no dependencies beyond the Mermaid-js library.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/pie.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
pie title Pets adopted by volunteers
    "Dogs" : 386
    "Cats" : 85
    "Rats" : 15
```

----------------------------------------

TITLE: Basic Sequence Diagram - Mermaid
DESCRIPTION: Demonstrates a simple sequence diagram showing a basic message exchange between two implicit participants (Alice and John). Participants are defined automatically based on the first message.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->>John: Hello John, how are you?
    John-->>Alice: Great!
    Alice-)John: See you later!
```

----------------------------------------

TITLE: Custom Markdown Renderer for Mermaid Diagrams in JavaScript
DESCRIPTION: This snippet overrides the default code block rendering in the 'marked' library to wrap Mermaid graphs within <pre class='mermaid'> tags, enabling proper Mermaid diagram rendering in HTML Markdown output. It depends on the 'marked' library and requires Mermaid scripts to be included separately.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
const renderer = new marked.Renderer();
renderer.code = function (code, language) {
  if (code.match(/^sequenceDiagram/) || code.match(/^graph/)) {
    return '<pre class="mermaid">' + code + '</pre>';
  } else {
    return '<pre><code>' + code + '</code></pre>';
  }
};
```

----------------------------------------

TITLE: Mermaid Gantt: Excluding Dates and Configuring Weekends
DESCRIPTION: This example shows how to exclude dates or weekends from the Gantt chart. The 'excludes weekends' directive marks weekends on the chart and adds their duration to tasks that span them. The 'weekend friday' directive (v11.0.0+) changes the definition of a weekend from Saturday/Sunday to Friday/Saturday.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_3

LANGUAGE: Mermaid
CODE:
```
gantt
    title A Gantt Diagram Excluding Fri - Sat weekends
    dateFormat YYYY-MM-DD
    excludes weekends
    weekend friday
    section Section
        A task          :a1, 2024-01-01, 30d
        Another task    :after a1, 20d
```

LANGUAGE: Mermaid
CODE:
```
gantt
    title A Gantt Diagram Excluding Fri - Sat weekends
    dateFormat YYYY-MM-DD
    excludes weekends
    weekend friday
    section Section
        A task          :a1, 2024-01-01, 30d
        Another task    :after a1, 20d
```

----------------------------------------

TITLE: Example Gantt Chart Definition
DESCRIPTION: This snippet provides a complete example of a Mermaid Gantt chart definition, demonstrating how to set the date format, title, exclude weekends, define sections, and specify tasks with various metadata options like status (done, active, crit), IDs, dates, durations, and dependencies.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_1

LANGUAGE: Mermaid
CODE:
```
gantt
    dateFormat  YYYY-MM-DD
    title       Adding GANTT diagram functionality to mermaid
    excludes    weekends
    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week ("sunday") or "weekends", but not the word "weekdays".)

    section A section
    Completed task            :done,    des1, 2014-01-06,2014-01-08
    Active task               :active,  des2, 2014-01-09, 3d
    Future task               :         des3, after des2, 5d
    Future task2              :         des4, after des3, 5d

    section Critical tasks
    Completed task in the critical line :crit, done, 2014-01-06,24h
    Implement parser and jison          :crit, done, after des1, 2d
    Create tests for parser             :crit, active, 3d
    Future task in critical line        :crit, 5d
    Create tests for renderer           :2d
    Add to mermaid                      :until isadded
    Functionality added                 :milestone, isadded, 2014-01-25, 0d

    section Documentation
    Describe gantt syntax               :active, a1, after des1, 3d
    Add gantt diagram to demo page      :after a1  , 20h
    Add another diagram to demo page    :doc1, after a1  , 48h

    section Last section
    Describe gantt syntax               :after doc1, 3d
    Add gantt diagram to demo page      :20h
    Add another diagram to demo page    :48h
```

----------------------------------------

TITLE: Installing Mermaid via Package Managers
DESCRIPTION: Instructions for installing the Mermaid package using npm, Yarn, or PNPM. Requires Node.js version 16 or higher.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_0

LANGUAGE: bash
CODE:
```
# NPM
npm install mermaid
# Yarn
yarn add mermaid
# PNPM
pnpm add mermaid
```

----------------------------------------

TITLE: Define Participants in Sequence Diagram Mermaid
DESCRIPTION: Demonstrates how to explicitly define participants in a sequence diagram.  This allows controlling the order in which participants appear. No specific dependencies. Expected output: A sequence diagram with Alice and Bob in the specified order.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Alice
    participant Bob
    Bob->>Alice: Hi Alice
    Alice->>Bob: Hi Bob
```

----------------------------------------

TITLE: Migrating mermaid.render from Callback to Async/Await (JavaScript)
DESCRIPTION: Illustrates the transition in Mermaid's 'render' API from callback-based (pre-v10) to Promise-based (v10+), supporting both async/await and .then() Promise chaining. Requires the 'mermaid' global and a valid render target element. Inputs include graph definition strings and element to bind rendering output; outputs SVG markup and an optional post-render binding function. Applies only in browsers or environments supporting ES modules and Promises.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CHANGELOG.md#_snippet_2

LANGUAGE: js
CODE:
```
// < v10
mermaid.render('id', 'graph TD;\nA-->B', (svg, bindFunctions) => {
  element.innerHTML = svg;
  if (bindFunctions) {
    bindFunctions(element);
  }
});

// Shorter syntax
if (bindFunctions) {
  bindFunctions(element);
}
// can be replaced with the `?.` shorthand
bindFunctions?.(element);

// >= v10 with async/await
const { svg, bindFunctions } = await mermaid.render('id', 'graph TD;\nA-->B');
element.innerHTML = svg;
bindFunctions?.(element);

// >= v10 with promise.then
mermaid.render('id', 'graph TD;A-->B').then(({ svg, bindFunctions }) => {
  element.innerHTML = svg;
  bindFunctions?.(element);
});
```

----------------------------------------

TITLE: Sequence Diagram: Blogging App Communication - Mermaid
DESCRIPTION: This snippet creates a sequence diagram illustrating the communication flow in a blogging application. It shows interactions between a web browser, blog service, account service, mail service, and storage. Includes alternative flows (login failure) and parallel actions (notifications). No dependencies required, Mermaid library needs to be integrated.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant web as Web Browser
    participant blog as Blog Service
    participant account as Account Service
    participant mail as Mail Service
    participant db as Storage

    Note over web,db: The user must be logged in to submit blog posts
    web->>+account: Logs in using credentials
    account->>db: Query stored accounts
    db->>account: Respond with query result

    alt Credentials not found
        account->>web: Invalid credentials
    else Credentials found
        account->>-web: Successfully logged in

        Note over web,db: When the user is authenticated, they can now submit new posts
        web->>+blog: Submit new post
        blog->>db: Store post data

        par Notifications
            blog--)mail: Send mail to blog subscribers
            blog--)db: Store in-site notifications
        and Response
            blog-->>-web: Successfully posted
        end
    end
```

----------------------------------------

TITLE: Basic Transitions Between States
DESCRIPTION: Illustrates creating simple directed transitions between states, where states are implicitly defined if not previously declared.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
    s1 --> s2
```

----------------------------------------

TITLE: Frontmatter for Diagram Code
DESCRIPTION: This snippet demonstrates the usage of Frontmatter within a Mermaid diagram. Frontmatter allows configuring diagram settings before rendering.  The example sets a title, display mode, and theme using YAML syntax. Improper syntax could break the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/syntax-reference.md#_snippet_1

LANGUAGE: mermaid-example
CODE:
```
---
title: Frontmatter Example
displayMode: compact
config:
  theme: forest
gantt:
    useWidth: 400
    compact: true
---
gantt
    section Waffle
        Iron  : 1982, 3y
        House : 1986, 3y
```

----------------------------------------

TITLE: Defining Mermaid Configuration Directives (Multi-line)
DESCRIPTION: Illustrates the multi-line structure for defining Mermaid directives using nested key-value pairs within `%%{ init: { ... } }%%`. This allows setting both general configurations (like theme, fontFamily, logLevel) and diagram-specific configurations (like flowchart or sequence settings).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
%%{
  init: {
    "theme": "dark",
    "fontFamily": "monospace",
    "logLevel": "info",
    "flowchart": {
      "htmlLabels": true,
      "curve": "linear"
    },
    "sequence": {
      "mirrorActors": true
    }
  }
}%%
```

----------------------------------------

TITLE: Creating a State Diagram with Mermaid JavaScript
DESCRIPTION: This snippet illustrates state transitions using the stateDiagram-v2 syntax in Mermaid, showing movement through states such as 'Still', 'Moving', and 'Crash'. The only requirement is Mermaid; states and transitions are textually defined. Users specify state names and transitions; the output is a state machine diagram, subject to Mermaid's state diagram syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
[*] --> Still
Still --> [*]
Still --> Moving
Moving --> Still
Moving --> Crash
Crash --> [*]
```

----------------------------------------

TITLE: HTML Example with Interactive Mermaid Gantt Chart
DESCRIPTION: Full HTML example demonstrating how to embed a Mermaid Gantt chart with interactive click events that trigger JavaScript functions or open links. Includes necessary script tags and configuration.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_20

LANGUAGE: html
CODE:
```
<body>
  <pre class="mermaid">
    gantt
      dateFormat  YYYY-MM-DD

      section Clickable
      Visit mermaidjs         :active, cl1, 2014-01-07, 3d
      Print arguments         :cl2, after cl1, 3d
      Print task              :cl3, after cl2, 3d

      click cl1 href "https://mermaidjs.github.io/"
      click cl2 call printArguments("test1", "test2", test3)
      click cl3 call printTask()
  </pre>

  <script>
    const printArguments = function (arg1, arg2, arg3) {
      alert('printArguments called with arguments: ' + arg1 + ', ' + arg2 + ', ' + arg3);
    };
    const printTask = function (taskId) {
      alert('taskId: ' + taskId);
    };
    const config = {
      startOnLoad: true,
      securityLevel: 'loose',
    };
    mermaid.initialize(config);
  </script>
</body>
```

----------------------------------------

TITLE: Using Classes for Styling Nodes in Mermaid ER Diagrams
DESCRIPTION: Shows how to define a style class (`someclass`) using `classDef` with specific style properties (e.g., `fill`). The class is then applied to multiple entities (CAR, PERSON, HOUSE) using the `:::` operator appended to the entity name during definition, allowing for consistent styling.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_12

LANGUAGE: mermaid-example
CODE:
```
erDiagram
    direction TB
    CAR:::someclass {
        string registrationNumber
        string make
        string model
    }
    PERSON:::someclass {
        string firstName
        string lastName
        int age
    }
    HOUSE:::someclass

    classDef someclass fill:#f96
```

----------------------------------------

TITLE: Defining Attributes in ERD
DESCRIPTION: This snippet demonstrates how to define attributes for entities in an ERD diagram. Attributes are defined within curly braces after the entity name and are of the form `type name`.  The provided example shows how to define attributes like `string registrationNumber`, `string make`, and `string model` for the `CAR` entity.  There are no dependencies required to use this feature; it's core ERD syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
erDiagram
    CAR ||--o{ NAMED-DRIVER : allows
    CAR {
        string registrationNumber
        string make
        string model
    }
    PERSON ||--o{ NAMED-DRIVER : is
    PERSON {
        string firstName
        string lastName
        int age
    }
```

----------------------------------------

TITLE: Validating Mermaid Syntax Without Rendering
DESCRIPTION: Example of how to use the mermaid.parse() function to validate diagram definitions without rendering. This example shows how to handle parsing errors and update the UI based on validation results.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_14

LANGUAGE: javascript
CODE:
```
mermaid.parseError = function (err, hash) {
  displayErrorInGui(err);
};

const textFieldUpdated = async function () {
  const textStr = getTextFromFormField('code');

  if (await mermaid.parse(textStr)) {
    reRender(textStr);
  }
};

bindEventHandler('change', 'code', textFieldUpdated);
```

----------------------------------------

TITLE: Adding Notes Over Participants - Mermaid
DESCRIPTION: Shows how to add notes that span horizontally over multiple participants using the `Note over [Actor1],[Actor2]: Text` syntax. This is useful for commenting on interactions between participants.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_10

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->John: Hello John, how are you?
    Note over Alice,John: A typical interaction
```

----------------------------------------

TITLE: Handling Long Text and Forced Line Breaks in Mermaid Timeline Events
DESCRIPTION: Illustrates Mermaid timeline syntax usage when time periods or events contain long descriptive text. Text wrapping is automatic to prevent overflow, but forced line breaks can be inserted using the HTML '<br>' tag within text strings. The snippet includes multiple time periods and events with embedded '<br>' for formatting multiline text in events. This example demonstrates flexibility in textual detail and uses standard Mermaid DSL with no extra dependencies.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
timeline
        title England's History Timeline
        section Stone Age
          7600 BC : Britain's oldest known house was built in Orkney, Scotland
          6000 BC : Sea levels rise and Britain becomes an island.<br> The people who live here are hunter-gatherers.
        section Bronze Age
          2300 BC : People arrive from Europe and settle in Britain. <br>They bring farming and metalworking.
                  : New styles of pottery and ways of burying the dead appear.
          2200 BC : The last major building works are completed at Stonehenge.<br> People now bury their dead in stone circles.
                  : The first metal objects are made in Britain.Some other nice things happen. it is a good time to be alive.
```

----------------------------------------

TITLE: Adding Mermaid as a Production Dependency using Yarn
DESCRIPTION: This shell command uses the Yarn package manager to add Mermaid as a production dependency to the current project. Yarn will download the Mermaid package and save it in the project's node_modules directory, updating the package.json file.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/getting-started.md#_snippet_6

LANGUAGE: Shell
CODE:
```
yarn add mermaid
```

----------------------------------------

TITLE: Indicating Sequence Break (break) - Mermaid
DESCRIPTION: Demonstrates how to use the `break` block to indicate a point where the sequence execution stops prematurely, typically used to model exceptions or error conditions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_19

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Consumer-->API: Book something
    API-->BookingService: Start booking process
    break when the booking process fails
        API-->Consumer: show failure
    end
    API-->BillingService: Start billing process
```

----------------------------------------

TITLE: Creating a C4 Component Diagram using Mermaid
DESCRIPTION: This example shows the `C4Component` diagram type. It defines `Container`, `ContainerDb`, `System_Ext`, and `Component` elements within a `Container_Boundary`. Relationships (`Rel`, `Rel_Back`) are defined between components, containers, and external systems. `UpdateRelStyle` modifies the layout and appearance of relationships.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/c4.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
    C4Component
    title Component diagram for Internet Banking System - API Application

    Container(spa, "Single Page Application", "javascript and angular", "Provides all the internet banking functionality to customers via their web browser.")
    Container(ma, "Mobile App", "Xamarin", "Provides a limited subset to the internet banking functionality to customers via their mobile device.")
    ContainerDb(db, "Database", "Relational Database Schema", "Stores user registration information, hashed authentication credentials, access logs, etc.")
    System_Ext(mbs, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

    Container_Boundary(api, "API Application") {
        Component(sign, "Sign In Controller", "MVC Rest Controller", "Allows users to sign in to the internet banking system")
        Component(accounts, "Accounts Summary Controller", "MVC Rest Controller", "Provides customers with a summary of their bank accounts")
        Component(security, "Security Component", "Spring Bean", "Provides functionality related to singing in, changing passwords, etc.")
        Component(mbsfacade, "Mainframe Banking System Facade", "Spring Bean", "A facade onto the mainframe banking system.")

        Rel(sign, security, "Uses")
        Rel(accounts, mbsfacade, "Uses")
        Rel(security, db, "Read & write to", "JDBC")
        Rel(mbsfacade, mbs, "Uses", "XML/HTTPS")
    }

    Rel_Back(spa, sign, "Uses", "JSON/HTTPS")
    Rel(spa, accounts, "Uses", "JSON/HTTPS")

    Rel(ma, sign, "Uses", "JSON/HTTPS")
    Rel(ma, accounts, "Uses", "JSON/HTTPS")

    UpdateRelStyle(spa, sign, $offsetY="-40")
    UpdateRelStyle(spa, accounts, $offsetX="40", $offsetY="40")

    UpdateRelStyle(ma, sign, $offsetX="-90", $offsetY="40")
    UpdateRelStyle(ma, accounts, $offsetY="-40")

        UpdateRelStyle(sign, security, $offsetX="-160", $offsetY="10")
        UpdateRelStyle(accounts, mbsfacade, $offsetX="140", $offsetY="10")
        UpdateRelStyle(security, db, $offsetY="-40")
        UpdateRelStyle(mbsfacade, mbs, $offsetY="-40")
```

----------------------------------------

TITLE: Grouping Participants in Boxes - Mermaid
DESCRIPTION: Shows how to visually group participants or actors within vertical boxes using the `box` keyword. Boxes can be colored (by name or RGB/RGBA) and can have an optional descriptive label.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    box Purple Alice & John
    participant A
    participant J
    end
    box Another Group
    participant B
    participant C
    end
    A->>J: Hello John, how are you?
    J->>A: Great!
    A->>B: Hello Bob, how is Charley?
    B->>C: Hello Charley, how are you?
```

----------------------------------------

TITLE: Defining Database Node Shape (Cylinder) in Mermaid Flowchart DSL
DESCRIPTION: This snippet shows how to create a flowchart node with a cylinder shape representing a database using Mermaid syntax. The node is labeled 'Database' and shaped as a cylinder via the 'cyl' shape property. This visual representation helps identify database components in flowcharts. Requires Mermaid version supporting custom shapes and node attribute syntax as presented. Input is Mermaid flowchart source; output is a node with cylinder shape and label.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_9

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: cyl, label: "Database" }
```

----------------------------------------

TITLE: Defining Various UML Relationships in Mermaid - Mermaid
DESCRIPTION: Demonstrates how to represent eight major UML class relationships—inheritance, composition, aggregation, association, solid link, dependency, realization, and dashed link—using Mermaid's classDiagram syntax. No external dependencies are required beyond Mermaid itself; code is intended for embedding within Markdown or supported documentation tools. This snippet expects class names as input, with diagram output visualizing the structure.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
classDiagram
classA <|-- classB
classC *-- classD
classE o-- classF
classG <-- classH
classI -- classJ
classK <.. classL
classM <|.. classN
classO .. classP

```

----------------------------------------

TITLE: Defining a Square Node in Mermaid Mindmap
DESCRIPTION: Shows how to define a node with a square shape in a Mermaid mindmap using the `id[...]` syntax, similar to flowcharts. The text within the square brackets becomes the node label.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_2

LANGUAGE: Mermaid
CODE:
```
mindmap
    id[I am a square]
```

LANGUAGE: Mermaid
CODE:
```
mindmap
    id[I am a square]
```

----------------------------------------

TITLE: Setting Top-to-Bottom Diagram Orientation in Mermaid ER Diagrams
DESCRIPTION: Shows how to set the orientation of a Mermaid ER diagram from top to bottom using the `direction TB` statement. This arranges the entities vertically. The example includes CUSTOMER, ORDER, and LINE-ITEM entities with their relationships.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_9

LANGUAGE: mermaid-example
CODE:
```
erDiagram
    direction TB
    CUSTOMER ||--o{ ORDER : places
    CUSTOMER {
        string name
        string custNumber
        string sector
    }
    ORDER ||--|{ LINE-ITEM : contains
    ORDER {
        int orderNumber
        string deliveryAddress
    }
    LINE-ITEM {
        string productCode
        int quantity
        float pricePerUnit
    }
```

----------------------------------------

TITLE: Class Diagram Example in Mermaid
DESCRIPTION: Illustrates class structures and relationships, including inheritance, composition, aggregation, association, and methods. Uses Mermaid class diagram syntax for object-oriented modeling.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
classDiagram
Class01 <|-- AveryLongClass : Cool
Class03 *-- Class04
Class05 o-- Class06
Class07 .. Class08
Class09 --> C2 : Where am i?
Class09 --* C3
Class09 --|> Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
Class08 <--> C2: Cool label
```

----------------------------------------

TITLE: Initializing Mermaid with Security Level Configuration
DESCRIPTION: This JavaScript code snippet demonstrates how to initialize Mermaid with a specific `securityLevel`. Setting `securityLevel` allows control over HTML tags and click functionality in rendered diagrams.  Requires the mermaid library to be imported first.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_3

LANGUAGE: javascript
CODE:
```
mermaid.initialize({
  securityLevel: 'loose',
});
```

----------------------------------------

TITLE: Defining ER Diagram Entities with Attributes, Keys, and Comments in Mermaid
DESCRIPTION: Demonstrates defining entities (CAR, PERSON, NAMED-DRIVER, MANUFACTURER) in a Mermaid ER diagram. It shows how to specify attributes with data types, assign Primary Keys (PK), Foreign Keys (FK), Unique Keys (UK) using specific keywords, and add comments in double quotes at the end of an attribute line. It also illustrates defining relationships between entities.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_8

LANGUAGE: mermaid-example
CODE:
```
erDiagram
    CAR ||--o{ NAMED-DRIVER : allows
    CAR {
        string registrationNumber PK
        string make
        string model
        string[] parts
    }
    PERSON ||--o{ NAMED-DRIVER : is
    PERSON {
        string driversLicense PK "The license #"
        string(99) firstName "Only 99 characters are allowed"
        string lastName
        string phone UK
        int age
    }
    NAMED-DRIVER {
        string carRegistrationNumber PK, FK
        string driverLicence PK, FK
    }
    MANUFACTURER only one to zero or more CAR : makes
```

----------------------------------------

TITLE: Applying Wrap Directive to a Sequence Diagram
DESCRIPTION: Example showing a Mermaid sequence diagram definition preceded by a directive that enables text wrapping (`wrap: true`) and sets a specific width (`width: 300`) for the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_16

LANGUAGE: mermaid
CODE:
```
%%{init: { "sequence": { "wrap": true, "width":300 } } }%%
sequenceDiagram
Alice->Bob: Hello Bob, how are you?
Bob->Alice: Fine, how did your mother like the book I suggested? And did you catch the new book about alien invasion?
Alice->Bob: Good.
Bob->Alice: Cool
```

----------------------------------------

TITLE: Defining Frontmatter Configuration in Mermaid Diagrams Using YAML
DESCRIPTION: This snippet demonstrates how diagram authors can override Mermaid's default configuration on a per-diagram basis by including a YAML frontmatter block at the top of the diagram definition. Key properties like theme and themeVariables are specified to customize the appearance of the diagram. Dependencies include Mermaid version 10.5.0 or newer, which supports frontmatter. The input is a Mermaid diagram preceded by a YAML block; the output is a rendered diagram that respects the specified configuration overrides.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/configuration.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
---
title: Hello Title
config:
  theme: base
  themeVariables:
    primaryColor: "#00ff00"
---
flowchart
	Hello --> World
```

----------------------------------------

TITLE: Using Aliases for Entity Names with Attributes in Mermaid ER Diagrams
DESCRIPTION: Illustrates renaming entities with aliases enclosed in square brackets or double quotes for display purposes, combined with attribute blocks. For example, the entity 'p' is aliased as 'Person' and 'a' as 'Customer Account'. The snippet also shows relationships using aliases, enhancing diagram readability by using user-friendly names.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
erDiagram
    p[Person] {
        string firstName
        string lastName
    }
    a["Customer Account"] {
        string email
    }
    p ||--o| a : has
```

----------------------------------------

TITLE: Migrating mermaid.parse to Async API (JavaScript)
DESCRIPTION: Shows how the API for parsing Mermaid diagrams has changed from synchronous with callback error handling to an asynchronous Promise-based approach. Requires the 'mermaid' object and an error-handling callback. Input is the diagram source string; errors are managed via .catch or try/catch. Make sure your environment supports async/await and Promises.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CHANGELOG.md#_snippet_3

LANGUAGE: js
CODE:
```
// < v10
mermaid.parse(text, parseError);

//>= v10
await mermaid.parse(text).catch(parseError);
// or
try {
  await mermaid.parse(text);
} catch (err) {
  parseError(err);
}
```

----------------------------------------

TITLE: Transitions: with Text Description
DESCRIPTION: This snippet adds text to a transition to describe it.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_6

LANGUAGE: mermaid-example
CODE:
```
stateDiagram-v2
    s1 --> s2: A transition
```

----------------------------------------

TITLE: Integrating Mermaid Timeline Diagram with Lazy Loading in Webpage Using ES Modules
DESCRIPTION: Demonstrates how to asynchronously import the Mermaid library, including support for timeline diagrams, into a web page using ES module syntax. This approach enables lazy loading and async rendering, which are experimental features important for extending diagram support. It requires a modern browser environment supporting ES modules and a valid CDN URL for the Mermaid package.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_9

LANGUAGE: html
CODE:
```
<script type="module">
  import mermaid from '<CDN_URL>/mermaid@<MERMAID_VERSION>/dist/mermaid.esm.min.mjs';
</script>
```

----------------------------------------

TITLE: Defining Timeline Diagrams Using Mermaid DSL
DESCRIPTION: Demonstrates the fundamental syntax to create a timeline diagram using Mermaid's domain-specific language (DSL). The snippet starts with the 'timeline' keyword, optionally followed by a title line specifying the timeline's caption. Then it lists time periods followed by one or more events separated by colons. Events can be on the same line or subsequent indented lines. This snippet serves as a basic example illustrating chronological event sequencing. No external dependencies are required beyond Mermaid supporting timeline diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
timeline
    title History of Social Media Platform
    2002 : LinkedIn
    2004 : Facebook
         : Google
    2005 : YouTube
    2006 : Twitter
```

----------------------------------------

TITLE: Mermaid Quadrant Chart Syntax and Configuration Overview
DESCRIPTION: This section provides detailed instructions on the syntax elements, configuration parameters, and options for theming Mermaid quadrant charts. It covers how to set chart titles, axes labels, quadrant labels, plotting points, and customizing visual styles. Also explains axis directions, quadrant label placements, point rendering, and various customizable parameters with their default values.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/quadrantChart.md#_snippet_2



----------------------------------------

TITLE: Rendering a Pie Chart with Mermaid
DESCRIPTION: This snippet demonstrates a basic pie chart. It defines the chart type as "pie" and then provides the data for the chart. The labels for the pie slices are enclosed in quotes, followed by a colon and the numerical value.  This example requires no dependencies beyond the Mermaid-js library.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/pie.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
pie title Pets adopted by volunteers
    "Dogs" : 386
    "Cats" : 85
    "Rats" : 15
```

----------------------------------------

TITLE: Switching CDN Source to Continue Using Mermaid v9 (Diff Format)
DESCRIPTION: Shows how to update the CDN link in HTML to continue loading Mermaid v9 after the switch to ESM in v10. The '-' line should be replaced with the '+' line in application HTML. No dependencies required other than CDN access.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CHANGELOG.md#_snippet_1

LANGUAGE: diff
CODE:
```
- <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.js"></script>
+ <script src="https://cdn.jsdelivr.net/npm/mermaid@9/dist/mermaid.js"></script>
```

----------------------------------------

TITLE: Detecting Diagram Type using Mermaid API
DESCRIPTION: This JavaScript code demonstrates how to use the `mermaid.detectType` function to determine the diagram type of a given text. It imports the mermaid library and then uses the function on a sequence diagram definition.  The detected type is then logged to the console. Requires mermaid library to be imported.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_12

LANGUAGE: html
CODE:
```
<script type="module">
  import mermaid from './mermaid.esm.mjs';
  const graphDefinition = `sequenceDiagram
    Pumbaa->>Timon:I ate like a pig.
    Timon->>Pumbaa:Pumbaa, you ARE a pig.`;
  try {
    const type = mermaid.detectType(graphDefinition);
    console.log(type); // 'sequence'
  } catch (error) {
    // UnknownDiagramError
  }
</script>
```

----------------------------------------

TITLE: SVG with aria-roledescription in Mermaid
DESCRIPTION: This HTML snippet demonstrates the use of `aria-roledescription` attribute within an SVG element generated by Mermaid. The `aria-roledescription` is automatically set to the diagram type key, aiding accessibility by providing a description of the element's role for assistive technologies.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_0

LANGUAGE: html
CODE:
```
<svg
  aria-roledescription="stateDiagram"
  class="statediagram"
  xmlns="http://www.w3.org/2000/svg"
  width="100%"
  id="mermaid-1668720491568"
></svg>
```

----------------------------------------

TITLE: Showing Self-Messages within Loops in Mermaid Sequence Diagrams
DESCRIPTION: Illustrates how a participant (`John`) can send a message to itself within a `loop` block (`HealthCheck`) using the syntax `John->>John: Message`. This example also uses explicit participant declaration (`participant Alice`) and includes a note (`Note right of John`).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/examples.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Alice
    participant Bob
    Alice->>John: Hello John, how are you?
    loop HealthCheck
        John->>John: Fight against hypochondria
    end
    Note right of John: Rational thoughts<br/>prevail...
    John-->>Alice: Great!
    John->>Bob: How about you?
    Bob-->>John: Jolly good!
```

----------------------------------------

TITLE: Defining and Attaching Style Classes in Mermaid Flowcharts - mermaid
DESCRIPTION: This snippet demonstrates how to define style classes with specific CSS rules and attach these classes to nodes in Mermaid flowcharts using multiple syntaxes. It covers single and multiple class definitions, attaching classes to individual nodes and multiple nodes, and a shorter syntax using the ":::" operator. These features allow for consistent styling of flowchart elements and improved readability.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_56

LANGUAGE: mermaid
CODE:
```
    classDef className fill:#f9f,stroke:#333,stroke-width:4px;
```

LANGUAGE: mermaid
CODE:
```
    classDef firstClassName,secondClassName font-size:12pt;
```

LANGUAGE: mermaid
CODE:
```
    class nodeId1 className;
```

LANGUAGE: mermaid
CODE:
```
    class nodeId1,nodeId2 className;
```

LANGUAGE: mermaid
CODE:
```
flowchart LR
    A:::someclass --> B
    classDef someclass fill:#f96
```

LANGUAGE: mermaid
CODE:
```
flowchart LR
    A:::foo & B:::bar --> C:::foobar
    classDef foo stroke:#f00
    classDef bar stroke:#0f0
    classDef foobar stroke:#00f
```

LANGUAGE: mermaid
CODE:
```
    classDef default fill:#f9f,stroke:#333,stroke-width:4px;
```

----------------------------------------

TITLE: GitGraph with Different Commit Types in Mermaid
DESCRIPTION: Demonstrates the three commit types available in Mermaid Git Graphs: NORMAL (default), REVERSE (crossed circle), and HIGHLIGHT (filled rectangle).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
gitGraph
   commit id: "Normal"
   commit
   commit id: "Reverse" type: REVERSE
   commit
   commit id: "Highlight" type: HIGHLIGHT
   commit
```

----------------------------------------

TITLE: Integrating Mindmaps in HTML (Simplified)
DESCRIPTION: This code illustrates the simplified method for including Mermaid.js and its mindmap support, using the lazy loading features.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_16

LANGUAGE: html
CODE:
```
<script type="module">
  import mermaid from '<CDN_URL>/mermaid@<MERMAID_VERSION>/dist/mermaid.esm.min.mjs';
</script>
```

----------------------------------------

TITLE: Parsing Diagram Text in TypeScript
DESCRIPTION: The `parse` function parses mermaid diagram text to validate its syntax. It takes the mermaid diagram definition as text, along with a `parseOptions` object. It returns a Promise that resolves to a `ParseResult` object if the diagram is valid, or `false` if parseOptions.suppressErrors is `true`.  Errors are thrown if the diagram is invalid and `suppressErrors` is not set. This function is central to validating and understanding the diagram's structure.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
parse: (`text`, `parseOptions`) => `Promise`<`false` | [`ParseResult`](ParseResult.md)>(`text`, `parseOptions`?) => `Promise`<[`ParseResult`](ParseResult.md)>
```

----------------------------------------

TITLE: Defining Visibility in Class Members
DESCRIPTION: This snippet explains and demonstrates the use of visibility modifiers (public, private, protected, and package-level) to define the access level of class members.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_8

LANGUAGE: mermaid
CODE:
```

```

----------------------------------------

TITLE: Generating a Sankey Diagram
DESCRIPTION: This code block provides the definition of a Sankey diagram using Mermaid.js syntax. It utilizes the `sankey-beta` keyword followed by a block of CSV data.  The data is parsed by the Mermaid.js library to generate a visual representation of a flow diagram. The configuration options in the YAML header are used to configure rendering behavior.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_1

LANGUAGE: Mermaid
CODE:
```
```mermaid
---
config:
  sankey:
    showValues: false
---
sankey-beta

Agricultural 'waste',Bio-conversion,124.729
Bio-conversion,Liquid,0.597
Bio-conversion,Losses,26.862
Bio-conversion,Solid,280.322
Bio-conversion,Gas,81.144
Biofuel imports,Liquid,35
Biomass imports,Solid,35
Coal imports,Coal,11.606
Coal reserves,Coal,63.965
Coal,Solid,75.571
District heating,Industry,10.639
District heating,Heating and cooling - commercial,22.505
District heating,Heating and cooling - homes,46.184
Electricity grid,Over generation / exports,104.453
Electricity grid,Heating and cooling - homes,113.726
Electricity grid,H2 conversion,27.14
Electricity grid,Industry,342.165
Electricity grid,Road transport,37.797
Electricity grid,Agriculture,4.412
Electricity grid,Heating and cooling - commercial,40.858
Electricity grid,Losses,56.691
Electricity grid,Rail transport,7.863
Electricity grid,Lighting & appliances - commercial,90.008
Electricity grid,Lighting & appliances - homes,93.494
Gas imports,Ngas,40.719
Gas reserves,Ngas,82.233
Gas,Heating and cooling - commercial,0.129
Gas,Losses,1.401
Gas,Thermal generation,151.891
Gas,Agriculture,2.096
Gas,Industry,48.58
Geothermal,Electricity grid,7.013
H2 conversion,H2,20.897
H2 conversion,Losses,6.242
H2,Road transport,20.897
Hydro,Electricity grid,6.995
Liquid,Industry,121.066
Liquid,International shipping,128.69
Liquid,Road transport,135.835
Liquid,Domestic aviation,14.458
Liquid,International aviation,206.267
Liquid,Agriculture,3.64
Liquid,National navigation,33.218
Liquid,Rail transport,4.413
Marine algae,Bio-conversion,4.375
Ngas,Gas,122.952
Nuclear,Thermal generation,839.978
Oil imports,Oil,504.287
Oil reserves,Oil,107.703
Oil,Liquid,611.99
Other waste,Solid,56.587
Other waste,Bio-conversion,77.81
Pumped heat,Heating and cooling - homes,193.026
Pumped heat,Heating and cooling - commercial,70.672
Solar PV,Electricity grid,59.901
Solar Thermal,Heating and cooling - homes,19.263
Solar,Solar Thermal,19.263
Solar,Solar PV,59.901
Solid,Agriculture,0.882
Solid,Thermal generation,400.12
Solid,Industry,46.477
Thermal generation,Electricity grid,525.531
Thermal generation,Losses,787.129
Thermal generation,District heating,79.329
Tidal,Electricity grid,9.452
UK land based bioenergy,Bio-conversion,182.01
Wave,Electricity grid,19.013
Wind,Electricity grid,289.366
```
```

----------------------------------------

TITLE: Configuring Sequence Numbers in Mermaid via JavaScript
DESCRIPTION: Shows how to enable automatic sequence numbering for arrows in Mermaid diagrams globally by setting the `showSequenceNumbers` option to `true` within the `mermaid.initialize` configuration object in HTML/JavaScript.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_23

LANGUAGE: html
CODE:
```
<script>
  mermaid.initialize({ sequence: { showSequenceNumbers: true } });
</script>
```

----------------------------------------

TITLE: Creating Subgraphs
DESCRIPTION: Shows how to create subgraphs to group nodes in the mermaid diagram using the following syntax:
`subgraph title
    graph definition
end`
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_42

LANGUAGE: mermaid
CODE:
```
flowchart TB
    c1-->a2
    subgraph one
    a1-->a2
    end
    subgraph two
    b1-->b2
    end
    subgraph three
    c1-->c2
    end
```

----------------------------------------

TITLE: Defining Start Node Shape (Circle) in Mermaid Flowchart DSL
DESCRIPTION: This snippet illustrates defining a flowchart start node using a circle shape with the label 'Start' in Mermaid. The shape property is set to 'circle' to produce a circular node, often used to denote process start points. Requires Mermaid's support for node shape customizations. Input is Mermaid code; output is a circular start node labeled 'Start'.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_10

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: circle, label: "Start" }
```

----------------------------------------

TITLE: Defining a Subgraph
DESCRIPTION: This snippet demonstrates how to define a subgraph, grouping nodes and links within a named region of the flowchart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_91

LANGUAGE: Mermaid
CODE:
```
subgraph title
    graph definition
end
```

----------------------------------------

TITLE: Line Breaks in Notes and Messages in Mermaid
DESCRIPTION: Demonstrates how to add line breaks within notes and messages using <br/>. This improves readability of long notes/messages. No dependencies. Expected output: A sequence diagram with line breaks within Alice's message and the note.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_11

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->John: Hello John,<br/>how are you?
    Note over Alice,John: A typical interaction<br/>But now in two lines
```

----------------------------------------

TITLE: Defining a Pie Chart with Accessibility Metadata in Mermaid-js
DESCRIPTION: This snippet defines a pie chart with accessibility title and description. It includes labels for chart elements and their respective values, which can be used to generate a visual pie chart with accessible labels for screen readers. Dependencies include Mermaid.js supporting pie chart syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_10

LANGUAGE: mermaid
CODE:
```
   pie
      accTitle: My Pie Chart Accessibility Title
      accDescr: My Pie Chart Accessibility Description

    title Key elements in Product X
    "Calcium" : 42.96
    "Potassium" : 50.05
    "Magnesium" : 10.01
    "Iron" :  5
```

----------------------------------------

TITLE: Defining a Default Class - Mermaid
DESCRIPTION: This snippet shows how to define a default class in a Mermaid flowchart using the `classDef default` directive.  This class will be applied to all nodes without specific class definitions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_114

LANGUAGE: Mermaid
CODE:
```
classDef default fill:#f9f,stroke:#333,stroke-width:4px;
```

----------------------------------------

TITLE: Container Diagram Example - C4Container
DESCRIPTION: This Mermaid code defines a Container diagram for an Internet Banking System using the C4Container notation. It includes elements like Person, System, Container, and Container_Ext, and defines their relationships, communication protocols, and technologies. The example also demonstrates styling the elements and relationships.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/c4.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
C4Container
    title Container diagram for Internet Banking System

    System_Ext(email_system, "E-Mail System", "The internal Microsoft Exchange system", $tags="v1.0")
    Person(customer, Customer, "A customer of the bank, with personal bank accounts", $tags="v1.0")

    Container_Boundary(c1, "Internet Banking") {
        Container(spa, "Single-Page App", "JavaScript, Angular", "Provides all the Internet banking functionality to customers via their web browser")
        Container_Ext(mobile_app, "Mobile App", "C#, Xamarin", "Provides a limited subset of the Internet banking functionality to customers via their mobile device")
        Container(web_app, "Web Application", "Java, Spring MVC", "Delivers the static content and the Internet banking SPA")
        ContainerDb(database, "Database", "SQL Database", "Stores user registration information, hashed auth credentials, access logs, etc.")
        ContainerDb_Ext(backend_api, "API Application", "Java, Docker Container", "Provides Internet banking functionality via API")

    }

    System_Ext(banking_system, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

    Rel(customer, web_app, "Uses", "HTTPS")
    UpdateRelStyle(customer, web_app, $offsetY="60", $offsetX="90")
    Rel(customer, spa, "Uses", "HTTPS")
    UpdateRelStyle(customer, spa, $offsetY="-40")
    Rel(customer, mobile_app, "Uses")
    UpdateRelStyle(customer, mobile_app, $offsetY="-30")

    Rel(web_app, spa, "Delivers")
    UpdateRelStyle(web_app, spa, $offsetX="130")
    Rel(spa, backend_api, "Uses", "async, JSON/HTTPS")
    Rel(mobile_app, backend_api, "Uses", "async, JSON/HTTPS")
    Rel_Back(database, backend_api, "Reads from and writes to", "sync, JDBC")

    Rel(email_system, customer, "Sends e-mails to")
    UpdateRelStyle(email_system, customer, $offsetX="-45")
    Rel(backend_api, email_system, "Sends e-mails using", "sync, SMTP")
    UpdateRelStyle(backend_api, email_system, $offsetY="-60")
    Rel(backend_api, banking_system, "Uses", "sync/async, XML/HTTPS")
    UpdateRelStyle(backend_api, banking_system, $offsetY="-50", $offsetX="-140")
```

----------------------------------------

TITLE: Merging Branches in Mermaid GitGraph
DESCRIPTION: Demonstrates merging one branch into another using the `merge <branch_name>` command in a Mermaid GitGraph diagram. The example shows creating a 'develop' branch, adding commits to both 'main' and 'develop', checking out 'main', and then merging 'develop' into 'main'. This results in a merge commit visually represented by a filled double circle.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
    gitGraph
       commit
       commit
       branch develop
       commit
       commit
       commit
       checkout main
       commit
       commit
       merge develop
       commit
       commit
```

----------------------------------------

TITLE: Embedding and Initializing Multiple Diagrams via Local Path in HTML
DESCRIPTION: This HTML example is similar to the CDN example but shows how to import the Mermaid library from a local file path within a package. It includes two diagram definitions within '<pre class="mermaid">' tags and initializes Mermaid using `mermaid.initialize({ startOnLoad: true })` after the library is loaded.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/getting-started.md#_snippet_4

LANGUAGE: HTML
CODE:
```
<html lang="en">
  <head>
    <meta charset="utf-8" />
  </head>
  <body>
    <pre class="mermaid">
            graph LR
            A --- B
            B-->C[fa:fa-ban forbidden]
            B-->D(fa:fa-spinner);
    </pre>
    <pre class="mermaid">
            graph TD
            A[Client] --> B[Load Balancer]
            B --> C[Server1]
            B --> D[Server2]
    </pre>
    <script type="module">
      import mermaid from 'The/Path/In/Your/Package/mermaid.esm.mjs';
      mermaid.initialize({ startOnLoad: true });
    </script>
  </body>
</html>
```

----------------------------------------

TITLE: Integrating Mermaid with ZenUML Diagrams in a Web Page Using HTML
DESCRIPTION: This snippet demonstrates how to include Mermaid and register ZenUML as an external diagram plugin with lazy loading and async rendering features in a web page. It uses JavaScript ES module imports from CDN and awaits registration of ZenUML for rendering ZenUML sequence diagrams alongside Mermaid.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_16

LANGUAGE: html
CODE:
```
<script type="module">
  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
  import zenuml from 'https://cdn.jsdelivr.net/npm/@mermaid-js/mermaid-zenuml@0.1.0/dist/mermaid-zenuml.esm.min.mjs';
  await mermaid.registerExternalDiagrams([zenuml]);
</script>
```

----------------------------------------

TITLE: Using Comments in Mermaid Class Diagrams - Mermaid
DESCRIPTION: Exhibits the use of comments (lines beginning with %% ) within Mermaid class diagrams. Such lines are ignored by the renderer, allowing annotations and explanations inside code blocks. Only Mermaid is needed; comments precede or accompany class definitions, with no effect on diagram rendering.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_20

LANGUAGE: mermaid
CODE:
```
classDiagram
%% This whole line is a comment classDiagram class Shape <<interface>>
class Shape{
    <<interface>>
    noOfVertices
    draw()
}

```

----------------------------------------

TITLE: Example of Cookie Callback Function
DESCRIPTION: Provides JavaScript code snippet for defining a callback function triggered by node clicks, demonstrating how to integrate custom behavior with Mermaid diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_51

LANGUAGE: html
CODE:
```
<script>
  window.callback = function () {
    alert('A callback was triggered');
  };
</script>
```

----------------------------------------

TITLE: Annotating Classes with Markers (e.g., Interface) - Mermaid-Example
DESCRIPTION: Provides a Mermaid code example showing the use of annotations such as <<interface>> after class definitions, adding meta-information in the diagram. The snippet requires only Mermaid and outputs diagrams where interfaces, services, or enumerations are marked explicitly beside class blocks.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_17

LANGUAGE: mermaid
CODE:
```
classDiagram
class Shape
<<interface>> Shape
Shape : noOfVertices
Shape : draw()

```

----------------------------------------

TITLE: Specifying Cardinality (Multiplicity) in Class Relationships - Mermaid
DESCRIPTION: Illustrates the placement of cardinality or multiplicity notations near association arrows in a Mermaid class diagram, using quoted values like "1", "*", or "1..*" to denote possible class instance connections. Only Mermaid is required; the snippet expects class names, relationship arrows, and multiplicity as input, producing diagrams that clarify how objects relate quantitatively.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_14

LANGUAGE: mermaid
CODE:
```
classDiagram
    Customer "1" --> "*" Ticket
    Student "1" --> "1..*" Course
    Galaxy --> "many" Star : Contains

```

----------------------------------------

TITLE: Rendering a Configured Pie Chart with Mermaid - Mermaid
DESCRIPTION: This snippet shows how to create an advanced pie chart using Mermaid, complete with custom configuration. The YAML front matter configures the label text position and the outer stroke width via 'themeVariables', and the 'showData' flag ensures that actual data values are displayed next to legend entries. The chart visualizes four elements ("Calcium", "Potassium", "Magnesium", and "Iron") with both integer and floating-point values, illustrating support for precise data rendering. Configuration settings such as 'textPosition' and 'pieOuterStrokeWidth' allow further customization of the chart's appearance.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/pie.md#_snippet_1

LANGUAGE: Mermaid
CODE:
```
---
config:
  pie:
    textPosition: 0.5
  themeVariables:
    pieOuterStrokeWidth: "5px"
---
pie showData
    title Key elements in Product X
    "Calcium" : 42.96
    "Potassium" : 50.05
    "Magnesium" : 10.01
    "Iron" :  5
```

----------------------------------------

TITLE: Alternative and Optional Paths (alt/opt) - Mermaid
DESCRIPTION: Illustrates how to show alternative execution paths using the `alt` block (with optional `else`) and optional paths using the `opt` block. These blocks represent conditional logic in the sequence.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_14

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->>Bob: Hello Bob, how are you?
    alt is sick
        Bob->>Alice: Not so good :(
    else is well
        Bob->>Alice: Feeling fresh like a daisy
    end
    opt Extra response
        Bob->>Alice: Thanks for asking
    end
```

----------------------------------------

TITLE: Setting Flowchart Direction Top to Bottom (TD) in Mermaid
DESCRIPTION: This snippet demonstrates how to set the direction of a Mermaid flowchart to top-to-bottom using the `TD` or `TB` keyword. It creates a simple flowchart with two nodes connected by an edge.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_4

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    Start --> Stop
```

----------------------------------------

TITLE: Specifying Cardinality (Multiplicity) in Class Relationships - Mermaid-Example
DESCRIPTION: Features a concrete Mermaid example showing multiplicity annotations ('1', '*', '1..*', 'many') on class diagram relationships, to visually represent allowed numbers of associated entities per UML standards. This snippet needs only Mermaid, and outputs clear, quantified association lines between classes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_15

LANGUAGE: mermaid
CODE:
```
classDiagram
    Customer "1" --> "*" Ticket
    Student "1" --> "1..*" Course
    Galaxy --> "many" Star : Contains

```

----------------------------------------

TITLE: Setting Site Configuration in Mermaid (TypeScript)
DESCRIPTION: The `setSiteConfig` function sets the site-level configuration within the Mermaid library. It takes a `MermaidConfig` object as input, which serves as the new site configuration. The function updates the `siteConfig` with the provided values.  This configuration is protected for repeated usage, and calling reset() resets the currentConfig to the siteConfig. Calling reset(configApi.defaultConfig) resets both siteConfig and currentConfig to the defaultConfig. This is crucial for managing and applying specific site-related customizations.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/config/functions/setSiteConfig.md#_snippet_0



----------------------------------------

TITLE: Annotation of Classes in Mermaid Class Diagram
DESCRIPTION: This snippet showcases the use of annotations in Mermaid class diagrams to provide additional metadata about classes. Annotations are defined within double angle brackets `<<...>>` and can be used to represent interfaces, abstract classes, services, or enumerations. The snippet demonstrates two methods: defining the annotation on a separate line and within a nested structure.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_16

LANGUAGE: mermaid
CODE:
```
classDiagram
class Shape
<<interface>> Shape
Shape : noOfVertices
Shape : draw()
```

LANGUAGE: mermaid
CODE:
```
classDiagram
class Shape{
    <<interface>>
    noOfVertices
    draw()
}
class Color{
    <<enumeration>>
    RED
    BLUE
    GREEN
    WHITE
    BLACK
}
```

----------------------------------------

TITLE: Modeling Decisions with Choices (<<choice>>)
DESCRIPTION: Demonstrates modeling decision points with the '<<choice>>' stereotype, allowing multiple transition paths based on conditions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_13

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
    state if_state <<choice>>
    [*] --> IsPositive
    IsPositive --> if_state
    if_state --> False: if n < 0
    if_state --> True : if n >= 0
```

----------------------------------------

TITLE: Defining Task Dependencies with after and until in Mermaid Gantt
DESCRIPTION: Demonstrates how to use the `after` keyword to start a task after one or more other tasks finish, and the `until` keyword to define a task that runs until another task or milestone starts.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
gantt
    apple :a, 2017-07-20, 1w
    banana :crit, b, 2017-07-23, 1d
    cherry :active, c, after b a, 1d
    kiwi   :d, 2017-07-20, until b c
```

----------------------------------------

TITLE: Defining Parallel Actions in Mermaid Sequence Diagrams
DESCRIPTION: Demonstrates how to use the `par`, `and`, and `end` keywords in Mermaid to represent actions occurring concurrently between different participants in a sequence diagram. This example shows Alice sending messages to Bob and John simultaneously.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_15

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    par Alice to Bob
        Alice->>Bob: Hello guys!
    and Alice to John
        Alice->>John: Hello guys!
    end
    Bob-->>Alice: Hi Alice!
    John-->>Alice: Hi Alice!
```

----------------------------------------

TITLE: Creating a C4 Container Diagram using Mermaid
DESCRIPTION: This snippet illustrates the `C4Container` diagram type. It defines elements like `System_Ext`, `Person`, `Container`, `Container_Ext`, `ContainerDb`, and uses `Container_Boundary`. Relationships (`Rel`, `Rel_Back`) connect these elements, and `UpdateRelStyle` is used to adjust relationship appearance. Elements can also have tags (`$tags`).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/c4.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
    C4Container
    title Container diagram for Internet Banking System

    System_Ext(email_system, "E-Mail System", "The internal Microsoft Exchange system", $tags="v1.0")
    Person(customer, Customer, "A customer of the bank, with personal bank accounts", $tags="v1.0")

    Container_Boundary(c1, "Internet Banking") {
        Container(spa, "Single-Page App", "JavaScript, Angular", "Provides all the Internet banking functionality to customers via their web browser")
        Container_Ext(mobile_app, "Mobile App", "C#, Xamarin", "Provides a limited subset of the Internet banking functionality to customers via their mobile device")
        Container(web_app, "Web Application", "Java, Spring MVC", "Delivers the static content and the Internet banking SPA")
        ContainerDb(database, "Database", "SQL Database", "Stores user registration information, hashed auth credentials, access logs, etc.")
        ContainerDb_Ext(backend_api, "API Application", "Java, Docker Container", "Provides Internet banking functionality via API")

    }

    System_Ext(banking_system, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

    Rel(customer, web_app, "Uses", "HTTPS")
    UpdateRelStyle(customer, web_app, $offsetY="60", $offsetX="90")
    Rel(customer, spa, "Uses", "HTTPS")
    UpdateRelStyle(customer, spa, $offsetY="-40")
    Rel(customer, mobile_app, "Uses")
    UpdateRelStyle(customer, mobile_app, $offsetY="-30")

    Rel(web_app, spa, "Delivers")
    UpdateRelStyle(web_app, spa, $offsetX="130")
    Rel(spa, backend_api, "Uses", "async, JSON/HTTPS")
    Rel(mobile_app, backend_api, "Uses", "async, JSON/HTTPS")
    Rel_Back(database, backend_api, "Reads from and writes to", "sync, JDBC")

    Rel(email_system, customer, "Sends e-mails to")
    UpdateRelStyle(email_system, customer, $offsetX="-45")
    Rel(backend_api, email_system, "Sends e-mails using", "sync, SMTP")
    UpdateRelStyle(backend_api, email_system, $offsetY="-60")
    Rel(backend_api, banking_system, "Uses", "sync/async, XML/HTTPS")
    UpdateRelStyle(backend_api, banking_system, $offsetY="-50", $offsetX="-140")
```

----------------------------------------

TITLE: Full Kanban Diagram Example - Mermaid
DESCRIPTION: This snippet provides a full example of a Mermaid Kanban diagram, including column definitions, task assignments, metadata, and a configuration block with `ticketBaseUrl`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/kanban.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
---
config:
  kanban:
    ticketBaseUrl: 'https://mermaidchart.atlassian.net/browse/#TICKET#'
---
kanban
  Todo
    [Create Documentation]
    docs[Create Blog about the new diagram]
  [In progress]
    id6[Create renderer so that it works in all cases. We also add some extra text here for testing purposes. And some more just for the extra flare.]
  id9[Ready for deploy]
    id8[Design grammar]@{ assigned: 'knsv' }
  id10[Ready for test]
    id4[Create parsing tests]@{ ticket: MC-2038, assigned: 'K.Sveidqvist', priority: 'High' }
    id66[last item]@{ priority: 'Very Low', assigned: 'knsv' }
  id11[Done]
    id5[define getData]
    id2[Title of diagram is more than 100 chars when user duplicates diagram with 100 char]@{ ticket: MC-2036, priority: 'Very High'}
    id3[Update DB function]@{ ticket: MC-2037, assigned: knsv, priority: 'High' }

  id12[Can't reproduce]
    id3[Weird flickering in Firefox]
```

----------------------------------------

TITLE: Using ClassDef for Edge Animations
DESCRIPTION: This snippet demonstrates animating edges by assigning a class and defining animation properties within a classDef statement. Note the escaping of commas in the `stroke-dasharray` property.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_83

LANGUAGE: Mermaid
CODE:
```
flowchart LR
  A e1@--> B
  classDef animate stroke-dasharray: 9\,5,stroke-dashoffset: 900,animation: dash 25s linear infinite;
  class e1 animate
```

----------------------------------------

TITLE: ER Diagram with Accessible Title and Description in Mermaid
DESCRIPTION: This Mermaid code snippet demonstrates adding accessibility features to an Entity Relationship Diagram (ERD). The snippet includes the `accTitle` and `accDescr` keywords to provide a title and description, making the diagram more accessible to users with screen readers or other assistive technologies.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
erDiagram
      accTitle: My Entity Relationship Diagram
      accDescr: My Entity Relationship Diagram Description

    CUSTOMER ||--o{ ORDER : places
    ORDER ||--|{ LINE-ITEM : contains
    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses
```

----------------------------------------

TITLE: Creating a Sankey Diagram - Basic Syntax Example
DESCRIPTION: This is a demonstration of basic Sankey diagram syntax. The example uses the keyword `sankey-beta` and expects comma-separated values representing source, target, and value. It's a simplified illustration to showcase the core data format required by Mermaid for creating a sankey diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_2

LANGUAGE: Mermaid
CODE:
```
```mermaid-example
sankey-beta

%% source,target,value
Electricity grid,Over generation / exports,104.453
Electricity grid,Heating and cooling - homes,113.726
Electricity grid,H2 conversion,27.14
```
```

----------------------------------------

TITLE: Initializing Mermaid after Document Ready
DESCRIPTION: JavaScript code using jQuery to initialize Mermaid after the page (including fonts) has fully loaded to prevent labels rendering out of bounds.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_5

LANGUAGE: javascript
CODE:
```
$(document).ready(function () {
  mermaid.initialize();
});
```

----------------------------------------

TITLE: Integrating ZenUML with a Website
DESCRIPTION: This snippet demonstrates how to integrate Mermaid, including ZenUML diagram support, into a web page using JavaScript modules and CDN links. It shows how to register ZenUML as an external diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_15

LANGUAGE: html
CODE:
```
<script type="module">
  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
  import zenuml from 'https://cdn.jsdelivr.net/npm/@mermaid-js/mermaid-zenuml@0.1.0/dist/mermaid-zenuml.esm.min.mjs';
  await mermaid.registerExternalDiagrams([zenuml]);
</script>
```

----------------------------------------

TITLE: Setting Diagram Direction
DESCRIPTION: This snippet shows how to set the direction (e.g., left-to-right) of the state diagram using the `direction` keyword.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_15

LANGUAGE: mermaid-example
CODE:
```
stateDiagram
    direction LR
    [*] --> A
    A --> B
    B --> C
    state B {
      direction LR
      a --> b
    }
    B --> D
```

----------------------------------------

TITLE: Adding Keys and Comments to Attributes
DESCRIPTION: This snippet illustrates how to define keys (PK, FK, UK) and comments for attributes within an ERD. Keys are added after the attribute name and are separated by commas if multiple keys are applied. Comments are placed after the key or attribute and enclosed in double quotes.  For example, `string driversLicense PK "The license #"`. This functionality enhances attribute descriptions within the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_8

LANGUAGE: mermaid
CODE:
```
erDiagram
    CAR ||--o{ NAMED-DRIVER : allows
    CAR {
        string registrationNumber PK
        string make
        string model
        string[] parts
    }
    PERSON ||--o{ NAMED-DRIVER : is
    PERSON {
        string driversLicense PK "The license #"
        string(99) firstName "Only 99 characters are allowed"
        string lastName
        string phone UK
        int age
    }
    NAMED-DRIVER {
        string carRegistrationNumber PK, FK
        string driverLicence PK, FK
    }
    MANUFACTURER only one to zero or more CAR : makes
```

----------------------------------------

TITLE: Changing Diagram Direction in Mermaid
DESCRIPTION: Shows how to use the `direction` statement at the beginning of the diagram definition to change the rendering orientation. This example uses `LR` to render the diagram from Left to Right, overriding the default Top to Bottom direction.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/requirementDiagram.md#_snippet_3

LANGUAGE: Mermaid
CODE:
```
requirementDiagram

direction LR

requirement test_req {
    id: 1
    text: the test text.
    risk: high
    verifymethod: test
}

element test_entity {
    type: simulation
}

test_entity - satisfies -> test_req
```

----------------------------------------

TITLE: Defining Relationships with Labels
DESCRIPTION: This snippet adds labels to describe the relationships between classes. It describes different relations and their nature using labels, clarifying the purpose of each relationship.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_11

LANGUAGE: mermaid
CODE:
```
classDiagram
classA <|-- classB : implements
classC *-- classD : composition
classE o-- classF : aggregation
```

----------------------------------------

TITLE: Correcting Incorrect Linking in Mermaid Diagrams
DESCRIPTION: This snippet demonstrates the correct linking syntax using arrows (--> or ---) to specify the direction and type of connection between blocks in a Mermaid diagram. It corrects an example of incorrect linking where a space was used between blocks instead of arrows. This is essential for defining relationships and displaying the diagram correctly. No dependencies are required, as it's a Mermaid syntax example. The input is the Mermaid syntax, and the output is a correctly rendered diagram showing the link between A and B.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_7

LANGUAGE: Mermaid
CODE:
```
block-beta
  A space B
  A --> B
```

----------------------------------------

TITLE: Creating C4 Component Diagram for API Application with Mermaid
DESCRIPTION: This snippet demonstrates how to create a C4 Component diagram for an Internet Banking System API Application. It visualizes containers, components, and their relationships, highlighting the internal structure of the API application.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/c4.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
C4Component
title Component diagram for Internet Banking System - API Application

Container(spa, "Single Page Application", "javascript and angular", "Provides all the internet banking functionality to customers via their web browser.")
Container(ma, "Mobile App", "Xamarin", "Provides a limited subset to the internet banking functionality to customers via their mobile device.")
ContainerDb(db, "Database", "Relational Database Schema", "Stores user registration information, hashed authentication credentials, access logs, etc.")
System_Ext(mbs, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

Container_Boundary(api, "API Application") {
    Component(sign, "Sign In Controller", "MVC Rest Controller", "Allows users to sign in to the internet banking system")
    Component(accounts, "Accounts Summary Controller", "MVC Rest Controller", "Provides customers with a summary of their bank accounts")
    Component(security, "Security Component", "Spring Bean", "Provides functionality related to singing in, changing passwords, etc.")
    Component(mbsfacade, "Mainframe Banking System Facade", "Spring Bean", "A facade onto the mainframe banking system.")

    Rel(sign, security, "Uses")
    Rel(accounts, mbsfacade, "Uses")
    Rel(security, db, "Read & write to", "JDBC")
    Rel(mbsfacade, mbs, "Uses", "XML/HTTPS")
}

Rel_Back(spa, sign, "Uses", "JSON/HTTPS")
Rel(spa, accounts, "Uses", "JSON/HTTPS")

Rel(ma, sign, "Uses", "JSON/HTTPS")
Rel(ma, accounts, "Uses", "JSON/HTTPS")

UpdateRelStyle(spa, sign, $offsetY="-40")
UpdateRelStyle(spa, accounts, $offsetX="40", $offsetY="40")

UpdateRelStyle(ma, sign, $offsetX="-90", $offsetY="40")
UpdateRelStyle(ma, accounts, $offsetY="-40")

    UpdateRelStyle(sign, security, $offsetX="-160", $offsetY="10")
    UpdateRelStyle(accounts, mbsfacade, $offsetX="140", $offsetY="10")
    UpdateRelStyle(security, db, $offsetY="-40")
    UpdateRelStyle(mbsfacade, mbs, $offsetY="-40")
```

----------------------------------------

TITLE: Shorthand Activation/Deactivation in Mermaid
DESCRIPTION: Demonstrates the shorthand notation (+/- suffix) for activating and deactivating actors. This provides a more concise way to represent actor activations. No dependencies. Expected output: A sequence diagram with Alice and John activation/deactivation indicated via +/- notation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->>+John: Hello John, how are you?
    John-->>-Alice: Great!
```

----------------------------------------

TITLE: Defining Milestones in Mermaid Gantt
DESCRIPTION: Illustrates the syntax for adding milestones to a Mermaid Gantt chart. Milestones are defined with the `milestone` keyword, an ID, a start time, and a duration, representing a specific point in time.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
gantt
    dateFormat HH:mm
    axisFormat %H:%M
    Initial milestone : milestone, m1, 17:49, 2m
    Task A : 10m
    Task B : 5m
    Final milestone : milestone, m2, 18:08, 4m
```

----------------------------------------

TITLE: Applying the 'dark' Theme to a Mermaid GitGraph
DESCRIPTION: Demonstrates applying the 'dark' theme suitable for dark backgrounds to a complex gitGraph diagram using configuration directives. The `theme: 'dark'` setting applies a specific color palette and style set optimized for dark interfaces.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_24

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'dark'
---
      gitGraph
        commit
        branch hotfix
        checkout hotfix
        commit
        branch develop
        checkout develop
        commit id:"ash" tag:"abc"
        branch featureB
        checkout featureB
        commit type:HIGHLIGHT
        checkout main
        checkout hotfix
        commit type:NORMAL
        checkout develop
        commit type:REVERSE
        checkout featureB
        commit
        checkout main
        merge hotfix
        checkout featureB
        commit
        checkout develop
        branch featureA
        commit
        checkout develop
        merge hotfix
        checkout featureA
        commit
        checkout featureB
        commit
        checkout develop
        merge featureA
        branch release
        checkout release
        commit
        checkout main
        commit
        checkout release
        merge main
        checkout develop
        merge release
```

----------------------------------------

TITLE: Mermaid Gantt with Comment Example
DESCRIPTION: Another example demonstrating the use of `%%` for adding comments within a Mermaid Gantt diagram definition. Comments are ignored during parsing.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_14

LANGUAGE: Mermaid
CODE:
```
gantt
    title A Gantt Diagram
    %% This is a comment
    dateFormat YYYY-MM-DD
    section Section
        A task          :a1, 2014-01-01, 30d
        Another task    :after a1, 20d
    section Another
        Task in Another :2014-01-12, 12d
        another task    :24d
```

----------------------------------------

TITLE: Two-way Relations
DESCRIPTION: This snippet describes and shows syntax for two-way relations which represent an N:M association between classes. Illustrates two-way relationships.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_12

LANGUAGE: mermaid
CODE:
```
classDiagram
    Animal <|--|> Zebra
```

----------------------------------------

TITLE: Applying Theme Directive to a Graph
DESCRIPTION: Example showing a Mermaid graph definition preceded by a directive that sets the theme to 'forest'.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
%%{init: { "theme": "forest" } }%%
graph TD
A(Forest) --> B[/Another/]
A --> C[End]
  subgraph section
  B
  C
  end
```

----------------------------------------

TITLE: Defining Relationships
DESCRIPTION: This snippet demonstrates different types of relationships in a class diagram (inheritance, composition, aggregation, association, dependency, realization, and link).  It shows the various relationship types supported.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_10

LANGUAGE: mermaid
CODE:
```
classDiagram
classA <|-- classB
classC *-- classD
classE o-- classF
classG <-- classH
classI -- classJ
classK <.. classL
classM <|.. classN
classO .. classP
```

----------------------------------------

TITLE: Customizing Mermaid.run with querySelector
DESCRIPTION: This JavaScript code demonstrates how to customize `mermaid.run` to render only elements with a specific CSS selector.  It first disables automatic rendering on load and then calls `mermaid.run` with a `querySelector` option to target elements with the class `.someOtherClass`. Requires mermaid library to be imported.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_6

LANGUAGE: js
CODE:
```
mermaid.initialize({ startOnLoad: false });
await mermaid.run({
  querySelector: '.someOtherClass',
});
```

----------------------------------------

TITLE: Defining Decision Node Shape (Diamond) in Mermaid Flowchart DSL
DESCRIPTION: This snippet defines a decision node shaped as a diamond with the label 'Decision' within Mermaid flowcharts. Diamond shapes commonly represent decision points or branching logic in flowcharts. Requires Mermaid's capability for custom node shapes and labels. Input is a Mermaid flowchart string; output is a diamond-shaped node labeled 'Decision'.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_12

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: diamond, label: "Decision" }
```

----------------------------------------

TITLE: Showing Parallel Actions (par) - Mermaid
DESCRIPTION: Demonstrates how to represent actions happening concurrently using the `par` block. Different parallel branches are separated by the `and` keyword.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_15

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    par Alice to Bob
        Alice->>Bob: Hello guys!
    and Alice to John
        Alice->>John: Hello guys!
    end
    Bob-->>Alice: Hi Alice!
    John-->>Alice: Hi Alice!
```

----------------------------------------

TITLE: GitGraph with Commit Tags in Mermaid
DESCRIPTION: Shows how to add tags to commits in a Git Graph, similar to release tags in Git, combining various attributes like custom IDs and types.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
gitGraph
   commit
   commit id: "Normal" tag: "v1.0.0"
   commit
   commit id: "Reverse" type: REVERSE tag: "RC_1"
   commit
   commit id: "Highlight" type: HIGHLIGHT tag: "8.8.4"
   commit
```

----------------------------------------

TITLE: Configuring ELK Layout for Mermaid Diagrams using YAML
DESCRIPTION: Shows how to configure the layout engine for Mermaid diagrams to use ELK (Eclipse Layout Kernel) instead of the default (dagre). This is done by setting the `layout: elk` property within a `config` block in YAML frontmatter. ELK layout is often preferred for larger or more complex diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_15

LANGUAGE: yaml
CODE:
```
---
config:
  layout: elk
---
```

----------------------------------------

TITLE: Class Diagram Example in Mermaid
DESCRIPTION: Sample class diagram illustrating class hierarchy and relationships, including inheritance, interfaces, and object presence. Useful for visualizing object-oriented design structure.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md#_snippet_3

LANGUAGE: Markdown
CODE:
```
classDiagram
Class01 <|-- AveryLongClass : Cool
<<Interface>> Class01
Class09 --> C2 : Where am I?
Class09 --* C3
Class09 --|> Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  <<service>>
  int id
  size()
}
```

LANGUAGE: Markdown
CODE:
```
classDiagram
Class01 <|-- AveryLongClass : Cool
<<Interface>> Class01
Class09 --> C2 : Where am I?
Class09 --* C3
Class09 --|> Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  <<service>>
  int id
  size()
}
```

----------------------------------------

TITLE: Enabling Legacy MathML Rendering Mode with KaTeX Stylesheet in HTML
DESCRIPTION: Describes an HTML example demonstrating how to enable Mermaid's legacy MathML fallback mode by setting the configuration flag `legacyMathML` to true. This is useful for unsupported browsers lacking full MathML support. The snippet imports Mermaid as an ES module and initializes it with legacyMathML enabled. It also includes a link to KaTeX's CSS stylesheet, required to manually provide styling since Mermaid doesn't bundle it. Inputs involve loading Mermaid and KaTeX stylesheets in a compliant HTML5 environment; outputs are Mermaid diagrams with CSS-rendered math fallback.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/math.md#_snippet_2

LANGUAGE: html
CODE:
```
<!doctype html>
<!-- KaTeX requires the use of the HTML5 doctype. Without it, KaTeX may not render properly -->
<html lang="en">
  <head>
    <!-- Please ensure the stylesheet's version matches with the KaTeX version in your package-lock -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@{version_number}/dist/katex.min.css"
      integrity="sha384-{hash}"
      crossorigin="anonymous"
    />
  </head>

  <body>
    <script type="module">
      import mermaid from './mermaid.esm.mjs';
      mermaid.initialize({
        legacyMathML: true,
      });
    </script>
  </body>
</html>
```

----------------------------------------

TITLE: Initializing Mermaid with Legacy MathML Fallback (HTML/JS)
DESCRIPTION: This HTML snippet demonstrates how to load Mermaid as an ES module and initialize it with the `legacyMathML: true` configuration option. This setting forces Mermaid to fall back to CSS-based KaTeX rendering if the browser lacks MathML support. It also shows the necessary inclusion of the KaTeX stylesheet in the document head for this mode to function correctly.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/math.md#_snippet_2

LANGUAGE: html
CODE:
```
<!doctype html>
<!-- KaTeX requires the use of the HTML5 doctype. Without it, KaTeX may not render properly -->
<html lang="en">
  <head>
    <!-- Please ensure the stylesheet's version matches with the KaTeX version in your package-lock -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@{version_number}/dist/katex.min.css"
      integrity="sha384-{hash}"
      crossorigin="anonymous"
    />
  </head>

  <body>
    <script type="module">
      import mermaid from './mermaid.esm.mjs';
      mermaid.initialize({
        legacyMathML: true,
      });
    </script>
  </body>
</html>
```

----------------------------------------

TITLE: Complete Styling Application Example in Mermaid State Diagrams - Mermaid-Example
DESCRIPTION: This snippet comprises a complete state diagram with multiple classDefs and uses 'class' statements to apply different styles to states. Features include accessible diagram titles/descriptions, several styles (e.g., notMoving, movement, badBadEvent), state transitions, and multiple assignments of styles to the same state. Requires Mermaid with classDef support; inputs include multiple state and style statements; output is a fully styled, accessible diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_23

LANGUAGE: mermaid-example
CODE:
```
   stateDiagram
   direction TB

   accTitle: This is the accessible title
   accDescr: This is an accessible description

   classDef notMoving fill:white
   classDef movement font-style:italic
   classDef badBadEvent fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow

   [*]--> Still
   Still --> [*]
   Still --> Moving
   Moving --> Still
   Moving --> Crash
   Crash --> [*]

   class Still notMoving
   class Moving, Crash movement
   class Crash badBadEvent
   class end badBadEvent
```

----------------------------------------

TITLE: Adding Comments in Mermaid Gantt Chart
DESCRIPTION: Illustrates how to add comments within a Mermaid Gantt chart using `%%`. Explains that comments must be on their own line and are ignored by the parser.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_12

LANGUAGE: Mermaid
CODE:
```
gantt
    title A Gantt Diagram
    %% This is a comment
    dateFormat YYYY-MM-DD
    section Section
        A task          :a1, 2014-01-01, 30d
        Another task    :after a1, 20d
    section Another
        Task in Another :2014-01-12, 12d
        another task    :24d
```

----------------------------------------

TITLE: Creating a Basic Mermaid Architecture Diagram
DESCRIPTION: Demonstrates a simple architecture diagram using Mermaid's `architecture-beta` type. It defines a group named 'api' with a cloud icon and 'API' label, containing services like 'db' (database), 'disk1'/'disk2' (storage), and 'server'. Edges connect these services, specifying connection points (e.g., `:L`, `:R`, `:T`, `:B`) for layout.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
architecture-beta
    group api(cloud)[API]

    service db(database)[Database] in api
    service disk1(disk)[Storage] in api
    service disk2(disk)[Storage] in api
    service server(server)[Server] in api

    db:L -- R:server
    disk1:T -- B:server
    disk2:T -- B:db
```

----------------------------------------

TITLE: Adding a Title to an XY Chart (Mermaid)
DESCRIPTION: Shows the syntax for adding a title to an XY chart using the `title` keyword followed by the title string. Quotes are required if the title contains spaces.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/xyChart.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
xychart-beta
    title "This is a simple example"
    ...
```

----------------------------------------

TITLE: Creating a C4 System Context Diagram in Mermaid
DESCRIPTION: This example demonstrates how to create a C4 System Context diagram for an Internet Banking System. It shows the relationships between customers, banking systems, and external systems with custom styling applied to elements and relationships.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/c4.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
C4Context
  title System Context diagram for Internet Banking System
  Enterprise_Boundary(b0, "BankBoundary0") {
    Person(customerA, "Banking Customer A", "A customer of the bank, with personal bank accounts.")
    Person(customerB, "Banking Customer B")
    Person_Ext(customerC, "Banking Customer C", "desc")

    Person(customerD, "Banking Customer D", "A customer of the bank, <br/> with personal bank accounts.")

    System(SystemAA, "Internet Banking System", "Allows customers to view information about their bank accounts, and make payments.")

    Enterprise_Boundary(b1, "BankBoundary") {

      SystemDb_Ext(SystemE, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

      System_Boundary(b2, "BankBoundary2") {
        System(SystemA, "Banking System A")
        System(SystemB, "Banking System B", "A system of the bank, with personal bank accounts. next line.")
      }

      System_Ext(SystemC, "E-mail system", "The internal Microsoft Exchange e-mail system.")
      SystemDb(SystemD, "Banking System D Database", "A system of the bank, with personal bank accounts.")

      Boundary(b3, "BankBoundary3", "boundary") {
        SystemQueue(SystemF, "Banking System F Queue", "A system of the bank.")
        SystemQueue_Ext(SystemG, "Banking System G Queue", "A system of the bank, with personal bank accounts.")
      }
    }
  }

  BiRel(customerA, SystemAA, "Uses")
  BiRel(SystemAA, SystemE, "Uses")
  Rel(SystemAA, SystemC, "Sends e-mails", "SMTP")
  Rel(SystemC, customerA, "Sends e-mails to")

  UpdateElementStyle(customerA, $fontColor="red", $bgColor="grey", $borderColor="red")
  UpdateRelStyle(customerA, SystemAA, $textColor="blue", $lineColor="blue", $offsetX="5")
  UpdateRelStyle(SystemAA, SystemE, $textColor="blue", $lineColor="blue", $offsetY="-10")
  UpdateRelStyle(SystemAA, SystemC, $textColor="blue", $lineColor="blue", $offsetY="-40", $offsetX="-50")
  UpdateRelStyle(SystemC, customerA, $textColor="red", $lineColor="red", $offsetX="-50", $offsetY="20")

  UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1")
```

----------------------------------------

TITLE: Comprehensive Mermaid Requirement Diagram Example
DESCRIPTION: This snippet showcases a larger Requirement diagram incorporating multiple requirement types (requirement, functionalRequirement, performanceRequirement, interfaceRequirement, physicalRequirement, designConstraint), elements with types and document references ('docRef'), and various relationship types (satisfies, traces, contains, derives, refines, verifies, copies).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/requirementDiagram.md#_snippet_2

LANGUAGE: Mermaid
CODE:
```
    requirementDiagram

    requirement test_req {
    id: 1
    text: the test text.
    risk: high
    verifymethod: test
    }

    functionalRequirement test_req2 {
    id: 1.1
    text: the second test text.
    risk: low
    verifymethod: inspection
    }

    performanceRequirement test_req3 {
    id: 1.2
    text: the third test text.
    risk: medium
    verifymethod: demonstration
    }

    interfaceRequirement test_req4 {
    id: 1.2.1
    text: the fourth test text.
    risk: medium
    verifymethod: analysis
    }

    physicalRequirement test_req5 {
    id: 1.2.2
    text: the fifth test text.
    risk: medium
    verifymethod: analysis
    }

    designConstraint test_req6 {
    id: 1.2.3
    text: the sixth test text.
    risk: medium
    verifymethod: analysis
    }

    element test_entity {
    type: simulation
    }

    element test_entity2 {
    type: word doc
    docRef: reqs/test_entity
    }

    element test_entity3 {
    type: "test suite"
    docRef: github.com/all_the_tests
    }


    test_entity - satisfies -> test_req2
    test_req - traces -> test_req2
    test_req - contains -> test_req3
    test_req3 - contains -> test_req4
    test_req4 - derives -> test_req5
    test_req5 - refines -> test_req6
    test_entity3 - verifies -> test_req5
    test_req <- copies - test_entity2
```

----------------------------------------

TITLE: Flowchart with Markdown Strings - Mermaid
DESCRIPTION: This snippet demonstrates the use of markdown strings in Mermaid flowcharts for enhanced text formatting.  It showcases how to use bold and italic text within node, edge, and subgraph labels, and how text automatically wraps within labels.  The `htmlLabels` configuration needs to be set to `false` for markdown to work.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_96

LANGUAGE: Mermaid
CODE:
```
config:
  flowchart:
    htmlLabels: false
---
flowchart LR
subgraph "One"
  a("`The **cat**
  in the hat`") -- "edge label" --> b{{"`The **dog** in the hog`"}}
end
subgraph "`**Two**`"
  c("`The **cat**
  in the hat`") -- "`Bold **edge label**`" --> d("The dog in the hog")
end
```

----------------------------------------

TITLE: Defining Mermaid Configuration Directives (Single-line)
DESCRIPTION: Shows the concise single-line syntax for defining Mermaid directives: `%%{init: { **insert configuration options here** } }%%`. This is useful for simpler configuration overrides.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
%%{init: { **insert configuration options here** } }%%
```

----------------------------------------

TITLE: Adding Comments to Mermaid Sequence Diagrams
DESCRIPTION: Explains how to include comments within Mermaid sequence diagram code using the `%%` prefix. Comments must be on their own line and are ignored by the parser, useful for code annotation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_21

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->>John: Hello John, how are you?
    %% this is a comment
    John-->>Alice: Great!
```

----------------------------------------

TITLE: Applying the 'base' Theme to a Mermaid GitGraph
DESCRIPTION: Example of applying the 'base' theme to a complex gitGraph diagram using configuration directives. The `theme: 'base'` setting modifies the visual appearance (colors, styles) of the graph.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_21

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
---
      gitGraph
        commit
        branch hotfix
        checkout hotfix
        commit
        branch develop
        checkout develop
        commit id:"ash" tag:"abc"
        branch featureB
        checkout featureB
        commit type:HIGHLIGHT
        checkout main
        checkout hotfix
        commit type:NORMAL
        checkout develop
        commit type:REVERSE
        checkout featureB
        commit
        checkout main
        merge hotfix
        checkout featureB
        commit
        checkout develop
        branch featureA
        commit
        checkout develop
        merge hotfix
        checkout featureA
        commit
        checkout featureB
        commit
        checkout develop
        merge featureA
        branch release
        checkout release
        commit
        checkout main
        commit
        checkout release
        merge main
        checkout develop
        merge release
```

----------------------------------------

TITLE: Creating a Gantt Chart with Mermaid JavaScript
DESCRIPTION: This snippet demonstrates how to create a Gantt chart representing tasks with their timelines using Mermaid Gantt syntax. It defines sections, marks completions, and supports parallel tasks. Required dependency is Mermaid; tasks are defined with labels, IDs, and durations. Inputs are task specifications, and output is a visual timeline, constrained to the supported Gantt features in Mermaid.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
gantt
    section Section
    Completed :done,    des1, 2014-01-06,2014-01-08
    Active        :active,  des2, 2014-01-07, 3d
    Parallel 1   :         des3, after des1, 1d
    Parallel 2   :         des4, after des1, 1d
    Parallel 3   :         des5, after des3, 1d
    Parallel 4   :         des6, after des4, 1d
```

----------------------------------------

TITLE: Defining Class Styles in Mermaid Class Diagrams
DESCRIPTION: This code snippet shows how to define reusable style classes for Mermaid class diagrams using the `classDef` keyword. It defines a class with specific styling properties. This style can then be applied to nodes using the `cssClass` command.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_26

LANGUAGE: mermaid
CODE:
```
classDiagram
    class Animal:::someclass
    classDef someclass fill:#f96
```

----------------------------------------

TITLE: Merging Branches and Adding Merge Attributes in GitGraph - Mermaid
DESCRIPTION: This advanced example demonstrates multiple branches, checkouts, merges, and the use of merge attributes such as custom ID, tag, and type. The 'merge' keyword joins two branch histories, creating a visually distinct merge commit that can be annotated. This snippet highlights Mermaid's support for detailed, annotated merge flows, aiding in complex workflow visualization and planning.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
gitGraph
   commit id: "1"
   commit id: "2"
   branch nice_feature
   checkout nice_feature
   commit id: "3"
   checkout main
   commit id: "4"
   checkout nice_feature
   branch very_nice_feature
   checkout very_nice_feature
   commit id: "5"
   checkout main
   commit id: "6"
   checkout nice_feature
   commit id: "7"
   checkout main
   merge nice_feature id: "customID" tag: "customTag" type: REVERSE
   checkout very_nice_feature
   commit id: "8"
   checkout main
   commit id: "9"
```

----------------------------------------

TITLE: Defining a Service in Mermaid Architecture Diagrams
DESCRIPTION: Illustrates the basic syntax for defining a service node in a Mermaid architecture diagram. This example creates a service identified as `database1`, using the `database` icon and displaying the label 'My Database'. Services represent individual components.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
service database1(database)[My Database]
```

----------------------------------------

TITLE: Styling Mermaid Sequence Diagrams Using CSS
DESCRIPTION: This CSS snippet customizes the appearance of Mermaid sequence diagrams by defining styles for elements such as actors, messages, notes, labels, and loops. It sets colors, fonts, stroke widths, and marker properties for diagram components using relevant class selectors (e.g., .actor, .messageLine0, .noteText). No external dependencies are required, but these styles must be applied in a context where Mermaid diagrams are rendered (such as an HTML page with Mermaid.js included). The snippet expects elements to use the specified CSS classes, and overriding these styles can affect default Mermaid visuals.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_27

LANGUAGE: CSS
CODE:
```
body {
  background: white;
}

.actor {
  stroke: #ccccff;
  fill: #ececff;
}
text.actor {
  fill: black;
  stroke: none;
  font-family: Helvetica;
}

.actor-line {
  stroke: grey;
}

.messageLine0 {
  stroke-width: 1.5;
  stroke-dasharray: '2 2';
  marker-end: 'url(#arrowhead)';
  stroke: black;
}

.messageLine1 {
  stroke-width: 1.5;
  stroke-dasharray: '2 2';
  stroke: black;
}

#arrowhead {
  fill: black;
}

.messageText {
  fill: black;
  stroke: none;
  font-family: 'trebuchet ms', verdana, arial;
  font-size: 14px;
}

.labelBox {
  stroke: #ccccff;
  fill: #ececff;
}

.labelText {
  fill: black;
  stroke: none;
  font-family: 'trebuchet ms', verdana, arial;
}

.loopText {
  fill: black;
  stroke: none;
  font-family: 'trebuchet ms', verdana, arial;
}

.loopLine {
  stroke-width: 2;
  stroke-dasharray: '2 2';
  marker-end: 'url(#arrowhead)';
  stroke: #ccccff;
}

.note {
  stroke: #decc93;
  fill: #fff5ad;
}

.noteText {
  fill: black;
  stroke: none;
  font-family: 'trebuchet ms', verdana, arial;
  font-size: 14px;
}
```

----------------------------------------

TITLE: Integrating Mermaid with Marked Renderer in JavaScript
DESCRIPTION: A custom renderer for the Marked library that transforms Markdown code blocks containing sequence diagrams or graphs into Mermaid diagram HTML. It detects Mermaid syntax and wraps it in a pre tag with the mermaid class.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_12

LANGUAGE: javascript
CODE:
```
const renderer = new marked.Renderer();
renderer.code = function (code, language) {
  if (code.match(/^sequenceDiagram/) || code.match(/^graph/)) {
    return '<pre class="mermaid">' + code + '</pre>';
  } else {
    return '<pre><code>' + code + '</code></pre>';
  }
};
```

----------------------------------------

TITLE: Styling and Customizing Links, Lines, and Nodes
DESCRIPTION: Details how to style diagram elements using 'linkStyle', 'style', and curve parameters. Demonstrates customization of link appearance, line curves, and node border/background styling for improved diagram clarity and aesthetics.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_55

LANGUAGE: mermaid
CODE:
```
linkStyle 3 stroke:#ff3,stroke-width:4px,color:red;
linkStyle 1,2,7 color:blue;

%% Styling line curves
%%{ init: { 'flowchart': { 'curve': 'stepBefore' } } }%%
graph LR

```

LANGUAGE: mermaid
CODE:
```
flowchart LR
    id1(Start)-->id2(Stop)
    style id1 fill:#f9f,stroke:#333,stroke-width:4px
    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5
```

----------------------------------------

TITLE: Generating a C4 Deployment Diagram for an Internet Banking System
DESCRIPTION: This Mermaid code defines a C4 Deployment diagram for a sample Internet Banking System. It uses `C4Deployment` to initiate the diagram, `Deployment_Node` to define deployment environments (like mobile devices, servers), `Container` for applications, `ContainerDb` for databases, and `Rel` to show relationships between these components. `UpdateRelStyle` is used to adjust the visual layout of relationship lines.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/c4.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
C4Deployment
    title Deployment Diagram for Internet Banking System - Live

    Deployment_Node(mob, "Customer's mobile device", "Apple IOS or Android"){
        Container(mobile, "Mobile App", "Xamarin", "Provides a limited subset of the Internet Banking functionality to customers via their mobile device.")
    }

    Deployment_Node(comp, "Customer's computer", "Microsoft Windows or Apple macOS"){
        Deployment_Node(browser, "Web Browser", "Google Chrome, Mozilla Firefox,<br/> Apple Safari or Microsoft Edge"){
            Container(spa, "Single Page Application", "JavaScript and Angular", "Provides all of the Internet Banking functionality to customers via their web browser.")
        }
    }

    Deployment_Node(plc, "Big Bank plc", "Big Bank plc data center"){
        Deployment_Node(dn, "bigbank-api*** x8", "Ubuntu 16.04 LTS"){
            Deployment_Node(apache, "Apache Tomcat", "Apache Tomcat 8.x"){
                Container(api, "API Application", "Java and Spring MVC", "Provides Internet Banking functionality via a JSON/HTTPS API.")
            }
        }
        Deployment_Node(bb2, "bigbank-web*** x4", "Ubuntu 16.04 LTS"){
            Deployment_Node(apache2, "Apache Tomcat", "Apache Tomcat 8.x"){
                Container(web, "Web Application", "Java and Spring MVC", "Delivers the static content and the Internet Banking single page application.")
            }
        }
        Deployment_Node(bigbankdb01, "bigbank-db01", "Ubuntu 16.04 LTS"){
            Deployment_Node(oracle, "Oracle - Primary", "Oracle 12c"){
                ContainerDb(db, "Database", "Relational Database Schema", "Stores user registration information, hashed authentication credentials, access logs, etc.")
            }
        }
        Deployment_Node(bigbankdb02, "bigbank-db02", "Ubuntu 16.04 LTS") {
            Deployment_Node(oracle2, "Oracle - Secondary", "Oracle 12c") {
                ContainerDb(db2, "Database", "Relational Database Schema", "Stores user registration information, hashed authentication credentials, access logs, etc.")
            }
        }
    }

    Rel(mobile, api, "Makes API calls to", "json/HTTPS")
    Rel(spa, api, "Makes API calls to", "json/HTTPS")
    Rel_U(web, spa, "Delivers to the customer's web browser")
    Rel(api, db, "Reads from and writes to", "JDBC")
    Rel(api, db2, "Reads from and writes to", "JDBC")
    Rel_R(db, db2, "Replicates data to")

    UpdateRelStyle(spa, api, $offsetY="-40")
    UpdateRelStyle(web, spa, $offsetY="-40")
    UpdateRelStyle(api, db, $offsetY="-20", $offsetX="5")
    UpdateRelStyle(api, db2, $offsetX="-40", $offsetY="-20")
    UpdateRelStyle(db, db2, $offsetY="-10")
```

----------------------------------------

TITLE: Using Markdown Formatting in Mermaid Requirements
DESCRIPTION: Demonstrates how to apply Markdown formatting, such as bold (`**`) and italics (`*`), within the `text` field of a requirement node definition by enclosing the entire text string in double quotes. It also shows quoting the requirement name.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/requirementDiagram.md#_snippet_1

LANGUAGE: Mermaid
CODE:
```
requirementDiagram

requirement "__test_req__" {
    id: 1
    text: "*italicized text* **bold text**"
    risk: high
    verifymethod: test
}
```

----------------------------------------

TITLE: Sankey Diagram Syntax and CSV Data Format
DESCRIPTION: Details the syntax rules for creating Sankey diagrams using Mermaid.js, emphasizing the requirement for CSV data with exactly three columns representing source, target, and value. Explains how to handle empty lines, commas within data, and double quotes for special characters. This ensures correct parsing and rendering of flow data.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sankey.md#_snippet_2

LANGUAGE: markdown
CODE:
```
sankey-beta

%% source,target,value
Electricity grid,Over generation / exports,104.453
Electricity grid,Heating and cooling - homes,113.726
Electricity grid,H2 conversion,27.14

```

LANGUAGE: markdown
CODE:
```
Bio-conversion,Losses,26.862

Bio-conversion,Solid,280.322

Bio-conversion,Gas,81.144
```

LANGUAGE: markdown
CODE:
```
Pumped heat,"Heating and cooling, homes",193.026
Pumped heat,"Heating and cooling, commercial",70.672
```

LANGUAGE: markdown
CODE:
```
Pumped heat,"Heating and cooling, ""homes""",193.026
Pumped heat,"Heating and cooling, ""commercial""",70.672
```

----------------------------------------

TITLE: Customizing Mermaid Timeline Color Scheme Using Theme Variables
DESCRIPTION: Shows how to override default Mermaid theme colors for timeline diagrams by defining custom theme variables such as 'cScale0', 'cScale1', 'cScale2' for background colors and 'cScaleLabel0', 'cScaleLabel2' for foreground label colors. The snippet uses a YAML config frontmatter to specify 'themeVariables' within Mermaid, enabling up to 12 unique section colors. If sections exceed 12, colors will repeat. This customization requires Mermaid configuration supporting themeVariable overrides. The example uses red, green, and blue for timeline sections to illustrate visual changes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    cScale0: '#ff0000'
    cScaleLabel0: '#ffffff'
    cScale1: '#00ff00'
    cScale2: '#0000ff'
    cScaleLabel2: '#ffffff'
---
       timeline
        title History of Social Media Platform
          2002 : LinkedIn
          2004 : Facebook : Google
          2005 : YouTube
          2006 : Twitter
          2007 : Tumblr
          2008 : Instagram
          2010 : Pinterest
```

----------------------------------------

TITLE: Defining URL Links in Mermaid Class Diagrams
DESCRIPTION: This snippet demonstrates linking to a URL using the `link` and `click href` syntax. It sets up a link associated with a shape that, when clicked, will open in a new browser tab. Includes a tooltip.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_21

LANGUAGE: mermaid
CODE:
```
classDiagram
class Shape
link Shape "https://www.github.com" "This is a tooltip for a link"
class Shape2
click Shape2 href "https://www.github.com" "This is a tooltip for a link"
```

----------------------------------------

TITLE: Notes Spanning Multiple Participants in Mermaid
DESCRIPTION: Shows how to create notes that span multiple participants.  This is useful for annotating interactions between participants. No dependencies. Expected output: A sequence diagram with a note spanning Alice and John.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_10

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->John: Hello John, how are you?
    Note over Alice,John: A typical interaction
```

----------------------------------------

TITLE: Creating a C4 System Context Diagram using Mermaid
DESCRIPTION: This snippet demonstrates the `C4Context` diagram type in Mermaid. It defines elements like `Person`, `System`, `SystemDb_Ext`, `System_Ext`, `SystemQueue`, and boundaries using `Enterprise_Boundary` and `System_Boundary`. Relationships are established using `BiRel` and `Rel`. Styling is customized with `UpdateElementStyle`, `UpdateRelStyle`, and layout with `UpdateLayoutConfig`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/c4.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
    C4Context
      title System Context diagram for Internet Banking System
      Enterprise_Boundary(b0, "BankBoundary0") {
        Person(customerA, "Banking Customer A", "A customer of the bank, with personal bank accounts.")
        Person(customerB, "Banking Customer B")
        Person_Ext(customerC, "Banking Customer C", "desc")

        Person(customerD, "Banking Customer D", "A customer of the bank, <br/> with personal bank accounts.")

        System(SystemAA, "Internet Banking System", "Allows customers to view information about their bank accounts, and make payments.")

        Enterprise_Boundary(b1, "BankBoundary") {

          SystemDb_Ext(SystemE, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

          System_Boundary(b2, "BankBoundary2") {
            System(SystemA, "Banking System A")
            System(SystemB, "Banking System B", "A system of the bank, with personal bank accounts. next line.")
          }

          System_Ext(SystemC, "E-mail system", "The internal Microsoft Exchange e-mail system.")
          SystemDb(SystemD, "Banking System D Database", "A system of the bank, with personal bank accounts.")

          Boundary(b3, "BankBoundary3", "boundary") {
            SystemQueue(SystemF, "Banking System F Queue", "A system of the bank.")
            SystemQueue_Ext(SystemG, "Banking System G Queue", "A system of the bank, with personal bank accounts.")
          }
        }
      }

      BiRel(customerA, SystemAA, "Uses")
      BiRel(SystemAA, SystemE, "Uses")
      Rel(SystemAA, SystemC, "Sends e-mails", "SMTP")
      Rel(SystemC, customerA, "Sends e-mails to")

      UpdateElementStyle(customerA, $fontColor="red", $bgColor="grey", $borderColor="red")
      UpdateRelStyle(customerA, SystemAA, $textColor="blue", $lineColor="blue", $offsetX="5")
      UpdateRelStyle(SystemAA, SystemE, $textColor="blue", $lineColor="blue", $offsetY="-10")
      UpdateRelStyle(SystemAA, SystemC, $textColor="blue", $lineColor="blue", $offsetY="-40", $offsetX="-50")
      UpdateRelStyle(SystemC, customerA, $textColor="red", $lineColor="red", $offsetX="-50", $offsetY="20")

      UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1")
```

----------------------------------------

TITLE: System Context Diagram Example - C4Context
DESCRIPTION: This Mermaid code defines a System Context diagram for an Internet Banking System using the C4Context notation. It includes elements like Person, System, and System_Ext, and defines their relationships. The example also demonstrates styling the elements and relationships.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/c4.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
C4Context
      title System Context diagram for Internet Banking System
      Enterprise_Boundary(b0, "BankBoundary0") {
        Person(customerA, "Banking Customer A", "A customer of the bank, with personal bank accounts.")
        Person(customerB, "Banking Customer B")
        Person_Ext(customerC, "Banking Customer C", "desc")

        Person(customerD, "Banking Customer D", "A customer of the bank, <br/> with personal bank accounts.")

        System(SystemAA, "Internet Banking System", "Allows customers to view information about their bank accounts, and make payments.")

        Enterprise_Boundary(b1, "BankBoundary") {

          SystemDb_Ext(SystemE, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

          System_Boundary(b2, "BankBoundary2") {
            System(SystemA, "Banking System A")
            System(SystemB, "Banking System B", "A system of the bank, with personal bank accounts. next line.")
          }

          System_Ext(SystemC, "E-mail system", "The internal Microsoft Exchange e-mail system.")
          SystemDb(SystemD, "Banking System D Database", "A system of the bank, with personal bank accounts.")

          Boundary(b3, "BankBoundary3", "boundary") {
            SystemQueue(SystemF, "Banking System F Queue", "A system of the bank.")
            SystemQueue_Ext(SystemG, "Banking System G Queue", "A system of the bank, with personal bank accounts.")
          }
        }
      }

      BiRel(customerA, SystemAA, "Uses")
      BiRel(SystemAA, SystemE, "Uses")
      Rel(SystemAA, SystemC, "Sends e-mails", "SMTP")
      Rel(SystemC, customerA, "Sends e-mails to")

      UpdateElementStyle(customerA, $fontColor="red", $bgColor="grey", $borderColor="red")
      UpdateRelStyle(customerA, SystemAA, $textColor="blue", $lineColor="blue", $offsetX="5")
      UpdateRelStyle(SystemAA, SystemE, $textColor="blue", $lineColor="blue", $offsetY="-10")
      UpdateRelStyle(SystemAA, SystemC, $textColor="blue", $lineColor="blue", $offsetY="-40", $offsetX="-50")
      UpdateRelStyle(SystemC, customerA, $textColor="red", $lineColor="red", $offsetX="-50", $offsetY="20")

      UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1")
```

LANGUAGE: mermaid
CODE:
```
C4Context
    title Container diagram for Internet Banking System

    System_Ext(email_system, "E-Mail System", "The internal Microsoft Exchange system", $tags="v1.0")
    Person(customer, Customer, "A customer of the bank, with personal bank accounts", $tags="v1.0")

    Container_Boundary(c1, "Internet Banking") {
        Container(spa, "Single-Page App", "JavaScript, Angular", "Provides all the Internet banking functionality to customers via their web browser")
        Container_Ext(mobile_app, "Mobile App", "C#, Xamarin", "Provides a limited subset of the Internet banking functionality to customers via their mobile device")
        Container(web_app, "Web Application", "Java, Spring MVC", "Delivers the static content and the Internet banking SPA")
        ContainerDb(database, "Database", "SQL Database", "Stores user registration information, hashed auth credentials, access logs, etc.")
        ContainerDb_Ext(backend_api, "API Application", "Java, Docker Container", "Provides Internet banking functionality via API")

    }

    System_Ext(banking_system, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

    Rel(customer, web_app, "Uses", "HTTPS")
    UpdateRelStyle(customer, web_app, $offsetY="60", $offsetX="90")
    Rel(customer, spa, "Uses", "HTTPS")
    UpdateRelStyle(customer, spa, $offsetY="-40")
    Rel(customer, mobile_app, "Uses")
    UpdateRelStyle(customer, mobile_app, $offsetY="-30")

    Rel(web_app, spa, "Delivers")
    UpdateRelStyle(web_app, spa, $offsetX="130")
    Rel(spa, backend_api, "Uses", "async, JSON/HTTPS")
    Rel(mobile_app, backend_api, "Uses", "async, JSON/HTTPS")
    Rel_Back(database, backend_api, "Reads from and writes to", "sync, JDBC")

    Rel(email_system, customer, "Sends e-mails to")
    UpdateRelStyle(email_system, customer, $offsetX="-45")
    Rel(backend_api, email_system, "Sends e-mails using", "sync, SMTP")
    UpdateRelStyle(backend_api, email_system, $offsetY="-60")
    Rel(backend_api, banking_system, "Uses", "sync/async, XML/HTTPS")
    UpdateRelStyle(backend_api, banking_system, $offsetY="-50", $offsetX="-140")
```

----------------------------------------

TITLE: Setting Chart Title
DESCRIPTION: This snippet shows how to set the title of the quadrant chart. The title is rendered at the top of the chart and provides a brief description. There are no dependencies as this is a basic component of the diagram definition. The input is a string for the chart title.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/quadrantChart.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
quadrantChart
    title This is a sample example
```

----------------------------------------

TITLE: Adding Loops - Mermaid
DESCRIPTION: Shows how to represent repetitive sequences of actions using the `loop` block. The block starts with `loop [Loop text]` and ends with `end`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_13

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->John: Hello John, how are you?
    loop Every minute
        John-->Alice: Great!
    end
```

----------------------------------------

TITLE: Click Event Binding and Tooltips - Mermaid
DESCRIPTION: This Mermaid snippet demonstrates how to bind click events to nodes in a flowchart, linking them to either JavaScript callbacks or URLs.  It also showcases the usage of tooltips to provide additional information when hovering over the nodes.  Requires setting `securityLevel='loose'`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_99

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    A-->B
    B-->C
    C-->D
    click A callback "Tooltip for a callback"
    click B "https://www.github.com" "This is a tooltip for a link"
    click C call callback() "Tooltip for a callback"
    click D href "https://www.github.com" "This is a tooltip for a link"
```

----------------------------------------

TITLE: Structuring User Journey Diagram - Mermaid
DESCRIPTION: Illustrates the fundamental structure of a Mermaid user journey diagram using the core `journey` keyword. It shows how to organize the diagram into distinct sections using the `section` keyword and define individual tasks within those sections. Each task includes a name, a score (representing the user's feeling), and a comma-separated list of actors involved.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/userJourney.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
journey
    title My working day
    section Go to work
      Make tea: 5: Me
      Go upstairs: 3: Me
      Do work: 1: Me, Cat
    section Go home
      Go downstairs: 5: Me
      Sit down: 5: Me
```

----------------------------------------

TITLE: Creating a System Context C4 Diagram in Mermaid
DESCRIPTION: Demonstrates defining a System Context diagram (`C4Context`) using Mermaid's C4 syntax. It shows how to declare elements like Person, System, SystemDb, and Boundary, nest boundaries (Enterprise_Boundary, System_Boundary), establish relationships (Rel, BiRel), apply custom styles to elements and relationships (`UpdateElementStyle`, `UpdateRelStyle`), and configure layout (`UpdateLayoutConfig`). This example showcases basic structure and styling capabilities.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/c4.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
    C4Context
      title System Context diagram for Internet Banking System
      Enterprise_Boundary(b0, "BankBoundary0") {
        Person(customerA, "Banking Customer A", "A customer of the bank, with personal bank accounts.")
        Person(customerB, "Banking Customer B")
        Person_Ext(customerC, "Banking Customer C", "desc")

        Person(customerD, "Banking Customer D", "A customer of the bank, <br/> with personal bank accounts.")

        System(SystemAA, "Internet Banking System", "Allows customers to view information about their bank accounts, and make payments.")

        Enterprise_Boundary(b1, "BankBoundary") {

          SystemDb_Ext(SystemE, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

          System_Boundary(b2, "BankBoundary2") {
            System(SystemA, "Banking System A")
            System(SystemB, "Banking System B", "A system of the bank, with personal bank accounts. next line.")
          }

          System_Ext(SystemC, "E-mail system", "The internal Microsoft Exchange e-mail system.")
          SystemDb(SystemD, "Banking System D Database", "A system of the bank, with personal bank accounts.")

          Boundary(b3, "BankBoundary3", "boundary") {
            SystemQueue(SystemF, "Banking System F Queue", "A system of the bank.")
            SystemQueue_Ext(SystemG, "Banking System G Queue", "A system of the bank, with personal bank accounts.")
          }
        }
      }

      BiRel(customerA, SystemAA, "Uses")
      BiRel(SystemAA, SystemE, "Uses")
      Rel(SystemAA, SystemC, "Sends e-mails", "SMTP")
      Rel(SystemC, customerA, "Sends e-mails to")

      UpdateElementStyle(customerA, $fontColor="red", $bgColor="grey", $borderColor="red")
      UpdateRelStyle(customerA, SystemAA, $textColor="blue", $lineColor="blue", $offsetX="5")
      UpdateRelStyle(SystemAA, SystemE, $textColor="blue", $lineColor="blue", $offsetY="-10")
      UpdateRelStyle(SystemAA, SystemC, $textColor="blue", $lineColor="blue", $offsetY="-40", $offsetX="-50")
      UpdateRelStyle(SystemC, customerA, $textColor="red", $lineColor="red", $offsetX="-50", $offsetY="20")

      UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1")
```

----------------------------------------

TITLE: Binding Events to Rendered Mermaid Diagram
DESCRIPTION: This JavaScript code demonstrates how to bind events to a rendered Mermaid diagram after it has been inserted into the DOM. It imports the mermaid library, defines a graph definition, renders the diagram using `mermaid.render`, inserts the SVG code into the DOM, and then calls the `bindFunctions` function returned by `mermaid.render` to bind the events. Requires mermaid library to be imported.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_13

LANGUAGE: javascript
CODE:
```
// Example of using the bindFunctions
const drawDiagram = async function () {
  element = document.querySelector('#graphDiv');
  const graphDefinition = 'graph TB\na-->b';
  const { svg, bindFunctions } = await mermaid.render('graphDiv', graphDefinition);
  element.innerHTML = svg;
  // This can also be written as `bindFunctions?.(element);` using the `?` shorthand.
  if (bindFunctions) {
    bindFunctions(element);
  }
};
```

----------------------------------------

TITLE: GitGraph with Branch Checkout in Mermaid
DESCRIPTION: Illustrates how to switch between branches in a Git Graph using the checkout command, showing commits being applied to different branches.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
gitGraph
   commit
   commit
   branch develop
   commit
   commit
   commit
   checkout main
   commit
   commit
```

----------------------------------------

TITLE: State Declaration: id: Description
DESCRIPTION: This snippet shows another way to define a state with a description, using a colon to separate the id and description.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_4

LANGUAGE: mermaid-example
CODE:
```
stateDiagram-v2
    s2 : This is a state description
```

----------------------------------------

TITLE: Adding Notes in Mermaid Class Diagrams
DESCRIPTION: This snippet demonstrates how to add notes to a Mermaid class diagram using the `note` keyword.  General notes are added with `note "line1\nline2"`.  Notes for specific classes are added using `note for <CLASS NAME> "line1\nline2"`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_20

LANGUAGE: mermaid
CODE:
```
classDiagram
    note "This is a general note"
    note for MyClass "This is a note for a class"
    class MyClass{
    }
```

----------------------------------------

TITLE: Styling Mermaid Sequence Diagrams Using CSS Classes
DESCRIPTION: This snippet provides a sample stylesheet that defines the appearance of various elements in Mermaid sequence diagrams. It assigns colors, fonts, strokes, and fills for actors, messages, notes, loops, labels, and arrows using specific CSS classes outlined in the document. This requires applying CSS styling during diagram rendering, either embedded or linked. Input is CSS rules targeting Mermaid's SVG or HTML elements, output is visually styled and customized sequence diagrams consistent with the defined theme.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_27

LANGUAGE: css
CODE:
```
body {
  background: white;
}

.actor {
  stroke: #ccccff;
  fill: #ececff;
}
text.actor {
  fill: black;
  stroke: none;
  font-family: Helvetica;
}

.actor-line {
  stroke: grey;
}

.messageLine0 {
  stroke-width: 1.5;
  stroke-dasharray: '2 2';
  marker-end: 'url(#arrowhead)';
  stroke: black;
}

.messageLine1 {
  stroke-width: 1.5;
  stroke-dasharray: '2 2';
  stroke: black;
}

#arrowhead {
  fill: black;
}

.messageText {
  fill: black;
  stroke: none;
  font-family: 'trebuchet ms', verdana, arial;
  font-size: 14px;
}

.labelBox {
  stroke: #ccccff;
  fill: #ececff;
}

.labelText {
  fill: black;
  stroke: none;
  font-family: 'trebuchet ms', verdana, arial;
}

.loopText {
  fill: black;
  stroke: none;
  font-family: 'trebuchet ms', verdana, arial;
}

.loopLine {
  stroke-width: 2;
  stroke-dasharray: '2 2';
  marker-end: 'url(#arrowhead)';
  stroke: #ccccff;
}

.note {
  stroke: #decc93;
  fill: #fff5ad;
}

.noteText {
  fill: black;
  stroke: none;
  font-family: 'trebuchet ms', verdana, arial;
  font-size: 14px;
}
```

----------------------------------------

TITLE: Registering ELK Layout Loaders in Mermaid with TypeScript
DESCRIPTION: This TypeScript snippet shows how to import the core Mermaid library and the ELK layout package, then register the ELK layout loaders within Mermaid to enable ELK layout rendering capabilities. This registration is necessary for Mermaid to recognize and use ELK layout types when rendering diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid-layout-elk/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import mermaid from 'mermaid';
import elkLayouts from '@mermaid-js/layout-elk';

mermaid.registerLayoutLoaders(elkLayouts);
```

----------------------------------------

TITLE: Creating a Basic Mermaid Timeline Diagram
DESCRIPTION: Demonstrates the fundamental syntax for a Mermaid timeline diagram, including the `timeline` keyword, adding a `title`, and defining time periods with single or multiple events using the colon separator.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_0

LANGUAGE: mermaid-example
CODE:
```
timeline
    title History of Social Media Platform
    2002 : LinkedIn
    2004 : Facebook
         : Google
    2005 : YouTube
    2006 : Twitter
```

LANGUAGE: mermaid
CODE:
```
timeline
    title History of Social Media Platform
    2002 : LinkedIn
    2004 : Facebook
         : Google
    2005 : YouTube
    2006 : Twitter
```

----------------------------------------

TITLE: Creating a Simple Mindmap
DESCRIPTION: This code snippet demonstrates the basic syntax for creating a mindmap diagram. It shows how to define the root node and its children using indentation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
mindmap
  root((mindmap))
    Origins
      Long history
      ::icon(fa fa-book)
      Popularisation
        British popular psychology author Tony Buzan
    Research
      On effectiveness<br/>and features
      On Automatic creation
        Uses
            Creative techniques
            Strategic planning
            Argument mapping
```

----------------------------------------

TITLE: Styling Mermaid Diagrams with CSS
DESCRIPTION: This CSS snippet provides an example of how to style Mermaid diagrams by specifying a font-family for the `pre.mermaid` selector.  This ensures that the diagrams render with the correct font, even if the default fonts are not available.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_5

LANGUAGE: css
CODE:
```
pre.mermaid {
  font-family: 'trebuchet ms', verdana, arial;
}
```

----------------------------------------

TITLE: Mermaid Gantt Task Interaction Syntax
DESCRIPTION: Defines the syntax for binding click events to Gantt chart tasks in Mermaid. Tasks can trigger a JavaScript callback function or navigate to a URL. Note: This functionality is controlled by the 'securityLevel' configuration.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_17

LANGUAGE: Mermaid
CODE:
```
click taskId call callback(arguments)
click taskId href URL
```

----------------------------------------

TITLE: Gantt Chart with Accessible Title and Description in Mermaid
DESCRIPTION: This Mermaid code snippet demonstrates how to incorporate accessibility features into a Gantt chart. The `accTitle` and `accDescr` keywords provide a title and description for screen readers, enhancing accessibility for users with disabilities.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_8

LANGUAGE: mermaid
CODE:
```
gantt
      accTitle: My Gantt Chart Accessibility Title
      accDescr: My Gantt Chart Accessibility Description

    title A Gantt Diagram
    dateFormat  YYYY-MM-DD
    section Section
    A task           :a1, 2014-01-01, 30d
    Another task     :after a1  , 20d
    section Another
    Task in sec      :2014-01-12  , 12d
    another task      : 24d
```

----------------------------------------

TITLE: User Journey Diagram with Title and Description
DESCRIPTION: This mermaid.js snippet presents a user journey diagram augmented with an accessible title and description using the `accTitle` and `accDescr` keywords to improve accessibility.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_14

LANGUAGE: markdown
CODE:
```
```mermaid-example
  journey
      accTitle: My User Journey Diagram
      accDescr: My User Journey Diagram Description

      title My working day
      section Go to work
        Make tea: 5: Me
        Go upstairs: 3: Me
        Do work: 1: Me, Cat
      section Go home
        Go downstairs: 5: Me
        Sit down: 5: Me

```
```

----------------------------------------

TITLE: Shortcut Activation/Deactivation - Mermaid
DESCRIPTION: Illustrates a shortcut notation for activation and deactivation by appending `+` (activate) or `-` (deactivate) suffixes to the message arrow. This is a more concise way to show activation/deactivation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->>+John: Hello John, how are you?
    John-->>-Alice: Great!
```

----------------------------------------

TITLE: Mermaid Gantt Chart with Frontmatter Config and CSS
DESCRIPTION: An advanced Mermaid Gantt chart example demonstrating the use of frontmatter for configuration, including custom CSS styling within the frontmatter. Shows how to define chart settings and styles outside the main chart definition.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_20

LANGUAGE: Mermaid
CODE:
```
---
    # Frontmatter config, YAML comments
    title: Ignored if specified in chart
    displayMode: compact     #gantt specific setting but works at this level too
    config:
#        theme: forest
#        themeCSS: " #item36 { fill: CadetBlue } " 
        themeCSS: " // YAML supports multiline strings using a newline markers: \n\n            #item36 { fill: CadetBlue }       \n\n            // Custom marker workaround CSS from forum (below)    \n\n            rect[id^=workaround] { height: calc(100% - 50px) ; transform: translate(9px, 25px); y: 0; width: 1.5px; stroke: none; fill: red; }   \n\n            text[id^=workaround] { fill: red; y: 100%; font-size: 15px;}
        "
        gantt:
            useWidth: 400
            rightPadding: 0
            topAxis: true  #false
            numberSectionStyles: 2
---
gantt
    title Timeline - Gantt Sampler
    dateFormat YYYY
    axisFormat %y
    %% this next line doesn't recognise 'decade' or 'year', but will silently ignore
    tickInterval 1decade

    section Issue19062
    71   :            item71, 1900, 1930
    section Issue19401
    36   :            item36, 1913, 1935
    section Issue1300
    94   :            item94, 1910, 1915
    5    :            item5,  1920, 1925
    0    : milestone, item0,  1918, 1s
    9    : vert,              1906, 1s   %% not yet official
    64   : workaround,        1923, 1s   %% custom CSS object https://github.com/mermaid-js/mermaid/issues/3250
```

----------------------------------------

TITLE: Adding Simple Labels to Relationships - Mermaid
DESCRIPTION: Illustrates the syntax for adding text labels, such as 'implements', 'composition', or 'aggregation', to edges between classes in a Mermaid class diagram. No dependencies other than Mermaid are needed. Labels clarify the relation's intent, making diagrams more readable when presenting or documenting software models.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
classDiagram
classA <|-- classB : implements
classC *-- classD : composition
classE o-- classF : aggregation

```

----------------------------------------

TITLE: Escaping Special Characters in Mermaid Sequence Diagrams
DESCRIPTION: Demonstrates using HTML entity codes (e.g., `#9829;` for ♡, `#infin;` for ∞, `#35;` for #, `#59;` for ;) to include special characters within message text in Mermaid sequence diagrams. Both numeric and named entities are supported.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_22

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    A->>B: I #9829; you!
    B->>A: I #9829; you #infin; times more!
```

----------------------------------------

TITLE: Gantt Chart Example in Mermaid
DESCRIPTION: Creates a Gantt chart with specified date format, title, and tasks, indicating completion, activity, and future plans. Showcases planning timelines in Mermaid syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
gantt
dateFormat  YYYY-MM-DD
title Adding GANTT diagram to mermaid
excludes weekdays 2014-01-10

section A section
Completed task            :done,    des1, 2014-01-06,2014-01-08
Active task               :active,  des2, 2014-01-09, 3d
Future task               :         des3, after des2, 5d
Future task2               :         des4, after des3, 5d
```

----------------------------------------

TITLE: Generating a C4 Context Diagram for Internet Banking System in Mermaid.js
DESCRIPTION: This Mermaid.js code defines a C4 system context diagram illustrating a banking system and its interactions with customers, external systems, and internal subsystems within various boundaries. It uses diagram syntax to model relationships, system boundaries, and elements such as persons, systems, and data stores. Dependencies include Mermaid syntax understanding and familiarity with C4 modeling conventions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_9

LANGUAGE: mermaid
CODE:
```
C4Context
title System Context diagram for Internet Banking System

Person(customerA, "Banking Customer A", "A customer of the bank, with personal bank accounts.")
Person(customerB, "Banking Customer B")
Person_Ext(customerC, "Banking Customer C")
System(SystemAA, "Internet Banking System", "Allows customers to view information about their bank accounts, and make payments.")

Person(customerD, "Banking Customer D", "A customer of the bank, <br/> with personal bank accounts.")

Enterprise_Boundary(b1, "BankBoundary") {

  SystemDb_Ext(SystemE, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

  System_Boundary(b2, "BankBoundary2") {
    System(SystemA, "Banking System A")
    System(SystemB, "Banking System B", "A system of the bank, with personal bank accounts.")
  }

  System_Ext(SystemC, "E-mail system", "The internal Microsoft Exchange e-mail system.")
  SystemDb(SystemD, "Banking System D Database", "A system of the bank, with personal bank accounts.")

  Boundary(b3, "BankBoundary3", "boundary") {
    SystemQueue(SystemF, "Banking System F Queue", "A system of the bank, with personal bank accounts.")
    SystemQueue_Ext(SystemG, "Banking System G Queue", "A system of the bank, with personal bank accounts.")
  }
}

BiRel(customerA, SystemAA, "Uses")
BiRel(SystemAA, SystemE, "Uses")
Rel(SystemAA, SystemC, "Sends e-mails", "SMTP")
Rel(SystemC, customerA, "Sends e-mails to")
```

----------------------------------------

TITLE: Using Custom Icons (Iconify) in Mermaid Architecture Diagrams
DESCRIPTION: Demonstrates how to use custom icons from registered icon packs (like Iconify) within a Mermaid architecture diagram. Icons are specified using the format `packName:iconName` within the parentheses `()`. This example uses various AWS service icons (`logos:aws-lambda`, `logos:aws-aurora`, etc.) for the group and services, requiring the 'logos' pack to be registered beforehand.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_10

LANGUAGE: mermaid
CODE:
```
architecture-beta
    group api(logos:aws-lambda)[API]

    service db(logos:aws-aurora)[Database] in api
    service disk1(logos:aws-glacier)[Storage] in api
    service disk2(logos:aws-s3)[Storage] in api
    service server(logos:aws-ec2)[Server] in api

    db:L -- R:server
    disk1:T -- B:server
    disk2:T -- B:db
```

----------------------------------------

TITLE: Adding Comments in Mermaid Sequence Diagrams Using Mermaid Syntax
DESCRIPTION: This snippet shows how to insert comments inside a Mermaid sequence diagram using lines that start with `%%`. These comments are ignored by the parser and do not affect diagram rendering. Comments must be on their own lines and can contain any text including diagram syntax. This requires Mermaid parser support for comment lines in diagrams. It is useful for embedding notes or explanations that do not appear visually.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_21

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->>John: Hello John, how are you?
    %% this is a comment
    John-->>Alice: Great!
```

----------------------------------------

TITLE: Adding Comments in Mermaid State Diagrams - Mermaid-Example
DESCRIPTION: This snippet demonstrates how to add comments within Mermaid state diagram charts using '%%'. Lines beginning with '%%' are ignored by the parser, allowing for explanatory notes within diagrams without affecting rendering. Comments can be placed on their own line or after other syntax, with all subsequent text on that line treated as a comment. There are no dependencies beyond Mermaid itself. Input is diagram syntax with in-line or separate comment lines; no output is generated for comments.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_18

LANGUAGE: mermaid-example
CODE:
```
stateDiagram-v2
    [*] --> Still
    Still --> [*]
%% this is a comment
    Still --> Moving
    Moving --> Still %% another comment
    Moving --> Crash
    Crash --> [*]
```

----------------------------------------

TITLE: Checking Out a Branch in GitGraph - Mermaid
DESCRIPTION: This snippet illustrates switching between existing branches using the 'checkout' keyword. The gitGraph creates the scenario where commits are made on different branches, simulating a typical workflow where work alternates between a main and a development branch. Correct branch naming and prior creation are prerequisites for successful checkout.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
gitGraph
   commit
   commit
   branch develop
   commit
   commit
   commit
   checkout main
   commit
   commit
```

----------------------------------------

TITLE: Applying Flowchart Directive to a Graph
DESCRIPTION: Example showing a Mermaid flowchart definition preceded by a directive that modifies flowchart-specific settings like `htmlLabels` and `curve`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_13

LANGUAGE: mermaid
CODE:
```
%%{init: { "flowchart": { "htmlLabels": true, "curve": "linear" } } }%%
graph TD
A(Forest) --> B[/Another/]
A --> C[End]
  subgraph section
  B
  C
  end
```

----------------------------------------

TITLE: Rendering a Basic ZenUML Sequence Diagram
DESCRIPTION: This snippet demonstrates a simple ZenUML sequence diagram with a title and basic message exchange between two participants, Alice and John. It showcases the fundamental structure for defining interactions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
zenuml
    title Demo
    Alice->John: Hello John, how are you?
    John->Alice: Great!
    Alice->John: See you later!
```

----------------------------------------

TITLE: Applying Configuration and Theme to XY Chart (Mermaid)
DESCRIPTION: Provides a comprehensive example demonstrating how to apply both general chart configurations (like width, height, showing data labels) and theme variables (like title color) using embedded YAML within the Mermaid definition. The configuration is specified within `---config ... ---` tags.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/xyChart.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
---
config:
    xyChart:
        width: 900
        height: 600
        showDataLabel: true
    themeVariables:
        xyChart:
            titleColor: "#ff0000"
---
xychart-beta
    title "Sales Revenue"
    x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]
    y-axis "Revenue (in $)" 4000 --> 11000
    bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]
    line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]
```

----------------------------------------

TITLE: Alt (Alternative) Flows in Sequence Diagram Mermaid
DESCRIPTION: Demonstrates how to express alternative paths in a sequence diagram, using alt and else. No dependencies. Expected output: A sequence diagram where Bob's response varies depending on his health.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_14

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->>Bob: Hello Bob, how are you?
    alt is sick
        Bob->>Alice: Not so good :(
    else is well
        Bob->>Alice: Feeling fresh like a daisy
    end
    opt Extra response
        Bob->>Alice: Thanks for asking
    end
```

----------------------------------------

TITLE: Flowchart with accessible title and description (single line) in Mermaid
DESCRIPTION: This Mermaid snippet demonstrates how to add an accessible title and a single-line description to a flowchart using the `accTitle` and `accDescr` keywords. These keywords allow for adding metadata to the diagram for improved accessibility for users utilizing screen readers.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
graph LR
      accTitle: Big Decisions
      accDescr: Bob's Burgers process for making big decisions
      A[Identify Big Decision] --> B{Make Big Decision}
      B --> D[Be done]
```

----------------------------------------

TITLE: Subgraph Example
DESCRIPTION: This snippet provides an example of using subgraphs to organize a flowchart, visually grouping related nodes and links.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_92

LANGUAGE: Mermaid
CODE:
```
flowchart TB
    c1-->a2
    subgraph one
    a1-->a2
    end
    subgraph two
    b1-->b2
    end
    subgraph three
    c1-->c2
    end
```

----------------------------------------

TITLE: Configuring Mermaid Gantt Chart with JavaScript
DESCRIPTION: Example JavaScript object assigned to `mermaid.ganttConfig` containing properties like margins, bar dimensions, font sizes, date formats, and axis settings to customize the Gantt diagram rendering.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
mermaid.ganttConfig = {
  titleTopMargin: 25, // Margin top for the text over the diagram
  barHeight: 20, // The height of the bars in the graph
  barGap: 4, // The margin between the different activities in the gantt diagram
  topPadding: 75, // Margin between title and gantt diagram and between axis and gantt diagram.
  rightPadding: 75, // The space allocated for the section name to the right of the activities
  leftPadding: 75, // The space allocated for the section name to the left of the activities
  gridLineStartPadding: 10, // Vertical starting position of the grid lines
  fontSize: 12, // Font size
  sectionFontSize: 24, // Font size for sections
  numberSectionStyles: 1, // The number of alternating section styles
  axisFormat: '%d/%m', // Date/time format of the axis
  tickInterval: '1week', // Axis ticks
  topAxis: true, // When this flag is set, date labels will be added to the top of the chart
  displayMode: 'compact', // Turns compact mode on
  weekday: 'sunday', // On which day a week-based interval should start
};
```

----------------------------------------

TITLE: Link with Arrow Head and Text
DESCRIPTION: This snippet shows how to create a link with both an arrow head and text, indicating direction and providing a description of the link. Two syntaxes are provided.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_70

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    A-->|text|B
```

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    A-- text -->B
```

----------------------------------------

TITLE: Adding Notes to States and Nodes
DESCRIPTION: Shows how to add explanatory notes to states and transitions using 'note right of' or 'note left of', enhancing diagram readability.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_15

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
    State1: The state with a note
    note right of State1
        Important information! You can write
        notes.
    end note
    State1 --> State2
    note left of State2 : This is the note to the left.
```

----------------------------------------

TITLE: Customizing XY Chart with Configuration and Theme Variables
DESCRIPTION: Advanced example showing how to customize an XY chart using both configuration options (width, height, data labels) and theme variables (title color) for better visual presentation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/xyChart.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
---
config:
    xyChart:
        width: 900
        height: 600
        showDataLabel: true
    themeVariables:
        xyChart:
            titleColor: "#ff0000"
---
xychart-beta
    title "Sales Revenue"
    x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]
    y-axis "Revenue (in $)" 4000 --> 11000
    bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]
    line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]
```

----------------------------------------

TITLE: Adding Line Breaks in Messages and Notes - Mermaid
DESCRIPTION: Explains how to insert line breaks within message text and note content using the HTML break tag `<br/>`. This allows text to span multiple lines within the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_11

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->John: Hello John,<br/>how are you?
    Note over Alice,John: A typical interaction<br/>But now in two lines
```

----------------------------------------

TITLE: Setting Subgraph Directions in Mermaid.js
DESCRIPTION: Shows how to control subgraph directions within flowcharts by using the 'direction' statement, including nested directions. Highlights behavior when subgraph nodes connect externally, where direction inheritance applies.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_46

LANGUAGE: mermaid
CODE:
```
flowchart LR
  subgraph TOP
    direction TB
    subgraph B1
        direction RL
        i1 -->f1
    end
    subgraph B2
        direction BT
        i2 -->f2
    end
  end
  A --> TOP --> B
  B1 --> B2
```

----------------------------------------

TITLE: Creating System Architecture Diagrams with Mermaid Blocks
DESCRIPTION: Illustrates a software system architecture with styled components using Mermaid block diagrams. Demonstrates column layout, directional arrows, and class-based styling to create a visually organized representation of system components.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
block-beta
  columns 3
  Frontend blockArrowId6<[" "]>(right) Backend
  space:2 down<[" "]>(down)
  Disk left<[" "]>(left) Database[("Database")]

  classDef front fill:#696,stroke:#333;
  classDef back fill:#969,stroke:#333;
  class Frontend front
  class Backend,Database back
```

----------------------------------------

TITLE: Defining Reply Messages in ZenUML
DESCRIPTION: This snippet demonstrates different ways to express reply messages in ZenUML: assigning a variable from a sync message, using the `return` keyword, and using the `@return` annotator.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
zenuml
    // 1. assign a variable from a sync message.
    a = A.SyncMessage()

    // 1.1. optionally give the variable a type
    SomeType a = A.SyncMessage()

    // 2. use return keyword
    A.SyncMessage() {
    return result
    }

    // 3. use @return or @reply annotator on an async message
    @return
    A->B: result
```

----------------------------------------

TITLE: Stacked Participant Activations - Mermaid
DESCRIPTION: Shows how multiple activations can be stacked on a participant's lifeline. This is useful for illustrating nested calls or concurrent activities within a single participant.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_8

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->>+John: Hello John, how are you?
    Alice->>+John: John, can you hear me?
    John-->>-Alice: Hi Alice, I can hear you!
    John-->>-Alice: I feel great!
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Rounded
DESCRIPTION: This snippet demonstrates how to create a rounded node using the new shape definition syntax in Mermaid, setting `shape` to `rounded`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_21

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: rounded, label: "This is an event" }
```

----------------------------------------

TITLE: Configuring Kanban Diagram Ticket Base URL with YAML
DESCRIPTION: Shows how to specify the base URL for ticket links in a Kanban diagram configuration block at the beginning of a Mermaid markdown file. The ticketBaseUrl replaces the placeholder '#TICKET#' with the actual ticket number from task metadata to create clickable links to external issue trackers.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/kanban.md#_snippet_2

LANGUAGE: yaml
CODE:
```
---
config:
  kanban:
    ticketBaseUrl: 'https://yourproject.atlassian.net/browse/#TICKET#'
---
```

----------------------------------------

TITLE: Grouping Actors/Participants with Boxes in Mermaid
DESCRIPTION: Illustrates how to group actors or participants within boxes. It shows how to define boxes with labels and optional colors, creating visual groupings. No specific dependencies. Expected output: A sequence diagram with Alice and John grouped in one box, and Bob and Charley in another.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    box Purple Alice & John
    participant A
    participant J
    end
    box Another Group
    participant B
    participant C
    end
    A->>J: Hello John, how are you?
    J->>A: Great!
    A->>B: Hello Bob, how is Charley?
    B->>C: Hello Charley, how are you?
```

----------------------------------------

TITLE: Defining a Group in Mermaid Architecture Diagrams
DESCRIPTION: Illustrates the basic syntax for defining a group in a Mermaid architecture diagram. This example creates a group identified as `public_api`, using the `cloud` icon and displaying the label 'Public API'. Groups visually organize related services.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
group public_api(cloud)[Public API]
```

----------------------------------------

TITLE: Example Architecture Diagram with Junctions (Duplicate)
DESCRIPTION: This snippet is a duplicate of the architecture diagram that demonstrates the use of junctions. It defines services, junctions, and the connections between them. It also highlights the ability of a visual representation for managing edge relationships. The diagram renders the junction points for splitting or merging connections between services to depict a comprehensive network layout.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_12

LANGUAGE: Mermaid
CODE:
```
architecture-beta
    service left_disk(disk)[Disk]
    service top_disk(disk)[Disk]
    service bottom_disk(disk)[Disk]
    service top_gateway(internet)[Gateway]
    service bottom_gateway(internet)[Gateway]
    junction junctionCenter
    junction junctionRight

    left_disk:R -- L:junctionCenter
    top_disk:B -- T:junctionCenter
    bottom_disk:T -- B:junctionCenter
    junctionCenter:R -- L:junctionRight
    top_gateway:B -- T:junctionRight
    bottom_gateway:T -- B:junctionRight
```

----------------------------------------

TITLE: Sequence Diagram: Message to self in loop - Mermaid
DESCRIPTION: This snippet demonstrates a sequence diagram in Mermaid where a participant sends a message to itself within a loop. It showcases how to represent self-interaction and internal processes within a sequence diagram. Includes notes to provide context. No dependencies required, Mermaid library needs to be integrated.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Alice
    participant Bob
    Alice->>John: Hello John, how are you?
    loop HealthCheck
        John->>John: Fight against hypochondria
    end
    Note right of John: Rational thoughts<br/>prevail...
    John-->>Alice: Great!
    John->>Bob: How about you?
    Bob-->>John: Jolly good!
```

----------------------------------------

TITLE: Mermaid ER Diagram Example with ELK Layout Configuration
DESCRIPTION: Provides an example of a Mermaid ER diagram definition that includes YAML frontmatter. The frontmatter specifies a diagram `title` and configures the layout engine to use ELK via `config: { layout: elk }`. Using ELK layout requires Mermaid version 9.4+ and enabling the feature in lazy-loading configuration.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_16

LANGUAGE: mermaid-example
CODE:
```
---
title: Order example
config:
    layout: elk
---
erDiagram
    CUSTOMER ||--o{ ORDER : places
    ORDER ||--|{ LINE-ITEM : contains
    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses
```

----------------------------------------

TITLE: Changing Diagram Direction in Mermaid Requirement Diagrams
DESCRIPTION: Illustrates how to change the rendering direction of the Requirement diagram from the default Top-to-Bottom (TB) to Left-to-Right (LR) using the 'direction LR' statement at the beginning of the diagram definition.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/requirementDiagram.md#_snippet_3

LANGUAGE: Mermaid
CODE:
```
requirementDiagram

direction LR

requirement test_req {
    id: 1
    text: the test text.
    risk: high
    verifymethod: test
}

element test_entity {
    type: simulation
}

test_entity - satisfies -> test_req
```

----------------------------------------

TITLE: Grouping Time Periods into Sections in Mermaid Timeline Diagrams
DESCRIPTION: Shows how to group time periods under named sections (or ages) within a timeline diagram. Sections are declared using the 'section' keyword followed by the section name, and subsequent time periods listed belong to that section until a new section is defined. This grouping affects rendering order and colors of periods and events for visual clarity. It requires Mermaid timeline support and uses standard Mermaid syntax for timeline diagrams. This example illustrates organizing the Industrial Revolution timeline into two sections, with multiple time periods and events under each.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
timeline
    title Timeline of Industrial Revolution
    section 17th-20th century
        Industry 1.0 : Machinery, Water power, Steam <br>power
        Industry 2.0 : Electricity, Internal combustion engine, Mass production
        Industry 3.0 : Electronics, Computers, Automation
    section 21st century
        Industry 4.0 : Internet, Robotics, Internet of Things
        Industry 5.0 : Artificial intelligence, Big data, 3D printing
```

----------------------------------------

TITLE: Defining Flowchart Diagrams with ELK Layout in Mermaid Syntax
DESCRIPTION: This snippet demonstrates how to define a basic flowchart diagram in Mermaid syntax while specifying the ELK layout engine. The diagram shows node connections, and using the 'flowchart-elk' prefix or YAML configuration declares ELK as the layout engine for rendering diagrams. It shows usage of different ELK layout styles by specifying layout keys like 'elk' and 'elk.stress'.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid-layout-elk/README.md#_snippet_0

LANGUAGE: Mermaid
CODE:
```
flowchart-elk TD
  A --> B
  A --> C
```

LANGUAGE: Mermaid
CODE:
```
---
config:
  layout: elk
---

flowchart TD
  A --> B
  A --> C
```

LANGUAGE: Mermaid
CODE:
```
---
config:
  layout: elk.stress
---

flowchart TD
  A --> B
  A --> C
```

----------------------------------------

TITLE: Registering Icon Packs without Lazy Loading in JavaScript
DESCRIPTION: This approach imports and registers an icon pack directly without lazy loading. It uses the prefix defined in the icon pack itself rather than specifying a custom name, which maintains consistency with the original icon pack naming.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/icons.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import mermaid from 'mermaid';
import { icons } from '@iconify-json/logos';
mermaid.registerIconPacks([
  {
    name: icons.prefix, // To use the prefix defined in the icon pack
    icons,
  },
]);
```

----------------------------------------

TITLE: Adding JSON-Based Actor Link Menus in Mermaid Sequence Diagrams
DESCRIPTION: Demonstrates the advanced `links <actor>: <json>` syntax in Mermaid for defining multiple actor links using a JSON object structure ({ "label": "url", ... }). This offers a more structured way to define links compared to the simple syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_26

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Alice
    participant John
    links Alice: {"Dashboard": "https://dashboard.contoso.com/alice", "Wiki": "https://wiki.contoso.com/alice"}
    links John: {"Dashboard": "https://dashboard.contoso.com/john", "Wiki": "https://wiki.contoso.com/john"}
    Alice->>John: Hello John, how are you?
    John-->>Alice: Great!
    Alice-)John: See you later!
```

----------------------------------------

TITLE: Annotating Classes with Markers (e.g., Interface) - Mermaid
DESCRIPTION: Demonstrates how classes can be given additional markers or stereotypes, such as <<interface>>, within Mermaid diagrams by placing annotation lines after class definitions. Only Mermaid syntax is needed, and the output diagram visually distinguishes interfaces, abstract classes, enumerations, and services via explicit annotations.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_16

LANGUAGE: mermaid
CODE:
```
classDiagram
class Shape
<<interface>> Shape
Shape : noOfVertices
Shape : draw()

```

----------------------------------------

TITLE: Placing a Service within a Group in Mermaid Architecture Diagrams
DESCRIPTION: Shows how to place a service inside a group using the `in` keyword in Mermaid architecture diagrams. This example defines the `database1` service (database icon, 'My Database' label) and places it within the `private_api` group, indicating association.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
service database1(database)[My Database] in private_api
```

----------------------------------------

TITLE: Setting Diagram Direction in Mermaid Class Diagrams - Mermaid-Example
DESCRIPTION: Provides an example Mermaid code demonstrating the use of the 'direction' statement to change the layout flow of class diagrams, along with interrelated class entities and associations. This code requires only Mermaid and outputs a diagram with specified orientation, revealing the impact of direction on diagram readability.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_23

LANGUAGE: mermaid
CODE:
```
classDiagram
  direction RL
  class Student {
    -idCard : IdCard
  }
  class IdCard{
    -id : int
    -name : string
  }
  class Bike{
    -id : int
    -name : string
  }
  Student "1" --o "1" IdCard : carries
  Student "1" --o "1" Bike : rides

```

----------------------------------------

TITLE: Setting Axis Date Format in Mermaid
DESCRIPTION: Explains how to set a custom date format for the axis using `axisFormat` and provides an example. Mentions the default format and the syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_7

LANGUAGE: Mermaid
CODE:
```
axisFormat %Y-%m-%d
```

----------------------------------------

TITLE: Rendering Math Expressions in Mermaid Flowcharts Using Mermaid Syntax
DESCRIPTION: Demonstrates embedding LaTeX math expressions within a Mermaid flowchart diagram using the Mermaid diagram syntax. Mathematical expressions are delimited by double dollar signs ($$) to be rendered by KaTeX. This snippet shows node labels and edge labels containing various math formulas. Requires Mermaid configured with KaTeX enabled for rendering; no additional dependencies besides Mermaid. Input consists of Mermaid flowchart diagram code including math delimiters; output is a flowchart with rendered mathematical expressions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/math.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
 graph LR
      A["$$x^2$$"] -->|"$$\sqrt{x+3}$$"| B("$$\frac{1}{2}$$")
      A -->|"$$\overbrace{a+b+c}^{\text{note}}$$"| C("$$\pi r^2$$")
      B --> D("$$x = \begin{cases} a &\text{if } b \\ c &\text{if } d \end{cases}$$")
      C --> E("$$x(t)=c_1\begin{bmatrix}-\cos{t}+\sin{t}\\ 2\cos{t} \end{bmatrix}e^{2t}$$")
```

----------------------------------------

TITLE: Using Aliases for Participants - Mermaid
DESCRIPTION: Explains how to assign a convenient short identifier (alias) and a descriptive label to participants using the `as` keyword. This simplifies message definitions while providing clear participant names.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant A as Alice
    participant J as John
    A->>J: Hello John, how are you?
    J->>A: Great!
```

----------------------------------------

TITLE: Example Mermaid Flowchart with Updated Syntax
DESCRIPTION: Illustrates the newer Mermaid syntax for defining flowcharts, introduced after release 0.2.16. This syntax makes semicolons optional at the end of statements and allows a single space between vertices and links for improved readability. The older syntax remains valid.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_119

LANGUAGE: mermaid
CODE:
```
flowchart LR
    A[Hard edge] -->|Link text| B(Round edge)
    B --> C{Decision}
    C -->|One| D[Result one]
    C -->|Two| E[Result two]
```

----------------------------------------

TITLE: Using Generic Types in Class Definition
DESCRIPTION: This snippet shows how to represent generic types within class definitions, member attributes, and return types. Nested types are also supported. This allows for type specification within the class diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
classDiagram
class Square~Shape~{
    int id
    List~int~ position
    setPoints(List~int~ points)
    getPoints() List~int~
}

Square : -List~string~ messages
Square : +setMessages(List~string~ messages)
Square : +getMessages() List~string~
Square : +getDistanceMatrix() List~List~int~~
```

----------------------------------------

TITLE: Specifying Identifying and Non-Identifying Relationships with Cardinalities in Mermaid ER Diagrams
DESCRIPTION: Demonstrates how to declare relationships with different cardinalities and identification types using Mermaid syntax. The snippet includes identifying (solid line via '--') and non-identifying (dashed line via '..') relationships connecting CAR, PERSON, and NAMED-DRIVER entities, illustrating various cardinality notations such as '||--o{' and ' }o..o{'. This requires understanding of ER semantics for proper interpretation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
erDiagram
    CAR ||--o{ NAMED-DRIVER : allows
    PERSON }o..o{ NAMED-DRIVER : is
```

----------------------------------------

TITLE: Class Diagram with Accessible Title and Description in Mermaid
DESCRIPTION: This Mermaid code snippet demonstrates how to add accessible title and description to a class diagram. It utilizes the `accTitle` and `accDescr` keywords to provide a title and description for screen readers and other assistive technologies.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
classDiagram
      accTitle: My Class Diagram
      accDescr: My Class Diagram Description

      Vehicle <|-- Car
```

----------------------------------------

TITLE: ER Diagram with Markdown Formatting in Mermaid
DESCRIPTION: An example showing how Markdown formatting can be used within Mermaid ER diagrams for text styling.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
erDiagram
    "This **is** _Markdown_"
```

----------------------------------------

TITLE: Including FontAwesome CSS for Mermaid Icon Support - HTML
DESCRIPTION: This snippet explains how to add FontAwesome support by including the official FontAwesome CSS stylesheet in the HTML document head. By linking to a CDN-hosted CSS file, Mermaid flowcharts can render FontAwesome icons without additional registration. This approach supports any FontAwesome version and is essential for using icon packs without programmatic registration.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_59

LANGUAGE: html
CODE:
```
<link
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
  rel="stylesheet"
/>
```

----------------------------------------

TITLE: Setting Diagram Direction in Mermaid Class Diagrams - Mermaid
DESCRIPTION: Demonstrates how to set the rendering direction (e.g., RL for right-to-left) for Mermaid class diagrams using the direction statement. Only Mermaid is needed; input includes classes, their fields, and relationships, with diagram output oriented according to the specified direction, which can be crucial for complex layouts.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_22

LANGUAGE: mermaid
CODE:
```
classDiagram
  direction RL
  class Student {
    -idCard : IdCard
  }
  class IdCard{
    -id : int
    -name : string
  }
  class Bike{
    -id : int
    -name : string
  }
  Student "1" --o "1" IdCard : carries
  Student "1" --o "1" Bike : rides

```

----------------------------------------

TITLE: Setting Input Date Format in Mermaid Gantt
DESCRIPTION: Demonstrates the syntax for setting the input date format (`dateFormat`) for a Mermaid Gantt chart. This defines how dates are parsed from the chart definition.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_8

LANGUAGE: markdown
CODE:
```
dateFormat YYYY-MM-DD
```

----------------------------------------

TITLE: Assigning Aliases to Participants in ZenUML in zenuml
DESCRIPTION: This snippet shows how to assign concise identifiers (aliases) to participants with descriptive labels. Aliases like 'A' for Alice and 'J' for John simplify message references while preserving readability with descriptive names.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_3

LANGUAGE: zenuml
CODE:
```
title Aliases
A as Alice
J as John
A->J: Hello John, how are you?
J->A: Great!
```

----------------------------------------

TITLE: Defining Callbacks in Mermaid Class Diagrams
DESCRIPTION: This snippet demonstrates setting up JavaScript callbacks in Mermaid class diagrams. Uses the `callback` and `click call` syntax to trigger a function when a node is clicked. Includes a tooltip.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_22

LANGUAGE: mermaid
CODE:
```
classDiagram
class Shape
callback Shape "callbackFunction" "This is a tooltip for a callback"
class Shape2
click Shape2 call callbackFunction() "This is a tooltip for a callback"
```

----------------------------------------

TITLE: Setting Git Graph Orientation to Top-to-Bottom (TB)
DESCRIPTION: This snippet shows how to set the Mermaid Git Graph orientation to Top-to-Bottom using the `TB:` directive after `gitGraph`. In this layout, commits flow downwards, and branches are arranged side-by-side.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_17

LANGUAGE: mermaid
CODE:
```
    gitGraph TB:
       commit
       commit
       branch develop
       commit
       commit
       checkout main
       commit
       commit
       merge develop
       commit
       commit
```

----------------------------------------

TITLE: Sequence Diagram with Title and Description
DESCRIPTION: This mermaid.js snippet illustrates a sequence diagram enhanced with accessible title and description, using `accTitle` and `accDescr` keywords.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_12

LANGUAGE: markdown
CODE:
```
```mermaid-example
   sequenceDiagram
      accTitle: My Sequence Diagram
      accDescr: My Sequence Diagram Description

      Alice->>John: Hello John, how are you?
      John-->>Alice: Great!
      Alice-)John: See you later!
```
```

----------------------------------------

TITLE: Detecting Diagram Type with Mermaid API
DESCRIPTION: HTML and JavaScript example showing how to use mermaid.detectType function to determine the type of diagram from a given definition.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_10

LANGUAGE: html
CODE:
```
<script type="module">
  import mermaid from './mermaid.esm.mjs';
  const graphDefinition = `sequenceDiagram
    Pumbaa->>Timon:I ate like a pig.
    Timon->>Pumbaa:Pumbaa, you ARE a pig.`;
  try {
    const type = mermaid.detectType(graphDefinition);
    console.log(type); // 'sequence'
  } catch (error) {
    // UnknownDiagramError
  }
</script>
```

----------------------------------------

TITLE: GitGraph with Accessible Title and Description in Mermaid
DESCRIPTION: This Mermaid snippet demonstrates how to add an accessible title and description to a GitGraph diagram using the `accTitle` and `accDescr` keywords. This allows screen readers to provide more context about the diagram to users with visual impairments.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_9

LANGUAGE: mermaid
CODE:
```
gitGraph
      accTitle: My GitGraph Accessibility Title
      accDescr: My GitGraph Accessibility Description

     commit
     commit
     branch develop
     checkout develop
     commit
     commit
     checkout main
     merge develop
     commit
     commit
```

----------------------------------------

TITLE: Start and End States
DESCRIPTION: This snippet defines the start and end states of the diagram using the [*] syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_7

LANGUAGE: mermaid-example
CODE:
```
stateDiagram-v2
    [*] --> s1
    s1 --> [*]
```

----------------------------------------

TITLE: Creating Composite Blocks with Nested Elements in Mermaid
DESCRIPTION: Shows how to create hierarchical structures using composite blocks. This example defines a parent block containing a nested block 'D', followed by a separate block with custom text.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
block-beta
    block
      D
    end
    A["A: I am a wide one"]
```

----------------------------------------

TITLE: Defining Return Types for Methods
DESCRIPTION: This snippet shows how to specify return types for methods using a space between the closing parenthesis and the type.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
classDiagram
class BankAccount{
    +String owner
    +BigDecimal balance
    +deposit(amount) bool
    +withdrawal(amount) int
}
```

----------------------------------------

TITLE: Applying Font Family Directive to a Graph
DESCRIPTION: Example showing a Mermaid graph definition preceded by a directive that sets a specific font family.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_9

LANGUAGE: mermaid
CODE:
```
%%{init: { "fontFamily": "Trebuchet MS, Verdana, Arial, Sans-Serif" } }%%
graph TD
A(Forest) --> B[/Another/]
A --> C[End]
  subgraph section
  B
  C
  end
```

----------------------------------------

TITLE: Defining Multiple Class Styles in Mermaid Class Diagrams
DESCRIPTION: This code snippet demonstrates how to define multiple classes with the same style properties or defining a class and applying the styles to the specified nodes. It also demonstrates styling nodes with the same properties.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_27

LANGUAGE: mermaid
CODE:
```
classDiagram
    class Animal:::someclass {
        -int sizeInFeet
        -canEat()
    }
    classDef someclass fill:#f96
```

----------------------------------------

TITLE: Initializing Mermaid after Document Ready
DESCRIPTION: This JavaScript code uses jQuery to initialize Mermaid after the document is fully loaded, ensuring that dynamically loaded fonts are available for rendering.  It prevents issues with labels being out of bounds. Requires jQuery and the mermaid library.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_4

LANGUAGE: javascript
CODE:
```
$(document).ready(function () {
  mermaid.initialize();
});
```

----------------------------------------

TITLE: Creating a Basic Block Diagram with Blocks and Arrows in Mermaid
DESCRIPTION: Demonstrates a comprehensive block diagram with database representation, custom arrows, nested blocks, spacing, connections between blocks, and custom styling. This example showcases the major capabilities of the block-beta syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
block-beta
columns 1
  db(("DB"))
  blockArrowId6<["&nbsp;&nbsp;&nbsp;"]>(down)
  block:ID
    A
    B["A wide one in the middle"]
    C
  end
  space
  D
  ID --> D
  C --> D
  style B fill:#969,stroke:#333,stroke-width:4px
```

----------------------------------------

TITLE: Applying Style Classes to Class Nodes with Members
DESCRIPTION: Shows how to apply style classes to class nodes that include member definitions. The style is applied to the entire node including its member box.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_31

LANGUAGE: mermaid
CODE:
```
classDiagram
    class Animal:::someclass {
        -int sizeInFeet
        -canEat()
    }
    classDef someclass fill:#f96
```

----------------------------------------

TITLE: Adding Notes to Participants - Mermaid
DESCRIPTION: Demonstrates how to add notes positioned relative to a single participant using the `Note [ right of | left of ] [Actor]: Text` syntax. Notes provide additional context or comments.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_9

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant John
    Note right of John: Text in note
```

----------------------------------------

TITLE: Setting Left-to-Right Diagram Orientation in Mermaid ER Diagrams
DESCRIPTION: Illustrates setting the orientation of a Mermaid ER diagram from left to right using the `direction LR` statement. This arranges the entities horizontally. The example uses the same CUSTOMER, ORDER, and LINE-ITEM entities as the previous orientation example.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_10

LANGUAGE: mermaid-example
CODE:
```
erDiagram
    direction LR
    CUSTOMER ||--o{ ORDER : places
    CUSTOMER {
        string name
        string custNumber
        string sector
    }
    ORDER ||--|{ LINE-ITEM : contains
    ORDER {
        int orderNumber
        string deliveryAddress
    }
    LINE-ITEM {
        string productCode
        int quantity
        float pricePerUnit
    }
```

----------------------------------------

TITLE: Using Class-Based Styling for Points in Mermaid (Markdown Syntax)
DESCRIPTION: Shows the Markdown syntax for defining and applying reusable style classes to points in a Mermaid quadrant chart. Points are assigned to classes using the `:::className` syntax following the point name. Class styles are defined using `classDef` statements, specifying properties like `color`, `radius`, `stroke-color`, and `stroke-width`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/quadrantChart.md#_snippet_4

LANGUAGE: markdown
CODE:
```
Point A:::class1: [0.9, 0.0]
Point B:::class2: [0.8, 0.1]
Point C:::class3: [0.7, 0.2]
Point D:::class3: [0.7, 0.2]
classDef class1 color: #109060
classDef class2 color: #908342, radius : 10, stroke-color: #310085, stroke-width: 10px
classDef class3 color: #f00fff, radius : 10
```

----------------------------------------

TITLE: Customizing Branch Colors in a Mermaid Git Diagram
DESCRIPTION: Shows how to override the default branch colors using the 'themeVariables' configuration. Specific hex color codes are assigned to the first few branches using 'git0', 'git1', etc., demonstrating direct control over branch appearance.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_27

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
      'git0': '#ff0000'
      'git1': '#00ff00'
      'git2': '#0000ff'
      'git3': '#ff00ff'
      'git4': '#00ffff'
      'git5': '#ffff00'
      'git6': '#ff00ff'
      'git7': '#00ffff'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit
```

----------------------------------------

TITLE: Using Junctions in Mermaid Architecture Diagrams
DESCRIPTION: Illustrates the use of `junction` nodes to act as connection points or splitters for multiple edges in a Mermaid architecture diagram. This example defines two junctions (`junctionCenter`, `junctionRight`) and connects various services (disks, gateways) through them, allowing for more complex routing than direct service-to-service edges.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_9

LANGUAGE: mermaid
CODE:
```
architecture-beta
    service left_disk(disk)[Disk]
    service top_disk(disk)[Disk]
    service bottom_disk(disk)[Disk]
    service top_gateway(internet)[Gateway]
    service bottom_gateway(internet)[Gateway]
    junction junctionCenter
    junction junctionRight

    left_disk:R -- L:junctionCenter
    top_disk:B -- T:junctionCenter
    bottom_disk:T -- B:junctionCenter
    junctionCenter:R -- L:junctionRight
    top_gateway:B -- T:junctionRight
    bottom_gateway:T -- B:junctionRight
```

----------------------------------------

TITLE: Representing Reply Messages in Various Ways in ZenUML Using zenuml
DESCRIPTION: Illustrates three approaches to depict reply messages: assigning return values to variables, using a return statement inside a synchronous message block, and employing the @return annotator on asynchronous messages. This covers common styles of modeling method returns or responses.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_7

LANGUAGE: zenuml
CODE:
```
// 1. assign a variable from a sync message.
a = A.SyncMessage()

// 1.1. optionally give the variable a type
SomeType a = A.SyncMessage()

// 2. use return keyword
A.SyncMessage() {
return result
}

// 3. use @return or @reply annotator on an async message
@return
A->B: result
```

----------------------------------------

TITLE: Nesting Messages in ZenUML
DESCRIPTION: This snippet illustrates how sync and creation messages can be nested in ZenUML using curly braces `{}`. This provides a structured way to represent complex interactions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_8

LANGUAGE: mermaid
CODE:
```
zenuml
    A.method() {
      B.nested_sync_method()
      B->C: nested async message
    }
```

----------------------------------------

TITLE: Defining a Nested Group in Mermaid Architecture Diagrams
DESCRIPTION: Shows how to nest groups within other groups using the `in` keyword in Mermaid architecture diagrams. This example defines a `private_api` group (cloud icon, 'Private API' label) located inside the previously defined `public_api` group.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
group private_api(cloud)[Private API] in public_api
```

----------------------------------------

TITLE: Nesting a Group within Another Group
DESCRIPTION: This snippet demonstrates how to nest a group within another group in an architecture diagram. It uses the `group` keyword with the `in` keyword specifying the parent group. This organizational feature provides a structured way to represent a hierarchical relationship between groups. The output is a visual representation of the nested group structure.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_3

LANGUAGE: Mermaid
CODE:
```
group private_api(cloud)[Private API] in public_api
```

----------------------------------------

TITLE: Defining an Event Node with Rounded Shape in Mermaid (mermaid)
DESCRIPTION: This Mermaid snippet produces a top-down flowchart with a node styled as a rounded rectangle, labeled 'This is an event'. It showcases defining event-specific shapes for flowchart nodes in Mermaid, utilizing the 'rounded' shape attribute. Requires Mermaid configuration supporting custom node shapes. Input is a single node definition; output is a diagram with a rounded event node.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: rounded, label: "This is an event" }
```

----------------------------------------

TITLE: Rendering Mermaid Diagrams with Python and mermaid.ink
DESCRIPTION: This Python code snippet demonstrates how to render Mermaid diagrams within a Jupyter notebook using the mermaid.ink service. It encodes the Mermaid graph definition, sends it to mermaid.ink, retrieves the image, and displays it in the notebook, saving the output as a high-resolution PNG image. Dependencies include base64, io, requests, IPython, PIL, and matplotlib.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/ecosystem/tutorials.md#_snippet_0

LANGUAGE: Python
CODE:
```
import base64
import io, requests
from IPython.display import Image, display
from PIL import Image as im
import matplotlib.pyplot as plt

def mm(graph):
    graphbytes = graph.encode("utf8")
    base64_bytes = base64.urlsafe_b64encode(graphbytes)
    base64_string = base64_bytes.decode("ascii")
    img = im.open(io.BytesIO(requests.get('https://mermaid.ink/img/' + base64_string).content))
    plt.imshow(img)
    plt.axis('off') # allow to hide axis
    plt.savefig('image.png', dpi=1200)

mm("""
graph LR;
    A--> B & C & D
    B--> A & E
    C--> A & E
    D--> A & E
    E--> B & C & D
""")
```

----------------------------------------

TITLE: Defining Style Classes in Mermaid Requirement Diagrams
DESCRIPTION: Shows how to define reusable style classes using the 'classDef' keyword. This allows defining named sets of CSS properties (e.g., 'important', 'test') that can be applied to multiple nodes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/requirementDiagram.md#_snippet_5

LANGUAGE: Mermaid
CODE:
```
requirementDiagram

requirement test_req {
    id: 1
    text: "class styling example"
    risk: low
    verifymethod: test
}

element test_entity {
    type: simulation
}

classDef important fill:#f96,stroke:#333,stroke-width:4px
classDef test fill:#ffa,stroke:#000
```

----------------------------------------

TITLE: Setting Default Classes in ERD
DESCRIPTION: This code shows how to define a default class using `classDef default`. The default class applies to all nodes that don't have a specific class assigned to them. The example provides a basic fill and stroke-width for the `default` class. Note: custom styles take precedence. Requires Mermaid.js.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_12

LANGUAGE: mermaid
CODE:
```
erDiagram
    CAR {
        string registrationNumber
        string make
        string model
    }
    PERSON {
        string firstName
        string lastName
        int age
    }
    PERSON:::foo ||--|| CAR : owns
    PERSON o{--|| HOUSE:::bar : has

    classDef default fill:#f9f,stroke-width:4px
    classDef foo stroke:#f00
    classDef bar stroke:#0f0
    classDef foobar stroke:#00f
```

----------------------------------------

TITLE: Defining a Flowchart with Subgraphs - Mermaid
DESCRIPTION: This snippet demonstrates how to define a flowchart with subgraphs using Mermaid syntax. It shows how to create subgraphs, define nodes within them, and connect nodes both within and between subgraphs.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_94

LANGUAGE: Mermaid
CODE:
```
flowchart TB
    c1-->a2
    subgraph one
    a1-->a2
    end
    subgraph two
    b1-->b2
    end
    subgraph three
    c1-->c2
    end
    one --> two
    three --> two
    two --> c2
```

----------------------------------------

TITLE: Configuring Mermaid Sequence Diagram Margins via JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to globally configure the rendering margins and layout of Mermaid sequence diagrams by assigning a configuration object to the mermaid.sequenceConfig variable. It allows setting parameters such as diagramMarginX, diagramMarginY, boxTextMargin, noteMargin, messageMargin, and mirrorActors. Dependencies include Mermaid.js loaded in the environment, and this config should be set before any diagrams are rendered. Inputs are numeric and boolean values in the config object; outputs affect the layout, specifically spacing and mirror actor display, with limitations indicated in documented parameter options.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_28

LANGUAGE: JavaScript
CODE:
```
mermaid.sequenceConfig = {
  diagramMarginX: 50,
  diagramMarginY: 10,
  boxTextMargin: 5,
  noteMargin: 10,
  messageMargin: 35,
  mirrorActors: true,
};
```

----------------------------------------

TITLE: Defining a Basic Radar Diagram Syntax - Markdown
DESCRIPTION: Demonstrates the minimal structure for creating a radar diagram using 'radar-beta' syntax within a Markdown code block. This snippet outlines axis and curve definitions, serving as a template for users to specify axes and compare multiple data series. No external dependencies are required beyond Mermaid's support for the radar-beta diagram. Expected input is axis tags and curve datasets; output is a rendered radar diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_0

LANGUAGE: md
CODE:
```
radar-beta
axis A, B, C, D, E
curve c1{1,2,3,4,5}
curve c2{5,4,3,2,1}
... More Fields ...
```

----------------------------------------

TITLE: Basic ER Diagram with Title in Mermaid
DESCRIPTION: A simple entity relationship diagram showing the relationships between CUSTOMER, ORDER, and LINE-ITEM entities, with a title defined using frontmatter.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
---
title: Order example
---
erDiagram
    CUSTOMER ||--o{ ORDER : places
    ORDER ||--|{ LINE-ITEM : contains
    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses
```

----------------------------------------

TITLE: Example Mermaid Quadrant Chart Definition
DESCRIPTION: This snippet defines a sample quadrant chart illustrating campaign reach and engagement, specifying axes, quadrants, and data points. It demonstrates basic usage of the 'quadrantChart' syntax with labeled axes, quadrants, and plotted data points.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/quadrantChart.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
quadrantChart
    title Reach and engagement of campaigns
    x-axis Low Reach --> High Reach
    y-axis Low Engagement --> High Engagement
    quadrant-1 We should expand
    quadrant-2 Need to promote
    quadrant-3 Re-evaluate
    quadrant-4 May be improved
    Campaign A: [0.3, 0.6]
    Campaign B: [0.45, 0.23]
    Campaign C: [0.57, 0.69]
    Campaign D: [0.78, 0.34]
    Campaign E: [0.40, 0.34]
    Campaign F: [0.35, 0.78]
```

----------------------------------------

TITLE: Creating a Block Diagram with Blocks and Connectors
DESCRIPTION: This snippet demonstrates the basic syntax for creating a block diagram in mermaid.js using the `block-beta` directive, defining blocks, and using arrows to represent connections between blocks.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
```mermaid-example
block-beta
columns 1
  db(("DB"))
  blockArrowId6<[\"\u00a0\u00a0\u00a0\"]>(down)
  block:ID
    A
    B[\"A wide one in the middle\"]
    C
  end
  space
  D
  ID --> D
  C --> D
  style B fill:#969,stroke:#333,stroke-width:4px
```
```

----------------------------------------

TITLE: Customizing Commit Label Colors in a Mermaid Git Diagram
DESCRIPTION: Demonstrates how to change the commit label text color and background color using the 'commitLabelColor' and 'commitLabelBackground' theme variables within the configuration.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_29

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    commitLabelColor: '#ff0000'
    commitLabelBackground: '#00ff00'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit
```

----------------------------------------

TITLE: Defining Diagram Direction in ERD
DESCRIPTION: This code shows how to set the direction of the ERD diagram using the `direction` statement.  The example sets the direction to `TB` (top to bottom), and `LR` (left to right).  The direction influences how the entities and relationships are visually laid out within the diagram.  This is core ERD syntax, and no specific prerequisites are necessary.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_9

LANGUAGE: mermaid
CODE:
```
erDiagram
    direction TB
    CUSTOMER ||--o{ ORDER : places
    CUSTOMER {
        string name
        string custNumber
        string sector
    }
    ORDER ||--|{ LINE-ITEM : contains
    ORDER {
        int orderNumber
        string deliveryAddress
    }
    LINE-ITEM {
        string productCode
        int quantity
        float pricePerUnit
    }
```

LANGUAGE: mermaid
CODE:
```
erDiagram
    direction LR
    CUSTOMER ||--o{ ORDER : places
    CUSTOMER {
        string name
        string custNumber
        string sector
    }
    ORDER ||--|{ LINE-ITEM : contains
    ORDER {
        int orderNumber
        string deliveryAddress
    }
    LINE-ITEM {
        string productCode
        int quantity
        float pricePerUnit
    }
```

----------------------------------------

TITLE: Defining Labelled Class Relationships in Mermaid - Mermaid
DESCRIPTION: Shows how to add descriptive labels to various class relationships (e.g., 'Inheritance', 'Composition') within a Mermaid class diagram. This aids in clarifying semantics of each relationship visually. The snippet assumes Mermaid is available, and labels are supplied as part of the arrow syntax, resulting in annotated connections between classes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
classDiagram
classA --|> classB : Inheritance
classC --* classD : Composition
classE --o classF : Aggregation
classG --> classH : Association
classI -- classJ : Link(Solid)
classK ..> classL : Dependency
classM ..|> classN : Realization
classO .. classP : Link(Dashed)

```

----------------------------------------

TITLE: Pie Chart Example in Mermaid
DESCRIPTION: Represents a pie chart with segments for Dogs, Cats, and Rats, showing proportional data visualization. Suitable for simple data distribution presentations.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md#_snippet_5

LANGUAGE: Markdown
CODE:
```
pie
"Dogs" : 386
"Cats" : 85
"Rats" : 15
```

LANGUAGE: Markdown
CODE:
```
pie
"Dogs" : 386
"Cats" : 85
"Rats" : 15
```

----------------------------------------

TITLE: Init Directive Usage in a Graph
DESCRIPTION: This example shows how the init directive is used to set the theme and log level for a Mermaid graph. The init directive is placed before the graph definition. It sets the theme to "default" and logLevel to 1.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/8.6.0_docs.md#_snippet_2

LANGUAGE: Mermaid
CODE:
```
%%{init: {"theme": "default", "logLevel": 1 }}%%
 graph LR
  a-->b
  b-->c
  c-->d
  d-->e
  e-->f
  f-->g
  g-->
```

LANGUAGE: Mermaid
CODE:
```
%%{init: {"theme": "default", "logLevel": 1 }}%%
 graph LR
  a-->b
  b-->c
  c-->d
  d-->e
  e-->f
  f-->g
  g-->
```

----------------------------------------

TITLE: ER Diagram with Identifying and Non-Identifying Relationships in Mermaid
DESCRIPTION: An example showing both identifying relationships (solid lines) and non-identifying relationships (dashed lines) between entities.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
erDiagram
    CAR ||--o{ NAMED-DRIVER : allows
    PERSON }o..o{ NAMED-DRIVER : is
```

----------------------------------------

TITLE: Creating a Node with Custom Text in Mermaid
DESCRIPTION: This snippet demonstrates how to create a node with text that differs from its ID in a Mermaid flowchart. The text is enclosed in square brackets `[]` following the node ID.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_1

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    id1[This is the text in the box]
```

----------------------------------------

TITLE: Applying Direct Styles to Nodes in Mermaid ER Diagrams
DESCRIPTION: Demonstrates applying specific CSS-like styles directly to individual nodes (`id1`, `id2`) in a Mermaid ER diagram. The `style` keyword is used, followed by the node ID and style properties like `fill`, `stroke`, `stroke-width`, `color`, and `stroke-dasharray`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_11

LANGUAGE: mermaid-example
CODE:
```
erDiagram
    id1||--||id2 : label
    style id1 fill:#f9f,stroke:#333,stroke-width:4px
    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5
```

----------------------------------------

TITLE: Correcting Common Syntax Errors in Mermaid Block Diagrams
DESCRIPTION: Demonstrates proper syntax for linking blocks in Mermaid block diagrams. Shows how to correctly add spaces between blocks and use proper arrow notation to establish connections between elements.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_9

LANGUAGE: mermaid
CODE:
```
block-beta
  A space B
  A --> B
```

----------------------------------------

TITLE: Adding Notes
DESCRIPTION: This snippet shows how to add notes to states using the `note` keyword.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_13

LANGUAGE: mermaid-example
CODE:
```
    stateDiagram-v2
        State1: The state with a note
        note right of State1
            Important information! You can write
            notes.
        end note
        State1 --> State2
        note left of State2 : This is the note to the left.
```

----------------------------------------

TITLE: Importing Mermaid v10 Using ESM in HTML
DESCRIPTION: Demonstrates the correct way to import Mermaid as an ECMAScript module in HTML for v10 and newer. Requires support for JavaScript modules in the browser. The 'mermaid.initialize({ startOnLoad: true })' call configures Mermaid to initialize automatically when the page loads. Expects no inputs; sets up Mermaid globally for subsequent use.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CHANGELOG.md#_snippet_0

LANGUAGE: html
CODE:
```
<script type="module">
  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
  mermaid.initialize({ startOnLoad: true });
</script>
```

----------------------------------------

TITLE: Requirement Diagram with Title and Description
DESCRIPTION: This mermaid.js snippet presents a requirement diagram including accessible title and description using the `accTitle` and `accDescr` keywords to facilitate accessibility.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_11

LANGUAGE: markdown
CODE:
```
```mermaid-example
  requirementDiagram
      accTitle: My Requirement Diagram
      accDescr: My Requirement Diagram Description

       requirement test_req {
  id: 1
  text: the test text.
  risk: high
  verifymethod: test
  }

  element test_entity {
  type: simulation
  }

  test_entity - satisfies -> test_req

```
```

----------------------------------------

TITLE: Defining Icon Shape Nodes in Mermaid Flowchart DSL
DESCRIPTION: This snippet describes how to include an icon node in Mermaid flowcharts using the 'icon' shape attribute. The example uses an icon from a registered icon pack ('fa:user') with additional parameters to set the form (background shape as square), label ('User Icon'), label position ('t' for top), and height (60). It requires prior registration of icon packs in Mermaid configuration to display icons correctly. Inputs include icon name and styling options; output is a flowchart node rendering the specified icon with label and customized appearance.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_19

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ icon: "fa:user", form: "square", label: "User Icon", pos: "t", h: 60 }
```

----------------------------------------

TITLE: Defining Milestones in Mermaid Gantt (Example)
DESCRIPTION: Demonstrates how to add milestones to a Mermaid Gantt chart using the `milestone` keyword, specifying an ID, start time, and duration. Milestones represent single points in time.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_4

LANGUAGE: mermaid-example
CODE:
```
gantt
    dateFormat HH:mm
    axisFormat %H:%M
    Initial milestone : milestone, m1, 17:49, 2m
    Task A : 10m
    Task B : 5m
    Final milestone : milestone, m2, 18:08, 4m
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Rectangle
DESCRIPTION: This snippet uses the new shape definition syntax in Mermaid to create a rectangular node. It utilizes the `@{ shape: rect }` syntax after the node ID to explicitly define the shape.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_20

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: rect, label: "This is a process" }
```

----------------------------------------

TITLE: Customizing Mermaid.run with nodes array
DESCRIPTION: This JavaScript code shows how to customize `mermaid.run` to render specific DOM elements.  It disables automatic rendering and calls `mermaid.run` with an array of node elements and node lists. Requires mermaid library to be imported.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_7

LANGUAGE: js
CODE:
```
mermaid.initialize({ startOnLoad: false });
await mermaid.run({
  nodes: [document.getElementById('someId'), document.getElementById('anotherId')],
});
await mermaid.run({
  nodes: document.querySelectorAll('.yetAnotherClass'),
});
```

----------------------------------------

TITLE: Connecting Multiple Classes to Lollipop Interfaces - Mermaid-Example
DESCRIPTION: Gives a Mermaid diagram example where several classes are connected to a single interface (lollipop), using --() and ()-- notations for implementing and providing interfaces. Requires only Mermaid, and output illustrates class-interface relationships suitable for UML and API design documentation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_11

LANGUAGE: mermaid
CODE:
```
classDiagram
  class Class01 {
    int amount
    draw()
  }
  Class01 --() bar
  Class02 --() bar

  foo ()-- Class01

```

----------------------------------------

TITLE: Using mermaid.run for Custom Rendering
DESCRIPTION: JavaScript code examples showing how to use mermaid.run method to render diagrams with different configurations and element selectors.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_7

LANGUAGE: javascript
CODE:
```
mermaid.initialize({ startOnLoad: false });
await mermaid.run({
  querySelector: '.someOtherClass',
});
```

LANGUAGE: javascript
CODE:
```
mermaid.initialize({ startOnLoad: false });
await mermaid.run({
  nodes: [document.getElementById('someId'), document.getElementById('anotherId')],
});
await mermaid.run({
  nodes: document.querySelectorAll('.yetAnotherClass'),
});
```

LANGUAGE: javascript
CODE:
```
mermaid.initialize({ startOnLoad: false });
await mermaid.run({
  suppressErrors: true,
});
```

----------------------------------------

TITLE: Composite States Declaration
DESCRIPTION: This snippet introduces composite states, which can contain internal states. It uses the `state` keyword and curly braces to define a composite state.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_8

LANGUAGE: mermaid-example
CODE:
```
stateDiagram-v2
    [*] --> First
    state First {
        [*] --> second
        second --> [*]
    }

    [*] --> NamedComposite
    NamedComposite: Another Composite
    state NamedComposite {
        [*] --> namedSimple
        namedSimple --> [*]
        namedSimple: Another simple
    }
```

----------------------------------------

TITLE: Checking Out and Updating the Develop Branch using Git
DESCRIPTION: Switches to the `develop` branch using `git checkout` and updates it with the latest changes from the remote repository using `git fetch` or `git pull`. This ensures new work is based on the latest development code.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_12

LANGUAGE: bash
CODE:
```
git checkout develop
git fetch # or `git pull`
```

----------------------------------------

TITLE: Selecting Layout Algorithms with Configuration Metadata in Mermaid (mermaid)
DESCRIPTION: This snippet demonstrates how to specify advanced layout algorithms and styles for Mermaid diagrams using YAML frontmatter. Parameters include 'layout' (elk), 'look' (handDrawn), and 'theme' (dark), instructing Mermaid to use the ELK layout engine for optimal node arrangement. The diagram section uses a top-to-bottom flowchart for illustrating decision logic. The ELK layout dependency must be available in the Mermaid environment to function correctly. Inputs are the frontmatter configuration and diagram code; output is a diagram with enhanced layout and style based on provided configuration.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/syntax-reference.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
---
config:
  layout: elk
  look: handDrawn
  theme: dark
---
flowchart TB
  A[Start] --> B{Decision}
  B -->|Yes| C[Continue]
  B -->|No| D[Stop]
```

----------------------------------------

TITLE: Mermaid Theming Configuration Options in TypeScript
DESCRIPTION: Type definitions for theme-related configuration options in Mermaid.js, including theme selection, CSS customization, and theme variables. Themes can be set to default, base, dark, forest, neutral, or null.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_32

LANGUAGE: TypeScript
CODE:
```
theme?: "default" | "base" | "dark" | "forest" | "neutral" | "null"
```

LANGUAGE: TypeScript
CODE:
```
themeCSS?: string
```

LANGUAGE: TypeScript
CODE:
```
themeVariables?: any
```

----------------------------------------

TITLE: Detecting Graph Type in TypeScript
DESCRIPTION: This snippet defines the `detectType` function, which analyzes graph text to determine its type based on its content and the presence of the `%%init` directive. It accepts graph text and an optional Mermaid configuration as input and returns a string representing the graph definition key. It allows developers to determine the appropriate rendering logic for the mermaid diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
detectType: (`text`, `config`?) => `string`
```

----------------------------------------

TITLE: Adding a Title to XY Chart
DESCRIPTION: Example demonstrating how to add a title to an XY chart. If the title contains spaces, it must be enclosed in quotes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/xyChart.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
xychart-beta
    title "This is a simple example"
    ...
```

----------------------------------------

TITLE: Defining States by ID
DESCRIPTION: Demonstrates defining simple states solely with their identifiers inside a state diagram. These are basic states without descriptions or further properties.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
    stateId
```

----------------------------------------

TITLE: Styling Gantt Elements with CSS
DESCRIPTION: Provides a sample stylesheet demonstrating how to apply CSS rules to various Gantt chart elements like grid lines, borders, and task text positioning using predefined classes. Includes examples for `.grid .tick`, `.grid path`, `.taskText`, `.taskTextOutsideRight`, and `.taskTextOutsideLeft`, along with an example for a custom `#tag` element.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_13

LANGUAGE: css
CODE:
```
.grid .tick {
  stroke: lightgrey;
  opacity: 0.3;
  shape-rendering: crispEdges;
}
.grid path {
  stroke-width: 0;
}

#tag {
  color: white;
  background: #fa283d;
  width: 150px;
  position: absolute;
  display: none;
  padding: 3px 6px;
  margin-left: -80px;
  font-size: 11px;
}

#tag:before {
  border: solid transparent;
  content: ' ';
  height: 0;
  left: 50%;
  margin-left: -5px;
  position: absolute;
  width: 0;
  border-width: 10px;
  border-bottom-color: #fa283d;
  top: -20px;
}
.taskText {
  fill: white;
  text-anchor: middle;
}
.taskTextOutsideRight {
  fill: black;
  text-anchor: start;
}
.taskTextOutsideLeft {
  fill: black;
  text-anchor: end;
}
```

----------------------------------------

TITLE: Using Autonumber Directive for Sequence Numbers in Mermaid Sequence Diagrams
DESCRIPTION: This snippet shows enabling automatic numbering of sequence diagram arrows within the Mermaid diagram code itself by adding the `autonumber` keyword at the start of a `sequenceDiagram`. This is an alternative to global JavaScript configuration and causes Mermaid to attach incremental numbers to each message arrow rendered. It requires Mermaid support for the `autonumber` syntax. Input is Mermaid code with `autonumber`, output is sequence diagram with labeled arrows.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_24

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    autonumber
    Alice->>John: Hello John, how are you?
    loop HealthCheck
        John->>John: Fight against hypochondria
    end
    Note right of John: Rational thoughts!
    John-->>Alice: Great!
    John->>Bob: How about you?
    Bob-->>John: Jolly good!
```

----------------------------------------

TITLE: Defining a Class - Mermaid
DESCRIPTION: This snippet demonstrates how to define a class of styles in a Mermaid flowchart using the `classDef` directive.  Classes can then be applied to nodes for consistent styling.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_107

LANGUAGE: Mermaid
CODE:
```
classDef className fill:#f9f,stroke:#333,stroke-width:4px;
```

----------------------------------------

TITLE: Styling C4 Diagram Relationships with UpdateRelStyle in Mermaid
DESCRIPTION: Illustrates different ways to use the `UpdateRelStyle` function to customize the appearance of relationships between specific elements in Mermaid C4 diagrams. It shows both positional parameter assignment (specifying values in order) and named parameter assignment (using `$parameterName="value"`) to set properties like text color (`textColor`), line color (`lineColor`), and text label offset (`offsetX`, `offsetY`). Partial updates using only named parameters are also demonstrated.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/c4.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
UpdateRelStyle(customerA, bankA, "red", "blue", "-40", "60")
UpdateRelStyle(customerA, bankA, $offsetX="-40", $offsetY="60", $lineColor="blue", $textColor="red")
UpdateRelStyle(customerA, bankA, $offsetY="60")
```

----------------------------------------

TITLE: Combined Styling with Classes and Direct Styles in Mermaid
DESCRIPTION: Shows how to combine different styling methods: defining a class with `classDef`, applying a class using the `:::` shorthand during node definition, applying a class using the `class` keyword after definition, and applying direct styles with `style`. This demonstrates the flexibility in applying styles.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/requirementDiagram.md#_snippet_6

LANGUAGE: Mermaid
CODE:
```
requirementDiagram

requirement test_req:::important {
    id: 1
    text: "class styling example"
    risk: low
    verifymethod: test
}

element test_entity {
    type: simulation
}

classDef important font-weight:bold

class test_entity important
style test_entity fill:#f9f,stroke:#333
```

----------------------------------------

TITLE: Defining an Image Node Shape
DESCRIPTION: This snippet defines a node with an image from a URL. It includes a label positioned at the top of the image, and sets the width and height of the image.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_66

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ img: "https://example.com/image.png", label: "Image Label", pos: "t", w: 60, h: 60, constraint: "off" }
```

----------------------------------------

TITLE: Integrating Mindmaps in HTML
DESCRIPTION: This shows the code to include Mermaid.js and the mindmap diagram type in an HTML page. It describes both the pre-9.4.0 and the post-9.4.0 methods.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_15

LANGUAGE: html
CODE:
```
<script type="module">
  import mermaid from '<CDN_URL>/mermaid@9.3.0/dist/mermaid.esm.min.mjs';
  import mindmap from '<CDN_URL>/@mermaid-js/mermaid-mindmap@9.3.0/dist/mermaid-mindmap.esm.min.mjs';
  await mermaid.registerExternalDiagrams([mindmap]);
</script>
```

----------------------------------------

TITLE: Visualizing Graded Scores with Radar Diagram - Mermaid Example
DESCRIPTION: Shows the application of a radar diagram to display student grades across multiple subjects. This example, wrapped as a Mermaid-example, uses labeled axes and separate curves for each student. The diagram is configured with a maximum and minimum value (100 and 0), and optional title. All data is inline; it serves as a reference for comparative performance visualization. Requires Mermaid environment with radar-beta support.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_1

LANGUAGE: mermaid-example
CODE:
```
---
title: "Grades"
---
radar-beta
  axis m["Math"], s["Science"], e["English"]
  axis h["History"], g["Geography"], a["Art"]
  curve a["Alice"]{85, 90, 80, 70, 75, 90}
  curve b["Bob"]{70, 75, 85, 80, 90, 85}

  max 100
  min 0
```

----------------------------------------

TITLE: classDef with Multiple Styles
DESCRIPTION: Demonstrates how to apply multiple styles to classDef.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_18

LANGUAGE: txt
CODE:
```
classDef badBadEvent fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow
```

----------------------------------------

TITLE: Setting Left-to-Right Orientation in Mermaid GitGraph
DESCRIPTION: Shows how to explicitly set the default Left-to-Right (`LR:`) orientation for a Mermaid gitGraph. In this layout, commits progress horizontally from left to right, and branches are stacked vertically.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_16

LANGUAGE: mermaid
CODE:
```
    gitGraph LR:
       commit
       commit
       branch develop
       commit
       commit
       checkout main
       commit
       commit
       merge develop
       commit
       commit
```

----------------------------------------

TITLE: Installing ELK Layout Package using npm
DESCRIPTION: This shell command installs the '@mermaid-js/layout-elk' package via npm, which adds ELK layout support to Mermaid projects. It is a prerequisite step before registration and usage of ELK layouts in JavaScript/TypeScript projects.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid-layout-elk/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
npm install @mermaid-js/layout-elk
```

----------------------------------------

TITLE: Styling Nodes in Mermaid Class Diagrams
DESCRIPTION: This snippet shows how to style individual nodes in a Mermaid class diagram using the `style` keyword.  The snippet applies specific fill, stroke, stroke-width, color and stroke-dasharray to nodes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_25

LANGUAGE: mermaid
CODE:
```
classDiagram
  class Animal
  class Mineral
  style Animal fill:#f9f,stroke:#333,stroke-width:4px
  style Mineral fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5
```

----------------------------------------

TITLE: Modifying Commit Types in GitGraph - Mermaid
DESCRIPTION: This snippet demonstrates the use of the 'type' attribute to alter the visual representation of commits, supporting NORMAL (default), REVERSE, and HIGHLIGHT types. Commits may also include custom IDs. The diagram visually distinguishes reversed and highlighted commits for emphasis or annotation, illustrating mixed attribute usage within a gitGraph.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
gitGraph
   commit id: "Normal"
   commit
   commit id: "Reverse" type: REVERSE
   commit
   commit id: "Highlight" type: HIGHLIGHT
   commit
```

----------------------------------------

TITLE: Configuring Actor Menus with Links in Mermaid Sequence Diagrams Using Mermaid Syntax
DESCRIPTION: This snippet details how to add clickable popup menus containing links to external URLs for actors in Mermaid sequence diagrams. The simpler syntax uses lines of format `link <actor>: <link-label> @ <link-url>` to define individual labeled links per actor. This enables enriching diagrams where actors represent services or entities with accessible dashboards or documentation. Input is Mermaid diagram code with `link` lines, output is sequence diagrams with interactive menus attached to actors. Dependencies include compatible Mermaid rendering environment.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_25

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Alice
    participant John
    link Alice: Dashboard @ https://dashboard.contoso.com/alice
    link Alice: Wiki @ https://wiki.contoso.com/alice
    link John: Dashboard @ https://dashboard.contoso.com/john
    link John: Wiki @ https://wiki.contoso.com/john
    Alice->>John: Hello John, how are you?
    John-->>Alice: Great!
    Alice-)John: See you later!
```

----------------------------------------

TITLE: Defining Creation Messages in ZenUML
DESCRIPTION: This snippet shows how to define creation messages in ZenUML using the `new` keyword, indicating the creation of new objects.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
zenuml
    new A1
    new A2(with, parameters)
```

----------------------------------------

TITLE: Creating Objects Using Creation Messages in ZenUML Using zenuml
DESCRIPTION: Demonstrates the use of the 'new' keyword to depict object instantiation within the sequence diagram. Objects can be created with or without parameters, representing constructor calls or initialization.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_6

LANGUAGE: zenuml
CODE:
```
new A1
new A2(with, parameters)
```

----------------------------------------

TITLE: Configuring a Pie Chart with Mermaid
DESCRIPTION: This code block shows a more complex pie chart configuration, including custom configuration options via the `config` block.  It uses `showData` to display the values, a title, and configures the label position, and outer stroke width. Dependencies are Mermaid-js and a compatible configuration setup. The input consists of key-value pairs to populate the pie chart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/pie.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
--- 
config:
  pie:
    textPosition: 0.5
  themeVariables:
    pieOuterStrokeWidth: "5px"
---
pie showData
    title Key elements in Product X
    "Calcium" : 42.96
    "Potassium" : 50.05
    "Magnesium" : 10.01
    "Iron" :  5
```

----------------------------------------

TITLE: Changing Theme via Directive
DESCRIPTION: This code snippet demonstrates changing the theme of a Mermaid diagram using a directive. The theme is set to `forest`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_5

LANGUAGE: JSON
CODE:
```
%%{init: { "theme": "forest" } }%%
```

----------------------------------------

TITLE: Rendering Basic Entity Relationship Diagram Using Mermaid Syntax
DESCRIPTION: Defines a simple ER diagram example with three entities (CUSTOMER, ORDER, DELIVERY-ADDRESS) and the relationships between them using Mermaid's erDiagram syntax. It depicts how entities relate, illustrating placement and cardinality labels with crow's foot notation. This snippet requires Mermaid support with ER diagram capability to visualize relationships meaningfully.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
---
title: Order example
---
erDiagram
    CUSTOMER ||--o{ ORDER : places
    ORDER ||--|{ LINE-ITEM : contains
    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses
```

----------------------------------------

TITLE: Adding Mermaid as a Development Dependency using Yarn
DESCRIPTION: This shell command uses the Yarn package manager to add Mermaid as a development dependency to the current project. Development dependencies are typically used during development or build processes, but not required at runtime in production.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/getting-started.md#_snippet_7

LANGUAGE: Shell
CODE:
```
yarn add --dev mermaid
```

----------------------------------------

TITLE: Standard State Diagram (mermaid syntax)
DESCRIPTION: Represents the same simple state diagram as above using the mermaid syntax without the 'example' suffix. It demonstrates creating states and transitions with a more straightforward syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
---
title: Simple sample
---
stateDiagram-v2
    [*] --> Still
    Still --> [*]

    Still --> Moving
    Moving --> Still
    Moving --> Crash
    Crash --> [*]
```

----------------------------------------

TITLE: Adding Text on Links
DESCRIPTION: This snippet demonstrates adding text to a link between two nodes.  Two different syntaxes are shown for achieving the same result.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_69

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    A-- This is the text! ---B
```

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    A---|This is the text|B
```

----------------------------------------

TITLE: Initializing Mermaid with Base Theme (Site-wide)
DESCRIPTION: Demonstrates how to configure the Mermaid library site-wide using the `initialize` method. Sets the `securityLevel` to 'loose' and the `theme` to 'base' for global application.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/theming.md#_snippet_0

LANGUAGE: javascript
CODE:
```
mermaid.initialize({
  securityLevel: 'loose',
  theme: 'base'
});
```

----------------------------------------

TITLE: Basic GitGraph Diagram with Branch and Merge in Mermaid
DESCRIPTION: Demonstrates a simple Git Graph with commits on main branch, creating and committing to a develop branch, then merging back to main with additional commits.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
---
title: Example Git diagram
---
gitGraph
   commit
   commit
   branch develop
   checkout develop
   commit
   commit
   checkout main
   merge develop
   commit
   commit
```

----------------------------------------

TITLE: Gantt Chart with Title and Description
DESCRIPTION: This mermaid.js snippet displays a Gantt chart with an accessible title and description, demonstrating the use of the `accTitle` and `accDescr` keywords for providing accessibility information. The title and description are provided with the appropriate syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_8

LANGUAGE: markdown
CODE:
```
```mermaid-example
   gantt
      accTitle: My Gantt Chart Accessibility Title
      accDescr: My Gantt Chart Accessibility Description

    title A Gantt Diagram
    dateFormat  YYYY-MM-DD
    section Section
    A task           :a1, 2014-01-01, 30d
    Another task     :after a1  , 20d
    section Another
    Task in sec      :2014-01-12  , 12d
    another task      : 24d

```
```

----------------------------------------

TITLE: Simple Critical Region - Mermaid
DESCRIPTION: Shows a basic `critical` region without any accompanying `option` blocks, representing a section that must execute as a unit.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_18

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    critical Establish a connection to the DB
        Service-->DB: connect
    end
```

----------------------------------------

TITLE: Configuring Link Targets for External Links
DESCRIPTION: Shows how to specify link target attributes ('_blank', '_self', etc.) in 'click' statements to control whether links open in the same or new window/tab.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_52

LANGUAGE: mermaid
CODE:
```
flowchart LR
    A-->B
    B-->C
    C-->D
    D-->E
    click A "https://www.github.com" _blank
    click B "https://www.github.com" "Open in new tab" _blank
```

----------------------------------------

TITLE: Grouping Classes Using Namespaces - Mermaid-Example
DESCRIPTION: Provides a Mermaid code snippet encapsulating multiple class definitions under a shared namespace, showing how shapes or entities can be logically grouped in diagrams. No dependencies other than Mermaid; diagram output shows discrete namespaces with internal class organization.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_13

LANGUAGE: mermaid
CODE:
```
classDiagram
namespace BaseShapes {
    class Triangle
    class Rectangle {
      double width
      double height
    }
}

```

----------------------------------------

TITLE: Mermaid Behavior Configuration Options in TypeScript
DESCRIPTION: Type definitions for behavior-related configuration options in Mermaid.js, including startup behavior, error handling, and rendering preferences. These options control how Mermaid behaves when loaded and when encountering errors.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_33

LANGUAGE: TypeScript
CODE:
```
startOnLoad?: boolean
```

LANGUAGE: TypeScript
CODE:
```
suppressErrorRendering?: boolean
```

LANGUAGE: TypeScript
CODE:
```
wrap?: boolean
```

----------------------------------------

TITLE: Flowchart with accessible title and description (multi-line) in Mermaid
DESCRIPTION: This Mermaid snippet demonstrates how to add an accessible title and a multi-line description to a flowchart using the `accTitle` and `accDescr` keywords.  The curly braces encapsulate the multi-line description, allowing for longer, more descriptive accessibility metadata.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
graph LR
      accTitle: Bob's Burger's Making Big Decisions
      accDescr {
        The official Bob's Burgers corporate processes that are used
        for making very, very big decisions.
        This is actually a very simple flow: identify the big decision and then make the big decision.
         }
      A[Identify Big Decision] --> B{Make Big Decision}
      B --> D[Be done]
```

----------------------------------------

TITLE: Changing Theme in Mermaid Graph
DESCRIPTION: This example applies the 'forest' theme to a Mermaid graph using a directive.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_6

LANGUAGE: Mermaid
CODE:
```
%%{init: { "theme": "forest" } }%%
graph TD
A(Forest) --> B[/Another/]
A --> C[End]
  subgraph section
  B
  C
  end
```

LANGUAGE: Mermaid
CODE:
```
%%{init: { "theme": "forest" } }%%
graph TD
A(Forest) --> B[/Another/]
A --> C[End]
  subgraph section
  B
  C
  end
```

----------------------------------------

TITLE: Mermaid Gantt Interaction Syntax
DESCRIPTION: Syntax for binding click events to Gantt chart tasks in Mermaid. Supports calling JavaScript functions or opening URLs. Note: Functionality depends on 'securityLevel' configuration.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_19

LANGUAGE: mermaid
CODE:
```
click taskId call callback(arguments)
click taskId href URL
```

----------------------------------------

TITLE: Defining an Edge in Architecture Diagram
DESCRIPTION: This snippet describes the syntax for declaring an edge between two services within an architecture diagram. It uses the `serviceId` followed by a direction indicator (`:T|B|L|R`), arrow indicators (`<`, `>`), and then the destination service and its direction. Edges represent relationships and connections between services. The output is a visual representation of the defined edge.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_6

LANGUAGE: Mermaid
CODE:
```
db:R -- L:server
```

----------------------------------------

TITLE: Alternative Identifying Relationship Syntax with Descriptive Cardinality Aliases in Mermaid ER Diagram
DESCRIPTION: Utilizes alias keywords (e.g., '1 to zero or more') to express cardinalities and relationship types in Mermaid ER diagrams. This snippet clarifies equivalent relationship definitions using text aliases instead of symbolic notation, improving readability and understanding of the model's cardinalities and identification.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
erDiagram
    CAR 1 to zero or more NAMED-DRIVER : allows
    PERSON many(0) optionally to 0+ NAMED-DRIVER : is
```

----------------------------------------

TITLE: Changing Sequence Config in Mermaid Diagram
DESCRIPTION: This example applies a sequence diagram configuration (`wrap: true`) using a directive.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_14

LANGUAGE: Mermaid
CODE:
```
%%{init: { "sequence": { "wrap": true, "width":300 } } }%%
sequenceDiagram
Alice->Bob: Hello Bob, how are you?
Bob->Alice: Fine, how did your mother like the book I suggested? And did you catch the new book about alien invasion?
Alice->Bob: Good.
Bob->Alice: Cool
```

LANGUAGE: Mermaid
CODE:
```
%%{init: { "sequence": { "wrap": true, "width":300 } } }%%
sequenceDiagram
Alice->Bob: Hello Bob, how are you?
Bob->Alice: Fine, how did your mother like the book I suggested? And did you catch the new book about alien invasion?
Alice->Bob: Good.
Bob->Alice: Cool
```

----------------------------------------

TITLE: FontAwesome Icons Example - Mermaid
DESCRIPTION: This snippet shows how to include FontAwesome icons in Mermaid flowchart nodes using the `fa:#icon class name#` syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_115

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    B["fa:fa-twitter for peace"]
    B-->C[fa:fa-ban forbidden]
    B-->D(fa:fa-spinner)
    B-->E(A fa:fa-camera-retro perhaps?)
```

----------------------------------------

TITLE: Defining Explicit Branch Order in Mermaid GitGraph
DESCRIPTION: Demonstrates using the `order` keyword to specify the rendering order of branches in a Mermaid gitGraph. Branches are assigned positive integer values, and Mermaid displays them according to these values after the main branch (default order 0) and any branches without an explicit order.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_14

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
  gitGraph:
    showBranches: true
    showCommitLabel: true
---
      gitGraph
      commit
      branch test1 order: 3
      branch test2 order: 2
      branch test3 order: 1
```

----------------------------------------

TITLE: Creating another Basic Pie Chart in Mermaid
DESCRIPTION: This snippet demonstrates how to create a basic pie chart using Mermaid syntax. It defines the chart's title and specifies the labels and values for each slice of the pie. No dependencies required, Mermaid library needs to be integrated.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
pie title What Voldemort doesn't have?
         "FRIENDS" : 2
         "FAMILY" : 3
         "NOSE" : 45
```

----------------------------------------

TITLE: Using a Default Style Class in Mermaid ER Diagrams
DESCRIPTION: Demonstrates defining a `default` class using `classDef`. Styles defined in the `default` class (`fill`, `stroke-width`) are automatically applied to all nodes unless overridden by specific node styles or other explicitly applied classes (`foo`, `bar`). This allows setting a base style for the entire diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_14

LANGUAGE: mermaid-example
CODE:
```
erDiagram
    CAR {
        string registrationNumber
        string make
        string model
    }
    PERSON {
        string firstName
        string lastName
        int age
    }
    PERSON:::foo ||--|| CAR : owns
    PERSON o{--|| HOUSE:::bar : has

    classDef default fill:#f9f,stroke-width:4px
    classDef foo stroke:#f00
    classDef bar stroke:#0f0
    classDef foobar stroke:#00f
```

----------------------------------------

TITLE: Setting Radar Diagram Options - Markdown
DESCRIPTION: Demonstrates how to configure optional display properties for a radar diagram, like legend visibility, scaling, graticule type, and number of ticks. These options affect the diagram's appearance and data scaling, allowing for fine tuning of the render. Input is options and data; output is a customized radar diagram. Requires radar-beta compatibility.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_10

LANGUAGE: md
CODE:
```
radar-beta
  ...
  showLegend true
  max 100
  min 0
  graticule circle
  ticks 5
  ...
```

----------------------------------------

TITLE: Styling with classDefs
DESCRIPTION: This section provides an example of creating and applying styles using `classDef` for state diagrams, using CSS-like styling.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_17

LANGUAGE: txt
CODE:
```
classDef movement font-style:italic;
```

----------------------------------------

TITLE: Adding Vertical Markers in Mermaid Gantt
DESCRIPTION: Illustrates the syntax for adding vertical markers to a Mermaid Gantt chart. Vertical markers are defined with the `vert` keyword, an ID, a start time, and a duration, serving as visual reference points for dates or times.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
gantt
    dateFormat HH:mm
    axisFormat %H:%M
    Initial vert : vert, v1, 17:30, 2m
    Task A : 3m
    Task B : 8m
    Final vert : vert, v2, 17:58, 4m
```

----------------------------------------

TITLE: Combined URL and Callback Examples in Mermaid
DESCRIPTION: Shows multiple classes with different interactive features (callbacks and links) in a single diagram. Demonstrates how to mix both types of interactivity in one class diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_27

LANGUAGE: mermaid
CODE:
```
classDiagram
    class Class01
    class Class02
    callback Class01 "callbackFunction" "Callback tooltip"
    link Class02 "https://www.github.com" "This is a link"
    class Class03
    class Class04
    click Class03 call callbackFunction() "Callback tooltip"
    click Class04 href "https://www.github.com" "This is a link"
```

----------------------------------------

TITLE: Defining Default Class Styles in Mermaid Class Diagrams
DESCRIPTION: This snippet illustrates how to set a default style for all nodes in a Mermaid class diagram using the `classDef default` keyword. Specific styles can be defined afterwards to override the default styling.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_28

LANGUAGE: mermaid
CODE:
```
classDiagram
  class Animal:::pink
  class Mineral

  classDef default fill:#f96,color:red
  classDef pink color:#f9f
```

----------------------------------------

TITLE: Applying Directives to a Simple Graph
DESCRIPTION: Demonstrates applying `logLevel` and `theme` directives directly within a Mermaid graph definition. The directives modify the rendering parameters for the subsequent graph.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
%%{init: { 'logLevel': 'debug', 'theme': 'dark' } }%%
graph LR
A-->B
```

----------------------------------------

TITLE: Adding Vertical Markers to Mermaid Gantt Charts
DESCRIPTION: Demonstrates how to add vertical lines to a Gantt chart using the `vert` keyword. Vertical markers highlight specific dates across the entire chart timeline without occupying a task row.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
gantt
    dateFormat HH:mm
    axisFormat %H:%M
    Initial vert : vert, v1, 17:30, 2m
    Task A : 3m
    Task B : 8m
    Final vert : vert, v2, 17:58, 4m
```

----------------------------------------

TITLE: Click Event Binding with Link Target - Mermaid
DESCRIPTION: This Mermaid snippet shows how to specify the link target when binding a click event to a node in a flowchart.  The link target determines where the URL will be opened (e.g., `_blank` for a new tab).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_100

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    A-->B
    B-->C
    C-->D
    D-->E
    click A "https://www.github.com" _blank
    click B "https://www.github.com" "Open this in a new tab" _blank
    click C href "https://www.github.com" _blank
    click D href "https://www.github.com" "Open this in a new tab" _blank
```

----------------------------------------

TITLE: Interactive Links Example - HTML/Mermaid/JS
DESCRIPTION: This full HTML example demonstrates interactive links in a Mermaid flowchart.  It includes the Mermaid chart definition, a JavaScript callback function, and the necessary Mermaid initialization code.  It requires setting `securityLevel='loose'`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_101

LANGUAGE: HTML
CODE:
```
<body>
  <pre class="mermaid">
    flowchart LR
        A-->B
        B-->C
        C-->D
        click A callback "Tooltip"
        click B "https://www.github.com" "This is a link"
        click C call callback() "Tooltip"
        click D href "https://www.github.com" "This is a link"
  </pre>

  <script>
    window.callback = function () {
      alert('A callback was triggered');
    };
    const config = {
      startOnLoad: true,
      flowchart: { useMaxWidth: true, htmlLabels: true, curve: 'cardinal' },
      securityLevel: 'loose',
    };
    mermaid.initialize(config);
  </script>
</body>
```

----------------------------------------

TITLE: GitGraph with Default Theme Configuration
DESCRIPTION: This snippet demonstrates a GitGraph diagram using the default theme and includes commits, branches, checkouts, and merges to represent a typical git workflow.  The config section sets logLevel to 'debug' and the theme to 'default'.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_26

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'default'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit
```

----------------------------------------

TITLE: Configuring Flowchart Looks
DESCRIPTION: This snippet demonstrates setting the look (handDrawn) and theme for a flowchart using Frontmatter configuration.  The `config` section within the Frontmatter is used to customize the visual appearance.  The handDrawn look provides a sketch-like quality, and the theme can be set to customize the color.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/syntax-reference.md#_snippet_2

LANGUAGE: mermaid-example
CODE:
```
--- 
config:
  look: handDrawn
  theme: neutral
---
flowchart LR
  A[Start] --> B{Decision}
  B -->|Yes| C[Continue]
  B -->|No| D[Stop]
```

----------------------------------------

TITLE: Using Default and Specific Classes in Mermaid
DESCRIPTION: Demonstrates setting a default style for all nodes and then overriding it with specific styles for individual nodes. The 'default' class applies to all nodes unless overridden.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_32

LANGUAGE: mermaid
CODE:
```
classDiagram
  class Animal:::pink
  class Mineral

  classDef default fill:#f96,color:red
  classDef pink color:#f9f
```

----------------------------------------

TITLE: User Journey Diagram in Mermaid
DESCRIPTION: Depicts a simple user journey titled 'My working day' with sections for going to work and returning home. Activities are labeled with duration and participants, assisting in process mapping.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_9

LANGUAGE: mermaid
CODE:
```
journey
  title My working day
  section Go to work
    Make tea: 5: Me
    Go upstairs: 3: Me
    Do work: 1: Me, Cat
  section Go home
    Go downstairs: 5: Me
    Sit down: 5: Me
```

----------------------------------------

TITLE: Horizontal Commit Labels Layout in GitGraph Using mermaid-example Language
DESCRIPTION: Shows how to configure Mermaid's gitGraph commit labels to be horizontally aligned below commit nodes by setting 'rotateCommitLabel' to false. This layout centers commit labels horizontally without rotation, which is more suitable for short labels. The snippet includes multiple commits and branches to illustrate the horizontal label arrangement over various parts of the graph.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_11

LANGUAGE: mermaid-example
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
  gitGraph:
    rotateCommitLabel: false
---
gitGraph
  commit id: "feat(api): ..."
  commit id: "a"
  commit id: "b"
  commit id: "fix(client): .extra long label.."
  branch c2
  commit id: "feat(modules): ..."
  commit id: "test(client): ..."
  checkout main
  commit id: "fix(api): ..."
  commit id: "ci: ..."
  branch b1
  commit
  branch b2
  commit
```

----------------------------------------

TITLE: Setting Input Date Format - Mermaid
DESCRIPTION: Use the `dateFormat` directive to specify the expected format for dates provided in the diagram definition. The default format is `YYYY-MM-DD`. This directive should be placed at the beginning of the diagram definition.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_6

LANGUAGE: Mermaid
CODE:
```
dateFormat YYYY-MM-DD
```

----------------------------------------

TITLE: Defining Stop Node Shapes (Double Circle and Framed Circle) in Mermaid Flowchart DSL
DESCRIPTION: These snippets show how to define stop nodes in Mermaid flowcharts with double circle and framed circle shapes labeled 'Stop'. These shapes commonly denote process terminations or stopping points. The 'dbl-circ' and 'framed-circle' shape attributes yield visually distinct stop nodes. Requires Mermaid with support for these node shape types. Inputs are Mermaid code blocks; outputs are specially styled stop nodes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_16

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: dbl-circ, label: "Stop" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: framed-circle, label: "Stop" }
```

----------------------------------------

TITLE: Defining Multiple Properties for classDef in Mermaid State Diagrams - Plain Text
DESCRIPTION: This snippet demonstrates a classDef definition with multiple property-value pairs for advanced state styling. Using syntactic form 'classDef [name] [property:value,...]' (no trailing semicolon), the example sets fill, color, font-weight, stroke-width, and stroke color for the style 'badBadEvent'. It must appear inside a Mermaid diagram, and parameters include the style name and valid CSS properties. This affects subsequent state appearances to which the style is applied.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_21

LANGUAGE: txt
CODE:
```
classDef badBadEvent fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow
```

----------------------------------------

TITLE: Applying CSS Classes to Mermaid Class Diagrams
DESCRIPTION: Shows how to use predefined CSS classes with Mermaid class diagrams. External CSS styles can be applied to nodes using the ':::' notation to reference class names.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_33

LANGUAGE: html
CODE:
```
<style>
  .styleClass > * > g {
    fill: #ff0000;
    stroke: #ffff00;
    stroke-width: 4px;
  }
</style>
```

LANGUAGE: mermaid
CODE:
```
classDiagram
    class Animal:::styleClass
```

----------------------------------------

TITLE: Mermaid Gantt Chart Example (Bar Chart)
DESCRIPTION: A simple Mermaid Gantt chart example used to visualize data as a bar chart, showing days since the last update for Git issues. Demonstrates basic Gantt syntax with sections and tasks using a custom date format.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_19

LANGUAGE: Mermaid
CODE:
```
gantt
    title Git Issues - days since last update
    dateFormat X
    axisFormat %s
    section Issue19062
    71   : 0, 71
    section Issue19401
    36   : 0, 36
    section Issue193
    34   : 0, 34
    section Issue7441
    9    : 0, 9
    section Issue1300
    5    : 0, 5
```

----------------------------------------

TITLE: Adding Milestones to Mermaid Gantt Charts
DESCRIPTION: Illustrates how to add milestones to a Gantt chart using the `milestone` keyword. Milestones represent a single point in time and are positioned based on their start date and duration.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
gantt
    dateFormat HH:mm
    axisFormat %H:%M
    Initial milestone : milestone, m1, 17:49, 2m
    Task A : 10m
    Task B : 5m
    Final milestone : milestone, m2, 18:08, 4m
```

----------------------------------------

TITLE: Customizing Mermaid Theme with CSS
DESCRIPTION: Defines custom CSS rules to style specific elements within a Mermaid diagram, including a workaround for adding vertical markers using custom IDs.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_23

LANGUAGE: CSS
CODE:
```
// YAML supports multiline strings using a newline markers: 
#item36 { fill: CadetBlue } 

// Custom marker workaround CSS from forum (below) 
rect[id^=workaround] { height: calc(100% - 50px) ; transform: translate(9px, 25px); y: 0; width: 1.5px; stroke: none; fill: red; } 
text[id^=workaround] { fill: red; y: 100%; font-size: 15px;}
```

----------------------------------------

TITLE: Applying classDef Styles to States with class Statement - Plain Text
DESCRIPTION: This snippet shows how to use the 'class' statement to assign a previously defined style to one or more Mermaid states. The statement 'class [state names] [classDef name]' is placed after state definitions. Parameters are a list of states and a classDef name; the output is the visual style change for those states within the rendered diagram. No special dependencies are required.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_22

LANGUAGE: txt
CODE:
```
class Crash badBadEvent
```

LANGUAGE: txt
CODE:
```
class Moving, Crash movement
```

----------------------------------------

TITLE: Activating and Deactivating Participants - Mermaid
DESCRIPTION: Demonstrates how to explicitly show participant activation and deactivation using the `activate` and `deactivate` keywords. This indicates when a participant is actively performing an action.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->>John: Hello John, how are you?
    activate John
    John-->>Alice: Great!
    deactivate John
```

----------------------------------------

TITLE: Applying Styles with ::: Operator
DESCRIPTION: Shows how to apply classDef styles directly to states using the ::: (three colons) operator within the diagram statements.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_21

LANGUAGE: txt
CODE:
```
[state]:::[style name]
```

----------------------------------------

TITLE: Hiding Branch Names and Lines in GitGraph Using mermaid-example Language
DESCRIPTION: Shows configuration and usage of the 'showBranches' boolean option in Mermaid's gitGraph to control the visibility of branches and their lines in the rendered diagram. Setting 'showBranches' to false hides branch names and lines, cleaning up the diagram when branch details are not needed. The snippet includes multiple branch declarations, checkouts, commits, merges, and customization of commit types.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_9

LANGUAGE: mermaid-example
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
  gitGraph:
    showBranches: false
---
      gitGraph
        commit
        branch hotfix
        checkout hotfix
        commit
        branch develop
        checkout develop
        commit id:"ash" tag:"abc"
        branch featureB
        checkout featureB
        commit type:HIGHLIGHT
        checkout main
        checkout hotfix
        commit type:NORMAL
        checkout develop
        commit type:REVERSE
        checkout featureB
        commit
        checkout main
        merge hotfix
        checkout featureB
        commit
        checkout develop
        branch featureA
        commit
        checkout develop
        merge hotfix
        checkout featureA
        commit
        checkout featureB
        commit
        checkout develop
        merge featureA
        branch release
        checkout release
        commit
        checkout main
        commit
        checkout release
        merge main
        checkout develop
        merge release
```

----------------------------------------

TITLE: Creating a Dotted Link with Text
DESCRIPTION: This snippet creates a dotted link with text between two nodes in a flowchart using the `-. text .-> B` syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_26

LANGUAGE: mermaid
CODE:
```
flowchart LR
   A-. text .-> B
```

----------------------------------------

TITLE: Register Icon Pack from CDN
DESCRIPTION: Registers an icon pack in Mermaid by fetching the icon data from a CDN using the fetch API.  The `name` property specifies the icon pack name, and the `loader` function fetches the JSON data and parses it. The `mermaid.registerIconPacks` function registers the icon pack with Mermaid.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/icons.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import mermaid from 'CDN/mermaid.esm.mjs';
mermaid.registerIconPacks([
  {
    name: 'logos',
    loader: () =>
      fetch('https://unpkg.com/@iconify-json/logos@1/icons.json').then((res) => res.json()),
  },
]);
```

----------------------------------------

TITLE: Excluding Weekends and Specific Days in Mermaid Gantt
DESCRIPTION: Shows how to exclude weekends or specific days from task duration calculations using the `excludes` keyword and how to configure the weekend definition (Friday/Saturday or Saturday/Sunday) using the `weekend` keyword.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
gantt
    title A Gantt Diagram Excluding Fri - Sat weekends
    dateFormat YYYY-MM-DD
    excludes weekends
    weekend friday
    section Section
        A task          :a1, 2024-01-01, 30d
        Another task    :after a1, 20d
```

----------------------------------------

TITLE: Configuring Mermaid Flowchart Renderer and Width - JavaScript
DESCRIPTION: This snippet describes configuration options for Mermaid flowcharts, including choosing an experimental 'elk' renderer (better for complex and large diagrams) by updating the configuration object, and adjusting the rendered flowchart width via the `mermaid.flowchartConfig` setting. Configuring the renderer requires Mermaid version 9.4 or newer and appropriate site setup for lazy-loading. The width setting accepts values like '100%' to scale the diagram accordingly.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_61

LANGUAGE: yaml
CODE:
```
config:
  flowchart:
    defaultRenderer: "elk"
```

LANGUAGE: javascript
CODE:
```
mermaid.flowchartConfig = {
    width: 100%
}
```

----------------------------------------

TITLE: Transitions between States
DESCRIPTION: This snippet showcases the use of transitions between states.  It defines transitions using arrows and uses undefined states as needed.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_5

LANGUAGE: mermaid-example
CODE:
```
stateDiagram-v2
    s1 --> s2
```

----------------------------------------

TITLE: Creating a Link with Arrow Head
DESCRIPTION: This snippet demonstrates how to create a link between two nodes (A and B) with an arrow head, indicating the direction of flow.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_67

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    A-->B
```

----------------------------------------

TITLE: Creating and Destroying Actors - Mermaid
DESCRIPTION: Demonstrates how to dynamically create and destroy participants or actors during the sequence using the `create` and `destroy` directives before a message. Only recipients can be created, and both senders and recipients can be destroyed.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->>Bob: Hello Bob, how are you ?
    Bob->>Alice: Fine, thank you. And you?
    create participant Carl
    Alice->>Carl: Hi Carl!
    create actor D as Donald
    Carl->>D: Hi!
    destroy Carl
    Alice-xCarl: We are too many
    destroy Bob
    Bob->>Alice: I agree
```

----------------------------------------

TITLE: Applying Class-Based Styling in Mermaid Block Diagrams
DESCRIPTION: Shows how to define and apply class-based styles in block diagrams. Uses classDef to create reusable styles that can be applied to multiple blocks, while still allowing individual styling for other elements.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
block-beta
  A space B
  A-->B
  classDef blue fill:#6e6ce6,stroke:#333,stroke-width:4px;
  class A blue
  style B fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5
```

----------------------------------------

TITLE: Defining Simple Critical Regions in Mermaid Sequence Diagrams
DESCRIPTION: Illustrates the use of the `critical` and `end` keywords in Mermaid to denote an atomic action that must be completed without any specified alternative paths or options. This example shows a critical database connection attempt without defined failure options.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_18

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    critical Establish a connection to the DB
        Service-->DB: connect
    end
```

----------------------------------------

TITLE: Adding Tags to Commits in GitGraph - Mermaid
DESCRIPTION: This snippet extends commit declarations by attaching tags with the 'tag' attribute, optionally combining ID, type, and tag fields. Tags serve as visual markers for releases, versions, or milestones. The code highlights how attributes can be mixed to provide detailed commit annotations in diagrams for clear communication of release points or special events.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
gitGraph
   commit
   commit id: "Normal" tag: "v1.0.0"
   commit
   commit id: "Reverse" type: REVERSE tag: "RC_1"
   commit
   commit id: "Highlight" type: HIGHLIGHT tag: "8.8.4"
   commit
```

----------------------------------------

TITLE: Changing Flowchart Config in Mermaid Graph
DESCRIPTION: This example applies specific flowchart configurations to a Mermaid graph using a directive.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_12

LANGUAGE: Mermaid
CODE:
```
%%{init: { "flowchart": { "htmlLabels": true, "curve": "linear" } } }%%
graph TD
A(Forest) --> B[/Another/]
A --> C[End]
  subgraph section
  B
  C
  end
```

LANGUAGE: Mermaid
CODE:
```
%%{init: { "flowchart": { "htmlLabels": true, "curve": "linear" } } }%%
graph TD
A(Forest) --> B[/Another/]
A --> C[End]
  subgraph section
  B
  C
  end
```

----------------------------------------

TITLE: Styling Multiple Links - Mermaid
DESCRIPTION: This snippet demonstrates how to style multiple links in a Mermaid flowchart in a single statement using the `linkStyle` directive.  Separate the link numbers with commas.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_104

LANGUAGE: Mermaid
CODE:
```
linkStyle 1,2,7 color:blue;
```

----------------------------------------

TITLE: Using Actor Symbols - Mermaid
DESCRIPTION: Illustrates how to use the `actor` keyword instead of `participant` to render actors using a distinct stick-figure symbol, rather than the default rectangle box.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    actor Alice
    actor Bob
    Alice->>Bob: Hi Bob
    Bob->>Alice: Hi Alice
```

----------------------------------------

TITLE: Defining Classes and Relationships
DESCRIPTION: This snippet demonstrates two ways of defining a class using the 'class' keyword and using a relationship definition. It also showcases the definition of a relationship (inheritance) between two classes, showing basic class definitions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
classDiagram
    class Animal
    Vehicle <|-- Car
```

----------------------------------------

TITLE: Assigning IDs to Kanban Columns and Tasks in Mermaid
DESCRIPTION: Shows how to assign unique IDs to both columns (e.g., `id1[Todo]`) and tasks (e.g., `id2[Create JISON]`) within a Mermaid Kanban diagram. IDs can be used for referencing or styling specific elements.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/diagrams/kanban/samples.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
kanban
  id1[Todo]
    id2[Create JISON]
    id3[Update DB function]
    id4[Create parsing tests]
    id5[define getData]
    id6[Create renderer]
  id7[In progress]
    id8[Design grammar]
```

----------------------------------------

TITLE: Defining Critical Regions - Mermaid
DESCRIPTION: Illustrates how to define a `critical` region for actions that must be performed automatically, potentially followed by `option` blocks to handle specific circumstances or outcomes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_17

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    critical Establish a connection to the DB
        Service-->DB: connect
    option Network timeout
        Service-->Service: Log error
    option Credentials rejected
        Service-->Service: Log different error
    end
```

----------------------------------------

TITLE: Choice Pseudo-State
DESCRIPTION: This snippet demonstrates the use of the choice pseudo-state represented with <<choice>> to model conditional branching.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_11

LANGUAGE: mermaid-example
CODE:
```
stateDiagram-v2
    state if_state <<choice>>
    [*] --> IsPositive
    IsPositive --> if_state
    if_state --> False: if n < 0
    if_state --> True : if n >= 0
```

----------------------------------------

TITLE: Mermaid Configuration Security Options in TypeScript
DESCRIPTION: Type definitions for security-related configuration options in Mermaid.js, including securityLevel and secure properties. Security levels can be set to strict, loose, antiscript, or sandbox modes to control how diagrams are processed.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_31

LANGUAGE: TypeScript
CODE:
```
securityLevel?: "strict" | "loose" | "antiscript" | "sandbox"
```

LANGUAGE: TypeScript
CODE:
```
secure?: string[]
```

----------------------------------------

TITLE: Modeling a Git Graph with Mermaid JavaScript
DESCRIPTION: This snippet demonstrates a simple Git branching model using Mermaid's gitGraph syntax, including commits, branches, checkouts, and merges. The only dependency is Mermaid. Commands are text-based (e.g., 'commit', 'branch'); the diagram visualizes commit and branch structure, as supported by Mermaid's experimental gitGraph feature.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
gitGraph
  commit
  commit
  branch develop
  checkout develop
  commit
  commit
  checkout main
  merge develop
  commit
  commit
```

----------------------------------------

TITLE: Customizing Base Theme with themeVariables (Mermaid)
DESCRIPTION: Illustrates how to modify the 'base' theme for a specific diagram by providing custom color values for `themeVariables` within the frontmatter configuration block.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/theming.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
---
config:
  theme: 'base'
  themeVariables:
    primaryColor: '#BB2528'
    primaryTextColor: '#fff'
    primaryBorderColor: '#7C0000'
    lineColor: '#F8B229'
    secondaryColor: '#006100'
    tertiaryColor: '#fff'
---
        graph TD
          A[Christmas] -->|Get money| B(Go shopping)
          B --> C{Let me think}
          B --> G[/Another/]
          C ==>|One| D[Laptop]
          C -->|Two| E[iPhone]
          C -->|Three| F[fa:fa-car Car]
          subgraph section
            C
            D
            E
            F
            G
          end
```

----------------------------------------

TITLE: Applying classDef with class Statement
DESCRIPTION: Demonstrates how to use the class statement to apply named styles to one or more states. Shows both single state styling and multiple state styling.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_19

LANGUAGE: txt
CODE:
```
class [one or more state names, separated by commas] [name of a style defined with classDef]
```

LANGUAGE: txt
CODE:
```
class Crash badBadEvent
```

LANGUAGE: txt
CODE:
```
class Moving, Crash movement
```

----------------------------------------

TITLE: Creating a Thick Link with Text
DESCRIPTION: This snippet creates a thick link with associated text between two nodes, emphasizing the connection and providing context.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_74

LANGUAGE: Mermaid
CODE:
```
flowchart LR
   A == text ==> B
```

----------------------------------------

TITLE: Repeated User Journey Diagram in Mermaid
DESCRIPTION: Replicates the user journey diagram, reinforcing structure and syntax for depicting sequential activities and participation in a journey map.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_10

LANGUAGE: mermaid
CODE:
```
journey
  title My working day
  section Go to work
    Make tea: 5: Me
    Go upstairs: 3: Me
    Do work: 1: Me, Cat
  section Go home
    Go downstairs: 5: Me
    Sit down: 5: Me
```

----------------------------------------

TITLE: Defining a Process Node with Custom Shape in Mermaid (mermaid)
DESCRIPTION: This Mermaid code snippet defines a top-down flowchart with a single node using the 'rect' shape, labeled as 'This is a process'. It illustrates the assignment of a standard process box shape to a node, useful for representing process steps in Mermaid diagrams with explicit shape control. Inputs are simple Mermaid node assignments; output is a diagram with a rectangular process node. Requires support for custom shape syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: rect, label: "This is a process" }
```

----------------------------------------

TITLE: Configuring Gantt Chart (JavaScript)
DESCRIPTION: Illustrates how to configure various aspects of the Gantt chart rendering using the `mermaid.ganttConfig` JavaScript object. This object accepts parameters to control margins, bar dimensions, font sizes, axis format, tick intervals, and other layout options.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_16

LANGUAGE: javascript
CODE:
```
mermaid.ganttConfig = {
  titleTopMargin: 25, // Margin top for the text over the diagram
  barHeight: 20, // The height of the bars in the graph
  barGap: 4, // The margin between the different activities in the gantt diagram
  topPadding: 75, // Margin between title and gantt diagram and between axis and gantt diagram.
  rightPadding: 75, // The space allocated for the section name to the right of the activities
  leftPadding: 75, // The space allocated for the section name to the left of the activities
  gridLineStartPadding: 10, // Vertical starting position of the grid lines
  fontSize: 12, // Font size
  sectionFontSize: 24, // Font size for sections
  numberSectionStyles: 1, // The number of alternating section styles
  axisFormat: '%d/%m', // Date/time format of the axis
  tickInterval: '1week', // Axis ticks
  topAxis: true, // When this flag is set, date labels will be added to the top of the chart
  displayMode: 'compact', // Turns compact mode on
  weekday: 'sunday' // On which day a week-based interval should start
};
```

----------------------------------------

TITLE: Changing Font Family via Directive
DESCRIPTION: A specific directive example demonstrating how to change the font family used in the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_8

LANGUAGE: mermaid
CODE:
```
%%{init: { "fontFamily": "Trebuchet MS, Verdana, Arial, Sans-Serif" } }%%
```

----------------------------------------

TITLE: Escaping Commas in Sankey Diagram Nodes
DESCRIPTION: The snippet demonstrates handling commas within node labels using double quotes. The diagram uses `sankey-beta` and data formatted as source, target, and value. By wrapping a node in double quotes, commas are interpreted as part of the node's name rather than separators.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_7

LANGUAGE: Mermaid
CODE:
```
```mermaid
sankey-beta

Pumped heat,"Heating and cooling, homes",193.026
Pumped heat,"Heating and cooling, commercial",70.672
```
```

----------------------------------------

TITLE: Defining Labelled Class Relationships in Mermaid - Mermaid-Example
DESCRIPTION: Presents a practical Mermaid code example for labelling class diagram relationships (e.g., 'Inheritance', 'Composition'), enhancing understanding of relationship types in UML. This snippet does not require prerequisites beyond Mermaid and outputs diagrams with explicit relationship names for documentation and teaching purposes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
classDiagram
classA --|> classB : Inheritance
classC --* classD : Composition
classE --o classF : Aggregation
classG --> classH : Association
classI -- classJ : Link(Solid)
classK ..> classL : Dependency
classM ..|> classN : Realization
classO .. classP : Link(Dashed)

```

----------------------------------------

TITLE: Defining Various Specialized Node Shapes in Mermaid Flowchart DSL
DESCRIPTION: This collective group of snippets defines multiple specialized node shapes for flowcharts including notch-rect (card), lin-rect (lined process), sm-circ (small start), fork (fork/join), hourglass (collate), comment (curly braces), bolt (communication link), doc (document), delay (half-rounded rectangle), das (direct access storage), lin-cyl (disk storage), curv-trap (curved trapezoid), div-rect (divided process), tri (small triangle), win-pane (internal storage), f-circ (junction), lin-doc (lined document), notch-pent (loop limit), flip-tri (manual file), sl-rect (manual input), docs (multi-document), processes (multi-process), flag (paper tape), bow-rect (stored data), cross-circ (summary), tag-doc (tagged document), and tag-rect (tagged process). Each defines node shape and label to visually communicate semantic meanings in flowcharts. Requires Mermaid's support for all these shape types with custom node attribute syntax. Input: Mermaid code snippets; output: various visually distinct flowchart nodes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_18

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: notch-rect, label: "Card" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: lin-rect, label: "Lined process" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: sm-circ, label: "Small start" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: fork, label: "Fork or Join" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: hourglass, label: "Collate" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: comment, label: "Comment" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: bolt, label: "Communication link" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: doc, label: "Document" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: delay, label: "Delay" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: das, label: "Direct access storage" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: lin-cyl, label: "Disk storage" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: curv-trap, label: "Display" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: div-rect, label: "Divided process" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: tri, label: "Extract" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: win-pane, label: "Internal storage" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: f-circ, label: "Junction" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: lin-doc, label: "Lined document" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: notch-pent, label: "Loop limit" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: flip-tri, label: "Manual file" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: sl-rect, label: "Manual input" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: docs, label: "Multiple documents" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: processes, label: "Multiple processes" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: flag, label: "Paper tape" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: bow-rect, label: "Stored data" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: cross-circ, label: "Summary" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: tag-doc, label: "Tagged document" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: tag-rect, label: "Tagged process" }
```

----------------------------------------

TITLE: Creating Class Diagrams with Notes in Mermaid
DESCRIPTION: Demonstrates how to add general notes and class-specific notes in Mermaid class diagrams. Notes can provide additional context or explanation for either the entire diagram or specific classes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_24

LANGUAGE: mermaid
CODE:
```
classDiagram
    note "This is a general note"
    note for MyClass "This is a note for a class"
    class MyClass{
    }
```

----------------------------------------

TITLE: Setting Diagram Direction in Mermaid
DESCRIPTION: This code demonstrates setting the rendering direction for a Mermaid class diagram using the `direction` statement. The `direction` can be set to `RL` for right-to-left, or other valid options.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_18

LANGUAGE: mermaid
CODE:
```
classDiagram
  direction RL
  class Student {
    -idCard : IdCard
  }
  class IdCard{
    -id : int
    -name : string
  }
  class Bike{
    -id : int
    -name : string
  }
  Student "1" --o "1" IdCard : carries
  Student "1" --o "1" Bike : rides
```

----------------------------------------

TITLE: Complete State Diagram with Multiple Styles
DESCRIPTION: A complete Mermaid state diagram example showing classDef definitions and class statements for applying different styles to states like Still, Moving, and Crash.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_20

LANGUAGE: mermaid
CODE:
```
   stateDiagram
   direction TB

   accTitle: This is the accessible title
   accDescr: This is an accessible description

   classDef notMoving fill:white
   classDef movement font-style:italic
   classDef badBadEvent fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow

   [*]--> Still
   Still --> [*]
   Still --> Moving
   Moving --> Still
   Moving --> Crash
   Crash --> [*]

   class Still notMoving
   class Moving, Crash movement
   class Crash badBadEvent
   class end badBadEvent
```

----------------------------------------

TITLE: Class Application in Mindmap
DESCRIPTION: This snippet demonstrates the use of classes to style mindmap nodes, similar to applying CSS classes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_11

LANGUAGE: mermaid
CODE:
```
mindmap
    Root
        A[A]
        :::urgent large
        B(B)
        C
```

----------------------------------------

TITLE: Customizing Highlight Commit Colors per Branch in Mermaid
DESCRIPTION: Illustrates how to customize the color of highlighted commits specifically for the first branch (index 0) using the 'gitInv0' theme variable. This allows branch-specific styling for highlighted commits.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_33

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    'gitInv0': '#ff0000'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit
```

----------------------------------------

TITLE: Modeling Two-way Class Relationships - Mermaid
DESCRIPTION: Demonstrates how to represent a bidirectional relationship in a Mermaid class diagram using the <|--|> syntax. Only Mermaid is required for rendering; input entities are class names, and output is a diagram with a two-way inheritance or association arrow. This technique is used to model N:M class relationships visually.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
classDiagram
    Animal <|--|> Zebra

```

----------------------------------------

TITLE: Entity Relationship Diagram (ER) in Mermaid
DESCRIPTION: Displays customer, order, line-item, and delivery address entities with their relationships, illustrating how entities are related via one-to-many and one-to-one associations. Dependencies include Mermaid's ER diagram syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
erDiagram
 CUSTOMER ||--o{ ORDER : places
 ORDER ||--|{ LINE-ITEM : contains
 CUSTOMER }|..|{ DELIVERY-ADDRESS : uses
```

----------------------------------------

TITLE: Configuring Kanban Ticket Base URL - YAML
DESCRIPTION: This snippet demonstrates how to configure the `ticketBaseUrl` in a Mermaid Kanban diagram using a YAML configuration block. This allows linking ticket numbers to an external system.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/kanban.md#_snippet_5

LANGUAGE: yaml
CODE:
```
---
config:
  kanban:
    ticketBaseUrl: 'https://yourproject.atlassian.net/browse/#TICKET#'
---
```

----------------------------------------

TITLE: Shorthand Class Attachment - Mermaid
DESCRIPTION: This snippet demonstrates the shorthand method for attaching a class to a node in a Mermaid flowchart using the `:::` operator.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_111

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    A:::someclass --> B
    classDef someclass fill:#f96
```

----------------------------------------

TITLE: Grouping Classes Using Namespaces - Mermaid
DESCRIPTION: Demonstrates how to group related classes using the namespace block in a Mermaid class diagram. Supports encapsulating classes and their attributes within named modules or packages. Dependencies are limited to Mermaid; input includes a namespace name and enclosed class definitions, with output being a visual grouping in the diagram for clarity and hierarchy.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_12

LANGUAGE: mermaid
CODE:
```
classDiagram
namespace BaseShapes {
    class Triangle
    class Rectangle {
      double width
      double height
    }
}

```

----------------------------------------

TITLE: Cherry-Picking Commits in Mermaid GitGraph
DESCRIPTION: Shows how to cherry-pick a specific commit from one branch onto the current branch using the `cherry-pick id:"<commit_id>"` command in Mermaid GitGraph. The example demonstrates creating 'develop' and 'release' branches, merging 'develop' into 'main', and then cherry-picking the merge commit (identified by `id:"MERGE"`) onto the 'release' branch, specifying its parent (`parent:"B"`). The cherry-picked commit is visually distinct.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_9

LANGUAGE: mermaid
CODE:
```
    gitGraph
        commit id: "ZERO"
        branch develop
        branch release
        commit id:"A"
        checkout main
        commit id:"ONE"
        checkout develop
        commit id:"B"
        checkout main
        merge develop id:"MERGE"
        commit id:"TWO"
        checkout release
        cherry-pick id:"MERGE" parent:"B"
        commit id:"THREE"
        checkout develop
        commit id:"C"
```

----------------------------------------

TITLE: Longer links
DESCRIPTION: Demonstrates the use of extra dashes for longer links to influence the visual layout, such as `B ---->|No| E[End]` or `B -- No ----> E[End]`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_32

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A[Start] --> B{Is it?}
    B -->|Yes| C[OK]
    C --> D[Rethink]
    D --> B
    B ---->|No| E[End]
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A[Start] --> B{Is it?}
    B -- Yes --> C[OK]
    C --> D[Rethink]
    D --> B
    B -- No ----> E[End]
```

----------------------------------------

TITLE: Git Graph Example in Mermaid
DESCRIPTION: Represents a Git commit history with branching and checkout operations, demonstrating version control flow visually within Mermaid syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
gitGraph
   commit
   commit
   branch develop
   commit
   commit
   commit
   checkout main
   commit
   commit
```

----------------------------------------

TITLE: Configuring Parallel Commits (Enabled)
DESCRIPTION: Shows how to enable parallel commit rendering in Mermaid Git Graphs by setting `parallelCommits: true` (available from v10.8.0+) within a configuration block. This disables the default temporal rendering, aligning commits equidistant from their parent.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_20

LANGUAGE: mermaid
CODE:
```
---
config:
  gitGraph:
    parallelCommits: true
---
gitGraph:
  commit
  branch develop
  commit
  commit
  checkout main
  commit
  commit
```

----------------------------------------

TITLE: Changing Flowchart Config via Directive
DESCRIPTION: This code snippet demonstrates changing flowchart configurations using a directive. The `htmlLabels` is set to `true` and `curve` is set to `linear`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_11

LANGUAGE: JSON
CODE:
```
%%{init: { "flowchart": { "htmlLabels": true, "curve": "linear" } } }%%
```

----------------------------------------

TITLE: Attaching a Class to a Node - Mermaid
DESCRIPTION: This snippet shows how to attach a previously defined class to a node in a Mermaid flowchart using the `class` directive.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_109

LANGUAGE: Mermaid
CODE:
```
class nodeId1 className;
```

----------------------------------------

TITLE: Applying Background Highlighting in Mermaid Sequence Diagrams
DESCRIPTION: Shows how to use the `rect rgb(...)` or `rect rgba(...)` syntax in Mermaid to highlight specific sections of a sequence diagram with a colored background rectangle. Nested rectangles are also possible for layered highlighting.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_20

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Alice
    participant John

    rect rgb(191, 223, 255)
    note right of Alice: Alice calls John.
    Alice->>+John: Hello John, how are you?
    rect rgb(200, 150, 255)
    Alice->>+John: John, can you hear me?
    John-->>-Alice: Hi Alice, I can hear you!
    end
    John-->>-Alice: I feel great!
    end
    Alice ->>+ John: Did you want to go to the game tonight?
    John -->>- Alice: Yeah! See you there.
```

----------------------------------------

TITLE: Setting Diagram Theme via Frontmatter (Mermaid)
DESCRIPTION: Shows how to apply a specific theme, 'forest' in this case, to an individual Mermaid diagram using the frontmatter configuration block at the beginning of the diagram definition.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/theming.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
---
config:
  theme: 'forest'
---
  graph TD
    a --> b
```

----------------------------------------

TITLE: Set Diagram-Specific Mermaid Theme (Frontmatter)
DESCRIPTION: Applies a specific theme to an individual Mermaid diagram using frontmatter configuration within the diagram definition. This overrides the site-wide theme for this particular diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/theming.md#_snippet_1

LANGUAGE: Mermaid
CODE:
```
---
config:
  theme: 'forest'
---
  graph TD
    a --> b
```

----------------------------------------

TITLE: Defining Packet Diagram Syntax in Mermaid
DESCRIPTION: Basic syntax structure for initiating a Mermaid Packet Diagram using the `packet-beta` keyword. It shows placeholders for defining single-bit (`start`) and multi-bit (`start-end`) blocks within the packet structure.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/packet.md#_snippet_0

LANGUAGE: markdown
CODE:
```
```md
packet-beta
start: "Block name" %% Single-bit block
start-end: "Block name" %% Multi-bit blocks
... More Fields ...
```
```

----------------------------------------

TITLE: Using Markdown Strings for Node Labels
DESCRIPTION: Demonstrates the use of Markdown strings (`"```"`) for node labels, enabling text formatting (bold, italics) using `**` and `*` respectively, and automatic text wrapping, including support for newline characters.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_12

LANGUAGE: Mermaid
CODE:
```
mindmap
    id1["`**Root** with
a second line
Unicode works too: 🥺`"]
      id2["`The dog in **the** hog... a *very long text* that wraps to a new line`"]
      id3[Regular labels still works]
```

LANGUAGE: Mermaid
CODE:
```
mindmap
    id1["`**Root** with
a second line
Unicode works too: 🥺`"]
      id2["`The dog in **the** hog... a *very long text* that wraps to a new line`"]
      id3[Regular labels still works]
```

----------------------------------------

TITLE: Adding URL Links to Classes in Mermaid
DESCRIPTION: Shows how to create clickable URL links for classes in two different ways using 'link' and 'click href' syntax. Each link can include a tooltip that appears on hover.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_25

LANGUAGE: mermaid
CODE:
```
classDiagram
class Shape
link Shape "https://www.github.com" "This is a tooltip for a link"
class Shape2
click Shape2 href "https://www.github.com" "This is a tooltip for a link"
```

----------------------------------------

TITLE: Setting Bottom-to-Top Orientation in Mermaid GitGraph (v11.0.0+)
DESCRIPTION: Illustrates setting the Bottom-to-Top (`BT:`) orientation for a Mermaid gitGraph, available from v11.0.0 onwards. Commits flow vertically from bottom to top, and branches are arranged horizontally side-by-side.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_18

LANGUAGE: mermaid
CODE:
```
    gitGraph BT:
       commit
       commit
       branch develop
       commit
       commit
       checkout main
       commit
       commit
       merge develop
       commit
       commit
```

----------------------------------------

TITLE: Registering External Diagrams in TypeScript
DESCRIPTION: This `registerExternalDiagrams` function is designed to incorporate custom diagram types into Mermaid. It accepts an array of `ExternalDiagramDefinition` objects and an optional `opts` object that controls how the diagrams are loaded. If `opts.lazyLoad` is set to false, then the diagrams will load immediately. The purpose is to extend Mermaid's capabilities by adding new diagram types defined externally.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
registerExternalDiagrams: (`diagrams`, `opts`) => `Promise`<`void`>
```

----------------------------------------

TITLE: Defining Reusable Styles with Classes in Mermaid
DESCRIPTION: Illustrates how to use the `classDef` keyword to define reusable style classes (e.g., 'important', 'test') using CSS properties. These classes can then be applied to multiple nodes to maintain consistent styling across the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/requirementDiagram.md#_snippet_5

LANGUAGE: Mermaid
CODE:
```
requirementDiagram

requirement test_req {
    id: 1
    text: "class styling example"
    risk: low
    verifymethod: test
}

element test_entity {
    type: simulation
}

classDef important fill:#f96,stroke:#333,stroke-width:4px
classDef test fill:#ffa,stroke:#000
```

----------------------------------------

TITLE: Simple GitGraph with Three Commits in Mermaid
DESCRIPTION: Shows a basic Git Graph with three commits on the default main branch, demonstrating the minimal syntax required for a git diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
gitGraph
   commit
   commit
   commit
```

----------------------------------------

TITLE: Defining Alternatives (if/else) in ZenUML
DESCRIPTION: This snippet shows how to express alternative paths in a ZenUML diagram using `if/else if/else` notation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_11

LANGUAGE: mermaid
CODE:
```
zenuml
    Alice->Bob: Hello Bob, how are you?
    if(is_sick) {
      Bob->Alice: Not so good :(
    } else {
      Bob->Alice: Feeling fresh like a daisy
    }
```

----------------------------------------

TITLE: Defining Optional Fragments (opt) in ZenUML
DESCRIPTION: This snippet demonstrates how to render an `opt` fragment in a ZenUML diagram, indicating an optional section of the sequence.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_12

LANGUAGE: mermaid
CODE:
```
zenuml
    Alice->Bob: Hello Bob, how are you?
    Bob->Alice: Not so good :(
    opt {
      Bob->Alice: Thanks for asking
    }
```

----------------------------------------

TITLE: Mermaid Gantt Chart Timeline with Frontmatter Example
DESCRIPTION: An advanced Mermaid Gantt chart example configured as a timeline using YAML frontmatter for global settings and custom CSS. Demonstrates setting display mode, theme CSS, and Gantt-specific options.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_22

LANGUAGE: mermaid
CODE:
```
---
    # Frontmatter config, YAML comments
    title: Ignored if specified in chart
    displayMode: compact     #gantt specific setting but works at this level too
    config:
#        theme: forest
#        themeCSS: " #item36 { fill: CadetBlue } "
        themeCSS: " // YAML supports multiline strings using a newline markers: \n\n            #item36 { fill: CadetBlue }       \n\n            // Custom marker workaround CSS from forum (below)    \n\n            rect[id^=workaround] { height: calc(100% - 50px) ; transform: translate(9px, 25px); y: 0; width: 1.5px; stroke: none; fill: red; }   \n\n            text[id^=workaround] { fill: red; y: 100%; font-size: 15px;}\n        "
        gantt:
            useWidth: 400
            rightPadding: 0
            topAxis: true  #false
            numberSectionStyles: 2
---
gantt
    title Timeline - Gantt Sampler
    dateFormat YYYY
    axisFormat %y
    %% this next line doesn't recognise 'decade' or 'year', but will silently ignore
    tickInterval 1decade

    section Issue19062
    71   :            item71, 1900, 1930
    section Issue19401
    36   :            item36, 1913, 1935
    section Issue1300
    94   :            item94, 1910, 1915
    5    :            item5,  1920, 1925
    0    : milestone, item0,  1918, 1s
    9    : vert,              1906, 1s   %% not yet official
    64   : workaround,        1923, 1s   %% custom CSS object https://github.com/mermaid-js/mermaid/issues/3250
```

----------------------------------------

TITLE: Defining Entity Relationship Diagrams with Mermaid Syntax (mermaid)
DESCRIPTION: This snippet demonstrates how to declare and define an Entity Relationship Diagram using Mermaid notation, starting with the 'erDiagram' keyword. Each line establishes relationships between entities such as CUSTOMER, ORDER, INVOICE, and PRODUCT, using notations like '}|..|{', '||--o{', and descriptive labels (e.g., 'has', 'places'). No external dependencies are needed; paste directly into a Mermaid-compatible Markdown or the Live Editor. Inputs are plain text entity relationships; the output is a rendered ER diagram visualization.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/syntax-reference.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
erDiagram
          CUSTOMER }|..|{ DELIVERY-ADDRESS : has
          CUSTOMER ||--o{ ORDER : places
          CUSTOMER ||--o{ INVOICE : "liable for"
          DELIVERY-ADDRESS ||--o{ ORDER : receives
          INVOICE ||--|{ ORDER : covers
          ORDER ||--|{ ORDER-ITEM : includes
          PRODUCT-CATEGORY ||--|{ PRODUCT : contains
          PRODUCT ||--o{ ORDER-ITEM : "ordered in"
```

----------------------------------------

TITLE: Setting Direction in Subgraphs - Mermaid
DESCRIPTION: This snippet illustrates how to set the rendering direction of subgraphs within a Mermaid flowchart. The `direction` statement is used to specify the desired layout direction (TB, RL, BT) for each subgraph.  Note that if any of a subgraph's nodes are linked to the outside, subgraph direction will be ignored.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_95

LANGUAGE: Mermaid
CODE:
```
flowchart LR
  subgraph TOP
    direction TB
    subgraph B1
        direction RL
        i1 -->f1
    end
    subgraph B2
        direction BT
        i2 -->f2
    end
  end
  A --> TOP --> B
  B1 --> B2
```

----------------------------------------

TITLE: Demonstrating Multiple Custom Shapes in Mermaid Flowchart (mermaid)
DESCRIPTION: This Mermaid snippet visualizes a right-to-left flowchart with five nodes, each utilizing a newly specified shape attribute: manual-file, manual-input, docs, procs, and paper-tape. The snippet uses the enhanced node definition syntax with shape and label parameters, showcasing real-world usage of custom node types. Compatible with Mermaid flows supporting custom shapes. Input consists of node assignments with shape and label; output is a diagram with corresponding custom-shaped nodes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
flowchart RL
    A@{ shape: manual-file, label: "File Handling"}
    B@{ shape: manual-input, label: "User Input"}
    C@{ shape: docs, label: "Multiple Documents"}
    D@{ shape: procs, label: "Process Automation"}
    E@{ shape: paper-tape, label: "Paper Records"}
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Multi-Process
DESCRIPTION: This snippet defines shape for Multi-Process.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_59

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: processes, label: "Multiple processes" }
```

----------------------------------------

TITLE: Applying Style Classes During Relationship Definition in Mermaid
DESCRIPTION: Illustrates applying predefined style classes (`foo`, `bar`) to nodes directly within the relationship definition line using the `:::` operator (e.g., `PERSON:::foo`, `HOUSE:::bar`). This example defines multiple classes (`foo`, `bar`, `foobar`) using `classDef` for different visual styles (e.g., different stroke colors).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_13

LANGUAGE: mermaid-example
CODE:
```
erDiagram
    CAR {
        string registrationNumber
        string make
        string model
    }
    PERSON {
        string firstName
        string lastName
        int age
    }
    PERSON:::foo ||--|| CAR : owns
    PERSON o{--|| HOUSE:::bar : has

    classDef foo stroke:#f00
    classDef bar stroke:#0f0
    classDef foobar stroke:#00f
```

----------------------------------------

TITLE: Adding Comments in Mermaid Gantt
DESCRIPTION: Shows a basic Mermaid Gantt diagram definition including a line starting with `%%`, which is ignored by the parser. Comments must be on their own line.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_13

LANGUAGE: Mermaid
CODE:
```
gantt
    title A Gantt Diagram
    %% This is a comment
    dateFormat YYYY-MM-DD
    section Section
        A task          :a1, 2014-01-01, 30d
        Another task    :after a1, 20d
    section Another
        Task in Another :2014-01-12, 12d
        another task    :24d
```

----------------------------------------

TITLE: Setting Parse Error Handler in TypeScript
DESCRIPTION: The `setParseErrorHandler` function provides an alternative way to set the `parseError` callback function for handling errors during diagram parsing. This is particularly useful for environments where you can't directly set a member on the `mermaid` object. The callback will receive the error and a hash. The function returns void.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_8

LANGUAGE: TypeScript
CODE:
```
setParseErrorHandler: (`parseErrorHandler`) => `void`
```

----------------------------------------

TITLE: Styling Links - Mermaid
DESCRIPTION: This snippet demonstrates how to style links in a Mermaid flowchart using the `linkStyle` directive. You can specify the link number and apply CSS styles such as color, stroke, and stroke width.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_103

LANGUAGE: Mermaid
CODE:
```
linkStyle 3 stroke:#ff3,stroke-width:4px,color:red;
```

----------------------------------------

TITLE: Example: Styling Quadrant Chart Points (Standard Mermaid Block)
DESCRIPTION: Presents the standard Mermaid code for styling points in a quadrant chart, combining direct inline styles and predefined classes. This code is identical to the `mermaid-example` version and defines chart elements (title, axes, quadrants), points with coordinates and styles (some direct, some class-based), and class definitions (`classDef`). It illustrates the practical application and precedence of both styling methods.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/quadrantChart.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
quadrantChart
  title Reach and engagement of campaigns
  x-axis Low Reach --> High Reach
  y-axis Low Engagement --> High Engagement
  quadrant-1 We should expand
  quadrant-2 Need to promote
  quadrant-3 Re-evaluate
  quadrant-4 May be improved
  Campaign A: [0.9, 0.0] radius: 12
  Campaign B:::class1: [0.8, 0.1] color: #ff3300, radius: 10
  Campaign C: [0.7, 0.2] radius: 25, color: #00ff33, stroke-color: #10f0f0
  Campaign D: [0.6, 0.3] radius: 15, stroke-color: #00ff0f, stroke-width: 5px ,color: #ff33f0
  Campaign E:::class2: [0.5, 0.4]
  Campaign F:::class3: [0.4, 0.5] color: #0000ff
  classDef class1 color: #109060
  classDef class2 color: #908342, radius : 10, stroke-color: #310085, stroke-width: 10px
  classDef class3 color: #f00fff, radius : 10
```

----------------------------------------

TITLE: Example: Styling Quadrant Chart Points (Mermaid Example Block)
DESCRIPTION: Provides a complete, renderable example within a `mermaid-example` block demonstrating how to style points in a quadrant chart using a mix of direct inline styles and predefined classes. It includes chart setup (title, axes, quadrants), point definitions with coordinates and styles, and class definitions (`classDef`). Note that direct styles (like on Campaign B, C, D, F) override corresponding class styles.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/quadrantChart.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
quadrantChart
  title Reach and engagement of campaigns
  x-axis Low Reach --> High Reach
  y-axis Low Engagement --> High Engagement
  quadrant-1 We should expand
  quadrant-2 Need to promote
  quadrant-3 Re-evaluate
  quadrant-4 May be improved
  Campaign A: [0.9, 0.0] radius: 12
  Campaign B:::class1: [0.8, 0.1] color: #ff3300, radius: 10
  Campaign C: [0.7, 0.2] radius: 25, color: #00ff33, stroke-color: #10f0f0
  Campaign D: [0.6, 0.3] radius: 15, stroke-color: #00ff0f, stroke-width: 5px ,color: #ff33f0
  Campaign E:::class2: [0.5, 0.4]
  Campaign F:::class3: [0.4, 0.5] color: #0000ff
  classDef class1 color: #109060
  classDef class2 color: #908342, radius : 10, stroke-color: #310085, stroke-width: 10px
  classDef class3 color: #f00fff, radius : 10
```

----------------------------------------

TITLE: Creating a New Shape Function in TypeScript
DESCRIPTION: Shows the implementation pattern for creating a new shape function that generates an SVG element, requiring parent element, node data, and rendering options.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/adding-new-shape.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { Node, RenderOptions } from '../../types.ts';

export const myNewShape = async (
  parent: SVGAElement,
  node: Node,
  renderOptions: RenderOptions
) => {
  // Create your shape here
  const shape = parent.insert('g').attr('class', 'my-new-shape');
  // Add other elements or styles as needed
  return shape;
};
```

----------------------------------------

TITLE: Defining Lollipop Interface Relationships - Mermaid
DESCRIPTION: Explains and demonstrates the use of lollipop interface notation in Mermaid class diagrams, using the ()-- syntax to depict an interface connected to a class. Requires only Mermaid and correct syntax. The diagram visually distinguishes interface roles, which are unique per instance and not shared across multiple associations.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_8

LANGUAGE: mermaid
CODE:
```
classDiagram
  bar ()-- foo

```

----------------------------------------

TITLE: Applying the 'forest' Theme to a Git Graph
DESCRIPTION: Illustrates applying the 'forest' theme to a complex Mermaid Git Graph using a configuration block. The `theme: 'forest'` directive sets the visual style. The example also sets `logLevel: 'debug'`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_22

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'forest'
---
      gitGraph
        commit
        branch hotfix
        checkout hotfix
        commit
        branch develop
        checkout develop
        commit id:"ash" tag:"abc"
        branch featureB
        checkout featureB
        commit type:HIGHLIGHT
        checkout main
        checkout hotfix
        commit type:NORMAL
        checkout develop
        commit type:REVERSE
        checkout featureB
        commit
        checkout main
        merge hotfix
        checkout featureB
        commit
        checkout develop
        branch featureA
        commit
        checkout develop
        merge hotfix
        checkout featureA
        commit
        checkout featureB
        commit
        checkout develop
        merge featureA
        branch release
        checkout release
        commit
        checkout main
        commit
        checkout release
        merge main
        checkout develop
        merge release
```

----------------------------------------

TITLE: Merging Branches with Attributes in Mermaid GitGraph
DESCRIPTION: Illustrates customizing a merge commit in Mermaid GitGraph by adding attributes like `id`, `tag`, and `type` to the `merge` command. The example shows creating multiple branches ('nice_feature', 'very_nice_feature'), adding commits, and then merging 'nice_feature' into 'main' with a custom ID, tag, and reverse commit type.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_8

LANGUAGE: mermaid
CODE:
```
    gitGraph
       commit id: "1"
       commit id: "2"
       branch nice_feature
       checkout nice_feature
       commit id: "3"
       checkout main
       commit id: "4"
       checkout nice_feature
       branch very_nice_feature
       checkout very_nice_feature
       commit id: "5"
       checkout main
       commit id: "6"
       checkout nice_feature
       commit id: "7"
       checkout main
       merge nice_feature id: "customID" tag: "customTag" type: REVERSE
       checkout very_nice_feature
       commit id: "8"
       checkout main
       commit id: "9"
```

----------------------------------------

TITLE: Transitions with Descriptive Labels
DESCRIPTION: Shows adding annotations to transitions with descriptive text, clarifying the nature of the transition between states.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_8

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
    s1 --> s2: A transition
```

----------------------------------------

TITLE: Chaining Links
DESCRIPTION: This snippet demonstrates chaining multiple links in the same line, connecting nodes with different text labels on each link.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_76

LANGUAGE: Mermaid
CODE:
```
flowchart LR
   A -- text --> B -- text2 --> C
```

----------------------------------------

TITLE: Suppressing Errors in Mermaid.run
DESCRIPTION: This JavaScript code demonstrates how to suppress errors during the rendering process of Mermaid diagrams using `mermaid.run`. It disables automatic rendering on load and then calls `mermaid.run` with the `suppressErrors` option set to true. Requires mermaid library to be imported.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_8

LANGUAGE: js
CODE:
```
mermaid.initialize({ startOnLoad: false });
await mermaid.run({
  suppressErrors: true,
});
```

----------------------------------------

TITLE: Customizing Branch Ordering in Mermaid gitGraph (mermaid)
DESCRIPTION: This snippet configures explicit display ordering of branches in Mermaid gitGraph diagrams using the 'order' attribute after each branch definition and, optionally, 'mainBranchOrder' in the configuration. Branches with the 'order' attribute are shown according to their specified value; those without it are displayed in their definition order. Inputs are gitGraph commands for branch creation and the order parameters. Outputs vary depending on branch order values set, allowing precision in diagram layout visual hierarchy. Proper ordering assists in representing complex branching models or aligning diagram flow to project conventions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_15

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
  gitGraph:
    showBranches: true
    showCommitLabel: true
---
      gitGraph
      commit
      branch test1 order: 3
      branch test2 order: 2
      branch test3 order: 1

```

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
  gitGraph:
    showBranches: true
    showCommitLabel: true
    mainBranchOrder: 2
---
      gitGraph
      commit
      branch test1 order: 3
      branch test2
      branch test3
      branch test4 order: 1

```

----------------------------------------

TITLE: Changing FontFamily in Mermaid Graph
DESCRIPTION: This example applies the 'Trebuchet MS, Verdana, Arial, Sans-Serif' font family to a Mermaid graph using a directive.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_8

LANGUAGE: Mermaid
CODE:
```
%%{init: { "fontFamily": "Trebuchet MS, Verdana, Arial, Sans-Serif" } }%%
graph TD
A(Forest) --> B[/Another/]
A --> C[End]
  subgraph section
  B
  C
  end
```

LANGUAGE: Mermaid
CODE:
```
%%{init: { "fontFamily": "Trebuchet MS, Verdana, Arial, Sans-Serif" } }%%
graph TD
A(Forest) --> B[/Another/]
A --> C[End]
  subgraph section
  B
  C
  end
```

----------------------------------------

TITLE: Creating Subgraphs with Explicit IDs
DESCRIPTION: Demonstrates creating subgraphs and assigning explicit ids using the following syntax:
`subgraph ide1 [one]
    a1-->a2
end`
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_43

LANGUAGE: mermaid
CODE:
```
flowchart TB
    c1-->a2
    subgraph ide1 [one]
    a1-->a2
    end
```

----------------------------------------

TITLE: Applying the 'default' Theme to a Git Graph
DESCRIPTION: Illustrates applying the 'default' theme to a complex Mermaid Git Graph using a configuration block. The `theme: 'default'` directive sets the visual style. The example also sets `logLevel: 'debug'` and uses various commit types (HIGHLIGHT, NORMAL, REVERSE).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_23

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'default'
---
      gitGraph
        commit type:HIGHLIGHT
        branch hotfix
        checkout hotfix
        commit
        branch develop
        checkout develop
        commit id:"ash" tag:"abc"
        branch featureB
        checkout featureB
        commit type:HIGHLIGHT
        checkout main
        checkout hotfix
        commit type:NORMAL
        checkout develop
        commit type:REVERSE
        checkout featureB
        commit
        checkout main
        merge hotfix
        checkout featureB
        commit
        checkout develop
        branch featureA
        commit
        checkout develop
        merge hotfix
        checkout featureA
        commit
        checkout featureB
        commit
        checkout develop
        merge featureA
        branch release
        checkout release
        commit
        checkout main
        commit
        checkout release
        merge main
        checkout develop
        merge release
```

----------------------------------------

TITLE: Nested Composite States
DESCRIPTION: This snippet demonstrates multiple layers of nested composite states.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_9

LANGUAGE: mermaid-example
CODE:
```
stateDiagram-v2
    [*] --> First

    state First {
        [*] --> Second

        state Second {
            [*] --> second
            second --> Third

            state Third {
                [*] --> third
                third --> [*]
            }
        }
    }
```

----------------------------------------

TITLE: Defining a Basic Kanban Diagram in Mermaid Syntax
DESCRIPTION: Illustrates the minimal Mermaid syntax required to define a Kanban diagram with one column and one task. The example includes the 'kanban' keyword followed by a column definition using a unique identifier and title, and a task indented under the column with its own identifier and description.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/kanban.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
kanban
  column1[Column Title]
    task1[Task Description]
```

----------------------------------------

TITLE: Creating a Simple Block Diagram
DESCRIPTION: This snippet shows the most basic structure of a block diagram with three horizontal blocks labeled 'a', 'b', and 'c'. The `block-beta` directive specifies the diagram type.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
```mermaid-example
block-beta
  a b c
```
```

----------------------------------------

TITLE: Styling a Node - Mermaid
DESCRIPTION: This snippet demonstrates how to apply specific styles to a node in a Mermaid flowchart using the `style` directive. You can set properties like fill color, stroke color, and stroke width.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_106

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    id1(Start)-->id2(Stop)
    style id1 fill:#f9f,stroke:#333,stroke-width:4px
    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5
```

----------------------------------------

TITLE: Defining User Journey Diagram - Mermaid Example
DESCRIPTION: Demonstrates the basic syntax for creating a user journey diagram in Mermaid using the `mermaid-example` block type. This example defines a title, sections, and tasks, including task names, scores (a value indicating feeling), and participating actors. It illustrates the structure for a simple 'My working day' journey.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/userJourney.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
journey
    title My working day
    section Go to work
      Make tea: 5: Me
      Go upstairs: 3: Me
      Do work: 1: Me, Cat
    section Go home
      Go downstairs: 5: Me
      Sit down: 5: Me
```

----------------------------------------

TITLE: Creating a C4 Dynamic Diagram using Mermaid
DESCRIPTION: This snippet demonstrates the `C4Dynamic` diagram type. It defines `ContainerDb`, `Container`, and `Component` elements within a `Container_Boundary`. Sequential interactions are shown using `Rel`, indicating the flow of calls between elements. `UpdateRelStyle` is used to customize the appearance and positioning of relationship labels and lines.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/c4.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
    C4Dynamic
    title Dynamic diagram for Internet Banking System - API Application

    ContainerDb(c4, "Database", "Relational Database Schema", "Stores user registration information, hashed authentication credentials, access logs, etc.")
    Container(c1, "Single-Page Application", "JavaScript and Angular", "Provides all of the Internet banking functionality to customers via their web browser.")
    Container_Boundary(b, "API Application") {
      Component(c3, "Security Component", "Spring Bean", "Provides functionality Related to signing in, changing passwords, etc.")
      Component(c2, "Sign In Controller", "Spring MVC Rest Controller", "Allows users to sign in to the Internet Banking System.")
    }
    Rel(c1, c2, "Submits credentials to", "JSON/HTTPS")
    Rel(c2, c3, "Calls isAuthenticated() on")
    Rel(c3, c4, "select * from users where username = ?", "JDBC")

    UpdateRelStyle(c1, c2, $textColor="red", $offsetY="-40")
    UpdateRelStyle(c2, c3, $textColor="red", $offsetX="-40", $offsetY="60")
    UpdateRelStyle(c3, c4, $textColor="red", $offsetY="-40", $offsetX="10")
```

----------------------------------------

TITLE: Adding Detailed Task Metadata in Mermaid Kanban
DESCRIPTION: Illustrates adding structured metadata (assignee, icon, priority, description) to a specific task (`id2`) using the `@{...}` syntax following the task ID. Also includes section styling applied to element `n1`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/diagrams/kanban/samples.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
kanban
  id1[Todo]
    id2[Create JISON]
    id3[Update DB function]
    id4[Create parsing tests]
    id5[define getData]
    id6[Create renderer]
  id7[In progress]
    id8[Design grammar]

  id2@{
    assigned: knsv
    icon: heart
    priority: high
    descr: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
  }
  style n1 stroke:#AA00FF,fill:#E1BEE7
```

----------------------------------------

TITLE: Embedding Math Expressions in Mermaid Sequence Diagrams
DESCRIPTION: Illustrates embedding LaTeX math expressions inside Mermaid sequence diagrams with interaction messages and participant names containing math notation. Mathematical expressions are wrapped in double dollar signs ($$) for KaTeX rendering. Requires Mermaid's sequenceDiagram rendering module with KaTeX enabled. Inputs are standard Mermaid sequence diagram commands enriched with math delimiters; outputs are sequence diagrams displaying formatted math expressions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/math.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    autonumber
    participant 1 as $$\alpha$$
    participant 2 as $$\beta$$
    1->>2: Solve: $$\sqrt{2+2}$$
    2-->>1: Answer: $$2$$
    Note right of 2: $$\sqrt{2+2}=\sqrt{4}=2$$
```

----------------------------------------

TITLE: Creating C4 Dynamic Diagram for API Authentication Flow with Mermaid
DESCRIPTION: This snippet demonstrates how to create a C4 Dynamic diagram for an Internet Banking System API Application. It illustrates the authentication flow between components, showing the sequence of interactions during the sign-in process.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/c4.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
C4Dynamic
title Dynamic diagram for Internet Banking System - API Application

ContainerDb(c4, "Database", "Relational Database Schema", "Stores user registration information, hashed authentication credentials, access logs, etc.")
Container(c1, "Single-Page Application", "JavaScript and Angular", "Provides all of the Internet banking functionality to customers via their web browser.")
Container_Boundary(b, "API Application") {
  Component(c3, "Security Component", "Spring Bean", "Provides functionality Related to signing in, changing passwords, etc.")
  Component(c2, "Sign In Controller", "Spring MVC Rest Controller", "Allows users to sign in to the Internet Banking System.")
}
Rel(c1, c2, "Submits credentials to", "JSON/HTTPS")
Rel(c2, c3, "Calls isAuthenticated() on")
Rel(c3, c4, "select * from users where username = ?", "JDBC")

UpdateRelStyle(c1, c2, $textColor="red", $offsetY="-40")
UpdateRelStyle(c2, c3, $textColor="red", $offsetX="-40", $offsetY="60")
UpdateRelStyle(c3, c4, $textColor="red", $offsetY="-40", $offsetX="10")
```

----------------------------------------

TITLE: Adding Tasks to Columns - Mermaid
DESCRIPTION: This snippet demonstrates how to add tasks to columns in a Mermaid Kanban diagram using the `taskId[Task Description]` syntax. Tasks are indented under their respective columns, and the task ID is a unique identifier.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/kanban.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
taskId[Task Description]
```

----------------------------------------

TITLE: Creating a State Diagram with Accessibility Metadata in Mermaid-js
DESCRIPTION: This snippet creates a state diagram with an accessibility title and description, depicting a transition from state s1 to s2. Useful for illustrating state transitions with accessibility support in Mermaid.js.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_16

LANGUAGE: mermaid
CODE:
```
   stateDiagram
      accTitle: My State Diagram
      accDescr: My State Diagram Description

       s1 --> s2
```

----------------------------------------

TITLE: Using Style Classes in Mermaid Class Diagrams
DESCRIPTION: Demonstrates defining and applying style classes to nodes using the 'classDef' keyword and ':::' notation. This approach allows reusing styles across multiple elements in the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_30

LANGUAGE: mermaid
CODE:
```
classDiagram
    class Animal:::someclass
    classDef someclass fill:#f96
```

----------------------------------------

TITLE: Commenting in Mermaid Class Diagram
DESCRIPTION: This snippet shows how to add comments to a Mermaid class diagram. Comments start with `%%` and are ignored by the parser.  The whole line following the comment indicator is treated as a comment.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_17

LANGUAGE: mermaid
CODE:
```
classDiagram
%% This whole line is a comment classDiagram class Shape <<interface>>
class Shape{
    <<interface>>
    noOfVertices
    draw()
}
```

----------------------------------------

TITLE: Adding CSS Classes to Mermaid Mindmap Nodes
DESCRIPTION: Shows how to apply custom CSS classes to mindmap nodes using the `:::class1 class2 ...` syntax. Multiple classes can be added, separated by spaces, allowing for custom styling defined externally.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_10

LANGUAGE: Mermaid
CODE:
```
mindmap
    Root
        A[A]
        :::urgent large
        B(B)
        C
```

LANGUAGE: Mermaid
CODE:
```
mindmap
    Root
        A[A]
        :::urgent large
        B(B)
        C
```

----------------------------------------

TITLE: Setting Top-to-Bottom Orientation in Mermaid GitGraph
DESCRIPTION: Demonstrates setting the Top-to-Bottom (`TB:`) orientation for a Mermaid gitGraph. Commits flow vertically from top to bottom, and branches are arranged horizontally side-by-side.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_17

LANGUAGE: mermaid
CODE:
```
    gitGraph TB:
       commit
       commit
       branch develop
       commit
       commit
       checkout main
       commit
       commit
       merge develop
       commit
       commit
```

----------------------------------------

TITLE: Defining 90-degree Edge in Architecture Diagram
DESCRIPTION: This snippet demonstrates how to define a 90-degree edge between services. It uses the syntax of `serviceId:T|B|L|R -- L|R|T|B:serviceId`, indicating the start and end directions of the connection. The output visualizes a connection coming from the top of `db` and going into the left side of `server`. This configuration demonstrates edge directional customization.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_7

LANGUAGE: Mermaid
CODE:
```
db:T -- L:server
```

----------------------------------------

TITLE: Flowchart with Multiline Accessible Description
DESCRIPTION: This markdown snippet shows how to define an accessible title and multi-line description in a mermaid.js flowchart. A multi-line description starts with `accDescr {` and ends with `}` without a colon after the `accDescr` keyword.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_4

LANGUAGE: markdown
CODE:
```
```mermaid-example
  graph LR
      accTitle: Bob's Burger's Making Big Decisions
      accDescr {
        The official Bob's Burgers corporate processes that are used
        for making very, very big decisions.
        This is actually a very simple flow: identify the big decision and then make the big decision.
         }
      A[Identify Big Decision] --> B{Make Big Decision}
      B --> D[Be done]
```
```

----------------------------------------

TITLE: Basic Packet Diagram Syntax in Mermaid
DESCRIPTION: Shows the fundamental syntax for creating packet diagrams in Mermaid. Defines how to specify single-bit and multi-bit blocks within a network packet structure.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/packet.md#_snippet_0

LANGUAGE: markdown
CODE:
```
packet-beta
start: "Block name" %% Single-bit block
start-end: "Block name" %% Multi-bit blocks
... More Fields ...
```

----------------------------------------

TITLE: Hiding Commit Labels in GitGraph Using mermaid-example Language
DESCRIPTION: Demonstrates the 'showCommitLabel' configuration option which allows hiding all commit labels in Mermaid's gitGraph diagrams when set to false. This is useful for simplified diagrams where commit labels may clutter the visualization. The example includes branch and commit operations with the commit labels suppressed and branch lines hidden for a clean display.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_12

LANGUAGE: mermaid-example
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
  gitGraph:
    showBranches: false
    showCommitLabel: false
---
      gitGraph
        commit
        branch hotfix
        checkout hotfix
        commit
        branch develop
        checkout develop
        commit id:"ash"
        branch featureB
        checkout featureB
        commit type:HIGHLIGHT
        checkout main
        checkout hotfix
        commit type:NORMAL
        checkout develop
        commit type:REVERSE
        checkout featureB
        commit
        checkout main
        merge hotfix
        checkout featureB
        commit
        checkout develop
        branch featureA
        commit
        checkout develop
        merge hotfix
        checkout featureA
        commit
        checkout featureB
        commit
        checkout develop
        merge featureA
        branch release
        checkout release
        commit
        checkout main
        commit
        checkout release
        merge main
        checkout develop
        merge release
```

----------------------------------------

TITLE: Multi Directional Arrows
DESCRIPTION: This snippet demonstrates the use of multidirectional arrows, connecting nodes with different types of arrowheads at both ends.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_86

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    A o--o B
    B <--> C
    C x--x D
```

----------------------------------------

TITLE: Customizing Radar Diagram Appearance - Mermaid Example
DESCRIPTION: Demonstrates advanced Mermaid-example usage with configuration and theming for radar diagrams. Modifies radar-specific settings like axisScaleFactor and curveTension, sets color scale variables, and adjusts curve opacity. Axes and curves are defined for five dimensions and three curves. Requires Mermaid with support for theme configuration and radar-beta. Outputs a highly customized radar diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_5

LANGUAGE: mermaid-example
CODE:
```
---
config:
  radar:
    axisScaleFactor: 0.25
    curveTension: 0.1
  theme: base
  themeVariables:
    cScale0: "#FF0000"
    cScale1: "#00FF00"
    cScale2: "#0000FF"
    radar:
      curveOpacity: 0
---
radar-beta
  axis A, B, C, D, E
  curve c1{1,2,3,4,5}
  curve c2{5,4,3,2,1}
  curve c3{3,3,3,3,3}
```

----------------------------------------

TITLE: Rendering Mermaid Timeline Diagrams Using Different Pre-defined Themes
DESCRIPTION: Presents example snippets demonstrating how a timeline diagram appears under various pre-defined Mermaid themes including 'base', 'forest', and 'dark'. Each snippet includes a config directive that sets the desired theme and a timeline diagram depicting the same social media history data. This highlights the impact of theme selection on timeline color and style. These snippets require Mermaid setup supporting frontmatter configs and the predefined theme packages.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
---
    timeline
        title History of Social Media Platform
          2002 : LinkedIn
          2004 : Facebook : Google
          2005 : YouTube
          2006 : Twitter
          2007 : Tumblr
          2008 : Instagram
          2010 : Pinterest
```

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'forest'
---
    timeline
        title History of Social Media Platform
          2002 : LinkedIn
          2004 : Facebook : Google
          2005 : YouTube
          2006 : Twitter
          2007 : Tumblr
          2008 : Instagram
          2010 : Pinterest
```

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'dark'
---
    timeline
        title History of Social Media Platform
          2002 : LinkedIn
          2004 : Facebook : Google
          2005 : YouTube
          2006 : Twitter
          2007 : Tumblr
          2008 : Instagram
          2010 : Pinterest
```

----------------------------------------

TITLE: Adding Vertical Markers in Mermaid Gantt (Example)
DESCRIPTION: Shows how to add vertical markers to a Mermaid Gantt chart using the `vert` keyword, an ID, start time, and duration. Vertical markers highlight specific dates or times without occupying a row.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_6

LANGUAGE: mermaid-example
CODE:
```
gantt
    dateFormat HH:mm
    axisFormat %H:%M
    Initial vert : vert, v1, 17:30, 2m
    Task A : 3m
    Task B : 8m
    Final vert : vert, v2, 17:58, 4m
```

----------------------------------------

TITLE: Actor Creation and Destruction in Mermaid
DESCRIPTION: Demonstrates how to create and destroy actors or participants using create and destroy directives. This example shows the creation of Carl and Donald, and destruction of Carl and Bob. Requires Mermaid version 10.3.0 or later.  Expected output: A sequence diagram with dynamic actor/participant lifecycle.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Alice->>Bob: Hello Bob, how are you ?
    Bob->>Alice: Fine, thank you. And you?
    create participant Carl
    Alice->>Carl: Hi Carl!
    create actor D as Donald
    Carl->>D: Hi!
    destroy Carl
    Alice-xCarl: We are too many
    destroy Bob
    Bob->>Alice: I agree
```

----------------------------------------

TITLE: Rendering Math in Sequence Diagram Elements (Mermaid)
DESCRIPTION: This snippet illustrates how to use `$$...$$` delimiters to render mathematical expressions within various elements of a Mermaid sequence diagram, such as participant names, message labels, and notes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/math.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    autonumber
    participant 1 as $$\alpha$$
    participant 2 as $$\beta$$
    1->>2: Solve: $$\sqrt{2+2}$$
    2-->>1: Answer: $$2$$
    Note right of 2: $$\sqrt{2+2}=\sqrt{4}=2$$
```

----------------------------------------

TITLE: Creating Requirement Diagrams with Mermaid.js
DESCRIPTION: This Mermaid.js snippet defines a requirement diagram. It defines a requirement identified as 'test_req' with properties like ID, text, risk, and verification method.  An element 'test_entity' of type 'simulation' is also defined. Styling is applied using 'classDef' to assign bold font-weight to 'important' class and then applying it to 'test_entity' via 'class'. It further styles the 'test_entity' element, setting fill and stroke colors. The expected output is a rendered diagram visually representing the requirements and elements.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/requirementDiagram.md#_snippet_6

LANGUAGE: Mermaid
CODE:
```
requirementDiagram

requirement test_req:::important {
    id: 1
    text: "class styling example"
    risk: low
    verifymethod: test
}

element test_entity {
    type: simulation
}

classDef important font-weight:bold

class test_entity important
style test_entity fill:#f9f,stroke:#333
```

----------------------------------------

TITLE: Changing Flowchart Configuration via Directive
DESCRIPTION: A directive example specifically targeting flowchart configurations, setting `htmlLabels` to true and `curve` to linear.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_12

LANGUAGE: mermaid
CODE:
```
%%{init: { "flowchart": { "htmlLabels": true, "curve": "linear" } } }%%
```

----------------------------------------

TITLE: Adding Arrows to Edges in Mermaid Architecture Diagrams
DESCRIPTION: Shows how to add directionality arrows to edges using `<` and `>` symbols combined with the `--` connector. This example creates an edge originating from the right (`:R`) of the `subnet` service and pointing towards (`-->`) the left (`:L`) of the `gateway` service, indicating data flow or dependency direction.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
subnet:R --> L:gateway
```

----------------------------------------

TITLE: Using Commas in Sankey Diagram Data
DESCRIPTION: This example shows how to handle commas in the source and target node names by wrapping them within double quotes. It uses the `sankey-beta` keyword followed by the data. The double quotes are used to escape the commas.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_6

LANGUAGE: Mermaid
CODE:
```
```mermaid-example
sankey-beta

Pumped heat,"Heating and cooling, homes",193.026
Pumped heat,"Heating and cooling, commercial",70.672
```
```

----------------------------------------

TITLE: Displaying Sequential Commits on Main Branch - Mermaid
DESCRIPTION: This snippet illustrates a linear git history on the default 'main' branch by declaring three consecutive commits. No parameters or prerequisites are needed; the sequence demonstrates the Mermaid gitGraph's default behavior. The expected output is a single straight line of three commit nodes, each with a system-generated unique ID unless specified otherwise.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
gitGraph
   commit
   commit
   commit
```

----------------------------------------

TITLE: Declaring Participants Explicitly in ZenUML
DESCRIPTION: This snippet shows how to explicitly declare participants (Bob and Alice) in a ZenUML diagram before defining their interactions.  This allows specifying the order in which participants appear, regardless of message order.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
zenuml
    title Declare participant (optional)
    Bob
    Alice
    Alice->Bob: Hi Bob
    Bob->Alice: Hi Alice
```

----------------------------------------

TITLE: Dagre Layout with Classic Look
DESCRIPTION: This snippet shows how to use the Dagre layout algorithm for a flowchart. The `layout: dagre` setting in the frontmatter directs Mermaid to use the Dagre layout. The `look: classic` setting uses the classic look.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/syntax-reference.md#_snippet_4

LANGUAGE: mermaid-example
CODE:
```
--- 
config:
  layout: dagre
  look: classic
  theme: default
---

flowchart LR
A[Start] --> B{Choose Path}
B -->|Option 1| C[Path 1]
B -->|Option 2| D[Path 2]
```

----------------------------------------

TITLE: Applying classDef Styles Inline with ':::' Operator in Mermaid State Diagrams - Mermaid-Example
DESCRIPTION: This example applies classDef styles directly to state transitions using the ':::' operator. States have styles like 'notMoving', 'movement', and 'badBadEvent' directly applied inline within transition definitions. This approach is useful for immediate, context-specific styling and requires the state and style to be defined earlier in the diagram. Outputs are states rendered with their respective styles at transition points. Requires Mermaid parser with classDef and ':::' support.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_25

LANGUAGE: mermaid-example
CODE:
```
stateDiagram
   direction TB

   accTitle: This is the accessible title
   accDescr: This is an accessible description

   classDef notMoving fill:white
   classDef movement font-style:italic;
   classDef badBadEvent fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow

   [*] --> Still:::notMoving
   Still --> [*]
   Still --> Moving:::movement
   Moving --> Still
   Moving --> Crash:::movement
   Crash:::badBadEvent --> [*]
```

----------------------------------------

TITLE: Registering Icon Packs with Lazy Loading in JavaScript
DESCRIPTION: This example shows how to register an icon pack with lazy loading using dynamic imports. The icon pack is only loaded when it's actually needed in a diagram, which can improve initial loading performance.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/icons.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import mermaid from 'mermaid';

mermaid.registerIconPacks([
  {
    name: 'logos',
    loader: () => import('@iconify-json/logos').then((module) => module.icons),
  },
]);
```

----------------------------------------

TITLE: Mermaid Comment Example - Mermaid
DESCRIPTION: This snippet shows how to add comments to a Mermaid flowchart. Comments are ignored by the parser and must be on their own line, prefaced with `%%`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_102

LANGUAGE: Mermaid
CODE:
```
flowchart LR
%% this is a comment A -- text --> B{node}
   A -- text --> B -- text2 --> C
```

----------------------------------------

TITLE: Creating Blocks with Custom Widths in Mermaid
DESCRIPTION: Demonstrates how to create blocks that span multiple columns using width specifications. Blocks can be given custom labels and specific column spans to represent components of varying significance or size.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
block-beta
  columns 3
  a["A label"] b:2 c:2 d
```

----------------------------------------

TITLE: Rendering Math in Flowchart Nodes and Edges (Mermaid)
DESCRIPTION: This snippet demonstrates how to embed mathematical expressions within a Mermaid flowchart using the KaTeX syntax surrounded by `$$...$$` delimiters. Math can be included in node labels and edge labels.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/math.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
 graph LR
      A["$$x^2$$"] -->|"$$\sqrt{x+3}$$"| B("$$\frac{1}{2}$$")
      A -->|"$$\overbrace{a+b+c}^{\text{note}}$$"| C("$$\pi r^2$$")
      B --> D("$$x = \begin{cases} a \&\text{if } b \\ c \&\text{if } d \end{cases}$$")
      C --> E("$$x(t)=c_1\begin{bmatrix}-\cos{t}+\sin{t}\\ 2\cos{t} \end{bmatrix}e^{2t}$$")
```

----------------------------------------

TITLE: Disabling Multicolor Option with Mermaid Directive and Timeline Diagram Sample
DESCRIPTION: Demonstrates disabling the multiColor option for Mermaid timeline diagrams using a config block directive in Mermaid markdown syntax. The frontmatter YAML sets theme variables including 'disableMulticolor: true' so that timeline colors are uniform across all time periods and events. This snippet also includes a timeline diagram following the configuration directive. It assumes Merlin rendering that supports directives and timeline diagrams. It highlights how directives can be used to control visual styling aspects declaratively.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
  timeline:
    disableMulticolor: true
---
    timeline
        title History of Social Media Platform
          2002 : LinkedIn
          2004 : Facebook : Google
          2005 : YouTube
          2006 : Twitter
```

----------------------------------------

TITLE: Shorthand Class Attachment with Multiple Links - Mermaid
DESCRIPTION: This snippet demonstrates shorthand class attachment in a Mermaid flowchart when declaring multiple links between nodes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_112

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    A:::foo & B:::bar --> C:::foobar
    classDef foo stroke:#f00
    classDef bar stroke:#0f0
    classDef foobar stroke:#00f
```

----------------------------------------

TITLE: Styling Individual Nodes in Mermaid Class Diagrams
DESCRIPTION: Shows how to apply custom styles to individual nodes in a class diagram using the 'style' keyword. Demonstrates customizing fill color, stroke color, stroke width, and other CSS properties.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_29

LANGUAGE: mermaid
CODE:
```
classDiagram
  class Animal
  class Mineral
  style Animal fill:#f9f,stroke:#333,stroke-width:4px
  style Mineral fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5
```

----------------------------------------

TITLE: Gantt Chart Example in Mermaid
DESCRIPTION: Provides a Gantt chart illustrating project sections and tasks with start dates and durations, enabling project timeline visualization. Dependencies include Mermaid syntax documentation for Gantt charts.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md#_snippet_2

LANGUAGE: Markdown
CODE:
```
gantt
    section Section
    Completed :done,    des1, 2014-01-06,2014-01-08
    Active        :active,  des2, 2014-01-07, 3d
    Parallel 1   :         des3, after des1, 1d
    Parallel 2   :         des4, after des1, 1d
    Parallel 3   :         des5, after des3, 1d
    Parallel 4   :         des6, after des4, 1d
```

LANGUAGE: Markdown
CODE:
```
gantt
    section Section
    Completed :done,    des1, 2014-01-06,2014-01-08
    Active        :active,  des2, 2014-01-07, 3d
    Parallel 1   :         des3, after des1, 1d
    Parallel 2   :         des4, after des1, 1d
    Parallel 3   :         des5, after des3, 1d
    Parallel 4   :         des6, after des4, 1d
```

----------------------------------------

TITLE: Configuring GitGraph: Hiding Branch Lines/Names in Mermaid
DESCRIPTION: Demonstrates how to configure a Mermaid GitGraph diagram to hide branch names and lines using directives. The `showBranches: false` setting is applied within a `--- config: ... gitGraph: ... ---` block at the beginning of the diagram definition. This affects the visual representation by removing the explicit branch lines and labels.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_10

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
  gitGraph:
    showBranches: false
---
      gitGraph
        commit
        branch hotfix
        checkout hotfix
        commit
        branch develop
        checkout develop
        commit id:"ash" tag:"abc"
        branch featureB
        checkout featureB
        commit type:HIGHLIGHT
        checkout main
        checkout hotfix
        commit type:NORMAL
        checkout develop
        commit type:REVERSE
        checkout featureB
        commit
        checkout main
        merge hotfix
        checkout featureB
        commit
        checkout develop
        branch featureA
        commit
        checkout develop
        merge hotfix
        checkout featureA
        commit
        checkout featureB
        commit
        checkout develop
        merge featureA
        branch release
        checkout release
        commit
        checkout main
        commit
        checkout release
        merge main
        checkout develop
        merge release
```

----------------------------------------

TITLE: Simple State Diagram
DESCRIPTION: This snippet demonstrates a basic state diagram with transitions between states. It showcases the syntax for defining states and the transitions between them using arrows.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_0

LANGUAGE: mermaid-example
CODE:
```
--- 
title: Simple sample
---
stateDiagram-v2
    [*] --> Still
    Still --> [*]

    Still --> Moving
    Moving --> Still
    Moving --> Crash
    Crash --> [*]
```

----------------------------------------

TITLE: Modeling Try/Catch/Finally Blocks for Exception Flow in ZenUML Using zenuml
DESCRIPTION: Shows how to define try-catch-finally style blocks to represent exception handling in sequence diagrams. These blocks indicate normal processing, error handling, and cleanup activities, useful for depicting robust flows.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_15

LANGUAGE: zenuml
CODE:
```
try {
  Consumer->API: Book something
  API->BookingService: Start booking process
} catch {
  API->Consumer: show failure
} finally {
  API->BookingService: rollback status
}
```

----------------------------------------

TITLE: Creating an Open Link
DESCRIPTION: This snippet creates an open link (no arrow head) between two nodes, indicating a simple connection without direction.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_68

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    A --- B
```

----------------------------------------

TITLE: Basic Kanban Diagram Structure in Mermaid
DESCRIPTION: Defines a simple Kanban board with two columns, 'New' and 'In progress', using Mermaid syntax. It shows the basic structure for creating columns and adding tasks within them.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/diagrams/kanban/samples.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
kanban
  New
    Sometimes wrong Shape type is highlighted
  In progress
```

----------------------------------------

TITLE: Enabling Parallel Commit Rendering in Mermaid GitGraph
DESCRIPTION: Demonstrates enabling parallel commit rendering (`parallelCommits: true`). This configuration ignores the precise temporal order and renders commits at the same distance from their parent in a more aligned, parallel fashion.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_20

LANGUAGE: mermaid
CODE:
```
---
config:
  gitGraph:
    parallelCommits: true
---
gitGraph:
  commit
  branch develop
  commit
  commit
  checkout main
  commit
  commit
```

----------------------------------------

TITLE: ER Diagram with Relationship Aliases in Mermaid
DESCRIPTION: An example of using relationship aliases like 'to' and 'many(0)' instead of crow's foot notation to define cardinality.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
erDiagram
    CAR 1 to zero or more NAMED-DRIVER : allows
    PERSON many(0) optionally to 0+ NAMED-DRIVER : is
```

----------------------------------------

TITLE: Customize Mermaid Theme Variables (Frontmatter)
DESCRIPTION: Modifies specific color and style variables for a Mermaid diagram using frontmatter configuration. This requires the `theme` to be set to 'base' and allows fine-grained control over the diagram's appearance.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/theming.md#_snippet_2

LANGUAGE: Mermaid
CODE:
```
---
config:
  theme: 'base'
  themeVariables:
    primaryColor: '#BB2528'
    primaryTextColor: '#fff'
    primaryBorderColor: '#7C0000'
    lineColor: '#F8B229'
    secondaryColor: '#006100'
    tertiaryColor: '#fff'
---
        graph TD
          A[Christmas] -->|Get money| B(Go shopping)
          B --> C{Let me think}
          B --> G[/Another/]
          C ==>|One| D[Laptop]
          C -->|Two| E[iPhone]
          C -->|Three| F[fa:fa-car Car]
          subgraph section
            C
            D
            E
            F
            G
          end
```

----------------------------------------

TITLE: Creating a Basic XY Chart with Bar and Line in Mermaid
DESCRIPTION: An example showing how to create an XY chart with both bar and line representations of the same data series. The chart includes a title, labeled x-axis with months, and a y-axis with a specified revenue range.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/xyChart.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
xychart-beta
    title "Sales Revenue"
    x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]
    y-axis "Revenue (in $)" 4000 --> 11000
    bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]
    line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]
```

----------------------------------------

TITLE: Fork and Join Pseudo-States
DESCRIPTION: This snippet showcases the use of fork and join pseudo-states represented with <<fork>> and <<join>>.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_12

LANGUAGE: mermaid-example
CODE:
```
   stateDiagram-v2
    state fork_state <<fork>>
      [*] --> fork_state
      fork_state --> State2
      fork_state --> State3

      state join_state <<join>>
      State2 --> join_state
      State3 --> join_state
      join_state --> State4
      State4 --> [*]
```

----------------------------------------

TITLE: Transitions Between Composite States
DESCRIPTION: Shows how to define transitions between different composite states, linking their internal states or entry points, with the caveat that internal states cannot transition directly across different composites.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_12

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
    [*] --> First
    First --> Second
    First --> Third

    state First {
        [*] --> fir
        fir --> [*]
    }
    state Second {
        [*] --> sec
        sec --> [*]
    }
    state Third {
        [*] --> thi
        thi --> [*]
    }
```

----------------------------------------

TITLE: Adding Metadata to Kanban Tasks Using Mermaid Syntax
DESCRIPTION: Demonstrates how to add metadata to a task within a Kanban diagram using the @{ ... } syntax. Metadata includes key-value pairs like ticket identifiers, assigned persons, and priority levels, which enhance task description and enable integration with external systems.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/kanban.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
kanban
todo[Todo]
  id3[Update Database Function]@{ ticket: MC-2037, assigned: 'knsv', priority: 'High' }
```

----------------------------------------

TITLE: Chaining Links and Multiple Node Links
DESCRIPTION: This snippet demonstrates chaining multiple links in the same line and linking multiple nodes in the same line. Uses `A -- text --> B -- text2 --> C` and `a --> b & c--> d` syntaxes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_30

LANGUAGE: mermaid
CODE:
```
flowchart LR
   A -- text --> B -- text2 --> C
```

LANGUAGE: mermaid
CODE:
```
flowchart LR
   a --> b & c--> d
```

----------------------------------------

TITLE: Configuring Mermaid Timeline Diagram Color Styling and Multicolor Option in JavaScript
DESCRIPTION: Shows how to disable the default multicolor styling of individual time periods and their events by setting 'disableMulticolor' in the Mermaid configuration. This snippet uses JavaScript to initialize Mermaid with timeline-specific options including disabling multicolor styling, forcing all periods/events to share the same color scheme. It requires including Mermaid's JS library and configuring it before rendering. This config option affects visual coherence especially when no sections are defined.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_3

LANGUAGE: javascript
CODE:
```
mermaid.initialize({
        theme: 'base',
        startOnLoad: true,
        logLevel: 0,
        timeline: {
          disableMulticolor: false
        }
})
```

----------------------------------------

TITLE: Edges out of Groups in Diagrams
DESCRIPTION: This snippet describes how to define edges from a group to another group or service within another group. It uses the `{group}` modifier after the `serviceId` on both sides of the edge to specify group context. This enables complex and flexible diagrams showing interactions. The output will show the edge emanating from or terminating at the specified group.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_9

LANGUAGE: Mermaid
CODE:
```
service server[Server] in groupOne
service subnet[Subnet] in groupTwo

server{group}:B --> T:subnet{group}
```

----------------------------------------

TITLE: Adding JavaScript Callbacks to Classes in Mermaid
DESCRIPTION: Demonstrates how to add interactive JavaScript callbacks to classes using 'callback' and 'click call' syntax. This allows triggering JavaScript functions when clicking on diagram elements.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_26

LANGUAGE: mermaid
CODE:
```
classDiagram
class Shape
callback Shape "callbackFunction" "This is a tooltip for a callback"
class Shape2
click Shape2 call callbackFunction() "This is a tooltip for a callback"
```

LANGUAGE: html
CODE:
```
<script>
  const callbackFunction = function () {
    alert('A callback was triggered');
  };
</script>
```

----------------------------------------

TITLE: Defining Aliases for Participants in ZenUML
DESCRIPTION: This snippet illustrates how to define aliases for participants (A for Alice, J for John) in a ZenUML diagram. Aliases provide a shorter, more convenient way to refer to participants in messages.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
zenuml
    title Aliases
    A as Alice
    J as John
    A->J: Hello John, how are you?
    J->A: Great!
```

----------------------------------------

TITLE: Setting Horizontal Orientation for XY Chart (Mermaid)
DESCRIPTION: Illustrates how to change the orientation of an XY chart from the default vertical layout to horizontal by adding the `horizontal` keyword after the `xychart-beta` declaration.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/xyChart.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
xychart-beta horizontal
...
```

----------------------------------------

TITLE: Customizing Main Branch Name in GitGraph Using mermaid-example Language
DESCRIPTION: Shows how to customize the default main/root branch name in Mermaid's gitGraph using the 'mainBranchName' configuration option. By setting it to a custom string, such as 'MetroLine1', the main branch name used throughout the diagram changes accordingly. The example includes commits, branches, merges, and commit types to illustrate the impact of changing the main branch's identifier within a visual railroad map metaphor.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_13

LANGUAGE: mermaid-example
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
  gitGraph:
    showBranches: true
    showCommitLabel: true
    mainBranchName: 'MetroLine1'
---
      gitGraph
        commit id:"NewYork"
        commit id:"Dallas"
        branch MetroLine2
        commit id:"LosAngeles"
        commit id:"Chicago"
        commit id:"Houston"
        branch MetroLine3
        commit id:"Phoenix"
        commit type: HIGHLIGHT id:"Denver"
        commit id:"Boston"
        checkout MetroLine1
        commit id:"Atlanta"
        merge MetroLine3
        commit id:"Miami"
        commit id:"Washington"
        merge MetroLine2 tag:"MY JUNCTION"
        commit id:"Boston"
        commit id:"Detroit"
        commit type:REVERSE id:"SanFrancisco"
```

----------------------------------------

TITLE: MermaidConfig Interface Property: fontFamily
DESCRIPTION: Specifies the font family used in the rendered diagrams.  Accepts any valid CSS `font-family` value. This parameter influences how text is displayed in the rendered diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_13

LANGUAGE: typescript
CODE:
```
fontFamily?: `string`
```

----------------------------------------

TITLE: Creating a Dotted Link
DESCRIPTION: This snippet creates a dotted link between two nodes in a flowchart using the `-.->` syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_25

LANGUAGE: mermaid
CODE:
```
flowchart LR
   A-.->B;
```

----------------------------------------

TITLE: Sequence Diagram Showing Mermaid Initialization Process in Mermaid Language
DESCRIPTION: This sequence diagram illustrates the flow of the Mermaid initialization process. It depicts the site first calling the "initialize" method on Mermaid followed by a notification of content loading. Subsequently, Mermaid calls the init method on mermaidAPI to apply configuration settings site-wide. This flow is essential to ensure that site-level configuration overrides are applied only once before rendering diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/configuration.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
	Site->>mermaid: initialize
	Site->>mermaid: content loaded
	mermaid->>mermaidAPI: init
```

----------------------------------------

TITLE: Defining an ER Diagram with ELK Layout in Mermaid Syntax
DESCRIPTION: This snippet shows a Mermaid ER diagram example that uses the ELK layout as configured in the YAML frontmatter. It defines entity relationships such as CUSTOMER placing ORDER, ORDER containing LINE-ITEM, and CUSTOMER using DELIVERY-ADDRESS with specific cardinalities. The frontmatter includes metadata like title and layout configuration, which controls the diagram's rendering engine. This example requires Mermaid 9.4+ and appropriate lazy-loading setup to visualize ELK layouts correctly.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_14

LANGUAGE: Mermaid
CODE:
```
---
title: Order example
config:
    layout: elk
---
erDiagram
    CUSTOMER ||--o{ ORDER : places
    ORDER ||--|{ LINE-ITEM : contains
    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses
```

----------------------------------------

TITLE: Defining Radar Diagram Axes - Markdown
DESCRIPTION: Provides syntax for specifying axes in a radar diagram within a Markdown code block. Each axis is assigned an ID and optional label, and multiple axes may be defined in one line. This template enables customization of radar chart dimensions. No additional dependencies. Output is a labeled radar chart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_8

LANGUAGE: md
CODE:
```
radar-beta
  axis id1["Label1"]
  axis id2["Label2"], id3["Label3"]
  ...
```

----------------------------------------

TITLE: Representing Alternative Paths with if-else in ZenUML Using zenuml
DESCRIPTION: Example showing the use of if-else-if-else blocks to model decision branches in sequence diagrams. Each condition leads to different message flow between participants, allowing visual representation of alternative scenarios.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_12

LANGUAGE: zenuml
CODE:
```
Alice->Bob: Hello Bob, how are you?
if(is_sick) {
  Bob->Alice: Not so good :(
} else {
  Bob->Alice: Feeling fresh like a daisy
}
```

----------------------------------------

TITLE: Concurrency
DESCRIPTION: This snippet provides an example of using concurrency within a state diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_14

LANGUAGE: mermaid-example
CODE:
```
stateDiagram-v2
    [*] --> Active

    state Active {
        [*] --> NumLockOff
        NumLockOff --> NumLockOn : EvNumLockPressed
        NumLockOn --> NumLockOff : EvNumLockPressed
        --
        [*] --> CapsLockOff
        CapsLockOff --> CapsLockOn : EvCapsLockPressed
        CapsLockOn --> CapsLockOff : EvCapsLockPressed
        --
        [*] --> ScrollLockOff
        ScrollLockOff --> ScrollLockOn : EvScrollLockPressed
        ScrollLockOn --> ScrollLockOff : EvScrollLockPressed
    }
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Direct Access Storage
DESCRIPTION: This snippet shows how to create Direct Access Storage (DAS) using shape keyword. It's a horizontal cylinder
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_47

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: das, label: "Direct access storage" }
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Internal Storage
DESCRIPTION: This snippet creates shape for Internal Storage.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_52

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: win-pane, label: "Internal storage" }
```

----------------------------------------

TITLE: Registering Icon Packs using CDN in JavaScript
DESCRIPTION: This code demonstrates how to register an icon pack in Mermaid by fetching it directly from a CDN. It uses the fetch API to load the Logos icon pack JSON file from unpkg and registers it with a custom name.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/icons.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import mermaid from 'CDN/mermaid.esm.mjs';
mermaid.registerIconPacks([
  {
    name: 'logos',
    loader: () =>
      fetch('https://unpkg.com/@iconify-json/logos@1/icons.json').then((res) => res.json()),
  },
]);
```

----------------------------------------

TITLE: Using Class Labels
DESCRIPTION: This snippet illustrates the use of labels for classes, allowing for custom display names. It also demonstrates the use of backticks to escape special characters within class labels. This is useful for special characters in class names or labels.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
classDiagram
    class Animal["Animal with a label"]
    class Car["Car with *! symbols"]
    Animal --> Car
```

LANGUAGE: mermaid
CODE:
```
classDiagram
    class `Animal Class!`
    class `Car Class`
    `Animal Class!` --> `Car Class`
```

----------------------------------------

TITLE: Nesting Parallel Blocks (par) - Mermaid
DESCRIPTION: Shows that `par` blocks can be nested within each other, allowing for complex representations of concurrent activities and sub-activities.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_16

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    par Alice to Bob
        Alice->>Bob: Go help John
    and Alice to John
        Alice->>John: I want this done today
        par John to Charlie
            John->>Charlie: Can we do this today?
        and John to Diana
            John->>Diana: Can you help us today?
        end
    end
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Cylinder
DESCRIPTION: This snippet demonstrates creating a cylindrical node, typically representing a database, using the `@{ shape: cyl }` syntax in Mermaid.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_24

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: cyl, label: "Database" }
```

----------------------------------------

TITLE: Creating a Circular Node in Mermaid Flowchart
DESCRIPTION: This snippet demonstrates how to create a circular node in a Mermaid flowchart. The text is enclosed in double parentheses `(())`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_10

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    id1((This is the text in the circle))
```

----------------------------------------

TITLE: Defining an Icon Node Shape
DESCRIPTION: This snippet defines a node with an icon from a registered icon pack. The icon is displayed with a square background and a label positioned at the top.  Icon pack registration is a prerequisite.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_65

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ icon: "fa:user", form: "square", label: "User Icon", pos: "t", h: 60 }
```

----------------------------------------

TITLE: Applying External CSS Classes in Mermaid Class Diagrams
DESCRIPTION: This code demonstrates applying CSS classes defined in external CSS styles to Mermaid class diagram nodes.  The style is applied via a class name to the node using the `:::` operator.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_29

LANGUAGE: mermaid
CODE:
```
<style>
  .styleClass > * > g {
    fill: #ff0000;
    stroke: #ffff00;
    stroke-width: 4px;
  }
</style>
```

LANGUAGE: mermaid
CODE:
```
classDiagram
    class Animal:::styleClass
```

----------------------------------------

TITLE: User Journey Diagram Example in Mermaid
DESCRIPTION: Displays a user journey with steps such as 'Make tea' and 'Go upstairs' with duration and actor annotations, modeling user experience workflows.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md#_snippet_7

LANGUAGE: Markdown
CODE:
```
journey
  title My working day
  section Go to work
    Make tea: 5: Me
    Go upstairs: 3: Me
    Do work: 1: Me, Cat
  section Go home
    Go downstairs: 5: Me
    Sit down: 3: Me
```

LANGUAGE: Markdown
CODE:
```
journey
  title My working day
  section Go to work
    Make tea: 5: Me
    Go upstairs: 3: Me
    Do work: 1: Me, Cat
  section Go home
    Go downstairs: 5: Me
    Sit down: 3: Me
```

----------------------------------------

TITLE: GitGraph with Branch Creation in Mermaid
DESCRIPTION: Demonstrates creating a new branch in a Git Graph, showing how commits are automatically applied to the current branch after creation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
gitGraph
   commit
   commit
   branch develop
   commit
   commit
   commit
```

----------------------------------------

TITLE: Defining a Rounded Square Node in Mermaid Mindmap
DESCRIPTION: Shows how to define a node with a rounded square shape in a Mermaid mindmap using the `id(...)` syntax. The text within the parentheses becomes the node label.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_3

LANGUAGE: Mermaid
CODE:
```
mindmap
    id(I am a rounded square)
```

LANGUAGE: Mermaid
CODE:
```
mindmap
    id(I am a rounded square)
```

----------------------------------------

TITLE: Defining States with Descriptions Using 'state' Keyword
DESCRIPTION: Shows how to define a state with a descriptive label using the 'state' keyword and aliasing. Useful for adding descriptive text to states for clarity.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
    state "This is a state description" as s2
```

----------------------------------------

TITLE: Styling Quadrant Chart with Mermaid
DESCRIPTION: This Mermaid code defines a quadrant chart with custom styling for campaigns. It uses `classDef` to define reusable styles and applies them to specific campaigns using `:::`. Styling attributes like `color`, `radius`, `stroke-color`, and `stroke-width` are used to customize the appearance of the chart elements. The code illustrates how to classify data into the four quadrants and provides visual cues for distinguishing between different campaign strategies.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/quadrantChart.md#_snippet_3

LANGUAGE: Mermaid
CODE:
```
quadrantChart
  title Reach and engagement of campaigns
  x-axis Low Reach --> High Reach
  y-axis Low Engagement --> High Engagement
  quadrant-1 We should expand
  quadrant-2 Need to promote
  quadrant-3 Re-evaluate
  quadrant-4 May be improved
  Campaign A: [0.9, 0.0] radius: 12
  Campaign B:::class1: [0.8, 0.1] color: #ff3300, radius: 10
  Campaign C: [0.7, 0.2] radius: 25, color: #00ff33, stroke-color: #10f0f0
  Campaign D: [0.6, 0.3] radius: 15, stroke-color: #00ff0f, stroke-width: 5px ,color: #ff33f0
  Campaign E:::class2: [0.5, 0.4]
  Campaign F:::class3: [0.4, 0.5] color: #0000ff
  classDef class1 color: #109060
  classDef class2 color: #908342, radius : 10, stroke-color: #310085, stroke-width: 10px
  classDef class3 color: #f00fff, radius : 10
```

----------------------------------------

TITLE: Customizing Commit Label Font Size (Mermaid)
DESCRIPTION: This Mermaid code snippet demonstrates changing the font size of commit labels in a GitGraph diagram using the `commitLabelFontSize` theme variable.  It overrides the default font size value. The GitGraph syntax defines the diagram elements.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_32

LANGUAGE: Mermaid
CODE:
```
```mermaid
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    commitLabelColor: '#ff0000'
    commitLabelBackground: '#00ff00'
    commitLabelFontSize: '16px'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit

```
```

----------------------------------------

TITLE: Creating Composite Blocks with Nesting
DESCRIPTION: This snippet illustrates how to create composite blocks (blocks within blocks). It shows a parent block with child blocks nested inside. This is achieved using the 'block' keyword and defining internal elements.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
```mermaid-example
block-beta
    block
      D
    end
    A[\"A: I am a wide one\"]
```
```

----------------------------------------

TITLE: Annotating Classes with Markers in Nested Form - Mermaid
DESCRIPTION: Shows how to embed special markers (e.g., <<interface>>, <<enumeration>>) within nested class declarations in Mermaid. Only Mermaid syntax is needed, and classes can list constants or members under an annotation. The diagram visually segments enumerated types and interfaces with internal markers.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_18

LANGUAGE: mermaid
CODE:
```
classDiagram
class Shape{
    <<interface>>
    noOfVertices
    draw()
}
class Color{
    <<enumeration>>
    RED
    BLUE
    GREEN
    WHITE
    BLACK
}

```

----------------------------------------

TITLE: Annotating Classes with Markers in Nested Form - Mermaid-Example
DESCRIPTION: Supplies a mermaid class diagram sample where <<interface>> and <<enumeration>> annotations are placed inside class declarations, grouping member variables under each annotation. Only Mermaid is needed, and the diagram output shows separate interface and enumeration class types.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_19

LANGUAGE: mermaid
CODE:
```
classDiagram
class Shape{
    <<interface>>
    noOfVertices
    draw()
}
class Color{
    <<enumeration>>
    RED
    BLUE
    GREEN
    WHITE
    BLACK
}

```

----------------------------------------

TITLE: State Diagram with ::: Operator Styling
DESCRIPTION: A complete Mermaid state diagram example using the ::: operator to apply styles directly to states within the diagram statements.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_22

LANGUAGE: mermaid
CODE:
```
stateDiagram
   direction TB

   accTitle: This is the accessible title
   accDescr: This is an accessible description

   classDef notMoving fill:white
   classDef movement font-style:italic;
   classDef badBadEvent fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow

   [*] --> Still:::notMoving
   Still --> [*]
   Still --> Moving:::movement
   Moving --> Still
   Moving --> Crash:::movement
   Crash:::badBadEvent --> [*]
```

----------------------------------------

TITLE: Correcting Misplaced Styling in Mermaid Diagrams
DESCRIPTION: This snippet shows how to correct the syntax for applying styles to blocks in a Mermaid diagram. It highlights the importance of separating style properties with commas and using the correct CSS property format (e.g., fill:#969, stroke:#333). The corrected syntax ensures that the block elements are styled as intended with specific fill and stroke colors. The input is the Mermaid syntax for styling, and the output is a diagram where the block A is styled with a specified fill and stroke.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_8

LANGUAGE: Mermaid
CODE:
```
block-beta
  A
  style A fill:#969,stroke:#333;
```

----------------------------------------

TITLE: Icon Integration Example
DESCRIPTION: This example shows how to add icons to mindmap nodes using the `::icon()` syntax.  It requires the appropriate icon font integration.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_10

LANGUAGE: mermaid
CODE:
```
mindmap
    Root
        A
        ::icon(fa fa-book)
        B(B)
        ::icon(mdi mdi-skull-outline)
```

----------------------------------------

TITLE: Applying the 'forest' Theme to a Mermaid GitGraph
DESCRIPTION: Example of applying the 'forest' theme to a complex gitGraph diagram using configuration directives. The `theme: 'forest'` setting changes the diagram's color scheme and styling according to the 'forest' theme definition.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_22

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'forest'
---
      gitGraph
        commit
        branch hotfix
        checkout hotfix
        commit
        branch develop
        checkout develop
        commit id:"ash" tag:"abc"
        branch featureB
        checkout featureB
        commit type:HIGHLIGHT
        checkout main
        checkout hotfix
        commit type:NORMAL
        checkout develop
        commit type:REVERSE
        checkout featureB
        commit
        checkout main
        merge hotfix
        checkout featureB
        commit
        checkout develop
        branch featureA
        commit
        checkout develop
        merge hotfix
        checkout featureA
        commit
        checkout featureB
        commit
        checkout develop
        merge featureA
        branch release
        checkout release
        commit
        checkout main
        commit
        checkout release
        merge main
        checkout develop
        merge release
```

----------------------------------------

TITLE: Customizing Highlight Commit Colors (Mermaid)
DESCRIPTION: This Mermaid code uses the `gitInv0` theme variable to customize the highlight commit color for the first branch in a GitGraph diagram. It overrides the default color.  The `gitGraph` syntax defines the structure of the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_37

LANGUAGE: Mermaid
CODE:
```
```mermaid-example
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    'gitInv0': '#ff0000'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit

```
```

----------------------------------------

TITLE: Setting Custom Axis Date Format in Mermaid
DESCRIPTION: This snippet shows the syntax for setting a custom date format for the axis in a Mermaid Gantt chart using the `axisFormat` directive. The format string follows d3-time-format conventions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_9

LANGUAGE: markdown
CODE:
```
axisFormat %Y-%m-%d
```

----------------------------------------

TITLE: Setting Tick Interval and Weekday Start in Mermaid Gantt
DESCRIPTION: These snippets demonstrate how to configure the tick interval for the Gantt chart axis using `tickInterval` and specify the starting day of the week for week-based intervals using the `weekday` directive.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_11

LANGUAGE: mermaid
CODE:
```
gantt
  tickInterval 1week
  weekday monday
```

LANGUAGE: mermaid
CODE:
```
gantt
  tickInterval 1week
  weekday monday
```

----------------------------------------

TITLE: User Journey Diagram in Mermaid
DESCRIPTION: Illustrates a user's working day through sections and steps with associated durations, using Mermaid user journey syntax to map user experiences.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
journey
    title My working day
    section Go to work
      Make tea: 5: Me
      Go upstairs: 3: Me
      Do work: 1: Me, Cat
    section Go home
      Go downstairs: 5: Me
      Sit down: 5: Me
```

----------------------------------------

TITLE: Applying Direct Styling to Nodes in Mermaid
DESCRIPTION: Demonstrates the use of the `style` keyword to apply custom CSS properties directly to specific requirement and element nodes. This allows for fine-grained control over the appearance of individual nodes in the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/requirementDiagram.md#_snippet_4

LANGUAGE: Mermaid
CODE:
```
requirementDiagram

requirement test_req {
    id: 1
    text: styling example
    risk: low
    verifymethod: test
}

element test_entity {
    type: simulation
}

style test_req fill:#ffa,stroke:#000, color: green
style test_entity fill:#f9f,stroke:#333, color: blue
```

----------------------------------------

TITLE: Expressing Loops in ZenUML Sequence Diagrams Using zenuml
DESCRIPTION: Demonstrates a while loop structure in ZenUML showing repeated interactions between participants. It supports control flow expressions for loops using 'while', 'for', 'forEach', and 'loop' keywords.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_11

LANGUAGE: zenuml
CODE:
```
while(condition) {
    ...statements...
}


Alice->John: Hello John, how are you?
while(true) {
  John->Alice: Great!
}
```

----------------------------------------

TITLE: Activating Sequence Numbers within a Mermaid Diagram
DESCRIPTION: Illustrates the use of the `autonumber` keyword at the beginning of a Mermaid sequence diagram definition to enable sequence numbering specifically for that diagram, overriding global settings if necessary.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_24

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    autonumber
    Alice->>John: Hello John, how are you?
    loop HealthCheck
        John->>John: Fight against hypochondria
    end
    Note right of John: Rational thoughts!
    John-->>Alice: Great!
    John->>Bob: How about you?
    Bob-->>John: Jolly good!
```

----------------------------------------

TITLE: Styling State Names with Spaces Using ID Reference in Mermaid State Diagrams - Mermaid
DESCRIPTION: This Mermaid code block illustrates using an internal state ID to define a label with spaces while also assigning a custom style using classDef and the ':::' operator. It shows how to direct transitions to and from this specially-named state and style it differently from other nodes. Inputs include classDefs, custom labels, and transitions; output is a state diagram with visually distinct states. Limitation: relies on Mermaid's support for explicit ID and labels.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_28

LANGUAGE: mermaid
CODE:
```
stateDiagram
    classDef yourState font-style:italic,font-weight:bold,fill:white

    yswsii: Your state with spaces in it
    [*] --> yswsii:::yourState
    [*] --> SomeOtherState
    SomeOtherState --> YetAnotherState
    yswsii --> YetAnotherState
    YetAnotherState --> [*]
```

----------------------------------------

TITLE: Fixing Styling Syntax in Mermaid Block Diagrams
DESCRIPTION: Shows the correct syntax for applying styles to blocks. Illustrates proper CSS property formatting with colons and commas to ensure styles are correctly applied to diagram elements.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_10

LANGUAGE: mermaid
CODE:
```
block-beta
  A
  style A fill:#969,stroke:#333;
```

----------------------------------------

TITLE: Using Special Characters in a Box
DESCRIPTION: Demonstrates the use of quotes to handle special characters within node text, for example "This is the (text) in the box".
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_40

LANGUAGE: mermaid
CODE:
```
flowchart LR
    id1["This is the (text) in the box"]
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Stadium
DESCRIPTION: This snippet demonstrates how to create a stadium-shaped node using the shape definition syntax in Mermaid.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_22

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: stadium, label: "Terminal point" }
```

----------------------------------------

TITLE: Markdown Strings in Mindmap
DESCRIPTION: This code snippet demonstrates the 'Markdown Strings' feature, which allows text formatting like bold and italics, along with automatic text wrapping.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_14

LANGUAGE: mermaid
CODE:
```
mindmap
    id1["`**Root** with
a second line
Unicode works too: 🤓`"]
      id2["`The dog in **the** hog... a *very long text* that wraps to a new line`"]
      id3[Regular labels still works]
```

----------------------------------------

TITLE: Customizing GitGraph Branch Label Colors with Theme Variables
DESCRIPTION: This snippet demonstrates how to customize the colors of branch labels in a GitGraph diagram.  It overrides the default values for the 'gitBranchLabel0' to 'gitBranchLabel9' theme variables, setting them all to white ('#ffffff'). Note that only gitBranchLabel0 to gitBranchLabel7 are respected and after the threshold of 8 branches, theme variables are reused in a cyclic manner.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_28

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    'gitBranchLabel0': '#ffffff'
    'gitBranchLabel1': '#ffffff'
    'gitBranchLabel2': '#ffffff'
    'gitBranchLabel3': '#ffffff'
    'gitBranchLabel4': '#ffffff'
    'gitBranchLabel5': '#ffffff'
    'gitBranchLabel6': '#ffffff'
    'gitBranchLabel7': '#ffffff'
    'gitBranchLabel8': '#ffffff'
    'gitBranchLabel9': '#ffffff'
---
  gitGraph
    checkout main
    branch branch1
    branch branch2
    branch branch3
    branch branch4
    branch branch5
    branch branch6
    branch branch7
    branch branch8
    branch branch9
    checkout branch1
    commit
```

----------------------------------------

TITLE: Attaching an ID to Edges
DESCRIPTION: This snippet demonstrates how to assign an ID to an edge in a Mermaid flowchart.  This allows for advanced styling and manipulation of individual edges.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_80

LANGUAGE: Mermaid
CODE:
```
flowchart LR
  A e1@--> B
```

----------------------------------------

TITLE: Nesting Parallel Blocks in Mermaid Sequence Diagrams
DESCRIPTION: Shows how to nest `par...end` blocks within each other in Mermaid sequence diagrams to represent complex concurrent operations. In this example, Alice messages Bob and John in parallel; John then messages Charlie and Diana in parallel.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_16

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    par Alice to Bob
        Alice->>Bob: Go help John
    and Alice to John
        Alice->>John: I want this done today
        par John to Charlie
            John->>Charlie: Can we do this today?
        and John to Diana
            John->>Diana: Can you help us today?
        end
    end
```

----------------------------------------

TITLE: Creating a Dotted Link with Text
DESCRIPTION: This snippet creates a dotted link with associated text between two nodes, providing more context to the weaker relationship.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_72

LANGUAGE: Mermaid
CODE:
```
flowchart LR
   A-. text .-> B
```

----------------------------------------

TITLE: Expressive Dependency Declaration
DESCRIPTION: This snippet demonstrates an expressive way to declare dependencies between multiple nodes using a compact syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_78

LANGUAGE: Mermaid
CODE:
```
flowchart TB
    A & B--> C & D
```

----------------------------------------

TITLE: Duplicate C4 Context Diagram for Internet Banking System in Mermaid.js
DESCRIPTION: This second Mermaid.js code repeats the first diagram, depicting identical system relationships, boundaries, and dependencies within the internet banking system. It reinforces the diagram structure, relationships, and system components for clarity or versioning. Dependencies mirror those of the first snippet, requiring understanding of Mermaid syntax and C4 diagram conventions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_10

LANGUAGE: mermaid
CODE:
```
C4Context
title System Context diagram for Internet Banking System

Person(customerA, "Banking Customer A", "A customer of the bank, with personal bank accounts.")
Person(customerB, "Banking Customer B")
Person_Ext(customerC, "Banking Customer C")
System(SystemAA, "Internet Banking System", "Allows customers to view information about their bank accounts, and make payments.")

Person(customerD, "Banking Customer D", "A customer of the bank, <br/> with personal bank accounts.")

Enterprise_Boundary(b1, "BankBoundary") {

  SystemDb_Ext(SystemE, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

  System_Boundary(b2, "BankBoundary2") {
    System(SystemA, "Banking System A")
    System(SystemB, "Banking System B", "A system of the bank, with personal bank accounts.")
  }

  System_Ext(SystemC, "E-mail system", "The internal Microsoft Exchange e-mail system.")
  SystemDb(SystemD, "Banking System D Database", "A system of the bank, with personal bank accounts.")

  Boundary(b3, "BankBoundary3", "boundary") {
    SystemQueue(SystemF, "Banking System F Queue", "A system of the bank, with personal bank accounts.")
    SystemQueue_Ext(SystemG, "Banking System G Queue", "A system of the bank, with personal bank accounts.")
  }
}

BiRel(customerA, SystemAA, "Uses")
BiRel(SystemAA, SystemE, "Uses")
Rel(SystemAA, SystemC, "Sends e-mails", "SMTP")
Rel(SystemC, customerA, "Sends e-mails to")
```

----------------------------------------

TITLE: Customizing Tag Colors (Mermaid)
DESCRIPTION: This Mermaid code changes tag colors in a GitGraph diagram using `tagLabelColor`, `tagLabelBackground` and `tagLabelBorder` variables.  The snippet overrides default tag colors for visual customization. The diagram uses `gitGraph` syntax to define the layout.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_35

LANGUAGE: Mermaid
CODE:
```
```mermaid-example
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    tagLabelColor: '#ff0000'
    tagLabelBackground: '#00ff00'
    tagLabelBorder: '#0000ff'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit

```
```

----------------------------------------

TITLE: Defining Parallel Actions (par) in ZenUML
DESCRIPTION: This snippet illustrates how to show actions happening in parallel in a ZenUML diagram using the `par` notation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_13

LANGUAGE: mermaid
CODE:
```
zenuml
    par {
        Alice->Bob: Hello guys!
        Alice->John: Hello guys!
    }
```

----------------------------------------

TITLE: Configuring XY Chart Theme Variables (YAML/Mermaid)
DESCRIPTION: Explains how to customize the visual appearance of an XY chart using theme variables. Configuration is provided in YAML format within a `config` block, nested under `themeVariables` and `xyChart`, embedded directly in the Mermaid definition. This example changes the title color.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/xyChart.md#_snippet_4

LANGUAGE: yaml
CODE:
```
---
config:
  themeVariables:
    xyChart:
      titleColor: '#ff0000'
---
```

----------------------------------------

TITLE: Background Highlighting in Mermaid Sequence Diagrams Using Mermaid Syntax
DESCRIPTION: This snippet demonstrates how to highlight parts of a Mermaid sequence diagram background with colored rectangles using the `rect COLOR ... end` notation. The colors can be specified using rgb or rgba formats to enhance visual grouping or emphasis within the diagram content. This snippet requires Mermaid rendering support for background rects and color parsing. The inputs are diagram elements wrapped within `rect` blocks, and the output is a sequence diagram with visually distinct background highlights.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_20

LANGUAGE: mermaid
CODE:
```
rect COLOR
... content ...
end
```

LANGUAGE: mermaid
CODE:
```
rect rgb(0, 255, 0)
... content ...
end
```

LANGUAGE: mermaid
CODE:
```
rect rgba(0, 0, 255, .1)
... content ...
end
```

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Alice
    participant John

    rect rgb(191, 223, 255)
    note right of Alice: Alice calls John.
    Alice->>+John: Hello John, how are you?
    rect rgb(200, 150, 255)
    Alice->>+John: John, can you hear me?
    John-->>-Alice: Hi Alice, I can hear you!
    end
    John-->>-Alice: I feel great!
    end
    Alice ->>+ John: Did you want to go to the game tonight?
    John -->>- Alice: Yeah! See you there.
```

----------------------------------------

TITLE: Using Annotators for Participants in ZenUML
DESCRIPTION: This snippet demonstrates the use of annotators to define participant types, such as `@Actor` for Alice and `@Database` for Bob. This allows using different shapes to represent participants.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
zenuml
    title Annotators
    @Actor Alice
    @Database Bob
    Alice->Bob: Hi Bob
    Bob->Alice: Hi Alice
```

----------------------------------------

TITLE: ER Diagram with Entity Attributes in Mermaid
DESCRIPTION: An extended entity relationship diagram that includes attribute definitions for each entity, showing their data types and names.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
erDiagram
    CUSTOMER ||--o{ ORDER : places
    CUSTOMER {
        string name
        string custNumber
        string sector
    }
    ORDER ||--|{ LINE-ITEM : contains
    ORDER {
        int orderNumber
        string deliveryAddress
    }
    LINE-ITEM {
        string productCode
        int quantity
        float pricePerUnit
    }
```

----------------------------------------

TITLE: Configuring Sankey Diagrams
DESCRIPTION: This code demonstrates how to configure the display options of a Mermaid Sankey diagram using a JavaScript configuration object.  The configuration includes setting the width, height, link color (by source node), and node alignment. The Mermaid library is initialized with this configuration.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_10

LANGUAGE: html
CODE:
```
<script>
  const config = {
    startOnLoad: true,
    securityLevel: 'loose',
    sankey: {
      width: 800,
      height: 400,
      linkColor: 'source',
      nodeAlignment: 'left',
    },
  };
  mermaid.initialize(config);
</script>
```

----------------------------------------

TITLE: Transitions between Composite States
DESCRIPTION: This snippet defines transitions between composite states.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_10

LANGUAGE: mermaid-example
CODE:
```
stateDiagram-v2
    [*] --> First
    First --> Second
    First --> Third

    state First {
        [*] --> fir
        fir --> [*]
    }
    state Second {
        [*] --> sec
        sec --> [*]
    }
    state Third {
        [*] --> thi
        thi --> [*]
    }
```

----------------------------------------

TITLE: Grouping Timeline Periods into Sections in Mermaid
DESCRIPTION: Demonstrates how to group time periods and their associated events into distinct 'sections' using the `section` keyword in a Mermaid timeline diagram. Sections help organize the timeline chronologically or thematically.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_3

LANGUAGE: mermaid-example
CODE:
```
timeline
    title Timeline of Industrial Revolution
    section 17th-20th century
        Industry 1.0 : Machinery, Water power, Steam <br>power
        Industry 2.0 : Electricity, Internal combustion engine, Mass production
        Industry 3.0 : Electronics, Computers, Automation
    section 21st century
        Industry 4.0 : Internet, Robotics, Internet of Things
        Industry 5.0 : Artificial intelligence, Big data, 3D printing
```

LANGUAGE: mermaid
CODE:
```
timeline
    title Timeline of Industrial Revolution
    section 17th-20th century
        Industry 1.0 : Machinery, Water power, Steam <br>power
        Industry 2.0 : Electricity, Internal combustion engine, Mass production
        Industry 3.0 : Electronics, Computers, Automation
    section 21st century
        Industry 4.0 : Internet, Robotics, Internet of Things
        Industry 5.0 : Artificial intelligence, Big data, 3D printing
```

----------------------------------------

TITLE: Rendering Timeline Diagram with Neutral Theme in Mermaid
DESCRIPTION: Defines a timeline diagram using Mermaid syntax with the 'neutral' theme and debug-level logging enabled. The timeline content is identical to the default theme example, illustrating social media platform milestones between 2002 and 2010. This snippet requires Mermaid.js for rendering with the specified configuration settings.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_8

LANGUAGE: mermaid-example
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'neutral'
---
    timeline
        title History of Social Media Platform
          2002 : LinkedIn
          2004 : Facebook : Google
          2005 : YouTube
          2006 : Twitter
          2007 : Tumblr
          2008 : Instagram
          2010 : Pinterest
```

----------------------------------------

TITLE: Escaping Special Characters with Quotes
DESCRIPTION: This snippet demonstrates how to use quotes to render text containing special characters within a node.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_89

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    id1["This is the (text) in the box"]
```

----------------------------------------

TITLE: Using Break Statements in Mermaid Sequence Diagrams
DESCRIPTION: Demonstrates the `break...end` syntax in Mermaid sequence diagrams to indicate an interruption or halt in the normal sequence flow, often used to model exceptions. This example shows a booking process that might break and show a failure.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_19

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    Consumer-->API: Book something
    API-->BookingService: Start booking process
    break when the booking process fails
        API-->Consumer: show failure
    end
    API-->BillingService: Start billing process
```

----------------------------------------

TITLE: Creating a Minimal XY Chart with Line Data
DESCRIPTION: The simplest possible XY chart example that includes only the chart type declaration and a single line data series with numeric values.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/xyChart.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
xychart-beta
    line [+1.3, .6, 2.4, -.34]
```

----------------------------------------

TITLE: Defining a Basic Requirement Diagram in Mermaid
DESCRIPTION: Shows how to initiate a requirement diagram, define a simple requirement node including its ID, text, risk level, and verification method, define an element node with its type, and establish a 'satisfies' relationship connecting the element to the requirement.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/requirementDiagram.md#_snippet_0

LANGUAGE: Mermaid
CODE:
```
requirementDiagram

    requirement test_req {
    id: 1
    text: the test text.
    risk: high
    verifymethod: test
    }

    element test_entity {
    type: simulation
    }

    test_entity - satisfies -> test_req
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Braces
DESCRIPTION: This snippet demonstrates using the shape keyword to create a comment with braces on both sides.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_43

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: braces, label: "Comment" }
```

----------------------------------------

TITLE: Repeated Git Graph Diagram in Mermaid
DESCRIPTION: Shows the same git workflow as the previous snippet, emphasizing the pattern of commits and branch management in version control visualization.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
gitGraph
   commit
   commit
   branch develop
   commit
   commit
   commit
   checkout main
   commit
   commit
```

----------------------------------------

TITLE: Configuring Advanced Actor Menus with JSON-Formatted Links in Mermaid Sequence Diagrams
DESCRIPTION: This snippet explains an advanced syntax for defining actor popup menus with multiple links serialized as JSON objects. The directive format is `links <actor>: <json>`, where `<json>` encodes link label-URL pairs. This enables bulk or structured menu definitions for actors in Mermaid sequence diagrams and requires Mermaid support for interpreting JSON links. Input is Mermaid code containing actor participants and `links` directives with JSON, output is interactive actor menus with multiple entries.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_26

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Alice
    participant John
    links Alice: {"Dashboard": "https://dashboard.contoso.com/alice", "Wiki": "https://wiki.contoso.com/alice"}
    links John: {"Dashboard": "https://dashboard.contoso.com/john", "Wiki": "https://wiki.contoso.com/john"}
    Alice->>John: Hello John, how are you?
    John-->>Alice: Great!
    Alice-)John: See you later!
```

----------------------------------------

TITLE: Start and End States with Special Syntax
DESCRIPTION: Defines initial and terminal states using the [*] syntax, with transitions indicating start/end points in the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_9

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
    [*] --> s1
    s1 --> [*]
```

----------------------------------------

TITLE: Using @return Annotator for Reply Messages in ZenUML Nested Calls Using zenuml
DESCRIPTION: This example demonstrates how to use the @return annotator inside nested method calls and conditions to indicate returning to an upper call level. It depicts conditional early returns and message flow between client, intermediate, and nested calls.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_8

LANGUAGE: zenuml
CODE:
```
title Reply message
Client->A.method() {
  B.method() {
    if(condition) {
      return x1
      // return early
      @return
      A->Client: x11
    }
  }
  return x2
}
```

----------------------------------------

TITLE: Adding Line Breaks in Actor Names with Aliases - Mermaid
DESCRIPTION: Demonstrates how to achieve line breaks within participant or actor names by combining aliases with the `<br/>` tag in the alias definition.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_12

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Alice as Alice<br/>Johnson
    Alice->John: Hello John,<br/>how are you?
    Note over Alice,John: A typical interaction<br/>But now in two lines
```

----------------------------------------

TITLE: Defining Method Classifiers
DESCRIPTION: This snippet demonstrates the use of method classifiers such as abstract (`*`) and static (`$`) for method and field definition.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_9

LANGUAGE: mermaid
CODE:
```

```

----------------------------------------

TITLE: Creating Edges Originating from Groups in Mermaid Architecture Diagrams
DESCRIPTION: Demonstrates how to draw edges that appear to originate from or terminate at the boundary of a group, adjacent to a specific service within that group, using the `{group}` modifier. This example connects `groupOne` (near `server`) to `groupTwo` (near `subnet`) with a directed arrow. Note that group IDs cannot be used directly in edge definitions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_8

LANGUAGE: mermaid
CODE:
```
service server[Server] in groupOne
service subnet[Subnet] in groupTwo

server{group}:B --> T:subnet{group}
```

----------------------------------------

TITLE: Visualizing Contribution Workflow using Mermaid
DESCRIPTION: A Mermaid flowchart diagram illustrating the contribution process: checking out a new branch, making changes, and submitting a Pull Request.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_10

LANGUAGE: mermaid
CODE:
```
flowchart LR

  branch --> changes --> submit
  branch[Checkout a New Branch]
  changes[Make Changes]
  submit[Submit a PR]
```

----------------------------------------

TITLE: Composite States with Internal Transitions
DESCRIPTION: Shows how to define nested states (composite states) using the 'state' keyword with a block, including internal transitions. Supports multiple nesting levels.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_10

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
    [*] --> First
    state First {
        [*] --> second
        second --> [*]
    }

    [*] --> NamedComposite
    NamedComposite: Another Composite
    state NamedComposite {
        [*] --> namedSimple
        namedSimple --> [*]
        namedSimple: Another simple
    }
```

----------------------------------------

TITLE: MermaidConfig Interface Property: htmlLabels
DESCRIPTION: Defines the htmlLabels configuration option.  When set to true, the diagrams will use HTML labels.  The input is a boolean.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_19

LANGUAGE: typescript
CODE:
```
htmlLabels?: `boolean`
```

----------------------------------------

TITLE: Configuring Kanban Diagram Display in Mermaid
DESCRIPTION: Shows how to use a `config` block (YAML format within `---`) at the beginning of the Mermaid definition to customize the Kanban diagram's appearance. This example configures it to show element IDs (`showIds: true`) and define which metadata fields to display per task (`fields`).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/diagrams/kanban/samples.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
---
config:
  kanban:
    showIds: true
    fields: [[title],[description][id, assigned]]
---
kanban
  id1[Todo]
    id2[Create JISON]
    id3[Update DB function]
    id4[Create parsing tests]
    id5[define getData]
    id6[Create renderer]
  id7[In progress]
    id8[Design grammar]

  id2@{
    assigned: knsv
    icon: heart
    priority: high
    descr: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
  }
  style n1 stroke:#AA00FF,fill:#E1BEE7
```

----------------------------------------

TITLE: Flowchart with Accessible Title and Description
DESCRIPTION: This markdown snippet shows how to define an accessible title and single-line description in a mermaid.js flowchart using the `accTitle` and `accDescr` keywords. The description follows the keyword after a colon. The example defines an accessible title and description to the flowchart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_2

LANGUAGE: markdown
CODE:
```
```mermaid-example
  graph LR
      accTitle: Big Decisions
      accDescr: Bob's Burgers process for making big decisions
      A[Identify Big Decision] --> B{Make Big Decision}
      B --> D[Be done]
```
```

----------------------------------------

TITLE: Defining Radar Diagram Curves - Markdown
DESCRIPTION: Shows the syntax for declaring curves (datasets) in a radar diagram within Markdown. Curves may be given IDs, labels, and either ordered values or axis-value pairs. Multiple curves can be declared in a single statement. Useful for plotting multiple comparative entities. Requires axes defined beforehand.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_9

LANGUAGE: md
CODE:
```
radar-beta
  axis axis1, axis2, axis3
  curve id1["Label1"]{1, 2, 3}
  curve id2["Label2"]{4, 5, 6}, id3{7, 8, 9}
  curve id4{ axis3: 30, axis1: 20, axis2: 10 }
  ...
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Lined Rectangle
DESCRIPTION: This snippet creates a rectangle with a line inside it, using the shape keyword.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_36

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: lin-rect, label: "Lined process" }
```

----------------------------------------

TITLE: Initializing Mermaid with secure parameters (Example)
DESCRIPTION: This example demonstrates how site owners can add to the secure array using the mermaidAPI.initialize function.  It sets the startOnLoad option to true and adds 'parameter1' and 'parameter2' to the secure array, preventing implementors from modifying these parameters.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/8.6.0_docs.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
mermaidAPI.initialize( { startOnLoad: true, secure: ['parameter1', 'parameter2'] } );
```

----------------------------------------

TITLE: Install Icon Pack via NPM
DESCRIPTION: Installs an icon pack from NPM using the command line. This command adds the `@iconify-json/logos` package to the project's dependencies, allowing it to be imported and used in the Mermaid configuration.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/icons.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @iconify-json/logos@1
```

----------------------------------------

TITLE: Creating a Double Circle Node in Mermaid Flowchart
DESCRIPTION: This snippet demonstrates how to create a double circle node in a Mermaid flowchart. The text is enclosed in triple parentheses `((()))`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_18

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    id1(((This is the text in the circle)))
```

----------------------------------------

TITLE: Escaping Characters with Entity Codes
DESCRIPTION: This snippet demonstrates how to escape characters using entity codes, allowing the rendering of characters that would otherwise break the syntax. Base 10 numbers and HTML character names are supported.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_90

LANGUAGE: Mermaid
CODE:
```
flowchart LR
        A["A double quote:#quot;"] --> B["A dec char:#9829;"]
```

----------------------------------------

TITLE: Styling Kanban Sections using IDs in Mermaid
DESCRIPTION: Demonstrates applying custom styles (stroke and fill color) to a specific Kanban element (referenced by `n2`, likely implicitly assigned or referring to the second node/task) using the `style` directive. Requires IDs to be defined or understood implicitly for target elements.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/diagrams/kanban/samples.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
kanban
  id1[Todo]
    id2[Create JISON]
    id3[Update DB function]
    id4[Create parsing tests]
    id5[define getData]
    id6[Create renderer]
  id7[In progress]
    id8[Design grammar]

  style n2 stroke:#AA00FF,fill:#E1BEE7
```

----------------------------------------

TITLE: Fork and Join Elements in State Diagrams
DESCRIPTION: Illustrates concurrent paths using the '<<fork>>' and '<<join>>' stereotypes to divide and synchronize flows.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_14

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
    state fork_state <<fork>>
      [*] --> fork_state
      fork_state --> State2
      fork_state --> State3

      state join_state <<join>>
      State2 --> join_state
      State3 --> join_state
      join_state --> State4
      State4 --> [*]
```

----------------------------------------

TITLE: Pie Chart with Title and Description
DESCRIPTION: This mermaid.js snippet demonstrates a pie chart with an accessible title and description, using the `accTitle` and `accDescr` keywords to define the title and description for improved accessibility.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_10

LANGUAGE: markdown
CODE:
```
```mermaid-example
   pie
      accTitle: My Pie Chart Accessibility Title
      accDescr: My Pie Chart Accessibility Description

    title Key elements in Product X
    "Calcium" : 42.96
    "Potassium" : 50.05
    "Magnesium" : 10.01
    "Iron" :  5

```
```

----------------------------------------

TITLE: Defining a Single Property classDef in Mermaid State Diagrams - Plain Text
DESCRIPTION: This text snippet shows how to define a classDef with a single property-value pair using Mermaid's style system. The example 'classDef movement font-style:italic;' creates a style named 'movement' that sets italic font style. This must be placed inside a Mermaid diagram block. No parameters are required except the style name and properties; outputs depend on subsequent application to diagram states.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_20

LANGUAGE: txt
CODE:
```
classDef movement font-style:italic;
```

----------------------------------------

TITLE: Configuring ELK Layout in Mermaid Using YAML Frontmatter
DESCRIPTION: This snippet demonstrates how to specify the ELK diagram layout in Mermaid using YAML frontmatter. The `config` property sets the `layout` to "elk", overriding the default layout engine (dagre) for rendering diagrams. This setup requires Mermaid version 9.4 or higher and enabling the relevant feature in lazy-loading configuration. The YAML configuration acts as a prerequisite for Mermaid to parse and apply the ELK layout when rendering diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_13

LANGUAGE: YAML
CODE:
```
---
config:
  layout: elk
---
```

----------------------------------------

TITLE: Mermaid Gantt Chart Bar Chart Example
DESCRIPTION: A Mermaid Gantt chart configuration used to represent data as a bar chart, showing days since the last update for Git issues. Uses 'dateFormat X' and 'axisFormat %s' for custom axis labeling.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_21

LANGUAGE: mermaid
CODE:
```
gantt
    title Git Issues - days since last update
    dateFormat X
    axisFormat %s
    section Issue19062
    71   : 0, 71
    section Issue19401
    36   : 0, 36
    section Issue193
    34   : 0, 34
    section Issue7441
    9    : 0, 9
    section Issue1300
    5    : 0, 5
```

----------------------------------------

TITLE: Styling Relationship Example - UpdateRelStyle
DESCRIPTION: This code demonstrates how to style relationships in a Mermaid C4 diagram using the UpdateRelStyle function. It updates the text color, line color, and offset of the relationship between elements.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/c4.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
UpdateRelStyle(customerA, bankA, "red", "blue", "-40", "60")
UpdateRelStyle(customerA, bankA, $offsetX="-40", $offsetY="60", $lineColor="blue", $textColor="red")
UpdateRelStyle(customerA, bankA, $offsetY="60")
```

----------------------------------------

TITLE: Creating a Basic Mermaid Requirement Diagram
DESCRIPTION: This snippet demonstrates the basic structure of a Mermaid Requirement diagram. It defines a single requirement ('test_req') with properties like id, text, risk, and verification method, and a single element ('test_entity') with a type. A 'satisfies' relationship connects the element to the requirement.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/requirementDiagram.md#_snippet_0

LANGUAGE: Mermaid
CODE:
```
    requirementDiagram

    requirement test_req {
    id: 1
    text: the test text.
    risk: high
    verifymethod: test
    }

    element test_entity {
    type: simulation
    }

    test_entity - satisfies -> test_req
```

----------------------------------------

TITLE: Defining Multiple Classes - Mermaid
DESCRIPTION: This snippet demonstrates how to define multiple classes in a Mermaid flowchart using the `classDef` directive in a single statement.  Separate the class names with commas.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_108

LANGUAGE: Mermaid
CODE:
```
classDef firstClassName,secondClassName font-size:12pt;
```

----------------------------------------

TITLE: Defining Kanban Diagram Columns - Mermaid
DESCRIPTION: This snippet demonstrates how to define columns in a Mermaid Kanban diagram using the `columnId[Column Title]` syntax. The `columnId` is a unique identifier, and `[Column Title]` is the displayed column header.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/kanban.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
columnId[Column Title]
```

----------------------------------------

TITLE: Complete Styling Application Example in Mermaid State Diagrams - Mermaid
DESCRIPTION: This full Mermaid snippet illustrates diagram construction with complex styling: multiple classDefs, accessible metadata, transitions, and diverse state styling (including double assignments). It uses both 'classDef' and 'class' statements, and is suitable for demonstration or documentation purposes. Inputs are states, classes, and metadata; outputs are accessible, multi-styled diagrams. Requires Mermaid interpreter that supports state diagrams with classDefs.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_24

LANGUAGE: mermaid
CODE:
```
   stateDiagram
   direction TB

   accTitle: This is the accessible title
   accDescr: This is an accessible description

   classDef notMoving fill:white
   classDef movement font-style:italic
   classDef badBadEvent fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow

   [*]--> Still
   Still --> [*]
   Still --> Moving
   Moving --> Still
   Moving --> Crash
   Crash --> [*]

   class Still notMoving
   class Moving, Crash movement
   class Crash badBadEvent
   class end badBadEvent
```

----------------------------------------

TITLE: Dynamically Adjusting Column Widths
DESCRIPTION: This example highlights Mermaid's automatic column width adjustment based on the largest block content. Mermaid determines the width of the column by the width of the blocks inside. The diagram also demonstrates the use of composite blocks.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
```mermaid-example
block-beta
  columns 3
  a:3
  block:group1:2
    columns 2
    h i j k
  end
  g
  block:group2:3
    %% columns auto (default)
    l m n o p q r
  end
```
```

----------------------------------------

TITLE: Multi-layered Nested Composite States
DESCRIPTION: Demonstrates deep nesting with multiple layers within composite states, creating hierarchical state structures.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_11

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
    [*] --> First

    state First {
        [*] --> Second

        state Second {
            [*] --> second
            second --> Third

            state Third {
                [*] --> third
                third --> [*]
            }
        }
    }
```

----------------------------------------

TITLE: Defining a Circle Node in Mermaid Mindmap
DESCRIPTION: Shows how to define a node with a circle shape in a Mermaid mindmap using the `id((...))` syntax. The text within the double parentheses becomes the node label.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_4

LANGUAGE: Mermaid
CODE:
```
mindmap
    id((I am a circle))
```

LANGUAGE: Mermaid
CODE:
```
mindmap
    id((I am a circle))
```

----------------------------------------

TITLE: Creating a Circle Edge
DESCRIPTION: Demonstrates the creation of an edge with a circle head by using `--o`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_37

LANGUAGE: mermaid
CODE:
```
flowchart LR
    A --o B
```

----------------------------------------

TITLE: Setting Radar Diagram Title - Markdown
DESCRIPTION: Shows the minimal syntax for adding a title to a radar diagram within a Markdown code block. The 'title' keyword sets a diagram title above the radar chart. No additional parameters required. Useful for labeling and contextualizing diagrams. Requires radar-beta support in Mermaid.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_7

LANGUAGE: md
CODE:
```
radar-beta
  title Title of the Radar Diagram
  ...
```

----------------------------------------

TITLE: Rounded Square Shape in Mindmap
DESCRIPTION: This code snippet illustrates the use of a rounded square shape for a node in a mindmap.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
mindmap
    id(I am a rounded square)
```

----------------------------------------

TITLE: Defining Text Block Node Shape in Mermaid Flowchart DSL
DESCRIPTION: This snippet defines a text block node labeled 'This is a text block' using the 'text' shape in Mermaid flowcharts. The text shape is used for displaying plain text blocks without special flowchart semantics. Requires Mermaid flowchart syntax support for the 'text' shape attribute. Input is Mermaid flowchart code; output is a textual node block.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_17

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: text, label: "This is a text block" }
```

----------------------------------------

TITLE: Example Sankey Diagram Data with CSV Format
DESCRIPTION: Contains sample data representing energy and waste flows in CSV format to be rendered as a Sankey diagram. Each row specifies a source node, target node, and flow value, illustrating real-world resource movement scenarios. Dependencies include Mermaid.js and the appropriate diagram rendering environment. Data freshness allows for visualizing complex flow networks.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sankey.md#_snippet_1

LANGUAGE: csv
CODE:
```
Agricultural 'waste',Bio-conversion,124.729
Bio-conversion,Liquid,0.597
Bio-conversion,Losses,26.862
Bio-conversion,Solid,280.322
Bio-conversion,Gas,81.144
Biofuel imports,Liquid,35
Biomass imports,Solid,35
Coal imports,Coal,11.606
Coal reserves,Coal,63.965
Coal,Solid,75.571
District heating,Industry,10.639
District heating,Heating and cooling - commercial,22.505
District heating,Heating and cooling - homes,46.184
Electricity grid,Over generation / exports,104.453
Electricity grid,Heating and cooling - homes,113.726
Electricity grid,H2 conversion,27.14
Electricity grid,Industry,342.165
Electricity grid,Road transport,37.797
Electricity grid,Agriculture,4.412
Electricity grid,Heating and cooling - commercial,40.858
Electricity grid,Losses,56.691
Electricity grid,Rail transport,7.863
Electricity grid,Lighting & appliances - commercial,90.008
Electricity grid,Lighting & appliances - homes,93.494
Gas imports,Ngas,40.719
Gas reserves,Ngas,82.233
Gas,Heating and cooling - commercial,0.129
Gas,Losses,1.401
Gas,Thermal generation,151.891
Gas,Agriculture,2.096
Gas,Industry,48.58
Geothermal,Electricity grid,7.013
H2 conversion,H2,20.897
H2 conversion,Losses,6.242
H2,Road transport,20.897
Hydro,Electricity grid,6.995
Liquid,Industry,121.066
Liquid,International shipping,128.69
Liquid,Road transport,135.835
Liquid,Domestic aviation,14.458
Liquid,International aviation,206.267
Liquid,Agriculture,3.64
Liquid,National navigation,33.218
Liquid,Rail transport,4.413
Marine algae,Bio-conversion,4.375
Ngas,Gas,122.952
Nuclear,Thermal generation,839.978
Oil imports,Oil,504.287
Oil reserves,Oil,107.703
Oil,Liquid,611.99
Other waste,Solid,56.587
Other waste,Bio-conversion,77.81
Pumped heat,Heating and cooling - homes,193.026
Pumped heat,Heating and cooling - commercial,70.672
Solar PV,Electricity grid,59.901
Solar Thermal,Heating and cooling - homes,19.263
Solar,Solar Thermal,19.263
Solar,Solar PV,59.901
Solid,Agriculture,0.882
Solid,Thermal generation,400.12
Solid,Industry,46.477
Thermal generation,Electricity grid,525.531
Thermal generation,Losses,787.129
Thermal generation,District heating,79.329
Tidal,Electricity grid,9.452
UK land based bioenergy,Bio-conversion,182.01
Wave,Electricity grid,19.013
Wind,Electricity grid,289.366
```

----------------------------------------

TITLE: GitGraph with Custom Commit IDs in Mermaid
DESCRIPTION: Illustrates how to assign custom identifiers to commits in a Git Graph using the id attribute, making commits more descriptive and recognizable.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
gitGraph
   commit id: "Alpha"
   commit id: "Beta"
   commit id: "Gamma"
```

----------------------------------------

TITLE: Register Icon Pack without Lazy Loading
DESCRIPTION: Registers an icon pack in Mermaid without lazy loading.  The icon pack is imported directly using a static import. The `name` property is set to `icons.prefix` to use the prefix defined in the icon pack, and the `icons` object is passed directly. The `mermaid.registerIconPacks` function registers the icon pack.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/icons.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import mermaid from 'mermaid';
import { icons } from '@iconify-json/logos';
mermaid.registerIconPacks([
  {
    name: icons.prefix, // To use the prefix defined in the icon pack
    icons,
  },
]);
```

----------------------------------------

TITLE: Creating a Subroutine-Shaped Node in Mermaid Flowchart
DESCRIPTION: This snippet demonstrates how to create a subroutine-shaped node in a Mermaid flowchart. The text is enclosed in double square brackets `[[]]`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_8

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    id1[[This is the text in the box]]
```

----------------------------------------

TITLE: Turning on Animation for an Edge
DESCRIPTION: This snippet demonstrates how to turn on animation for a specific edge using its ID, enabling visual effects for the edge transition.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_81

LANGUAGE: Mermaid
CODE:
```
flowchart LR
  A e1@==> B
  e1@{ animate: true }
```

----------------------------------------

TITLE: Adding Arrows to Edges in Architecture Diagrams
DESCRIPTION: This snippet shows how to add arrows to edges, specifying the direction of the connection. The `<` and `>` symbols are placed before and after the direction on each side of the edge, indicating arrowheads. This enhances the representation of data flow between services. The output will include arrows on the edges according to the defined notation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_8

LANGUAGE: Mermaid
CODE:
```
subnet:R --> L:gateway
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Hourglass
DESCRIPTION: This snippet defines an hourglass-shaped node using the shape keyword.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_40

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: hourglass, label: "Collate" }
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Text Block
DESCRIPTION: This snippet demonstrates using the shape keyword to create a plain text block node in a Mermaid flowchart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_34

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: text, label: "This is a text block" }
```

----------------------------------------

TITLE: Rendering a Basic Pie Chart with Mermaid - Mermaid
DESCRIPTION: This snippet demonstrates how to create a simple pie chart using Mermaid. The diagram visualizes three categories ("Dogs", "Cats", and "Rats") with their respective numerical values. No custom configuration or special directives are used, making it an ideal starting point for basic pie chart visualizations in Markdown environments supporting Mermaid. The 'pie' keyword starts the diagram, an optional title is specified, and each data category is provided with a label and value.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/pie.md#_snippet_0

LANGUAGE: Mermaid
CODE:
```
pie title Pets adopted by volunteers
    "Dogs" : 386
    "Cats" : 85
    "Rats" : 15
```

----------------------------------------

TITLE: Defining Multi-Column Diagram with Blocks
DESCRIPTION: This snippet demonstrates the syntax for creating a block diagram with multiple columns, using the `columns` directive and arranging blocks accordingly. It shows how blocks wrap to the next row when there are more blocks than the number of columns.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
```mermaid-example
block-beta
  columns 3
  a b c d
```
```

----------------------------------------

TITLE: Defining Image Shape Nodes in Mermaid Flowchart DSL
DESCRIPTION: This snippet shows how to embed an image node in a Mermaid flowchart using the 'img' shape attribute. The example defines an image node referencing a remote image URL with a label ('Image Label'), label position on top ('t'), width and height both set to 60, and constraint disabled ('off'). This allows embedding of custom images directly in flowcharts for enhanced visual communication. Inputs are image URL and display parameters; output is a flowchart node showing the image with label and styling.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_20

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ img: "https://example.com/image.png", label: "Image Label", pos: "t", w: 60, h: 60, constraint: "off" }
```

----------------------------------------

TITLE: Comments in State Diagrams
DESCRIPTION: This snippet demonstrates how to add comments to the state diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_16

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
    [*] --> Still
    Still --> [*]
%% this is a comment
    Still --> Moving
    Moving --> Still %% another comment
    Moving --> Crash
    Crash --> [*]
```

----------------------------------------

TITLE: Defining Async Messages in ZenUML
DESCRIPTION: This snippet illustrates the syntax for defining asynchronous messages in ZenUML. Async messages are indicated with the `->` notation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
zenuml
    title Async message
    Alice->Bob: How are you?
```

----------------------------------------

TITLE: Escaping Characters in Mermaid Sequence Diagram Messages Using Entity Codes
DESCRIPTION: This snippet explains how to embed special characters in Mermaid sequence diagram message texts by using entity codes like `#9829;` for a heart symbol or `#59;` for a semicolon. Both numeric (base 10) codes and HTML character names are supported. This allows including characters that would otherwise be parsed as Mermaid syntax, enabling richer and more precise message contents. Input is message text containing escape sequences, output is properly rendered characters in diagram messages.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_22

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    A->>B: I #9829; you!
    B->>A: I #9829; you #infin; times more!
```

----------------------------------------

TITLE: Enabling Compact Display Mode in Mermaid Gantt
DESCRIPTION: These snippets show how to activate the compact display mode for a Mermaid Gantt chart. This mode allows multiple tasks to be displayed on the same row and is enabled by setting `displayMode: compact` in the YAML frontmatter.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_12

LANGUAGE: mermaid
CODE:
```
---
displayMode: compact
---
gantt
    title A Gantt Diagram
    dateFormat  YYYY-MM-DD

    section Section
    A task           :a1, 2014-01-01, 30d
    Another task     :a2, 2014-01-20, 25d
    Another one      :a3, 2014-02-10, 20d
```

LANGUAGE: mermaid
CODE:
```
---
displayMode: compact
---
gantt
    title A Gantt Diagram
    dateFormat  YYYY-MM-DD

    section Section
    A task           :a1, 2014-01-01, 30d
    Another task     :a2, 2014-01-20, 25d
    Another one      :a3, 2014-02-10, 20d
```

----------------------------------------

TITLE: Setting Horizontal Orientation in XY Chart
DESCRIPTION: Example showing how to change the chart orientation to horizontal instead of the default vertical orientation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/xyChart.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
xychart-beta horizontal
...
```

----------------------------------------

TITLE: Applying classDef Styles Inline with ':::' Operator in Mermaid State Diagrams - Mermaid
DESCRIPTION: This Mermaid code applies predefined classDef styles to states using the inline ':::' operator within transitions. Each state can have its appearance altered contextually for each transition, provided the relevant classDef exists. Requires Mermaid's state diagram parser; inputs are state and style declarations alongside transitions, and the output is an enhanced, stylized diagram. Not all states permit styling due to current Mermaid limitations.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_26

LANGUAGE: mermaid
CODE:
```
stateDiagram
   direction TB

   accTitle: This is the accessible title
   accDescr: This is an accessible description

   classDef notMoving fill:white
   classDef movement font-style:italic;
   classDef badBadEvent fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow

   [*] --> Still:::notMoving
   Still --> [*]
   Still --> Moving:::movement
   Moving --> Still
   Moving --> Crash:::movement
   Crash:::badBadEvent --> [*]
```

----------------------------------------

TITLE: Configuring a Pie Chart with Mermaid
DESCRIPTION: This code block shows a more complex pie chart configuration, including custom configuration options via the `config` block.  It uses `showData` to display the values, a title, and configures the label position, and outer stroke width. Dependencies are Mermaid-js and a compatible configuration setup. The input consists of key-value pairs to populate the pie chart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/pie.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
--- 
config:
  pie:
    textPosition: 0.5
  themeVariables:
    pieOuterStrokeWidth: "5px"
---
pie showData
    title Key elements in Product X
    "Calcium" : 42.96
    "Potassium" : 50.05
    "Magnesium" : 10.01
    "Iron" :  5
```

----------------------------------------

TITLE: Styling Today Marker in Mermaid Gantt
DESCRIPTION: Demonstrates setting the `todayMarker` key with CSS-like properties (stroke-width, stroke, opacity) to customize the appearance of the current date marker in the Gantt chart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_16

LANGUAGE: Mermaid
CODE:
```
todayMarker stroke-width:5px,stroke:#0f0,opacity:0.5
```

----------------------------------------

TITLE: Adding Simple Actor Link Menus in Mermaid Sequence Diagrams
DESCRIPTION: Explains the `link <actor>: <label> @ <url>` syntax in Mermaid to associate clickable links with specific actors in a sequence diagram. Multiple links can be added per actor, creating a popup menu.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_25

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Alice
    participant John
    link Alice: Dashboard @ https://dashboard.contoso.com/alice
    link Alice: Wiki @ https://wiki.contoso.com/alice
    link John: Dashboard @ https://dashboard.contoso.com/john
    link John: Wiki @ https://wiki.contoso.com/john
    Alice->>John: Hello John, how are you?
    John-->>Alice: Great!
    Alice-)John: See you later!
```

----------------------------------------

TITLE: Circle Edge Example
DESCRIPTION: This snippet demonstrates creating a link between two nodes using a circle edge.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_84

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    A --o B
```

----------------------------------------

TITLE: Comparing Multiple Entities Across Dimensions - Mermaid
DESCRIPTION: Shows how to implement a restaurant comparison radar chart in Mermaid, defining axes and curves per entity. Uses graticule polygon for scale lines and restricts values to a maximum of 5. Useful for multi-criteria comparison tasks. Depends on radar-beta diagram support in Mermaid.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
radar-beta
  title Restaurant Comparison
  axis food["Food Quality"], service["Service"], price["Price"]
  axis ambiance["Ambiance"],

  curve a["Restaurant A"]{4, 3, 2, 4}
  curve b["Restaurant B"]{3, 4, 3, 3}
  curve c["Restaurant C"]{2, 3, 4, 2}
  curve d["Restaurant D"]{2, 2, 4, 3}

  graticule polygon
  max 5

```

----------------------------------------

TITLE: Defining Priority Action and Manual Operation Node Shapes (Trapezoid Bases) in Mermaid Flowchart DSL
DESCRIPTION: These snippets demonstrate defining trapezoidal nodes labeled 'Priority action' and 'Manual operation' with bases on bottom and top respectively using 'trap-b' and 'trap-t' shapes in Mermaid. These shapes represent specific flowchart actions and operator steps. Requires Mermaid supporting these specialized trapezoid shapes. Input: Mermaid definitions; output: trapezoid-shaped nodes labeled accordingly.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_15

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: trap-b, label: "Priority action" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: trap-t, label: "Manual operation" }
```

----------------------------------------

TITLE: Defining Sync Messages in ZenUML
DESCRIPTION: This snippet shows the syntax for defining synchronous messages in ZenUML, including nested sync messages. Sync messages are represented using `A.SyncMessage` notation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
zenuml
    title Sync message
    A.SyncMessage
    A.SyncMessage(with, parameters) {
      B.nestedSyncMessage()
    }
```

----------------------------------------

TITLE: Example Architecture Diagram with Junctions
DESCRIPTION: This snippet provides an example of an architecture diagram that utilizes junctions. It defines services, junctions, and edges connecting them. This demonstrates the practical use of junctions for splitting or merging connections between services. The diagram showcases the visual representation of complex network layouts and interconnections, a key functionality of architecture diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_11

LANGUAGE: Mermaid
CODE:
```
architecture-beta
    service left_disk(disk)[Disk]
    service top_disk(disk)[Disk]
    service bottom_disk(disk)[Disk]
    service top_gateway(internet)[Gateway]
    service bottom_gateway(internet)[Gateway]
    junction junctionCenter
    junction junctionRight

    left_disk:R -- L:junctionCenter
    top_disk:B -- T:junctionCenter
    bottom_disk:T -- B:junctionCenter
    junctionCenter:R -- L:junctionRight
    top_gateway:B -- T:junctionRight
    bottom_gateway:T -- B:junctionRight
```

----------------------------------------

TITLE: Rotated Commit Labels Layout in GitGraph Using mermaid-example Language
DESCRIPTION: Illustrates the default behavior of commit labels layout in Mermaid's gitGraph using the 'rotateCommitLabel' configuration set to true. Commit labels are rotated 45 degrees below the commit nodes, improving readability especially for long labels. The example includes commit and branch declarations with various commit IDs and checkouts to demonstrate label orientation across a branch topology.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_10

LANGUAGE: mermaid-example
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
  gitGraph:
    rotateCommitLabel: true
---
gitGraph
  commit id: "feat(api): ..."
  commit id: "a"
  commit id: "b"
  commit id: "fix(client): .extra long label.."
  branch c2
  commit id: "feat(modules): ..."
  commit id: "test(client): ..."
  checkout main
  commit id: "fix(api): ..."
  commit id: "ci: ..."
  branch b1
  commit
  branch b2
  commit
```

----------------------------------------

TITLE: Mixing Ordered and Unordered Branches with Custom Main Branch Order in Mermaid GitGraph
DESCRIPTION: Illustrates how Mermaid handles a mix of branches with and without the `order` keyword, and how to override the default main branch order using `mainBranchOrder` in the configuration. Unordered branches appear first in definition order, followed by ordered branches (including `main` if its order is overridden).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_15

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
  gitGraph:
    showBranches: true
    showCommitLabel: true
    mainBranchOrder: 2
---
      gitGraph
      commit
      branch test1 order: 3
      branch test2
      branch test3
      branch test4 order: 1
```

----------------------------------------

TITLE: Declaring Multiple Node Links in One Line
DESCRIPTION: This snippet showcases declaring multiple node links in a single line, creating dependencies in an expressive way.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_77

LANGUAGE: Mermaid
CODE:
```
flowchart LR
   a --> b & c--> d
```

----------------------------------------

TITLE: Styling Today Marker (Mermaid Syntax)
DESCRIPTION: Shows the syntax for styling the 'Today Marker' in a Mermaid Gantt chart. The `todayMarker` key is followed by a comma-separated list of CSS-like properties and values.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_14

LANGUAGE: Mermaid Config
CODE:
```
todayMarker stroke-width:5px,stroke:#0f0,opacity:0.5
```

----------------------------------------

TITLE: Defining Namespaces
DESCRIPTION: This snippet demonstrates the use of namespaces to group classes within a class diagram. It demonstrates the structuring of the class diagram with namespaces.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_14

LANGUAGE: mermaid
CODE:
```
classDiagram
namespace BaseShapes {
    class Triangle
    class Rectangle {
      double width
      double height
    }
}
```

----------------------------------------

TITLE: Styling State Names with Spaces Using ID Reference in Mermaid State Diagrams - Mermaid-Example
DESCRIPTION: This snippet demonstrates defining and styling a state with spaces in its label by specifying an internal ID ('yswsii') and assigning a display name and style. The 'classDef' and ':::' operator are used to style the state inline. States are referenced by their ID for transitions and style assignment. Prerequisites include Mermaid with classDef and custom state ID support.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_27

LANGUAGE: mermaid-example
CODE:
```
stateDiagram
    classDef yourState font-style:italic,font-weight:bold,fill:white

    yswsii: Your state with spaces in it
    [*] --> yswsii:::yourState
    [*] --> SomeOtherState
    SomeOtherState --> YetAnotherState
    yswsii --> YetAnotherState
    YetAnotherState --> [*]
```

----------------------------------------

TITLE: Creating a TCP Packet Diagram in Mermaid
DESCRIPTION: Example demonstrating the creation of a TCP packet structure visualization using Mermaid's `packet-beta` syntax. Each line defines a field with its corresponding bit range (e.g., `0-15`) and a descriptive label (e.g., "Source Port"). A title for the diagram is provided via YAML frontmatter.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/packet.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
---
title: "TCP Packet"
---
packet-beta
0-15: "Source Port"
16-31: "Destination Port"
32-63: "Sequence Number"
64-95: "Acknowledgment Number"
96-99: "Data Offset"
100-105: "Reserved"
106: "URG"
107: "ACK"
108: "PSH"
109: "RST"
110: "SYN"
111: "FIN"
112-127: "Window"
128-143: "Checksum"
144-159: "Urgent Pointer"
160-191: "(Options and Padding)"
192-255: "Data (variable length)"
```

----------------------------------------

TITLE: MermaidConfig Interface Property: dompurifyConfig
DESCRIPTION: Defines the dompurifyConfig configuration option.  This sets the configuration for DOMPurify. It can be used to configure how DOMPurify sanitizes the content of the diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_9

LANGUAGE: typescript
CODE:
```
dompurifyConfig?: `Config`
```

----------------------------------------

TITLE: Example Mermaid Flowchart with Font Awesome Icons
DESCRIPTION: Provides a renderable example (`mermaid-example`) of a flowchart utilizing Font Awesome icons within node text. It shows both standard (`fa:`) and potentially another type (`fab:`) icon prefixes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_118

LANGUAGE: mermaid
CODE:
```
flowchart TD
    B["fa:fa-twitter for peace"]
    B-->C["fab:fa-truck-bold a custom icon"]
```

----------------------------------------

TITLE: Defining a Sync Message with Nesting in ZenUML Sequence Diagram Using zenuml
DESCRIPTION: This snippet demonstrates a synchronous (blocking) message call modeled in ZenUML. It includes a nested sync message within braces, resembling nested function calls or synchronous process steps in programming languages.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_4

LANGUAGE: zenuml
CODE:
```
title Sync message
A.SyncMessage
A.SyncMessage(with, parameters) {
  B.nestedSyncMessage()
}
```

----------------------------------------

TITLE: Sankey Diagram with Empty Lines for Spacing
DESCRIPTION: The example showcases how empty lines can be included within the data to improve the readability of the sankey diagram's data source. It uses `sankey-beta` and comma separated values for source, target and value. These empty lines are ignored by the parser, allowing the user to format the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_5

LANGUAGE: Mermaid
CODE:
```
```mermaid
sankey-beta

Bio-conversion,Losses,26.862

Bio-conversion,Solid,280.322

Bio-conversion,Gas,81.144
```
```

----------------------------------------

TITLE: Defining Odd Shape Node in Mermaid Flowchart DSL
DESCRIPTION: This example demonstrates creating a node with an 'odd' custom shape labeled 'Odd shape' in Mermaid flowcharts. It shows advanced styling options allowing unique visual forms to distinguish nodes. Requires Mermaid with support for the 'odd' shape type. Input is Mermaid flowchart definition; output is a flowchart node rendered with the 'odd' shape styling and label.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_11

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: odd, label: "Odd shape" }
```

----------------------------------------

TITLE: Creating Basic Pie Charts in Mermaid
DESCRIPTION: Demonstrates how to create simple pie charts using the `pie` keyword, a `title`, and key-value pairs representing chart segments and their corresponding values. Includes two distinct examples illustrating the basic syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/examples.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
pie title NETFLIX
         "Time spent looking for movie" : 90
         "Time spent watching it" : 10
```

LANGUAGE: mermaid
CODE:
```
pie title What Voldemort doesn't have?
         "FRIENDS" : 2
         "FAMILY" : 3
         "NOSE" : 45
```

----------------------------------------

TITLE: Setting Git Graph Orientation to Left-to-Right (LR)
DESCRIPTION: This snippet demonstrates how to explicitly set the Mermaid Git Graph orientation to Left-to-Right using the `LR:` directive after `gitGraph`. This is the default orientation if none is specified.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_16

LANGUAGE: mermaid
CODE:
```
    gitGraph LR:
       commit
       commit
       branch develop
       commit
       commit
       checkout main
       commit
       commit
       merge develop
       commit
       commit
```

----------------------------------------

TITLE: Defining a User Journey Diagram with Accessibility Metadata in Mermaid-js
DESCRIPTION: This snippet defines a user journey diagram depicting a typical working day, with sections and activities annotated with accessibility title and description. It models a sequence of events and user actions with accessible metadata.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_18

LANGUAGE: mermaid
CODE:
```
  journey
      accTitle: My User Journey Diagram
      accDescr: My User Journey Diagram Description

      title My working day
      section Go to work
        Make tea: 5: Me
        Go upstairs: 3: Me
        Do work: 1: Me, Cat
      section Go home
        Go downstairs: 5: Me
        Sit down: 5: Me
```

----------------------------------------

TITLE: Creating a Pie Chart with Mermaid JavaScript
DESCRIPTION: This code shows how to define a basic pie chart using Mermaid pie syntax, with data points representing 'Dogs', 'Cats', and 'Rats'. Mermaid is the only dependency; data is input as label-value pairs. Inputs are category names and numeric values; the output is a pie chart visualization. The chart is limited by the basic styling and feature set of Mermaid's pie chart support.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
pie
"Dogs" : 386
"Cats" : 85.9
"Rats" : 15
```

----------------------------------------

TITLE: Rendering Timeline Diagram with Default Theme in Mermaid
DESCRIPTION: Defines a timeline diagram using Mermaid syntax with the 'default' theme and debug-level logging enabled. The timeline shows key social media platform milestones from 2002 to 2010. It requires Mermaid.js to interpret the timeline syntax and apply the specified configuration, including theme and logging options.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_7

LANGUAGE: mermaid-example
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'default'
---
    timeline
        title History of Social Media Platform
          2002 : LinkedIn
          2004 : Facebook : Google
          2005 : YouTube
          2006 : Twitter
          2007 : Tumblr
          2008 : Instagram
          2010 : Pinterest
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Multi-Document
DESCRIPTION: This snippet shows how to create Multi-Document node.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_58

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: docs, label: "Multiple documents" }
```

----------------------------------------

TITLE: Defining a Bang Node in Mermaid Mindmap
DESCRIPTION: Shows how to define a node with a bang shape in a Mermaid mindmap using the `id))...((` syntax. The text within the delimiters becomes the node label.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_5

LANGUAGE: Mermaid
CODE:
```
mindmap
    id))I am a bang((
```

LANGUAGE: Mermaid
CODE:
```
mindmap
    id))I am a bang((
```

----------------------------------------

TITLE: Styling Nodes in ERD
DESCRIPTION: This snippet demonstrates how to apply custom styles to nodes in an ERD using the `style` statement. It allows for setting properties like `fill`, `stroke`, `stroke-width`, `color`, and `stroke-dasharray`. Example: `style id1 fill:#f9f,stroke:#333,stroke-width:4px`.  Node identifiers (e.g., `id1`) need to be defined within the diagram. This requires no external dependencies beyond Mermaid.js itself.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_10

LANGUAGE: mermaid
CODE:
```
erDiagram
    id1||--||id2 : label
    style id1 fill:#f9f,stroke:#333,stroke-width:4px
    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5
```

----------------------------------------

TITLE: Customizing Tag Label Font Size in a Mermaid Git Diagram
DESCRIPTION: Demonstrates adjusting the font size for tag labels associated with commits using the 'tagLabelFontSize' theme variable.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_31

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    commitLabelColor: '#ff0000'
    commitLabelBackground: '#00ff00'
    tagLabelFontSize: '16px'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit
```

----------------------------------------

TITLE: Visualizing Graded Scores with Radar Diagram - Mermaid
DESCRIPTION: Presents the same educational performance data as a raw Mermaid code block, suitable for direct embedding into Mermaid-aware rendering environments. Two student entities are compared across six subjects, configured with explicit min/max scaling. Requires Mermaid's radar-beta feature. Output is a radar chart comparing the input datasets by axis.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
---
title: "Grades"
---
radar-beta
  axis m["Math"], s["Science"], e["English"]
  axis h["History"], g["Geography"], a["Art"]
  curve a["Alice"]{85, 90, 80, 70, 75, 90}
  curve b["Bob"]{70, 75, 85, 80, 90, 85}

  max 100
  min 0
```

----------------------------------------

TITLE: Creating a Minimal XY Chart (Mermaid)
DESCRIPTION: Presents the simplest possible XY chart definition in Mermaid. It only requires the chart type identifier (`xychart-beta`) and at least one data series (a `line` chart in this example). Axes and title are automatically generated.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/xyChart.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
xychart-beta
    line [+1.3, .6, 2.4, -.34]
```

----------------------------------------

TITLE: Demonstrating Multiple Custom Shapes in Mermaid Flowchart (mermaid-example)
DESCRIPTION: This Mermaid-example snippet creates a right-to-left flowchart featuring nodes with new custom shapes: manual-file, manual-input, docs, procs, and paper-tape. Intended for demonstration purposes, it uses Mermaid's extended node definition syntax with shape and label properties. It requires Mermaid version supporting custom shape syntax and assumes correct rendering configuration for custom node types. Inputs are node assignments with shape and label parameters; output is a diagram with visually distinct nodes for each shape.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_0

LANGUAGE: mermaid-example
CODE:
```
flowchart RL
    A@{ shape: manual-file, label: "File Handling"}
    B@{ shape: manual-input, label: "User Input"}
    C@{ shape: docs, label: "Multiple Documents"}
    D@{ shape: procs, label: "Process Automation"}
    E@{ shape: paper-tape, label: "Paper Records"}
```

----------------------------------------

TITLE: Customizing Branch Label Colors and Demonstrating Cyclic Repetition
DESCRIPTION: Illustrates customizing branch label colors using 'gitBranchLabel0' through 'gitBranchLabel9' theme variables. It highlights that after the first 8 branches (indices 0-7), the theme variables are reused cyclically, so branch8 uses the style of branch0 and branch9 uses the style of branch1.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_28

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    'gitBranchLabel0': '#ffffff'
    'gitBranchLabel1': '#ffffff'
    'gitBranchLabel2': '#ffffff'
    'gitBranchLabel3': '#ffffff'
    'gitBranchLabel4': '#ffffff'
    'gitBranchLabel5': '#ffffff'
    'gitBranchLabel6': '#ffffff'
    'gitBranchLabel7': '#ffffff'
    'gitBranchLabel8': '#ffffff'
    'gitBranchLabel9': '#ffffff'
---
  gitGraph
    checkout main
    branch branch1
    branch branch2
    branch branch3
    branch branch4
    branch branch5
    branch branch6
    branch branch7
    branch branch8
    branch branch9
    checkout branch1
    commit
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Subprocess
DESCRIPTION: This snippet creates a subprocess-shaped node in a Mermaid flowchart using the `@{ shape: subproc }` syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_23

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: subproc, label: "This is a subprocess" }
```

----------------------------------------

TITLE: Defining 90-Degree Edge Direction in Mermaid Architecture Diagrams
DESCRIPTION: Illustrates creating a 90-degree angled edge between services by specifying different vertical/horizontal connection points. This example creates an edge originating from the top (`:T`) of the `db` service and connecting to the left (`:L`) of the `server` service.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
db:T -- L:server
```

----------------------------------------

TITLE: Cherry-picking Commits in GitGraph Using mermaid-example Language
DESCRIPTION: Demonstrates how to perform a cherry-pick operation from another branch onto the current branch within Mermaid's gitGraph syntax. The example specifies commit IDs, branches, checkouts, merges, and a cherry-pick with a required parent commit ID parameter when cherry-picking merge commits. It illustrates the constraints such as ensuring the cherry-picked commit exists, belongs to a different branch, and current branch having prior commits. The snippet visually highlights cherry-picked commits using a cherry icon and tag.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_8

LANGUAGE: mermaid-example
CODE:
```
    gitGraph
        commit id: "ZERO"
        branch develop
        branch release
        commit id:"A"
        checkout main
        commit id:"ONE"
        checkout develop
        commit id:"B"
        checkout main
        merge develop id:"MERGE"
        commit id:"TWO"
        checkout release
        cherry-pick id:"MERGE" parent:"B"
        commit id:"THREE"
        checkout develop
        commit id:"C"
```

----------------------------------------

TITLE: Using Font Awesome Icons in Mermaid Flowcharts
DESCRIPTION: Demonstrates the Mermaid syntax for incorporating standard Font Awesome icons (using the `fa:` prefix) and custom Font Awesome icons (using the `fak:` prefix) within flowchart nodes. Requires Font Awesome CSS to be loaded and potentially a custom kit for `fak:` icons.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_117

LANGUAGE: mermaid
CODE:
```
flowchart TD
    B[fa:fa-twitter] %% standard icon
    B-->E(fak:fa-custom-icon-name) %% custom icon
```

----------------------------------------

TITLE: Adding Metadata to Tasks - Mermaid
DESCRIPTION: This snippet shows how to add metadata to tasks in a Mermaid Kanban diagram using the `@{ ... }` syntax. Metadata can include key-value pairs like assigned, ticket, and priority.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/kanban.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
kanban
todo[Todo]
  id3[Update Database Function]@{ ticket: MC-2037, assigned: 'knsv', priority: 'High' }
```

----------------------------------------

TITLE: Creating a Cross Edge
DESCRIPTION: Demonstrates the creation of an edge with a cross head by using `--x`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_38

LANGUAGE: mermaid
CODE:
```
flowchart LR
    A --x B
```

----------------------------------------

TITLE: Defining Entity Name Aliases in ERD
DESCRIPTION: This snippet shows how to add aliases to entities. The alias is specified within square brackets after the entity's name.  The example defines `p[Person]` and `a["Customer Account"]`, showcasing aliasing for the "Person" and "Customer Account" entities, respectively. It's part of the fundamental ERD structure in Mermaid.js; no external dependencies are needed.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
erDiagram
    p[Person] {
        string firstName
        string lastName
    }
    a["Customer Account"] {
        string email
    }
    p ||--o| a : has
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Double Circle
DESCRIPTION: This snippet demonstrates how to create a double circle node using the shape keyword in a Mermaid flowchart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_33

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: dbl-circ, label: "Stop" }
```

----------------------------------------

TITLE: Creating a Quadrant Chart
DESCRIPTION: This snippet demonstrates the basic structure of a quadrant chart, including the title, axis labels, quadrant text, and data points. It's a fundamental example of how to create a basic quadrant chart in Mermaid.js. The chart plots data on an x-y axis and divides it into four quadrants, used for identifying patterns and trends.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/quadrantChart.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
quadrantChart
    title Reach and engagement of campaigns
    x-axis Low Reach --> High Reach
    y-axis Low Engagement --> High Engagement
    quadrant-1 We should expand
    quadrant-2 Need to promote
    quadrant-3 Re-evaluate
    quadrant-4 May be improved
    Campaign A: [0.3, 0.6]
    Campaign B: [0.45, 0.23]
    Campaign C: [0.57, 0.69]
    Campaign D: [0.78, 0.34]
    Campaign E: [0.40, 0.34]
    Campaign F: [0.35, 0.78]
```

----------------------------------------

TITLE: Applying CSS Styling to Mermaid Flowcharts via CSS Classes - HTML and mermaid
DESCRIPTION: This snippet shows how to predefine CSS classes in HTML style tags and apply these classes to Mermaid flowchart nodes. By leveraging external CSS, users can customize the appearance of node elements (e.g., rect elements) beyond Mermaid's built-in style options. This method requires the CSS to be included in the webpage embedding the Mermaid graph, enabling advanced styling via standard CSS selectors.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_57

LANGUAGE: html
CODE:
```
<style>
  .cssClass > rect {
    fill: #ff0000;
    stroke: #ffff00;
    stroke-width: 4px;
  }
</style>
```

LANGUAGE: mermaid
CODE:
```
flowchart LR
    A-->B[AAA<span>BBB</span>]
    B-->D
    class A cssClass
```

----------------------------------------

TITLE: Using Custom Icons in Architecture Diagrams
DESCRIPTION: This snippet illustrates the utilization of custom icons within an architecture diagram using the format 'name:icon-name' in mermaid.  It uses logos from iconify.design.  This showcases how users can incorporate custom images into architecture diagrams.  The output will display the user-specified icons within the architecture, based on the icon pack and name provided. Requires iconify setup.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_13

LANGUAGE: Mermaid
CODE:
```
architecture-beta
    group api(logos:aws-lambda)[API]

    service db(logos:aws-aurora)[Database] in api
    service disk1(logos:aws-glacier)[Storage] in api
    service disk2(logos:aws-s3)[Storage] in api
    service server(logos:aws-ec2)[Server] in api

    db:L -- R:server
    disk1:T -- B:server
    disk2:T -- B:db
```

----------------------------------------

TITLE: Applying Direct Styles to Points in Mermaid (Markdown Syntax)
DESCRIPTION: Demonstrates the Markdown syntax for applying inline styles directly to individual points in a Mermaid quadrant chart definition. Style properties like `radius`, `color`, `stroke-color`, and `stroke-width` are specified after the point's coordinates.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/quadrantChart.md#_snippet_3

LANGUAGE: markdown
CODE:
```
Point A: [0.9, 0.0] radius: 12
Point B: [0.8, 0.1] color: #ff3300, radius: 10
Point C: [0.7, 0.2] radius: 25, color: #00ff33, stroke-color: #10f0f0
Point D: [0.6, 0.3] radius: 15, stroke-color: #00ff0f, stroke-width: 5px ,color: #ff33f0
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Stored Data
DESCRIPTION: This snippet creates node for Stored Data.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_61

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: bow-rect, label: "Stored data" }
```

----------------------------------------

TITLE: Defining Prepare Conditional Node Shape (Hexagon) in Mermaid Flowchart DSL
DESCRIPTION: This snippet shows how to create a hexagonal node labeled 'Prepare conditional' in Mermaid flowcharts, which can symbolize preparation or conditional steps. The 'hex' shape property generates the hexagon form. Requires Mermaid supporting custom shapes. Input is Mermaid syntax; output is a hexagon node labeled accordingly.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_13

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: hex, label: "Prepare conditional" }
```

----------------------------------------

TITLE: Comprehensive Requirement Diagram Example in Mermaid
DESCRIPTION: Illustrates the definition of multiple requirements of various types (functionalRequirement, performanceRequirement, interfaceRequirement, etc.), multiple elements with different attributes (type, docRef), and various relationship types (satisfies, traces, contains, derives, refines, verifies, copies) connecting requirements and elements to form a complex diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/requirementDiagram.md#_snippet_2

LANGUAGE: Mermaid
CODE:
```
requirementDiagram

    requirement test_req {
    id: 1
    text: the test text.
    risk: high
    verifymethod: test
    }

    functionalRequirement test_req2 {
    id: 1.1
    text: the second test text.
    risk: low
    verifymethod: inspection
    }

    performanceRequirement test_req3 {
    id: 1.2
    text: the third test text.
    risk: medium
    verifymethod: demonstration
    }

    interfaceRequirement test_req4 {
    id: 1.2.1
    text: the fourth test text.
    risk: medium
    verifymethod: analysis
    }

    physicalRequirement test_req5 {
    id: 1.2.2
    text: the fifth test text.
    risk: medium
    verifymethod: analysis
    }

    designConstraint test_req6 {
    id: 1.2.3
    text: the sixth test text.
    risk: medium
    verifymethod: analysis
    }

    element test_entity {
    type: simulation
    }

    element test_entity2 {
    type: word doc
    docRef: reqs/test_entity
    }

    element test_entity3 {
    type: "test suite"
    docRef: github.com/all_the_tests
    }


    test_entity - satisfies -> test_req2
    test_req - traces -> test_req2
    test_req - contains -> test_req3
    test_req3 - contains -> test_req4
    test_req4 - derives -> test_req5
    test_req5 - refines -> test_req6
    test_entity3 - verifies -> test_req5
    test_req <- copies - test_entity2
```

----------------------------------------

TITLE: Setting Axis Tick Interval in Mermaid
DESCRIPTION: Explains how to set a custom tick interval using `tickInterval` and provides an example. Mentions the default and the syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_8

LANGUAGE: Mermaid
CODE:
```
tickInterval 1day
```

----------------------------------------

TITLE: Configuring Mermaid Flowchart Renderer to 'elk'
DESCRIPTION: Shows how to change the default flowchart renderer from 'dagre' to 'elk' using a configuration directive. The 'elk' renderer, available from Mermaid version 9.4+, is experimental and potentially better for large or complex diagrams. This requires the feature to be enabled in lazy-loading configurations if applicable.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_120

LANGUAGE: yaml
CODE:
```
config:
  flowchart:
    defaultRenderer: "elk"
```

----------------------------------------

TITLE: Mermaid Gantt: Task Dependencies (after multiple, until)
DESCRIPTION: This snippet demonstrates defining task start/end dates based on other tasks. The 'after b a' syntax indicates the task starts only after both tasks 'b' and 'a' are completed. The 'until b c' syntax indicates the task runs until either task 'b' or 'c' begins. Support for the 'until' keyword was added in v10.9.0+.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_2

LANGUAGE: Mermaid
CODE:
```
gantt
    apple :a, 2017-07-20, 1w
    banana :crit, b, 2017-07-23, 1d
    cherry :active, c, after b a, 1d
    kiwi   :d, 2017-07-20, until b c
```

LANGUAGE: Mermaid
CODE:
```
gantt
    apple :a, 2017-07-20, 1w
    banana :crit, b, 2017-07-23, 1d
    cherry :active, c, after b a, 1d
    kiwi   :d, 2017-07-20, until b c
```

----------------------------------------

TITLE: Enabling Compact Display Mode in Mermaid
DESCRIPTION: Shows how to enable compact display mode for a Gantt chart using YAML frontmatter. Includes a full example of a Gantt chart with the setting.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_11

LANGUAGE: Mermaid
CODE:
```
---
displayMode: compact
---
gantt
    title A Gantt Diagram
    dateFormat  YYYY-MM-DD

    section Section
    A task           :a1, 2014-01-01, 30d
    Another task     :a2, 2014-01-20, 25d
    Another one      :a3, 2014-02-10, 20d
```

----------------------------------------

TITLE: CSS Styling for Mermaid Diagrams
DESCRIPTION: CSS code to specify font family for Mermaid diagrams to avoid font inconsistencies that can cause layout issues.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_6

LANGUAGE: css
CODE:
```
pre.mermaid {
  font-family: 'trebuchet ms', verdana, arial;
}
```

----------------------------------------

TITLE: Sequence Diagram Example (Default Behavior)
DESCRIPTION: A standard Mermaid sequence diagram example showing default rendering behavior, particularly regarding message text wrapping (which is off by default).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_14

LANGUAGE: mermaid
CODE:
```
sequenceDiagram

Alice->Bob: Hello Bob, how are you?
Bob->Alice: Fine, how did your mother like the book I suggested? And did you catch the new book about alien invasion?
Alice->Bob: Good.
Bob->Alice: Cool
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Junction
DESCRIPTION: This snippet shows how to create Junction node.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_53

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: f-circ, label: "Junction" }
```

----------------------------------------

TITLE: Using Annotators for Participants in ZenUML Sequence Diagram in zenuml
DESCRIPTION: This example introduces annotators, special symbols or icons to visually distinguish participant roles (e.g., @Actor, @Database). It demonstrates declaration of Alice as an actor and Bob as a database, enhancing diagram semantics with role-specific visuals.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_2

LANGUAGE: zenuml
CODE:
```
title Annotators
@Actor Alice
@Database Bob
Alice->Bob: Hi Bob
Bob->Alice: Hi Alice
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Rectangle
DESCRIPTION: This snippet uses the new shape definition syntax in Mermaid to create a rectangular node. It utilizes the `@{ shape: rect }` syntax after the node ID to explicitly define the shape.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_19

LANGUAGE: Mermaid
CODE:
```
flowchart RL
    A@{ shape: manual-file, label: "File Handling"}
    B@{ shape: manual-input, label: "User Input"}
    C@{ shape: docs, label: "Multiple Documents"}
    D@{ shape: procs, label: "Process Automation"}
    E@{ shape: paper-tape, label: "Paper Records"}
```

----------------------------------------

TITLE: Escaping Characters with Entity Codes
DESCRIPTION: Shows how to escape characters using entity codes. Uses `#quot;` for double quotes and `#9829;` for a decimal character.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_41

LANGUAGE: mermaid
CODE:
```
    flowchart LR
        A["A double quote:#quot;"] --> B["A dec char:#9829;"]
```

----------------------------------------

TITLE: Modeling Two-way Class Relationships - Mermaid-Example
DESCRIPTION: Gives a Mermaid class diagram example of a two-way (bidirectional) relationship, useful for N:M UML associations. It leverages special Mermaid syntax, assuming the renderer supports bidirectional arrows, with output aimed at visually reinforcing relational complexity in documentation or design flows.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
classDiagram
    Animal <|--|> Zebra

```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Circle
DESCRIPTION: This snippet demonstrates how to define a circle-shaped node in Mermaid using the shape keyword.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_25

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: circle, label: "Start" }
```

----------------------------------------

TITLE: Defining Data Input/Output Node Shapes (Lean Right and Lean Left) in Mermaid Flowchart DSL
DESCRIPTION: These paired snippets illustrate defining nodes with lean-right and lean-left shapes labeled for input/output operations in Mermaid flowcharts. The 'lean-r' and 'lean-l' shapes visually represent directional data flow. Supports enhanced flowchart semantics. Requires Mermaid version with extended shape options. Input is Mermaid code defining nodes; outputs are directionally styled nodes with specified labels.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_14

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: lean-r, label: "Input/Output" }
```

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: lean-l, label: "Output/Input" }
```

----------------------------------------

TITLE: Subgraph Direction Inheritance When Connected Externally
DESCRIPTION: Illustrates how subgraphs inherit parent graph direction when nodes within are linked to outside nodes, overriding internal directions. Demonstrates subgraph behavior with external links in Mermaid.js.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_47

LANGUAGE: mermaid
CODE:
```
flowchart LR
    subgraph subgraph1
        direction TB
        top1[top] --> bottom1[bottom]
    end
    subgraph subgraph2
        direction TB
        top2[top] --> bottom2[bottom]
    end
    outside --> subgraph1
    outside ---> top2
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Bolt
DESCRIPTION: This snippet shows how to create a lightning bolt shaped node. Represents communication link.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_44

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: bolt, label: "Communication link" }
```

----------------------------------------

TITLE: Defining a Requirement Diagram with Accessibility Metadata in Mermaid-js
DESCRIPTION: This snippet creates a requirement diagram with accessibility title and description, detailing a requirement with attributes including id, text, risk, and verification method, along with an element that satisfies the requirement. Suitable for illustrating requirement relationships with accessible metadata.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_12

LANGUAGE: mermaid
CODE:
```
  requirementDiagram
      accTitle: My Requirement Diagram
      accDescr: My Requirement Diagram Description

       requirement test_req {
  id: 1
  text: the test text.
  risk: high
  verifymethod: test
  }

  element test_entity {
  type: simulation
  }

  test_entity - satisfies -> test_req
```

----------------------------------------

TITLE: Mermaid Configuration for Customizing Sankey Diagrams
DESCRIPTION: Provides example JavaScript code to configure Mermaid.js Sankey diagrams, allowing adjustments to diagram dimensions, link colors, and node alignment. The options include setting width, height, link color types, and node alignment strategies for improved visual layout.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sankey.md#_snippet_3

LANGUAGE: html
CODE:
```
<script>
  const config = {
    startOnLoad: true,
    securityLevel: 'loose',
    sankey: {
      width: 800,
      height: 400,
      linkColor: 'source',
      nodeAlignment: 'left',
    },
  };
  mermaid.initialize(config);
</script>
```

----------------------------------------

TITLE: Styling Individual Blocks in Mermaid Block Diagrams
DESCRIPTION: Demonstrates how to apply custom CSS styles to individual blocks in a Mermaid block diagram. Uses the style keyword followed by block ID and CSS properties to customize the appearance of specific blocks.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
block-beta
  id1 space id2
  id1("Start")-->id2("Stop")
  style id1 fill:#636,stroke:#333,stroke-width:4px
  style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5
```

----------------------------------------

TITLE: Creating a Terminal Point (Stadium Shape) in Mermaid Flowchart (mermaid-example)
DESCRIPTION: This Mermaid-example snippet creates a top-down flowchart illustrating the use of the 'stadium' node shape to represent a terminal or endpoint. The node is labeled 'Terminal point', showcasing the mapping of terminal semantics to specific visual forms using shape attributes. Input requires a node with shape and label; output yields a stadium-shaped node in the flowchart. Prerequisite: Mermaid setup supporting shape extensions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_6

LANGUAGE: mermaid-example
CODE:
```
flowchart TD
    A@{ shape: stadium, label: "Terminal point" }
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Framed Circle
DESCRIPTION: This snippet demonstrates creating a framed circle node using the shape keyword, often used for representing 'stop' states.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_38

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: framed-circle, label: "Stop" }
```

----------------------------------------

TITLE: Applying Log Level Directive to a Graph
DESCRIPTION: Example showing a Mermaid graph definition preceded by a directive that sets the log level to 2 (info).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_11

LANGUAGE: mermaid
CODE:
```
%%{init: { "logLevel": 2 } }%%
graph TD
A(Forest) --> B[/Another/]
A --> C[End]
  subgraph section
  B
  C
  end
```

----------------------------------------

TITLE: Running Tests (Host)
DESCRIPTION: This command executes the test suite for the Mermaid project using pnpm in the host environment. It verifies that the project is set up correctly and that the tests pass.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_7

LANGUAGE: bash
CODE:
```
pnpm test
```

----------------------------------------

TITLE: Declaring Participants Explicitly in ZenUML Sequence Diagram Using zenuml
DESCRIPTION: This code snippet shows how to explicitly declare participants in the order they should appear in the diagram. It defines participants Bob and Alice by name before showing their interactions. This control over participant order can improve diagram clarity.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_1

LANGUAGE: zenuml
CODE:
```
title Declare participant (optional)
Bob
Alice
Alice->Bob: Hi Bob
Bob->Alice: Hi Alice
```

----------------------------------------

TITLE: Combining Multiple `init`/`initialize` Directives
DESCRIPTION: Illustrates how multiple `init` or `initialize` directives within the same Mermaid definition are parsed and merged. Later directives override values set by earlier ones for the same key.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
%%{init: { 'logLevel': 'debug', 'theme': 'forest' } }%%
%%{initialize: { 'logLevel': 'fatal', "theme":'dark', 'startOnLoad': true } }%%
...
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Manual Input
DESCRIPTION: This snippet creates shape for Manual Input node.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_57

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: sl-rect, label: "Manual input" }
```

----------------------------------------

TITLE: Kanban Diagram Column Example - Mermaid
DESCRIPTION: This snippet shows a specific example of defining a column in a Mermaid Kanban diagram, where the column ID is `id1` and the title is `Todo`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/kanban.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
id1[Todo]
```

----------------------------------------

TITLE: MermaidConfig Interface Property: class
DESCRIPTION: Defines the class configuration option. Configures settings specific to class diagrams rendered within Mermaid.  Uses ClassDiagramConfig to define diagram specific configuration.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_5

LANGUAGE: typescript
CODE:
```
class?: `ClassDiagramConfig`
```

----------------------------------------

TITLE: Customizing Commit IDs in GitGraph - Mermaid
DESCRIPTION: This snippet shows how to set custom IDs for individual commits using the 'id' attribute within the Mermaid gitGraph syntax. Each commit line contains an explicit identifier. There are no dependencies beyond Mermaid support in the renderer. The output diagram labels each commit with its custom ID, aiding clarity and reference in documentation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
gitGraph
   commit id: "Alpha"
   commit id: "Beta"
   commit id: "Gamma"
```

----------------------------------------

TITLE: Hiding Today Marker in Mermaid Gantt
DESCRIPTION: Demonstrates setting the `todayMarker` key to the value `off` to disable the display of the current date marker in the Mermaid Gantt chart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_17

LANGUAGE: Mermaid
CODE:
```
todayMarker off
```

----------------------------------------

TITLE: Setting aria-roledescription in HTML
DESCRIPTION: This HTML snippet shows how the `aria-roledescription` attribute is automatically added to the SVG element. The value of this attribute is set to the diagram type key. This snippet demonstrates the expected output after the mermaid.js library processes the diagram information.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_0

LANGUAGE: html
CODE:
```
<svg
  aria-roledescription="stateDiagram"
  class="statediagram"
  xmlns="http://www.w3.org/2000/svg"
  width="100%"
  id="mermaid-1668720491568"
></svg>
```

----------------------------------------

TITLE: Setting Week-based Tick Interval Start Day in Mermaid
DESCRIPTION: Demonstrates how to set a week-based tick interval and specify the starting day of the week using the `weekday` option.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_10

LANGUAGE: Mermaid
CODE:
```
gantt
  tickInterval 1week
  weekday monday
```

----------------------------------------

TITLE: Disable Auto Wrap - Mermaid
DESCRIPTION: This snippet demonstrates how to disable the auto wrapping markdown strings, using the `markdownAutoWrap` config.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_97

LANGUAGE: Mermaid
CODE:
```
---
config:
  markdownAutoWrap: false
---
graph LR
```

----------------------------------------

TITLE: XY Chart Example in Mermaid
DESCRIPTION: Renders a combined bar and line chart illustrating sales revenue across months with specified axes labels. Demonstrates multi-series chart creation in Mermaid syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_8

LANGUAGE: mermaid
CODE:
```
xychart-beta
    title "Sales Revenue"
    x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]
    y-axis "Revenue (in $)" 4000 --> 11000
    bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]
    line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]
```

----------------------------------------

TITLE: Customizing Commit Label Font Size in a Mermaid Git Diagram
DESCRIPTION: Shows how to adjust the font size of commit labels using the 'commitLabelFontSize' theme variable. This allows for fine-tuning the text size within commit markers.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_30

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    commitLabelColor: '#ff0000'
    commitLabelBackground: '#00ff00'
    commitLabelFontSize: '16px'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Display
DESCRIPTION: This snippet shows how to create Display shape.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_49

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: curv-trap, label: "Display" }
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Loop Limit
DESCRIPTION: This snippet shows how to create Loop Limit node.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_55

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: notch-pent, label: "Loop limit" }
```

----------------------------------------

TITLE: Handling Unclear Indentation in Mermaid Mindmaps
DESCRIPTION: Illustrates how Mermaid interprets and attempts to correct ambiguous indentation in the mindmap syntax. Despite inconsistent indentation for node 'C' relative to 'B', Mermaid infers its parent based on the previous clear parent ('A'), treating 'B' and 'C' as siblings.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_11

LANGUAGE: Mermaid
CODE:
```
mindmap
    Root
        A
            B
          C
```

LANGUAGE: Mermaid
CODE:
```
mindmap
Root
    A
        B
      C
```

----------------------------------------

TITLE: Setting Sequence Diagram Configuration (Single-line)
DESCRIPTION: A specific example of a single-line directive used to set a sequence diagram configuration (`mirrorActors` to false).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
%%{init: { "sequence": { "mirrorActors":false }}}%%
```

----------------------------------------

TITLE: Configuring Temporal Commits (Default Behavior)
DESCRIPTION: Demonstrates the default temporal commit rendering in Mermaid Git Graphs by explicitly setting `parallelCommits: false` within a configuration block. Commits made earlier appear closer to their parent.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_19

LANGUAGE: mermaid
CODE:
```
---
config:
  gitGraph:
    parallelCommits: false
---
gitGraph:
  commit
  branch develop
  commit
  commit
  checkout main
  commit
  commit
```

----------------------------------------

TITLE: Changing Theme via Directive
DESCRIPTION: A specific directive example demonstrating how to change the diagram theme to 'forest'. Valid theme values include 'default', 'base', 'dark', 'forest', and 'neutral'.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
%%{init: { "theme": "forest" } }%%
```

----------------------------------------

TITLE: Quadrant Chart Example in Mermaid
DESCRIPTION: Displays a 2D quadrant chart with campaign data, axes labels, and quadrant labels, useful for visualizing campaign reach and engagement metrics.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
quadrantChart
    title Reach and engagement of campaigns
    x-axis Low Reach --> High Reach
    y-axis Low Engagement --> High Engagement
    quadrant-1 We should expand
    quadrant-2 Need to promote
    quadrant-3 Re-evaluate
    quadrant-4 May be improved
    Campaign A: [0.3, 0.6]
    Campaign B: [0.45, 0.23]
    Campaign C: [0.57, 0.69]
    Campaign D: [0.78, 0.34]
    Campaign E: [0.40, 0.34]
    Campaign F: [0.35, 0.78]
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Diamond
DESCRIPTION: This snippet demonstrates the use of the shape keyword to create a diamond-shaped node, commonly used for decisions, in a Mermaid flowchart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_27

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: diamond, label: "Decision" }
```

----------------------------------------

TITLE: Basic Dependency Declaration
DESCRIPTION: This snippet shows the basic syntax for declaring dependencies between multiple nodes, requiring multiple lines for the same connections.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_79

LANGUAGE: Mermaid
CODE:
```
flowchart TB
    A --> C
    A --> D
    B --> C
    B --> D
```

----------------------------------------

TITLE: Applying the 'default' Theme to a Mermaid GitGraph
DESCRIPTION: Example applying the 'default' theme to a complex gitGraph diagram via configuration directives. Using `theme: 'default'` renders the diagram with the standard default Mermaid styling.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_23

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'default'
---
      gitGraph
        commit type:HIGHLIGHT
        branch hotfix
        checkout hotfix
        commit
        branch develop
        checkout develop
        commit id:"ash" tag:"abc"
        branch featureB
        checkout featureB
        commit type:HIGHLIGHT
        checkout main
        checkout hotfix
        commit type:NORMAL
        checkout develop
        commit type:REVERSE
        checkout featureB
        commit
        checkout main
        merge hotfix
        checkout featureB
        commit
        checkout develop
        branch featureA
        commit
        checkout develop
        merge hotfix
        checkout featureA
        commit
        checkout featureB
        commit
        checkout develop
        merge featureA
        branch release
        checkout release
        commit
        checkout main
        commit
        checkout release
        merge main
        checkout develop
        merge release
```

----------------------------------------

TITLE: MermaidConfig Interface Property: darkMode
DESCRIPTION: Defines the darkMode configuration option. It controls the dark mode setting for diagrams.  The input is a boolean value.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_6

LANGUAGE: typescript
CODE:
```
darkMode?: `boolean`
```

----------------------------------------

TITLE: State Declaration: with Description
DESCRIPTION: This snippet demonstrates declaring a state with a description using the `state` keyword.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_3

LANGUAGE: mermaid-example
CODE:
```
stateDiagram-v2
    state "This is a state description" as s2
```

----------------------------------------

TITLE: Creating a Rhombus Node in Mermaid Flowchart
DESCRIPTION: This snippet demonstrates how to create a rhombus-shaped node (diamond) in a Mermaid flowchart. The text is enclosed in curly braces `{}`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_12

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    id1{This is the text in the box}
```

----------------------------------------

TITLE: Creating a Dotted Link
DESCRIPTION: This snippet creates a dotted link between two nodes, which can be used to represent a weaker or less direct relationship.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_71

LANGUAGE: Mermaid
CODE:
```
flowchart LR
   A-.->B;
```

----------------------------------------

TITLE: Sankey Diagram with Simple Structure
DESCRIPTION: This code snippet illustrates the core structure required for a Sankey diagram with basic data. The diagram uses the `sankey-beta` keyword and then follows it with the expected comma-separated data. It shows a basic flow of data through the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_3

LANGUAGE: Mermaid
CODE:
```
```mermaid
sankey-beta

%% source,target,value
Electricity grid,Over generation / exports,104.453
Electricity grid,Heating and cooling - homes,113.726
Electricity grid,H2 conversion,27.14
```
```

----------------------------------------

TITLE: Defining Basic Mindmap Structure with Indentation
DESCRIPTION: Illustrates the core principle of Mermaid mindmap syntax where indentation defines the hierarchical relationship between nodes. Shows a root node ('Root') with a child ('A'), which in turn has two children ('B' and 'C').
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_1

LANGUAGE: Mermaid
CODE:
```
mindmap
    Root
        A
            B
            C
```

LANGUAGE: Mermaid
CODE:
```
mindmap
Root
    A
      B
      C
```

----------------------------------------

TITLE: Creating a Thick Link with Text
DESCRIPTION: This snippet creates a thick link with text between two nodes in a flowchart using the `A == text ==> B` syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_28

LANGUAGE: mermaid
CODE:
```
flowchart LR
   A == text ==> B
```

----------------------------------------

TITLE: Modeling a User Journey Diagram with Mermaid JavaScript
DESCRIPTION: This snippet demonstrates the Mermaid journey syntax for visualizing user journeys or workflows, divided into sections with rated steps and participants. Dependencies are limited to Mermaid. It takes a series of labeled actions with ratings and assigned actors as input, generating a process visualization. Limitations include fixed rating markers and display constraints of Mermaid's journey diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_8

LANGUAGE: mermaid
CODE:
```
  journey
    title My working day
    section Go to work
      Make tea: 5: Me
      Go upstairs: 3: Me
      Do work: 1: Me, Cat
    section Go home
      Go downstairs: 5: Me
      Sit down: 3: Me
```

----------------------------------------

TITLE: Defining a Hexagon Node in Mermaid Mindmap
DESCRIPTION: Shows how to define a node with a hexagon shape in a Mermaid mindmap using the `id{{...}}` syntax. The text within the double curly braces becomes the node label.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_7

LANGUAGE: Mermaid
CODE:
```
mindmap
    id{{I am a hexagon}}
```

LANGUAGE: Mermaid
CODE:
```
mindmap
    id{{I am a hexagon}}
```

----------------------------------------

TITLE: Customizing Tag Label Colors in a Mermaid Git Diagram
DESCRIPTION: Shows how to customize the appearance of tag labels by setting the text color ('tagLabelColor'), background color ('tagLabelBackground'), and border color ('tagLabelBorder') using theme variables.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_32

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    tagLabelColor: '#ff0000'
    tagLabelBackground: '#00ff00'
    tagLabelBorder: '#0000ff'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit
```

----------------------------------------

TITLE: Defining Lollipop Interface Relationships - Mermaid-Example
DESCRIPTION: Provides a visual example of a Mermaid class diagram with a lollipop interface using ()-- syntax, intended to clarify the unique, non-shared interface relationship between entities. No other dependencies are needed, and the output is a conceptual representation of UML lollipop interfaces.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_9

LANGUAGE: mermaid
CODE:
```
classDiagram
  bar ()-- foo

```

----------------------------------------

TITLE: Creating an Invisible Link
DESCRIPTION: This snippet creates an invisible link between two nodes using the `~~~` syntax. This can be used to influence the node's positioning.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_29

LANGUAGE: mermaid
CODE:
```
flowchart LR
    A ~~~ B
```

----------------------------------------

TITLE: Defining Various UML Relationships in Mermaid - Mermaid-Example
DESCRIPTION: Provides a Mermaid class diagram example illustrating eight UML association types including visual relationship arrows for inheritance, composition, aggregation, association, link (solid/dashed), dependency, and realization. The snippet only requires Mermaid for rendering and is meant to serve as a documentation sample for users to observe various relationship notations and their effects on diagram structure.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
classDiagram
classA <|-- classB
classC *-- classD
classE o-- classF
classG <-- classH
classI -- classJ
classK <.. classL
classM <|.. classN
classO .. classP

```

----------------------------------------

TITLE: Defining an Event Node with Rounded Shape in Mermaid (mermaid-example)
DESCRIPTION: This Mermaid-example code draws a top-down flowchart containing a single event node, explicitly rendered as a 'rounded' rectangle and labeled 'This is an event'. The example demonstrates using the shape property to visually differentiate event-driven nodes. Mermaid version with support for the 'rounded' shape definition is required. Takes node definitions as input; outputs a flowchart emphasizing event representation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_4

LANGUAGE: mermaid-example
CODE:
```
flowchart TD
    A@{ shape: rounded, label: "This is an event" }
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Document
DESCRIPTION: This snippet uses shape to create a node of Document shape.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_45

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: doc, label: "Document" }
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Extract
DESCRIPTION: This snippet defines a small triangle.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_51

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: tri, label: "Extract" }
```

----------------------------------------

TITLE: Lollipop Interfaces
DESCRIPTION: This snippet illustrates the definition of lollipop interfaces in Mermaid class diagrams. It shows how to connect a class to an interface using the lollipop syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_13

LANGUAGE: mermaid
CODE:
```
classDiagram
  bar ()-- foo
```

LANGUAGE: mermaid
CODE:
```
classDiagram
  class Class01 {
    int amount
    draw()
  }
  Class01 --() bar
  Class02 --() bar

  foo ()-- Class01
```

----------------------------------------

TITLE: Creating Architecture Diagram - Beta Syntax (Duplicate)
DESCRIPTION: This snippet is a duplicate of the first one and shows the same architecture diagram using the `architecture-beta` syntax. It defines the structure of the architecture with services, groups, and connections, showcasing the same relationship of components within the cloud or CI/CD deployments. It leverages the core functionality of mermaid-js for diagram visualization.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_1

LANGUAGE: Mermaid
CODE:
```
architecture-beta
    group api(cloud)[API]

    service db(database)[Database] in api
    service disk1(disk)[Storage] in api
    service disk2(disk)[Storage] in api
    service server(server)[Server] in api

    db:L -- R:server
    disk1:T -- B:server
    disk2:T -- B:db
```

----------------------------------------

TITLE: Creating a Parallelogram Node in Mermaid Flowchart
DESCRIPTION: This snippet demonstrates how to create a parallelogram-shaped node in a Mermaid flowchart. The text is enclosed in forward slashes `//`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_14

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    id1[/This is the text in the box/]
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Fork
DESCRIPTION: This snippet shows the use of the shape keyword to define a 'fork' shape.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_39

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: fork, label: "Fork or Join" }
```

----------------------------------------

TITLE: Defining Subprocess Node Shape in Mermaid Flowchart DSL
DESCRIPTION: This snippet demonstrates how to define a flowchart node with a subprocess shape using Mermaid syntax. The node is labeled 'This is a subprocess' and uses the 'subproc' shape type to visually represent a subprocess in a flowchart. The snippet can be used to create subprocess nodes within Mermaid diagrams and requires Mermaid version capable of parsing custom node properties in this syntax. The input is a Mermaid flowchart definition; the output is a visual node with specified shape and label.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_8

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: subproc, label: "This is a subprocess" }
```

----------------------------------------

TITLE: Creating an Alternate Parallelogram Node in Mermaid
DESCRIPTION: This snippet demonstrates how to create an alternative parallelogram shape.  The text is enclosed in backslashes `\`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_15

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    id1[\This is the text in the box\]
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Lean Right
DESCRIPTION: This snippet demonstrates using the shape keyword to create a node shaped like a parallelogram leaning to the right, often used for data input/output, in a Mermaid flowchart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_29

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: lean-r, label: "Input/Output" }
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Notched Rectangle
DESCRIPTION: This snippet shows how to create a notched rectangle, resembling a card, using the shape keyword in a Mermaid flowchart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_35

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: notch-rect, label: "Card" }
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Lined Document
DESCRIPTION: This snippet uses shape to create a node of Lined Document shape.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_54

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: lin-doc, label: "Lined document" }
```

----------------------------------------

TITLE: Applying the Neutral Theme to a Mermaid Git Diagram
DESCRIPTION: Demonstrates how to apply the built-in 'neutral' theme to a Mermaid Git diagram. The configuration block sets the theme property to 'neutral' and enables debug logging.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_25

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'neutral'
---
      gitGraph
        commit
        branch hotfix
        checkout hotfix
        commit
        branch develop
        checkout develop
        commit id:"ash" tag:"abc"
        branch featureB
        checkout featureB
        commit type:HIGHLIGHT
        checkout main
        checkout hotfix
        commit type:NORMAL
        checkout develop
        commit type:REVERSE
        checkout featureB
        commit
        checkout main
        merge hotfix
        checkout featureB
        commit
        checkout develop
        branch featureA
        commit
        checkout develop
        merge hotfix
        checkout featureA
        commit
        checkout featureB
        commit
        checkout develop
        merge featureA
        branch release
        checkout release
        commit
        checkout main
        commit
        checkout release
        merge main
        checkout develop
        merge release
```

----------------------------------------

TITLE: Registering Icon Packs in TypeScript
DESCRIPTION: The `registerIconPacks` function allows for registering icon packs into the Mermaid rendering process. It accepts an array of `IconLoader` objects.  This enables the use of custom icons within diagrams. The function doesn't return a value; its sole purpose is to facilitate the use of external icon sets.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
registerIconPacks: (`iconLoaders`) => `void`
```

----------------------------------------

TITLE: Defining a Process Node with Custom Shape in Mermaid (mermaid-example)
DESCRIPTION: This Mermaid-example snippet creates a top-down flowchart with a single node labeled 'This is a process', explicitly setting the node's shape as 'rect'. It demonstrates how to assign a semantic meaning to a basic process step via the shape attribute. Requires Mermaid with shape support and correct rendering configuration. Input is a node with shape and label parameters; output is a diagram with a rectangle-shaped process node.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_2

LANGUAGE: mermaid-example
CODE:
```
flowchart TD
    A@{ shape: rect, label: "This is a process" }
```

----------------------------------------

TITLE: Mermaid Integration with Marked in CoffeeScript
DESCRIPTION: A more advanced Marked renderer in CoffeeScript that not only transforms Mermaid code blocks but also adds the Mermaid script tag to the generated markup if needed. This ensures the Mermaid library is loaded when diagrams are present.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_13

LANGUAGE: coffee
CODE:
```
marked = require 'marked'

module.exports = (options) ->
  hasMermaid = false
  renderer = new marked.Renderer()
  renderer.defaultCode = renderer.code
  renderer.code = (code, language) ->
    if language is 'mermaid'
      html = ''
      if not hasMermaid
        hasMermaid = true
        html += '<script src="'+options.mermaidPath+'"></script>'
      html + '<pre class="mermaid">'+code+'</pre>'
    else
      @defaultCode(code, language)

  renderer
```

----------------------------------------

TITLE: Sending an Async Message in ZenUML Sequence Diagram Using zenuml
DESCRIPTION: Shows an example of an asynchronous (non-blocking) message sent from Alice to Bob. The message simulates fire-and-forget interactions common in event-driven systems.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_5

LANGUAGE: zenuml
CODE:
```
title Async message
Alice->Bob: How are you?
```

----------------------------------------

TITLE: Applying the 'base' Theme to a Git Graph
DESCRIPTION: Illustrates applying the 'base' theme to a complex Mermaid Git Graph using a configuration block. The `theme: 'base'` directive sets the visual style. The example also sets `logLevel: 'debug'`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_21

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
---
      gitGraph
        commit
        branch hotfix
        checkout hotfix
        commit
        branch develop
        checkout develop
        commit id:"ash" tag:"abc"
        branch featureB
        checkout featureB
        commit type:HIGHLIGHT
        checkout main
        checkout hotfix
        commit type:NORMAL
        checkout develop
        commit type:REVERSE
        checkout featureB
        commit
        checkout main
        merge hotfix
        checkout featureB
        commit
        checkout develop
        branch featureA
        commit
        checkout develop
        merge hotfix
        checkout featureA
        commit
        checkout featureB
        commit
        checkout develop
        merge featureA
        branch release
        checkout release
        commit
        checkout main
        commit
        checkout release
        merge main
        checkout develop
        merge release
```

----------------------------------------

TITLE: Scoped CSS for Badges and Dark Mode Images
DESCRIPTION: Applies scoped CSS rules. It styles elements with the class 'badges' to display contained paragraphs using flexbox and adds horizontal margins to links within those paragraphs. Additionally, it applies an invert, hue-rotate, and contrast filter to images within a specific structure when the dark mode theme is active.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/index.md#_snippet_4

LANGUAGE: css
CODE:
```
.badges > p {
    display: flex;
  }

  .badges > p > a {
    margin: 0 0.5rem;
  }

  .dark #VPContent > div > div > div.content > div > main > div > div > img {
    filter: invert(1) hue-rotate(217deg)  contrast(0.72);
  }
```

----------------------------------------

TITLE: Disabling Multi-Color Styling in Mermaid Timeline via Directives
DESCRIPTION: Demonstrates how to override the default multi-color styling for time periods and events in a Mermaid timeline diagram using inline directives within the code block. The `disableMulticolor: true` option forces all elements to use the same color scheme.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_8

LANGUAGE: mermaid-example
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
  timeline:
    disableMulticolor: true
---
    timeline
        title History of Social Media Platform
          2002 : LinkedIn
          2004 : Facebook : Google
          2005 : YouTube
          2006 : Twitter


```

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
  timeline:
    disableMulticolor: true
---
    timeline
        title History of Social Media Platform
          2002 : LinkedIn
          2004 : Facebook : Google
          2005 : YouTube
          2006 : Twitter


```

----------------------------------------

TITLE: Customizing GitGraph Branch Colors with Theme Variables
DESCRIPTION: This snippet shows how to override the default branch colors in a GitGraph diagram using theme variables. It sets the 'git0' to 'git7' theme variables to specific hex color codes within the config section to customize branch colors.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_27

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
      'git0': '#ff0000'
      'git1': '#00ff00'
      'git2': '#0000ff'
      'git3': '#ff00ff'
      'git4': '#00ffff'
      'git5': '#ffff00'
      'git6': '#ff00ff'
      'git7': '#00ffff'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit

```

----------------------------------------

TITLE: MermaidConfig Interface Property: legacyMathML
DESCRIPTION: Specifies whether Mermaid should expect the dependent to include KaTeX stylesheets.  This setting allows Mermaid to fallback on legacy rendering for KaTeX if MathML isn't supported.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_23

LANGUAGE: typescript
CODE:
```
legacyMathML?: `boolean`
```

----------------------------------------

TITLE: GitGraph with Title and Description
DESCRIPTION: This mermaid.js snippet shows a GitGraph diagram incorporating an accessible title and description using the `accTitle` and `accDescr` keywords to improve accessibility.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_9

LANGUAGE: markdown
CODE:
```
```mermaid-example
  gitGraph
      accTitle: My GitGraph Accessibility Title
      accDescr: My GitGraph Accessibility Description

     commit
     commit
     branch develop
     checkout develop
     commit
     commit
     checkout main
     merge develop
     commit
     commit

```
```

----------------------------------------

TITLE: Line Breaks in Actor Names in Mermaid
DESCRIPTION: Illustrates how to include line breaks in Actor names via aliases. No dependencies. Expected output: A sequence diagram with a line break in Alice's name using an alias
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_12

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Alice as Alice<br/>Johnson
    Alice->John: Hello John,<br/>how are you?
    Note over Alice,John: A typical interaction<br/>But now in two lines
```

----------------------------------------

TITLE: MermaidConfig Interface Property: er
DESCRIPTION: Defines the er configuration option. This property configures settings specifically for entity relationship diagrams.  The input is an ErDiagramConfig object.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_11

LANGUAGE: typescript
CODE:
```
er?: `ErDiagramConfig`
```

----------------------------------------

TITLE: Registering Layout Loaders in TypeScript
DESCRIPTION: The function `registerLayoutLoaders` allows for custom layout definitions to be injected into mermaid. It accepts a list of `LayoutLoaderDefinition` objects.  This function is used to extend and customize the layout options available for diagrams.  It doesn't return a value.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
registerLayoutLoaders: (`loaders`) => `void`
```

----------------------------------------

TITLE: Generated HTML for Flowchart with Title and Description
DESCRIPTION: This HTML snippet shows the generated HTML for the Flowchart defined in previous snippet after the mermaid.js library processes it. The resulting HTML includes the title and description.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_3

LANGUAGE: html
CODE:
```
<svg
  aria-labelledby="chart-title-mermaid_382ee221"
  aria-describedby="chart-desc-mermaid_382ee221"
  aria-roledescription="flowchart-v2"
  xmlns="http://www.w3.org/2000/svg"
  width="100%"
  id="mermaid_382ee221"
>
  <title id="chart-title-mermaid_382ee221">Big decisions</title>
  <desc id="chart-desc-mermaid_382ee221">Bob's Burgers process for making big decisions</desc>
</svg>
```

----------------------------------------

TITLE: Selecting Animation Type for an Edge
DESCRIPTION: This snippet demonstrates how to select a specific animation type (fast) for an edge, combining animation enabling and speed setting.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_82

LANGUAGE: Mermaid
CODE:
```
flowchart LR
  A e1@--> B
  e1@{ animation: fast }
```

----------------------------------------

TITLE: Regex for Tick Interval Pattern in JavaScript
DESCRIPTION: Provides the regular expression used to validate the `tickInterval` value format. Describes the pattern for the interval value and unit.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
/^([1-9][0-9]*)(millisecond|second|minute|hour|day|week|month)$/;
```

----------------------------------------

TITLE: Depicting Parallel Execution in ZenUML Sequence Diagrams Using zenuml
DESCRIPTION: Illustrates how to represent parallel actions within a sequence diagram using the 'par' block. Multiple messages within the par block represent concurrent interactions executed simultaneously.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_14

LANGUAGE: zenuml
CODE:
```
par {
    Alice->Bob: Hello guys!
    Alice->John: Hello guys!
}
```

----------------------------------------

TITLE: Creating a Terminal Point (Stadium Shape) in Mermaid Flowchart (mermaid)
DESCRIPTION: This Mermaid code defines a flowchart node as a 'stadium' (pill) shape, labeled 'Terminal point', in a top-down configuration. It highlights representing terminal or endpoint semantics in flowcharts via the stadium node type. Input is a node using shape and label; output is a customized Mermaid diagram. Mermaid must be enabled for custom shapes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A@{ shape: stadium, label: "Terminal point" }
```

----------------------------------------

TITLE: Adding Icons to Mermaid Mindmap Nodes
DESCRIPTION: Demonstrates how to attach icons to mindmap nodes using the `::icon(...)` syntax. The classes for the icon font (e.g., `fa fa-book` for Font Awesome, `mdi mdi-skull-outline` for Material Design Icons) are placed within the parentheses. Requires the icon font resources to be available.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_9

LANGUAGE: Mermaid
CODE:
```
mindmap
    Root
        A
        ::icon(fa fa-book)
        B(B)
        ::icon(mdi mdi-skull-outline)
```

LANGUAGE: Mermaid
CODE:
```
mindmap
    Root
        A
        ::icon(fa fa-book)
        B(B)
        ::icon(mdi mdi-skull-outline)
```

----------------------------------------

TITLE: Declaring Graph Edges with Flexible Spacing and Optional Semicolons - mermaid
DESCRIPTION: This snippet highlights parser enhancements allowing graph edges to be declared with optional semicolon statement terminators and spaces between vertices and links. This improves the readability of Mermaid graph definitions without breaking backward compatibility with earlier syntax. It supports edge labels using this more flexible syntax and is valid starting from Mermaid version 0.2.16.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_60

LANGUAGE: mermaid
CODE:
```
flowchart LR
    A[Hard edge] -->|Link text| B(Round edge)
    B --> C{Decision}
    C -->|One| D[Result one]
    C -->|Two| E[Result two]
```

----------------------------------------

TITLE: Styling Line Curves - Mermaid
DESCRIPTION: This snippet demonstrates how to style the line curve used for lines between items in a Mermaid flowchart using the `curve` property.  Available curve styles include `basis`, `bumpX`, `bumpY`, `cardinal`, `catmullRom`, `linear`, `monotoneX`, `monotoneY`,`natural`, `step`, `stepAfter`, and `stepBefore`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_105

LANGUAGE: Mermaid
CODE:
```
%%{ init: { 'flowchart': { 'curve': 'stepBefore' } } }%%
graph LR
```

----------------------------------------

TITLE: Single-Line Directive Declaration
DESCRIPTION: This example demonstrates how to declare directives in a single line for concise configuration. It sets the `mirrorActors` property to `false` within the `sequence` diagram configuration.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_1

LANGUAGE: JSON
CODE:
```
%%{init: { "sequence": { "mirrorActors":false }}}%%
```

----------------------------------------

TITLE: Generating a Mermaid Mindmap Diagram
DESCRIPTION: This Mermaid diagram illustrates the structure of contributing to the Mermaid.js project, including development, testing, and management tasks within a mindmap. It uses the Mermaid syntax to visualize different areas of contributor activities.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/intro.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
mindmap
  root)Contributing(
    Development
      Solving issues
      Adding new diagrams
      Handling pull requests
      Updating tooling
    Testing
      Verification of fixed issues
      Regression testing in connection with releases
      Testing pull requests
    Management
      Coordinating the work
      Classification and monitoring of incoming issues
```

----------------------------------------

TITLE: Combining init and initialize Directives
DESCRIPTION: This snippet demonstrates combining `init` and `initialize` directives. The last value assigned to a property (e.g., `logLevel`) will take precedence when the directives are merged.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_3

LANGUAGE: Mermaid
CODE:
```
%%{init: { 'logLevel': 'debug', 'theme': 'forest' } }%%
%%{initialize: { 'logLevel': 'fatal', "theme":'dark', 'startOnLoad': true } }%%
...
```

LANGUAGE: Mermaid
CODE:
```
%%{init: { 'logLevel': 'debug', 'theme': 'forest' } }%%
%%{initialize: { 'logLevel': 'fatal', "theme":'dark', 'startOnLoad': true } }%%
...
```

----------------------------------------

TITLE: Configuring Sequence Diagram Margins in Mermaid Using JavaScript
DESCRIPTION: This snippet shows how to set margin and layout related configuration options for Mermaid sequence diagrams using the `mermaid.sequenceConfig` object. Parameters like `diagramMarginX`, `diagramMarginY`, `boxTextMargin`, `noteMargin`, `messageMargin`, and `mirrorActors` control spacing and layout presentation aspects. This should be set before initializing Mermaid or during runtime to customize rendering margins. It requires Mermaid's support for the `sequenceConfig` settings. Inputs are margin values in pixels and boolean flags, output affects final diagram layout spacing and actor orientation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_28

LANGUAGE: javascript
CODE:
```
mermaid.sequenceConfig = {
  diagramMarginX: 50,
  diagramMarginY: 10,
  boxTextMargin: 5,
  noteMargin: 10,
  messageMargin: 35,
  mirrorActors: true
};
```

----------------------------------------

TITLE: Using Markdown Strings in Mermaid.js
DESCRIPTION: Demonstrates the use of Markdown syntax within node and edge labels for rich text formatting like bold and italics. Supports automatic text wrapping and multi-line labels without needing HTML tags, enhancing label presentation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_48

LANGUAGE: mermaid
CODE:
```
config:
  flowchart:
    htmlLabels: false
---
flowchart LR
subgraph "One"
  a("`The **cat**
  in the hat`") -- "edge label" --> b{{"`The **dog** in the hog`"}}
end
subgraph "`**Two**`"
  c("`The **cat**
  in the hat`") -- "`Bold **edge label**`" --> d("The dog in the hog")
end
```

----------------------------------------

TITLE: Defining a Group in Architecture Diagram
DESCRIPTION: This snippet demonstrates the syntax for defining a group within an architecture diagram. It uses the `group` keyword followed by an identifier, an icon name enclosed in parentheses, and a title enclosed in brackets. Groups are used to organize related services. The optional `in` keyword allows nesting groups. The output is a visual representation of the specified group.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_2

LANGUAGE: Mermaid
CODE:
```
group public_api(cloud)[Public API]
```

----------------------------------------

TITLE: MermaidConfig Interface Property: journey
DESCRIPTION: Defines the journey configuration option. This configures settings specific to journey diagrams. It uses a JourneyDiagramConfig object to define diagram-specific settings.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_20

LANGUAGE: typescript
CODE:
```
journey?: `JourneyDiagramConfig`
```

----------------------------------------

TITLE: Selecting Animation Type for Edges
DESCRIPTION: Sets the animation speed (fast or slow) for an edge using `e1@{ animation: fast }`, given the edge has an ID. Equivalent to setting `animate: true` and the animation speed.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_35

LANGUAGE: mermaid
CODE:
```
flowchart LR
  A e1@--> B
  e1@{ animation: fast }
```

----------------------------------------

TITLE: Minimum Length of a Link
DESCRIPTION: This snippet demonstrates how to specify a minimum length for a link by adding extra dashes to the link definition.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_87

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A[Start] --> B{Is it?}
    B -->|Yes| C[OK]
    C --> D[Rethink]
    D --> B
    B ---->|No| E[End]
```

----------------------------------------

TITLE: Hiding Empty Members Box in Mermaid Diagrams
DESCRIPTION: This snippet shows how to configure the `hideEmptyMembersBox` option within the class diagram configuration to hide the empty member box within a class node.  This is done by changing the `hideEmptyMembersBox` value in the class diagram configuration, usually defined in the header of the mermaid diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_30

LANGUAGE: mermaid
CODE:
```
---
  config:
    class:
      hideEmptyMembersBox: true
---
classDiagram
  class Duck
```

----------------------------------------

TITLE: Creating Architecture Diagram - Beta Syntax
DESCRIPTION: This snippet demonstrates the basic syntax for creating an architecture diagram using the `architecture-beta` keyword. It defines a group, services within the group, and edges connecting the services. The diagram visually represents relationships between services. It requires the mermaid-js library to render the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_0

LANGUAGE: Mermaid
CODE:
```
architecture-beta
    group api(cloud)[API]

    service db(database)[Database] in api
    service disk1(disk)[Storage] in api
    service disk2(disk)[Storage] in api
    service server(server)[Server] in api

    db:L -- R:server
    disk1:T -- B:server
    disk2:T -- B:db
```

----------------------------------------

TITLE: Running Mermaid Rendering in TypeScript
DESCRIPTION: The `run` function goes through the HTML document, finds chart definitions, and renders them. The function avoids processing elements that have been processed before by checking for the `data-processed` attribute. This is useful for triggering the rendering process multiple times. The function accepts an optional `RunOptions` object to customize the behavior.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_7

LANGUAGE: TypeScript
CODE:
```
run: (`options`) => `Promise`<`void`>
```

----------------------------------------

TITLE: Creating a Git Graph Diagram in Mermaid
DESCRIPTION: This snippet demonstrates how to create a Git graph diagram using Mermaid syntax. It defines commits, branches, checkouts, merges, and tags to visualize the commit history and branching structure of a Git repository. It shows how to define commit messages and various commands. No dependencies required, Mermaid library needs to be integrated.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_8

LANGUAGE: mermaid
CODE:
```
gitGraph:
    commit "Ashish"
    branch newbranch
    checkout newbranch
    commit id:"1111"
    commit tag:"test"
    checkout main
    commit type: HIGHLIGHT
    commit
    merge newbranch
    commit
    branch b2
    commit
```

----------------------------------------

TITLE: Connecting Multiple Classes to Lollipop Interfaces - Mermaid
DESCRIPTION: Shows how to apply Mermaid's lollipop syntax for multiple classes, connecting them to interfaces using the --() notation. Assumes Mermaid is available. Both classes and interfaces can be declared and linked within the same diagram, clarifying interface implementation relationships for multiple classes at once.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_10

LANGUAGE: mermaid
CODE:
```
classDiagram
  class Class01 {
    int amount
    draw()
  }
  Class01 --() bar
  Class02 --() bar

  foo ()-- Class01

```

----------------------------------------

TITLE: Defining Horizontal Edge Direction in Mermaid Architecture Diagrams
DESCRIPTION: Demonstrates specifying the connection points for an edge between two services using colons and direction indicators (`L`, `R`, `T`, `B`). This example creates a horizontal edge originating from the right (`:R`) of the `db` service and connecting to the left (`:L`) of the `server` service.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
db:R -- L:server
```

----------------------------------------

TITLE: Installing pnpm package manager globally
DESCRIPTION: Installs the pnpm package manager globally using a shell script.  The script downloads and executes the pnpm installation script, making pnpm available for managing project dependencies.  The second command sets the global node version to 20.  Finally, the user may need to reload their shell configuration file.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_2

LANGUAGE: bash
CODE:
```
curl -fsSL https://get.pnpm.io/install.sh | sh -
pnpm env use --global 20
```

----------------------------------------

TITLE: Git Push Example for Documentation Updates - Bash
DESCRIPTION: This Bash snippet demonstrates how to push a local documentation branch (`docs/2910_update-guidelines`) to a remote repository using Git. Git must be configured with the correct remote. The command is typically run before opening a pull request for doc changes. Input is the branch name; output is the branch available on the remote for PR submission.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_30

LANGUAGE: Bash
CODE:
```
git push -u origin docs/2910_update-guidelines
```

----------------------------------------

TITLE: Interactivity with Click Events in Mermaid.js
DESCRIPTION: Describes how to bind JavaScript callbacks or URLs to flowchart nodes via 'click' statements, enabling interactive diagrams. Includes handling of tooltips, callback functions, and external links, respecting security levels.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_50

LANGUAGE: mermaid
CODE:
```
flowchart LR
    A-->B
    B-->C
    C-->D
    click A callback
    click B "https://www.github.com" "This is a tooltip for a link"
    click C call callback()
    click D href "https://www.github.com" "This is a tooltip for a link"
```

----------------------------------------

TITLE: Configuring Flowchart Layout Algorithms
DESCRIPTION: This snippet shows how to use the ELK layout algorithm for a flowchart. The `layout: elk` setting in the frontmatter directs Mermaid to use the ELK layout for more complex structures.  Additional Elk-specific configurations, like mergeEdges and nodePlacementStrategy are supported.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/syntax-reference.md#_snippet_3

LANGUAGE: mermaid-example
CODE:
```
--- 
config:
  layout: elk
  elk:
    mergeEdges: true
    nodePlacementStrategy: LINEAR_SEGMENTS
---
flowchart LR
  A[Start] --> B{Choose Path}
  B -->|Option 1| C[Path 1]
  B -->|Option 2| D[Path 2]
```

----------------------------------------

TITLE: Changing Sequence Diagram Configuration via Directive
DESCRIPTION: A directive example specifically targeting sequence diagram configurations, setting `wrap` to true to enable automatic text wrapping for long messages.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_15

LANGUAGE: mermaid
CODE:
```
%%{init: { "sequence": { "wrap": true} } }%%
```

----------------------------------------

TITLE: Defining a Cloud Node in Mermaid Mindmap
DESCRIPTION: Shows how to define a node with a cloud shape in a Mermaid mindmap using the `id)...(` syntax. The text within the delimiters becomes the node label.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_6

LANGUAGE: Mermaid
CODE:
```
mindmap
    id)I am a cloud(
```

LANGUAGE: Mermaid
CODE:
```
mindmap
    id)I am a cloud(
```

----------------------------------------

TITLE: Setting Block Widths in Columns
DESCRIPTION: This code snippet demonstrates how to set the widths of blocks within a multi-column diagram. Blocks `b` and `c` are assigned a width of 2 columns, while `a` has one column.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
```mermaid-example
block-beta
  columns 3
  a[\"A label\"] b:2 c:2 d
```
```

----------------------------------------

TITLE: Setting Git Graph Orientation to Bottom-to-Top (BT)
DESCRIPTION: This snippet illustrates setting the Mermaid Git Graph orientation to Bottom-to-Top using the `BT:` directive (available from v11.0.0+). Commits flow upwards, and branches are arranged side-by-side.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_18

LANGUAGE: mermaid
CODE:
```
    gitGraph BT:
       commit
       commit
       branch develop
       commit
       commit
       checkout main
       commit
       commit
       merge develop
       commit
       commit
```

----------------------------------------

TITLE: Customizing Commit Colors in GitGraph (Mermaid)
DESCRIPTION: This Mermaid code snippet demonstrates customizing the commit label and background colors within a GitGraph diagram. It utilizes the `commitLabelColor` and `commitLabelBackground` theme variables to override the default values.  The `gitGraph` directive defines the diagram's structure.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_29

LANGUAGE: Mermaid
CODE:
```
```mermaid-example
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    commitLabelColor: '#ff0000'
    commitLabelBackground: '#00ff00'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit

```
```

----------------------------------------

TITLE: Customizing Tag Label Font Size (Mermaid)
DESCRIPTION: This Mermaid snippet modifies the font size of tag labels in a GitGraph using the `tagLabelFontSize` theme variable. It adjusts the font size for better readability. The core functionality uses `gitGraph` to specify the diagram layout.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_34

LANGUAGE: Mermaid
CODE:
```
```mermaid
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    commitLabelColor: '#ff0000'
    commitLabelBackground: '#00ff00'
    tagLabelFontSize: '16px'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit

```
```

----------------------------------------

TITLE: MermaidConfig Interface Property: deterministicIDSeed
DESCRIPTION: This option provides an optional seed for generating deterministic IDs. If `deterministicIds` is set to `true` and this seed isn't provided, a simple number iterator is used.  A string can be used as a static seed.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_8

LANGUAGE: typescript
CODE:
```
deterministicIDSeed?: `string`
```

----------------------------------------

TITLE: MermaidConfig Interface Property: maxEdges
DESCRIPTION: Defines the maximum number of edges that can be drawn in a graph. The input is a number.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_27

LANGUAGE: typescript
CODE:
```
maxEdges?: `number`
```

----------------------------------------

TITLE: MermaidConfig Interface Property: gitGraph
DESCRIPTION: Defines the gitGraph configuration option.  This property allows configuration specific to GitGraph diagrams within Mermaid.  It uses the GitGraphDiagramConfig object to define the settings.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_17

LANGUAGE: typescript
CODE:
```
gitGraph?: `GitGraphDiagramConfig`
```

----------------------------------------

TITLE: GitGraph with Neutral Theme Configuration
DESCRIPTION: This snippet demonstrates how to configure a GitGraph diagram with the neutral theme.  It sets the logLevel to 'debug' and the theme to 'neutral' within the config section. The GitGraph then defines a series of commits, branches, checkouts, and merges to simulate a basic git workflow.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_25

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'neutral'
---
      gitGraph
        commit
        branch hotfix
        checkout hotfix
        commit
        branch develop
        checkout develop
        commit id:"ash" tag:"abc"
        branch featureB
        checkout featureB
        commit type:HIGHLIGHT
        checkout main
        checkout hotfix
        commit type:NORMAL
        checkout develop
        commit type:REVERSE
        checkout featureB
        commit
        checkout main
        merge hotfix
        checkout featureB
        commit
        checkout develop
        branch featureA
        commit
        checkout develop
        merge hotfix
        checkout featureA
        commit
        checkout featureB
        commit
        checkout develop
        merge featureA
        branch release
        checkout release
        commit
        checkout main
        commit
        checkout release
        merge main
        checkout develop
        merge release
```

----------------------------------------

TITLE: Placing Service within a Group
DESCRIPTION: This snippet details the syntax for positioning a service within a group inside an architecture diagram. It uses the `service` keyword with the optional `in` keyword, specifying the parent group. This organizes services within their corresponding groups. The output is a visual representation of the grouped service.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_5

LANGUAGE: Mermaid
CODE:
```
service database1(database)[My Database] in private_api
```

----------------------------------------

TITLE: MermaidConfig Interface Property: altFontFamily
DESCRIPTION: Defines the altFontFamily configuration option, allowing for specification of a different font family. It uses the CSS `font-family` notation to specify a fallback font.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_0

LANGUAGE: typescript
CODE:
```
altFontFamily?: `string`
```

----------------------------------------

TITLE: Defining Try/Catch/Finally (Break) in ZenUML
DESCRIPTION: This snippet demonstrates how to indicate a stop of the sequence within the flow (usually used to model exceptions) using `try/catch/finally` notation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_14

LANGUAGE: mermaid
CODE:
```
zenuml
    try {
      Consumer->API: Book something
      API->BookingService: Start booking process
    } catch {
      API->Consumer: show failure
    } finally {
      API->BookingService: rollback status
    }
```

----------------------------------------

TITLE: Creating an Alternate Trapezoid Node in Mermaid
DESCRIPTION: This snippet shows how to create an alternative trapezoid shape.  The text is enclosed in `[\ ... /]`
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_17

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    B[\Go shopping/]
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Trapezoid Base Bottom
DESCRIPTION: This snippet demonstrates using the shape keyword to create a trapezoid node with the base at the bottom in a Mermaid flowchart. Represents a priority action.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_31

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: trap-b, label: "Priority action" }
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Trapezoid Base Top
DESCRIPTION: This snippet creates a trapezoid node with the base at the top, commonly used to depict manual operations, using the shape keyword in a Mermaid flowchart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_32

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: trap-t, label: "Manual operation" }
```

----------------------------------------

TITLE: State Diagram with Spaces in State Names
DESCRIPTION: Demonstrates how to include spaces in state names by defining the state with an ID first and then referencing that ID in transitions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_23

LANGUAGE: mermaid
CODE:
```
stateDiagram
    classDef yourState font-style:italic,font-weight:bold,fill:white

    yswsii: Your state with spaces in it
    [*] --> yswsii:::yourState
    [*] --> SomeOtherState
    SomeOtherState --> YetAnotherState
    yswsii --> YetAnotherState
    YetAnotherState --> [*]
```

----------------------------------------

TITLE: Quadrant Chart in Mermaid
DESCRIPTION: Defines a four-quadrant chart evaluating campaigns based on reach and engagement. Campaigns are plotted with their respective coordinates, and quadrants are labeled to suggest strategic actions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_11

LANGUAGE: mermaid
CODE:
```
quadrantChart
  title Reach and engagement of campaigns
  x-axis Low Reach --> High Reach
  y-axis Low Engagement --> High Engagement
  quadrant-1 We should expand
  quadrant-2 Need to promote
  quadrant-3 Re-evaluate
  quadrant-4 May be improved
  Campaign A: [0.3, 0.6]
  Campaign B: [0.45, 0.23]
  Campaign C: [0.57, 0.69]
  Campaign D: [0.78, 0.34]
  Campaign E: [0.40, 0.34]
  Campaign F: [0.35, 0.78]
```

----------------------------------------

TITLE: Default Shape in Mindmap
DESCRIPTION: This code snippet represents the default shape of a node within a mindmap diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_9

LANGUAGE: mermaid
CODE:
```
mindmap
    I am the default shape
```

----------------------------------------

TITLE: Customizing Tag Label Font Size (Mermaid)
DESCRIPTION: This Mermaid snippet modifies the font size of tag labels in a GitGraph using the `tagLabelFontSize` theme variable. It adjusts the font size for better readability. The core functionality uses `gitGraph` to specify the diagram layout.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_33

LANGUAGE: Mermaid
CODE:
```
```mermaid-example
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    commitLabelColor: '#ff0000'
    commitLabelBackground: '#00ff00'
    tagLabelFontSize: '16px'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit

```
```

----------------------------------------

TITLE: Customizing Commit Colors in GitGraph (Mermaid)
DESCRIPTION: This Mermaid code snippet demonstrates customizing the commit label and background colors within a GitGraph diagram. It utilizes the `commitLabelColor` and `commitLabelBackground` theme variables to override the default values.  The `gitGraph` directive defines the diagram's structure.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_30

LANGUAGE: Mermaid
CODE:
```
```mermaid
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    commitLabelColor: '#ff0000'
    commitLabelBackground: '#00ff00'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit

```
```

----------------------------------------

TITLE: Customized Markdown Renderer with Mermaid Support in CoffeeScript
DESCRIPTION: This CoffeeScript code defines a custom renderer for the 'marked' library, which injects Mermaid scripts only once and wraps Mermaid code in <pre class='mermaid'> tags. It enhances Markdown rendering to support Mermaid diagrams dynamically, depending on the code language, and requires the Mermaid library path specified in options.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_15

LANGUAGE: CoffeeScript
CODE:
```
marked = require 'marked'

module.exports = (options) ->
  hasMermaid = false
  renderer = new marked.Renderer()
  renderer.defaultCode = renderer.code
  renderer.code = (code, language) ->
    if language is 'mermaid'
      html = ''
      if not hasMermaid
        hasMermaid = true
        html += '<script src="'+ options.mermaidPath +'"></script>'
      html + '<pre class="mermaid">'+code+'</pre>'
    else
      @defaultCode(code, language)

  renderer
```

----------------------------------------

TITLE: MermaidConfig Interface Property: layout
DESCRIPTION: Defines which layout algorithm is to be used for rendering the diagram. The input is a string and selects a layout from the available options.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_22

LANGUAGE: typescript
CODE:
```
layout?: `string`
```

----------------------------------------

TITLE: Installing Icon Pack via npm
DESCRIPTION: This command installs the Logos icon pack from the Iconify library using npm. This is a prerequisite for the bundler-based approaches shown in the other examples.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/icons.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @iconify-json/logos@1
```

----------------------------------------

TITLE: Making Docker Helper Script Executable
DESCRIPTION: Grants execute permissions to the `./run` bash script using `chmod +x`. This script provides aliases for `docker compose` commands for easier development within Docker.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_6

LANGUAGE: bash
CODE:
```
chmod +x run
```

----------------------------------------

TITLE: Rendering Unicode Text as Entity Name in Mermaid ER Diagram
DESCRIPTION: Shows that entity names in Mermaid ER diagrams can contain Unicode characters, allowing expressive or domain-specific symbols. This snippet demonstrates an entity named "This ❤ Unicode", emphasizing Mermaid's support for Unicode in entity identifiers.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
erDiagram
    "This ❤ Unicode"
```

----------------------------------------

TITLE: Using Markdown Formatting Inside Entity Names in Mermaid ER Diagram
DESCRIPTION: Exhibits the ability to include Markdown formatting (e.g., bold, italic) inside entity names in Mermaid ER diagrams. This snippet renders the entity label "This **is** _Markdown_" applying Markdown styles to the text, supporting richer labels in diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
erDiagram
    "This **is** _Markdown_"
```

----------------------------------------

TITLE: Customizing Radar Diagram Appearance - Mermaid
DESCRIPTION: Provides a Mermaid code block that configures diagram and theme variables, adjusting axis scale, curve tension, color scales, and curve opacity. It defines a radar chart with five axes and three curves, illustrating how to fine-tune rendering and appearance within Mermaid's radar-beta environment. Expected input is configuration and data; output is a styled radar chart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
---
config:
  radar:
    axisScaleFactor: 0.25
    curveTension: 0.1
  theme: base
  themeVariables:
    cScale0: "#FF0000"
    cScale1: "#00FF00"
    cScale2: "#0000FF"
    radar:
      curveOpacity: 0
---
radar-beta
  axis A, B, C, D, E
  curve c1{1,2,3,4,5}
  curve c2{5,4,3,2,1}
  curve c3{3,3,3,3,3}
```

----------------------------------------

TITLE: Formatting Markdown Text in Mermaid Node
DESCRIPTION: This snippet demonstrates how to format text within a Mermaid node using Markdown syntax. The Markdown text must be enclosed in backticks `` ` `` within double quotes `""`.  The `htmlLabels` config is set to `false` to render Markdown.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_3

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    markdown["`This **is** _Markdown_`"]
    newLines["`Line1
    Line 2
    Line 3`"]
    markdown --> newLines
```

----------------------------------------

TITLE: MermaidConfig Interface Property: arrowMarkerAbsolute
DESCRIPTION: This configuration option controls whether arrow markers in the generated HTML code use absolute paths or anchors. It's particularly relevant when using a base tag for the HTML document. The input is a boolean.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_2

LANGUAGE: typescript
CODE:
```
arrowMarkerAbsolute?: `boolean`
```

----------------------------------------

TITLE: MermaidConfig Interface Property: gantt
DESCRIPTION: Defines the gantt configuration option.  This property is used to configure settings specific to Gantt diagrams within Mermaid.  The input is a GanttDiagramConfig object.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_16

LANGUAGE: typescript
CODE:
```
gantt?: `GanttDiagramConfig`
```

----------------------------------------

TITLE: MermaidConfig Interface Property: block
DESCRIPTION: Defines the block configuration option. This property configures settings specifically for block diagrams within Mermaid. It utilizes a BlockDiagramConfig object to specify diagram-specific configurations.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_3

LANGUAGE: typescript
CODE:
```
block?: `BlockDiagramConfig`
```

----------------------------------------

TITLE: Creating a Thick Link
DESCRIPTION: This snippet creates a thick link between two nodes, which can visually emphasize the importance of the connection.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_73

LANGUAGE: Mermaid
CODE:
```
flowchart LR
   A ==> B
```

----------------------------------------

TITLE: Attaching IDs to Edges
DESCRIPTION: Assigns an ID to an edge using the syntax `A e1@--> B`. This is the first step towards customizing edges.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_33

LANGUAGE: mermaid
CODE:
```
flowchart LR
  A e1@--> B
```

----------------------------------------

TITLE: Result of Combined Directives
DESCRIPTION: This JSON shows the merged result of combining multiple init and initialize directives. Notice how the last value provided for `logLevel` is the one that is ultimately used.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "logLevel": "fatal",
  "theme": "dark",
  "startOnLoad": true
}
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Manual File
DESCRIPTION: This snippet defines Manual File node.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_56

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: flip-tri, label: "Manual file" }
```

----------------------------------------

TITLE: Creating a Stadium-Shaped Node in Mermaid Flowchart
DESCRIPTION: This snippet demonstrates how to create a stadium-shaped node in a Mermaid flowchart. The text is enclosed in single square brackets `[]`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_7

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    id1([This is the text in the box])
```

----------------------------------------

TITLE: Customizing Main Branch Name in Mermaid gitGraph (mermaid)
DESCRIPTION: This snippet customizes the default name of the main branch in a Mermaid gitGraph diagram using the 'mainBranchName' configuration directive. By setting 'mainBranchName: "MetroLine1"', the primary branch is renamed accordingly. The setup requires only a Mermaid interpreter that recognizes 'mainBranchName'. Inputs include commits and merges across branches. The output is a git branch diagram with the main branch labeled as specified. Renaming is often used to represent creative workflows, such as mapping version control to subway lines or thematic branch naming.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_14

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
  gitGraph:
    showBranches: true
    showCommitLabel: true
    mainBranchName: 'MetroLine1'
---
      gitGraph
        commit id:"NewYork"
        commit id:"Dallas"
        branch MetroLine2
        commit id:"LosAngeles"
        commit id:"Chicago"
        commit id:"Houston"
        branch MetroLine3
        commit id:"Phoenix"
        commit type: HIGHLIGHT id:"Denver"
        commit id:"Boston"
        checkout MetroLine1
        commit id:"Atlanta"
        merge MetroLine3
        commit id:"Miami"
        commit id:"Washington"
        merge MetroLine2 tag:"MY JUNCTION"
        commit id:"Boston"
        commit id:"Detroit"
        commit type:REVERSE id:"SanFrancisco"
```

----------------------------------------

TITLE: Creating an Invisible Link
DESCRIPTION: This snippet creates an invisible link between two nodes, which can be used to alter the default positioning of nodes in the flowchart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_75

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    A ~~~ B
```

----------------------------------------

TITLE: MermaidConfig Interface Property: markdownAutoWrap
DESCRIPTION: Defines the markdownAutoWrap configuration option. This controls if automatic wrapping for markdown text in labels occurs. The input is a boolean.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_26

LANGUAGE: typescript
CODE:
```
markdownAutoWrap?: `boolean`
```

----------------------------------------

TITLE: Using Comments in Mermaid Class Diagrams - Mermaid-Example
DESCRIPTION: Provides a sample Mermaid class diagram code with commented lines included, serving as documentation or explanation for future editors without affecting diagram output. Only Mermaid syntax is required, and comments are prefixed with %% for parser exclusion.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_21

LANGUAGE: mermaid
CODE:
```
classDiagram
%% This whole line is a comment classDiagram class Shape <<interface>>
class Shape{
    <<interface>>
    noOfVertices
    draw()
}

```

----------------------------------------

TITLE: Configuring Rotated Commit Labels in Mermaid gitGraph (mermaid)
DESCRIPTION: This snippet configures a Mermaid gitGraph diagram to use rotated commit labels, placing them below the commit circles at a 45-degree angle for improved readability, especially with long labels. It utilizes the config directive 'rotateCommitLabel: true', which is the default behavior. No external dependencies are required; the only prerequisite is a Mermaid-compatible renderer supporting directives. Key inputs include commit identifiers and branch operations. Outputs a git branch diagram with rotated commit labels. It is best used for repositories with lengthy commit messages that may overlap when displayed horizontally.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_11

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
  gitGraph:
    rotateCommitLabel: true
---
gitGraph
  commit id: "feat(api): ..."
  commit id: "a"
  commit id: "b"
  commit id: "fix(client): .extra long label.."
  branch c2
  commit id: "feat(modules): ..."
  commit id: "test(client): ..."
  checkout main
  commit id: "fix(api): ..."
  commit id: "ci: ..."
  branch b1
  commit
  branch b2
  commit
```

----------------------------------------

TITLE: Sankey Diagram with Empty Lines
DESCRIPTION: This snippet demonstrates that empty lines are allowed for visual purposes in the data section of a Sankey diagram. The data section uses the `sankey-beta` keyword and then follows it with the data. This allows the user to add spacing.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_4

LANGUAGE: Mermaid
CODE:
```
```mermaid-example
sankey-beta

Bio-conversion,Losses,26.862

Bio-conversion,Solid,280.322

Bio-conversion,Gas,81.144
```
```

----------------------------------------

TITLE: Illustrating Documentation Workflow (Mermaid)
DESCRIPTION: Provides a Mermaid flowchart illustrating the recommended workflow for updating documentation. It shows that edits should be made in the source directory (`packages/mermaid/src/docs`), which are then automatically processed to generate the `/docs` folder for publication.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_22

LANGUAGE: mermaid
CODE:
```
flowchart LR
  classDef default fill:#fff,color:black,stroke:black

  source["Edit /packages/mermaid/src/docs"] -- automatic processing--> published["View /docs which will be published on Official Website"]
```

----------------------------------------

TITLE: Basic Mermaid.js Flowchart Example
DESCRIPTION: Displays a simple flowchart with subgraphs, illustrating connections and hierarchy using Mermaid.js syntax and the flowchart TB direction. Demonstrates node and subgraph structure for visualizing process flows.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_44

LANGUAGE: mermaid
CODE:
```
flowchart TB
    c1-->a2
    subgraph one
    a1-->a2
    end
    subgraph two
    b1-->b2
    end
    subgraph three
    c1-->c2
    end
    one --> two
    three --> two
    two --> c2
```

----------------------------------------

TITLE: Visualizing Branch Naming Convention Components using Mermaid
DESCRIPTION: A Mermaid flowchart diagram breaking down the components of the Git branch naming convention, showing the allowed types, separators, issue number, and short description examples.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_15

LANGUAGE: mermaid
CODE:
```
flowchart LR
  feature --> slash
  bug --> slash
  chore --> slash
  docs --> slash
  slash --> 2945 --> underscore
  slash --> 1123 --> underscore
  underscore --> short_description_1
  underscore --> short_description_2

  underscore["_"]
  slash["/"]

  short_description_1["state-diagram-new-arrow-florbs"]
  short_description_2["fix_random_ugly_red_text"]
```

----------------------------------------

TITLE: Using Markdown Formatting in Mermaid Requirement Diagrams
DESCRIPTION: This example shows how to apply Markdown formatting within requirement names and text fields. The requirement name '__test_req__' uses underscores (often interpreted as bold/italic in Markdown contexts, though Mermaid might render it literally depending on configuration) and the text field uses explicit '*' for italics and '**' for bold.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/requirementDiagram.md#_snippet_1

LANGUAGE: Mermaid
CODE:
```
requirementDiagram

requirement "__test_req__" {
    id: 1
    text: "*italicized text* **bold text**"
    risk: high
    verifymethod: test
}
```

----------------------------------------

TITLE: Using the wrap Directive for Text Wrapping (Mermaid)
DESCRIPTION: Shows the syntax for the non-argument `wrap` directive (`%%{wrap}%%`) used in Mermaid diagrams. This directive enables automatic text wrapping, currently only deployable for sequence diagrams, while respecting manual line breaks using `<br>` tags. Requires Mermaid.js v8.6.0+.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/8.6.0_docs.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
%%{wrap}%%
```

----------------------------------------

TITLE: MermaidConfig Interface Property: kanban
DESCRIPTION: Defines the kanban configuration option. This property configures settings specific to Kanban diagrams. It uses a KanbanDiagramConfig object to define configuration settings.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_21

LANGUAGE: typescript
CODE:
```
kanban?: `KanbanDiagramConfig`
```

----------------------------------------

TITLE: Customizing Tag Colors (Mermaid)
DESCRIPTION: This Mermaid code changes tag colors in a GitGraph diagram using `tagLabelColor`, `tagLabelBackground` and `tagLabelBorder` variables.  The snippet overrides default tag colors for visual customization. The diagram uses `gitGraph` syntax to define the layout.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_36

LANGUAGE: Mermaid
CODE:
```
```mermaid
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    tagLabelColor: '#ff0000'
    tagLabelBackground: '#00ff00'
    tagLabelBorder: '#0000ff'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit

```
```

----------------------------------------

TITLE: Hiding Commit Labels in Mermaid gitGraph (mermaid)
DESCRIPTION: This snippet demonstrates disabling the display of commit labels in a Mermaid gitGraph by setting 'showCommitLabel: false' within the configuration directive. Optionally, branch rendering can also be suppressed with 'showBranches: false'. No external libraries are required. Inputs consist of standard gitGraph commands for commits, branching, merging, and checkouts. Output is a branch diagram without commit labels, which clarifies the visualization when commit metadata is unnecessary or distracting.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_13

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
  gitGraph:
    showBranches: false
    showCommitLabel: false
---
      gitGraph
        commit
        branch hotfix
        checkout hotfix
        commit
        branch develop
        checkout develop
        commit id:"ash"
        branch featureB
        checkout featureB
        commit type:HIGHLIGHT
        checkout main
        checkout hotfix
        commit type:NORMAL
        checkout develop
        commit type:REVERSE
        checkout featureB
        commit
        checkout main
        merge hotfix
        checkout featureB
        commit
        checkout develop
        branch featureA
        commit
        checkout develop
        merge hotfix
        checkout featureA
        commit
        checkout featureB
        commit
        checkout develop
        merge featureA
        branch release
        checkout release
        commit
        checkout main
        commit
        checkout release
        merge main
        checkout develop
        merge release
```

----------------------------------------

TITLE: Applying Direct Styling in Mermaid Requirement Diagrams
DESCRIPTION: Demonstrates how to apply direct CSS styling to specific requirements and elements using the 'style' keyword followed by the node name and CSS properties (e.g., fill, stroke, color).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/requirementDiagram.md#_snippet_4

LANGUAGE: Mermaid
CODE:
```
requirementDiagram

requirement test_req {
    id: 1
    text: styling example
    risk: low
    verifymethod: test
}

element test_entity {
    type: simulation
}

style test_req fill:#ffa,stroke:#000, color: green
style test_entity fill:#f9f,stroke:#333, color: blue
```

----------------------------------------

TITLE: Configuring Mermaid Timeline via JavaScript Initialize
DESCRIPTION: Provides an example of how to configure the Mermaid timeline renderer globally using the `mermaid.initialize` function in JavaScript. It shows how to set options like theme, startOnLoad, logLevel, and specific timeline options such as `disableMulticolor`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_7

LANGUAGE: javascript
CODE:
```
mermaid.initialize({
        theme: 'base',
        startOnLoad: true,
        logLevel: 0,
        timeline: {
          disableMulticolor: false,
        },
        ...
        ...
```

----------------------------------------

TITLE: Full Mermaid.js Flowchart Clone Example
DESCRIPTION: Replicates the basic flowchart as a standalone example, affirming syntax correctness and visual representation consistency for diagrams created with Mermaid.js.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_45

LANGUAGE: mermaid
CODE:
```
flowchart TB
    c1-->a2
    subgraph one
    a1-->a2
    end
    subgraph two
    b1-->b2
    end
    subgraph three
    c1-->c2
    end
    one --> two
    three --> two
    two --> c2
```

----------------------------------------

TITLE: Animating Edges Using classDef Statements
DESCRIPTION: Applies animation to an edge by assigning a class to it and defining the animation properties in a `classDef` statement, e.g., `class e1 animate`.  Requires escaping commas in style definitions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_36

LANGUAGE: mermaid
CODE:
```
flowchart LR
  A e1@--> B
  classDef animate stroke-dasharray: 9,5,stroke-dashoffset: 900,animation: dash 25s linear infinite;
  class e1 animate
```

----------------------------------------

TITLE: Documentation Update Workflow Example (Mermaid)
DESCRIPTION: Another instance of the Mermaid flowchart illustrating the documentation update workflow. It reinforces the concept of editing source files in `packages/mermaid/src/docs` which are then automatically processed into the `/docs` directory.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_23

LANGUAGE: mermaid
CODE:
```
flowchart LR
  classDef default fill:#fff,color:black,stroke:black

  source["Edit /packages/mermaid/src/docs"] -- automatic processing--> published["View /docs which will be published on Official Website"]
```

----------------------------------------

TITLE: Wrap Directive Example
DESCRIPTION: This example illustrates the usage of the wrap directive in Mermaid. The wrap directive enables text wrapping in sequence diagrams. It is a non-argument directive and is invoked using `%%{wrap}%%`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/8.6.0_docs.md#_snippet_3

LANGUAGE: Mermaid
CODE:
```
%%{wrap}%%
```

----------------------------------------

TITLE: MermaidConfig Interface Property: mindmap
DESCRIPTION: Defines the mindmap configuration option. This property configures settings specific to mindmap diagrams within Mermaid. It utilizes the MindmapDiagramConfig object to define configuration settings.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_29

LANGUAGE: typescript
CODE:
```
mindmap?: `MindmapDiagramConfig`
```

----------------------------------------

TITLE: Wrapping Long Text and Using Break Tag in Mermaid Timeline
DESCRIPTION: Shows how Mermaid automatically wraps long text within time periods and events. It also demonstrates the use of the HTML break tag (`<br>`) to manually force a line break for better readability within diagram elements.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_4

LANGUAGE: mermaid-example
CODE:
```
timeline
        title England's History Timeline
        section Stone Age
          7600 BC : Britain's oldest known house was built in Orkney, Scotland
          6000 BC : Sea levels rise and Britain becomes an island.<br> The people who live here are hunter-gatherers.
        section Bronze Age
          2300 BC : People arrive from Europe and settle in Britain. <br>They bring farming and metalworking.
                  : New styles of pottery and ways of burying the dead appear.
          2200 BC : The last major building works are completed at Stonehenge.<br> People now bury their dead in stone circles.
                  : The first metal objects are made in Britain.Some other nice things happen. it is a good time to be alive.

```

LANGUAGE: mermaid
CODE:
```
timeline
        title England's History Timeline
        section Stone Age
          7600 BC : Britain's oldest known house was built in Orkney, Scotland
          6000 BC : Sea levels rise and Britain becomes an island.<br> The people who live here are hunter-gatherers.
        section Bronze Age
          2300 BC : People arrive from Europe and settle in Britain. <br>They bring farming and metalworking.
                  : New styles of pottery and ways of burying the dead appear.
          2200 BC : The last major building works are completed at Stonehenge.<br> People now bury their dead in stone circles.
                  : The first metal objects are made in Britain.Some other nice things happen. it is a good time to be alive.

```

----------------------------------------

TITLE: UDP Packet Diagram Example in Mermaid
DESCRIPTION: An example showing how to represent a UDP packet structure using Mermaid's packet diagram syntax. Demonstrates the simpler header structure of UDP compared to TCP.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/packet.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
packet-beta
title UDP Packet
0-15: "Source Port"
16-31: "Destination Port"
32-47: "Length"
48-63: "Checksum"
64-95: "Data (variable length)"
```

----------------------------------------

TITLE: Escaping Double Quotes in Node Labels
DESCRIPTION: This code snippet shows how to escape double quotes when defining a node label within a Sankey diagram in Mermaid. It uses `sankey-beta` for diagram definition. The correct escaping of the double quotes is essential in preventing parsing errors and correctly displaying node labels containing double quotes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_9

LANGUAGE: Mermaid
CODE:
```
```mermaid
sankey-beta

Pumped heat,"Heating and cooling, ""homes""",193.026
Pumped heat,"Heating and cooling, ""commercial""",70.672
```
```

----------------------------------------

TITLE: Integrating Mermaid Mindmap (Post 9.4.0)
DESCRIPTION: Shows the simplified method for including Mermaid with integrated Mindmap support (lazy-loaded) in a web page using HTML script tags and module imports for versions 9.4.0 and later.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_14

LANGUAGE: HTML
CODE:
```
<script type="module">
  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
</script>
```

----------------------------------------

TITLE: Setting Mermaid Flowchart Width using JavaScript API
DESCRIPTION: Demonstrates how to adjust the rendered width of flowcharts programmatically by setting the `mermaid.flowchartConfig` object in JavaScript. This example sets the width to 100%. This configuration can also be applied via a JSON file using the Mermaid CLI.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_121

LANGUAGE: javascript
CODE:
```
mermaid.flowchartConfig = {
    width: "100%"
}
```

----------------------------------------

TITLE: Including Font Awesome CSS via CDN in HTML
DESCRIPTION: Adds support for Font Awesome icons in Mermaid diagrams by linking the required CSS file from a CDN within the HTML document's `<head>` section. This example uses version 6.5.1.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_116

LANGUAGE: html
CODE:
```
<link
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
  rel="stylesheet"
/>
```

----------------------------------------

TITLE: Running Project Tests using pnpm (Docker Setup)
DESCRIPTION: Executes the project's test suite within the Docker environment using the `./run` helper script and `pnpm test`. This verifies the setup within the containerized environment before making changes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_9

LANGUAGE: bash
CODE:
```
./run pnpm test
```

----------------------------------------

TITLE: Adding Comments to ZenUML Sequence Diagrams Using zenuml
DESCRIPTION: Illustrates use of double slash '//' syntax to add comments above messages or fragments. Markdown formatting is supported in comments, but comments on participants are ignored and not rendered.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_10

LANGUAGE: zenuml
CODE:
```
// a comment on a participant will not be rendered
BookService
// a comment on a message.
// **Markdown** is supported.
BookService.getBook()
```

----------------------------------------

TITLE: Starting Cypress Test Runner in Docker - Bash
DESCRIPTION: This Bash command executes the Cypress test runner within a Docker container, mounting the current project folder. Requires Docker and the `run` helper script configured. Expected to be used after the dev server is live in Docker. Provides a consistent environment for running E2E tests with Cypress.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_24

LANGUAGE: Bash
CODE:
```
./run pnpm cypress:open --project .
```

----------------------------------------

TITLE: Using opt Fragment for Optional Behavior in ZenUML Using zenuml
DESCRIPTION: Demonstrates an 'opt' fragment that encapsulates optional messages within a sequence diagram. Actions inside the opt block represent behavior executed only under certain conditions, enhancing clarity of optional flows.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_13

LANGUAGE: zenuml
CODE:
```
Alice->Bob: Hello Bob, how are you?
Bob->Alice: Not so good :(
opt {
  Bob->Alice: Thanks for asking
}
```

----------------------------------------

TITLE: Creating a Multi-Column Block Diagram in Mermaid
DESCRIPTION: Illustrates how to organize blocks into multiple columns using the 'columns' directive. This example creates a diagram with three columns containing four blocks, where the fourth block appears in a second row.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
block-beta
  columns 3
  a b c d
```

----------------------------------------

TITLE: Mindmap Syntax Example
DESCRIPTION: This snippet provides a simple example of mindmap syntax, showcasing the hierarchical structure using indentation to represent parent-child relationships.  It shows how the diagram structure is derived from a text outline.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
mindmap
    Root
        A
            B
            C
```

----------------------------------------

TITLE: Entity Relationship Diagram (Experimental) in Mermaid
DESCRIPTION: Depicts entities and relationships in a database schema, including one-to-many and many-to-many relationships, using Mermaid ER diagram syntax. Note that this feature is experimental.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
erDiagram
    CUSTOMER ||--o{ ORDER : places
    ORDER ||--|{ LINE-ITEM : contains
    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses
```

----------------------------------------

TITLE: Initializing Mermaid with Configuration and Selector
DESCRIPTION: This JavaScript code shows how to initialize Mermaid with a configuration object and a CSS selector.  It initializes Mermaid with a `noteMargin` and targets elements with the class `.someOtherClass`. Requires mermaid library to be imported.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_9

LANGUAGE: javascript
CODE:
```
mermaid.init({ noteMargin: 10 }, '.someOtherClass');
```

----------------------------------------

TITLE: Creating a Simple Block Diagram in Mermaid
DESCRIPTION: Shows the most basic form of a block diagram with three blocks labeled 'a', 'b', and 'c' arranged horizontally. This example demonstrates the minimal syntax required to create a block diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
block-beta
  a b c
```

----------------------------------------

TITLE: Using Directives with Mermaid Graph
DESCRIPTION: This example demonstrates how to apply directives to a Mermaid graph to change the theme and log level.  It sets the `logLevel` to `debug` and the `theme` to `dark` for a rendered mermaid diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_2

LANGUAGE: Mermaid
CODE:
```
%%{init: { 'logLevel': 'debug', 'theme': 'dark' } }%%
graph LR
A-->B
```

LANGUAGE: Mermaid
CODE:
```
%%{init: { 'logLevel': 'debug', 'theme': 'dark' } }%%
graph LR
A-->B
```

----------------------------------------

TITLE: Starting Local Development Server using pnpm (Host Setup)
DESCRIPTION: Starts the local development server using `pnpm run dev` in the host environment. The server typically watches for changes and rebuilds automatically, accessible at http://localhost:9000.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_18

LANGUAGE: bash
CODE:
```
pnpm run dev
```

----------------------------------------

TITLE: Configuring Packet Diagram Appearance in Mermaid
DESCRIPTION: Demonstrates configuring a Mermaid Packet Diagram using YAML frontmatter. This example sets `showBits` to true under the `packet` configuration key and attempts to set a theme variable `startByteColor` (though theme variables are noted as potentially buggy in the surrounding text). The diagram itself shows a simplified packet structure.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/packet.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
---
config:
  packet:
    showBits: true
  themeVariables:
    packet:
      startByteColor: red
---
packet-beta
0-15: "Source Port"
16-31: "Destination Port"
32-63: "Sequence Number"
```

----------------------------------------

TITLE: Installing Packages (Host)
DESCRIPTION: This command installs all the necessary packages and dependencies required for the Mermaid project using pnpm. This command is executed in the host development environment.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_4

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Checking out the develop branch
DESCRIPTION: Switches the local Git branch to `develop`, ensuring that subsequent changes are based on the latest development version.  `git fetch` or `git pull` are then used to update the local branch with the remote.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_9

LANGUAGE: bash
CODE:
```
git checkout develop
git fetch # or `git pull`
```

----------------------------------------

TITLE: Generated HTML for flowchart with multi-line accessibility in Mermaid
DESCRIPTION: This HTML code is generated from the Mermaid code snippet showing accessibility implementation of a flowchart using accTitle and a multi-line accDescr. The SVG element's `aria-labelledby` and `aria-describedby` attributes are linked to the `<title>` and `<desc>` elements containing the accessible title and description, respectively.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_5

LANGUAGE: html
CODE:
```
<svg
  aria-labelledby="chart-title-mermaid_382ee221"
  aria-describedby="chart-desc-mermaid_382ee221"
  aria-roledescription="flowchart-v2"
  xmlns="http://www.w3.org/2000/svg"
  width="100%"
  id="mermaid_382ee221"
>
  <title id="chart-title-mermaid_382ee221">Big decisions</title>
  <desc id="chart-desc-mermaid_382ee221">
    The official Bob's Burgers corporate processes that are used for making very, very big
    decisions. This is actually a very simple flow: identify the big decision and then make the big
    decision.
  </desc>
</svg>
```

----------------------------------------

TITLE: Setting Diagram Direction
DESCRIPTION: Specifies the rendering direction of the entire diagram or nested states using the 'direction' statement to control layout (e.g., LR for left-to-right).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_17

LANGUAGE: mermaid
CODE:
```
stateDiagram
    direction LR
    [*] --> A
    A --> B
    B --> C
    state B {
      direction LR
      a --> b
    }
    B --> D
```

----------------------------------------

TITLE: Configuring Auto-Wrapping of Markdown Labels
DESCRIPTION: Explains how to disable automatic line wrapping in markdown labels by setting 'markdownAutoWrap: false' in Mermaid configuration, providing control over label text flow.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_49

LANGUAGE: mermaid
CODE:
```
---
config:
  markdownAutoWrap: false
---
graph LR
```

----------------------------------------

TITLE: Multi-Node Linking in a Line
DESCRIPTION: This snippet demonstrates the ability to concisely express dependencies by linking multiple nodes to multiple others on a single line, using `A & B--> C & D` syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_31

LANGUAGE: mermaid
CODE:
```
flowchart TB
    A & B--> C & D
```

----------------------------------------

TITLE: Changing FontFamily via Directive
DESCRIPTION: This code snippet demonstrates changing the font family of a Mermaid diagram using a directive. The font family is set to `Trebuchet MS, Verdana, Arial, Sans-Serif`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_7

LANGUAGE: JSON
CODE:
```
%%{init: { "fontFamily": "Trebuchet MS, Verdana, Arial, Sans-Serif" } }%%
```

----------------------------------------

TITLE: Defining Loops in ZenUML
DESCRIPTION: This snippet demonstrates how to express loops in a ZenUML diagram using `while` notation. Other loop notations include `for`, `forEach`, `foreach`, and `loop`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_10

LANGUAGE: mermaid
CODE:
```
zenuml
    Alice->John: Hello John, how are you?
    while(true) {
      John->Alice: Great!
    }
```

----------------------------------------

TITLE: Customizing Commit Label Font Size (Mermaid)
DESCRIPTION: This Mermaid code snippet demonstrates changing the font size of commit labels in a GitGraph diagram using the `commitLabelFontSize` theme variable.  It overrides the default font size value. The GitGraph syntax defines the diagram elements.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_31

LANGUAGE: Mermaid
CODE:
```
```mermaid-example
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    commitLabelColor: '#ff0000'
    commitLabelBackground: '#00ff00'
    commitLabelFontSize: '16px'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit

```
```

----------------------------------------

TITLE: Creating a Link with an Arrow Head
DESCRIPTION: This snippet creates a simple link with an arrowhead between two nodes in a flowchart.  It uses the basic `-->` syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_21

LANGUAGE: mermaid
CODE:
```
flowchart LR
    A-->B
```

----------------------------------------

TITLE: Turning Animation On for Edges
DESCRIPTION: Enables animation for an edge by defining the edge's properties such as `e1@{ animate: true }`, given the edge has an ID.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_34

LANGUAGE: mermaid
CODE:
```
flowchart LR
  A e1@==> B
  e1@{ animate: true }
```

----------------------------------------

TITLE: Defining a Junction in Architecture Diagram
DESCRIPTION: This snippet explains the syntax for declaring a junction within an architecture diagram. Junctions act as connection points, allowing multiple edges to meet. They are used for simplifying complex connections. The output is a visual representation of the junction and its connections to other services. The junctions allow for complex edge relationships.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_10

LANGUAGE: Mermaid
CODE:
```
junction junctionCenter
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Delay
DESCRIPTION: This snippet creates a half-rounded rectangle node using the shape keyword.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_46

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: delay, label: "Delay" }
```

----------------------------------------

TITLE: TCP Packet Diagram Example in Mermaid
DESCRIPTION: A comprehensive example of a TCP packet structure represented as a Mermaid packet diagram. Shows bit positions for various TCP header fields including ports, sequence numbers, flags, and data.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/packet.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
---
title: "TCP Packet"
---
packet-beta
0-15: "Source Port"
16-31: "Destination Port"
32-63: "Sequence Number"
64-95: "Acknowledgment Number"
96-99: "Data Offset"
100-105: "Reserved"
106: "URG"
107: "ACK"
108: "PSH"
109: "RST"
110: "SYN"
111: "FIN"
112-127: "Window"
128-143: "Checksum"
144-159: "Urgent Pointer"
160-191: "(Options and Padding)"
192-255: "Data (variable length)"
```

----------------------------------------

TITLE: Creating a UDP Packet Diagram in Mermaid
DESCRIPTION: Example illustrating how to represent a UDP packet using the `packet-beta` diagram type in Mermaid. It defines standard UDP fields like Source Port, Destination Port, Length, Checksum, and Data, specifying their bit ranges. The title is included directly within the Mermaid definition.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/packet.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
packet-beta
title UDP Packet
0-15: "Source Port"
16-31: "Destination Port"
32-47: "Length"
48-63: "Checksum"
64-95: "Data (variable length)"
```

----------------------------------------

TITLE: Unclear Indentation Handling
DESCRIPTION: This code illustrates how Mermaid.js handles unclear indentation in mindmap syntax, where the relationship is not perfectly defined.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_12

LANGUAGE: mermaid
CODE:
```
mindmap
    Root
        A
            B
          C
```

----------------------------------------

TITLE: Repeated Quadrant Chart in Mermaid
DESCRIPTION: Repeats the quadrant chart with campaign data, serving as an example or template for strategic plotting in diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_12

LANGUAGE: mermaid
CODE:
```
quadrantChart
  title Reach and engagement of campaigns
  x-axis Low Reach --> High Reach
  y-axis Low Engagement --> High Engagement
  quadrant-1 We should expand
  quadrant-2 Need to promote
  quadrant-3 Re-evaluate
  quadrant-4 May be improved
  Campaign A: [0.3, 0.6]
  Campaign B: [0.45, 0.23]
  Campaign C: [0.57, 0.69]
  Campaign D: [0.78, 0.34]
  Campaign E: [0.40, 0.34]
  Campaign F: [0.35, 0.78]
```

----------------------------------------

TITLE: Installing Packages (Docker)
DESCRIPTION: This command installs project dependencies using pnpm within the Docker environment. It utilizes the `./run` script as a wrapper for Docker Compose.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_6

LANGUAGE: bash
CODE:
```
./run pnpm install
```

----------------------------------------

TITLE: Applying the Default Theme to a Mermaid Git Diagram
DESCRIPTION: Illustrates the default appearance of a Mermaid Git diagram using the 'default' theme. This serves as a baseline comparison for subsequent customization examples.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_26

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'default'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit
```

----------------------------------------

TITLE: Default Temporal Commit Rendering in Mermaid GitGraph
DESCRIPTION: Shows the default behavior where commits are rendered based on temporal order (`parallelCommits: false`). Commits made earlier appear closer to their parent commit, reflecting the sequence of events.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_19

LANGUAGE: mermaid
CODE:
```
---
config:
  gitGraph:
    parallelCommits: false
---
gitGraph:
  commit
  branch develop
  commit
  commit
  checkout main
  commit
  commit
```

----------------------------------------

TITLE: Customizing Highlight Commit Colors (Mermaid)
DESCRIPTION: This Mermaid code uses the `gitInv0` theme variable to customize the highlight commit color for the first branch in a GitGraph diagram. It overrides the default color.  The `gitGraph` syntax defines the structure of the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_38

LANGUAGE: Mermaid
CODE:
```
```mermaid
---
config:
  logLevel: 'debug'
  theme: 'default'
  themeVariables:
    'gitInv0': '#ff0000'
---
       gitGraph
       commit
       branch develop
       commit tag:"v1.0.0"
       commit
       checkout main
       commit type: HIGHLIGHT
       commit
       merge develop
       commit
       branch featureA
       commit

```
```

----------------------------------------

TITLE: Register Icon Pack with Lazy Loading
DESCRIPTION: Registers an icon pack in Mermaid with lazy loading. The `loader` function uses dynamic `import()` to load the icon pack only when it is needed. This improves initial load time and reduces the overall bundle size. The `name` property specifies the icon pack name, and the `mermaid.registerIconPacks` function registers the icon pack.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/icons.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import mermaid from 'mermaid';

mermaid.registerIconPacks([
  {
    name: 'logos',
    loader: () => import('@iconify-json/logos').then((module) => module.icons),
  },
]);
```

----------------------------------------

TITLE: Adding Comments in Mermaid State Diagrams - Mermaid
DESCRIPTION: This snippet illustrates comment integration within a state diagram using standard Mermaid syntax. The '%%' prefix on a line causes the parser to ignore the remainder of that line, making it useful for documentation or in-line explanations. This requires Mermaid support in the rendering environment and accepts any state diagram definition with embedded comment lines. Comments themselves are not part of the diagram's output.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_19

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
    [*] --> Still
    Still --> [*]
%% this is a comment
    Still --> Moving
    Moving --> Still %% another comment
    Moving --> Crash
    Crash --> [*]
```

----------------------------------------

TITLE: Initializing Mermaid with JQuery Selection
DESCRIPTION: This JavaScript code shows how to initialize Mermaid with a jQuery selection. It initializes Mermaid with undefined config and targets elements with the id `#someId` and class `.yetAnotherClass`. Requires mermaid library and JQuery.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_10

LANGUAGE: javascript
CODE:
```
mermaid.init(undefined, $('#someId .yetAnotherClass'));
```

----------------------------------------

TITLE: Git Graph Diagram in Mermaid
DESCRIPTION: Visualizes a git workflow with commits, branches, and checkouts. It helps depict version control history and branching strategies within Mermaid diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
gitGraph
   commit
   commit
   branch develop
   commit
   commit
   commit
   checkout main
   commit
   commit
```

----------------------------------------

TITLE: Defining the updateCurrentConfig Function Signature (TypeScript)
DESCRIPTION: Declares the `updateCurrentConfig` function signature in TypeScript. It accepts two arguments: `siteCfg` of type `MermaidConfig` and `_directives` as an array of `MermaidConfig`. The function returns an object conforming to the `MermaidConfig` interface. It's defined in `packages/mermaid/src/config.ts`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/config/functions/updateCurrentConfig.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
updateCurrentConfig(siteCfg: MermaidConfig, _directives: MermaidConfig[]): MermaidConfig
```

----------------------------------------

TITLE: Branch Naming Convention
DESCRIPTION: This text defines the naming convention for branches: `[feature | bug | chore | docs]/[issue number]_[short-description]`. It specifies the type of change, the issue number, and a short description separated by slashes and underscores.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_11

LANGUAGE: txt
CODE:
```
[feature | bug | chore | docs]/[issue number]_[short-description]
```

----------------------------------------

TITLE: Cross Edge Example
DESCRIPTION: This snippet demonstrates creating a link between two nodes using a cross edge.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_85

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    A --x B
```

----------------------------------------

TITLE: Adding Accessible Title and Description HTML
DESCRIPTION: This HTML snippet demonstrates the generated HTML structure when accessible titles and descriptions are provided for a diagram.  It illustrates the use of `aria-labelledby` and `aria-describedby` attributes in the `<svg>` tag and shows how title and description are included.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_1

LANGUAGE: html
CODE:
```
<svg
  aria-labelledby="chart-title-mermaid-1668725057758"
  aria-describedby="chart-desc-mermaid-1668725057758"
  xmlns="http://www.w3.org/2000/svg"
  width="100%"
  id="mermaid-1668725057758"
>
  <title id="chart-title-mermaid-1668725057758">This is the accessible title</title>
  <desc id="chart-desc-mermaid-1668725057758">This is an accessible description</desc>
</svg>
```

----------------------------------------

TITLE: Changing LogLevel via Directive
DESCRIPTION: This code snippet demonstrates changing the log level of Mermaid diagram using a directive. The log level is set to `2`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_9

LANGUAGE: JSON
CODE:
```
%%{init: { "logLevel": 2 } }%%
```

----------------------------------------

TITLE: Hiding Today Marker (Mermaid Syntax)
DESCRIPTION: Demonstrates how to hide the 'Today Marker' in a Mermaid Gantt chart by setting the `todayMarker` key's value to `off`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_15

LANGUAGE: Mermaid Config
CODE:
```
todayMarker off
```

----------------------------------------

TITLE: Git Graph (Experimental Feature) in Mermaid
DESCRIPTION: Illustrates a simplified Git commit history graph, used for representing branching and merge operations, marked as an experimental feature. Dependencies include Mermaid's syntax for Git graphs.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md#_snippet_6

LANGUAGE: Markdown
CODE:
```
gitGraph::
  options{
    "nodeSpacing": 150,
    "nodeRadius": 10
  }
end
commit
branch newbranch
checkout newbranch
commit
commit
checkout master
commit
commit
merge newbranch
```

----------------------------------------

TITLE: Creating an Asymmetric Node in Mermaid Flowchart
DESCRIPTION: This snippet demonstrates how to create an asymmetric node in a Mermaid flowchart. The text is enclosed in `>... ]`
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_11

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    id1>This is the text in the box]
```

----------------------------------------

TITLE: Defining ZenUML Sequence Diagram Example in zenuml
DESCRIPTION: This snippet illustrates a basic ZenUML sequence diagram example with a title and two participants exchanging messages. It demonstrates declaring participants implicitly and showing message flow between them.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_0

LANGUAGE: zenuml
CODE:
```
title Demo
Alice->John: Hello John, how are you?
John->Alice: Great!
Alice->John: See you later!
```

----------------------------------------

TITLE: Using Break Tag in Section Titles and Events in Mermaid Timeline
DESCRIPTION: Illustrates the application of the HTML break tag (`<br>`) not only in event text but also within section titles to format long or multi-part section headers effectively in a Mermaid timeline diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_5

LANGUAGE: mermaid-example
CODE:
```
timeline
        title MermaidChart 2023 Timeline
        section 2023 Q1 <br> Release Personal Tier
          Bullet 1 : sub-point 1a : sub-point 1b
               : sub-point 1c
          Bullet 2 : sub-point 2a : sub-point 2b
        section 2023 Q2 <br> Release XYZ Tier
          Bullet 3 : sub-point <br> 3a : sub-point 3b
               : sub-point 3c
          Bullet 4 : sub-point 4a : sub-point 4b
```

LANGUAGE: mermaid
CODE:
```
timeline
        title MermaidChart 2023 Timeline
        section 2023 Q1 <br> Release Personal Tier
          Bullet 1 : sub-point 1a : sub-point 1b
               : sub-point 1c
          Bullet 2 : sub-point 2a : sub-point 2b
        section 2023 Q2 <br> Release XYZ Tier
          Bullet 3 : sub-point <br> 3a : sub-point 3b
               : sub-point 3c
          Bullet 4 : sub-point 4a : sub-point 4b
```

----------------------------------------

TITLE: Nesting Sync and Async Messages Using Braces in ZenUML Using zenuml
DESCRIPTION: Shows how synchronous and creation messages can be nested using braces to represent compound operations. It also demonstrates mixing nested synchronous and asynchronous messages inside the block.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_9

LANGUAGE: zenuml
CODE:
```
A.method() {
  B.nested_sync_method()
  B->C: nested async message
}
```

----------------------------------------

TITLE: Starting Documentation Dev Server in Docker (Bash)
DESCRIPTION: Gives the command to start the local documentation development server when working within a Docker environment provided by the project using the `./run` script wrapper.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_26

LANGUAGE: bash
CODE:
```
./run docs:dev
```

----------------------------------------

TITLE: Running Mermaid Locally (Host)
DESCRIPTION: This command starts the development server for Mermaid in the host environment using pnpm. It allows developers to test and view their changes locally.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_14

LANGUAGE: bash
CODE:
```
pnpm run dev
```

----------------------------------------

TITLE: Navigating into Cloned Mermaid Project Directory
DESCRIPTION: Changes the current directory to the newly cloned `mermaid` project folder using the `cd` command. This is necessary before running subsequent setup commands.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_2

LANGUAGE: bash
CODE:
```
cd mermaid
```

----------------------------------------

TITLE: Building Mermaid Library and Docs using pnpm (Host Setup)
DESCRIPTION: Compiles the Mermaid library and builds the documentation site using the `pnpm run build` command in the host environment.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_16

LANGUAGE: bash
CODE:
```
pnpm run build
```

----------------------------------------

TITLE: Using Multidirectional Arrows
DESCRIPTION: Demonstrates the use of multi-directional arrows combining different arrow types: circle, normal, and cross edges.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_39

LANGUAGE: mermaid
CODE:
```
flowchart LR
    A o--o B
    B <--> C
    C x--x D
```

----------------------------------------

TITLE: MermaidConfig Interface Property: look
DESCRIPTION: This option defines the overall visual style for the diagrams.  The input is a string. The valid values include "classic" or "handDrawn".
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_25

LANGUAGE: typescript
CODE:
```
look?: `"classic"` | `"handDrawn"`
```

----------------------------------------

TITLE: Defining States with ID and Colon Description
DESCRIPTION: Displays defining a state with an ID followed by a colon and description, enabling concise state labeling within state diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
    s2 : This is a state description
```

----------------------------------------

TITLE: Changing Sequence Config via Directive
DESCRIPTION: This code snippet demonstrates changing sequence diagram configurations using a directive. The `wrap` is set to `true`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_13

LANGUAGE: JSON
CODE:
```
%%{init: { "sequence": { "wrap": true} } }%%
```

----------------------------------------

TITLE: Creating a Thick Link
DESCRIPTION: This snippet creates a thick link between two nodes in a flowchart using the `==>` syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_27

LANGUAGE: mermaid
CODE:
```
flowchart LR
   A ==> B
```

----------------------------------------

TITLE: Running unit tests (Docker)
DESCRIPTION: Executes unit tests for the Mermaid project using pnpm within a Docker environment, prepending `./run` to execute the command in the Docker environment.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_17

LANGUAGE: sh
CODE:
```
./run pnpm test
```

----------------------------------------

TITLE: Creating a Trapezoid Node in Mermaid Flowchart
DESCRIPTION: This snippet demonstrates how to create a trapezoid node in a Mermaid flowchart. The text is enclosed in `[/ ... \]`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_16

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A[/Christmas\]
```

----------------------------------------

TITLE: Repeated Class Diagram Example in Mermaid
DESCRIPTION: Replicates the same class diagram illustrating class relationships, inheritance, composition, and properties, useful for demonstrating diagram syntax and structure consistency in Mermaid.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_4

LANGUAGE: mermaid
CODE:
```
classDiagram
Class01 <|-- AveryLongClass : Cool
Class03 *-- Class04
Class05 o-- Class06
Class07 .. Class08
Class09 --> C2 : Where am i?
Class09 --* C3
Class09 --|> Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
Class08 <--> C2: Cool label
```

----------------------------------------

TITLE: Mermaid Timeline Syntax with Multiple Events per Period
DESCRIPTION: Shows an example of a Mermaid timeline diagram where a single time period ('2004') has multiple events ('Facebook', 'Google') defined on the same line, separated by colons.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_2

LANGUAGE: mermaid-example
CODE:
```
timeline
    title History of Social Media Platform
    2002 : LinkedIn
    2004 : Facebook : Google
    2005 : YouTube
    2006 : Twitter
```

LANGUAGE: mermaid
CODE:
```
timeline
    title History of Social Media Platform
    2002 : LinkedIn
    2004 : Facebook : Google
    2005 : YouTube
    2006 : Twitter
```

----------------------------------------

TITLE: Default Multi-Color Styling for Timeline Periods in Mermaid
DESCRIPTION: Shows the default styling behavior in Mermaid timeline diagrams when no sections are defined. Each time period and its associated events are assigned a unique color scheme.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_6

LANGUAGE: mermaid-example
CODE:
```
    timeline
        title History of Social Media Platform
          2002 : LinkedIn
          2004 : Facebook : Google
          2005 : YouTube
          2006 : Twitter


```

LANGUAGE: mermaid
CODE:
```
    timeline
        title History of Social Media Platform
          2002 : LinkedIn
          2004 : Facebook : Google
          2005 : YouTube
          2006 : Twitter


```

----------------------------------------

TITLE: Comparing Multiple Entities Across Dimensions - Mermaid Example
DESCRIPTION: Provides an example radar diagram for restaurant comparison using Mermaid-example. The snippet defines axes for qualitative aspects (e.g., Food Quality, Service, Price, Ambiance) and plots curves for several restaurants. Additional diagram options such as graticule polygon and max value are used. Intended for comparative analysis of categorical ratings. Requires Mermaid runtime with radar-beta support.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_3

LANGUAGE: mermaid-example
CODE:
```
radar-beta
  title Restaurant Comparison
  axis food["Food Quality"], service["Service"], price["Price"]
  axis ambiance["Ambiance"],

  curve a["Restaurant A"]{4, 3, 2, 4}
  curve b["Restaurant B"]{3, 4, 3, 3}
  curve c["Restaurant C"]{2, 3, 4, 2}
  curve d["Restaurant D"]{2, 2, 4, 3}

  graticule polygon
  max 5

```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Comment Right
DESCRIPTION: This snippet uses the shape keyword to create a comment with braces on the right.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_42

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: brace-r, label: "Comment" }
```

----------------------------------------

TITLE: Hexagon Shape in Mindmap
DESCRIPTION: This code snippet demonstrates the use of a hexagon shape for a node in a mindmap diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_8

LANGUAGE: mermaid
CODE:
```
mindmap
    id{{I am a hexagon}}
```

----------------------------------------

TITLE: Running Mermaid locally in development mode (Docker)
DESCRIPTION: Starts the development server for Mermaid using pnpm within a Docker environment. This command enables hot reloading and provides a local development environment using the `./run` script.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_15

LANGUAGE: bash
CODE:
```
./run dev
```

----------------------------------------

TITLE: ER Diagram with Unicode Support in Mermaid
DESCRIPTION: A simple demonstration of how Mermaid ER diagrams support Unicode characters in entity names.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
erDiagram
    "This ❤ Unicode"
```

----------------------------------------

TITLE: Adding Comments in ZenUML
DESCRIPTION: This snippet shows how to add comments to a ZenUML diagram using `// comment` syntax. Comments are rendered above messages or fragments and support Markdown formatting.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_9

LANGUAGE: mermaid
CODE:
```
zenuml
    // a comment on a participant will not be rendered
    BookService
    // a comment on a message.
    // **Markdown** is supported.
    BookService.getBook()
```

----------------------------------------

TITLE: Cloud Shape in Mindmap
DESCRIPTION: This code snippet demonstrates the use of a 'cloud' shape for a node in a mindmap.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
mindmap
    id)I am a cloud(
```

----------------------------------------

TITLE: JavaScript Callback Function Example
DESCRIPTION: This is a standalone JavaScript function that can be used as a callback in a Mermaid class diagram.  When a node is clicked and the callback is triggered, this function will execute, in this case, displaying an alert.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_23

LANGUAGE: javascript
CODE:
```
const callbackFunction = function () {
  alert('A callback was triggered');
};
```

----------------------------------------

TITLE: Deprecated Configuration via Direct Property Setting
DESCRIPTION: A deprecated method of configuring Mermaid by setting properties directly on the mermaid object. This approach is only maintained for backward compatibility and should be avoided in favor of the initialize method.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_16

LANGUAGE: javascript
CODE:
```
mermaid.startOnLoad = true;
```

----------------------------------------

TITLE: Creating a Hexagon Node in Mermaid Flowchart
DESCRIPTION: This snippet demonstrates how to create a hexagon-shaped node in a Mermaid flowchart. The text is enclosed in double curly braces `{{}}`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_13

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    id1{{This is the text in the box}}
```

----------------------------------------

TITLE: Adding Parameters to the Secure Array using mermaidAPI.initialize (JavaScript)
DESCRIPTION: Shows how site owners can extend the list of immutable configuration parameters by passing an array of parameter names to the `secure` key within the `mermaidAPI.initialize` configuration object. This prevents these parameters from being overridden by the `init` directive. Requires the Mermaid.js library (`mermaidAPI`).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/8.6.0_docs.md#_snippet_0

LANGUAGE: javascript
CODE:
```
mermaidAPI.initialize( { startOnLoad: true, secure: ['parameter1', 'parameter2'] } );
```

----------------------------------------

TITLE: Displaying Unicode Text in a Mermaid Node
DESCRIPTION: This snippet demonstrates how to include Unicode characters in the text of a Mermaid node. The Unicode text is enclosed in double quotes `""`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_2

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    id["This ❤ Unicode"]
```

----------------------------------------

TITLE: Escaping Double Quotes in Sankey Diagram Data
DESCRIPTION: This snippet demonstrates how to escape double quotes within the node names.  The `sankey-beta` keyword is used. When a double quote is required within a node name that's already inside a quoted string, another double quote must be added, which is standard for CSV files.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_8

LANGUAGE: Mermaid
CODE:
```
```mermaid-example
sankey-beta

Pumped heat,"Heating and cooling, ""homes""",193.026
Pumped heat,"Heating and cooling, ""commercial""",70.672
```
```

----------------------------------------

TITLE: Changing LogLevel in Mermaid Graph
DESCRIPTION: This example sets the logLevel to 2 in a Mermaid graph via directive.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_10

LANGUAGE: Mermaid
CODE:
```
%%{init: { "logLevel": 2 } }%%
graph TD
A(Forest) --> B[/Another/]
A --> C[End]
  subgraph section
  B
  C
  end
```

LANGUAGE: Mermaid
CODE:
```
%%{init: { "logLevel": 2 } }%%
graph TD
A(Forest) --> B[/Another/]
A --> C[End]
  subgraph section
  B
  C
  end
```

----------------------------------------

TITLE: Bar Chart Visualization Using Gantt Syntax with Mermaid JavaScript
DESCRIPTION: This code uses Mermaid's Gantt chart syntax to create a bar chart grouped by 'Git Issues', each represented as a section with a duration bar. Dependencies are limited to Mermaid; tasks are specified by issue ID and days since last update. Input is a sequence of issues with durations, output is a grouped bar chart. The approach is constrained by using Gantt charts to emulate bar charts, lacking axis and style flexibility.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_7

LANGUAGE: mermaid
CODE:
```
gantt
    title Git Issues - days since last update
    dateFormat  X
    axisFormat %s

    section Issue19062
    71   : 0, 71
    section Issue19401
    36   : 0, 36
    section Issue193
    34   : 0, 34
    section Issue7441
    9    : 0, 9
    section Issue1300
    5    : 0, 5
```

----------------------------------------

TITLE: Setting up the Mermaid.js Development Environment (Bash)
DESCRIPTION: Clones the Mermaid.js repository from GitHub, changes the current directory to the cloned repository, installs project dependencies using pnpm (via npx initially due to a Volta limitation), and finally runs the project's test suite to ensure the setup is correct. Requires Git, Volta, Node.js, and pnpm to be installed.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone git@github.com:mermaid-js/mermaid.git
cd mermaid
# npx is required for first install as volta support for pnpm is not added yet.
npx pnpm install
pnpm test
```

----------------------------------------

TITLE: Subgraph with Explicit ID
DESCRIPTION: This snippet shows how to set an explicit ID for a subgraph, which can be useful for styling or referencing the subgraph in other parts of the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_93

LANGUAGE: Mermaid
CODE:
```
flowchart TB
    c1-->a2
    subgraph ide1 [one]
    a1-->a2
    end
```

----------------------------------------

TITLE: MermaidConfig Interface Property: forceLegacyMathML
DESCRIPTION: This option forces Mermaid to use KaTeX's own stylesheet for rendering MathML and is helpful for consistent rendering. If set to true, the legacyMathML setting is ignored.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_15

LANGUAGE: typescript
CODE:
```
forceLegacyMathML?: `boolean`
```

----------------------------------------

TITLE: Modeling Concurrency with Parallel States (-- Symbol)
DESCRIPTION: Depicts concurrent regions within a state diagram by using '--' to split parallel paths, such as toggling different locks simultaneously.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_16

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
    [*] --> Active

    state Active {
        [*] --> NumLockOff
        NumLockOff --> NumLockOn : EvNumLockPressed
        NumLockOn --> NumLockOff : EvNumLockPressed
        --
        [*] --> CapsLockOff
        CapsLockOff --> CapsLockOn : EvCapsLockPressed
        CapsLockOn --> CapsLockOff : EvCapsLockPressed
        --
        [*] --> ScrollLockOff
        ScrollLockOff --> ScrollLockOn : EvScrollLockPressed
        ScrollLockOn --> ScrollLockOff : EvScrollLockPressed
    }
```

----------------------------------------

TITLE: Bang Shape in Mindmap
DESCRIPTION: This code snippet illustrates the use of a 'bang' shape for a node in a mindmap diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
mindmap
    id))I am a bang((
```

----------------------------------------

TITLE: Square Shape in Mindmap
DESCRIPTION: This code snippet demonstrates the usage of a square shape for a node in a mindmap diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
mindmap
    id[I am a square]
```

----------------------------------------

TITLE: Using Custom Icons in Architecture Diagrams (Duplicate)
DESCRIPTION: This snippet is a duplicate of the earlier example, showing how to include custom icons within an architecture diagram using a specific format, demonstrating integration with external icon libraries.  It uses logos from iconify.design. This highlights how users can specify custom images.  The output displays those specified icons within the architectural rendering. Requires iconify setup.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_14

LANGUAGE: Mermaid
CODE:
```
architecture-beta
    group api(logos:aws-lambda)[API]

    service db(logos:aws-aurora)[Database] in api
    service disk1(logos:aws-glacier)[Storage] in api
    service disk2(logos:aws-s3)[Storage] in api
    service server(logos:aws-ec2)[Server] in api

    db:L -- R:server
    disk1:T -- B:server
    disk2:T -- B:db
```

----------------------------------------

TITLE: Graph Object Properties for Diagram Rendering
DESCRIPTION: Defines the data structure for node objects used in diagram rendering. Each node includes properties such as shape, label, style, and metadata, which are used by the Mermaid.js renderer and Dagre wrapper to visualize diagram elements. Special properties denote cluster nodes and custom styling or grouping intentions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/dagre-wrapper/GraphObjects.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "shape": "rect",
  "labelText": "Test",
  "rx": 0,
  "ry": 0,
  "class": "default",
  "style": "",
  "id": "Test",
  "type": "group",
  "padding": 15
}
```

----------------------------------------

TITLE: Defining a Default Shape Node in Mermaid Mindmap
DESCRIPTION: Shows that a node defined only by its text uses the default shape, which is typically a rounded rectangle, without requiring explicit shape syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_8

LANGUAGE: Mermaid
CODE:
```
mindmap
    I am the default shape
```

LANGUAGE: Mermaid
CODE:
```
mindmap
    I am the default shape
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Divided Process
DESCRIPTION: This snippet creates a divided rectangle to represent a divided process.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_50

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: div-rect, label: "Divided process" }
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Lean Left
DESCRIPTION: This snippet shows how to create a node shaped like a parallelogram leaning to the left, using the `lean-l` shape, for data input/output.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_30

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: lean-l, label: "Output/Input" }
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Paper Tape
DESCRIPTION: This snippet creates Paper Tape node.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_60

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: flag, label: "Paper tape" }
```

----------------------------------------

TITLE: Starting Documentation Dev Server via Docker - Bash
DESCRIPTION: This Bash command launches the documentation dev server inside a Docker container using an internal helper script. Docker, the `run` helper, PNPM, and docs dependencies are required. Inputs are the script and command; output is a running docs server inside the container.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_28

LANGUAGE: Bash
CODE:
```
./run docs:dev
```

----------------------------------------

TITLE: Styling Badges and Dark Mode Content in CSS
DESCRIPTION: CSS styles that format badge displays by setting them in a horizontal line with margins, and adds a filter to invert images in dark mode for better visibility.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_15

LANGUAGE: CSS
CODE:
```
<style scoped>
 .badges > p {
    display: flex;
  }

  .badges > p > a {
    margin: 0 0.5rem;
  }

  .dark #VPContent > div > div > div.content > div > main > div > div > img {
    filter: invert(1) hue-rotate(217deg)  contrast(0.72);
  }
</style>
```

----------------------------------------

TITLE: Repeated XY Chart in Mermaid
DESCRIPTION: Replicates the XY chart with sales data, useful for examples or template purposes to demonstrate plotting multiple series.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_14

LANGUAGE: mermaid
CODE:
```
xychart-beta
  title "Sales Revenue"
  x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]
  y-axis "Revenue (in $)" 4000 --> 11000
  bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]
  line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]
```

----------------------------------------

TITLE: Defining a Repeat of Requirement Diagram with Accessibility in Mermaid-js
DESCRIPTION: This snippet repeats the requirement diagram structure with the same accessibility metadata, demonstrating consistency in requirement visualization and accessibility annotation within Mermaid.js diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_13

LANGUAGE: mermaid
CODE:
```
  requirementDiagram
      accTitle: My Requirement Diagram
      accDescr: My Requirement Diagram Description

       requirement test_req {
  id: 1
  text: the test text.
  risk: high
  verifymethod: test
  }

  element test_entity {
  type: simulation
  }

  test_entity - satisfies -> test_req
```

----------------------------------------

TITLE: Installing Yarn Globally using npm
DESCRIPTION: This shell command uses the npm package manager to install the Yarn package manager globally on the system. Installing Yarn is a prerequisite for using it to manage project dependencies, including adding Mermaid.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/getting-started.md#_snippet_5

LANGUAGE: Shell
CODE:
```
npm install -g yarn
```

----------------------------------------

TITLE: Repeating Sequence Diagram with Accessibility Metadata in Mermaid-js
DESCRIPTION: This snippet repeats the same sequence diagram structure with the same accessibility labels, emphasizing consistent documentation of message flows in Mermaid.js diagrams with accessible descriptions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_15

LANGUAGE: mermaid
CODE:
```
   sequenceDiagram
      accTitle: My Sequence Diagram
      accDescr: My Sequence Diagram Description

      Alice->>John: Hello John, how are you?
      John-->>Alice: Great!
      Alice-)John: See you later!
```

----------------------------------------

TITLE: MermaidConfig Interface Property: fontSize
DESCRIPTION: Defines the fontSize configuration option. This controls the font size used for diagram text and labels. The value is a number representing the font size in pixels.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_14

LANGUAGE: typescript
CODE:
```
fontSize?: `number`
```

----------------------------------------

TITLE: Repeating State Diagram with Accessibility Metadata in Mermaid-js
DESCRIPTION: This snippet repeats the state diagram with the same accessibility labels, demonstrating consistency in representing state transitions with accessible annotations.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_17

LANGUAGE: mermaid
CODE:
```
   stateDiagram
      accTitle: My State Diagram
      accDescr: My State Diagram Description

       s1 --> s2
```

----------------------------------------

TITLE: Visualizing Initial Setup Workflow using Mermaid
DESCRIPTION: A Mermaid flowchart diagram illustrating the three main steps of the initial setup process: getting the source code, installing requirements, and installing packages.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
flowchart LR
  source --> requirements --> setup

  source[Get the Source Code]
  requirements[Install the Requirements]
  setup[Install Packages]
```

----------------------------------------

TITLE: Configuring Horizontal Commit Labels in Mermaid gitGraph (mermaid)
DESCRIPTION: This snippet sets up a Mermaid gitGraph with horizontal commit labels, centering them beneath commit circles without rotation, which is more suitable for shorter commit messages. The directive 'rotateCommitLabel: false' is specified in the configuration. No special dependencies are required apart from support for Mermaid diagrams. Inputs include commit and branch commands. Output is a git branch diagram with all commit labels displayed horizontally. Horizontal labels can enhance aesthetic appeal and compactness in cases with concise, non-overlapping labels.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_12

LANGUAGE: mermaid
CODE:
```
---
config:
  logLevel: 'debug'
  theme: 'base'
  gitGraph:
    rotateCommitLabel: false
---
gitGraph
  commit id: "feat(api): ..."
  commit id: "a"
  commit id: "b"
  commit id: "fix(client): .extra long label.."
  branch c2
  commit id: "feat(modules): ..."
  commit id: "test(client): ..."
  checkout main
  commit id: "fix(api): ..."
  commit id: "ci: ..."
  branch b1
  commit
  branch b2
  commit
```

----------------------------------------

TITLE: MermaidConfig Interface Property: maxTextSize
DESCRIPTION: Defines the maximum allowed text size in the user's diagram. The input is a number.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_28

LANGUAGE: typescript
CODE:
```
maxTextSize?: `number`
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Comment
DESCRIPTION: This snippet demonstrates using the shape keyword to create a comment node, represented by curly braces, in a Mermaid flowchart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_41

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: comment, label: "Comment" }
```

----------------------------------------

TITLE: MermaidConfig Interface Property: elk
DESCRIPTION: Defines the elk configuration option.  This allows configuration of Elk layout options.  The object contains a collection of elk-specific options for controlling the layout of the diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_10

LANGUAGE: typescript
CODE:
```
elk?: `object`
```

----------------------------------------

TITLE: Defining a Tagged Process Node Shape
DESCRIPTION: This snippet defines a node with a 'tag-rect' shape, labeled as "Tagged process".  This shape visually represents a tagged process in a flowchart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_64

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: tag-rect, label: "Tagged process" }
```

----------------------------------------

TITLE: Minimum Length of a Link with Label in Middle
DESCRIPTION: This snippet shows how to specify minimum link length when the link label is written in the middle of the link.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_88

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A[Start] --> B{Is it?}
    B -- Yes --> C[OK]
    C --> D[Rethink]
    D --> B
    B -- No ----> E[End]
```

----------------------------------------

TITLE: Defining a Summary Node Shape
DESCRIPTION: This snippet defines a node with a 'cross-circ' shape, labeled as "Summary". This special shape is used to visually represent a summary in a flowchart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_62

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: cross-circ, label: "Summary" }
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Odd
DESCRIPTION: This snippet uses the shape keyword to create a node with an 'odd' shape in Mermaid.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_26

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: odd, label: "Odd shape" }
```

----------------------------------------

TITLE: Rendering Mindmap Syntax
DESCRIPTION: This snippet displays the rendered output of the mindmap syntax example, showing the visual representation of the hierarchical relationships.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
mindmap
Root
    A
      B
      C
```

----------------------------------------

TITLE: Illustrating Namespace Handling Fix in Mermaid Class Diagram - Mermaid Syntax
DESCRIPTION: This Mermaid code snippet demonstrates a class diagram using a namespace with dots in its name. It serves as an example related to a fix for a crash issue when a dot character is included within the namespace. The snippet defines a generic class with methods using type parameters inside a nested namespace structure. Dependencies include support for Mermaid’s classDiagram directive and generic syntax usage. The input is the diagram code written in Mermaid syntax, and the output should render a class diagram without crashing.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/CHANGELOG.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
classDiagram
  namespace Company.Project.Module {
    class GenericClass~T~ {
      +addItem(item: T)
      +getItem() T
    }
  }
```

----------------------------------------

TITLE: Defining a Tagged Document Node Shape
DESCRIPTION: This snippet defines a node with a 'tag-doc' shape, labeled as "Tagged document". This shape visually represents a tagged document within the flowchart.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_63

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: tag-doc, label: "Tagged document" }
```

----------------------------------------

TITLE: Defining ParseErrorFunction Type Alias in TypeScript
DESCRIPTION: This snippet defines the `ParseErrorFunction` type alias. It is a function that accepts an error which can be a string, `DetailedError` or `unknown` as the first parameter and an optional `any` type hash as the second parameter and does not return any value.  This alias is used within the mermaid-js library to specify the type signature of functions that handle parsing errors.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/type-aliases/ParseErrorFunction.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
ParseErrorFunction: (`err`, `hash`?) => `void`
```

----------------------------------------

TITLE: Integrating Mermaid Mindmap (Pre 9.4.0)
DESCRIPTION: Shows the method to include Mermaid and the separate Mindmap diagram module in a web page using HTML script tags and module imports for versions prior to 9.4.0, requiring explicit registration of the external diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_13

LANGUAGE: HTML
CODE:
```
<script type="module">
  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@9.3.0/dist/mermaid.esm.min.mjs';
  import mindmap from 'https://cdn.jsdelivr.net/npm/@mermaid-js/mermaid-mindmap@9.3.0/dist/mermaid-mindmap.esm.min.mjs';
  await mermaid.registerExternalDiagrams([mindmap]);
</script>
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Disk Storage
DESCRIPTION: This snippet uses the shape keyword to define a lined cylinder which usually represents Disk Storage.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_48

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: lin-cyl, label: "Disk storage" }
```

----------------------------------------

TITLE: Repeated ER Diagram in Mermaid
DESCRIPTION: Repeats the ER diagram showing customer, order, line-item, and delivery address relationships, useful for example consistency or reinforcement of syntax.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_8

LANGUAGE: mermaid
CODE:
```
erDiagram
 CUSTOMER ||--o{ ORDER : places
 ORDER ||--|{ LINE-ITEM : contains
 CUSTOMER }|..|{ DELIVERY-ADDRESS : uses
```

----------------------------------------

TITLE: Configuring Chart with Styles and Theme Variables
DESCRIPTION: This example configures the quadrant chart using chart-specific settings and theme variables. Configuration options include chart dimensions, text sizes, padding, and color schemes. Theme variables allow customizing the visual appearance of the chart. Required configuration includes chartWidth, chartHeight, and the settings for theme variables like quadrant text fill.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/quadrantChart.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
---
config:
  quadrantChart:
    chartWidth: 400
    chartHeight: 400
  themeVariables:
    quadrant1TextFill: "ff0000"
---
quadrantChart
  x-axis Urgent --> Not Urgent
  y-axis Not Important --> "Important ❤"
  quadrant-1 Plan
  quadrant-2 Do
  quadrant-3 Delegate
  quadrant-4 Delete
```

----------------------------------------

TITLE: JavaScript Parser Error Handling
DESCRIPTION: This JavaScript code defines a function `parseError` that calls `mermaid.parseError` to provide a common way of detecting and handling parse errors for the end-user. This function is crucial for providing meaningful error messages to users when they write invalid diagram code. The `yy` object is initialized with this function.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_1

LANGUAGE: javascript
CODE:
```
exports.parseError = function (err, hash) {
  mermaid.parseError(err, hash);
};
```

----------------------------------------

TITLE: Running Project Tests using pnpm (Host Setup)
DESCRIPTION: Executes the project's test suite using the `pnpm test` command in the host environment. This verifies the setup and ensures the code is working correctly before making changes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_8

LANGUAGE: bash
CODE:
```
pnpm test
```

----------------------------------------

TITLE: Defining Node Shape with Shape Keyword - Small Circle
DESCRIPTION: This snippet uses the `sm-circ` shape to create a small circle node.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_37

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    A@{ shape: sm-circ, label: "Small start" }
```

----------------------------------------

TITLE: Starting Documentation Dev Server with pnpm filter (Bash)
DESCRIPTION: Provides a Bash command to start the local development server for the documentation website using `pnpm` and the `--filter` option to target the `mermaid` package. This is one way to preview documentation changes locally.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_24

LANGUAGE: bash
CODE:
```
pnpm --filter mermaid run docs:dev
```

----------------------------------------

TITLE: Defining Default Mermaid Configuration in TypeScript
DESCRIPTION: This TypeScript snippet defines the `default` constant, which represents the default configuration for Mermaid. It's of type `RequiredDeep<MermaidConfig>`, meaning it ensures all properties in `MermaidConfig` are required and deeply typed. The code serves as a source of truth for the application's base settings, especially functions and undefined values. Understanding these options is crucial for customising Mermaid's behavior within the application and making use of the config.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/defaultConfig/variables/default.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
const default: RequiredDeep<MermaidConfig>;
```

----------------------------------------

TITLE: Resulting Merged Directive Configuration (JSON)
DESCRIPTION: Shows the final JSON configuration object that results from merging the multiple directives in the preceding example. Note how `logLevel` and `theme` take their last specified values.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_5

LANGUAGE: json
CODE:
```
{
  "logLevel": "fatal",
  "theme": "dark",
  "startOnLoad": true
}
```

----------------------------------------

TITLE: Visualizing Contribution Areas with Mermaid Mindmap
DESCRIPTION: This Mermaid syntax snippet defines a simple mindmap diagram. It outlines the main areas of contribution to the project: Development, Testing, and Management, with sub-points for each. This visual representation helps new contributors quickly understand the different roles available.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/intro.md#_snippet_0

LANGUAGE: Mermaid
CODE:
```
mindmap
  root)Contributing(
    Development
      Solving issues
      Adding new diagrams
      Handling pull requests
      Updating tooling
    Testing
      Verification of fixed issues
      Regression testing in connection with releases
      Testing pull requests
    Management
      Coordinating the work
      Classification and monitoring of incoming issues
```

----------------------------------------

TITLE: JavaScript Parser Setup
DESCRIPTION: This JavaScript code shows how to set up a parser as a separate module. It imports the graph database and parser, and then assigns the graph database to the parser's `yy` object. This setup is required before parsing any input text.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const graph = require('./graphDb');
const flow = require('./parser/flow');
flow.parser.yy = graph;
```

----------------------------------------

TITLE: Starting Local Development Server using pnpm (Docker Setup)
DESCRIPTION: Starts the local development server within the Docker environment using the `./run dev` helper script. The server is accessible at http://localhost:9000.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_19

LANGUAGE: bash
CODE:
```
./run dev
```

----------------------------------------

TITLE: Running Mermaid locally in development mode (Host)
DESCRIPTION: Starts the development server for Mermaid using pnpm in a host environment. This command enables hot reloading and provides a local development environment.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_14

LANGUAGE: bash
CODE:
```
pnpm run dev
```

----------------------------------------

TITLE: Circle Shape in Mindmap
DESCRIPTION: This code snippet demonstrates the creation of a circle-shaped node within a mindmap.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_5

LANGUAGE: mermaid
CODE:
```
mindmap
    id((I am a circle))
```

----------------------------------------

TITLE: Changing Log Level via Directive
DESCRIPTION: A specific directive example demonstrating how to change the logging level. Possible values range from 1 (debug) to 5 (fatal only), with 5 being the default.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_10

LANGUAGE: mermaid
CODE:
```
%%{init: { "logLevel": 2 } }%%
```

----------------------------------------

TITLE: Starting Documentation Dev Server with cd and pnpm (Bash)
DESCRIPTION: Presents an alternative Bash command sequence to start the documentation development server. It involves changing the directory into the `packages/mermaid` folder before running the `pnpm docs:dev` command.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_25

LANGUAGE: bash
CODE:
```
cd packages/mermaid
pnpm docs:dev
```

----------------------------------------

TITLE: Stacking Blocks Horizontally
DESCRIPTION: Demonstrates stacking blocks vertically in a single column using the `columns 1` directive within a block to arrange 4 blocks labeled a,b,c and d vertically.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_6

LANGUAGE: mermaid
CODE:
```
```mermaid-example
block-beta
  block
    columns 1
    a[\"A label\"] b c d
  end
```
```

----------------------------------------

TITLE: Running Cypress Tests for Flowchart Shapes
DESCRIPTION: Provides the command to open the Cypress test runner, specifically targeting flowchart shape tests (like those in `newShapes.spec.ts`). The `--env updateSnapshots=true` flag suggests that the test run may update visual regression snapshots if differences are found.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_8

LANGUAGE: bash
CODE:
```
cypress open --env updateSnapshots=true
```

----------------------------------------

TITLE: Registering Diagram Styles with the Mermaid.js Theming Engine
DESCRIPTION: Shows how to register a new diagram's style generation function (e.g., `xyzDiagram`, which should be the imported `getStyles` function from the diagram's specific `styles.js`) within the main `themes` object located in `src/styles.js`. This makes the diagram responsive to the Mermaid theming system.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const themes = {
  flowchart,
  'flowchart-v2': flowchart,
  sequence,
  xyzDiagram,
  //...
};
```

----------------------------------------

TITLE: MermaidConfig Interface Property: flowchart
DESCRIPTION: Defines the flowchart configuration option. This property configures settings specific to flowchart diagrams within Mermaid. It utilizes a FlowchartDiagramConfig object.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_12

LANGUAGE: typescript
CODE:
```
flowchart?: `FlowchartDiagramConfig`
```

----------------------------------------

TITLE: MermaidConfig Interface Property: logLevel
DESCRIPTION: This option sets the verbosity of Mermaid's logging output. It determines the level of detail shown in the logs, ranging from no logging to verbose tracing. The input can be a number or a string representing log level.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_24

LANGUAGE: typescript
CODE:
```
logLevel?: `0` | `2` | `1` | `"trace"` | `"debug"` | `"info"` | `"warn"` | `"error"` | `"fatal"` | `3` | `4` | `5`
```

----------------------------------------

TITLE: TypeScript Function Signature for reset() in Mermaid Config
DESCRIPTION: The TypeScript function signature for the reset() function in Mermaid's configuration system. This function resets the currentConfig to a provided configuration object or defaults to the site configuration.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/config/functions/reset.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
reset(config: MermaidConfig = siteConfig): void
```

----------------------------------------

TITLE: Generated HTML for Flowchart with Multi-line Description
DESCRIPTION: This HTML snippet shows the generated HTML for the Flowchart defined in previous snippet after the mermaid.js library processes it. The resulting HTML includes the title and description.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_5

LANGUAGE: html
CODE:
```
<svg
  aria-labelledby="chart-title-mermaid_382ee221"
  aria-describedby="chart-desc-mermaid_382ee221"
  aria-roledescription="flowchart-v2"
  xmlns="http://www.w3.org/2000/svg"
  width="100%"
  id="mermaid_382ee221"
>
  <title id="chart-title-mermaid_382ee221">Big decisions</title>
  <desc id="chart-desc-mermaid_382ee221">
    The official Bob's Burgers corporate processes that are used for making very, very big
    decisions. This is actually a very simple flow: identify the big decision and then make the big
    decision.
  </desc>
</svg>
```

----------------------------------------

TITLE: Visualizing Mermaid Git Branching Strategy using Mermaid
DESCRIPTION: A Mermaid Git Graph diagram illustrating the project's branching strategy, based on Git Flow. It shows development happening on the `develop` branch and feature branches merging into it.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_11

LANGUAGE: mermaid
CODE:
```
---
config:
  gitGraph:
    mainBranchName: develop
---
gitGraph LR:
  commit
  commit
  branch "docs/2910_update-guidelines" order: 1
  commit
  commit
  commit
  checkout develop
  merge "docs/2910_update-guidelines"
  commit
```

----------------------------------------

TITLE: Pushing Git Changes to Origin (Bash)
DESCRIPTION: Shows an example Bash command for pushing local Git commits to a remote branch on the origin repository. The `-u` flag sets the upstream branch, simplifying future pushes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_28

LANGUAGE: bash
CODE:
```
git push -u origin docs/2910_update-guidelines
```

----------------------------------------

TITLE: Running Unit Tests in Watch Mode with Vitest (Host Setup)
DESCRIPTION: Runs the unit tests using Vitest in watch mode via `pnpm test:watch`. This command automatically re-runs tests when source files or test files are changed.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_20

LANGUAGE: sh
CODE:
```
pnpm test:watch
```

----------------------------------------

TITLE: Kanban Diagram Task Example - Mermaid
DESCRIPTION: This snippet provides a specific example of defining a task in a Mermaid Kanban diagram, where the task ID is `docs` and the description is `Create Documentation`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/kanban.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
docs[Create Documentation]
```

----------------------------------------

TITLE: Older Renderer State Diagram
DESCRIPTION: This snippet provides an equivalent state diagram to the previous example but uses the older renderer version of mermaid.js.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_1

LANGUAGE: mermaid-example
CODE:
```
stateDiagram
    [*] --> Still
    Still --> [*]

    Still --> Moving
    Moving --> Still
    Moving --> Crash
    Crash --> [*]
```

----------------------------------------

TITLE: Unclear Indentation Mindmap Output
DESCRIPTION: This is the rendered output of the previous 'Unclear Indentation Handling' snippet showing how the diagram will appear.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_13

LANGUAGE: mermaid
CODE:
```
mindmap
Root
    A
        B
      C
```

----------------------------------------

TITLE: Defining SVGGroup Type Alias with D3.js Selection in TypeScript
DESCRIPTION: This snippet defines the SVGGroup type alias as a D3.Selection object parameterized for SVGGElement instances. It requires D3.js as a dependency and assumes TypeScript support for generics. The type describes a selection whose datum is unknown, the underlying DOM element is either Element or null, and output is unknown. It is intended for strongly-typed manipulation of SVG group (<g>) elements in Mermaid diagrams. Inputs and outputs are D3 selections representing SVG group elements with no data constraints.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/type-aliases/SVGGroup.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type SVGGroup = d3.Selection<SVGGElement, unknown, Element | null, unknown>;
```

----------------------------------------

TITLE: Cloning the Mermaid repository
DESCRIPTION: Clones the forked Mermaid repository from GitHub to the local development machine. This command creates a local copy of the repository's files for modification and contribution.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone git@github.com/your-fork/mermaid
```

----------------------------------------

TITLE: Running Unit Tests (Docker)
DESCRIPTION: This command executes the unit tests for the Mermaid project using pnpm within the Docker environment. The `./run` script is used to execute the command inside the Docker container.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_18

LANGUAGE: sh
CODE:
```
./run pnpm test
```

----------------------------------------

TITLE: Older Renderer State Diagram Syntax
DESCRIPTION: Shows the syntax for defining a state diagram using the legacy 'stateDiagram' directive, illustrating compatibility with older Mermaid renderers. Defines the same states and transitions as earlier examples.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
stateDiagram
    [*] --> Still
    Still --> [*]

    Still --> Moving
    Moving --> Still
    Moving --> Crash
    Crash --> [*]
```

----------------------------------------

TITLE: Installing pnpm and Setting Node.js Version (Host Setup)
DESCRIPTION: Installs the pnpm package manager using a curl script and sets the global Node.js version to 20 using `pnpm env`. This is part of the host environment setup requirements.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_3

LANGUAGE: bash
CODE:
```
curl -fsSL https://get.pnpm.io/install.sh | sh -
pnpm env use --global 20
```

----------------------------------------

TITLE: Calculating Rectangle Intersection Points in JavaScript
DESCRIPTION: Demonstrates importing and using the `intersectRect` function from './intersect-rect.js'. This function calculates the intersection point between a rectangular node and another point, requiring the node element and the target point.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import intersectRect from './intersect-rect.js';

const intersection = intersectRect(node, point);
```

----------------------------------------

TITLE: Defining a Rendering Test in Cypress - JavaScript
DESCRIPTION: This JavaScript snippet shows a Cypress test case using `imgSnapshotTest` to verify the correct rendering of a Mermaid state diagram, including forks and joins. It requires Cypress, the `imgSnapshotTest` helper, and Mermaid set up in the project. The function is supplied with a diagram definition and options, and takes a snapshot for regression testing. Inputs are the diagram text and mermaid options; output is a test result and visual snapshot comparison. It assumes a compatible project environment with the relevant libraries installed.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_19

LANGUAGE: JavaScript
CODE:
```
it('should render forks and joins', () => {
  imgSnapshotTest(
    `
    stateDiagram
    state fork_state <<fork>>
      [*] --> fork_state
      fork_state --> State2
      fork_state --> State3

      state join_state <<join>>
      State2 --> join_state
      State3 --> join_state
      join_state --> State4
      State4 --> [*]
    `,
    { logLevel: 0 }
  );
});
```

----------------------------------------

TITLE: Defining Git Branch Naming Convention
DESCRIPTION: Specifies the required naming convention for Git branches: `[type]/[issue_number]_[short-description]`. Types include `feature`, `bug`, `chore`, `docs`.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_14

LANGUAGE: txt
CODE:
```
[feature | bug | chore | docs]/[issue number]_[short-description]
```

----------------------------------------

TITLE: Using Deprecated mermaid.init Method
DESCRIPTION: JavaScript examples showing how to use the deprecated mermaid.init method with different configurations and node selections.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_8

LANGUAGE: javascript
CODE:
```
mermaid.init({ noteMargin: 10 }, '.someOtherClass');
```

LANGUAGE: javascript
CODE:
```
mermaid.init(undefined, $('#someId .yetAnotherClass'));
```

----------------------------------------

TITLE: Registering a New Custom Shape in TypeScript
DESCRIPTION: Illustrates how to register a newly created custom shape (`myNewShape`) within the Mermaid.js system. This involves importing the shape function and adding an entry to the `shapes` configuration object with properties like `semanticName`, `name`, `shortName`, `description`, `aliases`, and the `handler` function.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_3

LANGUAGE: typescript
CODE:
```
import { myNewShape } from './shapes/myNewShape';

const shapes = {
  ...,
  {
    semanticName: 'My Shape',
    name: 'Shape Name',
    shortName: '<short-name>',
    description: '<Description for the shape>',
    aliases: ['<alias-one>', '<al-on>', '<alias-two>', '<al-two>'],
    handler: myNewShape,
  },
};
```

----------------------------------------

TITLE: Defining the ParseOptions Interface in TypeScript
DESCRIPTION: This snippet declares the ParseOptions interface with an optional boolean property suppressErrors, which influences error handling during diagram parsing. It indicates the file's role in configuring parsing behavior for Mermaid.js diagrams, including dependencies from the specified TypeScript file.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/ParseOptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface ParseOptions {
  /**
   * If true, parse will return false instead of throwing an error when the diagram is invalid.
   * The parseError function will not be called.
   */
  suppressErrors?: boolean;
}
```

----------------------------------------

TITLE: Using Ellipse Intersection Algorithm in JavaScript
DESCRIPTION: Shows how to use the ellipse intersection function to calculate the point where an arrow connects with an elliptical shape.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/adding-new-shape.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import intersectEllipse from './intersect-ellipse.js';

const intersection = intersectEllipse(node, rx, ry, point);
```

----------------------------------------

TITLE: Running unit tests (Host)
DESCRIPTION: Executes unit tests for the Mermaid project using pnpm in a host environment. The command `pnpm test` runs all tests while `pnpm test:watch` runs the tests and automatically reruns them when changes are made.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_16

LANGUAGE: sh
CODE:
```
pnpm test
```

LANGUAGE: sh
CODE:
```
pnpm test:watch
```

----------------------------------------

TITLE: Building Mermaid (Docker)
DESCRIPTION: This command builds the Mermaid library and documentation site within the Docker environment. The `./run` script is a wrapper for executing commands inside the Docker container.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_13

LANGUAGE: bash
CODE:
```
./run build
```

----------------------------------------

TITLE: Importing Shape Utility Functions in TypeScript
DESCRIPTION: Imports various helper functions like `labelHelper`, `updateNodeBounds`, `insertPolygonShape`, `getNodeClasses`, `createPathFromPoints`, and `generateFullSineWavePoints` from the local `utils.ts` module. These utilities are designed to assist in the creation and manipulation of SVG shapes within Mermaid.js.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import {
  labelHelper,
  updateNodeBounds,
  insertPolygonShape,
  getNodeClasses,
  createPathFromPoints,
  generateFullSineWavePoints,
} from './utils.ts';
```

----------------------------------------

TITLE: Running Dev Server in Docker - Bash
DESCRIPTION: This Bash command sequence starts the Mermaid development server inside a Docker container using PNPM. Dependencies include Docker installed and the `run` helper script present in the project. The input is the command string; output is the dev server running in an isolated environment, typically used for consistent environments or CI pipelines.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_23

LANGUAGE: Bash
CODE:
```
./run pnpm dev
```

----------------------------------------

TITLE: JavaScript: CSS Styling for a Diagram Element
DESCRIPTION: This JavaScript code defines CSS styles for a diagram element (line) using template literals and theme options. It uses the options parameter to dynamically set the stroke color based on the configured theme.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const getStyles = (options) =>
  `
    .line {
      stroke-width: 1;
      stroke: ${options.lineColor};
      stroke-dasharray: 2;
    }
    // ...
    `;
```

----------------------------------------

TITLE: Repeating User Journey Diagram with Accessibility Metadata in Mermaid-js
DESCRIPTION: This snippet repeats the user journey diagram with identical accessibility labels, illustrating consistent representation of user activity flows with accessible annotations.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_19

LANGUAGE: mermaid
CODE:
```
  journey
      accTitle: My User Journey Diagram
      accDescr: My User Journey Diagram Description

      title My working day
      section Go to work
        Make tea: 5: Me
        Go upstairs: 3: Me
        Do work: 1: Me, Cat
      section Go home
        Go downstairs: 5: Me
        Sit down: 5: Me
```

----------------------------------------

TITLE: Running Mermaid Locally (Docker)
DESCRIPTION: This command starts the development server for Mermaid within the Docker environment. It uses the `./run` script to execute the command inside the Docker container, allowing for local testing of changes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_15

LANGUAGE: bash
CODE:
```
./run dev
```

----------------------------------------

TITLE: Mermaid Documentation Update Workflow Visualization - Mermaid
DESCRIPTION: This Mermaid code snippet draws a flowchart showing the automated pipeline of editing documentation sources in `packages/mermaid/src/docs`, followed by automatic processing and publication to the main `/docs` folder (which is then served on the official website). Used for visualizing the documentation workflow for contributors. Requires Mermaid rendering tool or integration. Inputs are documentation edits; the flowchart visualizes output as published docs.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_25

LANGUAGE: Mermaid
CODE:
```
flowchart LR
  classDef default fill:#fff,color:black,stroke:black

  source["Edit /packages/mermaid/src/docs"] -- automatic processing--> published["View /docs which will be published on Official Website"]
```

----------------------------------------

TITLE: Overview and Purpose of Mermaid Sankey Diagrams
DESCRIPTION: Provides an introduction to the Sankey diagram feature in Mermaid.js, highlighting its use for visualizing flows between nodes such as energy, resources, or waste streams. Explains that the diagram is experimental, with syntax similar to CSV, and supports customization via configuration. No code present, just contextual information.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sankey.md#_snippet_0



----------------------------------------

TITLE: Defining a Repeat of Pie Chart with Accessibility Metadata
DESCRIPTION: This snippet is identical to the previous pie chart, illustrating repeated or similar chart definitions with accessibility labels. It highlights the structure for creating pie charts with labels and data values in Mermaid.js.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_11

LANGUAGE: mermaid
CODE:
```
   pie
      accTitle: My Pie Chart Accessibility Title
      accDescr: My Pie Chart Accessibility Description

    title Key elements in Product X
    "Calcium" : 42.96
    "Potassium" : 50.05
    "Magnesium" : 10.01
    "Iron" :  5
```

----------------------------------------

TITLE: Deprecated Mermaid Configuration via Global Variables
DESCRIPTION: This code shows how to set Mermaid configuration options globally through the 'mermaid' object for backwards compatibility, specifically 'startOnLoad' and 'htmlLabels'. Usage of this method is deprecated in favor of 'mermaid.initialize'. It is kept for legacy support but should be replaced with the configuration API.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
mermaid.startOnLoad = true;
```

----------------------------------------

TITLE: Linking Pull Request to Issue (Markdown)
DESCRIPTION: Provides the Markdown syntax used in GitHub pull request descriptions to automatically link the PR to a specific issue. Using `Resolves #<issue ID here>` helps track work and can automatically close the issue upon merging.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_29

LANGUAGE: markdown
CODE:
```
Resolves #<your issue ID here>
```

----------------------------------------

TITLE: JavaScript: Parsing Text with the Parser
DESCRIPTION: This JavaScript code snippet shows how to parse text using the parser. It calls the `parse` method of the parser with the text to be parsed as an argument.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_4

LANGUAGE: javascript
CODE:
```
flow.parser.parse(text);
```

----------------------------------------

TITLE: Defining UnknownDiagramError Class in TypeScript
DESCRIPTION: This snippet defines the `UnknownDiagramError` class, inheriting from the built-in `Error` class.  It's part of the Mermaid.js library and is used for handling errors related to unknown diagram types. The class includes a constructor that takes a message and overrides the default constructor of the `Error` class.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/classes/UnknownDiagramError.md#_snippet_0



----------------------------------------

TITLE: JavaScript: Data Extraction from the Graph Object
DESCRIPTION: This JavaScript code snippet shows how to extract data from the graph object after parsing. It calls methods on the graph object to retrieve the direction, vertices, and edges of the graph.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_5

LANGUAGE: javascript
CODE:
```
graph.getDirection();
graph.getVertices();
graph.getEdges();
```

----------------------------------------

TITLE: JavaScript Data Extraction
DESCRIPTION: This JavaScript code shows how to extract data from the graph object after parsing is complete. Methods like `getDirection`, `getVertices`, and `getEdges` are used to retrieve the parsed data. This data is typically used by the renderer to generate the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_5

LANGUAGE: javascript
CODE:
```
graph.getDirection();
graph.getVertices();
graph.getEdges();
```

----------------------------------------

TITLE: Showing Custom Markdown Block Syntax (Markdown)
DESCRIPTION: Illustrates the Markdown syntax for creating special formatted blocks like notes, tips, warnings, and dangers using triple backticks (` ``` `) followed by the block type name. This custom syntax is processed during documentation generation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_27

LANGUAGE: markdown
CODE:
```
```note
This is a note
```

```tip
This is a tip
```

```warning
This is a warning
```

```danger
This is a danger alert
```
```

----------------------------------------

TITLE: Publishing a New Release to npm (Shell)
DESCRIPTION: Publishes the Mermaid.js package to the npm registry. Before running this command, the version number in `package.json` should be updated. The command compiles necessary files into the `dist` directory and uploads them. Requires appropriate permissions on npmjs.com.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/index.md#_snippet_3

LANGUAGE: sh
CODE:
```
npm publish
```

----------------------------------------

TITLE: Defining a New Custom Shape Function in TypeScript
DESCRIPTION: Provides a template for creating a new asynchronous custom SVG shape function named `myNewShape`. The function accepts `parent` (SVG element), `node` (data object), and `renderOptions` as arguments, creates a new SVG group (`<g>`) for the shape, assigns a class, and returns the created shape element.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { Node, RenderOptions } from '../../types.ts';

export const myNewShape = async (
  parent: SVGAElement,
  node: Node,
  renderOptions: RenderOptions
) => {
  // Create your shape here
  const shape = parent.insert('g').attr('class', 'my-new-shape');
  // Add other elements or styles as needed
  return shape;
};
```

----------------------------------------

TITLE: Generated HTML for flowchart with single line accessibility in Mermaid
DESCRIPTION: This HTML code is generated from the Mermaid code snippet showing accessibility implementation of a flowchart using accTitle and accDescr keywords.  The SVG includes aria-labelledby and aria-describedby to connect the title and description elements to the SVG, improving accessibility.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_3

LANGUAGE: html
CODE:
```
<svg
  aria-labelledby="chart-title-mermaid_382ee221"
  aria-describedby="chart-desc-mermaid_382ee221"
  aria-roledescription="flowchart-v2"
  xmlns="http://www.w3.org/2000/svg"
  width="100%"
  id="mermaid_382ee221"
>
  <title id="chart-title-mermaid_382ee221">Big decisions</title>
  <desc id="chart-desc-mermaid_382ee221">Bob's Burgers process for making big decisions</desc>
</svg>
```

----------------------------------------

TITLE: JavaScript Parsing Execution
DESCRIPTION: This JavaScript code snippet demonstrates how to execute the parsing process using the `parse` method of the parser. The `text` variable contains the diagram definition that needs to be parsed. After parsing, data can be extracted from the data store.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_4

LANGUAGE: javascript
CODE:
```
flow.parser.parse(text);
```

----------------------------------------

TITLE: Creating Cypress E2E Rendering Test (JavaScript)
DESCRIPTION: Demonstrates how to write an End-to-End rendering test using the `imgSnapshotTest` function within a Cypress test suite. The function takes the diagram text and optional Mermaid configuration, rendering the diagram for visual comparison.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_21

LANGUAGE: js
CODE:
```
it('should render forks and joins', () => {
  imgSnapshotTest(
    `
    stateDiagram
    state fork_state &lt;&lt;fork&gt;&gt;
      [*] --> fork_state
      fork_state --> State2
      fork_state --> State3

      state join_state &lt;&lt;join&gt;&gt;
      State2 --> join_state
      State3 --> join_state
      join_state --> State4
      State4 --> [*]
    `,
    { logLevel: 0 }
  );
});
```

----------------------------------------

TITLE: Registering a New Shape in Mermaid.js
DESCRIPTION: Shows how to register a new shape in the main shapes module, providing semantic name, handler function, and aliases to make it available in diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/adding-new-shape.md#_snippet_3

LANGUAGE: typescript
CODE:
```
import { myNewShape } from './shapes/myNewShape';

const shapes = {
  ...,
  {
    semanticName: 'My Shape',
    name: 'Shape Name',
    shortName: '<short-name>',
    description: '<Description for the shape>',
    aliases: ['<alias-one>', '<al-on>', '<alias-two>', '<al-two>'],
    handler: myNewShape,
  },
};
```

----------------------------------------

TITLE: Running tests using pnpm (Host)
DESCRIPTION: Executes the project's test suite using pnpm in a host environment. This command runs the tests defined in the `package.json` file's `test` script.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_7

LANGUAGE: bash
CODE:
```
pnpm test
```

----------------------------------------

TITLE: JavaScript: Defining parseError Function
DESCRIPTION: This JavaScript code defines the `parseError` function for the parser, which is essential for providing a common way of detecting parse errors for the end-user. It calls `mermaid.parseError` to handle the error reporting.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_1

LANGUAGE: javascript
CODE:
```
exports.parseError = function (err, hash) {
  mermaid.parseError(err, hash);
};
```

----------------------------------------

TITLE: Checking for X11 Server
DESCRIPTION: This command checks if an X11 server is running. It's required for running GUI applications like Cypress within a Docker environment. The output is the value of the `$DISPLAY` environment variable. An empty value indicates that no X11 server is running.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_3

LANGUAGE: bash
CODE:
```
echo $DISPLAY
```

----------------------------------------

TITLE: Edge Data Structure and Arrow Types
DESCRIPTION: Specifies the properties for edges in diagrams, including visual aspects like thickness, pattern, and arrow type. Supports different arrow styles such as cross, point, and circle, which influence how edges are rendered. This data structure is key for customizing edge appearance and behavior within the layout engine.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/dagre-wrapper/GraphObjects.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  "id": "",
  "arrowHead": "",
  "arrowType": "",
  "style": "",
  "labelStyle": "",
  "label": "",
  "labelPos": "",
  "labelType": "",
  "thickness": "normal",
  "pattern": "solid"
}
```

----------------------------------------

TITLE: Starting Documentation Dev Server (Direct Package Path) - Bash
DESCRIPTION: This pair of commands first navigates into the `packages/mermaid` directory, then starts the documentation dev server using PNPM. Assumes mermaid dependencies and scripts are installed. The documentation site will be served locally, typically on http://localhost:3333/. Inputs include relative path navigation; output is the local docs site.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_27

LANGUAGE: Bash
CODE:
```
cd packages/mermaid
pnpm docs:dev
```

----------------------------------------

TITLE: Markers for Diagram Elements
DESCRIPTION: Defines a utility function for inserting markers into diagram elements, such as points, circles, and crosses. Markers influence arrowhead styles and are associated with specific arrowType attributes. This facilitates consistent visual cues across diagrams and supports customization of edge endpoints.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/dagre-wrapper/GraphObjects.md#_snippet_3

LANGUAGE: mermaid
CODE:
```
insertMarkers(el, ['point', 'circle'])
```

----------------------------------------

TITLE: Building Mermaid Library and Docs using pnpm (Docker Setup)
DESCRIPTION: Compiles the Mermaid library and builds the documentation site within the Docker environment using the `./run build` helper script.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_17

LANGUAGE: bash
CODE:
```
./run build
```

----------------------------------------

TITLE: Using Rectangle Intersection Algorithm in JavaScript
DESCRIPTION: Demonstrates how to use the rectangle intersection function to calculate the point where an arrow connects with a rectangular shape.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/adding-new-shape.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import intersectRect from './intersect-rect.js';

const intersection = intersectRect(node, point);
```

----------------------------------------

TITLE: JavaScript Parser Initialization
DESCRIPTION: This JavaScript code demonstrates how to initialize the `yy` object within a parser with a data object (`db`). This allows the parser to store the data encountered during parsing within the `db` object, which is then used by the renderer. The `yy` object provides a communication channel between the parser and the data storage mechanism.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const parser = exampleParser.parser;
parser.yy = db;
```

----------------------------------------

TITLE: Repeat of Example Mermaid Quadrant Chart
DESCRIPTION: This is an identical snippet to the previous one, serving as an example to show consistent syntax or to emphasize usage. It redefines the same chart with the same axes, quadrants, and data points.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/quadrantChart.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
quadrantChart
    title Reach and engagement of campaigns
    x-axis Low Reach --> High Reach
    y-axis Low Engagement --> High Engagement
    quadrant-1 We should expand
    quadrant-2 Need to promote
    quadrant-3 Re-evaluate
    quadrant-4 May be improved
    Campaign A: [0.3, 0.6]
    Campaign B: [0.45, 0.23]
    Campaign C: [0.57, 0.69]
    Campaign D: [0.78, 0.34]
    Campaign E: [0.40, 0.34]
    Campaign F: [0.35, 0.78]
```

----------------------------------------

TITLE: Building Mermaid locally (Docker)
DESCRIPTION: Builds the Mermaid library and documentation site using pnpm within a Docker environment.  This command compiles the source code and generates the necessary files for running the application, invoked using the `./run` script.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_13

LANGUAGE: bash
CODE:
```
./run build
```

----------------------------------------

TITLE: Example of Using SVG Shape Utilities in TypeScript
DESCRIPTION: Demonstrates basic usage of the shape utilities to insert a polygon shape and add a label inside a SVG container.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/adding-new-shape.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { labelHelper, insertPolygonShape } from './utils.ts';

const svgContainer = document.getElementById('svgContainer');

// Insert a polygon shape
insertPolygonShape(svgContainer /* shape-specific parameters */);

// Create and insert a label inside the shape
labelHelper(svgContainer /* label-specific parameters */);
```

----------------------------------------

TITLE: MermaidConfig Interface Property: packet
DESCRIPTION: Defines the packet configuration option. Configures settings specific to packet diagrams. This utilizes a PacketDiagramConfig object to define the diagram specific configuration settings.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_30

LANGUAGE: typescript
CODE:
```
packet?: `PacketDiagramConfig`
```

----------------------------------------

TITLE: MermaidConfig Interface Property: c4
DESCRIPTION: Defines the c4 configuration option. This property configures settings specific to C4 diagrams in Mermaid. Uses C4DiagramConfig to define diagram specific configuration settings.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_4

LANGUAGE: typescript
CODE:
```
c4?: `C4DiagramConfig`
```

----------------------------------------

TITLE: Calculating Polygon Intersection Points in JavaScript
DESCRIPTION: Illustrates importing and using the `intersectPolygon` function from './intersect-polygon.js'. This function calculates the intersection point between a polygon node and another point, requiring the node element, an array of points defining the polygon (`polyPoints`), and the target point.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import intersectPolygon from './intersect-polygon.js';

const intersection = intersectPolygon(node, polyPoints, point);
```

----------------------------------------

TITLE: JavaScript CSS Styling Example
DESCRIPTION: This JavaScript code snippet shows an example of defining CSS styles for a diagram element ('.line') within a Mermaid theme. It demonstrates how to use theme options (e.g., `options.lineColor`) to customize the appearance of diagram elements. This is crucial for consistent and customizable styling of diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const getStyles = (options) =>
  `
    .line {
      stroke-width: 1;
      stroke: ${options.lineColor};
      stroke-dasharray: 2;
    }
    // ...
    `;
```

----------------------------------------

TITLE: Making the run script executable
DESCRIPTION: Modifies the permissions of the `./run` script to make it executable. This is necessary to run the script directly, which provides aliases for Docker Compose commands.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_4

LANGUAGE: bash
CODE:
```
chmod +x run
```

----------------------------------------

TITLE: Checking for Running X11 Server (Docker Setup)
DESCRIPTION: Checks if an X11 server is running by echoing the `$DISPLAY` environment variable. This is an optional step for Docker setup, required only if running GUI applications like Cypress within Docker.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_4

LANGUAGE: bash
CODE:
```
echo $DISPLAY
```

----------------------------------------

TITLE: Langium-based Parser Flow Sequence Diagram
DESCRIPTION: A Mermaid sequence diagram illustrating the flow of the Langium-based parser from the initial package call through various processing components to the final AST generation.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/parser/README.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
actor Package
participant Module
participant TokenBuilder
participant Lexer
participant Parser
participant ValueConverter


Package ->> Module: Create services
Module ->> TokenBuilder: Override or/and<br>reorder rules
TokenBuilder ->> Lexer: Read the string and transform<br>it into a token stream
Lexer ->> Parser: Parse token<br>stream into AST
Parser ->> ValueConverter: Clean/modify tokenized<br>rules returned value
ValueConverter -->> Package: Return AST
```

----------------------------------------

TITLE: Common Renderer Utility Functions
DESCRIPTION: Lists placeholder functions `getDirection` and `getClasses` that are intended to be implemented by the database or rendering context. These functions provide layout directions and class management, aiding in consistent rendering logic across different diagram types.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/dagre-wrapper/GraphObjects.md#_snippet_4



----------------------------------------

TITLE: Defining Diagram-Specific CSS Styles in Mermaid.js
DESCRIPTION: Example of a `getStyles` function typically located in a diagram-specific `styles.js` file (e.g., `src/diagrams/myDiagram/styles.js`). This function accepts a theme `options` object and returns a CSS string, often using template literals, to style the diagram's elements based on the theme variables (e.g., `options.lineColor`).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const getStyles = (options) =>
  `
    .line {
      stroke-width: 1;
      stroke: ${options.lineColor};
      stroke-dasharray: 2;
    }
    // ...
    `;
```

----------------------------------------

TITLE: Running Cypress Tests for Shape Rendering
DESCRIPTION: Commands for installing dependencies and running Cypress tests to validate shape rendering in different scenarios, with option to update test snapshots.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/adding-new-shape.md#_snippet_7

LANGUAGE: bash
CODE:
```
pnpm install
cypress open --env updateSnapshots=true
```

----------------------------------------

TITLE: JavaScript: Setting up the Parser as a Separate Module
DESCRIPTION: This JavaScript code snippet demonstrates how to set up the parser as a separate module. It requires the graph database and the flow parser, and then assigns the graph database to the parser's `yy` object.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const graph = require('./graphDb');
const flow = require('./parser/flow');
flow.parser.yy = graph;
```

----------------------------------------

TITLE: Starting Documentation Dev Server (Root Filtered) - Bash
DESCRIPTION: This Bash command starts the documentation site's development server for just the mermaid package using PNPM's filter feature. Requires Node.js, PNPM, and all dependencies installed. Outputs a hot-reloading local dev server for documentation updates. Used for previewing documentation during changes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_26

LANGUAGE: Bash
CODE:
```
pnpm --filter mermaid run docs:dev
```

----------------------------------------

TITLE: Running Unit Tests in Watch Mode (Host)
DESCRIPTION: This command executes the unit tests in watch mode using pnpm in the host environment. The tests will automatically re-run whenever a file changes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_17

LANGUAGE: sh
CODE:
```
pnpm test:watch
```

----------------------------------------

TITLE: Installing packages using pnpm (Docker)
DESCRIPTION: Installs the project dependencies using the pnpm package manager within a Docker environment. This command executes `pnpm install` through the `./run` script, leveraging the Docker Compose setup.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_6

LANGUAGE: bash
CODE:
```
./run pnpm install
```

----------------------------------------

TITLE: Installing packages using pnpm (Host)
DESCRIPTION: Installs the project dependencies using the pnpm package manager in a host environment. This command reads the `package.json` file and installs the specified dependencies.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_5

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Making the `./run` script executable
DESCRIPTION: This command modifies the permissions of the `run` script, making it executable. The `run` script provides convenient aliases for Docker Compose commands.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_5

LANGUAGE: bash
CODE:
```
chmod +x run
```

----------------------------------------

TITLE: Running Tests (Docker)
DESCRIPTION: This command executes the test suite for the Mermaid project using pnpm within the Docker environment. The `./run` script is used to execute the command inside the Docker container.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_8

LANGUAGE: bash
CODE:
```
./run pnpm test
```

----------------------------------------

TITLE: Creating a New Branch
DESCRIPTION: This command creates a new branch based on the current branch (usually `develop`) and switches to it. Replace `docs/2910_update-contributing-guidelines` with your desired branch name following the specified naming convention.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_10

LANGUAGE: bash
CODE:
```
git checkout -b docs/2910_update-contributing-guidelines
```

----------------------------------------

TITLE: Creating a new Git branch
DESCRIPTION: Creates and switches to a new Git branch named `docs/2910_update-contributing-guidelines`. This branch is intended for making changes related to updating the contributing guidelines.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_10

LANGUAGE: bash
CODE:
```
git checkout -b docs/2910_update-contributing-guidelines
```

----------------------------------------

TITLE: Creating a New Git Branch for Contribution
DESCRIPTION: Creates and checks out a new Git branch based on the current branch (presumably `develop`) using `git checkout -b`. The example branch name follows the project's naming convention.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_13

LANGUAGE: bash
CODE:
```
git checkout -b docs/2910_update-contributing-guidelines
```

----------------------------------------

TITLE: Cloning the Mermaid Repository
DESCRIPTION: This command clones the forked Mermaid repository from GitHub to the local machine. Replace `git@github.com/your-fork/mermaid` with the actual URL of your forked repository. It's a prerequisite for setting up the local development environment.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone git@github.com/your-fork/mermaid
```

----------------------------------------

TITLE: Enabling X11 Connections Locally Before Docker Test - Bash
DESCRIPTION: This shell command enables local X11 server connections for Dockerized E2E test setup. Useful when running GUI applications (like Cypress) via Docker containers. Requires X11 server available and permissions for local connections. Input is the xhost command; output enables GUI forwarding for containers.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_22

LANGUAGE: Bash
CODE:
```
xhost +local:
```

----------------------------------------

TITLE: Checking for X11 server
DESCRIPTION: Checks if an X11 server is running by echoing the value of the `$DISPLAY` environment variable. This is relevant for running GUI applications like Cypress within a Docker environment.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_3

LANGUAGE: bash
CODE:
```
echo $DISPLAY
```

----------------------------------------

TITLE: Checking out and Updating Develop Branch
DESCRIPTION: These commands switch to the `develop` branch and update it with the latest changes from the remote repository. This ensures the local `develop` branch is up-to-date before creating a new branch.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_9

LANGUAGE: bash
CODE:
```
git checkout develop
git fetch # or `git pull`
```

----------------------------------------

TITLE: Release Process Command for Publishing Mermaid.js Diagrams
DESCRIPTION: This snippet provides guidelines for updating the version number in 'package.json' and executing the 'npm publish' command to publish Mermaid.js diagrams to npmJS. The process involves generating build files in the 'dist' folder before publishing to ensure the latest diagrams are available publicly.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_11

LANGUAGE: bash
CODE:
```
npm version <new-version>

# After updating version number
npm publish

# This command builds the diagrams into the 'dist' folder and publishes the package to https://www.npmjs.com
```

----------------------------------------

TITLE: Installing Project Dependencies using pnpm (Docker Setup)
DESCRIPTION: Installs project dependencies within the Docker environment using the `./run` helper script and `pnpm install`. This command delegates the installation to the appropriate Docker container.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_7

LANGUAGE: bash
CODE:
```
./run pnpm install
```

----------------------------------------

TITLE: Starting the Mermaid Dev Server using Host Machine - Bash
DESCRIPTION: This Bash command uses PNPM to launch the local development server for the Mermaid project. Prerequisites include Node.js and PNPM installed, as well as all Mermaid project dependencies resolved. The main input is the CLI command executed in the project's root. This step is often required before running E2E or UI tests locally. Output is an actively running dev server, accessible for further testing or development.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_20

LANGUAGE: Bash
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: Installing Project Dependencies using PNPM
DESCRIPTION: Shows the command `pnpm install` used to install all necessary project dependencies defined in the package manager configuration (likely `package.json` and `pnpm-lock.yaml`). This step is typically required before running tests or building the project.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_7

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Installing Project Dependencies using pnpm (Host Setup)
DESCRIPTION: Installs all project dependencies defined in the `package.json` files using the `pnpm install` command. This is required for host setup after installing prerequisites.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_5

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: JavaScript: Initializing the yy Object
DESCRIPTION: This JavaScript code shows how the `yy` object is initialized before parsing. It assigns a data object (db) to `parser.yy`, allowing the parser to store data in this object during the parsing process.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const parser = exampleParser.parser;
parser.yy = db;
```

----------------------------------------

TITLE: Branch naming convention
DESCRIPTION: Defines the naming convention for Git branches. The format is `[feature | bug | chore | docs]/[issue number]_[short-description]`. This improves organization and clarity in the repository.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_11

LANGUAGE: txt
CODE:
```
[feature | bug | chore | docs]/[issue number]_[short-description]
```

----------------------------------------

TITLE: JavaScript: Adding Diagram to Themes Object
DESCRIPTION: This JavaScript code demonstrates how to add the diagram-specific styles to the main themes object in `src/styles.js`. It maps the diagram identifier to the `getStyles` function for the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const themes = {
  flowchart,
  'flowchart-v2': flowchart,
  sequence,
  xyzDiagram,
  //...
};
```

----------------------------------------

TITLE: Markdown Documentation Note Box Syntax - Markdown
DESCRIPTION: This Markdown snippet demonstrates the usage of fenced code blocks with `note`, `tip`, `warning`, or `danger` tags to display formatted message boxes in the Mermaid documentation system. It requires adherence to this syntax for proper processing, and is used in guides, alerts, and tips within documentation pages. Inputs are informational or instructional notes, outputs are styled documentation boxes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_29

LANGUAGE: Markdown
CODE:
```
```note
This is a note
```

```tip
This is a tip
```

```warning
This is a warning
```

```danger
This is a danger alert
```
```

----------------------------------------

TITLE: Running Unit Tests (Host)
DESCRIPTION: This command executes the unit tests for the Mermaid project using pnpm in the host environment. This command will execute all the tests once.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_16

LANGUAGE: sh
CODE:
```
pnpm test
```

----------------------------------------

TITLE: Defining configKeys Variable in TypeScript
DESCRIPTION: This snippet defines a constant variable named `configKeys` in TypeScript. This variable is a Set of strings, likely representing valid configuration keys within the Mermaid project.  It is defined within the `defaultConfig.ts` file. The code is auto-generated and should not be edited directly.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/defaultConfig/variables/configKeys.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
const configKeys: Set<string>
```

----------------------------------------

TITLE: Building Mermaid (Host)
DESCRIPTION: This command builds the Mermaid library and documentation site using pnpm in the host development environment. It compiles the source code and generates the necessary files for running Mermaid locally.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_12

LANGUAGE: bash
CODE:
```
pnpm run build
```

----------------------------------------

TITLE: Cloning Forked Mermaid Repository using Git
DESCRIPTION: Clones the user's forked Mermaid repository from GitHub to their local machine using the `git clone` command. This is the first step in obtaining the source code.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_1

LANGUAGE: bash
CODE:
```
git clone git@github.com/your-fork/mermaid
```

----------------------------------------

TITLE: Changing Directory to Mermaid Project
DESCRIPTION: This command changes the current directory in the terminal to the root directory of the cloned Mermaid project. It is a prerequisite for running subsequent commands within the project.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_1

LANGUAGE: bash
CODE:
```
cd mermaid
```

----------------------------------------

TITLE: Installing pnpm and Using Node.js 20
DESCRIPTION: These commands install the pnpm package manager and set the global Node.js version to 20. pnpm is used for managing project dependencies. Node.js version 20 is the recommended version for development.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_2

LANGUAGE: bash
CODE:
```
curl -fsSL https://get.pnpm.io/install.sh | sh -
pnpm env use --global 20
```

----------------------------------------

TITLE: Defining a Cypress diagram rendering test in JavaScript
DESCRIPTION: This code snippet demonstrates a Cypress test that verifies the correct rendering of a Mermaid.js state diagram. The `imgSnapshotTest` function takes diagram text and options, rendering the diagram and comparing snapshots in CI environments to detect unintended changes.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
it('should render forks and joins', () => {
  imgSnapshotTest(
    `
    stateDiagram
    state fork_state &lt;&lt;fork&gt;&gt;
      [*] --> fork_state
      fork_state --> State2
      fork_state --> State3

      state join_state &lt;&lt;join&gt;&gt;
      State2 --> join_state
      State3 --> join_state
      join_state --> State4
      State4 --> [*]
    `,
    { logLevel: 0 }
  );
});
```

----------------------------------------

TITLE: Running ESLint for Code Linting (Shell)
DESCRIPTION: Executes the configured linting process using pnpm. This command typically runs ESLint to check the JavaScript/TypeScript codebase for potential errors, style inconsistencies, and adherence to project coding standards.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/index.md#_snippet_1

LANGUAGE: sh
CODE:
```
pnpm lint
```

----------------------------------------

TITLE: Importing SVG Shape Utilities in TypeScript
DESCRIPTION: Shows how to import the utility functions from the utils.ts file to assist with SVG shape manipulation for consistent rendering.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/adding-new-shape.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import {
  labelHelper,
  updateNodeBounds,
  insertPolygonShape,
  getNodeClasses,
  createPathFromPoints,
  generateFullSineWavePoints,
} from './utils.ts';
```

----------------------------------------

TITLE: Building Mermaid locally (Host)
DESCRIPTION: Builds the Mermaid library and documentation site using pnpm in a host environment.  This command compiles the source code and generates the necessary files for running the application.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_12

LANGUAGE: bash
CODE:
```
pnpm run build
```

----------------------------------------

TITLE: Handling Clusters and Edges in Mermaid.js using Dagre
DESCRIPTION: Provides methods and strategies for managing clusters within diagrams, especially addressing Dagre's limitations regarding edges between clusters. Includes recursive rendering processes and special edge handling with toCluster/fromCluster tags to accurately depict external relationships. Explains how graph transformations convert cluster nodes for layout purposes, with fallbacks when edges cross boundaries.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/dagre-wrapper/GraphObjects.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
flowchart
  subgraph C1
    a --> b
  end
  subgraph C2
    c
  end
  C1 --> C2
```

LANGUAGE: mermaid
CODE:
```
flowchart
  subgraph C1
    a
  end
  subgraph C2
    b
  end
  a --> C2
```

----------------------------------------

TITLE: Running tests using pnpm (Docker)
DESCRIPTION: Executes the project's test suite using pnpm within a Docker environment. This command runs the tests defined in the `package.json` file's `test` script via the `./run` script.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_8

LANGUAGE: bash
CODE:
```
./run pnpm test
```

----------------------------------------

TITLE: JavaScript Theme Object Example
DESCRIPTION: This JavaScript code shows how to add a new diagram's styling function (xyzDiagram) to the main themes object in `src/styles.js`. This step ensures that the new diagram can be styled using Mermaid's theming engine. The function name must match the diagram type's name.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const themes = {
  flowchart,
  'flowchart-v2': flowchart,
  sequence,
  xyzDiagram,
  //...
};
```

----------------------------------------

TITLE: Opening Cypress Test Runner Locally - Bash
DESCRIPTION: This Bash CLI command starts the Cypress test runner for the current Mermaid project. Cypress must be installed and properly configured, and the development server should already be running. Executes the project's Cypress tests interactively, allowing developers to run or debug integration/E2E tests in the browser.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_21

LANGUAGE: Bash
CODE:
```
pnpm cypress:open
```

----------------------------------------

TITLE: Importing Common Accessibility Functions in Mermaid.js
DESCRIPTION: Imports utility functions (`setAccTitle`, `getAccTitle`, `getAccDescription`, `setAccDescription`, `clear`) from the '../../commonDb' module. These functions are used within a diagram's database logic (like flowDb.js) to manage accessible titles and descriptions, which are later inserted into the rendered SVG.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import {
  setAccTitle,
  getAccTitle,
  getAccDescription,
  setAccDescription,
  clear as commonClear,
} from '../../commonDb';
```

----------------------------------------

TITLE: Executing the Test Suite (Shell)
DESCRIPTION: Runs the project's automated test suite using pnpm. This command executes predefined tests to verify the functionality and correctness of the codebase. For manual testing, the user can open the `dist/index.html` file in a web browser.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/index.md#_snippet_2

LANGUAGE: sh
CODE:
```
pnpm test
```

----------------------------------------

TITLE: Using Polygon Intersection Algorithm in JavaScript
DESCRIPTION: Shows how to use the polygon intersection function to calculate the point where an arrow connects with a polygon shape.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/adding-new-shape.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import intersectPolygon from './intersect-polygon.js';

const intersection = intersectPolygon(node, polyPoints, point);
```

----------------------------------------

TITLE: JISON Grammar Example: Storing Data During Parsing
DESCRIPTION: This JISON grammar snippet demonstrates how to store data encountered during parsing. It shows how to define grammar rules and associate actions that call methods on a data object (yy) to store the parsed information. This object is then used by the renderer to create the diagram.  It defines a call to the setTitle method in the data object when parsing, and the title keyword is encountered.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_0

LANGUAGE: jison
CODE:
```
statement
	: 'participant' actor  { $$='actor'; }
	| signal               { $$='signal'; }
	| note_statement       { $$='note';  }
	| 'title' message      { yy.setTitle($2);  }
	;
```

----------------------------------------

TITLE: Documentation and Declaration of getSiteConfig() Function in Mermaid's TypeScript Code
DESCRIPTION: This snippet introduces the getSiteConfig() function, detailing its return type, location, and purpose. It also highlights related functions such as setSiteConfig() and emphasizes the function's role in fetching the current site configuration which adheres to the MermaidConfig interface. It's primarily used within the Mermaid configuration module to access global settings.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/config/functions/getSiteConfig.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
>
**Warning**
>
> ## THIS IS AN AUTOGENERATED FILE. DO NOT EDIT.
>
> ## Please edit the corresponding file in [/packages/mermaid/src/docs/config/setup/config/functions/getSiteConfig.md](../../../../../packages/mermaid/src/docs/config/setup/config/functions/getSiteConfig.md).

[**mermaid**](../../README.md)

---

# Function: getSiteConfig()

> **getSiteConfig**(): [`MermaidConfig`](../../mermaid/interfaces/MermaidConfig.md)

Defined in: [packages/mermaid/src/config.ts:96](https://github.com/mermaid-js/mermaid/blob/master/packages/mermaid/src/config.ts#L96)

## getSiteConfig

| Function      | Description                                       | Type        | Values                           |
| ------------- | ------------------------------------------------- | ----------- | -------------------------------- |
| setSiteConfig | Returns the current siteConfig base configuration | Get Request | Returns Any Values in siteConfig |

**Notes**: Returns **any** values in siteConfig.

## Returns

[`MermaidConfig`](../../mermaid/interfaces/MermaidConfig.md)

The siteConfig
```

----------------------------------------

TITLE: JISON Grammar: Accessibility Title and Description
DESCRIPTION: This JISON grammar defines the syntax for accessible titles and descriptions within a diagram. It uses lexical grammar rules to identify and extract the title and description values, which are then stored using the `setTitle` and `setAccDescription` functions.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_6

LANGUAGE: jison
CODE:
```

* lexical grammar */
%lex
%x acc_title
%x acc_descr
%x acc_descr_multiline

%%
accTitle\s*":"\s*                                { this.begin("acc_title");return 'acc_title'; }
<acc_title>(?!\n|;|#)*[^\n]*                     { this.popState(); return "acc_title_value"; }
accDescr\s*":"\s*                                { this.begin("acc_descr");return 'acc_descr'; }
<acc_descr>(?!\n|;|#)*[^\n]*                     { this.popState(); return "acc_descr_value"; }
accDescr\s*"{"\s*                                { this.begin("acc_descr_multiline");}
<acc_descr_multiline>[\}]                        { this.popState(); }
<acc_descr_multiline>[^\}]*                      return "acc_descr_multiline_value";

statement
    : acc_title acc_title_value  { $$=$2.trim();yy.setTitle($$); }
    | acc_descr acc_descr_value  { $$=$2.trim();yy.setAccDescription($$); }
    | acc_descr_multiline_value { $$=$1.trim();yy.setAccDescription($$); }

```

----------------------------------------

TITLE: MermaidConfig Interface Property: handDrawnSeed
DESCRIPTION: Defines the seed to be used for diagrams styled with the handDrawn look. A seed is useful for automated tests. The default value is 0 which gives a random seed. The input is a number.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_18

LANGUAGE: typescript
CODE:
```
handDrawnSeed?: `number`
```

----------------------------------------

TITLE: Example Usage of Shape Utilities in TypeScript
DESCRIPTION: Demonstrates a basic usage pattern for imported shape utilities. It shows how to get an SVG container element and then call `insertPolygonShape` to add a shape and `labelHelper` to add a label within that shape, passing necessary parameters.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { labelHelper, insertPolygonShape } from './utils.ts';

const svgContainer = document.getElementById('svgContainer');

// Insert a polygon shape
insertPolygonShape(svgContainer /* shape-specific parameters */);

// Create and insert a label inside the shape
labelHelper(svgContainer /* label-specific parameters */);
```

----------------------------------------

TITLE: Defining LayoutLoaderDefinition Interface for Mermaid Rendering in TypeScript
DESCRIPTION: This TypeScript interface defines LayoutLoaderDefinition which contains properties for managing layout loaders in Mermaid diagrams. The optional 'algorithm' string specifies the layout algorithm's name, 'loader' refers to the LayoutLoader instance responsible for applying the layout, and 'name' is a mandatory string used as an identifier. Implementing this interface ensures consistent handling of different layout strategies within Mermaid's rendering utility. Dependencies include the LayoutLoader type and Mermaid's rendering context.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/LayoutLoaderDefinition.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface LayoutLoaderDefinition {
	name: string;
	loader: LayoutLoader;
	algorithm?: string;
}
```

----------------------------------------

TITLE: No code snippets available
DESCRIPTION: This file comprises release notes and change logs without embedded code snippets.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid-layout-elk/CHANGELOG.md#_snippet_0



----------------------------------------

TITLE: Defining SVG Type Alias in TypeScript
DESCRIPTION: Type alias for SVG elements using d3.Selection. This type represents an SVG element selection that can be manipulated with D3.js library functions when rendering mermaid diagrams.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/type-aliases/SVG.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
SVG: d3.Selection<SVGSVGElement, unknown, Element | null, unknown>
```

----------------------------------------

TITLE: Mermaid.js Sanitize Function (TypeScript)
DESCRIPTION: This TypeScript code snippet defines the `sanitize()` function within the Mermaid.js library. The function takes an `options` parameter, which is of type `any`, and modifies it directly to sanitize the configuration settings.  The function's primary goal is to prevent malicious overrides of security-sensitive `siteConfig` keys. The function does not have a return value.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/config/functions/sanitize.md#_snippet_0



----------------------------------------

TITLE: Parse Function TypeScript Declaration
DESCRIPTION: TypeScript declaration of the main parse function exported by the Mermaid Parser package. It accepts a diagram type and text string as input, and returns a typed DiagramAST.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/parser/README.md#_snippet_0

LANGUAGE: typescript
CODE:
```
declare function parse<T extends DiagramAST>(
  diagramType: keyof typeof initializers,
  text: string
): T;
```

----------------------------------------

TITLE: JISON Grammar Example - Accessibility Title/Description
DESCRIPTION: This JISON grammar defines the syntax for accessibility title and description using keywords like `accTitle` and `accDescr`. It also shows how these values are associated with setter functions (e.g., `setTitle`, `setAccDescription`) in the `yy` object, enabling the storage and utilization of accessibility information.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_6

LANGUAGE: jison
CODE:
```

* lexical grammar */
%lex
%x acc_title
%x acc_descr
%x acc_descr_multiline

%%
accTitle\s*":"\s*                                { this.begin("acc_title");return 'acc_title'; }
<acc_title>(?!\n|;|#)*[^\n]*                     { this.popState(); return "acc_title_value"; }
accDescr\s*":"\s*                                { this.begin("acc_descr");return 'acc_descr'; }
<acc_descr>(?!\n|;|#)*[^\n]*                     { this.popState(); return "acc_descr_value"; }
accDescr\s*"{"\s*                                { this.begin("acc_descr_multiline");}
<acc_descr_multiline>[\}]                        { this.popState(); }
<acc_descr_multiline>[^\}]*                      return "acc_descr_multiline_value";

statement
    : acc_title acc_title_value  { $$=$2.trim();yy.setTitle($$); }
    | acc_descr acc_descr_value  { $$=$2.trim();yy.setAccDescription($$); }
    | acc_descr_multiline_value { $$=$1.trim();yy.setAccDescription($$); }

```

----------------------------------------

TITLE: JISON Grammar Example - Statement Definition
DESCRIPTION: This JISON grammar snippet defines the structure of a 'statement' in a diagram language. It shows how different keywords (e.g., 'participant', 'signal', 'note', 'title') are associated with specific actions and data storage mechanisms within the parser. The code also shows the calling of a setTitle method when the title keyword is encountered. It is important for defining the syntax and structure of the diagram.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_0

LANGUAGE: jison
CODE:
```
statement
	: 'participant' actor  { $$='actor'; }
	| signal               { $$='signal'; }
	| note_statement       { $$='note';  }
	| 'title' message      { yy.setTitle($2);  }
	;
```

----------------------------------------

TITLE: MermaidConfig Interface Property: deterministicIds
DESCRIPTION: This option controls how node IDs in the generated SVG are created. When set to `true`, the IDs are based on a seed, making them deterministic, which is ideal for version control.  The input is a boolean.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_7

LANGUAGE: typescript
CODE:
```
deterministicIds?: `boolean`
```

----------------------------------------

TITLE: MermaidConfig Interface Property: architecture
DESCRIPTION: Defines the architecture configuration option. This property configures the settings specific to architecture diagrams rendered using Mermaid. The property is an optional ArchitectureDiagramConfig object.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_1

LANGUAGE: typescript
CODE:
```
architecture?: `ArchitectureDiagramConfig`
```

----------------------------------------

TITLE: Calculating Ellipse Intersection Points in JavaScript
DESCRIPTION: Shows how to import and use the `intersectEllipse` function from './intersect-ellipse.js' to calculate the intersection point between an ellipse node and another point. Requires the node element, ellipse radii (rx, ry), and the target point as input parameters.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import intersectEllipse from './intersect-ellipse.js';

const intersection = intersectEllipse(node, rx, ry, point);
```

----------------------------------------

TITLE: Mermaid Diagram Type Configuration Options in TypeScript
DESCRIPTION: Type definitions for various diagram type configurations in Mermaid.js, including sequence, state, pie, timeline, and other diagram types. Each diagram type has its specific configuration interface.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_34

LANGUAGE: TypeScript
CODE:
```
sequence?: SequenceDiagramConfig
```

LANGUAGE: TypeScript
CODE:
```
state?: StateDiagramConfig
```

LANGUAGE: TypeScript
CODE:
```
pie?: PieDiagramConfig
```

LANGUAGE: TypeScript
CODE:
```
timeline?: TimelineDiagramConfig
```

LANGUAGE: TypeScript
CODE:
```
requirement?: RequirementDiagramConfig
```

LANGUAGE: TypeScript
CODE:
```
quadrantChart?: QuadrantChartConfig
```

LANGUAGE: TypeScript
CODE:
```
xyChart?: XYChartConfig
```

LANGUAGE: TypeScript
CODE:
```
sankey?: SankeyDiagramConfig
```

LANGUAGE: TypeScript
CODE:
```
radar?: RadarDiagramConfig
```

----------------------------------------

TITLE: Navigating to the Mermaid project directory
DESCRIPTION: Changes the current directory to the `mermaid` project folder. This command is essential for executing subsequent commands within the context of the Mermaid project.
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_1

LANGUAGE: bash
CODE:
```
cd mermaid
```

----------------------------------------

TITLE: Mermaid Gantt Tick Interval Regex Pattern
DESCRIPTION: This JavaScript regex pattern is used internally by Mermaid to validate the format of the `tickInterval` value. It expects a number followed by a time unit (millisecond, second, minute, hour, day, week, or month).
SOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_10

LANGUAGE: javascript
CODE:
```
/^([1-9][0-9]*)(millisecond|second|minute|hour|day|week|month)$/;
```