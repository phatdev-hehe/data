TITLE: Initializing Chart.js Instance - JavaScript
DESCRIPTION: This snippet demonstrates the basic syntax for creating a new Chart.js instance, typically associated with a canvas element and configuration options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// For example:
const myLineChart = new Chart(ctx, config);
```

----------------------------------------

TITLE: Installing Chart.js via npm
DESCRIPTION: This command uses the Node Package Manager (npm) to download and install the Chart.js library into your project's node_modules directory. This is the recommended method for most projects.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/installation.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install chart.js
```

----------------------------------------

TITLE: Instantiating a Chart.js Bar Chart
DESCRIPTION: This JavaScript snippet gets the canvas element by its ID and creates a new Chart.js instance. It configures a bar chart with specific labels, data, and scales options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/index.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const ctx = document.getElementById('myChart');

new Chart(ctx, {
  type: 'bar',
  data: {
    labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
    datasets: [{
      label: '# of Votes',
      data: [12, 19, 3, 5, 2, 3],
      borderWidth: 1
    }]
  },
  options: {
    scales: {
      y: {
        beginAtZero: true
      }
    }
  }
});
```

----------------------------------------

TITLE: Basic Chart.js Configuration Structure (Javascript)
DESCRIPTION: Demonstrates the fundamental structure of the Chart.js configuration object, including the `type`, `data`, `options`, and `plugins` properties. This object is passed to the Chart constructor to define the chart's appearance and behavior.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/index.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'line',
  data: {},
  options: {},
  plugins: []
}
```

----------------------------------------

TITLE: Including Chart.js from CDN
DESCRIPTION: This HTML snippet includes the Chart.js library in the page by loading it from a Content Delivery Network (CDN), making the `Chart` object available globally.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/index.md#_snippet_2

LANGUAGE: html
CODE:
```
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
```

----------------------------------------

TITLE: Specify Min and Max for Chart.js Scales
DESCRIPTION: Improve performance by explicitly setting the 'min' and 'max' values for scales. This prevents Chart.js from having to compute the data range automatically, saving computation time.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/performance.md#_snippet_1

LANGUAGE: javascript
CODE:
```
new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        scales: {
            x: {
                type: 'time',
                min: new Date('2019-01-01').valueOf(),
                max: new Date('2019-12-31').valueOf()
            },
            y: {
                type: 'linear',
                min: 0,
                max: 100
            }
        }
    }
});
```

----------------------------------------

TITLE: Configuring Per-Dataset Colors in Chart.js (JavaScript)
DESCRIPTION: This code shows how to define specific background and border colors for individual datasets within a Chart.js data configuration object. This allows different datasets in the same chart to have distinct visual styles, overriding the global default colors.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/colors.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const data = {
  labels: ['A', 'B', 'C'],
  datasets: [
    {
      label: 'Dataset 1',
      data: [1, 2, 3],
      borderColor: '#36A2EB',
      backgroundColor: '#9BD0F5'
    },
    {
      label: 'Dataset 2',
      data: [2, 3, 4],
      borderColor: '#FF6384',
      backgroundColor: '#FFB1C1'
    }
  ]
};
```

----------------------------------------

TITLE: Configure Project Dependencies with package.json
DESCRIPTION: Sets up a Node.js project with necessary dependencies like Chart.js, Cube.js client, and Parcel for bundling, along with development scripts for running and building the application.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "chartjs-example",
  "version": "1.0.0",
  "license": "MIT",
  "scripts": {
    "dev": "parcel src/index.html",
    "build": "parcel build src/index.html"
  },
  "devDependencies": {
    "parcel": "^2.6.2"
  },
  "dependencies": {
    "@cubejs-client/core": "^0.31.0",
    "chart.js": "^4.0.0"
  }
}
```

----------------------------------------

TITLE: Creating Multiple Y Axes and Linking Datasets in Chart.js (JavaScript)
DESCRIPTION: This code demonstrates how to create and configure multiple Y axes in a Chart.js chart. It shows defining two distinct linear Y axes with unique IDs and positions ('left' and 'right') within the `scales` option, and then linking individual datasets to these specific axes using their respective `yAxisID` properties.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/index.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
const myChart = new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            data: [20, 50, 100, 75, 25, 0],
            label: 'Left dataset',

            // This binds the dataset to the left y axis
            yAxisID: 'left-y-axis'
        }, {
            data: [0.1, 0.5, 1.0, 2.0, 1.5, 0],
            label: 'Right dataset',

            // This binds the dataset to the right y axis
            yAxisID: 'right-y-axis'
        }],
        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
    },
    options: {
        scales: {
            'left-y-axis': {
                type: 'linear',
                position: 'left'
            },
            'right-y-axis': {
                type: 'linear',
                position: 'right'
            }
        }
    }
});
```

----------------------------------------

TITLE: Creating a Bar Chart with Chart.js in HTML
DESCRIPTION: This snippet provides a complete HTML page structure including a canvas element, the Chart.js library loaded from a CDN, and JavaScript code to instantiate and configure a basic bar chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/index.md#_snippet_0

LANGUAGE: html
CODE:
```
<div>
  <canvas id="myChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  const ctx = document.getElementById('myChart');

  new Chart(ctx, {
    type: 'bar',
    data: {
      labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
      datasets: [{
        label: '# of Votes',
        data: [12, 19, 3, 5, 2, 3],
        borderWidth: 1
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
</script>
```

----------------------------------------

TITLE: Using Primitive Array Data in Chart.js Dataset (JavaScript)
DESCRIPTION: Demonstrates how to use a simple array of numbers for dataset data in Chart.js. Values are paired with corresponding entries in the main `labels` array based on index.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/data-structures.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const cfg = {
  type: 'bar',
  data: {
    datasets: [{
      data: [20, 10],
    }],
    labels: ['a', 'b']
  }
}
```

----------------------------------------

TITLE: Creating Quadrant Plugin - Chart.js JavaScript
DESCRIPTION: This snippet defines a custom Chart.js plugin named 'quadrants'. The `beforeDraw` hook is used to render four colored rectangles representing the quadrants before the datasets are drawn. It calculates the pixel coordinates for the x and y axes at value 0 and uses these to define the boundaries for filling the four quadrant areas with colors specified in the plugin options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/plugins/quadrants.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const quadrants = {
  id: 'quadrants',
  beforeDraw(chart, args, options) {
    const {ctx, chartArea: {left, top, right, bottom}, scales: {x, y}} = chart;
    const midX = x.getPixelForValue(0);
    const midY = y.getPixelForValue(0);
    ctx.save();
    ctx.fillStyle = options.topLeft;
    ctx.fillRect(left, top, midX - left, midY - top);
    ctx.fillStyle = options.topRight;
    ctx.fillRect(midX, top, right - midX, midY - top);
    ctx.fillStyle = options.bottomRight;
    ctx.fillRect(midX, midY, right - midX, bottom - midY);
    ctx.fillStyle = options.bottomLeft;
    ctx.fillRect(left, midY, midX - left, bottom - midY);
    ctx.restore();
  }
};
```

----------------------------------------

TITLE: Configure Basic Bar Chart Data and Options in Chart.js
DESCRIPTION: This snippet demonstrates how to set up the data and configuration for a basic bar chart using Chart.js. It includes defining labels, dataset values, background and border colors, and basic chart options like setting the y-axis to start at zero.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/bar.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    label: 'My First Dataset',
    data: [65, 59, 80, 81, 56, 55, 40],
    backgroundColor: [
      'rgba(255, 99, 132, 0.2)',
      'rgba(255, 159, 64, 0.2)',
      'rgba(255, 205, 86, 0.2)',
      'rgba(75, 192, 192, 0.2)',
      'rgba(54, 162, 235, 0.2)',
      'rgba(153, 102, 255, 0.2)',
      'rgba(201, 203, 207, 0.2)'
    ],
    borderColor: [
      'rgb(255, 99, 132)',
      'rgb(255, 159, 64)',
      'rgb(255, 205, 86)',
      'rgb(75, 192, 192)',
      'rgb(54, 162, 235)',
      'rgb(153, 102, 255)',
      'rgb(201, 203, 207)'
    ],
    borderWidth: 1
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'bar',
  data: data,
  options: {
    scales: {
      y: {
        beginAtZero: true
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config
};
```

----------------------------------------

TITLE: Import All Chart.js Features (Bundlers)
DESCRIPTION: Shows the quick start method for integrating Chart.js with bundlers like Webpack or Rollup. Importing the 'auto' package includes all controllers, elements, scales, and plugins, simplifying setup when bundle size optimization is not the primary concern.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/integration.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import Chart from 'chart.js/auto';
```

----------------------------------------

TITLE: Chart.js Line Chart Configuration with Linear Scale Step Size (JavaScript)
DESCRIPTION: This JavaScript code block defines the necessary components for a Chart.js line chart example. It includes an array of actions for interactive chart manipulation, the initial data structure with labels and datasets, and the main chart configuration object which specifies the chart type, data, and options, notably setting a fixed step size of 50 for the y-axis linear scale ticks.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/linear-step-size.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: dsColor,
        borderColor: dsColor,
        data: Utils.numbers({count: data.labels.length, min: 0, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(0, 100));
        }m

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.CHART_COLORS.red,
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.CHART_COLORS.blue,
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      tooltip: {
        mode: 'index',
        intersect: false
      },
      title: {
        display: true,
        text: 'Chart.js Line Chart'
      }
    },
    hover: {
      mode: 'index',
      intersect: false
    },
    scales: {
      x: {
        title: {
          display: true,
          text: 'Month'
        }
      },
      y: {
        title: {
          display: true,
          text: 'Value'
        },
        min: 0,
        max: 100,
        ticks: {
          // forces step size to be 50 units
          stepSize: 50
        }
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Defining Scriptable Options in Chart.js
DESCRIPTION: This JavaScript snippet demonstrates how to use functions for Chart.js options (scriptable options). The `color` function dynamically sets the color based on the data value and index using the `context` object. The `borderColor` function uses the `context` and `options` arguments to resolve the value of another scriptable option (`color`) and modify it.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/options.md#_snippet_0

LANGUAGE: javascript
CODE:
```
color: function(context) {
    const index = context.dataIndex;
    const value = context.dataset.data[index];
    return value < 0 ? 'red' :  // draw negative values in red
        index % 2 ? 'blue' :    // else, alternate values in blue and green
        'green';
},
borderColor: function(context, options) {
    const color = options.color; // resolve the value of another scriptable option: 'red', 'blue' or 'green'
    return Chart.helpers.color(color).lighten(0.2);
}
```

----------------------------------------

TITLE: Configuring Chart.js Scatter Plot with Multiple Y-Axes and Actions - JavaScript
DESCRIPTION: This snippet defines the data structure, chart configuration, and interactive actions for a Chart.js scatter chart. It sets up two datasets, each bound to a different linear Y-axis positioned on the left and right sides of the chart. The actions array provides functions to randomize data, add/remove datasets, and add/remove data points dynamically.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/scatter-multi-axis.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, rmin: 1, rmax: 1, min: -100, max: 100};

const data = {
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.bubbles(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      yAxisID: 'y',
    },
    {
      label: 'Dataset 2',
      data: Utils.bubbles(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.orange,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.orange, 0.5),
      yAxisID: 'y2',
    }
  ]
};
// </block:setup>

// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.bubbles({count: DATA_COUNT, rmin: 1, rmax: 1, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const chartData = chart.data;
      const dsColor = Utils.namedColor(chartData.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (chartData.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        data: Utils.bubbles({count: DATA_COUNT, rmin: 1, rmax: 1, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const chartData = chart.data;
      if (chartData.datasets.length > 0) {

        for (let index = 0; index < chartData.datasets.length; ++index) {
          chartData.datasets[index].data.push(Utils.bubbles({count: 1, rmin: 1, rmax: 1, min: -100, max: 100})[0]);
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
// </block:actions>

// <block:config:0>
const config = {
  type: 'scatter',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Scatter Multi Axis Chart'
      }
    },
    scales: {
      y: {
        type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
        position: 'left',
        ticks: {
          color: Utils.CHART_COLORS.red
        }
      },
      y2: {
        type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
        position: 'right',
        reverse: true,
        ticks: {
          color: Utils.CHART_COLORS.blue
        },
        grid: {
          drawOnChartArea: false // only want the grid lines for one axis to show up
        }
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Creating a Basic Scatter Chart Configuration in Chart.js
DESCRIPTION: This snippet defines the data structure with x and y coordinates for a scatter dataset and configures a Chart.js chart of type 'scatter' with a linear x-axis. It demonstrates the required data format and basic chart setup.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/scatter.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
// <block:setup:1>
const data = {
  datasets: [{
    label: 'Scatter Dataset',
    data: [{
      x: -10,
      y: 0
    }, {
      x: 0,
      y: 10
    }, {
      x: 10,
      y: 5
    }, {
      x: 0.5,
      y: 5.5
    }],
    backgroundColor: 'rgb(255, 99, 132)'
  }],
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'scatter',
  data: data,
  options: {
    scales: {
      x: {
        type: 'linear',
        position: 'bottom'
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Configuring Multiple Datasets - Chart.js (JSX)
DESCRIPTION: Shows how to structure the `datasets` array in a Chart.js configuration to display different subsets of data. It uses `filter` and `map` to process the input `data` array, creating separate datasets for items where width equals height, width is greater than height, and width is less than height. This enables distinct visual representation and interactive toggling for each group.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_11

LANGUAGE: JSX
CODE:
```
        datasets: [
          {
            label: 'width = height',
            data: data
              .filter(row => row.width === row.height)
              .map(row => ({
                x: row.width,
                y: row.height,
                r: row.count
              }))
          },
          {
            label: 'width > height',
            data: data
              .filter(row => row.width > row.height)
              .map(row => ({
                x: row.width,
                y: row.height,
                r: row.count
              }))
          },
          {
            label: 'width < height',
            data: data
              .filter(row => row.width < row.height)
              .map(row => ({
                x: row.width,
                y: row.height,
                r: row.count
              }))
          }
        ]
```

----------------------------------------

TITLE: Initialize and Render a Basic Chart.js Bar Chart
DESCRIPTION: Imports the Chart.js library using the 'auto' path, defines sample data, retrieves the canvas element by its ID, and creates a new bar chart instance with the provided data and configuration.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import Chart from 'chart.js/auto'

(async function() {
  const data = [
    { year: 2010, count: 10 },
    { year: 2011, count: 20 },
    { year: 2012, count: 15 },
    { year: 2013, count: 25 },
    { year: 2014, count: 22 },
    { year: 2015, count: 30 },
    { year: 2016, count: 28 },
  ];

  new Chart(
    document.getElementById('acquisitions'),
    {
      type: 'bar',
      data: {
        labels: data.map(row => row.year),
        datasets: [
          {
            label: 'Acquisitions by year',
            data: data.map(row => row.count)
          }
        ]
      }
    }
  );
})();
```

----------------------------------------

TITLE: Configuring Chart.js Line Chart with Min/Max Scale (JavaScript)
DESCRIPTION: This snippet defines the configuration object for a Chart.js line chart. It specifies the chart type, links the data, enables responsiveness, adds a title, and configures the y-axis scale to have a fixed minimum of 10 and a maximum of 50.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/linear-min-max.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Min and Max Settings'
      }
    },
    scales: {
      y: {
        min: 10,
        max: 50,
      }
    }
  },
};
```

----------------------------------------

TITLE: Defining and Using Custom Tooltip Positioner (JavaScript)
DESCRIPTION: Shows how to register a custom function with `Chart.Tooltip.positioners` to control tooltip placement and how to configure a chart's tooltip options to use the new positioner mode.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/tooltip.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import { Tooltip } from 'chart.js';

/**
 * Custom positioner
 * @function Tooltip.positioners.myCustomPositioner
 * @param elements {Chart.Element[]} the tooltip elements
 * @param eventPosition {Point} the position of the event in canvas coordinates
 * @returns {TooltipPosition} the tooltip position
 */
Tooltip.positioners.myCustomPositioner = function(elements, eventPosition) {
    // A reference to the tooltip model
    const tooltip = this;

    /* ... */

    return {
        x: 0,
        y: 0
        // You may also include xAlign and yAlign to override those tooltip options.
    };
};

// Then, to use it...
new Chart(ctx, {
    data,
    options: {
        plugins: {
            tooltip: {
                position: 'myCustomPositioner'
            }
        }
    }
})
```

----------------------------------------

TITLE: Initializing Chart.js Bar Chart with Custom Options (JavaScript)
DESCRIPTION: This snippet initializes a new Chart.js bar chart instance, targeting the DOM element with the ID 'acquisitions'. It configures the chart options to disable animation and hide both the legend and tooltips via the `plugins` configuration. The chart uses provided `data` for labels and a single dataset.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_3

LANGUAGE: javascript
CODE:
```
  new Chart(
    document.getElementById('acquisitions'),
    {
      type: 'bar',
      options: {
        animation: false,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            enabled: false
          }
        }
      },
      data: {
        labels: data.map(row => row.year),
        datasets: [
          {
            label: 'Acquisitions by year',
            data: data.map(row => row.count)
          }
        ]
      }
    }
  );
```

----------------------------------------

TITLE: Defining Custom Tooltip Footer Callback in Chart.js (JavaScript)
DESCRIPTION: Defines a callback function for the Chart.js tooltip footer. It iterates through the tooltip items, sums their 'y' parsed values, and returns a formatted string 'Sum: ' followed by the total.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/content.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const footer = (tooltipItems) => {
  let sum = 0;

  tooltipItems.forEach(function(tooltipItem) {
    sum += tooltipItem.parsed.y;
  });
  return 'Sum: ' + sum;
};
```

----------------------------------------

TITLE: Getting Chart.js Image as Base64 (Specified Type/Quality) - JavaScript
DESCRIPTION: Optionally, provide the MIME type and quality (for JPEG/WEBP) to .toBase64Image() to control the format and compression of the generated base64 image string.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_10

LANGUAGE: javascript
CODE:
```
myLineChart.toBase64Image('image/jpeg', 1)
// => returns a jpeg data url in the highest quality of the canvas
```

----------------------------------------

TITLE: Configuring Chart.js Line Chart with Styling
DESCRIPTION: This JavaScript code block sets up the data and configuration for a Chart.js line chart. It defines three datasets with different fill and borderDash properties to showcase various line styles. The configuration object specifies the chart type, data, and options for responsiveness, title, interaction, and scales.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/styling.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: DATA_COUNT});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Unfilled',
      fill: false,
      backgroundColor: Utils.CHART_COLORS.blue,
      borderColor: Utils.CHART_COLORS.blue,
      data: Utils.numbers(NUMBER_CFG),
    }, {
      label: 'Dashed',
      fill: false,
      backgroundColor: Utils.CHART_COLORS.green,
      borderColor: Utils.CHART_COLORS.green,
      borderDash: [5, 5],
      data: Utils.numbers(NUMBER_CFG),
    }, {
      label: 'Filled',
      backgroundColor: Utils.CHART_COLORS.red,
      borderColor: Utils.CHART_COLORS.red,
      data: Utils.numbers(NUMBER_CFG),
      fill: true,
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Line Chart'
      },
    },
    interaction: {
      mode: 'index',
      intersect: false
    },
    scales: {
      x: {
        display: true,
        title: {
          display: true,
          text: 'Month'
        }
      },
      y: {
        display: true,
        title: {
          display: true,
          text: 'Value'
        }
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Forcing Time Unit to Month in Chart.js
DESCRIPTION: This snippet demonstrates how to configure a Chart.js time axis to always display data grouped by month. It sets the `time.unit` option within the scale configuration to `'month'`. This is useful when you want a consistent time granularity regardless of the data density.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/time.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        scales: {
            x: {
                type: 'time',
                time: {
                    unit: 'month'
                }
            }
        }
    }
});
```

----------------------------------------

TITLE: Create Pie Chart Data and Config (Chart.js)
DESCRIPTION: This snippet defines the dataset and configuration object required to render a Pie chart using Chart.js. It includes labels, data values, background colors for the segments, and sets the chart type to 'pie'.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/doughnut.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
// <block:setup:1>
const data = {
  labels: [
    'Red',
    'Blue',
    'Yellow'
  ],
  datasets: [{
    label: 'My First Dataset',
    data: [300, 50, 100],
    backgroundColor: [
      'rgb(255, 99, 132)',
      'rgb(54, 162, 235)',
      'rgb(255, 205, 86)'
    ],
    hoverOffset: 4
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'pie',
  data: data,
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Create Initial Chart.js Bubble Chart (JSX)
DESCRIPTION: Imports Chart.js and an API function ('getDimensions'), fetches data asynchronously, and creates a new bubble chart instance targeting the 'dimensions' canvas. It maps data properties (width, height, count) to the bubble's x, y, and r (radius) properties respectively.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_7

LANGUAGE: jsx
CODE:
```
import Chart from 'chart.js/auto'
import { getDimensions } from './api'

(async function() {
  const data = await getDimensions();

  new Chart(
    document.getElementById('dimensions'),
    {
      type: 'bubble',
      data: {
        labels: data.map(x => x.year),
        datasets: [
          {
            label: 'Dimensions',
            data: data.map(row => ({
              x: row.width,
              y: row.height,
              r: row.count
            }))
          }
        ]
      }
    }
  );
})();
```

----------------------------------------

TITLE: Check Plugin Enabled (Chart.js)
DESCRIPTION: Checks if a plugin with the specified ID has been successfully registered and enabled for the chart instance. Returns a boolean value indicating the plugin's status. This is useful for conditionally applying logic based on plugin availability.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_21

LANGUAGE: javascript
CODE:
```
chart.isPluginEnabled('filler');
```

----------------------------------------

TITLE: Load Chart.js via Script Tag (HTML/JS)
DESCRIPTION: Demonstrates how to include Chart.js directly in an HTML file using standard script tags. It shows loading the UMD build of the library and then initializing a new Chart instance using inline JavaScript.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/integration.md#_snippet_0

LANGUAGE: html
CODE:
```
<script src="path/to/chartjs/dist/chart.umd.js"></script>
<script>
    const myChart = new Chart(ctx, {...});
</script>
```

----------------------------------------

TITLE: Creating a Basic Mixed Chart (Bar and Line) in Chart.js
DESCRIPTION: This snippet demonstrates how to initialize a Chart.js instance with multiple datasets, each specifying a different chart type ('bar' and 'line'). This allows rendering a single chart that combines different visual representations.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/mixed.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const mixedChart = new Chart(ctx, {
    data: {
        datasets: [{
            type: 'bar',
            label: 'Bar Dataset',
            data: [10, 20, 30, 40]
        }, {
            type: 'line',
            label: 'Line Dataset',
            data: [50, 50, 50, 50],
        }],
        labels: ['January', 'February', 'March', 'April']
    },
    options: options
});
```

----------------------------------------

TITLE: Static: Register Components (Chart.js)
DESCRIPTION: A static method on the `Chart` class used to globally register chart components like plugins, axis types, and chart types. Components registered this way are available to all chart instances created afterwards. Multiple components can be registered in a single call.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_23

LANGUAGE: javascript
CODE:
```
import { Chart, Tooltip, LinearScale, PointElement, BubbleController } from 'chart.js';

Chart.register(Tooltip, LinearScale, PointElement, BubbleController);
```

----------------------------------------

TITLE: Add/Remove Data in Chart.js (JavaScript)
DESCRIPTION: Provides functions to add a new data point and label to a chart or remove the last data point and label. Both functions iterate through datasets and update the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/updates.md#_snippet_0

LANGUAGE: javascript
CODE:
```
function addData(chart, label, newData) {
    chart.data.labels.push(label);
    chart.data.datasets.forEach((dataset) => {
        dataset.data.push(newData);
    });
    chart.update();
}

function removeData(chart) {
    chart.data.labels.pop();
    chart.data.datasets.forEach((dataset) => {
        dataset.data.pop();
    });
    chart.update();
}
```

----------------------------------------

TITLE: Configure Chart.js Line Chart Options (JS)
DESCRIPTION: Sets up the configuration object for a Chart.js line chart. It specifies the chart type, links the prepared data, configures the title plugin, interaction settings, and defines the x and y axis scales with titles and suggested ranges.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/interpolation.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Line Chart - Cubic interpolation mode'
      },
    },
    interaction: {
      intersect: false,
    },
    scales: {
      x: {
        display: true,
        title: {
          display: true
        }
      },
      y: {
        display: true,
        title: {
          display: true,
          text: 'Value'
        },
        suggestedMin: -10,
        suggestedMax: 200
      }
    }
  },
};
```

----------------------------------------

TITLE: Configuring Dataset Fill Modes in Chart.js
DESCRIPTION: Demonstrates various ways to configure the `fill` option for datasets in Chart.js, including filling to origin, other datasets by index (absolute and relative), disabling fill, and filling to a specific axis value.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/area.md#_snippet_0

LANGUAGE: javascript
CODE:
```
new Chart(ctx, {
    data: {
        datasets: [
            {fill: 'origin'},      // 0: fill to 'origin'
            {fill: '+2'},          // 1: fill to dataset 3
            {fill: 1},             // 2: fill to dataset 1
            {fill: false},         // 3: no fill
            {fill: '-2'},          // 4: fill to dataset 2
            {fill: {value: 25}}    // 5: fill to axis value 25
        ]
    }
});
```

----------------------------------------

TITLE: Registering Chart.js Components (v3)
DESCRIPTION: When using Chart.js 3 as an npm module with bundlers like Webpack or Rollup, you must explicitly import and register the necessary controllers, elements, scales, and plugins to enable tree-shaking. This snippet demonstrates how to import and register common components like LineController, LineElement, PointElement, LinearScale, and Title before creating a chart instance.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/migration/v3-migration.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { Chart, LineController, LineElement, PointElement, LinearScale, Title } from 'chart.js'

Chart.register(LineController, LineElement, PointElement, LinearScale, Title);

const chart = new Chart(ctx, {
    type: 'line',
    // data: ...
    options: {
        plugins: {
            title: {
                display: true,
                text: 'Chart Title'
            }
        },
        scales: {
            x: {
                type: 'linear'
            },
            y: {
                type: 'linear'
            }
        }
    }
})
```

----------------------------------------

TITLE: Configuring 'point' Interaction Mode in Chart.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to configure a Chart.js chart to use the 'point' interaction mode. This mode finds all chart items that intersect the point of interaction.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/interactions.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        interaction: {
            mode: 'point'
        }
    }
});
```

----------------------------------------

TITLE: Updating Chart.js Data and Rendering - JavaScript
DESCRIPTION: After modifying the chart's data object, call .update() to trigger a re-render. This method updates scales, legends, and animates changes based on the new data.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_2

LANGUAGE: javascript
CODE:
```
myLineChart.data.datasets[0].data[2] = 50; // Would update the first dataset's value of 'March' to be 50
myLineChart.update(); // Calling update now animates the position of March from 90 to 50.
```

----------------------------------------

TITLE: Defining Canvas Container for Chart.js
DESCRIPTION: This HTML snippet defines a `div` container for the `canvas` element where the chart will be rendered. Using a container is recommended for responsiveness.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/index.md#_snippet_1

LANGUAGE: html
CODE:
```
<div>
  <canvas id="myChart"></canvas>
</div>
```

----------------------------------------

TITLE: Using Object Array with Custom Key for Pie/Doughnut Charts (JavaScript)
DESCRIPTION: Shows how to use an array of objects with custom properties for pie, doughnut, radar, or polarArea charts. The `parsing.key` option points to the property containing the value for the slice/segment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/data-structures.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const cfg = {
  type: 'doughnut',
  data: {
    datasets: [{
      data: [{id: 'Sales', nested: {value: 1500}}, {id: 'Purchases', nested: {value: 500}}]
    }]
  },
  options: {
    parsing: {
      key: 'nested.value'
    }
  }
}
```

----------------------------------------

TITLE: Setup Chart.js Data and Labels (JavaScript)
DESCRIPTION: Defines the data structure for a Chart.js chart, including labels and two datasets. One dataset uses numerical data for a linear scale, and the other uses categorical data ('ON', 'OFF') for a category scale. It also sets up utility functions for data generation and colors.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/stacked.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: [10, 30, 50, 20, 25, 44, -10],
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.CHART_COLORS.red,
    },
    {
      label: 'Dataset 2',
      data: ['ON', 'ON', 'OFF', 'ON', 'OFF', 'OFF', 'ON'],
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.CHART_COLORS.blue,
      stepped: true,
      yAxisID: 'y2',
    }
  ]
};
// </block:setup>
```

----------------------------------------

TITLE: Configuring Radar Chart Options (JavaScript)
DESCRIPTION: Defines several helper functions for styling chart elements based on context (`ctx`). Sets up the main `config` object for a radar chart, specifying type, data, and various options for plugins, lines, and points using the defined helper functions. Requires `Utils` and the `data` object.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/radar.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function getLineColor(ctx) {
  return Utils.color(ctx.datasetIndex);
}

function alternatePointStyles(ctx) {
  const index = ctx.dataIndex;
  return index % 2 === 0 ? 'circle' : 'rect';
}

function makeHalfAsOpaque(ctx) {
  return Utils.transparentize(getLineColor(ctx));
}

function make20PercentOpaque(ctx) {
  return Utils.transparentize(getLineColor(ctx), 0.8);
}

function adjustRadiusBasedOnData(ctx) {
  const v = ctx.parsed.y;
  return v < 10 ? 5
    : v < 25 ? 7
    : v < 50 ? 9
    : v < 75 ? 11
    : 15;
}

const config = {
  type: 'radar',
  data: data,
  options: {
    plugins: {
      legend: false,
      tooltip: false,
    },
    elements: {
      line: {
        backgroundColor: make20PercentOpaque,
        borderColor: getLineColor,
      },
      point: {
        backgroundColor: getLineColor,
        hoverBackgroundColor: makeHalfAsOpaque,
        radius: adjustRadiusBasedOnData,
        pointStyle: alternatePointStyles,
        hoverRadius: 15,
      }
    }
  }
};
```

----------------------------------------

TITLE: Setup Chart Data and Labels in Chart.js
DESCRIPTION: Sets up the data and labels for the chart. Generates date labels and creates a data object containing three datasets (two bar, one line) with random number data, using utility functions for colors and data generation.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/time-combo.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = [];

for (let i = 0; i < DATA_COUNT; ++i) {
  labels.push(Utils.newDate(i));
}

const data = {
  labels: labels,
  datasets: [{
    type: 'bar',
    label: 'Dataset 1',
    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    borderColor: Utils.CHART_COLORS.red,
    data: Utils.numbers(NUMBER_CFG),
  }, {
    type: 'bar',
    label: 'Dataset 2',
    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    borderColor: Utils.CHART_COLORS.blue,
    data: Utils.numbers(NUMBER_CFG),
  }, {
    type: 'line',
    label: 'Dataset 3',
    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.green, 0.5),
    borderColor: Utils.CHART_COLORS.green,
    fill: false,
    data: Utils.numbers(NUMBER_CFG),
  }]
};
// </block:setup>
```

----------------------------------------

TITLE: Setup Chart Data (Stacked Line Chart)
DESCRIPTION: Initializes the data structure for the Chart.js line chart. It defines the number of data points, generates month labels, and creates four datasets, each with a label, random numerical data, border and background colors, and fill enabled.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/area/line-stacked.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'My First dataset',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.CHART_COLORS.red,
      fill: true
    },
    {
      label: 'My Second dataset',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.CHART_COLORS.blue,
      fill: true
    },
    {
      label: 'My Third dataset',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.green,
      backgroundColor: Utils.CHART_COLORS.green,
      fill: true
    },
    {
      label: 'My Fourth dataset',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.yellow,
      backgroundColor: Utils.CHART_COLORS.yellow,
      fill: true
    }
  ]
};
```

----------------------------------------

TITLE: Initialize Chart Data and Constants (Chart.js, JavaScript)
DESCRIPTION: Sets up constants for data count and number generation configuration. Defines the initial data structure for the chart, including labels and two datasets with specific styling and animation properties.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/animations/drop.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      animations: {
        y: {
          duration: 2000,
          delay: 500
        }
      },
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      fill: 1,
      tension: 0.5
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
```

----------------------------------------

TITLE: Define Chart Configuration Object (JavaScript)
DESCRIPTION: Defines the main configuration object for a Chart.js line chart, specifying the chart type, data, and options like responsiveness and legend position.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/linear-gradient.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
    }
  },
};
```

----------------------------------------

TITLE: Setup HTML Canvas for Chart.js
DESCRIPTION: Adds a canvas element with a specific width and an ID ('dimensions') for Chart.js to render into, and includes the JavaScript module file ('dimensions.js') that will contain the chart code.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_6

LANGUAGE: html
CODE:
```
<div style="width: 500px;"><canvas id="dimensions"></canvas></div><br/>

<script type="module" src="dimensions.js"></script>
```

----------------------------------------

TITLE: Setting Up Chart.js Data Configuration (JavaScript)
DESCRIPTION: Configures the data structure for a Chart.js line chart. It defines the number of data points, value range, labels (months), and two datasets with random numbers, colors, and transparency.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/content.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100, decimals: 0};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    },
  ]
};
```

----------------------------------------

TITLE: Setup Chart.js Data Configuration (JavaScript)
DESCRIPTION: This block defines the data structure for the chart. It includes labels (months) and two datasets, each with generated numerical data, border color, and background color using utility functions.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/position.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    },
  ]
};
```

----------------------------------------

TITLE: Setup Chart Data - Chart.js - JS
DESCRIPTION: Sets up the initial data structure for the horizontal bar chart. It defines the number of data points, configuration for number generation, labels (months), and two datasets with generated data, border colors, and background colors.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/horizontal.md#_snippet_1

LANGUAGE: js
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
```

----------------------------------------

TITLE: Setting Up Chart.js Data (JavaScript)
DESCRIPTION: Initializes chart data, including labels and multiple datasets with random numbers, using utility functions.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/stacked.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.red,
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.blue,
    },
    {
      label: 'Dataset 3',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.green,
    },
  ]
};
// </block:setup>
```

----------------------------------------

TITLE: Creating Custom HTML Legend Plugin - Chart.js - JavaScript
DESCRIPTION: Defines a Chart.js plugin (`htmlLegendPlugin`) that generates an HTML legend. It includes a helper function (`getOrCreateLegendList`) to manage the legend container and dynamically creates list items (`<li>`) for each dataset/item, handling click events to toggle visibility and updating the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/legend/html.md#_snippet_0

LANGUAGE: js
CODE:
```
const getOrCreateLegendList = (chart, id) => {
  const legendContainer = document.getElementById(id);
  let listContainer = legendContainer.querySelector('ul');

  if (!listContainer) {
    listContainer = document.createElement('ul');
    listContainer.style.display = 'flex';
    listContainer.style.flexDirection = 'row';
    listContainer.style.margin = 0;
    listContainer.style.padding = 0;

    legendContainer.appendChild(listContainer);
  }

  return listContainer;
};

const htmlLegendPlugin = {
  id: 'htmlLegend',
  afterUpdate(chart, args, options) {
    const ul = getOrCreateLegendList(chart, options.containerID);

    // Remove old legend items
    while (ul.firstChild) {
      ul.firstChild.remove();
    }

    // Reuse the built-in legendItems generator
    const items = chart.options.plugins.legend.labels.generateLabels(chart);

    items.forEach(item => {
      const li = document.createElement('li');
      li.style.alignItems = 'center';
      li.style.cursor = 'pointer';
      li.style.display = 'flex';
      li.style.flexDirection = 'row';
      li.style.marginLeft = '10px';

      li.onclick = () => {
        const {type} = chart.config;
        if (type === 'pie' || type === 'doughnut') {
          // Pie and doughnut charts only have a single dataset and visibility is per item
          chart.toggleDataVisibility(item.index);
        } else {
          chart.setDatasetVisibility(item.datasetIndex, !chart.isDatasetVisible(item.datasetIndex));
        }
        chart.update();
      };

      // Color box
      const boxSpan = document.createElement('span');
      boxSpan.style.background = item.fillStyle;
      boxSpan.style.borderColor = item.strokeStyle;
      boxSpan.style.borderWidth = item.lineWidth + 'px';
      boxSpan.style.display = 'inline-block';
      boxSpan.style.flexShrink = 0;
      boxSpan.style.height = '20px';
      boxSpan.style.marginRight = '10px';
      boxSpan.style.width = '20px';

      // Text
      const textContainer = document.createElement('p');
      textContainer.style.color = item.fontColor;
      textContainer.style.margin = 0;
      textContainer.style.padding = 0;
      textContainer.style.textDecoration = item.hidden ? 'line-through' : '';

      const text = document.createTextNode(item.text);
      textContainer.appendChild(text);

      li.appendChild(boxSpan);
      li.appendChild(textContainer);
      ul.appendChild(li);
    });
  }
};
```

----------------------------------------

TITLE: Accessible Canvas with ARIA Attributes (HTML)
DESCRIPTION: This HTML snippet demonstrates how to make a canvas element accessible by adding the `role="img"` attribute and a descriptive `aria-label` attribute. These attributes provide an accessible name and role for screen readers, allowing them to understand the purpose of the canvas.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/accessibility.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<canvas id="goodCanvas1" width="400" height="100" aria-label="Hello ARIA World" role="img"></canvas>
```

----------------------------------------

TITLE: Registering Global Plugin in Chart.js
DESCRIPTION: Illustrates how to register a plugin globally using `Chart.register()`. Globally registered plugins are automatically applied to all Chart.js instances unless explicitly disabled.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/plugins.md#_snippet_2

LANGUAGE: javascript
CODE:
```
Chart.register({
    // plugin implementation
});
```

----------------------------------------

TITLE: Configuring Chart.js Bar Chart (JavaScript)
DESCRIPTION: Defines the main `config` object for initializing a Chart.js chart. It specifies the chart `type` as 'bar', references the prepared `data` object, and includes an empty `options` object, allowing the chart to use default options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/programmatic-events.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'bar',
  data: data,
  options: {
  },
};
```

----------------------------------------

TITLE: Configuring Line Chart Options (JavaScript)
DESCRIPTION: Defines functions for scriptable options like line color, point style, opacity, and radius based on data values, and configures the chart options object including plugins and element styling.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/line.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// <block:options:0>
function getLineColor(ctx) {
  return Utils.color(ctx.datasetIndex);
}

function alternatePointStyles(ctx) {
  const index = ctx.dataIndex;
  return index % 2 === 0 ? 'circle' : 'rect';
}

function makeHalfAsOpaque(ctx) {
  return Utils.transparentize(getLineColor(ctx));
}

function adjustRadiusBasedOnData(ctx) {
  const v = ctx.parsed.y;
  return v < 10 ? 5
    : v < 25 ? 7
    : v < 50 ? 9
    : v < 75 ? 11
    : 15;
}

const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      legend: false,
      tooltip: true,
    },
    elements: {
      line: {
        fill: false,
        backgroundColor: getLineColor,
        borderColor: getLineColor,
      },
      point: {
        backgroundColor: getLineColor,
        hoverBackgroundColor: makeHalfAsOpaque,
        radius: adjustRadiusBasedOnData,
        pointStyle: alternatePointStyles,
        hoverRadius: 15,
      }
    }
  }
};
// </block:options>
```

----------------------------------------

TITLE: Configuring Basic Line Chart Data and Options (Chart.js)
DESCRIPTION: This snippet defines the data structure (labels and datasets) and the basic configuration object for a Chart.js line chart. It includes sample data and specifies the chart type as 'line'.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/line.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    label: 'My First Dataset',
    data: [65, 59, 80, 81, 56, 55, 40],
    fill: false,
    borderColor: 'rgb(75, 192, 192)',
    tension: 0.1
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Configuring Chart with External Tooltip - Chart.js JavaScript
DESCRIPTION: Defines the main configuration object for the Chart.js line chart. It specifies the chart type ('line'), links the data object, sets interaction mode, and configures the tooltip plugin to use the custom `externalTooltipHandler` function instead of the default.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/html.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    interaction: {
      mode: 'index',
      intersect: false,
    },
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Line Chart - External Tooltips'
      },
      tooltip: {
        enabled: false,
        position: 'nearest',
        external: externalTooltipHandler
      }
    }
  }
};
```

----------------------------------------

TITLE: Format Chart.js Axis Ticks with Units (JSX)
DESCRIPTION: Adds a 'callback' function within the 'ticks' configuration for both the x and y axes. This function is executed for each tick value, formatting it by dividing by 100 and appending ' m' to display the units in meters.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_10

LANGUAGE: jsx
CODE:
```
// ...
  new Chart(
    document.getElementById('dimensions'),
    {
      type: 'bubble',
      options: {
        aspectRatio: 1,
        scales: {
          x: {
            max: 500,
            ticks: {
              callback: value => `${value / 100} m`
            }
          },
          y: {
            max: 500,
            ticks: {
              callback: value => `${value / 100} m`
            }
          }
        }
      },

// ...
```

----------------------------------------

TITLE: Configuring Plugin Options in Chart.js
DESCRIPTION: Shows the structure for configuring options for individual plugins within the chart's `options.plugins` object. Options are nested under the plugin's unique ID.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/plugins.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    options: {
        foo: { ... },           // chart 'foo' option
        plugins: {
            p1: {
                foo: { ... },   // p1 plugin 'foo' option
                bar: { ... }
            },
            p2: {
                foo: { ... },   // p2 plugin 'foo' option
                bla: { ... }
            }
        }
    }
});
```

----------------------------------------

TITLE: Setting Up Data for Chart.js Bar Chart (JavaScript)
DESCRIPTION: Defines constants and the `data` object structure required for a Chart.js bar chart. It includes labels and two datasets with generated numerical data, specifying colors and hover styles. This object is a prerequisite for configuring the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/programmatic-events.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      hoverBorderWidth: 5,
      hoverBorderColor: 'green',
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      hoverBorderWidth: 5,
      hoverBorderColor: 'green',
    }
  ]
};
```

----------------------------------------

TITLE: Example Chart.js Bar Dataset Configuration
DESCRIPTION: This snippet provides an example of configuring specific properties within a Chart.js bar chart dataset. It shows how to set barPercentage, barThickness, maxBarThickness, minBarLength, and the data array for a dataset.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/bar.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
data: {
    datasets: [{
        barPercentage: 0.5,
        barThickness: 6,
        maxBarThickness: 8,
        minBarLength: 2,
        data: [10, 20, 30, 40, 50, 60, 70]
    }]
};
```

----------------------------------------

TITLE: Configure Combined Bar/Line Chart (JavaScript)
DESCRIPTION: Defines the chart configuration object, specifying the chart type as 'bar', linking the previously defined data, and setting options for responsiveness, legend position, and a chart title.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/combo-bar-line.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'bar',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Combined Line/Bar Chart'
      }
    }
  },
};
```

----------------------------------------

TITLE: Setting Up Chart Data and Labels (Chart.js, JavaScript)
DESCRIPTION: Defines constants for data count and configuration, generates labels (months) using a utility function, and creates the chart data object with multiple datasets populated using utility functions for numbers and colors.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/animations/delay.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.red,
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.blue,
    },
    {
      label: 'Dataset 3',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.green,
    },
  ]
};
```

----------------------------------------

TITLE: Setting Up Chart Data and Labels (JS)
DESCRIPTION: Initializes constants for data count, generates labels using a utility function, and creates the main data object with a dataset using the generated logarithmic numbers.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/log.md#_snippet_1

LANGUAGE: js
CODE:
```
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: logNumbers(DATA_COUNT),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.CHART_COLORS.red,
      fill: false,
    },
  ]
};
// </block:setup>
```

----------------------------------------

TITLE: Setup Initial Chart Data (Chart.js, JavaScript)
DESCRIPTION: Sets up the initial data structure for the Chart.js line chart, including the number of data points, configuration for random number generation, labels (months), and two datasets with random data, borders, and background colors.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/line.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
```

----------------------------------------

TITLE: Configuring Chart.js Line Chart with Custom Tooltip (JavaScript)
DESCRIPTION: Defines the main configuration object for a Chart.js line chart. It specifies the chart type, links the data object, configures interaction settings, and integrates the custom 'footer' callback into the tooltip options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/content.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    interaction: {
      intersect: false,
      mode: 'index',
    },
    plugins: {
      tooltip: {
        callbacks: {
          footer: footer,
        }
      }
    }
  }
};
```

----------------------------------------

TITLE: Set Chart.js Axis Maximums (JSX)
DESCRIPTION: Updates the chart options to configure the x and y scales. It sets the 'max' property for both axes to 500, overriding the default auto-scaling to ensure a consistent range regardless of the data distribution.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_9

LANGUAGE: jsx
CODE:
```
// ...
  new Chart(
    document.getElementById('dimensions'),
    {
      type: 'bubble',
      options: {
        aspectRatio: 1,
        scales: {
          x: {
            max: 500
          },
          y: {
            max: 500
          }
        }
      },

// ...
```

----------------------------------------

TITLE: Initializing Chart.js in Web Worker (JavaScript)
DESCRIPTION: Code for the web worker (worker.js) that receives the OffscreenCanvas and chart configuration via the onmessage event. It initializes a Chart.js instance with the received canvas and config, and includes an example of manually resizing the chart within the worker.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/performance.md#_snippet_3

LANGUAGE: javascript
CODE:
```
onmessage = function(event) {
    const {canvas, config} = event.data;
    const chart = new Chart(canvas, config);

    // Resizing the chart must be done manually, since OffscreenCanvas does not include event listeners.
    canvas.width = 100;
    canvas.height = 100;
    chart.resize();
};
```

----------------------------------------

TITLE: Configure Node.js Project for ESM
DESCRIPTION: To use Chart.js 4.x as an ES module, ensure your Node.js project is configured for ES modules by adding "type": "module" to your package.json file. This is necessary for compatibility with the ESM-only nature of Chart.js 4.0.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/migration/v4-migration.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "type": "module"
}
```

----------------------------------------

TITLE: Using Object Data in Chart.js Dataset (JavaScript)
DESCRIPTION: Demonstrates using a single object for dataset data. Property names are used for the index scale (e.g., x), and values for the value scale (e.g., y).
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/data-structures.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const cfg = {
  type: 'line',
  data: {
    datasets: [{
      data: {
        January: 10,
        February: 20
      }
    }]
  }
}
```

----------------------------------------

TITLE: Defining Scatter Chart Data - Chart.js JavaScript
DESCRIPTION: This snippet defines the data structure for a Chart.js scatter chart. It includes two datasets, 'Dataset 1' and 'Dataset 2', each populated with random points generated using a utility function (`Utils.points`) based on the specified count and range (`NUMBER_CFG`). It also sets border and background colors for the datasets.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/plugins/quadrants.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.points(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.points(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
```

----------------------------------------

TITLE: Defining Scatter Chart Data Structure in Chart.js
DESCRIPTION: This snippet illustrates the mandatory data format for Chart.js scatter charts, which requires an array of objects, each containing 'x' and 'y' properties representing the point coordinates.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/scatter.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
data: [{
        x: 10,
        y: 20
    }, {
        x: 15,
        y: 10
    }]
```

----------------------------------------

TITLE: Configure Chart Options (Stacked Line Chart)
DESCRIPTION: Defines the configuration object for the Chart.js instance. It sets the chart type to 'line', links the data object, and specifies various options including responsiveness, plugins (title, tooltip), interaction mode, and axis configurations, notably enabling stacking on the y-axis.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/area/line-stacked.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: (ctx) => 'Chart.js Line Chart - stacked=' + ctx.chart.options.scales.y.stacked
      },
      tooltip: {
        mode: 'index'
      }
    },
    interaction: {
      mode: 'nearest',
      axis: 'x',
      intersect: false
    },
    scales: {
      x: {
        title: {
          display: true,
          text: 'Month'
        }
      },
      y: {
        stacked: true,
        title: {
          display: true,
          text: 'Value'
        }
      }
    }
  }
};
```

----------------------------------------

TITLE: Setting up Chart.js Data and Variables (JavaScript)
DESCRIPTION: Defines constants for data count and number configuration. Initializes the chart labels and the main data object with a dataset, including random data generation and transparent background colors using utility functions.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/polar-area.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const DATA_COUNT = 5;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = ['Red', 'Orange', 'Yellow', 'Green', 'Blue'];
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: [
        Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
        Utils.transparentize(Utils.CHART_COLORS.orange, 0.5),
        Utils.transparentize(Utils.CHART_COLORS.yellow, 0.5),
        Utils.transparentize(Utils.CHART_COLORS.green, 0.5),
        Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      ]
    }
  ]
};
```

----------------------------------------

TITLE: Initializing Scatter Chart Data - Chart.js - JavaScript
DESCRIPTION: Defines the initial dataset configuration for a Chart.js scatter chart, including two datasets with random bubble data generated by a utility function.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/scatter.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, rmin: 1, rmax: 1, min: 0, max: 100};

const data = {
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.bubbles(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.bubbles(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.orange,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.orange, 0.5),
    }
  ]
};
```

----------------------------------------

TITLE: Setting Global Dataset Defaults and Overriding (Javascript)
DESCRIPTION: Demonstrates setting a global default option (`showLine`) for a specific dataset type (`line`) using `Chart.defaults.datasets.line`. It then shows how this default is applied to datasets of that type unless overridden by a property directly on the dataset object within the chart's data configuration.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/index.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// Do not show lines for all datasets by default
Chart.defaults.datasets.line.showLine = false;

// This chart would show a line only for the third dataset
const chart = new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            data: [0, 0],
        }, {
            data: [0, 1]
        }, {
            data: [1, 0],
            showLine: true // overrides the `line` dataset default
        }, {
            type: 'scatter', // 'line' dataset default does not affect this dataset since it's a 'scatter'
            data: [1, 1]
        }]
    }
});
```

----------------------------------------

TITLE: Configuring Time Series X-Axis in Chart.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to create a Chart.js line chart and configure its x-axis to use the 'timeseries' scale type. This scale treats data points as equidistant along the axis. It requires a Chart.js context (`ctx`) and chart data.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/timeseries.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        scales: {
            x: {
                type: 'timeseries',
            }
        }
    }
});
```

----------------------------------------

TITLE: Setup Chart Data and Configuration - Chart.js - JavaScript
DESCRIPTION: Defines constants for data count and number configuration. Sets up the `data` object for the chart, including labels (as Date objects), and three datasets with different data structures (numbers and objects with x/y). Uses utility functions for data generation and styling.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/time-line.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const data = {
  labels: [ // Date Objects
    Utils.newDate(0),
    Utils.newDate(1),
    Utils.newDate(2),
    Utils.newDate(3),
    Utils.newDate(4),
    Utils.newDate(5),
    Utils.newDate(6)
  ],
  datasets: [{
    label: 'My First dataset',
    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    borderColor: Utils.CHART_COLORS.red,
    fill: false,
    data: Utils.numbers(NUMBER_CFG),
  }, {
    label: 'My Second dataset',
    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    borderColor: Utils.CHART_COLORS.blue,
    fill: false,
    data: Utils.numbers(NUMBER_CFG),
  }, {
    label: 'Dataset with point data',
    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.green, 0.5),
    borderColor: Utils.CHART_COLORS.green,
    fill: false,
    data: [{
      x: Utils.newDateString(0),
      y: Utils.rand(0, 100)
    }, {
      x: Utils.newDateString(5),
      y: Utils.rand(0, 100)
    }, {
      x: Utils.newDateString(7),
      y: Utils.rand(0, 100)
    }, {
      x: Utils.newDateString(15),
      y: Utils.rand(0, 100)
    }],
  }]
};
// </block:setup>
```

----------------------------------------

TITLE: Configure Chart.js Line Chart
DESCRIPTION: Defines the main configuration object for the Chart.js instance, specifying the chart type ('line'), linking the data object, and configuring options like plugins (filler, title) and interaction. The title dynamically displays the current fill mode.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/area/line-boundaries.md#_snippet_3

LANGUAGE: javascript
CODE:
```
// <block:config:1>
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      filler: {
        propagate: false,
      },
      title: {
        display: true,
        text: (ctx) => 'Fill: ' + ctx.chart.data.datasets[0].fill
      }
    },
    interaction: {
      intersect: false,
    }
  },
};
// </block:config>
```

----------------------------------------

TITLE: Defining Custom Data Structure with Parsing (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to use a custom data structure (`{key: string, value: number}`) with Chart.js. It demonstrates how to specify the custom data type when importing `ChartData` and configure data parsing using `parsing.xAxisKey` and `parsing.yAxisKey` to map the custom object properties to chart axes.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/data-structures.md#_snippet_10

LANGUAGE: typescript
CODE:
```
import {ChartData} from 'chart.js';

const datasets: ChartData <'bar', {key: string, value: number} []> = {
  datasets: [{
    data: [{key: 'Sales', value: 20}, {key: 'Revenue', value: 10}],
    parsing: {
      xAxisKey: 'key',
      yAxisKey: 'value'
    }
  }],
};
```

----------------------------------------

TITLE: Configure Chart.js Line Chart (JavaScript)
DESCRIPTION: Defines the main configuration object for the Chart.js line chart. It specifies the chart type, links the previously defined data, and sets various options including plugin configurations (filler, title) and interaction settings. The title dynamically displays the current `drawTime`.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/area/line-drawtime.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      filler: {
        propagate: false,
      },
      title: {
        display: true,
        text: (ctx) => 'drawTime: ' + ctx.chart.options.plugins.filler.drawTime
      }
    },
    pointBackgroundColor: '#fff',
    radius: 10,
    interaction: {
      intersect: false,
    }
  },
};
```

----------------------------------------

TITLE: Defining Chart Data Structure - Chart.js JavaScript
DESCRIPTION: Sets up the data object for the Chart.js line chart, including defining the number of data points, generating labels (months), and creating two datasets with random numerical data within a specified range.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/html.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100, decimals: 0};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    },
  ]
};
```

----------------------------------------

TITLE: Configure Chart Options (Time Scale) - Chart.js - JavaScript
DESCRIPTION: Defines the `config` object for the chart. Sets the chart type to 'line' and configures options, including a title plugin and scales. The x-axis is specifically configured as a 'time' scale with a defined tooltip format.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/time-line.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      title: {
        text: 'Chart.js Time Scale',
        display: true
      }
    },
    scales: {
      x: {
        type: 'time',
        time: {
          // Luxon format string
          tooltipFormat: 'DD T'
        },
        title: {
          display: true,
          text: 'Date'
        }
      },
      y: {
        title: {
          display: true,
          text: 'value'
        }
      }
    },
  },
};
// </block:config>
```

----------------------------------------

TITLE: Configure Cartesian Axis Title - Chart.js - JavaScript
DESCRIPTION: Explains how to add and style a title for a Chart.js Cartesian axis, demonstrating how to set the title color, enable display, and specify the title text using the `scales.x.title` options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/index.md#_snippet_3

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    label: 'My First dataset',
    backgroundColor: 'rgba(54, 162, 235, 0.5)',
    borderColor: 'rgb(54, 162, 235)',
    borderWidth: 1,
    data: [10, 20, 30, 40, 50, 0, 5],
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data,
  options: {
    scales: {
      x: {
        title: {
          color: 'red',
          display: true,
          text: 'Month'
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Update Chart.js Options by Mutating (JavaScript)
DESCRIPTION: Demonstrates how to update chart options by directly modifying properties within the existing `chart.options` object. This preserves other options and calculated properties.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/updates.md#_snippet_1

LANGUAGE: javascript
CODE:
```
function updateConfigByMutating(chart) {
    chart.options.plugins.title.text = 'new title';
    chart.update();
}
```

----------------------------------------

TITLE: Setting Global and Instance Interaction Mode Defaults (Javascript)
DESCRIPTION: Illustrates how to set a global default interaction mode using `Chart.defaults.interaction.mode`. It then shows how this global default applies to a chart instance unless explicitly overridden by the `options.interaction.mode` property in the instance configuration.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/index.md#_snippet_1

LANGUAGE: javascript
CODE:
```
Chart.defaults.interaction.mode = 'nearest';

// Interaction mode is set to nearest because it was not overridden here
const chartInteractionModeNearest = new Chart(ctx, {
    type: 'line',
    data: data
});

// This chart would have the interaction mode that was passed in
const chartDifferentInteractionMode = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        interaction: {
            // Overrides the global setting
            mode: 'index'
        }
    }
});
```

----------------------------------------

TITLE: Defining Chart Data - Chart.js - JavaScript
DESCRIPTION: Configures the data structure for the Chart.js chart. It defines labels and multiple datasets with random number generation using a utility function (`Utils.numbers`) and specifies styling properties like borderColor and backgroundColor.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/legend/html.md#_snippet_1

LANGUAGE: js
CODE:
```
const NUM_DATA = 7;
const NUM_CFG = {count: NUM_DATA, min: 0, max: 100};
const data = {
  labels: Utils.months({count: NUM_DATA}),
  datasets: [
    {
      label: 'Dataset: 1',
      data: Utils.numbers(NUM_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      fill: false,
    },
    {
      label: 'Dataset: 1',
      data: Utils.numbers(NUM_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      fill: false,
    },
  ],
};
```

----------------------------------------

TITLE: Customizing Tooltip Label Color/Style (Chart.js, JavaScript)
DESCRIPTION: Shows how to use the `labelColor` and `labelTextColor` callbacks in Chart.js tooltips to customize the appearance of the color box and text for each item, including border style, width, and radius.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/tooltip.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        plugins: {
            tooltip: {
                callbacks: {
                    labelColor: function(context) {
                        return {
                            borderColor: 'rgb(0, 0, 255)',
                            backgroundColor: 'rgb(255, 0, 0)',
                            borderWidth: 2,
                            borderDash: [2, 2],
                            borderRadius: 2
                        };
                    },
                    labelTextColor: function(context) {
                        return '#543453';
                    }
                }
            }
        }
    }
});
```

----------------------------------------

TITLE: Configuring Chart and Exporting - Chart.js - JavaScript
DESCRIPTION: Sets up the main Chart.js configuration object (`config`). It specifies the chart type ('line'), links the data, disables the default legend (`display: false`), registers the custom `htmlLegendPlugin`, and exports the configuration for use in a chart editor environment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/legend/html.md#_snippet_2

LANGUAGE: js
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      htmlLegend: {
        // ID of the container to put the legend in
        containerID: 'legend-container',
      },
      legend: {
        display: false,
      }
    }
  },
  plugins: [htmlLegendPlugin],
};

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Accessible Canvas with Fallback Content (HTML)
DESCRIPTION: This example shows how to provide a text alternative for a canvas element by including descriptive content, such as a paragraph, within the opening and closing canvas tags. This content is displayed if the browser doesn't support canvas or is used by assistive technologies.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/accessibility.md#_snippet_1

LANGUAGE: HTML
CODE:
```
<canvas id="okCanvas2" width="400" height="100">
    <p>Hello Fallback World</p>
</canvas>
```

----------------------------------------

TITLE: Use Chart.js Helper Functions (Bundlers)
DESCRIPTION: Illustrates how to import and use specific helper functions, such as `getRelativePosition`, when using Chart.js with bundlers. The example shows how to get the relative position of a click event on the canvas and convert it to data values using chart scales within an `onClick` event handler.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/integration.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import Chart from 'chart.js/auto';
import { getRelativePosition } from 'chart.js/helpers';

const chart = new Chart(ctx, {
  type: 'line',
  data: data,
  options: {
    onClick: (e) => {
      const canvasPosition = getRelativePosition(e, chart);

      // Substitute the appropriate scale IDs
      const dataX = chart.scales.x.getValueForPixel(canvasPosition.x);
      const dataY = chart.scales.y.getValueForPixel(canvasPosition.y);
    }
  }
});
```

----------------------------------------

TITLE: Chart.js Configuration for Polar Area Chart (JS)
DESCRIPTION: Defines the configuration object for a Chart.js polar area chart. Specifies the chart type, links the data, sets responsive options, configures the radial scale (r) to display and center point labels with a specific font size, and sets up legend and title plugins.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/polar-area-center-labels.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const config = {
  type: 'polarArea',
  data: data,
  options: {
    responsive: true,
    scales: {
      r: {
        pointLabels: {
          display: true,
          centerPointLabels: true,
          font: {
            size: 18
          }
        }
      }
    },
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Polar Area Chart With Centered Point Labels'
      }
    }
  },
};
```

----------------------------------------

TITLE: Configure Chart.js Line Chart with Data Decimation (JavaScript)
DESCRIPTION: Defines the main configuration object for a Chart.js line chart. Includes settings for performance (animation/parsing off), interaction, plugins (specifically linking the decimation config), and the time scale for the x-axis.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/data-decimation.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    // Turn off animations and data parsing for performance
    animation: false,
    parsing: false,

    interaction: {
      mode: 'nearest',
      axis: 'x',
      intersect: false
    },
    plugins: {
      decimation: decimation,
    },
    scales: {
      x: {
        type: 'time',
        ticks: {
          source: 'auto',
          // Disabled rotation for performance
          maxRotation: 0,
          autoSkip: true,
        }
      }
    }
  }
};
```

----------------------------------------

TITLE: Getting Elements at Event Location in Chart.js - JavaScript
DESCRIPTION: Use .getElementsAtEventForMode(e, mode, options, useFinalPosition) to find chart elements (points, bars, etc.) at a specific event location, useful for implementing click or hover interactions.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_11

LANGUAGE: javascript
CODE:
```
function clickHandler(evt) {
    const points = myChart.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, true);

    if (points.length) {
        const firstPoint = points[0];
        const label = myChart.data.labels[firstPoint.index];
        const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];
    }
}
```

----------------------------------------

TITLE: Using Object Array Data (Date x, y) in Chart.js Dataset (JavaScript)
DESCRIPTION: Example of using an array of objects with date strings for the 'x' property and numbers for 'y'. Chart.js can parse date strings when the associated scale is configured correctly.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/data-structures.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const cfg = {
  type: 'line',
  data: {
    datasets: [{
      data: [{x: '2016-12-25', y: 20}, {x: '2016-12-26', y: 10}]
    }]
  }
}
```

----------------------------------------

TITLE: Setting Custom Display Format for Quarter Unit in Chart.js
DESCRIPTION: This example shows how to customize the display format for a specific time unit, in this case, the 'quarter'. It sets the `time.displayFormats.quarter` option to `'MMM YYYY'`, which will format quarter ticks to show the abbreviated month and full year (e.g., "Jan 2023"). The format string depends on the chosen date adapter.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/time.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        scales: {
            x: {
                type: 'time',
                time: {
                    displayFormats: {
                        quarter: 'MMM YYYY'
                    }
                }
            }
        }
    }
});
```

----------------------------------------

TITLE: Configuring Chart.js Doughnut Chart (JavaScript)
DESCRIPTION: This JavaScript object defines the configuration options for the Chart.js doughnut chart. It specifies the chart type as 'doughnut', links the defined data object, and sets various options like responsiveness and plugin configurations for the legend and title.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/doughnut.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// <block:config:0>\nconst config = {\n  type: 'doughnut',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Doughnut Chart'\n      }\n    }\n  },\n};\n// </block:config>
```

----------------------------------------

TITLE: Configuring Linear Axis Step Size in Chart.js
DESCRIPTION: This snippet demonstrates how to configure a linear y-axis in Chart.js to use a fixed step size for generating ticks. It sets the minimum and maximum values and specifies `stepSize: 0.5` within the `ticks` options to create ticks at 0, 0.5, 1, ..., 5.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/linear.md#_snippet_0

LANGUAGE: javascript
CODE:
```
let options = {
    scales: {
        y: {
            max: 5,
            min: 0,
            ticks: {
                stepSize: 0.5
            }
        }
    }
};
```

----------------------------------------

TITLE: Configuring Chart Options and Styling (Chart.js, JavaScript)
DESCRIPTION: Defines functions to dynamically color chart elements based on their value and sets up the main chart configuration object, including type, data, and options for plugins and element styling.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/polar.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
// <block:options:0>
function colorize(opaque, hover, ctx) {
  const v = ctx.raw;
  const c = v < 35 ? '#D60000'
    : v < 55 ? '#F46300'
    : v < 75 ? '#0358B6'
    : '#44DE28';

  const opacity = hover ? 1 - Math.abs(v / 150) - 0.2 : 1 - Math.abs(v / 150);

  return opaque ? c : Utils.transparentize(c, opacity);
}

function hoverColorize(ctx) {
  return colorize(false, true, ctx);
}

const config = {
  type: 'polarArea',
  data: data,
  options: {
    plugins: {
      legend: false,
      tooltip: false,
    },
    elements: {
      arc: {
        backgroundColor: colorize.bind(null, false, false),
        hoverBackgroundColor: hoverColorize
      }
    }
  }
};
// </block:options>
```

----------------------------------------

TITLE: Chart.js Line Chart with Interactive Actions and Animation Loop
DESCRIPTION: This JavaScript code defines the setup, configuration, and interactive actions for a Chart.js line chart. It includes functions to randomize data, add/remove datasets, add/remove data points, and configures a line chart with specific styling, interaction modes, and a looping animation for the point radius on hover.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/animations/loop.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: DATA_COUNT});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      tension: 0.4,
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      tension: 0.2,
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    animations: {
      radius: {
        duration: 400,
        easing: 'linear',
        loop: (context) => context.active
      }
    },
    hoverRadius: 12,
    hoverBackgroundColor: 'yellow',
    interaction: {
      mode: 'nearest',
      intersect: false,
      axis: 'x'
    },
    plugins: {
      tooltip: {
        enabled: false
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

```

----------------------------------------

TITLE: Chart.js Stacked Bar Chart Creation
DESCRIPTION: Creates a stacked bar chart in Chart.js by setting the `stacked` option to `true` for both the x and y scales within the chart options. This configuration allows data series to be displayed as stacked segments.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/bar.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const stackedBar = new Chart(ctx, {
    type: 'bar',
    data: data,
    options: {
        scales: {
            x: {
                stacked: true
            },
            y: {
                stacked: true
            }
        }
    }
});
```

----------------------------------------

TITLE: Set Chart.js Padding (x/y Object) - JavaScript
DESCRIPTION: Configures padding using an object with 'x' and 'y' properties as a shorthand. 'x' sets padding for left/right, and 'y' sets padding for top/bottom. This example applies 10px horizontal and 4px vertical padding to the tick backdrop on a radial axis. Requires a Chart.js instance, context, data, and options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/padding.md#_snippet_2

LANGUAGE: javascript
CODE:
```
let chart = new Chart(ctx, {
    type: 'radar',
    data: data,
    options: {
        scales: {
          r: {
            ticks: {
              backdropPadding: {
                  x: 10,
                  y: 4
              }
            }
        }
    }
});
```

----------------------------------------

TITLE: Customizing Tooltip Label Text (Chart.js, JavaScript)
DESCRIPTION: Explains how to use the `label` callback within Chart.js tooltip options to format the text displayed for each data point, specifically demonstrating how to format a value as currency.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/tooltip.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        plugins: {
            tooltip: {
                callbacks: {
                    label: function(context) {
                        let label = context.dataset.label || '';

                        if (label) {
                            label += ': ';
                        }
                        if (context.parsed.y !== null) {
                            label += new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(context.parsed.y);
                        }
                        return label;
                    }
                }
            }
        }
    }
});
```

----------------------------------------

TITLE: Using Object Array Data (String x, y) in Chart.js Dataset (JavaScript)
DESCRIPTION: Shows using an array of objects with string values for the 'x' property and numbers for 'y'. This format is suitable for categorical data where 'x' values correspond to labels.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/data-structures.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const cfg = {
  type: 'bar',
  data: {
    datasets: [{
      data: [{x: 'Sales', y: 20}, {x: 'Revenue', y: 10}]
    }]
  }
}
```

----------------------------------------

TITLE: Customizing Tooltip Label Point Style (Chart.js, JavaScript)
DESCRIPTION: Demonstrates how to use the `labelPointStyle` callback and `usePointStyle` option in Chart.js tooltips to replace the default color box with a custom point style (like a triangle) for each item.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/tooltip.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        plugins: {
            tooltip: {
                usePointStyle: true,
                callbacks: {
                    labelPointStyle: function(context) {
                        return {
                            pointStyle: 'triangle',
                            rotation: 0
                        };
                    }
                }
            }
        }
    }
});
```

----------------------------------------

TITLE: Configuring Scatter Chart with Quadrants - Chart.js JavaScript
DESCRIPTION: This snippet defines the configuration object for a Chart.js scatter chart. It sets the chart type to 'scatter', assigns the previously defined `data` object, and configures plugin options, specifically the colors for the 'quadrants' plugin. It also registers the `quadrants` plugin in the main `plugins` array.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/plugins/quadrants.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const config = {
  type: 'scatter',
  data: data,
  options: {
    plugins: {
      quadrants: {
        topLeft: Utils.CHART_COLORS.red,
        topRight: Utils.CHART_COLORS.blue,
        bottomRight: Utils.CHART_COLORS.green,
        bottomLeft: Utils.CHART_COLORS.yellow,
      }
    }
  },
  plugins: [quadrants]
};
```

----------------------------------------

TITLE: Defining Indexable Options in Chart.js
DESCRIPTION: This JavaScript snippet shows how to use an array for a Chart.js option (indexable option). Each value in the array corresponds to the option for the data element at the same index. If the array has fewer items than data points, the items are looped over.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/options.md#_snippet_1

LANGUAGE: javascript
CODE:
```
color: [
    'red',    // color for data at index 0
    'blue',   // color for data at index 1
    'green',  // color for data at index 2
    'black',  // color for data at index 3
    //...
]
```

----------------------------------------

TITLE: Registering Chart.js Components for Bar Chart (src/acquisitions.js)
DESCRIPTION: Imports and registers specific Chart.js components required for a bar chart (BarController, BarElement, CategoryScale, LinearScale, Legend, Colors) to enable tree-shaking and reduce bundle size. This replaces the `import Chart from 'chart.js/auto'` statement.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_14

LANGUAGE: jsx
CODE:
```
import {
  Chart,
  Colors,
  BarController,
  CategoryScale,
  LinearScale,
  BarElement,
  Legend
} from 'chart.js'

Chart.register(
  Colors,
  BarController,
  BarElement,
  CategoryScale,
  LinearScale,
  Legend
);
```

----------------------------------------

TITLE: Configuring Progressive Animation with Easing - JS
DESCRIPTION: Defines the "animation" object for Chart.js options. It sets up scriptable "duration" and "delay" properties for both 'x' and 'y' animations, making them dependent on the point's index and the selected easing function. The 'y' animation starts from the previous point's position.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/animations/progressive-line-easing.md#_snippet_1

LANGUAGE: js
CODE:
```
let easing = helpers.easingEffects.easeOutQuad;
let restart = false;
const totalDuration = 5000;
const duration = (ctx) => easing(ctx.index / data.length) * totalDuration / data.length;
const delay = (ctx) => easing(ctx.index / data.length) * totalDuration;
const previousY = (ctx) => ctx.index === 0 ? ctx.chart.scales.y.getPixelForValue(100) : ctx.chart.getDatasetMeta(ctx.datasetIndex).data[ctx.index - 1].getProps(['y'], true).y;
const animation = {
  x: {
    type: 'number',
    easing: 'linear',
    duration: duration,
    from: NaN, // the point is initially skipped
    delay(ctx) {
      if (ctx.type !== 'data' || ctx.xStarted) {
        return 0;
      }
      ctx.xStarted = true;
      return delay(ctx);
    }
  },
  y: {
    type: 'number',
    easing: 'linear',
    duration: duration,
    from: previousY,
    delay(ctx) {
      if (ctx.type !== 'data' || ctx.yStarted) {
        return 0;
      }
      ctx.yStarted = true;
      return delay(ctx);
    }
  }
};
```

----------------------------------------

TITLE: Configure Chart.js Combo Time Scale Chart
DESCRIPTION: Defines the configuration object for a Chart.js chart. Specifies the chart type as 'line' (though it's a combo chart, the base type is often line for time scales), links the data object, adds a title plugin, and configures the x-axis as a 'time' scale with 'day' units.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/time-combo.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      title: {
        text: 'Chart.js Combo Time Scale',
        display: true
      }
    },
    scales: {
      x: {
        type: 'time',
        display: true,
        offset: true,
        ticks: {
          source: 'data'
        },
        time: {
          unit: 'day'
        },
      },
    },
  },
};
// </block:config>
```

----------------------------------------

TITLE: Set Dataset Visibility (Chart.js)
DESCRIPTION: Sets the visibility state for a specific dataset identified by its index. This is useful for programmatically controlling which datasets are displayed, often used in conjunction with custom HTML legends. After changing visibility, call `chart.update()` to re-render the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_15

LANGUAGE: javascript
CODE:
```
chart.setDatasetVisibility(1, false);
chart.update();
```

----------------------------------------

TITLE: Using Object Array Data (x, y) in Chart.js Dataset (JavaScript)
DESCRIPTION: Illustrates using an array of objects with 'x' and 'y' properties for dataset data. This is the internal format used by Chart.js for parsed data. `null` values are supported for skipped points.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/data-structures.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const cfg = {
  type: 'line',
  data: {
    datasets: [{
      data: [{x: 10, y: 20}, {x: 15, y: null}, {x: 20, y: 10}]
    }]
  }
}
```

----------------------------------------

TITLE: Configuring Chart.js Bubble Chart Options (JavaScript)
DESCRIPTION: Defines the configuration object for the Chart.js instance, specifying the chart type ('bubble'), linking the data object, and setting various options like responsiveness, legend position, and title display.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/bubble.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'bubble',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Bubble Chart'
      }
    }
  },
};
```

----------------------------------------

TITLE: Initial Chart.js Time Scale Configuration
DESCRIPTION: This snippet shows a basic Chart.js configuration where the x-axis is explicitly set to use a 'time' scale. This is the starting point before potentially changing the scale type.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/time.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        scales: {
            x: {
                type: 'time',
            }
        }
    }
});
```

----------------------------------------

TITLE: Chart.js v3 Scale Configuration Example
DESCRIPTION: Example configuration for scales in Chart.js version 3, demonstrating the new structure where scales are keyed by ID directly under `scales`, showing options for time and linear scales, including updated tick color configuration.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/migration/v3-migration.md#_snippet_2

LANGUAGE: javascript
CODE:
```
options: {
  scales: {
    x: {
      type: 'time',
      display: true,
      title: {
        display: true,
        text: 'Date'
      },
      ticks: {
        major: {
          enabled: true
        },
        color: (context) => context.tick && context.tick.major && '#FF0000',
        font: function(context) {
          if (context.tick && context.tick.major) {
            return {
              weight: 'bold'
            };
          }
        }
      }
    },
    y: {
      display: true,
      title: {
        display: true,
        text: 'value'
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Stacked Area Chart with Chart.js Line Type
DESCRIPTION: This code creates a stacked area chart using the Chart.js line chart type. By setting the `stacked: true` option on the y-axis scale within the chart options, the dataset values are stacked vertically, visualizing cumulative contributions.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/line.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const stackedLine = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        scales: {
            y: {
                stacked: true
            }
        }
    }
});
```

----------------------------------------

TITLE: Setup Responsive Chart Container - HTML
DESCRIPTION: Demonstrates the recommended HTML structure for making a Chart.js chart responsive. It requires a relatively positioned container element dedicated to the chart canvas, allowing Chart.js to detect size changes and update the canvas render size accordingly.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/responsive.md#_snippet_0

LANGUAGE: html
CODE:
```
<div class="chart-container" style="position: relative; height:40vh; width:80vw">
    <canvas id="chart"></canvas>
</div>
```

----------------------------------------

TITLE: Getting Dataset Metadata by Index in Chart.js - JavaScript
DESCRIPTION: Use .getDatasetMeta(index) to retrieve the metadata object for a specific dataset based on its index. This object contains detailed information about the dataset's elements and configuration.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_13

LANGUAGE: javascript
CODE:
```
const meta = myChart.getDatasetMeta(0);
const x = meta.data[0].x;
```

----------------------------------------

TITLE: Configure Horizontal Bar Chart - Chart.js - JS
DESCRIPTION: Defines the configuration object for the Chart.js chart. It specifies the chart type as 'bar', references the data object, sets the index axis to 'y' for horizontal orientation, configures bar element styling, responsiveness, legend position, and title display.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/horizontal.md#_snippet_2

LANGUAGE: js
CODE:
```
const config = {
  type: 'bar',
  data: data,
  options: {
    indexAxis: 'y',
    // Elements options apply to all of the options unless overridden in a dataset
    // In this case, we are setting the border of each horizontal bar to be 2px wide
    elements: {
      bar: {
        borderWidth: 2,
      }
    },
    responsive: true,
    plugins: {
      legend: {
        position: 'right',
      },
      title: {
        display: true,
        text: 'Chart.js Horizontal Bar Chart'
      }
    }
  },
};
```

----------------------------------------

TITLE: Setting Default Colors in Chart.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to override the global default colors for Chart.js elements like background, border, and font color by directly modifying properties on `Chart.defaults`. This affects all charts unless colors are specified at the dataset or element level.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/colors.md#_snippet_0

LANGUAGE: javascript
CODE:
```
Chart.defaults.backgroundColor = '#9BD0F5';
Chart.defaults.borderColor = '#36A2EB';
Chart.defaults.color = '#000';
```

----------------------------------------

TITLE: Updating Chart.js with Animation Mode - JavaScript
DESCRIPTION: The .update() method accepts an optional 'mode' string to control animation behavior. Common modes include 'active', 'hide', 'reset', 'resize', 'show', or 'none' to skip animations.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_3

LANGUAGE: javascript
CODE:
```
myChart.update('active');
```

----------------------------------------

TITLE: Configure Chart.js Stacked Axes (JavaScript)
DESCRIPTION: Configures the Chart.js chart options, specifying the chart type as 'line', linking the data, and setting up the scales. It defines two y-axes ('y' and 'y2'), one linear and one category, both participating in the same stack ('demo') with different weights.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/stacked.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Stacked scales',
      },
    },
    scales: {
      y: {
        type: 'linear',
        position: 'left',
        stack: 'demo',
        stackWeight: 2,
        border: {
          color: Utils.CHART_COLORS.red
        }
      },
      y2: {
        type: 'category',
        labels: ['ON', 'OFF'],
        offset: true,
        position: 'left',
        stack: 'demo',
        stackWeight: 1,
        border: {
          color: Utils.CHART_COLORS.blue
        }
      }
    }
  },
};
// </block:config>
```

----------------------------------------

TITLE: Configuring Chart Options (JavaScript)
DESCRIPTION: Defines the main chart configuration, specifying a 'line' chart type, linking the data, and setting various options including `spanGaps` for the time scale, responsiveness, interaction mode, title, and detailed axis configurations for time (x) and linear (y) scales.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/time-max-span.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    spanGaps: 1000 * 60 * 60 * 24 * 2, // 2 days
    responsive: true,
    interaction: {
      mode: 'nearest',
    },
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Time - spanGaps: 172800000 (2 days in ms)'
      },
    },
    scales: {
      x: {
        type: 'time',
        display: true,
        title: {
          display: true,
          text: 'Date'
        },
        ticks: {
          autoSkip: false,
          maxRotation: 0,
          major: {
            enabled: true
          },
          // color: function(context) {
          //   return context.tick && context.tick.major ? '#FF0000' : 'rgba(0,0,0,0.1)';
          // },
          font: function(context) {
            if (context.tick && context.tick.major) {
              return {
                weight: 'bold',
              };
            }
          }
        }
      },
      y: {
        display: true,
        title: {
          display: true,
          text: 'value'
        }
      }
    }
  },
};
```

----------------------------------------

TITLE: Setup Chart Data Configuration (JavaScript)
DESCRIPTION: Sets up the data configuration for the chart, including labels and a dataset. The dataset's `borderColor` is defined as a scriptable option that calls `getGradient`.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/linear-gradient.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const labels = Utils.months({count: 7});

const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: function(context) {
        const chart = context.chart;
        const {ctx, chartArea} = chart;

        if (!chartArea) {
          // This case happens on initial chart load
          return;
        }
        return getGradient(ctx, chartArea);
      },
    },
  ]
};
```

----------------------------------------

TITLE: Enabling and Setting Basic Title Text in Chart.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to enable the title plugin in a Chart.js chart and set the basic text to be displayed. It shows the configuration within the `options.plugins.title` object, setting `display` to `true` and providing a simple string for the `text` property.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/title.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        plugins: {
            title: {
                display: true,
                text: 'Custom Chart Title'
            }
        }
    }
});
```

----------------------------------------

TITLE: Create Basic HTML Structure for Chart Canvas
DESCRIPTION: Provides the minimal HTML structure required for a Chart.js application, including a canvas element with an ID to render the chart and a script tag to load the application logic.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_1

LANGUAGE: html
CODE:
```
<!doctype html>
<html lang="en">
  <head>
    <title>Chart.js example</title>
  </head>
  <body>
    <!-- <div style="width: 500px;"><canvas id="dimensions"></canvas></div><br/> -->
    <div style="width: 800px;"><canvas id="acquisitions"></canvas></div>

    <!-- <script type="module" src="dimensions.js"></script> -->
    <script type="module" src="acquisitions.js"></script>
  </body>
</html>
```

----------------------------------------

TITLE: Complete Mixed Chart Example (Bar and Line) with Styling in Chart.js
DESCRIPTION: This comprehensive example shows the setup and configuration for a mixed chart combining bar and line types. It includes data definition with specific styling for each dataset (colors, fill) and basic scale options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/mixed.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const data = {
  labels: [
    'January',
    'February',
    'March',
    'April'
  ],
  datasets: [{
    type: 'bar',
    label: 'Bar Dataset',
    data: [10, 20, 30, 40],
    borderColor: 'rgb(255, 99, 132)',
    backgroundColor: 'rgba(255, 99, 132, 0.2)'
  }, {
    type: 'line',
    label: 'Line Dataset',
    data: [50, 50, 50, 50],
    fill: false,
    borderColor: 'rgb(54, 162, 235)'
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'scatter',
  data: data,
  options: {
    scales: {
      y: {
        beginAtZero: true
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Setting Global and Specific Font Size in Chart.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to set a default global font size for all chart text using `Chart.defaults.font.size` and how to override this global setting for specific chart elements, such as legend labels, by providing a more specific font configuration within the chart options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/fonts.md#_snippet_0

LANGUAGE: javascript
CODE:
```
Chart.defaults.font.size = 16;
let chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        plugins: {
            legend: {
                labels: {
                    // This more specific font property overrides the global property
                    font: {
                        size: 14
                    }
                }
            }
        }
    }
});
```

----------------------------------------

TITLE: Configuring Chart.js Subtitle in JavaScript
DESCRIPTION: This snippet demonstrates how to enable and set the text for a chart subtitle using the `options.plugins.subtitle` configuration namespace within the chart options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/subtitle.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        plugins: {
            subtitle: {
                display: true,
                text: 'Custom Chart Subtitle'
            }
        }
    }
});
```

----------------------------------------

TITLE: Configure Chart.js Line Chart Options (JavaScript)
DESCRIPTION: This object defines the chart type ('line'), links the data setup, and configures options. It sets interaction mode to 'index' and disables intersection. It also configures the title plugin to display the current tooltip position mode.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/position.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    interaction: {
      intersect: false,
      mode: 'index',
    },
    plugins: {
      title: {
        display: true,
        text: (ctx) => 'Tooltip position mode: ' + ctx.chart.options.plugins.tooltip.position,
      }
    }
  }
};
```

----------------------------------------

TITLE: Configuring Chart.js Line Chart with Custom Tick Styling (JavaScript)
DESCRIPTION: Defines the main configuration object for a Chart.js line chart. It specifies the chart type, links the data, enables responsiveness, adds a title plugin, and configures the X-axis ticks with a callback function to filter labels (showing every second one) and sets the tick color to red.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scale-options/ticks.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Chart with Tick Configuration'
      }
    },
    scales: {
      x: {
        ticks: {
          // For a category axis, the val is the index so the lookup via getLabelForValue is needed
          callback: function(val, index) {
            // Hide every 2nd tick label
            return index % 2 === 0 ? this.getLabelForValue(val) : '';
          },
          color: 'red'
        }
      }
    }
  }
};
```

----------------------------------------

TITLE: Configuring 'nearest' Interaction Mode in Chart.js (JavaScript)
DESCRIPTION: This snippet shows how to set the 'nearest' interaction mode. This mode identifies the chart item closest to the interaction point, based on distance to the item's center. Options like 'axis' and 'intersect' can refine this behavior.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/interactions.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        interaction: {
            mode: 'nearest'
        }
    }
});
```

----------------------------------------

TITLE: Generate Random Data and Define Chart Data Structure
DESCRIPTION: Provides a helper function generateData to create an array of random numbers. Defines the data object for the chart, including labels and a dataset using the generated data.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/radial-gradient.md#_snippet_2

LANGUAGE: js
CODE:
```
// <block:data:2>
function generateData() {
  return Utils.numbers({
    count: DATA_COUNT,
    min: 0,
    max: 100
  });
}

const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [{
    data: generateData()
  }]
};
// </block:data>
```

----------------------------------------

TITLE: Destroying Chart.js Instance - JavaScript
DESCRIPTION: Use the .destroy() method to clean up a chart instance, removing internal references and event listeners. This is necessary before reusing the canvas for a new chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// Destroys a specific chart instance
myLineChart.destroy();
```

----------------------------------------

TITLE: Extending an Existing Chart Type in Chart.js
DESCRIPTION: Shows how to extend a built-in chart controller (BubbleController in this example), override the `draw` method to add custom rendering, set the new controller's ID and defaults, register it, and use it to create a chart instance.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/charts.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import {BubbleController} from 'chart.js';
class Custom extends BubbleController {
    draw() {
        // Call bubble controller method to draw all the points
        super.draw(arguments);

        // Now we can do some custom drawing for this dataset. Here we'll draw a red box around the first point in each dataset
        const meta = this.getMeta();
        const pt0 = meta.data[0];

        const {x, y} = pt0.getProps(['x', 'y']);
        const {radius} = pt0.options;

        const ctx = this.chart.ctx;
        ctx.save();
        ctx.strokeStyle = 'red';
        ctx.lineWidth = 1;
        ctx.strokeRect(x - radius, y - radius, 2 * radius, 2 * radius);
        ctx.restore();
    }
};
Custom.id = 'derivedBubble';
Custom.defaults = BubbleController.defaults;

// Stores the controller so that the chart initialization routine can look it up
Chart.register(Custom);

// Now we can create and use our new chart type
new Chart(ctx, {
    type: 'derivedBubble',
    data: data,
    options: options
});
```

----------------------------------------

TITLE: Setup Chart Data (Chart.js)
DESCRIPTION: Configures the dataset for the scatter chart. It defines two datasets with random point data within a specified range, setting their labels, fill properties, and border/background colors using utility functions.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scale-options/center.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const DATA_COUNT = 6;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.points(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.points(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
```

----------------------------------------

TITLE: Resize Specific Chart Before/After Printing - JavaScript
DESCRIPTION: Illustrates how to use `window.addEventListener` with `beforeprint` and `afterprint` events to manually control the size of a specific chart during printing. It resizes the chart to a fixed size before printing and restores automatic resizing after printing is complete.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/responsive.md#_snippet_3

LANGUAGE: javascript
CODE:
```
window.addEventListener('beforeprint', () => {
  myChart.resize(600, 600);
});
window.addEventListener('afterprint', () => {
  myChart.resize();
});
```

----------------------------------------

TITLE: Configure Chart.js Line Chart Options (JS)
DESCRIPTION: Defines the main configuration object for a Chart.js line chart, specifying the chart type, the data object, and initial options, including enabling the legend title.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/legend/title.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      legend: {
        title: {
          display: true,
          text: 'Legend Title',
        }
      }
    }
  }
};
```

----------------------------------------

TITLE: Configuring Chart.js with Tooltip Point Style Enabled (JavaScript)
DESCRIPTION: Defines the main configuration object for the Chart.js chart. It specifies the chart type as 'line', assigns the prepared data, and configures options. It explicitly enables `usePointStyle` for the tooltip plugin and sets up a dynamic chart title that reflects the current tooltip point style setting.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/point-style.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    interaction: {
      mode: 'index',
    },
    plugins: {
      title: {
        display: true,
        text: (ctx) => 'Tooltip point style: ' + ctx.chart.options.plugins.tooltip.usePointStyle,
      },
      tooltip: {
        usePointStyle: true,
      }
    }
  }
};
```

----------------------------------------

TITLE: Registering Custom Chart.js Scale - JavaScript
DESCRIPTION: Shows how to register a newly created custom scale class with the global Chart.js object using `Chart.register()`. Includes a note about explicit registration if not extending `Chart.Scale`.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/axes.md#_snippet_1

LANGUAGE: javascript
CODE:
```
Chart.register(MyScale);

// If the new scale is not extending Chart.Scale, the prototype can not be used to detect what
// you are trying to register - so you need to be explicit:

// Chart.registry.addScales(MyScale);
```

----------------------------------------

TITLE: Configuring Chart.js with External HTML Tooltip - JavaScript
DESCRIPTION: Configures a Chart.js chart to use an external HTML tooltip. It disables the default canvas tooltip and provides a function to the `external` option. This function handles the creation, update, positioning, and styling of an HTML element to display tooltip information based on the chart's tooltip model.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/tooltip.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const myPieChart = new Chart(ctx, {
    type: 'pie',
    data: data,
    options: {
        plugins: {
            tooltip: {
                // Disable the on-canvas tooltip
                enabled: false,

                external: function(context) {
                    // Tooltip Element
                    let tooltipEl = document.getElementById('chartjs-tooltip');

                    // Create element on first render
                    if (!tooltipEl) {
                        tooltipEl = document.createElement('div');
                        tooltipEl.id = 'chartjs-tooltip';
                        tooltipEl.innerHTML = '<table></table>';
                        document.body.appendChild(tooltipEl);
                    }

                    // Hide if no tooltip
                    const tooltipModel = context.tooltip;
                    if (tooltipModel.opacity === 0) {
                        tooltipEl.style.opacity = 0;
                        return;
                    }

                    // Set caret Position
                    tooltipEl.classList.remove('above', 'below', 'no-transform');
                    if (tooltipModel.yAlign) {
                        tooltipEl.classList.add(tooltipModel.yAlign);
                    } else {
                        tooltipEl.classList.add('no-transform');
                    }

                    function getBody(bodyItem) {
                        return bodyItem.lines;
                    }

                    // Set Text
                    if (tooltipModel.body) {
                        const titleLines = tooltipModel.title || [];
                        const bodyLines = tooltipModel.body.map(getBody);

                        let innerHtml = '<thead>';

                        titleLines.forEach(function(title) {
                            innerHtml += '<tr><th>' + title + '</th></tr>';
                        });
                        innerHtml += '</thead><tbody>';

                        bodyLines.forEach(function(body, i) {
                            const colors = tooltipModel.labelColors[i];
                            let style = 'background:' + colors.backgroundColor;
                            style += '; border-color:' + colors.borderColor;
                            style += '; border-width: 2px';
                            const span = '<span style="' + style + '">' + body + '</span>';
                            innerHtml += '<tr><td>' + span + '</td></tr>';
                        });
                        innerHtml += '</tbody>';

                        let tableRoot = tooltipEl.querySelector('table');
                        tableRoot.innerHTML = innerHtml;
                    }

                    const position = context.chart.canvas.getBoundingClientRect();
                    const bodyFont = Chart.helpers.toFont(tooltipModel.options.bodyFont);

                    // Display, position, and set styles for font
                    tooltipEl.style.opacity = 1;
                    tooltipEl.style.position = 'absolute';
                    tooltipEl.style.left = position.left + window.pageXOffset + tooltipModel.caretX + 'px';
                    tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY + 'px';
                    tooltipEl.style.font = bodyFont.string;
                    tooltipEl.style.padding = tooltipModel.padding + 'px ' + tooltipModel.padding + 'px';
                    tooltipEl.style.pointerEvents = 'none';
                }
            }
        }
    }
});
```

----------------------------------------

TITLE: Optional Chart.js Custom Scale Methods - JavaScript
DESCRIPTION: Lists methods that can optionally be overwritten by a custom scale type, providing default implementations in the base `Chart.Scale` class. These include generating tick labels, calculating rotation, fitting, and drawing.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/axes.md#_snippet_5

LANGUAGE: javascript
CODE:
```
{
    // Adds labels to objects in the ticks array. The default implementation simply calls this.options.ticks.callback(numericalTick, index, ticks);
    generateTickLabels: function() {},

    // Determine how much the labels will rotate by. The default implementation will only rotate labels if the scale is horizontal.
    calculateLabelRotation: function() {},

    // Fits the scale into the canvas.
    // this.maxWidth and this.maxHeight will tell you the maximum dimensions the scale instance can be. Scales should endeavour to be as efficient as possible with canvas space.
    // this.margins is the amount of space you have on either side of your scale that you may expand in to. This is used already for calculating the best label rotation
    // You must set this.minSize to be the size of your scale. It must be an object containing 2 properties: width and height.
    // You must set this.width to be the width and this.height to be the height of the scale
    fit: function() {},

    // Draws the scale onto the canvas. this.(left|right|top|bottom) will have been populated to tell you the area on the canvas to draw in
    // @param chartArea : an object containing four properties: left, right, top, bottom. This is the rectangle that lines, bars, etc will be drawn in. It may be used, for example, to draw grid lines.
    draw: function(chartArea) {}
}
```

----------------------------------------

TITLE: Controlling Drawing Order in Mixed Chart.js Charts
DESCRIPTION: This snippet demonstrates how to use the `order` property within dataset configurations to control the drawing order of datasets in a mixed chart. Datasets with a lower `order` value are drawn on top of datasets with a higher value.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/mixed.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const mixedChart = new Chart(ctx, {
    type: 'bar',
    data: {
        datasets: [{
            label: 'Bar Dataset',
            data: [10, 20, 30, 40],
            // this dataset is drawn below
            order: 2
        }, {
            label: 'Line Dataset',
            data: [10, 10, 10, 10],
            type: 'line',
            // this dataset is drawn on top
            order: 1
        }],
        labels: ['January', 'February', 'March', 'April']
    },
    options: options
});
```

----------------------------------------

TITLE: Configuring Basic Chart with Subtitle in Chart.js
DESCRIPTION: Defines the dataset and configuration options for a Chart.js line chart, including enabling and customizing the title and subtitle plugins. The subtitle is configured with specific text, color, font properties, and padding.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/subtitle/basic.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Chart Title'
      },
      subtitle: {
        display: true,
        text: 'Chart Subtitle',
        color: 'blue',
        font: {
          size: 12,
          family: 'tahoma',
          weight: 'normal',
          style: 'italic'
        },
        padding: {
          bottom: 10
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  config: config
};
```

----------------------------------------

TITLE: Implementing External HTML Tooltip - Chart.js JavaScript
DESCRIPTION: Provides the JavaScript functions `getOrCreateTooltip` and `externalTooltipHandler` to create and manage a custom HTML element for displaying Chart.js tooltips. It handles finding/creating the element, updating its content based on the chart's tooltip state, and positioning it correctly.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/html.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const getOrCreateTooltip = (chart) => {
  let tooltipEl = chart.canvas.parentNode.querySelector('div');

  if (!tooltipEl) {
    tooltipEl = document.createElement('div');
    tooltipEl.style.background = 'rgba(0, 0, 0, 0.7)';
    tooltipEl.style.borderRadius = '3px';
    tooltipEl.style.color = 'white';
    tooltipEl.style.opacity = 1;
    tooltipEl.style.pointerEvents = 'none';
    tooltipEl.style.position = 'absolute';
    tooltipEl.style.transform = 'translate(-50%, 0)';
    tooltipEl.style.transition = 'all .1s ease';

    const table = document.createElement('table');
    table.style.margin = '0px';

    tooltipEl.appendChild(table);
    chart.canvas.parentNode.appendChild(tooltipEl);
  }

  return tooltipEl;
};

const externalTooltipHandler = (context) => {
  // Tooltip Element
  const {chart, tooltip} = context;
  const tooltipEl = getOrCreateTooltip(chart);

  // Hide if no tooltip
  if (tooltip.opacity === 0) {
    tooltipEl.style.opacity = 0;
    return;
  }

  // Set Text
  if (tooltip.body) {
    const titleLines = tooltip.title || [];
    const bodyLines = tooltip.body.map(b => b.lines);

    const tableHead = document.createElement('thead');

    titleLines.forEach(title => {
      const tr = document.createElement('tr');
      tr.style.borderWidth = 0;

      const th = document.createElement('th');
      th.style.borderWidth = 0;
      const text = document.createTextNode(title);

      th.appendChild(text);
      tr.appendChild(th);
      tableHead.appendChild(tr);
    });

    const tableBody = document.createElement('tbody');
    bodyLines.forEach((body, i) => {
      const colors = tooltip.labelColors[i];

      const span = document.createElement('span');
      span.style.background = colors.backgroundColor;
      span.style.borderColor = colors.borderColor;
      span.style.borderWidth = '2px';
      span.style.marginRight = '10px';
      span.style.height = '10px';
      span.style.width = '10px';
      span.style.display = 'inline-block';

      const tr = document.createElement('tr');
      tr.style.backgroundColor = 'inherit';
      tr.style.borderWidth = 0;

      const td = document.createElement('td');
      td.style.borderWidth = 0;

      const text = document.createTextNode(body);

      td.appendChild(span);
      td.appendChild(text);
      tr.appendChild(td);
      tableBody.appendChild(tr);
    });

    const tableRoot = tooltipEl.querySelector('table');

    // Remove old children
    while (tableRoot.firstChild) {
      tableRoot.firstChild.remove();
    }

    // Add new children
    tableRoot.appendChild(tableHead);
    tableRoot.appendChild(tableBody);
  }

  const {offsetLeft: positionX, offsetTop: positionY} = chart.canvas;

  // Display, position, and set styles for font
  tooltipEl.style.opacity = 1;
  tooltipEl.style.left = positionX + tooltip.caretX + 'px';
  tooltipEl.style.top = positionY + tooltip.caretY + 'px';
  tooltipEl.style.font = tooltip.options.bodyFont.string;
  tooltipEl.style.padding = tooltip.options.padding + 'px ' + tooltip.options.padding + 'px';
};
```

----------------------------------------

TITLE: Disabling Line Drawing in Chart.js (JavaScript)
DESCRIPTION: Illustrates how to disable the rendering of the line element for a dataset or globally in a Chart.js line chart. Setting showLine: false reduces the drawing workload, improving performance when only points are needed.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/performance.md#_snippet_5

LANGUAGE: javascript
CODE:
```
new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            showLine: false // disable for a single dataset
        }]
    },
    options: {
        showLine: false // disable for all datasets
    }
});
```

----------------------------------------

TITLE: Configuring Chart.js Pie Chart with Custom Logic
DESCRIPTION: This snippet defines the setup, data generation, custom coloring functions, and configuration for a Chart.js Pie Chart. It includes actions to randomize data and toggle between Pie and Doughnut views. The coloring function applies different colors based on the data value.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/pie.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:setup:2>
const DATA_COUNT = 5;
Utils.srand(110);

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
  {
    name: 'Toggle Doughnut View',
    handler(chart) {
      if (chart.options.cutout) {
        chart.options.cutout = 0;
      } else {
        chart.options.cutout = '50%';
      }
      chart.update();
    }
  }
];
// </block:setup>

// <block:data:1>
function generateData() {
  return Utils.numbers({
    count: DATA_COUNT,
    min: -100,
    max: 100
  });
}

const data = {
  datasets: [{
    data: generateData()
  }]
};
// </block:data>

// <block:options:0>
function colorize(opaque, hover, ctx) {
  const v = ctx.parsed;
  const c = v < -50 ? '#D60000'
    : v < 0 ? '#F46300'
    : v < 50 ? '#0358B6'
    : '#44DE28';

  const opacity = hover ? 1 - Math.abs(v / 150) - 0.2 : 1 - Math.abs(v / 150);

  return opaque ? c : Utils.transparentize(c, opacity);
}

function hoverColorize(ctx) {
  return colorize(false, true, ctx);
}

const config = {
  type: 'pie',
  data: data,
  options: {
    plugins: {
      legend: false,
      tooltip: false,
    },
    elements: {
      arc: {
        backgroundColor: colorize.bind(null, false, false),
        hoverBackgroundColor: hoverColorize
      }
    }
  }
};
// </block:options>

module.exports = {
  actions,
  config,
};
```

----------------------------------------

TITLE: Linking Datasets to Axes by ID in Chart.js (JavaScript)
DESCRIPTION: This example illustrates how to associate datasets with specific axes in a Chart.js chart, particularly useful for multi-axis configurations. It shows assigning a unique `yAxisID` to each dataset and defining corresponding scales with matching IDs in the chart's options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/index.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const myChart = new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            // This dataset appears on the first axis
            yAxisID: 'first-y-axis'
        }, {
            // This dataset appears on the second axis
            yAxisID: 'second-y-axis'
        }]
    },
    options: {
        scales: {
            'first-y-axis': {
                type: 'linear'
            },
            'second-y-axis': {
                type: 'linear'
            }
        }
    }
});
```

----------------------------------------

TITLE: Escaping Dots in Custom Parsing Keys (JavaScript)
DESCRIPTION: Explains how to escape dots in custom `xAxisKey` or `yAxisKey` strings when the object property name itself contains a dot. A double backslash (`\\.`) is used for escaping.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/data-structures.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const cfg = {
  type: 'line',
  data: {
    datasets: [{
      data: [{'data.key': 'one', 'data.value': 20}, {'data.key': 'two', 'data.value': 30}]
    }]
  },
  options: {
    parsing: {
      xAxisKey: 'data\\.key',
      yAxisKey: 'data\\.value'
    }
  }
}
```

----------------------------------------

TITLE: Basic Radar Chart Data and Configuration Setup
DESCRIPTION: This snippet shows the basic structure for defining data and configuration options for a Chart.js radar chart. It includes labels, two datasets with styling properties, the chart type, and element options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/radar.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const data = {
  labels: [
    'Eating',
    'Drinking',
    'Sleeping',
    'Designing',
    'Coding',
    'Cycling',
    'Running'
  ],
  datasets: [{
    label: 'My First Dataset',
    data: [65, 59, 90, 81, 56, 55, 40],
    fill: true,
    backgroundColor: 'rgba(255, 99, 132, 0.2)',
    borderColor: 'rgb(255, 99, 132)',
    pointBackgroundColor: 'rgb(255, 99, 132)',
    pointBorderColor: '#fff',
    pointHoverBackgroundColor: '#fff',
    pointHoverBorderColor: 'rgb(255, 99, 132)'
  }, {
    label: 'My Second Dataset',
    data: [28, 48, 40, 19, 96, 27, 100],
    fill: true,
    backgroundColor: 'rgba(54, 162, 235, 0.2)',
    borderColor: 'rgb(54, 162, 235)',
    pointBackgroundColor: 'rgb(54, 162, 235)',
    pointBorderColor: '#fff',
    pointHoverBackgroundColor: '#fff',
    pointHoverBorderColor: 'rgb(54, 162, 235)'
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'radar',
  data: data,
  options: {
    elements: {
      line: {
        borderWidth: 3
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config
};
```

----------------------------------------

TITLE: Set Chart.js Padding (Number) - JavaScript
DESCRIPTION: Configures padding for a Chart.js chart using a single number value. This number is applied equally to the top, left, bottom, and right sides of the chart layout. Requires a Chart.js instance and context (ctx), data, and options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/padding.md#_snippet_0

LANGUAGE: javascript
CODE:
```
let chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        layout: {
            padding: 20
        }
    }
});
```

----------------------------------------

TITLE: Configuring Chart.js Bar Chart Options (JavaScript)
DESCRIPTION: Configures the main Chart.js chart object. It specifies the chart `type` as 'bar', links the `data` object defined in the setup block, and sets various `options` including `responsive: true`, legend position, and title display and text. This configuration is used to initialize the chart instance.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/border-radius.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'bar',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Bar Chart'
      }
    }
  },
};
```

----------------------------------------

TITLE: Disabling Chart.js Animations (JavaScript)
DESCRIPTION: Demonstrates various ways to disable animations in Chart.js, including disabling all animations, animations for specific property collections, animations for individual properties, or animations for a specific transition mode by setting its duration to 0.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/animations.md#_snippet_2

LANGUAGE: javascript
CODE:
```
chart.options.animation = false; // disables all animations
chart.options.animations.colors = false; // disables animation defined by the collection of 'colors' properties
chart.options.animations.x = false; // disables animation defined by the 'x' property
chart.options.transitions.active.animation.duration = 0; // disables the animation for 'active' mode
```

----------------------------------------

TITLE: Configuring Chart.js Line Chart with Suggested Y-Axis Range (JavaScript)
DESCRIPTION: This snippet sets up the data and configuration for a Chart.js line chart. It specifically demonstrates how to use the `suggestedMin` and `suggestedMax` options within the y-axis scale configuration to influence the range used for tick generation.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/linear-min-max-suggested.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: [10, 30, 39, 20, 25, 34, -10],
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.CHART_COLORS.red,
    },
    {
      label: 'Dataset 2',
      data: [18, 33, 22, 19, 11, 39, 30],
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.CHART_COLORS.blue,
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Suggested Min and Max Settings'
      }
    },
    scales: {
      y: {
        // the data minimum used for determining the ticks is Math.min(dataMin, suggestedMin)
        suggestedMin: 30,

        // the data maximum used for determining the ticks is Math.max(dataMax, suggestedMax)
        suggestedMax: 50,
      }
    }
  },
};
// </block:config>

module.exports = {
  config: config,
};

```

----------------------------------------

TITLE: Configure Radar Chart Options (JavaScript)
DESCRIPTION: Defines the main chart configuration object (`config`) specifying the chart `type` as 'radar', linking the `data` object, and setting chart `options` including filler plugin configuration and interaction settings.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/area/radar.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// <block:config:0>
const config = {
  type: 'radar',
  data: data,
  options: {
    plugins: {
      filler: {
        propagate: false
      },
      'samples-filler-analyser': {
        target: 'chart-analyser'
      }
    },
    interaction: {
      intersect: false
    }
  }
};
// </block:config>
```

----------------------------------------

TITLE: Set Chart.js Padding (Object) - JavaScript
DESCRIPTION: Configures padding for a Chart.js chart using an object with specific values for 'top', 'left', 'bottom', and 'right'. Omitted properties default to 0. This example sets 50px of padding only to the left side. Requires a Chart.js instance, context, data, and options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/padding.md#_snippet_1

LANGUAGE: javascript
CODE:
```
let chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        layout: {
            padding: {
                left: 50
            }
        }
    }
});
```

----------------------------------------

TITLE: Chart.js Interaction Modes Configuration and Actions (JavaScript)
DESCRIPTION: This snippet provides a complete example demonstrating Chart.js interaction modes. It includes the chart data setup, the main chart configuration object defining the chart type, data, and initial interaction options (mode, axis, intersect), and an array of action handlers that dynamically modify the chart's interaction settings and trigger an update.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/interactions.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:actions:2>
const actions = [
  {
    name: 'Mode: index',
    handler(chart) {
      chart.options.interaction.axis = 'xy';
      chart.options.interaction.mode = 'index';
      chart.update();
    }
  },
  {
    name: 'Mode: dataset',
    handler(chart) {
      chart.options.interaction.axis = 'xy';
      chart.options.interaction.mode = 'dataset';
      chart.update();
    }
  },
  {
    name: 'Mode: point',
    handler(chart) {
      chart.options.interaction.axis = 'xy';
      chart.options.interaction.mode = 'point';
      chart.update();
    }
  },
  {
    name: 'Mode: nearest, axis: xy',
    handler(chart) {
      chart.options.interaction.axis = 'xy';
      chart.options.interaction.mode = 'nearest';
      chart.update();
    }
  },
  {
    name: 'Mode: nearest, axis: x',
    handler(chart) {
      chart.options.interaction.axis = 'x';
      chart.options.interaction.mode = 'nearest';
      chart.update();
    }
  },
  {
    name: 'Mode: nearest, axis: y',
    handler(chart) {
      chart.options.interaction.axis = 'y';
      chart.options.interaction.mode = 'nearest';
      chart.update();
    }
  },
  {
    name: 'Mode: x',
    handler(chart) {
      chart.options.interaction.mode = 'x';
      chart.update();
    }
  },\n  {
    name: 'Mode: y',
    handler(chart) {
      chart.options.interaction.mode = 'y';
      chart.update();
    }
  },
  {
    name: 'Toggle Intersect',
    handler(chart) {
      chart.options.interaction.intersect = !chart.options.interaction.intersect;
      chart.update();
    }
  },
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    },
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    interaction: {
      intersect: false,
      mode: 'index',
    },
    plugins: {
      title: {
        display: true,
        text: (ctx) => {
          const {axis = 'xy', intersect, mode} = ctx.chart.options.interaction;
          return 'Mode: ' + mode + ', axis: ' + axis + ', intersect: ' + intersect;
        }
      },
    }
  }
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Using Array of Arrays Data in Chart.js Dataset (JavaScript)
DESCRIPTION: Shows how to provide dataset data as an array of arrays (tuples). The first element of each inner array is used for the index axis (e.g., x), and the second for the value axis (e.g., y).
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/data-structures.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const cfg = {
  type: 'line',
  data: {
    datasets: [{
      data: [[10, 20], [15, null], [20, 10]]
    }]
  }
}
```

----------------------------------------

TITLE: Setting Up Chart.js Data and Datasets - JavaScript
DESCRIPTION: Defines the data structure for a Chart.js bar chart. Includes labels and multiple datasets, demonstrating the use of the `stack` property to group bars.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/stacked-groups.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.red,
      stack: 'Stack 0',
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.blue,
      stack: 'Stack 0',
    },
    {
      label: 'Dataset 3',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.green,
      stack: 'Stack 1',
    },
  ]
};
```

----------------------------------------

TITLE: Call Default Chart.js Tick Formatter (JavaScript)
DESCRIPTION: This snippet shows how to call the default numeric tick formatter within a custom `ticks.callback` function. This allows you to get the default formatted value and then modify it, rather than handling all formatting yourself.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/labelling.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// call the default formatter, forwarding `this`
return '$' + Chart.Ticks.formatters.numeric.apply(this, [value, index, ticks]);
```

----------------------------------------

TITLE: Set Active Elements (Chart.js)
DESCRIPTION: Programmatically sets which chart elements are considered 'active', typically triggering hover effects and tooltips. The method accepts an array of objects, where each object specifies the `datasetIndex` and `index` of the element to activate. This allows simulating user interaction.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_20

LANGUAGE: javascript
CODE:
```
chart.setActiveElements([
    {datasetIndex: 0, index: 1}
]);
```

----------------------------------------

TITLE: Chart.js Tooltip Model Structure (JavaScript)
DESCRIPTION: Defines the structure and properties of the Chart.js tooltip model object, including data points, positioning, body, title, footer, styling, opacity, and options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/tooltip.md#_snippet_5

LANGUAGE: javascript
CODE:
```
{
    chart: Chart,

    // The items that we are rendering in the tooltip. See Tooltip Item Interface section
    dataPoints: TooltipItem[],

    // Positioning
    xAlign: string,
    yAlign: string,

    // X and Y properties are the top left of the tooltip
    x: number,
    y: number,
    width: number,
    height: number,
    // Where the tooltip points to
    caretX: number,
    caretY: number,

    // Body
    // The body lines that need to be rendered
    // Each object contains 3 parameters
    // before: string[] // lines of text before the line with the color square
    // lines: string[], // lines of text to render as the main item with color square
    // after: string[], // lines of text to render after the main lines
    body: object[],
    // lines of text that appear after the title but before the body
    beforeBody: string[],
    // line of text that appear after the body and before the footer
    afterBody: string[],

    // Title
    // lines of text that form the title
    title: string[],

    // Footer
    // lines of text that form the footer
    footer: string[],

    // style to render for each item in body[]. This is the style of the squares in the tooltip
    labelColors: TooltipLabelStyle[],
    labelTextColors: Color[],
    labelPointStyles: { pointStyle: PointStyle; rotation: number }[],

    // 0 opacity is a hidden tooltip
    opacity: number,

    // tooltip options
    options: Object
}
```

----------------------------------------

TITLE: Generating Chart Data (JavaScript)
DESCRIPTION: Defines a function `generateData` to create an array of random numbers and structures the chart data object with labels and a dataset using this function.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/line.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// <block:data:1>
function generateData() {
  return Utils.numbers({
    count: DATA_COUNT,
    min: 0,
    max: 100
  });
}

const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [{
    data: generateData()
  }]
};
// </block:data>
```

----------------------------------------

TITLE: Setting Up Chart Data and Point Styling in Chart.js (JavaScript)
DESCRIPTION: This snippet defines the 'data' object used to configure a Chart.js chart. It includes an array of 'labels' for the x-axis and a 'datasets' array containing one dataset. The dataset specifies the data points, border color, background color, and initial point styling options like 'pointStyle', 'pointRadius', and 'pointHoverRadius'. It uses utility functions ('Utils.numbers', 'Utils.CHART_COLORS', 'Utils.transparentize') which are assumed to be available.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/point-styling.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const data = {
  labels: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6'],
  datasets: [
    {
      label: 'Dataset',
      data: Utils.numbers({count: 6, min: -100, max: 100}),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      pointStyle: 'circle',
      pointRadius: 10,
      pointHoverRadius: 15
    }
  ]
};
```

----------------------------------------

TITLE: Disabling All Plugins for Specific Chart Instance
DESCRIPTION: Shows how to disable all plugins, both global and inline, for a specific chart instance by setting the entire `options.plugins` object to `false`.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/plugins.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    options: {
        plugins: false // all plugins are disabled for this instance
    }
});
```

----------------------------------------

TITLE: Define Category Axis Labels Globally in Chart.js
DESCRIPTION: This snippet shows how to define labels for a category axis globally within the chart's data object. This is the default method when not specifying labels directly on the axis.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/category.md#_snippet_0

LANGUAGE: javascript
CODE:
```
let chart = new Chart(ctx, {
    type: ...
    data: {
        labels: ['January', 'February', 'March', 'April', 'May', 'June'],
        datasets: ...
    }
});
```

----------------------------------------

TITLE: Configuring Stacked Bar Chart Options - JavaScript
DESCRIPTION: Configures the options for a Chart.js bar chart. Sets the chart type to 'bar', links the data, enables a title, and configures both x and y axes to be stacked.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/stacked-groups.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const config = {
  type: 'bar',
  data: data,
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Bar Chart - Stacked'
      },
    },
    responsive: true,
    interaction: {
      intersect: false,
    },
    scales: {
      x: {
        stacked: true,
      },
      y: {
        stacked: true
      }
    }
  }
};
```

----------------------------------------

TITLE: Configure Chart Options and Scriptable Point Styling for Chart.js Bubble Chart (JavaScript)
DESCRIPTION: This section defines helper functions `channelValue` and `colorize` used to dynamically determine point colors based on data values. It sets up the main chart configuration object, specifying the 'bubble' type and defining scriptable options for point elements like background color, border color, border width, hover styles, and radius based on data properties and chart size.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/bubble.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function channelValue(x, y, values) {
  return x < 0 && y < 0 ? values[0] : x < 0 ? values[1] : y < 0 ? values[2] : values[3];
}

function colorize(opaque, context) {
  const value = context.raw;
  const x = value.x / 100;
  const y = value.y / 100;
  const r = channelValue(x, y, [250, 150, 50, 0]);
  const g = channelValue(x, y, [0, 50, 150, 250]);
  const b = channelValue(x, y, [0, 150, 150, 250]);
  const a = opaque ? 1 : 0.5 * value.v / 1000;

  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
}

const config = {
  type: 'bubble',
  data: data,
  options: {
    aspectRatio: 1,
    plugins: {
      legend: false,
      tooltip: false,
    },
    elements: {
      point: {
        backgroundColor: colorize.bind(null, false),

        borderColor: colorize.bind(null, true),

        borderWidth: function(context) {
          return Math.min(Math.max(1, context.datasetIndex + 1), 8);
        },

        hoverBackgroundColor: 'transparent',

        hoverBorderColor: function(context) {
          return Utils.color(context.datasetIndex);
        },

        hoverBorderWidth: function(context) {
          return Math.round(8 * context.raw.v / 1000);
        },

        radius: function(context) {
          const size = context.chart.width;
          const base = Math.abs(context.raw.v) / 1000;
          return (size / 24) * base;
        }
      }
    }
  }
};
```

----------------------------------------

TITLE: Setup Radar Chart Data with Skipped Points - Chart.js JavaScript
DESCRIPTION: Sets up the data structure for the radar chart. It defines labels and three datasets, each initialized with random numbers. For demonstration, one data point in each dataset is explicitly set to null (first, middle, or last) to show how Chart.js handles skipped points.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/radar-skip-points.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = Utils.months({count: 7});
const dataFirstSkip = Utils.numbers(NUMBER_CFG);
const dataMiddleSkip = Utils.numbers(NUMBER_CFG);
const dataLastSkip = Utils.numbers(NUMBER_CFG);

dataFirstSkip[0] = null;
dataMiddleSkip[Number.parseInt(dataMiddleSkip.length / 2, 10)] = null;
dataLastSkip[dataLastSkip.length - 1] = null;

const data = {
  labels: labels,
  datasets: [
    {
      label: 'Skip first dataset',
      data: dataFirstSkip,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Skip mid dataset',
      data: dataMiddleSkip,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    },
    {
      label: 'Skip last dataset',
      data: dataLastSkip,
      borderColor: Utils.CHART_COLORS.green,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.green, 0.5),
    }
  ]
};
```

----------------------------------------

TITLE: Resizing Chart.js to Explicit Dimensions - JavaScript
DESCRIPTION: Provide width and height parameters to the .resize() method to set the canvas to specific dimensions, useful for scenarios like printing.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_7

LANGUAGE: javascript
CODE:
```
// With an explicit size:
myLineChart.resize(width, height);
```

----------------------------------------

TITLE: Define Chart Actions (Chart.js, JavaScript)
DESCRIPTION: Defines an array of interactive actions for the chart, such as randomizing data, adding/removing datasets, and adding/removing data points. Each action has a name and a handler function that modifies the chart data and updates the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/line.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Implementing Custom Chart.js Legend Click Logic (JavaScript)
DESCRIPTION: Demonstrates how to create a custom click handler for legend items in Chart.js. This example links the visibility of the first two datasets and falls back to default behavior for others.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/legend.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const defaultLegendClickHandler = Chart.defaults.plugins.legend.onClick;
const pieDoughnutLegendClickHandler = Chart.controllers.doughnut.overrides.plugins.legend.onClick;
const newLegendClickHandler = function (e, legendItem, legend) {
    const index = legendItem.datasetIndex;
    const type = legend.chart.config.type;

    if (index > 1) {
        // Do the original logic
        if (type === 'pie' || type === 'doughnut') {
            pieDoughnutLegendClickHandler(e, legendItem, legend)
        } else {
            defaultLegendClickHandler(e, legendItem, legend);
        }

    } else {
        let ci = legend.chart;
        [
            ci.getDatasetMeta(0),
            ci.getDatasetMeta(1)
        ].forEach(function(meta) {
            meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
        });
        ci.update();
    }
};

const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        plugins: {
            legend: {
                onClick: newLegendClickHandler
            }
        }
    }
});
```

----------------------------------------

TITLE: Configure Vertical Bar Chart (JavaScript)
DESCRIPTION: This snippet defines the main configuration object for the Chart.js instance. It specifies the chart type as 'bar', links the previously defined `data` object, and sets various options like responsiveness and plugin configurations for the legend and title.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/vertical.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// <block:config:0>
const config = {
  type: 'bar',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Bar Chart'
      }
    }
  },
};
// </block:config>
```

----------------------------------------

TITLE: Using Shared Plugin Instance in Chart.js
DESCRIPTION: Demonstrates how to define a plugin object and reuse the same instance across multiple Chart.js chart instances by including it in the `plugins` array during chart initialization. Shows how to exclude a plugin from a chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/plugins.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const plugin = { /* plugin implementation */ };

// chart1 and chart2 use "plugin"
const chart1 = new Chart(ctx, {
    plugins: [plugin]
});

const chart2 = new Chart(ctx, {
    plugins: [plugin]
});

// chart3 doesn't use "plugin"
const chart3 = new Chart(ctx, {});
```

----------------------------------------

TITLE: Setting Up Chart Data and Labels (Chart.js, JavaScript)
DESCRIPTION: Sets up the chart data structure, including labels generated from months and two datasets populated with random numbers, specifying different y-axis IDs ('y' and 'y1') for each dataset.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/multi-axis.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n      yAxisID: 'y',\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n      yAxisID: 'y1',\n    }\n  ]\n};\n// </block:setup>
```

----------------------------------------

TITLE: Creating a Horizontal Bar Chart using Chart.js
DESCRIPTION: This snippet demonstrates how to create a horizontal bar chart in Chart.js. It includes the data structure definition and the chart configuration object, highlighting the use of `indexAxis: 'y'` to orient the bars horizontally.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/bar.md#_snippet_5

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    axis: 'y',
    label: 'My First Dataset',
    data: [65, 59, 80, 81, 56, 55, 40],
    fill: false,
    backgroundColor: [
      'rgba(255, 99, 132, 0.2)',
      'rgba(255, 159, 64, 0.2)',
      'rgba(255, 205, 86, 0.2)',
      'rgba(75, 192, 192, 0.2)',
      'rgba(54, 162, 235, 0.2)',
      'rgba(153, 102, 255, 0.2)',
      'rgba(201, 203, 207, 0.2)'
    ],
    borderColor: [
      'rgb(255, 99, 132)',
      'rgb(255, 159, 64)',
      'rgb(255, 205, 86)',
      'rgb(75, 192, 192)',
      'rgb(54, 162, 235)',
      'rgb(153, 102, 255)',
      'rgb(201, 203, 207)'
    ],
    borderWidth: 1
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'bar',
  data,
  options: {
    indexAxis: 'y',
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Configure Bar Chart Options (JavaScript)
DESCRIPTION: Defines the `colorize` function to determine bar background and border colors based on the y-value, and sets up the `config` object for a bar chart, including plugins and element styling using the `colorize` function.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/bar.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function colorize(opaque) {
  return (ctx) => {
    const v = ctx.parsed.y;
    const c = v < -50 ? '#D60000'
      : v < 0 ? '#F46300'
      : v < 50 ? '#0358B6'
      : '#44DE28';

    return opaque ? c : Utils.transparentize(c, 1 - Math.abs(v / 150));
  };
}

const config = {
  type: 'bar',
  data: data,
  options: {
    plugins: {
      legend: false,
    },
    elements: {
      bar: {
        backgroundColor: colorize(false),
        borderColor: colorize(true),
        borderWidth: 2
      }
    }
  }
};
```

----------------------------------------

TITLE: Configure Chart Options (Chart.js, JavaScript)
DESCRIPTION: Defines the configuration object for the Chart.js line chart, specifying the chart type ('line'), the data object, and various options like responsiveness, legend position, and title display and text.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/line.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Line Chart'
      }
    }
  },
};
```

----------------------------------------

TITLE: Using Object Array with Custom Keys in Chart.js Dataset (JavaScript)
DESCRIPTION: Demonstrates how to use an array of objects with custom property names for data points. The `parsing` option in chart options is used to map `xAxisKey` and `yAxisKey` to the custom properties.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/data-structures.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const cfg = {
  type: 'bar',
  data: {
    datasets: [{
      data: [{id: 'Sales', nested: {value: 1500}}, {id: 'Purchases', nested: {value: 500}}]
    }]
  },
  options: {
    parsing: {
      xAxisKey: 'id',
      yAxisKey: 'nested.value'
    }
  }
}
```

----------------------------------------

TITLE: Configure Axis Titles in Chart.js Line Chart (JavaScript)
DESCRIPTION: This snippet sets up sample data and configures a Chart.js line chart. It specifically demonstrates how to customize the 'title' property within the 'scales' options for both the x and y axes, allowing control over text, color, font properties (family, size, weight, style, lineHeight), and padding.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scale-options/titles.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    scales: {
      x: {
        display: true,
        title: {
          display: true,
          text: 'Month',
          color: '#911',
          font: {
            family: 'Comic Sans MS',
            size: 20,
            weight: 'bold',
            lineHeight: 1.2,
          },
          padding: {top: 20, left: 0, right: 0, bottom: 0}
        }
      },
      y: {
        display: true,
        title: {
          display: true,
          text: 'Value',
          color: '#191',
          font: {
            family: 'Times',
            size: 20,
            style: 'normal',
            lineHeight: 1.2
          },
          padding: {top: 30, left: 0, right: 0, bottom: 0}
        }
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Defining Chart.js Line Chart Configuration with Progressive Animation - JavaScript
DESCRIPTION: Sets up the main Chart.js configuration object. It specifies the chart type as 'line', provides the generated data for two datasets, and includes the custom `animation` object in the options. It also disables legend and sets the x-axis type to linear.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/animations/progressive-line.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'line',
  data: {
    datasets: [{
      borderColor: Utils.CHART_COLORS.red,
      borderWidth: 1,
      radius: 0,
      data: data,
    },
    {
      borderColor: Utils.CHART_COLORS.blue,
      borderWidth: 1,
      radius: 0,
      data: data2,
    }]
  },
  options: {
    animation,
    interaction: {
      intersect: false
    },
    plugins: {
      legend: false
    },
    scales: {
      x: {
        type: 'linear'
      }
    }
  }
};
```

----------------------------------------

TITLE: Configuring Chart.js Stacked Chart (JavaScript)
DESCRIPTION: Defines the main configuration object for a Chart.js chart, specifying the chart type ('line'), linking the data, and configuring options like the title plugin and stacked y-axis scale.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/stacked-bar-line.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Stacked Line/Bar Chart'
      }
    },
    scales: {
      y: {
        stacked: true
      }
    }
  },
};
```

----------------------------------------

TITLE: Handling Custom Events with Plugins (JavaScript)
DESCRIPTION: This snippet demonstrates how to use a custom Chart.js plugin to capture and process events that may not occur directly over the chart area, such as 'mouseout'. The `beforeEvent` hook in the plugin receives the event details, allowing custom logic to be executed.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/interactions.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
  type: 'line',
  data: data,
  options: {
    // these are the default events:
    // events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],
  },
  plugins: [{
    id: 'myEventCatcher',
    beforeEvent(chart, args, pluginOptions) {
      const event = args.event;
      if (event.type === 'mouseout') {
        // process the event
      }
    }
  }]
});
```

----------------------------------------

TITLE: Disabling Point Drawing in Chart.js (JavaScript)
DESCRIPTION: Shows how to disable the rendering of point elements in a Chart.js line chart by setting pointRadius or radius to 0. This can be applied per dataset, specifically for line datasets, or as a global default for all point elements to improve performance.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/performance.md#_snippet_6

LANGUAGE: javascript
CODE:
```
new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            pointRadius: 0 // disable for a single dataset
        }]
    },
    options: {
        datasets: {
            line: {
                pointRadius: 0 // disable for all 'line' datasets
            }
        },
        elements: {
            point: {
                radius: 0 // default to disabled in all datasets
            }
        }
    }
});
```

----------------------------------------

TITLE: Customize Chart.js Y-Axis Ticks with Dollar Sign (JavaScript)
DESCRIPTION: This snippet demonstrates how to create a Chart.js line chart and customize the Y-axis tick labels. It uses the `ticks.callback` function to prepend a dollar sign ('$') to each tick value displayed on the axis.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/labelling.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        scales: {
            y: {
                ticks: {
                    // Include a dollar sign in the ticks
                    callback: function(value, index, ticks) {
                        return '$' + value;
                    }
                }
            }
        }
    }
});
```

----------------------------------------

TITLE: Configure Chart.js Grid Styling and Options (JavaScript)
DESCRIPTION: Defines the main Chart.js configuration object. It sets the chart type, data, and options, including responsiveness, title, and detailed scale configurations. Demonstrates controlling X-axis grid visibility and using a scriptable function for Y-axis grid line color based on the tick value.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scale-options/grid.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// <block:config:0>
// Change these settings to change the display for different parts of the X axis
// grid configuration
const DISPLAY = true;
const BORDER = true;
const CHART_AREA = true;
const TICKS = true;

const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Grid Line Settings'
      }
    },
    scales: {
      x: {
        border: {
          display: BORDER
        },
        grid: {
          display: DISPLAY,
          drawOnChartArea: CHART_AREA,
          drawTicks: TICKS,
        }
      },
      y: {
        border: {
          display: false
        },
        grid: {
          color: function(context) {
            if (context.tick.value > 0) {
              return Utils.CHART_COLORS.green;
            } else if (context.tick.value < 0) {
              return Utils.CHART_COLORS.red;
            }

            return '#000000';
          },
        },
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Configuring Scatter Chart Options - Chart.js - JavaScript
DESCRIPTION: Sets up the main configuration object for a Chart.js scatter chart, specifying the chart type, linking the data, and defining options like responsiveness, legend position, and title.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/scatter.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const config = {
  type: 'scatter',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Scatter Chart'
      }
    }
  },
};
```

----------------------------------------

TITLE: Getting Chart.js Image as Base64 (PNG) - JavaScript
DESCRIPTION: The .toBase64Image() method returns a base64 encoded string representing the chart's current state on the canvas. By default, it produces a PNG image.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_9

LANGUAGE: javascript
CODE:
```
myLineChart.toBase64Image();
// => returns png data url of the image on the canvas
```

----------------------------------------

TITLE: Hide Dataset or Data Element (Chart.js)
DESCRIPTION: Hides either an entire dataset or a specific data element within a dataset. If only `datasetIndex` is provided, the whole dataset is hidden with a configurable 'hide' animation. If both `datasetIndex` and `dataIndex` are provided, only the specific data element is hidden.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_18

LANGUAGE: javascript
CODE:
```
chart.hide(1);
chart.hide(0, 2);
```

----------------------------------------

TITLE: Configuring Multi-Series Pie Chart in Chart.js
DESCRIPTION: This snippet defines the data structure and configuration options for a multi-series pie chart. It includes custom functions for generating legend labels based on dataset colors, handling legend item clicks to toggle dataset visibility, and formatting tooltip titles to show the correct label for each slice.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/multi-series-pie.md#_snippet_0

LANGUAGE: js
CODE:
```
// <block:setup:1>
const DATA_COUNT = 5;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: ['Overall Yay', 'Overall Nay', 'Group A Yay', 'Group A Nay', 'Group B Yay', 'Group B Nay', 'Group C Yay', 'Group C Nay'],
  datasets: [
    {
      backgroundColor: ['#AAA', '#777'],
      data: [21, 79]
    },
    {
      backgroundColor: ['hsl(0, 100%, 60%)', 'hsl(0, 100%, 35%)'],
      data: [33, 67]
    },
    {
      backgroundColor: ['hsl(100, 100%, 60%)', 'hsl(100, 100%, 35%)'],
      data: [20, 80]
    },
    {
      backgroundColor: ['hsl(180, 100%, 60%)', 'hsl(180, 100%, 35%)'],
      data: [10, 90]
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'pie',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        labels: {
          generateLabels: function(chart) {
            // Get the default label list
            const original = Chart.overrides.pie.plugins.legend.labels.generateLabels;
            const labelsOriginal = original.call(this, chart);

            // Build an array of colors used in the datasets of the chart
            let datasetColors = chart.data.datasets.map(function(e) {
              return e.backgroundColor;
            });
            datasetColors = datasetColors.flat();

            // Modify the color and hide state of each label
            labelsOriginal.forEach(label => {
              // There are twice as many labels as there are datasets. This converts the label index into the corresponding dataset index
              label.datasetIndex = (label.index - label.index % 2) / 2;

              // The hidden state must match the dataset's hidden state
              label.hidden = !chart.isDatasetVisible(label.datasetIndex);

              // Change the color to match the dataset
              label.fillStyle = datasetColors[label.index];
            });

            return labelsOriginal;
          }
        },
        onClick: function(mouseEvent, legendItem, legend) {
          // toggle the visibility of the dataset from what it currently is
          legend.chart.getDatasetMeta(
            legendItem.datasetIndex
          ).hidden = legend.chart.isDatasetVisible(legendItem.datasetIndex);
          legend.chart.update();
        }
      },
      tooltip: {
        callbacks: {
          title: function(context) {
            const labelIndex = (context[0].datasetIndex * 2) + context[0].dataIndex;
            return context[0].chart.data.labels[labelIndex] + ': ' + context[0].formattedValue;
          }
        }
      }
    }
  },
};
// </block:config>

module.exports = {
  config: config,
};
```

----------------------------------------

TITLE: Configuring Chart Type and Options in Chart.js (JavaScript)
DESCRIPTION: This snippet defines the 'config' object used to instantiate a Chart.js chart. It specifies the chart 'type' as 'line', links the 'data' object defined previously, and sets various 'options'. The options include 'responsive: true' and a 'plugins' configuration for the 'title'. The title text is dynamically generated using a context function ('ctx') to display the current 'pointStyle' of the first dataset.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/point-styling.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: (ctx) => 'Point Style: ' + ctx.chart.data.datasets[0].pointStyle,
      }
    }
  }
};
```

----------------------------------------

TITLE: Create Doughnut Chart Data and Config (Chart.js)
DESCRIPTION: This snippet defines the dataset and configuration object required to render a Doughnut chart using Chart.js. It includes labels, data values, background colors for the segments, and sets the chart type to 'doughnut'.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/doughnut.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
// <block:setup:1>
const data = {
  labels: [
    'Red',
    'Blue',
    'Yellow'
  ],
  datasets: [{
    label: 'My First Dataset',
    data: [300, 50, 100],
    backgroundColor: [
      'rgb(255, 99, 132)',
      'rgb(54, 162, 235)',
      'rgb(255, 205, 86)'
    ],
    hoverOffset: 4
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'doughnut',
  data: data,
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Prevent Chart.js Update Animation (JavaScript)
DESCRIPTION: Demonstrates how to update a chart without triggering the default animation by passing the string `'none'` as the mode argument to the `update()` method.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/updates.md#_snippet_5

LANGUAGE: javascript
CODE:
```
myChart.update('none');
```

----------------------------------------

TITLE: Registering the Built-in Colors Plugin in Chart.js (JavaScript)
DESCRIPTION: This snippet imports the `Colors` plugin from the Chart.js library and registers it with `Chart.register()`. Registering the plugin enables its functionality, which automatically assigns colors from a default palette to datasets if no colors are explicitly provided.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/colors.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import { Colors } from 'chart.js';

Chart.register(Colors);
```

----------------------------------------

TITLE: Configuring Chart.js Legend Display and Color (JavaScript)
DESCRIPTION: Provides a simple example of creating a Chart.js bar chart with the legend enabled and customizing the color of the legend labels.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/legend.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'bar',
    data: data,
    options: {
        plugins: {
            legend: {
                display: true,
                labels: {
                    color: 'rgb(255, 99, 132)'
                }
            }
        }
    }
});
```

----------------------------------------

TITLE: Static: Get Chart Instance (Chart.js)
DESCRIPTION: A static method on the `Chart` class used to retrieve a chart instance by its key. The key can be the ID string of the canvas element, the canvas element itself, or its 2D rendering context. Returns the chart instance if found, otherwise `undefined`.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_22

LANGUAGE: javascript
CODE:
```
const chart = Chart.getChart("canvas-id");
```

----------------------------------------

TITLE: Generating Chart Data (Chart.js, JavaScript)
DESCRIPTION: Provides a utility function to generate random numerical data and defines the structure of the chart's data object with labels and a dataset.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/polar.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
// <block:data:1>
function generateData() {
  return Utils.numbers({
    count: DATA_COUNT,
    min: 0,
    max: 100
  });
}

const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [{
    data: generateData()
  }]
};
// </block:data>
```

----------------------------------------

TITLE: Defining Chart.js Doughnut Data (JavaScript)
DESCRIPTION: This JavaScript object defines the initial data structure for the Chart.js doughnut chart. It includes labels for the segments and a dataset with initial data values and background colors. It uses a `Utils` object to generate numbers and access predefined chart colors.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/doughnut.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// <block:setup:1>\nconst DATA_COUNT = 5;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\n\nconst data = {\n  labels: ['Red', 'Orange', 'Yellow', 'Green', 'Blue'],\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      backgroundColor: Object.values(Utils.CHART_COLORS),\n    }\n  ]\n};\n// </block:setup>
```

----------------------------------------

TITLE: Disable Animations in Chart.js
DESCRIPTION: To improve performance, especially for charts with long render times, disable animations. This reduces CPU usage by rendering the chart only once per update. Line charts also benefit from Path2D caching when animations are disabled and Path2D is available.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/performance.md#_snippet_0

LANGUAGE: javascript
CODE:
```
new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        animation: false
    }
});
```

----------------------------------------

TITLE: Configure Radar Chart with Title - Chart.js JavaScript
DESCRIPTION: Defines the main configuration object for the Chart.js radar chart. It specifies the chart type as 'radar', links the prepared data object, and sets various options including responsiveness and the display of a title plugin.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/radar-skip-points.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'radar',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Radar Skip Points Chart'
      }
    }
  },
};
```

----------------------------------------

TITLE: Generate Data for Bar Chart (JavaScript)
DESCRIPTION: Contains a function `generateData` to create an array of random numbers and defines the `data` object for the chart, including labels and a dataset using the generated data.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/bar.md#_snippet_1

LANGUAGE: javascript
CODE:
```
function generateData() {
  return Utils.numbers({
    count: DATA_COUNT,
    min: -100,
    max: 100
  });
}

const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [{
    data: generateData(),
  }]
};
```

----------------------------------------

TITLE: Defining Data Structure for Pie Chart - Chart.js JavaScript
DESCRIPTION: This snippet illustrates the basic data structure required for a Chart.js Pie or Doughnut chart. It includes a 'datasets' array containing an object with the chart's data values and a 'labels' array for corresponding labels used in the legend and tooltips.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/doughnut.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
data = {
    datasets: [{
        data: [10, 20, 30]
    }],

    // These labels appear in the legend and in the tooltips when hovering different arcs
    labels: [
        'Red',
        'Yellow',
        'Blue'
    ]
};
```

----------------------------------------

TITLE: Get Visible Dataset Count (Chart.js)
DESCRIPTION: Returns the total number of datasets within the chart that are currently not hidden. This method provides a quick way to determine how many datasets are actively being rendered.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_14

LANGUAGE: javascript
CODE:
```
const numberOfVisibleDatasets = chart.getVisibleDatasetCount();
```

----------------------------------------

TITLE: Configuring Chart.js Stacked Bar Chart (JavaScript)
DESCRIPTION: Defines the configuration object for a stacked bar chart, specifying the chart type, data, title plugin, responsiveness, and stacked scales for both axes.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/stacked.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
// <block:config:0>
const config = {
  type: 'bar',
  data: data,
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Bar Chart - Stacked'
      },
    },
    responsive: true,
    scales: {
      x: {
        stacked: true,
      },
      y: {
        stacked: true
      }
    }
  }
};
// </block:config>
```

----------------------------------------

TITLE: Define Chart Data - Chart.js JS
DESCRIPTION: Defines the dataset for the Chart.js pie chart, including labels, data values, and initial background colors. This data structure is required for initializing the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/legend/events.md#_snippet_0

LANGUAGE: js
CODE:
```
const data = {
  labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
  datasets: [{
    label: '# of Votes',
    data: [12, 19, 3, 5, 2, 3],
    borderWidth: 1,
    backgroundColor: ['#CB4335', '#1F618D', '#F1C40F', '#27AE60', '#884EA0', '#D35400'],
  }]
};
```

----------------------------------------

TITLE: Configure Cartesian Axis Tick and Tick Mark Colors - Chart.js - JavaScript
DESCRIPTION: Illustrates how to set distinct colors for tick marks and tick labels on a Chart.js Cartesian axis by configuring the `scales.x.grid.tickColor` and `scales.x.ticks.color` options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/index.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    label: 'My First dataset',
    backgroundColor: 'rgba(54, 162, 235, 0.5)',
    borderColor: 'rgb(54, 162, 235)',
    borderWidth: 1,
    data: [10, 20, 30, 40, 50, 0, 5],
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data,
  options: {
    scales: {
      x: {
        grid: {
          tickColor: 'red'
        },
        ticks: {
          color: 'blue',
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Update Specific Chart.js Scale by ID (JavaScript)
DESCRIPTION: Shows how to update a single scale's configuration by directly modifying its entry within `chart.options.scales` using its ID.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/updates.md#_snippet_4

LANGUAGE: javascript
CODE:
```
function updateScale(chart) {
    chart.options.scales.y = {
        type: 'logarithmic'
    };
    chart.update();
}
```

----------------------------------------

TITLE: Setup Chart.js Pie Chart Data (JavaScript)
DESCRIPTION: Sets up the initial data structure for a Chart.js pie chart, including labels and a dataset with generated numbers and predefined background colors. It defines constants for data count and number generation configuration.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/pie.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 5;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const data = {
  labels: ['Red', 'Orange', 'Yellow', 'Green', 'Blue'],
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Object.values(Utils.CHART_COLORS),
    }
  ]
};
```

----------------------------------------

TITLE: Applying Grace Option to Linear Axis in Chart.js
DESCRIPTION: This example shows how to use the `grace` option on a linear y-axis in Chart.js. It configures a bar chart with positive and negative data and sets `grace: '5%'` on the y-axis scale, adding 5% padding to the top and bottom of the scale range based on the data values.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/linear.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: ['Positive', 'Negative'],
  datasets: [{
    data: [100, -50],
    backgroundColor: 'rgb(255, 99, 132)'
  }],
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'bar',
  data,
  options: {
    scales: {
      y: {
        type: 'linear',
        grace: '5%'
      }
    },
    plugins: {
      legend: false
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Setup Initial Chart Data and Constants (JavaScript)
DESCRIPTION: Sets up constants for data count and number configuration, and defines the initial data structure including labels and two datasets (one bar, one line) with generated numbers and colors.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/combo-bar-line.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      order: 1
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      type: 'line',
      order: 0
    }
  ]
};
```

----------------------------------------

TITLE: Configuring 'y' Interaction Mode in Chart.js (JavaScript)
DESCRIPTION: This snippet demonstrates configuring the 'y' interaction mode. This mode finds all items that intersect based solely on the Y coordinate of the interaction point, useful for horizontal cursors in cartesian charts.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/interactions.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        interaction: {
            mode: 'y'
        }
    }
});
```

----------------------------------------

TITLE: Configure Polar Area Chart (Chart.js)
DESCRIPTION: Configures the Chart.js instance for a Polar Area chart, specifying the chart type, linking the defined data, and setting basic options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/polar.md#_snippet_1

LANGUAGE: js
CODE:
```
const config = {
  type: 'polarArea',
  data: data,
  options: {}
};
```

----------------------------------------

TITLE: Handle Legend Hover Event - Chart.js JS
DESCRIPTION: Function triggered when a legend item is hovered. It iterates through the dataset's background colors, appending '4D' (alpha channel for 30% opacity) to colors that are not currently hovered and don't already have an alpha channel, then updates the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/legend/events.md#_snippet_1

LANGUAGE: js
CODE:
```
function handleHover(evt, item, legend) {
  legend.chart.data.datasets[0].backgroundColor.forEach((color, index, colors) => {
    colors[index] = index === item.index || color.length === 9 ? color : color + '4D';
  });
  legend.chart.update();
}
```

----------------------------------------

TITLE: Configure Cartesian Axis Grid Line Styles - Chart.js - JavaScript
DESCRIPTION: Shows how to customize the appearance of grid lines for a Cartesian axis in Chart.js, including setting the grid line color, border color, and tick mark color using the `scales.x.grid` options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/index.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    label: 'My First dataset',
    backgroundColor: 'rgba(54, 162, 235, 0.5)',
    borderColor: 'rgb(54, 162, 235)',
    borderWidth: 1,
    data: [10, 20, 30, 40, 50, 0, 5],
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data,
  options: {
    scales: {
      x: {
        grid: {
          color: 'red',
          borderColor: 'grey',
          tickColor: 'grey'
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Creating Vertical Line Chart with Chart.js
DESCRIPTION: This example demonstrates how to create a vertical line chart in Chart.js. By setting the `indexAxis` option to `'y'` in the chart configuration, the chart renders with the index axis (typically labels) along the y-axis, effectively rotating the chart orientation.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/line.md#_snippet_3

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    axis: 'y',
    label: 'My First Dataset',
    data: [65, 59, 80, 81, 56, 55, 40],
    fill: false,
    backgroundColor: [
      'rgba(255, 99, 132, 0.2)',
      'rgba(255, 159, 64, 0.2)',
      'rgba(255, 205, 86, 0.2)',
      'rgba(75, 192, 192, 0.2)',
      'rgba(54, 162, 235, 0.2)',
      'rgba(153, 102, 255, 0.2)',
      'rgba(201, 203, 207, 0.2)'
    ],
    borderColor: [
      'rgb(255, 99, 132)',
      'rgb(255, 159, 64)',
      'rgb(255, 205, 86)',
      'rgb(75, 192, 192)',
      'rgb(54, 162, 235)',
      'rgb(153, 102, 255)',
      'rgb(201, 203, 207)'
    ],
    borderWidth: 1
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    indexAxis: 'y',
    scales: {
      x: {
        beginAtZero: true
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Implementing a Chart.js Plugin - Chart Area Border (JSX)
DESCRIPTION: Provides an example of a custom Chart.js plugin (`chartAreaBorder`) that draws a border around the chart's plotting area. The plugin uses the `beforeDraw` hook to access the canvas context and chart dimensions, applying configurable styles (color, width, dash pattern) passed through the chart's `options.plugins` object before drawing the border. The plugin is then included in the chart's `plugins` array.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_12

LANGUAGE: JSX
CODE:
```
  const chartAreaBorder = {
    id: 'chartAreaBorder',

    beforeDraw(chart, args, options) {
      const { ctx, chartArea: { left, top, width, height } } = chart;

      ctx.save();
      ctx.strokeStyle = options.borderColor;
      ctx.lineWidth = options.borderWidth;
      ctx.setLineDash(options.borderDash || []);
      ctx.lineDashOffset = options.borderDashOffset;
      ctx.strokeRect(left, top, width, height);
      ctx.restore();
    }
  };

  new Chart(
    document.getElementById('dimensions'),
    {
      type: 'bubble',
      plugins: [ chartAreaBorder ],
      options: {
        plugins: {
          chartAreaBorder: {
            borderColor: 'red',
            borderWidth: 2,
            borderDash: [ 5, 5 ],
            borderDashOffset: 2,
          }
        },
        aspectRatio: 1,


```

----------------------------------------

TITLE: Chart.js Data Setup for Polar Area Chart (JS)
DESCRIPTION: Sets up the data structure for a Chart.js polar area chart. Defines the number of data points, configuration for random numbers, labels, and a dataset with random data and transparent background colors using Utils.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/polar-area-center-labels.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const DATA_COUNT = 5;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = ['Red', 'Orange', 'Yellow', 'Green', 'Blue'];
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: [
        Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
        Utils.transparentize(Utils.CHART_COLORS.orange, 0.5),
        Utils.transparentize(Utils.CHART_COLORS.yellow, 0.5),
        Utils.transparentize(Utils.CHART_COLORS.green, 0.5),
        Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      ]
    }
  ]
};
```

----------------------------------------

TITLE: Define Chart.js Line Chart Data (JS)
DESCRIPTION: Sets up the data object for a Chart.js line chart, including labels (months) and a single dataset with random numbers. Uses utility functions for data generation and color handling.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/legend/title.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
  ]
};
```

----------------------------------------

TITLE: Updating Chart.js Scale Type and Bounds
DESCRIPTION: This snippet demonstrates how to update the scale options of an existing Chart.js instance. It changes the x-axis type from 'time' to 'logarithmic' and sets the `bounds` property to 'ticks', which is necessary when switching from a time scale whose default bounds is 'data'.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/time.md#_snippet_4

LANGUAGE: javascript
CODE:
```
chart.options.scales.x = {
    type: 'logarithmic',
    bounds: 'ticks'
};
```

----------------------------------------

TITLE: Configuring Time Scale Min Value in Chart.js
DESCRIPTION: This snippet demonstrates how to configure the minimum value for a time scale on the x-axis in Chart.js. The `min` property is set to a specific date string, causing the axis to start at that point. The value can be a parsable date string or milliseconds since the UNIX epoch.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/time.md#_snippet_2

LANGUAGE: javascript
CODE:
```
let chart = new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            data: [{
                x: '2021-11-06 23:39:30',
                y: 50
            }, {
                x: '2021-11-07 01:00:28',
                y: 60
            }, {
                x: '2021-11-07 09:00:28',
                y: 20
            }]
        }],
    },
    options: {
        scales: {
            x: {
                min: '2021-11-07 00:00:00',
            }
        }
    }
});
```

----------------------------------------

TITLE: Configure Hide and Show Transitions in Chart.js
DESCRIPTION: This snippet shows how to configure 'show' and 'hide' transitions for a dataset in Chart.js. It defines animations for the 'x' and 'y' properties to animate from/to 0 when the dataset is shown or hidden.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/animations.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const data = {
  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
  datasets: [{
    label: 'Try hiding me',
    data: [65, 59, 80, 81, 26, 55, 40],
    fill: false,
    borderColor: 'rgb(75, 192, 192)',
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    transitions: {
      show: {
        animations: {
          x: {
            from: 0
          },
          y: {
            from: 0
          }
        }
      },
      hide: {
        animations: {
          x: {
            to: 0
          },
          y: {
            to: 0
          }
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Handle Legend Leave Event - Chart.js JS
DESCRIPTION: Function triggered when the mouse leaves a legend item. It iterates through the dataset's background colors, removing the '4D' alpha channel if present, effectively restoring full opacity, then updates the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/legend/events.md#_snippet_2

LANGUAGE: js
CODE:
```
function handleLeave(evt, item, legend) {
  legend.chart.data.datasets[0].backgroundColor.forEach((color, index, colors) => {
    colors[index] = color.length === 9 ? color.slice(0, -2) : color;
  });
  legend.chart.update();
}
```

----------------------------------------

TITLE: Configure Looping Tension Animation in Chart.js
DESCRIPTION: This snippet demonstrates how to configure a looping animation for the 'tension' property of a line dataset in Chart.js. It sets the duration, easing function, start and end values, and enables looping.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/animations.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const data = {
  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
  datasets: [{
    label: 'Looping tension',
    data: [65, 59, 80, 81, 26, 55, 40],
    fill: false,
    borderColor: 'rgb(75, 192, 192)',
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    animations: {
      tension: {
        duration: 1000,
        easing: 'linear',
        from: 1,
        to: 0,
        loop: true
      }
    },
    scales: {
      y: { // defining min and max so hiding the dataset does not change scale range
        min: 0,
        max: 100
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Configuring Chart with Logarithmic Y-Axis (JS)
DESCRIPTION: Defines the chart configuration object, specifying the chart type as 'line', assigning the data object, and configuring the options, including enabling a logarithmic scale for the y-axis.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/log.md#_snippet_2

LANGUAGE: js
CODE:
```
// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Line Chart - Logarithmic'
      }
    },
    scales: {
      x: {
        display: true,
      },
      y: {
        display: true,
        type: 'logarithmic',
      }
    }
  },
};
// </block:config>
```

----------------------------------------

TITLE: Create Custom Chart.js Tooltip Positioner (JavaScript)
DESCRIPTION: This function registers a custom tooltip positioner named 'bottom'. It calculates the average position using the default positioner but forces the y-coordinate to the bottom of the chart area and sets x/y alignment to 'center' and 'bottom' respectively.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/position.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// Create a custom tooltip positioner to put at the bottom of the chart area
components.Tooltip.positioners.bottom = function(items) {
  const pos = components.Tooltip.positioners.average(items);

  // Happens when nothing is found
  if (pos === false) {
    return false;
  }

  const chart = this.chart;

  return {
    x: pos.x,
    y: chart.chartArea.bottom,
    xAlign: 'center',
    yAlign: 'bottom',
  };
};
```

----------------------------------------

TITLE: Defining Chart.js Data Structure (JavaScript)
DESCRIPTION: This snippet defines the data object for a Chart.js line chart. It includes labels for the x-axis and two datasets, each with a label, generated data points, border color, and background color. It uses utility functions `Utils.months` and `Utils.numbers` to generate sample data.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/plugins/chart-area-border.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
```

----------------------------------------

TITLE: Configuring Line Segment Styling in Chart.js
DESCRIPTION: This code configures a Chart.js line chart to apply dynamic styling to individual line segments. It defines helper functions (`skipped`, `down`) used within the `segment` options to change `borderColor` and `borderDash` based on whether a data point is skipped or if the line segment is trending downwards. It also includes basic chart options and data setup.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/segments.md#_snippet_0

LANGUAGE: js
CODE:
```


// <block:segmentUtils:1>
const skipped = (ctx, value) => ctx.p0.skip || ctx.p1.skip ? value : undefined;
const down = (ctx, value) => ctx.p0.parsed.y > ctx.p1.parsed.y ? value : undefined;
// </block:segmentUtils>

// <block:genericOptions:2>
const genericOptions = {
  fill: false,
  interaction: {
    intersect: false
  },
  radius: 0,
};
// </block:genericOptions>

// <block:config:0>
const config = {
  type: 'line',
  data: {
    labels: Utils.months({count: 7}),
    datasets: [{
      label: 'My First Dataset',
      data: [65, 59, NaN, 48, 56, 57, 40],
      borderColor: 'rgb(75, 192, 192)',
      segment: {
        borderColor: ctx => skipped(ctx, 'rgb(0,0,0,0.2)') || down(ctx, 'rgb(192,75,75)'),
        borderDash: ctx => skipped(ctx, [6, 6]),
      },
      spanGaps: true
    }]
  },
  options: genericOptions
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

```

----------------------------------------

TITLE: Setting Global Default Option for Chart.js Line Charts
DESCRIPTION: This snippet demonstrates how to set a global default option for all Chart.js line charts. By modifying `Chart.overrides.line`, you can apply configurations like `spanGaps = true` to charts created after this change. This is useful for consistent styling or behavior across multiple charts.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/line.md#_snippet_1

LANGUAGE: javascript
CODE:
```
Chart.overrides.line.spanGaps = true;
```

----------------------------------------

TITLE: Prepare Chart.js Data Structure (JavaScript)
DESCRIPTION: Sets up the basic data structure for the Chart.js chart, including labels for the X-axis and two datasets with sample numerical data, fill settings, and colors using utility functions.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scale-options/grid.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const DATA_COUNT = 7;
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: [10, 30, 39, 20, 25, 34, -10],
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: [18, 33, 22, 19, 11, -39, 30],
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
// </block:setup>
```

----------------------------------------

TITLE: Setup Chart Data and Constants (JavaScript)
DESCRIPTION: This snippet defines constants for data count and number generation configuration, and initializes the `labels` array and the main `data` object for the chart. The `data` object includes initial labels and two datasets with generated data and styling. Dependencies include the `Utils` object.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/vertical.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
// </block:setup>
```

----------------------------------------

TITLE: Chart.js Line Chart Configuration (JS)
DESCRIPTION: Configures a line chart with the defined data, enabling the title plugin and setting the initial title text.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/title/alignment.md#_snippet_2

LANGUAGE: js
CODE:
```
// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Chart Title',
      }
    }
  }
};
// </block:config>
```

----------------------------------------

TITLE: Set Global Bar Border Width - Chart.js - JavaScript
DESCRIPTION: Demonstrates how to set a global default option for bar elements in Chart.js, specifically setting the border width for all bars unless overridden by dataset configuration. This is done by modifying the `Chart.defaults.elements.bar` object.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/elements.md#_snippet_0

LANGUAGE: javascript
CODE:
```
Chart.defaults.elements.bar.borderWidth = 2;
```

----------------------------------------

TITLE: Define Chart Data Structure (Chart.js)
DESCRIPTION: Creates the main data object for the Chart.js configuration, including labels and a single dataset generated using the setup functions. It specifies initial styling and `fill: false`.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/area/line-boundaries.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// <block:data:0>
const data = {
  labels: generateLabels(),
  datasets: [
    {
      label: 'Dataset',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red),
      fill: false
    }
  ]
};
// </block:data>
```

----------------------------------------

TITLE: Configuring Multi-Axis Line Chart (Chart.js, JavaScript)
DESCRIPTION: Configures the Chart.js line chart with multi-axis options, setting up linear scales for both left ('y') and right ('y1') axes, defining interaction mode, title options, and exporting the configuration and actions.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/multi-axis.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    responsive: true,\n    interaction: {\n      mode: 'index',\n      intersect: false,\n    },\n    stacked: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart.js Line Chart - Multi Axis'\n      }\n    },\n    scales: {\n      y: {\n        type: 'linear',\n        display: true,\n        position: 'left',\n      },\n      y1: {\n        type: 'linear',\n        display: true,\n        position: 'right',\n\n        // grid line settings\n        grid: {\n          drawOnChartArea: false, // only want the grid lines for one axis to show up\n        },\n      },\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};
```

----------------------------------------

TITLE: Configuring 'x' Interaction Mode in Chart.js (JavaScript)
DESCRIPTION: This snippet shows how to use the 'x' interaction mode. This mode finds all items that intersect based solely on the X coordinate of the interaction point, useful for vertical cursors in cartesian charts.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/interactions.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        interaction: {
            mode: 'x'
        }
    }
});
```

----------------------------------------

TITLE: Chart.js Bubble Chart Data Point Structure - JavaScript
DESCRIPTION: Defines the required structure for individual data points within a Chart.js bubble chart dataset. Each point must be an object containing 'x' (x-coordinate), 'y' (y-coordinate), and 'r' (bubble radius in pixels).
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/bubble.md#_snippet_1

LANGUAGE: javascript
CODE:
```
{
    // X Value
    x: number,

    // Y Value
    y: number,

    // Bubble radius in pixels (not scaled).
    r: number
}
```

----------------------------------------

TITLE: Define Polar Area Chart Data Structure (JavaScript)
DESCRIPTION: Shows the required data structure for a Chart.js Polar Area chart. It includes an array of data points in the datasets array and an array of corresponding labels for tooltips and the legend.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/polar.md#_snippet_4

LANGUAGE: javascript
CODE:
```
data = {
    datasets: [{
        data: [10, 20, 30]
    }],

    // These labels appear in the legend and in the tooltips when hovering different arcs
    labels: [
        'Red',
        'Yellow',
        'Blue'
    ]
};
```

----------------------------------------

TITLE: Configuring 'index' Interaction Mode in Chart.js (JavaScript)
DESCRIPTION: These snippets illustrate the 'index' interaction mode, which finds items at the same data index. The first example shows basic usage, while the second demonstrates using the 'axis' option to search along the y-direction, useful for horizontal charts.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/interactions.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        interaction: {
            mode: 'index'
        }
    }
});
```

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'bar',
    data: data,
    options: {
        interaction: {
            mode: 'index',
            axis: 'y'
        }
    }
});
```

----------------------------------------

TITLE: Configuring Progressive Animation for Chart.js Line Chart - JavaScript
DESCRIPTION: Defines a custom animation object for Chart.js. It uses linear easing and calculates duration and delay per point to create a progressive drawing effect. The `from` property for 'y' uses a scriptable context function to start from the previous point's position.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/animations/progressive-line.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const totalDuration = 10000;
const delayBetweenPoints = totalDuration / data.length;
const previousY = (ctx) => ctx.index === 0 ? ctx.chart.scales.y.getPixelForValue(100) : ctx.chart.getDatasetMeta(ctx.datasetIndex).data[ctx.index - 1].getProps(['y'], true).y;
const animation = {
  x: {
    type: 'number',
    easing: 'linear',
    duration: delayBetweenPoints,
    from: NaN, // the point is initially skipped
    delay(ctx) {
      if (ctx.type !== 'data' || ctx.xStarted) {
        return 0;
      } lighting
      ctx.xStarted = true;
      return ctx.index * delayBetweenPoints;
    }
  },
  y: {
    type: 'number',
    easing: 'linear',
    duration: delayBetweenPoints,
    from: previousY,
    delay(ctx) {
      if (ctx.type !== 'data' || ctx.yStarted) {
        return 0;
      }
      ctx.yStarted = true;
      return ctx.index * delayBetweenPoints;
    }
  }
};
```

----------------------------------------

TITLE: Configuring Multi-Color Dataset Fill in Chart.js
DESCRIPTION: Illustrates how to use an object for the `fill` option to define different colors for the area above and below a specified target, such as the origin.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/area.md#_snippet_1

LANGUAGE: javascript
CODE:
```
new Chart(ctx, {
    data: {
        datasets: [
            {
              fill: {
                target: 'origin',
                above: 'rgb(255, 0, 0)',   // Area will be red above the origin
                below: 'rgb(0, 0, 255)'    // And blue below the origin
              }
            }
        ]
    }
});
```

----------------------------------------

TITLE: Setting Default Minimum for Chart.js Linear Scale
DESCRIPTION: This snippet demonstrates how to change the default configuration for a specific scale type in Chart.js. It sets the default minimum value to 0 for all linear scales created after this line of code is executed.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/index.md#_snippet_0

LANGUAGE: javascript
CODE:
```
Chart.defaults.scales.linear.min = 0;
```

----------------------------------------

TITLE: Update Chart.js Options with New Object (JavaScript)
DESCRIPTION: Shows how to update chart options by replacing the entire `chart.options` object with a new configuration. This discards old options and is similar to creating a new chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/updates.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function updateConfigAsNewObject(chart) {
    chart.options = {
        responsive: true,
        plugins: {
            title: {
                display: true,
                text: 'Chart.js'
            }
        },
        scales: {
            x: {
                display: true
            },
            y: {
                display: true
            }
        }
    };
    chart.update();
}
```

----------------------------------------

TITLE: Show Dataset or Data Element (Chart.js)
DESCRIPTION: Shows either an entire dataset or a specific data element within a dataset. If only `datasetIndex` is provided, the whole dataset is shown with a configurable 'show' animation. If both `datasetIndex` and `dataIndex` are provided, only the specific data element is shown.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_19

LANGUAGE: javascript
CODE:
```
chart.show(1);
chart.show(0, 2);
```

----------------------------------------

TITLE: Configuring Chart Events (JavaScript)
DESCRIPTION: This snippet demonstrates how to configure a Chart.js chart to respond only to specific browser events, such as 'click', by setting the `events` array in the chart options. Events not listed will be ignored by the chart's core interaction handling.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/interactions.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
  type: 'line',
  data: data,
  options: {
    // This chart will not respond to mousemove, etc
    events: ['click']
  }
});
```

----------------------------------------

TITLE: Overriding Default Tooltip Font Settings (JavaScript)
DESCRIPTION: Shows how to override the default font configuration for tooltip elements like the title, body, and footer by assigning a function that returns the desired font options object.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/tooltip.md#_snippet_8

LANGUAGE: javascript
CODE:
```
Chart.defaults.plugins.tooltip.titleFont = () => ({ size: 20, lineHeight: 1.2, weight: 800 });
```

----------------------------------------

TITLE: Triggering Tooltip in Chart.js (JavaScript)
DESCRIPTION: Function to toggle the active elements for the tooltip on a Chart.js instance using `tooltip.setActiveElements()`. It clears active elements or sets specific data points (dataset 0, index 2 and dataset 1, index 2) as active, positioning the tooltip at the chart center, then updates the chart. Requires a Chart.js instance.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/programmatic-events.md#_snippet_1

LANGUAGE: javascript
CODE:
```
function triggerTooltip(chart) {
  const tooltip = chart.tooltip;
  if (tooltip.getActiveElements().length > 0) {
    tooltip.setActiveElements([], {x: 0, y: 0});
  } else {
    const chartArea = chart.chartArea;
    tooltip.setActiveElements([
      {
        datasetIndex: 0,
        index: 2,
      }, {
        datasetIndex: 1,
        index: 2,
      }
    ],
    {
      x: (chartArea.left + chartArea.right) / 2,
      y: (chartArea.top + chartArea.bottom) / 2,
    });
  }

  chart.update();
}
```

----------------------------------------

TITLE: Update Chart.js Scales with New Object (JavaScript)
DESCRIPTION: Illustrates updating chart scales by replacing the `chart.options.scales` object. Note that references to old scale objects (`chart.scales.x`, `chart.scales.y`) become invalid and need to be updated after the call to `chart.update()` if the scale ID or type changes.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/updates.md#_snippet_3

LANGUAGE: javascript
CODE:
```
function updateScales(chart) {
    let xScale = chart.scales.x;
    let yScale = chart.scales.y;
    chart.options.scales = {
        newId: {
            display: true
        },
        y: {
            display: true,
            type: 'logarithmic'
        }
    };
    chart.update();
    // need to update the reference
    xScale = chart.scales.newId;
    yScale = chart.scales.y;
}
```

----------------------------------------

TITLE: Configuring a Basic Chart.js Bubble Chart
DESCRIPTION: This JavaScript snippet demonstrates how to define the data structure for a bubble chart, including the x, y, and radius (r) values for individual bubbles within a dataset, and sets up the basic chart configuration specifying the chart type as 'bubble' and referencing the defined data.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/bubble.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const data = {
  datasets: [{
    label: 'First Dataset',
    data: [{
      x: 20,
      y: 30,
      r: 15
    }, {
      x: 40,
      y: 10,
      r: 10
    }],
    backgroundColor: 'rgb(255, 99, 132)'
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'bubble',
  data: data,
  options: {}
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Implementing Chart.js Plugin for Doughnut Empty State (JavaScript)
DESCRIPTION: This code defines a Chart.js plugin named 'emptyDoughnut'. The plugin uses the 'afterDraw' hook to check if all datasets are empty. If they are, it draws a circle in the center of the chart area using the canvas context, applying configurable color, width, and radius decrease.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/plugins/doughnut-empty-state.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const plugin = {
  id: 'emptyDoughnut',
  afterDraw(chart, args, options) {
    const {datasets} = chart.data;
    const {color, width, radiusDecrease} = options;
    let hasData = false;

    for (let i = 0; i < datasets.length; i += 1) {
      const dataset = datasets[i];
      hasData |= dataset.data.length > 0;
    }

    if (!hasData) {
      const {chartArea: {left, top, right, bottom}, ctx} = chart;
      const centerX = (left + right) / 2;
      const centerY = (top + bottom) / 2;
      const r = Math.min(right - left, bottom - top) / 2;

      ctx.beginPath();
      ctx.lineWidth = width || 2;
      ctx.strokeStyle = color || 'rgba(255, 128, 0, 0.5)';
      ctx.arc(centerX, centerY, (r - radiusDecrease || 0), 0, 2 * Math.PI);
      ctx.stroke();
    }
  }
};
```

----------------------------------------

TITLE: Create Linear Gradient for Chart (JavaScript)
DESCRIPTION: Creates and returns a linear gradient for the chart background. It checks if the gradient needs to be recreated based on chart size changes and adds color stops.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/linear-gradient.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
let width, height, gradient;
function getGradient(ctx, chartArea) {
  const chartWidth = chartArea.right - chartArea.left;
  const chartHeight = chartArea.bottom - chartArea.top;
  if (!gradient || width !== chartWidth || height !== chartHeight) {
    // Create the gradient because this is either the first render
    // or the size of the chart has changed
    width = chartWidth;
    height = chartHeight;
    gradient = ctx.createLinearGradient(0, chartArea.bottom, 0, chartArea.top);
    gradient.addColorStop(0, Utils.CHART_COLORS.blue);
    gradient.addColorStop(0.5, Utils.CHART_COLORS.yellow);
    gradient.addColorStop(1, Utils.CHART_COLORS.red);
  }

  return gradient;
}
```

----------------------------------------

TITLE: Defining and Using Custom Interaction Modes in Chart.js
DESCRIPTION: These snippets provide examples for creating and using custom interaction modes in Chart.js. The first snippet defines a new mode 'myCustomMode' using the `Chart.Interaction.modes` map and the `evaluateInteractionItems` helper. The second shows how to apply this custom mode in a chart configuration. The third snippet provides the necessary TypeScript declaration for the custom mode.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/interactions.md#_snippet_10

LANGUAGE: javascript
CODE:
```
import { Interaction } from 'chart.js';
import { getRelativePosition } from 'chart.js/helpers';

/**
 * Custom interaction mode
 * @function Interaction.modes.myCustomMode
 * @param {Chart} chart - the chart we are returning items from
 * @param {Event} e - the event we are find things at
 * @param {InteractionOptions} options - options to use
 * @param {boolean} [useFinalPosition] - use final element position (animation target)
 * @return {InteractionItem[]} - items that are found
 */
Interaction.modes.myCustomMode = function(chart, e, options, useFinalPosition) {
  const position = getRelativePosition(e, chart);

  const items = [];
  Interaction.evaluateInteractionItems(chart, 'x', position, (element, datasetIndex, index) => {
    if (element.inXRange(position.x, useFinalPosition) && myCustomLogic(element)) {
      items.push({element, datasetIndex, index});
    }
  });
  return items;
};
```

LANGUAGE: javascript
CODE:
```
// Then, to use it...
new Chart.js(ctx, {
    type: 'line',
    data: data,
    options: {
        interaction: {
            mode: 'myCustomMode'
        }
    }
})
```

LANGUAGE: typescript
CODE:
```
declare module 'chart.js' {
  interface InteractionModeMap {
    myCustomMode: InteractionModeFunction;
  }
}
```

----------------------------------------

TITLE: Configure Chart.js Polar Area Chart with Scriptable Radial Gradient
DESCRIPTION: Defines the main chart configuration object. Sets the chart type to 'polarArea', assigns the data, and configures the arc element's backgroundColor option as a scriptable function that calls createRadialGradient3 with dynamically generated colors based on the data index and active state.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/radial-gradient.md#_snippet_3

LANGUAGE: js
CODE:
```
// <block:config:1>
const config = {
  type: 'polarArea',
  data: data,
  options: {
    plugins: {
      legend: false,
      tooltip: false,
    },
    elements: {
      arc: {
        backgroundColor: function(context) {
          let c = colors[context.dataIndex];
          if (!c) {
            return;
          }
          if (context.active) {
            c = helpers.getHoverColor(c);
          }
          const mid = helpers.color(c).desaturate(0.2).darken(0.2).rgbString();
          const start = helpers.color(c).lighten(0.2).rotate(270).rgbString();
          const end = helpers.color(c).lighten(0.1).rgbString();
          return createRadialGradient3(context, start, mid, end);
        },
      }
    }
  }
};
// </block:config>

module.exports = {
  actions,
  config,
};
```

----------------------------------------

TITLE: Prepare Chart.js Line Data with Interpolation Modes (JS)
DESCRIPTION: Defines the data structure for a Chart.js line chart, including labels and multiple datasets. Each dataset uses the same data points but specifies different interpolation modes ('monotone', 'cubic', or default linear) and tension to demonstrate their visual effect.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/interpolation.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 12;
const labels = [];
for (let i = 0; i < DATA_COUNT; ++i) {
  labels.push(i.toString());
}
const datapoints = [0, 20, 20, 60, 60, 120, NaN, 180, 120, 125, 105, 110, 170];
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Cubic interpolation (monotone)',
      data: datapoints,
      borderColor: Utils.CHART_COLORS.red,
      fill: false,
      cubicInterpolationMode: 'monotone',
      tension: 0.4
    }, {
      label: 'Cubic interpolation',
      data: datapoints,
      borderColor: Utils.CHART_COLORS.blue,
      fill: false,
      tension: 0.4
    }, {
      label: 'Linear interpolation (default)',
      data: datapoints,
      borderColor: Utils.CHART_COLORS.green,
      fill: false
    }
  ]
};
```

----------------------------------------

TITLE: Configuring Chart.js Stepped Line Chart (JavaScript)
DESCRIPTION: Defines the configuration object for a Chart.js line chart. It sets the chart type to 'line', links the data object, configures responsiveness, interaction behavior, and includes a plugin to display the current 'stepped' interpolation mode in the chart title.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/stepped.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    interaction: {
      intersect: false,
      axis: 'x'
    },
    plugins: {
      title: {
        display: true,
        text: (ctx) => 'Step ' + ctx.chart.data.datasets[0].stepped + ' Interpolation',
      }
    }
  }
};
```

----------------------------------------

TITLE: Configuring Title Padding in Chart.js (JavaScript)
DESCRIPTION: This example illustrates how to specify custom padding for the chart title using the `padding` option within the `options.plugins.title` configuration. It shows how to set separate top and bottom padding values using an object with `top` and `bottom` properties.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/title.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        plugins: {
            title: {
                display: true,
                text: 'Custom Chart Title',
                padding: {
                    top: 10,
                    bottom: 30
                }
            }
        }
    }
});
```

----------------------------------------

TITLE: Setup Chart Data - Chart.js - JavaScript
DESCRIPTION: Defines the data structure for the chart, including labels and a dataset. It uses utility functions (`Utils.months`, `Utils.numbers`, `Utils.CHART_COLORS`, `Utils.transparentize`) to generate sample data and styling. This data is used by the chart configuration.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/legend/position.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
  ]
};
```

----------------------------------------

TITLE: Setting Up Chart.js Bar Chart Data with Border Radius (JavaScript)
DESCRIPTION: Sets up the data structure for the Chart.js bar chart. It defines labels and two datasets, demonstrating different `borderRadius` values (`Number.MAX_VALUE` for fully rounded and `5` for a small radius) and setting `borderSkipped` to `false` to apply radius to all corners. It uses utility functions (`Utils.months`, `Utils.numbers`, `Utils.CHART_COLORS`, `Utils.transparentize`) for data generation and styling.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/border-radius.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Fully Rounded',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      borderWidth: 2,
      borderRadius: Number.MAX_VALUE,
      borderSkipped: false,
    },
    {
      label: 'Small Radius',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      borderWidth: 2,
      borderRadius: 5,
      borderSkipped: false,
    }
  ]
};
```

----------------------------------------

TITLE: Defining Actions for Chart.js Bubble Chart (JavaScript)
DESCRIPTION: Creates an array of action objects, each with a name and a handler function. These handlers modify the chart's data or structure (randomize data, add/remove datasets, add/remove data points) and trigger a chart update.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/bubble.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.bubbles({count: DATA_COUNT, rmin: 5, rmax: 15, min: 0, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const chartData = chart.data;
      const dsColor = Utils.namedColor(chartData.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (chartData.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        data: Utils.bubbles({count: DATA_COUNT, rmin: 5, rmax: 15, min: 0, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const chartData = chart.data;
      if (chartData.datasets.length > 0) {

        for (let index = 0; index < chartData.datasets.length; ++index) {
          chartData.datasets[index].data.push(Utils.bubbles({count: 1, rmin: 5, rmax: 15, min: 0, max: 100})[0]);
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Resizing Chart.js to Container - JavaScript
DESCRIPTION: The .resize() method manually adjusts the canvas size. Calling it without parameters makes the chart take the dimensions of its container element.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_6

LANGUAGE: javascript
CODE:
```
// Resizes & redraws to fill its container element
myLineChart.resize();
// => returns 'this' for chainability
```

----------------------------------------

TITLE: Resize All Charts Before Printing - JavaScript
DESCRIPTION: Provides a JavaScript function designed to be called before printing (e.g., via the `onbeforeprint` event). It iterates through all active Chart.js instances and triggers their `resize()` method to adjust them for the print layout.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/responsive.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function beforePrintHandler () {
    for (let id in Chart.instances) {
        Chart.instances[id].resize();
    }
}
```

----------------------------------------

TITLE: Configuring Chart.js Line Chart with Animation Callbacks - JavaScript
DESCRIPTION: Defines the main configuration object for the Chart.js line chart. Specifies the chart type, links the data, and configures animation options. Includes `onProgress` callbacks to update HTML progress bars during initial and subsequent animations, and `onComplete` callbacks for logging.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/progress-bar.md#_snippet_2

LANGUAGE: js
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    animation: {
      duration: 2000,
      onProgress: function(context) {
        if (context.initial) {
          initProgress.value = context.currentStep / context.numSteps;
        } else {
          progress.value = context.currentStep / context.numSteps;
        }
      },
      onComplete: function(context) {
        if (context.initial) {
          console.log('Initial animation finished');
        } else {
          console.log('animation finished');
        }
      }
    },
    interaction: {
      mode: 'nearest',
      axis: 'x',
      intersect: false
    },
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Line Chart - Animation Progress Bar'
      }
    }
  }
};
```

----------------------------------------

TITLE: Define Chart Actions - Chart.js - JS
DESCRIPTION: Defines an array of action objects used to interact with the chart, such as randomizing data, adding/removing datasets, and adding/removing data points. Each action has a name and a handler function that modifies the chart data and updates the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/horizontal.md#_snippet_0

LANGUAGE: js
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        borderWidth: 1,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Define Chart.js Line Chart Data (JavaScript)
DESCRIPTION: Structures the main data object for the Chart.js instance. It uses the previously defined `generateLabels` and `generateData` functions to populate the labels and two datasets with generated values, colors, and fill settings.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/area/line-drawtime.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const data = {
  labels: generateLabels(),
  datasets: [
    {
      label: 'Dataset 1',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.CHART_COLORS.red,
      fill: true
    },
    {
      label: 'Dataset 2',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue),
      fill: true
    }
  ]
};
```

----------------------------------------

TITLE: Defining Chart.js Legend Item Interface (JavaScript)
DESCRIPTION: Describes the structure and properties of objects passed to the legend `onClick` function, which are generated by `labels.generateLabels`. Lists properties like `text`, `datasetIndex`, `fillStyle`, `hidden`, etc.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/legend.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{
    // Label that will be displayed
    text: string,

    // Border radius of the legend item.
    // Introduced in 3.1.0
    borderRadius?: number | BorderRadius,

    // Index of the associated dataset
    datasetIndex: number,

    // Fill style of the legend box
    fillStyle: Color,

    // Text color
    fontColor: Color,

    // If true, this item represents a hidden dataset. Label will be rendered with a strike-through effect
    hidden: boolean,

    // For box border. See https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap
    lineCap: string,

    // For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash
    lineDash: number[],

    // For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset
    lineDashOffset: number,

    // For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin
    lineJoin: string,

    // Width of box border
    lineWidth: number,

    // Stroke style of the legend box
    strokeStyle: Color,

    // Point style of the legend box (only used if usePointStyle is true)
    pointStyle: string | Image | HTMLCanvasElement,

    // Rotation of the point in degrees (only used if usePointStyle is true)
    rotation: number
}
```

----------------------------------------

TITLE: Define Polar Area Chart Data (Chart.js)
DESCRIPTION: Defines the data structure for a Chart.js Polar Area chart, including labels for segments and a dataset with values and background colors.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/polar.md#_snippet_0

LANGUAGE: js
CODE:
```
const data = {
  labels: [
    'Red',
    'Green',
    'Yellow',
    'Grey',
    'Blue'
  ],
  datasets: [{
    label: 'My First Dataset',
    data: [11, 16, 7, 3, 14],
    backgroundColor: [
      'rgb(255, 99, 132)',
      'rgb(75, 192, 192)',
      'rgb(255, 205, 86)',
      'rgb(201, 203, 207)',
      'rgb(54, 162, 235)'
    ]
  }]
};
```

----------------------------------------

TITLE: Defining Chart Actions - Chart.js - JavaScript
DESCRIPTION: Creates an array of action objects, each defining a button name and a handler function to modify the chart data or structure (randomize data, add/remove dataset, add/remove data point).
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/scatter.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.bubbles({count: DATA_COUNT, rmin: 1, rmax: 1, min: 0, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const chartData = chart.data;
      const dsColor = Utils.namedColor(chartData.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (chartData.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        data: Utils.bubbles({count: DATA_COUNT, rmin: 1, rmax: 1, min: 0, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const chartData = chart.data;
      if (chartData.datasets.length > 0) {

        for (let index = 0; index < chartData.datasets.length; ++index) {
          chartData.datasets[index].data.push(Utils.bubbles({count: 1, rmin: 1, rmax: 1, min: 0, max: 100})[0]);
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Creating Chart.js Chart Area Border Plugin (JavaScript)
DESCRIPTION: This snippet defines a custom Chart.js plugin object with an `id` and a `beforeDraw` method. The `beforeDraw` method accesses the chart context and chart area dimensions to draw a rectangle around the plotting area using the specified border style options from the plugin configuration.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/plugins/chart-area-border.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const chartAreaBorder = {
  id: 'chartAreaBorder',
  beforeDraw(chart, args, options) {
    const {ctx, chartArea: {left, top, width, height}} = chart;
    ctx.save();
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.setLineDash(options.borderDash || []);
    ctx.lineDashOffset = options.borderDashOffset;
    ctx.strokeRect(left, top, width, height);
    ctx.restore();
  }
};
```

----------------------------------------

TITLE: Chart.js Tooltip Item Context Interface (JavaScript)
DESCRIPTION: Describes the structure and properties of the context object passed to Chart.js tooltip callbacks, detailing the available information about the chart, data point, dataset, and element.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/tooltip.md#_snippet_3

LANGUAGE: javascript
CODE:
```
{
    // The chart the tooltip is being shown on
    chart: Chart

    // Label for the tooltip
    label: string,

    // Parsed data values for the given `dataIndex` and `datasetIndex`
    parsed: object,

    // Raw data values for the given `dataIndex` and `datasetIndex`
    raw: object,

    // Formatted value for the tooltip
    formattedValue: string,

    // The dataset the item comes from
    dataset: object

    // Index of the dataset the item comes from
    datasetIndex: number,

    // Index of this data item in the dataset
    dataIndex: number,

    // The chart element (point, arc, bar, etc.) for this tooltip item
    element: Element,
}
```

----------------------------------------

TITLE: Get Data Visibility (Chart.js)
DESCRIPTION: Retrieves the stored visibility state for a data item at a given index, as set by `toggleDataVisibility`. Dataset controllers can use this method to determine whether a specific data element should be rendered or hidden.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_17

LANGUAGE: javascript
CODE:
```
const visible = chart.getDataVisibility(2);
```

----------------------------------------

TITLE: Setting Up Chart.js Data with Custom Point Styles (JavaScript)
DESCRIPTION: Sets up the data structure for the Chart.js instance. It defines labels and multiple datasets, each configured with a specific `pointStyle` ('triangle', 'circle', 'star') and `pointRadius` to visually represent the data points. Utility functions are used for generating data and colors.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/point-style.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Triangles',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      pointStyle: 'triangle',
      pointRadius: 6,
    },
    {
      label: 'Circles',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      pointStyle: 'circle',
      pointRadius: 6,
    },
    {
      label: 'Stars',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.green,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.green, 0.5),
      pointStyle: 'star',
      pointRadius: 6,
    }
  ]
};
```

----------------------------------------

TITLE: Programmatically Resize Chart Container - JavaScript
DESCRIPTION: Shows how to resize a Chart.js chart programmatically by changing the size of its parent container element. Note that for the height change to take effect independently of the width, the `maintainAspectRatio` option must be set to `false` in the chart configuration.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/responsive.md#_snippet_1

LANGUAGE: javascript
CODE:
```
chart.canvas.parentNode.style.height = '128px';
chart.canvas.parentNode.style.width = '128px';
```

----------------------------------------

TITLE: Define Chart.js Interactive Actions (JavaScript)
DESCRIPTION: Creates an array of action objects, each with a name and a handler function. These handlers modify the chart's options (specifically `plugins.filler.drawTime` and `elements.line.tension`) or data, and then trigger a chart update.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/area/line-drawtime.md#_snippet_2

LANGUAGE: javascript
CODE:
```
let smooth = false;

const actions = [
  {
    name: 'drawTime: beforeDatasetDraw (default)',
    handler: (chart) => {
      chart.options.plugins.filler.drawTime = 'beforeDatasetDraw';
      chart.update();
    }
  },
  {
    name: 'drawTime: beforeDatasetsDraw',
    handler: (chart) => {
      chart.options.plugins.filler.drawTime = 'beforeDatasetsDraw';
      chart.update();
    }
  },
  {
    name: 'drawTime: beforeDraw',
    handler: (chart) => {
      chart.options.plugins.filler.drawTime = 'beforeDraw';
      chart.update();
    }
  },
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
  {
    name: 'Smooth',
    handler(chart) {
      smooth = !smooth;
      chart.options.elements.line.tension = smooth ? 0.4 : 0;
      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Configuring Parsing in Chart.js Dataset (JavaScript)
DESCRIPTION: This snippet demonstrates how to configure data parsing for multiple datasets in a Chart.js bar chart using JavaScript. It shows how to provide an array of objects as data and specify which key from the objects should be used for the y-axis value using the `parsing.yAxisKey` option for each dataset.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/data-structures.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const data = [{x: 'Jan', net: 100, cogs: 50, gm: 50}, {x: 'Feb', net: 120, cogs: 55, gm: 75}];
const cfg = {
  type: 'bar',
  data: {
    labels: ['Jan', 'Feb'],
    datasets: [{
      label: 'Net sales',
      data: data,
      parsing: {
        yAxisKey: 'net'
      }
    }, {
      label: 'Cost of goods sold',
      data: data,
      parsing: {
        yAxisKey: 'cogs'
      }
    }, {
      label: 'Gross margin',
      data: data,
      parsing: {
        yAxisKey: 'gm'
      }
    }]
  },
};
```

----------------------------------------

TITLE: Triggering Hover State in Chart.js (JavaScript)
DESCRIPTION: Function to toggle the active elements for hover on a Chart.js instance using `chart.setActiveElements()`. It clears active elements if present or sets specific data points (dataset 0, index 0 and dataset 1, index 0) as active, then updates the chart. Requires a Chart.js instance.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/programmatic-events.md#_snippet_0

LANGUAGE: javascript
CODE:
```
function triggerHover(chart) {
  if (chart.getActiveElements().length > 0) {
    chart.setActiveElements([]);
  } else {
    chart.setActiveElements([
      {
        datasetIndex: 0,
        index: 0,
      }, {
        datasetIndex: 1,
        index: 0,
      }
    ]);
  }
  chart.update();
}
```

----------------------------------------

TITLE: Chart.js Custom Plugin for Canvas Background Color (JavaScript)
DESCRIPTION: This JavaScript code defines a Chart.js plugin that draws a solid color as the background of the chart canvas. It uses the 'beforeDraw' hook and the 'destination-over' global composite operation to ensure the background is drawn behind the chart elements. The color can be configured via plugin options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/canvas-background.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const data = {
  labels: [
    'Red',
    'Blue',
    'Yellow'
  ],
  datasets: [{
    label: 'My First Dataset',
    data: [300, 50, 100],
    backgroundColor: [
      'rgb(255, 99, 132)',
      'rgb(54, 162, 235)',
      'rgb(255, 205, 86)'
    ],
    hoverOffset: 4
  }]
};
// </block:setup>

// <block:plugin:2>
// Note: changes to the plugin code is not reflected to the chart, because the plugin is loaded at chart construction time and editor changes only trigger an chart.update().
const plugin = {
  id: 'customCanvasBackgroundColor',
  beforeDraw: (chart, args, options) => {
    const {ctx} = chart;
    ctx.save();
    ctx.globalCompositeOperation = 'destination-over';
    ctx.fillStyle = options.color || '#99ffff';
    ctx.fillRect(0, 0, chart.width, chart.height);
    ctx.restore();
  }
};
// </block:plugin>

// <block:config:0>
const config = {
  type: 'doughnut',
  data: data,
  options: {
    plugins: {
      customCanvasBackgroundColor: {
        color: 'lightGreen',
      }
    }
  },
  plugins: [plugin],
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Set Chart.js Aspect Ratio to 1 (JSX)
DESCRIPTION: Modifies the chart configuration within the options object to set the 'aspectRatio' property to 1. This makes the chart square, which is useful when both the x and y dimensions are equally important.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_8

LANGUAGE: jsx
CODE:
```
// ...
	new Chart(
    document.getElementById('dimensions'),
    {
      type: 'bubble',
      options: {
        aspectRatio: 1,
      },

// ...
```

----------------------------------------

TITLE: Defining Radar Chart Data Structure with Labels and Datasets - Chart.js JavaScript
DESCRIPTION: Illustrates the complete data structure for a Chart.js radar chart, including an array of labels for context and a dataset containing its data points.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/radar.md#_snippet_3

LANGUAGE: javascript
CODE:
```
data: {
    labels: ['Running', 'Swimming', 'Eating', 'Cycling'],
    datasets: [{
        data: [20, 10, 4, 2]
    }]
}
```

----------------------------------------

TITLE: Generating Chart Data (JavaScript)
DESCRIPTION: Defines a function `generateData` to create random numerical data using `Utils.numbers`. Also defines the `data` object structure for the chart, including labels and a dataset populated by `generateData`. Requires `Utils` and `DATA_COUNT`.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/radar.md#_snippet_1

LANGUAGE: javascript
CODE:
```
function generateData() {
  return Utils.numbers({
    count: DATA_COUNT,
    min: 0,
    max: 100
  });
}

const data = {
  labels: [['Eating', 'Dinner'], ['Drinking', 'Water'], 'Sleeping', ['Designing', 'Graphics'], 'Coding', 'Cycling', 'Running'],
  datasets: [{
    data: generateData()
  }]
};
```

----------------------------------------

TITLE: Define Legend Position Actions - Chart.js - JavaScript
DESCRIPTION: Defines an array of action objects, each with a name and a handler function. The handler functions update the chart's legend position option and trigger a chart update. This allows users to dynamically change the legend position via buttons or similar controls in a chart editor environment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/legend/position.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const actions = [
  {
    name: 'Position: top',
    handler(chart) {
      chart.options.plugins.legend.position = 'top';
      chart.update();
    }
  },
  {
    name: 'Position: right',
    handler(chart) {
      chart.options.plugins.legend.position = 'right';
      chart.update();
    }
  },
  {
    name: 'Position: bottom',
    handler(chart) {
      chart.options.plugins.legend.position = 'bottom';
      chart.update();
    }
  },
  {
    name: 'Position: left',
    handler(chart) {
      chart.options.plugins.legend.position = 'left';
      chart.update();
    }
  },
];
```

----------------------------------------

TITLE: Configuring 'dataset' Interaction Mode in Chart.js (JavaScript)
DESCRIPTION: This snippet demonstrates configuring the 'dataset' interaction mode. This mode finds all items within the same dataset as the identified interaction point. The 'intersect' option influences how the initial item is determined.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/interactions.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        interaction: {
            mode: 'dataset'
        }
    }
});
```

----------------------------------------

TITLE: Configuring Point Labels Color in Chart.js Radar Chart
DESCRIPTION: This snippet demonstrates how to set the color of the point labels (labels for each angle line) on the radial axis ('r') of a Chart.js radar chart. It sets up basic chart data and configuration, then specifically targets the `pointLabels.color` property within the radial scale options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/radial/index.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    label: 'My First dataset',
    backgroundColor: 'rgba(54, 162, 235, 0.5)',
    borderColor: 'rgb(54, 162, 235)',
    borderWidth: 1,
    data: [10, 20, 30, 40, 50, 0, 5],
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'radar',
  data,
  options: {
    scales: {
      r: {
        pointLabels: {
          color: 'red'
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Define Chart Actions (JavaScript)
DESCRIPTION: Defines an array of actions (Randomize, Add Dataset, Add Data, Remove Dataset, Remove Data) that can be used to interact with and modify the chart data and configuration in a chart editor environment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/combo-bar-line.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        borderWidth: 1,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Configuring Chart Animation Delay (Chart.js, JavaScript)
DESCRIPTION: Defines the chart configuration object for a stacked bar chart. It includes an `animation` object with an `onComplete` callback to set a flag when the initial animation finishes and a scriptable `delay` function that calculates a staggered delay based on dataset and data index, applied only during the initial animation.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/animations/delay.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
let delayed;
const config = {
  type: 'bar',
  data: data,
  options: {
    animation: {
      onComplete: () => {
        delayed = true;
      },
      delay: (context) => {
        let delay = 0;
        if (context.type === 'data' && context.mode === 'default' && !delayed) {
          delay = context.dataIndex * 300 + context.datasetIndex * 100;
        }
        return delay;
      },
    },
    scales: {
      x: {
        stacked: true,
      },
      y: {
        stacked: true
      }
    }
  }
};
```

----------------------------------------

TITLE: Create Cached Radial Gradient for Chart.js
DESCRIPTION: Generates a radial gradient using the chart's context and specified colors. It caches the created gradient based on colors and chart dimensions to avoid recalculation on every render unless the size changes. Returns the gradient object.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/radial-gradient.md#_snippet_1

LANGUAGE: js
CODE:
```
// <block:createRadialGradient3:0>
function createRadialGradient3(context, c1, c2, c3) {
  const chartArea = context.chart.chartArea;
  if (!chartArea) {
    // This case happens on initial chart load
    return;
  }

  const chartWidth = chartArea.right - chartArea.left;
  const chartHeight = chartArea.bottom - chartArea.top;
  if (width !== chartWidth || height !== chartHeight) {
    cache.clear();
  }
  let gradient = cache.get(c1 + c2 + c3);
  if (!gradient) {
    // Create the gradient because this is either the first render
    // or the size of the chart has changed
    width = chartWidth;
    height = chartHeight;
    const centerX = (chartArea.left + chartArea.right) / 2;
    const centerY = (chartArea.top + chartArea.bottom) / 2;
    const r = Math.min(
      (chartArea.right - chartArea.left) / 2,
      (chartArea.bottom - chartArea.top) / 2
    );
    const ctx = context.chart.ctx;
    gradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, r);
    gradient.addColorStop(0, c1);
    gradient.addColorStop(0.5, c2);
    gradient.addColorStop(1, c3);
    cache.set(c1 + c2 + c3, gradient);
  }

  return gradient;
}
// </block:createRadialGradient3>
```

----------------------------------------

TITLE: Define Interactive Chart Actions (Chart.js)
DESCRIPTION: An array of objects, each defining an action (like a button handler) that modifies the chart's dataset fill property, randomizes data, or toggles line tension (smoothing) and then updates the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/area/line-boundaries.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// <block:actions:3>
let smooth = false;

const actions = [
  {
    name: 'Fill: false (default)',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.fill = false;
      });
      chart.update();
    }
  },
  {
    name: 'Fill: origin',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.fill = 'origin';
      });
      chart.update();
    }
  },
  {
    name: 'Fill: start',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.fill = 'start';
      });
      chart.update();
    }
  },
  {
    name: 'Fill: end',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.fill = 'end';
      });
      chart.update();
    }
  },
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
  {
    name: 'Smooth',
    handler(chart) {
      smooth = !smooth;
      chart.options.elements.line.tension = smooth ? 0.4 : 0;
      chart.update();
    }
  }
];
// </block:actions>
```

----------------------------------------

TITLE: Define Randomize Action for Chart.js
DESCRIPTION: Defines an array of actions for the chart editor. Includes a 'Randomize' action that iterates through datasets and updates their data with random numbers, then updates the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/time-combo.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});
      });
      chart.update();
    }
  },
];
// </block:actions>
```

----------------------------------------

TITLE: Defining Chart Editor Actions (JavaScript)
DESCRIPTION: Defines an array of interactive actions for a Chart.js chart editor, including functions to randomize data, add/remove datasets, and add/remove data points.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/stacked-bar-line.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        borderWidth: 1,
        stack: 'combined',
        data: Utils.numbers({count: data.labels.length, min: 0, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(0, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Implement Data Generation and Initialize Chart Data for Chart.js Bubble Chart (JavaScript)
DESCRIPTION: This code defines the `generateData` function which creates an array of objects, each containing random 'x', 'y', and 'v' properties within specified ranges. It then initializes the `data` object for the Chart.js configuration with two datasets populated by calling this generation function.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/bubble.md#_snippet_1

LANGUAGE: javascript
CODE:
```
function generateData() {
  const data = [];
  let i;

  for (i = 0; i < DATA_COUNT; ++i) {
    data.push({
      x: Utils.rand(MIN_XY, MAX_XY),
      y: Utils.rand(MIN_XY, MAX_XY),
      v: Utils.rand(0, 1000)
    });
  }

  return data;
}

const data = {
  datasets: [{
    data: generateData()
  }, {
    data: generateData()
  }]
};
```

----------------------------------------

TITLE: Defining Chart Data (JavaScript)
DESCRIPTION: Sets up the chart data with two datasets. One uses string-formatted dates for x-values, and the other uses Date objects. Both datasets contain random y-values.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/time-max-span.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const data = {
  datasets: [{
    label: 'Dataset with string point data',
    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    borderColor: Utils.CHART_COLORS.red,
    fill: false,
    data: [{
      x: Utils.newDateString(0),
      y: Utils.rand(0, 100)
    }, {
      x: Utils.newDateString(2),
      y: Utils.rand(0, 100)
    }, {
      x: Utils.newDateString(4),
      y: Utils.rand(0, 100)
    }, {
      x: Utils.newDateString(6),
      y: Utils.rand(0, 100)
    }],
  }, {
    label: 'Dataset with date object point data',
    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    borderColor: Utils.CHART_COLORS.blue,
    fill: false,
    data: [{
      x: Utils.newDate(0),
      y: Utils.rand(0, 100)
    }, {
      x: Utils.newDate(2),
      y: Utils.rand(0, 100)
    }, {
      x: Utils.newDate(5),
      y: Utils.rand(0, 100)
    }, {
      x: Utils.newDate(6),
      y: Utils.rand(0, 100)
    }]
  }]
};
```

----------------------------------------

TITLE: Defining Chart.js X-Axis Tick Alignment Actions (JavaScript)
DESCRIPTION: Defines an array of action objects used in a Chart.js chart editor to dynamically change the alignment of X-axis ticks. Each action object contains a `name` for display and a `handler` function that modifies the chart's X-axis tick alignment option and updates the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scale-options/ticks.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const actions = [
  {
    name: 'Alignment: start',
    handler(chart) {
      chart.options.scales.x.ticks.align = 'start';
      chart.update();
    }
  },
  {
    name: 'Alignment: center (default)',
    handler(chart) {
      chart.options.scales.x.ticks.align = 'center';
      chart.update();
    }
  },
  {
    name: 'Alignment: end',
    handler(chart) {
      chart.options.scales.x.ticks.align = 'end';
      chart.update();
    }
  },
];
```

----------------------------------------

TITLE: Defining Chart.js Doughnut Actions (JavaScript)
DESCRIPTION: This JavaScript array defines a set of actions (buttons) that can be used to interact with a Chart.js instance. Each action has a name and a handler function that modifies the chart's data or state and calls `chart.update()`. It includes examples for randomizing data, adding/removing datasets and data points, and hiding/showing chart elements. Requires a Chart.js instance and a `Utils` object with helper functions like `numbers` and `rand`.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/doughnut.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const data = chart.data;\n      const newDataset = {\n        label: 'Dataset ' + (data.datasets.length + 1),\n        backgroundColor: [],\n        data: [],\n      };\n\n      for (let i = 0; i < data.labels.length; i++) {\n        newDataset.data.push(Utils.numbers({count: 1, min: 0, max: 100}));\n\n        const colorIndex = i % Object.keys(Utils.CHART_COLORS).length;\n        newDataset.backgroundColor.push(Object.values(Utils.CHART_COLORS)[colorIndex]);\n      }\n\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels.push('data #' + (data.labels.length + 1));\n\n        for (let index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(0, 100));\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Hide(0)',\n    handler(chart) {\n      chart.hide(0);\n    }\n  },\n  {\n    name: 'Show(0)',\n    handler(chart) {\n      chart.show(0);\n    }\n  },\n  {\n    name: 'Hide (0, 1)',\n    handler(chart) {\n      chart.hide(0, 1);\n    }\n  },\n  {\n    name: 'Show (0, 1)',\n    handler(chart) {\n      chart.show(0, 1);\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n// </block:actions>
```

----------------------------------------

TITLE: Configuring Tick Alignment in Chart.js (JavaScript)
DESCRIPTION: This snippet demonstrates configuring tick alignment on a Chart.js axis. It shows how to use the `crossAlign` option within the `ticks` configuration for a specific axis (the y-axis in this horizontal bar chart) to control the perpendicular alignment of tick labels relative to the tick mark.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/index.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    label: 'My First dataset',
    backgroundColor: [
      'rgba(255, 99, 132, 0.2)',
      'rgba(255, 159, 64, 0.2)',
      'rgba(255, 205, 86, 0.2)',
      'rgba(75, 192, 192, 0.2)',
      'rgba(54, 162, 235, 0.2)',
      'rgba(153, 102, 255, 0.2)',
      'rgba(201, 203, 207, 0.2)'
    ],
    borderColor: [
      'rgb(255, 99, 132)',
      'rgb(255, 159, 64)',
      'rgb(255, 205, 86)',
      'rgb(75, 192, 192)',
      'rgb(54, 162, 235)',
      'rgb(153, 102, 255)',
      'rgb(201, 203, 207)'
    ],
    borderWidth: 1,
    data: [65, 59, 80, 81, 56, 55, 40],
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'bar',
  data,
  options: {
    indexAxis: 'y',
    scales: {
      y: {
        ticks: {
          crossAlign: 'far',
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Configure Chart Options (Chart.js, JavaScript)
DESCRIPTION: Defines the main chart configuration object. Specifies the chart type as 'line', links the data object, and configures animation options, including a custom 'from' function for the 'y' animation to create a 'drop' effect on initial render.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/animations/drop.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    animations: {
      y: {
        easing: 'easeInOutElastic',
        from: (ctx) => {
          if (ctx.type === 'data') {
            if (ctx.mode === 'default' && !ctx.dropped) {
              ctx.dropped = true;
              return 0;
            }
          }
        }
      }
    },
  },
};
```

----------------------------------------

TITLE: Define Chart.js Pie Chart Actions (JavaScript)
DESCRIPTION: Defines an array of action objects for a Chart.js pie chart. Each action has a name and a handler function to modify the chart data or configuration, such as randomizing data, adding/removing datasets, and adding/removing data points.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/pie.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: [],
        data: [],
      };

      for (let i = 0; i < data.labels.length; i++) {
        newDataset.data.push(Utils.numbers({count: 1, min: 0, max: 100}));

        const colorIndex = i % Object.keys(Utils.CHART_COLORS).length;
        newDataset.backgroundColor.push(Object.values(Utils.CHART_COLORS)[colorIndex]);
      }

      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels.push('data #' + (data.labels.length + 1));

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(0, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Setup Radar Chart Data and Utilities (JavaScript)
DESCRIPTION: Defines helper functions `generateLabels` and `generateData` using `Utils`, initializes input parameters, and constructs the `data` object for the chart with multiple datasets, including fill configurations.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/area/radar.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const inputs = {
  min: 8,
  max: 16,
  count: 8,
  decimals: 2,
  continuity: 1
};

const generateLabels = () => {
  return Utils.months({count: inputs.count});
};

const generateData = () => {
  const values = Utils.numbers(inputs);
  inputs.from = values;
  return values;
};

const labels = Utils.months({count: 8});
const data = {
  labels: generateLabels(),
  datasets: [
    {
      label: 'D0',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red),
    },
    {
      label: 'D1',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.orange,
      hidden: true,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.orange),
      fill: '-1'
    },
    {
      label: 'D2',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.yellow,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.yellow),
      fill: 1
    },
    {
      label: 'D3',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.green,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.green),
      fill: false
    },
    {
      label: 'D4',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue),
      fill: '-1'
    },
    {
      label: 'D5',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.purple,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.purple),
      fill: '-1'
    },
    {
      label: 'D6',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.grey,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.grey),
      fill: {value: 85}
    }
  ]
};
// </block:setup>
```

----------------------------------------

TITLE: Defining Chart.js Actions for Radar Chart (JavaScript)
DESCRIPTION: Defines an array of actions (Randomize, Add Dataset, Add Data, Remove Dataset, Remove Data) that interact with a Chart.js instance to modify its data or structure. Each action has a name and a handler function that takes the chart object as an argument.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/radar.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        data: Utils.numbers({count: data.labels.length, min: 0, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(0, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Defining Chart Actions (JavaScript)
DESCRIPTION: Sets up constants and defines an array of actions for the chart. Includes a 'Randomize' action handler that updates dataset data using `generateData` and refreshes the chart. Requires `Utils` and `generateData`.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/radar.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 7;
Utils.srand(110);

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
];
```

----------------------------------------

TITLE: Setting up Chart.js Data and Labels (JavaScript)
DESCRIPTION: Sets up the data structure for a Chart.js line chart. It defines the number of data points, configuration for generating random numbers, and the `data` object containing multi-line labels for the X-axis and two datasets with generated numerical data.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scale-options/ticks.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const DATA_COUNT = 12;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};
const data = {
  labels: [['June', '2015'], 'July', 'August', 'September', 'October', 'November', 'December', ['January', '2016'], 'February', 'March', 'April', 'May'],
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
```

----------------------------------------

TITLE: Setting up Data for Chart.js Bubble Chart (JavaScript)
DESCRIPTION: Defines the data structure for a Chart.js bubble chart, including two datasets with generated bubble data using a utility function. Specifies border and background colors for each dataset.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/bubble.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, rmin: 5, rmax: 15, min: 0, max: 100};

const data = {
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.bubbles(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.bubbles(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.orange,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.orange, 0.5),
    }
  ]
};
```

----------------------------------------

TITLE: Define Setup Constants and Actions for Chart.js Bubble Chart (JavaScript)
DESCRIPTION: This snippet defines constants used for data generation and initializes an array of actions. It includes a 'Randomize' action with a handler function that updates the chart's datasets with new random data upon execution.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/bubble.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 16;
const MIN_XY = -150;
const MAX_XY = 100;
Utils.srand(110);

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
];
```

----------------------------------------

TITLE: Defining Chart.js Stepped Line Actions (JavaScript)
DESCRIPTION: Defines an array of action objects for a Chart.js chart. Each action modifies the 'stepped' property of the dataset and updates the chart, allowing users to toggle between different stepped line interpolation modes (false, true, before, after, middle).
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/stepped.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const actions = [
  {
    name: 'Step: false (default)',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.stepped = false;
      });
      chart.update();
    }
  },
  {
    name: 'Step: true',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.stepped = true;
      });
      chart.update();
    }
  },
  {
    name: 'Step: before',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.stepped = 'before';
      });
      chart.update();
    }
  },
  {
    name: 'Step: after',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.stepped = 'after';
      });
      chart.update();
    }
  },
  {
    name: 'Step: middle',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.stepped = 'middle';
      });
      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Configure Default Polar Area Animation (JavaScript)
DESCRIPTION: Demonstrates how to change the default animation behavior for all new Polar Area charts by modifying the Chart.overrides.polarArea object. Specifically, it shows how to disable the scale animation.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/polar.md#_snippet_3

LANGUAGE: javascript
CODE:
```
Chart.overrides.polarArea.animation.animateScale = false;
```

----------------------------------------

TITLE: Configure Min/Max for Category Axis in Chart.js
DESCRIPTION: This snippet illustrates how to use the 'min' option on a category axis to specify the starting point of the displayed range. The value can be a string matching a label or a numeric index.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/category.md#_snippet_2

LANGUAGE: javascript
CODE:
```
let chart = new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            data: [10, 20, 30, 40, 50, 60]
        }],
        labels: ['January', 'February', 'March', 'April', 'May', 'June']
    },
    options: {
        scales: {
            x: {
                min: 'March'
            }
        }
    }
});
```

----------------------------------------

TITLE: Configuring Radar Chart Scale Options - Chart.js JavaScript
DESCRIPTION: Configures the single radial scale ('r') for a Chart.js radar chart. Sets angle lines display to false and defines suggested minimum and maximum values for the scale.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/radar.md#_snippet_1

LANGUAGE: javascript
CODE:
```
options = {
    scales: {
        r: {
            angleLines: {
                display: false
            },
            suggestedMin: 50,
            suggestedMax: 100
        }
    }
};
```

----------------------------------------

TITLE: Defining Chart Actions (JavaScript)
DESCRIPTION: Defines an array of actions for the chart editor, including a 'Randomize' action that updates dataset values and triggers a chart update.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/time-max-span.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data.forEach(function(dataObj, j) {
          const newVal = Utils.rand(0, 100);

          if (typeof dataObj === 'object') {
            dataObj.y = newVal;
          } else {
            dataset.data[j] = newVal;
          }
        });
      });
      chart.update();
    }
  },
];
```

----------------------------------------

TITLE: Configuring Chart.js Line Chart with Custom Plugin (JavaScript)
DESCRIPTION: This snippet defines the main configuration object for a Chart.js line chart. It specifies the chart type as 'line', assigns the previously defined data object, configures plugin options (specifically for the 'chartAreaBorder' plugin), and registers the custom plugin in the `plugins` array.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/plugins/chart-area-border.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      chartAreaBorder: {
        borderColor: 'red',
        borderWidth: 2,
        borderDash: [5, 5],
        borderDashOffset: 2,
      }
    }
  },
  plugins: [chartAreaBorder]
};
```

----------------------------------------

TITLE: Configuring Chart.js Polar Area Chart (JavaScript)
DESCRIPTION: Defines the chart configuration object specifying the chart type ('polarArea'), the data source, and options like responsiveness and plugin configurations for legend and title display.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/polar-area.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const config = {
  type: 'polarArea',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Polar Area Chart'
      }
    }
  },
};
```

----------------------------------------

TITLE: Configure Chart.js Pie Chart Options (JavaScript)
DESCRIPTION: Defines the configuration object for a Chart.js pie chart. It specifies the chart type ('pie'), links the data object, and sets various options like responsiveness and plugin configurations for the legend and title.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/pie.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'pie',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Pie Chart'
      }
    }
  },
};
```

----------------------------------------

TITLE: Registering Chart.js Components for Bubble Chart (src/dimensions.js)
DESCRIPTION: Imports and registers specific Chart.js components required for a bubble chart (BubbleController, PointElement, CategoryScale, LinearScale, Legend, Colors) to enable tree-shaking and reduce bundle size. This replaces the `import Chart from 'chart.js/auto'` statement.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_15

LANGUAGE: jsx
CODE:
```
import {
  Chart,
  Colors,
  BubbleController,
  CategoryScale,
  LinearScale,
  PointElement,
  Legend
} from 'chart.js'

Chart.register(
  Colors,
  BubbleController,
  PointElement,
  CategoryScale,
  LinearScale,
  Legend
);
```

----------------------------------------

TITLE: Using Custom Chart.js Scale in Chart Config - JavaScript
DESCRIPTION: Illustrates how to configure a chart to use a custom scale type by specifying its registered `id` string in the `scales` option object.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/axes.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const lineChart = new Chart(ctx, {
    data: data,
    type: 'line',
    options: {
        scales: {
            y: {
                type: 'myScale' // this is the same id that was set on the scale
            }
        }
    }
});
```

----------------------------------------

TITLE: Configure Scatter Chart (Chart.js)
DESCRIPTION: Defines the main configuration object for a Chart.js scatter chart. It specifies the chart type, links the data, sets responsive options, configures the title plugin, and defines the initial min/max ranges for the x and y scales. It also includes the export statement for the chart editor environment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scale-options/center.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const config = {
  type: 'scatter',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Axis Center Positioning'
      }
    },
    scales: {
      x: {
        min: -100,
        max: 100,
      },
      y: {
        min: -100,
        max: 100,
      }
    }
  },
};

module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Chart.js Data Setup (JS)
DESCRIPTION: Sets up the data and labels for the chart, including the number of data points, value range, labels (months), and a single dataset with random numbers.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/title/alignment.md#_snippet_1

LANGUAGE: js
CODE:
```
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
  ]
};
// </block:setup>
```

----------------------------------------

TITLE: Configuring Ticks Color in Chart.js Radar Chart
DESCRIPTION: This snippet demonstrates how to set the color of the ticks (labels for values based on distance from center) on the radial axis ('r') of a Chart.js radar chart. It sets up basic chart data and configuration, then specifically targets the `ticks.color` property within the radial scale options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/radial/index.md#_snippet_3

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    label: 'My First dataset',
    backgroundColor: 'rgba(54, 162, 235, 0.5)',
    borderColor: 'rgb(54, 162, 235)',
    borderWidth: 1,
    data: [10, 20, 30, 40, 50, 0, 5],
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'radar',
  data,
  options: {
    scales: {
      r: {
        ticks: {
          color: 'red'
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Configuring Angle Lines Color in Chart.js Radar Chart
DESCRIPTION: This snippet demonstrates how to set the color of the angle lines on the radial axis ('r') of a Chart.js radar chart. It sets up basic chart data and configuration, then specifically targets the `angleLines.color` property within the radial scale options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/radial/index.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    label: 'My First dataset',
    backgroundColor: 'rgba(54, 162, 235, 0.5)',
    borderColor: 'rgb(54, 162, 235)',
    borderWidth: 1,
    data: [10, 20, 30, 40, 50, 0, 5],
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'radar',
  data,
  options: {
    scales: {
      r: {
        angleLines: {
          color: 'red'
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Defining Programmatic Actions for Chart.js (JavaScript)
DESCRIPTION: Defines an array of objects, each representing a programmatic action with a `name` and a `handler` function. This structure is used to list available actions like triggering hover or tooltip, providing a simple interface for executing them.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/programmatic-events.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const actions = [
  {
    name: 'Trigger Hover',
    handler: triggerHover
  },
  {
    name: 'Trigger Tooltip',
    handler: triggerTooltip
  }
];
```

----------------------------------------

TITLE: Defining Inline Plugin in Chart.js
DESCRIPTION: Shows how to define a plugin directly within the `plugins` array of a specific chart's configuration object. This approach defines the plugin functionality inline for that chart instance.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/plugins.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    plugins: [{
        beforeInit: function(chart, args, options) {
            //..
        }
    }]
});
```

----------------------------------------

TITLE: Configuring Chart.js Radar Chart Options (JavaScript)
DESCRIPTION: Defines the main configuration object for the Chart.js radar chart, specifying the chart type ('radar'), referencing the previously defined `data` object, and setting chart options like responsiveness and plugin configurations (e.g., title).
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/radar.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const config = {
  type: 'radar',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Radar Chart'
      }
    }
  },
};
```

----------------------------------------

TITLE: Generating Chart Image in Node.js with Skia Canvas
DESCRIPTION: This snippet demonstrates how to create a Chart.js chart instance on a skia-canvas, render it to a PNG buffer, and save the buffer to a file. It requires chart.js, skia-canvas, and node:fs/promises.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/using-from-node-js.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import {CategoryScale, Chart, LinearScale, LineController, LineElement, PointElement} from 'chart.js';
import {Canvas} from 'skia-canvas';
import fsp from 'node:fs/promises';

Chart.register([
  CategoryScale,
  LineController,
  LineElement,
  LinearScale,
  PointElement
]);

const canvas = new Canvas(400, 300);
const chart = new Chart(
  canvas, // TypeScript needs "as any" here
  {
    type: 'line',
    data: {
      labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
      datasets: [{
        label: '# of Votes',
        data: [12, 19, 3, 5, 2, 3],
        borderColor: 'red'
      }]
    }
  }
);
const pngBuffer = await canvas.toBuffer('png', {matte: 'white'});
await fsp.writeFile('output.png', pngBuffer);
chart.destroy();
```

----------------------------------------

TITLE: Configuring Chart.js Floating Bar Chart (JavaScript)
DESCRIPTION: This code snippet provides a complete example for setting up a Chart.js floating bar chart. It includes defining data using [start, end] pairs, configuring chart options like title and legend, and adding a 'Randomize' action to update the data dynamically.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/floating.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = chart.data.labels.map(() => {
          return [Utils.rand(-100, 100), Utils.rand(-100, 100)];
        });
      });
      chart.update();
    }
  },
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: labels.map(() => {
        return [Utils.rand(-100, 100), Utils.rand(-100, 100)];
      }),
      backgroundColor: Utils.CHART_COLORS.red,
    },
    {
      label: 'Dataset 2',
      data: labels.map(() => {
        return [Utils.rand(-100, 100), Utils.rand(-100, 100)];
      }),
      backgroundColor: Utils.CHART_COLORS.blue,
    },
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'bar',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Floating Bar Chart'
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

```

----------------------------------------

TITLE: Disabling Global Plugin for Specific Chart Instance
DESCRIPTION: Demonstrates how to disable a globally registered plugin (`p1`) for a particular chart instance by setting its entry under `options.plugins` to `false`.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/plugins.md#_snippet_4

LANGUAGE: javascript
CODE:
```
Chart.register({
    id: 'p1',
    // ...
});

const chart = new Chart(ctx, {
    options: {
        plugins: {
            p1: false   // disable plugin 'p1' for this instance
        }
    }
});
```

----------------------------------------

TITLE: Chart.js Line Chart Configuration - JS
DESCRIPTION: Sets up the main configuration for a Chart.js line chart. It includes the chart type, the generated datasets, and options such as the custom "animation" object, disabling interaction intersection, hiding the legend, displaying the easing function name as the title, and configuring the x-axis as linear.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/animations/progressive-line-easing.md#_snippet_2

LANGUAGE: js
CODE:
```
const config = {
  type: 'line',
  data: {
    datasets: [{
      borderColor: Utils.CHART_COLORS.red,
      borderWidth: 1,
      radius: 0,
      data: data,
    },
    {
      borderColor: Utils.CHART_COLORS.blue,
      borderWidth: 1,
      radius: 0,
      data: data2,
    }]
  },
  options: {
    animation,
    interaction: {
      intersect: false
    },
    plugins: {
      legend: false,
      title: {
        display: true,
        text: () => easing.name
      }
    },
    scales: {
      x: {
        type: 'linear'
      }
    }
  }
};
```

----------------------------------------

TITLE: Randomize Radar Data Points - Chart.js JavaScript
DESCRIPTION: Defines an array of actions for the chart, specifically a 'Randomize' button handler. This handler iterates through the chart's datasets, generates new random data, sets one point to null in each dataset (first, middle, or last), and updates the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/radar-skip-points.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach((dataset, i) => {
        const data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});

        if (i === 0) {
          data[0] = null;
        } else if (i === 1) {
          data[Number.parseInt(data.length / 2, 10)] = null;
        } else {
          data[data.length - 1] = null;
        }

        dataset.data = data;
      });
      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Defining Chart.js Stepped Line Data (JavaScript)
DESCRIPTION: Defines the data structure for a Chart.js stepped line chart. It includes labels for the x-axis and a single dataset with generated numerical data, a border color, and sets the initial 'stepped' property to 'true'.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/stepped.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const data = {
  labels: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6'],
  datasets: [
    {
      label: 'Dataset',
      data: Utils.numbers({count: 6, min: -100, max: 100}),
      borderColor: Utils.CHART_COLORS.red,
      fill: false,
      stepped: true,
    }
  ]
};
```

----------------------------------------

TITLE: Configure Chart.js Legend Point Style - JavaScript
DESCRIPTION: This snippet sets up a Chart.js line chart with a single dataset. It configures the legend to display the dataset's point style ('rectRot' in this case) instead of the default color box. It also includes an action handler to toggle the 'usePointStyle' option dynamically.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/legend/point-style.md#_snippet_0

LANGUAGE: js
CODE:
```
// <block:actions:2>
const actions = [
  {
    name: 'Toggle Point Style',
    handler(chart) {
      chart.options.plugins.legend.labels.usePointStyle = !chart.options.plugins.legend.labels.usePointStyle;
      chart.update();
    }
  },
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      borderWidth: 1,
      pointStyle: 'rectRot',
      pointRadius: 5,
      pointBorderColor: 'rgb(0, 0, 0)'
    },
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      legend: {
        labels: {
          usePointStyle: true,
        },
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Converting Event Coordinates to Data Values (JavaScript)
DESCRIPTION: This example shows how to convert canvas coordinates from a chart event (like a click) into data values using Chart.js helpers. It uses `Chart.helpers.getRelativePosition` to get the position relative to the chart area and then scale methods (`getValueForPixel`) to translate pixels into data values on specific axes.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/interactions.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        onClick: (e) => {
            const canvasPosition = Chart.helpers.getRelativePosition(e, chart);

            // Substitute the appropriate scale IDs
            const dataX = chart.scales.x.getValueForPixel(canvasPosition.x);
            const dataY = chart.scales.y.getValueForPixel(canvasPosition.y);
        }
    }
});
```

----------------------------------------

TITLE: Chart.js Actions for Polar Area Chart (JS)
DESCRIPTION: Defines an array of actions for a Chart.js chart editor. Includes functions to randomize data, add new data points, and remove the last data point, updating the chart after each action. Depends on a Utils object for data generation.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/polar-area-center-labels.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels.push('data #' + (data.labels.length + 1));

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(0, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Setting Up Data and Labels for Chart.js Radar Chart (JavaScript)
DESCRIPTION: Sets up constants for data generation, defines the labels for the radar chart axes, and initializes the `data` object with labels and two sample datasets using utility functions (`Utils.numbers`, `Utils.months`, `Utils.CHART_COLORS`, `Utils.transparentize`).
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/radar.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
```

----------------------------------------

TITLE: Initial Data Decimation Configuration (JavaScript)
DESCRIPTION: Defines the initial configuration object for the Chart.js data decimation plugin. Sets decimation to be initially disabled with the 'min-max' algorithm as the default.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/data-decimation.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const decimation = {
  enabled: false,
  algorithm: 'min-max',
};
```

----------------------------------------

TITLE: Export Chart Configuration (Chart.js)
DESCRIPTION: Exports the chart configuration object for use in a Chart.js environment, typically for integration into a chart editor or application.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/polar.md#_snippet_2

LANGUAGE: js
CODE:
```
module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Define Chart Actions for Data Decimation (JavaScript)
DESCRIPTION: Defines an array of actions to control the chart's data decimation plugin. Each action updates the decimation settings (enabled, algorithm, samples) and triggers a chart update.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/data-decimation.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const actions = [
  {
    name: 'No decimation (default)',
    handler(chart) {
      chart.options.plugins.decimation.enabled = false;
      chart.update();
    }
  },
  {
    name: 'min-max decimation',
    handler(chart) {
      chart.options.plugins.decimation.algorithm = 'min-max';
      chart.options.plugins.decimation.enabled = true;
      chart.update();
    },
  },
  {
    name: 'LTTB decimation (50 samples)',
    handler(chart) {
      chart.options.plugins.decimation.algorithm = 'lttb';
      chart.options.plugins.decimation.enabled = true;
      chart.options.plugins.decimation.samples = 50;
      chart.update();
    }
  },
  {
    name: 'LTTB decimation (500 samples)',
    handler(chart) {
      chart.options.plugins.decimation.algorithm = 'lttb';
      chart.options.plugins.decimation.enabled = true;
      chart.options.plugins.decimation.samples = 500;
      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Define Chart Actions (Chart.js)
DESCRIPTION: Defines an array of action objects used by the chart editor to demonstrate different axis positioning options. Each action has a name and a handler function that modifies the chart's scale positions and updates the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scale-options/center.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const actions = [
  {
    name: 'Default Positions',
    handler(chart) {
      chart.options.scales.x.position = 'bottom';
      chart.options.scales.y.position = 'left';
      chart.update();
    }
  },
  {
    name: 'Position: center',
    handler(chart) {
      chart.options.scales.x.position = 'center';
      chart.options.scales.y.position = 'center';
      chart.update();
    }
  },
  {
    name: 'Position: Vertical: x=-60, Horizontal: y=30',
    handler(chart) {
      chart.options.scales.x.position = {y: 30};
      chart.options.scales.y.position = {x: -60};
      chart.update();
    }
  },
];
```

----------------------------------------

TITLE: Chart.js barPercentage vs categoryPercentage Visualization
DESCRIPTION: Illustrates the visual impact of the `barPercentage` and `categoryPercentage` options on bar width and spacing within a category in a Chart.js bar chart using ASCII art.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/bar.md#_snippet_3

LANGUAGE: text
CODE:
```
// categoryPercentage: 1.0
// barPercentage: 1.0
Bar:        | 1.0 | 1.0 |
Category:   |    1.0    |
Sample:     |===========|

// categoryPercentage: 1.0
// barPercentage: 0.5
Bar:          |.5|  |.5|
Category:  |      1.0     |
Sample:    |==============|

// categoryPercentage: 0.5
// barPercentage: 1.0
Bar:             |1.0||1.0|
Category:        |   .5   |
Sample:     |==================|
```

----------------------------------------

TITLE: Defining Point Style Actions in Chart.js (JavaScript)
DESCRIPTION: This snippet defines an array of action objects. Each object has a 'name' and a 'handler' function. The 'handler' function takes a 'chart' instance and iterates through its datasets, setting the 'pointStyle' property to a specific value (e.g., 'circle', 'cross', 'dash', etc.) and then updates the chart. This is typically used in interactive examples to demonstrate different point styles.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/point-styling.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const actions = [
  {
    name: 'pointStyle: circle (default)',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'circle';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: cross',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'cross';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: crossRot',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'crossRot';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: dash',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'dash';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: line',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'line';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: rect',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'rect';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: rectRounded',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'rectRounded';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: rectRot',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'rectRot';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: star',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'star';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: triangle',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'triangle';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: false',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = false;
      });
      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Enabling spanGaps for Line Charts (Chart.js)
DESCRIPTION: Shows how to enable the spanGaps option in a Chart.js line chart configuration. This can be set per dataset or globally in the options to improve rendering performance by disabling line segmentation.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/performance.md#_snippet_4

LANGUAGE: javascript
CODE:
```
new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            spanGaps: true // enable for a single dataset
        }]
    },
    options: {
        spanGaps: true // enable for all datasets
    }
});
```

----------------------------------------

TITLE: Initializing Chart.js Data and Labels (JavaScript)
DESCRIPTION: This snippet sets up the data and labels used for the Chart.js line chart. It defines the number of data points, generates month labels, and creates two datasets with sample data and colors.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/linear-min-max.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: [10, 30, 50, 20, 25, 44, -10],
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.CHART_COLORS.red,
    },
    {
      label: 'Dataset 2',
      data: [100, 33, 22, 19, 11, 49, 30],
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.CHART_COLORS.blue,
    }
  ]
};
```

----------------------------------------

TITLE: Defining Actions for Chart Editor (JavaScript)
DESCRIPTION: This code defines an array of actions typically used within a chart editor environment. The 'Randomize' action demonstrates how to update the chart's dataset data with random points and then call `chart.update()` to re-render the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/plugins/doughnut-empty-state.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.points(NUMBER_CFG);
      });
      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Configure Chart and Export - Chart.js - JavaScript
DESCRIPTION: Defines the main chart configuration object, specifying the chart type ('line') and linking it to the previously defined data. It also includes the export statement, making the defined actions and configuration available for use in a chart editor environment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/legend/position.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const config = {
  type: 'line',
  data: data,
};

module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Defining Chart.js Action to Toggle Tooltip Point Style (JavaScript)
DESCRIPTION: Defines an array of actions for a chart editor interface. It includes a handler function that toggles the `usePointStyle` option within the chart's tooltip configuration and triggers a chart update to reflect the change.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/point-style.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const actions = [
  {
    name: 'Toggle Tooltip Point Style',
    handler(chart) {
      chart.options.plugins.tooltip.usePointStyle = !chart.options.plugins.tooltip.usePointStyle;
      chart.update();
    }
  },
];
```

----------------------------------------

TITLE: Define Chart.js Editor Actions (JavaScript)
DESCRIPTION: Defines an array of actions for the chart editor interface. Includes a 'Randomize' action that updates the data for all datasets with new random numbers and triggers a chart update.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scale-options/grid.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
];
// </block:actions>
```

----------------------------------------

TITLE: Setting Up Chart Data and Variables (JavaScript)
DESCRIPTION: Initializes constants for data count and configuration, generates labels (months), and creates the initial data object with two datasets for a Chart.js chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/stacked-bar-line.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      stack: 'combined',
      type: 'bar'
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      stack: 'combined'
    }
  ]
};
```

----------------------------------------

TITLE: Configuring Rollup Globals for Chart.js Helpers
DESCRIPTION: This Rollup configuration snippet shows how to map ESM imports for 'chart.js' and 'chart.js/helpers' to the global 'Chart' and 'Chart.helpers' variables respectively. This is essential when bundling an ESM-based Chart.js extension into a UMD format to ensure compatibility with the UMD version of Chart.js v3.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/publishing.md#_snippet_0

LANGUAGE: js
CODE:
```
module.exports = {
  // ...
  output: {
    globals: {
      'chart.js': 'Chart',
      'chart.js/helpers': 'Chart.helpers'
    }
  }
};
```

----------------------------------------

TITLE: Export Configuration and Actions (Chart.js)
DESCRIPTION: Exports the defined `actions` array and `config` object, making them available for use in a Chart.js editor or application setup.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/area/line-boundaries.md#_snippet_4

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Defining Chart Editor Actions - Chart.js JavaScript
DESCRIPTION: This snippet defines an array of actions for use in a chart editor environment. It includes a 'Randomize' action with a handler function that iterates through the chart's datasets, updates their data with new random points using `Utils.points`, and then calls `chart.update()` to redraw the chart with the new data.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/plugins/quadrants.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.points(NUMBER_CFG);
      });
      chart.update();
    }
  },
];

module.exports = {
  actions,
  config,
};
```

----------------------------------------

TITLE: Chart.js Bar Chart X-Axis Grid Offset Configuration
DESCRIPTION: Configures the x-axis scale in a Chart.js bar chart to enable grid line offsetting. Setting `scales.x.grid.offset` to `true` ensures bars are positioned between grid lines, which is the default for category scales in bar charts.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/bar.md#_snippet_2

LANGUAGE: javascript
CODE:
```
options = {
    scales: {
        x: {
            grid: {
              offset: true
            }
        }
    }
};
```

----------------------------------------

TITLE: Disabling the Built-in Colors Plugin in Chart.js (JavaScript)
DESCRIPTION: This code demonstrates how to disable the built-in `Colors` plugin via the chart options. This is particularly useful when using the UMD version of Chart.js where the plugin is enabled by default, allowing developers to prevent automatic color assignment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/colors.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const options = {
  plugins: {
    colors: {
      enabled: false
    }
  }
};
```

----------------------------------------

TITLE: Export Chart.js Configuration (JavaScript)
DESCRIPTION: Exports the chart configuration object (`config`) for use in another module or script, typically to initialize the chart instance.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/stacked.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  config: config,
};
```

----------------------------------------

TITLE: Define Chart Actions (JavaScript)
DESCRIPTION: This snippet defines an array of action objects used to interact with the chart. Each action has a `name` and a `handler` function that modifies the chart's data or configuration and updates the chart. Dependencies include the `Utils` object for generating data and colors.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/vertical.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        borderWidth: 1,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
// </block:actions>
```

----------------------------------------

TITLE: Define Category Axis Labels in Axis Options in Chart.js
DESCRIPTION: This snippet demonstrates how to define labels specifically for a category axis within the scales configuration in the chart's options. This provides more fine-grained control and overrides global labels for this specific axis.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/category.md#_snippet_1

LANGUAGE: javascript
CODE:
```
let chart = new Chart(ctx, {
    type: ...
    data: ...
    options: {
        scales: {
            x: {
                type: 'category',
                labels: ['January', 'February', 'March', 'April', 'May', 'June']
            }
        }
    }
});
```

----------------------------------------

TITLE: Using Image as Fill Pattern in Chart.js
DESCRIPTION: This snippet demonstrates how to load an image, create a canvas pattern from it, and apply this pattern as the background color for a dataset in a Chart.js chart. It requires a canvas element and an image URL.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/colors.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const img = new Image();
img.src = 'https://example.com/my_image.png';
img.onload = () => {
  const ctx = document.getElementById('canvas').getContext('2d');
  const fillPattern = ctx.createPattern(img, 'repeat');

  const chart = new Chart(ctx, {
    data: {
      labels: ['Item 1', 'Item 2', 'Item 3'],
      datasets: [{
        data: [10, 20, 30],
        backgroundColor: fillPattern
      }]
    }
  });
};
```

----------------------------------------

TITLE: Exporting Chart Configuration and Actions (JavaScript)
DESCRIPTION: Exports the defined `actions` array and `config` object, making them available for use in other modules or scripts, typically for initializing a chart instance within a larger application or chart editor environment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/point-style.md#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Export Chart Actions and Configuration
DESCRIPTION: Exports the defined `actions` array and `config` object, making them available for use in other modules or the chart editor environment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/time-combo.md#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Exporting Chart.js Configuration and Actions (JavaScript)
DESCRIPTION: Exports the defined 'actions' array and 'config' object using Node.js 'module.exports'. This makes these variables available for use in other modules or the chart editor environment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/stepped.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Configure Pie Chart with Legend Events - Chart.js JS
DESCRIPTION: Defines the configuration object for the Chart.js pie chart. It links the previously defined `data` and specifies the `handleHover` and `handleLeave` functions as the callbacks for the legend's `onHover` and `onLeave` events.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/legend/events.md#_snippet_3

LANGUAGE: js
CODE:
```
const config = {
  type: 'pie',
  data: data,
  options: {
    plugins: {
      legend: {
        onHover: handleHover,
        onLeave: handleLeave
      }
    }
  }
};
```

----------------------------------------

TITLE: Configure Cartesian Axis Border Color - Chart.js - JavaScript
DESCRIPTION: Demonstrates how to set the color of the border for a Cartesian axis in Chart.js by modifying the `scales.x.border.color` option within the chart configuration.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/index.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    label: 'My First dataset',
    backgroundColor: 'rgba(54, 162, 235, 0.5)',
    borderColor: 'rgb(54, 162, 235)',
    borderWidth: 1,
    data: [10, 20, 30, 40, 50, 0, 5],
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data,
  options: {
    scales: {
      x: {
        border: {
          color: 'red'
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Exporting Chart.js Configuration Module - JavaScript
DESCRIPTION: Exports the `config` object as a module, making it available for use in other parts of the application or in a Chart.js chart editor environment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/animations/progressive-line.md#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  config
};
```

----------------------------------------

TITLE: Defining Chart.js Editor Actions (JavaScript)
DESCRIPTION: Defines an array of action objects used in a chart editor. Each object has a 'name' and a 'handler' function that modifies the chart data or updates the chart. Includes actions for randomizing data, adding a new data point, and removing the last data point.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/polar-area.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels.push('data #' + (data.labels.length + 1));

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(0, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Configuring Filler Plugin Propagation in Chart.js
DESCRIPTION: Demonstrates how to enable the `propagate` option within the `filler` plugin configuration, which allows fill areas to extend recursively to visible targets when intermediate datasets are hidden.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/area.md#_snippet_2

LANGUAGE: javascript
CODE:
```
new Chart(ctx, {
    data: {
        datasets: [
            {fill: 'origin'},   // 0: fill to 'origin'
            {fill: '-1'},       // 1: fill to dataset 0
            {fill: 1},          // 2: fill to dataset 1
            {fill: false},      // 3: no fill
            {fill: '-2'}        // 4: fill to dataset 2
        ]
    },
    options: {
        plugins: {
            filler: {
                propagate: true
            }
        }
    }
});
```

----------------------------------------

TITLE: Toggle Data Visibility (Chart.js)
DESCRIPTION: Toggles the visibility of a data item at a specific index across all datasets that support this feature. Chart types like doughnut, pie, polar area, and bar charts typically utilize this method. Call `chart.update()` after toggling to reflect the change.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_16

LANGUAGE: javascript
CODE:
```
chart.toggleDataVisibility(2);
chart.update();
```

----------------------------------------

TITLE: Forcing Colors Plugin Override for Dynamic Datasets in Chart.js (JavaScript)
DESCRIPTION: This snippet shows how to configure the `Colors` plugin to force color assignment even when colors are already specified or when dealing with dynamic datasets added at runtime. Setting `forceOverride: true` ensures the plugin's palette is always applied.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/colors.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const options = {
  plugins: {
    colors: {
      forceOverride: true
    }
  }
};
```

----------------------------------------

TITLE: Exporting Chart Components (Chart.js, JavaScript)
DESCRIPTION: Exports the defined actions array and chart configuration object for use in another module or application.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/polar.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  actions,
  config,
};
```

----------------------------------------

TITLE: Exporting Chart.js Configuration and Actions (JavaScript)
DESCRIPTION: Exports the previously defined `actions` array and `config` object using `module.exports`. This makes these components available for use by the Chart.js editor or other modules that require this chart setup and its associated actions.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scale-options/ticks.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Chart.js Animation Callback Object Structure (JavaScript)
DESCRIPTION: Defines the structure of the object passed as an argument to the `onProgress` and `onComplete` animation callbacks in Chart.js. It includes properties like the chart instance, current animation step, initial animation status, and total number of steps.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/animations.md#_snippet_3

LANGUAGE: javascript
CODE:
```
{
  // Chart object
  chart: Chart,

  // Number of animations still in progress
  currentStep: number,

  // `true` for the initial animation of the chart
  initial: boolean,

  // Total number of animations at the start of current animation
  numSteps: number,
}
```

----------------------------------------

TITLE: Chart.js Scale Instance Properties - JSON/Object
DESCRIPTION: Defines the properties available on a scale instance during the fitting process, including bounding box dimensions, margins, and padding.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/axes.md#_snippet_3

LANGUAGE: javascript
CODE:
```
{
    left: number, // left edge of the scale bounding box
    right: number, // right edge of the bounding box
    top: number,
    bottom: number,
    width: number, // the same as right - left
    height: number, // the same as bottom - top

    // Margin on each side. Like css, this is outside the bounding box.
    margins: {
        left: number,
        right: number,
        top: number,
        bottom: number
    },

    // Amount of padding on the inside of the bounding box (like CSS)
    paddingLeft: number,
    paddingRight: number,
    paddingTop: number,
    paddingBottom: number
}
```

----------------------------------------

TITLE: Defining Chart Actions (Chart.js, JavaScript)
DESCRIPTION: Defines an array of actions for the chart editor, including a 'Randomize' action that updates the chart's dataset data with new random numbers and triggers a chart update.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/animations/delay.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
];
```

----------------------------------------

TITLE: Exporting Chart Configuration and Actions (JS)
DESCRIPTION: Exports the defined `actions` array and `config` object using `module.exports`, making them available for use in a Chart.js example runner or similar environment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/log.md#_snippet_3

LANGUAGE: js
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Defining Plugin Defaults in Chart.js
DESCRIPTION: Illustrates how to define default options for a plugin within its `defaults` property. These defaults are applied unless overridden in the chart's `options.plugins.{plugin-id}` configuration.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/plugins.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const plugin = {
    id: 'custom_canvas_background_color',
    beforeDraw: (chart, args, options) => {
        const {ctx} = chart;
        ctx.save();
        ctx.globalCompositeOperation = 'destination-over';
        ctx.fillStyle = options.color;
        ctx.fillRect(0, 0, chart.width, chart.height);
        ctx.restore();
    },
    defaults: {
        color: 'lightGreen'
    }
}
```

----------------------------------------

TITLE: Inaccessible Canvas (Generic Fallback) (HTML)
DESCRIPTION: While this canvas includes fallback content, the content is a generic message indicating lack of browser support rather than a descriptive text alternative. This type of fallback does not provide meaningful information for accessibility purposes.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/accessibility.md#_snippet_3

LANGUAGE: HTML
CODE:
```
<canvas id="badCanvas2" width="400" height="100">Your browser does not support the canvas element.</canvas>
```

----------------------------------------

TITLE: Export Chart Actions and Configuration (JavaScript)
DESCRIPTION: Exports the defined `actions` array and `config` object using Node.js `module.exports`, making them available for use in other modules.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/linear-gradient.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Exporting Chart.js Configuration and Actions (JS)
DESCRIPTION: Exports the defined actions array and config object using Node.js module.exports, making them available for use in other modules or the chart editor environment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/polar-area-center-labels.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Exporting Chart.js Configuration and Actions (JavaScript)
DESCRIPTION: Exports the `actions` array and the `config` object using `module.exports`, making them available for use in other parts of the application, likely for rendering the chart and providing interactive controls.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/radar.md#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Define Chart Actions (Stacked Line Chart)
DESCRIPTION: Defines an array of action objects used in a chart editor. Each action has a name and a handler function that modifies the chart instance, allowing users to toggle stacking modes, randomize data, add/remove datasets, and add/remove data points.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/area/line-stacked.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const actions = [
  {
    name: 'Stacked: true',
    handler: (chart) => {
      chart.options.scales.y.stacked = true;
      chart.update();
    }
  },
  {
    name: 'Stacked: false (default)',
    handler: (chart) => {
      chart.options.scales.y.stacked = false;
      chart.update();
    }
  },
  {
    name: 'Stacked Single',
    handler: (chart) => {
      chart.options.scales.y.stacked = 'single';
      chart.update();
    }
  },
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: dsColor,
        borderColor: dsColor,
        fill: true,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Interactive Easing Selection and Animation Restart - JS
DESCRIPTION: Contains the "restartAnims" function and an array of "actions". "restartAnims" stops the current animation, resets internal state flags used by the scriptable animation options, and updates the chart. The "actions" array provides buttons (implicitly) to change the "easing" function and call "restartAnims".
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/animations/progressive-line-easing.md#_snippet_3

LANGUAGE: js
CODE:
```
function restartAnims(chart) {
  chart.stop();
  const meta0 = chart.getDatasetMeta(0);
  const meta1 = chart.getDatasetMeta(1);
  for (let i = 0; i < data.length; i++) {
    const ctx0 = meta0.controller.getContext(i);
    const ctx1 = meta1.controller.getContext(i);
    ctx0.xStarted = ctx0.yStarted = false;
    ctx1.xStarted = ctx1.yStarted = false;
  }
  chart.update();
}

const actions = [
  {
    name: 'easeOutQuad',
    handler(chart) {
      easing = helpers.easingEffects.easeOutQuad;
      restartAnims(chart);
    }
  },
  {
    name: 'easeOutCubic',
    handler(chart) {
      easing = helpers.easingEffects.easeOutCubic;
      restartAnims(chart);
    }
  },
  {
    name: 'easeOutQuart',
    handler(chart) {
      easing = helpers.easingEffects.easeOutQuart;
      restartAnims(chart);
    }
  },
  {
    name: 'easeOutQuint',
    handler(chart) {
      easing = helpers.easingEffects.easeOutQuint;
      restartAnims(chart);
    }
  },
  {
    name: 'easeInQuad',
    handler(chart) {
      easing = helpers.easingEffects.easeInQuad;
      restartAnims(chart);
    }
  },
  {
    name: 'easeInCubic',
    handler(chart) {
      easing = helpers.easingEffects.easeInCubic;
      restartAnims(chart);
    }
  },
  {
    name: 'easeInQuart',
    handler(chart) {
      easing = helpers.easingEffects.easeInQuart;
      restartAnims(chart);
    }
  },
  {
    name: 'easeInQuint',
    handler(chart) {
      easing = helpers.easingEffects.easeInQuint;
      restartAnims(chart);
    }
  },
];
```

----------------------------------------

TITLE: Generate Large Dataset for Chart Decimation Example (JavaScript)
DESCRIPTION: Generates a large dataset (100,000 points) with time-based x-values and random y-values. Includes logic for occasional outlier points. This data is used to demonstrate the effect of data decimation.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/data-decimation.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const NUM_POINTS = 100000;
Utils.srand(10);

// parseISODate returns a luxon date object to work with in the samples
// We will create points every 30s starting from this point in time
const start = Utils.parseISODate('2021-04-01T00:00:00Z').toMillis();
const pointData = [];

for (let i = 0; i < NUM_POINTS; ++i) {
  // Most data will be in the range [0, 20) but some rare data will be in the range [0, 100)
  const max = Math.random() < 0.001 ? 100 : 20;
  pointData.push({x: start + (i * 30000), y: Utils.rand(0, max)});
}

const data = {
  datasets: [{
    borderColor: Utils.CHART_COLORS.red,
    borderWidth: 1,
    data: pointData,
    label: 'Large Dataset',
    radius: 0,
  }]
};
```

----------------------------------------

TITLE: Installing Chart.js Development Dependencies (pnpm) - Bash
DESCRIPTION: This command installs the necessary development dependencies for the Chart.js project using the pnpm package manager. It should be run from the root directory of the cloned repository after installing Node.js and pnpm.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/contributing.md#_snippet_0

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Export Chart Actions and Configuration (JavaScript)
DESCRIPTION: Exports the `actions` array and the `config` object using `module.exports`, making them available for use in another module or script.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/area/radar.md#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions: actions,
  config: config
};
```

----------------------------------------

TITLE: Chart.js Custom Plugin for Canvas Background Image (JavaScript)
DESCRIPTION: This JavaScript code defines a Chart.js plugin that draws an image as the background of the chart canvas. It loads an image and uses the 'beforeDraw' hook to draw it, centering it within the chart area. It includes logic to redraw the chart once the image is loaded.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/canvas-background.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const data = {
  labels: [
    'Red',
    'Blue',
    'Yellow'
  ],
  datasets: [{
    label: 'My First Dataset',
    data: [300, 50, 100],
    backgroundColor: [
      'rgb(255, 99, 132)',
      'rgb(54, 162, 235)',
      'rgb(255, 205, 86)'
    ],
    hoverOffset: 4
  }]
};
// </block:setup>

// <block:plugin:2>
// Note: changes to the plugin code is not reflected to the chart, because the plugin is loaded at chart construction time and editor changes only trigger an chart.update().
const image = new Image();
image.src = 'https://www.chartjs.org/img/chartjs-logo.svg';

const plugin = {
  id: 'customCanvasBackgroundImage',
  beforeDraw: (chart) => {
    if (image.complete) {
      const ctx = chart.ctx;
      const {top, left, width, height} = chart.chartArea;
      const x = left + width / 2 - image.width / 2;
      const y = top + height / 2 - image.height / 2;
      ctx.drawImage(image, x, y);
    } else {
      image.onload = () => chart.draw();
    }
  }
};
// </block:plugin>

// <block:config:0>
const config = {
  type: 'doughnut',
  data: data,
  plugins: [plugin],
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

```

----------------------------------------

TITLE: Setting Up Chart.js Data and Elements - JavaScript
DESCRIPTION: Initializes DOM references for progress bars and sets up the initial data structure for the Chart.js line chart. Defines labels and two datasets with random data using a `Utils` helper.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/progress-bar.md#_snippet_1

LANGUAGE: js
CODE:
```
const initProgress = document.getElementById('initialProgress');
const progress = document.getElementById('animationProgress');

const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
```

----------------------------------------

TITLE: Using Chart.js onProgress Callback (JavaScript)
DESCRIPTION: Provides an example of how to implement the `onProgress` callback within the chart options. This callback is executed on each animation step and can be used to update external elements, such as a progress bar, based on the animation's progress.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/animations.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        animation: {
            onProgress: function(animation) {
                progress.value = animation.currentStep / animation.numSteps;
            }
        }
    }
});
```

----------------------------------------

TITLE: Default Chart.js Legend Click Handler (JavaScript)
DESCRIPTION: Shows the default JavaScript function used by Chart.js when a legend item is clicked. It toggles the visibility of the associated dataset.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/legend.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function(e, legendItem, legend) {
    const index = legendItem.datasetIndex;
    const ci = legend.chart;
    if (ci.isDatasetVisible(index)) {
        ci.hide(index);
        legendItem.hidden = true;
    } else {
        ci.show(index);
        legendItem.hidden = false;
    }
}
```

----------------------------------------

TITLE: Defining Chart.js Editor Actions - JavaScript
DESCRIPTION: Sets up an array of actions for a Chart.js editor environment. Includes a 'Randomize' action that updates the data of all datasets in the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/stacked-groups.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
];
```

----------------------------------------

TITLE: Exporting Chart.js Configuration (JavaScript)
DESCRIPTION: This simple snippet exports the defined chart configuration object, making it available for use in other parts of the application or environment where this module is imported.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/linear-min-max.md#_snippet_2

LANGUAGE: javascript
CODE:
```
module.exports = {
  config: config,
};
```

----------------------------------------

TITLE: Configuring Grid Lines Color in Chart.js Radar Chart
DESCRIPTION: This snippet demonstrates how to set the color of the grid lines on the radial axis ('r') of a Chart.js radar chart. It sets up basic chart data and configuration, then specifically targets the `grid.color` property within the radial scale options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/radial/index.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    label: 'My First dataset',
    backgroundColor: 'rgba(54, 162, 235, 0.5)',
    borderColor: 'rgb(54, 162, 235)',
    borderWidth: 1,
    data: [10, 20, 30, 40, 50, 0, 5],
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'radar',
  data,
  options: {
    scales: {
      r: {
        grid: {
          color: 'red'
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Exporting Chart Configuration and Actions - Chart.js - JavaScript
DESCRIPTION: Exports the defined `actions` array and `config` object using `module.exports`, making them available for use in other parts of the application.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/scatter.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Resetting Chart.js Animation State - JavaScript
DESCRIPTION: The .reset() method reverts the chart to its state before the initial animation. This can be used to prepare the chart for a new animation triggered by a subsequent .update() call.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_4

LANGUAGE: javascript
CODE:
```
myLineChart.reset();
```

----------------------------------------

TITLE: Limiting Plugin Events (JavaScript)
DESCRIPTION: This example shows how to limit the events a specific plugin, like the tooltip, responds to. While the main chart options define the events the chart listens for globally, individual plugins can override this by providing their own `events` array within their plugin options.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/interactions.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const chart = new Chart(ctx, {
  type: 'line',
  data: data,
  options: {
    // All of these (default) events trigger a hover and are passed to all plugins,
    // unless limited at plugin options
    events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],
    plugins: {
      tooltip: {
        // Tooltip will only receive click events
        events: ['click']
      }
    }
  }
});
```

----------------------------------------

TITLE: Define Chart Actions (Chart.js, JavaScript)
DESCRIPTION: Defines an array of action objects, each containing a name and a handler function. These handlers modify the chart's data or datasets and trigger a chart update.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/animations/drop.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Define Chart.js Tooltip Position Actions (JavaScript)
DESCRIPTION: This array defines actions used in the chart editor to dynamically change the tooltip `position` option between 'average', 'nearest', and a custom 'bottom' mode. Each action updates the chart options and triggers an update.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/position.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const actions = [
  {
    name: 'Position: average',
    handler(chart) {
      chart.options.plugins.tooltip.position = 'average';
      chart.update();
    }
  },
  {
    name: 'Position: nearest',
    handler(chart) {
      chart.options.plugins.tooltip.position = 'nearest';
      chart.update();
    }
  },
  {
    name: 'Position: bottom (custom)',
    handler(chart) {
      chart.options.plugins.tooltip.position = 'bottom';
      chart.update();
    }
  },
];
```

----------------------------------------

TITLE: Configure Chart.js Legend Alignment and Title Position Actions (JS)
DESCRIPTION: Defines an array of actions used to interactively change the legend's alignment and title position in a Chart.js instance. Each action updates the chart options and triggers an update.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/legend/title.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const actions = [
  {
    name: 'Title Position: start',
    handler(chart) {
      chart.options.plugins.legend.align = 'start';
      chart.options.plugins.legend.title.position = 'start';
      chart.update();
    }
  },
  {
    name: 'Title Position: center (default)',
    handler(chart) {
      chart.options.plugins.legend.align = 'center';
      chart.options.plugins.legend.title.position = 'center';
      chart.update();
    }
  },
  {
    name: 'Title Position: end',
    handler(chart) {
      chart.options.plugins.legend.align = 'end';
      chart.options.plugins.legend.title.position = 'end';
      chart.update();
    }
  },
];
```

----------------------------------------

TITLE: Getting Sorted Visible Dataset Metadata in Chart.js - JavaScript
DESCRIPTION: The .getSortedVisibleDatasetMetas() method returns an array containing the metadata for all datasets that are currently visible on the chart, ordered by their drawing sequence.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_12

LANGUAGE: javascript
CODE:
```
const visibleMetas = chart.getSortedVisibleDatasetMetas();
```

----------------------------------------

TITLE: Defining Radar Chart Dataset Data Array - Chart.js JavaScript
DESCRIPTION: Shows a simple array structure for the `data` property within a Chart.js radar chart dataset. Each number corresponds to a point value.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/charts/radar.md#_snippet_2

LANGUAGE: javascript
CODE:
```
data: [20, 10]
```

----------------------------------------

TITLE: Setup Constants and Actions for Chart.js Radial Gradient Example
DESCRIPTION: Defines constants like DATA_COUNT, initializes colors, sets up a cache for gradient objects to optimize rendering, and defines an action button handler to update chart data.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/radial-gradient.md#_snippet_0

LANGUAGE: js
CODE:
```
// <block:setup:3>
const DATA_COUNT = 5;
Utils.srand(110);

const chartColors = Utils.CHART_COLORS;
const colors = [chartColors.red, chartColors.orange, chartColors.yellow, chartColors.green, chartColors.blue];

const cache = new Map();
let width = null;
let height = null;

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
];
// </block:setup>
```

----------------------------------------

TITLE: Setup Inputs and Data Generation (Chart.js)
DESCRIPTION: Defines input parameters for data generation and provides helper functions (`generateLabels`, `generateData`) to create chart data based on these inputs. This block sets up the dynamic data source for the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/area/line-boundaries.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:setup:2>
const inputs = {
  min: -100,
  max: 100,
  count: 8,
  decimals: 2,
  continuity: 1
};

const generateLabels = () => {
  return Utils.months({count: inputs.count});
};

const generateData = () => (Utils.numbers(inputs));
// </block:setup>
```

----------------------------------------

TITLE: Registering Custom Tooltip Positioner Type (TypeScript)
DESCRIPTION: Illustrates how to extend the `chart.js` module's `TooltipPositionerMap` interface in TypeScript to add type definitions for a custom tooltip positioner function.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/configuration/tooltip.md#_snippet_7

LANGUAGE: typescript
CODE:
```
declare module 'chart.js' {
  interface TooltipPositionerMap {
    myCustomPositioner: TooltipPositionerFunction<ChartType>;
  }
}
```

----------------------------------------

TITLE: Stopping Chart.js Animation - JavaScript
DESCRIPTION: Call .stop() to pause any ongoing chart animation at its current frame. Use .render() to resume or trigger a redraw without updating data.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_5

LANGUAGE: javascript
CODE:
```
// Stops the charts animation loop at its current frame
myLineChart.stop();
// => returns 'this' for chainability
```

----------------------------------------

TITLE: Position Cartesian Axis by Data Value - Chart.js - JavaScript
DESCRIPTION: Shows how to dynamically position a Chart.js Cartesian axis relative to a specific data value on another axis by setting the `position` option to an object containing the target axis ID and value.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/axes/cartesian/index.md#_snippet_4

LANGUAGE: javascript
CODE:
```
{
    x: -20
}
```

----------------------------------------

TITLE: Export Chart Actions and Configuration (JavaScript)
DESCRIPTION: Exports the defined actions array and chart configuration object, making them available for use in the chart editor or application.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/data-decimation.md#_snippet_4

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Defining Chart Actions (JavaScript)
DESCRIPTION: Defines an array of actions that can be performed on the chart, such as randomizing the dataset. Includes a handler function that updates the chart data.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/line.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:setup:2>
const DATA_COUNT = 12;
Utils.srand(110);

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
];
// </block:setup>
```

----------------------------------------

TITLE: Defining Custom Chart.js Scale Class - JavaScript
DESCRIPTION: Demonstrates how to create a new scale type by extending the base `Chart.Scale` class and setting its static `id` and `defaults` properties.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/axes.md#_snippet_0

LANGUAGE: javascript
CODE:
```
class MyScale extends Chart.Scale {
    /* extensions ... */
}
MyScale.id = 'myScale';
MyScale.defaults = defaultConfigObject;

// MyScale is now derived from Chart.Scale
```

----------------------------------------

TITLE: Defining Chart.js Actions (JavaScript)
DESCRIPTION: Defines an array of actions for the chart editor. Includes a 'Randomize' action that updates the chart's dataset data with new random numbers and triggers a chart update. This allows users to easily refresh the chart data.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/border-radius.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
];
```

----------------------------------------

TITLE: Define Chart Actions (Randomize) - Chart.js - JavaScript
DESCRIPTION: Defines an array of actions for the chart editor. The primary action is 'Randomize', which iterates through datasets and updates data points with random values, then updates the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/time-line.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data.forEach(function(dataObj, j) {
          const newVal = Utils.rand(0, 100);

          if (typeof dataObj === 'object') {
            dataObj.y = newVal;
          } else {
            dataset.data[j] = newVal;
          }
        });
      });
      chart.update();
    }
  },
];
// </block:actions>
```

----------------------------------------

TITLE: Defining Chart Actions (Chart.js, JavaScript)
DESCRIPTION: Sets up interactive actions for the chart, including a 'Randomize' button handler that updates the dataset data.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/polar.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
// <block:setup:2>
const DATA_COUNT = 7;
Utils.srand(110);

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
];
// </block:setup>
```

----------------------------------------

TITLE: Define Chart Editor Actions (JavaScript)
DESCRIPTION: Defines an array of action objects used in the chart editor. Each action has a name and a handler function that modifies the chart data or updates the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/linear-gradient.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Define Chart Interaction Actions (JavaScript)
DESCRIPTION: Creates an array of action objects, each with a `name` and a `handler` function. These handlers modify the chart's data or options (randomizing data, toggling filler propagation, toggling line tension) and update the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/area/radar.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// <block:actions:2>
let smooth = false;
let propagate = false;

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      inputs.from = [];
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
  {
    name: 'Propagate',
    handler(chart) {
      propagate = !propagate;
      chart.options.plugins.filler.propagate = propagate;
      chart.update();

    }
  },
  {
    name: 'Smooth',
    handler(chart) {
      smooth = !smooth;
      chart.options.elements.line.tension = smooth ? 0.4 : 0;
      chart.update();
    }
  }
];
// </block:actions>
```

----------------------------------------

TITLE: Setup Actions for Bar Chart (JavaScript)
DESCRIPTION: Defines an array of actions for the chart editor, including a 'Randomize' action that updates the dataset with new random data and triggers a chart update.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/bar.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const DATA_COUNT = 16;
Utils.srand(110);

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
];
```

----------------------------------------

TITLE: Configuring Derived Bubble Chart in Chart.js (JavaScript)
DESCRIPTION: This snippet defines the data structure and configuration object for a custom 'derivedBubble' chart type in Chart.js. It includes dataset definition with styling and data generation using utility functions, and sets up basic chart options like responsiveness and title.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/derived-chart-type.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100, rmin: 1, rmax: 20};
const data = {
  datasets: [
    {
      label: 'My First dataset',
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      borderColor: Utils.CHART_COLORS.blue,
      borderWidth: 1,
      boxStrokeStyle: 'red',
      data: Utils.bubbles(NUMBER_CFG)
    }
  ],
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'derivedBubble',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Derived Chart Type'
      }
    }
  }
};

// </block:config>

module.exports = {
  actions: [],
  config: config
};
```

----------------------------------------

TITLE: Optional Dataset Controller Methods in Chart.js
DESCRIPTION: Lists optional methods that can be overridden in a custom dataset controller to customize behavior such as drawing, initialization, scale linking, and data parsing.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/charts.md#_snippet_2

LANGUAGE: javascript
CODE:
```
{
    // Draw the representation of the dataset. The base implementation works in most cases, and an example of a derived version
    // can be found in the line controller
    draw: function() {},

    // Initializes the controller
    initialize: function() {},

    // Ensures that the dataset represented by this controller is linked to a scale. Overridden to helpers.noop in the polar area and doughnut controllers as these
    // chart types using a single scale
    linkScales: function() {},

    // Parse the data into the controller meta data. The default implementation will work for cartesian parsing, but an example of an overridden
    // version can be found in the doughnut controller
    parse: function(start, count) {},
}
```

----------------------------------------

TITLE: Configuring Doughnut Chart with Empty State Plugin (JavaScript)
DESCRIPTION: This snippet defines the main configuration object for the Chart.js doughnut chart. It specifies the chart type, links the data object, includes the custom 'emptyDoughnut' plugin, and sets options for the plugin such as color, line width, and radius adjustment for the empty state circle.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/plugins/doughnut-empty-state.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const config = {
  type: 'doughnut',
  data: data,
  options: {
    plugins: {
      emptyDoughnut: {
        color: 'rgba(255, 128, 0, 0.5)',
        width: 2,
        radiusDecrease: 20
      }
    }
  },
  plugins: [plugin]
};
```

----------------------------------------

TITLE: Chart.js Export Configuration (JS)
DESCRIPTION: Exports the defined actions and chart configuration object for use in a Chart.js editor or application.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/title/alignment.md#_snippet_3

LANGUAGE: js
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Generating Logarithmic Data and Chart Actions (JS)
DESCRIPTION: Defines a helper function `logNumbers` to generate random data suitable for a logarithmic scale and an `actions` array containing a 'Randomize' handler to update chart data.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/log.md#_snippet_0

LANGUAGE: js
CODE:
```
// <block:actions:2>
const logNumbers = (num) => {
  const data = [];

  for (let i = 0; i < num; ++i) {
    data.push(Math.ceil(Math.random() * 10.0) * Math.pow(10, Math.ceil(Math.random() * 5)));
  }

  return data;
};

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = logNumbers(chart.data.labels.length);
      });
      chart.update();
    }
  },
];
// </block:actions>
```

----------------------------------------

TITLE: Configure Log2 Axis in Chart.js JavaScript
DESCRIPTION: This snippet sets up sample data and configures a Chart.js line chart. It defines a dataset with labels and numerical data, and configures the chart options to use a 'log2' scale for the y-axis. Requires Chart.js and a 'log2' scale implementation.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/derived-axis-type.md#_snippet_0

LANGUAGE: js
CODE:
```
// <block:setup:1>
const DATA_COUNT = 12;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 1000};
const labels = Utils.months({count: DATA_COUNT});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'My First dataset',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      fill: false,
    }
  ],
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data,
  options: {
    responsive: true,
    scales: {
      x: {
        display: true,
      },
      y: {
        display: true,
        type: 'log2',
      }
    }
  }
};

// </block:config>

module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Exporting Chart.js Configuration and Actions (JavaScript)
DESCRIPTION: Exports the `actions` array and the `config` object using `module.exports`. This makes the defined actions and chart configuration available for import and use in other parts of the application or examples.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/programmatic-events.md#_snippet_5

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Export Chart Configuration and Actions - Chart.js - JavaScript
DESCRIPTION: Exports the `actions` and `config` objects defined earlier, making them available for use in a module system, likely for integration into a chart editor or example runner.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scales/time-line.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Exporting Chart Configuration (JavaScript)
DESCRIPTION: Exports the defined `actions` array and the chart `config` object, making them available for use in other modules.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/line.md#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions,
  config,
};
```

----------------------------------------

TITLE: Accessing Chart.js Components in Samples - JavaScript
DESCRIPTION: This snippet illustrates how Chart.js components, such as Tooltip, are made accessible within the sample build environment, typically via a 'components' object. This differs from direct access via the global 'Chart' object when Chart.js is included as a browser script.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/utils.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
// Placeholder for content from @/scripts/components.js
// Example of how components might be structured in the sample build
const components = {
  Tooltip: Chart.Tooltip, // Accessing a core component
  Legend: Chart.Legend   // Accessing another core component
  // ... other components
};

// In samples, you might reference components like:
// const tooltip = new components.Tooltip({...});

export default components;
```

----------------------------------------

TITLE: Defining Initial Data Structure for Doughnut Chart (JavaScript)
DESCRIPTION: This snippet defines the initial data object for the Chart.js doughnut chart. It includes empty arrays for labels and dataset data, which is the state that triggers the empty state visualization.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/plugins/doughnut-empty-state.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const data = {
  labels: [],
  datasets: [
    {
      label: 'Dataset 1',
      data: []
    }
  ]
};
```

----------------------------------------

TITLE: Adding TypeScript Typings for Chart.js Plugin
DESCRIPTION: This TypeScript code demonstrates how to augment Chart.js built-in types using declaration merging to provide static typings for a custom plugin. It adds an optional 'customCanvasBackgroundColor' property to the 'PluginOptionsByType' interface, allowing type-safe configuration for a plugin that handles canvas background color.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/plugins.md#_snippet_7

LANGUAGE: ts
CODE:
```
import {ChartType, Plugin} from 'chart.js';

declare module 'chart.js' {
  interface PluginOptionsByType<TType extends ChartType> {
    customCanvasBackgroundColor?: {
      color?: string
    }
  }
}
```

----------------------------------------

TITLE: Chart.js Console Error for Unregistered Controller
DESCRIPTION: Shows an example error message displayed in the browser console by Chart.js when a required controller (e.g., 'bar') is not registered, helping identify missing components for tree-shaking.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_16

LANGUAGE: text
CODE:
```
Unhandled Promise Rejection: Error: \"bar\" is not a registered controller.
```

----------------------------------------

TITLE: Generating Random Data for Chart.js Line Chart - JavaScript
DESCRIPTION: Generates two arrays (`data` and `data2`) of objects with `x` and `y` properties. The `y` values simulate a random walk, creating data suitable for a line chart. It generates 1000 data points for each dataset.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/animations/progressive-line.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const data = [];
const data2 = [];
let prev = 100;
let prev2 = 80;
for (let i = 0; i < 1000; i++) {
  prev += 5 - Math.random() * 10;
  data.push({x: i, y: prev});
  prev2 += 5 - Math.random() * 10;
  data2.push({x: i, y: prev2});
}
```

----------------------------------------

TITLE: Generating Random Walk Data for Two Lines - JS
DESCRIPTION: Generates two arrays, "data" and "data2", each containing 1000 points with "x" (index) and "y" (random walk) values. This data is used to populate the two datasets in the line chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/animations/progressive-line-easing.md#_snippet_0

LANGUAGE: js
CODE:
```
const data = [];
const data2 = [];
let prev = 100;
let prev2 = 80;
for (let i = 0; i < 1000; i++) {
  prev += 5 - Math.random() * 10;
  data.push({x: i, y: prev});
  prev2 += 5 - Math.random() * 10;
  data2.push({x: i, y: prev2});
}
```

----------------------------------------

TITLE: Import Chart.js in CommonJS (JS)
DESCRIPTION: Provides the recommended way to import Chart.js, which is an ESM library, within a CommonJS module environment. It uses a dynamic `import()` statement to asynchronously load the library.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/integration.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const { Chart } = await import('chart.js');
```

----------------------------------------

TITLE: Load Chart.js via RequireJS (JS)
DESCRIPTION: Demonstrates how to load the UMD build of Chart.js using the RequireJS AMD loader. It shows the basic pattern of requiring the library path and using the loaded `Chart` object within the callback function.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/integration.md#_snippet_4

LANGUAGE: javascript
CODE:
```
require(['path/to/chartjs/dist/chart.umd.js'], function(Chart){
    const myChart = new Chart(ctx, {...});
});
```

----------------------------------------

TITLE: Using Patternomaly Library for Fill Patterns in Chart.js
DESCRIPTION: This example shows how to use the Patternomaly library to generate various pattern fills (square, circle, diamond, triangle) and assign them as background colors to different datasets within a Chart.js configuration object. This requires the Patternomaly library to be included.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/colors.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const chartData = {
  datasets: [{
    data: [45, 25, 20, 10],
    backgroundColor: [
      pattern.draw('square', '#ff6384'),
      pattern.draw('circle', '#36a2eb'),
      pattern.draw('diamond', '#cc65fe'),
      pattern.draw('triangle', '#ffce56')
    ]
  }],
  labels: ['Red', 'Blue', 'Purple', 'Yellow']
};
```

----------------------------------------

TITLE: Inaccessible Canvas (No ARIA/Fallback) (HTML)
DESCRIPTION: This snippet represents a basic canvas element without any added accessibility attributes or fallback content. Such a canvas is inaccessible to screen readers and other assistive technologies, as there is no information provided about its purpose or content.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/accessibility.md#_snippet_2

LANGUAGE: HTML
CODE:
```
<canvas id="badCanvas1" width="400" height="100"></canvas>
```

----------------------------------------

TITLE: Clearing Chart.js Canvas - JavaScript
DESCRIPTION: The .clear() method erases the content drawn on the chart's canvas. It's primarily used internally between animation frames but can be called manually.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/api.md#_snippet_8

LANGUAGE: javascript
CODE:
```
// Will clear the canvas that myLineChart is drawn on
myLineChart.clear();
// => returns 'this' for chainability
```

----------------------------------------

TITLE: Creating and Registering a New Dataset Controller in Chart.js
DESCRIPTION: Demonstrates how to create a new custom dataset controller by extending `Chart.DatasetController`, register it with Chart.js, and instantiate a chart using the new custom type.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/charts.md#_snippet_0

LANGUAGE: javascript
CODE:
```
class MyType extends Chart.DatasetController {

}

Chart.register(MyType);

// Now we can create a new instance of our chart, using the Chart.js API
new Chart(ctx, {
    // this is the string the constructor was registered at, ie Chart.controllers.MyType
    type: 'MyType',
    data: data,
    options: options
});
```

----------------------------------------

TITLE: Transferring Canvas Control to Web Worker (JavaScript)
DESCRIPTION: Demonstrates how to create an OffscreenCanvas from a standard canvas element and transfer its control to a new web worker. It then sends the OffscreenCanvas and chart configuration to the worker using postMessage, transferring the canvas control efficiently.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/general/performance.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const config = {};
const canvas = new HTMLCanvasElement();
const offscreenCanvas = canvas.transferControlToOffscreen();

const worker = new Worker('worker.js');
worker.postMessage({canvas: offscreenCanvas, config}, [offscreenCanvas]);
```

----------------------------------------

TITLE: Required Chart.js Custom Scale Interface - JavaScript
DESCRIPTION: Lists the essential methods that a custom scale type must implement to function correctly within Chart.js, such as determining data limits, building ticks, and mapping values to pixels.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/axes.md#_snippet_4

LANGUAGE: javascript
CODE:
```
{
    // Determines the data limits. Should set this.min and this.max to be the data max/min
    determineDataLimits: function() {},

    // Generate tick marks. this.chart is the chart instance. The data object can be accessed as this.chart.data
    // buildTicks() should create a ticks array on the axis instance, if you intend to use any of the implementations from the base class
    buildTicks: function() {},

    // Get the label to show for the given value
    getLabelForValue: function(value) {},

    // Get the pixel (x coordinate for horizontal axis, y coordinate for vertical axis) for a given value
    // @param index: index into the ticks array
    getPixelForTick: function(index) {},

    // Get the pixel (x coordinate for horizontal axis, y coordinate for vertical axis) for a given value
    // @param value : the value to get the pixel for
    // @param [index] : index into the data array of the value
    getPixelForValue: function(value, index) {},

    // Get the value for a given pixel (x coordinate for horizontal axis, y coordinate for vertical axis)
    // @param pixel : pixel value
    getValueForPixel: function(pixel) {}
}
```

----------------------------------------

TITLE: Setup Chart.js Data Generation Parameters (JavaScript)
DESCRIPTION: Defines input parameters and helper functions (`generateLabels`, `generateData`) used to create synthetic data for the chart datasets. It uses a utility library (`Utils`) for data generation.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/area/line-drawtime.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const inputs = {
  min: -100,
  max: 100,
  count: 8,
  decimals: 2,
  continuity: 1
};

const generateLabels = () => {
  return Utils.months({count: inputs.count});
};

Utils.srand(3);
const generateData = () => (Utils.numbers(inputs));
```

----------------------------------------

TITLE: Exporting Chart Configuration and Actions (JavaScript)
DESCRIPTION: Exports the defined `actions` array and `config` object using `module.exports`, making them available for use in other parts of the application or chart editor environment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/stacked-bar-line.md#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Exporting Chart Configuration (JavaScript)
DESCRIPTION: This snippet exports the `config` object using `module.exports`, making it available for import and use in other parts of a JavaScript application, typically in a Node.js or CommonJS environment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/plugins/chart-area-border.md#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  config: config,
};
```

----------------------------------------

TITLE: Exporting Chart.js Actions and Configuration (JavaScript)
DESCRIPTION: Exports the 'actions' array and the 'config' object, making them available for import and use in other parts of the application or charting environment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/polar-area.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Exporting Chart Configuration (JavaScript)
DESCRIPTION: Exports the defined actions and chart configuration objects for use in another module or context.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/stacked.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Export Chart Configuration and Actions (JavaScript)
DESCRIPTION: Exports the defined `actions` array and `config` object using `module.exports`, making them available for use in another module or script, typically within a Chart.js editor context.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/combo-bar-line.md#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Load Chart.js with Time Scale Adapter via RequireJS (JS)
DESCRIPTION: Explains how to properly load Chart.js along with a date adapter and its corresponding library (like Moment.js) when using RequireJS. Nested `require` calls ensure that dependencies are fully loaded in the correct order before initializing a chart that uses the time scale.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/integration.md#_snippet_5

LANGUAGE: javascript
CODE:
```
require(['chartjs'], function(Chart) {
    require(['moment'], function() {
        require(['chartjs-adapter-moment'], function() {
            new Chart(ctx, {...});
        });
    });
});
```

----------------------------------------

TITLE: Using Cube.js Data in Chart (JavaScript)
DESCRIPTION: This snippet shows how to integrate the data fetching function from the `api.js` file into a Chart.js setup. It imports the `getAquisitionsByYear` function and replaces the static data definition with an asynchronous call to fetch real-world data for the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import { getAquisitionsByYear } from './api'

// ...

const data = await getAquisitionsByYear();
```

----------------------------------------

TITLE: Export Chart Actions and Configuration - Chart.js JavaScript
DESCRIPTION: Exports the defined 'actions' array and 'config' object. This makes the chart's interactive actions and its main configuration available for use in an environment that imports this module, typically for rendering or integration.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/radar-skip-points.md#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions: actions,
  config: config
};
```

----------------------------------------

TITLE: Export Chart Configuration and Actions - Chart.js - JS
DESCRIPTION: Exports the defined `actions` array and `config` object using `module.exports`, making them available for use in environments that support CommonJS modules, such as the Chart.js editor.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/horizontal.md#_snippet_3

LANGUAGE: js
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Defining Chart Actions (Chart.js, JavaScript)
DESCRIPTION: Defines an array of actions for the chart, including a 'Randomize' button handler that updates dataset data with random numbers and triggers a chart update.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/multi-axis.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});\n      });\n      chart.update();\n    }\n  },\n];\n// </block:actions>
```

----------------------------------------

TITLE: Defining Chart.js Editor Actions (JavaScript)
DESCRIPTION: Defines an array of actions for the chart editor, including a 'Randomize' action that updates dataset data and the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/stacked.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
];
// </block:actions>
```

----------------------------------------

TITLE: Defining Chart.js Actions - JavaScript
DESCRIPTION: Defines an array of action objects used to interact with the chart. Each action has a name and a handler function that modifies the chart's data or structure and calls `chart.update()`. Requires a Chart.js instance and a `Utils` object for data generation.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/progress-bar.md#_snippet_0

LANGUAGE: js
CODE:
```
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
```

----------------------------------------

TITLE: Chart.js Title Alignment Actions (JS)
DESCRIPTION: Defines an array of actions for the chart editor, allowing users to change the chart title alignment to 'start', 'center', or 'end' and update the chart.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/title/alignment.md#_snippet_0

LANGUAGE: js
CODE:
```
// <block:actions:2>
const actions = [
  {
    name: 'Title Alignment: start',
    handler(chart) {
      chart.options.plugins.title.align = 'start';
      chart.update();
    }
  },
  {
    name: 'Title Alignment: center (default)',
    handler(chart) {
      chart.options.plugins.title.align = 'center';
      chart.update();
    }
  },
  {
    name: 'Title Alignment: end',
    handler(chart) {
      chart.options.plugins.title.align = 'end';
      chart.update();
    }
  },
];
// </block:actions>
```

----------------------------------------

TITLE: Chart.js Scale Base Class Utility Methods - JavaScript
DESCRIPTION: Lists utility functions provided by the `Chart.Scale` base class that custom scale implementations can use, such as checking orientation and getting tick objects.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/axes.md#_snippet_6

LANGUAGE: javascript
CODE:
```
{
    // Returns true if the scale instance is horizontal
    isHorizontal: function() {},

    // Returns the scale tick objects ({label, major})
    getTicks: function() {}
}
```

----------------------------------------

TITLE: Export Chart Configuration and Actions (JavaScript)
DESCRIPTION: This snippet exports the `actions` array and the `config` object using `module.exports`, making them available for use in other parts of the application or in a chart editor environment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/bar/vertical.md#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Export Chart.js Configuration and Actions (JS)
DESCRIPTION: Exports the defined `actions` array and `config` object, making them available for use in a module system.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/legend/title.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Exporting Configuration and Actions - JS
DESCRIPTION: Exports the "config" and "actions" objects using "module.exports", making them available for use in environments that support CommonJS modules, such as the Chart.js editor.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/animations/progressive-line-easing.md#_snippet_4

LANGUAGE: js
CODE:
```
module.exports = {
  config,
  actions
};
```

----------------------------------------

TITLE: Chart.js v2 Scale Configuration Example
DESCRIPTION: Example configuration for scales in Chart.js version 2, showing the use of `xAxes` and `yAxes` arrays with specific options for time and linear scales, including tick formatting and titles.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/migration/v3-migration.md#_snippet_1

LANGUAGE: javascript
CODE:
```
options: {
  scales: {
    xAxes: [{
      id: 'x',
      type: 'time',
      display: true,
      title: {
        display: true,
        text: 'Date'
      },
      ticks: {
        major: {
          enabled: true
        },
        font: function(context) {
          if (context.tick && context.tick.major) {
            return {
              weight: 'bold',
              color: '#FF0000'
            };
          }
        }
      }
    }],
    yAxes: [{
      id: 'y',
      display: true,
      title: {
        display: true,
        text: 'value'
      }
    }]
  }
}
```

----------------------------------------

TITLE: Adding TypeScript Typings for a Custom Chart Type
DESCRIPTION: Illustrates how to provide static TypeScript typings for a new custom chart type by using declaration merging to augment the `ChartTypeRegistry` interface in a `.d.ts` file.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/charts.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import { ChartTypeRegistry } from 'chart.js';

declare module 'chart.js' {
    interface ChartTypeRegistry {
        derivedBubble: ChartTypeRegistry['bubble']
    }
}
```

----------------------------------------

TITLE: Exporting Chart.js Configuration and Actions - JavaScript
DESCRIPTION: Exports the defined `actions` array and `config` object using CommonJS module syntax. This makes them available for use in an external environment, likely a chart editor or demo runner.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/advanced/progress-bar.md#_snippet_3

LANGUAGE: js
CODE:
```
module.exports = {
  actions: actions,
  config: config,
  output: 'console.log output is displayed here'
};
```

----------------------------------------

TITLE: Export Chart Configuration and Actions (Node.js, JavaScript)
DESCRIPTION: Exports the defined `actions` array and `config` object using Node.js module syntax, making them available for use in other parts of the application.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/line.md#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Required Dataset Controller Interface in Chart.js
DESCRIPTION: Outlines the essential properties and methods that a custom dataset controller must implement, including `defaults` for element types and `id` and the `update` method for handling data changes.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/charts.md#_snippet_1

LANGUAGE: javascript
CODE:
```
{
    // Defaults for charts of this type
    defaults: {
        // If set to `false` or `null`, no dataset level element is created.
        // If set to a string, this is the type of element to create for the dataset.
        // For example, a line create needs to create a line element so this is the string 'line'
        datasetElementType: string | null | false,

        // If set to `false` or `null`, no elements are created for each data value.
        // If set to a string, this is the type of element to create for each data value.
        // For example, a line create needs to create a point element so this is the string 'point'
        dataElementType: string | null | false,
    }

    // ID of the controller
    id: string;

    // Update the elements in response to new data
    // @param mode : update mode, core calls this method using any of `'active'`, `'hide'`, `'reset'`, `'resize'`, `'show'` or `undefined`
    update: function(mode) {}
}
```

----------------------------------------

TITLE: Export Chart Configuration - Chart.js JS
DESCRIPTION: Exports the chart configuration object (`config`) using the Node.js `module.exports` syntax, making it available for use in other modules or the chart editor environment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/legend/events.md#_snippet_4

LANGUAGE: js
CODE:
```
module.exports = {
  config
};
```

----------------------------------------

TITLE: Export Chart Actions and Configuration for Chart.js Bubble Chart (JavaScript)
DESCRIPTION: This final snippet uses `module.exports` to make the previously defined `actions` array and the chart `config` object available for import and use in other parts of the application or module system.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/bubble.md#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions,
  config,
};
```

----------------------------------------

TITLE: Exporting Chart Configuration and Actions (JavaScript)
DESCRIPTION: Exports the defined `actions` array and `config` object using `module.exports`, making them available for use in environments that support CommonJS modules, such as the Chart.js editor.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/other-charts/bubble.md#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Exporting Chart.js Configuration for Module Use (JavaScript)
DESCRIPTION: Exports the defined Chart.js configuration object and an empty actions array, making them available for use in a module system (like CommonJS).
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/content.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Exporting Chart Example Configuration - Chart.js JavaScript
DESCRIPTION: Exports the complete chart configuration object and an empty array of actions, making the chart setup available for use in an external environment or example runner.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/html.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Exporting Chart Configuration and Actions (JavaScript)
DESCRIPTION: Exports the `actions` array and the `config` object using Node.js `module.exports`. This makes these variables available for use in other modules or scripts. Requires the `actions` and `config` variables to be defined.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/radar.md#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions,
  config,
};
```

----------------------------------------

TITLE: Helper Functions for Chart.js Samples - JavaScript
DESCRIPTION: This snippet represents the utility functions used by the Chart.js sample pages to help generate charts. These functions are for demonstration purposes only, are not part of the core Chart.js library, and should not be relied upon in production environments as they may change without notice.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/utils.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
// Placeholder for content from @/scripts/utils.js
// Example utility function (actual content varies)
function generateRandomData(count) {
  const data = [];
  for (let i = 0; i < count; i++) {
    data.push(Math.random() * 100);
  }
  return data;
}

function createConfig(type, data, options) {
  return {
    type: type,
    data: data,
    options: options
  };
}

// Exported utilities (example)
export {
  generateRandomData,
  createConfig
};
```

----------------------------------------

TITLE: Export Chart.js Configuration for Editor (JS)
DESCRIPTION: Exports the chart configuration object (config) and an empty actions array, typically for use within a Chart.js editor or example runner environment. This makes the chart setup available externally.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/line/interpolation.md#_snippet_2

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions: [],
  config: config,
};
```

----------------------------------------

TITLE: Chart.js Development Commands (pnpm) - Bash
DESCRIPTION: These commands are available from the repository root after installing dependencies. They cover building distribution files, watching for changes, running tests, linting code, and running tests with coverage. Specific commands like pnpm run dev and pnpm test can accept arguments to filter tests.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/contributing.md#_snippet_1

LANGUAGE: bash
CODE:
```
pnpm run build             // build dist files in ./dist
pnpm run autobuild         // build and watch for source changes
pnpm run dev               // run tests and watch for source and test changes
pnpm run lint              // perform code linting (ESLint, tsc)
pnpm test                  // perform code linting and run unit tests with coverage
```

----------------------------------------

TITLE: Export Chart Configuration (JavaScript)
DESCRIPTION: Exports the defined `actions` and `config` objects, making them available for use in a module system.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/scriptable/bar.md#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions,
  config,
};
```

----------------------------------------

TITLE: Enabling Debug Mode in Image Tests (JSON)
DESCRIPTION: Set the 'debug' property to true within the image test configuration JSON file. This causes the test runner to display both the expected and actual images when a test runs, even if it passes, which is helpful for visual verification and debugging.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/contributing.md#_snippet_3

LANGUAGE: JSON
CODE:
```
"debug": true
```

----------------------------------------

TITLE: Setting up Cube.js API Client and Data Fetching (JavaScript)
DESCRIPTION: This snippet sets up the Cube.js API client using the `@cubejs-client/core` library, configuring it with an API URL and authentication token. It defines two asynchronous functions, `getAquisitionsByYear` and `getDimensions`, to fetch specific datasets from the API using declarative Cube.js queries.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import { CubejsApi } from '@cubejs-client/core';

const apiUrl = 'https://heavy-lansford.gcp-us-central1.cubecloudapp.dev/cubejs-api/v1';
const cubeToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjEwMDAwMDAwMDAsImV4cCI6NTAwMDAwMDAwMH0.OHZOpOBVKr-sCwn8sbZ5UFsqI3uCs6e4omT7P6WVMFw';

const cubeApi = new CubejsApi(cubeToken, { apiUrl });

export async function getAquisitionsByYear() {
  const acquisitionsByYearQuery = {
    dimensions: [
      'Artworks.yearAcquired',
    ],
    measures: [
      'Artworks.count'
    ],
    filters: [ {
      member: 'Artworks.yearAcquired',
      operator: 'set'
    } ],
    order: {
      'Artworks.yearAcquired': 'asc'
    }
  };

  const resultSet = await cubeApi.load(acquisitionsByYearQuery);

  return resultSet.tablePivot().map(row => ({
    year: parseInt(row['Artworks.yearAcquired']),
    count: parseInt(row['Artworks.count'])
  }));
}

export async function getDimensions() {
  const dimensionsQuery = {
    dimensions: [
      'Artworks.widthCm',
      'Artworks.heightCm'
    ],
    measures: [
      'Artworks.count'
    ],
    filters: [
      {
        member: 'Artworks.classification',
        operator: 'equals',
        values: [ 'Painting' ]
      },
      {
        member: 'Artworks.widthCm',
        operator: 'set'
      },
      {
        member: 'Artworks.widthCm',
        operator: 'lt',
        values: [ '500' ]
      },
      {
        member: 'Artworks.heightCm',
        operator: 'set'
      },
      {
        member: 'Artworks.heightCm',
        operator: 'lt',
        values: [ '500' ]
      }
    ]
  };

  const resultSet = await cubeApi.load(dimensionsQuery);

  return resultSet.tablePivot().map(row => ({
    width: parseInt(row['Artworks.widthCm']),
    height: parseInt(row['Artworks.heightCm']),
    count: parseInt(row['Artworks.count'])
  }));
}
```

----------------------------------------

TITLE: Export Chart Configuration and Actions
DESCRIPTION: Exports the defined 'actions' array and 'config' object, making them available for use by other modules or the Chart.js example runner.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/area/line-stacked.md#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions: actions,
  config: config
};
```

----------------------------------------

TITLE: Export Chart.js Configuration and Actions (JavaScript)
DESCRIPTION: This line exports the previously defined `actions` array and `config` object, making them available for external use, typically within a chart demonstration or editor environment.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/samples/tooltip/position.md#_snippet_4

LANGUAGE: javascript
CODE:
```
module.exports = {
  actions: actions,
  config: config,
};
```

----------------------------------------

TITLE: Initial Chart.js Bundle Size (Before Tree-shaking)
DESCRIPTION: Displays the output of the `yarn build` command showing the initial JavaScript bundle size before applying Chart.js tree-shaking optimizations.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_13

LANGUAGE: bash
CODE:
```
% yarn build
yarn run v1.22.17
$ parcel build src/index.html
✨ Built in 88ms

dist/index.html              381 B   164ms
dist/index.74a47636.js   265.48 KB   1.25s
dist/index.ba0c2e17.js       881 B    63ms
✨ Done in 0.51s.
```

----------------------------------------

TITLE: Running Chart.js Documentation Server (Vuepress, pnpm) - Bash
DESCRIPTION: This command starts a local development server for the Chart.js documentation, which is managed using Vuepress and located in the docs directory. It allows contributors to view and test documentation changes locally.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/developers/contributing.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm run docs:dev
```

----------------------------------------

TITLE: Optimized Chart.js Bundle Size (After Tree-shaking)
DESCRIPTION: Displays the output of the `yarn build` command showing the reduced JavaScript bundle size after applying Chart.js tree-shaking optimizations by registering only necessary components.
SOURCE: https://github.com/chartjs/chart.js/blob/master/docs/getting-started/usage.md#_snippet_17

LANGUAGE: bash
CODE:
```
% yarn build
yarn run v1.22.17
$ parcel build src/index.html
✨ Built in 88ms

dist/index.html              381 B   176ms
dist/index.5888047.js    208.66 KB   1.23s
dist/index.dcb2e865.js       932 B    58ms
✨ Done in 0.51s.
```