TITLE: Documenting Grafana Permissions in Markdown Table - Markdown
DESCRIPTION: This Markdown code snippet constructs a table listing various Grafana permissions alongside their hierarchical dependencies and descriptions. The table serves as a permissions reference, using Markdown pipe delimiters and embedded HTML lists to illustrate prerequisite roles or permissions. No software dependencies exist beyond Markdown rendering; inputs and outputs are static documentation, with no programmable functionality. The table format supports easy updates and visibility, but does not inherently enforce any access controls and is intended solely for documentation purposes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_26

LANGUAGE: markdown
CODE:
```
| `serviceaccounts:create`              | None                                                                                                                | Update Grafana service accounts.                                                                                                                                                                                          |
| `serviceaccounts:delete`              | <ul><li>`serviceaccounts:*`</li><li>`serviceaccounts:id:*`</li></ul>                                                | Delete Grafana service accounts.                                                                                                                                                                                          |
| `serviceaccounts:read`                | <ul><li>`serviceaccounts:*`</li><li>`serviceaccounts:id:*`</li></ul>                                                | Read Grafana service accounts.                                                                                                                                                                                            |
| `serviceaccounts.permissions:write`   | <ul><li>`serviceaccounts:*`</li><li>`serviceaccounts:id:*`</li></ul>                                                | Update Grafana service account permissions to control who can do what with the service account.                                                                                                                           |
| `serviceaccounts.permissions:read`    | <ul><li>`serviceaccounts:*`</li><li>`serviceaccounts:id:*`</li></ul>                                                | Read Grafana service account permissions to see who can do what with the service account.                                                                                                                                 |
| `settings:read`                       | <ul><li>`settings:*`</li><li>`settings:auth.saml:*`</li><li>`settings:auth.saml:enabled`</li></ul> (property level) | Read the [Grafana configuration settings](/docs/grafana/<GRAFANA_VERSION>/setup-grafana/configure-grafana/)                                                                                                               |
| `settings:write`                      | <ul><li>`settings:*`</li><li>`settings:auth.saml:*`</li><li>`settings:auth.saml:enabled`</li></ul> (property level) | Update any Grafana configuration settings that can be [updated at runtime](/docs/grafana/<GRAFANA_VERSION>/setup-grafana/configure-grafana/settings-updates-at-runtime/).                                                 |
| `support.bundles:create`              | None                                                                                                                | Create support bundles.                                                                                                                                                                                                   |
| `support.bundles:delete`              | None                                                                                                                | Delete support bundles.                                                                                                                                                                                                   |
| `support.bundles:read`                | None                                                                                                                | List and download support bundles.                                                                                                                                                                                        |
| `snapshots:create`                    | None                                                                                                                | Create snapshots.                                                                                                                                                                                                         |
| `snapshots:delete`                    | None                                                                                                                | Delete snapshots.                                                                                                                                                                                                         |
| `snapshots:read`                      | None                                                                                                                | List snapshots.                                                                                                                                                                                                           |
| `status:accesscontrol`                | <ul><li>`services:accesscontrol`</li><ul>                                                                           | Get access-control enabled status.                                                                                                                                                                                        |
| `teams.permissions:read`              | <ul><li>`teams:*`</li><li>`teams:id:*`</li></ul>                                                                    | Read members and Team Sync setup for teams.                                                                                                                                                                               |
| `teams.permissions:write`             | <ul><li>`teams:*`</li><li>`teams:id:*`</li></ul>                                                                    | Add, remove and update members and manage Team Sync setup for teams.                                                                                                                                                      |
| `teams.roles:add`                     | <ul><li>`permissions:type:delegate`</li><ul>                                                                        | Assign a role to a team.                                                                                                                                                                                                  |
| `teams.roles:read`                    | <ul><li>`teams:*`</li><li>`teams:id:*`</li></ul>                                                                    | List roles assigned directly to a team.                                                                                                                                                                                   |
| `teams.roles:remove`                  | <ul><li>`permissions:type:delegate`</li><ul>                                                                        | Unassign a role from a team.                                                                                                                                                                                              |
| `teams:create`                        | None                                                                                                                | Create teams.                                                                                                                                                                                                             |
| `teams:delete`                        | <ul><li>`teams:*`</li><li>`teams:id:*`</li></ul>                                                                    | Delete one or more teams.                                                                                                                                                                                                 |
| `teams:read`                          | <ul><li>`teams:*`</li><li>`teams:id:*`</li></ul>                                                                    | Read one or more teams and team preferences. To list teams through the UI one of the following permissions is required in addition to `teams:read`: `teams:write`, `teams.permissions:read` or `teams.permissions:write`. |
| `teams:write`                         | <ul><li>`teams:*`</li><li>`teams:id:*`</li></ul>                                                                    | Update one or more teams and team preferences.                                                                                                                                                                            |
| `users.authtoken:read`                | <ul><li>`global.users:*`</li><li>`global.users:id:*`</li></ul>                                                      | List authentication tokens that are assigned to a user.                                                                                                                                                                   |
| `users.authtoken:write`               | <ul><li>`global.users:*`</li><li>`global.users:id:*`</li></ul>                                                      | Update authentication tokens that are assigned to a user.                                                                                                                                                                 |
| `users.password:write`                | <ul><li>`global.users:*`</li><li>`global.users:id:*`</li></ul>                                                      | Update a user’s password.                                                                                                                                                                                                 |
```

----------------------------------------

TITLE: Example Grafana RBAC Role Structure
DESCRIPTION: This snippet illustrates the structure of a fixed Grafana RBAC role. It shows the role identifier (`fixed:datasources:reader`) and breaks down its associated permission into an `Action` (`datasources:read`) and a `Scope` (`datasources:*`), defining what operation is allowed on which resources.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/_index.md#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
- **Role:** `fixed:datasources:reader`
  - **Permission:**
    - **Action:** `datasources:read`
    - **Scope:** `datasources:*`
```

----------------------------------------

TITLE: Deleting Grafana Annotations (Plaintext)
DESCRIPTION: Defines the `annotations:delete` permission action required to delete annotations in Grafana. This action is associated with broader scopes like `annotations:*`, `annotations:type:*`, `dashboards:*`, `dashboards:uid:*`, `folders:*`, and `folders:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
`annotations:delete`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`annotations:*`</li><li>`annotations:type:*`</li><li>`dashboards:*`</li><li>`dashboards:uid:*`</li><li>`folders:*`</li><li>`folders:uid:*`</li></ul>
```

----------------------------------------

TITLE: Mapping Grafana Roles Based on Google Group Membership via JMESPath (INI)
DESCRIPTION: This INI configuration uses a JMESPath expression in `role_attribute_path` to assign the 'Editor' role to users belonging to the Google group 'example-group@google.com' and the 'Viewer' role to all others. This requires `skip_org_role_sync` to be `false` and the `https://www.googleapis.com/auth/cloud-identity.groups.readonly` scope to be added to Grafana's Google auth scopes to retrieve group information.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/google/index.md#2025-04-23_snippet_5

LANGUAGE: ini
CODE:
```
```ini
role_attribute_path = contains(groups[*], 'example-group@google.com') && 'Editor' || 'Viewer'
skip_org_role_sync = false
```
```

----------------------------------------

TITLE: Configuring Grafana Organization Role Mapping (INI)
DESCRIPTION: Grafana configuration snippet demonstrating organization role mapping. `org_attribute_path` specifies the payload field ('roles') containing organization identifiers. `org_mapping` defines rules: map 'org_foo' from payload to 'org_foo' org as 'Viewer', 'org_bar' to 'org_bar' org as 'Editor', and any other role ('*') to 'org_baz' org as 'Editor'. Also includes potential Grafana Admin mapping via `role_attribute_path` if 'admin' role is present and `allow_assign_grafana_admin` is true.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_9

LANGUAGE: ini
CODE:
```
role_attribute_path = contains(roles[*], 'admin') && 'GrafanaAdmin' || 'None'
allow_assign_grafana_admin = true
org_attribute_path = roles
org_mapping = org_foo:org_foo:Viewer org_bar:org_bar:Editor *:org_baz:Editor
```

----------------------------------------

TITLE: Provisioning Elasticsearch Data Source for Logs using YAML
DESCRIPTION: Shows an example of provisioning an Elasticsearch data source specifically configured for log data, potentially from Filebeat, using Grafana's YAML provisioning. It includes standard parameters like name, type, URL, index pattern, interval, and time field, but adds log-specific fields (`logMessageField`, `logLevelField`) and demonstrates configuring `dataLinks` to link log fields (like `traceID`) to other data sources (e.g., Jaeger). Note the use of `$$` in the `url` field to escape environment variable expansion.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/elasticsearch/_index.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: elasticsearch-v7-filebeat
    type: elasticsearch
    access: proxy
    url: http://localhost:9200
    jsonData:
      index: '[filebeat-]YYYY.MM.DD'
      interval: Daily
      timeField: '@timestamp'
      logMessageField: message
      logLevelField: fields.level
      dataLinks:
        - datasourceUid: my_jaeger_uid # Target UID needs to be known
          field: traceID
          url: '$${__value.raw}' # Careful about the double "$$" because of env var expansion
```

----------------------------------------

TITLE: Defining Option Formats for Select with React (JSX)
DESCRIPTION: Demonstrates how to define an array of options for the Select component with label, value, description, and imgUrl properties. No external dependencies beyond React are required. Input is an array of option objects; output is a properly formatted array for use with Select and related components. Options support string, number, and optional hint fields.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Select/Select.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
const options = [
  { label: 'Basic option', value: 0 },
  { label: 'Option with description', value: 1, description: 'this is a description' },
  {
    label: 'Option with description and image',
    value: 2,
    description: 'This is a very elaborate description, describing all the wonders in the world.',
    imgUrl: 'https://placekitten.com/40/40',
  },
];
```

----------------------------------------

TITLE: Creating a Grafana Dashboard Definition - JSON
DESCRIPTION: This JSON snippet provides a complete example of a Grafana dashboard definition. Save this as 'cluster.json' within the directory specified by the dashboard provider configuration. The dashboard defines panels (here, one 'CPU Usage' graph) and numerous metadata and settings. The dashboard is associated with the 'TestData' datasource, and includes panel, axis, and tooltip configuration. No 'id' is set, letting Grafana assign one. Dependencies: must match the schema used by your Grafana version, typically schemaVersion 16+. Input is automatic upon provisioning, and output is a new dashboard available in the chosen folder in the Grafana UI.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/provision-dashboards-and-data-sources/index.md#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{\n  "__inputs": [],\n  "__requires": [],\n  "annotations": {\n    "list": []\n  },\n  "editable": false,\n  "gnetId": null,\n  "graphTooltip": 0,\n  "hideControls": false,\n  "id": null,\n  "links": [],\n  "panels": [\n    {\n      "aliasColors": {},\n      "bars": false,\n      "dashLength": 10,\n      "dashes": false,\n      "datasource": "TestData",\n      "fill": 1,\n      "gridPos": {\n        "h": 8,\n        "w": 24,\n        "x": 0,\n        "y": 0\n      },\n      "id": 2,\n      "legend": {\n        "alignAsTable": false,\n        "avg": false,\n        "current": false,\n        "max": false,\n        "min": false,\n        "rightSide": false,\n        "show": true,\n        "total": false,\n        "values": false\n      },\n      "lines": true,\n      "linewidth": 1,\n      "links": [],\n      "nullPointMode": "null",\n      "percentage": false,\n      "pointradius": 5,\n      "points": false,\n      "renderer": "flot",\n      "repeat": null,\n      "seriesOverrides": [],\n      "spaceLength": 10,\n      "stack": false,\n      "steppedLine": false,\n      "targets": [],\n      "thresholds": [],\n      "timeFrom": null,\n      "timeShift": null,\n      "title": "CPU Usage",\n      "tooltip": {\n        "shared": true,\n        "sort": 0,\n        "value_type": "individual"\n      },\n      "type": "graph",\n      "xaxis": {\n        "buckets": null,\n        "mode": "time",\n        "name": null,\n        "show": true,\n        "values": []\n      },\n      "yaxes": [\n        {\n          "format": "short",\n          "label": null,\n          "logBase": 1,\n          "max": null,\n          "min": null,\n          "show": true\n        },\n        {\n          "format": "short",\n          "label": null,\n          "logBase": 1,\n          "max": null,\n          "min": null,\n          "show": true\n        }\n      ]\n    }\n  ],\n  "refresh": "",\n  "rows": [],\n  "schemaVersion": 16,\n  "tags": ["kubernetes"],\n  "templating": {\n    "list": []\n  },\n  "time": {\n    "from": "now-6h",\n    "to": "now"\n  },\n  "timepicker": {},\n  "timezone": "browser",\n  "title": "Cluster",\n  "version": 0\n}\n
```

----------------------------------------

TITLE: Reading Grafana Data Source Insights (Plaintext)
DESCRIPTION: Defines the `datasources.insights:read` permission action allowing users to read data source insights data. Viewing these insights also requires the `datasources:read` permission for the specific data source.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_20

LANGUAGE: plaintext
CODE:
```
`datasources.insights:read`
```

----------------------------------------

TITLE: Enabling LDAP in Grafana Configuration (INI)
DESCRIPTION: This snippet shows the necessary configuration block within Grafana's main configuration file (typically `grafana.ini`) to enable LDAP authentication. It sets `enabled` to `true`, specifies the path to the LDAP-specific configuration file (`ldap.toml`), and determines if new users can be automatically created upon successful LDAP login via `allow_sign_up`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
```ini
[auth.ldap]
# Set to `true` to enable LDAP integration (default: `false`)
enabled = true

# Path to the LDAP specific configuration file (default: `/etc/grafana/ldap.toml`)
config_file = /etc/grafana/ldap.toml

# Allow sign-up should be `true` (default) to allow Grafana to create users on successful LDAP authentication.
# If set to `false` only already existing Grafana users will be able to login.
allow_sign_up = true
```
```

----------------------------------------

TITLE: Generating Self-Signed Certificate and PKCS#8 Private Key using OpenSSL (Bash)
DESCRIPTION: Provides an OpenSSL command to generate a new self-signed X.509 certificate (`cert.pem`) and a corresponding private key in PKCS#8 format (`key.pem`), valid for 365 days, without password protection (`-nodes`). This format is required for Grafana SAML configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_20

LANGUAGE: bash
CODE:
```
openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
```

----------------------------------------

TITLE: Specifying Default Input Values Individually (JavaScript/JSX/TypeScript)
DESCRIPTION: Shows how to set default values directly on specific form inputs using the defaultValue prop, ensuring uncontrolled input fields have initial values. Useful for granular control over field resets, compatible with both plain JavaScript and TypeScript. Requires Form, Input, and react-hook-form’s register.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_8

LANGUAGE: jsx
CODE:
```
// Passing default value directly to form inputs

interface FormDTO {
  name: string;
  isAdmin: boolean;
}

const defaultValues: FormDto {
  name: 'Roger Waters',
  isAdmin: false,
}

<Form ...>{
  ({register}) => (
    <>
      <Input {...register("name")} defaultValue={default.name} />
    </>
  )}
</Form>
```

----------------------------------------

TITLE: Configuring Google OAuth in Grafana Configuration File
DESCRIPTION: Bash configuration example for enabling Google OAuth in Grafana's configuration file. It includes essential parameters like client credentials, authorization endpoints, scopes, and domain restrictions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/google/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
[auth.google]
enabled = true
allow_sign_up = true
auto_login = false
client_id = CLIENT_ID
client_secret = CLIENT_SECRET
scopes = openid email profile
auth_url = https://accounts.google.com/o/oauth2/v2/auth
token_url = https://oauth2.googleapis.com/token
api_url = https://openidconnect.googleapis.com/v1/userinfo
allowed_domains = mycompany.com mycompany.org
hosted_domain = mycompany.com
use_pkce = true
```

----------------------------------------

TITLE: Defining Basic Grafana Service in Docker Compose (YAML)
DESCRIPTION: A basic `docker-compose.yaml` configuration defining a Grafana service using the `grafana/grafana-enterprise` image. It names the container 'grafana', ensures it restarts unless stopped, and maps the host's port 3000 to the container's port 3000. This setup uses ephemeral storage within the container.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_12

LANGUAGE: yaml
CODE:
```
services:
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    ports:
     - '3000:3000'
```

----------------------------------------

TITLE: Setting Azure AD OAuth Parameters via Grafana Environment Variables (Plaintext)
DESCRIPTION: This list documents environment variables that can be used to supply sensitive Azure AD OAuth parameters for Grafana, providing an alternative to setting values directly in the configuration file. These variables must be set in the environment of the Grafana process. This approach is preferable for managing secrets securely in containerized or automated deployments.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_4

LANGUAGE: plaintext
CODE:
```
GF_AUTH_AZUREAD_CLIENT_AUTHENTICATION
GF_AUTH_AZUREAD_CLIENT_ID
GF_AUTH_AZUREAD_CLIENT_SECRET
GF_AUTH_AZUREAD_MANAGED_IDENTITY_CLIENT_ID
GF_AUTH_AZUREAD_FEDERATED_CREDENTIAL_AUDIENCE
```

----------------------------------------

TITLE: Creating API Key Obsolete Response Example using HTTP/JSON
DESCRIPTION: Example HTTP 410 Gone response indicating that the `POST /api/auth/keys` endpoint for creating API keys is obsolete as of Grafana 11.3.0. The response body contains a JSON message advising the use of the Service Account API endpoints (`POST /api/serviceaccounts` and `POST /api/serviceaccounts/{id}/tokens`) instead.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/auth.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
HTTP/1.1 410
Content-Type: application/json

{"message":"this endpoint has been removed, please use POST /api/serviceaccounts and POST /api/serviceaccounts/{id}/tokens instead"}
```

----------------------------------------

TITLE: Defining Grafana Deployment Manifest in YAML
DESCRIPTION: Defines the Kubernetes resources required for deploying Grafana OSS within the `grafana.yaml` file. It includes a PersistentVolumeClaim (PVC) named `grafana-pvc` requesting 1Gi of storage, a Deployment named `grafana` managing pods running the `grafana/grafana:latest` image, and a LoadBalancer Service named `grafana` exposing port 3000. The Deployment specifies resource requests (250m CPU, 750Mi memory), volume mounts for persistent data, readiness and liveness probes for health checking, and security context settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_3

LANGUAGE: yaml
CODE:
```
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
        - name: grafana
          image: grafana/grafana:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 250m
              memory: 750Mi
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-pv
      volumes:
        - name: grafana-pv
          persistentVolumeClaim:
            claimName: grafana-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  ports:
    - port: 3000
      protocol: TCP
      targetPort: http-grafana
  selector:
    app: grafana
  sessionAffinity: None
  type: LoadBalancer
```

----------------------------------------

TITLE: Enforcing Secure Cookies (HTTPS) in Grafana INI
DESCRIPTION: Illustrates the `cookie_secure` setting within the `[security]` section of the Grafana configuration file. Setting this to `true` ensures that Grafana session cookies are only transmitted over HTTPS connections, enhancing security. This setting is often required when `cookie_samesite` is set to `none`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_25

LANGUAGE: ini
CODE:
```
[security]
cookie_secure = true
```

----------------------------------------

TITLE: Implementing a Basic Modal in React/TSX
DESCRIPTION: Demonstrates how to use the `Modal` component in a React/TSX application using JSX syntax. It shows setting the `title` and `isOpen` props, adding content (a `div` element) within the modal body, and utilizing the nested `Modal.ButtonRow` component to include right-aligned action buttons like 'Cancel' (styled with secondary variant and outline fill) and 'Save'. This requires the `Modal` and `Button` components to be imported.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Modal/Modal.mdx#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<Modal title="title" isOpen={true}>
  <div>Some body</div>
  <Modal.ButtonRow>
    <Button variant="secondary" fill="outline">
      Cancel
    </Button>
    <Button>Save</Button>
  </Modal.ButtonRow>
</Modal>
```

----------------------------------------

TITLE: Running Grafana Container with Docker CLI - Bash
DESCRIPTION: Runs the latest stable Grafana Enterprise Docker image, exposing port 3000 from the container to the host and assigning a container name. This command requires Docker to be installed and available on your system. The output is a running container accessible on the host at port 3000; make sure the port is available.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
docker run -d -p 3000:3000 --name=grafana grafana/grafana-enterprise
```

----------------------------------------

TITLE: Example SAML Configuration in grafana.ini
DESCRIPTION: This INI snippet shows an example configuration within the `[auth.saml]` section of the Grafana configuration file (`grafana.ini` or `custom.ini`). It enables SAML, sets paths for the SP certificate and private key, specifies the IdP metadata URL (using Okta as an example), and maps SAML assertion attributes (DisplayName, Login, Email, Group) to Grafana user properties. The `name` parameter customizes the login button text, and `auto_login` is disabled. The `[server]` section with `root_url` is included for context, as it's often relevant for SAML configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
```ini
[server]
root_url = https://grafana.example.com

[auth.saml]
enabled = true
name = My IdP
auto_login = false
private_key_path = "/path/to/private_key.pem"
certificate_path = "/path/to/certificate.cert"
idp_metadata_url = "https://my-org.okta.com/app/my-application/sso/saml/metadata"
assertion_attribute_name = DisplayName
assertion_attribute_login = Login
assertion_attribute_email = Email
assertion_attribute_groups = Group
```
```

----------------------------------------

TITLE: Creating Restricted PostgreSQL User for Grafana
DESCRIPTION: SQL commands to create a dedicated PostgreSQL user with restricted SELECT permissions for secure Grafana access. Creates a user 'grafanareader' and grants specific schema and table access.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/configure/_index.md#2025-04-23_snippet_0

LANGUAGE: sql
CODE:
```
CREATE USER grafanareader WITH PASSWORD 'password';
GRANT USAGE ON SCHEMA schema TO grafanareader;
GRANT SELECT ON schema.table TO grafanareader;
```

----------------------------------------

TITLE: Filtering Data by Values in Grafana
DESCRIPTION: This example illustrates how to use the 'Filter data by values' transformation in Grafana. It shows how to filter a dataset based on temperature and altitude conditions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_13

LANGUAGE: markdown
CODE:
```
#### Dataset Example

| Time                | Temperature | Altitude |
| ------------------- | ----------- | -------- |
| 2020-07-07 11:34:23 | 32          | 101      |
| 2020-07-07 11:34:22 | 28          | 125      |
| 2020-07-07 11:34:21 | 26          | 110      |
| 2020-07-07 11:34:20 | 23          | 98       |
| 2020-07-07 10:32:24 | 31          | 95       |
| 2020-07-07 10:31:22 | 20          | 85       |
| 2020-07-07 09:30:57 | 19          | 101      |

#### Transformed Data

| Time                | Temperature | Altitude |
| ------------------- | ----------- | -------- |
| 2020-07-07 11:34:22 | 28          | 125      |
| 2020-07-07 11:34:21 | 26          | 110      |
| 2020-07-07 11:34:20 | 23          | 98       |
| 2020-07-07 10:31:22 | 20          | 85       |
| 2020-07-07 09:30:57 | 19          | 101      |
```

----------------------------------------

TITLE: Configuring OAuth2 Authentication with Auth0 in Grafana (Bash Configuration)
DESCRIPTION: This configuration snippet enables Generic OAuth authentication in Grafana using Auth0 as the provider. Required dependencies are an Auth0 application set to type 'Regular Web Application,' client ID, client secret, and valid redirect URIs matching the Grafana domain. Key parameters define the OAuth2 client credentials, Auth0 endpoints for authorization and token exchange, PKCE usage, and enablement of refresh tokens. Inputs are inserted as plain text in Grafana's configuration file, with sensitive values such as client_id and client_secret provided by Auth0. Outputs are user authentication and integration as enabled by Grafana's OAuth flow.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
[auth.generic_oauth]
enabled = true
allow_sign_up = true
auto_login = false
team_ids =
allowed_organizations =
name = Auth0
client_id = <client id>
client_secret = <client secret>
scopes = openid profile email offline_access
auth_url = https://<domain>/authorize
token_url = https://<domain>/oauth/token
api_url = https://<domain>/userinfo
use_pkce = true
use_refresh_token = true

```

----------------------------------------

TITLE: Grafana Label Matchers for Excluding Labels
DESCRIPTION: Demonstrates different ways to write Grafana label matchers to effectively exclude a label (e.g., `team`) or match when its value is empty. These examples show matching an exactly empty string (`=""`), ensuring the value does not contain one or more characters (`!~ .+`), or using a regex to match an empty string (`=~ ^$`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/how_label_matching_works.md#2025-04-23_snippet_3

LANGUAGE: plaintext
CODE:
```
team = ""
```

LANGUAGE: plaintext
CODE:
```
team !~ .+
```

LANGUAGE: plaintext
CODE:
```
team =~ ^$
```

----------------------------------------

TITLE: Filtering Loki Logs with 'or' Syntax in LogQL
DESCRIPTION: This LogQL query demonstrates the enhanced line filter syntax in Grafana's Loki data source. It shows how to use the 'or' operator to chain multiple string matching conditions using existing filter operators (`|=`, `!=`), allowing users to search for log lines containing 'foo' or 'bar', or not containing 'baz' or 'qux', within the logs where the 'app' label is 'foo'. This feature simplifies querying for multiple substrings compared to using regular expressions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-3.md#2025-04-23_snippet_0

LANGUAGE: logql
CODE:
```
{app="foo"} |= "foo" or "bar" != "baz" or "qux"
```

----------------------------------------

TITLE: Creating Restricted MySQL User for Grafana
DESCRIPTION: SQL commands to create a dedicated MySQL user with only SELECT permissions for Grafana to use. This follows security best practices by limiting database access permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/configuration/_index.md#2025-04-23_snippet_0

LANGUAGE: sql
CODE:
```
CREATE USER 'grafanaReader' IDENTIFIED BY 'password';
GRANT SELECT ON mydatabase.mytable TO 'grafanaReader';
```

----------------------------------------

TITLE: Server Response for Dashboard Retrieval in HTTP/JSON
DESCRIPTION: Example of a successful response from the server after retrieving a dashboard by UID. The response contains the complete dashboard object with its properties and metadata, including starring status, folder information, and URL.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "dashboard": {
    "id": 1,
    "uid": "cIBgcSjkk",
    "title": "Production Overview",
    "tags": [ "templated" ],
    "timezone": "browser",
    "schemaVersion": 16,
    "version": 0
  },
  "meta": {
    "isStarred": false,
    "url": "/d/cIBgcSjkk/production-overview",
    "folderId": 2,
    "folderUid": "l3KqBxCMz",
    "slug": "production-overview" //deprecated in Grafana v5.0
  }
}
```

----------------------------------------

TITLE: Creating Base API Configuration with Redux Toolkit
DESCRIPTION: Base API configuration file that sets up the Redux Toolkit Query instance with baseQuery and endpoint configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/api/README.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
import { createApi } from '@reduxjs/toolkit/query/react';

import { createBaseQuery } from 'app/api/createBaseQuery';
import { getAPIBaseURL } from 'app/api/utils';

export const BASE_URL = getAPIBaseURL('dashboard.grafana.app', 'v0alpha1');

export const api = createApi({
  reducerPath: 'dashboardAPI',
  baseQuery: createBaseQuery({
    baseURL: BASE_URL,
  }),
  endpoints: () => ({}),
});
```

----------------------------------------

TITLE: Removing Unsupported ref Props in Custom Inputs with InputControl (JavaScript/JSX)
DESCRIPTION: Shows how to manually exclude the ref property from react-hook-form's field when spreading onto custom input components that do not support ref. Utilizes object destructuring and ensures compatibility for React inputs lacking ref support, in the InputControl render pattern.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_6

LANGUAGE: jsx
CODE:
```
<Field label="SelectExample">
  <InputControl
     {/*Remove `ref` prop, so it doesn't get passed down to the component that doesn't support it. */}
    render={(field: {onChange, ref, ...field}) => <Select {...field} onChange={(value) => onChange(value.value)}/>}
    control={control}
    name="select"
  />
</Field>
```

----------------------------------------

TITLE: Multi-value Time Series with Multiple Dimensions in Azure Monitor Logs
DESCRIPTION: This query demonstrates how to select multiple numeric values (count and average) with multiple dimensions. It groups performance data by time interval, Computer, CounterName, and InstanceName, using the $__interval macro to adapt to dashboard time range.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/query-editor/index.md#2025-04-23_snippet_2

LANGUAGE: kusto
CODE:
```
Perf
| where $__timeFilter(TimeGenerated)
| summarize Samples=count(), ["Avg Value"]=avg(CounterValue)
    by bin(TimeGenerated, $__interval), Computer, CounterName, InstanceName
| order by TimeGenerated asc
```

----------------------------------------

TITLE: Recommended Usage of $__rate_interval in PromQL
DESCRIPTION: Recommended approach using $__rate_interval with the rate function to calculate the rate of change for HTTP requests. This avoids problems specific to Prometheus by ensuring the interval is at least four times the scrape interval.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/template-variables/index.md#2025-04-23_snippet_4

LANGUAGE: PromQL
CODE:
```
rate(http_requests_total[$__rate_interval])
```

----------------------------------------

TITLE: Enabling JWT Authentication in Grafana
DESCRIPTION: Basic configuration to enable JWT authentication in Grafana by setting the enabled flag to true and specifying the header name containing the JWT token.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[auth.jwt]
# By default, auth.jwt is disabled.
enabled = true

# HTTP header to look into to get a JWT token.
header_name = X-JWT-Assertion
```

----------------------------------------

TITLE: Configuring Okta SSO Settings using Terraform
DESCRIPTION: This Terraform snippet defines a `grafana_sso_settings` resource to configure Okta OIDC authentication for Grafana. It specifies the necessary OAuth2 settings, including authorization, token, and API URLs, client credentials, scopes, role mapping using JMESPath in `role_attribute_path`, and allowed Okta groups. This configuration method requires the `ssoSettingsAPI` feature toggle to be enabled in Grafana and is supported by the Grafana Terraform provider version 2.12.0 and later.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/okta/index.md#2025-04-23_snippet_0

LANGUAGE: terraform
CODE:
```
resource "grafana_sso_settings" "okta_sso_settings" {
  provider_name = "okta"
  oauth2_settings {
    name                  = "Okta"
    auth_url              = "https://<okta tenant id>.okta.com/oauth2/v1/authorize"
    token_url             = "https://<okta tenant id>.okta.com/oauth2/v1/token"
    api_url               = "https://<okta tenant id>.okta.com/oauth2/v1/userinfo"
    client_id             = "CLIENT_ID"
    client_secret         = "CLIENT_SECRET"
    allow_sign_up         = true
    auto_login            = false
    scopes                = "openid profile email offline_access"
    role_attribute_path   = "contains(groups[*], 'Example::DevOps') && 'Admin' || 'None'"
    role_attribute_strict = true
    allowed_groups        = "Example::DevOps,Example::Dev,Example::QA"
  }
}
```

----------------------------------------

TITLE: Example HTTP Request to Move a Grafana Folder
DESCRIPTION: This snippet shows an example HTTP POST request to the `/api/folders/:uid/move` endpoint to relocate a specific folder identified by its UID. It includes standard `Accept`, `Content-Type`, and `Authorization` headers. The JSON body contains the `parentUid` field, specifying the unique identifier of the target parent folder. A valid bearer token is required for authorization.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_11

LANGUAGE: http
CODE:
```
POST /api/folders/a5393ec3-5568-4e88-8809-b866968ae8a6/move HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "parentUid": "d80b18c0-266a-4aa4-ad5d-5537a00cb8e8"
}
```

----------------------------------------

TITLE: Configuring Secure Attribute for Grafana Cookies in TOML
DESCRIPTION: Sets the `cookie_secure` flag in the `[security]` section of `grafana.ini` to `true`. This adds the `Secure` attribute to authentication cookies, ensuring they are only sent over HTTPS connections, mitigating certain Man-in-the-Middle attacks. This configuration requires Grafana to be hosted behind HTTPS.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-security-hardening/index.md#2025-04-23_snippet_0

LANGUAGE: toml
CODE:
```
[security]
# Set to true if you host Grafana behind HTTPS. The default value is false.
cookie_secure = true
```

----------------------------------------

TITLE: Configuring Azure Authentication for Prometheus in Grafana's .ini File
DESCRIPTION: This snippet shows the configuration required in Grafana's .ini file to enable Azure Active Directory authentication for the Prometheus data source. This setting should be added to the auth section of the configuration file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/_index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
[auth]
azure_auth_enabled = true
```

----------------------------------------

TITLE: Enabling and Configuring Azure AD OAuth via Grafana Configuration File (INI)
DESCRIPTION: This INI configuration enables Azure AD authentication in Grafana by setting relevant OAuth parameters (client ID, secret, endpoints, organizational/group/domain access for users, and PKCE). It requires Grafana v10.1.0 or newer for full refresh token support. The settings must be placed under [auth.azuread] in the main configuration file, and changes may require a Grafana restart. Security-sensitive parameters can also be supplied as environment variables as described.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
[auth.azuread]
name = Azure AD
enabled = true
allow_sign_up = true
auto_login = false
client_authentication = CLIENT_AUTHENTICATION_OPTION
client_id = APPLICATION_ID
client_secret = CLIENT_SECRET
managed_identity_client_id = MANAGED_IDENTITY_CLIENT_ID
federated_credential_audience = FEDERATED_CREDENTIAL_AUDIENCE
scopes = openid email profile
auth_url = https://login.microsoftonline.com/TENANT_ID/oauth2/v2.0/authorize
token_url = https://login.microsoftonline.com/TENANT_ID/oauth2/v2.0/token
allowed_domains =
allowed_groups =
allowed_organizations = TENANT_ID
role_attribute_strict = false
allow_assign_grafana_admin = false
skip_org_role_sync = false
use_pkce = true
```

----------------------------------------

TITLE: Configuring Basic Authentication Session Settings in Grafana (Bash)
DESCRIPTION: Example configuration block for the `[auth]` section in Grafana's configuration file. It demonstrates how to set the login cookie name (`login_cookie_name`) and the maximum duration (`login_maximum_inactive_lifetime_duration`) an authenticated user can be inactive before being required to log in again. The inactivity timer resets upon successful token rotation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/_index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
[auth]

# Login cookie name
login_cookie_name = grafana_session

# The maximum lifetime (duration) an authenticated user can be inactive before being required to login at next visit. Default is 7 days (7d). This setting should be expressed as a duration, e.g. 5m (minutes), 6h (hours), 10d (days), 2w (weeks), 1M (month). The lifetime resets at each successful token rotation (token_rotation_interval_minutes).
login_maximum_inactive_lifetime_duration =
```

----------------------------------------

TITLE: Configuring Anonymous Authentication in Grafana
DESCRIPTION: Complete configuration example for enabling anonymous access in Grafana, including organization settings, role assignment, version display options, and device limitations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/anonymous-auth/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
[auth.anonymous]
enabled = true

# Organization name that should be used for unauthenticated users
org_name = Main Org.

# Role for unauthenticated users, other valid values are `Editor` and `Admin`
org_role = Viewer

# Hide the Grafana version text from the footer and help tooltip for unauthenticated users (default: false)
hide_version = true

# Setting this limits the number of anonymous devices in your instance. Any new anonymous devices added after the limit has been reached will be denied access.
device_limit =
```

----------------------------------------

TITLE: Creating a New Dashboard via POST Request in HTTP/JSON
DESCRIPTION: Example of creating a new dashboard using the Dashboard API. This request sends a POST to /api/dashboards/db with a JSON payload containing dashboard properties, folder information, and other metadata. The dashboard will be created with the specified title, tags, and refresh interval.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
POST /api/dashboards/db HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "dashboard": {
    "id": null,
    "uid": null,
    "title": "Production Overview",
    "tags": [ "templated" ],
    "timezone": "browser",
    "schemaVersion": 16,
    "refresh": "25s"
  },
  "folderUid": "l3KqBxCMz",
  "message": "Made changes to xyz",
  "overwrite": false
}
```

----------------------------------------

TITLE: Reloading and Managing Prometheus Service with systemctl (Linux/MacOS, Bash)
DESCRIPTION: This code block demonstrates a sequence of systemctl commands for reloading unit files, enabling, starting, and checking the status of the Prometheus service. Prerequisites: systemd-based system, Prometheus must be installed and configured. Each command performs a specific function: reloads all systemd units, ensures Prometheus starts on boot, immediately starts the service, and displays its status. Outputs service state information to the terminal.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_19

LANGUAGE: bash
CODE:
```
sudo systemctl daemon-reload
sudo systemctl enable prometheus
sudo systemctl start prometheus
sudo systemctl status prometheus
```

----------------------------------------

TITLE: Configuring WeCom Contact Point - YAML
DESCRIPTION: Defines configuration for sending Grafana alerts to WeCom (WeChat Work) via webhook. Requires the recipient webhook URL and supports templated message and title formatting. Outputs messages sent to the defined WeCom channel. No extra dependencies required beyond valid WeCom webhook URL.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_22

LANGUAGE: yaml
CODE:
```
type: wecom\nsettings:\n  # <string, required>\n  url: https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=xxxxxxxx\n  # <string>\n  message: |\n    {{ template \"default.message\" . }}\n  # <string>\n  title: |\n    {{ template \"default.title\" . }}\n
```

----------------------------------------

TITLE: Implementing Switch with AutoSaveField in React
DESCRIPTION: Example of using AutoSaveField with a Switch component for automatic toggle value saving.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/AutoSaveField/AutoSaveField.mdx#2025-04-23_snippet_3

LANGUAGE: jsx
CODE:
```
<AutoSaveField
  onFinishChange={customRequest}
  //Complete field args if needed
>
  {(onChange) => (
    <Switch
      value={switchTest}
      onChange={(e) => {
        onChange(e.currentTarget.value);
        //Complete code if needed
      }}
    />
  )}
</AutoSaveField>
```

----------------------------------------

TITLE: Customizing Disabled Time Units in DateTimePicker (React/TypeScript)
DESCRIPTION: Illustrates use of DateTimePicker with disabled hours, minutes, and seconds in a React (TypeScript) context. The snippet manages DateTime state and provides functions disabling specific time units, restricting selection to disallow certain hours ([0,1,2]), minutes ([10,15,30]), and seconds ([5,10,15,20]). Depends on @grafana/data and @grafana/ui. Key parameters: label, date, onChange, disabledHours, disabledMinutes, and disabledSeconds. Constraints: only the times not in the provided arrays are selectable. Inputs: label string, DateTime value, callback functions. Outputs: restricted DateTimePicker component. Requires component support for these props.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/DateTimePickers/DateTimePicker/DateTimePicker.mdx#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
import { useState } from 'react';\nimport { DateTime, dateTime } from '@grafana/data';\nimport { DateTimePicker } from '@grafana/ui';\n\nconst [date, setDate] = useState<DateTime>(dateTime('2021-05-05 12:00:00'));\nreturn (\n  <DateTimePicker\n    label=\"Date\"\n    date={date}\n    onChange={setDate}\n    disabledHours={() => [0, 1, 2]}\n    disabledMinutes={() => [10, 15, 30]}\n    disabledSeconds={() => [5, 10, 15, 20]}\n  />\n);
```

----------------------------------------

TITLE: Querying Prometheus Request Rate for Grafana Alert Rule
DESCRIPTION: This PromQL query calculates the total 5-minute rate of requests (`tns_request_duration_seconds_count`) aggregated by the `route` dimension. It's used within a Grafana alert rule (Section 2, query A) to monitor application request rates from a Prometheus data source.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_9

LANGUAGE: promql
CODE:
```
sum(rate(tns_request_duration_seconds_count[5m])) by(route)
```

----------------------------------------

TITLE: Retrieving All Grafana Data Sources via HTTP API
DESCRIPTION: Describes the `GET /api/datasources` endpoint used to fetch a list of all configured data sources. This endpoint requires `datasources:read` permission with the scope `datasources:*`. Note that this API currently lacks pagination and returns a maximum of 5000 data sources by default, configurable in `default.ini`. The request requires standard `Accept` and `Authorization` headers, and the response is a JSON array of data source objects.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/datasources HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

[
   {
     "id": 1,
     "orgId": 1,
     "uid": "H8joYFVGz"
     "name": "datasource_elastic",
     "type": "elasticsearch",
     "typeLogoUrl": "public/app/plugins/datasource/elasticsearch/img/elasticsearch.svg",
     "access": "proxy",
     "url": "http://mydatasource.com",
     "password": "",
     "user": "",
     "database": "grafana-dash",
     "basicAuth": false,
     "isDefault": false,
     "jsonData": {
         "logLevelField": "",
         "logMessageField": "",
         "maxConcurrentShardRequests": 256,
         "timeField": "@timestamp"
     },
     "readOnly": false
   }
]
```

----------------------------------------

TITLE: Managing Grafana Team Resources with Terraform (HCL)
DESCRIPTION: This HCL code snippet demonstrates using Terraform and the Grafana provider to manage various Grafana resources related to teams. It defines resources for a Grafana folder, a team ('Awesome Team'), maps the team to an external group ('Awesome_group'), creates a custom role ('team_role') with specific permissions (create datasources, create service accounts), assigns this role to the team, creates a service account, grants the team admin permissions over the service account, and finally, assigns admin permissions for both the team and the service account to the created folder. This example, provided within comments, illustrates an Infrastructure as Code approach to Grafana team management.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/team-management/configure-grafana-teams.md#2025-04-23_snippet_2

LANGUAGE: hcl
CODE:
```
```hcl
terraform {
  required_providers {
    grafana = {
      source = "grafana/grafana"
    }
  }
}

provider "grafana" {
  url  = "http://localhost:3000/"
  auth = "admin:admin"
}

resource "grafana_folder" "awesome_folder" {
  title = "Awesome Team Folder"
}


resource "grafana_team" "awesome-team" {
  name  = "Awesome Team"
}

resource "grafana_team_external_group" "awesome-team-group" {
  team_id = grafana_team.awesome-team.id
  groups = [
    "Awesome_group"
  ]
}

resource "grafana_role" "team_role" {
  name  = "team_role"
  uid = "team_role"
  version = 4
  global = true

  permissions {
    action = "datasources:create"
  }

  permissions {
    action = "serviceaccounts:create"
  }

  # below should be deleted after bug fix to view service accounts
  permissions {
    action = "users.roles:read"
    scope = "users:id:*"
  }

}

resource "grafana_role_assignment" "assign_role" {
  role_uid         = grafana_role.team_role.uid
  teams            = [grafana_team.awesome-team.id]
}

resource "grafana_service_account" "awesome_service_account" {
  name        = "awesome_service_account"
  role        = "None"
  is_disabled = false
}

resource "grafana_service_account_permission" "awesome_service_account_permissions" {
  service_account_id = grafana_service_account.awesome_service_account.id

  permissions {
    team_id    = grafana_team.awesome-team.id
    permission = "Admin"
  }
}

resource "grafana_folder_permission" "awesome_folder_permission" {
  folder_uid = grafana_folder.awesome_folder.uid
  permissions {
    team_id    = grafana_team.awesome-team.id
    permission = "Admin"
  }

  permissions {
    user_id = grafana_service_account.awesome_service_account.id
    permission = "Admin"
  }
}
```
```

----------------------------------------

TITLE: Creating Alert Rules with YAML Provisioning in Grafana
DESCRIPTION: Defines alert rule groups and associated rules for Grafana provisioning in YAML format. Dependencies include Grafana with provisioning support and access to the 'provisioning/alerting' directory. The configuration includes organization ID, rule group name, folder, evaluation interval, list of rules with detailed settings, linked dashboards/panels, and optional annotations/labels. Inputs follow YAML structure with fields per Grafana documentation, and the output is the creation or update of alert rules upon Grafana startup or reload. Changes require modifying the provisioning file and reloading Grafana; resources become immutable from within the UI when managed this way.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
# config file version\napiVersion: 1\n\n# List of rule groups to import or update\ngroups:\n  # <int> organization ID, default = 1\n  - orgId: 1\n    # <string, required> name of the rule group\n    name: my_rule_group\n    # <string, required> name of the folder the rule group will be stored in\n    folder: my_first_folder\n    # <duration, required> interval that the rule group should evaluated at\n    interval: 60s\n    # <list, required> list of rules that are part of the rule group\n    rules:\n      # <string, required> unique identifier for the rule. Should not exceed 40 symbols. Only letters, numbers, - (hyphen), and _ (underscore) allowed.\n      - uid: my_id_1\n        # <string, required> title of the rule that will be displayed in the UI\n        title: my_first_rule\n        # <string, required> which query should be used for the condition\n        condition: A\n        # <list, required> list of query objects that should be executed on each\n        #                  evaluation - should be obtained through the API\n        data:\n          - refId: A\n            datasourceUid: '__expr__'\n            model:\n              conditions:\n                - evaluator:\n                    params:\n                      - 3\n                    type: gt\n                  operator:\n                    type: and\n                  query:\n                    params:\n                      - A\n                  reducer:\n                    type: last\n                  type: query\n              datasource:\n                type: __expr__\n                uid: '__expr__'\n              expression: 1==0\n              intervalMs: 1000\n              maxDataPoints: 43200\n              refId: A\n              type: math\n        # <string> UID of a dashboard that the alert rule should be linked to\n        dashboardUid: my_dashboard\n        # <int> ID of the panel that the alert rule should be linked to\n        panelId: 123\n        # <string> the state the alert rule will have when no data is returned\n        #          possible values: "NoData", "Alerting", "OK", default = NoData\n        noDataState: Alerting\n        # <string> the state the alert rule will have when the query execution\n        #          failed - possible values: "Error", "Alerting", "OK"\n        #          default = Alerting\n        execErrState: Alerting\n        # <duration, required> for how long should the alert fire before alerting\n        for: 60s\n        # <map<string, string>> a map of strings to pass around any data\n        annotations:\n          some_key: some_value\n        # <map<string, string> a map of strings that can be used to filter and\n        #                      route alerts\n        labels:\n          team: sre_team_1
```

----------------------------------------

TITLE: Mapping Google Groups to Grafana Organizations and Roles (INI)
DESCRIPTION: This INI configuration snippet demonstrates how to map Google groups to specific Grafana organizations and assign roles within those organizations using the `org_mapping` setting. Users in 'group-1' are mapped to 'org_foo' as 'Viewer', users in 'group-2' are mapped to 'org_bar' as 'Editor', and all other authenticated users (*) are mapped to 'org_baz' as 'Editor'. This relies on the Google group email key.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/google/index.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
```ini
org_mapping = group-1:org_foo:Viewer group-2:org_bar:Editor *:org_baz:Editor
```
```

----------------------------------------

TITLE: Sending API Request with Organization Context to Grafana API
DESCRIPTION: Example HTTP request showing how to call Grafana's API with authentication token and organization context. The X-Grafana-Org-Id header specifies which organization the operation applies to.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/_index.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/org/ HTTP/1.1
Accept: application/json
Content-Type: application/json
X-Grafana-Org-Id: 2
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Using the Icon Component within IconButton Documentation (MDX/JSX)
DESCRIPTION: Demonstrates an example usage of the `Icon` component within the `IconButton` documentation, embedded directly in the MDX content. This specific example shows an unambiguous icon ('angle-down'), illustrating a use case where an `IconButton` might be used without an accompanying tooltip, as mentioned in the surrounding text. It relies on the imported `Icon` component.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/IconButton/IconButton.mdx#2025-04-23_snippet_0

LANGUAGE: mdx
CODE:
```
<Icon name="angle-down" />
```

----------------------------------------

TITLE: Configuring OAuth2 Authentication with Dex in Grafana (Bash Configuration)
DESCRIPTION: This snippet configures Grafana to use Dex as its OAuth2 identity provider. Key dependencies include the Dex IdP running with Grafana registered as a client and matching client ID/secret from the Dex configuration. The block defines OAuth endpoints corresponding to Dex's issuer configuration, required scopes for user info and refresh tokens, and disables extraneous properties. Inputs are Dex base URI, client credentials, and appropriate scopes; output is enabling Dex-based SSO in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_17

LANGUAGE: bash
CODE:
```
[auth.generic_oauth]
name = Dex
enabled = true
client_id = <client id>
client_secret = <client secret>
scopes = openid email profile groups offline_access
auth_url = https://<dex base uri>/auth
token_url = https://<dex base uri>/token
api_url = https://<dex base uri>/userinfo

```

----------------------------------------

TITLE: TraceQL Regular Expression Query
DESCRIPTION: Example of using anchored regular expressions in TraceQL queries to search for span attributes
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/datasources/tempo-editor-traceql.md#2025-04-23_snippet_1

LANGUAGE: traceql
CODE:
```
{ span.foo =~ ".*bar.*"}
```

----------------------------------------

TITLE: Querying Hourly Electricity Consumption with Flux
DESCRIPTION: This Flux query retrieves hourly electricity consumption data from the 'RetroEncabulator' bucket. It filters by measurement, location, and field, then applies an aggregation window based on the variable window period to calculate the mean power consumption.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_5

LANGUAGE: flux
CODE:
```
from(bucket: "RetroEncabulator")
|> range(start: v.timeRangeStart, stop: v.timeRangeStop)
|> filter(fn: (r) => r["_measurement"] == "ElectricityData")
|> filter(fn: (r) => r["Location"] == "PlantD5")
|> filter(fn: (r) => r["_field"] == "power_consumed")
|> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
|> yield(name: "power")
```

----------------------------------------

TITLE: Running End-to-End Tests
DESCRIPTION: Commands for running Cypress and Playwright end-to-end tests
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
yarn e2e
BASE_URL=http://localhost:3333 yarn e2e
yarn e2e:debug
yarn e2e:dev
yarn playwright install chromium
yarn e2e:playwright
yarn e2e:playwright:server
```

----------------------------------------

TITLE: Configuring GitHub OAuth Authentication in Grafana (Bash Syntax in .ini Configuration)
DESCRIPTION: This configuration block enables GitHub OAuth in Grafana, specifying the required client_id, secret, OAuth URLs, and organization/team restrictions. 'client_id' and 'client_secret' must come from your GitHub OAuth app; 'allowed_organizations' and 'team_ids' restrict login to specific organizations and teams. The 'role_attribute_path' expression dynamically assigns the 'GrafanaAdmin' role to user 'octocat', with 'Viewer' as fallback. The configuration must be placed in the proper section of Grafana's configuration file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
[auth.github]
enabled = true
client_id = YOUR_GITHUB_APP_CLIENT_ID
client_secret = YOUR_GITHUB_APP_CLIENT_SECRET
scopes = user:email,read:org
auth_url = https://github.com/login/oauth/authorize
token_url = https://github.com/login/oauth/access_token
api_url = https://api.github.com/user
allow_sign_up = true
auto_login = false
team_ids = 150,300
allowed_organizations = ["My Organization", "Octocats"]
allowed_domains = mycompany.com mycompany.org
role_attribute_path = [login=='octocat'][0] && 'GrafanaAdmin' || 'Viewer'
```

----------------------------------------

TITLE: Mapping Roles Based on GitHub Team Membership
DESCRIPTION: JMESPath expression that grants Editor role to members of a specific GitHub team and Viewer role to all other users. Uses the contains function to check team membership.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
role_attribute_path = contains(groups[*], '@my-github-organization/my-github-team') && 'Editor' || 'Viewer'
```

----------------------------------------

TITLE: Assigning Role to Team - Grafana Access Control HTTP API - HTTP
DESCRIPTION: Shows an example HTTP POST request to assign a role to a team via the access control API. The endpoint uses the team ID in the URL and expects a JSON body containing a single roleUid field. Requires 'teams.roles:add' permission with 'permissions:type:delegate' scope. The Accept and Content-Type headers indicate JSON is both sent and expected.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_34

LANGUAGE: http
CODE:
```
POST /api/access-control/teams/1/roles
Accept: application/json
Content-Type: application/json

{
    "roleUid": "XvHQJq57z"
}
```

----------------------------------------

TITLE: Example Custom Grafana Webhook Payload Template (Go Template)
DESCRIPTION: Provides an example of a Go template used to define a custom JSON payload for Grafana webhooks. This template demonstrates how to access alert data (like CommonLabels and Status) and custom variables (defined via Payload Variables, accessed via `.Vars`) to construct a tailored JSON output. Note that when using Custom Payload, the standard Title and Message fields are ignored.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/manage-contact-points/integrations/webhook-notifier.md#2025-04-23_snippet_1

LANGUAGE: gotemplate
CODE:
```
{
  "alert_name": "{{ .CommonLabels.alertname }}",
  "status": "{{ .Status }}",
  "environment": "{{ .Vars.environment }}",
  "custom_field": "{{ .Vars.custom_field }}"
}
```

----------------------------------------

TITLE: Querying Prometheus Data Source using PromQL in Grafana
DESCRIPTION: Example PromQL query for a Prometheus data source within Grafana. It uses the `max_over_time` function to find the maximum value of a given '<metric>' over the time range specified by the Grafana global variable `${__range_s}` (representing the dashboard's time range in seconds). The `query_result` function then compares this maximum value against a specified '<state>', demonstrating the use of PromQL functions and Grafana variables.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/_index.md#2025-04-23_snippet_1

LANGUAGE: promql
CODE:
```
query_result(max_over_time(<metric>[${__range_s}s]) != <state>)
```

----------------------------------------

TITLE: Creating a Custom Role via Grafana HTTP API - Shell Script
DESCRIPTION: This shell script uses curl to send a POST request to the Grafana HTTP API endpoint for role creation. It includes the necessary HTTP headers for authorization and content type, and sends a JSON payload defining a custom role with user creation permissions. Dependencies include curl and a valid Grafana instance with appropriate HTTP API access; key parameters are the role attributes (`uid`, `name`, `permissions`). Input is a JSON-formatted data payload, output is the API's HTTP response. Only permissions for which the requester is authorized can be included.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
curl --location --request POST '<grafana_url>/api/access-control/roles/' \
--header 'Authorization: Basic YWRtaW46cGFzc3dvcmQ=' \
--header 'Content-Type: application/json' \
--data-raw '{
    "version": 1,
    "uid": "jZrmlLCkGksdka",
    "name": "custom:users:admin",
    "displayName": "custom users admin",
    "description": "My custom role which gives users permissions to create users",
    "global": true,
    "permissions": [
        {
            "action": "users:create"
        }
    ]
}'
```

----------------------------------------

TITLE: Defining CloudWatch Metric Insights Queries using SQL Syntax
DESCRIPTION: This snippet shows the SQL-like syntax used for defining queries with CloudWatch Metric Insights. It outlines the structure including SELECT, FROM (Namespace or SCHEMA), optional WHERE, GROUP BY, ORDER BY, and LIMIT clauses. This syntax allows for identifying trends and patterns across operational metrics and is used within the Code mode of the Metric Insights query editor in Grafana. Refer to AWS documentation for detailed syntax and limits.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/query-editor/index.md#2025-04-23_snippet_0

LANGUAGE: sql
CODE:
```
SELECT FUNCTION(MetricName)
FROM Namespace | SCHEMA(...)
[ WHERE labelKey OPERATOR labelValue [AND|...]]
[ GROUP BY labelKey [, ...]]
[ ORDER BY FUNCTION() [DESC | ASC] ]
[ LIMIT number]
```

----------------------------------------

TITLE: Rolling Back Secret Encryption using Grafana CLI
DESCRIPTION: Uses the Grafana CLI to decrypt secrets previously encrypted with envelope encryption and re-encrypt them using the legacy method. This is primarily intended for scenarios where a Grafana upgrade to v9.0+ needs to be rolled back to a pre-v9.0 version. It is recommended to run this command during maintenance.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
grafana cli admin secrets-migration rollback
```

----------------------------------------

TITLE: Configuring CSRF Settings for SAML in Grafana INI
DESCRIPTION: Provides an example configuration snippet within the `[security]` section of Grafana's `config.ini`. It demonstrates setting `csrf_trusted_origins` to allow requests from a specific domain and `csrf_additional_headers` to trust headers like `X-Forwarded-Host`, which can resolve CSRF errors during SAML login, especially behind reverse proxies.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_23

LANGUAGE: ini
CODE:
```
# config.ini
...
[security]
csrf_trusted_origins = https://grafana.example.com
csrf_additional_headers = X-Forwarded-Host
...
```

----------------------------------------

TITLE: Mapping Custom Value Structures Using onChange in InputControl (JavaScript/JSX)
DESCRIPTION: Highlights advanced usage of the InputControl render prop to transform value structures before committing to form state. Demonstrates extracting nested values from Select input and passing them to the form using a custom onChange. Relies on react-hook-form’s render field pattern and is suitable when input values need adaptation.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_5

LANGUAGE: jsx
CODE:
```
<Field label="SelectExample">
  <InputControl
    {/* Here `value` has a nested `value` property, which we want to save onto the form. */}
    render={(field: {onChange, ...field}) => <Select {...field} onChange={(value) => onChange(value.value)}/>}
    control={control}
    name="select"
  />
</Field>
```

----------------------------------------

TITLE: Aggregating Daily Electricity Consumption with Flux
DESCRIPTION: This Flux query calculates daily electricity consumption by modifying the aggregation window. It retrieves data from the 'RetroEncabulator' bucket, filters it, and uses a 1-day aggregation window with a sum function to calculate total daily consumption.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_6

LANGUAGE: flux
CODE:
```
from(bucket: "RetroEncabulator")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "ElectricityData")
  |> filter(fn: (r) => r["Location"] == "PlantD5")
  |> filter(fn: (r) => r["_field"] == "power_consumed")
  |> aggregateWindow(every: 1d, fn: sum)
  |> yield(name: "power")
```

----------------------------------------

TITLE: Querying Production CPU Usage with PromQL
DESCRIPTION: PromQL query used within a Grafana time series panel to retrieve the `flask_app_cpu_usage` metric specifically for the 'prod' environment. This metric is used for visualization and later for defining alert rules.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_4

LANGUAGE: promql
CODE:
```
flask_app_cpu_usage{environment="prod"}
```

----------------------------------------

TITLE: Configuring Prometheus Scrape Job for Grafana Metrics (YAML)
DESCRIPTION: This YAML configuration defines a Prometheus scrape job named 'grafana'. It instructs Prometheus to collect metrics exposed by a Grafana instance via its '/metrics' endpoint every 15 seconds. This is essential for monitoring Grafana's internal state, including Alertmanager metrics relevant for verifying High Availability setups.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-high-availability/_index.md#2025-04-23_snippet_4

LANGUAGE: yaml
CODE:
```
- job_name: grafana
  honor_timestamps: true
  scrape_interval: 15s
  scrape_timeout: 10s
  metrics_path: /metrics
  scheme: http
  follow_redirects: true
  static_configs:
    - targets:
        - grafana:3000
```

----------------------------------------

TITLE: Example Default Grafana Webhook JSON Payload
DESCRIPTION: Illustrates the default JSON structure sent by Grafana webhooks when alerts are firing. This example shows a payload containing information for two distinct firing alerts, including their status, labels, annotations, timestamps, and associated URLs. It also includes common fields like receiver, organization ID, common labels/annotations, and overall state.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/manage-contact-points/integrations/webhook-notifier.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "receiver": "My Super Webhook",
  "status": "firing",
  "orgId": 1,
  "alerts": [
    {
      "status": "firing",
      "labels": {
        "alertname": "High memory usage",
        "team": "blue",
        "zone": "us-1"
      },
      "annotations": {
        "description": "The system has high memory usage",
        "runbook_url": "https://myrunbook.com/runbook/1234",
        "summary": "This alert was triggered for zone us-1"
      },
      "startsAt": "2021-10-12T09:51:03.157076+02:00",
      "endsAt": "0001-01-01T00:00:00Z",
      "generatorURL": "https://play.grafana.org/alerting/1afz29v7z/edit",
      "fingerprint": "c6eadffa33fcdf37",
      "silenceURL": "https://play.grafana.org/alerting/silence/new?alertmanager=grafana&matchers=alertname%3DT2%2Cteam%3Dblue%2Czone%3Dus-1",
      "dashboardURL": "",
      "panelURL": "",
      "values": {
        "B": 44.23943737541908,
        "C": 1
      }
    },
    {
      "status": "firing",
      "labels": {
        "alertname": "High CPU usage",
        "team": "blue",
        "zone": "eu-1"
      },
      "annotations": {
        "description": "The system has high CPU usage",
        "runbook_url": "https://myrunbook.com/runbook/1234",
        "summary": "This alert was triggered for zone eu-1"
      },
      "startsAt": "2021-10-12T09:56:03.157076+02:00",
      "endsAt": "0001-01-01T00:00:00Z",
      "generatorURL": "https://play.grafana.org/alerting/d1rdpdv7k/edit",
      "fingerprint": "bc97ff14869b13e3",
      "silenceURL": "https://play.grafana.org/alerting/silence/new?alertmanager=grafana&matchers=alertname%3DT1%2Cteam%3Dblue%2Czone%3Deu-1",
      "dashboardURL": "",
      "panelURL": "",
      "values": {
        "B": 44.23943737541908,
        "C": 1
      }
    }
  ],
  "groupLabels": {},
  "commonLabels": {
    "team": "blue"
  },
  "commonAnnotations": {},
  "externalURL": "https://play.grafana.org/",
  "version": "1",
  "groupKey": "{}:{}",
  "truncatedAlerts": 0,
  "title": "[FIRING:2]  (blue)",
  "state": "alerting",
  "message": "**Firing**\n\nLabels:\n - alertname = T2\n - team = blue\n - zone = us-1\nAnnotations:\n - description = This is the alert rule checking the second system\n - runbook_url = https://myrunbook.com\n - summary = This is my summary\nSource: https://play.grafana.org/alerting/1afz29v7z/edit\nSilence: https://play.grafana.org/alerting/silence/new?alertmanager=grafana&matchers=alertname%3DT2%2Cteam%3Dblue%2Czone%3Dus-1\n\nLabels:\n - alertname = T1\n - team = blue\n - zone = eu-1\nAnnotations:\nSource: https://play.grafana.org/alerting/d1rdpdv7k/edit\nSilence: https://play.grafana.org/alerting/silence/new?alertmanager=grafana&matchers=alertname%3DT1%2Cteam%3Dblue%2Czone%3Deu-1\n"
}
```

----------------------------------------

TITLE: Configuring Google OAuth via Terraform for Grafana
DESCRIPTION: Terraform resource block for configuring Google SSO settings in Grafana. It sets up OAuth2 settings including client credentials, scopes, domain restrictions, and PKCE support.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/google/index.md#2025-04-23_snippet_0

LANGUAGE: terraform
CODE:
```
resource "grafana_sso_settings" "google_sso_settings" {
  provider_name = "google"
  oauth2_settings {
    name            = "Google"
    client_id       = "CLIENT_ID"
    client_secret   = "CLIENT_SECRET"
    allow_sign_up   = true
    auto_login      = false
    scopes          = "openid email profile"
    allowed_domains = "mycompany.com mycompany.org"
    hosted_domain   = "mycompany.com"
    use_pkce        = true
  }
}
```

----------------------------------------

TITLE: Defining Memoized Columns and Data for InteractiveTable in TSX
DESCRIPTION: This snippet demonstrates how to define the `columns` and `data` props for the `InteractiveTable` component using TypeScript (TSX). It defines a `TableData` interface and uses the `useMemo` hook to memoize both the column definitions and the data array, which is crucial for preventing unnecessary re-renders. The `columns` array defines the table structure with `id` and `header`, where the `id` corresponds to keys in the `data` objects.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InteractiveTable/InteractiveTable.mdx#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
interface TableData {
  projectName: string;
  repository: string;
}

const columns = useMemo<Array<Column<TableData>>>(
  () => [
    id: 'projectName'
    header: "Project Name"
  ],
  [
    id: 'repository',
    header: "Repository"
  ],
  []
);

const data = useMemo<Array<TableData>>(
  () => [
    {
      projectName: 'Grafana',
      repository: 'https://github.com/grafana/grafana',
   }
  ],
  [
    {
      projectName: 'Loki';
      repository: 'https://github.com/grafana/loki';
    }
  ],
  []
);
```

----------------------------------------

TITLE: Resetting Selected Value in Multiple Linked Selects with React and @grafana/ui (TSX)
DESCRIPTION: Illustrates how to synchronize two Select components by resetting the value of the dependent Select when the primary Select changes. Utilizes React useState and the @grafana/ui Select component, clearing the dependent Select with setTeam(null) in the onChange handler. Inputs are user selections; outputs are updated state for person and team. Limitation: ensure state resetting does not introduce UI inconsistency.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Select/Select.mdx#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
import { useState } from 'react';
import { Select } from '@grafana/ui';

const SelectComponent = () => {
  const [person, setPerson] = useState<string | undefined>('');
  const [team, setTeam] = useState<string | undefined | null>('');

  return (
    <form>
      <Select
        onChange={({ value }) => {
          setPerson(value);
          setTeam(null); // Setting the team to null will reset the selected value in the team Select
        }}
        options={[
          {
            value: 'option1',
            label: 'Option 1',
          },
          {
            value: 'option2',
            label: 'Option 2',
          },
        ]}
        value={person}
        backspaceRemovesValue
      />
      <Select
        onChange={({ value }) => setTeam(value)}
        options={[
          {
            value: 'team1',
            label: 'Team 1',
          },
          {
            value: 'team',
            label: 'Team 2',
          },
        ]}
        value={team}
      />
    </form>
  );
};
```

----------------------------------------

TITLE: Advanced Role Mapping Using JMESPath Expressions
DESCRIPTION: Configuration for advanced role mapping using JMESPath expressions to evaluate complex conditions and assign appropriate roles based on JWT claims.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_11

LANGUAGE: ini
CODE:
```
role_attribute_path = contains(info.roles[*], 'admin') && 'Admin' || contains(info.roles[*], 'editor') && 'Editor' || 'Viewer'
```

----------------------------------------

TITLE: Using FileListItem Component in React (JSX)
DESCRIPTION: This code snippet demonstrates how to import the FileListItem component from the @grafana/ui package and render it with a file prop containing a file object (including name and size). The FileListItem component is intended to visually represent a file in a list, and typically appears within UI elements that handle file uploads such as FileDropzone. The required dependency is @grafana/ui, and the file prop must provide, at minimum, a file object with name and size fields. The output is a rendered React element representing the file.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/FileDropzone/FileListItem.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { FileListItem } from '@grafana/ui';

<FileListItem file={{ file: { name: 'someFile.jpg', size: 12345 } }} />;
```

----------------------------------------

TITLE: Basic Grafana Keycloak OAuth2 Configuration (INI)
DESCRIPTION: Example Grafana configuration snippet for enabling Keycloak OAuth2 using the generic OAuth provider. It specifies enabling the provider, naming it, allowing sign-ups, setting client credentials, defining scopes (including 'offline_access' for refresh tokens), mapping user attributes (email, login, name), providing Keycloak endpoints (auth, token, userinfo), and defining a basic role mapping based on Keycloak roles. Note that `root_url` under `[server]` might need setting if Grafana is behind a proxy.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[auth.generic_oauth]
enabled = true
name = Keycloak-OAuth
allow_sign_up = true
client_id = YOUR_APP_CLIENT_ID
client_secret = YOUR_APP_CLIENT_SECRET
scopes = openid email profile offline_access roles
email_attribute_path = email
login_attribute_path = username
name_attribute_path = full_name
auth_url = https://<PROVIDER_DOMAIN>/realms/<REALM_NAME>/protocol/openid-connect/auth
token_url = https://<PROVIDER_DOMAIN>/realms/<REALM_NAME>/protocol/openid-connect/token
api_url = https://<PROVIDER_DOMAIN>/realms/<REALM_NAME>/protocol/openid-connect/userinfo
role_attribute_path = contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'
```

----------------------------------------

TITLE: Querying Time Series Data with Metric Column in PostgreSQL
DESCRIPTION: Demonstrates a SQL query that groups time series data by 5-minute intervals, calculates the minimum value, and includes a 'metric' column. This query format is used for backward compatibility in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_4

LANGUAGE: sql
CODE:
```
SELECT
  $__timeGroupAlias("time_date_time",'5m'),
  min("value_double"),
  'min' as metric
FROM test_data
WHERE $__timeFilter("time_date_time")
GROUP BY time
ORDER BY time
```

----------------------------------------

TITLE: Provisioning Datasources in Grafana Using YAML - YAML
DESCRIPTION: This code snippet demonstrates how to use environment variables in a Grafana data source provisioning file. Grafana allows substituting environment variable values directly in the YAML by using $ENV_VAR_NAME or ${ENV_VAR_NAME} syntax. The snippet configures a Graphite datasource, using environment variables for its URL port, user, and password to keep sensitive credentials outside the file. Inputs are environment variables and expected outputs are a properly configured data source instance at Grafana startup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
datasources:\n  - name: Graphite\n    url: http://localhost:$PORT\n    user: $USER\n    secureJsonData:\n      password: $PASSWORD\n
```

----------------------------------------

TITLE: Creating a Library Element Request Example (HTTP/JSON)
DESCRIPTION: Example HTTP POST request to create a new library panel element named 'Example library panel' using the `/api/library-elements` endpoint. The JSON request body specifies the element's properties, including an optional `uid`, `folderUid`, `name`, the element `model` (content), and `kind` (1 for panel). Requires authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
POST /api/library-elements HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "uid": "nErXDvCkzz",
  "folderUid": "",
  "name": "Example library panel",
  "model": {...},
  "kind": 1
}
```

----------------------------------------

TITLE: Querying Metrics with Partition By Values Transformation - SQL
DESCRIPTION: Illustrates the recommended approach in Grafana v9.3 using a single SQL query with the 'partition by values' transformation. The single query retrieves all region data and partitions results based on column values, enabling dynamic handling of new regions. Input includes the 'metrics' table, with outputs grouped by distinct Region values through Grafana's transformer. Requires SQL-compatible database and Grafana v9.3+. Limitation: relies on the 'partition by values' transformation within Grafana, not SQL.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-3.md#2025-04-23_snippet_1

LANGUAGE: sql
CODE:
```
   SELECT Time, Region, Value FROM metrics WHERE Time > ‘2022-10-20’
```

----------------------------------------

TITLE: Running Grafana Container with Docker Volume for Persistence - Bash
DESCRIPTION: Starts a Grafana container using a persistent Docker volume mapped to the container data directory. Passes the volume (grafana-storage) for persistent storage and assigns the container a name. Docker and the previously created volume must exist; the container will keep user data across restarts or upgrades if run this way.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
# start grafana
docker run -d -p 3000:3000 --name=grafana \
  --volume grafana-storage:/var/lib/grafana \
  grafana/grafana-enterprise
```

----------------------------------------

TITLE: Adding Secure Prefix to Grafana Login Cookie Name in TOML
DESCRIPTION: Sets the `login_cookie_name` in the `[auth]` section of `grafana.ini` to include a secure prefix like `__Host-`. This adds an extra layer of security against cookie hijacking, even over HTTPS, by enforcing stricter browser rules for cookie acceptance based on the prefix used. Requires Grafana to be served over HTTPS.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-security-hardening/index.md#2025-04-23_snippet_2

LANGUAGE: toml
CODE:
```
[auth]
# Login cookie name
login_cookie_name = __Host-grafana_session
```

----------------------------------------

TITLE: Configuring OAuth2 Authentication with OneLogin in Grafana (Bash Configuration)
DESCRIPTION: This snippet configures Grafana to use OneLogin as an OAuth2/OpenID Connect provider for user authentication. Required steps include setting up a custom connector in OneLogin, obtaining client credentials, and specifying redirect URIs to match the Grafana domain. The configuration maps essential OAuth endpoints, OpenID scopes, and disables unnecessary properties. Inputs are obtained from OneLogin's SSO tab, with security-sensitive client credentials and domain-related placeholders to be replaced accordingly.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_15

LANGUAGE: bash
CODE:
```
[auth.generic_oauth]
name = OneLogin
enabled = true
allow_sign_up = true
auto_login = false
client_id = <client id>
client_secret = <client secret>
scopes = openid email name
auth_url = https://<onelogin domain>.onelogin.com/oidc/2/auth
token_url = https://<onelogin domain>.onelogin.com/oidc/2/token
api_url = https://<onelogin domain>.onelogin.com/oidc/2/me
team_ids =
allowed_organizations =

```

----------------------------------------

TITLE: Provisioning Grafana Cloud Stack Service Accounts with Tokens using Terraform
DESCRIPTION: This example demonstrates how to define Grafana cloud stack service accounts and their associated tokens using Terraform. Dependencies include the Grafana provider and an existing cloud stack resource. The configuration provisions a service account, assigns a role, and generates a token linked to that account—all referencing the appropriate stack and service account identifiers. These resources replace the legacy API key resource and improve both security and granularity in access management.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_8

LANGUAGE: terraform
CODE:
```
terraform {
  required_providers {
    grafana = {
      source = "grafana/grafana"
    }
  }
}

# Declaring the first provider to be only used for creating the cloud-stack
provider "grafana" {
  alias = "cloud"

  cloud_api_key = "<API-Key>"
}

resource "grafana_cloud_stack" "my_stack" {
  provider = grafana.cloud

  name        = "my_stack"
  slug        = "my_stack"
  region_slug = "eu" # Example “us”,”eu” etc
}

# Creating a grafana cloud stack service account
resource "grafana_cloud_stack_service_account" "mystack_cloud-stack_service_account" {
  provider   = grafana.cloud
  stack_slug = grafana_cloud_stack.my_stack.slug

  name = "mystack-cloud-stack-sa"
  role = "Admin"
}

# Creating a grafana cloud stack service account token
resource "grafana_cloud_stack_service_account_token" "mystack_cloud-stack_service-account_token" {
  provider   = grafana.cloud
  stack_slug = grafana_cloud_stack.my_stack.slug

  name               = "mystack-cloud-stack-sa-token"
  service_account_id = grafana_cloud_stack_service_account.mystack_cloud-stack_service_account.id
}
```

----------------------------------------

TITLE: Authenticating with a Service Account Token in an HTTP Request
DESCRIPTION: Illustrates how to authenticate a Grafana API request using a Service Account Token. The token is included in the `Authorization` header with the `Bearer` scheme. This example shows a GET request to the `/api/dashboards/db/mydash` endpoint. Service Account Tokens are created within the Grafana administration interface.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/developers/authentication.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
GET http://your.grafana.com/api/dashboards/db/mydash HTTP/1.1
Accept: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Multiple LDAP Servers Configuration
DESCRIPTION: Configuration example for multiple LDAP servers with different group mappings and roles.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
[[servers]]
host = "10.0.0.1"
port = 389
use_ssl = false
start_tls = false
ssl_skip_verify = false
bind_dn = "cn=admin,dc=grafana,dc=org"
bind_password = "grafana"
search_filter = "(cn=%s)"
search_base_dns = ["ou=users,dc=grafana,dc=org"]

[servers.attributes]
member_of = "memberOf"
email =  "email"

[[servers.group_mappings]]
group_dn = "cn=admins,ou=groups,dc=grafana,dc=org"
org_role = "Admin"
grafana_admin = true

[[servers]]
host = "10.0.0.2"
port = 389
use_ssl = false
start_tls = false
ssl_skip_verify = false
bind_dn = "cn=admin,dc=grafana,dc=org"
bind_password = "grafana"
search_filter = "(cn=%s)"
search_base_dns = ["ou=users,dc=grafana,dc=org"]

[servers.attributes]
member_of = "memberOf"
email =  "email"

[[servers.group_mappings]]
group_dn = "cn=editors,ou=groups,dc=grafana,dc=org"
org_role = "Editor"

[[servers.group_mappings]]
group_dn = "*"
org_role = "Viewer"
```

----------------------------------------

TITLE: Configuring AWS KMS Provider in Grafana INI
DESCRIPTION: Example section for the `grafana.ini` file defining an AWS KMS encryption provider named 'example-encryption-key'. It includes placeholders for the KMS `key_id` (which can be an ID, ARN, alias name, or alias ARN), AWS `access_key_id`, `secret_access_key`, and the AWS `region`. These values must be uncommented and filled with actual credentials and key details from your AWS account to enable Grafana to use the specified KMS key.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-aws-kms/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
   # AWS key management service provider setup
   ;[security.encryption.awskms.example-encryption-key]
   # Reference to a KMS key - either key ID, key ARN, alias name, or ARN
   ;key_id = 1234abcd-12ab-34cd-56ef-1234567890ab
   # AWS access key ID
   ;access_key_id = AKIAIOSFODNN7EXAMPLE
   # AWS secret access key
   ;secret_access_key = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
   # AWS region, for example eu-north-1
   ;region = eu-north-1
```

----------------------------------------

TITLE: Active Directory Server Configuration
DESCRIPTION: Configuration example for Active Directory server with SSL enabled and specific Windows domain settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
[[servers]]
host = "10.0.0.1"
port = 3269
use_ssl = true
start_tls = false
ssl_skip_verify = true
bind_dn = "CORP\\%s"
search_filter = "(sAMAccountName=%s)"
search_base_dns = ["dc=corp,dc=local"]

[servers.attributes]
member_of = "memberOf"
email =  "mail"
```

----------------------------------------

TITLE: Installing Custom Plugins in Grafana Docker Container
DESCRIPTION: A bash command to run Grafana Enterprise with pre-installed plugins specified by the GF_PLUGINS_PREINSTALL environment variable, including a custom plugin from a URL.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
docker run -d -p 3000:3000 --name=grafana \
  -e "GF_PLUGINS_PREINSTALL=custom-plugin@@http://plugin-domain.com/my-custom-plugin.zip,grafana-clock-panel" \
  grafana/grafana-enterprise
```

----------------------------------------

TITLE: Querying Loki Logs for Error Annotations with LogQL in Grafana
DESCRIPTION: This LogQL query retrieves log lines containing 'error' from `/var/log/tns-app.log` using the Loki data source. It is configured within Grafana Dashboard settings (Annotations section) to create annotations on graphs, visually correlating error occurrences logged in Loki with metric data displayed on the dashboard.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_8

LANGUAGE: logql
CODE:
```
{filename="/var/log/tns-app.log"} |= "error"
```

----------------------------------------

TITLE: Creating a Custom Role with Grafana HTTP API using cURL (bash)
DESCRIPTION: This cURL command sends a POST request to the Grafana API to create a custom role with predefined permissions for reading alerts in a specific folder and querying designated data sources. It requires authorization via a Bearer token and a JSON payload specifying the role name, display name, description, version, permissions, and other properties. The key parameters include the folder and data source UIDs mapped to precise actions. Inputs are API endpoint and role config, output is role creation or an error if parameters are malformed. Ensure proper Bearer token and endpoint substitution.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
curl --location --request POST '<grafana_url>/api/access-control/roles/' \
--header 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' \
--header 'Content-Type: application/json' \
--data-raw '{
    "version": 1,
    "name": "custom:alerts.reader.in.folder.123",
    "displayName": "Read-only access to alerts in folder Test-Folder",
    "description": "Let user query DS1 and DS2, and read alerts in folder Test-Folders",
    "group":"Custom",
    "global": false,
    "permissions": [
        {
            "action": "folders:read",
            "scope": "folders:uid:YEcBGYU22"
        },
        {
            "action": "alert.rules:read",
            "scope": "folders:uid:YEcBGYU22"
        },
        {
            "action": "datasources:query",
            "scope": "datasources:uid:_oAfGYUnk"
        },
        {
            "action": "datasources:query",
            "scope": "datasources:uid:YYcBGYUnk"
        }
    ]
}'
```

----------------------------------------

TITLE: Example Input Data Frame (Query B) for Concatenate Fields Transformation
DESCRIPTION: This table represents example input data (Query B) containing air quality index (AQI) and error count information, intended to be used with the 'Concatenate fields' transformation in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_2

LANGUAGE: text
CODE:
```
| AQI | Errors |
| --- | ------ |
| 3.2 | 5      |
```

----------------------------------------

TITLE: Generating Self-Signed Certificate and Private Key using OpenSSL (Shell)
DESCRIPTION: Generates a self-signed X.509 certificate (`cert.pem`) and a corresponding RSA 4096-bit private key (`key.pem`) using the OpenSSL command-line tool. The key is generated without a passphrase (`-nodes`) and the certificate is valid for 365 days. This is used when Grafana needs to sign SAML requests and the certificate/key are not automatically provided by the IdP metadata, specifically mentioning its use for Azure AD setup as well. The generated files can be used with `private_key_path` and `certificate_path` configuration options.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_1

LANGUAGE: sh
CODE:
```
$ openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes​
```

LANGUAGE: sh
CODE:
```
$ openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
```

----------------------------------------

TITLE: Querying MySQL for Low Disk Space Alerting in Grafana (SQL)
DESCRIPTION: This SQL query retrieves disk space information from a MySQL table named 'DiskSpace'. It calculates the average free percentage grouped by host and disk, filtered by Grafana's time range using the `__timeFilter` macro. The query returns the host, disk, and the percentage if it's below 5.0, otherwise 0. This output format is suitable for Grafana's numeric table alerting, triggering alerts for non-zero values. Requires a MySQL data source configured in Grafana and a 'DiskSpace' table with 'Host', 'Disk', 'PercentFree', and 'Time' columns.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/alert-rules/queries-conditions.md#2025-04-23_snippet_2

LANGUAGE: sql
CODE:
```
SELECT Host, Disk, CASE WHEN PercentFree < 5.0 THEN PercentFree ELSE 0 END FROM (
  SELECT
      Host,
      Disk,
      Avg(PercentFree)
  FROM DiskSpace
  Group By
    Host,
    Disk
  Where __timeFilter(Time)

```

----------------------------------------

TITLE: Server Response for Dashboard Creation/Update in HTTP/JSON
DESCRIPTION: Example of a successful response from the server after creating or updating a dashboard. The response includes the dashboard ID, UID, URL, status, and version. This confirms the operation was successful and provides reference information for the dashboard.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Content-Length: 78

{
    "id": 1,
    "uid": "e883f11b-77c0-4ee3-9a70-3ba223d66e56",
    "url": "/d/e883f11b-77c0-4ee3-9a70-3ba223d66e56/production-overview-updated",
    "status": "success",
    "version": 2
    "slug": "production-overview-updated",
}
```

----------------------------------------

TITLE: Annotation with Dynamic Value and Label Interpolation - Go Template - Markdown
DESCRIPTION: This example demonstrates how to construct an annotation string using both a specific query value (from $values.A.Value) and a label field (from $labels.instance) in a Grafana alert rule template with Go templating. The template requires both $values and $labels to be available, populated by the alert rule's queries. The output combines numeric and label data in a human-readable sentence, where parameters are the query value and label 'instance'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_2

LANGUAGE: Go Template
CODE:
```
{{ $values.A.Value }} CPU usage for {{ $labels.instance }} over the last 5 minutes.
```

----------------------------------------

TITLE: Setting Form Default Values via defaultValues Prop (JavaScript/JSX/TypeScript)
DESCRIPTION: Provides an example of setting form-wide default values using the defaultValues prop on the Form component. Defines TypeScript interfaces for type safety, illustrates a typical DTO, and demonstrates form initialization for prefilled form state. Dependencies include react-hook-form, TypeScript support, and correct prop assignment.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_7

LANGUAGE: jsx
CODE:
```
// Passing default values to the Form

interface FormDTO {
  name: string;
  isAdmin: boolean;
}

const defaultValues: FormDto {
  name: 'Roger Waters',
  isAdmin: false,
}

<Form defaultValues={defaultValues} ...>{...}</Form>
```

----------------------------------------

TITLE: Defining Test Log Data for Grafana Correlations using JSON
DESCRIPTION: A JSON structure defining a Grafana data frame to simulate log data for the 'Source' test data source. It includes 'time' and 'msg' fields, with the 'msg' field containing log lines ('level=error msg=error service=app1.loginService', etc.) parsable by the configured correlations (regex and logfmt). The 'meta' field specifies the preferred visualization as 'logs'. This data structure is intended to be pasted into the 'Raw Frames' scenario in Grafana's Explore view when using the 'Source' TestData data source to test the provisioned correlations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/correlations/use-variables-and-transformations/index.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
[
  {
    "meta": {
      "preferredVisualisationType": "logs"
    },
    "fields": [
      {
        "name": "time",
        "values": [1, 2]
      },
      {
        "name": "msg",
        "values": [
          "level=error msg=error service=app1.loginService",
          "level=debug msg=info service=app2.userProfileService"
        ]
      }
    ]
  }
]
```

----------------------------------------

TITLE: Selecting Time Series Table Data via SQL Query - SQL
DESCRIPTION: This snippet provides an example SQL query for selecting time series data (Time, Region, Value fields) from a 'metrics' table where the time is greater than a specified date. Intended for use within Grafana to demonstrate the 'Partition by values' transformation, this query returns all regions and times in a single result set. Its key parameter is the date "2022-10-20" in the WHERE condition, which restricts output to more recent entries. The output is a standard SQL result set for further transformation and visualization.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_38

LANGUAGE: SQL
CODE:
```
SELECT Time, Region, Value FROM metrics WHERE Time > "2022-10-20"
```

----------------------------------------

TITLE: SQL Query with Fill Parameter for Null Value Handling in Grafana
DESCRIPTION: This query uses the $__timeGroupAlias macro with a fill parameter to convert null values to zero. It groups data by time and hostname, summing the values.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_5

LANGUAGE: sql
CODE:
```
SELECT
  $__timeGroupAlias(createdAt, '5m', 0),
  sum(value) as value,
  hostname
FROM test_data
WHERE
  $__timeFilter(createdAt)
GROUP BY
  time,
  hostname
ORDER BY 1
```

----------------------------------------

TITLE: Provisioning Jaeger Data Source in YAML
DESCRIPTION: Example YAML configuration for provisioning a Jaeger data source in Grafana. Includes settings for basic authentication, trace-to-logs linking, trace-to-metrics linking, node graph configuration, and span bar customization.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/jaeger/_index.md#2025-04-23_snippet_3

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: Jaeger
    type: jaeger
    uid: EbPG8fYoz
    url: http://localhost:16686
    access: proxy
    basicAuth: true
    basicAuthUser: my_user
    readOnly: false
    isDefault: false
    jsonData:
      tracesToLogsV2:
        datasourceUid: 'loki'
        spanStartTimeShift: '1h'
        spanEndTimeShift: '-1h'
        tags: ['job', 'instance', 'pod', 'namespace']
        filterByTraceID: false
        filterBySpanID: false
        customQuery: true
        query: 'method="${__span.tags.method}"'
      tracesToMetrics:
        datasourceUid: 'prom'
        spanStartTimeShift: '1h'
        spanEndTimeShift: '-1h'
        tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
        queries:
          - name: 'Sample query'
            query: 'sum(rate(traces_spanmetrics_latency_bucket{$__tags}[5m]))'
      nodeGraph:
        enabled: true
      traceQuery:
        timeShiftEnabled: true
        spanStartTimeShift: '1h'
        spanEndTimeShift: '-1h'
      spanBar:
        type: 'None'
    secureJsonData:
      basicAuthPassword: my_password
```

----------------------------------------

TITLE: Configuring Microsoft Teams Contact Point - YAML
DESCRIPTION: Enables sending alert notifications to Microsoft Teams using a webhook URL. Supports templated titles, section titles, and message content through the 'settings' object. Inputs include the Teams webhook URL and optional message formatting. Outputs notifications posted to the Teams channel tied to the webhook. Requires valid Teams webhook credentials.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_12

LANGUAGE: yaml
CODE:
```
type: teams\nsettings:\n  # <string, required>\n  url: https://ms_teams_url\n  # <string>\n  title: |\n    {{ template \"default.title\" . }}\n  # <string>\n  sectiontitle: ''\n  # <string>\n  message: |\n    {{ template \"default.message\" . }}\n
```

----------------------------------------

TITLE: Installing a Grafana Plugin from a ZIP File using Bash
DESCRIPTION: This Bash command demonstrates how to install a Grafana plugin manually by extracting a downloaded ZIP archive into the Grafana plugin directory. The `unzip` command extracts the contents of `my-plugin-0.2.0.zip` into a subdirectory named `my-plugin` within the designated Grafana plugin directory (`YOUR_PLUGIN_DIR`). This method is often used for custom plugins or in air-gapped environments. The exact path for `YOUR_PLUGIN_DIR` needs to be substituted based on the Grafana configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/plugin-management/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
unzip my-plugin-0.2.0.zip -d YOUR_PLUGIN_DIR/my-plugin
```

----------------------------------------

TITLE: Retrieving Users (Lookup Mode) in Organization via REST API - HTTP
DESCRIPTION: This HTTP GET example requests a less-detailed list of users for the organization from /api/org/users/lookup. Used by admins, team managers, or when editing permissions, this endpoint returns basic user details and is authenticated via Bearer token.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
GET /api/org/users/lookup HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Provisioning Google Cloud Monitoring Data Source with JWT Private Key Path (YAML)
DESCRIPTION: This YAML snippet provisions the Google Cloud Monitoring data source in Grafana using a JWT authentication method where the service account's private key is referenced by file path instead of embedded directly. The 'privateKeyPath' field under 'jsonData' specifies the location of the PEM private key file accessible to the Grafana server. Main requirements are the service account's client email, token URI, and valid path to the private key. The provisioned data source will be set with JWT authentication and ready for use upon Grafana reload.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/google-cloud-monitoring/_index.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
apiVersion: 1\n\ndatasources:\n  - name: Google Cloud Monitoring\n    type: stackdriver\n    access: proxy\n    jsonData:\n      tokenUri: https://oauth2.googleapis.com/token\n      clientEmail: stackdriver@myproject.iam.gserviceaccount.com\n      authenticationType: jwt\n      defaultProject: my-project-name\n      privateKeyPath: /etc/secrets/gce.pem
```

----------------------------------------

TITLE: Updated Main Function with Error Handling in Go
DESCRIPTION: Modifies the main function to handle potential errors from InitializeEvent.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_12

LANGUAGE: go
CODE:
```
func main() {
    e, err := InitializeEvent()
    if err != nil {
        fmt.Printf("failed to create event: %s\n", err)
        os.Exit(2)
    }
    e.Start()
}
```

----------------------------------------

TITLE: Implementing Integration Tests in Grafana
DESCRIPTION: Pattern for creating integration tests in Grafana. Tests should be named with the TestIntegration prefix and include a check for testing.Short() to allow skipping when running unit tests only.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/style-guide.md#2025-04-23_snippet_2

LANGUAGE: go
CODE:
```
func TestIntegrationFoo(t *testing.T) {
    if testing.Short() {
        t.Skip("skipping integration test")
    }
    // function body
}
```

----------------------------------------

TITLE: Creating a Service Account - Grafana HTTP API - HTTP
DESCRIPTION: This snippet demonstrates how to create a new service account in Grafana using the POST endpoint. The request contains a JSON payload with mandatory fields such as name, role, and isDisabled. Required headers include content type and authorization. The response showcases the server's JSON reply with detailed information on the newly created service account, including timestamps, avatar URL, and assigned role.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
POST /api/serviceaccounts HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=\n\n{\n  "name": "grafana",\n  "role": "Viewer",\n  "isDisabled": false\n}
```

LANGUAGE: http
CODE:
```
HTTP/1.1 201\nContent-Type: application/json\n\n{\n\t"id": 1,\n\t"name": "test",\n\t"login": "sa-test",\n\t"orgId": 1,\n\t"isDisabled": false,\n\t"createdAt": "2022-03-21T14:35:33Z",\n\t"updatedAt": "2022-03-21T14:35:33Z",\n\t"avatarUrl": "/avatar/8ea890a677d6a223c591a1beea6ea9d2",\n\t"role": "Viewer",\n\t"teams": []\n}
```

----------------------------------------

TITLE: Configuring Grafana for Alert State History Backend (TOML)
DESCRIPTION: This TOML snippet demonstrates the necessary configuration within the Grafana configuration file (typically `grafana.ini` or custom path) to enable alert state history. The `[unified_alerting.state_history]` section is used, setting `enabled` to true, specifying `backend` as "loki", and providing the `loki_remote_url` for the Loki instance where state changes will be written.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-alert-state-history/index.md#2025-04-23_snippet_1

LANGUAGE: toml
CODE:
```
[unified_alerting.state_history]
enabled = true
backend = "loki"
loki_remote_url = "http://localhost:3100"
```

----------------------------------------

TITLE: Setting up User Event Testing for React Components in Grafana
DESCRIPTION: A utility function for setting up user event testing in React components. It combines rendering with userEvent setup to simplify testing user interactions, following the recommended approach of using userEvent.setup() for future compatibility.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/testing.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';

function setup(jsx: JSX.Element) {
  return {
    user: userEvent.setup(),
    ...render(jsx),
  };
}

it('should render', async () => {
  const { user } = setup(<Button />);
  await user.click(screen.getByRole('button'));
});
```

----------------------------------------

TITLE: Registering Grafana as a Client in Dex OAuth2 Provider (YAML Configuration)
DESCRIPTION: This YAML fragment is part of Dex's configuration file and registers Grafana as an OAuth2 client in the Dex IdP. It defines the client ID, secret (which must be generated externally), friendly name, and authorized redirect URIs. Required prerequisites are an operational Dex IdP instance and the ability to securely generate client secrets. Inputs are static values and secret, and output is enabling Dex to recognize Grafana as an authorized client.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_16

LANGUAGE: yaml
CODE:
```
staticClients:
  - id: <client id>
    name: Grafana
    secret: <client secret>
    redirectURIs:
      - 'https://<grafana domain>/login/generic_oauth'

```

----------------------------------------

TITLE: Using RenderUserContentAsHTML React Component
DESCRIPTION: This JSX snippet demonstrates the basic usage of the `RenderUserContentAsHTML` component. It shows how to render the component and pass a string ("sample content") to the `content` prop. The component is designed to sanitize this input before rendering it as HTML, providing a safe alternative to `dangerouslySetInnerHTML`.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/RenderUserContentAsHTML/RenderUserContentAsHTML.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
<RenderUserContentAsHTML content="sample content" />
```

----------------------------------------

TITLE: Writing Grafana Dashboard Permissions (Plaintext)
DESCRIPTION: Defines the `dashboards.permissions:write` permission action necessary to update permissions for one or more dashboards in Grafana. Access is linked to dashboard and folder scopes such as `dashboards:*`, `dashboards:uid:*`, `folders:*`, and `folders:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_10

LANGUAGE: plaintext
CODE:
```
`dashboards.permissions:write`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`dashboards:*`</li><li>`dashboards:uid:*`</li><li>`folders:*`</li><li>`folders:uid:*`</li></ul>
```

----------------------------------------

TITLE: Requesting Current Organization Data via REST API - HTTP
DESCRIPTION: This HTTP snippet demonstrates a GET request to the Grafana /api/org/ endpoint to retrieve details of the current organization. Requires a valid Bearer token for authentication. The Accept and Content-Type headers must be set to application/json. The response will contain organization metadata such as the organization ID and name.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/org/ HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Using Templating Variables in Time Series Query for PostgreSQL
DESCRIPTION: Demonstrates how to use templating variables in a time series query. This example shows the usage of the $hostname variable and the $__timeFilter macro to create a dynamic query based on user selections.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_13

LANGUAGE: sql
CODE:
```
SELECT
  atimestamp as time,
  aint as value
FROM table
WHERE $__timeFilter(atimestamp) and hostname in($hostname)
ORDER BY atimestamp ASC
```

----------------------------------------

TITLE: Importing and Using EmptySearchResult in JSX
DESCRIPTION: This snippet demonstrates how to import the `EmptySearchResult` component from the `@grafana/ui` package and use it to display a custom message within a React/JSX application. It renders the component with a text node child indicating that no results matched the user's query.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/EmptySearchResult/EmptySearchResult.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { EmptySearchResult } from '@grafana/ui';

<EmptySearchResult>Could not find anything matching your query</EmptySearchResult>;
```

----------------------------------------

TITLE: Configuring User, Organization, and Global Limits - Grafana INI
DESCRIPTION: Defines INI-style configuration options to control limits for user account creation, organization reporting, dashboard instantiation, API key generation, as well as alert rule and correlation count in Grafana. No external dependencies besides base Grafana. Parameters include limits for users per org (`user_org`), total users (`global_user`), organizations (`global_org`), dashboards (`global_dashboard`), API keys (`global_api_key`), sessions (`global_session`), alert rules (`global_alert_rule`), correlations (`global_correlations`), and alert evaluation result limits (`alerting_rule_evaluation_results`). All values support integers, with -1 meaning unlimited. These options are set inside the main Grafana config file (often `grafana.ini`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_19

LANGUAGE: ini
CODE:
```
[users]
# Limit the number of organizations a user can create (default: 10)
user_org = 10

# Sets a global limit of users (default: -1 for unlimited)
global_user = -1

# Sets a global limit on organizations (default: -1 for unlimited)
global_org = -1

# Sets a global limit on dashboards (default: -1 for unlimited)
global_dashboard = -1

# Sets a global limit of API keys (default: -1 for unlimited)
global_api_key = -1

# Sets a global limit on sessions (default: -1 for unlimited)
global_session = -1

# Sets a global limit on alert rules (default: -1 for unlimited)
global_alert_rule = -1

# Sets a global limit on correlations (default: -1 for unlimited)
global_correlations = -1

# Limit the number of query evaluation results per alert rule (default: -1 for unlimited)
alerting_rule_evaluation_results = -1

```

----------------------------------------

TITLE: Importing and Using the Checkbox Component in React/JSX
DESCRIPTION: This snippet demonstrates the basic import and usage of the Checkbox component from '@grafana/ui' within a React/JSX environment. It shows how to pass essential props like 'value' (boolean), 'label', 'description', and an 'onChange' handler function. It requires the '@grafana/ui' package to be installed as a dependency. The surrounding text explains the purpose of the checkbox for binary or multiple selections and provides usage guidelines.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Checkbox.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { Forms } from '@grafana/ui';

<Checkbox value={true|false} label={...} description={...} onChange={...} />
```

----------------------------------------

TITLE: Calculating Request Rate per Route with PromQL in Grafana Panel
DESCRIPTION: This PromQL query calculates the sum of the per-second average rate of increase of the `tns_request_duration_seconds_count` metric over the last 5 minutes, grouped by the `route` label. It's used within a Grafana dashboard panel connected to a Prometheus data source to visualize traffic.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_7

LANGUAGE: promql
CODE:
```
sum(rate(tns_request_duration_seconds_count[5m])) by(route)
```

----------------------------------------

TITLE: Configuring Grafana Team Sync Group Attribute Path (Bash/INI)
DESCRIPTION: Grafana configuration snippet setting `groups_attribute_path` to 'groups'. This tells Grafana's Team Sync feature to look for an array named 'groups' within the OAuth2 payload to identify the user's group memberships.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
groups_attribute_path = groups
```

----------------------------------------

TITLE: Defining Local Custom Roles in Grafana Provisioning - YAML
DESCRIPTION: This YAML snippet defines a local custom role for Grafana using the provisioning system. It sets the role's name, description, version, organization ID, and a set of permissions including reading, writing, and creating users. Requires Grafana with provisioning enabled and access to the roles configuration file. Inputs include role details and permissions; outputs are the applied custom roles after reloading the config. Limit role names to 190 ASCII characters.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_2

LANGUAGE: yaml
CODE:
```
# config file version\napiVersion: 2\n\nroles:\n  - name: custom:users:writer\n    description: 'List, create, or update other users.'\n    version: 1\n    orgId: 1\n    permissions:\n      - action: 'users:read'\n        scope: 'global.users:*'\n      - action: 'users:write'\n        scope: 'global.users:*'\n      - action: 'users:create'\n
```

----------------------------------------

TITLE: Running Grafana Image Renderer with Docker - Bash
DESCRIPTION: Demonstrates how to run the Grafana Image Renderer as a Docker container while mounting a custom configuration file. This setup allows customization of renderer settings by mapping a host path to the container's configuration file location. You must have Docker installed and a valid config.json at the given host path. The 'grafana/grafana-image-renderer:latest' image is used, and network mode is set to host.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
docker run -d --name=renderer --network=host -v /some/path/config.json:/usr/src/app/config.json grafana/grafana-image-renderer:latest
```

----------------------------------------

TITLE: Configuring OpsGenie Contact Point - YAML
DESCRIPTION: Defines an OpsGenie contact point for Grafana alerts. Requires an API key and API URL, with optional message, description, auto-close, and tag handling configuration. Input fields map directly to OpsGenie API expectations. Outputs are managed OpsGenie alerts based on Grafana triggers. Requires a valid OpsGenie account and API access.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_13

LANGUAGE: yaml
CODE:
```
type: opsgenie\nsettings:\n  # <string, required>\n  apiKey: xxx\n  # <string, required>\n  apiUrl: https://api.opsgenie.com/v2/alerts\n  # <string>\n  message: |\n    {{ template \"default.title\" . }}\n  # <string>\n  description: some descriptive description\n  # <bool>\n  autoClose: false\n  # <bool>\n  overridePriority: false\n  # <string> options: tags, details, both\n  sendTagsAs: both\n
```

----------------------------------------

TITLE: Querying Grafana Health Status via HTTP API - HTTP
DESCRIPTION: This snippet sends a GET request to the /api/health endpoint to retrieve health information about a Grafana instance. The request includes Accept: application/json, but does not require authentication headers in most setups. It is used for monitoring system status and readiness for integrations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/other.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
GET /api/health\nAccept: application/json\n
```

----------------------------------------

TITLE: Updating Dashboard Permissions with HTTP API
DESCRIPTION: This snippet shows how to make a POST request to update the permissions for a dashboard. The request includes permissions for roles, teams, and individual users.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_permissions.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
POST /api/dashboards/uid/dHEquNzGz/permissions
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "items": [
    {
      "role": "Viewer",
      "permission": 1
    },
    {
      "role": "Editor",
      "permission": 2
    },
    {
      "teamId": 1,
      "permission": 1
    },
    {
      "userId": 11,
      "permission": 4
    }
  ]
}
```

----------------------------------------

TITLE: Using Environment Variable Expansion in Grafana Configuration
DESCRIPTION: Example of using the env provider to expand environment variables in the Grafana paths configuration, setting the logs directory based on an environment variable.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
[paths]
logs = $__env{LOGDIR}/grafana
```

----------------------------------------

TITLE: Configuring Grafana Data Source Custom Headers using YAML
DESCRIPTION: This YAML snippet demonstrates how to configure a Grafana data source (Graphite) using the provisioning system. It specifically shows how to add custom HTTP headers to requests sent to the data source. Header names are defined in `jsonData`, while their corresponding values, potentially sensitive like API keys or tokens, are stored encrypted in `secureJsonData`. This example sets 'HeaderName' to 'HeaderValue' and 'Authorization' to 'Bearer XXXXXXXXX'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md#2025-04-23_snippet_2

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: Graphite
    jsonData:
      httpHeaderName1: 'HeaderName'
      httpHeaderName2: 'Authorization'
    secureJsonData:
      httpHeaderValue1: 'HeaderValue'
      httpHeaderValue2: 'Bearer XXXXXXXXX'
```

----------------------------------------

TITLE: Configuring Azure AD OAuth SSO with Grafana Terraform Provider (Terraform)
DESCRIPTION: This Terraform resource configures Azure AD as an SSO provider in Grafana by specifying OAuth2 URLs, credentials, and behavioral flags via the grafana_sso_settings resource. Dependencies include the Grafana Terraform Provider version v2.12.0 or later and access to a configured Azure AD App. Required fields include client_id, client_secret, auth_url, token_url, tenant/group restrictions, and PKCE setting. The configuration allows fine-tuning of admin assignment, auto-login, organizational, and group-based access control.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_2

LANGUAGE: terraform
CODE:
```
resource "grafana_sso_settings" "azuread_sso_settings" {
  provider_name = "azuread"
  oauth2_settings {
    name                          = "Azure AD"
    auth_url                      = "https://login.microsoftonline.com/TENANT_ID/oauth2/v2.0/authorize"
    token_url                     = "https://login.microsoftonline.com/TENANT_ID/oauth2/v2.0/token"
    client_authentication         = "CLIENT_AUTHENTICATION_OPTION"
    client_id                     = "APPLICATION_ID"
    client_secret                 = "CLIENT_SECRET"
    managed_identity_client_id    = "MANAGED_IDENTITY_CLIENT_ID"
    federated_credential_audience = "FEDERATED_CREDENTIAL_AUDIENCE"
    allow_sign_up                 = true
    auto_login                    = false
    scopes                        = "openid email profile"
    allowed_organizations         = "TENANT_ID"
    role_attribute_strict         = false
    allow_assign_grafana_admin    = false
    skip_org_role_sync            = false
    use_pkce                      = true
  }
}
```

----------------------------------------

TITLE: Using Uncontrolled Context Menu Wrapper in React (JSX)
DESCRIPTION: This snippet illustrates the use of the WithContextMenu higher-order component to wrap a trigger element (an IconButton) and handle menu open/close logic internally. The getContextMenuItems prop supplies menu data, and the child function receives a function (openMenu) to call to display the menu. Dependencies include WithContextMenu and IconButton. This approach abstracts state management, letting developers focus on triggering and rendering logic.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ContextMenu/ContextMenu.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<WithContextMenu getContextMenuItems={() => [{ label: 'Test', items: [{ label: 'First' }, { label: 'Second' }] }]}>\n  {({ openMenu }) => <IconButton name="info-circle" onClick={openMenu} />}\n</WithContextMenu>
```

----------------------------------------

TITLE: Writing Grafana Data Source Permissions (Plaintext)
DESCRIPTION: Defines the `datasources.permissions:write` permission action necessary to update permissions for data sources in Grafana. This capability is linked to data source scopes `datasources:*` and `datasources:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_22

LANGUAGE: plaintext
CODE:
```
`datasources.permissions:write`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>
```

----------------------------------------

TITLE: Deleting a Shared Dashboard in Grafana using HTTP DELETE
DESCRIPTION: This HTTP request deletes a shared dashboard by specifying both the dashboard UID and the public dashboard UID. It requires public write permissions for the dashboard.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_7

LANGUAGE: http
CODE:
```
DELETE /api/dashboards/uid/xCpsVuc4z/public-dashboards/cd56d9fd-f3d4-486d-afba-a21760e2acbe HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Defining Grafana Alert Rule Group using Terraform
DESCRIPTION: Creates a Grafana alert rule group named 'My Alert Rules' within a specified folder (referenced via `grafana_folder.<terraform_folder_name>.uid`), evaluated every 60 seconds. The rule 'My Random Walk Alert' involves querying a data source (linked via `grafana_data_source.<terraform_data_source_name>.uid`), reducing the result using an expression (`__expr__`), and applying a math expression (`$B > 70`) as the condition. Requires replacing placeholder names (`<terraform_rule_group_name>`, `<terraform_folder_name>`, `<terraform_data_source_name>`) with appropriate Terraform resource identifiers.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_2

LANGUAGE: terraform
CODE:
```
resource "grafana_rule_group" "<terraform_rule_group_name>" {
    name = "My Alert Rules"
    folder_uid = grafana_folder.<terraform_folder_name>.uid
    interval_seconds = 60
    org_id = 1

    rule {
        name = "My Random Walk Alert"
        condition = "C"
        for = "0s"

        // Query the datasource.
        data {
            ref_id = "A"
            relative_time_range {
                from = 600
                to = 0
            }
            datasource_uid = grafana_data_source.<terraform_data_source_name>.uid
            // `model` is a JSON blob that sends datasource-specific data.
            // It's different for every datasource. The alert's query is defined here.
            model = jsonencode({
                intervalMs = 1000
                maxDataPoints = 43200
                refId = "A"
            })
        }

        // The query was configured to obtain data from the last 60 seconds. Let's alert on the average value of that series using a Reduce stage.
        data {
            datasource_uid = "__expr__"
            // You can also create a rule in the UI, then GET that rule to obtain the JSON.
            // This can be helpful when using more complex reduce expressions.
            model = <<EOT
{"conditions":[{"evaluator":{"params":[0,0],"type":"gt"},"operator":{"type":"and"},"query":{"params":["A"]},"reducer":{"params":[],"type":"last"},"type":"avg"}],"datasource":{"name":"Expression","type":"__expr__","uid":"__expr__"},"expression":"A","hide":false,"intervalMs":1000,"maxDataPoints":43200,"reducer":"last","refId":"B","type":"reduce"}
EOT
            ref_id = "B"
            relative_time_range {
                from = 0
                to = 0
            }
        }

        // Now, let's use a math expression as our threshold.
        // We want to alert when the value of stage "B" above exceeds 70.
        data {
            datasource_uid = "__expr__"
            ref_id = "C"
            relative_time_range {
                from = 0
                to = 0
            }
            model = jsonencode({
                expression = "$B > 70"
                type = "math"
                refId = "C"
            })
        }
    }
}
```

----------------------------------------

TITLE: Retrieving Dashboard Tags in HTTP/JSON
DESCRIPTION: Example of retrieving all dashboard tags and their usage counts. This request sends a GET to /api/dashboards/tags endpoint. The response includes each tag term and the number of dashboards using that tag.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_9

LANGUAGE: http
CODE:
```
GET /api/dashboards/tags HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Active Directory Nested Group Search Configuration
DESCRIPTION: Example configurations for Active Directory nested/recursive group membership search filters using LDAP_MATCHING_RULE_IN_CHAIN.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
group_search_filter = "(member:1.2.840.113556.1.4.1941:=%s)"
group_search_base_dns = ["DC=mycorp,DC=mytld"]
group_search_filter_user_attribute = "dn"
```

LANGUAGE: bash
CODE:
```
group_search_filter = "(member:1.2.840.113556.1.4.1941:=CN=%s,[user container/OU])"
group_search_filter = "(|(member:1.2.840.113556.1.4.1941:=CN=%s,[user container/OU])(member:1.2.840.113556.1.4.1941:=CN=%s,[another user container/OU]))"
group_search_filter_user_attribute = "cn"
```

----------------------------------------

TITLE: Humanizing Numbers with Go Template Functions - Go Template
DESCRIPTION: Demonstrates usage of the {{ humanize }}, {{ humanize1024 }}, {{ humanizeDuration }}, {{ humanizePercentage }}, and {{ humanizeTimestamp }} functions for converting numeric values to human-friendly formats within Grafana templates. Requires Grafana's templating system, which in turn depends on the Go template language. Inputs are typically numeric values (floats or strings), and outputs are formatted strings suitable for display. Limitations include dependency on function support in Grafana versions and the formatting may vary based on locale.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_6

LANGUAGE: Go Template
CODE:
```
{{ humanize 1000.0 }}

```

LANGUAGE: Go Template
CODE:
```
{{ humanize1024 1024.0 }}

```

LANGUAGE: Go Template
CODE:
```
{{ humanizeDuration 60.0 }}

```

LANGUAGE: Go Template
CODE:
```
{{ humanizePercentage 0.2 }}

```

LANGUAGE: Go Template
CODE:
```
{{ humanizeTimestamp 1577836800.0 }}

```

----------------------------------------

TITLE: Using Bracket Variable Syntax in InfluxDB Queries
DESCRIPTION: Example of using the ${varname} syntax (shown as [[host]] in the example) for variables in InfluxDB queries, useful when interpolating a variable within an expression.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/template-variables/index.md#2025-04-23_snippet_4

LANGUAGE: sql
CODE:
```
SELECT mean("value") FROM "logins" WHERE "hostname" =~ /^[[host]]$/ AND $timeFilter GROUP BY time($__interval), "hostname"
```

----------------------------------------

TITLE: Example Output of Templated Summary Annotation in Grafana
DESCRIPTION: This snippet shows the resulting text of a templated `summary` annotation after Grafana evaluates it. It demonstrates how the template variables (`$labels.instance` and `$values.A.Value` or their `index` equivalents) are replaced with actual data (e.g., 'Instance 1' and '81.2345').
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/_index.md#2025-04-23_snippet_3

LANGUAGE: text
CODE:
```
CPU usage for Instance 1 has exceeded 80% (81.2345) for the last 5 minutes.
```

----------------------------------------

TITLE: Enabling Authorization Feature Toggles in Grafana via INI
DESCRIPTION: This snippet enables critical feature toggles for the authorization (authZGRPCServer) and general GRPC server (grpcServer) functions within Grafana by using the [feature_toggles] section in the INI configuration. Both flags must be set to true to activate server support. No additional dependencies are required, and improper configuration may prevent server endpoints from being registered.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/README.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[feature_toggles]
authZGRPCServer = true
grpcServer = true

```

----------------------------------------

TITLE: Deleting a Team by ID - HTTP
DESCRIPTION: Performs an HTTP DELETE operation to remove a team using the team's numeric ID. Requires authentication with a valid Bearer token. Response indicates success or failure based on permissions or ID validity.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
DELETE /api/teams/2 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt
```

----------------------------------------

TITLE: Provisioning CloudWatch Data Source with IAM Role Assumption
DESCRIPTION: YAML configuration for provisioning CloudWatch data source using AWS SDK default authentication with an IAM role to assume.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_7

LANGUAGE: yaml
CODE:
```
apiVersion: 1
datasources:
  - name: CloudWatch
    type: cloudwatch
    jsonData:
      authType: default
      assumeRoleArn: arn:aws:iam::123456789012:root
      defaultRegion: eu-west-2
```

----------------------------------------

TITLE: Team Search API Response Example - JSON
DESCRIPTION: Shows the expected JSON response when retrieving a paginated list of teams using the team search HTTP API endpoint. The response includes metadata like totalCount, a listing of matching teams, and pagination info. All returned teams contain fields for ID, name, avatar URL, and member count.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{\n  \"totalCount\": 1,\n  \"teams\": [\n    {\n      \"id\": 1,\n      \"orgId\": 1,\n      \"name\": \"MyTestTeam\",\n      \"email\": \"\",\n      \"avatarUrl\": \"\/avatar\/3f49c15916554246daa714b9bd0ee398\",\n      \"memberCount\": 1\n    }\n  ],\n  \"page\": 1,\n  \"perPage\": 1000\n}
```

----------------------------------------

TITLE: Converting Temperature Units in Flux for Grafana Alerting
DESCRIPTION: This Flux snippet demonstrates how to convert temperature values (e.g., Celsius) to Fahrenheit within a query pipeline using the `map()` function. It remaps the `_value` field by applying the conversion formula (`_value * 1.8 + 32.0`) before further processing like `aggregateWindow`. This is useful for alerting based on Fahrenheit thresholds when the stored data is in Celsius.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_1

LANGUAGE: flux
CODE:
```
|> map(fn: (r) => ({r with _value: r._value * 1.8 + 32.0}))
```

----------------------------------------

TITLE: Using the BarGauge Component in TypeScript React (Grafana UI)
DESCRIPTION: This TypeScript React snippet illustrates how to render the `BarGauge` component from `@grafana/ui`. It involves importing necessary types and components, defining a field configuration with thresholds, processing display properties using `getDisplayProcessor`, and passing the required props (theme, field config, display processor, value, orientation, display mode) to the `BarGauge` component for rendering a vertical basic bar gauge. Requires `@grafana/ui`, `@grafana/data`, and a `theme` object.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/BarGauge/BarGauge.mdx#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import { BarGauge, BarGaugeDisplayMode } from '@grafana/ui';
import { VizOrientation, ThresholdsMode, Field, FieldType, getDisplayProcessor } from '@grafana/data';

const field: Partial<Field> = {
  type: FieldType.number,
  config: {
    min: 0,
    max: 100,
    thresholds: {
      mode: ThresholdsMode.Absolute,
      steps: [
        { value: -Infinity, color: 'green' },
        { value: 20, color: 'blue' },
        { value: 90, color: 'red' },
      ],
    },
  },
};

field.display = getDisplayProcessor({ theme, field });

return (
  <BarGauge
    theme={theme}
    field={field.config}
    display={field.display}
    value={{
      text: '70',
      title: 'Title of data point',
      numeric: 70,
    }}
    orientation={VizOrientation.Vertical}
    displayMode={BarGaugeDisplayMode.Basic}
  />
);
```

----------------------------------------

TITLE: Creating a Graphite Data Source via Grafana API - HTTP
DESCRIPTION: This HTTP POST example demonstrates how to create a new Graphite data source in Grafana by sending a JSON body specifying the name, type (graphite), URL, access type, and authentication options. Requires an Authorization header with a Bearer token for authentication. Inputs include parameters for the data source configuration. Outputs include a JSON response describing the created data source, including sensitive fields. Password and basicAuthPassword fields should be handled securely as per Grafana guidance.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_5

LANGUAGE: http
CODE:
```
POST /api/datasources HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  "name":"test_datasource",\n  "type":"graphite",\n  "url":"http://mydatasource.com",\n  "access":"proxy",\n  "basicAuth":false\n}
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{\n  "datasource": {\n    "id": 1,\n    "orgId": 1,\n    "name": "test_datasource",\n    "type": "graphite",\n    "typeLogoUrl": "",\n    "access": "proxy",\n    "url": "http://mydatasource.com",\n    "password": "",\n    "user": "",\n    "database": "",\n    "basicAuth": false,\n    "basicAuthUser": "",\n    "basicAuthPassword": "",\n    "withCredentials": false,\n    "isDefault": false,\n    "jsonData": {},\n    "secureJsonFields": {},\n    "version": 1,\n    "readOnly": false\n  },\n  "id": 1,\n  "message": "Datasource added",\n  "name": "test_datasource"\n}
```

----------------------------------------

TITLE: Configuring MySQL Provisioning with TLS Verification in Grafana
DESCRIPTION: This YAML configuration sets up a MySQL datasource in Grafana with TLS verification. It includes TLS-specific settings and client certificates, in addition to the basic connection details and pool settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/configuration/_index.md#2025-04-23_snippet_2

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: MySQL
    type: mysql
    url: localhost:3306
    user: grafana
    jsonData:
      tlsAuth: true
      database: grafana
      maxOpenConns: 100
      maxIdleConns: 100
      maxIdleConnsAuto: true
      connMaxLifetime: 14400
    secureJsonData:
      password: ${GRAFANA_MYSQL_PASSWORD}
      tlsClientCert: ${GRAFANA_TLS_CLIENT_CERT}
      tlsCACert: ${GRAFANA_TLS_CA_CERT}
```

----------------------------------------

TITLE: Configuring Azure Custom Cloud Environment in Grafana
DESCRIPTION: Example configuration for defining custom Azure cloud environments with specific endpoints and properties. This includes settings for AAD authority, data explorer, log analytics, portal, prometheus and resource manager URLs.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_17

LANGUAGE: ini
CODE:
```
clouds_config = `[
		{
			"name":"CustomCloud1",
			"displayName":"Custom Cloud 1",
			"aadAuthority":"https://login.cloud1.contoso.com/",
			"properties":{
				"azureDataExplorerSuffix": ".kusto.windows.cloud1.contoso.com",
				"logAnalytics":            "https://api.loganalytics.cloud1.contoso.com",
				"portal":                  "https://portal.azure.cloud1.contoso.com",
				"prometheusResourceId":    "https://prometheus.monitor.azure.cloud1.contoso.com",
				"resourceManager":         "https://management.azure.cloud1.contoso.com"
			}
		}]`
```

----------------------------------------

TITLE: Querying External Groups for a Team with HTTP API in HTTP
DESCRIPTION: Performs a GET request to retrieve all external groups associated with a specific team in Grafana. Requires the 'teams.permissions:read' permission scope and proper bearer token authentication. The request accepts and expects JSON-formatted data, with the response including an array of group mappings for the team.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team_sync.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/teams/1/groups HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt
```

----------------------------------------

TITLE: Searching Service Accounts with Paging - Grafana HTTP API - HTTP
DESCRIPTION: This snippet demonstrates how to search for service accounts in Grafana using the HTTP API with support for paging and filtering. Basic authentication is required for On-Prem Grafana instances, and results are paginated using the 'perpage' and 'page' parameters. The request shows the necessary HTTP headers and URI structure for performing a filtered search for service accounts. The response sample illustrates the structure of the returned JSON payload, including totalCount, paged serviceAccounts, and pagination metadata.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/serviceaccounts/search?perpage=10&page=1&query=mygraf HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n{\n\t"totalCount": 2,\n\t"serviceAccounts": [\n\t\t{\n\t\t\t"id": 1,\n\t\t\t"name": "grafana",\n\t\t\t"login": "sa-grafana",\n\t\t\t"orgId": 1,\n\t\t\t"isDisabled": false,\n\t\t\t"role": "Viewer",\n\t\t\t"tokens": 0,\n\t\t\t"avatarUrl": "/avatar/85ec38023d90823d3e5b43ef35646af9",\n\t\t\t"accessControl": {\n\t\t\t\t"serviceaccounts:delete": true,\n\t\t\t\t"serviceaccounts:read": true,\n\t\t\t\t"serviceaccounts:write": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t"id": 2,\n\t\t\t"name": "test",\n\t\t\t"login": "sa-test",\n\t\t\t"orgId": 1,\n\t\t\t"isDisabled": false,\n\t\t\t"role": "Viewer",\n\t\t\t"tokens": 0,\n\t\t\t"avatarUrl": "/avatar/8ea890a677d6a223c591a1beea6ea9d2",\n\t\t\t"accessControl": {\n\t\t\t\t"serviceaccounts:delete": true,\n\t\t\t\t"serviceaccounts:read": true,\n\t\t\t\t"serviceaccounts:write": true\n\t\t\t}\n\t\t}\n\t],\n\t"page": 1,\n\t"perPage": 10\n}
```

----------------------------------------

TITLE: Provisioning Zipkin Data Source - Grafana (YAML)
DESCRIPTION: This YAML snippet demonstrates provisioning a Zipkin data source within Grafana’s provisioning framework. Dependencies include Grafana 6.0+ and access to a running Zipkin-compatible endpoint. Key configuration parameters include the data source name, URL, authentication, and advanced tracing-to-logs/metrics options such as 'datasourceUid', 'spanStartTimeShift', tags, queries, and spanBar display settings. The 'secureJsonData' section includes sensitive authentication credentials. Inputs must conform to Grafana's datasource provisioning schemas, and misconfiguration may cause data source connection or UI issues.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/zipkin/_index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: Zipkin
    type: zipkin
    uid: EbPG8fYoz
    url: http://localhost:16686
    access: proxy
    basicAuth: true
    basicAuthUser: my_user
    readOnly: true
    isDefault: false
    jsonData:
      tracesToLogsV2:
        # Field with an internal link pointing to a logs data source in Grafana.
        # datasourceUid value must match the uid value of the logs data source.
        datasourceUid: 'loki'
        spanStartTimeShift: '1h'
        spanEndTimeShift: '-1h'
        tags: ['job', 'instance', 'pod', 'namespace']
        filterByTraceID: false
        filterBySpanID: false
        customQuery: true
        query: 'method="$${__span.tags.method}"'
      tracesToMetrics:
        datasourceUid: 'prom'
        spanStartTimeShift: '1h'
        spanEndTimeShift: '-1h'
        tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
        queries:
          - name: 'Sample query'
            query: 'sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))'
      nodeGraph:
        enabled: true
      traceQuery:
        timeShiftEnabled: true
        spanStartTimeShift: '1h'
        spanEndTimeShift: '-1h'
      spanBar:
        type: 'None'
    secureJsonData:
      basicAuthPassword: my_password
```

----------------------------------------

TITLE: Configuring Descope OAuth Integration for Grafana
DESCRIPTION: Configuration settings for enabling Descope OAuth authentication in Grafana. Includes required parameters like client ID, secret, authorization endpoints, and scopes for proper OAuth2 flow implementation with PKCE and refresh token support.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
[auth.generic_oauth]
enabled = true
allow_sign_up = true
auto_login = false
team_ids =
allowed_organizations =
name = Descope
client_id = <Descope Project ID>
client_secret = <Descope Access Key>
scopes = openid profile email descope.claims descope.custom_claims
auth_url = https://api.descope.com/oauth2/v1/authorize
token_url = https://api.descope.com/oauth2/v1/token
api_url = https://api.descope.com/oauth2/v1/userinfo
use_pkce = true
use_refresh_token = true
```

----------------------------------------

TITLE: Using ErrorBoundary with Custom Fallback - React & Grafana UI - JSX
DESCRIPTION: Demonstrates how to import and use the ErrorBoundary component from Grafana UI, allowing child components to be wrapped in an error catcher. Utilizes render props to check for errors and conditionally display a customized Alert UI or the wrapped component. Requires '@grafana/ui' and React as dependencies. Inputs include children components, and the output is either the fallback UI or the normal rendering flow. Intended for robust error handling in React interfaces.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ErrorBoundary/ErrorBoundary.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { ErrorBoundary, Alert } from '@grafana/ui';\n\n<ErrorBoundary>\n  {({ error }) => {\n    if (error) {\n      return <Alert title={error.message} />;\n    }\n    return <Component />;\n  }}\n</ErrorBoundary>;
```

----------------------------------------

TITLE: Standard Bind DN and Password Configuration (ldap.toml)
DESCRIPTION: Shows the default method for configuring LDAP binding in `ldap.toml`. This requires specifying a read-only service account (`bind_dn`) and its password (`bind_password`). Grafana uses these credentials to perform an initial search for the logging-in user, then performs a second bind using the user's provided credentials for authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
```bash
bind_dn = "cn=admin,dc=grafana,dc=org"
bind_password = "grafana"
```
```

----------------------------------------

TITLE: Naming React Callback Props and Handlers
DESCRIPTION: Demonstrates the correct naming convention for React callback props and handlers using the 'on' prefix.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_7

LANGUAGE: tsx
CODE:
```
// bad
handleChange = () => {

};

render() {
  return (
    <MyComponent changed={this.handleChange} />
  );
}

// good
onChange = () => {

};

render() {
  return (
    <MyComponent onChange={this.onChange} />
  );
}
```

----------------------------------------

TITLE: SQL Completion Item Provider Interface
DESCRIPTION: Comprehensive interface for customizing SQL completion behavior including functions, operators, macros, and custom suggestions support.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-sql/src/components/query-editor-raw/README.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
export interface SQLCompletionItemProvider
  extends Omit<monacoTypes.languages.CompletionItemProvider, 'provideCompletionItems'> {
  supportedFunctions?: () => Array<{
    id: string;
    name: string;
  }>;

  supportedOperators?: () => Array<{
    id: string;
    operator: string;
    type: OperatorType;
  }>;

  supportedMacros?: () => Array<{
    id: string;
    name: string;
    type: MacroType;
    args: Array<string>;
  }>;

  customSuggestionKinds?: () => CustomSuggestionKind[];

  customStatementPlacement?: () => CustomStatementPlacement[];

  tables?: {
    resolve: () => Promise<TableDefinition[]>;
    parseName?: (t: LinkedToken) => string;
  };

  columns?: {
    resolve: (table: string) => Promise<ColumnDefinition[]>;
  };
}
```

----------------------------------------

TITLE: Querying Grafana Data Sources (Plaintext)
DESCRIPTION: Defines the `datasources:query` permission action required to query data sources within Grafana. Access is associated with data source scopes `datasources:*` and `datasources:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_23

LANGUAGE: plaintext
CODE:
```
`datasources:query`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>
```

----------------------------------------

TITLE: Deleting the Notification Policy Tree using Grafana REST API (HTTP)
DESCRIPTION: This HTTP code snippet documents the DELETE request to remove the entire notification policy tree in the Grafana backend. No parameters are required; success returns a 202 Accepted status with an empty Ack schema in the response. This endpoint is used to fully reset policies and is typically protected, so ensure correct authentication and permissions before usage. Expected input is a DELETE request and the response is a confirmation of acceptance (202).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_40

LANGUAGE: http
CODE:
```
DELETE /api/v1/provisioning/policies

```

----------------------------------------

TITLE: Configuring Storybook Metadata for Grid Component in MDX
DESCRIPTION: This snippet uses the imported `Meta` component from Storybook to configure the documentation page. The `title` prop sets the component's path in the Storybook navigation ('MDX|Grid'), and the `component` prop links the documentation to the actual `Grid` component, enabling features like props table generation via `ArgTypes`.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Grid/Grid.mdx#2025-04-23_snippet_1

LANGUAGE: mdx
CODE:
```
<Meta title="MDX|Grid" component={Grid} />
```

----------------------------------------

TITLE: Exporting Grafana Image Renderer Metrics in Prometheus Metrics Format - Prometheus
DESCRIPTION: This snippet exposes a series of Prometheus metrics capturing the duration of different steps in the Grafana image rendering pipeline and metadata about the browser used. The primary metric, 'grafana_image_renderer_step_duration_seconds', is a histogram reporting step durations with associated buckets, along with counters and sums for each step type. Another metric, 'grafana_image_renderer_browser_info', indicates the browser version in use. These metrics support monitoring and alerting for performance and compatibility. No external dependencies are required except for Prometheus or compatible monitoring solutions. Inputs are exported automatically by the renderer; outputs are scraped metrics usable by Prometheus. All lines conform to the expected Prometheus exposition format.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/monitoring/index.md#2025-04-23_snippet_1

LANGUAGE: prometheus
CODE:
```
# TYPE grafana_image_renderer_step_duration_seconds histogram
grafana_image_renderer_step_duration_seconds_bucket{le="0.3",step="launch"} 0
grafana_image_renderer_step_duration_seconds_bucket{le="0.5",step="launch"} 0
grafana_image_renderer_step_duration_seconds_bucket{le="1",step="launch"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="2",step="launch"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="3",step="launch"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="5",step="launch"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="+Inf",step="launch"} 1
grafana_image_renderer_step_duration_seconds_sum{step="launch"} 0.7914972
grafana_image_renderer_step_duration_seconds_count{step="launch"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="0.3",step="newPage"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="0.5",step="newPage"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="1",step="newPage"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="2",step="newPage"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="3",step="newPage"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="5",step="newPage"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="+Inf",step="newPage"} 1
grafana_image_renderer_step_duration_seconds_sum{step="newPage"} 0.2217868
grafana_image_renderer_step_duration_seconds_count{step="newPage"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="0.3",step="prepare"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="0.5",step="prepare"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="1",step="prepare"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="2",step="prepare"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="3",step="prepare"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="5",step="prepare"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="+Inf",step="prepare"} 1
grafana_image_renderer_step_duration_seconds_sum{step="prepare"} 0.0819274
grafana_image_renderer_step_duration_seconds_count{step="prepare"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="0.3",step="navigate"} 0
grafana_image_renderer_step_duration_seconds_bucket{le="0.5",step="navigate"} 0
grafana_image_renderer_step_duration_seconds_bucket{le="1",step="navigate"} 0
grafana_image_renderer_step_duration_seconds_bucket{le="2",step="navigate"} 0
grafana_image_renderer_step_duration_seconds_bucket{le="3",step="navigate"} 0
grafana_image_renderer_step_duration_seconds_bucket{le="5",step="navigate"} 0
grafana_image_renderer_step_duration_seconds_bucket{le="+Inf",step="navigate"} 1
grafana_image_renderer_step_duration_seconds_sum{step="navigate"} 15.3311258
grafana_image_renderer_step_duration_seconds_count{step="navigate"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="0.3",step="panelsRendered"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="0.5",step="panelsRendered"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="1",step="panelsRendered"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="2",step="panelsRendered"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="3",step="panelsRendered"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="5",step="panelsRendered"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="+Inf",step="panelsRendered"} 1
grafana_image_renderer_step_duration_seconds_sum{step="panelsRendered"} 0.0205577
grafana_image_renderer_step_duration_seconds_count{step="panelsRendered"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="0.3",step="screenshot"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="0.5",step="screenshot"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="1",step="screenshot"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="2",step="screenshot"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="3",step="screenshot"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="5",step="screenshot"} 1
grafana_image_renderer_step_duration_seconds_bucket{le="+Inf",step="screenshot"} 1
grafana_image_renderer_step_duration_seconds_sum{step="screenshot"} 0.2866623
grafana_image_renderer_step_duration_seconds_count{step="screenshot"} 1

# HELP grafana_image_renderer_browser_info A metric with a constant '1 value labeled by version of the browser in use
# TYPE grafana_image_renderer_browser_info gauge
grafana_image_renderer_browser_info{version="HeadlessChrome/79.0.3945.0"} 1
```

----------------------------------------

TITLE: Configuring Prometheus Scrape for Alertmanager Metrics (YAML)
DESCRIPTION: This YAML snippet gives a Prometheus scrape_config job for scraping metrics from an Alertmanager instance, including critical job parameters and endpoint targeting. It supports the collection of Alertmanager performance, notification, and health metrics, crucial for alerting system reliability. Required dependencies are Prometheus, network connectivity to the Alertmanager host, and reloading Prometheus after editing the config. Inputs are Prometheus scrape config parameters; outputs are Alertmanager metrics consumed and made queryable by Prometheus.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/meta-monitoring.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
- job_name: alertmanager\n  honor_timestamps: true\n  scrape_interval: 15s\n  scrape_timeout: 10s\n  metrics_path: /metrics\n  scheme: http\n  follow_redirects: true\n  static_configs:\n    - targets:\n        - alertmanager:9093\n
```

----------------------------------------

TITLE: Implementing Resizable Panes with useSplitter in React
DESCRIPTION: This snippet demonstrates how to use the useSplitter hook from @grafana/ui to create two resizable panes. It shows the setup of the hook with options and the rendering of the container, primary pane, splitter, and secondary pane using the returned props.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Splitter/useSplitter.mdx#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import { useSplitter } from '@grafana/ui';

const { containerProps, primaryProps, secondaryProps, splitterProps } = useSplitter({
  direction: 'row',
  initialSize: 0.5,
  dragPosition: 'end',
});

return (
  <div {...containerProps}>
    <div {...primaryProps}>
      <Box display="flex" grow={1} backgroundColor="primary" padding={2}>
        Primary
      </Box>
    </div>
    <div {...splitterProps} />
    <div {...secondaryProps}>
      <Box display="flex" grow={1} backgroundColor="primary" padding={2}>
        Secondary
      </Box>
    </div>
  </div>
);
```

----------------------------------------

TITLE: Using JMESPath for Role Mapping in Grafana GitHub OAuth
DESCRIPTION: Configuration using `role_attribute_path` employs a JMESPath expression to determine a user's Grafana role based on data from the UserInfo endpoint or GitHub teams retrieved via the `/api/user/teams` endpoint. The expression must resolve to a valid role: `None`, `Viewer`, `Editor`, `Admin`, or `GrafanaAdmin`. Requires understanding of JMESPath syntax.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_8

LANGUAGE: markdown
CODE:
```
[JMESPath](http://jmespath.org/examples.html)
```

LANGUAGE: http
CODE:
```
/api/user/teams
```

LANGUAGE: plaintext
CODE:
```
None, Viewer, Editor, Admin, GrafanaAdmin
```

----------------------------------------

TITLE: Querying Multiple Log Groups with OpenSearch SQL in CloudWatch
DESCRIPTION: Shows how to query multiple log groups simultaneously using OpenSearch SQL syntax in CloudWatch. The query counts exceptions across specified log groups within a time window.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/query-editor/index.md#2025-04-23_snippet_2

LANGUAGE: sql
CODE:
```
SELECT window.start, COUNT(*) AS exceptionCount
FROM `logGroups( logGroupIdentifier: ['LogGroup1', 'LogGroup2'])`
WHERE `@message` LIKE '%Exception%'
```

----------------------------------------

TITLE: Example JSON Payload for Grafana Admin Role Mapping
DESCRIPTION: Sample JSON payload from an OAuth2 provider containing a 'roles' array with 'admin'. This is used with specific Grafana configuration to grant the user Grafana server administrator privileges.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{
    ...
    "roles": [
        "admin",
    ],
    ...
}
```

----------------------------------------

TITLE: cURL Example of Auto User Creation in Grafana AuthProxy
DESCRIPTION: Demonstration of how Grafana automatically creates a new user when AuthProxy authentication sends a previously unknown username in the header.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
curl -H "X-WEBAUTH-USER: anthony" http://localhost:3000/api/user
{
    "email":"anthony",
    "name":"",
    "login":"anthony",
    "theme":"",
    "orgId":1,
    "isGrafanaAdmin":false
}
```

----------------------------------------

TITLE: Adding an External Group to a Team with HTTP API in HTTP
DESCRIPTION: Performs a POST operation to add an external group to a specified Grafana team. The bearer token must have 'teams.permissions:write' permission. The request body must be JSON with the 'groupId' parameter specifying the LDAP-style group name. The request expects and responds with JSON; errors are returned for duplicates or invalid teams.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team_sync.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
POST /api/teams/1/groups HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer YWRtaW46YWRtaW4=\n\n{\n  \"groupId\": \"cn=editors,ou=groups,dc=grafana,dc=org\"\n}
```

----------------------------------------

TITLE: Mapping a Single Grafana Role to All Users (INI)
DESCRIPTION: This INI configuration assigns the 'Viewer' role to every user authenticating via Google OAuth, regardless of their specific attributes or group memberships. It uses a constant string value in the `role_attribute_path` JMESPath expression and requires `skip_org_role_sync = false` for the mapping to be applied.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/google/index.md#2025-04-23_snippet_7

LANGUAGE: ini
CODE:
```
```ini
role_attribute_path = "'Viewer'"
skip_org_role_sync = false
```
```

----------------------------------------

TITLE: Enabling Passwordless Authentication in Grafana (INI)
DESCRIPTION: This configuration snippet enables the experimental passwordless authentication feature in Grafana. Setting `enabled = true` under the `[auth.passwordless]` section activates authentication via magic links or one-time passwords sent through email. Requires the `passwordlessMagicLinkAuthentication` feature toggle to be enabled.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/passwordless/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
[auth.passwordless]
enabled = true
```

----------------------------------------

TITLE: Enabling Creatable Options in Select with React and @grafana/ui (JSX)
DESCRIPTION: Shows how to use the Select component with creatable options by enabling the allowCustomValue prop and handling value creation in the onCreateOption callback. Requires @grafana/ui's Select and React's useState. Inputs include user-defined custom option values; output is updated state via setValue when a custom option is created. The key limitation is ensuring allowCustomValue is true and managing the creation logic.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Select/Select.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
import { Select } from "@grafana/ui";

const SelectComponent = () => {
  const [value, setValue] = useState<SelectableValue<number>>();

  return (
    <Select
      options={option}
      value={value}
      allowCustomValue
      onCreateOption={customValue => {
        setValue(customValue);
      }}
    />
  );
};
```

----------------------------------------

TITLE: Configuring Provisioning Directory Path in Grafana - INI
DESCRIPTION: This snippet configures the provisioning directory path by setting the 'provisioning' key in the 'paths' section of Grafana's main configuration file. To use, update <path to config files> with your provisioning directory's path. This is a prerequisite for using provisioning via configuration files and requires Grafana 7.0 or later. The file is typically named grafana.ini and must be edited with appropriate permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/provision-dashboards-and-data-sources/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[paths]\nprovisioning = <path to config files>\n
```

----------------------------------------

TITLE: Provisioning Google Cloud Monitoring Data Source with JWT Key File (YAML)
DESCRIPTION: This YAML snippet configures the Google Cloud Monitoring (Stackdriver) data source in Grafana using a service account JWT authentication method. It requires the service account's client email, a token URI, and the complete private key (in secureJsonData) in PEM format. The 'jsonData' section configures the main connection, while 'secureJsonData' stores secret material. The input is a Grafana configuration file, and the output is a fully provisioned Cloud Monitoring data source. Ensure the 'type' is set to 'stackdriver' and Grafana is restarted after changing configuration files.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/google-cloud-monitoring/_index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: 1\n\ndatasources:\n  - name: Google Cloud Monitoring\n    type: stackdriver\n    access: proxy\n    jsonData:\n      tokenUri: https://oauth2.googleapis.com/token\n      clientEmail: stackdriver@myproject.iam.gserviceaccount.com\n      authenticationType: jwt\n      defaultProject: my-project-name\n    secureJsonData:\n      privateKey: |\n        -----BEGIN PRIVATE KEY-----\n        POSEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCb1u1Srw8ICYHS\n        ...\n        yA+23427282348234=\n        -----END PRIVATE KEY-----
```

----------------------------------------

TITLE: Initiating Group Mappings in ldap.toml (Bash)
DESCRIPTION: This snippet shows the beginning of the group mapping section within the `ldap.toml` file. The `[[servers.group_mappings]]` directive marks the start of a block where specific LDAP groups can be mapped to Grafana organization roles. Subsequent lines within this block (not shown in the snippet) would define these mappings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
```bash
[[servers.group_mappings]]
```
```

----------------------------------------

TITLE: Deleting Snapshot by Key via Grafana HTTP API (HTTP)
DESCRIPTION: Illustrates the DELETE HTTP request structure for removing a dashboard snapshot by its unique key. The endpoint requires authorization and is intended for authenticated cleanup of dashboard snapshots from the server.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
DELETE /api/snapshots/YYYYYYY HTTP/1.1\nAccept: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Defining and Assigning Custom/Fixed Roles to Grafana Teams via YAML Provisioning
DESCRIPTION: This YAML configuration example demonstrates how to define a custom role 'custom:users:writer' with read/write permissions for users and assign both this custom role and the fixed role 'fixed:users:writer' to the 'user writers' and 'user admins' teams within organization ID 1 using Grafana's provisioning system. The `apiVersion`, `roles`, and `teams` sections structure the configuration. Requires Grafana provisioning to be enabled and the specified teams to exist.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/assign-rbac-roles/index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
# config file version
apiVersion: 2

# Roles to insert/update in the database
roles:
  - name: 'custom:users:writer'
    description: 'List/update other users in the organization'
    version: 1
    global: true
    permissions:
      - action: 'org.users:read'
        scope: 'users:*'
      - action: 'org.users:write'
        scope: 'users:*'

# Assignments to teams
teams:
  - name: 'user writers'
    orgId: 1
    roles:
      # Custom role assignment
      - name: 'custom:users:writer'
        global: true
      # Fixed role assignment
      - name: 'fixed:users:writer'
        global: true
  - name: 'user admins'
    orgId: 1
    roles:
      - name: 'custom:users:writer'
        global: true
      - name: 'fixed:users:writer'
        global: true
```

----------------------------------------

TITLE: Provisioning InfluxDB 2.x Data Source with Flux in Grafana
DESCRIPTION: This YAML snippet shows how to provision an InfluxDB 2.x data source using Flux query language in Grafana. It specifies the version, organization, default bucket, and includes a secure token for authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/configure-influxdb-data-source/_index.md#2025-04-23_snippet_2

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: InfluxDB_v2_Flux
    type: influxdb
    access: proxy
    url: http://localhost:8086
    jsonData:
      version: Flux
      organization: organization
      defaultBucket: bucket
      tlsSkipVerify: true
    secureJsonData:
      token: token
```

----------------------------------------

TITLE: Configuring Grafana Service with Docker Compose
DESCRIPTION: Defines a Grafana service within a `docker-compose.yml` file. Specifies the image, container name, restart policy, environment variables (including plugins to install), port mapping, and volume for persistent storage.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_10

LANGUAGE: yml
CODE:
```
version: '3.8'
services:
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - TERM=linux
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-polystat-panel
    ports:
      - '3000:3000'
    volumes:
      - 'grafana_storage:/var/lib/grafana'
volumes:
  grafana_storage: {}
```

----------------------------------------

TITLE: Exporting Installed Plugins via Grafana HTTP API - Shell
DESCRIPTION: This shell snippet retrieves the list of plugins installed on your Grafana OSS/Enterprise instance using an authenticated HTTP GET request with curl and processes the response using jq. It filters community and externally signed plugins, extracts relevant metadata, and writes the resulting objects to plugins.json. Dependencies include environment variables for authentication and the jq command line tool. Input parameters: $GRAFANA_SOURCE_TOKEN (source token), $GRAFANA_ONPREM_INSTANCE_URL (base URL). Output: plugins.json containing the array of plugin objects. This script must be executed on a system with curl and jq installed, and is limited to plugins meeting the signature filter criteria.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
response=$(curl -s -H "Accept: application/json" -H "Authorization: Bearer $GRAFANA_SOURCE_TOKEN" "${GRAFANA_ONPREM_INSTANCE_URL}/api/plugins")

plugins=$(echo $response | jq '[.[] | select(.signatureType == "community" or (.signatureType != "internal" and .signatureType != "")) | {name: .id, version: .info.version}]')

echo "$plugins" > plugins.json
```

----------------------------------------

TITLE: Installing Grafana Enterprise via APT - Bash
DESCRIPTION: Installs the latest Grafana Enterprise edition using apt. Dependencies: Repository for Enterprise must be present. Input: None. Output: Installs grafana-enterprise with optional full-feature unlocking via license.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
# Installs the latest Enterprise release:
sudo apt-get install grafana-enterprise
```

----------------------------------------

TITLE: Defining IAM Trust Policy for Grafana Assume Role (JSON)
DESCRIPTION: This JSON defines an AWS IAM trust policy statement required for the 'Grafana Assume Role' authentication method. It grants the 'sts:AssumeRole' permission to Grafana's AWS account principal, conditioned on the presence of a specific 'sts:ExternalId'. This ensures that Grafana can only assume the role if it provides the correct unique external ID associated with the user's account.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/aws-authentication/index.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "AWS": {Grafana's AWS Account}
            },
            "Action": "sts:AssumeRole",
            "Condition": {
                "StringEquals": {
                    "sts:ExternalId": {External ID unique to your account}
                }
            }
        }
    ]
}
```

----------------------------------------

TITLE: Inserting a New Annotation via Grafana HTTP API - HTTP+JSON
DESCRIPTION: Provides the structure for creating a new annotation using a POST request to the Grafana API. The request must include a JSON body specifying dashboardUID, panelId, time, timeEnd, tags, and text. The endpoint responds with a confirmation message and the new annotation id if successful.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
POST /api/annotations HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n  "dashboardUID":"jcIIG-07z",\n  "panelId":1,\n  "time":1507037197339,\n  "timeEnd":1507180805056,\n  "tags":["tag1","tag2"],\n  "text":"Annotation Description"\n}
```

----------------------------------------

TITLE: Applying Kubernetes Manifest using Bash
DESCRIPTION: Applies the Kubernetes resource definitions contained within the `grafana.yaml` file to the cluster using `kubectl apply`. The `--namespace=my-grafana` flag ensures these resources are created within the designated 'my-grafana' namespace. This command instructs the Kubernetes API server to create or update the PVC, Deployment, and Service objects defined in the manifest. Requires `kubectl` installed and configured, and the `grafana.yaml` file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
kubectl apply -f grafana.yaml --namespace=my-grafana
```

----------------------------------------

TITLE: Configuring Telegraf WebSocket Output for Grafana Live Streaming (TOML)
DESCRIPTION: This Telegraf configuration demonstrates using the WebSocket output plugin (`outputs.websocket`), available since Telegraf v1.19.0, for potentially higher frequency updates (500ms `interval` and `flush_interval`) and reduced Grafana backend CPU usage compared to HTTP. It collects total CPU metrics (`inputs.cpu`) and sends them in InfluxDB line protocol format (`data_format = "influx"`) to Grafana's WebSocket live push endpoint (`ws://localhost:3000/api/live/push/custom_stream_id`). Authentication requires replacing `<Your API Key>` with a Grafana Admin API key in the Authorization Bearer token header. The `custom_stream_id` defines the Grafana Live channel namespace.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/stream-metrics-from-telegraf-to-grafana/index.md#2025-04-23_snippet_1

LANGUAGE: toml
CODE:
```
```toml
[agent]
  interval = "500ms"
  flush_interval = "500ms"

[[inputs.cpu]]
  percpu = false
  totalcpu = true

[[outputs.websocket]]
  url = "ws://localhost:3000/api/live/push/custom_stream_id"
  data_format = "influx"
  [outputs.websocket.headers]
    Authorization = "Bearer <Your API Key>"
```
```

----------------------------------------

TITLE: Querying Filtered Elasticsearch Terms for Grafana Variable (JSON)
DESCRIPTION: This JSON query retrieves distinct values (terms) from the `hostname` field in Elasticsearch for a Grafana template variable. It applies an additional filter specified by a `<Lucene query>` and respects the current dashboard time range. This allows for more specific filtering when populating variables.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/elasticsearch/template-variables/index.md#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
`{"find": "terms", "field": "hostname", "query": '<Lucene query>'}`
```

----------------------------------------

TITLE: Setting Severity Label based on Query Value
DESCRIPTION: This Go template defines a dynamic `severity` label for a Grafana alert. It uses conditional logic (`if/else if/else`) with the `gt` (greater than) function to compare the value of query 'A' against thresholds, assigning 'critical', 'high', 'medium', or 'low' accordingly. This allows for routing alerts based on severity.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_14

LANGUAGE: gotemplate
CODE:
```
{{- if (gt $values.A.Value 90.0) -}}critical
{{- else if (gt $values.A.Value 80.0) -}}high
{{- else if (gt $values.A.Value 60.0) -}}medium
{{- else -}}low
{{- end -}}
```

----------------------------------------

TITLE: Time Series Query for SQL Databases in Grafana v8.0
DESCRIPTION: Example SQL query demonstrating the time series format in Grafana v8.0 for PostgreSQL, MySQL, and Microsoft SQL Server data sources. This query selects time-grouped data along with average values and hostname, which may require adjustments to visualization after upgrading.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v8.0/index.md#2025-04-23_snippet_0

LANGUAGE: sql
CODE:
```
SELECT
  $__timeGroup("createdAt",'10m'),
  avg(value) as "value",
  hostname
FROM grafana_metric
WHERE $__timeFilter("createdAt")
GROUP BY time, hostname
ORDER BY time
```

----------------------------------------

TITLE: Using File Provider for Secure Database Password in Grafana
DESCRIPTION: Example of using the file provider in Grafana configuration to securely read the database password from an external file instead of storing it directly in the configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_4

LANGUAGE: ini
CODE:
```
[database]
password = $__file{/etc/secrets/gf_sql_password}
```

----------------------------------------

TITLE: Deleting a Grafana User via Admin HTTP API - HTTP
DESCRIPTION: Performs an HTTP DELETE request to remove a user account from Grafana using the admin API. Basic Authentication and users:delete permission are required for access. A successful deletion yields a JSON confirmation message.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_12

LANGUAGE: http
CODE:
```
DELETE /api/admin/users/2 HTTP/1.1\nAccept: application/json\nContent-Type: application/json
```

LANGUAGE: json
CODE:
```
{"message": "User deleted"}
```

----------------------------------------

TITLE: POSIX Schema Configuration for Group Search (ldap.toml)
DESCRIPTION: Provides configuration options for `ldap.toml` specifically for LDAP servers following a POSIX schema where the `memberOf` attribute is not available. It defines `group_search_filter` to find groups based on a user attribute (like `memberUid`), `group_search_base_dns` to specify where to search for groups, and `group_search_filter_user_attribute` to indicate which user attribute (e.g., `uid`) should replace `%s` in the filter.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
```bash
## Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available)
group_search_filter = "(&(objectClass=posixGroup)(memberUid=%s))"
## An array of the base DNs to search through for groups. Typically uses ou=groups
group_search_base_dns = ["ou=groups,dc=grafana,dc=org"]
## the %s in the search filter will be replaced with the attribute defined below
group_search_filter_user_attribute = "uid"
```
```

----------------------------------------

TITLE: Role Mapping Example for GitHub Organizations
DESCRIPTION: Configuration example showing how to map GitHub team memberships to different Grafana organization roles. This maps specific GitHub teams to different Grafana organizations with appropriate permission levels.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
org_mapping = @my-github-organization/my-github-team-1:org_foo:Viewer @my-github-organization/my-github-team-2:org_bar:Editor *:org_baz:Editor
```

----------------------------------------

TITLE: Running API Generation Command
DESCRIPTION: Command to execute the API client generation script.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/api/README.md#2025-04-23_snippet_3

LANGUAGE: jsx
CODE:
```
yarn generate-apis
```

----------------------------------------

TITLE: Example Usage of FieldValidationMessage in a Custom Form Field (TSX)
DESCRIPTION: This TSX snippet demonstrates how to integrate the `FormValidationMessage` component within a custom form field structure. It defines a functional React component `CustomFormField` which includes a label, an input element, and conditionally renders the `FormValidationMessage` with the text 'Invalid input' based on the truthiness of an 'error' variable. This pattern is typical for showing validation feedback directly under the relevant input.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/FieldValidationMessage.mdx#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
export const CustomFormField = () => {
  return (
    <div>
      Label
      <div>
        <input />
        {error && <FormValidationMessage>Invalid input</FormValidationMessage>}
      </div>
    </div>
  );
};
```

----------------------------------------

TITLE: Example GitLab OAuth Configuration in Grafana (Bash/INI)
DESCRIPTION: This configuration block, presented in a Bash context but intended for Grafana's INI file, shows a complete example for the `[auth.gitlab]` section. It enables GitLab authentication, allows sign-up, sets client ID/secret, defines OAuth scopes, specifies authorization/token/API URLs, configures role mapping based on group membership ('example-group' grants Editor, others Viewer), lists allowed groups and domains, and sets security options like TLS verification, PKCE, and refresh token usage.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/gitlab/index.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
[auth.gitlab]
enabled = true
allow_sign_up = true
auto_login = false
client_id = YOUR_GITLAB_APPLICATION_ID
client_secret = YOUR_GITLAB_APPLICATION_SECRET
scopes = openid email profile
auth_url = https://gitlab.com/oauth/authorize
token_url = https://gitlab.com/oauth/token
api_url = https://gitlab.com/api/v4
role_attribute_path = contains(groups[*], 'example-group') && 'Editor' || 'Viewer'
role_attribute_strict = false
allow_assign_grafana_admin = false
allowed_groups = ["admins", "software engineers", "developers/frontend"]
allowed_domains = mycompany.com mycompany.org
tls_skip_verify_insecure = false
use_pkce = true
use_refresh_token = true
```

----------------------------------------

TITLE: PostgreSQL Query Builder Mode Example
DESCRIPTION: Example displaying the structure of a PostgreSQL query built using the visual Builder mode. The builder supports table selection, data operations, column filtering, grouping, ordering and limit configurations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_0

LANGUAGE: SQL
CODE:
```
SELECT column
FROM table
WHERE condition
GROUP BY column
ORDER BY column ASC/DESC
LIMIT 50
```

----------------------------------------

TITLE: Example Trace JSON Structure for Tempo
DESCRIPTION: This example demonstrates the structure of a JSON trace file that can be uploaded to Grafana Tempo. It contains a single trace with resource attributes, instrumentation library spans, and details including trace ID, span ID, timestamps, and HTTP request information.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/tempo/traces-in-grafana/json-trace-file.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "batches": [
    {
      "resource": {
        "attributes": [
          { "key": "service.name", "value": { "stringValue": "db" } },
          { "key": "job", "value": { "stringValue": "tns/db" } },
          { "key": "opencensus.exporterversion", "value": { "stringValue": "Jaeger-Go-2.22.1" } },
          { "key": "host.name", "value": { "stringValue": "63d16772b4a2" } },
          { "key": "ip", "value": { "stringValue": "0.0.0.0" } },
          { "key": "client-uuid", "value": { "stringValue": "39fb01637a579639" } }
        ]
      },
      "instrumentationLibrarySpans": [
        {
          "instrumentationLibrary": {},
          "spans": [
            {
              "traceId": "AAAAAAAAAABguiq7RPE+rg==",
              "spanId": "cmteMBAvwNA=",
              "parentSpanId": "OY8PIaPbma4=",
              "name": "HTTP GET - root",
              "kind": "SPAN_KIND_SERVER",
              "startTimeUnixNano": "1627471657255809000",
              "endTimeUnixNano": "1627471657256268000",
              "attributes": [
                { "key": "http.status_code", "value": { "intValue": "200" } },
                { "key": "http.method", "value": { "stringValue": "GET" } },
                { "key": "http.url", "value": { "stringValue": "/" } },
                { "key": "component", "value": { "stringValue": "net/http" } }
              ],
              "status": {}
            }
          ]
        }
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Syntax Example for Accessing Vault K/V Secrets
DESCRIPTION: Demonstrates the Grafana variable expansion syntax (`$__vault{<argument>}`) for retrieving a value from a Vault Key/Value (version 2) secrets engine. The argument specifies the engine (`kv`), the secret path (`secret/grafana/smtp`), and the field name (`username`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/integrate-with-hashicorp-vault/index.md#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
$__vault{kv:secret/grafana/smtp:username}
```

----------------------------------------

TITLE: Specifying Custom Chrome/Chromium Binary - JSON
DESCRIPTION: Configures rendering.chromeBin in JSON to set a custom location for the Chrome/Chromium browser binary used for image rendering. Ensures the binary is accessible to the rendering service process and compatible with Grafana image rendering.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_30

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "chromeBin": "/usr/bin/chromium-browser"
  }
}
```

----------------------------------------

TITLE: Initializing MultiSelect Component for Multiple Selections with React and @grafana/ui (TSX)
DESCRIPTION: Shows how to use the MultiSelect component to handle multiple selections at once in React. Requires MultiSelect from @grafana/ui and React useState. Inputs are options and selected values array; output is an updated selected values array passed to onChange handler. Useful for UIs requiring multi-value selection by the user.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Select/Select.mdx#2025-04-23_snippet_5

LANGUAGE: tsx
CODE:
```
import { MultiSelect } from '@grafana/ui';

const multiSelect = () => {
  const [value, setValue] = useState<Array<SelectableValue<string>>>([]);

  return (
    <>
      <MultiSelect
        options={options}
        value={value}
        onChange={(v) => {
          setValue(v);
        }}
      />
    </>
  );
};
```

----------------------------------------

TITLE: Rolling Back Deployment to Specific Revision with Kubectl (Bash)
DESCRIPTION: Uses `kubectl rollout undo` to revert a deployment ('grafana') in a given namespace ('my-grafana') to a previous state recorded in its revision history. The `--to-revision` flag specifies the target revision number (e.g., 1) to roll back to.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_22

LANGUAGE: bash
CODE:
```
kubectl rollout undo deployment grafana --to-revision=1 --namespace=my-grafana
```

----------------------------------------

TITLE: Creating an Alert Rule via Grafana HTTP API (HTTP)
DESCRIPTION: This HTTP request demonstrates how to create a new alert rule by sending a POST request to the /api/v1/provisioning/alert-rules endpoint. The payload includes all mandatory fields such as title, ruleGroup, folderUID, alert conditions, data queries, and organizational context. Dependencies include an active Grafana instance with the appropriate alerting settings and a valid API token supplied in the Authorization header. The request should use application/json for both Accept and Content-Type headers, and responds with a standard confirmation and created resource attributes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
POST /api/v1/provisioning/alert-rules
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "title": "TEST-API_1",
  "ruleGroup": "API",
  "folderUID": "SET_FOLDER_UID",
  "noDataState": "OK",
  "execErrState": "OK",
  "for": "5m",
  "orgId": 1,
  "uid": "",
  "condition": "B",
  "annotations": {
    "summary": "test_api_1"
  },
  "labels": {
    "API": "test1"
  },
  "data": [
    {
      "refId": "A",
      "queryType": "",
      "relativeTimeRange": {
        "from": 600,
        "to": 0
      },
      "datasourceUid": "XXXXXXXXX-XXXXXXXXX-XXXXXXXXXX",
      "model": {
        "expr": "up",
        "hide": false,
        "intervalMs": 1000,
        "maxDataPoints": 43200,
        "refId": "A"
      }
    },
    {
      "refId": "B",
      "queryType": "",
      "relativeTimeRange": {
        "from": 0,
        "to": 0
      },
      "datasourceUid": "-100",
      "model": {
        "conditions": [
          {
            "evaluator": {
              "params": [6],
              "type": "gt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": ["A"]
            },
            "reducer": {
              "params": [],
              "type": "last"
            },
            "type": "query"
          }
        ],
        "datasource": {
          "type": "__expr__",
          "uid": "-100"
        },
        "hide": false,
        "intervalMs": 1000,
        "maxDataPoints": 43200,
        "refId": "B",
        "type": "classic_conditions"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Configuring Single Logout for Keycloak in Grafana (INI)
DESCRIPTION: Grafana configuration setting to enable Single Logout (SLO) with Keycloak. The `signout_redirect_url` points to the Keycloak logout endpoint and includes a `post_logout_redirect_uri` parameter to redirect the user back to the Grafana login page after successful Keycloak logout. The redirect URI needs to be URL-encoded.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_6

LANGUAGE: ini
CODE:
```
[auth.generic_oauth]
signout_redirect_url = https://<PROVIDER_DOMAIN>/auth/realms/<REALM_NAME>/protocol/openid-connect/logout?post_logout_redirect_uri=https%3A%2F%2F<GRAFANA_DOMAIN>%2Flogin
```

----------------------------------------

TITLE: Defining Variables in TypeScript
DESCRIPTION: Shows the correct way to name variables using camelCase in TypeScript.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
// bad
const QueryTargets = [];
// bad
const query_targets = [];

// good
const queryTargets = [];
```

----------------------------------------

TITLE: Configuring Grafana Systemd Service Unit in Ini
DESCRIPTION: Defines the systemd service configuration for Grafana within the `/etc/systemd/system/grafana-server.service` file. It specifies the service description, dependencies (`After=network.target`), the user (`grafana`) and group (`users`) to run as, the command to start the server (`ExecStart`) including paths to the binary, config file, and homepath, restart policy (`Restart=on-failure`), and the target to enable it (`WantedBy=multi-user.target`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_9

LANGUAGE: ini
CODE:
```
[Unit]
Description=Grafana Server
After=network.target

[Service]
Type=simple
User=grafana
Group=users
ExecStart=/usr/local/grafana/bin/grafana server --config=/usr/local/grafana/conf/grafana.ini --homepath=/usr/local/grafana
Restart=on-failure

[Install]
WantedBy=multi-user.target
```

----------------------------------------

TITLE: Configuring Auth Proxy in Grafana.ini
DESCRIPTION: Configuration settings for enabling and customizing auth proxy authentication in Grafana's configuration file. Controls behavior like auto sign-up, header names, sync intervals, and IP whitelisting.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
[auth.proxy]
# Defaults to false, but set to true to enable this feature
enabled = true
# HTTP Header name that will contain the username or email
header_name = X-WEBAUTH-USER
# HTTP Header property, defaults to `username` but can also be `email`
header_property = username
# Set to `true` to enable auto sign up of users who do not exist in Grafana DB. Defaults to `true`.
auto_sign_up = true
# Define cache time to live in minutes
# If combined with Grafana LDAP integration it is also the sync interval
# Set to 0 to always fetch and sync the latest user data
sync_ttl = 15
# Limit where auth proxy requests come from by configuring a list of IP addresses.
# This can be used to prevent users spoofing the X-WEBAUTH-USER header.
# Example `whitelist = 192.168.1.1, 192.168.1.0/24, 2001::23, 2001::0/120`
whitelist =
# Optionally define more headers to sync other user attributes
# Example `headers = Name:X-WEBAUTH-NAME Role:X-WEBAUTH-ROLE Email:X-WEBAUTH-EMAIL Groups:X-WEBAUTH-GROUPS`
headers =
# Non-ASCII strings in header values are encoded using quoted-printable encoding
;headers_encoded = false
# Check out docs on this for more details on the below setting
enable_login_token = false
```

----------------------------------------

TITLE: Setting HTTPS Certificate and Key Files - JSON
DESCRIPTION: Assigns paths to the SSL/TLS certificate and key in the JSON config for the image renderer. These paths are used to initialize the HTTPS server. Both 'certFile' and 'certKey' are required for HTTPS mode.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_16

LANGUAGE: json
CODE:
```
{
  "service": {
    "certFile": "./path/to/cert",
    "certKey": "./path/to/key"
  }
}
```

----------------------------------------

TITLE: Configuring SAML SSO Settings using Grafana Terraform Provider
DESCRIPTION: Demonstrates configuring Grafana SAML SSO settings using the `grafana_sso_settings` Terraform resource (available in preview). It mirrors the INI configuration example, setting parameters like certificate paths, IdP metadata, assertion attributes, role mappings, organization mappings, and allowed organizations via Terraform HCL. Requires the Grafana Terraform provider v2.17.0+ and the `ssoSettingsSAML` feature toggle in Grafana v11.1+.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_18

LANGUAGE: terraform
CODE:
```
resource "grafana_sso_settings" "saml_sso_settings" {
  provider_name = "saml"
  saml_settings {
    name                       = "SAML"
    auto_login                 = false
    certificate_path           = "/path/to/certificate.cert"
    private_key_path           = "/path/to/private_key.pem"
    idp_metadata_path          = "/my/metadata.xml"
    max_issue_delay            = "90s"
    metadata_valid_duration    = "48h"
    assertion_attribute_name   = "displayName"
    assertion_attribute_login  = "mail"
    assertion_attribute_email  = "mail"
    assertion_attribute_groups = "Group"
    assertion_attribute_role   = "Role"
    assertion_attribute_org    = "Org"
    role_values_editor         = "editor, developer"
    role_values_admin          = "admin, operator"
    role_values_grafana_admin  = "superadmin"
    org_mapping                = "Engineering:2:Editor, Engineering:3:Viewer, Sales:3:Editor, *:1:Editor"
    allowed_organizations      = "Engineering, Sales"
  }
}
```

----------------------------------------

TITLE: Using Controlled Context Menu in React (JSX)
DESCRIPTION: This snippet demonstrates how to use the ContextMenu component in a controlled manner by specifying the menu's location (x, y), the items to display, and providing an onClose handler. It requires the ContextMenu component from the local module. The menu structure supports nested items and expects the parent to manage open/close state. The component receives positional props and an items array—each item may include a nested items array. Returns a menu at the given coordinates when rendered.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ContextMenu/ContextMenu.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<ContextMenu
  x={10}
  y={11}
  onClose={() => {}}
  items={[{ label: 'Test', items: [{ label: 'First' }, { label: 'Second' }] }]}
/>
```

----------------------------------------

TITLE: Configuring User-Assigned Managed Identity in Grafana Server Configuration
DESCRIPTION: INI configuration for enabling a specific user-assigned Managed Identity in Grafana's server configuration. Includes the client ID of the user-assigned identity to be used instead of the default system-assigned identity.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_5

LANGUAGE: ini
CODE:
```
[azure]
managed_identity_enabled = true
managed_identity_client_id = USER_ASSIGNED_IDENTITY_CLIENT_ID
```

----------------------------------------

TITLE: Displaying Box Component Property Table in Storybook MDX
DESCRIPTION: Renders the ArgTypes table for the Box component within Storybook documentation, allowing users to view all configurable props and their types. Depends on Storybook's ArgTypes rendering component and the Box component's prop definitions. The output is a dynamic prop table that updates as Box's type annotations change.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Box/Box.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
<ArgTypes of={Box} />
```

----------------------------------------

TITLE: Organization Role Mapping Configuration for GitLab Integration
DESCRIPTION: Configuration example showing how to map GitLab group memberships to specific organization roles in Grafana. This configuration grants different roles in multiple Grafana organizations based on GitLab group membership.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/gitlab/index.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
org_mapping = group-1:org_foo:Viewer groupd-1:org_bar:Editor *:org_baz:Editor
```

----------------------------------------

TITLE: Updating Viewer Role for Reports Permissions using Bash, cURL, and jq (bash)
DESCRIPTION: This bash script enables the 'basic_viewer' Grafana role to create and manage reports by programmatically adding the required permissions using cURL, jq, and the HTTP API. The script fetches the current role, strips metadata, increments the version, appends new permissions (create, read, write, send for reports), and uploads the updated configuration. Inputs include endpoint, Bearer token, and jq; output is a modified role granting the new capabilities. Be cautious: missing jq or malformed API details will result in errors.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
# Fetch the role, modify it to add the desired permissions and increment its version
curl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' \
  -X GET '<grafana_url>/api/access-control/roles/basic_viewer' | \
  jq 'del(.created)| del(.updated) | del(.permissions[].created) | del(.permissions[].updated) | .version += 1' | \
  jq '.permissions += [{"action": "reports:create"}, {"action": "reports:read", "scope": "reports:*"}, {"action": "reports:write", "scope": "reports:*"}, {"action": "reports:send", "scope": "reports:*"}]' > /tmp/basic_viewer.json

# Update the role
curl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' -H 'Content-Type: application/json' \
  -X PUT-d @/tmp/basic_viewer.json '<grafana_url>/api/access-control/roles/basic_viewer'
```

----------------------------------------

TITLE: Configuring Okta OIDC Authentication in Grafana - INI Configuration - ini
DESCRIPTION: This snippet demonstrates a minimally functioning [auth.okta] INI configuration section for enabling Okta OIDC authentication in Grafana. It specifies required parameters like client_id, scope, URLs for auth, token, and user info, and role/group mapping attributes. To use, copy this section into your Grafana config file, replacing placeholder values (e.g., <client id>) with your actual Okta details. The configuration enables sign-up, associates Okta groups and custom attributes, and enforces strict role assignment; all fields must match your Okta app and Grafana needs.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/okta/index.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[auth.okta]
name = Okta
icon = okta
enabled = true
allow_sign_up = true
client_id = <client id>
scopes = openid profile email offline_access
auth_url = https://<okta tenant id>.okta.com/oauth2/v1/authorize
token_url = https://<okta tenant id>.okta.com/oauth2/v1/token
api_url = https://<okta tenant id>.okta.com/oauth2/v1/userinfo
role_attribute_path = grafana_role
role_attribute_strict = true
allowed_groups = "Example::DevOps" "Example::Dev" "Example::QA"
```

----------------------------------------

TITLE: Updating Folder Permissions in Grafana HTTP API
DESCRIPTION: This HTTP POST request updates permissions for a folder. It removes existing permissions if not included in the request. Requires 'folders.permissions:write' action with 'folders:*' scope.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder_permissions.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
POST /api/folders/nErXDvCkzz/permissions
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
{
  "items": [
    {
      "role": "Viewer",
      "permission": 1
    },
    {
      "role": "Editor",
      "permission": 2
    },
    {
      "teamId": 1,
      "permission": 1
    },
    {
      "userId": 11,
      "permission": 4
    }
  ]
}
```

----------------------------------------

TITLE: Required Field with Synchronous Custom Validation (JavaScript/JSX)
DESCRIPTION: Demonstrates defining field validation with both required errors and custom (synchronous) logic, returning custom error messages based on validation type. Useful for differentiating error reporting within forms. Depends on react-hook-form’s validation system and Form, Field, Input UI elements.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_10

LANGUAGE: jsx
CODE:
```
<Form ...>{
  ({register, errors}) => (
    <>
      <Field invalid={!!errors.name} error={errors.name?.message }
      <Input
        defaultValue={default.name}
        {...register("name", {
          required: 'Name is required',
          validation: v => {
            return v !== 'John' && 'Name must be John'
          },
        )}
      />
    </>
  )}
</Form>
```

----------------------------------------

TITLE: Writing Grafana Data Source Caching Settings (Plaintext)
DESCRIPTION: Defines the `datasources.caching:write` permission action required to update data source query caching settings in Grafana. This capability is linked to data source scopes `datasources:*` and `datasources:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_15

LANGUAGE: plaintext
CODE:
```
`datasources.caching:write`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>
```

----------------------------------------

TITLE: Partially Updating Current User Preferences via HTTP PATCH - HTTP
DESCRIPTION: Allows partial update of one or more user preference fields using PATCH, without changing other preference settings. Only the provided fields, e.g., theme, will be updated. Requires Bearer token and JSON body containing only preferences to update. Use when only some aspects of a user's preferences need to change without resetting unspecified values.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
PATCH /api/user/preferences HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  "theme": "dark"\n}
```

----------------------------------------

TITLE: Provisioning RBAC Roles and Team Assignments - Grafana YAML Example
DESCRIPTION: This YAML code demonstrates how to define and provision custom RBAC roles, update or remove existing roles, and assign or revoke role assignments to teams within Grafana. Dependencies include access to the provisioning directory of a Grafana Enterprise or Cloud server. Parameters include role names, UIDs, permissions, team names, and optional flags for global scope and deletion. Input is a YAML file placed in provisioning/access-control/, and the output is the synchronized RBAC configuration upon reload. Limitations: all fields must conform to Grafana provisioning schema and custom roles require the correct version and orgId. Comments are provided inline.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-grafana-provisioning/index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
---\n# config file version\napiVersion: 2\n\n# <list> list of roles to insert/update/delete\nroles:\n  # <string, required> name of the role you want to create or update. Required.\n  - name: 'custom:users:writer'\n    # <string> uid of the role. Has to be unique for all orgs.\n    uid: customuserswriter1\n    # <string> description of the role, informative purpose only.\n    description: 'Create, read, write users'\n    # <int> version of the role, Grafana will update the role when increased.\n    version: 2\n    # <int> org id. Defaults to Grafana's default if not specified.\n    orgId: 1\n    # <list> list of the permissions granted by this role.\n    permissions:\n      # <string, required> action allowed.\n      - action: 'users:read'\n        #<string> scope it applies to.\n        scope: 'users:*'\n      - action: 'users:write'\n        scope: 'users:*'\n      - action: 'users:create'\n  - name: 'custom:global:users:reader'\n    # <bool> overwrite org id and creates a global role.\n    global: true\n    # <string> state of the role. Defaults to 'present'. If 'absent', role will be deleted.\n    state: 'absent'\n    # <bool> force deletion revoking all grants of the role.\n    force: true\n  - uid: 'basic_editor'\n    # <bool> always apply the specified changes to the role, regardless of the role version in the database\n    overrideRole: true\n    global: true\n    # <list> list of roles to copy permissions from.\n    from:\n      - uid: 'basic_editor'\n        global: true\n      - name: 'fixed:users:writer'\n        global: true\n    # <list> list of the permissions to add/remove on top of the copied ones.\n    permissions:\n      - action: 'users:read'\n        scope: 'users:*'\n      - action: 'users:write'\n        scope: 'users:*'\n        # <string> state of the permission. Defaults to 'present'. If 'absent', the permission will be removed.\n        state: absent\n\n# <list> list role assignments to teams to create or remove.\nteams:\n  # <string, required> name of the team you want to assign roles to. Required.\n  - name: 'Users writers'\n    # <int> org id. Will default to Grafana's default if not specified.\n    orgId: 1\n    # <list> list of roles to assign to the team\n    roles:\n      # <string> uid of the role you want to assign to the team.\n      - uid: 'customuserswriter1'\n        # <int> org id. Will default to Grafana's default if not specified.\n        orgId: 1\n      # <string> name of the role you want to assign to the team.\n      - name: 'fixed:users:writer'\n        # <bool> overwrite org id to specify the role is global.\n        global: true\n        # <string> state of the assignment. Defaults to 'present'. If 'absent', the assignment will be revoked.\n        state: absent
```

----------------------------------------

TITLE: Executing a SQL Server Stored Procedure with Grafana Time Range Variables
DESCRIPTION: This SQL script demonstrates how to execute the `sp_test_datetime` stored procedure within a Grafana MS SQL data source query. It declares two `datetime` variables, `@from` and `@to`, and assigns them values derived from Grafana's built-in time range variables `$__timeFrom()` and `$__timeTo()`. These variables are then passed as parameters to the `EXEC` statement, running the stored procedure with the dashboard's currently selected time range.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_15

LANGUAGE: sql
CODE:
```
DECLARE
  @from datetime = $__timeFrom(),
  @to datetime = $__timeTo()

EXEC dbo.sp_test_datetime @from, @to

```

----------------------------------------

TITLE: Interpolating Variables with 't' Function in JavaScript
DESCRIPTION: Illustrates how to use the `t` function for translating strings that require variable interpolation. The third argument is an object containing the variables (e.g., `{ username }`) which correspond to placeholders (e.g., `{{ username }}`) in the default string. Requires importing `t` from `app/core/internationalization`.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
const placeholder = t('page.greeting', 'Hello {{ username }}', { username });
```

----------------------------------------

TITLE: Configuring Prometheus Scrape Job for Node Exporter (YAML)
DESCRIPTION: This YAML snippet configures a Prometheus scrape job named 'node'. It specifies the target endpoint for Node Exporter, assumed to be running locally on 'localhost:9100', from which Prometheus should scrape metrics. This configuration should be added to the 'scrape_configs' section of the 'prometheus.yml' file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
# A scrape configuration containing exactly one endpoint to scrape from Node exporter running on a host:
scrape_configs:
    # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
    - job_name: 'node'

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

      static_configs:
      - targets: ['localhost:9100']
```

----------------------------------------

TITLE: Describing /apis/query.grafana.app Workflow Using Mermaid Diagrams (Mermaid)
DESCRIPTION: This Mermaid sequence diagram details the request/response flow for the /apis/query.grafana.app endpoint in single-tenant Grafana. It exposes the sequence of API parsing, dependency calculation, concurrent datasource querying (with access verification), expression execution, result validation, and final return. Rendered using Mermaid and meant for documentation purposes, it relies on the Mermaid processor for visualization and demonstrates interactions involving query parsing, access control, and processing of query logic.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/registry/apis/query/README.md#2025-04-23_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram\n    autonumber\n    actor User as User or Process\n    participant api as /apis/query.grafana.app\n    participant ds as Datasource<br/>Handler/Plugin\n    participant db as Storage<br/> (SQL)\n    participant expr as Expression<br/>Engine\n\n    User->>api: POST Query\n    api->>api: Parse queries\n    api->>api: Calculate dependencies\n    loop Each datasource (concurrently)\n        api->>ds: QueryData\n        ds->>ds: Verify user access\n        ds->>db: Get settings <br> and secrets\n    end\n    loop Each expression\n        api->>expr: Execute\n    end\n    api->>api: Verify ResultExpectations\n    api->>User: return results
```

----------------------------------------

TITLE: Using Vault Secrets for SMTP and Database Configuration in Grafana INI
DESCRIPTION: This partial `grafana.ini` example demonstrates using the `$__vault{}` syntax to fetch SMTP and database credentials from Hashicorp Vault. It retrieves SMTP host, username, and password from a K/V secret and database username and password from a database secret.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/integrate-with-hashicorp-vault/index.md#2025-04-23_snippet_4

LANGUAGE: ini
CODE:
```
[smtp]
enabled = true
host = $__vault{kv:secret/grafana/smtp:hostname}:587
user = $__vault{kv:secret/grafana/smtp:username}
password = $__vault{kv:secret/grafana/smtp:password}

[database]
type = mysql
host = mysqlhost:3306
name = grafana
user = $__vault{database:database/creds/grafana:username}
password = $__vault{database:database/creds/grafana:password}
```

----------------------------------------

TITLE: Retrieving a Dashboard by UID in HTTP/JSON
DESCRIPTION: Example of retrieving a dashboard using its unique identifier (UID). This request sends a GET to /api/dashboards/uid/:uid endpoint with the dashboard's UID. The response includes the complete dashboard definition and metadata including folder information.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
GET /api/dashboards/uid/cIBgcSjkk HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Generating RSA Private Key using OpenSSL (Bash)
DESCRIPTION: Uses the `openssl genrsa` command to create a 2048-bit RSA private key file named `grafana.key` located in `/etc/grafana/`. This key is essential for decrypting HTTPS traffic when using a self-signed certificate. Requires `openssl` to be installed and `sudo` privileges.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
sudo openssl genrsa -out /etc/grafana/grafana.key 2048
```

----------------------------------------

TITLE: Mapping Grafana Roles Based on User Email (INI)
DESCRIPTION: This INI configuration snippet demonstrates using a JMESPath expression in `role_attribute_path` to conditionally assign Grafana roles. If the user's email obtained from the OAuth token matches 'admin@company.com', they are assigned the 'Admin' role; otherwise, they receive the 'Viewer' role.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/gitlab/index.md#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
role_attribute_path = email=='admin@company.com' && 'Admin' || 'Viewer'
```

----------------------------------------

TITLE: Querying Annotations via Grafana HTTP API - HTTP
DESCRIPTION: Demonstrates how to retrieve a list of annotations from the Grafana API using a GET request. Requires appropriate permissions and may include query parameters such as 'from', 'to', 'tags', and 'limit' to filter results. Expects an array of annotation objects in the JSON response, with fields such as id, dashboardUID, panelId, time, text, and tags.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/annotations?from=1506676478816&to=1507281278816&tags=tag1&tags=tag2&limit=100 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=
```

----------------------------------------

TITLE: Using the index() Function for Dynamic Value and Label Access - Go Template - Markdown
DESCRIPTION: This example demonstrates how to use Go template's index() function in Grafana to dynamically access query values and labels by key ('B' and 'instance', respectively). The dependencies are Grafana's Go templating engine and $values/$labels populated by query data. 'index $values "B"' retrieves the value for Ref ID 'B', and 'index $labels "instance"' gets the label named 'instance'. Useful when keys are dynamic or variable.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_4

LANGUAGE: Go Template
CODE:
```
{{ index $values "B" }} CPU usage for {{ index $labels "instance" }} over the last 5 minutes.
```

----------------------------------------

TITLE: Manually Starting Grafana Server Binary - Shell
DESCRIPTION: Runs the Grafana server directly from the installed binary, primarily to initialize its data directory before daemonizing via systemd. Input: None. Output: Grafana server launches in terminal. Press CTRL+C to stop. Run as grafana user if possible for correct file permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_12

LANGUAGE: shell
CODE:
```
/usr/local/grafana/bin/grafana-server --homepath /usr/local/grafana
```

----------------------------------------

TITLE: Filtering Loki Logs by Substring with LogQL in Grafana Explore
DESCRIPTION: This LogQL query filters logs from `/var/log/tns-app.log` to show only lines containing the substring 'error'. It is executed within Grafana Explore using a Loki data source to help identify specific error occurrences after triggering an error in the sample application.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_6

LANGUAGE: logql
CODE:
```
{filename="/var/log/tns-app.log"} |= "error"
```

----------------------------------------

TITLE: Configuring Sign-Out Redirect URL for Generic OAuth (Bash)
DESCRIPTION: Shows the `signout_redirect_url` configuration setting within the `[auth.generic_oauth]` section of the Grafana configuration file. Setting a URL here will redirect users to that specific address after they sign out of Grafana, often used to trigger sign-out from the OAuth provider as well. The example shows the parameter without a value assigned.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/_index.md#2025-04-23_snippet_6

LANGUAGE: Bash
CODE:
```
[auth.generic_oauth]
signout_redirect_url =
```

----------------------------------------

TITLE: Deleting Grafana API Keys (Plaintext)
DESCRIPTION: Defines the `apikeys:delete` permission action required to delete API keys in Grafana. This is linked to the `apikeys:*` and `apikeys:id:*` scopes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_4

LANGUAGE: plaintext
CODE:
```
`apikeys:delete`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`apikeys:*`</li><li>`apikeys:id:*`</li></ul>
```

----------------------------------------

TITLE: Response for Listing Roles Assigned to a Service Account (HTTP)
DESCRIPTION: Example response for the GET request to list roles assigned to a service account. It includes role details such as version, UID, name, and description.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_26

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8

[
    {
        "version": 4,
        "uid": "6dNwJq57z",
        "name": "fixed:reports:writer",
        "displayName": "Report writer",
        "description": "Create, read, update, or delete all reports and shared report settings.",
        "group": "Reports",
        "updated": "2021-11-19T10:48:00+01:00",
        "created": "2021-11-19T10:48:00+01:00",
        "global": false
    }
]
```

----------------------------------------

TITLE: Configuring Screenshot Capture for Alerts - Grafana INI
DESCRIPTION: Describes the `[unified_alerting.screenshots]` section for enabling screenshots in notifications, setting timeouts, and controlling concurrency. Dependencies include a remote HTTP image rendering service for screenshot capability. Key parameters are `capture` (enables feature), `capture_timeout` (max duration), `max_concurrent_screenshots` (parallel jobs), and `upload_external_image_storage` (disk vs. cloud storage behavior). Timeouts must be in seconds and less than all alert evaluation intervals for optimal performance.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_21

LANGUAGE: ini
CODE:
```
[unified_alerting.screenshots]
# Enable screenshots in alert notifications
capture = true
# Screenshot capture timeout (max 30s, should be less than evaluation intervals)
capture_timeout = 20s
# Max concurrent screenshots across all alerts
max_concurrent_screenshots = 4
# Whether to upload screenshots to external storage (Azure, S3, GCS), false = local disk upload_external_image_storage = false

```

----------------------------------------

TITLE: Creating Kubernetes Secret for Grafana Enterprise License - kubectl Bash
DESCRIPTION: Generates a generic Kubernetes secret named 'ge-license' from a local 'license.jwt' file, which contains the Grafana Enterprise license. This secret should be referenced in the Grafana Enterprise deployment for license activation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_40

LANGUAGE: bash
CODE:
```
kubectl create secret generic ge-license --from-file=/path/to/your/license.jwt

```

----------------------------------------

TITLE: Using FieldSet to Group Form Elements in React/JSX
DESCRIPTION: This JSX example demonstrates how to utilize the `FieldSet` component from `@grafana/ui` to group related form inputs within a `Form`. It showcases structuring a form with multiple fieldsets, each identified by a `label` prop (e.g., "Details", "Preferences"), which renders as a legend. Dependencies include React and components like `Form`, `Field`, `Input`, and `Button` from `@grafana/ui`.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/FieldSet.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { FieldSet } from '@grafana/ui';

<Form onSubmit={() => console.log('Submit')}>
  {() => (
    <>
      <FieldSet label="Details">
        <Field label="Name">
          <Input name="name" />
        </Field>
        <Field label="Email">
          <Input name="email" />
        </Field>
      </FieldSet>

      <FieldSet label="Preferences">
        <Field label="Color">
          <Input name="color" />
        </Field>
        <Field label="Font size">
          <Input name="fontsize" />
        </Field>
      </FieldSet>
      <Button variant="primary">Save</Button>
    </>
  )}
</Form>;
```

----------------------------------------

TITLE: Updating Data Source Cache Configuration via Grafana HTTP API (HTTP)
DESCRIPTION: This snippet illustrates how to update the cache configuration for a specific Grafana data source using a POST request to `/api/datasources/:dataSourceUID/cache`. It requires the `datasources.caching:write` permission. The request body is a JSON object specifying settings like `enabled`, `useDefaultTTL`, `ttlQueriesMs`, and `ttlResourcesMs`. The example shows the request format including the JSON payload and the expected successful JSON response reflecting the updated settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_and_resource_caching.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
POST /api/datasources/jZrmlLCGka/cache HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
   "dataSourceID": 1,
   "dataSourceUID": "jZrmlLCGka",
   "enabled": true,
   "useDefaultTTL": false,
   "ttlQueriesMs": 60000,
   "ttlResourcesMs": 300000,
}
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
   "message": "Data source cache settings updated",
   "dataSourceID": 1,
   "dataSourceUID": "jZrmlLCGka",
   "enabled": true,
   "useDefaultTTL": false,
   "ttlQueriesMs": 60000,
   "ttlResourcesMs": 300000,
   "defaultTTLMs": 300000,
   "created": "2023-04-21T11:49:22-04:00",
   "updated": "2023-04-24T17:03:40-04:00"
}
```

----------------------------------------

TITLE: Configuring Grafana Database Connection via Environment Variables on ECS
DESCRIPTION: Sets environment variables within an AWS ECS task definition to configure Grafana Enterprise's connection to an external database. This is crucial for high availability setups. Replace bracketed placeholders with actual database credentials and connection details (type, host, port, name, user, password).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-ecs/index.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
GF_DATABASE_TYPE=[database type]
GF_DATABASE_HOST=[database address and port]
GF_DATABASE_NAME=[database name]
GF_DATABASE_USER=[database username]
GF_DATABASE_PASSWORD=[database password]
```

----------------------------------------

TITLE: Setting Permissions for Self-Signed Certificate and Key (Bash)
DESCRIPTION: Uses `chown` to set the owner and group of the certificate (`grafana.crt`) and key (`grafana.key`) files to `grafana:grafana`. Uses `chmod` to set the file permissions to read-only for the owner (`400`), enhancing security. Requires `sudo` privileges and the existence of the `grafana` user/group.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
sudo chown grafana:grafana /etc/grafana/grafana.crt
sudo chown grafana:grafana /etc/grafana/grafana.key
sudo chmod 400 /etc/grafana/grafana.key /etc/grafana/grafana.crt
```

----------------------------------------

TITLE: Adding Grafana Helm Repository - Helm CLI - Bash
DESCRIPTION: This snippet demonstrates how to add the official Grafana Helm repository using the Helm command-line tool. It requires Helm to be installed and the syntax follows `helm repo add <DESIRED-NAME> <HELM-REPO-URL>`. The command registers the repository for later chart installation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
helm repo add grafana https://grafana.github.io/helm-charts
```

----------------------------------------

TITLE: Formatting Grafana Variables with Double Quotes
DESCRIPTION: Shows the `:doublequote` format option. This formats single or multi-valued variables into a comma-separated string where each value is enclosed in double quotes (`"`) and internal double quotes are escaped (`\"`). The example shows `['test1', 'test2']` interpolated as `'"test1","test2"'`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
servers = ['test1', 'test2']
String to interpolate: '${servers:doublequote}'
Interpolation result: '"test1","test2"'
```

----------------------------------------

TITLE: Updating an Existing Dashboard via POST Request in HTTP/JSON
DESCRIPTION: Example of updating an existing dashboard using the Dashboard API. This request sends a POST to /api/dashboards/db with a JSON payload containing the dashboard ID, updated title, and version information. The dashboard will be moved to the specified folder and updated with the provided properties.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
POST /api/dashboards/db HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "dashboard": {
    "id": 1,
    "title": "Production Overview Updated",
    "tags": [ "templated" ],
    "timezone": "browser",
    "schemaVersion": 16,
    "version": 1,
    "refresh": "25s"
  },
  "folderUid": "l3KqBxCMz",
  "message": "Made changes to xyz",
  "overwrite": false
}
```

----------------------------------------

TITLE: Configuring Auto-Registration of Remote Services in custom.ini (INI)
DESCRIPTION: This INI configuration snippet sets up Grafana for auto-registering remote services defined in a YAML file upon startup. The `apiservice_ca_bundle_file` specifies the Certificate Authority bundle used to verify the TLS certificates of the remote services (note the comment indicating it's primarily for non-dev mode). The `remote_services_file` points to a YAML file (`./pkg/services/apiserver/aggregator/examples/autoregister/apiservices.yaml`) that contains the definitions of the remote services to be registered automatically.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/aggregator/README.md#2025-04-23_snippet_7

LANGUAGE: ini
CODE:
```
; in custom.ini
; the bundle is only used when not in dev mode
apiservice_ca_bundle_file = ./data/grafana-aggregator/ca.crt

remote_services_file = ./pkg/services/apiserver/aggregator/examples/autoregister/apiservices.yaml
```

----------------------------------------

TITLE: Deleting a Data Source by ID (Deprecated) via Grafana API - HTTP
DESCRIPTION: This DELETE example demonstrates how to remove a data source by its numeric ID using the deprecated endpoint. Requires bearer token authentication and the datasourceId in the URL path. No request body is required. Successful response returns a confirmation JSON message. Note: Deprecated in recent Grafana versions; prefer using UID or name endpoints.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_10

LANGUAGE: http
CODE:
```
DELETE /api/datasources/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{"message":"Data source deleted"}
```

----------------------------------------

TITLE: Configuring Loki Storage Endpoint for Usage Insights (INI Configuration) - ini
DESCRIPTION: This snippet provides an example of configuring Loki as the target for usage insights log export in the Grafana configuration file. Adjust the properties to match your Loki installation, including communication type ('grpc' or 'http'), URL (host:port), TLS setting, and optionally the tenant ID for multi-tenant Loki setups. Dependencies include a running Loki instance and correct values in the Grafana config file. Inputs are protocol, URL, TLS setting, and tenant ID; output is successfully exported logs to your Loki backend.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/export-logs.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[usage_insights.export.storage.loki]
# Set the communication protocol to use with Loki (can be grpc or http)
type = grpc
# Set the address for writing logs to Loki (format must be host:port)
url = localhost:9095
# Defaults to true. If true, it establishes a secure connection to Loki
tls = true
# Set the tenant ID for Loki communication, which is disabled by default.
# The tenant ID is required to interact with Loki running in multi-tenant mode.
tenant_id =

```

----------------------------------------

TITLE: Persisting Open File Limit Configuration (Bash)
DESCRIPTION: Appends the command `ulimit -S -n $LIMIT` to the specified shell initialization file (`$INIT_FILE`), where `$LIMIT` is the desired file limit number (e.g., 4096). This ensures the limit is applied automatically whenever a new shell session starts, making the configuration persistent. The specific `$INIT_FILE` depends on the user's shell (e.g., `.bashrc` for bash, `.zshrc` for zsh).
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_14

LANGUAGE: bash
CODE:
```
echo ulimit -S -n $LIMIT >> $INIT_FILE
```

----------------------------------------

TITLE: Example Notification Policy Export Response - HTTP/YAML
DESCRIPTION: This snippet illustrates an example HTTP 200 OK response for exporting notification policies. The payload uses YAML formatting to structure alert notification groupings, including organization ID, receiver settings, grouping criteria, route definitions, object matchers, and mute time intervals. The 'Content-Type: text/yaml' header indicates payload format. The response schema aids clients in parsing and applying policies, with routes and matchers organizing alerting flows.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_5

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK\nContent-Type: text/yaml\n\napiVersion: 1\npolicies:\n    - orgId: 1\n      receiver: My Contact Email Point\n      group_by:\n        - grafana_folder\n        - alertname\n      routes:\n        - receiver: My Contact Email Point\n          object_matchers:\n            - - monitor\n              - =\n              - testdata\n          mute_time_intervals:\n            - weekends
```

----------------------------------------

TITLE: Adding a Query to Grafana Query History (HTTP Request)
DESCRIPTION: This snippet shows an example HTTP POST request to add a query to the Grafana query history. It requires a JSON body containing the `datasourceUid` and an array of `queries`. Authentication is handled via a Bearer token in the Authorization header.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
POST /api/query-history HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
{
  "datasourceUid": "PE1C5CBDA0504A6A3",
  "queries": [
    {
        "refId": "A",
        "key": "Q-87fed8e3-62ba-4eb2-8d2a-4129979bb4de-0",
        "scenarioId": "csv_content",
        "datasource": {
            "type": "testdata",
            "uid": "PD8C576611E62080A"
        }
    }
]
}
```

----------------------------------------

TITLE: Configuring E-Mail Contact Point - YAML
DESCRIPTION: Defines an SMTP/E-Mail contact point for alert notifications in Grafana. Requires recipient addresses; supports configuring single or multiple emails, message customization, and templated subjects. Key parameters allow for email content tailoring. Grafana sends alerts directly to the specified email(s) using this configuration; relies on a properly configured SMTP server.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_7

LANGUAGE: yaml
CODE:
```
type: email\nsettings:\n  # <string, required>\n  addresses: me@example.com;you@example.com\n  # <bool>\n  singleEmail: false\n  # <string>\n  message: my optional message to include\n  # <string>\n  subject: |\n    {{ template \"default.title\" . }}\n
```

----------------------------------------

TITLE: Recording Audit Log for API Key Creation - Grafana - JSON
DESCRIPTION: This snippet shows a full example of a Grafana audit log record generated when an API key is created. The JSON structure details the action, the targeted resources, request and result payloads, user metadata, and additional context such as the user agent and Grafana version. Inputs include HTTP request context and API operation details, while the output is a persisted structured log entry; dependencies are internal Grafana logging and authentication subsystems.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/audit-grafana.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "action": "create",
  "resources": [
    {
      "id": 1,
      "type": "api-key"
    }
  ],
  "timestamp": "2021-11-12T22:12:36.144795692Z",
  "user": {
    "userId": 1,
    "orgId": 1,
    "orgRole": "Admin",
    "username": "admin",
    "isAnonymous": false,
    "authTokenId": 1
  },
  "request": {
    "body": "{\"name\":\"example\",\"role\":\"Viewer\",\"secondsToLive\":null}"
  },
  "result": {
    "statusType": "success",
    "statusCode": 200,
    "responseBody": "{\"id\":1,\"name\":\"example\"}"
  },
  "resources": [
    {
      "id": 1,
      "type": "api-key"
    }
  ],
  "requestUri": "/api/auth/keys",
  "ipAddress": "127.0.0.1:54652",
  "userAgent": "Mozilla/5.0 (X11; Linux x86_64; rv:94.0) Gecko/20100101 Firefox/94.0",
  "grafanaVersion": "8.3.0-pre"
}
```

----------------------------------------

TITLE: Renaming '_value' Column in Flux for Grafana Compatibility
DESCRIPTION: This Flux `rename` function demonstrates a workaround to prevent Grafana from automatically interpreting the '_value' column as the primary time-series value, especially when it represents a calculated result like a difference rather than raw data. Renaming '_value' to a different name (e.g., 'something' or 'difference' as used in the primary example query) ensures Grafana processes the results correctly within its alerting or visualization panels. This is appended to a Flux query chain.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_10

LANGUAGE: flux
CODE:
```
 |> rename(columns: {_value: "something"})
```

----------------------------------------

TITLE: Configuring SAML Organization Mapping with Mixed Org Names and IDs in Grafana INI
DESCRIPTION: Provides an example of setting `assertion_attribute_org` and `org_mapping` in Grafana's SAML configuration. It demonstrates mapping users from 'Engineering' to the Grafana organization named 'ACME Corp' as Editor, and users from 'Sales' to Grafana Org ID 3 as Admin, using the 'Org' attribute from the IdP. This showcases mixing organization names and IDs in mappings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_15

LANGUAGE: ini
CODE:
```
[auth.saml]
assertion_attribute_org = Org
org_mapping = ["Engineering:ACME Corp:Editor", "Sales:3:Admin"]
```

----------------------------------------

TITLE: Provisioning CloudWatch Data Source Using Access and Secret Keys
DESCRIPTION: YAML configuration for provisioning CloudWatch data source using explicit AWS access key and secret key authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_6

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: CloudWatch
    type: cloudwatch
    jsonData:
      authType: keys
      defaultRegion: eu-west-2
    secureJsonData:
      accessKey: '<your access key>'
      secretKey: '<your secret key>'
```

----------------------------------------

TITLE: Provisioning Loki Data Source in Grafana (YAML)
DESCRIPTION: This YAML configuration demonstrates how to provision a basic Loki data source in Grafana using the provisioning system. It sets up a Loki data source with proxy access and custom timeout and maxLines settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/loki/_index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: Loki
    type: loki
    access: proxy
    url: http://localhost:3100
    jsonData:
      timeout: 60
      maxLines: 1000
```

----------------------------------------

TITLE: Provisioning Azure Monitor with App Registration (client secret) in YAML
DESCRIPTION: YAML configuration for provisioning Azure Monitor data source using Azure AD App Registration with client secret authentication. Includes required fields for the connection such as tenant ID, client ID, and client secret.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: 1 # config file version

datasources:
  - name: Azure Monitor
    type: grafana-azure-monitor-datasource
    access: proxy
    jsonData:
      azureAuthType: clientsecret
      cloudName: azuremonitor # See table below
      tenantId: <tenant-id>
      clientId: <client-id>
      subscriptionId: <subscription-id> # Optional, default subscription
    secureJsonData:
      clientSecret: <client-secret>
    version: 1
```

----------------------------------------

TITLE: Boolean Configuration Values for Grafana GitHub OAuth
DESCRIPTION: Illustrates the common boolean values `true` and `false` used as defaults or settings for various Grafana GitHub OAuth configuration options like `allow_sign_up`, `auto_login`, `role_attribute_strict`, `skip_org_role_sync`, `allow_assign_grafana_admin`, and `tls_skip_verify_insecure`. These flags enable or disable specific behaviors.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_10

LANGUAGE: boolean
CODE:
```
true
```

LANGUAGE: boolean
CODE:
```
false
```

----------------------------------------

TITLE: Enabling OpenTelemetry Tracing - Bash
DESCRIPTION: Sets RENDERING_TRACING_URL to specify an OpenTelemetry (OTel) tracing collector URL for gathering tracing spans from the renderer. Enable for distributed tracing of rendering operations. Default is disabled.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_53

LANGUAGE: bash
CODE:
```
RENDERING_TRACING_URL="http://localhost:4318/v1/traces"
```

----------------------------------------

TITLE: Configuring OAuth2 Authentication with Bitbucket in Grafana (Bash Configuration)
DESCRIPTION: This snippet is used to configure Grafana's Generic OAuth authentication to work with Bitbucket. Dependencies include a pre-created Bitbucket OAuth consumer with keys and a correctly set callback URL. The configuration block specifies Bitbucket endpoints for authentication, scopes, and maps team/workspace permissions by attribute path. Client ID and secret must match those from Bitbucket's OAuth consumer. This enables user authentication and mapping of Bitbucket workspaces to Grafana teams.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_14

LANGUAGE: bash
CODE:
```
[auth.generic_oauth]
name = BitBucket
enabled = true
allow_sign_up = true
auto_login = false
client_id = <client key>
client_secret = <client secret>
scopes = account email
auth_url = https://bitbucket.org/site/oauth2/authorize
token_url = https://bitbucket.org/site/oauth2/access_token
api_url = https://api.bitbucket.org/2.0/user
teams_url = https://api.bitbucket.org/2.0/user/permissions/workspaces
team_ids_attribute_path = values[*].workspace.slug
team_ids =
allowed_organizations =
use_refresh_token = true

```

----------------------------------------

TITLE: Input Component Usage within Field for Forms - React JSX
DESCRIPTION: This example shows how to use the Input component within a Field wrapper to enable labeling, description, and validation (via the 'required' attribute). Dependencies are the Field and Input components. The 'label' and 'description' props provide user guidance, while 'required' ensures the input must be completed before form submission. This composition is intended for use in forms requiring clear instruction and basic validation, returning a labeled input and triggering standard HTML validation on submission.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Input/Input.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<Field label=\"Important information\" description=\"This information is very important, so you really need to fill it in\">\n  <Input name=\"importantInput\" required />\n</Field>
```

----------------------------------------

TITLE: Aligning LDAP Search Filter and Username Attribute in Grafana (TOML/Config)
DESCRIPTION: Provides an example configuration snippet in TOML format demonstrating how to set the `search_filter` and `servers.attributes.username` to the same LDAP attribute (e.g., `sAMAccountName`) within the `[[servers]]` block. This alignment is crucial for active LDAP synchronization to function correctly and prevent user session termination. Requires Grafana Enterprise or Cloud with active sync enabled.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/enhanced-ldap/index.md#2025-04-23_snippet_1

LANGUAGE: toml
CODE:
```
[[servers]]
search_filter = "(sAMAccountName=%s)"

[servers.attributes]
username  = "sAMAccountName"
```

----------------------------------------

TITLE: Importing Storybook and Component Types in TypeScript
DESCRIPTION: This TypeScript snippet imports the `Meta` and `ArgTypes` components from `@storybook/blocks`, which are essential for creating structured documentation pages in Storybook MDX. It also imports the `SliderProps` type definition from a local `./types` file, necessary for defining the component's interface and enabling automatic prop documentation generation via `ArgTypes`.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Slider/Slider.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Meta, ArgTypes } from '@storybook/blocks';
import { SliderProps } from './types';
```

----------------------------------------

TITLE: Example Grafana LDAP Configuration File (ldap.toml)
DESCRIPTION: Provides a comprehensive example of the `ldap.toml` file, which contains detailed settings for connecting to and interacting with an LDAP server. It covers server details (host, port, SSL/TLS settings, timeouts), bind credentials (`bind_dn`, `bind_password`), user search parameters (`search_filter`, `search_base_dns`), optional group search settings, and attribute mappings (`member_of`, `email`). This file is referenced by the main Grafana configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
```bash
[[servers]]
# Ldap server host (specify multiple hosts space separated)
host = "ldap.my_secure_remote_server.org"
# Default port is 389 or 636 if use_ssl = true
port = 636
# Set to true if LDAP server should use an encrypted TLS connection (either with STARTTLS or LDAPS)
use_ssl = true
# If set to true, use LDAP with STARTTLS instead of LDAPS
start_tls = false
# The value of an accepted TLS cipher. By default, this value is empty. Example value: ["TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"])
# For a complete list of supported ciphers and TLS versions, refer to: https://go.dev/src/crypto/tls/cipher_suites.go
# Starting with Grafana v11.0 only ciphers with ECDHE support are accepted for TLS 1.2 connections.
tls_ciphers = []
# This is the minimum TLS version allowed. By default, this value is empty. Accepted values are: TLS1.1 (only for Grafana v10.4 or earlier), TLS1.2, TLS1.3.
min_tls_version = ""
# set to true if you want to skip SSL cert validation
ssl_skip_verify = false
# set to the path to your root CA certificate or leave unset to use system defaults
# root_ca_cert = "/path/to/certificate.crt"
# Authentication against LDAP servers requiring client certificates
# client_cert = "/path/to/client.crt"
# client_key = "/path/to/client.key"

# Search user bind dn
bind_dn = "cn=admin,dc=grafana,dc=org"
# Search user bind password
# If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
bind_password = "grafana"
# We recommend using variable expansion for the bind_password, for more info https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#variable-expansion
# bind_password = '$__env{LDAP_BIND_PASSWORD}'

# Timeout in seconds. Applies to each host specified in the 'host' entry (space separated).
timeout = 10

# User search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)"
# Allow login from email or username, example "(|(sAMAccountName=%s)(userPrincipalName=%s))"
search_filter = "(cn=%s)"

# An array of base dns to search through
search_base_dns = ["dc=grafana,dc=org"]

# group_search_filter = "(&(objectClass=posixGroup)(memberUid=%s))"
# group_search_filter_user_attribute = "distinguishedName"
# group_search_base_dns = ["ou=groups,dc=grafana,dc=org"]

# Specify names of the LDAP attributes your LDAP uses
[servers.attributes]
member_of = "memberOf"
email =  "email"
```
```

----------------------------------------

TITLE: Displaying a Secondary Button with React in Storybook (TSX)
DESCRIPTION: This snippet showcases the Secondary Button variant in small, medium, and large sizes, embedded within an ExampleFrame for interactive preview in Storybook. The Button component must be available and props passed to control appearance. This is intended for demonstrating default (secondary) button styling to consumers, with the example visually and contextually highlighting the available sizes.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Button/Button.mdx#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
<ExampleFrame>\n  <Button variant=\"secondary\" size=\"sm\" style={{ margin: '5px' }}>\n    {'Small'}\n  </Button>\n  <Button variant=\"secondary\" size=\"md\" style={{ margin: '5px' }}>\n    {'Medium'}\n  </Button>\n  <Button variant=\"secondary\" size=\"lg\" style={{ margin: '5px' }}>\n    {'Large'}\n  </Button>\n</ExampleFrame>
```

----------------------------------------

TITLE: Defining Organization Scopes in Grafana RBAC
DESCRIPTION: Specifies scopes to restrict actions to a set of organizations. `orgs:*` matches any organization, while `orgs:id:1` targets the specific organization with ID 1.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_34

LANGUAGE: text
CODE:
```
orgs:*
```

LANGUAGE: text
CODE:
```
orgs:id:*
```

----------------------------------------

TITLE: Saving Report Settings via HTTP POST Request
DESCRIPTION: Example of saving or updating global reports branding settings including logo URLs and email footer configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_10

LANGUAGE: http
CODE:
```
POST /api/reports/settings HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
	"branding": {
		"reportLogoUrl": "https://grafana.com/reportLogo.jpg",
		"emailLogoUrl": "https://grafana.com/emailLogo.jpg",
		"emailFooterMode": "sent-by",
		"emailFooterText": "Grafana Labs",
		"emailFooterLink": "https://grafana.com/"
	}
}
```

----------------------------------------

TITLE: Accessing the Dot Context in Go Templates - Go
DESCRIPTION: This code snippet shows how to access the dot (.) special cursor in Go templates, which is contextually set by Grafana to notification or alert data. In notification templates, "." refers to the Notification Data, while in annotation and label templates it refers to all alert data. The snippet prints the Alerts field from the current dot context using Grafana's text/template implementation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/language.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
{{ .Alerts }}
```

----------------------------------------

TITLE: Enabling Graphite Stats Export in Grafana - INI
DESCRIPTION: This snippet configures Grafana to send internal metrics directly to a Graphite instance. Placed under the [metrics.graphite] section of grafana.ini or custom.ini, it requires specifying the 'address' of the Graphite server and optionally a prefix for metrics naming. Dependencies: a Graphite instance running and reachable from the Grafana server. Parameters: address (hostname:port), prefix (string pattern with %(instance_name)s support). Outputs: Grafana metrics sent to the specified Graphite node; also available at /metrics. The address directive must be configured for export to be active.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-monitoring.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
# Send internal metrics to Graphite\n[metrics.graphite]\n# Enable by setting the address setting (ex localhost:2003)\naddress = <hostname or ip>:<port#>\nprefix = prod.grafana.%(instance_name)s.\n
```

----------------------------------------

TITLE: Defining AWS IAM Policy for Grafana License Validation (JSON)
DESCRIPTION: This JSON defines an AWS IAM policy required for a Grafana instance to validate its Enterprise license using AWS License Manager. It grants permissions to check out, list, get usage data for, and check in the license (`license-manager:CheckoutLicense`, `license-manager:ListReceivedLicenses`, `license-manager:GetLicenseUsage`, `license-manager:CheckInLicense`). The `GetLicenseUsage` permission should be restricted to the specific Grafana Enterprise license ARN by replacing `[YOUR_ACCOUNT]` and `[YOUR_LICENSE_ID]`. This policy must be attached to the IAM user whose credentials Grafana will use.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-instance-outside-aws/index.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
   "Version": "2012-10-17",
   "Statement": [
      {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": "license-manager:GetLicenseUsage",
            "Resource": "arn:aws:license-manager::[YOUR_ACCOUNT]:license:[YOUR_LICENSE_ID]"
      },
      {
            "Sid": "VisualEditor1",
            "Effect": "Allow",
            "Action": [
               "license-manager:CheckoutLicense",
               "license-manager:ListReceivedLicenses",
               "license-manager:CheckInLicense"
            ],
            "Resource": "*"
      }
   ]
}
```

----------------------------------------

TITLE: Templating Grafana Alert Severity Label using Go Template
DESCRIPTION: This Go template demonstrates how to dynamically set a `severity` label for a Grafana alert based on the value of a query result. It uses conditional logic (`if`/`else if`/`else`) and the `gt` (greater than) function to compare the query value (`$values.A.Value`) against thresholds (90.0, 80.0, 60.0) and assigns a severity level (`critical`, `high`, `medium`, or `low`). This templated label can then be used in notification policies for routing or handling.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/_index.md#2025-04-23_snippet_4

LANGUAGE: go
CODE:
```
{{ if (gt $values.A.Value 90.0) -}}
critical
{{ else if (gt $values.A.Value 80.0) -}}
high
{{ else if (gt $values.A.Value 60.0) -}}
medium
{{ else -}}
low
{{- end }}
```

----------------------------------------

TITLE: Mapping SAML Assertion Attributes for User Name (Template)
DESCRIPTION: This INI configuration snippet shows how to construct the Grafana user's display name using a template that combines multiple attributes ('firstName' and 'lastName') from the SAML assertion using the `$__saml{<attribute>}` syntax. This allows for more complex name formatting.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_5

LANGUAGE: ini
CODE:
```
#template mapping
assertion_attribute_name = $__saml{firstName} $__saml{lastName}
```

----------------------------------------

TITLE: Initializing Grafana Dashboard JSON Model
DESCRIPTION: This JSON object represents the initial structure of a new Grafana dashboard before it is saved. It includes core fields like 'id' (null until saved), 'uid', 'title', 'tags', 'timezone', 'time' range, and empty arrays for 'panels', 'templating', and 'annotations'. Default values for 'editable', 'graphTooltip', 'refresh', 'schemaVersion', and 'version' are also set.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/view-dashboard-json-model/index.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "id": null,
  "uid": "cLV5GDCkz",
  "title": "New dashboard",
  "tags": [],
  "timezone": "browser",
  "editable": true,
  "graphTooltip": 1,
  "panels": [],
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": []
  },
  "templating": {
    "list": []
  },
  "annotations": {
    "list": []
  },
  "refresh": "5s",
  "schemaVersion": 17,
  "version": 0,
  "links": []
}
```

----------------------------------------

TITLE: Configuring Grafana Cloud OAuth2 Authentication in Grafana
DESCRIPTION: Example configuration for setting up Grafana Cloud as an OAuth2 authentication provider in a Grafana instance. Includes client credentials, scopes, and organization settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/grafana-cloud/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[auth.grafana_com]
enabled = true
allow_sign_up = true
auto_login = false
client_id = 450bc21c10dc2194879d
client_secret = eyJ0Ijoib2F1dGgyYyIhlmlkIjoiNzUwYmMzM2MxMGRjMjE6NDh3OWQiLCJ2IjoiZmI1YzVlYmIwYzFmN2ZhYzZmNjIwOGI1NmVkYTRlNWYxMzgwM2NkMiJ9
scopes = user:email
allowed_organizations = sampleorganization
enabled = true
```

----------------------------------------

TITLE: Configuring Access Token Authentication for Remote Authorization in Grafana via INI
DESCRIPTION: This snippet demonstrates advanced INI configuration for connecting an authorization client to a remote GRPC server using access token authentication. It sets a stack_id, specifies cloud mode, and configures token-related parameters in the [grpc_client_authentication] section, including the token value, signing server URL, and namespace. This setup is crucial for secure, tenant-specific authentication workflows in multi-stack environments.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/README.md#2025-04-23_snippet_4

LANGUAGE: ini
CODE:
```
[environment]
stack_id = 11

[authorization]
remote_address = "server.example.org:10000"
mode = "cloud"
listen = false

[grpc_client_authentication]
token = "ReplaceWithToken"
token_exchange_url = "signing-server.example.org/path/to/signing"
token_namespace = "stacks-11"

```

----------------------------------------

TITLE: Defining Comprehensive IAM Policy for CloudWatch Metrics and Logs Access in JSON
DESCRIPTION: This JSON configuration provides a combined AWS IAM policy granting Grafana permissions to access both CloudWatch Metrics and Logs, along with necessary EC2, tag, and Performance Insights data. It includes permissions from both the metrics-only and logs-only policies, covering actions like `cloudwatch:GetMetricData`, `logs:StartQuery`, `ec2:DescribeInstances`, `tag:GetResources`, and `pi:GetResourceMetrics`. Use this policy for full CloudWatch data source functionality in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "AllowReadingMetricsFromCloudWatch",
      "Effect": "Allow",
      "Action": [
        "cloudwatch:DescribeAlarmsForMetric",
        "cloudwatch:DescribeAlarmHistory",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:ListMetrics",
        "cloudwatch:GetMetricData",
        "cloudwatch:GetInsightRuleReport"
      ],
      "Resource": "*"
    },
    {
      "Sid": "AllowReadingResourceMetricsFromPerformanceInsights",
      "Effect": "Allow",
      "Action": "pi:GetResourceMetrics",
      "Resource": "*"
    },
    {
      "Sid": "AllowReadingLogsFromCloudWatch",
      "Effect": "Allow",
      "Action": [
        "logs:DescribeLogGroups",
        "logs:GetLogGroupFields",
        "logs:StartQuery",
        "logs:StopQuery",
        "logs:GetQueryResults",
        "logs:GetLogEvents"
      ],
      "Resource": "*"
    },
    {
      "Sid": "AllowReadingTagsInstancesRegionsFromEC2",
      "Effect": "Allow",
      "Action": ["ec2:DescribeTags", "ec2:DescribeInstances", "ec2:DescribeRegions"],
      "Resource": "*"
    },
    {
      "Sid": "AllowReadingResourcesForTags",
      "Effect": "Allow",
      "Action": "tag:GetResources",
      "Resource": "*"
    }
  ]
}
```

----------------------------------------

TITLE: Provisioning Pyroscope Data Source in Grafana using YAML Configuration
DESCRIPTION: YAML configuration example for provisioning the Grafana Pyroscope data source. This configuration sets up a data source named 'Grafana Pyroscope' that connects to a Pyroscope instance running on localhost:4040 with a minimum step interval of 15 seconds.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/pyroscope/_index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: Grafana Pyroscope
    type: grafana-pyroscope-datasource
    url: http://localhost:4040
    jsonData:
      minStep: '15s'
```

----------------------------------------

TITLE: Defining Report Scopes in Grafana RBAC
DESCRIPTION: Specifies scopes to restrict actions to a set of reports. `reports:*` matches any report, whereas `reports:id:1` targets the specific report with ID 1.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_39

LANGUAGE: text
CODE:
```
reports:*
```

LANGUAGE: text
CODE:
```
reports:id:*
```

----------------------------------------

TITLE: Cloning a GitHub Repository Using Git - Bash
DESCRIPTION: This snippet demonstrates how to clone the sample tutorial environment repository from GitHub using the 'git clone' command. It requires Git to be installed on the user's machine. The command downloads the full repository to the current directory, which contains files necessary for following the Grafana tutorial. Input: None (run from any shell). Output: Creates a new 'tutorial-environment' directory within the current working directory. This operation has no effect if the directory already exists and may overwrite if not managed properly.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/grafana/tutorial-environment.git

```

----------------------------------------

TITLE: Using the Drawer Component in a React Application (TypeScript/TSX)
DESCRIPTION: This snippet demonstrates how to import and render the Drawer component from the @grafana/ui package within a React (TSX) application. It includes an example of handling the onClose event and passing props like title and size. Dependencies include React, @grafana/ui, and any relevant Drawer props implementation. The Drawer receives child content and defines the overlay appearance, with size controlling width/min-width as per documented options. Inputs include title (string), size (one of 'sm', 'md', 'lg'), onClose (function), and child elements. The output is a modal-like overlay anchored to the screen edge that can display any React content.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Drawer/Drawer.mdx#2025-04-23_snippet_0

LANGUAGE: TSX
CODE:
```
import { Drawer } from '@grafana/ui';\n\nonClose = () => {\n  // handle the show or hide Drawer logic\n};\n\nreturn (\n  <Drawer title=\"This a Drawer\" size=\"md\" onClose={this.onClose}>\n    <div>Put your Drawer content here</div>\n  </Drawer>\n);
```

----------------------------------------

TITLE: Organization Roles Mapping for JWT Authentication
DESCRIPTION: Configuration for mapping users to specific organizations with different roles based on JWT claims using organization attribute path and mapping.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_12

LANGUAGE: ini
CODE:
```
org_attribute_path = info.orgs
org_mapping = engineer:org_foo:Viewer admin:org_bar:Editor *:org_baz:Editor
```

----------------------------------------

TITLE: Implementing BigValue Component with Display Options in React/TypeScript
DESCRIPTION: Example implementation of the BigValue component showing how to use various display modes including color, graph, justify, and text modes. The component takes a DisplayValue object and theme as props to render a customized value display.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/BigValue/BigValue.mdx#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import { DisplayValue } from '@grafana/data';
import {
  BigValue,
  BigValueColorMode,
  BigValueGraphMode,
  BigValueJustifyMode,
  BigValueTextMode,
  useTheme,
} from '@grafana/ui';

const bigValue: DisplayValue = {
  color: 'red',
  value: '5000',
  numeric: 5000,
  title: 'Volume',
};

return (
  <BigValue
    theme={useTheme()}
    justifyMode={BigValueJustifyMode.Auto}
    graphMode={BigValueGraphMode.Area}
    colorMode={BigValueColorMode.Value}
    textMode={BigValueTextMode.Auto}
    value={bigValue}
  />
);
```

----------------------------------------

TITLE: Listing Required Image Rendering Dependencies on Ubuntu 18.10 (Bash)
DESCRIPTION: Provides a list of package names that need to be installed on an Ubuntu 18.10 system to satisfy the dependencies for the Grafana image rendering plugin. These packages provide the necessary shared libraries for Chromium.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
libx11-6 libx11-xcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrender1 libxtst6 libglib2.0-0 libnss3 libcups2  libdbus-1-3 libxss1 libxrandr2 libgtk-3-0 libasound2 libxcb-dri3-0 libgbm1 libxshmfence1
```

----------------------------------------

TITLE: Starting the Grafana Stack with Docker Compose - Bash
DESCRIPTION: This Bash snippet starts Grafana, Loki, and Prometheus as background (detached) Docker containers using Docker Compose. It assumes Docker and Docker Compose are installed and accessible, and that the working directory contains the relevant 'docker-compose.yml' file. The command pulls required images on the first run (may take several minutes), and sets up services on their default ports. If local services are already using relevant ports, users may encounter errors, requiring those services to be stopped before proceeding.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
docker compose up -d

```

----------------------------------------

TITLE: Mounting Provisioning Volume in Grafana Deployment - Kubernetes YAML
DESCRIPTION: Specifies how to mount the persistent volume for provisioning resources into the Grafana pod at '/etc/grafana/provisioning'. It configures the volume mount in the container spec, and connects the volume to the previously created 'grafana-provisioning-pvc'. This ensures provisioned YAML files are available to Grafana during startup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_24

LANGUAGE: yaml
CODE:
```
...
    volumeMounts:
      - mountPath: /etc/grafana/provisioning
        name: grafana-provisioning-pv
      ...
volumes:
  - name: grafana-provisioning-pv
    persistentVolumeClaim:
      claimName: grafana-provisioning-pvc
...

```

----------------------------------------

TITLE: Disabling Data Source Cache via Grafana HTTP API (HTTP)
DESCRIPTION: This snippet shows how to disable caching for a specific Grafana data source by sending a POST request to the `/api/datasources/:dataSourceUID/cache/disable` endpoint. The necessary permission is `datasources.caching:write` scoped to `datasources:*`. The example illustrates the request structure and the JSON response confirming successful disabling, reflecting the updated cache status.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_and_resource_caching.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
POST /api/datasources/jZrmlLCGka/cache/disable HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
   "message": "Data source cache disabled",
   "dataSourceID": 1,
   "dataSourceUID": "jZrmlLCGka",
   "enabled": false,
   "ttlQueriesMs": 300000,
   "ttlResourcesMs": 300000,
   "useDefaultTTL": true,
   "defaultTTLMs": 0,
   "created": "2023-04-21T11:49:22-04:00",
   "updated": "2023-04-24T16:30:31-04:00"
}
```

----------------------------------------

TITLE: Documenting Configuration Parameters for Grafana - Markdown
DESCRIPTION: This Markdown snippet defines a configuration reference table for Grafana's authentication settings, including role mapping, SAML NameID formats, and Microsoft Entra ID (Azure AD) OAuth parameters. It does not require any dependencies beyond Markdown rendering in documentation platforms. All parameters are represented in a tabular format, clarifying whether they are required, their purposes, and defaults when applicable. Expected input is the documentation build system, and output is formatted docs for administrators; the limitation is that the table only describes static config settings and no dynamic behavior.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_26

LANGUAGE: Markdown
CODE:
```
| `role_values_grafana_admin`                                | No       | List of comma- or space-separated roles which will be mapped into the Grafana Admin (Super Admin) role.                                                                                                      |                                                       |
| `skip_org_role_sync`                                       | No       | Whether to skip organization role synchronization.                                                                                                                                                           | `false`                                               |
| `name_id_format`                                           | No       | Specifies the format of the requested NameID element in the SAML AuthnRequest.                                                                                                                               | `urn:oasis:names:tc:SAML:2.0:nameid-format:transient` |
| `client_id`                                                | No       | Client ID of the IdP service application used to retrieve more information about the user from the IdP. (Microsoft Entra ID only)                                                                            |                                                       |
| `client_secret`                                            | No       | Client secret of the IdP service application used to retrieve more information about the user from the IdP. (Microsoft Entra ID only)                                                                        |                                                       |
| `token_url`                                                | No       | URL to retrieve the access token from the IdP. (Microsoft Entra ID only)                                                                                                                                     |                                                       |
| `force_use_graph_api`                                      | No       | Whether to use the IdP service application retrieve more information about the user from the IdP. (Microsoft Entra ID only)                                                                                  | `false`                                               |
```

----------------------------------------

TITLE: Importing Layout Components and Storybook Blocks in TypeScript
DESCRIPTION: This code snippet imports essential modules and components required for displaying and documenting layout patterns within Storybook. Dependencies include React components for layout (Layout, HorizontalGroup, VerticalGroup), UI elements (Button, Select), as well as Storybook Canvas and ArgTypes for documentation. This serves as the setup for integrating component stories and prop definitions within the Storybook interface.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Layout.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Canvas, ArgTypes } from '@storybook/blocks';
import { Layout, HorizontalGroup, VerticalGroup } from './Layout';
import { Button } from '../Button';
import { Select } from '../index';
import { ExampleFrame } from '../../utils/storybook/ExampleFrame';
import * as LayoutStories from './Layout.story';
```

----------------------------------------

TITLE: Configuring gRPC Server Network and TLS Settings - INI
DESCRIPTION: This snippet defines the gRPC server's network parameters, such as protocol, listening address, TLS usage, certificate files, unary call logging, and message size limits. Specified under the [grpc_server] section in the INI configuration file, these settings allow administrators to control how the gRPC server listens for connections, handles logging, and manages message size constraints. Leaving fields like cert_file, key_file, max_recv_msg_size, or max_send_msg_size unset will result in use of default gRPC values; improper configuration may affect server security and performance.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/grpcserver/README.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[grpc_server]
network = "tcp"
address = "127.0.0.1:10000"
use_tls = false
cert_file =
key_file =
# this will log the request and response for each unary gRPC call
enable_logging = false
# Maximum size of a message that can be received in bytes. If not set, uses the gRPC default (4MiB).
max_recv_msg_size =
# Maximum size of a message that can be sent in bytes. If not set, uses the gRPC default (unlimited).
max_send_msg_size =

```

----------------------------------------

TITLE: Configuring Grafana Domain in Configuration File - Bash
DESCRIPTION: This snippet demonstrates how to set the domain Grafana will use for rendering links and processing redirects. The configuration should be placed inside the Grafana configuration file, typically grafana.ini, under the [server] section. Set the 'domain' value to match the hostname used by your reverse proxy. Requires Grafana service restart for changes to take effect. The 'domain' parameter is essential for proper reverse proxy behavior.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
[server]\ndomain = example.com
```

----------------------------------------

TITLE: Listing Available Plugins from Repository (Bash)
DESCRIPTION: Uses the 'plugins list-remote' command to display a list of plugins available for installation from the configured Grafana plugin repository (default or overridden).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
grafana cli plugins list-remote
```

----------------------------------------

TITLE: Using [[varname]] Syntax in SQL Queries
DESCRIPTION: SQL query example using the [[varname]] syntax to incorporate a template variable named 'hostname' with the Grafana time filter macro.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/template-variables/index.md#2025-04-23_snippet_5

LANGUAGE: sql
CODE:
```
SELECT
  atimestamp as time,
  aint as value
FROM table
WHERE $__timeFilter(atimestamp) and hostname in([[hostname]])
ORDER BY atimestamp
```

----------------------------------------

TITLE: Pinning Grafana Terraform Provider Version for API Key Migration
DESCRIPTION: This Terraform configuration block specifies the required Grafana provider (`grafana/grafana`) and pins its version to exactly `2.19.0`. This is necessary for configurations still using the `grafana_api_key` resource, which was removed in provider version 3.0.0, allowing for migration before upgrading the provider.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_4

LANGUAGE: hcl
CODE:
```
terraform {
  required_providers {
    grafana = {
      source  = "grafana/grafana"
      version = "2.19.0"
    }
  }
}
```

----------------------------------------

TITLE: Controlled RadioButton and Select Inputs with InputControl (JavaScript/JSX)
DESCRIPTION: Shows integrating controlled components like RadioButtonGroup and Select within the Form using InputControl and the exposed control prop. The render prop pattern allows mapping react-hook-form state to non-standard input components. Ensures compatibility with react-hook-form for non-standard or controlled inputs, depending on InputControl, Field, and specific input widgets.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_4

LANGUAGE: jsx
CODE:
```
import { Form, Field, InputControl } from '@grafana/ui';

// render function
<Form ...>{({register, errors, control}) => (
  <>
    <Field label="RadioButtonExample">
      <InputControl
        {/* Render InputControl as controlled input (RadioButtonGroup) */}
        render={({field}) => <RadioButtonGroup {...field} options={...} />}
        {/* Pass control exposed from Form render prop */}
        control={control}
        name="radio"
      />
    </Field>

    <Field label="SelectExample">
      <InputControl
        {/* Render InputControl as controlled input (Select) */}
        render={({field}) => <Select {...field} options={...} />}
        {/* Pass control exposed from Form render prop */}
        control={control}
        name="select"
      />
    </Field>
  </>
)}
</Form>
```

----------------------------------------

TITLE: Enabling Refresh Token Usage in Grafana (INI)
DESCRIPTION: Configuration setting within the `[auth.generic_oauth]` section of Grafana's INI file to enable the use of refresh tokens obtained from Keycloak. This allows Grafana to obtain new access tokens without requiring user re-login when the initial access token expires. This requires the `offline_access` scope to be included in the `scopes` setting.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_8

LANGUAGE: ini
CODE:
```
[auth.generic_oauth]
# ... other settings
use_refresh_token = true
```

----------------------------------------

TITLE: Creating Snapshot via Grafana HTTP API (HTTP)
DESCRIPTION: Demonstrates forming a POST HTTP request to create a new Grafana dashboard snapshot by submitting a complete dashboard model as JSON to the /api/snapshots endpoint. Requires authentication via Bearer token and Content-Type headers. The dashboard payload and optional parameters like 'expires' customize snapshot creation. The API accepts a JSON request body and returns a JSON response with keys for snapshot sharing and deletion.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
    POST /api/snapshots HTTP/1.1\n    Accept: application/json\n    Content-Type: application/json\n    Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n    {\n      "dashboard": {\n        "editable":false,\n        "nav":[\n        {\n          "enable":false,\n        "type":"timepicker"\n        }\n        ],\n        "rows": [\n          {\n\n          }\n        ],\n        "style":"dark",\n        "tags":[],\n        "templating":{\n          "list":[\n          ]\n        },\n        "time":{\n        },\n        "timezone":"browser",\n        "title":"Home",\n        "version":5\n        },\n      "expires": 3600\n    }
```

----------------------------------------

TITLE: Configuring SOCKS5 Proxy in Grafana's config.ini
DESCRIPTION: This code snippet shows the configuration options for setting up a secure SOCKS5 proxy in Grafana's config.ini file. It includes settings for enabling the feature, specifying certificates, and setting the proxy address.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/proxy/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
secure_socks_datasource_proxy:
  enabled = true
  root_ca_cert = /etc/ca.crt
  client_key = /etc/client.key
  client_cert = /etc/client.crt
  server_name = proxy.grafana.svc.cluster.local
  proxy_address = localhost:9090
  allow_insecure = false
```

----------------------------------------

TITLE: Example Grafana Alert Description Annotation Text
DESCRIPTION: Provides an example text string for the 'description' annotation in a Grafana alert rule. This detailed description offers context about the alert trigger (e.g., high CPU load), potential impact (e.g., outage risk), and suggested response actions (e.g., scaling resources, investigation).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/alert-rules/annotation-label.md#2025-04-23_snippet_1

LANGUAGE: text
CODE:
```
The web server's CPU has exceeded 80% for more than 5 minutes.\n\nThis indicates that the system is under heavy load and may result in an outage.\n\nConsider scaling the server's resources and investigating bottlenecks.
```

----------------------------------------

TITLE: Creating a Grafana Service Account via HTTP API
DESCRIPTION: This shell command uses `curl` to send a POST request to the `/api/serviceaccounts` endpoint in Grafana to create a new Service Account named 'my-service-account' with the 'Viewer' role. Basic authentication (`admin:admin`) is used. The response contains the details of the created service account, including its ID.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_1

LANGUAGE: sh
CODE:
```
# create a service account
curl -X POST -H "Content-Type: application/json" -d '{"name": "my-service-account", "role": "Viewer"}' http://admin:admin@localhost:3000/api/serviceaccounts

# response with the created service account id,name, login
{"id":1,"name":"my-service-account","login":"sa-my-service-account","orgId":1,"isDisabled":false,"role":"Viewer","tokens":0,"avatarUrl":""}%
```

----------------------------------------

TITLE: Retrieving Library Element by UID Request Example (HTTP)
DESCRIPTION: Example HTTP GET request to fetch a specific library element using its unique identifier (UID) via the `/api/library-elements/:uid` endpoint. The UID `V--OrYHnz` is provided in the path. Requires authentication via Bearer token.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
GET /api/library-elements/V--OrYHnz HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Re-encrypting Secrets using Grafana Admin API
DESCRIPTION: Triggers the re-encryption of database secrets via the Grafana Admin API endpoint `/encryption/reencrypt-secrets`. This process uses envelope encryption and a fresh data key. It is recommended to perform this action during maintenance.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_3

LANGUAGE: plaintext
CODE:
```
/encryption/reencrypt-secrets
```

----------------------------------------

TITLE: Configuring Redis HA Engine for Grafana Live
DESCRIPTION: Configuration example for setting up Redis as the high availability engine for Grafana Live, including connection details and password configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_28

LANGUAGE: ini
CODE:
```
[live]
ha_engine = redis
ha_engine_address: redis-headless.grafana.svc.cluster.local:6379
ha_engine_password: $__file{/your/redis/password/secret/mount}
```

----------------------------------------

TITLE: Creating a Playlist via Grafana HTTP API
DESCRIPTION: Sends a POST request to `/api/playlists/` to create a new playlist. Requires `Authorization` and `Content-Type: application/json` headers. The request body must be a JSON object specifying the playlist's `name`, `interval`, and `items`. Returns a JSON object confirming the creation with the new playlist's `uid`, `name`, and `interval`. Note: The provided example uses PUT method and a specific UID, which typically corresponds to an update or create-or-update operation, while the endpoint description indicates POST for creation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/playlist.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
PUT /api/playlists/1 HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
  {
    "name": "my playlist",
    "interval": "5m",
    "items": [
      {
        "type": "dashboard_by_uid",
        "value": "3",
        "order": 1,
        "title":"my third dashboard"
      },
      {
        "type": "dashboard_by_tag",
        "value": "myTag",
        "order": 2,
        "title":"my other dashboard"
      }
    ]
  }
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
  {
    "uid": "1",
    "name": "my playlist",
    "interval": "5m"
  }
```

----------------------------------------

TITLE: Defining Grafana Roles in Azure AD App Manifest (JSON)
DESCRIPTION: This JSON snippet shows the structure for defining Grafana application roles (Admin, Viewer, Editor) within the `appRoles` section of an Azure AD application manifest. Each role object requires a unique ID (replace `SOME_UNIQUE_ID`), specifies allowed member types, description, display name, and a `value` corresponding to the Grafana role name. This configuration is an alternative to defining roles through the Azure Portal UI.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
   \"appRoles\": [
   \t\t{
   \t\t\t\"allowedMemberTypes\": [
   \t\t\t\t\"User\"
   \t\t\t],
   \t\t\t\"description\": \"Grafana org admin Users\",
   \t\t\t\"displayName\": \"Grafana Org Admin\",
   \t\t\t\"id\": \"SOME_UNIQUE_ID\",
   \t\t\t\"isEnabled\": true,
   \t\t\t\"lang\": null,
   \t\t\t\"origin\": \"Application\",
   \t\t\t\"value\": \"Admin\"
   \t\t},
   \t\t{
   \t\t\t\"allowedMemberTypes\": [
   \t\t\t\t\"User\"
   \t\t\t],
   \t\t\t\"description\": \"Grafana read only Users\",
   \t\t\t\"displayName\": \"Grafana Viewer\",
   \t\t\t\"id\": \"SOME_UNIQUE_ID\",
   \t\t\t\"isEnabled\": true,
   \t\t\t\"lang\": null,
   \t\t\t\"origin\": \"Application\",
   \t\t\t\"value\": \"Viewer\"
   \t\t},
   \t\t{
   \t\t\t\"allowedMemberTypes\": [
   \t\t\t\t\"User\"
   \t\t\t],
   \t\t\t\"description\": \"Grafana Editor Users\",
   \t\t\t\"displayName\": \"Grafana Editor\",
   \t\t\t\"id\": \"SOME_UNIQUE_ID\",
   \t\t\t\"isEnabled\": true,
   \t\t\t\"lang\": null,
   \t\t\t\"origin\": \"Application\",
   \t\t\t\"value\": \"Editor\"
   \t\t}
   \t],
```

----------------------------------------

TITLE: Configuring Prometheus Scrape for Grafana Metrics (YAML)
DESCRIPTION: This YAML snippet demonstrates how to add a Prometheus scrape_config job for collecting metrics from Grafana, specifying job parameters such as scrape interval, timeout, path, scheme, and target endpoints. It is used to facilitate meta-monitoring by enabling Prometheus (or a compatible metrics database) to collect and store critical Grafana alerting metrics. Dependencies include a running Prometheus instance, network access to the Grafana server, and Prometheus configuration reload after update. Inputs are Prometheus job configuration fields; outputs are time-series metrics accessible in Prometheus for further dashboarding or alerting use.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/meta-monitoring.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
- job_name: grafana\n  honor_timestamps: true\n  scrape_interval: 15s\n  scrape_timeout: 10s\n  metrics_path: /metrics\n  scheme: http\n  follow_redirects: true\n  static_configs:\n    - targets:\n        - grafana:3000\n
```

----------------------------------------

TITLE: Testing Select Component Interactions using React Testing Library and react-select-event (TSX)
DESCRIPTION: Shows how to write a test for the Select component using @testing-library/react and react-select-event, by rendering the component with labeled controls and simulating user interaction. Requires @testing-library/react for rendering/testing, react-select-event for selection simulation, and jest for assertions. Inputs are simulated user selections; output is a checked onChange call with the selected value.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Select/Select.mdx#2025-04-23_snippet_6

LANGUAGE: tsx
CODE:
```
import { render, screen } from '@testing-library/react';
import selectEvent from 'react-select-event';
import { Select } from '@grafana/ui';

it('should call onChange', () => {
  const onChange = jest.fn();

  render(
    <>
      <label htmlFor="my-select">My select</label>
      <Select onChange={onChange} options={options} inputId="my-select" />
    </>
  );

  const selectEl = screen.getByLabelText('My select');
  expect(selectEl).toBeInTheDocument();

  await selectEvent.select(selectEl, 'Option 2', { container: document.body });
  expect(onChange).toHaveBeenCalledWith({
    label: 'Option 2',
    value: 2,
  });
});
```

----------------------------------------

TITLE: SQL Query for Grafana Region Annotations with Start and End Times
DESCRIPTION: This query retrieves data for Grafana region annotations, using separate columns for start and end times in epoch format. It includes description as text and tags.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_8

LANGUAGE: sql
CODE:
```
SELECT
  time_sec as time,
  time_end_sec as timeend,
  description as [text],
  tags
FROM
  [events]
WHERE
  $__unixEpochFilter(time_sec)
ORDER BY 1
```

----------------------------------------

TITLE: Defining Notification Template for Alert Groups with Go Templating Language - Go
DESCRIPTION: This Go templating snippet defines reusable templates for formatting notification messages sent via contact points in Grafana. It introduces two template blocks: 'alerts.message', which summarizes the count of firing and resolved alerts and uses the 'alerts.summarize' subtemplate to list summaries for each alert. The template expects .Alerts.Firing and .Alerts.Resolved in its context and is suitable for customizing notifications across multiple contact points. The snippet assumes variables and functions provided by Grafana's notification template engine environment.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/templates.md#2025-04-23_snippet_3

LANGUAGE: go
CODE:
```
{{ define "alerts.message" -}}
  {{ if .Alerts.Firing -}}
    {{ len .Alerts.Firing }} firing alert(s)
    {{ template "alerts.summarize" .Alerts.Firing }}
  {{- end }}
  {{- if .Alerts.Resolved -}}
    {{ len .Alerts.Resolved }} resolved alert(s)
    {{ template "alerts.summarize" .Alerts.Resolved }}
  {{- end }}
{{- end }}

{{ define "alerts.summarize" -}}
  {{ range . -}}
  - {{ index .Annotations "summary" }}
  {{ end }}
{{ end }}
```

----------------------------------------

TITLE: Configuration Table in Markdown
DESCRIPTION: Markdown table listing all Okta OIDC configuration options including required flags, cloud support status, descriptions, and default values. The table covers essential settings like client credentials, authentication endpoints, scopes, and role mapping options.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/okta/index.md#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
| Setting                 | Required | Supported on Cloud | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | Default                       |
| ----------------------- | -------- | ------------------ || ----------------------------- |
| `enabled`               | No       | Yes                | Enables Okta OIDC authentication.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | `false`                       |
| `name`                  | No       | Yes                | Name that refers to the Okta OIDC authentication from the Grafana user interface.                                                                                                                                                                                                                                                                                                                                                                                                                                   | `Okta`                        |
| `icon`                  | No       | Yes                | Icon used for the Okta OIDC authentication in the Grafana user interface.                                                                                                                                                                                                                                                                                                                                                                                                                                           | `okta`                        |
| `client_id`             | Yes      | Yes                | Client ID provided by your Okta OIDC app.                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |                               |
| `client_secret`         | Yes      | Yes                | Client secret provided by your Okta OIDC app.                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |                               |
| `auth_url`              | Yes      | Yes                | Authorization endpoint of your Okta OIDC provider.                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |                               |
| `token_url`             | Yes      | Yes                | Endpoint used to obtain the Okta OIDC access token.                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |                               |
| `api_url`               | Yes      | Yes                | Endpoint used to obtain user information.                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |                               |
| `scopes`                | No       | Yes                | List of comma- or space-separated Okta OIDC scopes.                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | `openid profile email groups` |
| `allow_sign_up`         | No       | Yes                | Controls Grafana user creation through the Okta OIDC login. Only existing Grafana users can log in with Okta OIDC if set to `false`.                                                                                                                                                                                                                                                                                                                                                                                | `true`                        |
| `auto_login`            | No       | Yes                | Set to `true` to enable users to bypass the login screen and automatically log in. This setting is ignored if you configure multiple auth providers to use auto-login.                                                                                                                                                                                                                                                                                                                                              | `false`                       |
| `role_attribute_path`   | No       | Yes                | [JMESPath](http://jmespath.org/examples.html) expression to use for Grafana role lookup. Grafana will first evaluate the expression using the Okta OIDC ID token. If no role is found, the expression will be evaluated using the user information obtained from the UserInfo endpoint. The result of the evaluation should be a valid Grafana role (`None`, `Viewer`, `Editor`, `Admin` or `GrafanaAdmin`). For more information on user role mapping, refer to [Configure role mapping](#configure-role-mapping). |                               |
| `role_attribute_strict` | No       | Yes                | Set to `true` to deny user login if the Grafana org role cannot be extracted using `role_attribute_path` or `org_mapping`. For more information on user role mapping, refer to [Configure role mapping](#configure-role-mapping).                                                                                                                                                                                                                                                                                   | `false`                       |
```

----------------------------------------

TITLE: Setting Default Authorization Server Behavior for Grafana via INI
DESCRIPTION: This snippet defines the default behavior for the authorization server using the [authorization] section, indicating the server does not listen for remote connections (listen=false), the client operates in in-process mode (mode="inproc"), and no remote address is set. This setup avoids exposing the authorization endpoint externally and keeps all communications internal. The configuration is suitable for local development setups or single-instance deployments.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/README.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[authorization]
remote_address = ""
listen = false
mode = "inproc"

```

----------------------------------------

TITLE: Enabling Audit Logging for Access Control in Grafana - Bash
DESCRIPTION: This snippet enables audit logging by adding an [auditing] section to the Grafana configuration file and setting enabled to true. Audit logs document all permission and role updates, supporting compliance and troubleshooting. This feature requires Grafana Enterprise or Grafana Cloud. The change takes effect after Grafana is restarted, and additional documentation can be consulted for usage details.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/troubleshooting/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
[auditing]
enabled = true
```

----------------------------------------

TITLE: Searching Users with Paging via Grafana HTTP API (http)
DESCRIPTION: Illustrates a paged search for users, where the query parameter filters results by name, login, or email. Uses Basic authentication and standard headers. Returns paged results suitable for UI listing or further processing.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
GET /api/users/search?perpage=10&page=1&query=mygraf HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=
```

----------------------------------------

TITLE: Changing Encryption Mode to AES-GCM in Grafana Enterprise Configuration
DESCRIPTION: For Grafana Enterprise users, the encryption algorithm can be changed from the default AES-CFB to AES-GCM. This is done by updating the `algorithm` setting within the `[security.encryption]` section of the Grafana configuration file. AES-GCM may be required for specific security compliance or consistency.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_9

LANGUAGE: ini
CODE:
```
[security.encryption]
algorithm = AES-GCM # Example value
```

----------------------------------------

TITLE: Applying Grafana Kubernetes Manifest (Bash)
DESCRIPTION: This command uses `kubectl apply` to submit the Kubernetes resource definitions contained within the `grafana.yaml` file to the Kubernetes API server. This action creates or updates the PersistentVolumeClaim, Deployment, and Service as defined in the manifest file. Requires `kubectl` and the presence of `grafana.yaml` in the current directory or a specified path.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_44

LANGUAGE: bash
CODE:
```
kubectl apply -f grafana.yaml
```

----------------------------------------

TITLE: Configuring Pushover Contact Point - YAML
DESCRIPTION: Establishes a Pushover integration for Grafana alerting. Requires 'apiToken' and 'userKey', and supports optional message, device, priority, TTL, and sound parameters. Inputs define message delivery behavior and recipient devices. Outputs push notifications via Pushover's service. Requires valid Pushover credentials; optional fields must follow Pushover API constraints.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_15

LANGUAGE: yaml
CODE:
```
type: pushover\nsettings:\n  # <string, required>\n  apiToken: XXX\n  # <string, required>\n  userKey: user1,user2\n  # <string>\n  device: device1,device2\n  # <string> options (high to low): 2,1,0,-1,-2\n  priority: '2'\n  # <string>\n  retry: '30'\n  # <string>\n  expire: '120'\n  # <string> the number of seconds before a message expires and is deleted automatically. Examples: 10s, 5m30s, 8h.\n  ttl:\n  # <string>\n  sound: siren\n  # <string>\n  okSound: magic\n  # <string>\n  message: |\n    {{ template \"default.message\" . }}\n
```

----------------------------------------

TITLE: Restricting Metrics Endpoint with Basic Authentication - INI
DESCRIPTION: This snippet provides configuration variables for optionally securing the metrics endpoint using HTTP basic authentication. Placing or uncommenting this in your grafana.ini or custom.ini will require a basic username/password for accessing the metrics endpoint. Parameters: basic_auth_username (string), basic_auth_password (string). Outputs a protected metrics endpoint. If left empty, no authentication is applied.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-monitoring.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
basic_auth_username =\nbasic_auth_password =\n
```

----------------------------------------

TITLE: Rendering an Elevated (Toast-Style) Alert Directly in JSX
DESCRIPTION: This JSX snippet illustrates rendering the `Alert` component with the `elevated` prop, which gives it the visual appearance of a Toast notification (typically used with position styling for the top-right corner). It accepts `title`, `severity`, an `onRemove` handler, and child content for details. While this shows the component structure, the documentation strongly advises against this direct usage for toasts, recommending the `AppEvents` method instead for triggering them.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Alert/Alert.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
<Alert title={title} severity={severity} onRemove={onRemove} elevated>
  Child content that includes some alert details, like maybe what actually happened.
</Alert>
```

----------------------------------------

TITLE: Calling Template to Separate Firing and Resolved Alerts in Grafana - Go
DESCRIPTION: This snippet calls the 'custom.firing_and_resolved_alerts' template, passing the entire notification context. Results in alert summaries grouped by status as defined by the template, and should be included in notification message formatting.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_9

LANGUAGE: go
CODE:
```
{{ template "custom.firing_and_resolved_alerts" . }}
```

----------------------------------------

TITLE: Provisioning Grafana Data Sources and Correlations using YAML
DESCRIPTION: Defines Grafana data sources ('Source', 'Target') and two correlations using YAML provisioning. The correlations link the 'Source' (logs) to the 'Target' (metrics) data source. One correlation uses a regex transformation to extract an 'application' name from the 'msg' field, while the other uses a logfmt transformation to parse the log line and extract a 'service' name. These extracted values are used as variables ('$${application}', '$${service}') in the respective target query aliases. Note the double dollar sign '$$' is used to escape the '$' character in provisioning files. Requires Grafana's provisioning system.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/correlations/use-variables-and-transformations/index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
datasources:
  - name: Target
    uid: test-target
    type: testdata

  - name: Source
    uid: test-source
    type: testdata
  - name: Source
    uid: test-source
    type: testdata
    correlations:
      - targetUID: test-target
        label: App metrics
        description: Application HTTP request metrics
        config:
          type: query
          target:
            scenario_id: random_walk
            alias: $${application}
          field: msg
          transformations:
            - type: regex
              field: msg
              expression: service=(\w+)\.\w+
              mapValue: application
      - targetUID: test-target
        label: Service metrics
        description: Service metrics
        config:
          type: query
          target:
            scenario_id: random_walk
            alias: $${service}
          field: msg
          transformations:
            - type: logfmt
              field: msg
```

----------------------------------------

TITLE: Basic Role Mapping Example for JWT Authentication
DESCRIPTION: Configuration for a basic role mapping where a direct role property from the JWT is used to assign the user role.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_10

LANGUAGE: ini
CODE:
```
role_attribute_path = role
```

----------------------------------------

TITLE: Custom Button ConfirmButton Implementation in React
DESCRIPTION: Advanced implementation showing how to use ConfirmButton with a custom Button component as a child. The example demonstrates how to pass a custom button while maintaining the confirmation functionality.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ConfirmButton/ConfirmButton.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<ConfirmButton
  closeOnConfirm
  size="md"
  confirmText="Are you sure?"
  confirmVariant="secondary"
  onConfirm={() => {
    console.log('Action confirmed!');
  }}
>
  <Button variant="secondary">Click me</Button>
</ConfirmButton>
```

----------------------------------------

TITLE: Configuring Grafana Dashboard Provisioning from Filesystem using YAML
DESCRIPTION: This YAML snippet shows an example configuration for provisioning Grafana dashboards from the local filesystem. It defines a list of `providers` under `apiVersion: 1`. Each provider specifies a unique `name`, target `orgId`, destination `folder` or `folderUid`, and `type` (typically 'file'). Important options under `options` for the 'file' type include the `path` to the directory containing dashboard JSON files, `updateIntervalSeconds` for polling changes, `disableDeletion` to prevent removal, and `allowUiUpdates` to control if provisioned dashboards can be modified via the Grafana UI.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md#2025-04-23_snippet_4

LANGUAGE: yaml
CODE:
```
apiVersion: 1

providers:
  # <string> an unique provider name. Required
  - name: 'a unique provider name'
    # <int> Org id. Default to 1
    orgId: 1
    # <string> name of the dashboard folder.
    folder: ''
    # <string> folder UID. will be automatically generated if not specified
    folderUid: ''
    # <string> provider type. Default to 'file'
    type: file
    # <bool> disable dashboard deletion
    disableDeletion: false
    # <int> how often Grafana will scan for changed dashboards
    updateIntervalSeconds: 10
    # <bool> allow updating provisioned dashboards from the UI
    allowUiUpdates: false
    options:
      # <string, required> path to dashboard files on disk. Required when using the 'file' type
      path: /var/lib/grafana/dashboards
      # <bool> use folder names from filesystem to create folders in Grafana
      foldersFromFilesStructure: true
```

----------------------------------------

TITLE: Defining 'None' Scope in Grafana RBAC
DESCRIPTION: Indicates that an action does not require a specific scope. If an action lists 'None' as its scope, permissions for that action are granted without needing to specify a resource target. For example, `teams:create` might use 'None'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_46

LANGUAGE: text
CODE:
```
None
```

----------------------------------------

TITLE: Setting Encryption Provider in grafana.ini Security Section (INI)
DESCRIPTION: This snippet demonstrates how to update the [security] section in grafana.ini to specify the active encryption provider for Grafana. It lists the secret_key for legacy operations, the new Azure Key Vault provider, and available key providers. Proper configuration here ensures Grafana uses the designated provider for encrypting and decrypting secrets.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-azure-key-vault/index.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[security]
# previous encryption key, used for legacy alerts, decrypting existing secrets or used as default provider when external providers are not configured
secret_key = AaaaAaaa
# encryption provider key in the format <PROVIDER>.<KEY-NAME>
encryption_provider = azurekv.example-encryption-key
# list of configured key providers, space separated
available_encryption_providers =  azurekv.example-encryption-key
```

----------------------------------------

TITLE: Accessing and Displaying KV Pair Values in Grafana Go Templates
DESCRIPTION: This Go template snippet defines a custom template that accesses properties from the CommonLabels KV object by key. It demonstrates how KV keys can be accessed via dot notation, returning string representations even if the original values are boolean or numeric. Use this approach when you need to include dynamic label data in your notification outputs. Input is a context object with .CommonLabels, and output is the string value associated with the 'grafana_folder' key.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_4

LANGUAGE: go
CODE:
```
{{ define "custom_template" }}
  {{ .CommonLabels.grafana_folder }}
{{ end }}
```

----------------------------------------

TITLE: Azure AD SAML Attribute URL for Other Claims (Email Example)
DESCRIPTION: Shows an example URL (`http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress`) for mapping standard SAML assertion attributes, like email address, when using Azure AD with Grafana. Unlike group/role claims, these often use standard schema URLs.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml-ui/index.md#2025-04-23_snippet_1

LANGUAGE: text
CODE:
```
http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
```

----------------------------------------

TITLE: Listing Contents of Provisioning Directories in Grafana Pod - kubectl Bash
DESCRIPTION: Runs commands to list contents of the main provisioning directory, and the 'alerting' subdirectory, inside the running Grafana pod. Helpful for verifying correct volume/mount configuration and existence of provisioned files such as 'alerting.yaml'. Complete this after mounting or copying provisioning folders, using the appropriate pod name and namespace.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_26

LANGUAGE: bash
CODE:
```
kubectl exec -n my-grafana <pod_name> -- ls /etc/grafana/provisioning/

```

LANGUAGE: bash
CODE:
```
kubectl exec -n my-grafana <pod_name> -- ls /etc/grafana/provisioning/alerting

```

----------------------------------------

TITLE: Querying Azure Monitor Logs with Grafana Template Variables (KQL)
DESCRIPTION: This Kusto Query Language (KQL) query retrieves performance data ('Perf' table) from an Azure Log Analytics workspace. It filters data based on Grafana template variables for object (`$object`), metric (`$metric`), and computer (`$computer`), within the dashboard's selected time range (`$__timeFrom()`, `$__timeTo()`). It then aggregates the average `CounterValue` over time intervals (`$__interval`) per `Computer` and sorts the results chronologically. The `$__contains` macro is used to handle potential multi-value `$computer` variables. Requires an Azure Monitor data source and defined variables in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/template-variables/index.md#2025-04-23_snippet_0

LANGUAGE: kusto
CODE:
```
```kusto
Perf
| where ObjectName == "$object" and CounterName == "$metric"
| where TimeGenerated >= $__timeFrom() and TimeGenerated <= $__timeTo()
| where  $__contains(Computer, $computer)
| summarize avg(CounterValue) by bin(TimeGenerated, $__interval), Computer
| order by TimeGenerated asc
```
```

----------------------------------------

TITLE: Using Alternative Syntax for Templating Variables in PostgreSQL Query
DESCRIPTION: Shows an alternative syntax for using templating variables in a PostgreSQL query. This example uses the [[varname]] syntax instead of $varname to include the hostname variable in the query.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_14

LANGUAGE: sql
CODE:
```
SELECT
  atimestamp as time,
  aint as value
FROM table
WHERE $__timeFilter(atimestamp) and hostname in([[hostname]])
ORDER BY atimestamp ASC
```

----------------------------------------

TITLE: Authenticating Grafana API Requests with a Service Account Token
DESCRIPTION: This shell command uses `curl` to send a GET request to the `/api/folders` endpoint. Authentication is performed using the Service Account Token generated in the previous step, passed in the `Authorization` header with the `Bearer` prefix. The response shows the folders accessible with the token's permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_3

LANGUAGE: sh
CODE:
```
# now you can authenticate the same way as you did with the API key
curl --request GET --url http://localhost:3000/api/folders --header 'Authorization: Bearer glsa_9244xlVFZK0j8Lh4fU8Cz6Z5tO664zIi_7a762939'

# response
[{"id":1,"uid":"a5261a84-eebc-4733-83a9-61f4713561d1","title":"gdev dashboards"}]%
```

----------------------------------------

TITLE: Example Output of Common Labels and Annotations in Grafana Templates - template_output
DESCRIPTION: Shows example notification output after rendering the shared labels and annotations template. Indicates one resolved and one firing alert, two common labels, and no common annotations. Outputs are plain text for notification consumption.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_13

LANGUAGE: template_output
CODE:
```
1 resolved alert(s)
1 firing alert(s)
Common labels: 2
- grafana_folder = server_alerts
- team = server_admin

Common annotations: 0
```

----------------------------------------

TITLE: Configuring Grafana HA Settings in grafana.ini (INI)
DESCRIPTION: This INI configuration snippet shows the `[unified_alerting]` section settings required in `grafana.ini` (or `custom.ini`) to enable high availability in a Kubernetes environment. It uses the `POD_IP` environment variable (set up previously) for `ha_listen_address` and `ha_advertise_address`. The `ha_peers` setting points to the Kubernetes headless service (`grafana-alerting.grafana:9094`) for peer discovery. It also sets peer communication timeouts.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-high-availability/_index.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
[unified_alerting]
enabled = true
ha_listen_address = "${POD_IP}:9094"
ha_peers = "grafana-alerting.grafana:9094"
ha_advertise_address = "${POD_IP}:9094"
ha_peer_timeout = 15s
ha_reconnect_timeout = 2m
```

----------------------------------------

TITLE: Running Grafana Docker with Debug Logging (Bash)
DESCRIPTION: Starts a Grafana Enterprise Docker container with debug logging enabled for troubleshooting purposes. This is done by setting the `GF_LOG_LEVEL` environment variable to `debug` using the `-e` flag in the `docker run` command.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_16

LANGUAGE: bash
CODE:
```
docker run -d -p 3000:3000 --name=grafana \
  -e "GF_LOG_LEVEL=debug" \
  grafana/grafana-enterprise
```

----------------------------------------

TITLE: Implementing a Grafana Service in Go
DESCRIPTION: A complete example of a Grafana service implementation, showing the service structure, provider function, initialization, and implementing interfaces for background services and disabled services.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/services.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
package example

// Service service is the service responsible for X, Y and Z.
type Service struct {
    logger   log.Logger
    cfg      *setting.Cfg
    sqlStore db.DB
}

// ProvideService provides Service as dependency for other services.
func ProvideService(cfg *setting.Cfg, sqlStore db.DB) (*Service, error) {
    s := &Service{
        logger:     log.New("service"),
        cfg:        cfg,
        sqlStore:   sqlStore,
    }

    if s.IsDisabled() {
        // skip certain initialization logic
        return s, nil
    }

    if err := s.init(); err != nil {
        return nil, err
    }

    return s, nil
}

func (s *Service) init() error {
    // additional initialization logic...
    return nil
}

// IsDisabled returns true if the service is disabled.
//
// Satisfies the registry.CanBeDisabled interface that guarantees
// that Run() isn't called if the service is disabled.
func (s *Service) IsDisabled() bool {
	return !s.cfg.IsServiceEnabled()
}

// Run runs the service in the background.
//
// Satisfies the registry.BackgroundService interface which
// guarantees that the service can be registered as a background service.
func (s *Service) Run(ctx context.Context) error {
    // background service logic...
    <-ctx.Done()
    return ctx.Err()
}
```

----------------------------------------

TITLE: Exporting Grafana Enterprise Reports via API in Shell
DESCRIPTION: This shell command uses `curl` to make an HTTP GET request to the `/api/reports` endpoint of the source Grafana Enterprise instance (specified by `$GRAFANA_ONPREM_INSTANCE_URL`). It authenticates using a Bearer token (`$GRAFANA_SOURCE_TOKEN`) provided in the Authorization header. The JSON response containing the report configurations is redirected and saved to a file named `reports.json`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_8

LANGUAGE: shell
CODE:
```
curl ${GRAFANA_ONPREM_INSTANCE_URL}/api/reports -H "Authorization: Bearer $GRAFANA_SOURCE_TOKEN" > reports.json
```

----------------------------------------

TITLE: Configuring Internal Metrics in Grafana - INI
DESCRIPTION: This snippet details the configuration needed to enable Grafana's internal metrics output for Prometheus and Graphite integration. The [metrics] section enables metrics endpoints at /metrics and /metrics/plugins/:pluginId, with flags to control overall output and whether stat_totals_* metrics are included. Place the snippet in grafana.ini or custom.ini, removing leading semicolons to activate. Parameters: enabled (bool), disable_total_stats (bool). Outputs include HTTP endpoints serving Grafana metrics as well as push to Graphite if enabled.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-monitoring.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
# Metrics available at HTTP URL /metrics and /metrics/plugins/:pluginId\n[metrics]\n# Disable / Enable internal metrics\nenabled           = true\n\n# Disable total stats (stat_totals_*) metrics to be generated\ndisable_total_stats = false\n
```

----------------------------------------

TITLE: Loki LogQL Query for Counting Non-200 Status Codes
DESCRIPTION: A LogQL query that counts log lines with status codes other than 200 (OK) and sums the results by message type. Uses the pattern parser to extract message content from log entries and performs an instant query over a 10-minute interval.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-with-logs/index.md#2025-04-23_snippet_4

LANGUAGE: logql
CODE:
```
sum by (message)(count_over_time({filename="/var/log/web_requests.log"} != "status=200" | pattern "<_> <message> duration<_>" [10m]))
```

----------------------------------------

TITLE: Installing Prerequisite Packages for Grafana - Bash
DESCRIPTION: Installs key packages needed to manage repositories and downloads securely before Grafana installation. Requires root privileges and an internet connection. Inputs: None. Outputs: Installs apt-transport-https, software-properties-common, and wget, preparing the system for secure repository access.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
sudo apt-get install -y apt-transport-https software-properties-common wget
```

----------------------------------------

TITLE: Configuring Legacy Grafana Cloud Stack API Key Resources in Terraform
DESCRIPTION: This Terraform example shows how to set up a Grafana provider using a cloud API key, declare a cloud stack resource, and provision a stack API key for management purposes. It requires the Grafana Terraform provider and a valid cloud API key. Key parameters include the stack name, slug, and region, as well as API key naming and role assignment. This approach is deprecated in favor of service accounts but illustrates the older integration method, providing a foundation for migration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_7

LANGUAGE: terraform
CODE:
```
terraform {
  required_providers {
    grafana = {
      source = "grafana/grafana"
    }
  }
}

# Declaring the first provider to be only used for creating the cloud-stack
provider "grafana" {
  alias = "cloud"

  cloud_api_key = "<API-Key>"
}

resource "grafana_cloud_stack" "my_stack" {
  provider = grafana.cloud

  name        = "my_stack"
  slug        = "my_stack"
  region_slug = "eu" # Example “us”,”eu” etc
}

# Creating a Grafana API key to be used as auth
resource "grafana_cloud_stack_api_key" "management" {
  provider = grafana.cloud

  stack_slug = grafana_cloud_stack.my_stack.slug
  name       = "management-key"
  role       = "Admin"
}
```

----------------------------------------

TITLE: Defining and Managing Datasources with Versioning and Pruning - YAML
DESCRIPTION: This code snippet illustrates a comprehensive YAML configuration file for provisioning data sources in Grafana. It covers syntax for deleting data sources (deleteDatasources), enabling prune to remove sources when they are deleted from the file, and specifying data source details including name, type, connection, TLS authentication, and versioning for managing updates across instances. The snippet makes use of required and optional parameters, provides support for sensitive data via secureJsonData, and disables editing by setting editable to false. Requires a working Grafana instance and correct file placement within the provisioning directory.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
# Configuration file version\napiVersion: 1\n\n# List of data sources to delete from the database.\ndeleteDatasources:\n  - name: Graphite\n    orgId: 1\n\n# Mark provisioned data sources for deletion if they are no longer in a provisioning file.\n# It takes no effect if data sources are already listed in the deleteDatasources section.\nprune: true\n\n# List of data sources to insert/update depending on what's\n# available in the database.\ndatasources:\n  # <string, required> Sets the name you use to refer to\n  # the data source in panels and queries.\n  - name: Graphite\n    # <string, required> Sets the data source type.\n    type: graphite\n    # <string, required> Sets the access mode, either\n    # proxy or direct (Server or Browser in the UI).\n    # Some data sources are incompatible with any setting\n    # but proxy (Server).\n    access: proxy\n    # <int> Sets the organization id. Defaults to orgId 1.\n    orgId: 1\n    # <string> Sets a custom UID to reference this\n    # data source in other parts of the configuration.\n    # If not specified, Grafana generates one.\n    uid: my_unique_uid\n    # <string> Sets the data source's URL, including the\n    # port.\n    url: http://localhost:8080\n    # <string> Sets the database user, if necessary.\n    user:\n    # <string> Sets the database name, if necessary.\n    database:\n    # <bool> Enables basic authorization.\n    basicAuth:\n    # <string> Sets the basic authorization username.\n    basicAuthUser:\n    # <bool> Enables credential headers.\n    withCredentials:\n    # <bool> Toggles whether the data source is pre-selected\n    # for new panels. You can set only one default\n    # data source per organization.\n    isDefault:\n    # <map> Fields to convert to JSON and store in jsonData.\n    jsonData:\n      # <string> Defines the Graphite service's version.\n      graphiteVersion: '1.1'\n      # <bool> Enables TLS authentication using a client\n      # certificate configured in secureJsonData.\n      tlsAuth: true\n      # <bool> Enables TLS authentication using a CA\n      # certificate.\n      tlsAuthWithCACert: true\n    # <map> Fields to encrypt before storing in jsonData.\n    secureJsonData:\n      # <string> Defines the CA cert, client cert, and\n      # client key for encrypted authentication.\n      tlsCACert: '...'\n      tlsClientCert: '...'\n      tlsClientKey: '...'\n      # <string> Sets the database password, if necessary.\n      password:\n      # <string> Sets the basic authorization password.\n      basicAuthPassword:\n    # <int> Sets the version. Used to compare versions when\n    # updating. Ignored when creating a new data source.\n    version: 1\n    # <bool> Allows users to edit data sources from the\n    # Grafana UI.\n    editable: false\n
```

----------------------------------------

TITLE: Updating Basic Role Permissions via YAML Provisioning - YAML Example
DESCRIPTION: This YAML configuration snippet demonstrates updating the permissions for the 'basic:grafana_admin' basic role in Grafana via provisioning. It removes team role management permissions and adds folder read/write permissions, leveraging the role's versioning system for updates. Parameters include role name, version, permissions to add or remove, and scope. Requires access to Grafana provisioning and configuration reload. Input is a structured YAML; output is effective role modification upon reload.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_7

LANGUAGE: yaml
CODE:
```
# config file version
apiVersion: 2

roles:
  - name: 'basic:grafana_admin'
    global: true
    version: 3
    from:
      - name: 'basic:grafana_admin'
        global: true
    permissions:
      # Permissions to remove
      - action: 'teams.roles:read'
        scope: 'teams:*'
        state: 'absent'
      - action: 'teams.roles:remove'
        scope: 'permissions:type:delegate'
        state: 'absent'
      - action: 'teams.roles:add'
        scope: 'permissions:type:delegate'
        state: 'absent'
      # Permissions to add
      - action: 'folders:read'
        scope: 'folder:*'
      - action: 'folders:write'
        scope: 'folder:*'

```

----------------------------------------

TITLE: Defining Grafana Plugin Manifest in JSON
DESCRIPTION: A JSON object defining the manifest for a Grafana plugin named 'test', version '1.0.0'. It includes metadata like manifest version ('2.0.0'), signature type ('grafana'), signing organization ('grafana'), timestamp, key ID, and a map of file names ('plugin.json', 'veryImportantFile') to their SHA256 checksums for integrity verification during plugin loading.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/invalid-v2-missing-file/plugin/MANIFEST.txt#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "plugin": "test",
  "version": "1.0.0",
  "time": 1605809299800,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "2bb467c0bfd6c454551419efe475b8bf8573734e73c7bab52b14842adb62886f",
    "veryImportantFile": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
  }
}
```

----------------------------------------

TITLE: Configuring Grafana SAML Role Synchronization
DESCRIPTION: This INI configuration example demonstrates setting up role synchronization within the `[auth.saml]` section. It specifies the SAML attribute containing role information (`assertion_attribute_role = role`) and maps specific values received from the IdP to Grafana roles (None, Viewer, Editor, Admin, Grafana Admin) using the `role_values_*` options.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_10

LANGUAGE: ini
CODE:
```
[auth.saml]
assertion_attribute_role = role
role_values_none = none
role_values_viewer = external
role_values_editor = editor, developer
role_values_admin = admin, operator
role_values_grafana_admin = superadmin
```

----------------------------------------

TITLE: Example JSON Payload for Organization Role Mapping
DESCRIPTION: Sample JSON payload from an OAuth2 provider containing a 'roles' array. These values ('org_foo', 'org_bar', etc.) are used by Grafana's organization mapping configuration (`org_mapping`) to assign users to specific organizations with specific roles.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_8

LANGUAGE: json
CODE:
```
{
  "roles": ["org_foo", "org_bar", "another_org"]
}
```

----------------------------------------

TITLE: Correlation Creation Response in Grafana HTTP API
DESCRIPTION: HTTP response returned when successfully creating a correlation between data sources. The response includes the created correlation details with a unique identifier.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
{
  "message": "Correlation created",
  "result": {
    "description": "Logs to Traces",
    "label": "My Label",
    "sourceUID": "uyBf2637k",
    "targetUID": "PDDA8E780A17E7EF1",
    "uid": "50xhMlg9k",
    "type": "query",
    "config": {
      "field": "message",
      "target": {},
    }
  }
}
```

----------------------------------------

TITLE: Configuring Organization Mapping (`org_mapping`) in Grafana GitHub OAuth
DESCRIPTION: Defines the syntax for the `org_mapping` setting, used to map GitHub teams to Grafana organizations and roles. Mappings are comma- or space-separated strings in the format `<ExternalGitHubTeamName>:<OrgIdOrName>:<Role>`. The wildcard `*` matches all users, and roles can be `None`, `Viewer`, `Editor`, or `Admin`. Role part is optional.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_9

LANGUAGE: plaintext
CODE:
```
<ExternalGitHubTeamName>:<OrgIdOrName>:<Role>
```

LANGUAGE: plaintext
CODE:
```
*
```

LANGUAGE: plaintext
CODE:
```
None, Viewer, Editor, Admin
```

----------------------------------------

TITLE: Importing Grafana GPG Key using Bash
DESCRIPTION: Downloads the Grafana GPG key using `wget` and imports it into the system's RPM keyring using `rpm --import`. This step is necessary to verify the authenticity of Grafana packages installed from the repository.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
wget -q -O gpg.key https://rpm.grafana.com/gpg.key
sudo rpm --import gpg.key
```

----------------------------------------

TITLE: Creating PersistentVolumeClaim for Grafana Provisioning - Kubernetes YAML
DESCRIPTION: Defines a Kubernetes PersistentVolumeClaim (PVC) named 'grafana-provisioning-pvc' for Grafana resource provisioning. The PVC requests 1Mi of storage and sets the access mode to ReadWriteOnce. This PVC must be referenced in the Grafana pod to provide access to provisioning configuration files, ensuring they are persistently available for Grafana on startup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_23

LANGUAGE: yaml
CODE:
```
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-provisioning-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Mi

```

----------------------------------------

TITLE: Configuring Unified Alerting and High Availability - Grafana INI
DESCRIPTION: Provides INI section `[unified_alerting]` for enabling/disabling Grafana Alerting, controlling organization-level alerting, administering config/alertmanager poll intervals, and configuring High Availability (HA) using Redis. Parameters include `enabled`, `disabled_orgs`, polling intervals, Redis connection details (`ha_redis_address`, etc.), cluster peer names, HA-related timeouts, labels, and gossip settings. Redis setup is a prerequisite for HA. Key parameters impact alert delivery timing, cluster network usage, and reliability. All durations accept suffixes (ms, s, m, h, d), and network settings are colon-separated addresses.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_20

LANGUAGE: ini
CODE:
```
[unified_alerting]
# Enable or disable Grafana Alerting (default: true)
enabled = true

# Comma-separated list of organization IDs to disable unified alerting
# disabled_orgs = "1,2,3"

# Frequency of polling for configuration changes (default: 60s)
admin_config_poll_interval = 60s

# Frequency of polling for Alertmanager config changes (default: 60s)
alertmanager_config_poll_interval = 60s

# Redis HA configuration
ha_redis_address = "127.0.0.1:6379"
# ha_redis_username = "redisuser"
# ha_redis_password = "secret"
ha_redis_db = 0
ha_redis_prefix = "grafana_ha:"

# HA Peer options
ha_redis_peer_name = "production-peer-1"
ha_redis_max_conns = 50
ha_listen_address = "0.0.0.0:9094"
ha_advertise_address = "my-grafana-instance:9094"
ha_peers = "host1:9094,host2:9094"
ha_peer_timeout = 15s
ha_label = "prod-cluster-1"
ha_gossip_interval = 200ms
ha_reconnect_timeout = 5m
ha_push_pull_interval = 60s

# Alert rule execution
execute_alerts = true
# Evaluation timeout for data fetching (default: 30s)
evaluation_timeout = 30s
max_attempts = 3
min_interval = 10s

```

----------------------------------------

TITLE: Example Format of a PKCS#8 Private Key PEM Block
DESCRIPTION: Illustrates the typical structure of a PKCS#8 private key file in PEM format. It shows the standard header (`-----BEGIN PRIVATE KEY-----`) and footer (`-----END PRIVATE KEY-----`) lines that enclose the Base64 encoded key data. This format is expected by Grafana for the `private_key_path` or `private_key` setting.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_22

LANGUAGE: plaintext
CODE:
```
-----BEGIN PRIVATE KEY-----
...
...
-----END PRIVATE KEY-----
```

----------------------------------------

TITLE: Querying Loki for Alert State History Data (LogQL)
DESCRIPTION: This LogQL query is used within the Grafana Explore view to verify that alert state history data is being successfully written to the configured Loki instance. It selects log streams labeled with `from="state-history"` (which Grafana uses by default) and pipes the results to the `json` parser to display the structured state change information.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-alert-state-history/index.md#2025-04-23_snippet_2

LANGUAGE: logql
CODE:
```
{ from="state-history" } | json
```

----------------------------------------

TITLE: Installing Grafana Plugin from Custom URL - Bash
DESCRIPTION: Explains installing a Grafana plugin directly from a custom URL by passing the full path via the 'GF_PLUGINS_PREINSTALL' environment variable. Input is of the form <plugin ID>@[<plugin version>]@<url>. Assumes Docker is running and the container has internet access to download the ZIP plugin archive; useful for custom or private plugins not available in the official repository.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
docker run -d -p 3000:3000 --name=grafana \
  -e "GF_PLUGINS_PREINSTALL=custom-plugin@@https://github.com/VolkovLabs/custom-plugin.zip" \
  grafana/grafana-enterprise
```

----------------------------------------

TITLE: Checking Prometheus Health with cURL (Linux/MacOS, Bash)
DESCRIPTION: This snippet utilizes curl to send an HTTP GET request to the Prometheus '/-/ready' health endpoint on localhost port 9090. If Prometheus is running and healthy, it will return an HTTP 200 status, confirming it is ready to handle requests. No authentication is assumed. This is typically used for basic health checks after a restart or deployment.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_20

LANGUAGE: bash
CODE:
```
curl -s http://localhost:9090/-/ready
```

----------------------------------------

TITLE: Customizing Table Panel Column Names with SQL AS Syntax
DESCRIPTION: This SQL query demonstrates how to change or customize column names in a Grafana Table panel using the SQL 'AS' keyword. The query joins the dashboard and user tables, filtering results by a time range, and renames columns for better display.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_2

LANGUAGE: sql
CODE:
```
SELECT
  title as "Title",
  "user".login as "Created By",
  dashboard.created as "Created On"
FROM dashboard
INNER JOIN "user" on "user".id = dashboard.created_by
WHERE $__timeFilter(dashboard.created)
```

----------------------------------------

TITLE: Requesting All Notification Template Groups - HTTP
DESCRIPTION: This snippet demonstrates an HTTP GET request to retrieve all notification template groups from the Grafana provisioning API. The authentication is provided via an Authorization header, with both Accept and Content-Type set to application/json. The endpoint returns a list of template resources, which clients can use for notification customization within alerting flows.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
GET /api/v1/provisioning/templates\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Accessing Grafana Dashboard with Team Authentication
DESCRIPTION: Example showing how to access Grafana dashboard with user-specific team authentication headers.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
curl -H "X-WEBAUTH-USER: leonard" -H "X-WEBAUTH-GROUPS: lokiteamOnExternalSystem" http://localhost:3000/dashboards/home
```

----------------------------------------

TITLE: Setting Default Home Dashboard Path in Grafana Configuration (INI)
DESCRIPTION: This configuration snippet sets the path to the default home dashboard used by Grafana. The 'default_home_dashboard_path' option should be set in the Grafana configuration file; if the value is empty, Grafana will use the fallback location defined by 'StaticRootPath' combined with 'dashboards/home.json'. Dependencies: a valid Grafana installation and access to the configuration file. Input is the file path to the JSON dashboard definition, and the output is that Grafana uses this dashboard as the default home dashboard. Ensure the path is correct and accessible to the Grafana server.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/organization-preferences/index.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
# Path to the default home dashboard. If this value is empty, then Grafana uses StaticRootPath + "dashboards/home.json"
default_home_dashboard_path = data/main-dashboard.json
```

----------------------------------------

TITLE: Enabling Data Source Cache via Grafana HTTP API (HTTP)
DESCRIPTION: This snippet demonstrates how to enable caching for a specific Grafana data source using a POST request to the `/api/datasources/:dataSourceUID/cache/enable` endpoint. It requires the `datasources.caching:write` permission scoped to `datasources:*`. The example shows the request format including headers and the expected JSON response upon successful enablement, indicating the cache status and configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_and_resource_caching.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
POST /api/datasources/jZrmlLCGka/cache/enable HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
   "message": "Data source cache enabled",
   "dataSourceID": 1,
   "dataSourceUID": "jZrmlLCGka",
   "enabled": true,
   "ttlQueriesMs": 300000,
   "ttlResourcesMs": 300000,
   "useDefaultTTL": true,
   "defaultTTLMs": 300000,
   "created": "2023-04-21T11:49:22-04:00",
   "updated": "2023-04-24T16:30:29-04:00"
}
```

----------------------------------------

TITLE: Retrieving All Correlations from a Source in Grafana HTTP API
DESCRIPTION: HTTP request for retrieving all correlations that originate from a specific data source identified by sourceUID. This returns all correlations where the specified data source is the source.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
GET /api/datasources/uid/uyBf2637k/correlations HTTP/1.1
Accept: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Configuring nginx to Proxy Grafana - Nginx
DESCRIPTION: Provides a full nginx configuration for proxying HTTP and Grafana's Live WebSocket connections. The config includes mapping for handling WebSocket upgrades, creation of an upstream block to target Grafana, and two location blocks (root and /api/live/) with proxy headers set appropriately. Place this inside nginx's http section. Key parameters include domain routing, proxy_set_header, and proxy_http_version for WebSocket support. Reload nginx after applying; ensure worker_connections are set high for large WebSocket loads.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_1

LANGUAGE: nginx
CODE:
```
# This is required to proxy Grafana Live WebSocket connections.\nmap $http_upgrade $connection_upgrade {\n  default upgrade;\n  '' close;\n}\n\nupstream grafana {\n  server localhost:3000;\n}\n\nserver {\n  listen 80;\n  root /usr/share/nginx/html;\n  index index.html index.htm;\n\n  location / {\n    proxy_set_header Host $host;\n    proxy_pass http://grafana;\n  }\n\n  # Proxy Grafana Live WebSocket connections.\n  location /api/live/ {\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection $connection_upgrade;\n    proxy_set_header Host $host;\n    proxy_pass http://grafana;\n  }\n}
```

----------------------------------------

TITLE: Configuring Grafana Enterprise License and Server URL (YAML/INI)
DESCRIPTION: This snippet shows the content for a `grafana.ini` file, specifying the path to the Grafana Enterprise license file (`license_path`) and the root URL (`root_url`) for the Grafana instance. These settings are necessary for enabling enterprise features and ensuring correct URL generation within Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_41

LANGUAGE: yaml
CODE:
```
```yaml
[enterprise]
license_path = /etc/grafana/license/license.jwt
[server]
root_url =/your/license/root/url
```
```

----------------------------------------

TITLE: LogQL Label Filter Expression
DESCRIPTION: Example of using the label filter syntax in LogQL queries for Loki
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/loki/query-editor/index.md#2025-04-23_snippet_0

LANGUAGE: logql
CODE:
```
{{hostname}}
```

----------------------------------------

TITLE: Querying InfluxDB Temperature Data using Flux for Grafana Alerting
DESCRIPTION: This Flux query retrieves temperature data for a specific tank ('A5') from an InfluxDB bucket ('RetroEncabulator'). It filters data by time range, measurement, tank ID, and field ('Temperature'), aggregates it using a mean function over a specified window period (v.windowPeriod), and yields the mean result. This query is intended as the data source ('A') for a Grafana alert rule.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_0

LANGUAGE: flux
CODE:
```
 from(bucket: "RetroEncabulator")
|> range(start: v.timeRangeStart, stop: v.timeRangeStop)
|> filter(fn: (r) => r["_measurement"] == "TemperatureData")
|> filter(fn: (r) => r["Tank"] == "A5")
|> filter(fn: (r) => r["_field"] == "Temperature")
|> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
|> yield(name: "mean")
```

----------------------------------------

TITLE: Adding a User to Organization - HTTP
DESCRIPTION: This HTTP POST request adds a global user to the current organization by submitting their login or email and role as a JSON payload. Requires proper authorization and org.users:add permission. Response includes userId and status message.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_12

LANGUAGE: http
CODE:
```
POST /api/org/users HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  "role": "Admin",\n  "loginOrEmail": "admin"\n}
```

----------------------------------------

TITLE: Basic Dropdown Usage with Menu in Grafana UI (TypeScript)
DESCRIPTION: This snippet demonstrates the basic implementation of a Dropdown component in Grafana UI using TypeScript (TSX). It imports necessary components (Dropdown, Menu, Button) and defines a simple Menu. The Dropdown component then uses this menu as its overlay, triggered by a Button component provided as its child. Clicking the button will reveal the menu.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Dropdown/Dropdown.mdx#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import { Dropdown, Menu, Button } from '@grafana/ui';

const menu = (
  <Menu>
    <Menu.Item label="Google" />
    <Menu.Item label="Filter" />
  </Menu>
);

return (
  <Dropdown overlay={menu}>
    <Button icon="bars" />
  </Dropdown>
);
```

----------------------------------------

TITLE: Adding a Custom CA Certificate to NSS Trust Store on Linux (Bash)
DESCRIPTION: Shows the sequence of shell commands to add a custom root CA certificate (`internal-root-ca.crt.pem`) to the NSS (Network Security Services) database used by Chromium. It creates the database if it doesn't exist, imports the certificate using `certutil`, and sets the correct ownership for the `grafana` user. This allows the renderer to trust certificates signed by this CA.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
[root@server ~]# [ -d /usr/share/grafana/.pki/nssdb ] || mkdir -p /usr/share/grafana/.pki/nssdb
[root@server ~]# certutil -d sql:/usr/share/grafana/.pki/nssdb -A -n internal-root-ca -t C -i /etc/pki/tls/certs/internal-root-ca.crt.pem
[root@server ~]# chown -R grafana: /usr/share/grafana/.pki/nssdb
```

----------------------------------------

TITLE: Configuring Discord Contact Point - YAML
DESCRIPTION: Sets up a Discord integration as a contact point for Grafana alerting. Requires a webhook URL and supports optional parameters such as avatar and username customization. The 'message' field may include templated content. Input parameters include all relevant Discord webhook configuration options. Integrates directly with Discord and requires no extra dependencies besides the webhook.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_6

LANGUAGE: yaml
CODE:
```
type: discord\nsettings:\n  # <string, required>\n  url: https://discord/webhook\n  # <string>\n  avatar_url: https://my_avatar\n  # <bool>\n  use_discord_username: false\n  # <string>\n  message: |\n    {{ template \"default.message\" . }}\n
```

----------------------------------------

TITLE: Configuring Grafana Admin Role Mapping (INI)
DESCRIPTION: Grafana configuration snippet using `role_attribute_path` with a JMESPath expression to map the 'admin' value from the payload's 'roles' array to the special 'GrafanaAdmin' role. Critically, `allow_assign_grafana_admin` must be set to `true` to enable this privileged role assignment.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_6

LANGUAGE: ini
CODE:
```
role_attribute_path = contains(roles[*], 'admin') && 'GrafanaAdmin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'
allow_assign_grafana_admin = true
```

----------------------------------------

TITLE: Testing Option Selection in Select Components in Grafana
DESCRIPTION: Test case demonstrating how to verify option selection in a Select component. It uses the selectOptionInTest utility function to simplify the selection process and verifies that the onChange callback is called with the correct value.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/testing.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
it('should select an option', async () => {
  const mockOnChange = jest.fn();
  setup(
    <>
      <label htmlFor={'role-picker'}>Role picker</label>
      <OrgRolePicker value={OrgRole.Admin} inputId={'role-picker'} onChange={mockOnChange} />
    </>
  );
  await selectOptionInTest(screen.getByRole('combobox', { name: 'Role picker' }), 'Viewer');
  expect(mockOnChange).toHaveBeenCalledWith('Viewer');
});
```

----------------------------------------

TITLE: Defining Grafana Fixed Role: fixed:datasources.caching:writer
DESCRIPTION: Specifies the `fixed:datasources.caching:writer` role (ID: `fixed_JtFjHr7jd7hSqUYcktKvRvIOGRE`) within Grafana. This role grants `datasources.caching:read` and `datasources.caching:write` permissions, allowing users to enable, disable, or update query caching settings for data sources.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
fixed:datasources.caching:writer
```

LANGUAGE: plaintext
CODE:
```
fixed_JtFjHr7jd7hSqUYcktKvRvIOGRE
```

LANGUAGE: plaintext
CODE:
```
Permissions included:
- datasources.caching:read
- datasources.caching:write
```

----------------------------------------

TITLE: Defining and Rendering Custom Alert Notification Templates with Go Template (Go)
DESCRIPTION: This snippet demonstrates how to create reusable notification templates using the Go template language in Grafana. It defines partial templates for rendering a collection of alert objects, outputting their count, summary, status, and description fields. The templates rely on the .Alerts and .Annotations context objects provided by Grafana during notification evaluation. Input is the alert data structure from Grafana alerting; output is a formatted string suitable for notification channels. Requires knowledge of Grafana's notification pipeline and Go's templating syntax; users cannot add HTML/CSS or modify webhook structures beyond what is supported by Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/_index.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
{{ define "custom.alerts" -}}
{{ len .Alerts }} alert(s)
{{ range .Alerts -}}
  {{ template "alert.summary_and_description" . -}}
{{ end -}}
{{ end -}}
{{ define "alert.summary_and_description" }}
  Summary: {{.Annotations.summary}}
  Status: {{ .Status }}
  Description: {{.Annotations.description}}
{{ end -}}
```

----------------------------------------

TITLE: Querying PostgreSQL Data Source in Grafana
DESCRIPTION: Example SQL query for a PostgreSQL data source within Grafana. It selects the 'hostname' from the 'host' table where the 'region' column matches values provided by the Grafana template variable '$region'. This illustrates how template variables can be incorporated into data source queries.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/_index.md#2025-04-23_snippet_0

LANGUAGE: sql
CODE:
```
SELECT hostname FROM host WHERE region IN($region)
```

----------------------------------------

TITLE: Specifying Custom Response Headers - INI Configuration
DESCRIPTION: This snippet demonstrates how to add custom HTTP response headers in Grafana's configuration. It belongs to the `[server.custom_response_headers]` section; each header is defined as a key-value pair. Inputs are header names and their values; outputs are additional headers in every HTTP(S) response, with no constraints on header content other than standard HTTP/INI requirements. No external dependencies required—settings are applied by Grafana's server code based on the configuration file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_8

LANGUAGE: ini
CODE:
```
exampleHeader1 = exampleValue1\nexampleHeader2 = exampleValue2\n
```

----------------------------------------

TITLE: Mapping Roles Based on Multiple GitHub Teams
DESCRIPTION: Complex JMESPath expression that assigns different roles based on membership in multiple GitHub teams. Maps Admin, Editor, and Viewer roles to specific teams with a default of None.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
role_attribute_path = contains(groups[*], '@my-github-organization/admins') && 'Admin' || contains(groups[*], '@my-github-organization/devops') && 'Admin' || contains(groups[*], '@my-github-organization/engineers') && 'Editor' || contains(groups[*], '@my-github-organization/managers') && 'Editor' || contains(groups[*], '@my-github-organization/qa') && 'Viewer' || 'None'
```

----------------------------------------

TITLE: Defining IAM Policy for CloudWatch Metrics-Only Access in JSON
DESCRIPTION: This JSON configuration defines an AWS IAM policy granting permissions necessary for Grafana to read CloudWatch metrics, EC2 tags, instances, regions, alarms, and Performance Insights resource metrics. It allows actions like `cloudwatch:ListMetrics`, `cloudwatch:GetMetricData`, `ec2:DescribeInstances`, `tag:GetResources`, and `pi:GetResourceMetrics`. This policy should be attached to the IAM role or user Grafana uses for authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "AllowReadingMetricsFromCloudWatch",
      "Effect": "Allow",
      "Action": [
        "cloudwatch:DescribeAlarmsForMetric",
        "cloudwatch:DescribeAlarmHistory",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:ListMetrics",
        "cloudwatch:GetMetricData",
        "cloudwatch:GetInsightRuleReport"
      ],
      "Resource": "*"
    },
    {
      "Sid": "AllowReadingTagsInstancesRegionsFromEC2",
      "Effect": "Allow",
      "Action": ["ec2:DescribeTags", "ec2:DescribeInstances", "ec2:DescribeRegions"],
      "Resource": "*"
    },
    {
      "Sid": "AllowReadingResourcesForTags",
      "Effect": "Allow",
      "Action": "tag:GetResources",
      "Resource": "*"
    },
    {
      "Sid": "AllowReadingResourceMetricsFromPerformanceInsights",
      "Effect": "Allow",
      "Action": "pi:GetResourceMetrics",
      "Resource": "*"
    }
  ]
}
```

----------------------------------------

TITLE: Updating a Folder with HTTP PUT Request
DESCRIPTION: Example HTTP PUT request to update an existing folder identified by UID. The request includes the new title and the current version for concurrency control. Requires 'folders:write' permission.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
PUT /api/folders/nErXDvCkzz HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "title":"Department DEF",
  "version": 1
}
```

----------------------------------------

TITLE: Integrating ClipboardButton with Input Component in React/JSX
DESCRIPTION: Illustrates how to use the `ClipboardButton` as an `addonAfter` element within a Grafana `Input` component. The `Input` displays a `shareUrl` value and is set to `readOnly`. The `ClipboardButton` uses an icon ('copy'), has a 'primary' `variant`, and its `getText` prop retrieves the `shareUrl` variable for copying. The button's text content is 'Copy'.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ClipboardButton/ClipboardButton.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<Input
  id="link-url-input"
  value={shareUrl}
  readOnly
  addonAfter={
    <ClipboardButton icon="copy" variant="primary" getText={() => shareUrl}>
      Copy
    </ClipboardButton>
  }
/>
```

----------------------------------------

TITLE: Uncommenting Configuration in INI Files for Grafana
DESCRIPTION: Example of a commented configuration line in a Grafana INI file. To use this setting, you need to remove the semicolon at the beginning of the line.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
;http_port = 3000
```

----------------------------------------

TITLE: Creating Grafana API Keys with Terraform (Legacy)
DESCRIPTION: This Terraform configuration defines two `grafana_api_key` resources, 'foo' and 'bar'. It configures the Grafana provider using basic authentication and creates API keys with specified names, roles ('Viewer', 'Admin'), and optionally, a time-to-live (`seconds_to_live`). This uses the legacy approach before service accounts were preferred.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_5

LANGUAGE: tf
CODE:
```
terraform {
  required_providers {
    grafana = {
      source  = "grafana/grafana"
    }
  }
}

# configure the provider with basic auth
provider "grafana" {
  url  = "http://localhost:3000"
  auth = "admin:admin"
}

resource "grafana_api_key" "foo" {
  name = "key_foo"
  role = "Viewer"
}

resource "grafana_api_key" "bar" {
  name            = "key_bar"
  role            = "Admin"
  seconds_to_live = 30
}
```

----------------------------------------

TITLE: Implementing Resource Cleanup in Go Wire Provider
DESCRIPTION: Demonstrates how to create a provider that returns both a resource and its cleanup function. The example shows opening a file and providing a closure to properly close it, with error logging if the close operation fails.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_10

LANGUAGE: go
CODE:
```
func provideFile(log Logger, path Path) (*os.File, func(), error) {
    f, err := os.Open(string(path))
    if err != nil {
        return nil, nil, err
    }
    cleanup := func() {
        if err := f.Close(); err != nil {
            log.Log(err)
        }
    }
    return f, cleanup, nil
}
```

----------------------------------------

TITLE: Enabling and Configuring Secret Scanning in Grafana - INI
DESCRIPTION: This INI snippet shows how to enable Grafana's secret scanning feature and configure automatic token revocation in the Grafana configuration file ([secretscan] section). The 'enabled' flag activates secret scanning, and 'revoke' determines whether exposed tokens are revoked or just notified. Dependencies include Grafana's configuration system. Required parameters are 'enabled' (boolean) and 'revoke' (boolean). Inputs: boolean values; Outputs: feature behavior. The configuration must be saved and Grafana restarted for changes to take effect.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/secret-scan.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[secretscan]
# Enable secretscan feature
enabled = true

# Whether to revoke the token if a leak is detected or just send a notification
revoke = true
```

----------------------------------------

TITLE: Mapping Organization Roles with org_mapping in Grafana - INI
DESCRIPTION: This snippet demonstrates how to use the org_mapping configuration option in Grafana’s INI file to map Entra ID group IDs to specific Grafana organizations and roles. Include this in your relevant INI section to associate external group membership with the Viewer or Editor role for particular organizations, using the pattern <group_id>:<org_name>:<role>. The wildcard entry ("*") applies to any group not explicitly listed. Requires Entra ID group object IDs and correct organization names; ensure role values match Grafana’s supported roles.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_11

LANGUAGE: ini
CODE:
```
org_mapping = ["032cb8e0-240f-4347-9120-6f33013e817a:org_foo:Viewer", "bce1c492-0679-4989-941b-8de5e6789cb9:org_bar:Editor", "*:org_baz:Editor"]
```

----------------------------------------

TITLE: Configuring Date Formats in Grafana with INI Settings - INI
DESCRIPTION: This snippet provides an example of how to configure custom date and time formats in the Grafana settings file using the INI file syntax. The configuration options, defined under the [date_formats] section, allow you to set patterns for full dates as well as for various zoom levels such as seconds, minutes, hours, days, months, and years. Each setting customizes how dates and times appear throughout the Grafana UI, including the time range picker and graphs. This configuration requires access to the Grafana server configuration file and adherence to INI syntax, with expected string formats following Moment.js formatting conventions. The inputs are string date patterns, and the outputs affect the UI presentation of dates across panels and dashboards.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v7-2.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[date_formats]
full_date = MMM Do, YYYY @ hh:mm:ss a
interval_second = hh:mm:ss a
interval_minute = hh:mm a
interval_hour = MMM DD hh:mm a
interval_day = MMM DD
interval_month = YYYY-MM
interval_year = YYYY
```

----------------------------------------

TITLE: Printing Variables and Values in Go Templates - Go
DESCRIPTION: This snippet demonstrates various ways to print variables, field values, and the output of functions using the Go template language in Grafana notification and alert rule templates. It showcases printing a simple variable, accessing a struct field, using a function with an argument, and printing the dot context. The syntax uses double curly braces for interpolation; dependencies include knowledge of variables available in Grafana template contexts.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/language.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
{{ $values }}
{{ $values.A.Value }}
{{ humanize 1000.0 }}
{{ .Alerts }}
```

----------------------------------------

TITLE: Custom Grafana Configuration for Docker Walkthrough
DESCRIPTION: Grafana configuration file for Docker-based walkthrough, enabling auth proxy authentication and configuring user signup settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
[users]
allow_sign_up = false
auto_assign_org = true
auto_assign_org_role = Editor

[auth.proxy]
enabled = true
header_name = X-WEBAUTH-USER
header_property = username
auto_sign_up = true
```

----------------------------------------

TITLE: Defining Kubernetes Resources for Grafana Enterprise Deployment (YAML)
DESCRIPTION: This multi-document YAML file defines the necessary Kubernetes resources for deploying Grafana Enterprise. It includes a PersistentVolumeClaim (`grafana-pvc`) for persistent storage, a Deployment (`grafana`) to manage the Grafana pods using the `grafana/grafana-enterprise:latest` image, and a Service (`grafana`) of type LoadBalancer to expose Grafana on port 3000. The Deployment mounts volumes for data (`grafana-pv`), configuration (`ge-config` ConfigMap), and the license (`ge-license` Secret). Resource requests and limits, along with a readiness probe, are also configured.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_43

LANGUAGE: yaml
CODE:
```
```yaml
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
        - image: grafana/grafana-enterprise:latest
          imagePullPolicy: IfNotPresent
          name: grafana
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            limits:
              memory: 4Gi
            requests:
              cpu: 100m
              memory: 2Gi
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-pv
            - mountPath: /etc/grafana
              name: ge-config
            - mountPath: /etc/grafana/license
              name: ge-license
      volumes:
        - name: grafana-pv
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: ge-config
          configMap:
            name: ge-config
        - name: ge-license
          secret:
            secretName: ge-license
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  ports:
    - port: 3000
      protocol: TCP
      targetPort: http-grafana
  selector:
    app: grafana
  sessionAffinity: None
  type: LoadBalancer
```
```

----------------------------------------

TITLE: Creating Restricted SQL User with SELECT Permissions in Microsoft SQL Server
DESCRIPTION: SQL commands to create a dedicated database user with restricted SELECT permissions for Grafana to safely query data, helping prevent destructive queries from being executed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/_index.md#2025-04-23_snippet_0

LANGUAGE: sql
CODE:
```
CREATE USER grafanareader WITH PASSWORD 'password'
GRANT SELECT ON dbo.YourTable3 TO grafanareader
```

----------------------------------------

TITLE: Running Database Integration Tests
DESCRIPTION: Commands for running SQLite, PostgreSQL and MySQL integration tests
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
go test -covermode=atomic -tags=integration ./pkg/...
make test-go-integration-mysql
make test-go-integration-postgres
```

----------------------------------------

TITLE: Provisioning a TestData Data Source in Grafana - YAML
DESCRIPTION: This YAML manifest provisions a 'TestData' data source for Grafana. Place this content in a file named 'default.yaml' under the 'provisioning/datasources/' directory. This file specifies 'apiVersion: 1' and defines a list of datasources to provision. It requires no additional dependencies, but Grafana must be restarted after changes. All key-value pairs and structure must be preserved to function correctly.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/provision-dashboards-and-data-sources/index.md#2025-04-23_snippet_2

LANGUAGE: yaml
CODE:
```
apiVersion: 1\n\ndatasources:\n  - name: TestData\n    type: testdata\n
```

----------------------------------------

TITLE: Filesystem Directory Structure Example for Grafana Dashboards
DESCRIPTION: Example directory structure showing how dashboard JSON files can be organized in folders for provisioning into Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md#2025-04-23_snippet_5

LANGUAGE: plaintext
CODE:
```
/etc/dashboards
├── /server
│   ├── /common_dashboard.json
│   └── /network_dashboard.json
└── /application
    ├── /requests_dashboard.json
    └── /resources_dashboard.json
```

----------------------------------------

TITLE: Querying Grafana Annotations with Epoch Time Column (SQL)
DESCRIPTION: SQL query example for fetching Grafana annotations where the time information is stored in an epoch timestamp column named `epoch_time`. It uses the Grafana macro `$__unixEpochFilter` for time range filtering based on the dashboard's time range and maps database columns (`epoch_time`, `metric1`, `tag1`, `tag2`) to the required Grafana annotation fields (`time`, `text`, `tags`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_14

LANGUAGE: sql
CODE:
```
SELECT
  epoch_time as time,
  metric1 as text,
  CONCAT(tag1, ',', tag2) as tags
FROM
  public.test_data
WHERE
  $__unixEpochFilter(epoch_time)
```

----------------------------------------

TITLE: Example Full SAML Configuration in Grafana INI
DESCRIPTION: Presents a complete example `[auth.saml]` section for Grafana's configuration file. It demonstrates various settings including enabling SAML, certificate paths, IdP metadata, assertion attribute mapping for login, email, groups, roles, and organizations, role value mappings, organization mappings, and allowed organizations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_17

LANGUAGE: ini
CODE:
```
[auth.saml]
enabled = true
auto_login = false
certificate_path = "/path/to/certificate.cert"
private_key_path = "/path/to/private_key.pem"
idp_metadata_path = "/my/metadata.xml"
max_issue_delay = 90s
metadata_valid_duration = 48h
assertion_attribute_name = displayName
assertion_attribute_login = mail
assertion_attribute_email = mail

assertion_attribute_groups = Group
assertion_attribute_role = Role
assertion_attribute_org = Org
role_values_viewer = external
role_values_editor = editor, developer
role_values_admin = admin, operator
role_values_grafana_admin = superadmin
org_mapping = Engineering:2:Editor, Engineering:3:Viewer, Sales:3:Editor, *:1:Editor
allowed_organizations = Engineering, Sales
```

----------------------------------------

TITLE: Configuring Usage Insights Export in Grafana (INI Configuration) - ini
DESCRIPTION: This snippet demonstrates how to enable the usage insights export feature in Grafana using INI configuration. To use it, set these values in your Grafana configuration file, ensuring the 'enabled' flag is set to true and 'storage' type is set to either 'loki' or 'logger'. No external dependencies are required beyond adjusting the config file. Inputs include boolean for 'enabled' and string for 'storage'. Outputs are enabled log exporting for usage insights data; this requires a Grafana Enterprise or Cloud Pro edition.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/export-logs.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[usage_insights.export]
# Enable the usage insights export feature
enabled = true
# Storage type
storage = loki

```

----------------------------------------

TITLE: Configuring Public Dashboards - Grafana INI
DESCRIPTION: This section groups settings for Grafana's shared dashboards feature, allowing dashboards to be publicly accessible. The header itself organizes subsequent keys related to shared dashboards. It requires a compatible Grafana version supporting public dashboard sharing, with specific feature toggles (like 'enabled') under this section.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_34

LANGUAGE: ini
CODE:
```
[public_dashboards]
```

----------------------------------------

TITLE: Base64-Encoding Certificate and Key Files (Shell)
DESCRIPTION: Uses the `base64` command-line tool to encode the previously generated `key.pem` and `cert.pem` files into `key.pem.base64` and `cert.pem.base64` respectively. This encoding is necessary when configuring Grafana to use the certificate and private key content directly via the `certificate` and `private_key` options, rather than file paths. The `-w0` switch prevents line wrapping and is noted as unnecessary on macOS.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_2

LANGUAGE: sh
CODE:
```
$ base64 -i key.pem -o key.pem.base64
$ base64 -i cert.pem -o cert.pem.base64
```

----------------------------------------

TITLE: Running Grafana with AWS Credentials via Docker Secrets (Bash)
DESCRIPTION: Runs the `grafana/grafana-enterprise` container, configuring AWS credentials using Docker Secrets. It sets environment variables ending with `__FILE` (e.g., `GF_AWS_default_ACCESS_KEY_ID__FILE`) to point Grafana to the secret files mounted at `/run/secrets/` within the container. Requires previously created Docker secrets.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_15

LANGUAGE: bash
CODE:
```
docker run -d -p 3000:3000 --name grafana \
  -e "GF_DEFAULT_INSTANCE_NAME=my-grafana" \
  -e "GF_AWS_PROFILES=default" \
  -e "GF_AWS_default_ACCESS_KEY_ID__FILE=/run/secrets/aws_access_key_id" \
  -e "GF_AWS_default_SECRET_ACCESS_KEY__FILE=/run/secrets/aws_secret_access_key" \
  -e "GF_AWS_default_REGION__FILE=/run/secrets/aws_region" \
  -v grafana-data:/var/lib/grafana \
  grafana/grafana-enterprise
```

----------------------------------------

TITLE: Checking Data Source Health by UID in HTTP
DESCRIPTION: Sends a GET request to check the health of a data source identified by UID. This is the current recommended method for health checks.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_16

LANGUAGE: http
CODE:
```
GET api/datasources/uid/P8045C56BDA891CB2/health HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Configuring Google Cloud KMS Provider in grafana.ini (INI Configuration - ini)
DESCRIPTION: This snippet demonstrates how to define a Google Cloud KMS encryption provider section in the grafana.ini configuration file. It provides an example layout with parameters such as key_id and credentials_file, which reference the KMS key's resource ID and the path to a service account JSON key. Required prerequisites include a valid Google Cloud KMS key, a corresponding service account, and the appropriate credential file. The section must be uniquely named and commented lines (prefixed with ; or #) can be included for context.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-google-cloud-kms/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
# Example of Google Cloud KMS provider setup\n;[security.encryption.googlekms.example-encryption-key]\n# Google Cloud KMS key ID\nkey_id = 1234abcd-12ab-34cd-56ef-1234567890ab\n# Full path to a JSON file with a service account key\ncredentials_file = ~/.config/gcloud/sample-project-credentials.json
```

----------------------------------------

TITLE: Configuring Basic MySQL Provisioning in Grafana
DESCRIPTION: This YAML configuration sets up a basic MySQL datasource in Grafana. It specifies connection details, database name, and connection pool settings. The password is stored as a secure JSON data using an environment variable.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/configuration/_index.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: MySQL
    type: mysql
    url: localhost:3306
    user: grafana
    jsonData:
      database: grafana
      maxOpenConns: 100
      maxIdleConns: 100
      maxIdleConnsAuto: true
      connMaxLifetime: 14400
    secureJsonData:
      password: ${GRAFANA_MYSQL_PASSWORD}
```

----------------------------------------

TITLE: Mapping Server Administrator Role
DESCRIPTION: JMESPath expression that grants both the Admin organization role and the Grafana server admin role to a specific GitHub user, while giving all other users Viewer role.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
role_attribute_path = [login=='octocat'][0] && 'GrafanaAdmin' || 'Viewer'
```

----------------------------------------

TITLE: Lookup User by Login or Email - Response Example (json)
DESCRIPTION: Supplies the full JSON user profile as returned by the lookup endpoint, verifying correct user identification by either login or email. Highlights the returned information's completeness for authentication or account management.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_7

LANGUAGE: json
CODE:
```
{\n  "id": 1,\n  "email": "user@mygraf.com",\n  "name": "admin",\n  "login": "admin",\n  "theme": "light",\n  "orgId": 1,\n  "isGrafanaAdmin": true,\n  "isDisabled": false,\n  "isExternal": false,\n  "authLabels": null,\n  "updatedAt": "2019-09-25T14:44:37+01:00",\n  "createdAt": "2019-09-25T14:44:37+01:00",\n  "avatarUrl":""\n}
```

----------------------------------------

TITLE: Updating Encryption Provider in grafana.ini (Security Section - ini)
DESCRIPTION: This snippet shows the required modifications to the [security] section in grafana.ini to activate the new Google Cloud KMS key as the encryption provider. Parameters include secret_key (legacy or fallback key), encryption_provider (specifies the active provider), and available_encryption_providers (defines the allowed key providers). This enables Grafana to use the newly defined KMS configuration for cryptographic operations. The section should reference the provider key as configured previously and may retain legacy parameters for backward compatibility.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-google-cloud-kms/index.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[security]\n# previous encryption key, used for legacy alerts, decrypting existing secrets or used as default provider when external providers are not configured\nsecret_key = AaaaAaaa\n# encryption provider key in the format <PROVIDER>.<KEY-NAME>\nencryption_provider = googlekms.example-encryption-key\n# list of configured key providers, space separated\navailable_encryption_providers = googlekms.example-encryption-key
```

----------------------------------------

TITLE: Configuring Unified Storage Folders and Dashboards - INI
DESCRIPTION: This snippet provides baseline INI configuration for enabling folders to be backed by Unified Storage in Grafana. It enables experimental API features and unified storage support for folders and dashboards, sets the dualWriterMode to 4 (read and write from unified), and configures the API server storage type. Required dependencies include an up-to-date version of Grafana with Unified Storage support; changes should be written into the main config file.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
; need to specify target here for override to work later\ntarget = all\n\n[server]\n; https is required for kubectl\nprotocol = https\n\n[feature_toggles]\ngrafanaAPIServerWithExperimentalAPIs = true\nkubernetesClientDashboardsFolders = true\n\n[unified_storage.folders.folder.grafana.app]\ndualWriterMode = 4\n\n[unified_storage.dashboards.dashboard.grafana.app]\ndualWriterMode = 4\n\n[grafana-apiserver]\n; use unified storage for k8s apiserver\nstorage_type = unified
```

----------------------------------------

TITLE: Re-encrypting Data Keys using Grafana CLI
DESCRIPTION: Uses the Grafana CLI to re-encrypt existing data encryption keys (DEKs) with a specified key encryption key (KEK). This allows updating to a new KEK version or switching to a different KEK, often used with KMS integrations. It is recommended to run this command during maintenance.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_6

LANGUAGE: shell
CODE:
```
grafana cli admin secrets-migration re-encrypt-data-keys
```

----------------------------------------

TITLE: Provisioning a MySQL Datasource using Vault Secrets in YAML
DESCRIPTION: This YAML snippet, intended for a provisioning file (e.g., `provisioning/custom.yaml`), defines a MySQL data source named 'statistics'. It uses the `$__vault{}` syntax to dynamically retrieve the database username and password from Vault's database secrets engine at runtime.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/integrate-with-hashicorp-vault/index.md#2025-04-23_snippet_5

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: statistics
    type: mysql
    url: localhost:3306
    database: stats
    user: $__vault{database:database/creds/ro/stats:username}
    secureJsonData:
      password: $__vault{database:database/creds/ro/stats:password}
```

----------------------------------------

TITLE: Searching Users via Grafana HTTP API (http)
DESCRIPTION: Demonstrates how to use an authenticated HTTP GET request to search for users using the User HTTP API. The example includes headers for JSON requests and basic authentication. The 'perpage' and 'page' query parameters control pagination, and the endpoint requires a Grafana admin user.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/users HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=
```

----------------------------------------

TITLE: Specifying Custom Chrome/Chromium Binary - Bash
DESCRIPTION: Sets the CHROME_BIN environment variable to specify a custom path to the Chrome or Chromium executable for use in remote rendering. The path must point to a compatible Chrome/Chromium version. Used when the default packaged Chromium is not desired.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_29

LANGUAGE: bash
CODE:
```
CHROME_BIN="/usr/bin/chromium-browser"
```

----------------------------------------

TITLE: Creating Grafana User Account - Shell
DESCRIPTION: Creates a dedicated user account named 'grafana' with no login shell for running the Grafana service. Use 'sudo' for elevated privileges. Prerequisites: useradd available, no existing user 'grafana'. No inputs required; output: user 'grafana' added to system.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_5

LANGUAGE: shell
CODE:
```
sudo useradd -r -s /bin/false grafana
```

----------------------------------------

TITLE: Rendering Table Component with Field Overrides in React
DESCRIPTION: This snippet demonstrates how to use the Table component in conjunction with the applyFieldOverrides function from @grafana/data. It sets up custom field configurations and applies them to the data before rendering the table.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Table/Table.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { DataFrame, applyFieldOverrides, GrafanaTheme2 } from '@grafana/data';
import { Table, useTheme2 } from '@grafana/ui';

const TableComponent = (dataFrame: DataFrame) => {
  const theme = useTheme2();
  const displayData = applyFieldOverrides({
    data: dataFrame,
    fieldConfig: {
      defaults: {
        custom: {
          align: 'auto',
          cellOptions: {
            type: 'gauge',
            mode: 'gradient',
          },
          inspect: false,
        },
        mappings: [],
        unit: 'locale',
      },
      overrides: [],
    },
    theme,
    replaceVariables: (value) => value,
  });

  return (
    <Table
      data={displayData}
      width={1000}
      height={400}
      columnMinWidth={50}
      footerOptions={{ show: true, reducer: ['sum'] }}
    />
  )
}
```

----------------------------------------

TITLE: Checking Deployment Rollout Status with Kubectl (Bash)
DESCRIPTION: Executes `kubectl rollout status` to monitor and report the progress of a deployment rollout ('grafana') within a specific namespace ('my-grafana'). It's used after initiating an update (e.g., via `kubectl edit` or `kubectl apply`) or a rollback (`kubectl rollout undo`) to confirm successful completion.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_20

LANGUAGE: bash
CODE:
```
kubectl rollout status deployment grafana --namespace=my-grafana
```

LANGUAGE: bash
CODE:
```
kubectl rollout status deployment grafana --namespace=my-grafana
```

----------------------------------------

TITLE: Delete a Contact Point by UID - HTTP
DESCRIPTION: This snippet provides the HTTP request format for deleting a given contact point by UID in the provisioning API. DELETE is performed on /contact-points/:uid. Requires the unique identifier in the path, and relies on proper authentication and provisioning permissions. Used for programmatic management of alerting contact endpoints.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_11

LANGUAGE: http
CODE:
```
DELETE /api/v1/provisioning/contact-points/:uid
```

----------------------------------------

TITLE: Updating All Properties of an Annotation via Grafana HTTP API - HTTP+JSON
DESCRIPTION: Shows how to completely update an existing annotation using a PUT request. The JSON payload must provide all properties to be updated, such as time, timeEnd, text, and tags. Requires authentication and returns a confirmation message upon success.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
PUT /api/annotations/1141 HTTP/1.1\nAccept: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\nContent-Type: application/json\n\n{\n  "time":1507037197339,\n  "timeEnd":1507180805056,\n  "text":"Annotation Description",\n  "tags":["tag3","tag4","tag5"]\n}
```

----------------------------------------

TITLE: Removing a Role Assignment from a Service Account (HTTP DELETE)
DESCRIPTION: Sends a DELETE request to revoke a role from a service account. It includes the required permissions and query parameters for the operation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_30

LANGUAGE: http
CODE:
```
DELETE /api/access-control/users/1/roles/AFUXBHKnk
Accept: application/json
```

----------------------------------------

TITLE: Provisioning Tempo Data Source in Grafana with YAML
DESCRIPTION: This YAML snippet defines the Tempo data source configuration for provisioning within Grafana. It specifies connection properties, integration with logs (Loki), metrics (Prometheus), and profiling (Pyroscope) data sources, and enables features such as service maps and node graphs. Key parameters include UIDs for associated data sources, time shift settings, tags, and custom query fields. This setup requires a working Grafana instance and pre-existing data sources with specified UIDs. Inputs are static (file-based), and the output is a Grafana instance with the configured and provisioned Tempo data source.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/tempo/configure-tempo-data-source.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
apiVersion: 1\n\ndatasources:\n  - name: Tempo\n    type: tempo\n    uid: EbPG8fYoz\n    url: http://localhost:3200\n    access: proxy\n    basicAuth: false\n    jsonData:\n      tracesToLogsV2:\n        # Field with an internal link pointing to a logs data source in Grafana.\n        # datasourceUid value must match the uid value of the logs data source.\n        datasourceUid: 'loki'\n        spanStartTimeShift: '-1h'\n        spanEndTimeShift: '1h'\n        tags: ['job', 'instance', 'pod', 'namespace']\n        filterByTraceID: false\n        filterBySpanID: false\n        customQuery: true\n        query: 'method="$${__span.tags.method}"'\n      tracesToMetrics:\n        datasourceUid: 'prom'\n        spanStartTimeShift: '-1h'\n        spanEndTimeShift: '1h'\n        tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]\n        queries:\n          - name: 'Sample query'\n            query: 'sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))'\n      tracesToProfiles:\n        datasourceUid: 'grafana-pyroscope-datasource'\n        tags: ['job', 'instance', 'pod', 'namespace']\n        profileTypeId: 'process_cpu:cpu:nanoseconds:cpu:nanoseconds'\n        customQuery: true\n        query: 'method="$${__span.tags.method}"'\n      serviceMap:\n        datasourceUid: 'prometheus'\n      nodeGraph:\n        enabled: true\n      search:\n        hide: false\n      traceQuery:\n        timeShiftEnabled: true\n        spanStartTimeShift: '-1h'\n        spanEndTimeShift: '1h'\n      spanBar:\n        type: 'Tag'\n        tag: 'http.path'\n      streamingEnabled:\n        search: true\n
```

----------------------------------------

TITLE: Creating Key/Value Template Variable Options - SQL
DESCRIPTION: Returns two columns with aliases '__text' for display name and '__value' for backend value, from 'my_host'. Enables drop-down options to show user-friendly text while storing the underlying id using Grafana's template variable conventions. MySQL 'my_host' table must contain 'hostname' and 'id'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_6

LANGUAGE: sql
CODE:
```
SELECT hostname AS __text, id AS __value FROM my_host
```

----------------------------------------

TITLE: Retrieving Folder by UID with HTTP GET Request
DESCRIPTION: Example HTTP GET request to retrieve a specific folder by its unique identifier (UID). Requires 'folders:read' permission with appropriate scope.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
GET /api/folders/nErXDvCkzzh HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Retrieving Notification Template by ID with HTTP GET - HTTP
DESCRIPTION: This HTTP code snippet demonstrates retrieving a single notification template by its unique identifier using the GET method. No authentication headers or request body are shown, and successful responses return a NotificationTemplate with code 200, while missing templates yield a 404 error with a GenericPublicError. The endpoint requires the user's authorization context and expects results in JSON format.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_29

LANGUAGE: HTTP
CODE:
```
GET /api/v1/provisioning/templates/:id
```

----------------------------------------

TITLE: Provisioning CloudWatch Data Source Using AWS SDK Default
DESCRIPTION: YAML configuration for provisioning CloudWatch data source using AWS SDK default authentication and specifying a default region.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_4

LANGUAGE: yaml
CODE:
```
apiVersion: 1
datasources:
  - name: CloudWatch
    type: cloudwatch
    jsonData:
      authType: default
      defaultRegion: eu-west-2
```

----------------------------------------

TITLE: Upgrading Grafana to Apply Log Level Change - Bash
DESCRIPTION: This Helm upgrade command redeploys Grafana with modified logging parameters, ensuring the debug log level is applied. Must be run after editing values.yaml as described. Requires Helm and access to the 'monitoring' namespace.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_23

LANGUAGE: bash
CODE:
```
helm upgrade my-grafana grafana/grafana -f values.yaml -n monitoring
```

----------------------------------------

TITLE: Listing Pods in Namespace with Kubectl (Bash)
DESCRIPTION: Uses `kubectl get pods` to list all pods running within the specified 'my-grafana' namespace. This is necessary to identify the exact Grafana pod name required for commands like `kubectl port-forward`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_14

LANGUAGE: bash
CODE:
```
kubectl get pods --namespace=my-grafana
```

----------------------------------------

TITLE: Provisioning Grafana Entities and Role Assignment using Terraform
DESCRIPTION: This Terraform configuration snippet defines resources for creating a Grafana team ('test_team'), a user ('test_user'), and a service account ('test_sa'). It then uses the 'grafana_role_assignment' resource to assign a custom role (referenced via 'grafana_role.my_new_role.uid', presumably defined in a previous step) to the newly created user, team, and service account. Note that the user resource requires substituting '<TEST_PASSWORD>' with an actual password.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-terraform-provisioning/index.md#2025-04-23_snippet_4

LANGUAGE: terraform
CODE:
```
resource "grafana_team" "test_team" {
	name = "terraform_test_team"
}

resource "grafana_user" "test_user" {
	email = "terraform_user@test.com"
	login    = "terraform_test_user"
	password = <TEST_PASSWORD>
}

resource "grafana_service_account" "test_sa" {
  name = "terraform_test_sa"
  role = "Viewer"
}

resource "grafana_role_assignment" "my_new_role_assignment" {
  role_uid = grafana_role.my_new_role.uid
  users = [grafana_user.test_user.id]
  teams = [grafana_team.test_team.id]
  service_accounts = [grafana_service_account.test_sa.id]
}
```

----------------------------------------

TITLE: Re-encrypting Grafana Secrets via CLI
DESCRIPTION: Optional command-line instruction using the Grafana CLI to re-encrypt all existing secrets (like data source credentials) stored within the Grafana database using the newly configured AWS KMS key. This command should be run from the Grafana root directory after restarting Grafana with the updated configuration. This ensures all secrets are protected by the new KMS key.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-aws-kms/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
grafana cli admin secrets-migration re-encrypt
```

----------------------------------------

TITLE: Configuring SAML Organization Mapping with Roles in Grafana INI
DESCRIPTION: Demonstrates setting the `assertion_attribute_org` and `org_mapping` parameters within the `[auth.saml]` section of the Grafana configuration file. This example maps users from 'Engineering' to Grafana Org ID 2 as Editor and 'Sales' to Org ID 3 as Admin, based on the 'Org' attribute from the IdP.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_12

LANGUAGE: ini
CODE:
```
[auth.saml]
assertion_attribute_org = Org
org_mapping = Engineering:2:Editor, Sales:3:Admin
```

----------------------------------------

TITLE: Collecting Heap Profiles (Bash)
DESCRIPTION: Commands to collect multiple heap profiles using curl for memory analysis.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
curl http://<profile-addr>:<profile-port>/debug/pprof/heap > heap1.pprof
sleep 30
curl http://<profile-addr>:<profile-port>/debug/pprof/heap > heap2.pprof
```

----------------------------------------

TITLE: Generating LetsEncrypt Certificates with Certbot Standalone (Bash)
DESCRIPTION: Executes `certbot certonly --standalone` which initiates an interactive process to obtain SSL certificates from LetsEncrypt. It requires user input for email and domain name(s). The `--standalone` flag causes `certbot` to temporarily run its own web server on port 80 for domain validation. Requires `sudo` privileges, `certbot` installed, and port 80 to be open.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
$ sudo certbot certonly --standalone

Saving debug log to /var/log/letsencrypt/letsencrypt.log
Enter email address (used for urgent renewal and security notices)
(Enter 'c' to cancel): me@mysite.com

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Please read the Terms of Service at
https://letsencrypt.org/documents/LE-SA-v1.3-September-21-2022.pdf. You must
agree in order to register with the ACME server. Do you agree?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(Y)es/(N)o: y

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Would you be willing, once your first certificate is successfully issued, to
share your email address with the Electronic Frontier Foundation, a founding
partner of the Let’s Encrypt project and the non-profit organization that
develops Certbot? We’d like to send you email about our work encrypting the web,
EFF news, campaigns, and ways to support digital freedom.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(Y)es/(N)o: n
Account registered.
Please enter the domain name(s) you would like on your certificate (comma and/or
space separated) (Enter 'c' to cancel): subdomain.mysite.com
Requesting a certificate for subdomain.mysite.com

Successfully received certificate.
Certificate is saved at: /etc/letsencrypt/live/subdomain.mysite.com/fullchain.pem
Key is saved at:         /etc/letsencrypt/live/subdomain.mysite.com/privkey.pem
This certificate expires on 2023-06-20.
These files will be updated when the certificate renews.
Certbot has set up a scheduled task to automatically renew this certificate in the background.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
If you like Certbot, please consider supporting our work by:
* Donating to ISRG / Let’s Encrypt:   https://letsencrypt.org/donate
* Donating to EFF:                    https://eff.org/donate-le
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
```

----------------------------------------

TITLE: Rendering a Field Component with Input (React JSX)
DESCRIPTION: This example demonstrates how to use the Field component to wrap an Input element in a React form. The Field accepts label and description props, while the nested Input receives id and onChange handlers. The snippet shows recommended usage for composing labeled form inputs, typical in React/Grafana UI. Inputs include props: label, description, id, and onChange. Outputs a labeled form field with an interactive input box.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Field.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<Field label={...} description={...}>
  <Input id="userName"  onChange={...}/>
</Field>
```

----------------------------------------

TITLE: Calculating Per-CPU Usage Rate in PromQL for Multi-Instance Alerting
DESCRIPTION: This PromQL query calculates the rate of CPU seconds consumed per CPU (excluding idle time) over the last minute. It's used within a Grafana Alert Rule to demonstrate how a single rule can generate multiple alert instances, one for each unique value of the 'cpu' label. Requires a Prometheus data source providing the `node_cpu_seconds_total` metric.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/_index.md#2025-04-23_snippet_0

LANGUAGE: promql
CODE:
```
sum by(cpu) (
  rate(node_cpu_seconds_total{mode!="idle"}[1m])
)
```

----------------------------------------

TITLE: Grouping by Time with Multiple Aggregated Columns - SQL
DESCRIPTION: Aggregates minimum and maximum of 'value_double' using MIN and MAX over 5-minute intervals from 'test_data', returning both min and max alongside the time grouping. Optimized for displaying metric ranges in a single panel. Requires 'time_date_time' and 'value_double' fields.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_11

LANGUAGE: sql
CODE:
```
SELECT
  $__timeGroupAlias(time_date_time,'5m'),
  min(value_double) as min_value,
  max(value_double) as max_value
FROM test_data
WHERE $__timeFilter(time_date_time)
GROUP BY time
ORDER BY time
```

----------------------------------------

TITLE: Retrieving Service Account Tokens - Grafana HTTP API - HTTP
DESCRIPTION: This snippet demonstrates obtaining the tokens associated with a specific service account by sending a GET request to the tokens sub-endpoint. The response consists of a JSON array, where each element is a token object with columns such as id, name, role, created, expiration, secondsUntilExpiration, and hasExpired.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_9

LANGUAGE: http
CODE:
```
GET /api/serviceaccounts/2/tokens HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n[\n\t{\n\t\t"id": 1,\n\t\t"name": "grafana",\n\t\t"role": "Viewer",\n\t\t"created": "2022-03-23T10:31:02Z",\n\t\t"expiration": null,\n\t\t"secondsUntilExpiration": 0,\n\t\t"hasExpired": false\n\t}\n]
```

----------------------------------------

TITLE: Checking Grafana Deployment Logs - kubectl Bash
DESCRIPTION: Shows commands to fetch logs of the Grafana deployment in a Kubernetes namespace. The first command retrieves logs from a single-container deployment. The second retrieves from a specific container named 'grafana' in case of multi-container deployments. Helps with troubleshooting startup and provisioning issues.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_29

LANGUAGE: bash
CODE:
```
# dump Pod logs for a Deployment (single-container case)
kubectl logs --namespace=my-grafana deploy/grafana

```

LANGUAGE: bash
CODE:
```
# dump Pod logs for a Deployment (multi-container case)
kubectl logs --namespace=my-grafana deploy/grafana -c grafana

```

----------------------------------------

TITLE: Streaming Configuration in Tempo
DESCRIPTION: Configuration setting required in Tempo to enable streaming functionality. This must be set to true for streaming to work in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/tempo/configure-tempo-data-source.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
stream_over_http_enabled: true
```

----------------------------------------

TITLE: Creating a Grafana Service Account Token via HTTP API
DESCRIPTION: This shell command uses `curl` to send a POST request to the `/api/serviceaccounts/{id}/tokens` endpoint (using ID 1 in this example) to create a token named 'my-service-account-token' for the specified service account. Basic authentication (`admin:admin`) is used. The response includes the token's ID, name, and the secret key.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_2

LANGUAGE: sh
CODE:
```
# create the service account token with the service account id 1 - /serviceaccounts/{id} returned from the previous step
curl -X POST -H "Content-Type: application/json" -d '{"name": "my-service-account-token"}' http://admin:admin@localhost:3000/api/serviceaccounts/1/tokens

# response with the created SAT id,name and key.
{"id":2,"name":"my-service-account-token","key":"glsa_9244xlVFZK0j8Lh4fU8Cz6Z5tO664zIi_7a762939"}%
```

----------------------------------------

TITLE: Configuring Loki Limits for Alert State History (YAML)
DESCRIPTION: This YAML snippet shows recommended adjustments to the `limits_config` section in the Loki configuration file. It sets `split_queries_by_interval` to '24h' and `max_query_parallelism` to 32 to better handle potentially long-range queries (up to 30 days) originating from the Grafana state history dialog box. Using a separate Loki instance is advised due to potential performance impact.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-alert-state-history/index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
limits_config:
  split_queries_by_interval: '24h'
  max_query_parallelism: 32
```

----------------------------------------

TITLE: Validating Expected Claims in JWT Tokens
DESCRIPTION: Configuration for validating that JWT claims match expected values, providing an additional layer of security.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_9

LANGUAGE: ini
CODE:
```
# This can be seen as a required "subset" of a JWT Claims Set.
expect_claims = {"iss": "https://your-token-issuer", "your-custom-claim": "foo"}
```

----------------------------------------

TITLE: Provisioning Google Cloud Monitoring Data Source with GCE Service Account (YAML)
DESCRIPTION: This YAML example provisions the Stackdriver (Google Cloud Monitoring) data source in Grafana using GCE Default Service Account authentication. No explicit key or credential is included; Grafana uses the service account attached to the running VM. Only the 'authenticationType: gce' setting is needed in 'jsonData'. The configuration file should be installed on an instance with the correct IAM role and Cloud Monitoring API access. This approach is simplest for VM-based Grafana deployments on Google Cloud.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/google-cloud-monitoring/_index.md#2025-04-23_snippet_2

LANGUAGE: yaml
CODE:
```
apiVersion: 1\n\ndatasources:\n  - name: Google Cloud Monitoring\n    type: stackdriver\n    access: proxy\n    jsonData:\n      authenticationType: gce
```

----------------------------------------

TITLE: Implementing Deprecation Warning in Grafana Frontend
DESCRIPTION: Example showing how to properly deprecate a function in Grafana's frontend code. Demonstrates the use of deprecation comment, JSDoc annotation, and the deprecationWarning utility function to notify developers of deprecated functionality.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/breaking-changes-guide/breaking-changes-guide.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { deprecationWarning } from '@grafana/data';

/**
 * @deprecated -- this is no longer necessary and will be removed in Grafana 9.0.0
 */
myOldFunction(name: string) {
    deprecationWarning('MyFile', 'myOldFunction', 'myNewFunction');
    // ...
}
```

----------------------------------------

TITLE: Using TextArea with Field Component in JSX
DESCRIPTION: This example shows how to use the TextArea component within a Field component, providing labels, descriptions, and validation through the required attribute.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/TextArea/TextArea.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
<ExampleFrame>
  <Field
    label="Important information"
    description="This information is very important, so you really need to fill it in"
  >
    <TextArea name="importantTextarea" required />
  </Field>
</ExampleFrame>
```

----------------------------------------

TITLE: Defining IAM Policy for CloudWatch Cross-Account Observability in JSON
DESCRIPTION: This JSON configuration outlines the AWS IAM policy required for Grafana to utilize CloudWatch Cross-Account Observability features. It grants permissions to list OAM (Observability Access Manager) sinks and attached links (`oam:ListSinks`, `oam:ListAttachedLinks`), enabling Grafana to retrieve metrics and logs from linked accounts within a single region. Note that EC2 instance attributes cannot be queried across accounts using this feature.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": ["oam:ListSinks", "oam:ListAttachedLinks"],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}
```

----------------------------------------

TITLE: Using ConfirmModal Component with React in JSX
DESCRIPTION: This example demonstrates how to instantiate the ConfirmModal component in a React application. The modal is configured with properties such as isOpen, title, body text, confirmText, icon, and callback functions for user confirmation and dismissal. Dependencies include React and the ConfirmModal component itself. Inputs include strings for UI content and callback functions; outputs are the invocation of the provided handlers. The ConfirmModal expects to be embedded within a React render context.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ConfirmModal/ConfirmModal.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<ConfirmModal
  isOpen={false}
  title="Delete user"
  body="Are you sure you want to delete this user?"
  confirmText="Confirm"
  icon="exclamation-triangle"
  onConfirm={() => console.log('Confirm action')}
  onDismiss={() => console.log('Dismiss action')}
/>
```

----------------------------------------

TITLE: Setting HTTP Service Port - Bash
DESCRIPTION: Sets the HTTP server's listening port for the image renderer using the HTTP_PORT environment variable. A value of 0 assigns an available unused port automatically. Default port is 8081.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
HTTP_PORT=0
```

----------------------------------------

TITLE: Time Filtered Query with Variable Substitution (Bracket Syntax) - SQL
DESCRIPTION: Uses the alternate ([[hostname]]) bracket syntax for variable substitution in a Grafana SQL query, useful for compatibility with some SQL dialects or plugins. Outputs time, value, and a metric string. Requires 'my_table' with appropriate schema and Grafana template variables.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_13

LANGUAGE: sql
CODE:
```
SELECT
  UNIX_TIMESTAMP(atimestamp) as time,
  aint as value,
  avarchar as metric
FROM my_table
WHERE $__timeFilter(atimestamp) and hostname in([[hostname]])
ORDER BY atimestamp ASC
```

----------------------------------------

TITLE: Defining and Rendering Alert Notification Groups with Grafana Go Templates - Go Template
DESCRIPTION: This snippet defines two Go templates in Grafana's notification templating system for rendering firing and resolved alerts in separate sections inside a notification payload. The main template ("custom.firing_and_resolved_alerts") iterates over .Alerts.Resolved and .Alerts.Firing collections, includes their counts, and renders each using the 'alert.summary_and_description' sub-template, which prints summary, status, and description annotations. Dependencies include Grafana's alerting data context and notification template engine; templates should be uniquely named within the Grafana configuration. Expected inputs are alert objects with status and annotation fields, and output is a formatted notification payload summarizing both firing and resolved alerts. Template naming uniqueness is a constraint, and this snippet is typically embedded in Grafana's notification template editor.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt4/index.md#2025-04-23_snippet_6

LANGUAGE: Go Template
CODE:
```
{{- /* Example displaying firing and resolved alerts separately in the notification. */ -}}
{{- /* Edit the template name and template content as needed. */ -}}
{{ define "custom.firing_and_resolved_alerts" -}}
{{ len .Alerts.Resolved }} resolved alert(s)
{{ range .Alerts.Resolved -}}
  {{ template "alert.summary_and_description" . -}}
{{ end }}
{{ len .Alerts.Firing }} firing alert(s)
{{ range .Alerts.Firing -}}
  {{ template "alert.summary_and_description" . -}}
{{ end -}}
{{ end -}}
{{ define "alert.summary_and_description" }}
  Summary: {{.Annotations.summary}}
  Status: {{ .Status }}
  Description: {{.Annotations.description}}
{{ end -}}
```

----------------------------------------

TITLE: Configuring Grafana Conditional Role Mapping Using JMESPath (Bash/INI)
DESCRIPTION: Grafana configuration snippet using a JMESPath expression for `role_attribute_path`. It checks if the 'groups' array in the payload contains 'admin' (assigning 'Admin' role), else if it contains 'editor' (assigning 'Editor' role), otherwise defaults to 'Viewer'. Requires the corresponding JSON payload with a 'groups' array.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
role_attribute_path = contains(groups[*], 'admin') && 'Admin' || contains(groups[*], 'editor') && 'Editor' || 'Viewer'
```

----------------------------------------

TITLE: Patching Specific Annotation Properties via Grafana HTTP API - HTTP+JSON
DESCRIPTION: Demonstrates how to update one or more properties of an annotation using the PATCH HTTP verb. Only the provided fields in the JSON payload (such as text and tags) will be updated. Endpoint requires authentication and returns a confirmation upon success.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
PATCH /api/annotations/1145 HTTP/1.1\nAccept: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\nContent-Type: application/json\n\n{\n  "text":"New Annotation Description",\n  "tags":["tag6","tag7","tag8"]\n}
```

----------------------------------------

TITLE: Defining Grafana Fixed Role: fixed:datasources.caching:reader
DESCRIPTION: Specifies the `fixed:datasources.caching:reader` role (ID: `fixed_D2ddpGxJYlw0mbsTS1ek9fj0kj4`) within Grafana. This role grants the `datasources.caching:read` permission, allowing users to read data source query caching settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
fixed:datasources.caching:reader
```

LANGUAGE: plaintext
CODE:
```
fixed_D2ddpGxJYlw0mbsTS1ek9fj0kj4
```

LANGUAGE: plaintext
CODE:
```
Permissions included:
- datasources.caching:read
```

----------------------------------------

TITLE: Configuring Vault Connection Details in Grafana INI
DESCRIPTION: This INI snippet shows the `[keystore.vault]` section in `grafana.ini` used to configure the connection to Hashicorp Vault. It includes parameters for Vault URL, namespace, authentication method (only 'token' supported currently), the authentication token, and optional settings for managing lease renewals for secrets.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/integrate-with-hashicorp-vault/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[keystore.vault]
# Location of the Vault server
;url =
# Vault namespace if using Vault with multi-tenancy
;namespace =
# Method for authenticating towards Vault. Vault is inactive if this option is not set
# Possible values: token
;auth_method =
# Secret token to connect to Vault when auth_method is token
;token =
# Time between checking if there are any secrets which needs to be renewed.
;lease_renewal_interval = 5m
# Time until expiration for tokens which are renewed. Should have a value higher than lease_renewal_interval
;lease_renewal_expires_within = 15m
# New duration for renewed tokens. Vault may be configured to ignore this value and impose a stricter limit.
;lease_renewal_increment = 1h
```

----------------------------------------

TITLE: Defining Hashicorp Vault Provider in Grafana INI Configuration
DESCRIPTION: This configuration snippet demonstrates how to define a Hashicorp Vault encryption provider in the `grafana.ini` file. It requires specifying the Vault `token` for authentication, the server `url`, the `transit_engine_path`, the `key_ring` name, and the `token_renewal_interval`. This section must be named following the pattern `[security.encryption.hashicorpvault.<KEY-NAME>]`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-hashicorp-key-vault/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
   ```
   # Example of Hashicorp Vault provider setup
   ;[security.encryption.hashicorpvault.example-encryption-key]
   # Token used to authenticate within Vault. We suggest to use periodic tokens: more on token types https://www.vaultproject.io/docs/concepts/tokens#service-tokens
   ;token =
   # Location of the Hashicorp Vault server
   ;url = http://localhost:8200
   # Mount point of the transit secret engine
   ;transit_engine_path = transit
   # Key ring name
   ;key_ring = grafana-encryption-key
   # Specifies how often to check if a token needs to be renewed, should be less than a token's period value
   token_renewal_interval = 5m
   ```
```

----------------------------------------

TITLE: Filtering Variable Query Results with query_result Function in PromQL
DESCRIPTION: Example of using query_result function to populate a variable with the top 5 busiest request instances based on average QPS over the dashboard's time range. The regex extracts instance names from the query results.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/template-variables/index.md#2025-04-23_snippet_0

LANGUAGE: PromQL
CODE:
```
Query: query_result(topk(5, sum(rate(http_requests_total[$__range])) by (instance)))
Regex: /"([^"]+)"/
```

----------------------------------------

TITLE: Configuring Custom Branding Using Environment Variables
DESCRIPTION: This example shows how to configure custom footer links using environment variables instead of configuration files. This approach allows for easier configuration in containerized environments.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-custom-branding/index.md#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
GF_WHITE_LABELING_FOOTER_LINKS=support guides extracustom
GF_WHITE_LABELING_FOOTER_LINKS_SUPPORT_TEXT=Support
GF_WHITE_LABELING_FOOTER_LINKS_SUPPORT_URL=http://your.support.site
GF_WHITE_LABELING_FOOTER_LINKS_GUIDES_TEXT=Guides
GF_WHITE_LABELING_FOOTER_LINKS_GUIDES_URL=http://your.guides.site
GF_WHITE_LABELING_FOOTER_LINKS_EXTRACUSTOM_TEXT=Custom Text
GF_WHITE_LABELING_FOOTER_LINKS_EXTRACUSTOM_URL=http://your.custom.site
```

----------------------------------------

TITLE: Dashboard Configuration Properties
DESCRIPTION: Settings for dashboard version control, refresh intervals and default dashboard configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_11

LANGUAGE: properties
CODE:
```
versions_to_keep=20
min_refresh_interval=5s
default_home_dashboard_path=/usr/share/grafana/public/dashboards/home.json
```

----------------------------------------

TITLE: Searching Grafana Query History (HTTP Request)
DESCRIPTION: This snippet demonstrates an example HTTP GET request to search the Grafana query history. It uses query parameters like `datasourceUid` (multiple allowed for AND filtering), `searchString`, and `sort` to filter and order the results. Authentication is required via a Bearer token.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
GET /api/query-history?datasourceUid="PE1C5CBDA0504A6A3"&datasourceUid="FG1C1CBDA0504A6EL"&searchString="ALERTS"&sort="time-asc" HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Creating Contact Points with YAML Provisioning in Grafana
DESCRIPTION: Defines contact points to create or update in a Grafana instance via a YAML provisioning file. Dependencies include a provision-enabled Grafana setup and access to the 'provisioning/alerting' directory. Each contact point entry must have an organization ID, a name, and a list of receivers (with required fields such as UID, type, and receiver-specific settings like endpoint URLs). The configuration takes effect on Grafana restart or reload. YAML must conform to field requirements; additions or changes require subsequent reloads.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_2

LANGUAGE: yaml
CODE:
```
# config file version\napiVersion: 1\n\n# List of contact points to import or update\ncontactPoints:\n  # <int> organization ID, default = 1\n  - orgId: 1\n    # <string, required> name of the contact point\n    name: cp_1\n    receivers:\n      # <string, required> unique identifier for the receiver. Should not exceed 40 symbols. Only letters, numbers, - (hyphen), and _ (underscore) allowed.\n      - uid: first_uid\n        # <string, required> type of the receiver\n        type: prometheus-alertmanager\n        # <bool, optional> Disable the additional [Incident Resolved] follow-up alert, default = false\n        disableResolveMessage: false\n        # <object, required> settings for the specific receiver type\n        settings:\n          url: http://test:9000
```

----------------------------------------

TITLE: Table Query for Azure Activity Logs
DESCRIPTION: This query retrieves Azure activity logs filtered by the dashboard's time range, selecting specific columns for display in a table panel. Results are ordered by TimeGenerated in descending order to show the most recent activities first.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/query-editor/index.md#2025-04-23_snippet_3

LANGUAGE: kusto
CODE:
```
AzureActivity
| where $__timeFilter()
| project TimeGenerated, ResourceGroup, Category, OperationName, ActivityStatus, Caller
| order by TimeGenerated desc
```

----------------------------------------

TITLE: Fetching Admin Settings with HTTP GET Request
DESCRIPTION: Example HTTP GET request to fetch Grafana admin settings. This endpoint requires Basic Authentication with administrator credentials.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/admin/settings
Accept: application/json
Content-Type: application/json
```

----------------------------------------

TITLE: LDAP Debug Logging Configuration
DESCRIPTION: Configuration setting to enable LDAP debug logging in Grafana's configuration file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
[log]
filters = ldap:debug
```

----------------------------------------

TITLE: Example Error Log for Missing Libraries (Bash)
DESCRIPTION: Shows a typical error message encountered in Grafana logs when the image rendering plugin fails because required shared libraries (like `libX11.so.6`) are missing on the system where Grafana is running. This indicates a dependency issue that needs to be resolved.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
Rendering failed: Error: Failed to launch chrome!/var/lib/grafana/plugins/grafana-image-renderer/chrome-linux/chrome:
error while loading shared libraries: libX11.so.6: cannot open shared object file: No such file or directory\n\n\nTROUBLESHOOTING: https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md
```

----------------------------------------

TITLE: Configuring OpenStreetMap Standard as Default Baselayer in Grafana (INI)
DESCRIPTION: Configuration for setting OpenStreetMap as the default base map in Grafana. This option requires no additional configuration parameters in the config object.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/geomap/index.md#2025-04-23_snippet_5

LANGUAGE: ini
CODE:
```
default_baselayer_config = `{
  "type": "osm-standard",
  "config": {}
}`
```

----------------------------------------

TITLE: Getting Minikube IP Address (Bash)
DESCRIPTION: Runs the `minikube ip` command to retrieve the IP address assigned to the running `minikube` cluster instance. This IP is required for accessing services via port forwarding when not using a LoadBalancer.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
minikube ip
```

----------------------------------------

TITLE: Adding a Custom CA Certificate in Grafana Image Renderer Docker Container (Dockerfile)
DESCRIPTION: Provides a Dockerfile snippet for building a custom Grafana Image Renderer container. It installs `nss-tools`, copies a custom root CA certificate into the container, creates an NSS database for the `grafana` user, and imports the certificate using `certutil`, ensuring the renderer within the container trusts the custom CA.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_12

LANGUAGE: dockerfile
CODE:
```
FROM grafana/grafana-image-renderer:latest

USER root

RUN apk add --no-cache nss-tools

USER grafana

COPY internal-root-ca.crt.pem /etc/pki/tls/certs/internal-root-ca.crt.pem
RUN mkdir -p /home/grafana/.pki/nssdb
RUN certutil -d sql:/home/grafana/.pki/nssdb -A -n internal-root-ca -t C -i /etc/pki/tls/certs/internal-root-ca.crt.pem
```

----------------------------------------

TITLE: Querying Elasticsearch Terms with Limit for Grafana Variable (JSON)
DESCRIPTION: This JSON query retrieves distinct values (terms) from the `hostname.keyword` field in Elasticsearch for a Grafana template variable. It uses a term aggregation and explicitly sets a `size` limit of 1000 results. The query automatically respects the current dashboard time range.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/elasticsearch/template-variables/index.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
`{"find": "terms", "field": "hostname.keyword", "size": 1000}`
```

----------------------------------------

TITLE: Creating Service Account Tokens in Grafana (HTTP)
DESCRIPTION: This HTTP request creates a new service account token with a specified name and optional expiration time. The secondsToLive parameter determines token lifetime, with 0 meaning the token never expires.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_10

LANGUAGE: http
CODE:
```
POST /api/serviceaccounts/2/tokens HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Basic YWRtaW46YWRtaW4=

{
	"name": "grafana",
	"secondsToLive": 604800
}
```

----------------------------------------

TITLE: Basic Usage of ClipboardButton in React/JSX
DESCRIPTION: Demonstrates the basic implementation of the `ClipboardButton` component. It sets the button `variant` to 'secondary', provides a function to the `getText` prop to return the static string 'Text to be copied', and defines an `onClipboardCopy` callback that logs a message to the console when text is successfully copied. The button text is set to 'Copy to clipboard'.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ClipboardButton/ClipboardButton.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<ClipboardButton
  variant="secondary"
  getText={() => 'Text to be copied'}
  onClipboardCopy={() => console.log('text copied')}
>
  Copy to clipboard
</ClipboardButton>
```

----------------------------------------

TITLE: Provisioning OpenTSDB Data Source in Grafana
DESCRIPTION: This YAML configuration example demonstrates how to provision an OpenTSDB data source in Grafana using the provisioning system. It sets up a data source named 'OpenTSDB' with proxy access, specifying the URL, TSDB resolution, and version.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/opentsdb/_index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: OpenTSDB
    type: opentsdb
    access: proxy
    url: http://localhost:4242
    jsonData:
      tsdbResolution: 1
      tsdbVersion: 1
```

----------------------------------------

TITLE: Verifying JWT Using JSON Web Key Set from Local File
DESCRIPTION: Configuration for verifying JWT tokens using a JSON Web Key Set loaded from a local JSON file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_6

LANGUAGE: ini
CODE:
```
jwk_set_file = /path/to/jwks.json
```

----------------------------------------

TITLE: Parsing Frontend Settings Response from Grafana HTTP API - JSON
DESCRIPTION: This snippet shows a typical JSON response from the GET /api/frontend/settings endpoint in Grafana. The response includes flags such as allowOrgCreate, a buildInfo object (with fields like buildstamp, commit, and version), a datasources map listing available datasource definitions, and the defaultDatasource string. This output is useful for client applications needing to configure UI or connect to datasources dynamically.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/other.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{\n  \"allowOrgCreate\":true,\n  \"appSubUrl\":\"\",\n  \"buildInfo\":{\n    \"buildstamp\":xxxxxx,\n    \"commit\":\"vyyyy\",\n    \"version\":\"zzzzz\"\n  },\n  \"datasources\":{\n    \"datasourcename\":{\n      \"index\":\"grafana-dash\",\n      \"meta\":{\n        \"annotations\":true,\n        \"module\":\"plugins/datasource/grafana/datasource\",\n        \"name\":\"Grafana\",\n        \"partials\":{\n          \"annotations\":\"app/plugins/datasource/grafana/partials/annotations.editor.html\",\n          \"config\":\"app/plugins/datasource/grafana/partials/config.html\"\n        },\n        \"pluginType\":\"datasource\",\n        \"serviceName\":\"Grafana\",\n        \"type\":\"grafanasearch\"\n      }\n    }\n  },\n  \"defaultDatasource\": \"Grafana\"\n}\n
```

----------------------------------------

TITLE: Retrieving a Grafana Data Source by UID via HTTP API
DESCRIPTION: Explains the `GET /api/datasources/uid/:uid` endpoint for fetching a specific data source using its unique identifier (UID). This is a recommended alternative to the deprecated ID lookup. Requires `datasources:read` permission with scopes like `datasources:*`, `datasources:uid:*`, or `datasources:uid:<UID>`. The request includes the data source UID in the path and standard headers. The response is a JSON object containing the details of the specified data source.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
GET /api/datasources/uid/kLtEtcRGk HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "id": 1,
  "uid": "kLtEtcRGk",
  "orgId": 1,
  "name": "test_datasource",
  "type": "graphite",
  "typeLogoUrl": "",
  "access": "proxy",
  "url": "http://mydatasource.com",
  "password": "",
  "user": "",
  "database": "",
  "basicAuth": false,
  "basicAuthUser": "",
  "basicAuthPassword": "",
  "withCredentials": false,
  "isDefault": false,
  "jsonData": {
    "graphiteType": "default",
    "graphiteVersion": "1.1"
  },
  "secureJsonFields": {},
  "version": 1,
  "readOnly": false
}
```

----------------------------------------

TITLE: Upgrading an Existing Helm Release with Custom Values - Helm CLI - Bash
DESCRIPTION: This command upgrades the existing `my-grafana` Helm release using values from a modified `values.yaml` file, particularly after enabling persistent storage. Requires the Helm chart to be already installed and the file path to be accessible. The command applies any chart value customizations to the running deployment.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
helm upgrade my-grafana grafana/grafana -f values.yaml -n monitoring
```

----------------------------------------

TITLE: Provisioning InfluxDB 1.x Data Source in Grafana
DESCRIPTION: This YAML configuration example demonstrates how to provision an InfluxDB 1.x data source in Grafana. It includes settings for name, type, access method, authentication, and database name.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/configure-influxdb-data-source/_index.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: InfluxDB_v1
    type: influxdb
    access: proxy
    user: grafana
    url: http://localhost:8086
    jsonData:
      dbName: site
      httpMode: GET
    secureJsonData:
      password: grafana
```

----------------------------------------

TITLE: Configuring Telegram Contact Point - YAML
DESCRIPTION: Integrates Telegram as a contact point for Grafana's alerting. Requires a valid bot token and chat ID; allows optional custom message content via templates. Messages are sent to specified Telegram chat. Requires a Telegram bot and chat ID.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_18

LANGUAGE: yaml
CODE:
```
type: telegram\nsettings:\n  # <string, required>\n  bottoken: xxx\n  # <string, required>\n  chatid: some_chat_id\n  # <string>\n  message: |\n    {{ template \"default.message\" . }}\n
```

----------------------------------------

TITLE: Updating a Single Grafana Plugin (Bash)
DESCRIPTION: Command 'plugins update <plugin-id>' updates a specific installed Grafana plugin, identified by '<plugin-id>', to its latest compatible version.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_17

LANGUAGE: bash
CODE:
```
grafana cli plugins update <plugin-id>
```

----------------------------------------

TITLE: Re-encrypting Secrets using Grafana CLI
DESCRIPTION: Uses the Grafana CLI to re-encrypt existing database secrets using envelope encryption with a fresh data key. This is useful for migrating from legacy encryption or after rotating data keys. It is recommended to run this command during maintenance.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
grafana cli admin secrets-migration re-encrypt
```

----------------------------------------

TITLE: SQL Query for First Part of Multi-Series Graph in Grafana
DESCRIPTION: This query is the first part of a two-query set to create a multi-series graph in Grafana. It groups time data, formats the metric name, and calculates the average of valueOne.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_10

LANGUAGE: sql
CODE:
```
SELECT
  $__timeGroup(time, '5m') as time,
  measurement + ' - value one' as metric,
  avg(valueOne) as valueOne
FROM
  metric_values
WHERE
  $__timeFilter(time)
GROUP BY
  $__timeGroup(time, '5m'),
  measurement
ORDER BY 1
```

----------------------------------------

TITLE: Adding the Beta Grafana APT Repository - Bash
DESCRIPTION: Adds the beta release Grafana APT repository for those wishing to track pre-release versions. Prerequisite: GPG key must be installed as shown in earlier steps. Output: Updates /etc/apt/sources.list.d/grafana.list and allows beta installs.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com beta main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
```

----------------------------------------

TITLE: Response for Listing Snapshots via Grafana HTTP API (HTTP)
DESCRIPTION: Displays the JSON-format HTTP response for a successful snapshot listing operation. Each entry in the response array contains identifiers, ownership, expiration, and tracking metadata about a snapshot for use in client applications.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n[\n  {\n    "id":8,\n    "name":"Home",\n    "key":"YYYYYYY",\n    "orgId":1,\n    "userId":1,\n    "external":false,\n    "externalUrl":"",\n    "expires":"2200-13-32T25:23:23+02:00",\n    "created":"2200-13-32T28:24:23+02:00",\n    "updated":"2200-13-32T28:24:23+02:00"\n  }\n]
```

----------------------------------------

TITLE: Basic Usage of $value in Go Template Annotation - Go Template - Markdown
DESCRIPTION: This snippet shows how to include the special $value string variable in a Grafana alert annotation template. $value contains a summary of all relevant query/condition results. With a single query, it renders just the float value; with multiple queries, it provides a string listing each. The template engine is Go templates. The output is an annotation string including the relevant dynamic value(s).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_5

LANGUAGE: Go Template
CODE:
```
{{ $value }}: CPU usage has exceeded 80% for the last 5 minutes.
```

----------------------------------------

TITLE: Deleting a Mute Timing via Grafana Provisioning API (HTTP)
DESCRIPTION: Defines the `DELETE` request endpoint `/api/v1/provisioning/mute-timings/:name` to remove a specific Grafana mute timing. The `name` path parameter identifies the mute timing. An optional `version` query parameter enables optimistic concurrency validation. Successful deletion returns a 204 No Content status, while a conflict (e.g., version mismatch) results in a 409 Conflict status.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_12

LANGUAGE: plaintext
CODE:
```
DELETE /api/v1/provisioning/mute-timings/:name
```

----------------------------------------

TITLE: Joining Tables for Multi-Column Template Variable Dropdown - SQL
DESCRIPTION: Selects hostnames from two tables (my_host and my_other_host) using a JOIN on the city field. Makes available multiple columns for a variable dropdown. Requires both tables and the join column to exist. Returns a list of hostname combinations reflecting joined cities.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_4

LANGUAGE: sql
CODE:
```
SELECT my_host.hostname, my_other_host.hostname2 FROM my_host JOIN my_other_host ON my_host.city = my_other_host.city
```

----------------------------------------

TITLE: Creating a Basic Notification Title Template for Grafana Alerts
DESCRIPTION: This template creates a simple notification title that shows the count of firing and resolved alerts with appropriate emoji indicators.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_18

LANGUAGE: go
CODE:
```
{{ define "custom_title" -}}
{{ if gt (.Alerts.Firing | len) 0 }}🚨 {{ .Alerts.Firing | len }} firing alerts. {{ end }}{{ if gt (.Alerts.Resolved | len) 0 }}✅ {{ .Alerts.Resolved | len }} resolved alerts.{{ end }}
{{ end -}}
```

----------------------------------------

TITLE: Updating Current Organization Preferences via HTTP API - HTTP
DESCRIPTION: PUT request to set or replace all organization-wide preferences in Grafana. Requires admin privileges and Bearer authentication. All expected keys, such as theme, homeDashboardUID, and timezone, should be set, as missing keys revert to defaults. A successful update returns a confirmation message.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
PUT /api/org/preferences HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  "theme": "",\n  "homeDashboardUID":"home",\n  "timezone":"utc"\n}
```

----------------------------------------

TITLE: Editing Deployment Configuration with Kubectl (Bash)
DESCRIPTION: Opens the YAML manifest of the specified deployment ('grafana') within the given namespace ('my-grafana') in the default text editor (defined by the $EDITOR environment variable). This allows direct modification of the deployment's configuration, such as changing the container image version.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_18

LANGUAGE: bash
CODE:
```
kubectl edit deployment grafana --namespace=my-grafana
```

----------------------------------------

TITLE: Listing Role Permissions via Grafana HTTP API (curl)
DESCRIPTION: This shell command uses `curl` to send a GET request to the Grafana `/api/access-control/roles/{roleUID}` endpoint to retrieve the details and associated permissions for a specific RBAC role identified by its UID (`qQui_LCMk`). The request requires Basic Authentication using a base64 encoded `username:password` string in the `Authorization` header. Replace `<grafana_url>` with the actual Grafana instance URL and `YWRtaW46cGFzc3dvcmQ=` with the appropriate encoded credentials.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
curl --location --request GET '<grafana_url>/api/access-control/roles/qQui_LCMk' --header 'Authorization: Basic YWRtaW46cGFzc3dvcmQ='
```

----------------------------------------

TITLE: Enabling Persistent Storage in Grafana Chart - values.yaml - YAML
DESCRIPTION: This YAML snippet configures the Helm chart to enable persistent storage for Grafana by setting `persistence.enabled` to `true` and specifying the volume type as PersistentVolumeClaim (pvc). Must be included in the `values.yaml` file before running `helm upgrade`. Ensures Grafana data survives pod restarts. Key fields are `type` and `enabled`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_12

LANGUAGE: yaml
CODE:
```
.......
............
......
persistence:
  type: pvc
  enabled: true
  # storageClassName: default
.......
............
......
```

----------------------------------------

TITLE: Configuring Telegraf HTTP Output for Grafana Live Streaming (TOML)
DESCRIPTION: This Telegraf configuration snippet defines how to collect total CPU usage metrics every second (`interval`, `flush_interval`) using the `inputs.cpu` plugin. It then configures the `outputs.http` plugin to send these metrics in InfluxDB line protocol format (`data_format = "influx"`) to the Grafana live push API endpoint (`http://localhost:3000/api/live/push/custom_stream_id`). Authentication is handled via an Authorization Bearer token header, which requires replacing `<Your API Key>` with a valid Grafana Admin API key. The `custom_stream_id` part of the URL defines the namespace for the Grafana Live channel.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/stream-metrics-from-telegraf-to-grafana/index.md#2025-04-23_snippet_0

LANGUAGE: toml
CODE:
```
```toml
[agent]
  interval = "1s"
  flush_interval = "1s"

[[inputs.cpu]]
  percpu = false
  totalcpu = true

[[outputs.http]]
  url = "http://localhost:3000/api/live/push/custom_stream_id"
  data_format = "influx"
  [outputs.http.headers]
    Authorization = "Bearer <Your API Key>"
```
```

----------------------------------------

TITLE: Kubernetes Kubeconfig for Grafana Auth - YAML
DESCRIPTION: This YAML manifest defines a Kubernetes kubeconfig for authenticating to Grafana API server as a user. The configuration disables TLS verification, points the API server to https://127.0.0.1:3000, sets user and context information, and consumes username and password for HTTP basic authentication. Expected inputs are credentials that must be filled in by the user. Limitations include hardcoded cluster server and obvious sensitivity of credentials.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_3

LANGUAGE: yaml
CODE:
```
apiVersion: v1\nclusters:\n- cluster:\n    insecure-skip-tls-verify: true\n    server: https://127.0.0.1:3000\n  name: default-cluster\ncontexts:\n- context:\n    cluster: default-cluster\n    namespace: default\n    user: default\n  name: default-context\ncurrent-context: default-context\nkind: Config\npreferences: {}\nusers:\n- name: default\n  user:\n    username: <username>\n    password: <password>
```

----------------------------------------

TITLE: Apache Proxy Configuration for Grafana (Root Path) - Bash
DESCRIPTION: This snippet configures Apache to forward all requests from the root (/) to the Grafana server on port 3000. Intended for inclusion in your Apache site's <VirtualHost> block. The ProxyPreserveHost directive assures Host header preservation for correct backend operation. Requires mod_proxy and mod_proxy_http modules.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
  ProxyPreserveHost on\n  ProxyPass / http://your_grafana_server:3000\n  ProxyPassReverse / http://your_grafana_server:3000
```

----------------------------------------

TITLE: Retrieving a Grafana Data Source by Name via HTTP API
DESCRIPTION: Describes the `GET /api/datasources/name/:name` endpoint for fetching a specific data source using its name. This is another recommended alternative to the deprecated ID lookup. Requires `datasources:read` permission with scopes like `datasources:*`, `datasources:name:*`, or `datasources:name:<Name>`. The request includes the data source name in the path and standard headers. The response is a JSON object containing the details of the specified data source.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
GET /api/datasources/name/test_datasource HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "id": 1,
  "uid": "kLtEtcRGk",
  "orgId": 1,
  "name": "test_datasource",
  "type": "graphite",
  "typeLogoUrl": "",
  "access": "proxy",
  "url": "http://mydatasource.com",
  "password": "",
  "user": "",
  "database": "",
  "basicAuth": false,
  "basicAuthUser": "",
  "basicAuthPassword": "",
  "withCredentials": false,
  "isDefault": false,
  "jsonData": {
    "graphiteType": "default",
    "graphiteVersion": "1.1"
  },
  "secureJsonFields": {},
  "version": 1,
  "readOnly": false
}
```

----------------------------------------

TITLE: Adding Prefix Icon to Input - React JSX
DESCRIPTION: This snippet demonstrates how to use the Input component with a prefix, specifically rendering a search icon before the input field. Dependencies include the Input and Icon components from the codebase. The 'prefix' prop injects a React element before the input control; the rest of the input acts as a standard text field. This approach increases visual clarity by indicating the input's intended use, with the icon's 'name' parameter specifying which glyph to show. Outputs a React element representing a text box with an icon prefix.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Input/Input.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Input prefix={<Icon name=\"search\" />} />
```

----------------------------------------

TITLE: Creating a Global User with HTTP POST Request
DESCRIPTION: Example HTTP POST request to create a new Grafana user. The request includes user details such as name, email, login, password, and optional organization ID.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
POST /api/admin/users HTTP/1.1
Accept: application/json
Content-Type: application/json

{
  "name":"User",
  "email":"user@graf.com",
  "login":"user",
  "password":"userpassword",
  "OrgId": 1
}
```

----------------------------------------

TITLE: Configuring Grafana Log Level via Environment Variable - Bash
DESCRIPTION: Runs a Grafana container with the debug log level enabled by setting an environment variable. Assumes that Docker is installed and a free port 3000 is available. Setting 'GF_LOG_LEVEL=debug' increases verbosity in logs; output is more detailed logs from the running container, useful for troubleshooting.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
# enable debug logs

docker run -d -p 3000:3000 --name=grafana \
  -e "GF_LOG_LEVEL=debug" \
  grafana/grafana-enterprise
```

----------------------------------------

TITLE: Reading Grafana Dashboards (Plaintext)
DESCRIPTION: Defines the `dashboards:read` permission action required to read one or more dashboards in Grafana. This capability is tied to dashboard and folder scopes including `dashboards:*`, `dashboards:uid:*`, `folders:*`, and `folders:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_11

LANGUAGE: plaintext
CODE:
```
`dashboards:read`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`dashboards:*`</li><li>`dashboards:uid:*`</li><li>`folders:*`</li><li>`folders:uid:*`</li></ul>
```

----------------------------------------

TITLE: Implementing Async Options Loading in Combobox
DESCRIPTION: Example of implementing asynchronous options loading in the Combobox component using a callback function that fetches data from an API.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Combobox/Combobox.mdx#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
const loadOptions = useCallback(async (input: string) => {
  const response = await fetch(`/api/options?query=${input}`);
  return response.json();
}, []);

<Combobox options={loadOptions} />;
```

----------------------------------------

TITLE: Creating Grafana Service Accounts and Tokens with Terraform
DESCRIPTION: This Terraform configuration demonstrates the modern approach using service accounts. It defines a `grafana_service_account` resource ('sa-admin') with the 'Admin' role. It then creates two `grafana_service_account_token` resources ('sat-bar', 'sat-foo'), associated with the previously defined service account, optionally setting a time-to-live. This replaces the deprecated `grafana_api_key` resource.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_6

LANGUAGE: tf
CODE:
```
terraform {
  required_providers {
    grafana = {
      source  = "grafana/grafana"
    }
  }
}

# configure the provider with basic auth
provider "grafana" {
  url  = "http://localhost:3000"
  auth = "admin:admin"
}

# Creating a service account in Grafana instance to be used as auth and attach tokens
# notice we can attach multiple tokens to one service account
resource "grafana_service_account" "sa-admin" {
  name             = "sa-admin"
  role             = "Admin"
}

# Creating a service account token in Grafana instance to be used for creating resources in Grafana instance
resource "grafana_service_account_token" "sat-bar" {
  name           = "sat-bar"
  service_account_id = grafana_service_account.sa-admin.id
}

# Creating a service account token in Grafana instance to be used for creating resources in Grafana instance
resource "grafana_service_account_token" "sat-foo" {
  name           = "sat-foo"
  service_account_id = grafana_service_account.sa-admin.id
  seconds_to_live    = 30
}
```

----------------------------------------

TITLE: Configuring SAML Org Mapping with Colons using JSON Syntax in Grafana INI
DESCRIPTION: Illustrates using JSON array syntax and escaping colons (`\:`) within the `org_mapping` parameter in Grafana's SAML configuration. This example maps users from the external IdP group "External:Admin" to the Grafana organization named "ACME Corp" with the Admin role.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_14

LANGUAGE: ini
CODE:
```
# Assign users from "External:Admin" to the organization with name "ACME Corp" as Admin
org_mapping = ["External\:Admin:ACME Corp:Admin"]
```

----------------------------------------

TITLE: Mapping Grafana Roles Based on GitLab Group Membership (INI)
DESCRIPTION: This INI configuration uses a JMESPath expression with the `contains` function to check if the user's `groups` array (from the OAuth token) includes 'example-group'. If the user is part of this GitLab group, they are granted the 'Editor' role; otherwise, they are assigned the 'Viewer' role.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/gitlab/index.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
role_attribute_path = contains(groups[*], 'example-group') && 'Editor' || 'Viewer'
```

----------------------------------------

TITLE: Example Grafana Config with Volume, Env Vars, Plugin (YAML)
DESCRIPTION: An example `docker-compose.yaml` demonstrating a more complex Grafana setup. It uses a named Docker volume (`grafana_storage`) for persistence, sets environment variables (`GF_SERVER_ROOT_URL`, `GF_PLUGINS_PREINSTALL`) to configure the server URL and preinstall the `grafana-clock-panel` plugin, maps port 3000, and ensures the container restarts unless stopped.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_18

LANGUAGE: yaml
CODE:
```
services:
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    environment:
     - GF_SERVER_ROOT_URL=http://my.grafana.server/
     - GF_PLUGINS_PREINSTALL=grafana-clock-panel
    ports:
     - '3000:3000'
    volumes:
     - 'grafana_storage:/var/lib/grafana'
volumes:
  grafana_storage: {}
```

----------------------------------------

TITLE: Complex Graphite Query with Interval Variable
DESCRIPTION: This example shows a more complex Graphite query using an interval variable. It combines multiple functions including groupByNode, summarize, and movingAverage, demonstrating how interval variables can be used in sophisticated time series analysis.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_1

LANGUAGE: graphite
CODE:
```
groupByNode(summarize(movingAverage(apps.$app.$server.counters.requests.count, 5), '$interval', 'sum', false), 2, 'sum')
```

----------------------------------------

TITLE: Checking License Status via HTTP - Grafana Licensing API - HTTP
DESCRIPTION: This HTTP example demonstrates how to check license availability in a Grafana Enterprise instance using the GET /api/licensing/check endpoint. Requires Bearer token authentication; response is a boolean indicating license status. Ensure the user has Grafana server admin permissions, and set proper HTTP headers as shown.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/licensing.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/licensing/check\nAccept: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Configuring Slack Contact Point - YAML
DESCRIPTION: Configures Slack as a contact point for Grafana alerts. Requires a recipient and authentication token or a webhook URL. Supports customization through fields such as username, icon, mentions, message color, title, and text, the latter two using templated content. Outputs are customized Slack alert messages. Requires access to Slack API and/or webhooks.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_16

LANGUAGE: yaml
CODE:
```
type: slack\nsettings:\n  # <string, required>\n  recipient: alerting-dev\n  # <string, required>\n  token: xxx\n  # <string>\n  username: grafana_bot\n  # <string>\n  icon_emoji: heart\n  # <string>\n  icon_url: https://icon_url\n  # <string>\n  mentionUsers: user_1,user_2\n  # <string>\n  mentionGroups: group_1,group_2\n  # <string> options: here, channel\n  mentionChannel: here\n  # <string> Optionally provide a Slack incoming webhook URL for sending messages, in this case the token isn't necessary\n  url: https://some_webhook_url\n  # <string>\n  endpointUrl: https://custom_url/api/chat.postMessage\n  # <string>\n  color: {{ if eq .Status \"firing\" }}#D63232{{ else }}#36a64f{{ end }}\n  # <string>\n  title: |\n    {{ template \"slack.default.title\" . }}\n  text: |\n    {{ template \"slack.default.text\" . }}\n
```

----------------------------------------

TITLE: Provisioning Loki Data Source with Basic Auth and Derived Fields (YAML)
DESCRIPTION: This YAML configuration shows how to provision a Loki data source with basic authentication and derived fields. It includes settings for tracing integration and demonstrates proper escaping of special characters in YAML.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/loki/_index.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: Loki
    type: loki
    access: proxy
    url: http://localhost:3100
    basicAuth: true
    basicAuthUser: my_user
    jsonData:
      maxLines: 1000
      derivedFields:
        - datasourceUid: my_jaeger_uid
          matcherRegex: "traceID=(\\w+)"
          name: TraceID
          url: '$${__value.raw}'
          urlDisplayLabel: 'View Trace'
        - matcherRegex: "traceID=(\\w+)"
          name: TraceID
          url: 'http://localhost:16686/trace/$${__value.raw}'
    secureJsonData:
      basicAuthPassword: test_password
```

----------------------------------------

TITLE: Enabling gRPC Server Feature Toggle - INI
DESCRIPTION: This snippet shows how to enable the Grafana gRPC server via the INI configuration file by setting the grpcServer feature toggle to true under the [feature_toggles] section. This is a prerequisite for activating any gRPC-related functionality in Grafana. The value can be set to false to disable the server entirely.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/grpcserver/README.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[feature_toggles]
grpcServer = true

```

----------------------------------------

TITLE: Querying Flask App Memory Usage in Prometheus
DESCRIPTION: This PromQL query selects the `flask_app_memory_usage` metric from a Prometheus data source. It is used to create a second Grafana alert rule, similar to the CPU usage alert, to monitor memory consumption. The context suggests setting a threshold (e.g., 60%) and linking this alert to the same dashboard panel as the CPU alert for unified visualization and annotations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_8

LANGUAGE: promql
CODE:
```
flask_app_memory_usage{}
```

----------------------------------------

TITLE: Interpolating Email Verification Data with Go Templating - GoTemplate
DESCRIPTION: This snippet demonstrates the use of Go template syntax to inject dynamic data into an email template for account verification. Dependencies include the Go templating engine, with required variables: ".Subject" for the email subject, ".ConfirmationCode" for the one-time code, ".Expire" for the code's expiration time in minutes, ".AppUrl" and ".Code" for constructing the verification link. Inputs are provided as template variables at render time, and outputs are the completed email content with the corresponding verification instructions and links. The template expects all variables to be defined at runtime and does not perform validation within the template.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/passwordless_verify_existing_user.txt#2025-04-23_snippet_0

LANGUAGE: gotemplate
CODE:
```
[[HiddenSubject .Subject "Verify your email"]]

Hi,

Copy and paste the email verification code:
[[.ConfirmationCode]]
into the login form to verify your email address. This confirmation code will expire in {{ .Expire }} minutes. 
Alternatively, you can use the button below to verify your email address. 

[[.AppUrl]]login/?code=[[.Code]]&confirmationCode=[[.ConfirmationCode]]
```

----------------------------------------

TITLE: Changing Log Level - Bash
DESCRIPTION: Sets the LOG_LEVEL environment variable for controlling verbosity of Grafana rendering service logs. Accepts values like 'debug', 'info', 'warning', and 'error', with 'debug' enabling the most verbose output. Affects logging output to stdout/stderr or log files.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_23

LANGUAGE: bash
CODE:
```
LOG_LEVEL=debug
```

----------------------------------------

TITLE: Restarting Grafana Deployment for Resource Provisioning - kubectl Bash
DESCRIPTION: Performs a rolling restart of the Grafana deployment in 'my-grafana' namespace to trigger provisioning reload. Uses deployment selector 'app=grafana'. This is necessary for Grafana to pick up changes in provisioning directories/files, especially after copying new resources into the pod.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_28

LANGUAGE: bash
CODE:
```
kubectl rollout restart -n my-grafana deployment --selector=app=grafana

```

----------------------------------------

TITLE: Retrieving All Roles in Grafana RBAC API
DESCRIPTION: Makes a GET request to retrieve all existing roles, including global and organization-specific roles. Requires the 'roles:read' action on 'roles:*' scope.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
GET /api/access-control/roles
Accept: application/json
Content-Type: application/json
```

----------------------------------------

TITLE: Updating a Team - HTTP
DESCRIPTION: Sends a PUT request to update an existing team's name and/or email by its numeric ID. The user must include updated fields as a JSON object in the request body and authenticate with a Bearer token.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
PUT /api/teams/2 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt\n\n{\n  \"name\": \"MyTestTeam\",\n  \"email\": \"email@test.com\"\n}
```

----------------------------------------

TITLE: Apache httpd.conf Configuration for Docker AuthProxy
DESCRIPTION: Complete Apache HTTP server configuration file for Docker-based authentication proxy to Grafana, including module loading, authentication setup, and proxy configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
ServerRoot "/usr/local/apache2"
Listen 80
LoadModule mpm_event_module modules/mod_mpm_event.so
LoadModule authn_file_module modules/mod_authn_file.so
LoadModule authn_core_module modules/mod_authn_core.so
LoadModule authz_host_module modules/mod_authz_host.so
LoadModule authz_user_module modules/mod_authz_user.so
LoadModule authz_core_module modules/mod_authz_core.so
LoadModule auth_basic_module modules/mod_auth_basic.so
LoadModule log_config_module modules/mod_log_config.so
LoadModule env_module modules/mod_env.so
LoadModule headers_module modules/mod_headers.so
LoadModule unixd_module modules/mod_unixd.so
LoadModule rewrite_module modules/mod_rewrite.so
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
<IfModule unixd_module>
User daemon
Group daemon
</IfModule>
ServerAdmin you@example.com
<Directory />
    AllowOverride none
    Require all denied
</Directory>
DocumentRoot "/usr/local/apache2/htdocs"
ErrorLog /proc/self/fd/2
LogLevel error
<IfModule log_config_module>
    LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
    LogFormat "%h %l %u %t \"%r\" %>s %b" common
    <IfModule logio_module>
    LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
    </IfModule>
    CustomLog /proc/self/fd/1 common
</IfModule>
<Proxy *>
    AuthType Basic
    AuthName GrafanaAuthProxy
    AuthBasicProvider file
    AuthUserFile /tmp/htpasswd
    Require valid-user
    RewriteEngine On
    RewriteRule .* - [E=PROXY_USER:%{LA-U:REMOTE_USER},NS]
    RequestHeader set X-WEBAUTH-USER "%{PROXY_USER}e"
</Proxy>
RequestHeader unset Authorization
ProxyRequests Off
ProxyPass / http://grafana:3000/
ProxyPassReverse / http://grafana:3000/
```

----------------------------------------

TITLE: Stopping Grafana Server (systemd) - Shell
DESCRIPTION: Stops the Grafana server if it is running as a systemd service. Requires sudo and systemd support. Input: None. Output: grafana-server systemd service is stopped cleanly.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_13

LANGUAGE: shell
CODE:
```
sudo systemctl stop grafana-server
```

----------------------------------------

TITLE: Retrieving Grafana Admin Password from Kubernetes Secret - kubectl - Bash
DESCRIPTION: This command extracts and decodes the admin password for the deployed Grafana instance from a Kubernetes secret. It combines `kubectl get secret` with a JSONPath query and base64 decoding. Requires earlier deployment of Grafana and that the secret exists in the specified namespace.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
kubectl get secret --namespace monitoring my-grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo
```

----------------------------------------

TITLE: Disabling Grafana Login Form
DESCRIPTION: Configuration to hide the Grafana login form, which is useful when authentication is handled externally through SSO or other methods.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/grafana/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
[auth]
disable_login_form = true
```

----------------------------------------

TITLE: Basic ConfirmButton Implementation in React
DESCRIPTION: Basic implementation of the ConfirmButton component showing core functionality with confirmation text and callback handling. The component includes size specification, confirmation text, variant selection, and an onConfirm callback.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ConfirmButton/ConfirmButton.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<ConfirmButton
  closeOnConfirm
  size="md"
  confirmText="Are you sure?"
  confirmVariant="secondary"
  onConfirm={() => {
    console.log('Action confirmed!');
  }}
>
  Click me
</ConfirmButton>
```

----------------------------------------

TITLE: Defining RBAC Roles and Permissions in Grafana plugin.json (JSON)
DESCRIPTION: This snippet shows how to define custom RBAC roles and permissions in a Grafana plugin's plugin.json file. It introduces two roles, each with its own name, description, and permissions (actions) that reference plugin-specific capabilities, and then assigns these roles to Grafana's built-in user groups like Admin and Viewer. Dependencies include a valid plugin.json file within a Grafana plugin, and an understanding of Grafana's RBAC schema. Roles are assigned through the \"grants\" property, with permissions specified as an array of action objects. Plugins are currently limited to defining actions without scopes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-3.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{\n  \"roles\": [\n    {\n      \"role\": {\n        \"name\": \"Patents Reader\",\n        \"description\": \"Read patents\",\n        \"permissions\": [\n          {\"action\": \"grafana-appwithrbac-app.patents:read\"}\n        ]\n      },\n      \"grants\": [\"Admin\"]\n    },\n    {\n      \"role\": {\n        \"name\": \"Research papers Reader\",\n        \"description\": \"Read research papers\",\n        \"permissions\": [\n          {\"action\": \"grafana-appwithrbac-app.papers:read\"}\n        ]\n      },\n      \"grants\": [\"Viewer\"]\n    }\n  ]\n}
```

----------------------------------------

TITLE: Registering a Support Bundle Collector with the Bundle Registry in Go Service Initialization
DESCRIPTION: This Go snippet shows how to register a support bundle collector with the registry inside the ProvideService function. The service instance is created and its collector is added to the bundleRegistry using RegisterSupportItemCollector. The required dependency is the supportbundles.Service injected earlier. This pattern ensures that the service's diagnostics collector is automatically available after registration. The function returns the initialized service instance and error state as output.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/support-bundles.md#2025-04-23_snippet_2

LANGUAGE: go
CODE:
```
func ProvideService(
    ...
) (*UsageStats, error) {
	s := &UsageStats{
        // ...
	}

	bundleRegistry.RegisterSupportItemCollector(s.supportBundleCollector())

	return s, nil
}
```

----------------------------------------

TITLE: Schema for 'panes' Query Parameter in Grafana Explore URLs (JSON)
DESCRIPTION: This JSON code block illustrates the structure of the 'panes' query parameter used in Grafana Explore links. Each pane is represented by an object containing datasource and query information, including datasource UID/type, an array of queries (each with a unique refId and datasource info), and a time range (from/to). The keys such as 'from' and 'to' accept both timestamps and relative time expressions. This schema is required for programmatically building valid Explore URLs or integrating external tools.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/explore/get-started-with-explore.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{\n  datasource: string; // the pane's root datasource UID, or `-- Mixed --` for mixed datasources\n  queries: {\n    refId: string; // an alphanumeric identifier for this query, must be unique within the pane, i.e. \"A\", \"B\", \"C\", etc.\n    datasource: {\n      uid: string; // the query's datasource UID ie: \"AD7864H6422\"\n      type: string; // the query's datasource type-id, i.e: \"loki\"\n    }\n    // ... any other datasource-specific query parameters\n  }[]; // array of queries for this pane\n  range: {\n    from: string; // the start time, in milliseconds since epoch\n    to: string; // the end time, in milliseconds since epoch\n  }\n}
```

----------------------------------------

TITLE: Configuring Server Domain with Existing Subpath in Grafana (INI, Bash Syntax)
DESCRIPTION: Adapts the Grafana configuration file for use when an additional subpath already exists in the IIS parent site. This ensures Grafana is accessible from a nested subpath (e.g., /existingsubpath/grafana). The values for domain and root_url must match the actual structure on IIS. Inputs: domain with subpath, root_url. Outputs: Proper resource loading through nested subpaths. Requires restart after modifications. No special dependencies beyond the Grafana INI file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/iis/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
[server]
domain = yourdomain.com/existingsubpath
root_url = %(protocol)s://%(domain)s/grafana/

```

----------------------------------------

TITLE: Configuring Grafana-Managed Recording Rules (INI)
DESCRIPTION: This INI configuration snippet enables Grafana-managed recording rules and configures the connection to a Prometheus-compatible remote-write endpoint. It sets `enabled` to true under the `[recording_rules]` section, specifies the remote write `url`, and optionally includes `basic_auth_username`, `basic_auth_password` for authentication, and custom headers under `[recording_rules.custom_headers]`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/create-recording-rules/create-grafana-managed-recording-rules.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[recording_rules]
enabled = true
url = http://my-example-prometheus.local:9090/api/prom/push
basic_auth_username = my-user
basic_auth_password = my-pass

[recording_rules.custom_headers]
X-My-Header = MyValue
```

----------------------------------------

TITLE: Restarting Grafana Service with systemd (Linux)
DESCRIPTION: Restarts the Grafana server service using systemd. Required for certain configuration changes to take effect.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
sudo systemctl restart grafana-server
```

----------------------------------------

TITLE: Deleting Service Account Tokens in Grafana (HTTP)
DESCRIPTION: This HTTP request deletes a specific service account token identified by the service account ID and token ID. Requires serviceaccounts:write permission.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_12

LANGUAGE: http
CODE:
```
DELETE /api/serviceaccounts/2/tokens/1 HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Basic YWRtaW46YWRtaW4=
```

----------------------------------------

TITLE: Querying Multiple Tank Temperatures with Flux for Multidimensional Alerts
DESCRIPTION: This Flux query retrieves temperature data for five different tanks from the 'HyperEncabulator' bucket. It filters by measurement and type, then uses a logical OR condition to include data from all five tanks before aggregating and yielding the mean values.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_7

LANGUAGE: flux
CODE:
```
from(bucket: "HyperEncabulator")
|> range(start: v.timeRangeStart, stop: v.timeRangeStop)
|> filter(fn: (r) => r["_measurement"] == "TemperatureData")
|> filter(fn: (r) => r["MeasType"] == "actual")
|> filter(fn: (r) => r["Tank"] == "A5" or r["Tank"] == "B4" or r["Tank"] == "C3" or r["Tank"] == "D2" or r["Tank"] == "E1")
|> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
|> yield(name: "mean")
```

----------------------------------------

TITLE: Configuring Redis Cluster for Grafana Live in Kubernetes
DESCRIPTION: Example configuration for connecting Grafana Live to a Redis Cluster in a Kubernetes environment using a headless service.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-live.md#2025-04-23_snippet_5

LANGUAGE: yaml
CODE:
```
live:
   ha_engine: redis
   ha_engine_address: redis-headless.grafana.svc.cluster.local:6379
   ha_engine_password: $__file{/your/redis/password/secret/mount}
```

----------------------------------------

TITLE: Stopping Grafana Container with Docker Compose (Bash)
DESCRIPTION: Command to stop and remove the Grafana container(s), networks, and potentially volumes defined in the `docker-compose.yaml` file located in the current directory.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_14

LANGUAGE: bash
CODE:
```
docker compose down
```

----------------------------------------

TITLE: Removing SAML Settings via Grafana Admin API
DESCRIPTION: JSON payload example for removing a specific SAML setting (allow_idp_initiated) through the Grafana Admin API. The removals parameter specifies settings to unset.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/settings-updates-at-runtime/index.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
  "removals": {
    "auth.saml": ["allow_idp_initiated"]
  }
}
```

----------------------------------------

TITLE: Running Grafana Enterprise 9.4.7 in Docker
DESCRIPTION: An example bash command that runs Grafana Enterprise version 9.4.7 in a Docker container on port 3000 in detached mode.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
docker run -d -p 3000:3000 --name grafana grafana/grafana-enterprise:9.4.7
```

----------------------------------------

TITLE: Provisioning Notification Template Groups - YAML
DESCRIPTION: Demonstrates how to declare notification templates for provisioning in Grafana. Defines an 'apiVersion', lists organization IDs, unique template group names, and Block content (template) to register or update. Inputs include the full template group YAML structure. Outputs make templates available for use in alert message rendering; templates must use unique names across organizations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_23

LANGUAGE: yaml
CODE:
```
# config file version\napiVersion: 1\n\n# List of templates to import or update\ntemplates:\n  # <int> organization ID, default = 1\n  - orgId: 1\n    # <string, required> name of the template group, must be unique\n    name: my_first_template\n    # <string, required> content of the template group\n    template: |\n      {{ define \"my_first_template\" }}\n        Custom notification message\n      {{ end }}\n
```

----------------------------------------

TITLE: Building a Full Grafana Development Docker Image (Bash)
DESCRIPTION: This command uses the project's Makefile to execute the `build-docker-full` target, building a complete Docker image of Grafana intended for development use. The resulting image will be tagged `grafana/grafana:dev`. Requires Docker installed, and potentially increased memory allocation ( > 2 GiB) on Docker Desktop for macOS.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
make build-docker-full
```

----------------------------------------

TITLE: Defining Custom Grafana Webhook Payload Structure in Go Template
DESCRIPTION: This Go template defines the structure for a custom webhook notification payload in Grafana. It gathers various alert details like receiver, status, labels, annotations, and calls a nested template (`webhook.custom.simple_alerts`) to format the alerts array. The final output is formatted as a pretty-printed JSON object using `data.ToJSONPretty`. It relies on Grafana's template functions (`coll.Dict`, `tmpl.Exec`, `data.JSON`, `index`) and the alert context provided during execution.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/example-custom-json-payload.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
{{ define "webhook.custom.payload" -}}
  {{ coll.Dict
  "receiver" .Receiver
  "status" .Status
  "alerts" (tmpl.Exec "webhook.custom.simple_alerts" .Alerts | data.JSON)
  "groupLabels" .GroupLabels
  "commonLabels" .CommonLabels
  "commonAnnotations" .CommonAnnotations
  "externalURL" .ExternalURL
  "version" "1"
  "orgId"  (index .Alerts 0).OrgID
  "truncatedAlerts"  .TruncatedAlerts
  "groupKey" .GroupKey
  "state"  (tmpl.Inline "{{ if eq .Status \"resolved\" }}ok{{ else }}alerting{{ end }}" . )
  "allVariables"  .Vars
  "title" (tmpl.Exec "default.title" . )
  "message" (tmpl.Exec "default.message" . )
  | data.ToJSONPretty " "}}
{{- end }}
```

----------------------------------------

TITLE: Example Permissions for Grafana Viewer Basic Role
DESCRIPTION: This snippet lists several example permissions included in the standard Grafana 'Viewer' basic role. Each line represents a permission defined by an `Action` (e.g., `datasources.id:read`, `annotations:read`) and a `Scope` (e.g., `datasources:*`, `annotations:type:dashboard`), detailing the specific capabilities granted to users with this role.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/_index.md#2025-04-23_snippet_1

LANGUAGE: text
CODE:
```
- `Action: datasources.id:read, Scope: datasources:*`: Enables the viewer to see the ID of a data source.
- `Action: orgs:read`: Enables the viewer to see their organization details
- `Action: annotations:read, Scope: annotations:*`: Enables the viewer to see annotations that other users have added to a dashboard.
- `Action: annotations:create, Scope: annotations:type:dashboard`: Enables the viewer to add annotations to a dashboard.
- `Action: annotations:write, Scope: annotations:type:dashboard`: Enables the viewer to modify annotations of a dashboard.
- `Action: annotations:delete, Scope: annotations:type:dashboard`: Enables the viewer to remove annotations from a dashboard.
```

----------------------------------------

TITLE: Single Correlation Retrieval Response in Grafana HTTP API
DESCRIPTION: HTTP response containing the details of a specific correlation. The response includes all properties including source and target data sources, label, description, and configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_7

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
{
  "description": "Logs to Traces",
  "label": "My Label",
  "sourceUID": "uyBf2637k",
  "targetUID": "PDDA8E780A17E7EF1",
  "uid": "J6gn7d31L",
  "provisioned": false,
  "type": "query",
  "config": {
    "field": "message",
    "target": {},
  }
}
```

----------------------------------------

TITLE: Configuring Nginx WebSocket Proxy for Grafana
DESCRIPTION: Nginx configuration example for properly proxying WebSocket connections to Grafana. Includes necessary header settings and upstream server configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-live.md#2025-04-23_snippet_3

LANGUAGE: nginx
CODE:
```
http {
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    upstream grafana {
        server 127.0.0.1:3000;
    }

    server {
        listen 8000;

        location / {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $http_host;
            proxy_pass http://grafana;
        }
    }
}
```

----------------------------------------

TITLE: Selecting Reusable Rendering Mode - Bash
DESCRIPTION: Sets the rendering mode to 'reusable' via an environment variable, leading to a single browser instance that is reused for rendering with a new incognito page per request. This mode is experimental and may not recover automatically from browser crashes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
RENDERING_MODE=reusable
```

----------------------------------------

TITLE: Configuring Custom ESRI MapServer as Default Baselayer in Grafana (INI)
DESCRIPTION: Example for setting a custom ArcGIS map server as the default base map in Grafana. This configuration requires specifying a custom URL and attribution for the tile server.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/geomap/index.md#2025-04-23_snippet_4

LANGUAGE: ini
CODE:
```
geomap_default_baselayer = `{
  "type": "esri-xyz",
  "config": {
    "server": "custom",
    "url": "[tile server url]",
    "attribution": "[tile server attribution]"
  }
}`
```

----------------------------------------

TITLE: Installing Grafana OSS via APT - Bash
DESCRIPTION: Installs the latest open source (OSS) version of Grafana using the apt package manager. Dependencies: Prior repository configuration. Input: None. Output: Installs grafana OSS. Note: Use for stable or beta based on repository above.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
# Installs the latest OSS release:
sudo apt-get install grafana
```

----------------------------------------

TITLE: Response for Listing Permissions Assigned to a Service Account (HTTP)
DESCRIPTION: Example response for the GET request to list permissions assigned to a service account. It includes the action and scope for each permission.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_28

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8

[
    {
        "action": "ldap.status:read",
        "scope": ""
    },
    {
        "action": "ldap.user:read",
        "scope": ""
    }
]
```

----------------------------------------

TITLE: Configuring Prometheus Remote Write to Grafana Cloud (YAML)
DESCRIPTION: This YAML snippet configures Prometheus to send its scraped metrics to a Grafana Cloud Prometheus instance using the 'remote_write' feature. It requires specifying the remote write endpoint URL, username, and a Grafana.com API Key (as the password) within the 'prometheus.yml' file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_3

LANGUAGE: yaml
CODE:
```
remote_write:
- url: <https://your-remote-write-endpoint>
  basic_auth:
    username: <your user name>
    password: <Your Grafana.com API Key>
```

----------------------------------------

TITLE: SQL query with column aliasing for Grafana table panels
DESCRIPTION: SQL query that demonstrates how to rename columns using AS syntax. This allows customizing the column headers that appear in the Grafana Table panel visualization.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_3

LANGUAGE: sql
CODE:
```
SELECT
  c_bit as [column1], c_tinyint as [column2]
FROM
  [mssql_types]
```

----------------------------------------

TITLE: Delete an Alert Rule by UID - HTTP
DESCRIPTION: This snippet provides the HTTP request line format for deleting a specific alert rule by its unique UID using the provisioning API. The DELETE method targets the /alert-rules/:uid endpoint. Additional optional headers (e.g., X-Disable-Provenance: true) may influence resource editability but are not strictly required.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_10

LANGUAGE: http
CODE:
```
DELETE /api/v1/provisioning/alert-rules/:uid
```

----------------------------------------

TITLE: Selecting Clustered Rendering Mode - Bash
DESCRIPTION: Configures the image renderer to use clustered mode, controlling parallelization and concurrency levels. Multiple related environment variables specify the clustering strategy, maximum concurrency, and request timeout. This allows tuning browser or incognito page usage to optimize memory and CPU.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
RENDERING_MODE=clustered
RENDERING_CLUSTERING_MODE=browser
RENDERING_CLUSTERING_MAX_CONCURRENCY=5
RENDERING_CLUSTERING_TIMEOUT=30
```

----------------------------------------

TITLE: Analyzing CPU Profile (Go)
DESCRIPTION: Command to analyze a collected CPU profile using the Go pprof tool.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
go tool pprof -http=localhost:8081 profile.pprof
```

----------------------------------------

TITLE: Querying Grafana API with HTTP Basic Authorization
DESCRIPTION: This example shows how to use cURL to make an API call to Grafana's access control endpoint using HTTP basic authorization. It demonstrates how to pass a username and password for authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/curl-examples.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
curl --location '<grafana_url>/api/access-control/builtin-roles' --user 'user:password'
```

----------------------------------------

TITLE: Compatible Rule API Endpoints for Import/Export - HTTP
DESCRIPTION: Demonstrates the set of RESTful HTTP endpoints compatible with Grafana Mimirtool or Coretextool for working with alert rule groups. Includes methods for fetching, creating, updating, and deleting rule groups by namespace or group. Use GET to retrieve rule groups, POST to add or update, and DELETE to remove rules in the specified namespace/group. Make sure to provide required authentication headers and (for POST) datasource-related headers as noted.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/alerting-migration/migration-api.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
GET /convert/prometheus/config/v1/rules - Get all rule groups across all namespaces\nGET /convert/prometheus/config/v1/rules/<NamespaceTitle> - Get rule groups in a specific namespace\nGET /convert/prometheus/config/v1/rules/<NamespaceTitle>/<Group> - Get a single rule group\n
```

LANGUAGE: http
CODE:
```
POST /convert/prometheus/config/v1/rules - Create/update multiple rule groups across multiple namespaces\nPOST /convert/prometheus/config/v1/rules/<NamespaceTitle> - Create/update a single rule group in a namespace\n
```

LANGUAGE: http
CODE:
```
DELETE /convert/prometheus/config/v1/rules/{NamespaceTitle} - Delete all alert rules in a namespace\nDELETE /convert/prometheus/config/v1/rules/{NamespaceTitle}/{Group} - Delete a specific rule group\n
```

----------------------------------------

TITLE: Installing Grafana Helm Chart to a Namespace - Helm CLI - Bash
DESCRIPTION: This command deploys the Grafana Helm chart to the `monitoring` Kubernetes namespace. It requires the Helm repository to be added and the namespace to exist. Key parameters include the chart release name, the repository/package, and the namespace.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
helm install my-grafana grafana/grafana --namespace monitoring
```

----------------------------------------

TITLE: Retrieving a Grafana Data Source by ID via HTTP API (Deprecated)
DESCRIPTION: Details the `GET /api/datasources/:datasourceId` endpoint for fetching a specific data source using its numeric ID. This API is deprecated since Grafana v9.0.0 and will be removed; use UID or name lookups instead. Requires `datasources:read` permission with scopes like `datasources:*`, `datasources:id:*`, or `datasources:id:<ID>`. The request includes the data source ID in the path and standard headers. The response is a JSON object containing the details of the specified data source.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
GET /api/datasources/1 HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "id": 1,
  "uid": "kLtEtcRGk",
  "orgId": 1,
  "name": "test_datasource",
  "type": "graphite",
  "typeLogoUrl": "",
  "access": "proxy",
  "url": "http://mydatasource.com",
  "password": "",
  "user": "",
  "database": "",
  "basicAuth": false,
  "basicAuthUser": "",
  "basicAuthPassword": "",
  "withCredentials": false,
  "isDefault": false,
  "jsonData": {
    "graphiteType": "default",
    "graphiteVersion": "1.1"
  },
  "secureJsonFields": {},
  "version": 1,
  "readOnly": false
}
```

----------------------------------------

TITLE: Example Keycloak Role Names (Plaintext)
DESCRIPTION: Lists the example role names (`admin`, `editor`, `viewer`) that need to be created and assigned to users in Keycloak. These roles correspond to the example `role_attribute_path` configuration in Grafana, allowing Keycloak roles to be mapped to Grafana organization roles.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_3

LANGUAGE: plaintext
CODE:
```
admin
editor
viewer
```

----------------------------------------

TITLE: Backing up and Restoring MySQL Database for Grafana
DESCRIPTION: Commands for backing up and restoring a MySQL database used by Grafana. The backup command creates a SQL dump file, while the restore command imports the backup into the database.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/back-up/back-up-grafana.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
backup:
> mysqldump -u root -p[root_password] [grafana] > grafana_backup.sql

restore:
> mysql -u root -p grafana < grafana_backup.sql
```

----------------------------------------

TITLE: Setting Maximum Viewport Width - JSON
DESCRIPTION: Defines the maximum permitted rendering viewport width via rendering.maxWidth. Input is an integer (pixels) that constrains request parameters to prevent out-of-bounds resource usage.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_44

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "maxWidth": 1000
  }
}
```

----------------------------------------

TITLE: Including Multiple Query Labels in Annotation
DESCRIPTION: This Go template example shows how to incorporate multiple labels (e.g., `environment`, `region`) returned by the alert query into an annotation using the `$labels` variable. This adds detailed contextual information about where the alert originated.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_5

LANGUAGE: gotemplate
CODE:
```
Alert triggered in {{ $labels.environment }} on {{ $labels.region }} region.
```

----------------------------------------

TITLE: Registering Inputs with react-hook-form in Form Component (JavaScript/JSX)
DESCRIPTION: Shows how to register a basic input field inside the Form component using react-hook-form's register function in JSX. Demonstrates essential spread operator usage for the returned input props. Requires the Form and Input components and supports specifying field names and validation directly within the registration.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<Input {...register('inputName')} />
```

----------------------------------------

TITLE: Defining an Alert Iteration Template - Go Templating - Go
DESCRIPTION: This code snippet defines a custom Go template that iterates over the list of alerts in a notification, printing out key properties for each alert, including fields specific to Grafana-managed alerts. Dependencies are an available array of alert objects in the dot (.) context, and the expanded fields expected in Grafana's alerting data structure. The template outputs alert details such as status, labels, annotations, timing, and associated dashboard/panel links if available.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_2

LANGUAGE: go
CODE:
```
```go
{{ define "custom_template" }}
{{ range .Alerts }}
  {{ .Status }}
  {{ .Labels }}
  {{ .Annotations }}
  {{ .StartsAt }}
  {{ .EndsAt }}
  {{ .GeneratorURL }}
  {{ .Fingerprint }}

  {{/* Only available for Grafana-managed alerts */}}
  {{ .DashboardURL }}
  {{ .PanelURL }}
  {{ .SilenceURL }}
  {{ .Values }}
  {{ .ValueString }}
{{ end }}
{{ end }}
```
```

----------------------------------------

TITLE: Building Grafana Docker Image with Pre-installed Image Renderer Plugin
DESCRIPTION: A series of bash commands to build a custom Grafana Docker image with the Image Renderer plugin pre-installed using the GF_INSTALL_IMAGE_RENDERER_PLUGIN build argument.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
# go to the folder
cd packaging/docker/custom

# running the build command
docker build \
  --build-arg "GRAFANA_VERSION=latest" \
  --build-arg "GF_INSTALL_IMAGE_RENDERER_PLUGIN=true" \
  -t grafana-custom .

# running the docker run command
docker run -d -p 3000:3000 --name=grafana grafana-custom
```

----------------------------------------

TITLE: Updating User Permissions via Grafana Admin HTTP API - HTTP
DESCRIPTION: This snippet demonstrates an HTTP PUT request for modifying a user's admin permissions, submitting a JSON payload to the appropriate endpoint. The operation requires Basic Authentication and the correct admin permissions. Returns a JSON object confirming the update.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_11

LANGUAGE: http
CODE:
```
PUT /api/admin/users/2/permissions HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{"isGrafanaAdmin": true}
```

LANGUAGE: json
CODE:
```
{"message": "User permissions updated"}
```

----------------------------------------

TITLE: Running Grafana Docker with Custom Log Mode (Bash)
DESCRIPTION: Runs the `grafana/grafana-enterprise` Docker image, configuring it to log to both standard output (`console`) and a file (`file`) within the container. This is achieved by setting the `GF_LOG_MODE` environment variable using the `-e` flag.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
# Run Grafana while logging to both standard out
# and /var/log/grafana/grafana.log

docker run -p 3000:3000 -e "GF_LOG_MODE=console file" grafana/grafana-enterprise
```

----------------------------------------

TITLE: Bulk Updating Team Members - HTTP
DESCRIPTION: Executes a PUT request to update all members and admins of a team in one operation. Accepts a list of member and admin emails in the JSON body, replacing previous membership. Used for mass updates by authorized clients.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_16

LANGUAGE: http
CODE:
```
PUT /api/teams/1/members HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt\n\n{\n  \"members\": [\"user1@email.com\", \"user2@email.com\"]\n  \"admins\": [\"user3@email.com\"]\n}
```

----------------------------------------

TITLE: Updating APT Cache and Installing Grafana (Bash)
DESCRIPTION: First, updates the local package index using `apt-get update` to include packages from the newly added Grafana repository. Then, installs the `grafana` package using `apt-get install -y grafana`. The `-y` flag automatically confirms the installation prompts. Requires `sudo` privileges and `apt-get`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/install-grafana-on-raspberry-pi/index.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
sudo apt-get update
sudo apt-get install -y grafana
```

----------------------------------------

TITLE: Single Bind DN Configuration Example (ldap.toml)
DESCRIPTION: Illustrates an alternative LDAP binding method in `ldap.toml` that avoids storing a service account password. By using `%s` as a placeholder for the username within the `bind_dn` pattern, Grafana attempts to bind directly as the logging-in user. The `bind_password` setting is omitted in this configuration, but `search_filter` and `search_base_dns` are still required for attribute retrieval.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
```bash
bind_dn = "cn=%s,o=users,dc=grafana,dc=org"
```
```

----------------------------------------

TITLE: Configuring Azure Key Vault Provider for Encryption in grafana.ini (INI)
DESCRIPTION: This snippet shows how to define an Azure Key Vault provider section within the Grafana configuration file (grafana.ini) to specify credentials and key information for encryption. It requires valid Azure Directory ID, Application ID, Client Secret, Key Name, and Vault URI values. This section enables Grafana to interact with Azure Key Vault for envelope encryption of database secrets.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-azure-key-vault/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
# Azure Key Vault provider setup
;[security.encryption.azurekv.example-encryption-key]
# Azure Application directory ID (tenant)
tenant_id = 1234abcd-12ab-34cd-56ef-1234567890ab
# Azure Application application ID (client).
client_id = 1356dfgh-12ab-34cd-56ef-3322114455cc
# Azure Application client secret.
client_secret = FbE4X~4Jq45ERKxx823Aheb9plBjQqHHe81Sc
# Azure Key Vault key name.
key_id = mysecretkey
# Azure Key Vault uri.
vault_uri = https://my-vault-name.vault.azure.net
```

----------------------------------------

TITLE: Configuring Collaborative Grafana Teams via INI
DESCRIPTION: This INI configuration snippet, intended for the Grafana configuration file, sets up Grafana for collaborative teams. It sets the default organization role (`auto_assign_org_role`) to `Viewer`, allowing users to view resources by default. Similar to the isolated team configuration, `role_attribute_path` uses a JMESPath expression to conditionally assign the 'Admin' role based on group membership, defaulting to 'None' otherwise (though the default Viewer role provides base visibility). This configuration is presented as an example within comments.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/team-management/configure-grafana-teams.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
```ini
auto_assign_org_role = Viewer
role_attribute_path = contains(groups[*], 'admin') && 'Admin' || 'None'
```
```

----------------------------------------

TITLE: Using the abs Function in Grafana Expressions
DESCRIPTION: Demonstrates the usage of the `abs` function, which returns the absolute value of its argument. It accepts either a number or a time series, returning the same type.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_5

LANGUAGE: Grafana Expressions
CODE:
```
abs(-1)
```

LANGUAGE: Grafana Expressions
CODE:
```
abs($A)
```

----------------------------------------

TITLE: Example JSON Payload for Simple Role Mapping
DESCRIPTION: Sample JSON payload received from an OAuth2 provider containing a simple 'role' field. This field's value ('Editor') is intended to be directly mapped to a Grafana user role.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
    ...
    "role": "Editor",
    ...
}
```

----------------------------------------

TITLE: Configuring Grafana to Serve From Sub Path - Bash
DESCRIPTION: Defines Grafana's own configuration for serving under a sub path, set within grafana.ini's [server] section. The 'root_url' must specify the external URL including the sub path, and 'serve_from_sub_path' set to true enables correct internal link rendering. Use this if your reverse proxy does not handle sub path rewrites. Requires Grafana restart for config changes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
[server]\ndomain = example.com\nroot_url = %(protocol)s://%(domain)s:%(http_port)s/grafana/\nserve_from_sub_path = true
```

----------------------------------------

TITLE: Implementing Toggletip Component in React TSX
DESCRIPTION: This example demonstrates how to use the Toggletip component in a React application. It includes setting up the onClose function, configuring Toggletip properties, and wrapping it around an IconButton.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Toggletip/Toggletip.mdx#2025-04-23_snippet_1

LANGUAGE: TSX
CODE:
```
function onClose() {
  // code to execute when the toggletip is closed
}

return (
  <Toggletip
    content="Toggletip body"
    title="This is the title of the Toggletip"
    footer="Toggletip footer text"
    closeButton={true}
    onClose={onClose}
  >
    <IconButton name="question-circle" tooltip="IconButton containing a Toggletip" />
  </Toggletip>
);
```

----------------------------------------

TITLE: Assigning Grafana Server Administrator Role Based on Email (INI)
DESCRIPTION: This INI configuration assigns the 'GrafanaAdmin' server role (and the 'Admin' organization role) to the user with email 'admin@company.com', while other users get the 'Viewer' role. It requires enabling `allow_assign_grafana_admin = true` and setting `skip_org_role_sync = false`. The `role_attribute_path` uses a JMESPath expression to perform the conditional role assignment.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/google/index.md#2025-04-23_snippet_6

LANGUAGE: ini
CODE:
```
```ini
allow_assign_grafana_admin = true
skip_org_role_sync = false
role_attribute_path = email=='admin@company.com' && 'GrafanaAdmin' || 'Viewer'
```
```

----------------------------------------

TITLE: Creating Correlations Between Data Sources in Grafana HTTP API
DESCRIPTION: HTTP request and response for creating a correlation between two data sources. The sourceUID is specified in the path, while the targetUID, label, description, type and configuration are provided in the request body.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
POST /api/datasources/uid/uyBf2637k/correlations HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
{
	"targetUID": "PDDA8E780A17E7EF1",
	"label": "My Label",
	"description": "Logs to Traces",
  "type": "query",
  "config": {
    "field": "message",
    "target": {},
  }
}
```

----------------------------------------

TITLE: Enabling Auto Login for Grafana Cloud Authentication
DESCRIPTION: Configuration setting to enable automatic login with Grafana Cloud credentials, bypassing the login screen when possible.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/grafana-cloud/index.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
auto_login = true
```

----------------------------------------

TITLE: Generating Prop Controls with Storybook ArgTypes for RangeSlider (MDX)
DESCRIPTION: This MDX/JSX snippet uses the `ArgTypes` component from Storybook, passing the imported `RangeSliderProps` type to the `of` prop. This automatically generates an interactive documentation table displaying the properties (props) of the `RangeSlider` component, inferring details from the provided TypeScript type.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Slider/RangeSlider.mdx#2025-04-23_snippet_2

LANGUAGE: mdx
CODE:
```
<ArgTypes of={RangeSliderProps} />
```

----------------------------------------

TITLE: Defining Grafana Notification Policy Tree using Terraform
DESCRIPTION: Configures the Grafana notification policy tree using the `grafana_notification_policy` resource. It sets a default contact point (referenced by `grafana_contact_point.<terraform_contact_point_name>.name`) and defines nested policies. The example shows a nested policy that also uses the same contact point, includes a matcher block (`...`), and applies the 'No weekends' mute timing (referenced by `grafana_mute_timing.<terraform_mute_timing_name>.name`). Requires replacing placeholder names for the contact point and mute timing resources and defining the matcher logic.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_7

LANGUAGE: terraform
CODE:
```
resource "grafana_notification_policy" "my_policy_tree" {
contact_point = grafana_contact_point.<terraform_contact_point_name>.name
...

policy {
    contact_point = grafana_contact_point.<terraform_contact_point_name>.name

    matcher {...}

    mute_timings = [grafana_mute_timing.<terraform_mute_timing_name>.name]
}
}
```

----------------------------------------

TITLE: Applying Reduced Motion Handling to Transition Properties (Styled Components, TypeScript)
DESCRIPTION: These examples illustrate how to apply transitions to style objects using either direct application or wrapping in 'prefers-reduced-motion'. The incorrect usage shows a plain transition, while the correct usage demonstrates the use of theme.transitions.handleMotion and media queries to consistently apply transitions for users regardless of motion preferences. Dependencies: GrafanaTheme2, css, transition creation helpers. All methods expect a theme input and return a style block for a 'card' class. Usage of theme tokens for durations is required.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-eslint-rules/README.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
// Bad ❌
const getStyles = (theme: GrafanaTheme2) => ({
  card: css({
    transition: theme.transitions.create(['background-color'], {
      duration: theme.transitions.duration.short,
    }),
  }),
});
```

LANGUAGE: typescript
CODE:
```
// Good ✅
const getStyles = (theme: GrafanaTheme2) => ({
  card: css({
    [theme.transitions.handleMotion('no-preference', 'reduce')]: {
      transition: theme.transitions.create(['background-color'], {
        duration: theme.transitions.duration.short,
      }),
    },
  }),
});
```

LANGUAGE: typescript
CODE:
```
// Good ✅
const getStyles = (theme: GrafanaTheme2) => ({
  card: css({
    '@media (prefers-reduced-motion: no-preference), @media (prefers-reduced-motion: reduce)': {
      transition: theme.transitions.create(['background-color'], {
        duration: theme.transitions.duration.short,
      }),
    },
  }),
});
```

----------------------------------------

TITLE: Updating Helm Repositories - Helm CLI - Bash
DESCRIPTION: This command forces Helm to update its local index of chart repositories, ensuring access to the latest versions. It requires that repositories have already been added via `helm repo add`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
helm repo update
```

----------------------------------------

TITLE: Generating Grafana Organization Invitation Email Body (Go Template)
DESCRIPTION: This Go template defines the structure and content of an email sent to a user upon being added to a Grafana organization. It utilizes placeholders such as `{{.InvitedBy}}`, `{{.OrgName}}`, `{{.AppUrl}}`, and `{{.BuildVersion}}` which are dynamically populated at runtime. The template also includes a hidden subject line (`{{HiddenSubject}}`) and dynamically generates the current year using the `now | date "2006"` function.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/invited_to_org.txt#2025-04-23_snippet_0

LANGUAGE: go-template
CODE:
```
{{HiddenSubject .Subject "{{.InvitedBy}} has added you to the {{.OrgName}} organization"}}

You have been added to {{.OrgName}}

{{.InvitedBy}} has added you to the {{.OrgName}} organization in Grafana.
Once logged in, {{.OrgName}} will be available in the left side menu, in the dropdown below your username.

Log in now:
{{.AppUrl}}


Sent by Grafana v{{.BuildVersion}} (c) {{now | date "2006"}} Grafana Labs
```

----------------------------------------

TITLE: Organizing Standalone App Pages - Grafana INI
DESCRIPTION: This configuration section allows assigning individual app plugin pages to navigation sections by referencing their 'path' field. Under this header, configuration lines follow the format '<pageUrl> = <sectionId> <sortWeight>', enabling granular organization of standalone pages. It is meant for custom navigation structure in the Grafana UI, with parameters required per standalone page.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_33

LANGUAGE: ini
CODE:
```
[navigation.app_standalone_pages]
```

----------------------------------------

TITLE: Checking for Specific Infinity Values
DESCRIPTION: Provides an example of how to explicitly check for negative infinity using a comparison operator, as `is_inf` checks for both positive and negative infinity.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_7

LANGUAGE: Grafana Expressions
CODE:
```
$A == infn()
```

----------------------------------------

TITLE: Filtering Alert Instances by Label Query in Grafana
DESCRIPTION: This example demonstrates filtering alert instances in the Grafana Alert List panel using label query syntax. The query `{severity="critical", instance=~"cluster-us-.+"}` selects alert instances where the 'severity' label is exactly 'critical' and the 'instance' label matches the regular expression 'cluster-us-.+'. This feature allows for precise filtering of alerts based on their associated labels.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/alert-list/index.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
{severity="critical", instance=~"cluster-us-.+"}
```

----------------------------------------

TITLE: Uninstalling Grafana Enterprise via APT - Shell
DESCRIPTION: Removes the grafana-enterprise package from the local system using apt. Input: None. Output: Grafana Enterprise uninstalled, configuration and user data may need separate cleanup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_16

LANGUAGE: shell
CODE:
```
sudo apt-get remove grafana-enterprise
```

----------------------------------------

TITLE: Displaying Token Permissions Response Structure - JSON
DESCRIPTION: This JSON snippet shows an example response obtained from the Grafana API, detailing the structured permissions attached to a service account token. Each key represents a permission (e.g., "dashboards:read") mapped to an array of resource identifiers the token can operate on. No direct dependencies; this is for reference as a typical API output. Inputs: N/A. Outputs: Permission-resource mapping. Limitation: Sample only, may omit some permissions in actual responses.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/_index.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
  "dashboards:read": ["dashboards:uid:70KrY6IVz"],
  "dashboards:write": ["dashboards:uid:70KrY6IVz"],
  "datasources.id:read": ["datasources:*"],
  "datasources:read": ["datasources:*"],
  "datasources:explore": [""],
  "datasources:query": ["datasources:uid:grafana"],
  "datasources:read": ["datasources:uid:grafana"],
  "orgs:read": [""]
}
```

----------------------------------------

TITLE: Provisioning Azure Monitor with Workload Identity in YAML
DESCRIPTION: YAML configuration for provisioning Azure Monitor data source using Azure Workload Identity authentication. This method is used when running Grafana in Kubernetes environments such as AKS.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_2

LANGUAGE: yaml
CODE:
```
apiVersion: 1 # config file version

datasources:
  - name: Azure Monitor
    type: grafana-azure-monitor-datasource
    access: proxy
    jsonData:
      azureAuthType: workloadidentity
      subscriptionId: <subscription-id> # Optional, default subscription
    version: 1
```

----------------------------------------

TITLE: Overriding Grafana Homepath for Admin Command (Bash)
DESCRIPTION: Demonstrates using the '--homepath' global option to specify the Grafana installation directory when running an admin command, such as resetting the admin password. This is useful if the CLI is not run from the installation directory.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
grafana cli --homepath \"/usr/share/grafana\" admin reset-admin-password <new password>
```

----------------------------------------

TITLE: Mounting Additional ConfigMap in values.yaml for CA Certificates - YAML
DESCRIPTION: This YAML snippet shows how to specify additional ConfigMap mounts in Grafana Helm's values.yaml for inserting CA certificates into container file systems. It lists the ConfigMap name, mount path, and read-only status in the extraConfigmapMounts section. Correct structure and indentation are crucial. Prerequisites: the referenced ConfigMap ('grafana-ca-cert') must exist.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_18

LANGUAGE: yaml
CODE:
```
.......
............
......
extraConfigmapMounts:
   - name: ca-certs-configmap
     mountPath: /etc/ssl/certs/ca.pem
     subPath: ca.pem
     configMap: grafana-ca-cert
     readOnly: true
.......
............
......
```

----------------------------------------

TITLE: Filtering Hostnames by Region with Multi-Value Template Variable - SQL
DESCRIPTION: Returns hostnames from 'my_host' filtered by selected region(s), supporting variables where 'region' can resolve to single or multiple values. Utilizes SQL 'IN' clause for compatibility with Grafana's multi-value variable feature.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_7

LANGUAGE: sql
CODE:
```
SELECT hostname FROM my_host  WHERE region IN($region)
```

----------------------------------------

TITLE: Adding Grafana APT GPG Key (Bash)
DESCRIPTION: Downloads the Grafana GPG public key using `wget`, de-armors it using `gpg`, and saves it to `/etc/apt/keyrings/grafana.gpg`. This key is required by `apt` to verify the authenticity of packages downloaded from the Grafana repository. Requires `wget`, `gpg`, and `sudo` privileges.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/install-grafana-on-raspberry-pi/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
sudo mkdir -p /etc/apt/keyrings/
wget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/grafana.gpg > /dev/null
```

----------------------------------------

TITLE: Enabling SMTP Server in Grafana (INI)
DESCRIPTION: This configuration snippet enables the SMTP server within Grafana, which is a prerequisite for sending emails, including those required for passwordless authentication (magic links/OTP). Setting `enabled = true` under the `[smtp]` section activates the SMTP functionality. Further SMTP settings are required for actual email delivery.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/passwordless/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
[smtp]
enabled = true
```

----------------------------------------

TITLE: Using TimeRangeInput React Component with Grafana UI in JSX
DESCRIPTION: This sample shows how to import and use the TimeRangeInput component from the @grafana/ui package within a React form. The component is configured with a value prop for the current time range, an onChange handler for range updates, and an onChangeTimeZone handler for timezone changes. Inputs include the current time range object, and event handlers that receive updated range or timezone values; outputs are user interface interactions and event logging. Requires @grafana/ui and React as dependencies.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/DateTimePickers/TimeRangeInput.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
import { TimeRangeInput } from '@grafana/ui';\n\n<TimeRangeInput\n  value={timeRange}\n  onChange={(range) => console.log('range', range)}\n  onChangeTimeZone={(tz) => console.log('timezone', tz)}\n/>;
```

----------------------------------------

TITLE: Configuring HTTPS in Grafana - INI
DESCRIPTION: This ini snippet demonstrates the required configuration options in 'grafana.ini' to enable HTTPS. Key parameters include certificate and key file paths, root URL, domain, and protocol. Users must replace values with their actual domain and certificate locations. Proper permissions on the certificate files and a running Grafana server are prerequisites.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_10

LANGUAGE: ini
CODE:
```
[server]
http_addr =
http_port = 3000
domain = mysite.com
root_url = https://subdomain.mysite.com:3000
cert_key = /etc/grafana/grafana.key
cert_file = /etc/grafana/grafana.crt
enforce_domain = False
protocol = https
```

----------------------------------------

TITLE: Enabling Basic Authentication for Grafana Metrics Endpoint in TOML
DESCRIPTION: Secures the Grafana metrics endpoint by enabling basic authentication within the `[metrics]` section of `grafana.ini`. Setting `basic_auth_username` and `basic_auth_password` requires users to provide these credentials to access metrics data, preventing potential information leakage. By default, metrics are accessible without authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-security-hardening/index.md#2025-04-23_snippet_5

LANGUAGE: toml
CODE:
```
[metrics]
# If both are set, basic auth will be required for the metrics endpoints
basic_auth_username =
basic_auth_password =
```

----------------------------------------

TITLE: Restarting Grafana Deployment on Kubernetes using Kubectl
DESCRIPTION: Performs a rolling restart of the Grafana deployment named 'my-release' on the Kubernetes cluster. This command is necessary to apply configuration changes, such as database settings or license validation type, and activate the Grafana Enterprise features. Requires `kubectl` access to the EKS cluster.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-eks/index.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
kubectl rollout restart deployment my-release
```

----------------------------------------

TITLE: Defining Organization Role Mapping from Okta Groups - INI Configuration - ini
DESCRIPTION: This snippet shows INI configuration directives for mapping Okta group membership to Grafana organizations and roles using the org_attribute_path and org_mapping settings. The example maps Group 1 to Viewer in org_foo, Group 2 to Editor in org_bar, and a wildcard entry assigns Editor to org_baz (OrgID=3). Required prerequisites include Okta groups, Grafana organizations, and appropriate user info returned by the Okta OIDC provider. Place these lines in your configuration file to enable org-level access mapping based on Okta groups.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/okta/index.md#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
org_attribute_path = groups
org_mapping = ["Group 1:org_foo:Viewer", "Group 2:org_bar:Editor", "*:3:Editor"]
```

----------------------------------------

TITLE: Adding Grafana APT Repository Source (Bash)
DESCRIPTION: Creates a new source list file `/etc/apt/sources.list.d/grafana.list` and adds the Grafana stable repository definition. It specifies that packages from this repository should be signed by the previously added GPG key (`/etc/apt/keyrings/grafana.gpg`). Requires `sudo` privileges.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/install-grafana-on-raspberry-pi/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main" | sudo tee /etc/apt/sources.list.d/grafana.list
```

----------------------------------------

TITLE: Setting Grafana to Bind to Port 80 Using setcap
DESCRIPTION: Command to give the Grafana binary permission to bind to privileged ports (below 1024) using Linux capabilities, allowing it to bind directly to port 80 without running as root.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
sudo setcap 'cap_net_bind_service=+ep' /usr/sbin/grafana-server
```

----------------------------------------

TITLE: Defining GET Endpoint for Exporting All Alert Rules - HTTP
DESCRIPTION: Defines an HTTP GET endpoint for exporting all alert rules in a provisioning file format (e.g., yaml, json, hcl) in Grafana. Optional query parameters enable format selection and file download behavior. The endpoint responds with 200 OK and an AlertingFileExport object upon success, or 404 Not Found for missing data.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_19

LANGUAGE: http
CODE:
```
GET /api/v1/provisioning/alert-rules/export
```

----------------------------------------

TITLE: Configuring PagerDuty Contact Point - YAML
DESCRIPTION: Defines PagerDuty as a notification backend for Grafana. Requires the 32-character Events API key ('integrationKey') and optionals like severity, class, component, group, and summary. Parameters tune the alert routing and formatting for PagerDuty. Outputs incidents in the PagerDuty system linked to the configured integration key.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_14

LANGUAGE: yaml
CODE:
```
type: pagerduty\nsettings:\n  # <string, required> the 32-character Events API key https://support.pagerduty.com/docs/api-access-keys#events-api-keys\n  integrationKey: XXX\n  # <string> options: critical, error, warning, info\n  severity: critical\n  # <string>\n  class: ping failure\n  # <string>\n  component: Grafana\n  # <string>\n  group: app-stack\n  # <string>\n  summary: |\n    {{ template \"default.message\" . }}\n
```

----------------------------------------

TITLE: Passing Multiple Arguments via args in Go Templates - Go Template
DESCRIPTION: Demonstrates the use of {{ args }} to create a map from multiple arguments in Go templates, with usage of define/template blocks. Used for passing several values to a template, especially where only one argument is allowed. Inputs are a variadic list, output is a map accessible as .arg0, .arg1, etc. Requires understanding of advanced Go template features.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_13

LANGUAGE: Go Template
CODE:
```
{{define "x"}}{{.arg0}} {{.arg1}}{{end}}{{template "x" (args 1 "2")}}

```

----------------------------------------

TITLE: Setting Page Zoom Level - Bash
DESCRIPTION: Sets RENDERING_VIEWPORT_PAGE_ZOOM_LEVEL to control the browser zoom level in renders. The value is a float (e.g., 1.5 for 150%) and affects the scaling of the rendered image. Default is 1 (100% zoom).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_51

LANGUAGE: bash
CODE:
```
RENDERING_VIEWPORT_PAGE_ZOOM_LEVEL=1
```

----------------------------------------

TITLE: Querying InfluxDB Buckets with Flux in Grafana
DESCRIPTION: This basic Flux query `buckets()` is executed within the Grafana query editor against an InfluxDB data source configured to use Flux. Its purpose is to retrieve and display a list of all available buckets in the connected InfluxDB instance, often used as an initial test to verify the data source connection and setup, typically visualized using a Table panel.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-influxdb.md#2025-04-23_snippet_0

LANGUAGE: flux
CODE:
```
buckets()
```

----------------------------------------

TITLE: Configuring File Exporter for Grafana Audit Logs
DESCRIPTION: This snippet shows the configuration options for the file exporter, which saves audit logs to files. It includes settings for the log file path, maximum number of files to keep, and maximum file size.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/audit-grafana.md#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
[auditing.logs.file]
# Path to logs folder
path = data/log
# Maximum log files to keep
max_files = 5
# Max size in megabytes per log file
max_file_size_mb = 256
```

----------------------------------------

TITLE: Creating a Library Element Response Example (HTTP/JSON)
DESCRIPTION: Example HTTP 200 OK response after successfully creating a library element via a POST request. The JSON body contains the complete details of the newly created element, including its server-assigned ID, version, and full metadata, within the `result` field.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_9

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
    "result": {
        "id": 28,
        "orgId": 1,
        "folderId": 0,
        "folderUid": "",
        "uid": "nErXDvCkzz",
        "name": "Example library panel",
        "kind": 1,
        "type": "",
        "description": "",
        "model": {...},
        "version": 1,
        "meta": {
            "folderName": "General",
            "folderUid": "",
            "connectedDashboards": 0,
            "created": "2021-09-30T09:14:22.378307+02:00",
            "updated": "2021-09-30T09:14:22.378307+02:00",
            "createdBy": {
                "id": 1,
                "name": "admin",
                "avatarUrl": "/avatar/46d229b033af06a191ff2267bca9ae56"
            },
            "updatedBy": {
                "id": 1,
                "name": "admin",
                "avatarUrl": "/avatar/46d229b033af06a191ff2267bca9ae56"
            }
        }
    }
}
```

----------------------------------------

TITLE: Configuring MS SQL Server Kerberos Authentication with Credential Cache File (JSON)
DESCRIPTION: This JSON snippet provides an example configuration format for the MS SQL Server data source in Grafana when using the 'Credential cache file' method for Windows Active Directory (Kerberos) authentication. It defines an array of objects, each specifying connection details (user, database, address) and the path to the corresponding Kerberos credential cache file (`credentialCache`). Grafana uses this information to match the appropriate credentials based on the connection parameters.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-ms-sql-server.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
[
  {
    "user": "grot@GF.LAB",
    "database": "dbone",
    "address": "mysql1.mydomain.com:3306",
    "credentialCache": "/tmp/krb5cc_1000"
  },
  {
    "user": "grot@GF.LAB",
    "database": "dbtwo",
    "address": "mysql2.gf.lab",
    "credentialCache": "/tmp/krb5cc_1000"
  }
]
```

----------------------------------------

TITLE: Using ldd to Identify Missing Libraries (Bash)
DESCRIPTION: Demonstrates how to use the `ldd` command on Linux to list the shared library dependencies of the Chromium executable used by the Grafana image renderer. This command helps identify which specific libraries are missing ('not found') on the system, guiding the installation process.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
cd <grafana-image-render plugin directory>
ldd chrome-headless-shell/linux-132.0.6781.0/chrome-headless-shell-linux64/chrome-headless-shell
      linux-vdso.so.1 (0x00007fff1bf65000)
      libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f2047945000)
      libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f2047924000)
      librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f204791a000)
      libX11.so.6 => not found
      libX11-xcb.so.1 => not found
      libxcb.so.1 => not found
      libXcomposite.so.1 => not found
        ...
```

----------------------------------------

TITLE: Creating Kubernetes Namespace using Bash
DESCRIPTION: Creates a new Kubernetes namespace named 'my-grafana' using the `kubectl` command-line tool. This isolates the Grafana deployment from other applications within the cluster, aiding in organization and resource management. Requires `kubectl` to be installed and configured to communicate with a Kubernetes cluster.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
kubectl create namespace my-grafana
```

----------------------------------------

TITLE: Creating a Kubernetes Namespace - kubectl - Bash
DESCRIPTION: This snippet creates a new namespace in the Kubernetes cluster using `kubectl`. The namespace is used for isolating the Grafana deployment from other workloads. Requires `kubectl` configured with access to the target cluster.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
kubectl create namespace monitoring
```

LANGUAGE: bash
CODE:
```
namespace/monitoring created
```

----------------------------------------

TITLE: Configuring Timepicker in Grafana Dashboard JSON
DESCRIPTION: This JSON object details the configuration options for the dashboard's timepicker component, nested within the main dashboard JSON. It includes settings like visibility ('collapse', 'hidden'), state ('enable', 'now'), custom quick time ranges ('quick_ranges'), available refresh intervals ('refresh_intervals'), and the ability to offset 'now' using 'nowDelay'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/view-dashboard-json-model/index.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
"timepicker": {
    "collapse": false,
    "enable": true,
    "notice": false,
    "now": true,
    "hidden": false,
    "nowDelay": "",
    "quick_ranges": [
      {
        "display": "Last 6 hours",
        "from": "now-6h",
        "to": "now"
      },
      {
        "display": "Last 7 days",
        "from": "now-7d",
        "to": "now"
      }
    ],
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ],
    "status": "Stable",
    "type": "timepicker"
  }
```

----------------------------------------

TITLE: Example Annotation Output with Multiple Labels
DESCRIPTION: This shows the rendered output of a Grafana alert annotation template that includes multiple labels (`environment` and `region`). It illustrates how different pieces of label data are inserted into the final annotation text.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_6

LANGUAGE: plaintext
CODE:
```
Alert triggered in production on AMER region.
```

----------------------------------------

TITLE: Subscribing to Events in a Grafana Service
DESCRIPTION: Example showing how to subscribe to events in a Grafana service by implementing an Init method that registers event listeners. The event listener method will be called whenever the specified event occurs.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/communication.md#2025-04-23_snippet_3

LANGUAGE: go
CODE:
```
func (s *MyService) Init() error {
    s.bus.AddEventListener(s.UserCreated)
    return nil
}

func (s *MyService) UserCreated(event *events.UserCreated) error {
    // ...
}
```

----------------------------------------

TITLE: Defining Threshold Conditions in Grafana Alert Expressions
DESCRIPTION: Demonstrates various comparison operators available in Grafana's Threshold expression type. These expressions compare numeric values from queries or other expressions (represented by variables like $A, $B) against static thresholds or ranges (e.g., > 5, < 3, == 2, within 0-10). A threshold expression returns 1 (true) if the condition is met and 0 (false) otherwise, often serving as the final alert condition.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/alert-rules/queries-conditions.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
Is above: $A > 5
```

LANGUAGE: plaintext
CODE:
```
Is below: $B < 3
```

LANGUAGE: plaintext
CODE:
```
Is equal to: $A == 2
```

LANGUAGE: plaintext
CODE:
```
Is not equal to: $B =! 4
```

LANGUAGE: plaintext
CODE:
```
Is above or equal to: $A >= 8
```

LANGUAGE: plaintext
CODE:
```
Is below or equal to: $B <= 16
```

LANGUAGE: plaintext
CODE:
```
Is within range: $A > 0 AND $A < 10
```

LANGUAGE: plaintext
CODE:
```
Is outside range: $B < 0 OR $B > 100
```

LANGUAGE: plaintext
CODE:
```
Is within range included: $A >= 0 AND $A <= 10
```

LANGUAGE: plaintext
CODE:
```
Is outside range included: $B <= 0 OR $B >= 100
```

----------------------------------------

TITLE: Creating Key/Value Templating Variable in PostgreSQL
DESCRIPTION: Demonstrates a SQL query that creates a key/value templating variable by selecting hostname as text and id as value. This query format allows for more user-friendly dropdown options in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_10

LANGUAGE: sql
CODE:
```
SELECT hostname AS __text, id AS __value FROM host
```

----------------------------------------

TITLE: Getting an Alert Rule Group via Grafana Provisioning API (HTTP)
DESCRIPTION: Defines the `GET` request endpoint `/api/v1/provisioning/folder/:folderUid/rule-groups/:group` to retrieve a specific Grafana alert rule group within a specified folder. Requires `FolderUID` and `Group` as path parameters to identify the target resource. A successful request returns a 200 OK status with the `AlertRuleGroup` object, whereas a 404 Not Found status indicates the folder or group was not found.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_16

LANGUAGE: plaintext
CODE:
```
GET /api/v1/provisioning/folder/:folderUid/rule-groups/:group
```

----------------------------------------

TITLE: Iterating over Collections with 'range' in Go Templates
DESCRIPTION: Shows the basic usage of the `range` statement to iterate over an array or map (`$array`). Within the loop, the dot (`.`) is set to the current element, allowing access to its properties (e.g., `.itemPropertyName`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_2

LANGUAGE: go
CODE:
```
{{ range $array }}
{{ .itemPropertyName }}
{{ end }}
```

----------------------------------------

TITLE: Setting Environment Label based on Instance Label (Regex Match)
DESCRIPTION: This Go template dynamically sets an `environment` label by using regular expression matching on the `instance` label. It employs the `match` function within conditional logic to check if the `instance` label starts with 'prod-server-' or 'staging-server-', assigning 'production' or 'staging' respectively, otherwise defaulting to 'development'. This offers more flexibility than exact matching.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_16

LANGUAGE: gotemplate
CODE:
```
{{- if match "^prod-server-.*" $labels.instance -}}
production
{{- else if match "^staging-server-.*" $labels.instance -}}
staging
{{- else -}}
development
{{- end -}}
```

----------------------------------------

TITLE: Response for Dashboard Restoration in Grafana HTTP API
DESCRIPTION: This HTTP response confirms successful restoration of a dashboard to a previous version, providing the dashboard ID, slug, UID, and the new version number.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_5

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Content-Length: 67

{
  "id": 70,
  "slug": "my-dashboard",
  "status": "success",
  "uid": "QA7wKklGz",
  "url": "/d/QA7wKklGz/my-dashboard",
  "version": 3
}
```

----------------------------------------

TITLE: Example Input Data for Convert Field Type Transformation
DESCRIPTION: This table shows sample input data before applying the 'Convert field type' transformation. The 'Time' field contains string representations of years.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_9

LANGUAGE: text
CODE:
```
| Time       | Mark  | Value |
| ---------- | ----- | ----- |
| 2017-07-01 | above | 25    |
| 2018-08-02 | below | 22    |
| 2019-09-02 | below | 29    |
| 2020-10-04 | above | 22    |
```

----------------------------------------

TITLE: Updating Admin Settings with HTTP PUT Request
DESCRIPTION: Example HTTP PUT request to update Grafana settings. This example shows how to enable SAML authentication and remove a SAML configuration property. Available in Grafana Enterprise v8.0+.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
PUT /api/admin/settings
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "updates": {
    "auth.saml": {
      "enabled": "true"
    }
  },
  "removals": {
    "auth.saml": ["single_logout"]
  },
}
```

----------------------------------------

TITLE: Enabling OpenTelemetry Tracing - JSON
DESCRIPTION: Provides a rendering.tracing.url key to specify the endpoint for sending OpenTelemetry trace data during rendering jobs. Use to integrate rendering service with OTel-compatible tracing systems like Jaeger or Zipkin. Input as a valid HTTP/S URL.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_54

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "tracing": {
      "url": "http://localhost:4318/v1/traces"
    }
  }
}
```

----------------------------------------

TITLE: Provisioning Jaeger Data Source for Tracing Integration (YAML)
DESCRIPTION: This YAML snippet demonstrates how to provision a Jaeger data source that can be used in conjunction with Loki for distributed tracing. The UID of this data source should match the datasourceUid in Loki's derived fields configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/loki/_index.md#2025-04-23_snippet_2

LANGUAGE: yaml
CODE:
```
datasources:
    - name: Jaeger
      type: jaeger
      url: http://jaeger-tracing-query:16686/
      access: proxy
      uid: my_jaeger_uid
```

----------------------------------------

TITLE: OpenLDAP Server Configuration
DESCRIPTION: Basic OpenLDAP server configuration example showing connection settings and attribute mappings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
[[servers]]
host = "127.0.0.1"
port = 389
use_ssl = false
start_tls = false
ssl_skip_verify = false
bind_dn = "cn=admin,dc=grafana,dc=org"
bind_password = "grafana"
search_filter = "(cn=%s)"
search_base_dns = ["dc=grafana,dc=org"]

[servers.attributes]
member_of = "memberOf"
email =  "email"
```

----------------------------------------

TITLE: Running a Specific Grafana Version in Docker
DESCRIPTION: A bash command to run a specific version of Grafana Enterprise in a Docker container on port 3000 in detached mode.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
docker run -d -p 3000:3000 --name grafana grafana/grafana-enterprise:<version number>
```

----------------------------------------

TITLE: Configuring Cookie SameSite Policy for SAML Compatibility in Grafana INI
DESCRIPTION: Shows the `cookie_samesite` setting within the `[security]` section of the Grafana configuration file. Setting this to `none` is recommended when using SAML, especially with redirects, to ensure the Grafana session cookie is sent correctly across sites, preventing "login session has expired" errors. Requires `cookie_secure = true`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_24

LANGUAGE: ini
CODE:
```
[security]
cookie_samesite = none
```

----------------------------------------

TITLE: Configuring Inter-Plugin Backend Communication (INI)
DESCRIPTION: Configuration examples for the `actions_allow_post_url` setting within the Grafana configuration file (`grafana.ini` or `custom.ini`). This option allows installed plugin frontends to communicate directly with the backends of other specified plugins using glob matching. By default, it's empty or commented out, preventing direct local communication. Examples show the default state, allowing all plugin backends, or allowing only a specific plugin's backend.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/plugin-management/index.md#2025-04-23_snippet_4

LANGUAGE: ini
CODE:
```
actions_allow_post_url=
```

LANGUAGE: ini
CODE:
```
actions_allow_post_url=/api/plugins/*
```

LANGUAGE: ini
CODE:
```
actions_allow_post_url=/api/plugins/<GRAFANA_SPECIAL_APP>
```

----------------------------------------

TITLE: Starring a Query in Grafana Query History (HTTP Response)
DESCRIPTION: This snippet shows a successful HTTP 200 OK response after starring a query. The JSON body returns the complete query history entry, reflecting its potentially updated starred status (although the example shows `starred: false`, a successful star operation would typically result in `starred: true`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_9

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
{
  "result": {
    "uid": "P8zM2I1nz",
    "datasourceUid": "PE1C5CBDA0504A6A3",
    "createdBy": 1,
    "createdAt": 1643630762,
    "starred": false,
    "comment": "Debugging query",
    "queries": [
      {
        "refId": "A",
        "key": "Q-87fed8e3-62ba-4eb2-8d2a-4129979bb4de-0",
        "scenarioId": "csv_content",
        "datasource": {
            "type": "testdata",
            "uid": "PD8C576611E62080A"
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Creating a ConfigMap with CA Certificate for Grafana - YAML
DESCRIPTION: This YAML snippet creates a Kubernetes ConfigMap containing a CA certificate for Grafana to trust private TLS certificates. The file is intended to be applied to the cluster to store 'ca.pem' which should have the PEM-encoded certificate. Requires kubectl and a Kubernetes cluster. Key parameters include the name of the ConfigMap and the actual certificate contents.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_16

LANGUAGE: yaml
CODE:
```
# grafana-ca-configmap.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-ca-cert
data:
  ca.pem: |
    -----BEGIN CERTIFICATE-----
    (rest of the CA cert)
    -----END CERTIFICATE-----
```

----------------------------------------

TITLE: Fetching Data Source Resources by UID in HTTP
DESCRIPTION: Sends a GET request to fetch resources from a data source identified by UID. This is the current recommended method for fetching resources.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_19

LANGUAGE: http
CODE:
```
GET api/datasources/uid/P8045C56BDA891CB2/resources/dimension-keys?region=us-east-2&namespace=AWS%2FEC2&dimensionFilters=%7B%7D&metricName=CPUUtilization HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Creating Custom Role in Grafana RBAC API
DESCRIPTION: Makes a POST request to create a new custom role with specified permissions. Requires the 'roles:write' action on 'permissions:type:delegate' scope to prevent privilege escalation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
POST /api/access-control/roles
Accept: application/json
Content-Type: application/json

{
    "version": 1,
    "uid": "jZrmlLCGka",
    "name": "custom:delete:roles",
    "displayName": "custom delete roles",
    "description": "My custom role which gives users permissions to delete roles",
    "group":"My Group",
    "displayName": "My Custom Role",
    "global": false,
    "permissions": [
        {
            "action": "roles:delete",
            "scope": "permissions:type:delegate"
        }
    ]
}
```

----------------------------------------

TITLE: Using __searchFilter with Tag Values in Graphite
DESCRIPTION: Example showing how to integrate __searchFilter with tag_values to enable searching for server values as the user types in the dropdown.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/template-variables/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
tag_values(server, server=~${__searchFilter:regex})
```

----------------------------------------

TITLE: Creating Table SQL Query with Custom Column Names in MySQL for Grafana
DESCRIPTION: This SQL query demonstrates how to create a table display in Grafana with custom column names using the AS syntax. The query joins dashboard and user tables, filters by time range using the $__timeFilter macro, and displays dashboard titles, creators, and creation dates.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_2

LANGUAGE: sql
CODE:
```
SELECT
  title as 'Title',
  user.login as 'Created By' ,
  dashboard.created as 'Created On'
 FROM dashboard
INNER JOIN user on user.id = dashboard.created_by
WHERE $__timeFilter(dashboard.created)
```

----------------------------------------

TITLE: Deleting Grafana Library Element via API (HTTP)
DESCRIPTION: This snippet provides an example HTTP DELETE request to remove a specific Grafana library element identified by its UID (`nErXDvCkzz`). It requires appropriate `Accept`, `Content-Type`, and `Authorization` headers. Note that library elements connected to dashboards cannot be deleted, and this operation is irreversible.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_12

LANGUAGE: http
CODE:
```
DELETE /api/library-elements/nErXDvCkzz HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk


```

----------------------------------------

TITLE: Team Details Response Example - JSON
DESCRIPTION: Presents the detailed JSON representation of a team as returned by the get team by ID endpoint. Contains fields for ID, organization, team name, contact info, and ISO timestamps for creation and last update.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{\n  \"id\": 1,\n  \"orgId\": 1,\n  \"name\": \"MyTestTeam\",\n  \"email\": \"\",\n  \"created\": \"2017-12-15T10:40:45+01:00\",\n  \"updated\": \"2017-12-15T10:40:45+01:00\"\n}
```

----------------------------------------

TITLE: Adding Descriptions to RadioButtonGroup Options (JSX)
DESCRIPTION: Demonstrates how to augment RadioButtonGroup options with description fields for richer option context. Requires @grafana/ui. Each option object can include label, value, and description. Disabled options are specified by value. Resulting UI displays descriptions alongside each radio option.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/RadioButtonList/RadioButtonList.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
import { RadioButtonList } from '@grafana/ui';

const options = [
  { label: 'Prometheus', value: 'prometheus', description: 'Monitoring system & TSDB' },
  { label: 'Loki', value: 'loki', description: 'Log aggregation system' },
];

const disabledOptions = ['prometheus', 'elastic'];


<RadioButtonGroup
  options={options}
  disabledOptions={disabledOptions}
  value={...}
  onChange={...}
/>

```

----------------------------------------

TITLE: Setting Up Developer Dashboards and Data Sources in Grafana
DESCRIPTION: This bash command runs the setup script that configures developer dashboards and data sources in Grafana for development and testing.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Definition of UserView Interface in TypeScript
DESCRIPTION: This snippet defines the UserView interface used by the UserIcon component. It specifies the structure of the user object and includes a lastActiveAt property for tracking user activity.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/UsersIndicator/UserIcon.mdx#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
import { DateTimeInput } from '@grafana/data';

export interface UserView {
  user: {
    /** User's name, containing first + last name */
    name: string;
    /** URL to the user's avatar */
    avatarUrl?: string;
  };
  /** Datetime string when the user was last active */
  lastActiveAt: DateTimeInput;
}
```

----------------------------------------

TITLE: Querying Grafana API without Authentication
DESCRIPTION: This example shows how to make a basic unauthenticated API call to Grafana's search endpoint using cURL. It assumes a default local installation with anonymous access enabled.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/curl-examples.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
curl http://localhost:3000/api/search
```

----------------------------------------

TITLE: Restarting Grafana Service with Docker Compose
DESCRIPTION: Restarts the 'grafana' service defined within the `docker-compose.yml` file. Affects the running container managed by Docker Compose.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
docker compose restart grafana
```

----------------------------------------

TITLE: Successful Response for Paginated List of Shared Dashboards in Grafana
DESCRIPTION: This HTTP response returns a paginated list of shared dashboards, including details like UID, access token, title, and enabled status for each dashboard, along with pagination information.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_9

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
    "publicDashboards": [
        {
            "uid": "e9f29a3c-fcc3-4fc5-a690-ae39c97d24ba",
            "accessToken": "6c13ec1997ba48c5af8c9c5079049692",
            "title": "Datasource Shared Queries",
            "dashboardUid": "d2f21d0a-76c7-47ec-b5f3-9dda16e5a996",
            "isEnabled": true
        },
        {
            "uid": "a174f604-6fe7-47de-97b4-48b7e401b540",
            "accessToken": "d1fcff345c0f45e8a78c096c9696034a",
            "title": "Datasource with template variables",
            "dashboardUid": "51DiOw0Vz",
            "isEnabled": true
        }
    ],
    "totalCount": 30,
    "page": 3,
    "perPage": 2
}
```

----------------------------------------

TITLE: Grafana Bind Address Failed Error - Log
DESCRIPTION: This log snippet highlights an error when Grafana cannot bind to the configured TCP address during startup. The issue may stem from incorrect 'http_addr' settings or network constraints, preventing successful binding to the host interface. Review network configuration and the 'http_addr' parameter to resolve.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_12

LANGUAGE: log
CODE:
```
listen tcp 34.148.30.243:3000: bind: cannot assign requested address
```

----------------------------------------

TITLE: Retrieving Single User by ID via Grafana HTTP API (http)
DESCRIPTION: Provides a HTTP GET request example to fetch a user by their unique numeric ID. Requires Grafana admin privileges and returns a JSON object with the user's detailed attributes, suited for lookup or profile viewing operations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
GET /api/users/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=
```

----------------------------------------

TITLE: Injecting Kubernetes Pod IP as Environment Variable (YAML)
DESCRIPTION: This Kubernetes YAML snippet defines an environment variable named `POD_IP` within a container definition. It uses `valueFrom` and `fieldRef` to dynamically populate this variable with the Pod's actual IP address obtained from `status.podIP`. This is a prerequisite for configuring Grafana HA in Kubernetes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-high-availability/_index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
env:
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
```

----------------------------------------

TITLE: Iterating Alerts and Accessing Labels in Grafana Notification Templates - Go
DESCRIPTION: This snippet shows how to iterate over alerts in the notification and print a specific label for each, using Go templates in Grafana. The `range` function traverses `.Alerts`, and `index .Labels "alertname"` accesses the specified label. Dependencies include Grafana notification system and correct shaping of alert labels; input is alert data, output is a formatted list of alert names.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
{{ define "custom_message" -}}
{{ range .Alerts }}
The name of the alert is {{ index .Labels "alertname" }}
{{ end }}
{{ end }}
```

----------------------------------------

TITLE: Validating Docker Compose YAML File Syntax (Bash)
DESCRIPTION: Shows how to validate the syntax of a `docker-compose.yaml` file using the `docker compose config` command. It requires changing the directory to where the file resides. The command outputs the parsed configuration if valid, or error messages if syntax errors are found.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_18

LANGUAGE: bash
CODE:
```
# go to your docker-compose.yaml directory
cd /path-to/docker-compose/file

# run the validation command
docker compose config
```

----------------------------------------

TITLE: Enabling Grafana Service at Boot with systemd (Linux)
DESCRIPTION: Configures the Grafana server service to start automatically when the system boots, using systemd. Ensures Grafana is available after a system restart.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
sudo systemctl enable grafana-server.service
```

----------------------------------------

TITLE: Configuring RBAC Settings in INI Format - Bash
DESCRIPTION: This code snippet demonstrates how to define an [rbac] block in Grafana's configuration file, using INI-style syntax to enable the permission cache. This modifies Grafana's behavior by activating in-memory caching for user permission evaluation, which is suitable for setups in Grafana Enterprise and Grafana Cloud. The snippet's main parameter, permission_cache, is set to true to enhance performance; this setting requires no dependencies beyond Grafana itself. The snippet should be added to the Grafana configuration file, and the expected result is active caching for permission checks, while all other RBAC settings remain default.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/configure-rbac/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
[rbac]

permission_cache = true
```

----------------------------------------

TITLE: Hiding Grafana Version Number for Unauthenticated Users in TOML
DESCRIPTION: Configures the `hide_version` setting in the `[anonymous.auth]` section of `grafana.ini`. Setting this to `true` prevents the Grafana version number from being displayed to users who are not logged in, reducing information leakage about potentially outdated or vulnerable installations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-security-hardening/index.md#2025-04-23_snippet_4

LANGUAGE: toml
CODE:
```
[anonymous.auth]
# mask the Grafana version number for unauthenticated users
hide_version = true
```

----------------------------------------

TITLE: Running Generation Command for Feature Toggles in Grafana
DESCRIPTION: Command to generate all necessary feature toggle files after defining a new toggle in registry.go. This generates backend, frontend, and documentation files.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/feature-toggles.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
make gen-feature-toggles
```

----------------------------------------

TITLE: Configuring Keycloak `kc_idp_hint` in Grafana (INI)
DESCRIPTION: Shows how to modify the `auth_url` in the Grafana configuration to include the `kc_idp_hint` query parameter. This parameter directs Keycloak to use a specific identity provider (e.g., 'google') during the authentication flow.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
auth_url = https://<PROVIDER_DOMAIN>/realms/<REALM_NAME>/protocol/openid-connect/auth?kc_idp_hint=google
```

----------------------------------------

TITLE: Exporting Grafana Resources with Grizzly in Shell
DESCRIPTION: This shell command uses Grizzly (`grr`) to export (pull) various resources from the Grafana instance associated with the currently active `grafana-onprem` context. It targets Dashboards, DataSources, DashboardFolders, LibraryElements, AlertRuleGroups, AlertContactPoints, and AlertNotificationPolicies using wildcard patterns (`-t 'ResourceType/*'`) and saves them as files in the current directory (`.`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_6

LANGUAGE: shell
CODE:
```
grr config use-context grafana-onprem
grr pull . \
  -t 'Dashboard/*' \
  -t 'Datasource/*' \
  -t 'DashboardFolder/*' \
  -t 'LibraryElement/*' \
  -t 'AlertRuleGroup/*' \
  -t 'AlertContactPoint/*' \
  -t 'AlertNotificationPolicy/*'
```

----------------------------------------

TITLE: Provisioning Grafana Correlations via YAML Configuration
DESCRIPTION: Defines the structure for provisioning correlations within a Grafana data source configuration file using YAML. It specifies the target data source UID, label, description, and configuration details including the target query, source field, and optional transformations (regex, logfmt) to extract variables.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/correlations/create-a-new-correlation/index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
datasources:
  - name: Data source name # source data source
    ...
    jsonData:
    ...
    correlations:
      - targetUID: uid
        label: "test"
        description: "..."
        config:
          type: "query"
          target:
            expr: "..."
          field: "name"
          transformations:
            - type: regex
              field: "test"
              expression: /\w+/
              mapValue: "other"
            - type: logfmt
              field: "test"
```

----------------------------------------

TITLE: Migrating and Encrypting Datasource Passwords (Bash)
DESCRIPTION: Executes a data migration script specifically designed to encrypt unsecured datasource passwords stored in the Grafana database. The command migrates plain text passwords to the secure_json_data field and can be run multiple times safely.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_22

LANGUAGE: bash
CODE:
```
grafana cli admin data-migration encrypt-datasource-passwords
```

----------------------------------------

TITLE: Installing Multiple Grafana Plugins on Container Start - Bash
DESCRIPTION: Shows how to preinstall official or community Grafana plugins by passing their IDs via the 'GF_PLUGINS_PREINSTALL' environment variable in the Docker run command. Docker and internet access are required. Plugins are specified as a comma-separated list; latest versions are installed unless otherwise specified.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
docker run -d -p 3000:3000 --name=grafana \
  -e "GF_PLUGINS_PREINSTALL=grafana-clock-panel, grafana-simple-json-datasource" \
  grafana/grafana-enterprise
```

----------------------------------------

TITLE: Looking Up User by Login or Email via Grafana HTTP API (http)
DESCRIPTION: Demonstrates two GET request variants for finding a user based on login name or email address. Appropriate for systems needing to identify users without knowing their numeric ID. Headers indicate JSON content and authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
GET /api/users/lookup?loginOrEmail=user@mygraf.com HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=
```

LANGUAGE: http
CODE:
```
GET /api/users/lookup?loginOrEmail=admin HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=
```

----------------------------------------

TITLE: Defining Default Alert Message Templates in Grafana Go Templating Language
DESCRIPTION: This snippet defines the "__default_message" template and supporting sub-templates in Grafana's Go templating language. It provides the overall format for firing and resolved alerts, summary and annotation formatting, and a sorted key-value renderer for label and annotation pairs. Dependencies include standard Go template functions (e.g., define, if, range, index, template), and it expects the surrounding Grafana alert context (with objects like Alerts, GroupLabels, Labels, and Annotations) to be present. The template accepts alert data and renders a structured alert message, allowing easy notification customization. Outputs are dynamic alert messages with standard labeling, annotation, and links, constrained to Grafana's Go template runtime.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/ng_alert_notification.txt#2025-04-23_snippet_0

LANGUAGE: gotemplate
CODE:
```
{{- define "__default_message" -}}
You have {{ len .Alerts.Firing }} firing alert(s), and {{ len .Alerts.Resolved }} resolved alert(s) for {{ .GroupLabels }}

{{ if .Alerts.Firing -}}
({{ len .Alerts.Firing }}) FIRING
-----------
{{ template "__default_alerts_summarize" .Alerts.Firing }}
{{- end }}

{{- if .Alerts.Resolved }}
({{ len .Alerts.Resolved }}) RESOLVED
-------------
{{ template "__default_alerts_summarize" .Alerts.Resolved }}
{{- end }}
Go to the Alerts page: {{ .AlertPageUrl }}
{{- end -}}

{{- define "__default_alerts_summarize" -}}
{{- range . }}
{{- template "__default_alert_labels" . }}
{{- template "__default_alert_annotations" . }}
{{ end }}
{{- end -}}

{{- define "__default_alert_labels" -}}
{{- $labels := .Labels -}}
{{- if index $labels "alertname" }}
Alertname: {{ index .Labels "alertname" -}}
{{ $labels = $labels.Remove (toStrings (list "alertname")) }}
{{- end }}
Labels: {{ template "__default_sorted_pairs" $labels }}
{{- end -}}

{{- define "__default_alert_annotations" -}}
{{- $annotations := .Annotations -}}
{{- if index $annotations "summary" }}
Summary: {{ index .Annotations "summary" -}}
{{- $annotations = $annotations.Remove (toStrings (list "summary")) }}
{{- end -}}
{{- if index $annotations "description" }}
Description: {{ index .Annotations "description" -}}
{{- $annotations = $annotations.Remove (toStrings (list "description")) }}
{{- end -}}
{{- if index $annotations "runbook_url" }}
Runbook: {{ index .Annotations "runbook_url" -}}
{{- $annotations = $annotations.Remove (toStrings (list "runbook_url")) }}
{{- end -}}
{{- if $annotations }}
Annotations: {{ template "__default_sorted_pairs" $annotations }}
{{- end -}}
{{- end -}}

{{- define "__default_sorted_pairs" -}}
{{ range .SortedPairs }}
 - {{ .Name }} = {{ .Value }}
{{- end }}
{{- end -}}

{{- if .Message -}}
    {{ .Message }}
{{- else -}}
    {{ template "__default_message" . }}
{{- end }}


Sent by Grafana v{{.BuildVersion}} (c) {{now | date "2006"}} Grafana Labs
```

----------------------------------------

TITLE: Defining AWS CloudWatch Datasource Credentials (Bash)
DESCRIPTION: Shows example values for AWS credentials (Access Key ID, Secret Access Key, Region) used for configuring the Grafana CloudWatch data source. These values are used in subsequent Docker Secret examples.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
AWS_default_ACCESS_KEY_ID=aws01us02
AWS_default_SECRET_ACCESS_KEY=topsecret9b78c6
AWS_default_REGION=us-east-1
```

----------------------------------------

TITLE: Selecting Clustered Rendering Mode - JSON
DESCRIPTION: Specifies the 'clustered' rendering mode and tuning parameters in a JSON configuration file for the renderer. Allows fine-grained control over the number and type of browser or page instances and rendering request timeout.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_6

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "mode": "clustered",
    "clustering": {
      "mode": "browser",
      "maxConcurrency": 5,
      "timeout": 30
    }
  }
}
```

----------------------------------------

TITLE: Configuring Grafana with Bind Mount Persistence (YAML)
DESCRIPTION: A `docker-compose.yaml` configuration using a bind mount for persistent storage. It maps a directory on the host (`$PWD/data`) to `/var/lib/grafana` inside the container. The `user: '0'` directive sets the container user to root (UID 0) to ensure write permissions to the mounted host directory; alternatively, use `id -u` to find the correct user ID if not running as root.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_17

LANGUAGE: yaml
CODE:
```
services:
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    # if you are running as root then set it to 0
    # else find the right id with the id -u command
    user: '0'
    ports:
      - '3000:3000'
    # adding the mount volume point which we create earlier
    volumes:
      - '$PWD/data:/var/lib/grafana'
```

----------------------------------------

TITLE: Defining LogQL LBAC Rule for Specific Namespace/Cluster Combination (Task 3)
DESCRIPTION: Example LogQL query used as an LBAC rule for Team B in Task 3. This rule filters logs, granting access only to data points matching *both* `cluster=\"us-west-0\"` AND `namespace=\"staging\"`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_7

LANGUAGE: logql
CODE:
```
{cluster="us-west-0", namespace="staging"}
```

----------------------------------------

TITLE: Generating Certificate Signing Request (CSR) using OpenSSL (Bash)
DESCRIPTION: Uses the `openssl req` command with the `-new` flag to create a CSR file named `grafana.csr` in `/etc/grafana/` based on the private key `grafana.key`. It prompts the user for information to be included in the certificate (domain name, location, etc.). Requires `openssl` and the previously generated private key file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
sudo openssl req -new -key /etc/grafana/grafana.key -out /etc/grafana/grafana.csr
```

----------------------------------------

TITLE: Provisioning CloudWatch Data Source Using Credentials Profile
DESCRIPTION: YAML configuration for provisioning CloudWatch data source using a non-default credentials profile, along with custom metrics namespaces.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_5

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: CloudWatch
    type: cloudwatch
    jsonData:
      authType: credentials
      defaultRegion: eu-west-2
      customMetricsNamespaces: 'CWAgent,CustomNameSpace'
      profile: secondary
```

----------------------------------------

TITLE: Using Tag Variables with Filter Expressions in Graphite
DESCRIPTION: Example of a tag_values query with multiple filter expressions including a variable reference. This allows filtering tag values based on server pattern and application variable.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/template-variables/index.md#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
tag_values(server, server=~backend\*, app=~${apps:regex})
```

----------------------------------------

TITLE: Sorting and Projecting Azure Resources using Kusto Query Language
DESCRIPTION: This query returns all resources in the selected subscriptions, showing only the name, type, and location properties, sorted by name in ascending order. It demonstrates the use of 'project' to select specific properties and 'order by' for sorting.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/query-editor/index.md#2025-04-23_snippet_4

LANGUAGE: kusto
CODE:
```
Resources
| project name, type, location
| order by name asc
```

----------------------------------------

TITLE: Overriding Grafana Config File Location (Bash)
DESCRIPTION: Shows how to use the '--config' global option to specify a custom path to the Grafana configuration file when running a command, overriding the default location.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
grafana cli --config \"/etc/configuration/\" admin reset-admin-password mynewpassword
```

----------------------------------------

TITLE: Defining LogQL LBAC Rule for Metrics with Multiple AND Conditions
DESCRIPTION: Example LogQL query used as an LBAC rule to filter metrics. This rule matches metric data points that contain *both* the label `job` with the value `api-server` AND the label `region` with the value `europe`. This shows applying LBAC rules to metrics data using multiple label matchers.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_1

LANGUAGE: logql
CODE:
```
{job="api-server", region="europe"}
```

----------------------------------------

TITLE: Creating Kubernetes Headless Service for Grafana HA (YAML)
DESCRIPTION: This Kubernetes YAML definition creates a headless Service named `grafana-alerting`. Unlike regular services, a headless service (`clusterIP: 'None'`) resolves to the IPs of the Pods selected by its selector (`app: grafana`), rather than a single virtual IP. This allows Grafana instances configured for HA to discover the actual IP addresses of their peers via DNS lookup of the service name.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-high-availability/_index.md#2025-04-23_snippet_2

LANGUAGE: yaml
CODE:
```
apiVersion: v1
kind: Service
metadata:
  name: grafana-alerting
  namespace: grafana
  labels:
    app.kubernetes.io/name: grafana-alerting
    app.kubernetes.io/part-of: grafana
spec:
  type: ClusterIP
  clusterIP: 'None'
  ports:
    - port: 9094
  selector:
    app: grafana
```

----------------------------------------

TITLE: Listing Helm Deployments in a Namespace - Helm CLI - Bash
DESCRIPTION: This command lists all Helm releases in the specified `monitoring` namespace. It is used to verify deployment status and chart versions. Requires Helm client configured for the cluster.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
helm list -n monitoring
```

LANGUAGE: bash
CODE:
```
NAME            NAMESPACE       REVISION        UPDATED                                 STATUS          CHART          APP VERSION
my-grafana      monitoring      1               2024-01-13 23:06:42.737989554 +0000 UTC deployed        grafana-6.59.0 10.1.0
```

----------------------------------------

TITLE: Interpolating Variables in Translated Strings (React, TypeScript/JSX)
DESCRIPTION: These examples show best practices for interpolating variables and nested components within translated strings using the <Trans> component from @grafana/i18n. Bad examples interpolate directly in JSX, while good examples use value interpolation or include child components. Inputs include dynamic data such as a 'term' prop. Outputs are translated, variable-aware UI components. Proper usage enables both plain and nested translations, supporting Grafana's internationalization conventions.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-eslint-rules/README.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
// Bad ❌
const SearchTitle = ({ term }) => <div>Results for {term}</div>;
```

LANGUAGE: tsx
CODE:
```
// Good ✅
const SearchTitle = ({ term }) => <Trans i18nKey="search-page.results-title">Results for {{ term }}</Trans>;
```

LANGUAGE: tsx
CODE:
```
// Good ✅ (if you need to interpolate variables inside nested components)
const SearchTerm = ({ term }) => <Text color="success">{term}</Text>;
const SearchTitle = ({ term }) => (
  <Trans i18nKey="search-page.results-title">
    Results for <SearchTerm term={term} />
  </Trans>
);
```

LANGUAGE: tsx
CODE:
```
// Good ✅ (if you need to interpolate variables and additional translated strings inside nested components)
const SearchTitle = ({ term }) => (
  <Trans i18nKey="search-page.results-title" values={{ myVariable: term }}>
    Results for <Text color="success">{'{{ myVariable }}'} and this translated text is also in green</Text>
  </Trans>
);
```

----------------------------------------

TITLE: Time Filtered Query with Variable Substitution (Dollar Syntax) - SQL
DESCRIPTION: Demonstrates using the dollar-sign syntax for template variable substitution ($hostname) in a time-filtered query, with UNIX_TIMESTAMP conversion and 'aint' field as value. Suitable for dashboards needing dynamic host selection. Requires MySQL compatibility and Grafana macro support.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_12

LANGUAGE: sql
CODE:
```
SELECT
  UNIX_TIMESTAMP(atimestamp) as time,
  aint as value,
  avarchar as metric
FROM my_table
WHERE $__timeFilter(atimestamp) and hostname in($hostname)
ORDER BY atimestamp ASC
```

----------------------------------------

TITLE: Multi-Column SQL Query for Template Variables
DESCRIPTION: SQL query that returns multiple columns to automatically create a list of values for a template variable dropdown, joining two tables based on city.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/template-variables/index.md#2025-04-23_snippet_1

LANGUAGE: sql
CODE:
```
SELECT [host].[hostname], [other_host].[hostname2] FROM host JOIN other_host ON [host].[city] = [other_host].[city]
```

----------------------------------------

TITLE: Example SCIM Configuration in Grafana INI
DESCRIPTION: Provides an example configuration snippet for enabling SCIM user sync (`user_sync_enabled = true`) and disabling group sync (`group_sync_enabled = false`) within the `[auth.scim]` section of the Grafana configuration file (grafana.ini or via environment variables). This illustrates a basic setup for SCIM user management, often used alongside Team Sync for group management.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-scim-provisioning/_index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[auth.scim]
user_sync_enabled = true
group_sync_enabled = false
```

----------------------------------------

TITLE: Security Policy Configuration Properties
DESCRIPTION: Configuration settings for Content Security Policy (CSP), CSRF protection, and plugin security features.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_9

LANGUAGE: properties
CODE:
```
content_security_policy=true
content_security_policy_template=$NONCE
content_security_policy_report_only=true
actions_allow_post_url=/api/plugins/*
angular_support_enabled=false
csrf_trusted_origins=
csrf_additional_headers=
csrf_always_check=false
enable_frontend_sandbox_for_plugins=
```

----------------------------------------

TITLE: Setting Environment Variables for Mimirtool Rule Import - Bash
DESCRIPTION: These bash commands set necessary environment variables to prepare for running mimirtool commands. Substitute <Grafana URL> and <your token ID> with your Grafana instance's URL and your service account token. MIMIR_ADDRESS defines the endpoint, MIMIR_AUTH_TOKEN sets authorization, and MIMIR_TENANT_ID specifies the tenant context for rule import. Required to authenticate and operate with Mimirtool for managing alert rules.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/alerting-migration/migration-api.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
MIMIR_ADDRESS=https://<Grafana URL>.grafana-dev.net/api/convert/ MIMIR_AUTH_TOKEN=<your token ID> MIMIR_TENANT_ID=1
```

----------------------------------------

TITLE: Exporting the Notification Policy Tree via Grafana Provisioning API (HTTP Request)
DESCRIPTION: Makes a GET request to `/api/v1/provisioning/policies/export` to export the entire notification policy tree in a specified file format (YAML, JSON, or HCL). Optional query parameters 'download' (boolean) and 'format' (string, default 'yaml') control download behavior and file type. Expects a 200 OK response with the exported data or a 404 Not Found if the policy tree doesn't exist.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_27

LANGUAGE: http
CODE:
```
GET /api/v1/provisioning/policies/export
```

----------------------------------------

TITLE: Configuring Alert State History Annotation Retention - Grafana INI
DESCRIPTION: Describes `[unified_alerting.state_history.annotations]`, which sets retention periods and total count for auto-created alert state annotations. Key parameters are `max_age` (how long to retain) and `max_annotations_to_keep` (max number to store); both accept 0 for unlimited. Values are specified in durations like '6h', '10d', etc.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_23

LANGUAGE: ini
CODE:
```
[unified_alerting.state_history.annotations]
# How long to keep alert annotations
max_age = 7d
# Maximum number of annotations to retain. 0 = unlimited
max_annotations_to_keep = 1000

```

----------------------------------------

TITLE: Finding Grafana Annotation Tags (HTTP Request)
DESCRIPTION: Example HTTP GET request to the `/api/annotations/tags` endpoint to retrieve annotation tags. It demonstrates using the optional `tag` query parameter (e.g., `?tag=out`) for filtering and requires a valid `Authorization` header (Basic Auth shown). The `Accept` and `Content-Type` headers are set to `application/json`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_12

LANGUAGE: http
CODE:
```
GET /api/annotations/tags?tag=out HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Basic YWRtaW46YWRtaW4=
```

----------------------------------------

TITLE: Folder Deletion API Response Example
DESCRIPTION: Example HTTP response for the DELETE /api/folders/:uid endpoint, confirming the successful deletion of the folder and returning its ID.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_10

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "message":"Folder deleted",
  "id": 2
}
```

----------------------------------------

TITLE: Building and Running a Custom Ubuntu-based Grafana Docker Image
DESCRIPTION: A series of bash commands to navigate to the custom directory, build a custom Grafana Docker image based on the latest Ubuntu image, and run it as a container.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
# go to the custom directory
cd packaging/docker/custom

# run the docker build command to build the image
docker build \
  --build-arg "GRAFANA_VERSION=latest-ubuntu" \
  -t grafana-custom .

# run the custom grafana container using docker run command
docker run -d -p 3000:3000 --name=grafana grafana-custom
```

----------------------------------------

TITLE: Enabling Insecure Email Lookup via Grafana Admin API (Bash)
DESCRIPTION: Shows how to enable email-based user lookup for OAuth authentication using a `curl` command to interact with the Grafana Admin API (`/api/admin/settings`). This method requires an admin service account token (`glsa_yourserviceaccounttoken`) and sends a PUT request with a JSON payload to update the `auth.oauth_allow_insecure_email_lookup` setting. This feature is available in Grafana Enterprise and Cloud from v10.4 onwards.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/_index.md#2025-04-23_snippet_3

LANGUAGE: Bash
CODE:
```
curl --request PUT \
  --url http://{slug}.grafana.com/api/admin/settings \
  --header 'Authorization: Bearer glsa_yourserviceaccounttoken' \
  --header 'Content-Type: application/json' \
  --data '{ "updates": { "auth": { "oauth_allow_insecure_email_lookup": "true" }}}'
```

----------------------------------------

TITLE: Defining a Custom Notification Template - Go Templating - Go
DESCRIPTION: This snippet defines a custom notification template using Go template syntax for Grafana. It outputs all core notification data fields, such as Receiver, Status, alert counts, group labels, and URLs. This template is intended to be executed by passing the relevant dot (.) data object from Grafana alert notifications and requires knowledge of the fields available in that context. Inputs are the notification context object; outputs are the formatted notification body.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
```go
{{ define "custom_template" }}
  {{ .Receiver }}
  {{ .Status }}
  There are {{ len .Alerts }} alerts
  There are {{ len .Alerts.Firing }} firing alerts
  There are {{ len .Alerts.Resolved }} resolved alerts
  {{ .GroupLabels }}
  {{ .CommonLabels }}
  {{ .CommonAnnotations }}
  {{ .ExternalURL }}
{{ end }}
```
```

----------------------------------------

TITLE: Configuring Webhook URL for Secret Scan Notifications - INI
DESCRIPTION: This INI snippet illustrates how to set the 'oncall_url' parameter in the [secretscan] section of Grafana's configuration file to specify the webhook endpoint for outgoing secret scan notifications. The 'oncall_url' must be set to a valid webhook URL, typically obtained from a Grafana OnCall integration. Inputs: a valid webhook URL; Outputs: directs secret scan alerts to the provided endpoint. The configuration requires manual edit and Grafana restart.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/secret-scan.md#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
[secretscan]
# URL to send a webhook payload in oncall format
oncall_url = https://example.url/integrations/v1/webhook/3a359nib9eweAd9lAAAETVdOx/
```

----------------------------------------

TITLE: Enabling Debug Logging for Rendering in Grafana Configuration (Bash)
DESCRIPTION: This configuration snippet, intended for the Grafana configuration file (grafana.ini or custom.ini), enables detailed debug logging specifically for the rendering component. This helps in diagnosing rendering issues by providing more verbose log output in the main Grafana server logs.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
[log]
filters = rendering:debug
```

----------------------------------------

TITLE: Creating a Folder with HTTP POST Request
DESCRIPTION: Example HTTP POST request to create a new folder in Grafana. The request body includes optional UID, required title, and optional parentUid for nested folders. Requires 'folders:create' permission.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
POST /api/folders HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "uid": "nErXDvCkzz",
  "title": "Department ABC",
  "parentUid": "fgnj5e52gel76g"
}
```

----------------------------------------

TITLE: Verifying Service Status using Bash
DESCRIPTION: Checks the status of the Grafana Service within the 'my-grafana' namespace using `kubectl get`. The `-o wide` flag provides additional information. This command displays details like the Service type (LoadBalancer), ClusterIP, ExternalIP (if assigned by the cloud provider), and port mappings, which are essential for accessing the Grafana UI. Requires `kubectl` installed and configured.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
kubectl get svc --namespace=my-grafana -o wide
```

----------------------------------------

TITLE: Listing Teams for Actual User via Grafana API (HTTP)
DESCRIPTION: Fetches a list of teams the currently authenticated user is a member of using a GET request to `/api/user/teams`. Requires authentication (Bearer Token shown in example). The response is a JSON array of team objects, including details like ID, organization ID, name, email, avatar URL, and member count.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_20

LANGUAGE: http
CODE:
```
GET /api/user/teams HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

[
  {
    "id": 1,
    "orgId": 1,
    "name": "MyTestTeam",
    "email": "",
    "avatarUrl": "\/avatar\/3f49c15916554246daa714b9bd0ee398",
    "memberCount": 1
  }
]
```

----------------------------------------

TITLE: Upgrading Grafana Release to Mount CA ConfigMap - Bash
DESCRIPTION: This Helm upgrade command ensures Grafana is redeployed with the new ConfigMap mounted, updating the deployment as specified in values.yaml. It relies on a properly edited values.yaml referencing the additional config map and applies changes to the 'my-grafana' instance in 'monitoring' namespace. Ensure ConfigMap is present before running.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_19

LANGUAGE: bash
CODE:
```
helm upgrade my-grafana grafana/grafana --values values.yaml --namespace monitoring
```

----------------------------------------

TITLE: Deleting a Query from Grafana Query History (HTTP Request)
DESCRIPTION: This snippet provides an example HTTP DELETE request to remove a specific query entry from the Grafana query history using its unique identifier (UID). Authentication via Bearer token is necessary.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
DELETE /api/query-history/P8zM2I1nz HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Checking Data Source Health by ID in HTTP
DESCRIPTION: Sends a GET request to check the health of a data source identified by ID. This endpoint is deprecated as of Grafana v9.0.0.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_14

LANGUAGE: http
CODE:
```
GET api/datasources/112/health HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Example JSON Response for Grafana Role Details API
DESCRIPTION: This is an example JSON response from the Grafana API endpoint `/api/access-control/roles/{roleUID}`. It shows the structure of the data returned when querying for a specific role, including its version, UID, name, display name, description, global status, associated permissions (each with action, scope, and timestamps), and overall created/updated timestamps. This particular example shows details for the `fixed:users:writer` role.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
    "version": 2,
    "uid": "qQui_LCMk",
    "name": "fixed:users:writer",
    "displayName": "User writer",
    "description": "Read and update all attributes and settings for all users in Grafana: update user information, read user information, create or enable or disable a user, make a user a Grafana administrator, sign out a user, update a user’s authentication token, or update quotas for all users.",
    "global": true,
    "permissions": [
        {
            "action": "org.users:add",
            "scope": "users:*",
            "updated": "2021-05-17T20:49:18+02:00",
            "created": "2021-05-17T20:49:18+02:00"
        },
        {
            "action": "org.users:read",
            "scope": "users:*",
            "updated": "2021-05-17T20:49:18+02:00",
            "created": "2021-05-17T20:49:18+02:00"
        },
        {
            "action": "org.users:remove",
            "scope": "users:*",
            "updated": "2021-05-17T20:49:18+02:00",
            "created": "2021-05-17T20:49:18+02:00"
        },
        {
            "action": "org.users:write",
            "scope": "users:*",
            "updated": "2021-05-17T20:49:18+02:00",
            "created": "2021-05-17T20:49:18+02:00"
        }
    ],
    "updated": "2021-05-17T20:49:18+02:00",
    "created": "2021-05-13T16:24:26+02:00"
}
```

----------------------------------------

TITLE: Response Example for Listing All Reports - JSON
DESCRIPTION: This JSON snippet shows an example response from the /api/reports endpoint, illustrating the data structure returned when listing all reports. The JSON array contains report objects with detailed scheduling, options, dashboard references, supported formats, and timestamps. This response is returned upon successful authentication and permission checks with a 200 OK HTTP status.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
[\n\t{\n\t\t\"id\": 2,\n\t\t\"userId\": 1,\n\t\t\"orgId\": 1,\n\t\t\"name\": \"Report 2\",\n\t\t\"recipients\": \"example-report@grafana.com\",\n\t\t\"replyTo\": \"\",\n\t\t\"message\": \"Hi, \\nPlease find attached a PDF status report. If you have any questions, feel free to contact me!\\nBest,\",\n\t\t\"schedule\": {\n\t\t\t\"startDate\": \"2022-10-02T00:00:00+02:00\",\n\t\t\t\"endDate\": null,\n\t\t\t\"frequency\": \"once\",\n\t\t\t\"intervalFrequency\": \"\",\n\t\t\t\"intervalAmount\": 0,\n\t\t\t\"workdaysOnly\": false,\n\t\t\t\"dayOfMonth\": \"2\",\n\t\t\t\"timeZone\": \"Europe/Warsaw\"\n\t\t},\n\t\t\"options\": {\n\t\t\t\"orientation\": \"landscape\",\n\t\t\t\"layout\": \"grid\",\n\t\t},\n\t\t\"enableDashboardUrl\": true,\n\t\t\"state\": \"scheduled\",\n\t\t\"dashboards\": [\n\t\t\t{\n\t\t\t\t\"dashboard\": {\n\t\t\t\t\t\"id\": 463,\n\t\t\t\t\t\"uid\": \"7MeksYbmk\",\n\t\t\t\t\t\"name\": \"Alerting with TestData\"\n\t\t\t\t},\n\t\t\t\t\"reportVariables\": {\n\t\t\t\t\t\"namefilter\": \"TestData\"\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t\"formats\": [\n\t\t\t\"pdf\",\n\t\t\t\"csv\"\n\t\t],\n\t\t\"created\": \"2022-09-19T11:44:42+02:00\",\n\t\t\"updated\": \"2022-09-19T11:44:42+02:00\"\n\t}\n]
```

----------------------------------------

TITLE: Closing a Documentation List Block (Hugo)
DESCRIPTION: This Hugo shortcode closes the list block previously opened by `{{< docs/list >}}`. It signifies the end of the structured list in the Grafana documentation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/manage-users/view-server-user-list-search.md#2025-04-23_snippet_2

LANGUAGE: hugo
CODE:
```
{{< /docs/list >}}
```

----------------------------------------

TITLE: Using Dollar Sign Variable Syntax in InfluxDB Queries
DESCRIPTION: Example of how to use the $varname syntax for variables in InfluxDB queries, which is best used when the variable stands alone.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/template-variables/index.md#2025-04-23_snippet_3

LANGUAGE: sql
CODE:
```
SELECT mean("value") FROM "logins" WHERE "hostname" =~ /^$host$/ AND $timeFilter GROUP BY time($__interval), "hostname"
```

----------------------------------------

TITLE: Configuring Storybook Metadata for Stack Component in TypeScript/MDX
DESCRIPTION: This snippet imports Meta and ArgTypes from Storybook Blocks and the Stack component. It then sets up Storybook metadata for the Stack component using the <Meta> tag, specifying the Storybook title and linking it to the component. This setup is required to display the Stack component and its props in Storybook's documentation interface. Storybook and React must be installed for this to function.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Stack/Stack.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Meta, ArgTypes } from '@storybook/blocks';
import { Stack } from './Stack';

<Meta title="MDX|Stack" component={Stack} />
```

----------------------------------------

TITLE: Demonstrating InfluxDB Line Protocol for Storing Time Series (Plaintext Example)
DESCRIPTION: This snippet provides an example of the InfluxDB line protocol for writing a measurement with tags, fields, and a timestamp. It is annotated to show the roles of various components: measurement name, tag set, field set, and timestamp. The snippet is purely illustrative, requiring no dependencies, and shows the required structure for InfluxDB line protocol data ingestion. Inputs are a single measurement string, and outputs are the corresponding parsed components; actual storage and parsing are performed by InfluxDB itself.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/fundamentals/timeseries/index.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
weather,location=us-midwest temperature=82 1465839830100400200
  |    -------------------- --------------  |
  |             |             |             |
  |             |             |             |
+-----------+--------+-+---------+-+---------+
|measurement|,tag_set| |field_set| |timestamp|
+-----------+--------+-+---------+-+---------+
```

----------------------------------------

TITLE: Querying Metrics with Pre-v9.3 Multiple Queries - SQL
DESCRIPTION: Demonstrates how, prior to Grafana v9.3, separate SQL queries are required to plot separate regions ('US' and 'EU') on the same timeseries panel. Each query filters by one region using a specific WHERE clause, and both require the user to know all region values in advance. Inputs are the 'metrics' table and specific region names; outputs are result sets filtered by Region. Dependencies: relational database compatible with SQL. Limitation: requires knowledge of all desired values in the filter column.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-3.md#2025-04-23_snippet_0

LANGUAGE: sql
CODE:
```
   SELECT Time, Value FROM metrics WHERE Time > ‘2022-10-20’ AND Region=’US’
   SELECT Time, Value FROM metrics WHERE Time > ‘2022-10-20’ AND Region=’EU’
```

----------------------------------------

TITLE: Deleting a Data Source by Name in HTTP
DESCRIPTION: Sends a DELETE request to remove a data source identified by name. Requires an authorization token.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_12

LANGUAGE: http
CODE:
```
DELETE /api/datasources/name/test_datasource HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Creating a New Report via Grafana Reporting API - HTTP
DESCRIPTION: This HTTP example shows how to create a new report in Grafana Enterprise by sending a POST request to the /api/reports endpoint. The request body must be a JSON object specifying the report's configuration, including name, recipients, schedule, options, associated dashboards, and desired formats. Proper authentication and permission (reports:create) are required.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
POST /api/reports HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n\t\"name\": \"Report 4\",\n\t\"recipients\": \"texample-report@grafana.com\",\n\t\"replyTo\": \"\",\n\t\"message\": \"Hello, please, find the report attached\",\n\t\"schedule\": {\n\t\t\"startDate\": \"2022-10-02T10:00:00+02:00\",\n\t\t\"endDate\": \"2022-11-02T20:00:00+02:00\",\n\t\t\"frequency\": \"daily\",\n\t\t\"intervalFrequency\": \"\",\n\t\t\"intervalAmount\": 0,\n\t\t\"workdaysOnly\": true,\n\t\t\"timeZone\": \"Europe/Warsaw\"\n\t},\n\t\"options\": {\n\t\t\"orientation\": \"landscape\",\n\t\t\"layout\": \"grid\"\n\t},\n\t\"enableDashboardUrl\": true,\n\t\"dashboards\": [\n\t\t{\n\t\t\t\"dashboard\": {\n\t\t\t\t\"uid\": \"7MeksYbmk\",\n\t\t\t},\n\t\t\t\"timeRange\": {\n\t\t\t\t\"from\": \"2022-08-08T15:00:00+02:00\",\n\t\t\t\t\"to\": \"2022-09-02T17:00:00+02:00\"\n\t\t\t},\n\t\t\t\"reportVariables\": {\n\t\t\t\t\"variable1\": \"Value1\"\n\t\t\t}\n\t\t}\n\t],\n\t\"formats\": [\n\t\t\"pdf\",\n\t\t\"csv\"\n\t]\n}
```

----------------------------------------

TITLE: Rendering PanelChrome with Custom Title Items and Actions in React
DESCRIPTION: Provides a rendered example of `PanelChrome` featuring custom header elements. It utilizes the `titleItems` prop to display `IconButton` components alongside the title and the `actions` prop to add a `Button` component to the header's action area.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
<PanelChrome
  title="My awesome panel title"
  titleItems={
    <>
      <IconButton
        className={css`
          margin-right: 10px;
        `}
        name="github"
        variant="secondary"
        tooltip="extra content to render"
      />
      <IconButton name="sliders-v-alt" variant="secondary" tooltip="extra content to render" />
    </>
  }
  actions={
    <Button size="sm" variant="secondary" key="A">
      Breakdown
    </Button>
  }
  width={500}
  height={200}
>
  {(innerwidth, innerheight) => {
    return (
      <div
        style={{
          width: innerwidth,
          height: innerheight,
          background: 'rgba(230,0,0,0.05)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        Content
      </div>
    );
  }}
</PanelChrome>
```

----------------------------------------

TITLE: Logging Audit Events in Grafana Enterprise (JSON)
DESCRIPTION: This snippet provides a sample of a Grafana Enterprise auditing log entry as a JSON object, showing the structure and fields used to record a login event. It demonstrates usage of standard JSON properties to track timestamp, user information, event action, result, request URI, origin IP, user agent, and software version. The object is intended to be logged to file or streaming systems (such as Loki) for compliance and auditing; inputs are the event fields, outputs are persisted JSON log entries, and usage depends on Grafana's auditing subsystem being enabled.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v7-3.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "timestamp": "2020-10-22T10:18:00.838094347Z",
  "user": {
    "userId": 1,
    "orgId": 1,
    "isAnonymous": false
  },
  "action": "login-grafana",
  "result": {
    "statusType": "success",
    "statusCode": 200
  },
  "requestUri": "/login",
  "ipAddress": "127.0.0.1:41324",
  "userAgent": "Chrome/86.0.4240.111",
  "grafanaVersion": "7.3.0"
}
```

----------------------------------------

TITLE: Example JSON Payload for Conditional Role Mapping Based on Groups
DESCRIPTION: Sample JSON payload from an OAuth2 provider containing a 'groups' array. This structure is used in conjunction with a JMESPath expression in Grafana config to conditionally assign roles based on group membership.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
    ...
    "groups": [
        "engineer",
        "admin",
    ],
    ...
}
```

----------------------------------------

TITLE: Creating Dimensional Time Series with KQL in Azure Monitor Logs
DESCRIPTION: This query creates a time series with dimensions by aggregating performance counter data. It counts records and groups them by hour, Computer, and CounterName, demonstrating how to create multi-dimensional visualizations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/query-editor/index.md#2025-04-23_snippet_1

LANGUAGE: kusto
CODE:
```
Perf
| where $__timeFilter(TimeGenerated)
| summarize count() by bin(TimeGenerated, 1h), Computer, CounterName
| order by TimeGenerated asc
```

----------------------------------------

TITLE: Advanced Workload Identity Configuration in Grafana Server
DESCRIPTION: INI configuration for advanced Workload Identity settings in Grafana, including tenant ID, client ID, and token file path. These optional settings provide more control over the workload identity authentication process.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_7

LANGUAGE: ini
CODE:
```
[azure]
workload_identity_enabled = true
workload_identity_tenant_id = IDENTITY_TENANT_ID
workload_identity_client_id = IDENTITY_CLIENT_ID
workload_identity_token_file = TOKEN_FILE_PATH
```

----------------------------------------

TITLE: Removing a Grafana Plugin (Bash)
DESCRIPTION: Command 'plugins remove <plugin-id>' uninstalls and removes a specific Grafana plugin, identified by '<plugin-id>', from the Grafana instance.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_18

LANGUAGE: bash
CODE:
```
grafana cli plugins remove <plugin-id>
```

----------------------------------------

TITLE: Enabling Image Screenshot Capture in Grafana Alerting Configuration - Plaintext
DESCRIPTION: This configuration snippet enables image screenshot capture for alert notifications in Grafana by setting the capture option within the [unified_alerting.screenshots] section. This requires either the Grafana image rendering plugin or a remote rendering service to be installed as a prerequisite. Set capture to true to activate; otherwise, screenshots will not be included in notifications. The parameter accepts boolean values and defaults to false if unspecified.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/images-in-notifications.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
# Enable screenshots in notifications. You must have either installed the Grafana image rendering\n# plugin, or set up Grafana to use a remote rendering service.\n# For more information on configuration options, refer to [rendering].\ncapture = false
```

----------------------------------------

TITLE: Querying Usage Insights Logs in Explore via Loki - loki-query
DESCRIPTION: This query retrieves all usage insights logs for a specific Loki datasource in Grafana Explore. To use, enter this expression in the Explore interface after selecting your Loki datasource. The input datasource label ('gdev-loki') should correspond to your configured datasource name in Loki. Output is the set of log entries matching the kind 'usage_insights' for the selected datasource; note results depend on data retention and log volume.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/export-logs.md#2025-04-23_snippet_2

LANGUAGE: loki-query
CODE:
```
{datasource=\"gdev-loki\",kind=\"usage_insights\"}
```

----------------------------------------

TITLE: Enabling Automatic SAML Login in Grafana
DESCRIPTION: This INI configuration snippet sets the `auto_login` option to `true` within the `[auth.saml]` section. This configuration attempts to log the user in automatically via SAML, bypassing the Grafana login screen. This setting is ignored if multiple authentication providers are configured for auto-login.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_6

LANGUAGE: ini
CODE:
```
auto_login = true
```

----------------------------------------

TITLE: Creating Docker Compose File (Bash)
DESCRIPTION: Bash commands to navigate into the target directory and create an empty `docker-compose.yaml` file. This step is a prerequisite before defining the Grafana service configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
# first go into the directory where you have created this docker-compose.yaml file
cd /path/to/docker-compose-directory

# now create the docker-compose.yaml file
touch docker-compose.yaml
```

----------------------------------------

TITLE: Querying Region Annotations with Epoch Times in SQL for Grafana
DESCRIPTION: SQL query example for fetching Grafana region annotations using epoch values for both start (`epoch_time`) and end (`epoch_time_end`) times. It maps these to `time` and `timeend` respectively, selects `metric1` for `text`, and creates comma-separated `tags` from `metric1` and `metric2`. Time filtering is applied to the start time using the `$__unixEpochFilter` macro. Requires a table `public.test_data` with relevant epoch time and metric columns.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_16

LANGUAGE: sql
CODE:
```
SELECT
  epoch_time as time,
  epoch_time_end as timeend,
  metric1 as text,
  concat_ws(', ', metric1::text, metric2::text) as tags
FROM
  public.test_data
WHERE
  $__unixEpochFilter(epoch_time)
```

----------------------------------------

TITLE: Creating a Graphite Data Source with Basic Auth via Grafana API - HTTP
DESCRIPTION: This POST request illustrates creating a Graphite data source with HTTP basic authentication enabled. The body includes basicAuthUser and a secureJsonData object containing basicAuthPassword, which Grafana encrypts before saving. The request requires a bearer authorization token, and on success, the response confirms which secure fields have been encrypted. Inputs are the required data source parameters; output is a confirmation and data source details. Useful for securely storing credentials for data sources requiring basic authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
POST /api/datasources HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  "name": "test_datasource",\n  "type": "graphite",\n  "url": "http://mydatasource.com",\n  "access": "proxy",\n  "basicAuth": true,\n  "basicAuthUser": "basicuser",\n  "secureJsonData": {\n    "basicAuthPassword": "basicpassword"\n  }\n}
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{\n  "datasource": {\n    "id": 1,\n    "orgId": 1,\n    "name": "test_datasource",\n    "type": "graphite",\n    "typeLogoUrl": "",\n    "access": "proxy",\n    "url": "http://mydatasource.com",\n    "password": "",\n    "user": "",\n    "database": "",\n    "basicAuth": true,\n    "basicAuthUser": "basicuser",\n    "basicAuthPassword": "",\n    "withCredentials": false,\n    "isDefault": false,\n    "jsonData": {},\n    "secureJsonFields": {\n      "basicAuthPassword": true\n    },\n    "version": 1,\n    "readOnly": false\n  },\n  "id": 102,\n  "message": "Datasource added",\n  "name": "test_datasource"\n}
```

----------------------------------------

TITLE: Configuring Chrome Binary Path in Grafana Renderer Config - JSON
DESCRIPTION: Defines the chromeBin configuration key in the rendering section of a JSON config file to set the path to the Chrome/Chromium binary for the Grafana Image renderer in remote rendering mode. This configuration is read by the rendering service at startup and overrides the default binary. The file should be placed where the rendering service expects its configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_15

LANGUAGE: json
CODE:
```
{\n  "rendering": {\n    "chromeBin": "/usr/bin/chromium-browser"\n  }\n}
```

----------------------------------------

TITLE: Provisioning Editor Role Permissions via YAML Configuration (yaml)
DESCRIPTION: This YAML snippet is used for declarative provisioning of the Grafana Editor role, combining permissions from both 'basic:editor' and 'fixed:roles:writer'. The configuration sets the 'editor' role as global, sets its version, and defines its permission inheritance, ideal for automated deployments or configuration-as-code. Key fields include role names, global status, version, and permission sources. Requires a supported Grafana provisioning process and compatible provisioning file structure.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_2

LANGUAGE: yaml
CODE:
```
apiVersion: 2

roles:
  - name: 'basic:editor'
    global: true
    version: 3
    from:
      - name: 'basic:editor'
        global: true
      - name: 'fixed:roles:writer'
        global: true
```

----------------------------------------

TITLE: Defining IAM Policy for CloudWatch Logs-Only Access in JSON
DESCRIPTION: This JSON configuration defines an AWS IAM policy granting permissions specifically for Grafana to access CloudWatch Logs and related EC2/tag information. It allows actions such as `logs:DescribeLogGroups`, `logs:StartQuery`, `logs:GetQueryResults`, `ec2:DescribeInstances`, and `tag:GetResources`. Attach this policy to the IAM role or user used by Grafana if only log querying capabilities are needed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "AllowReadingLogsFromCloudWatch",
      "Effect": "Allow",
      "Action": [
        "logs:DescribeLogGroups",
        "logs:GetLogGroupFields",
        "logs:StartQuery",
        "logs:StopQuery",
        "logs:GetQueryResults",
        "logs:GetLogEvents"
      ],
      "Resource": "*"
    },
    {
      "Sid": "AllowReadingTagsInstancesRegionsFromEC2",
      "Effect": "Allow",
      "Action": ["ec2:DescribeTags", "ec2:DescribeInstances", "ec2:DescribeRegions"],
      "Resource": "*"
    },
    {
      "Sid": "AllowReadingResourcesForTags",
      "Effect": "Allow",
      "Action": "tag:GetResources",
      "Resource": "*"
    }
  ]
}
```

----------------------------------------

TITLE: Modifying Test Data Visualization to 'table' using JSON
DESCRIPTION: Modifies the previous JSON data frame definition by changing the 'preferredVisualisationType' in the 'meta' section from 'logs' to 'table'. This demonstrates how the configured correlation links, generated based on the field data (represented by '[...]'), will be displayed within a Grafana Table visualization cell instead of the Logs panel when this data frame structure is used with the TestData source in Explore.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/correlations/use-variables-and-transformations/index.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
[
  {
    "meta": {
      "preferredVisualisationType": "table"
    },
    "fields": [...]
  }
]
```

----------------------------------------

TITLE: Representing a TCP Connection Tuple
DESCRIPTION: Illustrates the 4-part tuple (source IP, source port, destination IP, destination port) that uniquely identifies a TCP connection in the operating system. This concept is relevant for understanding potential ephemeral port exhaustion when load balancing Grafana Live connections between a load balancer and Grafana server instances.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-live.md#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
source ip | source port | destination ip | destination port
```

----------------------------------------

TITLE: Using PanelChrome with Standard and Hover Menus in React
DESCRIPTION: Demonstrates rendering two `PanelChrome` components within a `Stack`. The first shows a standard fixed header with a dropdown menu provided via the `menu` prop. The second example utilizes the `hoverHeader={true}` prop, causing the header and menu to only appear on hover.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<Stack gap={2} alignItems="flex-start" wrap="wrap">
  <PanelChrome
    title="My awesome panel title"
    menu={() => (
       <Menu>
          <Menu.Item label="View" icon="eye" />
          <Menu.Item label="Edit" icon="edit" />
          <Menu.Item label="Share" icon="share-alt" />
          <Menu.Divider />
          <Menu.Item label="Remove" icon="trash-alt" />
        </Menu>
       )}
    description="Here I will put a description that explains a bit more this panel"
    width={400}
    height={200}

>

    {(innerwidth, innerheight) => {
      return (
        <div
          style={{
            width: innerwidth,
            height: innerheight,
            background: 'rgba(230,0,0,0.05)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
          }}
        >
          Content with fixed header
        </div>
      );
    }}

  </PanelChrome>

  <PanelChrome
    title="My awesome panel title"
    menu={() => (
       <Menu>
          <Menu.Item label="View" icon="eye" />
          <Menu.Item label="Edit" icon="edit" />
          <Menu.Item label="Share" icon="share-alt" />
          <Menu.Divider />
          <Menu.Item label="Remove" icon="trash-alt" />
        </Menu>
       )}
    hoverHeader={true}
    description="Here I will put a description that explains a bit more this panel"
    width={400}
    height={200}

>

    {(innerwidth, innerheight) => {
      return (
        <div
          style={{
            width: innerwidth,
            height: innerheight,
            background: 'rgba(230,0,0,0.05)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
          }}
        >
          Content with hoverHeader=true
        </div>
      );
    }}

  </PanelChrome>
</Stack>
```

----------------------------------------

TITLE: Disabling Envelope Encryption via Feature Toggle
DESCRIPTION: To turn off envelope encryption (default in Grafana v9.0+) and revert to the legacy encryption method, add the `disableEnvelopeEncryption` feature toggle to the `[feature_toggles]` section in your Grafana configuration file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
disableEnvelopeEncryption
```

----------------------------------------

TITLE: Retrieving a Grafana Data Source ID by Name via HTTP API
DESCRIPTION: Details the `GET /api/datasources/id/:name` endpoint used to retrieve the numeric ID of a data source given its name. Requires `datasources.id:read` permission with scopes like `datasources:*`, `datasources:name:*`, or `datasources:name:<Name>`. The request includes the data source name in the path parameter and standard headers. The response is a simple JSON object containing only the `id` field of the matching data source.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
GET /api/datasources/id/test_datasource HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "id":1
}
```

----------------------------------------

TITLE: Parsing Durations in Grafana Templates - Go Template
DESCRIPTION: Illustrates using {{ parseDuration }} to convert duration strings like '1h' or '30m' into floating-point numbers representing seconds. Works in Grafana's Go templating environment. Input is duration string, output is the numerical value (in seconds). Only supports valid duration strings recognized by Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_12

LANGUAGE: Go Template
CODE:
```
{{ parseDuration "1h" }}

```

----------------------------------------

TITLE: Retrieving Contact Points via Grafana HTTP API (HTTP)
DESCRIPTION: This HTTP request demonstrates how to list all existing contact points using the GET method against the /api/v1/provisioning/contact-points endpoint. Requires the Bearer token in Authorization, the proper Accept and Content-Type set to application/json. No request body is needed. The response lists all configured contact point objects for alert notifications.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
GET /api/v1/provisioning/contact-points
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Creating a New Organization (Admin API) - HTTP
DESCRIPTION: This HTTP POST request creates a new organization by sending its name in the JSON request body to the /api/orgs endpoint. This action is restricted to server administrators authenticated via Basic Auth, and configuration must allow organization creation. Response will include the new orgId.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_18

LANGUAGE: http
CODE:
```
POST /api/orgs HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n  "name":"New Org."\n}
```

----------------------------------------

TITLE: Applying Grafana Deployment Manifest - kubectl Bash
DESCRIPTION: Applies changes in the 'grafana.yaml' manifest to the cluster, in the 'my-grafana' namespace. Required after configuration file or volume changes. Ensures new mounts and settings take effect in the running deployment.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_34

LANGUAGE: bash
CODE:
```
kubectl apply -f grafana.yaml --namespace=my-grafana

```

----------------------------------------

TITLE: Creating a Grafana API Key via HTTP API (Legacy)
DESCRIPTION: This shell command uses `curl` to send a POST request to the legacy `/api/auth/keys` endpoint in Grafana to create an API key named 'my-api-key' with the 'Viewer' role. Basic authentication (`admin:admin`) is used. The response includes the key ID, name, and the secret key itself.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_0

LANGUAGE: sh
CODE:
```
curl -X POST -H "Content-Type: application/json" -d '{"name": "my-api-key", "role": "Viewer"}' http://admin:admin@localhost:3000/api/auth/keys

# response from the api
{"id":2,"name":"my-api-key","key":"eyJrIjoiTFRSN1RBOVc3SGhjblc0bWZodXZ3MnNDcU92Um5VZUIiLKJuIjoibXktYXBpLWtleSIsImlkIjoxfQ=="}%
```

----------------------------------------

TITLE: Restricting Azure AD OAuth to Specific Groups (INI)
DESCRIPTION: This example sets allowed_groups with a group object ID to restrict Grafana access to users who are members of a particular Microsoft Entra ID group. The group object IDs must be obtained from Azure Portal and the group claim should be configured in the Azure application. Multiple groups can be specified using commas or spaces as separators.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_6

LANGUAGE: ini
CODE:
```
  allowed_groups = 8bab1c86-8fba-33e5-2089-1d1c80ec267d
```

----------------------------------------

TITLE: Assigning a Single Default Grafana Role to All Users (INI)
DESCRIPTION: This INI configuration assigns the 'Viewer' role to every user authenticating via the configured provider. The `role_attribute_path` is set to a literal string 'Viewer' (note the double quotes within single quotes for the literal string in JMESPath). `skip_org_role_sync = false` ensures that this role assignment is applied during login.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/gitlab/index.md#2025-04-23_snippet_5

LANGUAGE: ini
CODE:
```
role_attribute_path = "'Viewer'"
skip_org_role_sync = false
```

----------------------------------------

TITLE: Defining Grafana Data Source and Folder using Terraform
DESCRIPTION: Creates a 'TestData' data source and a folder named 'My Rule Folder' in Grafana using Terraform resources. Requires replacing placeholder names (`<terraform_data_source_name>`, `<terraform_folder_name>`) with desired Terraform resource identifiers. These resources serve as prerequisites for defining alert rules within the specified folder and querying the data source.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_1

LANGUAGE: terraform
CODE:
```
resource "grafana_data_source" "<terraform_data_source_name>" {
    name = "TestData"
    type = "testdata"
}

resource "grafana_folder" "<terraform_folder_name>" {
    title = "My Rule Folder"
}
```

----------------------------------------

TITLE: Removing User Creation Permissions from Admin with Bash, cURL, and jq (bash)
DESCRIPTION: This bash script removes user creation and invitation permissions from the 'basic_grafana_admin' role by fetching its JSON definition over HTTP, stripping metadata, incrementing version, and deleting relevant actions using jq, before uploading the new configuration. Inputs include the API endpoint, Bearer token, jq, and the existing role json. The script modifies the permissions array by removing entries for 'users:create' and 'org.users:add', restricting what the admin role can perform. Always check the output for unintended permission removals.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
# Fetch the role, modify it to remove the undesired permissions and increment its version
curl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' \
  -X GET '<grafana_url>/api/access-control/roles/basic_grafana_admin' | \
  jq 'del(.created)| del(.updated) | del(.permissions[].created) | del(.permissions[].updated) | .version += 1' | \
  jq 'del(.permissions[] | select (.action == "users:create")) | del(.permissions[] | select (.action == "org.users:add" and .scope == "users:*"))' > /tmp/basic_grafana_admin.json

# Update the role
curl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' -H 'Content-Type: application/json' \
  -X PUT-d @/tmp/basic_grafana_admin.json '<grafana_url>/api/access-control/roles/basic_grafana_admin'
```

----------------------------------------

TITLE: Nested Template Variable SQL Query
DESCRIPTION: SQL query that filters hostname results based on another template variable named 'region', demonstrating how to create dependent variables.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/template-variables/index.md#2025-04-23_snippet_3

LANGUAGE: sql
CODE:
```
SELECT hostname FROM host WHERE region IN ($region)
```

----------------------------------------

TITLE: Running Grafana Docker Container - Docker - Bash
DESCRIPTION: This snippet demonstrates the basic usage of the 'docker run' command to start a Grafana container in detached mode, naming the container 'grafana' and mapping the external port 3000 to the container's internal port 3000. Dependencies include Docker installed on the host machine and network access to port 3000. Inputs required are the 'grafana/grafana' image (default credentials: admin/admin); output is a running Grafana monitoring server accessible at http://localhost:3000. No data persistence is configured by default, and configuration is limited without mounting volumes or setting environment variables.
SOURCE: https://github.com/grafana/grafana/blob/main/packaging/docker/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
docker run -d --name=grafana -p 3000:3000 grafana/grafana
```

----------------------------------------

TITLE: Defining Basic LogQL LBAC Rule with Single Label Matcher
DESCRIPTION: Example LogQL query used as an LBAC rule, illustrated in Task 1 and Task 4 for Team A. This rule filters logs or metrics, granting access only to data points that have the label `namespace` with the value `dev`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_2

LANGUAGE: logql
CODE:
```
{namespace="dev"}
```

----------------------------------------

TITLE: Defining Types in TypeScript
DESCRIPTION: Demonstrates best practices for defining types in TypeScript, including explicit function return types.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
// bad
const stringArray = [];

// good
const stringArray: string[] = [];

// bad
function transform(value?: string) {
  if (!value) {
    return undefined;
  }
  return applyTransform(value);
}

// good
function transform(value?: string): TransformedValue | undefined {
  if (!value) {
    return undefined;
  }
  return applyTransform(value);
}
```

----------------------------------------

TITLE: Restarting Grafana Service with Homebrew (macOS)
DESCRIPTION: Restarts the Grafana service managed by Homebrew on macOS. Useful for applying configuration changes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_15

LANGUAGE: bash
CODE:
```
brew services restart grafana
```

----------------------------------------

TITLE: Forcing Group Fetching via Microsoft Graph API in Grafana - INI
DESCRIPTION: This INI snippet sets the force_use_graph_api configuration option to true, instructing Grafana to always retrieve group membership information from the Microsoft Graph API rather than relying on the id_token from Entra ID. No dependencies aside from a properly configured Grafana and Microsoft Graph API permissions are required. Set this option when experiencing group claim overages or to ensure the freshest group data on every login; place it in the relevant authentication section of your Grafana INI configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_10

LANGUAGE: ini
CODE:
```
force_use_graph_api = true
```

----------------------------------------

TITLE: Configuring RTK API Client Schema - TypeScript
DESCRIPTION: Configuration example for updating the schema file path in the RTK API client generation script. Shows how to map an endpoint file to its corresponding OpenAPI schema.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/tests/apis/openapi_snapshots/README.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
'../public/app/features/dashboards/api/endpoints.gen.ts': {
  schemaFile: '../data/openapi/dashboard.grafana.app-v0alpha1.json',
}
```

----------------------------------------

TITLE: Creating a Tag Values Query in InfluxDB for Template Variables
DESCRIPTION: Query to fetch all values for the hostname tag in InfluxDB, used to populate a template variable dropdown in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/template-variables/index.md#2025-04-23_snippet_0

LANGUAGE: sql
CODE:
```
SHOW TAG VALUES WITH KEY = "hostname"
```

----------------------------------------

TITLE: Capturing Browser Output - JSON
DESCRIPTION: Enables the dumpio option in the rendering service JSON configuration to pipe browser process output back to the main service log. This is intended for advanced troubleshooting scenarios and is not recommended for normal operation due to large output size.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_28

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "dumpio": true
  }
}
```

----------------------------------------

TITLE: Updating SSO Settings for a Provider via HTTP API in HTTP
DESCRIPTION: Explains how to update settings for a specified SSO provider using a HTTP PUT request to /api/v1/sso-settings/:provider. Requires a bearer token and 'settings:write' permission. The request payload must contain a 'settings' object with all relevant configuration. Grafana validates and applies the changes without a restart. The successful response returns status 204 with no body. Ensure that the provider name in the URL matches the intended target.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/sso-settings.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
PUT /api/v1/sso-settings/github HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  "settings": {\n    "apiUrl": "https://api.github.com/user",\n    "clientId": "my_github_client",\n    "clientSecret": "my_github_secret",\n    "enabled": true,\n    "scopes": "user:email,read:org"\n  }\n}
```

LANGUAGE: http
CODE:
```
HTTP/1.1 204\nContent-Type: application/json
```

----------------------------------------

TITLE: Using Mock Objects in Grafana Tests
DESCRIPTION: Example of using mocked objects in tests to control responses. Shows setting up expectations with On(), handling different return values, and asserting that expectations were met.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/style-guide.md#2025-04-23_snippet_4

LANGUAGE: go
CODE:
```
objectToReturn := Object{Message: "abc"}
errToReturn := errors.New("my error")

myMock := &MockImplementation{}
defer myMock.AssertExpectations(t)

myMock.On("Get", mock.Anything, "id1").Return(Object{}, errToReturn).Once()
myMock.On("Get", mock.Anything, "id2").Return(objectToReturn, nil).Once()

anyService := NewService(myMock)

resp, err := anyService.Call("id1")
assert.Error(t, err, errToReturn)

resp, err = anyService.Call("id2")
assert.Nil(t, err)
assert.Equal(t, resp.Message, objectToReturn.Message)
```

----------------------------------------

TITLE: Retrieving SSO Settings for a Provider via HTTP API in HTTP
DESCRIPTION: Shows how to obtain the SSO settings for a specific provider using a HTTP GET request to /api/v1/sso-settings/:provider. Requires a valid authorization token and the 'settings:read' permission. The response gives the configuration details for the requested provider, or an error if not found. Ideal for integration scripts and GUIs that need to display current SSO configuration for a single provider.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/sso-settings.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
GET /api/v1/sso-settings/github HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\nETag: db87f729761898ee\n{\n  "id":        "1",\n  "provider":  "github",\n  "settings": {\n    "apiUrl": "https://api.github.com/user",\n    "clientId": "my_github_client",\n    "clientSecret": "*********",\n    "enabled": true,\n    "scopes": "user:email,read:org"\n    // rest of the settings\n  },\n  "source":    "system",\n}
```

----------------------------------------

TITLE: Correct SAML Group Attribute Formatting for Grafana Team Sync
DESCRIPTION: This XML snippet illustrates the required format for a SAML attribute containing user groups intended for Grafana Team Sync. Each group membership must be provided as a distinct `saml2:AttributeValue` element within the `saml2:Attribute`. Including multiple groups within a single, delimited `AttributeValue` is not supported.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_7

LANGUAGE: xml
CODE:
```
<saml2:Attribute ...>
    <saml2:AttributeValue ...>admins_group</saml2:AttributeValue>
    <saml2:AttributeValue ...>division_1</saml2:AttributeValue>
</saml2:Attribute>
```

----------------------------------------

TITLE: Submitting HTTP PUT Request to Update Team Preferences - HTTP
DESCRIPTION: This snippet shows an HTTP PUT request to the Grafana API endpoint for modifying team preferences, including authorization headers and JSON body fields. Dependencies include having appropriate API permissions and a valid Bearer token. The request body parameters are: "theme" (options: 'light', 'dark', or ''), "homeDashboardId" (dashboard numeric ID), and "timezone" ('utc', 'browser', or ''). Omitting a field resets it to the system default. The expected output is a success response if permissions and data are valid.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_20

LANGUAGE: http
CODE:
```
PUT /api/teams/2/preferences HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  "theme": "dark",\n  "homeDashboardId": 39,\n  "timezone": "utc"\n}
```

----------------------------------------

TITLE: List User Permissions Request
DESCRIPTION: GET request to retrieve permissions for a specific user by ID. Requires users.permissions:read permission.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_17

LANGUAGE: http
CODE:
```
GET /api/access-control/users/1/permissions
Accept: application/json
```

----------------------------------------

TITLE: Showing Result of Inner Join on SQL-like Data
DESCRIPTION: This Markdown table displays the outcome of applying an inner join transformation to the 'Students' and 'Enrollments' tables. The join uses the 'StudentID' field, including only students who have corresponding entries in the enrollments table.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_20

LANGUAGE: markdown
CODE:
```
| StudentID | Name    | Major            | CourseID | Grade |
| --------- | ------- | ---------------- | -------- | ----- |
| 1         | John    | Computer Science | CS101    | A     |
| 1         | John    | Computer Science | CS102    | B     |
| 2         | Emily   | Mathematics      | MATH201  | A     |
| 3         | Michael | Physics          | PHYS101  | B     |
```

----------------------------------------

TITLE: Uninstalling Grafana OSS via APT - Shell
DESCRIPTION: Removes the grafana OSS package and its installed files using the apt package manager. Input: None. Output: Grafana OSS uninstalled. Does not remove user data or repository sources.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_15

LANGUAGE: shell
CODE:
```
sudo apt-get remove grafana
```

----------------------------------------

TITLE: Increasing Node.js Heap Size Limit (Bash/Unix)
DESCRIPTION: Exports the `NODE_OPTIONS` environment variable for the current shell session on Unix-like systems (Linux, macOS). It sets the `--max-old-space-size` flag to 8192, instructing Node.js processes launched from this session to use a maximum heap size of 8192 MB (8 GB). This can resolve 'JavaScript heap out of memory' errors, but the change applies only to the current session.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_21

LANGUAGE: bash
CODE:
```
export NODE_OPTIONS="--max-old-space-size=8192"
```

----------------------------------------

TITLE: Formatting Grafana Variables as URL Query Parameters
DESCRIPTION: Illustrates the `:queryparam` format option. This formats single or multi-valued variables into a URL query string representation. For multi-value variables, the parameter name is repeated for each value, joined by `&` (e.g., `var-name=value1&var-name=value2`). The example shows `["test1", "test2"]` interpolated as `"var-servers=test1&var-servers=test2"`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
servers = ["test1", "test2"]
String to interpolate: '${servers:queryparam}'
Interpolation result: "var-servers=test1&var-servers=test2"
```

----------------------------------------

TITLE: Upgrading Grafana Helm Release to Install Plugins - Bash
DESCRIPTION: This bash command upgrades the Grafana Helm release using the specified values.yaml, triggering installation of newly added plugins. It requires Helm CLI, access to the Kubernetes cluster, and assumes the plugins are listed in the given YAML file. The command takes a customized values.yaml, applies it, and installs/upgrades release 'my-grafana' in the 'monitoring' namespace.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_15

LANGUAGE: bash
CODE:
```
helm upgrade my-grafana grafana/grafana -f values.yaml -n monitoring
```

----------------------------------------

TITLE: Revoking Team Role Assignment - Grafana Access Control HTTP API - HTTP
DESCRIPTION: Presents an example HTTP DELETE request to remove a specific role from a team based on the team and role UIDs in the endpoint path. Required scope is 'teams.roles:remove' with 'permissions:type:delegate' for privilege governance. JSON response is expected, and Accept header is set.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_36

LANGUAGE: http
CODE:
```
DELETE /api/access-control/teams/1/roles/AFUXBHKnk
Accept: application/json
```

----------------------------------------

TITLE: Listing All Reports via Grafana Reporting API - HTTP
DESCRIPTION: This HTTP code snippet demonstrates how to list all available reports from the Grafana Reporting API by sending a GET request to the /api/reports endpoint. The snippet includes necessary HTTP headers for authentication and content type, with a focus on obtaining data in JSON format. Requires an authentication bearer token and sufficient read permissions on reports.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/reports HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Defining Folder Scopes in Grafana RBAC
DESCRIPTION: Specifies scopes to restrict actions to a set of folders. `folders:*` matches any folder, while `folders:uid:1` targets the specific folder with UID 1. Permissions granted to a folder cascade down to its subfolders.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_31

LANGUAGE: text
CODE:
```
folders:*
```

LANGUAGE: text
CODE:
```
folders:uid:*
```

----------------------------------------

TITLE: Adding a Query to Grafana Query History (HTTP Response)
DESCRIPTION: This snippet illustrates a successful HTTP 200 OK response after adding a query to the history. The JSON body contains the details of the newly added query history entry, including its UID, associated data source, creation timestamp, and the original query details.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
{
  "result": {
    "uid": "Ahg678z",
    "datasourceUid": "PE1C5CBDA0504A6A3",
    "createdBy": 1,
    "createdAt": 1643630762,
    "starred": false,
    "comment": "",
    "queries": [
      {
        "refId": "A",
        "key": "Q-87fed8e3-62ba-4eb2-8d2a-4129979bb4de-0",
        "scenarioId": "csv_content",
        "datasource": {
            "type": "testdata",
            "uid": "PD8C576611E62080A"
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Scaffolding a Grafana Plugin using create-plugin (Shell)
DESCRIPTION: Executes the `@grafana/create-plugin` CLI tool via `npx` to interactively create a starter Grafana plugin project. The command fetches the latest version of the tool and prompts the user for details like plugin type (e.g., datasource) and name. Requires Node.js and npx to be installed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/create-plugin.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
npx @grafana/create-plugin@latest
```

----------------------------------------

TITLE: Using $__interval Variable in rate Function with PromQL
DESCRIPTION: Example of using the $__interval variable with the rate function to calculate the rate of change for HTTP requests based on the dashboard's time range.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/template-variables/index.md#2025-04-23_snippet_3

LANGUAGE: PromQL
CODE:
```
rate(http_requests_total[$__interval])
```

----------------------------------------

TITLE: Configuring Isolated Grafana Teams via INI
DESCRIPTION: This INI configuration snippet, intended for the Grafana configuration file, sets up Grafana for isolated teams. It achieves this by setting the default organization role assigned to new users (`auto_assign_org_role`) to `None`, meaning users have no default viewing permissions. The `role_attribute_path` uses a JMESPath expression to assign the 'Admin' role if a user belongs to an 'admin' group, otherwise assigns 'None'. This configuration is presented as an example within comments.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/team-management/configure-grafana-teams.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
```ini
auto_assign_org_role = None
role_attribute_path = contains(groups[*], 'admin') && 'Admin' || 'None'
```
```

----------------------------------------

TITLE: Server Response for Dashboard Deletion in HTTP/JSON
DESCRIPTION: Example of a successful response from the server after deleting a dashboard. The response includes the title of the deleted dashboard, a confirmation message, and the dashboard ID. This confirms the dashboard was successfully removed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "title": "Production Overview",
  "message": "Dashboard Production Overview deleted",
  "id": 2
}
```

----------------------------------------

TITLE: Provisioning Basic Elasticsearch Data Source using YAML
DESCRIPTION: Provides a basic example of provisioning an Elasticsearch data source in Grafana using YAML configuration. It defines the data source name, type, access method (proxy), URL, and essential `jsonData` parameters like the index pattern (`index`), the expected index interval (`interval`), and the field containing timestamps (`timeField`). This configuration is used within Grafana's provisioning system.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/elasticsearch/_index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: Elastic
    type: elasticsearch
    access: proxy
    url: http://localhost:9200
    jsonData:
      index: '[metrics-]YYYY.MM.DD'
      interval: Daily
      timeField: '@timestamp'
```

----------------------------------------

TITLE: Displaying PanelChrome Loading, Streaming, and Error States in React
DESCRIPTION: Provides examples of rendering `PanelChrome` in various data states using a `Stack` layout. The first panel demonstrates the 'Loading' state using `loadingState={LoadingState.Loading}`. The second shows the 'Streaming' state with `loadingState={LoadingState.Streaming}`. The third example illustrates an error state by setting the `statusMessage` prop and handling clicks via `statusMessageOnClick`.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
<Stack gap={2} alignItems="flex-start" wrap="wrap">
  <PanelChrome
    title="My awesome panel title"
    loadingState={LoadingState.Loading}
    width={400}
    height={200}

>

    {(innerwidth, innerheight) => {
      return (
        <div
          style={{
            width: innerwidth,
            height: innerheight,
            background: 'rgba(230,0,0,0.05)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
          }}
        >
          Data is loading
        </div>
      );
    }}

  </PanelChrome>

  <PanelChrome
    title="My awesome panel title"
    loadingState={LoadingState.Streaming}
    width={400}
    height={200}
  >

    {(innerwidth, innerheight) => {
      return (
        <div
          style={{
            width: innerwidth,
            height: innerheight,
            background: 'rgba(230,0,0,0.05)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
          }}
        >
          Data is Streaming
        </div>
      );
    }}

  </PanelChrome>

  <PanelChrome
    title="My awesome panel title"
    statusMessage='Error text'
    statusMessageOnClick={action('ErrorIndicator: onClick fired')}
    width={400}
    height={200}
  >

    {(innerwidth, innerheight) => {
      return (
        <div
          style={{
            width: innerwidth,
            height: innerheight,
            background: 'rgba(230,0,0,0.05)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
          }}
        >
          There is an error
        </div>
      );
    }}

  </PanelChrome>
</Stack>
```

----------------------------------------

TITLE: Setting Default Browser Language - JSON
DESCRIPTION: Uses rendering.acceptLanguage in JSON config to define the browser's Accept-Language header. This setting determines language preferences during rendering and must follow Accept-Language formatting. Useful for multi-lingual dashboards.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_38

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "acceptLanguage": "fr-CH, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5"
  }
}
```

----------------------------------------

TITLE: Configuring Grafana Debug Logging in Docker Compose (YAML)
DESCRIPTION: Illustrates a `docker-compose.yaml` configuration snippet for running Grafana Enterprise with debug logging enabled. The `GF_LOG_LEVEL` environment variable is set to `debug` under the `environment` section of the `grafana` service definition.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_17

LANGUAGE: yaml
CODE:
```
version: '3.8'
services:
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    environment:
      # increases the log level from info to debug
      - GF_LOG_LEVEL=debug
    ports:
      - '3000:3000'
    volumes:
      - 'grafana_storage:/var/lib/grafana'
volumes:
  grafana_storage: {}
```

----------------------------------------

TITLE: Inspecting Limits for a Running Process on Linux
DESCRIPTION: This shell command displays the current resource limits for a specific running process (identified by its PID) on Linux systems by reading the `/proc` filesystem. It's useful for verifying the applied open file limit for a running Grafana instance.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-live.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
cat /proc/<PROCESS_PID>/limits
```

----------------------------------------

TITLE: Configuring Kafka Contact Point - YAML
DESCRIPTION: Configures Kafka as an alert notification target in Grafana. Requires both 'kafkaRestProxy' and 'kafkaTopic' parameters to send messages. Input fields specify the Kafka REST Proxy endpoint and desired topic. Outputs Grafana alerts as Kafka messages via proxy. Assumes Kafka REST Proxy is deployed and accessible.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_9

LANGUAGE: yaml
CODE:
```
type: kafka\nsettings:\n  # <string, required>\n  kafkaRestProxy: http://localhost:8082\n  # <string, required>\n  kafkaTopic: topic1\n
```

----------------------------------------

TITLE: Defining Plugin Scopes in Grafana RBAC
DESCRIPTION: Specifies scopes to restrict actions to a set of plugins. `plugins:*` matches all plugins, while `plugins:id:grafana-oncall-app` targets the specific Grafana OnCall plugin.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_37

LANGUAGE: text
CODE:
```
plugins:*
```

LANGUAGE: text
CODE:
```
plugins:id:*
```

----------------------------------------

TITLE: Provisioning Parca Data Source in Grafana YAML Configuration
DESCRIPTION: Example YAML configuration for provisioning the Parca data source in Grafana. It specifies the API version, data source name, type, and URL.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/parca.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: Parca
    type: parca
    url: http://localhost:3100
```

----------------------------------------

TITLE: Describing /api/ds/query Workflow Using Mermaid Diagrams (Mermaid)
DESCRIPTION: This Mermaid sequence diagram illustrates the workflow for the legacy /api/ds/query API in Grafana. It visualizes the interactions between the user, API, storage, datasource plugin, and expression engine, mapping out branching logic for handling queries with and without expressions. No external dependencies are necessary except for the Mermaid rendering environment; it takes no runtime inputs, and outputs a visual call flow. The diagram highlights the parsing, datasource config retrieval, conditional logic along expressions and datasources, and eventual return of results.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/registry/apis/query/README.md#2025-04-23_snippet_0

LANGUAGE: mermaid
CODE:
```
sequenceDiagram\n    autonumber\n    actor User as User or Process\n    participant api as /api/ds/query\n    participant db as Storage<br/> (SQL)\n    participant ds as Datasource<br/>Plugin\n    participant expr as Expression<br/>Engine\n\n    User->>api: POST Query\n    loop Each query\n        api->>api: Parse query\n        api->>db: Get ds config<br>and secrets\n        db->>api: \n    end\n    alt No expressions\n      alt Single datasource\n          api->>ds: QueryData\n      else Multiple datasources\n        loop Each datasource (concurrently)\n          api->>ds: QueryData\n        end\n        api->>api: Wait for results\n      end\n    else Expressions exist\n        api->>expr: Calculate expressions graph\n        loop Each node (eg, refID)\n          alt Is query\n              expr->>ds: QueryData\n          else Is expression\n            expr->>expr: Process\n          end\n        end\n    end\n    api->>User: return results
```

----------------------------------------

TITLE: Updating Alert Rule Group - Grafana REST HTTP Endpoint - http
DESCRIPTION: Defines the HTTP PUT route for updating an alert rule group in Grafana provisioning. The endpoint expects folder and group identifiers as path parameters and a body that includes the set of alert rules to assign to the group. This call is idempotent; rules supplied replace any existing group configuration. Requires the `PUT /api/v1/provisioning/folder/:folderUid/rule-groups/:group` endpoint and an appropriate request body. Inputs: folderUid, group (path), request body. Output: updated AlertRuleGroup object or ValidationError (on failure). Requires authorization and, optionally, the `X-Disable-Provenance` header for UI resource editing.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_35

LANGUAGE: http
CODE:
```
PUT /api/v1/provisioning/folder/:folderUid/rule-groups/:group
```

----------------------------------------

TITLE: Creating and Using a Tracer for Distributed Tracing in Go
DESCRIPTION: Demonstrates how to create and use a Tracer for distributed tracing using OpenTelemetry. It shows how to create spans, add events and attributes, and handle errors in the context of tracing.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/instrumentation.md#2025-04-23_snippet_2

LANGUAGE: go
CODE:
```
import (
   "fmt"

   "github.com/grafana/grafana/pkg/infra/tracing"
   "go.opentelemetry.io/otel/attribute"
   "go.opentelemetry.io/otel/trace"
)

type MyService struct {
   tracer tracing.Tracer
}

func ProvideService(tracer tracing.Tracer) *MyService {
   return &MyService{
      tracer: tracer,
   }
}

func (s *MyService) Hello(ctx context.Context, name string) (string, error) {
   ctx, span := s.tracer.Start(ctx, "MyService.Hello", trace.WithAttributes(
      attribute.String("my_attribute", "val"),
   ))
   defer span.End()

   span.AddEvent("checking name...")

   if name == "" {
      err := fmt.Errorf("name cannot be empty")
      return "", tracing.Errorf(span, "failed to check name: %w", err)
   }

   span.AddEvent("name checked")

   span.SetAttributes(
      attribute.String("my_service.name", name),
      attribute.Int64("my_service.some_other", int64(1337)),
   )

   return fmt.Sprintf("Hello %s", name), nil
}
```

----------------------------------------

TITLE: Defining a Read-Only Custom Role for Alert Rules in a Specific Folder via Grafana RBAC API
DESCRIPTION: This JSON payload is used with the `PUT access-control/roles` Grafana API endpoint to define a custom role named `custom:alert_rules_reader`. The role grants read-only access permissions (`alert.rules:read` and `folders:read`) specifically limited to the resources within the folder identified by `UID_F`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/access-roles/index.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
PUT access-control/roles
{
	"name": "custom:alert_rules_reader",
	"displayName": "Alert rule reader in folder F",
	"description": "Read access to rules in folder F that use DS1 and DS2",
	"permissions": [
    	{
        	"action": "alert.rules:read",
        	"scope": "folders:uid:UID_F"
    	},
    	{
        	"action": "folders:read",
        	"scope": "folders:uid:UID_F"
    	}
	]
}
```

----------------------------------------

TITLE: Retrieving Prometheus Metrics with cURL (Linux/MacOS, Bash)
DESCRIPTION: This code snippet uses curl to request the '/metrics' HTTP endpoint from a local Prometheus instance. It retrieves all current metrics and metadata in Prometheus' text exposition format. Assumes Prometheus is running and listening on port 9090. The response provides a list of all metrics collected and exposed by Prometheus on the instance.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_22

LANGUAGE: bash
CODE:
```
curl http://localhost:9090/metrics
```

----------------------------------------

TITLE: Rendering Legacy PanelChrome Loading Indicator (Pre-v9.4.0) in React
DESCRIPTION: Displays a rendered example of the older `PanelChrome` loading indicator pattern, used before Grafana v9.4.0. It utilizes the `leftItems` prop to include a `PanelChrome.LoadingIndicator` component, setting its `loading` state to true and providing a cancel handler via `onCancel`.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_6

LANGUAGE: tsx
CODE:
```
<PanelChrome
  title="My awesome panel title"
  leftItems={[
    <PanelChrome.LoadingIndicator
      loading={true}
      onCancel={action('CancelQuery: onClick fired')}
      key="loading-indicator"
    />,
  ]}
  width={400}
  height={200}
>
  {(innerwidth, innerheight) => {
    return (
      <div
        style={{
          width: innerwidth,
          height: innerheight,
          background: 'rgba(230,0,0,0.05)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        Content
      </div>
    );
  }}
</PanelChrome>
```

----------------------------------------

TITLE: Port-Forwarding Grafana Service for Local Access (Bash)
DESCRIPTION: This command uses `kubectl port-forward` to establish a connection between the local machine's port 3000 and the Grafana service's port 3000 running within the Kubernetes cluster. This allows accessing the Grafana UI via `localhost:3000` in a web browser for verification purposes. Requires `kubectl` and the Grafana service (`service/grafana`) to be running.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_45

LANGUAGE: bash
CODE:
```
kubectl port-forward service/grafana 3000:3000
```

----------------------------------------

TITLE: Grafana Dashboard Provisioning Configuration
DESCRIPTION: YAML configuration for provisioning dashboards from filesystem structure into Grafana, enabling automatic folder creation based on filesystem hierarchy.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md#2025-04-23_snippet_6

LANGUAGE: yaml
CODE:
```
apiVersion: 1

providers:
  - name: dashboards
    type: file
    updateIntervalSeconds: 30
    options:
      path: /etc/dashboards
      foldersFromFilesStructure: true
```

----------------------------------------

TITLE: Reading Grafana Data Sources (Plaintext)
DESCRIPTION: Defines the `datasources:read` permission action needed to list or read details about data sources in Grafana. This is related to data source scopes `datasources:*` and `datasources:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_24

LANGUAGE: plaintext
CODE:
```
`datasources:read`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>
```

----------------------------------------

TITLE: Creating Dedicated Prometheus User (Linux)
DESCRIPTION: This command uses 'sudo' and 'useradd' to create a dedicated system user named 'prometheus' without a home directory and with a non-login shell ('/bin/false'). Running Prometheus under a dedicated, non-privileged user is a recommended security practice.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
sudo useradd --no-create-home --shell /bin/false prometheus
```

----------------------------------------

TITLE: Embedding License JWT Directly in Grafana INI (Bash)
DESCRIPTION: Places the entire signed JWT license content directly into the Grafana INI file under the license_text property, enabling license provisioning without filesystem files. Useful for automation or ephemeral deployments. The value must be a valid JWT string. No output is produced; correct license content is required for Grafana Enterprise features to be enabled.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/_index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
[enterprise]\nlicense_text = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0aGlzIjoiaXMiLCJub3QiOiJhIiwidmFsaWQiOiJsaWNlbnNlIn0.bxDzxIoJlYMwiEYKYT_l2s42z0Y30tY-6KKoyz9RuLE
```

----------------------------------------

TITLE: Enforcing Domain Verification in Grafana Server using TOML
DESCRIPTION: Configures the `enforce_domain` setting in the `[server]` section (note: original text contains typo '[sever]') of `grafana.ini`. Setting this to `true` makes Grafana redirect requests if the `Host` header doesn't match the configured Grafana domain (`root_url`), helping to mitigate DNS rebinding attacks.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-security-hardening/index.md#2025-04-23_snippet_6

LANGUAGE: toml
CODE:
```
[sever]
# Redirect to correct domain if host header does not match domain
# Prevents DNS rebinding attacks
enforce_domain = true
```

----------------------------------------

TITLE: Factory Function with Context-Aware Resolver, Documented with Param and Returns Tags - TypeScript
DESCRIPTION: This well-documented TypeScript function uses TSDoc to explain its behavior, parameter, and return type. It takes a Context argument, checks if the execution is server-side, and returns a FileResolver or HttpResolver accordingly. Dependencies include TypeScript types for Context, IResolver, FileResolver, and HttpResolver. The snippet illustrates the use of @param for input details and @returns for output description, fulfilling best documentation practices.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/code-comments.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
/**
 * Helps to create a resource resolver depending
 * on the current execution context.
 *
 * @param context - The current execution context.
 * @returns FileResolver if executed on the server otherwise a HttpResolver.
 * @public
 **/
export const factory = (context: Context): IResolver => {
  if (context.isServer) {
    return new FileResolver();
  }
  return new HttpResolver();
};
```

----------------------------------------

TITLE: Port-Forwarding Grafana Service using Bash
DESCRIPTION: Establishes a port forward from the local machine's port 3000 to the Grafana service's port 3000 within the 'my-grafana' namespace using `kubectl port-forward`. This allows accessing the Grafana UI via `localhost:3000` in a web browser, particularly useful when an ExternalIP is not available (e.g., in local clusters like minikube or when using a ClusterIP service type). Requires `kubectl` installed and configured.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
kubectl port-forward service/grafana 3000:3000 --namespace=my-grafana
```

----------------------------------------

TITLE: Getting an Alert Rule by UID via Grafana Provisioning API (HTTP)
DESCRIPTION: Defines the `GET` request endpoint `/api/v1/provisioning/alert-rules/:uid` to retrieve a specific Grafana alert rule. The `UID` path parameter identifies the alert rule. A successful request returns a 200 OK status with the `ProvisionedAlertRule` object, while a 404 Not Found status is returned if the specified alert rule does not exist.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_14

LANGUAGE: plaintext
CODE:
```
GET /api/v1/provisioning/alert-rules/:uid
```

----------------------------------------

TITLE: Retrieving Library Element by Name Response Example (HTTP/JSON)
DESCRIPTION: Example HTTP 200 OK response for the 'Get library element by name' request. The JSON body contains an array of matching library element objects within the `result` field, as multiple elements might share the same name (e.g., in different folders).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_5

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
    "result": [
        {
            "id": 25,
            "orgId": 1,
            "folderId": 0,
            "uid": "V--OrYHnz",
            "name": "API docs Example",
            "kind": 1,
            "type": "text",
            "description": "",
            "model": {...},
            "version": 1,
            "meta": {
                "folderName": "General",
                "folderUid": "",
                "connectedDashboards": 1,
                "created": "2021-09-27T09:56:17+02:00",
                "updated": "2021-09-27T09:56:17+02:00",
                "createdBy": {
                    "id": 1,
                    "name": "admin",
                    "avatarUrl": "/avatar/46d229b033af06a191ff2267bca9ae56"
                },
                "updatedBy": {
                    "id": 1,
                    "name": "admin",
                    "avatarUrl": "/avatar/46d229b033af06a191ff2267bca9ae56"
                }
            }
        }
    ]
}
```

----------------------------------------

TITLE: Verifying Grafana Service Connectivity with Curl (Bash)
DESCRIPTION: Executes a `curl` command against a specific Grafana service IP address and port (e.g., obtained via `minikube service`) to confirm that the endpoint is reachable and responding. A successful connection typically returns an HTML snippet indicating a redirect to the login page.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
curl 192.168.122.144:32182
```

----------------------------------------

TITLE: Grouping with Null Fill Parameter and Labels (Per Host) - SQL
DESCRIPTION: Aggregates 'value_double' with sum for each 'hostname' over 5-minute intervals, using the fill parameter in $__timeGroupAlias to substitute zeros for nulls. Results in distinct series for each hostname in Grafana's graph panel. Requires 'createdAt', 'value_double', and 'hostname' fields.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_10

LANGUAGE: sql
CODE:
```
SELECT
  $__timeGroupAlias(createdAt,'5m',0),
  sum(value_double) as value,
  hostname
FROM test_data
WHERE
  $__timeFilter(createdAt)
GROUP BY time, hostname
ORDER BY time
```

----------------------------------------

TITLE: Configuring Team Sync for Google OAuth in Grafana
DESCRIPTION: Configuration example for setting up team synchronization with Google groups. It shows how to add the required Cloud Identity API scope to the Grafana configuration file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/google/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
[auth.google]
# ..
scopes = openid email profile https://www.googleapis.com/auth/cloud-identity.groups.readonly
```

----------------------------------------

TITLE: Grafana Server systemd Unit Configuration - INI
DESCRIPTION: Defines a systemd unit file for Grafana Server. Configures unit metadata, user and group context, start command with config/homepath, and behavior on restart. Required for systemd-based service management. Dependencies: systemd, configured Grafana binary and config files. Input: none; file must be placed at /etc/systemd/system/grafana-server.service. Output: controls Grafana process lifecycle.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_9

LANGUAGE: ini
CODE:
```
[Unit]
Description=Grafana Server
After=network.target

[Service]
Type=simple
User=grafana
Group=users
ExecStart=/usr/local/grafana/bin/grafana server --config=/usr/local/grafana/conf/grafana.ini --homepath=/usr/local/grafana
Restart=on-failure

[Install]
WantedBy=multi-user.target
```

----------------------------------------

TITLE: Configuring Managed Identity in Grafana Server Configuration
DESCRIPTION: INI configuration for enabling Managed Identity in Grafana's server configuration. This setting is needed to allow Grafana to use Azure Managed Identity for authentication to Azure services.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_4

LANGUAGE: ini
CODE:
```
[azure]
managed_identity_enabled = true
```

----------------------------------------

TITLE: Enabling Experimental Layers in Grafana Configuration
DESCRIPTION: This YAML snippet shows how to enable experimental (alpha) layers in the Grafana configuration file by setting the 'enable_alpha' option to true under the 'panels' section.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/geomap/index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
[panels]
enable_alpha = true
```

----------------------------------------

TITLE: Retrieving a Single Correlation in Grafana HTTP API
DESCRIPTION: HTTP request for retrieving details of a specific correlation identified by source data source UID and correlation UID. This returns the complete correlation configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
GET /api/datasources/uid/uyBf2637k/correlations/J6gn7d31L HTTP/1.1
Accept: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Response for Service Account Token Deletion in Grafana (HTTP)
DESCRIPTION: The HTTP response after successfully deleting a service account token provides a confirmation message.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_13

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
	"message": "API key deleted"
}
```

----------------------------------------

TITLE: Formatting Grafana Variables as JSON Array String
DESCRIPTION: Illustrates the `:json` format option. This formats multi-value variables into a string representation of a JSON array. The example shows `['test1', 'test2']` interpolated as `'["test1", "test2"]'`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
servers = ['test1', 'test2']
String to interpolate: '${servers:json}'
Interpolation result: '["test1", "test2"]'
```

----------------------------------------

TITLE: Configuring Allow and Deny Lists for Grafana Server Egress Requests in TOML
DESCRIPTION: This snippet configures Grafana to block or allow outgoing requests based on specified hostnames or IP addresses. The 'host_deny_list' parameter defines addresses that are always blocked, while 'host_allow_list' permits only the listed addresses and denies all others if any entries are present. These options are placed under the '[security.egress]' section in the TOML configuration file. Input parameters are space-separated lists of hostnames or IPs, and proper configuration enhances control over network egress from the server.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-request-security.md#2025-04-23_snippet_0

LANGUAGE: TOML
CODE:
```
[security.egress]
# A list of hostnames or IP addresses separated by spaces for which requests are blocked.
host_deny_list = supersecret.internal 192.168.1.10
# a list of hostnames or IP addresses separated by spaces for which requests will be allowed, all other requests will be blocked
host_allow_list = prometheus.internal

```

----------------------------------------

TITLE: Deleting Grafana Dashboards (Plaintext)
DESCRIPTION: Defines the `dashboards:delete` permission action needed to delete one or more dashboards in Grafana. Access is related to dashboard and folder scopes including `dashboards:*`, `dashboards:uid:*`, `folders:*`, and `folders:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_7

LANGUAGE: plaintext
CODE:
```
`dashboards:delete`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`dashboards:*`</li><li>`dashboards:uid:*`</li><li>`folders:*`</li><li>`folders:uid:*`</li></ul>
```

----------------------------------------

TITLE: Wire-Generated Initialization Code in Go
DESCRIPTION: Shows the initialization code generated by Wire based on the provided injector function.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_8

LANGUAGE: go
CODE:
```
func InitializeEvent() Event {
    message := NewMessage()
    greeter := NewGreeter(message)
    event := NewEvent(greeter)
    return event
}
```

----------------------------------------

TITLE: Creating YAML Manifest File using Bash
DESCRIPTION: Creates an empty file named `grafana.yaml` in the current directory using the standard Unix `touch` command. This file will subsequently be populated with the Kubernetes resource definitions (PVC, Deployment, Service) needed to deploy Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
touch grafana.yaml
```

----------------------------------------

TITLE: Configuring AWS License Validation via grafana.ini
DESCRIPTION: Configures Grafana Enterprise to validate its license against AWS License Manager instead of Grafana Labs by editing the `grafana.ini` file (managed via a ConfigMap). This requires setting `license_validation_type` to `aws` within the `[enterprise]` section. Appropriate IAM permissions must be granted to the EKS node or pod execution role beforehand.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-eks/index.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
[enterprise]
license_validation_type=aws
```

----------------------------------------

TITLE: Resetting Admin Password for Homebrew Installation (Bash)
DESCRIPTION: Provides the specific command to reset the Grafana admin password for an instance installed via Homebrew on macOS. It includes necessary overrides for config path, homepath, and data path specific to Homebrew's structure.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_21

LANGUAGE: bash
CODE:
```
/opt/homebrew/opt/grafana/bin/grafana cli --config /opt/homebrew/etc/grafana/grafana.ini --homepath /opt/homebrew/opt/grafana/share/grafana --configOverrides cfg:default.paths.data=/opt/homebrew/var/lib/grafana admin reset-admin-password <new password>
```

----------------------------------------

TITLE: Checking Prometheus Process/Service Status (macOS)
DESCRIPTION: This command uses 'pgrep' on macOS to check if a process named 'prometheus' is running. In the context of checking service status on macOS (which might not use a traditional service manager like systemd or Windows Services), checking the process existence serves a similar purpose.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_16

LANGUAGE: bash
CODE:
```
pgrep prometheus
```

----------------------------------------

TITLE: Migrating a Single API Key by ID to a Service Account - Grafana HTTP API - HTTP
DESCRIPTION: This snippet covers how to migrate a specific API key, identified by its keyId, to a service account. The POST request and authentication are required; the keyId is part of the endpoint URI. On success, a simple JSON response confirms the migration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
POST /api/serviceaccounts/migrate/4 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{\n\t"message": "Service accounts migrated"\n}
```

----------------------------------------

TITLE: Updating a User's Role in an Organization via Grafana API (HTTP)
DESCRIPTION: Example HTTP PATCH request to update the role of a specific user (identified by `:userId`) within a particular Grafana organization (identified by `:orgId`). The request body specifies the new `role`. This operation requires Basic Authentication and the `org.users:write` permission with the `users:*` scope.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_30

LANGUAGE: http
CODE:
```
PATCH /api/orgs/1/users/2 HTTP/1.1
Accept: application/json
Content-Type: application/json

{
  "role":"Admin"
}
```

----------------------------------------

TITLE: Assigning Basic Roles to Users, Teams, and Service Accounts - Terraform
DESCRIPTION: This Terraform snippet demonstrates how to define users, teams, and service accounts and assign predefined basic Grafana roles to them using 'grafana_role_assignment'. It depends on the 'grafana/grafana' provider and requires existing users, teams, or service accounts to assign roles. Each 'role_assignment' specifies the target entities and the basic role UID, such as 'basic_viewer', 'basic_editor', or 'basic_admin'. Inputs: entity definitions and role UIDs. Outputs: RBAC assignments in Grafana. All sensitive values (e.g., passwords, tokens) must be securely managed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-terraform-provisioning/index.md#2025-04-23_snippet_1

LANGUAGE: terraform
CODE:
```
resource "grafana_team" "viewer_team" {
  name = "terraform_viewer_team"
}

resource "grafana_user" "editor_user" {
  email    = "terraform_editor@example.com"
  login    = "terraform_editor_user"
  password = <TEST_PASSWORD>
}

resource "grafana_service_account" "admin_sa" {
  name = "terraform_admin_sa"
}

# Assign Viewer role to a team
resource "grafana_role_assignment" "viewer_role_assignment" {
  role_uid = "basic_viewer"
  teams    = [grafana_team.viewer_team.id]
}

# Assign Editor role to a user
resource "grafana_role_assignment" "editor_role_assignment" {
  role_uid = "basic_editor"
  users    = [grafana_user.editor_user.id]
}

# Assign Admin role to a service account
resource "grafana_role_assignment" "admin_role_assignment" {
  role_uid = "basic_admin"
  service_accounts = [grafana_service_account.admin_sa.id]
}

```

----------------------------------------

TITLE: Partially Updating Organization Preferences via HTTP PATCH - HTTP
DESCRIPTION: Updates only the specified organization-wide preferences using a PATCH request, preserving other settings. Only fields provided, like theme, are changed; others remain untouched. Requires admin rights and proper authentication. Ideal for incremental configuration changes at the org level.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_10

LANGUAGE: http
CODE:
```
PATCH /api/org/preferences HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  "theme": "dark"\n}
```

----------------------------------------

TITLE: Configuring Service Account Token Expiration Limit (Plaintext)
DESCRIPTION: This represents the 'token_expiration_day_limit' configuration option in Grafana. When set, it enforces a maximum expiration duration (in days) for newly created service account tokens, enhancing security. This option is disabled by default in Grafana v9.4.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-4.md#2025-04-23_snippet_3

LANGUAGE: plaintext
CODE:
```
token_expiration_day_limit
```

----------------------------------------

TITLE: Configuring GitLab OAuth using Terraform Provider
DESCRIPTION: Terraform configuration for setting up GitLab SSO in Grafana. This snippet shows how to configure OAuth2 settings including client credentials, scopes, role attributes, and group permissions using the grafana_sso_settings resource.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/gitlab/index.md#2025-04-23_snippet_0

LANGUAGE: terraform
CODE:
```
resource "grafana_sso_settings" "gitlab_sso_settings" {
  provider_name = "gitlab"
  oauth2_settings {
    name                  = "Gitlab"
    client_id             = "YOUR_GITLAB_APPLICATION_ID"
    client_secret         = "YOUR_GITLAB_APPLICATION_SECRET"
    allow_sign_up         = true
    auto_login            = false
    scopes                = "openid email profile"
    allowed_domains       = "mycompany.com mycompany.org"
    role_attribute_path   = "contains(groups[*], 'example-group') && 'Editor' || 'Viewer'"
    role_attribute_strict = false
    allowed_groups        = "[\"admins\", \"software engineers\", \"developers/frontend\"]"
    use_pkce              = true
    use_refresh_token     = true
  }
}
```

----------------------------------------

TITLE: Uninstalling Grafana OSS via DNF using Shell
DESCRIPTION: Removes the Grafana Open Source (OSS) package using the `dnf remove` command. Requires `sudo` privileges. This command uninstalls Grafana that was previously installed using the `dnf install grafana` command.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_14

LANGUAGE: shell
CODE:
```
sudo dnf remove grafana
```

----------------------------------------

TITLE: Formatting Grafana Variables with Single Quotes
DESCRIPTION: Illustrates the `:singlequote` format option. This formats single or multi-valued variables into a comma-separated string where each value is enclosed in single quotes (`'`) and internal single quotes are escaped (`\'`). The example shows `['test1', 'test2']` interpolated as `"'test1','test2'"`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
servers = ['test1', 'test2']
String to interpolate: '${servers:singlequote}'
Interpolation result: "'test1','test2'"
```

----------------------------------------

TITLE: Enabling File Provisioning and Kubernetes Dashboard Feature Toggles in Grafana Configuration - INI
DESCRIPTION: This snippet demonstrates how to enable the 'provisioning' and 'kubernetesDashboards' feature toggles in Grafana by editing the configuration file (typically grafana.ini or custom.ini). These toggles activate experimental provisioning features and Kubernetes dashboard support. Optionally, 'grafanaAPIServerEnsureKubectlAccess' can be enabled for smoother kubectl development workflows. No external dependencies are required, but only users with administration access to the configuration should apply this change. All parameters must appear under a '[feature_toggles]' section.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/observability-as-code/provision-resources/file-path-setup.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[feature_toggles]
provisioning = true
kubernetesDashboards = true ; use k8s from browser

# If you want easy kubectl setup development mode
grafanaAPIServerEnsureKubectlAccess = true

```

----------------------------------------

TITLE: Rendering an Inline Banner Alert in JSX
DESCRIPTION: This JSX snippet demonstrates how to use the Grafana `Alert` component to display an inline banner. It takes properties like `title`, `severity` (e.g., 'info', 'success', 'warning', 'error'), optional `buttonContent`, an `onRemove` function handler for dismissal, and allows nesting child elements (like a `div` shown here) to provide detailed alert messages. Inline banners are typically placed within the main content area.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Alert/Alert.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Alert title={title} severity={severity} buttonContent={buttonContent} onRemove={onRemove}>
  Child content that includes some alert details, like maybe what actually happened.</div>
</Alert>
```

----------------------------------------

TITLE: Enriching Data with Lookup Fields in Grafana
DESCRIPTION: This example demonstrates how to use the 'Lookup fields from resource' transformation in Grafana. It shows how to enrich location data with additional information from a USA States lookup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_12

LANGUAGE: markdown
CODE:
```
#### Dataset Example

| Location  | Values |
| --------- | ------ |
| AL        | 0      |
| AK        | 10     |
| Arizona   | 5      |
| Arkansas  | 1      |
| Somewhere | 5      |

#### Transformed Data

| Location  | ID  | Name     | Lng         | Lat       | Values |
| --------- | --- | -------- | ----------- | --------- | ------ |
| AL        | AL  | Alabama  | -80.891064  | 12.448457 | 0      |
| AK        | AK  | Arkansas | -100.891064 | 24.448457 | 10     |
| Arizona   |     |          |             |           | 5      |
| Arkansas  |     |          |             |           | 1      |
| Somewhere |     |          |             |           | 5      |
```

----------------------------------------

TITLE: Installing certbot via Snap on Debian (Bash)
DESCRIPTION: Ensures any apt-installed version of `certbot` is removed using `apt-get remove`. Installs the recommended `certbot` version using `snap install --classic certbot`. Creates a symbolic link (`ln -s`) so `certbot` can be run from the standard path `/usr/bin/certbot`. Requires `sudo` privileges and `snapd`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
sudo apt-get remove certbot
sudo snap install --classic certbot
sudo ln -s /snap/bin/certbot /usr/bin/certbot
```

----------------------------------------

TITLE: Setting Admin Credentials in values.yaml for Grafana Deployment - YAML
DESCRIPTION: This YAML entry sets the administrator username and password for Grafana when not using an existing Kubernetes secret. Edit this section in values.yaml to define static credentials. The adminUser and adminPassword fields are accepted, and changes will take effect on redeployment. Do not use default credentials in production environments.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_24

LANGUAGE: yaml
CODE:
```
# Administrator credentials when not using an existing secret (see below)
adminUser: admin
adminPassword: admin
```

----------------------------------------

TITLE: Docker Command to Launch Grafana with Custom Configuration
DESCRIPTION: Docker command for launching Grafana container with a custom configuration file that enables auth proxy authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
docker run -i -v $(pwd)/grafana.ini:/etc/grafana/grafana.ini --name grafana grafana/grafana
```

----------------------------------------

TITLE: Retrieving Single Report Details via Grafana Reporting API - HTTP
DESCRIPTION: This HTTP code snippet illustrates how to retrieve the details of a specific report by performing a GET request to the /api/reports/:id endpoint. An Authorization header with a valid bearer token is required, and the Accept and Content-Type headers specify JSON format. The endpoint expects the report ID as a path parameter.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
GET /api/reports/2 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Pattern Matching and Replacement with Go Template Functions - Go Template
DESCRIPTION: Demonstrates usage of {{ match }} for regex pattern matching and {{ reReplaceAll }} for performing regex-based replacements in strings in Grafana's Go templates. Requires regex support from the underlying template processing system. Inputs are pattern and string (and replacement in reReplaceAll), and outputs are boolean or the replaced string, respectively. Limitations may include complexity of supported regex features.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_10

LANGUAGE: Go Template
CODE:
```
{{ match "a.*" "abc" }}

```

LANGUAGE: Go Template
CODE:
```
{{ reReplaceAll "localhost:(.*)" "example.com:$1" "localhost:8080" }}

```

----------------------------------------

TITLE: Adding a User to an Organization via Grafana API (HTTP)
DESCRIPTION: Example HTTP POST request to add an existing Grafana user to a specific organization identified by `:orgId`. The request body includes the user's `loginOrEmail` and the desired `role` (e.g., Viewer, Editor, Admin). This operation requires Basic Authentication and the `org.users:add` permission with the `users:*` scope.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_28

LANGUAGE: http
CODE:
```
POST /api/orgs/1/users HTTP/1.1
Accept: application/json
Content-Type: application/json

{
  "loginOrEmail":"user",
  "role":"Viewer"
}
```

----------------------------------------

TITLE: Starting Grafana Stack using Docker Compose
DESCRIPTION: This command uses Docker Compose (specifically the `docker-compose` executable) to build, (re)create, start, and attach to containers for a service, running them in detached mode (`-d`). It reads the `docker-compose.yml` file in the current directory ('tutorial-environment') to start the Grafana, Loki, and Prometheus services required for the tutorial. Requires Docker and Docker Compose to be installed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt2/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
docker-compose up -d
```

----------------------------------------

TITLE: Querying Grafana Annotations with Native SQL Time Column (SQL)
DESCRIPTION: SQL query example for fetching Grafana annotations where the time information uses a native SQL date/time data type column named `native_date_time`. It employs the Grafana macro `$__timeFilter` which adapts the filtering based on the native column type and the dashboard's time range. Database columns (`native_date_time`, `metric1`, `tag1`, `tag2`) are mapped to the required Grafana annotation fields (`time`, `text`, `tags`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_16

LANGUAGE: sql
CODE:
```
SELECT
  native_date_time as time,
  metric1 as text,
  CONCAT(tag1, ',', tag2) as tags
FROM
  public.test_data
WHERE
  $__timeFilter(native_date_time)
```

----------------------------------------

TITLE: Displaying Query Value in Annotation (Dot Notation)
DESCRIPTION: This Go template snippet demonstrates how to include the numeric value of a query result (identified by Ref ID 'A') within a Grafana alert annotation using dot notation access on the `$values` variable. It's used to provide specific context about the metric value that triggered the alert.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_0

LANGUAGE: gotemplate
CODE:
```
CPU usage has exceeded 80% ({{ $values.A.value }}) for the last 5 minutes.
```

----------------------------------------

TITLE: Setting Maximum Viewport Width - Bash
DESCRIPTION: Defines RENDERING_VIEWPORT_MAX_WIDTH to restrict the maximum allowable width (in pixels) of the rendering viewport. Used to prevent excessive memory use in rendering. Requires v3.9.0+.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_43

LANGUAGE: bash
CODE:
```
# Available from v3.9.0+
RENDERING_VIEWPORT_MAX_WIDTH=1000
```

----------------------------------------

TITLE: HTTP Success Listing Team Roles - Grafana Access Control - JSON
DESCRIPTION: This exemplifies a successful HTTP/1.1 JSON response from the team roles list endpoint, where a set of roles is returned for the requested team. Includes all expected fields per role entity: version, uid, name, displayName, description, group, updated/created timestamps, and global status. Content-Type is JSON. Output is a JSON array of role objects.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_33

LANGUAGE: json
CODE:
```
[
    {
        "version": 4,
        "uid": "j08ZBi-nk",
        "name": "fixed:licensing:reader",
        "displayName": "Licensing reader",
        "description": "Read licensing information and licensing reports.",
        "group": "Licenses",
        "updated": "2022-02-03T14:19:50+01:00",
        "created": "0001-01-01T00:00:00Z",
        "global": false
    }
]
```

----------------------------------------

TITLE: Sending Webhook Notification Payload for Secret Leak - JSON
DESCRIPTION: This JSON snippet demonstrates the format of the payload sent via webhook when a Grafana service account token leak is detected. The payload includes the alert unique identifier, link to the leak, an explanatory message, the state of the alert, and the notification title. Key parameters are: 'alert_uid' (leak alert identifier), 'link_to_upstream_details' (URL where leak occurred), 'message' (detailed description), 'state', and 'title'. The expected input is event data from a secret scan, the output is a properly structured JSON object sent as POST data to a webhook endpoint.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/secret-scan.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "alert_uid": "c9ce50a1-d66b-45e4-9b5d-175766cfc026",
  "link_to_upstream_details": <URL to token leak>,
  "message": "Token of type grafana_service_account_token with name\nsa-the-toucans has been publicly exposed in <URL to token leak>.\nGrafana has revoked this token",
  "state": "alerting",
  "title": "SecretScan Alert: Grafana Token leaked"
}
```

----------------------------------------

TITLE: Rendering Pagination Component Below Paginated Content in React (TSX)
DESCRIPTION: This snippet shows an example of embedding the Pagination component beneath paginated content inside a div element, setting the current page to 1, the total number of pages to 5, and assigning a handler function for navigation. It demonstrates how to integrate the Pagination component in a React application using TypeScript JSX (TSX), with properties like currentPage, numberOfPages, and onNavigate. To reproduce this setup, ensure that the Pagination component is imported and that fetchPage is defined elsewhere to handle page changes.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Pagination/Pagination.mdx#2025-04-23_snippet_0

LANGUAGE: TSX
CODE:
```
```tsx\n<div>\n  <div>Page 1 content</div>\n  <Pagination currentPage={1} numberOfPages={5} onNavigate={() => fetchPage(2)} />\n</div>\n```
```

----------------------------------------

TITLE: Modern PanelChrome Loading State Implementation (v9.4.0+) in React
DESCRIPTION: Demonstrates the current, recommended approach for handling loading states in `PanelChrome` (Grafana v9.4.0 and later). This involves using the `loadingState` prop (e.g., setting it to `LoadingState.Loading`) and optionally providing a cancellation callback via the `onCancelQuery` prop, replacing the older `leftItems` pattern.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_7

LANGUAGE: tsx
CODE:
```
<PanelChrome
  title="My awesome panel title"
  loadingState={LoadingState.Loading}
  onCancelQuery={onCancelQuery}
  width={400}
  height={200}
>
  {(innerwidth, innerheight) => {
    return (
      <div
        style={{
          width: innerwidth,
          height: innerheight,
          background: 'white',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        New panel with old API
      </div>
    );
  }}
</PanelChrome>
```

----------------------------------------

TITLE: Adding Grafana RPM Repository - Bash
DESCRIPTION: This snippet uses zypper to add the official Grafana RPM repository for package management on SUSE/openSUSE. The 'addrepo' command configures the remote repository, enabling subsequent installation or updates via zypper. Requires: zypper package manager, sudo access. No parameters; outputs: adds repository named 'grafana'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
sudo zypper addrepo https://rpm.grafana.com grafana
```

----------------------------------------

TITLE: Creating and Using a Structured Logger in Go
DESCRIPTION: Demonstrates how to create a named, structured logger using the pkg/infra/log package and use different log levels. It also shows how to include error information in log messages.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/instrumentation.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
import (
  "fmt"

  "github.com/grafana/grafana/pkg/infra/log"
)

logger := log.New("my-logger")
logger.Debug("Debug msg")
logger.Info("Info msg")
logger.Warning("Warning msg")
logger.Error("Error msg", "error", fmt.Errorf("BOOM"))
```

----------------------------------------

TITLE: Defining Alerting Provisioning Resource - Grafana YAML
DESCRIPTION: Defines an alerting provisioning resource for Grafana. The YAML describes a mute timing resource named 'MuteWeekends' for organization ID 1, muting alerts on Saturday and Sunday. This file (typically 'alerting.yaml') is placed in the 'provisioning/alerting' directory and loaded on Grafana startup. No external dependencies beyond standard provisioning structure.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_25

LANGUAGE: yaml
CODE:
```
apiVersion: 1
muteTimes:
  - orgId: 1
    name: MuteWeekends
    time_intervals:
      - weekdays: [saturday, sunday]

```

----------------------------------------

TITLE: Using Search Filter in Templating Variable Query for PostgreSQL
DESCRIPTION: Illustrates a SQL query that incorporates a search filter in a templating variable. This query allows users to dynamically filter hostname options as they type in the dropdown selection box.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_12

LANGUAGE: sql
CODE:
```
SELECT hostname FROM my_host WHERE hostname LIKE '$__searchFilter'
```

----------------------------------------

TITLE: Example Prometheus Metrics Output from Grafana Image Renderer
DESCRIPTION: Illustrates the Prometheus exposition format output from the Grafana image rendering service. Includes metrics on process resources (CPU, memory, file descriptors), Node.js event loop, handles, requests, heap usage, version info, HTTP request duration histograms, service uptime (`up` metric), and in-flight requests.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/monitoring/index.md#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
# HELP process_cpu_user_seconds_total Total user CPU time spent in seconds.
# TYPE process_cpu_user_seconds_total counter
process_cpu_user_seconds_total 0.536 1579444523566

# HELP process_cpu_system_seconds_total Total system CPU time spent in seconds.
# TYPE process_cpu_system_seconds_total counter
process_cpu_system_seconds_total 0.064 1579444523566

# HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.
# TYPE process_cpu_seconds_total counter
process_cpu_seconds_total 0.6000000000000001 1579444523566

# HELP process_start_time_seconds Start time of the process since unix epoch in seconds.
# TYPE process_start_time_seconds gauge
process_start_time_seconds 1579444433

# HELP process_resident_memory_bytes Resident memory size in bytes.
# TYPE process_resident_memory_bytes gauge
process_resident_memory_bytes 52686848 1579444523568

# HELP process_virtual_memory_bytes Virtual memory size in bytes.
# TYPE process_virtual_memory_bytes gauge
process_virtual_memory_bytes 2055344128 1579444523568

# HELP process_heap_bytes Process heap size in bytes.
# TYPE process_heap_bytes gauge
process_heap_bytes 1996390400 1579444523568

# HELP process_open_fds Number of open file descriptors.
# TYPE process_open_fds gauge
process_open_fds 31 1579444523567

# HELP process_max_fds Maximum number of open file descriptors.
# TYPE process_max_fds gauge
process_max_fds 1573877

# HELP nodejs_eventloop_lag_seconds Lag of event loop in seconds.
# TYPE nodejs_eventloop_lag_seconds gauge
nodejs_eventloop_lag_seconds 0.000915922 1579444523567

# HELP nodejs_active_handles Number of active libuv handles grouped by handle type. Every handle type is C++ class name.
# TYPE nodejs_active_handles gauge
nodejs_active_handles{type="WriteStream"} 2 1579444523566
nodejs_active_handles{type="Server"} 1 1579444523566
nodejs_active_handles{type="Socket"} 9 1579444523566
nodejs_active_handles{type="ChildProcess"} 2 1579444523566

# HELP nodejs_active_handles_total Total number of active handles.
# TYPE nodejs_active_handles_total gauge
nodejs_active_handles_total 14 1579444523567

# HELP nodejs_active_requests Number of active libuv requests grouped by request type. Every request type is C++ class name.
# TYPE nodejs_active_requests gauge
nodejs_active_requests{type="FSReqCallback"} 2

# HELP nodejs_active_requests_total Total number of active requests.
# TYPE nodejs_active_requests_total gauge
nodejs_active_requests_total 2 1579444523567

# HELP nodejs_heap_size_total_bytes Process heap size from node.js in bytes.
# TYPE nodejs_heap_size_total_bytes gauge
nodejs_heap_size_total_bytes 13725696 1579444523567

# HELP nodejs_heap_size_used_bytes Process heap size used from node.js in bytes.
# TYPE nodejs_heap_size_used_bytes gauge
nodejs_heap_size_used_bytes 12068008 1579444523567

# HELP nodejs_external_memory_bytes Nodejs external memory size in bytes.
# TYPE nodejs_external_memory_bytes gauge
nodejs_external_memory_bytes 1728962 1579444523567

# HELP nodejs_heap_space_size_total_bytes Process heap space size total from node.js in bytes.
# TYPE nodejs_heap_space_size_total_bytes gauge
nodejs_heap_space_size_total_bytes{space="read_only"} 262144 1579444523567
nodejs_heap_space_size_total_bytes{space="new"} 1048576 1579444523567
nodejs_heap_space_size_total_bytes{space="old"} 9809920 1579444523567
nodejs_heap_space_size_total_bytes{space="code"} 425984 1579444523567
nodejs_heap_space_size_total_bytes{space="map"} 1052672 1579444523567
nodejs_heap_space_size_total_bytes{space="large_object"} 1077248 1579444523567
nodejs_heap_space_size_total_bytes{space="code_large_object"} 49152 1579444523567
nodejs_heap_space_size_total_bytes{space="new_large_object"} 0 1579444523567

# HELP nodejs_heap_space_size_used_bytes Process heap space size used from node.js in bytes.
# TYPE nodejs_heap_space_size_used_bytes gauge
nodejs_heap_space_size_used_bytes{space="read_only"} 32296 1579444523567
nodejs_heap_space_size_used_bytes{space="new"} 601696 1579444523567
nodejs_heap_space_size_used_bytes{space="old"} 9376600 1579444523567
nodejs_heap_space_size_used_bytes{space="code"} 286688 1579444523567
nodejs_heap_space_size_used_bytes{space="map"} 704320 1579444523567
nodejs_heap_space_size_used_bytes{space="large_object"} 1064872 1579444523567
nodejs_heap_space_size_used_bytes{space="code_large_object"} 3552 1579444523567
nodejs_heap_space_size_used_bytes{space="new_large_object"} 0 1579444523567

# HELP nodejs_heap_space_size_available_bytes Process heap space size available from node.js in bytes.
# TYPE nodejs_heap_space_size_available_bytes gauge
nodejs_heap_space_size_available_bytes{space="read_only"} 229576 1579444523567
nodejs_heap_space_size_available_bytes{space="new"} 445792 1579444523567
nodejs_heap_space_size_available_bytes{space="old"} 417712 1579444523567
nodejs_heap_space_size_available_bytes{space="code"} 20576 1579444523567
nodejs_heap_space_size_available_bytes{space="map"} 343632 1579444523567
nodejs_heap_space_size_available_bytes{space="large_object"} 0 1579444523567
nodejs_heap_space_size_available_bytes{space="code_large_object"} 0 1579444523567
nodejs_heap_space_size_available_bytes{space="new_large_object"} 1047488 1579444523567

# HELP nodejs_version_info Node.js version info.
# TYPE nodejs_version_info gauge
nodejs_version_info{version="v14.16.1",major="14",minor="16",patch="1"} 1

# HELP grafana_image_renderer_service_http_request_duration_seconds duration histogram of http responses labeled with: status_code
# TYPE grafana_image_renderer_service_http_request_duration_seconds histogram
grafana_image_renderer_service_http_request_duration_seconds_bucket{le="1",status_code="200"} 0
grafana_image_renderer_service_http_request_duration_seconds_bucket{le="5",status_code="200"} 4
grafana_image_renderer_service_http_request_duration_seconds_bucket{le="7",status_code="200"} 4
grafana_image_renderer_service_http_request_duration_seconds_bucket{le="9",status_code="200"} 4
grafana_image_renderer_service_http_request_duration_seconds_bucket{le="11",status_code="200"} 4
grafana_image_renderer_service_http_request_duration_seconds_bucket{le="13",status_code="200"} 4
grafana_image_renderer_service_http_request_duration_seconds_bucket{le="15",status_code="200"} 4
grafana_image_renderer_service_http_request_duration_seconds_bucket{le="20",status_code="200"} 4
grafana_image_renderer_service_http_request_duration_seconds_bucket{le="30",status_code="200"} 4
grafana_image_renderer_service_http_request_duration_seconds_bucket{le="+Inf",status_code="200"} 4
grafana_image_renderer_service_http_request_duration_seconds_sum{status_code="200"} 10.492873834
grafana_image_renderer_service_http_request_duration_seconds_count{status_code="200"} 4

# HELP up 1 = up, 0 = not up
# TYPE up gauge
up 1

# HELP grafana_image_renderer_http_request_in_flight A gauge of requests currently being served by the image renderer.
# TYPE grafana_image_renderer_http_request_in_flight gauge
grafana_image_renderer_http_request_in_flight 1

# HELP grafana_image_renderer_step_duration_seconds duration histogram of browser steps for rendering an image labeled with: step
# TYPE grafana_image_renderer_step_duration_seconds histogram
```

----------------------------------------

TITLE: Writing Grafana Dashboards (Plaintext)
DESCRIPTION: Defines the `dashboards:write` permission action necessary to update one or more dashboards in Grafana. Access is associated with dashboard and folder scopes such as `dashboards:*`, `dashboards:uid:*`, `folders:*`, and `folders:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_12

LANGUAGE: plaintext
CODE:
```
`dashboards:write`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`dashboards:*`</li><li>`dashboards:uid:*`</li><li>`folders:*`</li><li>`folders:uid:*`</li></ul>
```

----------------------------------------

TITLE: Traefik File Provider Router/Service (Sub Path) - YAML
DESCRIPTION: Configures a Traefik file provider router and service to forward requests with a /grafana prefix and host check to a Grafana backend. Suitable for use in traefik.yml or a file-based provider directory. This supports deployments where Grafana must be hosted behind a specific path (multi-application hosts).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_12

LANGUAGE: yaml
CODE:
```
http:\n  routers:\n    grafana:\n      rule: Host(`example.com`) && PathPrefix(`/grafana`)\n      service: grafana\n  services:\n    grafana:\n      loadBalancer:\n        servers:\n          - url: http://192.168.30.10:3000
```

----------------------------------------

TITLE: Authenticating with Basic Auth using cURL in Bash
DESCRIPTION: Demonstrates how to make an authenticated request to the Grafana API endpoint `/api/org` using Basic Authentication with `curl`. This method passes the username and password directly in the URL. It requires Basic Authentication to be enabled in Grafana (which is the default).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/developers/authentication.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
curl http://admin:admin@localhost:3000/api/org
{"id":1,"name":"Main Org."}
```

----------------------------------------

TITLE: Reloading Provisioning Configurations via Grafana Admin HTTP API - HTTP
DESCRIPTION: Demonstrates an HTTP POST request to reload dashboard provisioning configurations in Grafana. No payload is needed, and a JSON confirmation message is provided in the response. Requires Basic Authentication and provisioning reload permissions for the specified entity type.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_16

LANGUAGE: http
CODE:
```
POST /api/admin/provisioning/dashboards/reload HTTP/1.1\nAccept: application/json\nContent-Type: application/json
```

LANGUAGE: json
CODE:
```
{\n  "message": "Dashboards config reloaded"\n}
```

----------------------------------------

TITLE: Setting Chrome Executable for Grafana Plugin Rendering - Bash
DESCRIPTION: Sets the GF_PLUGIN_RENDERING_CHROME_BIN environment variable to specify a custom Chrome/Chromium binary for the Grafana Image renderer plugin in plugin mode. This Bash command ensures that the Grafana process uses the specified executable path. The variable should be set before starting the Grafana server and the given path must point to a valid, installed Chrome/Chromium binary. No additional dependencies are needed other than Bash and a compatible Chrome/Chromium installation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
export GF_PLUGIN_RENDERING_CHROME_BIN="/usr/bin/chromium-browser"
```

----------------------------------------

TITLE: Creating or Updating Notification Template Group - Grafana REST HTTP Endpoint - http
DESCRIPTION: Presents the HTTP PUT endpoint for creating or updating a notification template group in Grafana provisioning. A template group is addressed by its name as a path parameter. Endpoint: `PUT /api/v1/provisioning/templates/:name`. The required request body should define the template group contents. Supports the optional `X-Disable-Provenance` header for enabling UI modifications of provisioned resources. Input: template group name (path), request body. Output depends on operation's validity.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_39

LANGUAGE: http
CODE:
```
PUT /api/v1/provisioning/templates/:name
```

----------------------------------------

TITLE: Implementing Interface Mocks in Grafana
DESCRIPTION: Example of creating a mock implementation of an interface using the testify/mock package. Shows how to define the mock struct and implement interface methods to return controlled responses.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/style-guide.md#2025-04-23_snippet_3

LANGUAGE: go
CODE:
```
import "github.com/stretchr/testify/mock"

type MockImplementation struct {
    mock.Mock
}

func (m *MockImplementation) Get(ctx context.Context, id string) (Object, error) {
    args := m.Called(ctx, id) // Pass all arguments in order here
    return args.Get(0).(Object), args.Error(1)
}
```

----------------------------------------

TITLE: Defining Team Scopes in Grafana RBAC
DESCRIPTION: Specifies scopes to restrict actions to a set of teams within an organization. `teams:*` matches any team, while `teams:id:1` targets the specific team with ID 1.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_44

LANGUAGE: text
CODE:
```
teams:*
```

LANGUAGE: text
CODE:
```
teams:id:*
```

----------------------------------------

TITLE: Checking Docker Compose Version - Bash
DESCRIPTION: Verifies if Docker Compose is installed by querying its version. This command requires Docker Compose CLI to be available on the system PATH. Outputs the version information if Compose is installed; otherwise, prompts the user to install it.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
docker compose version
```

----------------------------------------

TITLE: Starting Grafana Server using Binary (Linux)
DESCRIPTION: Executes the Grafana server binary directly. Requires the current working directory to be the Grafana installation root. Used when Grafana is installed from a .tar.gz file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
./bin/grafana server
```

----------------------------------------

TITLE: Building Email Templates using Make (Shell)
DESCRIPTION: This command executes the default task defined in the project's Makefile. According to the context, this default task builds new inlined email templates. The assembled templates are placed in the `dist/` directory, and the final inlined templates are output to the `../public/emails/` directory.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/README.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
make
```

----------------------------------------

TITLE: Creating Async Option Loader Function for AsyncSelect with React (TSX)
DESCRIPTION: Provides a reusable async function for loading Select options via Promises. The function returns a Promise resolving to an array of SelectableValue<string>. Requires Promises, setTimeout, and compatible options variable. Key input is the resolve callback for the Promise, output is the available options after a simulated delay.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Select/Select.mdx#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
const loadAsyncOptions = () => {
  return new Promise<Array<SelectableValue<string>>>((resolve) => {
    setTimeout(() => {
      resolve(options);
    }, 2000);
  });
};
```

----------------------------------------

TITLE: IIS URL Rewrite Rule for Grafana on Sub Path - XML
DESCRIPTION: This XML snippet defines an IIS URL Rewrite rule for rerouting requests to /grafana and its subpaths to the backend Grafana server. Place this inside the <system.webServer> section of web.config for the parent website. Key parameters include the URL matching pattern, rewrite action target, and enabling query string appending and rule stopping. IIS URL Rewrite module must be installed and enabled.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_5

LANGUAGE: xml
CODE:
```
  <rewrite>\n      <rules>\n          <rule name="Grafana" enabled="true" stopProcessing="true">\n              <match url="grafana(/)?(.*)" />\n              <action type="Rewrite" url="http://localhost:3000/{R:2}" logRewrittenUrl="false" />\n          </rule>\n      </rules>\n  </rewrite>
```

----------------------------------------

TITLE: Configuring PanelChrome Loading and Error States in React
DESCRIPTION: Illustrates how to configure the `PanelChrome` component to display different states. It shows setting the loading state via the `loadingState` prop (accepting `LoadingState.Loading` or `LoadingState.Streaming`), displaying an error message using `statusMessage`, and handling clicks on the error indicator with `statusMessageOnClick`. These props allow reflecting the underlying data status directly on the panel.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
<PanelChrome
  title="My awesome panel title"
  loadingState={<Loading.Loading || Loading.Streaming>}
  statusMessage='Error text'
  statusMessageOnClick={action('ErrorIndicator: onClick fired')}
  width={400}
  height={200}
>
  {(innerwidth, innerheight) => {
    return (
      <div
        style={{
          width: innerwidth,
          height: innerheight,
          background: 'rgba(230,0,0,0.05)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        New panel with old API
      </div>
    );
  }}
</PanelChrome>
```

----------------------------------------

TITLE: Starting Grafana Server via Command Line (Windows)
DESCRIPTION: Executes the Grafana server executable from the command line. This command should be run from the 'bin' directory of the Grafana installation folder after extracting the standalone Windows binary.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/windows/index.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
grafana-server.exe
```

----------------------------------------

TITLE: Rendered Accessible HTML for Form Elements
DESCRIPTION: Shows the rendered HTML output of the Grafana UI Field component, demonstrating how it correctly associates the label with the input using the 'for' attribute matching the input's 'id'.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/accessibility.md#2025-04-23_snippet_1

LANGUAGE: html
CODE:
```
<div>
  <label for="name"> Name </label>
  <input name="name" type="text" id="name" placeholder="Enter a name" value="" />
</div>
```

----------------------------------------

TITLE: Rolling Back Secrets via Grafana Admin HTTP API - HTTP
DESCRIPTION: Executes an HTTP POST request to roll back the previous state of secrets in Grafana. The endpoint processes the request synchronously. The API signifies completion with a 204 No Content HTTP response.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_21

LANGUAGE: http
CODE:
```
POST /api/admin/encryption/rollback-secrets HTTP/1.1\nAccept: application/json\nContent-Type: application/json
```

LANGUAGE: http
CODE:
```
HTTP/1.1 204\nContent-Type: application/json
```

----------------------------------------

TITLE: Building Prometheus and Grafana Outputs with Make - Bash
DESCRIPTION: This Bash command snippet demonstrates how to build the Prometheus alert/rule output YAML files and Grafana dashboard JSON directories using a Makefile. By invoking 'make build', it ensures the necessary build steps defined in the Makefile are executed, resulting in 'alerts.yaml', 'rules.yaml', and a 'dashboard_out' directory. It requires GNU make and that build dependencies such as mixtool and jsonnetfmt are already installed and available on the PATH. The inputs are defined by the Makefile present in the directory, and outputs are updated dashboard and rule files suitable for deployment.
SOURCE: https://github.com/grafana/grafana/blob/main/grafana-mixin/README.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ make build
```

----------------------------------------

TITLE: Searching for Grafana Helm Charts - Helm CLI - Bash
DESCRIPTION: This command searches the Helm repositories for the `grafana/grafana` chart using Helm CLI. Useful for confirming the chart’s availability and viewing version information. Requires Helm and access to the internet.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
helm search repo grafana/grafana
```

----------------------------------------

TITLE: Configuring JWT Authentication in Grafana
DESCRIPTION: Configuration snippet for enabling and setting up JWT authentication in Grafana's custom.ini file. It includes settings for JWT header, claims mapping, and role assignments.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/oauth/readme.md#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
[auth.jwt]
enabled = true
header_name = X-JWT-Assertion
username_claim = preferred_username
email_claim = email
jwk_set_file = devenv/docker/blocks/auth/oauth/jwks.json
cache_ttl = 60m
expect_claims = {"iss": "http://localhost:8087/realms/grafana", "azp": "grafana-oauth"}
auto_sign_up = true
role_attribute_path = contains(roles[*], 'grafanaadmin') && 'GrafanaAdmin' || contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'
role_attribute_strict = true
allow_assign_grafana_admin = true
```

----------------------------------------

TITLE: Example MQTT Notification Payload Structure in JSON
DESCRIPTION: This JSON object exemplifies the payload structure sent by the Grafana Alerting MQTT integration when the message format is set to JSON. It includes top-level fields like `receiver`, `status`, `orgId`, `externalURL`, and an `alerts` array containing details for each firing alert instance. The structure and field descriptions are further detailed in the accompanying tables.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/manage-contact-points/integrations/configure-mqtt.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "receiver": "My MQTT integration",
  "status": "firing",
  "orgId": 1,
  "alerts": [
    {
      "status": "firing",
      "labels": {
        "alertname": "High memory usage",
        "team": "blue",
        "zone": "us-1"
      },
      "annotations": {
        "description": "The system has high memory usage",
        "runbook_url": "https://myrunbook.com/runbook/1234",
        "summary": "This alert was triggered for zone us-1"
      },
      "startsAt": "2021-10-12T09:51:03.157076+02:00",
      "endsAt": "0001-01-01T00:00:00Z",
      "generatorURL": "https://play.grafana.org/alerting/1afz29v7z/edit",
      "fingerprint": "c6eadffa33fcdf37",
      "silenceURL": "https://play.grafana.org/alerting/silence/new?alertmanager=grafana&matchers=alertname%3DT2%2Cteam%3Dblue%2Czone%3Dus-1",
      "dashboardURL": "",
      "panelURL": "",
      "values": {
        "B": 44.23943737541908,
        "C": 1
      }
    },
    {
      "status": "firing",
      "labels": {
        "alertname": "High CPU usage",
        "team": "blue",
        "zone": "eu-1"
      },
      "annotations": {
        "description": "The system has high CPU usage",
        "runbook_url": "https://myrunbook.com/runbook/1234",
        "summary": "This alert was triggered for zone eu-1"
      },
      "startsAt": "2021-10-12T09:56:03.157076+02:00",
      "endsAt": "0001-01-01T00:00:00Z",
      "generatorURL": "https://play.grafana.org/alerting/d1rdpdv7k/edit",
      "fingerprint": "bc97ff14869b13e3",
      "silenceURL": "https://play.grafana.org/alerting/silence/new?alertmanager=grafana&matchers=alertname%3DT1%2Cteam%3Dblue%2Czone%3Deu-1",
      "dashboardURL": "",
      "panelURL": "",
      "values": {
        "B": 44.23943737541908,
        "C": 1
      }
    }
  ],
  "groupLabels": {},
  "commonLabels": {
    "team": "blue"
  },
  "commonAnnotations": {},
  "externalURL": "https://play.grafana.org/",
  "version": "1",
  "groupKey": "{}:{}",
  "message": "**Firing**\n\nLabels:\n - alertname = T2\n - team = blue\n - zone = us-1\nAnnotations:\n - description = This is the alert rule checking the second system\n - runbook_url = https://myrunbook.com\n - summary = This is my summary\nSource: https://play.grafana.org/alerting/1afz29v7z/edit\nSilence: https://play.grafana.org/alerting/silence/new?alertmanager=grafana&matchers=alertname%3DT2%2Cteam%3Dblue%2Czone%3Dus-1\n\nLabels:\n - alertname = T1\n - team = blue\n - zone = eu-1\nAnnotations:\nSource: https://play.grafana.org/alerting/d1rdpdv7k/edit\nSilence: https://play.grafana.org/alerting/silence/new?alertmanager=grafana&matchers=alertname%3DT1%2Cteam%3Dblue%2Czone%3Deu-1\n"
}
```

----------------------------------------

TITLE: Configuring Editable Grafana Resources with Terraform
DESCRIPTION: Terraform configuration demonstrating how to create editable Grafana resources by setting the disable_provenance attribute. Shows configuration for contact points and message templates.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_8

LANGUAGE: terraform
CODE:
```
resource "grafana_contact_point" "my_contact_point" {
  name = "My Contact Point"

  disable_provenance = true
}

resource "grafana_message_template" "custom_notification_template_group" {
  name     = "custom_notification_template_group"
  template = "{{define \"template1\" }}Say{{ end }}{{define \"template2\" }}Hi!{{ end }}"

  disable_provenance = true
}
```

----------------------------------------

TITLE: Configuring VictorOps Contact Point - YAML
DESCRIPTION: Sets up VictorOps as a contact point for Grafana, requiring a VictorOps endpoint URL and optional message type. Alerts are routed to VictorOps using this configuration. Requires valid endpoint and event type; outputs notifications to the VictorOps platform.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_20

LANGUAGE: yaml
CODE:
```
type: victorops\nsettings:\n  # <string, required>\n  url: XXX\n  # <string> options: CRITICAL, WARNING\n  messageType: CRITICAL\n
```

----------------------------------------

TITLE: Response for Admin Settings Request
DESCRIPTION: Example response from the Grafana Admin Settings API showing various configuration sections including authentication providers, database settings, and server configurations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "DEFAULT": {
    "app_mode":"production"
  },
  "analytics": {
    "google_analytics_ua_id":"",
    "reporting_enabled":"false"
  },
  "auth.anonymous":{
    "enabled":"true",
    "org_name":"Main Org.",
    "org_role":"Viewer"
  },
  "auth.basic":{
    "enabled":"false"
  },
  "auth.github":{
    "allow_sign_up":"false",
    "allowed_domains":"",
    "allowed_organizations":"",
    "api_url":"https://api.github.com/user",
    "auth_url":"https://github.com/login/oauth/authorize",
    "client_id":"some_id",
    "client_secret":"************",
    "enabled":"false",
    "scopes":"user:email,read:org",
    "team_ids":"",
    "token_url":"https://github.com/login/oauth/access_token"
  },
  "auth.google":{
    "allow_sign_up":"false","allowed_domains":"",
    "api_url":"https://www.googleapis.com/oauth2/v1/userinfo",
    "auth_url":"https://accounts.google.com/o/oauth2/auth",
    "client_id":"some_client_id",
    "client_secret":"************",
    "enabled":"false",
    "scopes":"https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email",
    "token_url":"https://accounts.google.com/o/oauth2/token"
  },
  "auth.ldap":{
    "config_file":"/etc/grafana/ldap.toml",
    "enabled":"false"
  },
  "auth.proxy":{
    "auto_sign_up":"true",
    "enabled":"false",
    "header_name":"X-WEBAUTH-USER",
    "header_property":"username"
  },
  "dashboards.json":{
    "enabled":"false",
    "path":"/var/lib/grafana/dashboards"
  },
  "database":{
    "host":"127.0.0.1:0000",
    "name":"grafana",
    "password":"************",
    "path":"grafana.db",
    "ssl_mode":"disable",
    "type":"sqlite3",
    "user":"root"
  },
  "emails":{
    "templates_pattern":"emails/*.html, emails/*.txt",
    "welcome_email_on_sign_up":"false",
    "content_types":"text/html"
  },
  "log":{
    "buffer_len":"10000",
    "level":"Info",
    "mode":"file"
  },
  "log.console":{
    "level":""
  },
  "log.file":{
    "daily_rotate":"true",
    "file_name":"",
    "level":"",
    "log_rotate":"true",
    "max_days":"7",
    "max_lines":"1000000",
    "max_lines_shift":"28",
    "max_size_shift":""
  },
  "paths":{
    "data":"/tsdb/grafana",
    "logs":"/logs/apps/grafana"},
    "security":{
    "admin_password":"************",
    "admin_user":"admin",
    "cookie_remember_name":"grafana_remember",
    "cookie_username":"grafana_user",
    "disable_gravatar":"false",
    "login_remember_days":"7",
    "secret_key":"************"
  },
  "server":{
    "cert_file":"",
    "cert_key":"",
    "certs_watch_interval": "0s",
    "domain":"mygraf.com",
    "enable_gzip":"false",
    "enforce_domain":"false",
    "http_addr":"127.0.0.1",
    "http_port":"0000",
    "protocol":"http",
    "root_url":"%(protocol)s://%(domain)s:%(http_port)s/",
    "router_logging":"true",
    "data_proxy_logging":"true",
    "static_root_path":"public"
  },
  "session":{
    "cookie_name":"grafana_sess",
    "cookie_secure":"false",
    "gc_interval_time":"",
    "provider":"file",
    "provider_config":"sessions",
    "session_life_time":"86400"
  },
  "smtp":{
    "cert_file":"",
    "enabled":"false",
    "from_address":"admin@grafana.localhost",
    "from_name":"Grafana",
    "ehlo_identity":"dashboard.example.com",
    "host":"localhost:25",
    "key_file":"",
    "password":"************",
    "skip_verify":"false",
    "user":""
  },
  "users":{
    "allow_org_create":"true",
    "allow_sign_up":"false",
    "auto_assign_org":"true",
    "auto_assign_org_role":"Viewer"
  }
}
```

----------------------------------------

TITLE: Checking if Prometheus Process is Running (Windows/PowerShell)
DESCRIPTION: This PowerShell command checks if a process named 'prometheus' is currently running on Windows. The '-ErrorAction SilentlyContinue' parameter prevents errors from being displayed if the process is not found.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_6

LANGUAGE: powershell
CODE:
```
Get-Process -Name prometheus -ErrorAction SilentlyContinue
```

----------------------------------------

TITLE: Using Dashboard Variable in TraceQL Query (Grafana)
DESCRIPTION: This snippet demonstrates using a Grafana dashboard variable placeholder within a TraceQL query field for a Traces panel. The `${traceId}` syntax allows the query to dynamically fetch traces based on the current value selected for the 'traceId' variable defined in the dashboard settings. This enables users to input or select a specific trace ID to visualize in the panel. Requires a dashboard variable named `traceId` (typically of type 'Custom') to be defined.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/traces/index.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
${traceId}
```

----------------------------------------

TITLE: Example Response for Creating Annotation - HTTP+JSON
DESCRIPTION: Shows a sample HTTP 200 response indicating successful creation of an annotation. The response includes a 'message' and the 'id' of the newly created annotation. This illustrates the structure of the positive server response.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{\n    "message":"Annotation added",\n    "id": 1,\n}
```

----------------------------------------

TITLE: Switching Current User's Context via Grafana API (HTTP)
DESCRIPTION: Switches the context of the currently authenticated user to a specified organization (identified by `:organizationId`) using a POST request to `/api/user/using/:organizationId`. Requires authentication, shown here using a Bearer Token. Returns a JSON success message.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_18

LANGUAGE: http
CODE:
```
POST /api/user/using/2 HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{"message":"Active organization changed"}
```

----------------------------------------

TITLE: Defining Escalate Permission Scope in Grafana RBAC
DESCRIPTION: The `permissions:type:escalate` scope is required to trigger the reset of basic role permissions. It signifies that users might gain additional permissions they didn't previously possess through this action.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_36

LANGUAGE: text
CODE:
```
permissions:type:escalate
```

----------------------------------------

TITLE: Grouping SQL Time Series Data by Multiple Dimensions
DESCRIPTION: This SQL fragment shows the `GROUP BY` clause used to aggregate time series data by multiple dimensions ('Location' and 'Sensor') along with hourly time buckets. When used in a query that selects these columns and an aggregated value (like average temperature), this grouping allows Grafana to identify distinct time series based on the combination of all dimensions, such as '{Location=LGA,Sensor=A}'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/fundamentals/timeseries-dimensions/index.md#2025-04-23_snippet_1

LANGUAGE: sql
CODE:
```
GROUP BY BUCKET(StartTime, 1h), Location, Sensor
```

----------------------------------------

TITLE: Provisioning Graphite Data Source in Grafana using YAML
DESCRIPTION: Example YAML configuration for provisioning a Graphite data source in Grafana. This configuration specifies the data source name, type, access method, URL, and Graphite version.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/_index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: Graphite
    type: graphite
    access: proxy
    url: http://localhost:8080
    jsonData:
      graphiteVersion: '1.1'
```

----------------------------------------

TITLE: Resetting Admin Password with Explicit Homepath (Bash)
DESCRIPTION: Corrects a potential error when resetting the admin password by explicitly providing the Grafana homepath using the '--homepath' global option. This command resets the password for the default admin user (ID 1) or a specified user ID.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_20

LANGUAGE: bash
CODE:
```
grafana cli --homepath \"/usr/share/grafana\" admin reset-admin-password <new password>
```

----------------------------------------

TITLE: Checking Grafana Service Status with systemd (Linux)
DESCRIPTION: Verifies the current status of the Grafana server service using systemd. Useful for confirming if the service started correctly.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
sudo systemctl status grafana-server
```

----------------------------------------

TITLE: Using Global Regex Patterns in Rename Transformation (Regex)
DESCRIPTION: This example demonstrates the updated format for the "rename by regex" transformation in Grafana 9.0, which now supports global patterns using the `/.../g` syntax. This allows replacing all occurrences of a pattern within a string, potentially changing behavior from previous versions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-0.md#2025-04-23_snippet_4

LANGUAGE: regex
CODE:
```
/<stringToReplace>/g
```

----------------------------------------

TITLE: Correlation Update Response in Grafana HTTP API
DESCRIPTION: HTTP response returned when a correlation is successfully updated. The response includes the complete updated correlation details.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_5

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
{
  "message": "Correlation updated",
  "result": {
    "description": "Logs to Traces",
    "label": "My Label",
    "sourceUID": "uyBf2637k",
    "targetUID": "PDDA8E780A17E7EF1",
    "uid": "J6gn7d31L",
    "type": "query",
    "config": {
			"field": "message",
			"target": {}
		}
  }
}
```

----------------------------------------

TITLE: Configuring Prometheus Alertmanager Contact Point - YAML
DESCRIPTION: Configures a Prometheus Alertmanager contact point for Grafana alert notifications. Requires the 'url' field for the Alertmanager endpoint, and supports optional basic authentication. Inputs are the Alertmanager URL and optional basicAuth credentials. Outputs are configured Alertmanager contact point for Grafana's alerting system. No external dependencies beyond the Grafana provisioning system.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_4

LANGUAGE: yaml
CODE:
```
type: prometheus-alertmanager\nsettings:\n  # <string, required>\n  url: http://localhost:9093\n  # <string>\n  basicAuthUser: abc\n  # <string>\n  basicAuthPassword: abc123\n
```

----------------------------------------

TITLE: Querying Team Role Assignments - Grafana Access Control HTTP API - HTTP
DESCRIPTION: Demonstrates a GET request to list direct role assignments for a team in Grafana via its access control API. The URL path contains the team ID as a parameter. The Accept header signals request of a JSON response. Requires 'teams.roles:read' permission scoped to the team. Returns a list of roles assigned to the specified team in JSON format.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_32

LANGUAGE: http
CODE:
```
GET /api/access-control/teams/1/roles
Accept: application/json
```

----------------------------------------

TITLE: Example Grafana CPU Alert Notification for US-East Region (JSON)
DESCRIPTION: This JSON object demonstrates a notification payload sent by Grafana Alerting to the 'US-East-Alerts' receiver. It contains a firing alert specifically for 'High CPU usage' originating from the 'us-east' region, illustrating how notification policies route alerts based on region labels to different receivers. The '...' indicates that the full alert details are truncated.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_7

LANGUAGE: json
CODE:
```
{
  "receiver": "US-East-Alerts",
  "status": "firing",
  "alerts": [
    {
      "status": "firing",
      "labels": {
        "alertname": "High CPU usage - Multi-region",
        "grafana_folder": "Multi-region alerts",
        "instance": "server-03",
        "region": "us-east",
        "service": "web-server-2"
...}}}
```

----------------------------------------

TITLE: Supported Operators in Grafana Math Expressions
DESCRIPTION: Lists the arithmetic, relational, and logical operators supported within Grafana math expressions. These operators work differently depending on whether the operands are numbers or time series.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_2

LANGUAGE: Grafana Expressions
CODE:
```
// Arithmetic
+, -, *, /, %, **

// Relational
<, >, ==, !=, >=, <=

// Logical
&&, ||, !
```

----------------------------------------

TITLE: Listing Organizations (Admin API) - HTTP
DESCRIPTION: This HTTP GET retrieves all organizations as an admin, optionally paginated with perpage and page query parameters. Requires Basic Auth with admin credentials, targeting /api/orgs endpoint. The Content-Type and Accept headers are application/json.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_20

LANGUAGE: http
CODE:
```
GET /api/orgs HTTP/1.1\nAccept: application/json\nContent-Type: application/json
```

----------------------------------------

TITLE: Searching Grafana Query History (HTTP Response)
DESCRIPTION: This snippet shows a successful HTTP 200 OK response for a query history search. The JSON body includes pagination details (`totalCount`, `page`, `perPage`) and an array `queryHistory` containing the matching query entries.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
{
  "result": {
    "totalCount": 150,
    "page": 1,
    "perPage": 100
    "queryHistory":[{
    "uid": "Ahg678z",
    "datasourceUid": "PE1C5CBDA0504A6A3",
    "createdBy": 1,
    "createdAt": 1643630762,
    "starred": false,
    "comment": "",
    "queries": [
      {
        "refId": "A",
        "key": "Q-87fed8e3-62ba-4eb2-8d2a-4129979bb4de-0",
        "scenarioId": "csv_content",
        "datasource": {
            "type": "testdata",
            "uid": "PE1C5CBDA0504A6A3"
        }
      }
    ]
  }]
}
```

----------------------------------------

TITLE: Port-forwarding Grafana Pod to Local Port - kubectl - Bash
DESCRIPTION: This snippet runs port-forwarding to make the Grafana pod accessible via localhost:3000 on the user's machine. It uses the previously exported `POD_NAME` variable and `kubectl --namespace ... port-forward`. Required for accessing Grafana’s web UI when a LoadBalancer is not used.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
kubectl --namespace monitoring port-forward $POD_NAME 3000
```

----------------------------------------

TITLE: Configuring Custom Footer Links in grafana.ini
DESCRIPTION: This configuration snippet demonstrates how to replace the default footer links in Grafana with custom links. It shows how to define multiple custom links with specific text and URLs that will appear in the footer.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-custom-branding/index.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
footer_links = support guides extracustom
footer_links_support_text = Support
footer_links_support_url = http://your.support.site
footer_links_guides_text = Guides
footer_links_guides_url = http://your.guides.site
footer_links_extracustom_text = Custom text
footer_links_extracustom_url = http://your.custom.site
```

----------------------------------------

TITLE: Setting Renderer Security Token - JSON
DESCRIPTION: Configures the 'authToken' in the renderer's JSON configuration file to limit access to the rendered images. This setting must match the token specified in the Grafana configuration file when running in remote rendering mode. The example sets the token to '-'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
{
  "service": {
    "security": {
      "authToken": "-"
    }
  }
}
```

----------------------------------------

TITLE: Working with Time Objects and Formatting in Grafana Go Templates
DESCRIPTION: This snippet presents the use of Go's time.Time object in Grafana templates, allowing field access and invocation of native time methods (Add, AddDate, Year, Month, Day, Hour, Minute, Second, YearDay, Weekday, Unix, UnixMilli) within a range statement over '.Alerts'. Requires .Alerts as a list of alert objects, each with .StartsAt (a Time object). Outputs are formatted date/time strings and components per alert for rich notification rendering.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_6

LANGUAGE: go
CODE:
```
{{ define "custom_template" }}
  {{ range .Alerts }}
    {{ .StartsAt  }}
    {{ .StartsAt.Add 6000000000000  }}
    {{ .StartsAt.Add -6000000000000  }}
    {{ .StartsAt.AddDate 1 0 0  }}
    {{ .StartsAt.Year   }}/{{ .StartsAt.Month   }}/{{ .StartsAt.Day   }}
    {{ .StartsAt.Hour   }}:{{ .StartsAt.Minute   }}:{{ .StartsAt.Second   }}
    {{ .StartsAt.YearDay   }}-{{ .StartsAt.Weekday   }}
    {{ .StartsAt.Unix }} {{ .StartsAt.UnixMilli }}
  {{ end}}
{{ end }}
```

----------------------------------------

TITLE: Example Output of 'kubectl get all'
DESCRIPTION: Shows representative output from the `kubectl get all --namespace=my-grafana` command after a successful deployment. This output includes the status of the Grafana pod(s), the LoadBalancer service details (including ClusterIP and potentially an ExternalIP), the deployment status, and the associated ReplicaSet information.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
NAME                           READY   STATUS    RESTARTS   AGE
pod/grafana-69946c9bd6-kwjb6   1/1     Running   0          7m27s

NAME              TYPE           CLUSTER-IP     EXTERNAL-IP      PORT(S)          AGE
service/grafana   LoadBalancer   10.5.243.226   1.120.130.330   3000:31171/TCP   7m27s

NAME                      READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/grafana   1/1     1            1           7m29s

NAME                                 DESIRED   CURRENT   READY   AGE
replicaset.apps/grafana-69946c9bd6   1         1         1       7m30s
```

----------------------------------------

TITLE: Configuring Custom Branding Options in grafana.ini
DESCRIPTION: This configuration snippet shows the white_labeling section of grafana.ini that controls custom branding options in Grafana Enterprise. It includes settings for application title, login page elements, logos, background images, and options to hide the Grafana edition.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-custom-branding/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
# Enterprise only
[white_labeling]
# Set to your company name to override application title
;app_title =

# Set to main title on the login page (Will not appear if a login logo is set)
;login_title =

# Set to login subtitle (Will not appear if a login logo is set)
;login_subtitle =

# Set to complete URL to override login logo
;login_logo =

# Set to complete CSS background expression to override login background
# example: login_background = url(http://www.bhmpics.com/wallpapers/starfield-1920x1080.jpg)
;login_background =

# Set to complete CSS background expression to override login box background
;login_box_background =

# Set to complete URL to override menu logo
;menu_logo =

# Set to complete URL to override fav icon (icon shown in browser tab)
;fav_icon =

# Set to complete URL to override apple/ios icon
;apple_touch_icon =

# Set to complete URL to override loading logo
;loading_logo =

# Set to `true` to remove the Grafana edition from appearing in the footer
;hide_edition =
```

----------------------------------------

TITLE: Defining Organization User Scopes in Grafana RBAC
DESCRIPTION: Specifies scopes to restrict actions to a set of users within an organization. `users:*` matches any user in the organization, while `users:id:1` targets the specific user with ID 1.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_45

LANGUAGE: text
CODE:
```
users:*
```

LANGUAGE: text
CODE:
```
users:id:*
```

----------------------------------------

TITLE: Installing the Latest Version of a Plugin (Bash)
DESCRIPTION: Command to install the latest available version of a specific Grafana plugin identified by its '<plugin-id>'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
grafana cli plugins install <plugin-id>
```

----------------------------------------

TITLE: Configuring PostgreSQL Data Source in Grafana using YAML
DESCRIPTION: This YAML configuration sets up a PostgreSQL data source in Grafana. It specifies connection details, credentials, SSL mode, connection pool settings, and PostgreSQL version. The configuration also includes options for TimescaleDB support and connection lifecycle management.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/configure/_index.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: Postgres
    type: postgres
    url: localhost:5432
    user: grafana
    secureJsonData:
      password: 'Password!'
    jsonData:
      database: grafana
      sslmode: 'disable' # disable/require/verify-ca/verify-full
      maxOpenConns: 100
      maxIdleConns: 100
      maxIdleConnsAuto: true
      connMaxLifetime: 14400
      postgresVersion: 903 # 903=9.3, 904=9.4, 905=9.5, 906=9.6, 1000=10
      timescaledb: false
```

----------------------------------------

TITLE: Setting Viewport Height - Bash
DESCRIPTION: Sets RENDERING_VIEWPORT_HEIGHT to define the default viewport height in pixels for the render browser. Used when height is unspecified in rendering requests. Requires v3.9.0+.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_41

LANGUAGE: bash
CODE:
```
# Available from v3.9.0+
RENDERING_VIEWPORT_HEIGHT=500
```

----------------------------------------

TITLE: Deleting a User from an Organization via Grafana API (HTTP)
DESCRIPTION: Example HTTP DELETE request to remove a specific user (identified by `:userId`) from a particular Grafana organization (identified by `:orgId`). This operation requires Basic Authentication and the `org.users:remove` permission with the `users:*` scope.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_32

LANGUAGE: http
CODE:
```
DELETE /api/orgs/1/users/2 HTTP/1.1
Accept: application/json
Content-Type: application/json
```

----------------------------------------

TITLE: HTTP Success Assigning Role to Team - Grafana Access Control - JSON
DESCRIPTION: This response demonstrates success when assigning a role to a team. HTTP/1.1 200 OK is returned with a JSON body stating the outcome message. Indicates successful assignment of the requested role.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_35

LANGUAGE: json
CODE:
```
{
    "message": "Role added to the team."
}
```

----------------------------------------

TITLE: Deleting a Dashboard by UID in HTTP/JSON
DESCRIPTION: Example of deleting a dashboard using its unique identifier (UID). This request sends a DELETE to /api/dashboards/uid/:uid endpoint with the dashboard's UID. This permanently removes the dashboard from Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_5

LANGUAGE: http
CODE:
```
DELETE /api/dashboards/uid/cIBgcSjkk HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Configuring Disabled Options in RadioButtonGroup (JSX)
DESCRIPTION: Shows how to pass disabledOptions prop to RadioButtonGroup, disabling specific choices by their value using strict equality check. Assumes @grafana/ui is installed. Options list and disabledOptions (array of values to disable) are required. The rendered UI will have some items unselectable based on disabledOptions.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/RadioButtonList/RadioButtonList.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
import { RadioButtonList } from '@grafana/ui';

const options = [
  { label: 'Prometheus', value: 'prometheus' },
  { label: 'Graphite', value: 'graphite' },
  { label: 'Elastic', value: 'elastic' },
  { label: 'InfluxDB', value: 'influx' },
];

const disabledOptions = ['prometheus', 'elastic'];


<RadioButtonGroup
  options={options}
  disabledOptions={disabledOptions}
  value={...}
  onChange={...}
/>

```

----------------------------------------

TITLE: Displaying a Custom Dropdown Menu Using Grafana UI in TypeScript (React)
DESCRIPTION: This snippet demonstrates how to create a dropdown menu using the Dropdown, Menu, and Button components from @grafana/ui in a React (TypeScript) environment. It shows how to define a Menu with menu items (labeled 'Google' and 'Delete'—the latter styled as destructive with an icon), insert a divider, and wrap the menu in a Dropdown triggered by a button. Prerequisites include installing @grafana/ui and ensuring the Menu component supports Item, Divider, and icon/props as specified. The Dropdown expects an overlay prop containing a JSX menu definition, and the Button provides a visual trigger. The code is intended for embedding in a Storybook or React app and requires proper React and TypeScript configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Menu/Menu.mdx#2025-04-23_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { Dropdown, Menu, Button } from '@grafana/ui';
const menu = (
  <Menu>
    <Menu.Item label="Google" />
    <Menu.Divider />
    <Menu.Item label="Delete" icon="trash-alt" destructive />
  </Menu>
);
return (
  <Dropdown overlay={menu}>
    <Button icon="bars" />
  </Dropdown>
);
```

----------------------------------------

TITLE: Configuring Traefik Router and Service for Grafana (Domain or Subdomain) - YAML
DESCRIPTION: This YAML snippet configures Traefik labels for routing traffic to Grafana based on the host/domain using the Docker provider. Set traefik.http.routers.grafana.rule to specify the host, and set the backend service port. Attach these labels to your Grafana container in Docker Compose or similar. Traefik is required for this configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_9

LANGUAGE: yaml
CODE:
```
labels:\n  traefik.http.routers.grafana.rule: Host(`grafana.example.com`)\n  traefik.http.services.grafana.loadbalancer.server.port: 3000
```

----------------------------------------

TITLE: Running Drone Configuration Generation Command in Make
DESCRIPTION: Executes the 'make drone' command to build the .drone.yml file after making changes to the Starlark files. This step is crucial in the Drone development process.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/drone-pipeline.md#2025-04-23_snippet_1

LANGUAGE: make
CODE:
```
make drone
```

----------------------------------------

TITLE: Defining Settings Scopes in Grafana RBAC
DESCRIPTION: Specifies scopes to restrict actions to a subset of Grafana settings. `settings:*` matches all settings, `settings:auth.saml:*` targets all SAML settings, and `settings:auth.saml:enabled` targets the specific 'enabled' property within SAML settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_43

LANGUAGE: text
CODE:
```
settings:*
```

----------------------------------------

TITLE: Querying a Data Source in HTTP
DESCRIPTION: Sends a POST request to query a data source with a backend implementation. This example uses the Test data source to generate CSV metric values.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_20

LANGUAGE: http
CODE:
```
POST /api/ds/query HTTP/1.1
Accept: application/json
Content-Type: application/json

{
   "queries":[
      {
         "refId":"A",
         "scenarioId":"csv_metric_values",
         "datasource":{
            "uid":"PD8C576611E62080A"
         },
         "format": "table",
         "maxDataPoints":1848,
         "intervalMs":200,
         "stringInput":"1,20,90,30,5,0"
      }
   ],
   "from":"now-5m",
   "to":"now"
}
```

----------------------------------------

TITLE: Printing All Labels from Classic Alert Conditions in Grafana (Go Template)
DESCRIPTION: This Go template snippet iterates over the $values map from a Grafana legacy alert classic condition and prints the labels of all firing time series. It uses the match function to filter keys (e.g., B0, B1, etc.) corresponding to the classic condition reference ID. Requires Grafana's alert templating context and that $values is populated by the alerting engine. Outputs lines such as 'B0: instance=server1'. Replace 'B' in the regular expression with your actual condition Ref ID if different.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_17

LANGUAGE: go
CODE:
```
{{ range $k, $v := $values -}}\n{{ if (match "B[0-9]+" $k) -}}\n{{ $k }}: {{ $v.Labels }}{{ end }}\n{{ end }}
```

----------------------------------------

TITLE: Configuring nginx for Grafana on Sub Path - Nginx
DESCRIPTION: Shows how to set up nginx to serve Grafana from a sub path (e.g., /grafana/), including proxied WebSocket support. Modifies the location blocks, root directory, and upstream definition, mapping traffic with the sub path to the backend. It's important to pair this with a rewrite rule if using path variables. Reload nginx after changes. Designed for situations when Grafana should not be at the web server root.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_2

LANGUAGE: nginx
CODE:
```
# This is required to proxy Grafana Live WebSocket connections.\nmap $http_upgrade $connection_upgrade {\n  default upgrade;\n  '' close;\n}\n\nupstream grafana {\n  server localhost:3000;\n}\n\nserver {\n  listen 80;\n  root /usr/share/nginx/www;\n  index index.html index.htm;\n\n  location /grafana/ {\n    proxy_set_header Host $host;\n    proxy_pass http://grafana;\n  }\n\n  # Proxy Grafana Live WebSocket connections.\n  location /grafana/api/live/ {\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection $connection_upgrade;\n    proxy_set_header Host $host;\n    proxy_pass http://grafana;\n  }\n}
```

----------------------------------------

TITLE: Example Grafana Target Query Model Structure in JSON
DESCRIPTION: Illustrates an example JSON structure representing a target query model for a Grafana data source. This structure, often found using Explore's query inspector, is used within the 'target' field of the correlation provisioning configuration. Runtime properties like 'refId' and 'datasource' should be omitted.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/correlations/create-a-new-correlation/index.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
  "scenario_id": "random_walk",
  "alias": "app",
  "seriesCount: 2
}
```

----------------------------------------

TITLE: Configuring Grafana Team Sync Group Attribute
DESCRIPTION: This INI configuration snippet, within the `[auth.saml]` section, sets the `assertion_attribute_groups` option to 'groups'. This tells Grafana to look for an attribute named 'groups' in the SAML assertion to extract group memberships for Team Sync.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_9

LANGUAGE: ini
CODE:
```
[auth.saml]
# ...
assertion_attribute_groups = groups
```

----------------------------------------

TITLE: Starting Grafana Container with Docker Compose (Bash)
DESCRIPTION: Command to start the Grafana container(s) defined in the `docker-compose.yaml` file. The `-d` flag runs the containers in detached mode (in the background). This command is used after creating or modifying the `docker-compose.yaml` file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
# start the grafana container
docker compose up -d
```

----------------------------------------

TITLE: Configuring Hubot External Scripts (JSON)
DESCRIPTION: This JSON array represents the list of external scripts that Hubot should load upon startup. By adding `"hubot-grafana"` to this array within the `external-scripts.json` file, the newly installed Grafana plugin is activated and made available for use within Hubot. Other plugins like `hubot-pugme` and `hubot-shipit` might already be present.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/integrate-hubot/index.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
["hubot-pugme", "hubot-shipit", "hubot-grafana"]
```

----------------------------------------

TITLE: Declaring Storybook Metadata for CodeEditor Component - MDX
DESCRIPTION: This snippet defines the metadata for the Storybook MDX page, setting the title and associating the CodeEditor component with the story. It requires the CodeEditor component and Meta from Storybook to be available in scope. This configuration enables Storybook to render the documentation for the component under the specified title, aiding discoverability and navigation.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Monaco/CodeEditor.mdx#2025-04-23_snippet_1

LANGUAGE: mdx
CODE:
```
<Meta title="MDX|CodeEditor" component={CodeEditor} />
```

----------------------------------------

TITLE: Specifying Local Grafana Package Channel in Plugin Dependencies
DESCRIPTION: Example snippet for a plugin's `package.json` file demonstrating how to depend on a Grafana package published to a local registry using a specific distribution channel tag like `dev` or `canary`, instead of a fixed version number. This is useful for testing local package changes.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/README.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
// plugin's package.json

dependencies: {
  //... other dependencies
  "@grafana/data": "dev" // or canary
}
```

----------------------------------------

TITLE: Configuring Storybook Meta for Box Component in MDX (JSX)
DESCRIPTION: Defines the Storybook metadata for the Box component, specifying the title and component reference for story organization. Dependencies include Storybook's MDX/JSX integration and the Box React component. This configuration enables grouping and viewing of Box stories within the Storybook interface under the 'MDX|Box' section.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Box/Box.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<Meta title="MDX|Box" component={Box} />
```

----------------------------------------

TITLE: Configuring Grafana Enterprise AWS License Validation via Environment Variable on ECS
DESCRIPTION: Sets the `GF_ENTERPRISE_LICENSE_VALIDATION_TYPE` environment variable to `aws` within an AWS ECS task definition. This instructs Grafana Enterprise (v8.3.0+) to use AWS License Manager for license validation instead of Grafana Labs servers, requiring an appropriate IAM task role with specific permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-ecs/index.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
GF_ENTERPRISE_LICENSE_VALIDATION_TYPE=aws
```

----------------------------------------

TITLE: Example Response for Adding a User to an Organization (HTTP/JSON)
DESCRIPTION: Example successful HTTP response (200 OK) after adding a user to a Grafana organization. The JSON response body confirms the action and includes the `userId` of the added user.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_29

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{"message":"User added to organization", "userId": 1}
```

----------------------------------------

TITLE: Prometheus Job for Scraping Grafana Backend Plugin Metrics - YAML
DESCRIPTION: This snippet shows how to configure Prometheus to scrape metrics from a Grafana backend plugin, using a custom metrics_path under /metrics/plugins/. Placed in prometheus.yml, it specifies job_name, intervals, the custom metrics_path, and static target settings. Inputs: job_name (plugin name or custom), scrape_interval, scrape_timeout, metrics_path, targets. Outputs: Prometheus collects plugin-specific metrics from designated Grafana endpoints. Ensure the plugin is enabled in Grafana and available at the noted endpoint before use.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-monitoring.md#2025-04-23_snippet_4

LANGUAGE: yaml
CODE:
```
- job_name: 'grafana_github_datasource'\n\n   scrape_interval: 15s\n   scrape_timeout: 5s\n   metrics_path: /metrics/plugins/grafana-test-datasource\n\n   static_configs:\n     - targets: ['localhost:3000']\n
```

----------------------------------------

TITLE: Creating Grafana systemd Unit File - Shell
DESCRIPTION: Creates an empty systemd service file for Grafana server. Prerequisite: Systemd-enabled system and root permissions. Output: Placeholder file at /etc/systemd/system/grafana-server.service, ready for configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_10

LANGUAGE: shell
CODE:
```
sudo touch /etc/systemd/system/grafana-server.service
```

----------------------------------------

TITLE: Triggering a Success Toast Notification via AppEvents in JavaScript/JSX
DESCRIPTION: This snippet shows the standard method for triggering a Toast notification in Grafana. It uses the `getAppEvents` function from `@grafana/runtime` to access the application's event bus and then publishes an event using `appEvents.publish`. The event type (`AppEvents.alertSuccess.name`) determines the toast style (success in this case), and the `payload` array contains the message strings to be displayed. This approach is preferred over directly rendering the Alert component for toasts.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Alert/Alert.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
import { AppEvents } from '@grafana/data';
import { getAppEvents } from '@grafana/runtime';

const appEvents = getAppEvents();
appEvents.publish({
  type: AppEvents.alertSuccess.name,
  payload: [text + ': ' + resp.status + ' (' + resp.statusText + ')'],
});
```

----------------------------------------

TITLE: HTML Iframe Embed for Grafana Panel
DESCRIPTION: HTML code snippet for embedding a Grafana panel snapshot on an external website using an iframe. The example includes width, height, and frameborder settings along with a URL pointing to the panel snapshot.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/share-dashboards-panels/_index.md#2025-04-23_snippet_1

LANGUAGE: html
CODE:
```
<iframe
  src="https://snapshots.raintank.io/dashboard-solo/snapshot/y7zwi2bZ7FcoTlB93WN7yWO4aMiz3pZb?from=1493369923321&to=1493377123321&panelId=4"
  width="650"
  height="300"
  frameborder="0"
></iframe>
```

----------------------------------------

TITLE: Configuring Kubernetes Security Context for EKS IAM Roles
DESCRIPTION: YAML configuration for a Kubernetes security context that grants the Grafana user (ID 472) permission to access projected credentials. This is required when using EKS IAM roles for service accounts.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/aws-authentication/index.md#2025-04-23_snippet_2

LANGUAGE: yaml
CODE:
```
securityContext:
  fsGroup: 472
  runAsUser: 472
  runAsGroup: 472
```

----------------------------------------

TITLE: Starring a Dashboard for Actual User via Grafana API (HTTP)
DESCRIPTION: Stars a specific dashboard (identified by its unique identifier `:uid`) for the currently authenticated user using a POST request to `/api/user/stars/dashboard/uid/:uid`. Requires authentication (Bearer Token shown). Returns a JSON success message.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_21

LANGUAGE: http
CODE:
```
POST /api/user/stars/dashboard/uid/BqokFhx7z HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{"message":"Dashboard starred!"}
```

----------------------------------------

TITLE: Installing Grafana Mixin Dependencies with Go - Bash
DESCRIPTION: This Bash snippet installs the mixtool and jsonnetfmt tool binaries required for building and formatting Grafana Mixin configurations, using the Go tooling system. It relies on having a functional Go development environment and uses the 'go get' command to fetch and install the two required command-line tools. The primary parameters are the package import paths; upon completion, the corresponding executables will be available in the $GOPATH/bin or GOBIN directory. Limitations include dependency on Go being properly installed and $GOPATH/bin or GOBIN being in the system PATH.
SOURCE: https://github.com/grafana/grafana/blob/main/grafana-mixin/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ go get github.com/monitoring-mixins/mixtool/cmd/mixtool
$ go get github.com/google/go-jsonnet/cmd/jsonnetfmt
```

----------------------------------------

TITLE: Installing Grafana Enterprise via DNF in Bash
DESCRIPTION: Installs the Grafana Enterprise edition using the `dnf` package manager. Requires `sudo` privileges and relies on the pre-configured Grafana repository. This installs the enterprise version, which includes additional features available with a license.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
sudo dnf install grafana-enterprise
```

----------------------------------------

TITLE: Installing Grafana on macOS via Homebrew
DESCRIPTION: Updates the Homebrew package list and then installs the latest stable version of Grafana. This command assumes Homebrew is already installed on the macOS system. The installation paths differ for Intel (`/usr/local/Cellar`) and Apple Silicon (`/opt/homebrew/Cellar`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/mac/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
brew update
brew install grafana
```

----------------------------------------

TITLE: MySQL Time Filter Macro Implementation
DESCRIPTION: Demonstrates the usage of Grafana's built-in time filter macro with MySQL date columns for time-based filtering.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_1

LANGUAGE: SQL
CODE:
```
$__timeFilter
```

----------------------------------------

TITLE: Provisioning InfluxDB 3.x Data Source with SQL in Grafana
DESCRIPTION: This YAML snippet illustrates how to provision an InfluxDB 3.x data source using SQL in Grafana. It specifies the version, database name, HTTP mode, and includes a secure API token for authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/configure-influxdb-data-source/_index.md#2025-04-23_snippet_4

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: InfluxDB_v3_InfluxQL
    type: influxdb
    access: proxy
    url: http://localhost:8086
    jsonData:
      version: SQL
      dbName: site
      httpMode: POST
      insecureGrpc: false
    secureJsonData:
      token: '<api-token>'
```

----------------------------------------

TITLE: Setting Team Role Assignments (Bulk) - Grafana Access Control HTTP API - HTTP
DESCRIPTION: Illustrates a PUT request to update a team's entire set of assigned roles in a single operation. The API call's JSON body includes a 'roleUids' array specifying the desired role UIDs for assignment. Optional parameters include updating hidden role assignments. Requires both 'teams.roles:add' and 'teams.roles:remove' with delegate permission scope.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_38

LANGUAGE: http
CODE:
```
PUT /api/access-control/teams/1/roles
Accept: application/json
Content-Type: application/json

{
    "roleUids": [
        "ZiHQJq5nk",
        "GzNQ1357k"
    ]
}
```

----------------------------------------

TITLE: Displaying Grafana CLI Version (Bash)
DESCRIPTION: An example command using the '-v' flag to print the currently installed version of the Grafana CLI executable.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
grafana cli -v
```

----------------------------------------

TITLE: Re-encrypting Database Secrets with CLI in Grafana Enterprise (Shell)
DESCRIPTION: This shell command uses the Grafana CLI to re-encrypt all secrets in the database with the new encryption key. It is typically run from the root directory of a Grafana Enterprise installation after configuring a new provider. Re-encryption updates previous secrets to use the new Azure Key Vault provider, ensuring consistent security.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-azure-key-vault/index.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
grafana cli admin secrets-migration re-encrypt
```

----------------------------------------

TITLE: Basic SQL Query for Template Variable
DESCRIPTION: A simple SQL query to retrieve hostname values from a host table for use as a template variable dropdown in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/template-variables/index.md#2025-04-23_snippet_0

LANGUAGE: sql
CODE:
```
SELECT hostname FROM host
```

----------------------------------------

TITLE: Setting Service Account Role Assignments (HTTP PUT)
DESCRIPTION: Sends a PUT request to update the service account's role assignments to match the provided set of UIDs. It includes the required permissions and JSON body schema for the operation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_31

LANGUAGE: http
CODE:
```
PUT /api/access-control/users/1/roles
Accept: application/json
Content-Type: application/json

{
    "global": false,
    "roleUids": [
        "ZiHQJq5nk",
        "GzNQ1357k"
    ]
}
```

----------------------------------------

TITLE: Listing Auth Tokens for Actual User via Grafana API (HTTP)
DESCRIPTION: Retrieves a list of active and inactive authentication tokens (representing logged-in devices/sessions) for the currently authenticated user via a GET request to `/api/user/auth-tokens`. Requires authentication (Bearer Token shown). The response is a JSON array detailing each token's properties like ID, activity status, client IP, browser, OS, device type, and creation/last seen timestamps.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_23

LANGUAGE: http
CODE:
```
GET /api/user/auth-tokens HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

[
  {
    "id": 361,
    "isActive": true,
    "clientIp": "127.0.0.1",
    "browser": "Chrome",
    "browserVersion": "72.0",
    "os": "Linux",
    "osVersion": "",
    "device": "Other",
    "createdAt": "2019-03-05T21:22:54+01:00",
    "seenAt": "2019-03-06T19:41:06+01:00"
  },
  {
    "id": 364,
    "isActive": false,
    "clientIp": "127.0.0.1",
    "browser": "Mobile Safari",
    "browserVersion": "11.0",
    "os": "iOS",
    "osVersion": "11.0",
    "device": "iPhone",
    "createdAt": "2019-03-06T19:41:19+01:00",
    "seenAt": "2019-03-06T19:41:21+01:00"
  }
]
```

----------------------------------------

TITLE: Updating Correlations in Grafana HTTP API
DESCRIPTION: HTTP request for updating an existing correlation's properties. The request allows updating the label and description of the correlation identified by sourceUID and correlationUID.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
POST /api/datasources/uid/uyBf2637k/correlations/J6gn7d31L HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
{
	"label": "My Label",
	"description": "Logs to Traces",
}
```

----------------------------------------

TITLE: Retrieving Library Element Connections Request Example (HTTP)
DESCRIPTION: Example HTTP GET request to fetch the connections (e.g., dashboards where the element is used) for a specific library element identified by its UID (`V--OrYHnz`) using the `/api/library-elements/:uid/connections` endpoint. Requires authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
GET /api/library-elements/V--OrYHnz/connections HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Changing Log Level - JSON
DESCRIPTION: Configures logging parameters for the rendering service using JSON. The level determines verbosity, with options such as 'debug'. The console subkeys control whether logs are in JSON format and if colored output is enabled. Used in configuration files for persistent setup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_24

LANGUAGE: json
CODE:
```
{
  "service": {
    "logging": {
      "level": "debug",
      "console": {
        "json": false,
        "colorize": true
      }
    }
  }
}
```

----------------------------------------

TITLE: Example HTTP Error Response for Invalid Scope in Grafana Role Creation
DESCRIPTION: Shows the HTTP 400 Bad Request response received when attempting to create a Grafana role with an invalid permission scope (e.g., `serviceaccounts:serviceaccount6`) for the specified action (`serviceaccounts.permissions:read`). The JSON body details the validation error, explaining why the scope is invalid and listing expected scope prefixes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
HTTP/1.1 400 Bad Request
Content-Type: application/json
{
	"extra": {
		"validationError": "unknown scope: serviceaccounts:serviceaccount6 for action: serviceaccounts.permissions:read provided, expected prefixes are [* serviceaccounts:* serviceaccounts:id:*]"
	},
	"message": "Invalid scope",
	"messageId": "accesscontrol.permission-invalid-scope",
	"statusCode": 400,
	"traceID": ""
}
```

----------------------------------------

TITLE: Defining LogQL LBAC Rule for Specific Namespace (Task 1)
DESCRIPTION: Example LogQL query used as an LBAC rule for Team B in Task 1. This rule grants access only to logs or metrics data points that have the label `namespace` with the value `prod`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_4

LANGUAGE: logql
CODE:
```
{namespace="prod"}
```

----------------------------------------

TITLE: Importing Grafana Playlists via API in Shell
DESCRIPTION: This shell script iterates through all JSON files within the `playlists` directory (created by the export script). For each file (`$playlist`), it uses `curl` to send an HTTP POST request to the `/api/playlists` endpoint of the destination Grafana Cloud instance (`$GRAFANA_CLOUD_INSTANCE_URL`). The request includes the playlist data from the file (`-d @$playlist`), sets the `Content-Type` header to `application/json`, and authenticates using the destination Bearer token (`$GRAFANA_DEST_TOKEN`). Output from `curl` is suppressed (`> /dev/null`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_11

LANGUAGE: shell
CODE:
```
for playlist in playlists/*; do
  curl -XPOST "${GRAFANA_CLOUD_INSTANCE_URL}/api/playlists" \
    -H "Authorization: Bearer $GRAFANA_DEST_TOKEN" \
    -H "Content-Type: application/json" \
    -d @$playlist > /dev/null;
done
```

----------------------------------------

TITLE: Resulting Plaintext Output of Rendered Notification Template - Plaintext
DESCRIPTION: This snippet shows a sample output generated after rendering the notification template for firing and resolved alerts. It demonstrates the aggregation and summarization of multiple alert statuses and their respective summaries, making it easier for recipients to understand the current state of monitored systems. The example output is meant to represent the type of alert notification a contact point (e.g., email or Slack) would receive after templating.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/templates.md#2025-04-23_snippet_4

LANGUAGE: plaintext
CODE:
```
1 firing alert(s)
- The database server db1 has exceeded 75% of available disk space. Disk space used is 76%, please resize the disk size within the next 24 hours.

1 resolved alert(s)
- The web server web1 has been responding to 5% of HTTP requests with 5xx errors for the last 5 minutes.
```

----------------------------------------

TITLE: Maintaining Go Module Files
DESCRIPTION: Commands for tidying up Go module dependency files and updating the workspace. These commands help maintain clean dependency definitions in the project.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/UPGRADING_DEPENDENCIES.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
go mod tidy
```

LANGUAGE: bash
CODE:
```
make update-workspace
```

----------------------------------------

TITLE: Updating a Data Source by ID (Deprecated) via Grafana API - HTTP
DESCRIPTION: This PUT request updates an existing data source by its numeric ID (deprecated API), sending the full data source configuration with optional secureJsonData containing sensitive fields such as basicAuthPassword. Requires a bearer authorization token and a full or partial JSON body specifying updated parameters. The response echoes back the updated data source configuration and confirms any secure fields. Use with caution; this method is deprecated in Grafana v9.0.0 and later.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
PUT /api/datasources/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  "id":1,\n  "orgId":1,\n  "name":"test_datasource",\n  "type":"graphite",\n  "access":"proxy",\n  "url":"http://mydatasource.com",\n  "password":"",\n  "user":"",\n  "database":"",\n  "basicAuth":true,\n  "basicAuthUser":"basicuser",\n  "secureJsonData": {\n    "basicAuthPassword": "basicpassword"\n  },\n  "isDefault":false,\n  "jsonData":null\n}
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{\n  "datasource": {\n    "id": 1,\n    "uid": "kLtEtcRGk",\n    "orgId": 1,\n    "name": "test_datasource",\n    "type": "graphite",\n    "typeLogoUrl": "",\n    "access": "proxy",\n    "url": "http://mydatasource.com",\n    "password": "",\n    "user": "",\n    "database": "",\n    "basicAuth": true,\n    "basicAuthUser": "basicuser",\n    "basicAuthPassword": "",\n    "withCredentials": false,\n    "isDefault": false,\n    "jsonData": {},\n    "secureJsonFields": {\n      "basicAuthPassword": true\n    },\n    "version": 1,\n    "readOnly": false\n  },\n  "id": 102,\n  "message": "Datasource updated",\n  "name": "test_datasource"\n}
```

----------------------------------------

TITLE: Configuring Content Security Policy (CSP) in Grafana using TOML
DESCRIPTION: Enables and configures the Content Security Policy (CSP) within the `[security]` section of `grafana.ini` using the `content_security_policy` flag and `content_security_policy_template`. CSP helps prevent Cross-Site Scripting (XSS) attacks by defining rules for resource loading in the browser. The provided template includes directives for scripts, objects, fonts, styles, images, base URI, connections, manifests, media, and forms, utilizing variables like `$NONCE` and `$ROOT_PATH`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-security-hardening/index.md#2025-04-23_snippet_3

LANGUAGE: toml
CODE:
```
[security]
# Enable adding the Content-Security-Policy header to your requests.
# CSP enables you to control the resources the user agent can load and helps prevent XSS attacks.
content_security_policy = true

# Set the Content Security Policy template that is used when the Content-Security-Policy header is added to your requests.
# $NONCE in the template includes a random nonce.
# $ROOT_PATH is server.root_url without the protocol.
content_security_policy_template = """script-src 'self' 'unsafe-eval' 'unsafe-inline' 'strict-dynamic' $NONCE;object-src 'none';font-src 'self';style-src 'self' 'unsafe-inline' blob:;img-src * data:;base-uri 'self';connect-src 'self' grafana.com ws://$ROOT_PATH wss://$ROOT_PATH;manifest-src 'self';media-src 'none';form-action 'self';"""
```

----------------------------------------

TITLE: Configuring MySQL Provisioning with TLS and Skip Verification in Grafana
DESCRIPTION: This YAML configuration sets up a MySQL datasource in Grafana using TLS but skipping certificate verification. It includes TLS settings with the skip verification flag, along with the basic connection details and pool settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/configuration/_index.md#2025-04-23_snippet_3

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: MySQL
    type: mysql
    url: localhost:3306
    user: grafana
    jsonData:
      tlsAuth: true
      tlsSkipVerify: true
      database: grafana
      maxOpenConns: 100
      maxIdleConns: 100
      maxIdleConnsAuto: true
      connMaxLifetime: 14400
    secureJsonData:
      password: ${GRAFANA_MYSQL_PASSWORD}
      tlsClientCert: ${GRAFANA_TLS_CLIENT_CERT}
      tlsCACert: ${GRAFANA_TLS_CA_CERT}
```

----------------------------------------

TITLE: Defining RelativeTimeRange Structure in Go
DESCRIPTION: Defines the RelativeTimeRange structure with 'from' and 'to' properties of Duration type.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_46

LANGUAGE: go
CODE:
```
**Properties**

{{% responsive-table %}}

| Name   | Type                  | Go type  | Required | Default | Description | Example |
| ------ | --------------------- | -------- | :------: | ------- | ----------- | ------- |
| `from` | [Duration](#duration) | Duration |          |         |             |         |
| `to`   | [Duration](#duration) | Duration |          |         |             |         |

{{% /responsive-table %}}
```

----------------------------------------

TITLE: Using InlineLabel with Tooltip in React (JSX)
DESCRIPTION: This JSX snippet demonstrates how to implement the InlineLabel component from the current module, wrapping child content and providing both width and tooltip props. The 'width' parameter dictates the label's width style, while 'tooltip' displays a help icon with the given string on hover. The component is best used with form inputs requiring a short, accessible label. Dependencies include the InlineLabel component and React; the snippet outputs a labeled UI element suitable for query editor forms.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/InlineLabel.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<InlineLabel width=\"auto\" tooltip=\"Tooltip content\">\n  Simple label\n</InlineLabel>
```

----------------------------------------

TITLE: Retrieving a List of Shared Dashboards with Pagination in Grafana
DESCRIPTION: This HTTP request retrieves a paginated list of all shared dashboards, specifying the number of results per page and the page number. It requires dashboard read permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
GET /api/dashboards/public-dashboards?perpage=2&page=3 HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Defining Grafana Fixed Role: fixed:library.panels:creator
DESCRIPTION: Specifies the `fixed:library.panels:creator` role (ID: `fixed_6eX6ItfegCIY5zLmPqTDW8ZV7KY`) within Grafana. This role grants `library.panels:create` and `folders:read` permissions, allowing users to create library panels at the root level and read folders.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_14

LANGUAGE: plaintext
CODE:
```
fixed:library.panels:creator
```

LANGUAGE: plaintext
CODE:
```
fixed_6eX6ItfegCIY5zLmPqTDW8ZV7KY
```

LANGUAGE: plaintext
CODE:
```
Permissions included:
- library.panels:create
- folders:read
```

----------------------------------------

TITLE: Installing Grafana Manually via YUM from RPM URL in Bash
DESCRIPTION: Installs Grafana by directly providing the URL to a specific RPM package file to the `yum install` command. The `-y` flag automatically confirms the installation. Replace `<rpm package url>` with the actual download link obtained from the Grafana download page. This method requires manual updates for new versions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
sudo yum install -y <rpm package url>
```

----------------------------------------

TITLE: Importing TagList Component and Stories in JavaScript
DESCRIPTION: This snippet imports the necessary components and stories for the TagList documentation. It includes imports from Storybook blocks, the TagList component, and its associated stories.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tags/TagList.mdx#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { Canvas, ArgTypes } from '@storybook/blocks';
import { TagList } from './TagList';
import * as TagListStories from './TagList.story';
```

----------------------------------------

TITLE: Listing All Resources in Namespace with Kubectl (Bash)
DESCRIPTION: Uses `kubectl get all` with the `-o wide` flag to list all major Kubernetes resources (Pods, Services, Deployments, ReplicaSets, etc.) within the specified namespace ('my-grafana'). The `-o wide` option provides additional details like node assignments and IP addresses.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_21

LANGUAGE: bash
CODE:
```
kubectl get all --namespace=my-grafana -o wide
```

----------------------------------------

TITLE: Enabling Debug Logging for Grafana Reporting Components
DESCRIPTION: This configuration snippet enables debug-level logging for various Grafana reporting components (rendering, API, scheduler, sender, service). Add or modify the `filters` line under the `[log]` section in the Grafana configuration file to increase log verbosity, aiding in troubleshooting reporting issues.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/create-reports/_index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
[log]
filters = rendering:debug,report.api:debug,report.render:debug,report.scheduler:debug,report.sender:debug,report.service:debug
```

----------------------------------------

TITLE: Enabling Envelope Encryption Feature Toggle (Grafana v8.5)
DESCRIPTION: In Grafana v8.5, envelope encryption was optional. To enable it, for instance, when planning a downgrade from v9.0+, add the `envelopeEncryption` feature toggle to the `[feature_toggles]` section in the Grafana configuration file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
envelopeEncryption
```

----------------------------------------

TITLE: Adding Age Public Key to Grafana Configuration (INI)
DESCRIPTION: This configuration snippet demonstrates how to add a generated 'age' public key to the `public_keys` setting within the `[support_bundles]` section of the Grafana configuration file. This enables automatic encryption of newly generated support bundles using the specified key.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/troubleshooting/support-bundles/index.md#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
[support_bundles]
public_keys = "age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p"
```

----------------------------------------

TITLE: Updating Ownership of Grafana Directory Post-Run using Shell
DESCRIPTION: Recursively changes the owner and group of the Grafana installation directory (`/usr/local/grafana`) to the `grafana` user and `users` group using `chown`. This command is run again after the initial manual server start (during binary installation) to ensure that newly created directories (like the data directory) also have the correct ownership. Requires `sudo` privileges.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_11

LANGUAGE: shell
CODE:
```
sudo chown -R grafana:users /usr/local/grafana
```

----------------------------------------

TITLE: Provisioning Azure Monitor with Current User Authentication in YAML
DESCRIPTION: YAML configuration for provisioning Azure Monitor data source using Current User authentication. Requires oauthPassThru and disableGrafanaCache to ensure proper authentication and prevent caching of unauthorized resources.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_3

LANGUAGE: yaml
CODE:
```
apiVersion: 1 # config file version

datasources:
  - name: Azure Monitor
    type: grafana-azure-monitor-datasource
    access: proxy
    jsonData:
      azureAuthType: currentuser
      oauthPassThru: true
      disableGrafanaCache: true
      subscriptionId: <subscription-id> # Optional, default subscription
    version: 1
```

----------------------------------------

TITLE: Demonstrating Multiple Dependency Issue in Go with Wire
DESCRIPTION: This snippet shows an example of a common problem in dependency injection where multiple dependencies of the same type are needed. It demonstrates why Wire does not allow multiple providers for one type in the same injection scope.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/faq.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
type Foo struct { /* ... */ }
type Bar struct { /* ... */ }

func newFoo1() *Foo { /* ... */ }
func newFoo2() *Foo { /* ... */ }
func newBar(foo1 *Foo, foo2 *Foo) *Bar { /* ... */ }

func inject() *Bar {
	// ERROR! Multiple providers for *Foo.
	wire.Build(newFoo1, newFoo2, newBar)
	return nil
}
```

----------------------------------------

TITLE: Managing Dashboard Annotation Retention Period - Grafana INI
DESCRIPTION: Specifies `[annotations.dashboard]` section, defining retention (`max_age`) for dashboard-linked annotations. The value is a duration expression such as '6h', '10d', etc. Default is 0 (keep forever). Used for cleaning up dashboard-specific annotation history.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_25

LANGUAGE: ini
CODE:
```
[annotations.dashboard]
# How long to keep dashboard annotations
max_age = 30d

```

----------------------------------------

TITLE: Upgrading Grafana on Debian using dpkg (Bash)
DESCRIPTION: Downloads the specified Grafana Debian package using wget, ensures the 'adduser' package is installed via apt-get, and then installs the downloaded Grafana package using dpkg. This is used for manual upgrades via downloaded .deb files.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/upgrade/upgrade-common-tasks.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
wget <debian package url>
sudo apt-get install -y adduser
sudo dpkg -i grafana_<version>_amd64.deb
```

----------------------------------------

TITLE: Prometheus Job Configuration for Scraping Grafana Metrics - YAML
DESCRIPTION: This Prometheus scrape configuration should be added to prometheus.yml to collect Grafana's exposed metrics from the /metrics endpoint. It sets the job_name, scrape_interval, scrape_timeout, and specifies the static_targets to connect to the Grafana instance, typically on localhost:3000. Inputs: job_name (string), scrape_interval (duration), scrape_timeout (duration), static_configs (target address array). Outputs: Prometheus integrates and stores Grafana metrics. This job must be activated by restarting Prometheus.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-monitoring.md#2025-04-23_snippet_2

LANGUAGE: yaml
CODE:
```
- job_name: 'grafana_metrics'\n\n   scrape_interval: 15s\n   scrape_timeout: 5s\n\n   static_configs:\n     - targets: ['localhost:3000']\n
```

----------------------------------------

TITLE: Configuring Sign-out Redirect URL with OpenID Connect (INI)
DESCRIPTION: This configuration example sets the `signout_redirect_url` in Grafana's INI file. It specifies the URL users are redirected to upon logout, integrating with an OpenID Connect provider's logout endpoint (`http://localhost:8087/.../logout`) and providing the required `post_logout_redirect_uri` parameter (URL-encoded `http://localhost:3000/login`) to specify where the identity provider should redirect the user back to after logout.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_15

LANGUAGE: ini
CODE:
```
signout_redirect_url = http://localhost:8087/realms/grafana/protocol/openid-connect/logout?post_logout_redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Flogin
```

----------------------------------------

TITLE: Setting Chrome Executable for Remote Rendering Service - Bash
DESCRIPTION: Sets the CHROME_BIN environment variable to define the Chrome/Chromium executable used in remote rendering mode for the image rendering service. This command should be run in the shell or included in environment configuration before launching the rendering service process, and requires that the given path points to a valid Chrome/Chromium binary on the system.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_14

LANGUAGE: bash
CODE:
```
CHROME_BIN="/usr/bin/chromium-browser"
```

----------------------------------------

TITLE: Data Source Resources Response in HTTP
DESCRIPTION: Example response for fetching resources from a CloudWatch data source, returning a list of dimension keys.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_18

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

[
	{
		"text": "AutoScalingGroupName",
		"value": "AutoScalingGroupName",
		"label": "AutoScalingGroupName"
	},
	{
		"text": "ImageId",
		"value": "ImageId",
		"label": "ImageId"
	},
	{
		"text": "InstanceId",
		"value": "InstanceId",
		"label": "InstanceId"
	},
	{
		"text": "InstanceType",
		"value": "InstanceType",
		"label": "InstanceType"
	}
]
```

----------------------------------------

TITLE: Creating a Shared Dashboard in Grafana using HTTP POST
DESCRIPTION: This HTTP request creates a new shared dashboard for a specific dashboard UID. It includes parameters for configuration like access token, time selection, annotations, and share mode settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
POST /api/dashboards/uid/xCpsVuc4z/public-dashboards/ HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
    "uid": "cd56d9fd-f3d4-486d-afba-a21760e2acbe",
    "accessToken": "5c948bf96e6a4b13bd91975f9a2028b7",
    "timeSelectionEnabled": false,
    "isEnabled": true,
    "annotationsEnabled": false,
    "share": "public"
}
```

----------------------------------------

TITLE: Provisioning Admin Role Permission Removal via YAML (yaml)
DESCRIPTION: This YAML snippet declaratively modifies the 'basic:grafana_admin' role, ensuring removal of user creation and organization invite permissions. The 'permissions' list specifies actions with 'state: absent' so that they are removed, and 'from' ensures base permissions are inherited. This configuration is for use with Grafana server provisioning and is necessary for environments with strict user management policies. Inputs are the provisioning file and existing roles; outputs are reduced admin capabilities.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_6

LANGUAGE: yaml
CODE:
```
apiVersion: 2

roles:
  - name: 'basic:grafana_admin'
    global: true
    version: 3
    from:
      - name: 'basic:grafana_admin'
        global: true
    permissions:
      - action: 'users:create'
        state: 'absent'
      - action: 'org.users:add'
        scope: 'users:*'
        state: 'absent'
```

----------------------------------------

TITLE: Configuring and Describing RefreshPicker in Storybook MDX (MDX)
DESCRIPTION: This MDX block configures the metadata for the Storybook entry, describes the purpose and usage of the RefreshPicker component, and embeds example usages and argument types for interactive exploration. It requires Storybook's MDX environment, the loaded RefreshPicker component and its stories, and displays both user-facing documentation and interactive components. The snippet expects RefreshPickerStories.Examples and the RefreshPicker component to be available, with outputs rendering in Storybook's UI.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/RefreshPicker/RefreshPicker.mdx#2025-04-23_snippet_1

LANGUAGE: MDX
CODE:
```
<Meta title="MDX|RefreshPicker" component={RefreshPicker} />

# Refresh Picker

This component is used on dashboards to refresh visualizations. Grafana does not do this automatically, queries run on their own schedule according to the panel settings. Grafana cancels any pending requests when a new refresh is triggered.

**The refresh icon:** will immediately run the query and refresh the visualizations.

**The down arrow:** will display a list of refresh intervals. If one of them is selected the dashboard will regularly refresh according to that schedule.

<Canvas of={RefreshPickerStories.Examples} />

<ArgTypes of={RefreshPicker} />
```

----------------------------------------

TITLE: Provisioning Prometheus Data Source in Grafana via YAML
DESCRIPTION: This YAML configuration demonstrates how to provision a Prometheus data source in Grafana using the provisioning system. It includes settings for access mode, HTTP method, alert management, caching level, and exemplar trace configurations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/_index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    # Access mode - proxy (server in the UI) or direct (browser in the UI).
    url: http://localhost:9090
    jsonData:
      httpMethod: POST
      manageAlerts: true
      prometheusType: Prometheus
      prometheusVersion: 2.44.0
      cacheLevel: 'High'
      disableRecordingRules: false
      incrementalQueryOverlapWindow: 10m
      exemplarTraceIdDestinations:
        # Field with internal link pointing to data source in Grafana.
        # datasourceUid value can be anything, but it should be unique across all defined data source uids.
        - datasourceUid: my_jaeger_uid
          name: traceID

        # Field with external link.
        - name: traceID
          url: 'http://localhost:3000/explore?orgId=1&left=%5B%22now-1h%22,%22now%22,%22Jaeger%22,%7B%22query%22:%22$${__value.raw}%22%7D%5D'
```

----------------------------------------

TITLE: Querying Vehicle Velocity Data with Flux for Grafana Alerts
DESCRIPTION: This Flux query retrieves velocity data for a 1983 DeLorean from the 'vehicles' bucket. It filters the data by measurement, vehicle type, year, and field, then aggregates it using a specified window period before yielding the mean values.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_2

LANGUAGE: flux
CODE:
```
from(bucket: "vehicles")
|> range(start: v.timeRangeStart, stop: v.timeRangeStop)
|> filter(fn: (r) => r["_measurement"] == "VehicleData")
|> filter(fn: (r) => r["VehicleType"] == "DeLorean")
|> filter(fn: (r) => r["VehicleYear"] == "1983")
|> filter(fn: (r) => r["_field"] == "velocity")
|> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
|> yield(name: "mean")
```

----------------------------------------

TITLE: Deleting a Data Source by UID via Grafana API - HTTP
DESCRIPTION: This DELETE request deletes a data source using its unique UID identifier. Only the UID is required in the URL; no request body is needed. Authorization is enforced via a Bearer token. The JSON response confirms deletion and provides the ID of the deleted data source. This modern endpoint should be preferred over deprecated ID-based APIs for future compatibility.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_11

LANGUAGE: http
CODE:
```
DELETE /api/datasources/uid/kLtEtcRGk HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{\n    "message": "Data source deleted",\n    "id": 1\n}
```

----------------------------------------

TITLE: Getting the Notification Policy Tree via Grafana Provisioning API (HTTP Request)
DESCRIPTION: Makes a GET request to `/api/v1/provisioning/policies` to retrieve the complete notification policy tree structure used in Grafana alerting. Expects a 200 OK response containing the policy tree data, typically conforming to the 'Route' schema.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_26

LANGUAGE: http
CODE:
```
GET /api/v1/provisioning/policies
```

----------------------------------------

TITLE: Filtering Fields by Name in Grafana
DESCRIPTION: This example shows how to use the 'Filter fields by name' transformation in Grafana. It demonstrates filtering fields using a regular expression to include only production environment data.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_14

LANGUAGE: markdown
CODE:
```
| Time                | dev-eu-west | dev-eu-north | prod-eu-west | prod-eu-north |
| ------------------- | ----------- | ------------ | ------------ | ------------- |
| 2023-03-04 23:56:23 | 23.5        | 24.5         | 22.2         | 20.2          |
| 2023-03-04 23:56:23 | 23.6        | 24.4         | 22.1         | 20.1          |

| Time                | prod-eu-west | prod-eu-north |
| ------------------- | ------------ | ------------- |
| 2023-03-04 23:56:23 | 22.2         | 20.2          |
| 2023-03-04 23:56:23 | 22.1         | 20.1          |
```

----------------------------------------

TITLE: Mounting ConfigMap and Persistent Volume in Grafana Deployment - Kubernetes YAML
DESCRIPTION: Shows a deployment snippet for mounting both a persistent volume (for data) and a ConfigMap (for configuration) into the Grafana pod. The 'ge-config' ConfigMap is mounted at '/etc/grafana', and the corresponding volume definition references the ConfigMap. Proper mounting is required for custom configuration (such as log level) to be active.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_33

LANGUAGE: yaml
CODE:
```
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
# the rest of the code remains the same.
...
....
...
            requests:
            cpu: 250m
            memory: 750Mi
        volumeMounts:
          - mountPath: /var/lib/grafana
            name: grafana-pv
          # This is to mount the volume for the custom configuration
          - mountPath: /etc/grafana
            name: ge-config
    volumes:
      - name: grafana-pv
        persistentVolumeClaim:
          claimName: grafana-pvc
      # This is to provide the reference to the ConfigMap for the volume
      - name: ge-config
        configMap:
          name: ge-config

```

----------------------------------------

TITLE: Implementing Controlled scrollTop with CustomScrollbar in React (TypeScript)
DESCRIPTION: This snippet demonstrates the legacy approach to controlling scroll position in a React component using the CustomScrollbar component's scrollTop prop. It manages scroll position via local state and directly binds the value to CustomScrollbar. Required dependencies are React and the legacy CustomScrollbar component. The component accepts the scrollTop value and the children to render within it, and returns a scrollable container pinned at the provided scrollTop offset. This method was replaced in newer implementations using refs and ScrollContainer.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ScrollContainer/ScrollContainer.mdx#2025-04-23_snippet_0

LANGUAGE: TSX
CODE:
```
const [scrollTop, setScrollTop] = useState(0);

return <CustomScrollbar scrollTop={scrollTop}>// Your amazing scrolling content</CustomScrollbar>;
```

----------------------------------------

TITLE: Structuring a Signed Grafana Plugin Manifest (PGP/JSON)
DESCRIPTION: This snippet shows the complete structure of a PGP-signed message containing a Grafana plugin manifest. It includes the standard PGP headers, the JSON manifest payload defining plugin metadata and file hashes, and the concluding PGP signature block. This format ensures the authenticity and integrity of the plugin manifest.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/valid-v2-pvt-signature/plugin/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: pgp
CODE:
```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

{
  "manifestVersion": "2.0.0",
  "signatureType": "private",
  "signedByOrg": "willbrowne",
  "signedByOrgName": "Will Browne",
  "rootUrls": [
    "http://localhost:3000/"
  ],
  "plugin": "test-datasource",
  "version": "1.0.0",
  "time": 1661171417046,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "203ef4a613c5693c437a665cd67f95e2756a0f71b336b2ffb265db7c180d0b19"
  }
}
-----BEGIN PGP SIGNATURE-----
Version: OpenPGP.js v4.10.10
Comment: https://openpgpjs.org

wrgEARMKAAYFAmMDdtkAIQkQfk0ManCIZucWIQTzOyW2kQdOhGNlcPN+TQxq
cIhm577/AgkBnbauM7s/8jLrdJvr+b9B2ZK7EipwI9GFClBdGfxhBzw/QcHS
ete9DAB0j9V5ilShlg3O4gmbiFUFUKGWByHt/VUCB3TXblS7cf5kJFjB9v0r
fv5a8NfV8x8ao/WoKTmXRUB7HSScOvb/3KmkNqzcHtZPQS1T0P6l9EUA1QT1
l+GB3Wdq
=pe3h
-----END PGP SIGNATURE-----
```

----------------------------------------

TITLE: Re-encrypting Secrets via Grafana Admin HTTP API - HTTP
DESCRIPTION: Requests a global re-encryption of all stored secrets in the Grafana database using an HTTP POST API call. No request body or concrete response body is used; a successful operation delivers HTTP 204 No Content.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_20

LANGUAGE: http
CODE:
```
POST /api/admin/encryption/reencrypt-secrets HTTP/1.1\nAccept: application/json\nContent-Type: application/json
```

LANGUAGE: http
CODE:
```
HTTP/1.1 204\nContent-Type: application/json
```

----------------------------------------

TITLE: Cleaning Cache for All Data Sources via Grafana HTTP API (HTTP)
DESCRIPTION: This snippet demonstrates using the `POST /api/datasources/:dataSourceUID/cache/clean` endpoint to clear cached data for *all* Grafana data sources that have caching enabled. Although a specific `dataSourceUID` is provided in the path, the operation affects all sources. The response includes the configuration of the specified data source. It requires the `datasources.caching:write` permission scoped to `datasources:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_and_resource_caching.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
POST /api/datasources/jZrmlLCGka/cache/clean HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
   "message": "Data source cache cleaned",
   "dataSourceID": 1,
   "dataSourceUID": "jZrmlLCGka",
   "enabled": false,
   "ttlQueriesMs": 300000,
   "ttlResourcesMs": 300000,
   "useDefaultTTL": true,
   "defaultTTLMs": 0,
   "created": "2023-04-21T11:49:22-04:00",
   "updated": "2023-04-24T16:30:31-04:00"
}
```

----------------------------------------

TITLE: Setting Concurrent Screenshot Limits in Grafana Alerting - Plaintext
DESCRIPTION: This snippet specifies the maximum number of screenshots that can be concurrently generated for alert notifications by adjusting the max_concurrent_screenshots setting. This is distinct from concurrent_render_request_limit and controls the concurrency for alert screenshots only. Both parameters default to 5. These limits are critical for performance tuning on large deployments and must be set according to available resources and expected alert frequency.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/images-in-notifications.md#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
# The maximum number of screenshots that can be taken at the same time. This option is different from\n# concurrent_render_request_limit as max_concurrent_screenshots sets the number of concurrent screenshots\n# that can be taken at the same time for all firing alerts where as concurrent_render_request_limit sets\n# the total number of concurrent screenshots across all Grafana services.\nmax_concurrent_screenshots = 5
```

----------------------------------------

TITLE: Deleting Grafana Annotation by ID (HTTP Response)
DESCRIPTION: Example successful HTTP response (Status 200 OK) after deleting an annotation via the Grafana API. The response body contains a JSON object with a confirmation message indicating successful deletion.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_11

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
    "message":"Annotation deleted"
}
```

----------------------------------------

TITLE: Adding Headers in Grafana Announcement Banner using Markdown
DESCRIPTION: Shows how to add headers to announcement banner messages using Markdown syntax.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/announcement-banner/_index.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
### Header
```

----------------------------------------

TITLE: Displaying Component Props with Storybook ArgTypes
DESCRIPTION: This MDX snippet utilizes the `ArgTypes` component imported from `@storybook/blocks`. It automatically generates and displays a table of the props accepted by the `RenderUserContentAsHTML` component, including their types, descriptions, and default values, based on the component's definition.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/RenderUserContentAsHTML/RenderUserContentAsHTML.mdx#2025-04-23_snippet_3

LANGUAGE: mdx
CODE:
```
<ArgTypes of={RenderUserContentAsHTML} />
```

----------------------------------------

TITLE: Creating Prometheus Query for Google Cloud Monitoring
DESCRIPTION: Configuration steps for creating a Prometheus query in Google Cloud Monitoring through Grafana. Includes project selection and min step interval setting.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/google-cloud-monitoring/query-editor/index.md#2025-04-23_snippet_1

LANGUAGE: prometheus
CODE:
```
// Example Min Step interval
$__interval
$__rate_interval
```

----------------------------------------

TITLE: Aligning InlineField Components in a Row with InlineFieldRow - React JSX
DESCRIPTION: This snippet illustrates the use of the InlineFieldRow component to arrange multiple InlineField components in a horizontally aligned row, allowing them to wrap when necessary. It requires the InlineFieldRow, InlineField, and Input components to be available in the scope, typically imported from a UI library or local project files. Each InlineField component is given a label and wraps an Input element with a placeholder; this setup is ideal for building horizontally organized forms that stack vertically when multiple InlineFieldRows are used. Inputs receive and display user input values based on the defined placeholder text.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/InlineFieldRow.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<InlineFieldRow>\n  <InlineField label=\"Label Row 1\">\n    <Input placeholder=\"Label\" />\n  </InlineField>\n  <InlineField label=\"Label Row 1\">\n    <Input placeholder=\"Label\" />\n  </InlineField>\n</InlineFieldRow>
```

----------------------------------------

TITLE: Exporting an Alert Rule via Grafana Provisioning API (HTTP)
DESCRIPTION: Defines the `GET` request endpoint `/api/v1/provisioning/alert-rules/:uid/export` to export a specific Grafana alert rule in a provisioning file format. The `UID` path parameter identifies the rule. Optional query parameters include `download` (boolean, to trigger a file download) and `format` (string, specifying `yaml`, `json`, or `hcl`, defaulting to `yaml`). A successful request returns 200 OK with the `AlertingFileExport`, while 404 Not Found is returned if the rule doesn't exist.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_15

LANGUAGE: plaintext
CODE:
```
GET /api/v1/provisioning/alert-rules/:uid/export
```

----------------------------------------

TITLE: User Permissions Response
DESCRIPTION: Example response showing permissions assigned to a user including dashboard, datasource and organization access rights.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_16

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8

{
  "dashboards:read": ["dashboards:uid:70KrY6IVz"],
  "dashboards:write": ["dashboards:uid:70KrY6IVz"],
  "datasources.id:read": ["datasources:*"],
  "datasources:read": ["datasources:*"],
  "datasources:explore": [""],
  "datasources:query": ["datasources:uid:grafana"],
  "datasources:read": ["datasources:uid:grafana"],
  "orgs:read": [""]
}
```

----------------------------------------

TITLE: Reloading LDAP Configuration via Grafana Admin HTTP API - HTTP
DESCRIPTION: Illustrates an HTTP POST request to reload the LDAP configuration for Grafana. No body is sent, but Basic Authentication is mandatory. The response is a JSON message signaling successful reload of config.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_17

LANGUAGE: http
CODE:
```
POST /api/admin/ldap/reload HTTP/1.1\nAccept: application/json\nContent-Type: application/json
```

LANGUAGE: json
CODE:
```
{\n  "message": "LDAP config reloaded"\n}
```

----------------------------------------

TITLE: Retrieving a Shared Dashboard by Dashboard UID in Grafana
DESCRIPTION: This HTTP request retrieves information about a shared dashboard using the dashboard UID. It requires read permission for the specified dashboard.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_5

LANGUAGE: http
CODE:
```
GET /api/dashboards/uid/xCpsVuc4z/public-dashboards/ HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Installing Grafana Enterprise via RPM Repository - Bash
DESCRIPTION: Installs the Enterprise edition of Grafana using zypper from the added RPM repository. Enterprise edition includes all open source features plus optional enterprise features if licensed. Requires: zypper, sudo, repository. No mandatory parameters; outputs: grafana-enterprise package installed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
sudo zypper install grafana-enterprise
```

----------------------------------------

TITLE: Setting Login Background for White Labeling in Grafana Enterprise - Bash
DESCRIPTION: This example demonstrates how to override the Grafana login background by specifying a CSS background property using the INI configuration format. The snippet should be inserted within the [white_labeling] section of your configuration file. Ensure you specify a valid image URL and that your Grafana instance has network access to the resource. This configuration only affects the appearance of the login page.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/enterprise-configuration/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
[white_labeling]
login_background = url(http://www.bhmpics.com/wallpapers/starfield-1920x1080.jpg)
```

----------------------------------------

TITLE: Configuring DingDing Contact Point - YAML
DESCRIPTION: Configures a DingDing integration for alert notifications in Grafana. Requires the API endpoint via the 'url' parameter and allows setting the message type and contents using templates. Parameters include 'msgType' for message formatting and 'message' for templated content. Outputs customized DingDing alerts. Requires no dependencies beyond Grafana and a valid DingDing webhook.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_5

LANGUAGE: yaml
CODE:
```
type: dingding\nsettings:\n  # <string, required>\n  url: https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxxx\n  # <string> options: link, actionCard\n  msgType: link\n  # <string>\n  message: |\n    {{ template \"default.message\" . }}\n
```

----------------------------------------

TITLE: Creating a new Grafana organization using cURL
DESCRIPTION: This command creates a new organization named 'apiorg' using the Grafana API. It requires admin credentials and returns the new organization's ID.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/create-api-tokens-for-org.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
curl -X POST -H "Content-Type: application/json" -d '{"name":"apiorg"}' http://admin:admin@localhost:3000/api/orgs
```

----------------------------------------

TITLE: Adding a Role Assignment to a Service Account (HTTP POST)
DESCRIPTION: Sends a POST request to assign a role to a specific service account. It includes the required permissions and JSON body schema for the operation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_29

LANGUAGE: http
CODE:
```
POST /api/access-control/users/1/roles
Accept: application/json
Content-Type: application/json

{
    "global": false,
    "roleUid": "XvHQJq57z"
}
```

----------------------------------------

TITLE: Retrieving All Resources in Namespace using Bash
DESCRIPTION: Retrieves status information for all major Kubernetes resources (pods, services, deployments, replicasets, etc.) within the 'my-grafana' namespace using `kubectl get all`. This provides a comprehensive overview of the deployed Grafana components and their current state. It's particularly useful for quickly finding the pod status and the service's EXTERNAL-IP for access. Requires `kubectl` installed and configured.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
kubectl get all --namespace=my-grafana
```

----------------------------------------

TITLE: Single User Lookup Response Example (json)
DESCRIPTION: Exhibits a JSON response containing detailed user information, including admin and status flags, for a given user ID. Useful for UI population or auditing purposes. Ensures field presence for integrations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{\n  "id": "1",\n  "email": "user@mygraf.com",\n  "name": "admin",\n  "login": "admin",\n  "theme": "light",\n  "orgId": 1,\n  "isGrafanaAdmin": true,\n  "isDisabled": true,\n  "isExternal": false,\n  "authLabels": [],\n  "updatedAt": "2019-09-09T11:31:26+01:00",\n  "createdAt": "2019-09-09T11:31:26+01:00",\n  "avatarUrl": ""\n}
```

----------------------------------------

TITLE: Downloading Sample Log Generation Script - Bash
DESCRIPTION: Fetches a Python script that continuously generates web server-like log lines to simulate monitoring data. This requires wget and internet access; it stores the Python script file in the current directory. The downloaded script produces timestamped HTTP request logs as standard output. It is consumed in a later step to create realistic test data for Loki ingestion.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-with-logs/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
wget https://raw.githubusercontent.com/grafana/tutorial-environment/master/app/loki/web-server-logs-simulator.py
```

----------------------------------------

TITLE: Switching User Context for Specific User via Grafana API (HTTP)
DESCRIPTION: Allows a Grafana Admin to switch the user context for a specified user (identified by `:userId`) to a target organization (identified by `:organizationId`) using a POST request to `/api/users/:userId/using/:organizationId`. Requires Basic Authentication and Grafana Admin privileges for the authenticated user. Returns a JSON success message.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_17

LANGUAGE: http
CODE:
```
POST /api/users/7/using/2 HTTP/1.1
Authorization: Basic YWRtaW46YWRtaW4=
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{"message":"Active organization changed"}
```

----------------------------------------

TITLE: Folder Creation API Response Example
DESCRIPTION: Example HTTP response for the POST /api/folders endpoint, returning the created folder's details including its generated URL, permissions, metadata, and version information.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_5

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "id":1,
  "uid": "nErXDvCkzz",
  "title": "Department ABC",
  "url": "/dashboards/f/nErXDvCkzz/department-abc",
  "hasAcl": false,
  "canSave": true,
  "canEdit": true,
  "canAdmin": true,
  "createdBy": "admin",
  "created": "2018-01-31T17:43:12+01:00",
  "updatedBy": "admin",
  "updated": "2018-01-31T17:43:12+01:00",
  "version": 1
}
```

----------------------------------------

TITLE: Parsing Grafana Health Status Response - JSON
DESCRIPTION: This JSON output provides system health details from Grafana, including the running commit ID, database connection status, and current software version. The response helps administrators and external tools monitor system integrity. There are no parameters, but consumers should handle varying status values and versions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/other.md#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{\n  \"commit\": \"087143285\",\n  \"database\": \"ok\",\n  \"version\": \"5.1.3\"\n}\n
```

----------------------------------------

TITLE: Redirecting Port 80 to Grafana Using iptables
DESCRIPTION: Command to set up iptables rule that redirects incoming traffic on port 80 to Grafana's default port 3000, allowing Grafana to be accessed via the standard HTTP port without running as root.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3000
```

----------------------------------------

TITLE: Configuring Grafana with Docker Volume Persistence (YAML)
DESCRIPTION: A `docker-compose.yaml` configuration for Grafana that utilizes a named Docker volume (`grafana-storage`) for persistent data storage. The volume is mounted at `/var/lib/grafana` inside the container, ensuring Grafana data (configs, dashboards) persists even if the container is removed and recreated. Docker manages the volume's lifecycle.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_15

LANGUAGE: yaml
CODE:
```
services:
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    ports:
      - '3000:3000'
    volumes:
      - grafana-storage:/var/lib/grafana
volumes:
  grafana-storage: {}
```

----------------------------------------

TITLE: Configuring Grafana Terraform Provider - Terraform
DESCRIPTION: This Terraform snippet shows how to set up the required provider block and configure the Grafana provider for managing resources. It requires the 'grafana/grafana' Terraform provider version 1.29.0 or higher, with authentication credentials (service account token or equivalent). Key parameters include the provider version, Grafana URL, and the authentication token. Inputs: Grafana URL and authorization token. Outputs: An initialized provider for subsequent resource provisioning. The provider must support RBAC features.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-terraform-provisioning/index.md#2025-04-23_snippet_0

LANGUAGE: terraform
CODE:
```
terraform {
    required_providers {
        grafana = {
            source = "grafana/grafana"
            version = ">= 1.29.0"
        }
    }
}

provider "grafana" {
    url = <YOUR_GRAFANA_URL>
    auth = <YOUR_GRAFANA_SERVICE_ACCOUNT_TOKEN>
}

```

----------------------------------------

TITLE: Launching Grafana Server with Zanzana Target - Bash
DESCRIPTION: Runs the Grafana server in Zanzana server mode, utilizing the previously defined INI configuration. This command must be executed after setting up the correct configuration so that the Grafana server process boots in the right mode for standalone Zanzana. Dependency: Configured INI file, built Grafana binary. The expected input is a correct binary for the system's architecture and prior configuration. The output is a running Grafana server supporting fine-grained authorization using the Zanzana feature.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/README.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
./bin/darwin-arm64/grafana server target
```

----------------------------------------

TITLE: Creating MQL Query in Google Cloud Monitoring
DESCRIPTION: Steps to create a Monitoring Query Language (MQL) query in Grafana for Google Cloud Monitoring. Requires selecting metrics query type, choosing a project, and entering the MQL query.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/google-cloud-monitoring/query-editor/index.md#2025-04-23_snippet_0

LANGUAGE: mql
CODE:
```
{{metric.type}} - {{metric.label.instance_name}}
```

----------------------------------------

TITLE: Deleting Grafana ConfigMap - kubectl Bash
DESCRIPTION: Removes the 'ge-config' ConfigMap from the 'my-grafana' namespace, cleaning up configuration resources that override default Grafana settings. Ensure the config is not referenced in any active deployments before deletion.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_39

LANGUAGE: bash
CODE:
```
kubectl delete configmap ge-config --namespace=my-grafana

```

----------------------------------------

TITLE: Creating Symlinks for LetsEncrypt Certificates in Grafana (Bash)
DESCRIPTION: Uses `ln -s` to create symbolic links named `grafana.key` and `grafana.crt` within the `/etc/grafana/` directory. These links point to the actual private key (`privkey.pem`) and full certificate chain (`fullchain.pem`) files managed by `certbot` in `/etc/letsencrypt/live/yourdomain.com/`. This allows Grafana to use the certificates while `certbot` handles renewals. Requires `sudo` privileges and successful certificate generation by `certbot`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
$ sudo ln -s /etc/letsencrypt/live/subdomain.mysite.com/privkey.pem /etc/grafana/grafana.key
$ sudo ln -s /etc/letsencrypt/live/subdomain.mysite.com/fullchain.pem /etc/grafana/grafana.crt
```

----------------------------------------

TITLE: Defining a Panel within Grafana Dashboard JSON
DESCRIPTION: This JSON snippet shows an example of a panel definition within the 'panels' array of a dashboard JSON. It represents a text panel, specifying its 'type', 'title', position and dimensions ('gridPos' with x, y, width w, height h coordinates), unique panel 'id', display 'mode' (markdown), and the panel's 'content'. The structure and fields can vary depending on the panel type.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/view-dashboard-json-model/index.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
"panels": [
  {
    "type": "text",
    "title": "Panel Title",
    "gridPos": {
      "x": 0,
      "y": 0,
      "w": 12,
      "h": 9
    },
    "id": 4,
    "mode": "markdown",
    "content": "# title"
  }
```

----------------------------------------

TITLE: Dropping Outgoing Headers and Cookies in Grafana Requests using TOML
DESCRIPTION: This snippet demonstrates how to configure Grafana to remove specific HTTP headers and cookies from outgoing data source and alerting requests. The 'header_drop_list' specifies one or more header names to be stripped, and 'cookie_drop_list' indicates cookies to remove (case sensitive) from outgoing requests. Both fields are configured under '[security.egress]' in TOML. Input values are space-separated lists, and this removes potentially sensitive information from egress requests.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-request-security.md#2025-04-23_snippet_1

LANGUAGE: TOML
CODE:
```
[security.egress]
# a list of headers that will be stripped from outgoing datasource and alerting requests
header_drop_list = user
# a list of cookies that will be stripped from outgoing datasource requests (case sensitive)
cookie_drop_list = session_id

```

----------------------------------------

TITLE: Reading Grafana Dashboard Permissions (Plaintext)
DESCRIPTION: Defines the `dashboards.permissions:read` permission action required to read permissions for one or more dashboards in Grafana. This is associated with dashboard and folder scopes like `dashboards:*`, `dashboards:uid:*`, `folders:*`, and `folders:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_9

LANGUAGE: plaintext
CODE:
```
`dashboards.permissions:read`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`dashboards:*`</li><li>`dashboards:uid:*`</li><li>`folders:*`</li><li>`folders:uid:*`</li></ul>
```

----------------------------------------

TITLE: Basic LDAP Group Mappings Configuration
DESCRIPTION: Configuration for mapping LDAP groups to Grafana roles with different permission levels including admin, editor and viewer access.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_8

LANGUAGE: toml
CODE:
```
[[servers.group_mappings]]
group_dn = "cn=superadmins,dc=grafana,dc=org"
org_role = "Admin"
grafana_admin = true

[[servers.group_mappings]]
group_dn = "cn=admins,dc=grafana,dc=org"
org_role = "Admin"

[[servers.group_mappings]]
group_dn = "cn=users,dc=grafana,dc=org"
org_role = "Editor"

[[servers.group_mappings]]
group_dn = "*"
org_role = "Viewer"
```

----------------------------------------

TITLE: Updating LBAC Rules for a Data Source in HTTP
DESCRIPTION: This HTTP PUT request updates LBAC rules for teams associated with a specific data source. It requires certain permissions and expects a JSON payload containing team UIDs and their updated rules. The request can also be used to remove rules for a team by omitting it from the payload.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/datasource_lbac_rules.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
PUT /api/datasources/uid/my_datasource/lbac/teams
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "rules": [
    {
      "teamUId": "fdnd1pf4m9sxvc",
      "rules": [
        "{ service_name=\"bigquery-sync-mysql\" }"
      ]
    },
    {
      "teamUid": "dfed1p2m9sxvfc",
      "rules": [
        "{ service_name=\"api\" }"
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Retrieving Current Organization Metadata - JSON
DESCRIPTION: This JSON snippet shows a typical HTTP 200 OK response from the /api/org/ endpoint, providing key fields such as id and name for the currently authenticated organization. This output is used to verify organization configuration and context for follow-up API actions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{\n  "id":1,\n  "name":"Main Org."\n}
```

----------------------------------------

TITLE: Removing Grafana APT Repository Definition - Bash
DESCRIPTION: Optionally deletes the Grafana repository list file from apt sources to prevent further updates or accidental reinstalls. Input: None. Output: /etc/apt/sources.list.d/grafana.list is deleted after prompting for confirmation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_17

LANGUAGE: bash
CODE:
```
sudo rm -i /etc/apt/sources.list.d/grafana.list
```

----------------------------------------

TITLE: Defining Annotation Scopes in Grafana RBAC
DESCRIPTION: Specifies scopes to restrict actions to a set of annotations. `annotations:*` applies to all annotations, while `annotations:type:dashboard` targets dashboard annotations and `annotations:type:organization` targets organization-level annotations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_27

LANGUAGE: text
CODE:
```
annotations:*
```

LANGUAGE: text
CODE:
```
annotations:type:*
```

----------------------------------------

TITLE: Add License Response Example - Grafana Licensing API - HTTP
DESCRIPTION: This HTTP response snippet illustrates what is received after successfully adding a license to Grafana via the API. The response is a JSON object returned with status 200, including license token details. The fields are subject to change and primarily intended for debugging.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/licensing.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 357\n\n{\n  "jti":"2",\n  "iss":"https://grafana.com",\n  "sub":"https://play.grafana.org/"\n  "lid":"1",\n  "included_users":15,\n  "lic_exp_warn_days":30,\n  "tok_exp_warn_days":2,\n  "update_days":1,\n  "prod":["grafana-enterprise"],\n  "company":"Grafana Labs"\n}\n
```

----------------------------------------

TITLE: Applying ConfigMap to Kubernetes Cluster - Bash
DESCRIPTION: This command applies the previously defined ConfigMap YAML to the Kubernetes cluster in the 'monitoring' namespace. It uses kubectl to upload configuration for making the CA certificate available to the Grafana deployment. Prerequisites: kubectl access and an active Kubernetes context.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_17

LANGUAGE: bash
CODE:
```
kubectl apply --filename grafana-ca-configmap.yaml --namespace monitoring
```

----------------------------------------

TITLE: Changing Ownership of Grafana Directory - Shell
DESCRIPTION: Recursively sets the owner and group of '/usr/local/grafana' and its contents to 'grafana:users'. Ensures correct permissions for running Grafana under a dedicated user. Requires: sudo, chown. Input: no parameters. Output: changed ownership of specified directory.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_7

LANGUAGE: shell
CODE:
```
sudo chown -R grafana:users /usr/local/grafana
```

----------------------------------------

TITLE: Creating Grafana System User using Shell
DESCRIPTION: Creates a dedicated system user named `grafana` using the `useradd` command. The `-r` flag designates it as a system account, and `-s /bin/false` prevents this user from being used for shell logins. This is a prerequisite step for installing Grafana from standalone binaries.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_5

LANGUAGE: shell
CODE:
```
sudo useradd -r -s /bin/false grafana
```

----------------------------------------

TITLE: Displaying Top 10 Most Common Errors for Prometheus Usage Insights - loki-query
DESCRIPTION: This query can be used in a Grafana dashboard table panel to display the ten most frequent errors users experienced in the 'gdev-prometheus' datasource. It uses Loki's log retrieval and JSON parsing features, counting errors over the dashboard interval. Requires logs ingested by Loki, and the 'gdev-prometheus' datasource label to match your configuration. Inputs are the datasource label and JSON log events; output is the top 10 aggregated error messages.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/export-logs.md#2025-04-23_snippet_3

LANGUAGE: loki-query
CODE:
```
topk(10, sum by (error) (count_over_time({kind=\"usage_insights\", datasource=\"gdev-prometheus\"} | json | error != \"\" [$__interval])))
```

----------------------------------------

TITLE: Example HTTP Request for Listing Roles Assigned to a User
DESCRIPTION: Demonstrates an example HTTP GET request to the `/api/access-control/users/:userId/roles` endpoint to retrieve the list of roles directly assigned to a specific user (user ID 1 in this case). It includes an `Accept: application/json` header to specify the desired response format. This endpoint does not list basic roles or roles inherited from teams by default.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_13

LANGUAGE: http
CODE:
```
GET /api/access-control/users/1/roles
Accept: application/json
```

----------------------------------------

TITLE: Committing the Release using Git
DESCRIPTION: Creates a Git commit with the message 'Release v0.1.0'. This commit includes the staged 'dist' directory, marking the state of the code and the built artifacts for version 0.1.0 of the plugin.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/publish-your-plugin.md#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
git commit -m "Release v0.1.0"
```

----------------------------------------

TITLE: Configuring Server Root URL via Environment Variable (INI)
DESCRIPTION: Configures Grafana's public root URL via the GF_SERVER_ROOT_URL environment variable, equivalent to the root_url ini setting. Essential for deployments via containers or cloud services where environment variables control config. The value must be the external URL accessible to users. This variable is required for license checks and global URL resolution at runtime.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/_index.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
GF_SERVER_ROOT_URL=https://grafana.example.com/
```

----------------------------------------

TITLE: Installing Grafana Plugin with Version Pinning - Bash
DESCRIPTION: Illustrates how to preinstall a specific version of a Grafana plugin during container startup. Requires specifying plugin ID and version (e.g., grafana-clock-panel@1.0.1) in the environment variable. Docker is required; ensures a specific plugin version is used for compatibility or stability.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
docker run -d -p 3000:3000 --name=grafana \
  -e "GF_PLUGINS_PREINSTALL=grafana-clock-panel@1.0.1" \
  grafana/grafana-enterprise
```

----------------------------------------

TITLE: API Interaction with Grafana's AuthProxy using cURL
DESCRIPTION: Example of using cURL to interact with Grafana's API using the auth proxy mechanism. Shows how to list users and how Grafana automatically creates new users when they authenticate via the proxy.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
curl -H "X-WEBAUTH-USER: admin"  http://localhost:3000/api/users
[
    {
        "id":1,
        "name":"",
        "login":"admin",
        "email":"admin@localhost",
        "isAdmin":true
    }
]
```

----------------------------------------

TITLE: Example Grafana Memory Alert Notification for US-East Region (JSON)
DESCRIPTION: This JSON object shows a notification payload sent by Grafana Alerting to the 'US-East-Alerts' receiver. It includes a firing alert specifically for 'High memory usage' from the 'us-east' region, further demonstrating the routing of alerts based on labels (region, alertname) and notification policies. The '...' indicates that the full alert details are truncated.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_8

LANGUAGE: json
CODE:
```
{
  "receiver": "US-East-Alerts",
  "status": "firing",
  "alerts": [
    {
      "status": "firing",
      "labels": {
        "alertname": "High memory usage - Multi-region",
        "grafana_folder": "Multi-region memory alerts",
        "instance": "server-12",
        "region": "us-east"
...}}}
```

----------------------------------------

TITLE: Removing App Plugin Access with RBAC HTTP API in Bash
DESCRIPTION: This bash script demonstrates how to remove a specific app plugin (kentik-connect-app) from the basic viewer role using the Grafana RBAC API. It fetches the current role configuration, removes the targeted permission, and updates the role.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
# Fetch the role, modify it to remove permissions to kentik-connect-app and increment role version
curl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' \
  -X GET '<grafana_url>/api/access-control/roles/basic_viewer' | \
  jq 'del(.created)| del(.updated) | del(.permissions[].created) | del(.permissions[].updated) | .version += 1' | \
  jq 'del(.permissions[] | select (.action == "plugins.app:access" and .scope == "plugins:id:kentik-connect-app"))'

# Update the role
curl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' -H 'Content-Type: application/json' \
  -X PUT -d @/tmp/basic_viewer.json '<grafana_url>/api/access-control/roles/basic_viewer'
```

----------------------------------------

TITLE: Configuring Storybook Meta for Spinner Component
DESCRIPTION: This JSX code sets up the Storybook metadata for the Spinner component, specifying its title and the component itself.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Spinner/Spinner.mdx#2025-04-23_snippet_1

LANGUAGE: JSX
CODE:
```
<Meta title="MDX|Spinner" component={Spinner} />
```

----------------------------------------

TITLE: Setting Environment Variables for hubot-grafana (Bash)
DESCRIPTION: These shell commands set the necessary environment variables for the `hubot-grafana` plugin. `HUBOT_GRAFANA_HOST` specifies the URL of the Grafana instance Hubot should connect to, and `HUBOT_GRAFANA_API_KEY` provides the API key needed for authentication to render graphs and fetch dashboard information. These variables must be accessible to the Hubot process.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/integrate-hubot/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
export HUBOT_GRAFANA_HOST=https://play.grafana.org
export HUBOT_GRAFANA_API_KEY=abcd01234deadbeef01234
```

----------------------------------------

TITLE: Configuring Custom TestData Version in Grafana
DESCRIPTION: Example configuration for enabling the use of a custom TestData version in Grafana. This requires Grafana version 10.3.0 or later and involves enabling the 'externalCorePlugins' feature toggle and setting the 'as_external' field for the plugin.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/testdata/_index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[feature_toggles]
externalCorePlugins = true

[plugin.grafana-testdata-datasource]
as_external = true
```

----------------------------------------

TITLE: Disabling Organization Role Sync from Azure AD in Grafana - INI
DESCRIPTION: This INI block configures Grafana’s Azure AD authentication (auth.azuread) to skip synchronizing organization roles from Entra ID by setting skip_org_role_sync to true. It is intended for setups where organization roles are managed manually within Grafana or via a different provider. Place this option within the [auth.azuread] section; ensure that this section matches your Grafana authentication provider. No external dependencies aside from an operational Grafana instance are required.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_12

LANGUAGE: ini
CODE:
```
[auth.azuread]
# ..
# prevents the sync of org roles from AzureAD
skip_org_role_sync = true
```

----------------------------------------

TITLE: Response for Creating Snapshot via Grafana HTTP API (HTTP)
DESCRIPTION: Shows the typical HTTP response when a snapshot is successfully created via the POST /api/snapshots endpoint. The payload includes a unique delete key, deletion URL, sharing key, snapshot URL, and snapshot ID. This response is JSON-formatted for client handling and user reference.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
    HTTP/1.1 200\n    Content-Type: application/json\n    {\n      "deleteKey":"XXXXXXX",\n      "deleteUrl":"myurl/api/snapshots-delete/XXXXXXX",\n      "key":"YYYYYYY",\n      "url":"myurl/dashboard/snapshot/YYYYYYY",\n      "id": 1\n    }
```

----------------------------------------

TITLE: Server Response for Home Dashboard Retrieval in HTTP/JSON
DESCRIPTION: Example of a successful response from the server after retrieving the home dashboard. The response contains the home dashboard configuration and special metadata with isHome flag set to true and permissions information.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "dashboard": {
    "editable":false,
    "nav":[
      {
        "enable":false,
        "type":"timepicker"
      }
    ],
    "style":"dark",
    "tags":[],
    "templating":{
      "list":[
      ]
    },
    "time":{
    },
    "timezone":"browser",
    "title":"Home",
    "version":5
  },
  "meta":	{
    "isHome":true,
    "canSave":false,
    "canEdit":false,
    "canStar":false,
    "url":"",
    "expires":"0001-01-01T00:00:00Z",
    "created":"0001-01-01T00:00:00Z"
  }
}
```

----------------------------------------

TITLE: Setting Viewport Width - JSON
DESCRIPTION: Configures rendering.width to specify the default viewport width for the browser during render. Integer value in pixels, used when no explicit width is provided in requests.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_40

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "width": 1000
  }
}
```

----------------------------------------

TITLE: Configuring External Image Storage Uploads for Screenshots in Grafana - Plaintext
DESCRIPTION: This configuration option determines whether Grafana uploads alert panel screenshots to a local server or supported remote cloud storage services such as Azure, S3, or GCS. When upload_external_image_storage is set to true, screenshots will be forwarded per the external_image_storage configuration, otherwise they will be retained on disk with respect to the temp_data_lifetime setting. Cloud storage credentials and permissions must be in place if used.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/images-in-notifications.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
# Uploads screenshots to the local Grafana server or remote storage such as Azure, S3 and GCS. Please\n# see [external_image_storage] for further configuration options. If this option is false, screenshots\n# are persisted to disk for up to temp_data_lifetime.\nupload_external_image_storage = false
```

----------------------------------------

TITLE: Rendering TextLink with Default External Icon in React (JSX)
DESCRIPTION: This example configures a TextLink to behave as an external hyperlink, which triggers opening a new tab/window and displays the default external icon. The main dependency is Grafana's TextLink React component. The href prop sets the target URL and external instructs the component to treat the destination as outside Grafana, showing the standard icon for clarity. The user sees a blue link styled per external, inline context, with icon appended by default.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Link/TextLink.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<TextLink href=\"https://google.es\" external>\n  This an external with the default icon\n</TextLink>
```

----------------------------------------

TITLE: Configuring SCIM Connector Base URL for Okta Integration - Plaintext
DESCRIPTION: This snippet illustrates the correct format for the SCIM Connector base URL required when setting up Okta provisioning for Grafana. The placeholder values ({resource_name} and {stack-id}) must be replaced with your specific Grafana Cloud resource and stack identifiers. This URL is used by Okta to communicate with the SCIM API in your Grafana instance. Ensure that any values are securely handled and entered exactly as formatted.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-scim-provisioning/configure-scim-with-okta/_index.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
https://{resource_name}/apis/scim.grafana.app/v0alpha1/namespaces/stacks-{stack-id}
```

----------------------------------------

TITLE: Registering Inputs with Validation Rules (JavaScript/JSX)
DESCRIPTION: Illustrates adding validation rules to input registration in the Form component's register function. Shows passing an options object with keys like required, minLength, and a custom validation function. This allows enforcing input constraints directly in JSX, requiring react-hook-form and compatible input components.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
<Input
  {...register("inputName", {
    required: true,
    minLength: 10,
    validate: v => { // custom validation rule }
  })}
/>
```

----------------------------------------

TITLE: Displaying a Destructive Button with React in Storybook (TSX)
DESCRIPTION: This snippet presents Buttons with a Destructive variant in multiple sizes, meant for actions like deletions. The code, intended for Storybook documentation, demonstrates best practice by showing the dominant red styling and provides guidance on use for critical actions. Requires Button and ExampleFrame components; the variant and size props must be supported.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Button/Button.mdx#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
<ExampleFrame>\n  <Button variant=\"destructive\" size=\"sm\" style={{ margin: '5px' }}>\n    {'Small'}\n  </Button>\n  <Button variant=\"destructive\" size=\"md\" style={{ margin: '5px' }}>\n    {'Medium'}\n  </Button>\n  <Button variant=\"destructive\" size=\"lg\" style={{ margin: '5px' }}>\n    {'Large'}\n  </Button>\n</ExampleFrame>
```

----------------------------------------

TITLE: Embedding YouTube Video for Grafana Anonymous Access using Hugo Shortcode
DESCRIPTION: This Hugo shortcode is used to embed a YouTube video (ID: B72X3_9e-ds) into the documentation page. The video likely showcases the new anonymous access monitoring features in Grafana, including viewing devices and setting limits. This depends on the Hugo static site generator and its 'youtube' shortcode.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-3.md#2025-04-23_snippet_2

LANGUAGE: hugo
CODE:
```
{{< youtube id="B72X3_9e-ds" >}}
```

----------------------------------------

TITLE: Provisioning Azure Monitor with Managed Identity in YAML
DESCRIPTION: YAML configuration for provisioning Azure Monitor data source using Azure Managed Identity authentication. This method uses the identity of the service where Grafana is running to authenticate to Azure services.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
apiVersion: 1 # config file version

datasources:
  - name: Azure Monitor
    type: grafana-azure-monitor-datasource
    access: proxy
    jsonData:
      azureAuthType: msi
      subscriptionId: <subscription-id> # Optional, default subscription
    version: 1
```

----------------------------------------

TITLE: Setting Grafana Dashboard Time Range to Last 5 Minutes via URL
DESCRIPTION: This URL example demonstrates how to set the time range of a Grafana dashboard to the last five minutes using the `from=now-5m` and `to=now` query parameters. Replace `${your-domain}` and `/path/to/your/dashboard` with your specific Grafana domain and dashboard path.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/dashboards/time-range-URLs.md#2025-04-23_snippet_0

LANGUAGE: url
CODE:
```
https://${your-domain}/path/to/your/dashboard?from=now-5m&to=now
```

----------------------------------------

TITLE: Manually Starting Grafana Server from Binary using Shell
DESCRIPTION: Starts the Grafana server directly by executing its binary located at `/usr/local/grafana/bin/grafana-server`. The `--homepath` argument specifies the root directory for Grafana's files (config, plugins, data). This initial manual run is often needed during binary setup to create the necessary data directories before configuring it as a service.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_10

LANGUAGE: shell
CODE:
```
/usr/local/grafana/bin/grafana-server --homepath /usr/local/grafana
```

----------------------------------------

TITLE: Replacing Mute Timing - Grafana REST HTTP Endpoint - http
DESCRIPTION: Defines the HTTP PUT endpoint for replacing an existing mute timing resource in Grafana. Requires the mute timing name as a path parameter and the updated mute time interval specification as the request body. Invoking this endpoint (`PUT /api/v1/provisioning/mute-timings/:name`) replaces any existing configuration for the given mute timing. Accepts the `X-Disable-Provenance` header optionally, and returns the updated mute timing (on success), ValidationError (on request error), or GenericPublicError (on conflict).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_37

LANGUAGE: http
CODE:
```
PUT /api/v1/provisioning/mute-timings/:name
```

----------------------------------------

TITLE: Getting Playlists with kubectl - Shell
DESCRIPTION: This shell command fetches Playlist resources from the Kubernetes API using kubectl and a kubeconfig file configured for Grafana. It requires a valid kubeconfig and kubectl installed on the local system. Input parameter is the playlist resource type; output is a listing of discovered playlist objects, or confirmation of none found.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_5

LANGUAGE: sh
CODE:
```
kubectl --kubeconfig=./grafana.kubeconfig get playlist
```

----------------------------------------

TITLE: Retrieving the Home Dashboard in HTTP/JSON
DESCRIPTION: Example of retrieving the home dashboard configuration. This request sends a GET to /api/dashboards/home endpoint. The response includes the complete home dashboard definition and special metadata indicating it's the home dashboard.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_7

LANGUAGE: http
CODE:
```
GET /api/dashboards/home HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Using Grafana CLI Plugin Command with Homebrew (Apple Silicon Path)
DESCRIPTION: Executes a Grafana CLI plugins command (`install`) for a Homebrew installation on Apple Silicon. It specifies the paths for the CLI binary, configuration file (`grafana.ini`), homepath, and the plugins directory. Replace `<plugin-id>` with the ID of the plugin to install. Paths may differ on Intel-based Macs.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/mac/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
/opt/homebrew/opt/grafana/bin/grafana cli --config /opt/homebrew/etc/grafana/grafana.ini --homepath /opt/homebrew/opt/grafana/share/grafana --pluginsDir "/opt/homebrew/var/lib/grafana/plugins" plugins install <plugin-id>
```

----------------------------------------

TITLE: Defining and Using Basic Notification Templates in Grafana with Go Templates - Go
DESCRIPTION: This snippet defines a basic custom notification template using Go's template language for Grafana. It demonstrates conditionally displaying a message based on whether there are common labels by utilizing the `if` statement and `.CommonLabels` from the notification data. It requires configuration in Grafana alerting settings, and expects notification data structure; outputs are plain text messages for use in notifications.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
{{ define "custom_message" -}}
{{ if .CommonLabels }}
Alerts have common labels
{{ else }}
There are no common labels
{{ end }}
{{ end }}
```

----------------------------------------

TITLE: Delete Team Response Example - JSON
DESCRIPTION: Returns a JSON message specifying that the team has been deleted after a successful DELETE operation. Confirms to clients that the team resource is removed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_9

LANGUAGE: json
CODE:
```
{\n  \"message\":\"Team deleted\"\n}
```

----------------------------------------

TITLE: Manual RPM Installation of Grafana and Dependencies - Bash
DESCRIPTION: Installs prerequisite packages, downloads a specified Grafana RPM package, and installs or upgrades it with rpm. wget fetches the RPM from a user-supplied URL, and rpm -Uvh installs/updates the local package. Dependencies: initscripts, urw-fonts, wget, rpm. Parameters: <rpm package url>, <local rpm package> must be replaced. Outputs: system packages installed/updated.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
sudo zypper install initscripts urw-fonts wget
wget <rpm package url>
sudo rpm -Uvh <local rpm package>
```

----------------------------------------

TITLE: Configuring Default Authentication Lifetimes and Email Lookup in Grafana (Config)
DESCRIPTION: Provides default or placeholder configuration examples for `login_maximum_lifetime_duration`, `token_rotation_interval_minutes`, `api_key_max_seconds_to_live`, and `oauth_allow_insecure_email_lookup` in Grafana's configuration file. These settings control session lengths, token rotation frequency, API key validity, and the initial state of email-based user identification.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/_index.md#2025-04-23_snippet_1

LANGUAGE: Config
CODE:
```
# The maximum lifetime (duration) an authenticated user can be logged in since login time before being required to login. Default is 30 days (30d). This setting should be expressed as a duration, e.g. 5m (minutes), 6h (hours), 10d (days), 2w (weeks), 1M (month).
login_maximum_lifetime_duration =

# How often should auth tokens be rotated for authenticated users when being active. The default is every 10 minutes.
token_rotation_interval_minutes = 10

# The maximum lifetime (seconds) an API key can be used. If it is set all the API keys should have limited lifetime that is lower than this value.
api_key_max_seconds_to_live = -1

# Enforce user lookup based on email instead of the unique ID provided by the IdP.
oauth_allow_insecure_email_lookup = false
```

----------------------------------------

TITLE: Setting Page Zoom Level - JSON
DESCRIPTION: Configures rendering.pageZoomLevel to a specific zoom ratio for rendered pages. The value (float) increases or decreases the size content is drawn during rendering. Input is a real number; default is 1.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_52

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "pageZoomLevel": 1
  }
}
```

----------------------------------------

TITLE: Adding a Team - HTTP
DESCRIPTION: Performs a POST request to create a new team with a specified name and optionally email. Requires Bearer-token authentication. The JSON body must provide at least a unique team name.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
POST /api/teams HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt\n\n{\n  \"name\": \"MyTestTeam\",\n  \"email\": \"email@test.com\",\n}
```

----------------------------------------

TITLE: Annotating PATCH Endpoint for Service Account Update in Go
DESCRIPTION: This snippet demonstrates how to annotate a PATCH endpoint for updating a service account. It includes the route definition, HTTP method, path, tags, operation ID, and possible response codes.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/api/README.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
// swagger:route PATCH /serviceaccounts/{serviceAccountId} service_accounts updateServiceAccount
//
// # Update service account
//
// Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation):
// action: `serviceaccounts:write` scope: `serviceaccounts:id:1` (single service account)
//
// Responses:
// 200: updateServiceAccountResponse
// 400: badRequestError
// 401: unauthorisedError
// 403: forbiddenError
// 404: notFoundError
// 500: internalServerError
```

----------------------------------------

TITLE: Confirmation of Organization User Deletion - JSON
DESCRIPTION: This JSON object confirms a user has been removed from an organization, returned after a successful HTTP DELETE operation. The message field summarizes the result.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_9

LANGUAGE: json
CODE:
```
{"message":"User removed from organization"}
```

----------------------------------------

TITLE: Provisioning InfluxDB 2.x Data Source with InfluxQL in Grafana
DESCRIPTION: This YAML configuration demonstrates provisioning an InfluxDB 2.x data source using InfluxQL in Grafana. It includes settings for database name and uses an HTTP header for token-based authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/configure-influxdb-data-source/_index.md#2025-04-23_snippet_3

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: InfluxDB_v2_InfluxQL
    type: influxdb
    access: proxy
    url: http://localhost:8086
    jsonData:
      dbName: site
      httpHeaderName1: 'Authorization'
    secureJsonData:
      httpHeaderValue1: 'Token <token>'
```

----------------------------------------

TITLE: Adding a Team Member - HTTP
DESCRIPTION: Makes a POST request to add a specified user to a team by user ID. A valid authorization header must be provided. The userId is specified in the JSON body. Only users with correct permissions may perform this operation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_12

LANGUAGE: http
CODE:
```
POST /api/teams/1/members HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt\n\n{\n  \"userId\": 2\n}
```

----------------------------------------

TITLE: Deleting Grafana Mute Timings via YAML Provisioning
DESCRIPTION: This YAML configuration example shows how to delete specific mute timings in Grafana via provisioning. The `deleteMuteTimes` key lists the mute timings to be removed, identified by their organization ID (`orgId`) and unique name (`name`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_28

LANGUAGE: yaml
CODE:
```
# config file version
apiVersion: 1

# List of mute time intervals that should be deleted
deleteMuteTimes:
  # <int> organization ID, default = 1
  - orgId: 1
    # <string, required> name of the mute time interval, must be unique
    name: mti_1

```

----------------------------------------

TITLE: Listing User Auth Tokens via Grafana Admin HTTP API - HTTP
DESCRIPTION: This HTTP GET request fetches all authentication tokens (sessions/devices) for a specified user. Requires Basic Authentication with appropriate read scope. The JSON response includes a list of token metadata for user sessions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_13

LANGUAGE: http
CODE:
```
GET /api/admin/users/1/auth-tokens HTTP/1.1\nAccept: application/json\nContent-Type: application/json
```

LANGUAGE: json
CODE:
```
[\n  {\n    "id": 361,\n    "isActive": false,\n    "clientIp": "127.0.0.1",\n    "browser": "Chrome",\n    "browserVersion": "72.0",\n    "os": "Linux",\n    "osVersion": "",\n    "device": "Other",\n    "createdAt": "2019-03-05T21:22:54+01:00",\n    "seenAt": "2019-03-06T19:41:06+01:00"\n  },\n  {\n    "id": 364,\n    "isActive": false,\n    "clientIp": "127.0.0.1",\n    "browser": "Mobile Safari",\n    "browserVersion": "11.0",\n    "os": "iOS",\n    "osVersion": "11.0",\n    "device": "iPhone",\n    "createdAt": "2019-03-06T19:41:19+01:00",\n    "seenAt": "2019-03-06T19:41:21+01:00"\n  }\n]
```

----------------------------------------

TITLE: Listing Snapshots with Grafana HTTP API (HTTP)
DESCRIPTION: Provides a GET HTTP request example to list all dashboard snapshots, supporting optional query parameters for filtering and limiting results. Requires proper authorization headers. The standard use returns a JSON array of snapshot metadata.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
GET /api/dashboard/snapshots HTTP/1.1\nAccept: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Creating AWS Credentials File in Bash
DESCRIPTION: Demonstrates the structure of an AWS credentials file that should be placed at ~/.aws/credentials. This file contains the AWS access key, secret access key, and region configuration for Grafana to authenticate with AWS services.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/aws-authentication/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
[default]
aws_access_key_id = asdsadasdasdasd
aws_secret_access_key = dasdasdsadasdasdasdsa
region = us-west-2
```

----------------------------------------

TITLE: Connecting to Raspberry Pi via SSH (Bash)
DESCRIPTION: Establishes an SSH connection to the Raspberry Pi using the default username 'pi' and the Pi's IP address. Requires the IP address of the Raspberry Pi on the network. The default password 'raspberry' will be prompted upon connection.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/install-grafana-on-raspberry-pi/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
ssh pi@<ip address>
```

----------------------------------------

TITLE: Displaying an Admonition Note in Documentation
DESCRIPTION: This Hugo shortcode renders a styled note box within the documentation. The `type="note"` specifies the style (e.g., information, warning). The content inside the shortcode provides context that the 'Show thresholds' option is specifically available for bar chart, candlestick, time series, and trend visualizations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/configure-thresholds/index.md#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
{{< admonition type="note" >}}
This option is supported for the bar chart, candlestick, time series, and trend visualizations.
{{< /admonition>}}
```

----------------------------------------

TITLE: Creating a CloudWatch Data Source via Grafana API - HTTP
DESCRIPTION: This POST request shows creation of a CloudWatch data source for Grafana, including a JSON body with CloudWatch-specific properties (authType, defaultRegion) and AWS credentials in secureJsonData. Inputs are standard data source parameters and the secure AWS access and secret keys. The bearer token is required, and the response will provide confirmation and data source configuration details. SecureJsonData ensures sensitive keys are stored encrypted. Some parameters (like region and keys) must be valid for your AWS setup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_7

LANGUAGE: http
CODE:
```
POST /api/datasources HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  "name": "test_datasource",\n  "type": "cloudwatch",\n  "url": "http://monitoring.us-west-1.amazonaws.com",\n  "access": "proxy",\n  "jsonData": {\n    "authType": "keys",\n    "defaultRegion": "us-west-1"\n  },\n  "secureJsonData": {\n    "accessKey": "Ol4pIDpeKSA6XikgOl4p",\n    "secretKey": "dGVzdCBrZXkgYmxlYXNlIGRvbid0IHN0ZWFs"\n  }\n}
```

----------------------------------------

TITLE: Configuring Zanzana Standalone Server - INI
DESCRIPTION: Sets up the Zanzana server using an INI configuration file, enabling it as a standalone OpenFGA HTTP server. This configuration toggles features, sets the HTTP address for the server under [zanzana.server], and enables gRPC support. Required dependencies: Grafana build with Zanzana integration, standalone Zanzana implementation. Key parameters include 'app_mode', 'target', feature toggles for Zanzana, the server listening address, and gRPC settings. Used as a prerequisite for running the Grafana server in a specific mode for authorization debugging.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/README.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
# ini
app_mode = development
target = zanzana-server

[feature_toggles]
zanzana = true

[zanzana.server]
http_addr = 127.0.0.1:8080

[grpc_server]
enabled = true
address = 127.0.0.1:10000
```

----------------------------------------

TITLE: Nesting Queries with Reference Syntax
DESCRIPTION: Reference a previous query using the letter syntax similar to a spreadsheet. This enables building compound queries by referencing the result of another query.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/query-editor/index.md#2025-04-23_snippet_1

LANGUAGE: graphite
CODE:
```
#A
```

----------------------------------------

TITLE: Remove User Role Assignment Request
DESCRIPTION: DELETE request to remove a role from a user. Requires users.roles:remove permission.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_21

LANGUAGE: http
CODE:
```
DELETE /api/access-control/users/1/roles/AFUXBHKnk
Accept: application/json
```

----------------------------------------

TITLE: Annotation with Dynamic Label Interpolation - Go Template - Markdown
DESCRIPTION: This snippet shows how to include a specific label's value (e.g., 'instance') from the $labels object in a readable annotation template using Go templating within Grafana alerting. It requires the $labels object to be populated by the corresponding query, and Go templating support. The parameter $labels.instance provides the dynamic instance value; input is the label data and output is a filled sentence. This template assumes at least one matching label named 'instance'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_1

LANGUAGE: Go Template
CODE:
```
CPU usage for {{ $labels.instance }} has exceeded 80% for the last 5 minutes
```

----------------------------------------

TITLE: Using Bind Mounts for Grafana Data with Custom User - Bash
DESCRIPTION: Demonstrates creating a host directory for persistent storage and running a Grafana container with that directory bind-mounted, using the current user ID for permissions. Requires that the user has permission for the target directory, and Docker must be present. Input is the path to the host data directory; persists Grafana data without Docker volumes, granting potential access to non-Docker processes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
# create a directory for your data
mkdir data

# start grafana with your user id and using the data directory
docker run -d -p 3000:3000 --name=grafana \
  --user "$(id -u)" \
  --volume "$PWD/data:/var/lib/grafana" \
  grafana/grafana-enterprise
```

----------------------------------------

TITLE: Defining Grafana Mute Timings via YAML Provisioning
DESCRIPTION: This YAML snippet illustrates how to provision mute timings in Grafana. It defines mute timing intervals using the `muteTimes` key, specifying the organization ID, a unique name for the timing (`name`), and the specific time intervals (`time_intervals`) during which notifications should be muted, following Prometheus configuration syntax.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_27

LANGUAGE: yaml
CODE:
```
# config file version
apiVersion: 1

# List of mute time intervals to import or update
muteTimes:
  # <int> organization ID, default = 1
  - orgId: 1
    # <string, required> name of the mute time interval, must be unique
    name: mti_1
    # <list> time intervals that should trigger the muting
    #        refer to https://prometheus.io/docs/alerting/latest/configuration/#time_interval-0
    time_intervals:
      - times:
          - start_time: '06:00'
            end_time: '23:59'
        location: 'UTC'
        weekdays: ['monday:wednesday', 'saturday', 'sunday']
        months: ['1:3', 'may:august', 'december']
        years: ['2020:2022', '2030']
        days_of_month: ['1:5', '-3:-1']

```

----------------------------------------

TITLE: Defining Provisioner Scopes in Grafana RBAC
DESCRIPTION: Specifies scopes to restrict actions related to provisioners. `provisioners:*` matches any provisioner, while `provisioners:accesscontrol` specifically targets the role-based access control provisioner.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_38

LANGUAGE: text
CODE:
```
provisioners:*
```

----------------------------------------

TITLE: Configuring GRPC Server Authentication - INI
DESCRIPTION: This INI configuration snippet sets up authentication for the GRPC storage-server. It specifies a URL for signing keys and selects authentication mode as 'on-prem'. This is required for secure API communications and must be appropriately adjusted for the deployment environment.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_17

LANGUAGE: ini
CODE:
```
[grpc_server_authentication]\n; http url to Grafana's signing keys to validate incoming id tokens\nsigning_keys_url = http://localhost:3000/api/signing-keys/keys\nmode = \"on-prem\"
```

----------------------------------------

TITLE: Ignoring HTTPS Errors - Bash
DESCRIPTION: Enables ignoring HTTPS errors in headless browser navigation using IGNORE_HTTPS_ERRORS. When set to 'true', the renderer bypasses errors on invalid certificates, which is insecure and not recommended for production.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_33

LANGUAGE: bash
CODE:
```
IGNORE_HTTPS_ERRORS=true
```

----------------------------------------

TITLE: Querying Grafana Region Annotations with Epoch Time Columns (SQL)
DESCRIPTION: SQL query example for fetching Grafana region annotations, which require both a start and end time. It uses separate epoch timestamp columns for the start (`epoch_time`) and end (`epoch_timeend`) times. It utilizes the `$__unixEpochFilter` macro for time filtering based on the start time and maps database columns to Grafana annotation fields (`time`, `timeend`, `text`, `tags`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_15

LANGUAGE: sql
CODE:
```
SELECT
  epoch_time as time,
  epoch_timeend as timeend,
  metric1 as text,
  CONCAT(tag1, ',', tag2) as tags
FROM
  public.test_data
WHERE
  $__unixEpochFilter(epoch_time)
```

----------------------------------------

TITLE: Listing Docker Secrets (Bash)
DESCRIPTION: Executes the `docker secret ls` command to list all currently defined Docker secrets, showing their IDs, names, and creation/update timestamps. This is useful for verifying secret creation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
$ docker secret ls
```

----------------------------------------

TITLE: Creating and Inspecting Docker Volumes for Grafana Persistence - Bash
DESCRIPTION: Shows how to create a named Docker volume for persistent Grafana data storage and inspect its details. Requires Docker to be installed. 'docker volume create' creates a managed volume, and 'docker volume inspect' verifies its creation; ensure the volume name matches your usage in other commands.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
# create a persistent volume for your data
docker volume create grafana-storage

# verify that the volume was created correctly
# you should see some JSON output
docker volume inspect grafana-storage
```

----------------------------------------

TITLE: Authentication Configuration Properties
DESCRIPTION: Authentication-related settings including cookie configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_14

LANGUAGE: properties
CODE:
```
login_cookie_name=grafana_session
```

----------------------------------------

TITLE: Updating a Playlist via Grafana HTTP API
DESCRIPTION: Sends a PUT request to `/api/playlists/:uid` to update an existing playlist identified by its UID. Requires `Authorization` and `Content-Type: application/json` headers. The request body must be a JSON object containing the updated `name`, `interval`, and `items` for the playlist. Returns a JSON object representing the updated playlist, including its items.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/playlist.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
PUT /api/playlists/1 HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
  {
    "name": "my playlist",
    "interval": "5m",
    "items": [
      {
        "playlistUid": "1",
        "type": "dashboard_by_uid",
        "value": "3",
        "order": 1,
        "title":"my third dashboard"
      },
      {
        "playlistUid": "1",
        "type": "dashboard_by_tag",
        "value": "myTag",
        "order": 2,
        "title":"my other dashboard"
      }
    ]
  }
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
{
  "uid" : "1",
  "name": "my playlist",
  "interval": "5m",
  "items": [
    {
      "id": 1,
      "playlistUid": "1",
      "type": "dashboard_by_uid",
      "value": "3",
      "order": 1,
      "title":"my third dashboard"
    },
    {
      "id": 2,
      "playlistUid": "1",
      "type": "dashboard_by_tag",
      "value": "myTag",
      "order": 2,
      "title":"my other dashboard"
    }
  ]
}
```

----------------------------------------

TITLE: Defining Grafana Ports for HA in Kubernetes (YAML)
DESCRIPTION: This Kubernetes YAML snippet configures the necessary network ports for a Grafana container within a deployment to support high availability. It exposes the standard Grafana port 3000 (TCP) and adds both TCP and UDP ports 9094, which are required for the Memberlist gossip protocol used for communication between HA peers.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-high-availability/_index.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
ports:
  - name: grafana
    containerPort: 3000
    protocol: TCP
  - name: gossip-tcp
    containerPort: 9094
    protocol: TCP
  - name: gossip-udp
    containerPort: 9094
    protocol: UDP
```

----------------------------------------

TITLE: Checking Port Usage (Linux/macOS)
DESCRIPTION: This command uses 'lsof' (List Open Files) to check if any process is listening on TCP port 9090, the default port for Prometheus. It helps identify port conflicts if Prometheus fails to start.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
lsof -i :9090
```

----------------------------------------

TITLE: Overriding Grafana Configuration with Environment Variables
DESCRIPTION: Example of using environment variables to override Grafana configuration settings from different sections, including default options, security settings, authentication, plugin configuration, and feature toggles.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
export GF_DEFAULT_INSTANCE_NAME=my-instance
export GF_SECURITY_ADMIN_USER=owner
export GF_AUTH_GOOGLE_CLIENT_SECRET=newS3cretKey
export GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_IGNORE_HTTPS_ERRORS=true
export GF_FEATURE_TOGGLES_ENABLE=newNavigation
```

----------------------------------------

TITLE: Checking Migration Status of API Keys - Grafana HTTP API - HTTP
DESCRIPTION: This snippet demonstrates how to check the status of API key migration to service accounts by sending a POST request to the migrationstatus endpoint. The response is a JSON object containing a boolean migrated property, indicating whether the migration has occurred.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_7

LANGUAGE: http
CODE:
```
POST /api/serviceaccounts/migrationstatus HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{\n\t"migrated": true\n}
```

----------------------------------------

TITLE: Updating a Query Comment in Grafana Query History (HTTP Response)
DESCRIPTION: This snippet shows a successful HTTP 200 OK response after updating a query's comment. The JSON body returns the complete, updated query history entry, including the new comment.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_7

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
{
  "result": {
    "uid": "P8zM2I1nz",
    "datasourceUid": "PE1C5CBDA0504A6A3",
    "createdBy": 1,
    "createdAt": 1643630762,
    "starred": false,
    "comment": "Debugging query",
    "queries": [
      {
        "refId": "A",
        "key": "Q-87fed8e3-62ba-4eb2-8d2a-4129979bb4de-0",
        "scenarioId": "csv_content",
        "datasource": {
            "type": "testdata",
            "uid": "PD8C576611E62080A"
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Listing Permissions Assigned to a Service Account (HTTP GET)
DESCRIPTION: Sends a GET request to retrieve the list of permissions that a given service account has. It includes required permissions for the operation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_27

LANGUAGE: http
CODE:
```
GET /api/access-control/users/1/permissions
Accept: application/json
```

----------------------------------------

TITLE: Defining Plugin Metadata in repo.json
DESCRIPTION: Provides the JSON structure required to add a plugin entry to the 'repo.json' file within the 'grafana-plugin-repository'. This metadata includes the plugin's unique ID, type (e.g., 'panel', 'datasource'), source code URL, and an array of available versions, each specifying the version number, commit SHA of the release tag, and the repository URL.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/publish-your-plugin.md#2025-04-23_snippet_6

LANGUAGE: json
CODE:
```
{
  "id": "<plugin id>",
  "type": "<plugin type>",
  "url": "https://github.com/<username>/my-plugin",
  "versions": [
    {
      "version": "<version>",
      "commit": "<git sha>",
      "url": "https://github.com/<username>/my-plugin"
    }
  ]
}
```

----------------------------------------

TITLE: Full Example: Persistent Volume, Environment Variables, and Plugin Installation - Bash
DESCRIPTION: Combines several concepts: creates a persistent Docker volume, then runs a Grafana container mapping the persistent storage, sets the server root URL, and pre-installs the clock panel plugin. Requires Docker; input parameters are the storage volume name, root URL, and plugin list. The output is a running, configured Grafana instance with custom base URL and plugins, persisting data in a Docker-managed volume.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
# create a persistent volume for your data
docker volume create grafana-storage

# start grafana by using the above persistent storage
# and defining environment variables

docker run -d -p 3000:3000 --name=grafana \
  --volume grafana-storage:/var/lib/grafana \
  -e "GF_SERVER_ROOT_URL=http://my.grafana.server/" \
  -e "GF_PLUGINS_PREINSTALL=grafana-clock-panel" \
  grafana/grafana-enterprise
```

----------------------------------------

TITLE: Building a Grafana Docker Image with Pre-installed Plugins
DESCRIPTION: An example of how to build a custom Grafana Docker image with specified plugin versions pre-installed to improve startup efficiency for multiple deployments.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```

```

----------------------------------------

TITLE: Configuring Debug Logging for RBAC in Grafana - Bash
DESCRIPTION: This code snippet demonstrates how to enable debug log messages for RBAC modules by setting specific filters in the Grafana configuration file under the [log] section. It assumes access to and the ability to edit the Grafana server configuration (typically grafana.ini). The filters control debug output for access control, evaluator, and dashboard permission systems. This change is effective after Grafana is restarted and will increase log verbosity, aiding troubleshooting of RBAC operations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/troubleshooting/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
[log]
filters = accesscontrol:debug accesscontrol.evaluator:debug dashboard.permissions:debug
```

----------------------------------------

TITLE: Implementing EmptyState Call-to-Action Variant without Button in JSX
DESCRIPTION: This snippet shows how to use the `EmptyState` component with the `call-to-action` variant when a direct action button is not suitable. Instead of a button, it provides textual instructions within the component's children, including a `TextLink`, to guide the user on how to create the required resource (library panels).
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/EmptyState/EmptyState.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
import { EmptyState, TextLink } from '@grafana/ui';

<EmptyState variant="call-to-action" message="You haven't created any library panels yet">
  Create a library panel from any existing dashboard panel through the panel context menu.{' '}
  <TextLink external href="<externalDocsLink>">
    Learn more.
  </TextLink>
</EmptyState>;
```

----------------------------------------

TITLE: Migrating Grafana Plugin from Toolkit with Create-Plugin Command
DESCRIPTION: Command-line instructions for migrating a Grafana plugin from the older toolkit to the newer plugin tools system. The command should be run from the root directory of your plugin project after navigating to the plugin directory.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v10-0.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
cd ./my-plugin

npx @grafana/create-plugin@latest migrate
```

----------------------------------------

TITLE: Removing a Team Member - HTTP
DESCRIPTION: Deletes a specified user from a team using their team ID and user ID. Requires appropriate permissions and an Authorization Bearer token. No request body is required.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_14

LANGUAGE: http
CODE:
```
DELETE /api/teams/2/members/3 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt
```

----------------------------------------

TITLE: Querying Elasticsearch Keyword Fields for Grafana Variable (JSON)
DESCRIPTION: This JSON query, used in Grafana's template variable definition, fetches a list of field names from the configured Elasticsearch index that are explicitly mapped with the `keyword` type. This allows populating a variable with available keyword fields for dynamic selection in dashboards.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/elasticsearch/template-variables/index.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
`{"find": "fields", "type": "keyword"}`
```

----------------------------------------

TITLE: Defining React State and Properties
DESCRIPTION: Illustrates the correct naming convention for React state and properties using camelCase.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
interface ModalState {
  // bad
  IsActive: boolean;
  // bad
  is_active: boolean;

  // good
  isActive: boolean;
}
```

----------------------------------------

TITLE: Executing Default-Style Notification Title Template in Grafana
DESCRIPTION: This snippet shows how to execute the template mimicking Grafana's default notification title by passing the context (dot) to the template.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_21

LANGUAGE: go
CODE:
```
{{ template "copy_of_default_title" . }}
```

----------------------------------------

TITLE: Creating Grafana ConfigMap from Custom Conf File - kubectl Bash
DESCRIPTION: Creates a Kubernetes ConfigMap named 'ge-config' from a local 'grafana.ini' file for use by the Grafana pod. This ensures custom configuration is available as a mounted volume. Specify full path to source file and namespace as needed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_31

LANGUAGE: bash
CODE:
```
kubectl create configmap ge-config --from-file=/path/to/file/grafana.ini --namespace=my-grafana

```

----------------------------------------

TITLE: Required Keycloak Client Scopes (Plaintext)
DESCRIPTION: Lists the default client scopes that should be assigned in the Keycloak client configuration for Grafana integration. These scopes (`email`, `offline_access`, `profile`, `roles`) are necessary for basic user information retrieval and role mapping as defined in the example Grafana configuration. Note that these default scopes might not include group claims needed for teamsync.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
email
offline_access
profile
roles
```

----------------------------------------

TITLE: Humanizing Query Value as Percentage
DESCRIPTION: This Go template utilizes the `humanizePercentage` function to format the value of query 'A' (assumed to be a ratio, e.g., 0.1) into a human-readable percentage string.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_12

LANGUAGE: gotemplate
CODE:
```
{{ humanizePercentage $values.A.Value }}
```

----------------------------------------

TITLE: Reading Grafana Annotations (Plaintext)
DESCRIPTION: Defines the `annotations:read` permission action needed to read annotations and annotation tags in Grafana. Access is related to scopes such as `annotations:*`, `annotations:type:*`, `dashboards:*`, `dashboards:uid:*`, `folders:*`, and `folders:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
`annotations:read`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`annotations:*`</li><li>`annotations:type:*`</li><li>`dashboards:*`</li><li>`dashboards:uid:*`</li><li>`folders:*`</li><li>`folders:uid:*`</li></ul>
```

----------------------------------------

TITLE: Defining Templating Variables in Grafana Dashboard JSON
DESCRIPTION: This JSON snippet demonstrates the structure of the templating field in a Grafana dashboard configuration. It includes two template variables with their metadata, options, and current values.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/view-dashboard-json-model/index.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
"templating": {
    "enable": true,
    "list": [
      {
        "allFormat": "wildcard",
        "current": {
          "tags": [],
          "text": "prod",
          "value": "prod"
        },
        "datasource": null,
        "includeAll": true,
        "name": "env",
        "options": [
          {
            "selected": false,
            "text": "All",
            "value": "*"
          },
          {
            "selected": false,
            "text": "stage",
            "value": "stage"
          },
          {
            "selected": false,
            "text": "test",
            "value": "test"
          }
        ],
        "query": "tag_values(cpu.utilization.average,env)",
        "refresh": false,
        "type": "query"
      },
      {
        "allFormat": "wildcard",
        "current": {
          "text": "apache",
          "value": "apache"
        },
        "datasource": null,
        "includeAll": false,
        "multi": false,
        "multiFormat": "glob",
        "name": "app",
        "options": [
          {
            "selected": true,
            "text": "tomcat",
            "value": "tomcat"
          },
          {
            "selected": false,
            "text": "cassandra",
            "value": "cassandra"
          }
        ],
        "query": "tag_values(cpu.utilization.average,app)",
        "refresh": false,
        "regex": "",
        "type": "query"
      }
    ]
  }
```

----------------------------------------

TITLE: Specifying Example Metrics Environment Info Section - INI
DESCRIPTION: Provides an example of the format for setting environment info label-value pairs in the [metrics.environment_info] section of the Grafana configuration. No dependencies are required, and both lines are commented out by default as illustrations. This snippet helps users know how to format new metric dimensions. It does not affect configuration until the leading semicolon is removed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_26

LANGUAGE: ini
CODE:
```
; exampleLabel1 = exampleValue1\n; exampleLabel2 = exampleValue2
```

----------------------------------------

TITLE: Ensuring Strings are Marked for Translation in Components (React, TypeScript/JSX)
DESCRIPTION: These snippets demonstrate how to correctly wrap UI text in translation tags/components within React (JSX, TypeScript). Bad examples display hardcoded strings, while good examples use the <Trans> component with i18nKey attributes or wrap variables for interpolation. Dependencies: React, @grafana/i18n (Trans), UI components (e.g., InlineToast). Inputs: components that need translation. Outputs: translated UI components. Ensures static and dynamic string content is marked for i18n compliance.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-eslint-rules/README.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
// Bad ❌
<InlineToast placement="top" referenceElement={buttonRef.current}>
  Copied
</InlineToast>
```

LANGUAGE: tsx
CODE:
```
// Good ✅
<InlineToast placement="top" referenceElement={buttonRef.current}>
  <Trans i18nKey="clipboard-button.inline-toast.success">Copied</Trans>
</InlineToast>
```

----------------------------------------

TITLE: Implementing Collapsible Panel with State in PanelChrome - TypeScript
DESCRIPTION: Demonstrates a React functional component that manages the collapsed state of a PanelChrome panel using useState. The snippet covers passing title, width, height, collapsible, collapsed, and onToggleCollapse props, and renders content based on dynamically provided dimensions. Requires React, PanelChrome component, and assumes proper CSS/JSX rendering context. Inputs include panel title and dimensions; outputs are the rendered collapsible panel where content display is toggled by user interaction. Mutually exclusive props such as collapsible and hoverHeader are noted.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_9

LANGUAGE: TypeScript
CODE:
```
function Container() {
  const [isCollapsed, setCollapsed] = useState(true);

  return (
    <PanelChrome
      title="My awesome panel title"
      width={400}
      height={200}
      collapsible={true}
      collapsed={isCollapsed}
      onToggleCollapse={(isCollapsed) => setCollapsed(isCollapsed)}
    >
      {(innerwidth, innerheight) => {
        return (
          <div
            style={{
              width: innerwidth,
              height: innerheight,
              background: 'rgba(230,0,0,0.05)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
            }}
          >
            Content
          </div>
        );
      }}
    </PanelChrome>
  );
}
```

----------------------------------------

TITLE: Reading Grafana Dashboard Insights (Plaintext)
DESCRIPTION: Defines the `dashboards.insights:read` permission action allowing users to read dashboard insights data and see presence indicators. Viewing insights also requires the `dashboards:read` permission on the specific dashboard.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_8

LANGUAGE: plaintext
CODE:
```
`dashboards.insights:read`
```

----------------------------------------

TITLE: Updating Package List for New Grafana Repository - Bash
DESCRIPTION: Refreshes the system's package cache to include packages from the newly added Grafana repository. Required after changing sources. Input: None. Output: Apt package index is updated with Grafana packages.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
# Updates the list of available packages
sudo apt-get update
```

----------------------------------------

TITLE: Response for Getting Specific Dashboard Version in Grafana HTTP API
DESCRIPTION: This HTTP response returns complete information about a specific dashboard version, including metadata and the full dashboard configuration JSON in the 'data' field.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Content-Length: 1300

{
  "id": 1,
  "dashboardId": 1,
  "uid": "QA7wKklGz",
  "parentVersion": 0,
  "restoredFrom": 0,
  "version": 1,
  "created": "2017-04-26T17:18:38-04:00",
  "message": "Initial save",
  "data": {
    "annotations": {
      "list": [

      ]
    },
    "editable": true,
    "gnetId": null,
    "graphTooltip": 0,
    "id": 1,
    "links": [

    ],
    "rows": [
      {
        "collapse": false,
        "height": "250px",
        "panels": [

        ],
        "repeat": null,
        "repeatIteration": null,
        "repeatRowId": null,
        "showTitle": false,
        "title": "Dashboard Row",
        "titleSize": "h6"
      }
    ],
    "schemaVersion": 14,
      "tags": [

    ],
    "templating": {
      "list": [

      ]
    },
    "time": {
      "from": "now-6h",
      "to": "now"
    },
    "timepicker": {},
    "timezone": "browser",
    "title": "test",
    "version": 1
  },
  "createdBy": "admin"
}
```

----------------------------------------

TITLE: Customizing Divider Spacing with Spacing Prop in @grafana/ui - TypeScript
DESCRIPTION: This code snippet extends the vertical Divider example by passing a spacing prop (spacing={0.5}) to adjust the margin around the divider for layout tuning. Requires React and @grafana/ui libraries. Key parameters are direction=\"vertical\" and spacing=0.5. Input is JSX within a component; output is a vertically oriented divider with custom spacing. Intended for layout customization in React components.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Divider/Divider.mdx#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Divider } from '@grafana/ui';

    <header>
        <h1>My title here</h1>
        <Divider direction="vertical" spacing={0.5}/>
        <img src="logo.png" alt="logo" />
    </header>
    <main>
        <p>Main content goes here</p>
    </main>

```

----------------------------------------

TITLE: Complex Component Styling with Conditional Classes in Grafana
DESCRIPTION: Shows how to create multiple style classes for a component using Emotion in Grafana. This example demonstrates conditional styling based on an 'isActive' prop, using cx function to compose multiple class names and organizing styles as an object with different named properties.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/styling.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
import { css, cx } from '@emotion/css';

import { GrafanaTheme2 } from '@grafana/data';
import { useStyles2 } from '@grafana/ui';

interface ComponentAProps {
  isActive: boolean;
}

const ComponentA = ({ isActive }: ComponentAProps) => {
  const styles = useStyles2(getStyles);

  return (
    <div className={cx(styles.wrapper, isActive && styles.active)}>
      As red as you can get
      <i className={styles.icon} />
    </div>
  );
};

// Mind, that you can pass multiple arguments, theme included
const getStyles = (theme: GrafanaTheme2) => {
  return {
    wrapper: css({
      background: theme.colors.background.secondary,
    }),
    active: css({
      background: theme.colors.primary.main,
      text: theme.colors.primary.contrastText,
    }),
    icon: css({
      fontSize: theme.typography.bodySmall.fontSize,
    }),
  };
};
```

----------------------------------------

TITLE: Rendering Flame Graph Search Screenshot using Hugo Shortcode
DESCRIPTION: This Hugo shortcode renders an image figure within the documentation. It specifies the image source (`src`), sets a maximum width (`max-width`), and provides alternative text (`alt`) describing the image, which illustrates the search functionality in a Grafana flame graph.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/flame-graph/index.md#2025-04-23_snippet_0

LANGUAGE: hugo
CODE:
```
{{< figure src="/media/docs/grafana/panels-visualizations/screenshot-flamegraph-search-v12.0.png" max-width="700px" alt="Searching for a function name in a flame graph visualization.">}}
```

----------------------------------------

TITLE: Testing AsyncSelect Component with Mocked Backend in Grafana
DESCRIPTION: Complete test suite for the OrgPicker component that uses AsyncSelect with mocked backend data. It demonstrates how to mock the getBackendSrv for testing components that load options asynchronously and how to interact with the component to verify its behavior.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/testing.md#2025-04-23_snippet_7

LANGUAGE: tsx
CODE:
```
import { screen, render } from '@testing-library/react';
import userEvent from '@testing-library/user-event';

import { OrgPicker } from './OrgPicker';

jest.mock('@grafana/runtime', () => ({
  ...jest.requireActual('@grafana/runtime'),
  getBackendSrv: () => ({
    get: () =>
      Promise.resolve([
        { name: 'Org 1', id: 0 },
        { name: 'Org 2', id: 1 },
      ]),
  }),
}));

function setup(jsx: JSX.Element) {
  return {
    user: userEvent.setup(),
    ...render(jsx),
  };
}

describe('OrgPicker', () => {
  it('should render', async () => {
    render(
      <>
        <label htmlFor={'picker'}>Org picker</label>
        <OrgPicker onSelected={() => {}} inputId={'picker'} />
      </>
    );

    expect(await screen.findByRole('combobox', { name: 'Org picker' })).toBeInTheDocument();
  });

  it('should have the options', async () => {
    const { user } = setup(
      <>
        <label htmlFor={'picker'}>Org picker</label>
        <OrgPicker onSelected={() => {}} inputId={'picker'} />
      </>
    );
    await user.click(await screen.findByRole('combobox', { name: 'Org picker' }));
    expect(screen.getByText('Org 1')).toBeInTheDocument();
    expect(screen.getByText('Org 2')).toBeInTheDocument();
  });
});
```

----------------------------------------

TITLE: Traefik File Provider Router/Service (Domain-based) - YAML
DESCRIPTION: Example of a Traefik configuration via the file provider, defining a router and service to route domain-specific traffic to a Grafana instance. Place inside traefik.yml or as a snippet in the static configuration folder. The router matches grafana.example.com, and the backend is specified as a server URL. Traefik and a reachable Grafana backend are required.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_11

LANGUAGE: yaml
CODE:
```
http:\n  routers:\n    grafana:\n      rule: Host(`grafana.example.com`)\n      service: grafana\n  services:\n    grafana:\n      loadBalancer:\n        servers:\n          - url: http://192.168.30.10:3000
```

----------------------------------------

TITLE: Defining Alert Annotation Formatting in Go Template
DESCRIPTION: Defines a template named '__default_alert_annotations' for formatting annotations of a single alert. It specifically handles 'summary', 'description', and 'runbook_url' annotations, displaying them individually and removing them from the set. If any other annotations remain, it uses the '__default_sorted_pairs' template to list them. Expects the alert object with an '.Annotations' map as context.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/ng_alert_notification.txt#2025-04-23_snippet_3

LANGUAGE: go-template
CODE:
```
[[- define "__default_alert_annotations" -]]
[[- $annotations := .Annotations -]]
[[- if index $annotations "summary" ]]
Summary: [[ index .Annotations "summary" -]]
[[- $annotations = $annotations.Remove (toStrings (list "summary")) ]]
[[- end -]]
[[- if index $annotations "description" ]]
Description: [[ index $annotations "description" -]]
[[- $annotations = $annotations.Remove (toStrings (list "description")) ]]
[[- end -]]
[[- if index $annotations "runbook_url" ]]
Runbook: [[ index $annotations "runbook_url" -]]
[[- $annotations = $annotations.Remove (toStrings (list "runbook_url")) ]]
[[- end -]]
[[- if $annotations ]]
Annotations: [[ template "__default_sorted_pairs" $annotations ]]
[[- end -]]
[[- end -]]
```

----------------------------------------

TITLE: Configuring LINE Contact Point - YAML
DESCRIPTION: Configures a LINE contact point for sending notifications from Grafana. Requires only the authentication 'token'. Assumes valid token provided for proper delivery of alerts to LINE. Outputs are notifications sent to the associated LINE bot. No additional settings required.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_10

LANGUAGE: yaml
CODE:
```
type: line\nsettings:\n  # <string, required>\n  token: xxx\n
```

----------------------------------------

TITLE: Get Organizations for User - Response Example (json)
DESCRIPTION: Exemplifies the JSON array response listing organizations for the specified user, each with organization ID, name, and role. Assists in determining user privileges and organization membership within Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_11

LANGUAGE: json
CODE:
```
[\n  {\n    "orgId":1,\n    "name":"Main Org.",\n    "role":"Admin"\n  }\n]
```

----------------------------------------

TITLE: Configuring GitHub OAuth with Terraform Provider
DESCRIPTION: Terraform configuration to set up GitHub OAuth authentication in Grafana. This snippet defines SSO settings for GitHub including client credentials, permissions, and role attribute mapping.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_0

LANGUAGE: terraform
CODE:
```
resource "grafana_sso_settings" "github_sso_settings" {
  provider_name = "github"
  oauth2_settings {
    name                  = "Github"
    client_id             = "YOUR_GITHUB_APP_CLIENT_ID"
    client_secret         = "YOUR_GITHUB_APP_CLIENT_SECRET"
    allow_sign_up         = true
    auto_login            = false
    scopes                = "user:email,read:org"
    team_ids              = "150,300"
    allowed_organizations = "[\"My Organization\", \"Octocats\"]"
    allowed_domains       = "mycompany.com mycompany.org"
    role_attribute_path   = "[login=='octocat'][0] && 'GrafanaAdmin' || 'Viewer'"
  }
}
```

----------------------------------------

TITLE: Configuring Custom Branding for Shared Dashboards
DESCRIPTION: This configuration section shows how to customize the appearance of shared dashboards specifically. Options include hiding the footer, customizing footer text and logo, and hiding the Grafana logo in the header.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-custom-branding/index.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
[white_labeling.public_dashboards]

# Hides the footer for the shared dashboards if set to `true`.
# example: footer_hide = "true"
;footer_hide =

# Set to text shown in the footer
;footer_text =

# Set to complete url to override shared dashboard footer logo. Default is `grafana-logo` and will display the Grafana logo.
# An empty value will hide the footer logo.
;footer_logo =

# Set to link for the footer
;footer_link =

# Set to `true` to hide the Grafana logo next to the title
;header_logo_hide =
```

----------------------------------------

TITLE: Re-encrypting Data Encryption Keys via Grafana Admin HTTP API - HTTP
DESCRIPTION: This HTTP POST request triggers a global re-encryption of all data encryption keys on a Grafana instance. Expect no request payload and a 204 No Content response on success. Requires proper authentication and encryption management permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_19

LANGUAGE: http
CODE:
```
POST /api/admin/encryption/reencrypt-data-keys HTTP/1.1\nAccept: application/json\nContent-Type: application/json
```

LANGUAGE: http
CODE:
```
HTTP/1.1 204\nContent-Type: application/json
```

----------------------------------------

TITLE: Admin-Level Organization Details by ID - JSON
DESCRIPTION: JSON object showing a full organization record, including address fields, as returned from the /api/orgs/:orgId endpoint by a server admin. Fields include id, name, and address details for administrative organization management.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_15

LANGUAGE: json
CODE:
```
{\n  "id":1,\n  "name":"Main Org.",\n  "address":{\n    "address1":"",\n    "address2":"",\n    "city":"",\n    "zipCode":"",\n    "state":"",\n    "country":""\n  }\n}
```

----------------------------------------

TITLE: Rolling Back Secret Encryption using Grafana Admin API
DESCRIPTION: Triggers the rollback of secret encryption via the Grafana Admin API endpoint `/encryption/rollback-secrets`. This decrypts secrets from envelope encryption and re-encrypts them with legacy encryption, typically used for downgrading Grafana. It is recommended to perform this action during maintenance.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_5

LANGUAGE: plaintext
CODE:
```
/encryption/rollback-secrets
```

----------------------------------------

TITLE: Configuring JWT Authentication in Grafana
DESCRIPTION: INI configuration for setting up JWT authentication in Grafana, including header settings, claim mappings, and role attribute paths.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/jwt_proxy/readme.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[auth]
signout_redirect_url = http://env.grafana.local:8088/oauth2/sign_out

[auth.jwt]
enabled = true
header_name = X-Forwarded-Access-Token
username_claim = login
email_claim = email
jwk_set_file = devenv/docker/blocks/auth/oauth/jwks.json
cache_ttl = 60m
expect_claims = {"iss": "http://env.grafana.local:8087/realms/grafana", "azp": "grafana-oauth"}
auto_sign_up = true
role_attribute_path = contains(roles[*], 'grafanaadmin') && 'GrafanaAdmin' || contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'
role_attribute_strict = false
groups_attribute_path = groups[]
allow_assign_grafana_admin = true
```

----------------------------------------

TITLE: Retrieving Items for a Specific Playlist via Grafana HTTP API
DESCRIPTION: Sends a GET request to `/api/playlists/:uid/items` to retrieve only the items (dashboards) associated with a specific playlist, identified by its UID. Requires an `Authorization` header with a bearer token. Returns a JSON array of playlist item objects.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/playlist.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
GET /api/playlists/1/items HTTP/1.1
Accept: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
[
  {
    "id": 1,
    "playlistUid": "1",
    "type": "dashboard_by_uid",
    "value": "3",
    "order": 1,
    "title":"my third dashboard"
  },
  {
    "id": 2,
    "playlistUid": "1",
    "type": "dashboard_by_tag",
    "value": "myTag",
    "order": 2,
    "title":"my other dashboard"
  }
]
```

----------------------------------------

TITLE: Example HTTP Response for Updating a Grafana Custom Role
DESCRIPTION: Illustrates a successful HTTP 200 OK response after updating a Grafana custom role via the Access Control API. The JSON body contains the updated role details, including version, UID, name, description, group, display name, permissions, timestamps, and global status. This follows an update request where the role's version must be incremented.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_10

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8

{
    "version":3,
    "uid":"jZrmlLCGka",
    "name":"custom:delete:write:roles",
    "displayName":"custom delete write roles",
    "description":"My custom role which gives users permissions to delete and write roles",
    "group":"My Group",
    "displayName": "My Custom Role",
    "permissions":[
        {
            "action":"roles:delete",
            "scope":"permissions:type:delegate",
            "updated":"2021-08-06T18:27:40+02:00",
            "created":"2021-08-06T18:27:40+02:00"
        },
        {
            "action":"roles:write",
            "scope":"permissions:type:delegate",
            "updated":"2021-08-06T18:27:41+02:00",
            "created":"2021-08-06T18:27:41+02:00"
        }
    ],
    "updated":"2021-08-06T18:27:41+02:00",
    "created":"2021-08-06T18:27:40+02:00",
    "global":false
}
```

----------------------------------------

TITLE: Listing API Keys Response Example using HTTP/JSON
DESCRIPTION: Example HTTP 200 OK response for listing API keys from the deprecated `GET /api/auth/keys` endpoint. The body contains a JSON array of API key objects, each including `id`, `name`, `role`, and optionally `expiration` if the key has one set.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/auth.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

[
  {
    "id": 3,
    "name": "API",
    "role": "Admin"
  },
  {
    "id": 1,
    "name": "TestAdmin",
    "role": "Admin",
    "expiration": "2019-06-26T10:52:03+03:00"
  }
]
```

----------------------------------------

TITLE: Getting Folder Permissions in Grafana HTTP API
DESCRIPTION: This HTTP GET request retrieves all existing permissions for a folder with the given UID. It requires the 'folders.permissions:read' action with 'folders:*' scope.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder_permissions.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/folders/nErXDvCkzz/permissions HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Fetching Tag Keys in InfluxDB for Template Variables
DESCRIPTION: Query to retrieve all tag keys from a measurement, which can be used in Grafana template variables for dynamic grouping options.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/template-variables/index.md#2025-04-23_snippet_2

LANGUAGE: sql
CODE:
```
SHOW TAG KEYS [FROM <measurement_name>]
```

----------------------------------------

TITLE: Listing Required Image Rendering Dependencies on RHEL 8 (Bash)
DESCRIPTION: Provides a list of library file names required on a minimal RHEL 8 system for Grafana image rendering. Note that this lists library files rather than package names, which might require cross-referencing with package management tools like `yum` or `dnf` to find the corresponding packages.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
linux-vdso.so.1 libdl.so.2 libpthread.so.0 libgobject-2.0.so.0 libglib-2.0.so.0 libnss3.so libnssutil3.so libsmime3.so libnspr4.so libatk-1.0.so.0 libatk-bridge-2.0.so.0 libcups.so.2 libgio-2.0.so.0 libdrm.so.2 libdbus-1.so.3 libexpat.so.1 libxcb.so.1 libxkbcommon.so.0 libm.so.6 libX11.so.6 libXcomposite.so.1 libXdamage.so.1 libXext.so.6 libXfixes.so.3 libXrandr.so.2 libgbm.so.1 libpango-1.0.so.0 libcairo.so.2 libasound.so.2 libatspi.so.0 libgcc_s.so.1 libc.so.6 /lib64/ld-linux-x86-64.so.2 libgnutls.so.30 libpcre.so.1 libffi.so.6 libplc4.so libplds4.so librt.so.1 libgmodule-2.0.so.0 libgssapi_krb5.so.2 libkrb5.so.3 libk5crypto.so.3 libcom_err.so.2 libavahi-common.so.3 libavahi-client.so.3 libcrypt.so.1 libz.so.1 libselinux.so.1 libresolv.so.2 libmount.so.1 libsystemd.so.0 libXau.so.6 libXrender.so.1 libthai.so.0 libfribidi.so.0 libpixman-1.so.0 libfontconfig.so.1 libpng16.so.16 libxcb-render.so.0 libidn2.so.0 libunistring.so.2 libtasn1.so.6 libnettle.so.6 libhogweed.so.4 libgmp.so.10 libkrb5support.so.0 libkeyutils.so.1 libpcre2-8.so.0 libuuid.so.1 liblz4.so.1 libgcrypt.so.20 libbz2.so.1
```

----------------------------------------

TITLE: Adding Team Permission to Data Source in HTTP
DESCRIPTION: Sends a POST request to set team permission for a data source. The 'permission' field can be set to 'Query', 'Edit', or 'Admin' to add permission, or an empty string to remove it.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/datasource_permissions.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
POST /api/access-control/datasources/my_datasource/teams/1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "permission": "Edit",
}
```

----------------------------------------

TITLE: Setting Renderer Security Token - Bash
DESCRIPTION: Sets the AUTH_TOKEN environment variable to '-' for the image renderer process, which is required to restrict access to the rendering endpoint. This variable is used in conjunction with both the Grafana and renderer configuration files for authentication. Requires image renderer version v3.6.1 or later and a compatible Grafana version.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
AUTH_TOKEN=-
```

----------------------------------------

TITLE: Creating Nested Templating Variable in PostgreSQL
DESCRIPTION: Shows a SQL query that creates a nested templating variable by filtering hosts based on a previously selected region variable. This query demonstrates how to create interdependent variables in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_11

LANGUAGE: sql
CODE:
```
SELECT hostname FROM host WHERE region IN($region)
```

----------------------------------------

TITLE: Disabling Alert Grouping in Grafana Notification Policies
DESCRIPTION: This special label `...` is used in the 'Group by' option of a Grafana notification policy to disable grouping. When used (ensuring no other labels are present in the 'Group by' field), each alert instance triggers a separate notification instead of being batched together.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/notifications/group-alert-notifications.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
...
```

----------------------------------------

TITLE: Compiling Protobuf Files - Shell
DESCRIPTION: This shell command compiles all protobuf definition files in the repository by running the Makefile target 'protobuf'. Run this in the top-level directory. Prerequisite tools include 'make' and protoc and relevant plugins.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_21

LANGUAGE: sh
CODE:
```
make protobuf
```

----------------------------------------

TITLE: Retrieving Helm Chart Notes - Helm CLI - Bash
DESCRIPTION: This snippet uses `helm get notes` to display the post-installation notes for the deployed Grafana Helm release. The notes include information on login, password retrieval, and access URLs. It requires the name of an existing Helm release and namespace.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
helm get notes my-grafana -n monitoring
```

----------------------------------------

TITLE: Defining Grafana Fixed Role: fixed:datasources.permissions:reader
DESCRIPTION: Specifies the `fixed:datasources.permissions:reader` role (ID: `fixed_ErYA-cTN3yn4h4GxaVPcawRhiOY`) within Grafana. This role grants the `datasources.permissions:read` permission, allowing users to read data source permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_5

LANGUAGE: plaintext
CODE:
```
fixed:datasources.permissions:reader
```

LANGUAGE: plaintext
CODE:
```
fixed_ErYA-cTN3yn4h4GxaVPcawRhiOY
```

LANGUAGE: plaintext
CODE:
```
Permissions included:
- datasources.permissions:read
```

----------------------------------------

TITLE: Defining Grafana Fixed Role: fixed:folders:creator
DESCRIPTION: Specifies the `fixed:folders:creator` role (ID: `fixed_gGLRbZGAGB6n9uECqSh_W382RlQ`) within Grafana. This role grants the `folders:create` permission, allowing users to create folders at the root level.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_7

LANGUAGE: plaintext
CODE:
```
fixed:folders:creator
```

LANGUAGE: plaintext
CODE:
```
fixed_gGLRbZGAGB6n9uECqSh_W382RlQ
```

LANGUAGE: plaintext
CODE:
```
Permissions included:
- folders:create
```

----------------------------------------

TITLE: Re-encrypting Grafana Secrets via CLI Admin Command using Bash
DESCRIPTION: This command uses the Grafana CLI (`grafana cli`) to re-encrypt all existing secrets in the database using the currently configured primary encryption provider. This is typically run after switching to a new provider like Hashicorp Vault to ensure all secrets use the new key. Requires administrative privileges and is run from the Grafana root directory.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-hashicorp-key-vault/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
   `grafana cli admin secrets-migration re-encrypt`
```

----------------------------------------

TITLE: InfluxDB SQL Macro Examples with Interpolation
DESCRIPTION: Examples of SQL queries using Grafana macros for time filtering and date binning, shown with their interpolated values. Demonstrates usage of $__timeFrom, $__timeTo, $__timeFilter, and $__dateBin macros.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/query-editor/index.md#2025-04-23_snippet_2

LANGUAGE: sql
CODE:
```
// with macro
1. SELECT * FROM cpu WHERE time >= $__timeFrom AND time <= $__timeTo
2. SELECT * FROM cpu WHERE $__timeFilter(time)
3. SELECT $__dateBin(time) from cpu

// interpolated
1. SELECT * FROM iox.cpu WHERE time >= cast('2023-12-15T12:38:30Z' as timestamp) AND time <= cast('2023-12-15T18:38:30Z' as timestamp)
2. SELECT * FROM cpu WHERE time >= '2023-12-15T12:41:28Z' AND time <= '2023-12-15T18:41:28Z'
3. SELECT date_bin(interval '15 second', time, timestamp '1970-01-01T00:00:00Z') from cpu
```

----------------------------------------

TITLE: Binding Values in Go with Wire
DESCRIPTION: Demonstrates how to bind a basic value to a type using wire.Value in a provider set.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_8

LANGUAGE: go
CODE:
```
type Foo struct {
    X int
}

func injectFoo() Foo {
    wire.Build(wire.Value(Foo{X: 42}))
    return Foo{}
}
```

----------------------------------------

TITLE: Overriding Default Plugin Repository URL (Bash)
DESCRIPTION: Shows how to use the '--repo' global option to download and install or update plugins from a custom repository URL ('https://example.com/plugins') instead of the default Grafana repository.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
grafana cli --repo \"https://example.com/plugins\" plugins install <plugin-id>
```

----------------------------------------

TITLE: Team Members List Response Example - JSON
DESCRIPTION: Shows the array of team members as returned by the team members endpoint. Each member entry includes organization ID, team ID, user ID, email, login, and avatar URL. Useful for displaying list views of team participants.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_11

LANGUAGE: json
CODE:
```
[\n  {\n    \"orgId\": 1,\n    \"teamId\": 1,\n    \"userId\": 3,\n    \"email\": \"user1@email.com\",\n    \"login\": \"user1\",\n    \"avatarUrl\": \"\/avatar\/1b3c32f6386b0185c40d359cdc733a79\"\n  },\n  {\n    \"orgId\": 1,\n    \"teamId\": 1,\n    \"userId\": 2,\n    \"email\": \"user2@email.com\",\n    \"login\": \"user2\",\n    \"avatarUrl\": \"\/avatar\/cad3c68da76e45d10269e8ef02f8e73e\"\n  }\n]
```

----------------------------------------

TITLE: Creating Grafana System User - Shell
DESCRIPTION: Creates a dedicated, non-login system user 'grafana' for secure running of the Grafana binary. Input: None. Output: System account with no shell access. Required for secure standalone deployments.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_7

LANGUAGE: shell
CODE:
```
sudo useradd -r -s /bin/false grafana
```

----------------------------------------

TITLE: Verifying Prometheus Binary Placement (Linux/macOS)
DESCRIPTION: This command uses 'ls' to check for the existence of the 'prometheus' and 'promtool' binaries in the '/usr/local/bin' directory, a common location for installed executables. It helps verify if Prometheus components are installed correctly.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
ls /usr/local/bin/prometheus /usr/local/bin/promtool
```

----------------------------------------

TITLE: Fetching Loki Label Names with datasource.languageProvider - TypeScript
DESCRIPTION: Demonstrates how to asynchronously fetch all available label keys from a connected Loki data source using the fetchLabels method. This method accepts optional parameters for stream selector and time range, returning a Promise that resolves to an array of label keys. The function is designed to be robust, supporting error handling and leveraging API caching, authentication management, and advanced instrumentation if enabled.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/loki/docs/app_plugin_developer_documentation.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
/**
 * Fetch label keys using the best applicable endpoint.
 *
 * This asynchronous function returns all available label keys from the data source.
 * It returns a promise that resolves to an array of strings containing the label keys.
 *
 * @param options - (Optional) An object containing additional options.
 * @param options.streamSelector - (Optional) The stream selector to filter label keys. If not provided, all label keys are fetched.
 * @param options.timeRange - (Optional) The time range for which you want to retrieve label keys. If not provided, the default time range is used.
 * @returns A promise containing an array of label keys.
 * @throws An error if the fetch operation fails.
 */
async function fetchLabels(options?: { streamSelector?: string; timeRange?: TimeRange }): Promise<string[]>;

/**
 * Example usage:
 */

try {
  const labelKeys = await fetchLabels();
  console.log(labelKeys);
} catch (error) {
  console.error(`Error fetching label keys: ${error.message}`);
}

```

----------------------------------------

TITLE: Checking Prometheus Service Status via systemd (Linux)
DESCRIPTION: This command uses 'systemctl', the systemd init system tool, to check the detailed status of the 'prometheus.service' unit. It's used to verify if Prometheus is correctly set up and running as a managed service on Linux distributions using systemd.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_14

LANGUAGE: bash
CODE:
```
systemctl status prometheus.service
```

----------------------------------------

TITLE: Extracting Host and Manipulating Domains with Go Templates - Go Template
DESCRIPTION: Examples of using {{ stripPort }} and {{ stripDomain }} functions to extract the host (removing port), or strip the domain part of an FQDN, within Grafana's Go template context. Inputs are address strings; outputs are the hostname without port or the FQDN minus the domain. Useful for display or further processing in monitoring outputs.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_9

LANGUAGE: Go Template
CODE:
```
{{ stripPort "example.com:8080" }}

```

LANGUAGE: Go Template
CODE:
```
{{ stripDomain "example.com:8080" }}

```

----------------------------------------

TITLE: Verifying Deployment Status using Bash
DESCRIPTION: Checks the status of the Grafana Deployment within the 'my-grafana' namespace using `kubectl get`. The `-o wide` flag provides extra information, like the node where pods are running. This command verifies the desired number of replicas are ready, up-to-date, and available, indicating if the Grafana application pods are running correctly. Requires `kubectl` installed and configured.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
kubectl get deployments --namespace=my-grafana -o wide
```

----------------------------------------

TITLE: Setting AWS Credentials as Environment Variables for Grafana (Shell)
DESCRIPTION: This snippet shows example environment variables (`AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `AWS_REGION`) that must be set on the host or container running Grafana. These variables provide the necessary AWS credentials for Grafana to authenticate with AWS License Manager and retrieve license information. Replace the example values with the actual access key ID, secret access key, and AWS region of the dedicated IAM user created previously.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-instance-outside-aws/index.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
AWS_ACCESS_KEY_ID=ABCD5E75FGHIJKTM7
AWS_SECRET_ACCESS_KEY=k8fhYAQVy+5NhCejhe6HeSjSphjRuy+12C06
AWS_REGION=us-east-1
```

----------------------------------------

TITLE: Verifying Group Access on Certificate Symlinks - Bash
DESCRIPTION: This bash snippet verifies that files and symlinks used by Grafana are readable by the 'grafana' group. It lists the current permissions and ownership for all matching files in the grafana directory, ensuring each is accessible as intended. The output confirms symlink targets and file permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
$ ls -l /etc/grafana/grafana.*

lrwxrwxrwx 1 root grafana    67 Mar 22 14:15 /etc/grafana/grafana.crt -> /etc/letsencrypt/live/subdomain.mysite.com/fullchain.pem
-rw-r----- 1 root grafana 54554 Mar 22 14:13 /etc/grafana/grafana.ini
lrwxrwxrwx 1 root grafana    65 Mar 22 14:15 /etc/grafana/grafana.key -> /etc/letsencrypt/live/subdomain.mysite.com/privkey.pem
```

----------------------------------------

TITLE: Backing up and Restoring PostgreSQL Database for Grafana
DESCRIPTION: Commands for backing up and restoring a PostgreSQL database used by Grafana. Uses pg_dump for backup and psql for restore operations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/back-up/back-up-grafana.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
backup:
> pg_dump grafana > grafana_backup

restore:
> psql grafana < grafana_backup
```

----------------------------------------

TITLE: Retrieving a Team by ID - HTTP
DESCRIPTION: Requests detailed information for a specific team using its numeric ID. The user must provide a valid Bearer token in the Authorization header. The response returns team details in JSON format, including creation and update timestamps.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
GET /api/teams/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt
```

----------------------------------------

TITLE: Including Query Labels and Values in Annotation
DESCRIPTION: This Go template demonstrates combining both query labels (e.g., `instance`) and query values (e.g., `A.Value`) within a Grafana alert annotation. It accesses the label using the `$labels` variable and the value using the `$values` variable to provide richer context.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_3

LANGUAGE: gotemplate
CODE:
```
CPU usage for {{ $labels.instance }} has exceeded 80% ({{ $values.A.Value }}) for the last 5 minutes.
```

----------------------------------------

TITLE: Implementing withTheme Higher-Order Component
DESCRIPTION: Shows how to use the withTheme higher-order component to wrap a component and provide it with the current theme via the theme prop.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/themes.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import  { ThemeContext, Themeable } from '@grafana/ui';

interface FooProps extends Themeable2 {}

const Foo: React.FunctionComponent<FooProps> = () => ...

export default withTheme2(Foo);
```

----------------------------------------

TITLE: Example Grafana Alert Label Set
DESCRIPTION: Defines an example set of key-value labels (`foo=bar`, `baz=qux`, `id=12`) associated with a Grafana alert. This set is used as a basis for demonstrating how various label matchers work.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/how_label_matching_works.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
{ foo=bar, baz=qux, id=12 }
```

----------------------------------------

TITLE: Starting Grafana Server using Binary (Windows)
DESCRIPTION: Executes the Grafana server binary (`grafana.exe`) directly from the command line on Windows. The binary is typically located in the `bin` subdirectory of the installation folder.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_13

LANGUAGE: cmd
CODE:
```
grafana.exe server
```

----------------------------------------

TITLE: Sample JSON Response from Grafana Role Creation API - JSON Example
DESCRIPTION: This JSON code snippet illustrates the typical HTTP API response received upon successful creation of a custom role in Grafana. It includes all role attributes such as version, unique identifier, name, display name, description, and permissions with timestamps. No prerequisites beyond API access; output shows resource state and CRUD timestamps. The actual permission fields may vary as per Grafana version.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_6

LANGUAGE: json
CODE:
```
{
    "version": 1,
    "uid": "jZrmlLCkGksdka",
    "name": "custom:users:admin",
    "displayName": "custom users admin",
    "description": "My custom role which gives users permissions to create users",
    "global": true,
    "permissions": [
        {
            "action": "users:create"
            "updated": "2021-05-17T22:07:31.569936+02:00",
            "created": "2021-05-17T22:07:31.569935+02:00"
        }
    ],
    "updated": "2021-05-17T22:07:31.564403+02:00",
    "created": "2021-05-17T22:07:31.564403+02:00"
}
```

----------------------------------------

TITLE: Implementing Custom Cell Rendering in InteractiveTable with TSX
DESCRIPTION: This TSX snippet demonstrates how to customize the rendering of individual table cells within the `InteractiveTable`. It defines a `TableData` interface and a custom functional component `RepoCell` which receives cell properties (`CellProps`) and returns a `LinkButton` based on the row's data. The `columns` definition specifies this `RepoCell` component for the 'repo' column using the `cell` property. The `InteractiveTable` is then rendered with these custom columns and data.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InteractiveTable/InteractiveTable.mdx#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
interface TableData {
  datasource: string;
  repo: string;
}

const RepoCell = ({
  row: {
    original: { repo },
  },
}: CellProps<WithCustomCellData, void>) => {
  return (
    <LinkButton href={repo} size="sm" icon="external-link-alt">
      Open on GitHub
    </LinkButton>
  );
};

const tableData: WithCustomCellData[] = [
  {
    datasource: 'Prometheus',
    repo: 'https://github.com/prometheus/prometheus',
  },
  {
    datasource: 'Loki',
    repo: 'https://github.com/grafana/loki',
  },
  {
    datasource: 'Tempo',
    repo: 'https://github.com/grafana/tempo',
  },
];

const columns: Array<Column<WithCustomCellData>> = [
  { id: 'datasource', header: 'Data Source' },
  { id: 'repo', header: 'Repo', cell: RepoCell },
];

export const MyComponent = () => {
  return <InteractiveTable columns={columns} data={tableData} getRowId={(r) => r.datasource} />;
};
```

----------------------------------------

TITLE: Testing Keyboard Selection in Combobox
DESCRIPTION: Test code showing how to test keyboard-based option selection in the Combobox component using React Testing Library.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Combobox/Combobox.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
render(<Combobox options={options} value={null} onChange={onChangeHandler} />);

const input = screen.getByRole('combobox');
await userEvent.type(input, 'Option 3');
await userEvent.keyboard('{ArrowDown}{Enter}');

expect(screen.getByDisplayValue('Option 3')).toBeInTheDocument();
```

----------------------------------------

TITLE: Response for Retrieving Snapshot by Key via Grafana HTTP API (HTTP)
DESCRIPTION: Presents the typical JSON response received when fetching a dashboard snapshot by key. The response includes 'meta' fields indicating snapshot properties and a nested dashboard object defining its settings and state, suitable for UI consumption or further processing.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_5

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{\n  "meta":{\n    "isSnapshot":true,\n    "type":"snapshot",\n    "canSave":false,\n    "canEdit":false,\n    "canStar":false,\n    "slug":"",\n    "expires":"2200-13-32T25:23:23+02:00",\n    "created":"2200-13-32T28:24:23+02:00"\n  },\n  "dashboard": {\n    "editable":false,\n    "nav": [\n      {\n        "enable":false,\n        "type":"timepicker"\n      }\n    ],\n    "rows": [\n      {\n\n      }\n    ],\n    "style":"dark",\n    "tags":[],\n    "templating":{\n      "list":[\n      ]\n    },\n    "time":{\n    },\n    "timezone":"browser",\n    "title":"Home",\n    "version":5\n  }\n}
```

----------------------------------------

TITLE: Response for Usage Report Preview Request
DESCRIPTION: Example response showing a preview of the Grafana usage report with metrics about active users, alerts, and other usage statistics.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_7

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
	"version": "8_4_0",
	"metrics": {
		"stats.active_admins.count": 1,
		"stats.active_editors.count": 1,
		"stats.active_sessions.count": 0,
		"stats.active_users.count": 2,
		"stats.active_viewers.count": 0,
		"stats.admins.count": 1,
		"stats.alert_rules.count": 0,
		"stats.alerting.ds.other.count": 0,
		"stats.alerts.count": 5,
		"stats.annotations.count": 6,
		"stats.api_keys.count": 1
  }
}
```

----------------------------------------

TITLE: Preventing Top-Level Use of t() Translation Function (React, TypeScript/JSX)
DESCRIPTION: These code snippets illustrate the anti-pattern of invoking the t() translation function at file scope, which can cause translation issues in tests and lazy-loaded modules. The good examples ensure that translations are performed within React components or functions, preserving context. Dependencies: t() from @grafana/i18n, React for function components. Inputs: components or shared config data. Outputs: translated strings or config available at the appropriate time in the component lifecycle.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-eslint-rules/README.md#2025-04-23_snippet_5

LANGUAGE: tsx
CODE:
```
// Bad ❌
const someTranslatedText = t('some.key', 'Some text');
const SomeComponent = () => {
  return <div title={someTranslatedText} />;
};
```

LANGUAGE: tsx
CODE:
```
// Good ✅
const SomeComponent = () => {
  const someTranslatedText = t('some.key', 'Some text');
  return <div title={someTranslatedText} />;
};
```

LANGUAGE: tsx
CODE:
```
// Bad ❌
const someConfigThatHasToBeShared = [{ foo: t('some.key', 'Some text') }];
const SomeComponent = () => {
  return (
    <div>
      {someConfigThatHasToBeShared.map((cfg) => {
        return <div>{cfg.foo}</div>;
      })}
    </div>
  );
};
```

LANGUAGE: tsx
CODE:
```
// Good ✅
const someConfigThatHasToBeShared = () => [{ foo: t('some.key', 'Some text') }];
const SomeComponent = () => {
  const configs = someConfigThatHasToBeShared();
  return (
    <div>
      {configs.map((cfg) => {
        return <div>{cfg.foo}</div>;
      })}
    </div>
  );
};
```

----------------------------------------

TITLE: Uploading Zipkin Trace Data - Grafana (JSON)
DESCRIPTION: This JSON snippet exemplifies a single Zipkin-formatted trace suitable for upload and visualization in Grafana’s Zipkin data source. It includes traceId, parentId, span id, service details, tags, and timing fields. Requires a valid Zipkin schema and is intended for viewing a single trace in the UI (only the first trace is displayed if multiple are present). Tags such as 'http.method' and operation names are used for filtering and timeline displays. Ensure numeric values for timestamps and durations, and that field names match Zipkin conventions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/zipkin/_index.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
[
  {
    "traceId": "efe9cb8857f68c8f",
    "parentId": "efe9cb8857f68c8f",
    "id": "8608dc6ce5cafe8e",
    "kind": "SERVER",
    "name": "get /api",
    "timestamp": 1627975249601797,
    "duration": 23457,
    "localEndpoint": { "serviceName": "backend", "ipv4": "127.0.0.1", "port": 9000 },
    "tags": {
      "http.method": "GET",
      "http.path": "/api",
      "jaxrs.resource.class": "Resource",
      "jaxrs.resource.method": "printDate"
    },
    "shared": true
  }
]
```

----------------------------------------

TITLE: Starting Sample Application Services with Docker Compose - Bash
DESCRIPTION: This snippet shows how to launch all predefined services (Grafana, Prometheus, Loki, etc.) in detached mode using Docker Compose. It requires 'docker-compose.yml' to exist (typically in the current directory after changing to the cloned repo folder). All dependencies (Docker, Docker Compose, sample repo) must be installed, and any conflicting services occupying necessary ports must be stopped. Input: None (run from project directory). Output: Services start in the background; images are pulled if needed. This command can fail if ports are already in use or if Docker is not running.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
docker-compose up -d

```

----------------------------------------

TITLE: Using ToolbarButton Components in React JSX
DESCRIPTION: This snippet demonstrates how to use multiple ToolbarButton components within a ToolbarButtonRow. It shows different variants of the button, including default and primary, as well as how to use icons and group buttons together.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ToolbarButton/ToolbarButton.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<ToolbarButtonRow>
  <ToolbarButton variant="default" iconOnly={false} isOpen={false}>
    Last 6 hours
  </ToolbarButton>
  <ButtonGroup>
    <ToolbarButton icon="search-minus" variant="default" />
    <ToolbarButton icon="search-plus" variant="default" />
  </ButtonGroup>
  <ToolbarButton icon="sync" isOpen={false} variant="primary" />
</ToolbarButtonRow>
```

----------------------------------------

TITLE: Configuring Allowed Organizations with Spaces using JSON Syntax in Grafana INI
DESCRIPTION: Shows how to specify the `allowed_organizations` setting within Grafana's configuration using JSON array syntax. This format is required when organization names contain spaces, ensuring only users belonging to "org 1" or "second org" can log in via SAML.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_16

LANGUAGE: ini
CODE:
```
allowed_organizations = ["org 1", "second org"]
```

----------------------------------------

TITLE: Displaying Current Year using Go Template Functions
DESCRIPTION: This Go template snippet calculates and displays the current year in the email footer. It uses the `now` function to get the current time and pipes the result to the `date` function with the format string "2006" (Go's reference time format for the year). Requires the Go templating engine and availability of `now` and `date` template functions.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/new_user_invite.txt#2025-04-23_snippet_5

LANGUAGE: gotemplate
CODE:
```
{{now | date "2006"}}
```

----------------------------------------

TITLE: Including Grafana Backup Instructions using Hugo Shortcode
DESCRIPTION: This Hugo shortcode embeds shared instructions for backing up Grafana before an upgrade. It points to 'back-up/back-up-grafana.md' and uses 'leveloffset="+1"' to adjust the heading levels of the included content for proper document structure relative to the current page. The 'source' and 'version' parameters provide context.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v9.1/index.md#2025-04-23_snippet_1

LANGUAGE: hugo
CODE:
```
{{< docs/shared lookup="back-up/back-up-grafana.md" source="grafana" version="<GRAFANA VERSION>" leveloffset="+1" >}}
```

----------------------------------------

TITLE: Rendering Tag Component Example in Storybook Canvas
DESCRIPTION: This snippet uses the Storybook Canvas component to render an example of the Tag component. It specifically renders the 'Single' story from the TagStories.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tags/Tag.mdx#2025-04-23_snippet_2

LANGUAGE: JSX
CODE:
```
<Canvas of={TagStories.Single} />
```

----------------------------------------

TITLE: Integrating FileDropzone Component in React - JSX
DESCRIPTION: This snippet demonstrates how to import and render the FileDropzone component from the '@grafana/ui' package in a React application. The FileDropzone is provided with an onLoad callback prop, which receives the uploaded file's result and logs it to the console. To use this code, ensure that '@grafana/ui' is installed as a dependency in your project, and that you are working within a React environment supporting JSX syntax. The onLoad function parameter represents the result of the file upload, and proper error handling should be added for production scenarios.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/FileDropzone/FileDropzone.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { FileDropzone } from '@grafana/ui';

<FileDropzone onLoad={(result) => console.log(result)} />;
```

----------------------------------------

TITLE: Get Teams for User - Response Example (json)
DESCRIPTION: Displays the JSON array structure of teams associated with a user, including properties such as team ID, organization ID, name, email, avatar URL, and member count. Useful for audit and access management features.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_13

LANGUAGE: json
CODE:
```
[\n  {\n    "id":1,\n    "orgId":1,\n    "name":"team1",\n    "email":"",\n    "avatarUrl":"/avatar/3fcfe295eae3bcb67a49349377428a66",\n    "memberCount":1\n  }\n]
```

----------------------------------------

TITLE: Configuring HAProxy to Proxy Grafana Under a Sub Path - Bash
DESCRIPTION: Provides an example HAProxy configuration for routing traffic on path /grafana (or subpaths) to the Grafana backend. It demonstrates conditional backend switching with 'use_backend', path rewriting for versions 1.6+, and compatibility with older versions through the commented 'reqrep' line. Place this inside haproxy.cfg; restart HAProxy for changes. This setup is effective for sub path-based service segmentation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
frontend http-in\n  bind *:80\n  use_backend grafana_backend if { path /grafana } or { path_beg /grafana/ }\n\nbackend grafana_backend\n  server grafana localhost:3000\n  # Requires haproxy >= 1.6\n  http-request set-path %[path,regsub(^/grafana/?,/)]\n  # Works for haproxy < 1.6\n  # reqrep ^([\\^\\ ]*\\ /)grafana[/]?(.*) \\1\\2\n\n  server grafana localhost:3000
```

----------------------------------------

TITLE: Context Usage Example
DESCRIPTION: Example demonstrating the use of context.Context as the first parameter in Go functions following best practices
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/recommended-practices.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
context.TODO
```

----------------------------------------

TITLE: Updating All Installed Grafana Plugins (Bash)
DESCRIPTION: Command 'plugins update-all' attempts to update all currently installed Grafana plugins to their latest compatible versions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_16

LANGUAGE: bash
CODE:
```
grafana cli plugins update-all
```

----------------------------------------

TITLE: Querying Production Memory Usage with PromQL
DESCRIPTION: PromQL query used within a Grafana time series panel to retrieve the `flask_app_memory_usage` metric specifically for the 'prod' environment. This metric is used alongside CPU usage for visualization and defining alert rules.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_5

LANGUAGE: promql
CODE:
```
flask_app_memory_usage{environment="prod"}
```

----------------------------------------

TITLE: Configuring SameSite Attribute for Grafana Cookies in TOML
DESCRIPTION: Configures the `cookie_samesite` setting within the `[security]` section of `grafana.ini`. Setting this to `strict` helps mitigate Cross-Site Request Forgery (CSRF) attacks by preventing the browser from sending the cookie with cross-site requests, although it may restrict certain user actions. Other valid values are "lax" (default), "none", and "disabled".
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-security-hardening/index.md#2025-04-23_snippet_1

LANGUAGE: toml
CODE:
```
[security]
# set cookie SameSite attribute. defaults to `lax`. can be set to "lax", "strict", "none" and "disabled"
cookie_samesite = strict
```

----------------------------------------

TITLE: Retrieving Snapshot by Key via Grafana HTTP API (HTTP)
DESCRIPTION: Depicts the GET request structure for retrieving a single snapshot using its unique key in the Grafana API. Requires valid bearer token authentication. The request pattern is usable in automation and external integrations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
GET /api/snapshots/YYYYYYY HTTP/1.1\nAccept: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Defining Grafana Server Admin Role in Azure AD App Manifest (JSON)
DESCRIPTION: This JSON snippet illustrates how to define a specific application role named 'GrafanaAdmin' within the Azure AD application manifest. When a user assigned this role logs into Grafana via Azure AD OAuth, and if Grafana's `allow_assign_grafana_admin` setting is enabled, the user will be granted Grafana server administrator privileges. The `SOME_UNIQUE_ID` placeholder must be replaced with a generated UUID.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
  \"allowedMemberTypes\": [\"User\"],
  \"description\": \"Grafana server admin Users\",
  \"displayName\": \"Grafana Server Admin\",
  \"id\": \"SOME_UNIQUE_ID\",
  \"isEnabled\": true,
  \"lang\": null,
  \"origin\": \"Application\",
  \"value\": \"GrafanaAdmin\"
}
```

----------------------------------------

TITLE: Editing Grafana systemd Service Unit (Bash)
DESCRIPTION: This command uses `systemctl edit` to open or create a systemd override file for the `grafana-server.service` in the default editor. This allows customization of the service unit without modifying the original. Requires `sudo` privileges. An alternative is manually creating a file at `/etc/systemd/system/grafana-server.service.d/override.conf`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/systemd/bind-net-capabilities.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
# Alternatively, create a file in /etc/systemd/system/grafana-server.service.d/override.conf
sudo systemctl edit grafana-server.service
```

----------------------------------------

TITLE: Listing Grafana CLI Commands and Options (Bash)
DESCRIPTION: Displays the help message for the Grafana CLI, listing all available commands, global options, and potentially default path information. This is used to get an overview of the CLI's capabilities.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
grafana cli -h
```

----------------------------------------

TITLE: Importing Loki Alert Rules with Coretextool - Bash
DESCRIPTION: A coretextool command-line example to list (and by implication, manage) alert rules targeting Loki as the backend. Set CORTEX_ADDRESS, CORTEX_AUTH_TOKEN, and CORTEX_TENANT_ID environment variables to point to your Grafana endpoint and provide your service account credentials. The --backend=loki argument specifies that the operation should use Loki for alert rule management. This command depends on coretextool >= 0.11.3.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/alerting-migration/migration-api.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
CORTEX_ADDRESS=<grafana url>/api/convert/ CORTEX_AUTH_TOKEN=<your token> CORTEX_TENANT_ID=1 cortextool rules --backend=loki list
```

----------------------------------------

TITLE: Listing Organizations for Actual User via Grafana API (HTTP)
DESCRIPTION: Retrieves a list of organizations the currently authenticated user belongs to via a GET request to `/api/user/orgs`. Requires Basic Authentication. The response is a JSON array of organization objects, each containing `orgId`, `name`, and the user's `role` within that organization.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_19

LANGUAGE: http
CODE:
```
GET /api/user/orgs HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Basic YWRtaW46YWRtaW4=
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

[
  {
    "orgId":1,
    "name":"Main Org.",
    "role":"Admin"
  }
]
```

----------------------------------------

TITLE: Managing Receiver Permissions in Grafana RBAC
DESCRIPTION: Specifies the RBAC permission required to manage (create, update, delete) permissions for contact points (receivers) in Grafana. This action is typically associated with broader `receivers:*` or specific `receivers:uid:*` scopes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
`receivers.permissions:write`
```

----------------------------------------

TITLE: Defining API Key Scopes in Grafana RBAC
DESCRIPTION: Specifies scopes to restrict actions to a set of API keys. `apikeys:*` matches any API key, whereas `apikeys:id:1` targets the specific API key with ID 1.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_28

LANGUAGE: text
CODE:
```
apikeys:*
```

LANGUAGE: text
CODE:
```
apikeys:id:*
```

----------------------------------------

TITLE: Retrieving All Users in Current Organization via REST API - HTTP
DESCRIPTION: This HTTP request fetches all users in the current organization through the /api/org/users endpoint, authenticated with a Bearer token. It should be used by users with org admin role. It expects and returns application/json format.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
GET /api/org/users HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Moving Grafana Binary to Install Location - Shell
DESCRIPTION: Moves downloaded and unpacked Grafana binaries from a download path to '/usr/local/grafana'. Placeholders (<DOWNLOAD PATH>) must be replaced by actual file/directory path. Requires sudo, mv executable. No outputs except relocated files.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_6

LANGUAGE: shell
CODE:
```
sudo mv <DOWNLOAD PATH> /usr/local/grafana
```

----------------------------------------

TITLE: Querying RBAC Status in Grafana API
DESCRIPTION: Makes a GET request to check if role-based access control is enabled. Requires the 'status:accesscontrol' action on 'services:accesscontrol' scope.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/access-control/status
Accept: application/json
Content-Type: application/json
```

----------------------------------------

TITLE: Migrating All API Keys to Service Accounts - Grafana HTTP API - HTTP
DESCRIPTION: This example demonstrates the migration of all existing API keys to service accounts by issuing a POST request to the dedicate endpoint. Proper authentication headers are needed. The simple JSON response confirms the migration was completed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_5

LANGUAGE: http
CODE:
```
POST /api/serviceaccounts/migrate HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{\n\t"message": "API keys migrated to service accounts"\n}
```

----------------------------------------

TITLE: Defining Time Shift Overrides in Grafana Query Options
DESCRIPTION: Provides examples of string values for the 'Time shift' query option in Grafana panels. These strings shift the panel's time range relative to the dashboard's time picker, allowing comparisons with past data like 'last entire week' or 'two entire weeks ago'. The `/w`, `/M`, `/y` specifiers align the shift to the start of the week, month, or year, respectively. This feature only functions when the dashboard's time range is relative.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/_index.md#2025-04-23_snippet_4

LANGUAGE: markdown
CODE:
```
| Example              | Time shift field |
| -------------------- | ---------------- |
| Last entire week     | `1w/w`           |
| Two entire weeks ago | `2w/w`           |
| Last entire month    | `1M/M`           |
| This entire year     | `1d/y`           |
| Last entire year     | `1y/y`           |
```

----------------------------------------

TITLE: Creating and Configuring LDAP User in FreeIPA
DESCRIPTION: Commands to create a new LDAP user, set their password, and configure their LDAP password for Grafana authentication. This creates a user named 'ldap-viewer' with password 'grafana123'.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/freeipa/notes.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
ipa user-add ldap-viewer --first ldap --last viewer
ipa passwd ldap-viewer
ldappasswd -D uid=ldap-viewer,cn=users,cn=accounts,dc=example,dc=org -w test -a test -s grafana123
```

----------------------------------------

TITLE: Serving API Documentation Locally with Make
DESCRIPTION: This command uses Make to regenerate the Swagger document and then hosts the rendered documentation locally. The API documentation becomes accessible via a web browser at http://localhost on port 80.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/ngalert/api/tooling/README.md#2025-04-23_snippet_1

LANGUAGE: make
CODE:
```
make serve
```

----------------------------------------

TITLE: Displaying Sample Data Table in PostgreSQL
DESCRIPTION: Shows a sample data table structure with time, value, creation timestamp, and hostname columns. This table is used as a reference for the query examples in the document.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_3

LANGUAGE: text
CODE:
```
+---------------------+--------------+---------------------+----------+
| time_date_time      | value_double | CreatedAt           | hostname |
+---------------------+--------------+---------------------+----------+
| 2020-01-02 03:05:00 | 3.0          | 2020-01-02 03:05:00 | 10.0.1.1 |
| 2020-01-02 03:06:00 | 4.0          | 2020-01-02 03:06:00 | 10.0.1.2 |
| 2020-01-02 03:10:00 | 6.0          | 2020-01-02 03:10:00 | 10.0.1.1 |
| 2020-01-02 03:11:00 | 7.0          | 2020-01-02 03:11:00 | 10.0.1.2 |
| 2020-01-02 03:20:00 | 5.0          | 2020-01-02 03:20:00 | 10.0.1.2 |
+---------------------+--------------+---------------------+----------+
```

----------------------------------------

TITLE: Enabling Detailed Timing Metrics - Bash
DESCRIPTION: Sets RENDERING_TIMING_METRICS environment variable to enable detailed stepwise rendering duration metrics in Grafana's remote rendering. Requires at least v3.9.0+. Used alongside Prometheus metrics for deeper performance visibility. No required parameters other than 'true'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_21

LANGUAGE: bash
CODE:
```
# Available from v3.9.0+
RENDERING_TIMING_METRICS=true
```

----------------------------------------

TITLE: Accessing Index and Value with 'range' in Go Templates
DESCRIPTION: Demonstrates how to retrieve both the index (`$index`) and the value (`$item`) while iterating over a collection (`$array`) using the `range` statement. It also shows pre-calculating the total number of items using `len` for context within the loop.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_4

LANGUAGE: go
CODE:
```
{{ $num_items := len $array }}
{{ range $index, $item := $array }}
This is item {{ $index }} out of {{ $num_items }}
{{ end }}
```

----------------------------------------

TITLE: Configuring Grafana Database Connection via grafana.ini
DESCRIPTION: Configures the database connection for Grafana High Availability by editing the `grafana.ini` file, typically managed via a Kubernetes ConfigMap (`kubectl edit configmap grafana`). Replace the bracketed placeholders with your actual database connection details (type, host/port, name, user, password). This is necessary for persistent storage in an HA setup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-eks/index.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[database]
type = [database type]
host = [database address and port]
name = [database name]
user = [database username]
password = [database password]
```

----------------------------------------

TITLE: Enabling Unified Storage Search - INI
DESCRIPTION: This INI configuration enables search UI and backend for Unified Storage in Grafana and associated toggles for dashboard folder search and permission filtering. Options for enterprise features such as usage insights sorting are also shown. Proper placement within the [feature_toggles] section is required.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_22

LANGUAGE: ini
CODE:
```
[feature_toggles]\n; Used by the Grafana instance\nunifiedStorageSearchUI = true\nkubernetesClientDashboardsFolders = true\n\n; Used by unified storage\nunifiedStorageSearch = true\n; (optional) Allows you to sort dashboards by usage insights fields when using enterprise\n; unifiedStorageSearchSprinkles = true\n; (optional) Will skip search results filter based on user permissions\n; unifiedStorageSearchPermissionFiltering = false
```

----------------------------------------

TITLE: Installing Grafana OSS via DNF in Bash
DESCRIPTION: Installs the Grafana Open Source (OSS) edition using the `dnf` package manager. This command requires `sudo` privileges and assumes the Grafana repository has been previously configured (e.g., via the `grafana.repo` file).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
sudo dnf install grafana
```

----------------------------------------

TITLE: Source Correlations Retrieval Response in Grafana HTTP API
DESCRIPTION: HTTP response containing an array of all correlations originating from a specific data source. Each correlation in the array includes complete details of the relationship.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_9

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
[
  {
    "description": "Logs to Traces",
    "label": "My Label",
    "sourceUID": "uyBf2637k",
    "targetUID": "PDDA8E780A17E7EF1",
    "uid": "J6gn7d31L",
    "provisioned": false,
    "type": "query",
    "config": {
      "field": "message",
      "target": {},
    }
  },
  {
    "description": "Logs to Metrics",
    "label": "Another Label",
    "sourceUID": "uyBf2637k",
    "targetUID": "P15396BDD62B2BE29",
    "uid": "uWCpURgVk",
    "provisioned": false,
    "type": "query",
    "config": {
      "field": "message",
      "target": {},
    }
  }
]
```

----------------------------------------

TITLE: Configuring Grafana Role Mapping from a Simple Attribute (Bash/INI)
DESCRIPTION: Grafana configuration snippet setting the `role_attribute_path` to directly use the value of the 'role' field from the OAuth2 payload for determining the user's Grafana role. This corresponds to the simple JSON payload example.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
role_attribute_path = role
```

----------------------------------------

TITLE: Configuring MQTT Contact Point - YAML
DESCRIPTION: Sets up MQTT integration for Grafana alerts, specifying broker URL, topic, clientId, authentication parameters, message format, and optional TLS configuration. Credentials, topic, and QoS/retain parameters can be adjusted for tailored delivery. Input fields require valid MQTT connection parameters. TLS settings allow for secure connections using PEM-formatted certificates and keys.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_11

LANGUAGE: yaml
CODE:
```
type: mqtt\nsettings:\n  # <string, required>\n  brokerUrl: tcp://127.0.0.1:1883\n  # <string>\n  clientId: grafana\n  # <string, required>\n  topic: grafana/alerts\n  # <string>\n  messageFormat: json\n  # <string>\n  username: grafana\n  # <string>\n  password: password1\n  # <string>\n  qos: 0\n  # <bool>\n  retain: false\n  # <map>\n  tlsConfig:\n    # <bool>\n    insecureSkipVerify: false\n    # <string>\n    clientCertificate: certificate in PEM format\n    # <string>\n    clientKey: key in PEM format\n    # <string>\n    caCertificate: CA certificate in PEM format\n
```

----------------------------------------

TITLE: Deleting Correlations in Grafana HTTP API
DESCRIPTION: HTTP request for deleting a specific correlation identified by both the source data source UID and the correlation UID. This permanently removes the correlation relationship.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
DELETE /api/datasources/uid/uyBf2637k/correlations/J6gn7d31L HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Trace to Metrics Query Interpolation Example (Markdown)
DESCRIPTION: Shows how to use the $__tags keyword for interpolating tags in metrics queries, with an example of how the query is transformed using configured tag mappings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/jaeger/_index.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
For example, when you configure the query `requests_total{$__tags}`with the tags `k8s.pod=pod` and `cluster`, the result looks like `requests_total{pod="nginx-554b9", cluster="us-east-1"}`.
```

----------------------------------------

TITLE: Checking if Prometheus Process is Running (macOS)
DESCRIPTION: This command uses 'pgrep' on macOS to search for running processes named 'prometheus'. If the Prometheus process is running, it will output its process ID (PID); otherwise, it will produce no output.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
pgrep prometheus
```

----------------------------------------

TITLE: Defining Span Filters Options Table in Markdown
DESCRIPTION: This snippet presents a markdown table that defines various span filter options available in Grafana's trace visualization. It includes options for initial filter state, service and span name filtering, duration thresholds, and tag-based filtering.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/traces/index.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
| Option | Description |
| ------ | ----------- |
| Find in trace | Set the initial value to focus on spans relevant to your query. |
| Show matches only | Toggle the switch on to display only spans that match the defined filter criteria. This helps simplify trace interpretation. |
| Show critical path only | Toggle the switch on to highlight only the spans in the critical path, which helps identify performance bottlenecks and their impact on overall latency. |
| Service name | Along with the **Service name operator**, define a specific service or pattern to narrow analysis to spans related to particular services. |
| Span name | Along with the **Span name operator**, filter spans by name or pattern to focus on specific span types or processes. |
| Min duration | Set the minimum duration threshold to exclude spans outside the desired time range. |
| Max duration | Set the maximum duration threshold to exclude spans outside the desired time range. |
| Tags | Add one or more tags to further refine the filtering criteria so only relevant spans are displayed. |
```

----------------------------------------

TITLE: Sending Test Email with Report in Grafana API (HTTP)
DESCRIPTION: This HTTP request demonstrates how to send a test email with a report using the Grafana Reporting API. It includes a JSON body with report configuration details such as recipients, schedule, dashboard, and export formats.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_11

LANGUAGE: http
CODE:
```
POST /api/reports/test-email HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{{
	"name": "Report 4",
	"recipients": "example-report@grafana.com",
	"replyTo": "",
	"message": "Hello, please, find the report attached",
	"schedule": {
		"startDate": "2022-10-02T10:00:00+02:00",
		"endDate": "2022-11-02T20:00:00+02:00",
		"frequency": "daily",
		"intervalFrequency": "",
		"intervalAmount": 0,
		"workdaysOnly": true,
		"timeZone": "Europe/Warsaw"
	},
	"options": {
		"orientation": "landscape",
		"layout": "grid"
	},
	"enableDashboardUrl": true,
	"dashboards": [
		{
			"dashboard": {
				"uid": "7MeksYbmk",
			},
			"timeRange": {
				"from": "2022-08-08T15:00:00+02:00",
				"to": "2022-09-02T17:00:00+02:00"
			},
			"reportVariables": {
				"variable1": "Value1"
			}
		}
	],
	"formats": [
		"pdf",
		"csv"
	]
}
```

----------------------------------------

TITLE: SQL Query for Grafana Annotations with Epoch Time
DESCRIPTION: This query retrieves data for Grafana annotations using a time column with epoch values. It selects time, description as text, and tags from an events table.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_7

LANGUAGE: sql
CODE:
```
SELECT
  time_sec as time,
  description as [text],
  tags
FROM
  [events]
WHERE
  $__unixEpochFilter(time_sec)
ORDER BY 1
```

----------------------------------------

TITLE: Variable Interpolation using Object Child Syntax with Trans in JSX
DESCRIPTION: Demonstrates the syntax for interpolating variables within the `<Trans>` component by including them as object children (e.g., `{{ name: user.name }}` or `{{ userName }}`). Requires `Trans` import from `app/core/internationalization`. Variables must be strings or support `.toString()`.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_8

LANGUAGE: jsx
CODE:
```
import { Trans } from 'app/core/internationalization';

<Trans i18nKey="page.greeting">Hello {{ name: user.name }}!</Trans>;

const userName = user.name;
<Trans i18nKey="page.greeting">Hello {{ userName }}!</Trans>;
```

----------------------------------------

TITLE: Detecting Loki Parser and Log Stream Label Keys with datasource.languageProvider - TypeScript
DESCRIPTION: Exemplifies fetching parsing capability and label keys for a given Loki stream via getParserAndLabelKeys. Returns an object describing extracted label keys, available parsing strategies (JSON, Logfmt, Pack), and unwrapping options based on sampled log lines. Offers precise control over sampling via maxLines and time range, aids in tailoring UI/log explorer features, and expects error handling for failed sampling operations.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/loki/docs/app_plugin_developer_documentation.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
/**
 * Get parser and label keys for a selector
 *
 * This asynchronous function is used to fetch parsers and label keys for a selected log stream based on sampled lines.
 * It returns a promise that resolves to an object with the following properties:
 *
 * - `extractedLabelKeys`: An array of available label keys associated with the log stream.
 * - `hasJSON`: A boolean indicating whether JSON parsing is available for the stream.
 * - `hasLogfmt`: A boolean indicating whether Logfmt parsing is available for the stream.
 * - `hasPack`: A boolean indicating whether Pack parsing is available for the stream.
 * - `unwrapLabelKeys`: An array of label keys that can be used for unwrapping log data.
 *
 * @param streamSelector - The selector for the log stream you want to analyze.
 * @param options - (Optional) An object containing additional options.
 * @param options.maxLines - (Optional) The number of log lines requested when determining parsers and label keys.
 * @param options.timeRange - (Optional) The time range for which you want to retrieve label keys. If not provided, the default time range is used.
 * Smaller maxLines is recommended for improved query performance. The default count is 10.
 * @returns A promise containing an object with parser and label key information.
 * @throws An error if the fetch operation fails.
 */
async function getParserAndLabelKeys(
  streamSelector: string,
  options?: { maxLines?: number; timeRange?: TimeRange }
): Promise<{
  extractedLabelKeys: string[];
  hasJSON: boolean;
  hasLogfmt: boolean;
  hasPack: boolean;
  unwrapLabelKeys: string[];
}>;

/**
 * Example usage:
 */
const streamSelector = '{job="grafana"}';
try {
  const parserAndLabelKeys = await getParserAndLabelKeys(streamSelector, { maxLines: 5 });
  console.log(parserAndLabelKeys);
} catch (error) {
  console.error(`Error fetching parser and label keys: ${error.message}`);
}

```

----------------------------------------

TITLE: Configuring CartoDB as Default Baselayer in Grafana via Provisioning (INI)
DESCRIPTION: Example configuration for setting CartoDB as the default base map in Grafana using the provisioning system. This configuration sets the theme to auto and enables country labels on the map.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/geomap/index.md#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
geomap_default_baselayer = `{
  "type": "carto",
  "config": {
    "theme": "auto",
    "showLabels": true
  }
}`
```

----------------------------------------

TITLE: Creating SQL Query with Metric Column for Grafana Time Series
DESCRIPTION: This SQL query demonstrates how to use the 'metric' column for backward compatibility in Grafana. It groups time data, calculates the minimum value, and uses 'min' as the metric name.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_4

LANGUAGE: sql
CODE:
```
SELECT
  $__timeGroupAlias(time_date_time, '5m'),
  min("value_double"),
  'min' as metric
FROM test_data
WHERE $__timeFilter(time_date_time)
GROUP BY time
ORDER BY 1
```

----------------------------------------

TITLE: Marking Strings as HTML-safe in Go Templates - Go Template
DESCRIPTION: Shows how to use {{ safeHtml }} to output literal HTML from templates, bypassing the usual auto-escaping behavior in Grafana's templating engine. Requires being sure the HTML is safe to avoid XSS. Input is an HTML string, output is raw HTML passed to the output stream.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_14

LANGUAGE: Go Template
CODE:
```
{{ safeHtml "<b>Text</b>"}}

```

----------------------------------------

TITLE: Structuring Explore Query URLs in Grafana (JSON)
DESCRIPTION: This snippet shows the structure of a URL used to open the Explore tool in Grafana with configured panes, schema version, and organization ID as URL query parameters. It provides an overview of the required parameters for building Explore links externally. The URL must substitute <grafana_url>, <panes>, <schema_version>, and <org_id> with actual values, and the 'panes' parameter is a URL-encoded JSON object matching the schema in the subsequent snippet.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/explore/get-started-with-explore.md#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
http://<grafana_url>/explore?panes=<panes>&schemaVersion=<schema_version>&orgId=<org_id>
```

----------------------------------------

TITLE: Building and Running Custom Grafana Docker Image with Plugins (Bash)
DESCRIPTION: Builds a custom Grafana Docker image tagged 'grafana-custom' using the Dockerfile in 'packaging/docker/custom'. It includes specified plugins like 'grafana-clock-panel' and 'grafana-simple-json-datasource' via build arguments. Subsequently, it runs a container from this custom image, mapping port 3000.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
# go to the custom directory
cd packaging/docker/custom

# running the build command
# include the plugins you want e.g. clock planel etc
docker build \
  --build-arg "GRAFANA_VERSION=latest" \
  --build-arg "GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource" \
  -t grafana-custom .

# running the custom Grafana container using the docker run command
docker run -d -p 3000:3000 --name=grafana grafana-custom
```

----------------------------------------

TITLE: Defining a Template with Nested Iteration and Execution in Go Templates
DESCRIPTION: Defines a template (`"print_alerts"`) that iterates over the data passed to it (`.`). Inside the loop, it executes another defined template (`"print_labels"`), passing a specific property (`.SortedLabels`) of the current item as the context.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_10

LANGUAGE: go
CODE:
```
{{ define "print_alerts" }}
{{ range . }}
{{ template "print_labels" .SortedLabels }}
{{ end }}
{{ end }}
```

----------------------------------------

TITLE: Defining Methods in TypeScript Classes
DESCRIPTION: Illustrates the proper way to name methods using camelCase in TypeScript classes.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
class DateCalculator {
  // bad
  CalculateTimeRange () {...}
}
class DateCalculator {
  // bad
  calculate_time_range () {...}
}

class DateCalculator {
  // good
  calculateTimeRange () {...}
}
```

----------------------------------------

TITLE: Listing Roles Assigned to a Service Account (HTTP GET)
DESCRIPTION: Sends a GET request to retrieve the list of roles directly assigned to a service account. It includes query parameters and required permissions for the operation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_25

LANGUAGE: http
CODE:
```
GET /api/access-control/users/1/roles
Accept: application/json
```

----------------------------------------

TITLE: Hiding the Sign-Out Menu via Grafana Configuration (Bash)
DESCRIPTION: Demonstrates how to hide the sign-out link from the Grafana user interface by setting `disable_signout_menu` to `true` under the `[auth]` section in the configuration file. This is typically used when authentication is managed externally, such as via an authentication proxy or JWT.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/_index.md#2025-04-23_snippet_5

LANGUAGE: Bash
CODE:
```
[auth]
disable_signout_menu = true
```

----------------------------------------

TITLE: Implementing Start method for Event in Go
DESCRIPTION: Adds a Start method to the Event struct that calls the Greeter's Greet method and prints the resulting message.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_5

LANGUAGE: go
CODE:
```
func (e Event) Start() {
    msg := e.Greeter.Greet()
    fmt.Println(msg)
}
```

----------------------------------------

TITLE: Cleaning Up RBAC Data Before Re-Upgrade in SQL
DESCRIPTION: This SQL script is intended to be run directly against the Grafana database before re-upgrading Grafana, specifically after a sequence of upgrading, downgrading, and disabling RBAC. It prevents potential permission loss by deleting managed roles, associated assignments (builtin, team, user), permissions, and specific migration log entries to ensure synchronization between legacy access control and RBAC systems upon re-upgrade.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v10.0/index.md#2025-04-23_snippet_0

LANGUAGE: sql
CODE:
```
DELETE
FROM builtin_role
where role_id IN (SELECT id
                  FROM role
                  WHERE name LIKE 'managed:%');

DELETE
FROM team_role
where role_id IN (SELECT id
                  FROM role
                  WHERE name LIKE 'managed:%');

DELETE
FROM user_role
where role_id IN (SELECT id
                  FROM role
                  WHERE name LIKE 'managed:%');

DELETE
FROM permission
where role_id IN (SELECT id
                  FROM role
                  WHERE name LIKE 'managed:%');

DELETE
FROM role
WHERE name LIKE 'managed:%';

DELETE
FROM migration_log
WHERE migration_id IN ('teams permissions migration',
                       'dashboard permissions',
                       'dashboard permissions uid scopes',
                       'data source permissions',
                       'data source uid permissions',
                       'managed permissions migration',
                       'managed folder permissions alert actions repeated migration',
                       'managed permissions migration enterprise');
```

----------------------------------------

TITLE: Templating Notification Summaries with Go Template Syntax in Grafana (Go template)
DESCRIPTION: This snippet demonstrates how to construct a summary annotation in a Grafana alert rule using Go template syntax. It leverages the built-in $labels and $values maps to dynamically pull the instance name and CPU usage for each alert, formatting them with tab and newline characters for readability. Dependencies include the Grafana alerting engine and the presence of specific label and value keys; inputs are provided automatically by Grafana's alert system, with output rendered as a formatted summary line for each alert instance. This approach is limited to the fields provided by the alerting engine and requires proper mapping in the alert rule configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt4/index.md#2025-04-23_snippet_4

LANGUAGE: Go template
CODE:
```
{{- "\n" -}}
Instance: {{ index $labels "instance" }}
{{- "\t" -}} Usage: {{ index $values "A"}}%{{- "\n" -}}
```

----------------------------------------

TITLE: Configuring Enterprise License Path in Grafana INI (Bash)
DESCRIPTION: Specifies the path to the Grafana Enterprise license JWT file directly in the Grafana INI configuration. Required for pointing Grafana to a license located outside the standard directory or when provisioning secrets. The license_path parameter must be an absolute path to a valid license.jwt token. No output is produced; Grafana loads this configuration at startup. Ensure file permissions allow Grafana to read this file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/_index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
[enterprise]\nlicense_path = /company/secrets/license.jwt
```

----------------------------------------

TITLE: Setting Custom Series Names with alias() in Graphite
DESCRIPTION: The `alias()` function assigns a specific, custom string name to a time series returned by a Graphite query. This is useful for creating shorter, more descriptive legend entries in Grafana graphs instead of relying on the full metric path.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/graphite/query_help.md#2025-04-23_snippet_0

LANGUAGE: Graphite Query Language
CODE:
```
alias()
```

----------------------------------------

TITLE: Listing Required Image Rendering Dependencies on CentOS 8 (Bash)
DESCRIPTION: Lists the package names required on a minimal CentOS 8 installation to enable Grafana's image rendering capabilities. These dependencies are crucial for the Chromium instance used by the plugin.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
libXcomposite libXdamage libXtst cups libXScrnSaver pango atk adwaita-cursor-theme adwaita-icon-theme at at-spi2-atk at-spi2-core cairo-gobject colord-libs dconf desktop-file-utils ed emacs-filesystem gdk-pixbuf2 glib-networking gnutls gsettings-desktop-schemas gtk-update-icon-cache gtk3 hicolor-icon-theme jasper-libs json-glib libappindicator-gtk3 libdbusmenu libdbusmenu-gtk3 libepoxy liberation-fonts liberation-narrow-fonts liberation-sans-fonts liberation-serif-fonts libgusb libindicator-gtk3 libmodman libproxy libsoup libwayland-cursor libwayland-egl libxkbcommon m4 mailx nettle patch psmisc redhat-lsb-core redhat-lsb-submod-security rest spax time trousers xdg-utils xkeyboard-config alsa-lib libX11-xcb
```

----------------------------------------

TITLE: Defining Legend Options Table in Markdown - Markdown
DESCRIPTION: This snippet is a Markdown-formatted table outlining the legend options available in Grafana's visualization settings. It lists variant configuration parameters (Visibility, Mode, Placement, Width, Values), their types, and descriptions for how they alter the legend display. No external dependencies are required beyond standard Markdown support. Inputs are configuration descriptions; the output is a styled table in rendered Markdown, and the snippet is limited to documentation rather than program logic.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/visualizations/legend-options-1.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
| Option     | Description                                                                                                                                                                                                |
| ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Visibility | Toggle the switch to turn the legend on or off.                                                                                                                                                            |
| Mode       | Use these settings to define how the legend appears in your visualization. **List** displays the legend as a list. This is a default display mode of the legend. **Table** displays the legend as a table. |
| Placement  | Choose where to display the legend. **Bottom** places the legend below the graph. **Right** places the legend to the right of the graph.                                                                   |
| Width      | Control how wide the legend is when placed on the right side of the visualization. This option is only displayed if you set the legend placement to **Right**.                                             |
| Values     | Choose which of the [standard calculations](../../query-transform-data/calculation-types/) to show in the legend. You can have more than one.                                                              |
```

----------------------------------------

TITLE: SQL Editor Props Interface
DESCRIPTION: Defines the properties interface for the SQLEditor component, including query string, onChange handler and optional language definition.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-sql/src/components/query-editor-raw/README.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
interface SQLEditorProps {
  query: string;
  onChange: (q: string) => void;
  language?: LanguageDefinition;
}
```

----------------------------------------

TITLE: Server-side Rendered Panel Image URL Example in Bash
DESCRIPTION: Example URL structure for accessing a server-side rendered PNG image of a Grafana panel. This URL includes parameters for time range, panel ID, dimensions, and timezone settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/share-dashboards-panels/_index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
https://play.grafana.org/render/d-solo/ktMs4D6Mk?from=2024-09-03T11:55:44.442Z&to=2024-09-03T17:55:44.442Z&panelId=panel-13&__feature.dashboardSceneSolo&width=1000&height=500&tz=UTC
```

----------------------------------------

TITLE: Basic SQL SELECT query for table visualization in Grafana
DESCRIPTION: A simple SQL query that selects all columns from the mssql_types table. This query can be used with Grafana's Table panel to display the full result set.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_2

LANGUAGE: sql
CODE:
```
SELECT * FROM [mssql_types]
```

----------------------------------------

TITLE: Defining grafana.plugin Attributes for OpenTelemetry
DESCRIPTION: Defines OpenTelemetry semantic convention attributes for Grafana plugins. It includes `grafana.plugin.id` (string, e.g., 'prometheus') and `grafana.plugin.type` (string, e.g., 'datasource'). Both attributes are recommended and stable.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/semconv/README.md#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
<!-- semconv trace.grafana.plugin -->
| Attribute  | Type | Description  | Examples  | [Requirement Level](https://opentelemetry.io/docs/specs/semconv/general/attribute-requirement-level/) | Stability |
|---|---|---|---|---|---|
| `grafana.plugin.id` | string | The plugin ID. | `prometheus`; `loki`; `grafana-github-datasource` | `Recommended` | ![Stable](https://img.shields.io/badge/-stable-lightgreen) |
| `grafana.plugin.type` | string | The plugin type. | `datasource` | `Recommended` | ![Stable](https://img.shields.io/badge/-stable-lightgreen) |
<!-- endsemconv -->
```

----------------------------------------

TITLE: Querying Time Series Data with Multiple Columns in PostgreSQL
DESCRIPTION: Illustrates a SQL query that groups time series data by 5-minute intervals and calculates both minimum and maximum values. This query shows how to include multiple aggregated columns in a single time series query.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_6

LANGUAGE: sql
CODE:
```
SELECT
  $__timeGroupAlias("time_date_time",'5m'),
  min("value_double") as "min_value",
  max("value_double") as "max_value"
FROM test_data
WHERE $__timeFilter("time_date_time")
GROUP BY time
ORDER BY time
```

----------------------------------------

TITLE: Importing MultiCombobox Story Documentation
DESCRIPTION: Import statements for Storybook documentation blocks and the MultiCombobox component.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Combobox/MultiCombobox.mdx#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { Meta, Preview, ArgTypes } from '@storybook/blocks';

import { MultiCombobox } from './MultiCombobox';
```

----------------------------------------

TITLE: Including Shared Data Link Options Documentation (Hugo Shortcode)
DESCRIPTION: Uses a Hugo shortcode (`docs/shared`) to include a common documentation part explaining how to configure data links within Grafana visualizations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_10

LANGUAGE: markdown
CODE:
```
{{< docs/shared lookup="visualizations/datalink-options-1.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Plugin Development Commands
DESCRIPTION: Commands for building and watching plugin development
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
yarn plugin:build:dev
yarn workspace <name_of_plugin> dev
```

----------------------------------------

TITLE: Revoking User Auth Token via Grafana Admin HTTP API - HTTP
DESCRIPTION: This snippet shows an HTTP POST request to revoke a particular auth token for a user by specifying the token ID in a JSON body. Requires authentication and appropriate write permission. The response returns a JSON message confirming the revocation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_14

LANGUAGE: http
CODE:
```
POST /api/admin/users/1/revoke-auth-token HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n  "authTokenId": 364\n}
```

LANGUAGE: json
CODE:
```
{\n  "message": "User auth token revoked"\n}
```

----------------------------------------

TITLE: Including Shared Configuration Options Introduction (Hugo Shortcode)
DESCRIPTION: Uses a Hugo shortcode (`docs/shared`) to include a common documentation snippet explaining introductory configuration options applicable to various Grafana visualizations. The `lookup`, `source`, and `version` parameters specify the exact content to be included.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_5

LANGUAGE: markdown
CODE:
```
{{< docs/shared lookup="visualizations/config-options-intro.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Defining Additional LogQL LBAC Rule for OR Logic
DESCRIPTION: Example LogQL query used as a potential second LBAC rule for a team. When combined with another rule like `{namespace=\"dev\"}` for the *same team*, the user gains access to data matching `{namespace=\"dev\"}` OR `{cluster=\"us-west-0\"}`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_3

LANGUAGE: logql
CODE:
```
{cluster="us-west-0"}
```

----------------------------------------

TITLE: Querying Grafana API with Basic Authentication
DESCRIPTION: This example demonstrates how to make an API call to Grafana's search endpoint using cURL with basic authentication. It uses the default admin credentials for a local Grafana installation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/curl-examples.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
curl http://admin:admin@localhost:3000/api/search
```

----------------------------------------

TITLE: Configuring Azure AD Application Manifest for Group Claims (JSON)
DESCRIPTION: This JSON snippet shows the required property for the Azure AD app manifest to ensure that groupMembershipClaims are included in tokens issued to Grafana. The property can be set to include ApplicationGroup and SecurityGroup claims. The manifest must be edited in the Azure portal.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_7

LANGUAGE: json
CODE:
```
"groupMembershipClaims": "ApplicationGroup, SecurityGroup"
```

----------------------------------------

TITLE: Removing Grafana Deployment and Associated Objects - kubectl Bash
DESCRIPTION: Deletes all objects defined in the 'grafana.yaml' manifest from the specified namespace, including deployments, PVCs, and services. Essential for cleanup or when removing Grafana from the cluster. Run this before deleting ConfigMaps or secrets.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_38

LANGUAGE: bash
CODE:
```
kubectl delete -f grafana.yaml --namespace=my-grafana

```

----------------------------------------

TITLE: Defining LogQL LBAC Rule with Multiple AND Conditions
DESCRIPTION: Example LogQL query used as an LBAC rule to filter logs. This rule matches log lines that contain *both* the label `namespace` with the value `dev` AND the label `cluster` with the value `us-west-0`. This demonstrates combining multiple label matchers with an implicit AND operator within a single rule.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_0

LANGUAGE: logql
CODE:
```
{namespace="dev", cluster="us-west-0"}
```

----------------------------------------

TITLE: Searching Playlists via Grafana HTTP API
DESCRIPTION: Sends a GET request to `/api/playlists` to retrieve a list of existing playlists for the current organization. Supports pagination and filtering via `query` and `limit` querystring parameters. Requires an `Authorization` header with a bearer token. Returns a JSON array of playlist objects.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/playlist.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/playlists HTTP/1.1
Accept: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
[
  {
    "uid": "1",
    "name": "my playlist",
    "interval": "5m"
  }
]
```

----------------------------------------

TITLE: HTTP 200 Success Response for Contact Points Retrieval (HTTP)
DESCRIPTION: This HTTP response example shows the result of successfully querying contact points. It uses HTTP 200 and returns a JSON array of contact point objects, each including fields for uid, name, type, user-configured settings, and flags. Clients can use this data to display or further manage notification contact points through the API.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "uid": "",
    "name": "email receiver",
    "type": "email",
    "settings": {
      "addresses": "<example@email.com>"
    },
    "disableResolveMessage": false
  }
]
```

----------------------------------------

TITLE: Server Response for Dashboard Tags Retrieval in HTTP/JSON
DESCRIPTION: Example of a successful response from the server after retrieving dashboard tags. The response contains an array of tag objects, each with a term (tag name) and count (number of dashboards using that tag).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_10

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

[
  {
    "term":"tag1",
    "count":1
  },
  {
    "term":"tag2",
    "count":4
  }
]
```

----------------------------------------

TITLE: Re-encrypting Data Keys using Grafana Admin API
DESCRIPTION: Triggers the re-encryption of data encryption keys (DEKs) via the Grafana Admin API endpoint `/encryption/reencrypt-data-keys`. This uses a specified key encryption key (KEK) and is useful for updating KEK versions or switching KEKs. It is recommended to perform this action during maintenance.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_7

LANGUAGE: plaintext
CODE:
```
/encryption/reencrypt-data-keys
```

----------------------------------------

TITLE: Filtering Azure Resources by Tag using Kusto Query Language
DESCRIPTION: This query filters Azure resources to return a list of resources with an 'environment' tag value of 'Internal'. It demonstrates case-insensitive filtering using '=~' and projection of specific properties.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/query-editor/index.md#2025-04-23_snippet_5

LANGUAGE: kusto
CODE:
```
Resources
| where tags.environment=~'internal'
| project name
```

----------------------------------------

TITLE: Successful Response for Creating a Shared Dashboard in Grafana
DESCRIPTION: This HTTP response shows the successful creation of a shared dashboard, returning the complete dashboard configuration including its UID, access token, creation details, and settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Content-Length: 78

{
    "uid": "cd56d9fd-f3d4-486d-afba-a21760e2acbe",
    "dashboardUid": "xCpsVuc4z",
    "accessToken": "5c948bf96e6a4b13bd91975f9a2028b7",
    "createdBy": 1,
    "updatedBy": 1,
    "createdAt": "2023-09-05T15:48:21-03:00",
    "updatedAt": "2023-09-05T15:48:21-03:00",
    "timeSelectionEnabled": false,
    "isEnabled": false,
    "annotationsEnabled": false,
    "share": "public"
}
```

----------------------------------------

TITLE: Updating Existing Alert Rule with HTTP PUT - HTTP
DESCRIPTION: This HTTP PUT request updates an alert rule identified by its UID in the request path. The request body must be a valid ProvisionedAlertRule object. If successful, the response is the updated resource with a 200 status code; on validation error, a 400 is returned. Header options and required path parameters are specified for proper resource targeting and provenance control.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_34

LANGUAGE: HTTP
CODE:
```
PUT /api/v1/provisioning/alert-rules/:uid
```

----------------------------------------

TITLE: Using the is_inf Function in Grafana Expressions
DESCRIPTION: Shows how to use the `is_inf` function to check if a value is positive or negative infinity. It returns 1 for Inf values and 0 otherwise, operating on numbers or series.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_6

LANGUAGE: Grafana Expressions
CODE:
```
is_inf($A)
```

----------------------------------------

TITLE: Example CSV Data for XY Chart X-Field Selection
DESCRIPTION: This snippet shows example tabular data, formatted like CSV content within a Markdown table, used to illustrate how the XY chart automatically selects the first numeric column ('a') as the default X-field when using 'Auto' series mapping. The columns 'b' and 'c' would then typically become Y-fields unless configured otherwise.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/xy-chart/index.md#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
| a   | b   | c   |
| --- | --- | --- |
| 0   | 0   | 0   |
| 1   | 1   | 9   |
| 2   | 2   | 4   |
```

----------------------------------------

TITLE: Sorting Labels in Graphite
DESCRIPTION: The sortByName() function ensures consistent ordering of labels by name across multiple graphs, which helps maintain visual consistency in dashboards.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/query-editor/index.md#2025-04-23_snippet_3

LANGUAGE: graphite
CODE:
```
sortByName()
```

----------------------------------------

TITLE: Listing Teams for a User via Grafana HTTP API (http)
DESCRIPTION: Shows the HTTP GET request for fetching all teams associated with a user. Requires both user and team read permissions, with example showing standard headers for an authenticated Grafana admin.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_12

LANGUAGE: http
CODE:
```
GET /api/users/1/teams HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=
```

----------------------------------------

TITLE: Enabling Profiling in Grafana (Bash)
DESCRIPTION: Command to start Grafana server with profiling enabled, specifying the address and port for pprof debugging endpoints.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
./grafana server -profile -profile-addr=0.0.0.0 -profile-port=8080
```

----------------------------------------

TITLE: Executing Defined Templates with 'template' in Go Templates
DESCRIPTION: Shows how to execute a previously defined template using the `template` keyword, followed by the name of the template in double quotes (`"print_labels"`) and the data context (`.`) to be passed to it.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_7

LANGUAGE: go
CODE:
```
{{ template "print_labels" . }}
```

----------------------------------------

TITLE: Deleting Reports via HTTP DELETE Request
DESCRIPTION: Example of deleting a specific report by ID using the DELETE endpoint.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_7

LANGUAGE: http
CODE:
```
GET /api/reports/6 HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Configuring Redis Engine for Grafana Live HA
DESCRIPTION: Configuration example for setting up Redis as the high availability engine for Grafana Live. Specifies the engine type and connection address.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-live.md#2025-04-23_snippet_4

LANGUAGE: yaml
CODE:
```
[live]
ha_engine = redis
ha_engine_address = 127.0.0.1:6379
```

----------------------------------------

TITLE: Executing Manual Grafana Package Release Steps
DESCRIPTION: A sequence of shell commands executed from the project root to manually clean, prepare (test, version bump), build, pack, and publish Grafana frontend packages to an npm registry. The `publish-npm-packages.sh` script handles the actual publishing, accepting parameters for distribution tags (`next`, `latest`, `test`) and the target registry URL. Publishing to a local registry involves setting `NPM_TOKEN=NONE`.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/README.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
yarn packages:clean
```

LANGUAGE: shell
CODE:
```
yarn packages:prepare
```

LANGUAGE: shell
CODE:
```
yarn packages:build
```

LANGUAGE: shell
CODE:
```
yarn packages:pack
```

LANGUAGE: shell
CODE:
```
./scripts/publish-npm-packages.sh --dist-tag 'next' --registry 'https://registry.npmjs.org/'
```

LANGUAGE: shell
CODE:
```
./scripts/publish-npm-packages.sh --dist-tag 'latest' --registry 'https://registry.npmjs.org/'
```

LANGUAGE: shell
CODE:
```
./scripts/publish-npm-packages.sh --dist-tag 'test' --registry 'https://registry.npmjs.org/'
```

LANGUAGE: shell
CODE:
```
NPM_TOKEN=NONE ./scripts/publish-npm-packages.sh
```

----------------------------------------

TITLE: Generating Explore Graph and Table Links in Grafana Templates - Go Template
DESCRIPTION: Shows how to use {{ graphLink }} and {{ tableLink }} to generate Explore panel links in annotation or label templates. Requires a JSON-encoded expression referencing Prometheus or other data source. Inputs are JSON strings specifying the expression and data source, outputs are absolute or relative paths to Grafana Explore pages. Ensure input format matches the schema expected by Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_11

LANGUAGE: Go Template
CODE:
```
{{ graphLink "{\"expr\": \"up\", \"datasource\": \"gdev-prometheus\"}" }}

```

LANGUAGE: Go Template
CODE:
```
{{ tableLink "{\"expr\": \"up\", \"datasource\": \"gdev-prometheus\"}" }}

```

----------------------------------------

TITLE: Enabling Prometheus Metrics - Bash
DESCRIPTION: Sets the ENABLE_METRICS environment variable to enable Prometheus metrics endpoint in Grafana. No external dependencies are required, but Grafana and its rendering service must support and read this variable. When set to 'true', the /metrics endpoint is exposed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_19

LANGUAGE: bash
CODE:
```
ENABLE_METRICS=true
```

----------------------------------------

TITLE: Templating Labels Based on Query Results with Go Templating Language - Go
DESCRIPTION: This snippet provides a Go template for dynamically assigning the 'env' label based on the value of $labels.instance in an alert. The template utilizes if-else statements to select between 'production', 'staging', and 'development' environments, allowing for more granular identification and grouping of alert instances. This should be used in the label definition of an alerting rule and requires the presence of $labels.instance in the template context.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/templates.md#2025-04-23_snippet_2

LANGUAGE: go
CODE:
```
{{- if eq $labels.instance "prod-server-1" -}}
production
{{- else if eq $labels.instance "staging-server-1" -}}
staging
{{- else -}}
development
{{- end -}}
```

----------------------------------------

TITLE: Examples of Relative Time Range Syntax in Grafana
DESCRIPTION: Demonstrates various syntaxes for defining relative time ranges in Grafana dashboards using 'now', time units (m, d, w, M, Y, fy), the minus operator for past ranges, and the '/' operator for snapping to the start/end of a period. These strings are used in the time picker or URL parameters to dynamically set the dashboard's time window relative to the current time.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/use-dashboards/index.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
now-5m    (From: now-5m, To: now)
```

LANGUAGE: plaintext
CODE:
```
now/d     (From: now/d, To: now)
```

LANGUAGE: plaintext
CODE:
```
now/w     (From: now/w, To: now/w)
```

LANGUAGE: plaintext
CODE:
```
now/w     (From: now/w, To: now)
```

LANGUAGE: plaintext
CODE:
```
now/M     (From: now/M, To: now/M)
```

LANGUAGE: plaintext
CODE:
```
now/M     (From: now/M, To: now)
```

LANGUAGE: plaintext
CODE:
```
now-1M/M  (From: now-1M/M, To: now-1M/M)
```

LANGUAGE: plaintext
CODE:
```
now/Y     (From: now/Y, To: now)
```

LANGUAGE: plaintext
CODE:
```
now/Y     (From: now/Y, To: now/Y)
```

LANGUAGE: plaintext
CODE:
```
now-1y/fy (From: now-1y/fy, To: now-1y/fy)
```

----------------------------------------

TITLE: Defining Sorted Key-Value Pair Formatting in Go Template
DESCRIPTION: Defines a helper template named '__default_sorted_pairs' used to format a collection of key-value pairs (like labels or annotations). It iterates over the '.SortedPairs' field of the input context (which should be a map or similar structure converted by Grafana) and prints each pair as ' - Name = Value'.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/ng_alert_notification.txt#2025-04-23_snippet_4

LANGUAGE: go-template
CODE:
```
[[- define "__default_sorted_pairs" -]]
[[ range .SortedPairs ]]
 - [[ .Name ]] = [[ .Value ]]
[[- end ]]
[[- end -]]
```

----------------------------------------

TITLE: Example Output of `docker secret ls` Command
DESCRIPTION: Provides sample output from the `docker secret ls` command, illustrating the format in which Docker displays the list of created secrets, including ID, Name, Driver, and timestamps.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_14

LANGUAGE: plaintext
CODE:
```
ID                          NAME           DRIVER    CREATED              UPDATED
i4g62kyuy80lnti5d05oqzgwh   aws_access_key_id             5 minutes ago        5 minutes ago
uegit5plcwodp57fxbqbnke7h   aws_secret_access_key         3 minutes ago        3 minutes ago
fxbqbnke7hplcwodp57fuegit   aws_region                    About a minute ago   About a minute ago
```

----------------------------------------

TITLE: Unstarring a Dashboard for Actual User via Grafana API (HTTP)
DESCRIPTION: Removes the star from a specific dashboard (identified by its unique identifier `:uid`) for the currently authenticated user using a DELETE request to `/api/user/stars/dashboard/uid/:uid`. Requires authentication (Bearer Token shown). Returns a JSON success message.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_22

LANGUAGE: http
CODE:
```
DELETE /api/user/stars/dashboard/uid/BqokFhx7z HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{"message":"Dashboard unstarred"}
```

----------------------------------------

TITLE: Getting Data Source Cache Configuration via Grafana HTTP API (HTTP)
DESCRIPTION: This snippet demonstrates how to retrieve the current cache configuration for a specific Grafana data source using a GET request to the `/api/datasources/:dataSourceUID/cache` endpoint. It requires the `datasources.caching:read` permission scoped to `datasources:*`. The example shows the request format and the expected JSON response containing the data source's cache settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_and_resource_caching.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
GET /api/datasources/jZrmlLCGka/cache HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
   "message": "Data source cache settings loaded",
   "dataSourceID": 1,
   "dataSourceUID": "jZrmlLCGka",
   "enabled": true,
   "useDefaultTTL": false,
   "ttlQueriesMs": 60000,
   "ttlResourcesMs": 300000,
   "defaultTTLMs": 300000,
   "created": "2023-04-21T11:49:22-04:00",
   "updated": "2023-04-24T17:03:40-04:00"
}
```

----------------------------------------

TITLE: Attaching and Verifying PGP Signatures for Plugin Manifests (PGP)
DESCRIPTION: This snippet shows a PGP signature block that is used to validate the integrity and authenticity of a Grafana plugin manifest. The signature is generated over the manifest content using OpenPGP, with comments indicating the generation tool and identification information. It is required to verify this signature against the manifest's hash before installing or executing the plugin to prevent tampering or unauthorized modifications.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/nested-plugins/parent/MANIFEST.txt#2025-04-23_snippet_1

LANGUAGE: pgp
CODE:
```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "plugin": "test-datasource",
  "version": "1.0.0",
  "time": 1661172777367,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "a029469ace740e9502bfb0d40924d1cccae73d0b18adcd8f1ceb7f17bf36beb8",
    "nested/plugin.json": "e64abd35cd211e0e4682974ad5cdd1be7a0b7cd24951d302a16d9e2cb6cefea4"
  }
}
-----BEGIN PGP SIGNATURE-----
Version: OpenPGP.js v4.10.10
Comment: https://openpgpjs.org

wrgEARMKAAYFAmMDfCkAIQkQfk0ManCIZucWIQTzOyW2kQdOhGNlcPN+TQxq
cIhm56w5AgkBeX3H13KSFfSs6i6aJLOIPyqYICT9EQWKxmZIz4vlgnOBOvdA
cf5jtG/CFYikBAHN6PAH6/Jir+4017w1JNHNtxICBj5xERqPkjb3GqT1sNb3
MJizG0LSveo6dRaap8uC4VPbubiUa7qGu6LTEi/8kpOemMNOLHBI+2/GlY3B
i8zqeBLU
=lRFr
-----END PGP SIGNATURE-----
```

----------------------------------------

TITLE: Creating htpasswd File for Apache Authentication
DESCRIPTION: Command to create an htpasswd file with a user 'anthony' and password 'password' for use with Apache's BasicAuth authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
htpasswd -bc htpasswd anthony password
```

----------------------------------------

TITLE: Setting Maximum Viewport Height - Bash
DESCRIPTION: Uses RENDERING_VIEWPORT_MAX_HEIGHT to set an upper limit (in pixels) for browser viewport height during rendering. Prevents resource depletion from excessively large renders. Requires v3.9.0+.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_45

LANGUAGE: bash
CODE:
```
# Available from v3.9.0+
RENDERING_VIEWPORT_MAX_HEIGHT=500
```

----------------------------------------

TITLE: Renewing Session with Login Ping Endpoint - Grafana HTTP API - HTTP
DESCRIPTION: This snippet sends a GET request to the /api/login/ping endpoint in Grafana to validate or renew a user's login session. An Authorization header with a valid Bearer token is necessary, and headers specifying Accept and Content-Type as application/json are required. This is useful for ensuring the current session is still active without requiring user credentials.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/other.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
GET /api/login/ping HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n
```

----------------------------------------

TITLE: Installing and Refreshing snapd Core on Debian (Bash)
DESCRIPTION: Uses `apt-get install` to install the `snapd` package and `snap install core; snap refresh core` to install/update the core snap environment on a Debian-based system. This is a prerequisite for installing `certbot` via snap. Requires `sudo` privileges.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
sudo apt-get install snapd
sudo snap install core; sudo snap refresh core
```

----------------------------------------

TITLE: Uninstalling Grafana Enterprise - Shell
DESCRIPTION: Removes the Grafana Enterprise package via zypper package manager on SUSE/openSUSE. Requires package installed, sudo access. No parameters. Output: grafana-enterprise package removed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_14

LANGUAGE: shell
CODE:
```
sudo zypper remove grafana-enterprise
```

----------------------------------------

TITLE: Basic Grafana Dashboard URL Example
DESCRIPTION: Illustrates a standard URL format for accessing a Grafana dashboard without any specific variable parameters. This serves as a baseline before demonstrating how to add context via URL variables.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/create-dashboard-url-variables/index.md#2025-04-23_snippet_0

LANGUAGE: uri
CODE:
```
https://${your-domain}/path/to/your/dashboard
```

----------------------------------------

TITLE: Replicating Grafana's Default Notification Title Template
DESCRIPTION: This template duplicates Grafana's default title/subject template for alert notifications, displaying alert status, counts, and group labels in a structured format.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_20

LANGUAGE: go
CODE:
```
{{ define "copy_of_default_title" -}}
[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ if gt (.Alerts.Resolved | len) 0 }}, RESOLVED:{{ .Alerts.Resolved | len }}{{ end }}{{ end }}] {{ .GroupLabels.SortedPairs.Values | join " " }} {{ if gt (len .CommonLabels) (len .GroupLabels) }}({{ with .CommonLabels.Remove .GroupLabels.Names }}{{ .Values | join " " }}{{ end }}){{ end }}
{{ end }}
```

----------------------------------------

TITLE: Embedding Image using Hugo Figure Shortcode (Yugabyte Query Editor)
DESCRIPTION: This Hugo shortcode embeds an image displaying the query editor for the new Yugabyte data source within Grafana's Explore view. It visually supports the announcement of the Yugabyte data source integration. The `src` parameter indicates the image file path.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-2.md#2025-04-23_snippet_4

LANGUAGE: hugo
CODE:
```
{{< figure src="/media/docs/yugabyte/yugabyte_explore_builder.png" alt="Yugabyte query editor" >}}
```

----------------------------------------

TITLE: Generating Issue List Summary with EJS Template - JavaScript
DESCRIPTION: This EJS code block iterates through each file in the 'files' array and generates a markdown task list, displaying the count of issues for each file. It relies on the existence of a 'files' array, where each object contains 'issueCount' and 'fileName', as well as a 'plural' helper function for proper pluralization. Inputs include the owner name, issue filters, and aggregated issue statistics, while the output is a markdown list for each file with unresolved issues. This snippet should be used in a Node.js environment with EJS installed. Limitation: requires all interpolated variables and helpers to be supplied in the EJS context.
SOURCE: https://github.com/grafana/grafana/blob/main/scripts/cli/bettererIssueTemplate.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
<% files.forEach((file) => { %>\n- [ ] <%= file.issueCount %> <%= plural('issue', file.issueCount) %> in `<%= file.fileName %>` <% }) %>
```

----------------------------------------

TITLE: Updating a Query Comment in Grafana Query History (HTTP Request)
DESCRIPTION: This snippet illustrates an example HTTP PATCH request to update the comment associated with a specific query history entry, identified by its UID. The new comment is provided in the JSON request body. Authentication is required.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
PATCH /api/query-history/P8zM2I1nz HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
{
  "comment": "Debugging query",
}
```

----------------------------------------

TITLE: Defining LogQL LBAC Rule for Specific Project ID (Task 6)
DESCRIPTION: Example LogQL query used as an LBAC rule for Team B in Task 6. This rule filters logs or metrics, granting access only to data points that have the label `project_id` with the value `project-dev`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_9

LANGUAGE: logql
CODE:
```
{ project_id="project-dev" }
```

----------------------------------------

TITLE: Updating Workspace
DESCRIPTION: Command to update the Go workspace after creating a new module.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/manage-go-module.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
make update-workspace
```

----------------------------------------

TITLE: Overriding Grafana Log Path with Command Line Argument
DESCRIPTION: Command demonstrating how to override the default log path in Grafana using command line arguments, specifying a custom configuration file, home path, and log directory.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
./grafana-server --config /custom/config.ini --homepath /custom/homepath cfg:default.paths.logs=/custom/path
```

----------------------------------------

TITLE: Example Response for Deleting Grafana Library Element (HTTP/JSON)
DESCRIPTION: This snippet illustrates a sample successful HTTP 200 response after deleting a Grafana library element. The JSON response body confirms the deletion with a message and includes the numeric ID of the deleted element.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_13

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
    "message": "Library element deleted",
    "id": 28
}
```

----------------------------------------

TITLE: Markdown Table Panel Options Documentation
DESCRIPTION: Detailed markdown table showing configuration options for table panels including header settings, pagination, column widths and alignments.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/table/index.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
| Option               | Description                                                                                                                                                                                                                                                                 |
| -------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Show table header    | Show or hide column names imported from your data source.                                                                                                                                                                                                                   |
| Cell height          | Set the height of the cell. Choose from **Small**, **Medium**, or **Large**.                                                                                                                                                                                                |
| Enable pagination    | Toggle the switch to control how many table rows are visible at once. When switched on, the page size automatically adjusts to the height of the table. This option doesn't affect queries.                                                                                 |
| Minimum column width | Define the lower limit of the column width, in pixels. By default, the minimum width of the table column is 150 pixels. For small-screen devices, such as mobile phones or tablets, reduce the value to `50` to allow table-based panels to render correctly in dashboards. |
| Column width         | Define a column width, in pixels, rather than allowing the width to be set automatically. By default, Grafana calculates the column width based on the table size and the minimum column width.                                                                             |
| Column alignment     | Set how Grafana should align cell contents. Choose from: **Auto** (default), **Left**, **Center**, or **Right**.                                                                                                                                                            |
| Column filter        | Temporarily change how column data is displayed. For example, show or hide specific values. For more information, refer to [Column filtering](#column-filtering).                                                                                                           |
```

----------------------------------------

TITLE: Executing Alert Additional Details Template in Grafana
DESCRIPTION: This snippet shows how to execute the template for displaying additional alert details by passing the context (dot) to the template.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_17

LANGUAGE: go
CODE:
```
{{ template "custom.alert_additional_details" . }}
```

----------------------------------------

TITLE: Rendering Hero Section using Hugo Shortcode
DESCRIPTION: This Hugo shortcode invokes the `docs/hero-simple` template to render a hero section. It utilizes data defined under the `hero` key in the page's frontmatter to populate the section's title, description, and dimensions. This approach separates content definition from presentation logic.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/_index.md#2025-04-23_snippet_0

LANGUAGE: hugo
CODE:
```
{{< docs/hero-simple key="hero" >}}
```

----------------------------------------

TITLE: Starting Grafana Stack with Docker Compose - Bash
DESCRIPTION: Runs Docker Compose in detached mode to start Grafana, Loki, and Promtail services using the previously downloaded YAML configuration. Requires Docker and Docker Compose (either as a standalone command or integrated into Docker CLI). The command initializes all services defined in docker-compose.yaml, making them available for further configuration. Key requirement: No other processes should be binding to required ports (see note in tutorial).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-with-logs/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
docker compose up -d
```

----------------------------------------

TITLE: Folder by UID API Response Example
DESCRIPTION: Example HTTP response for the GET /api/folders/:uid endpoint, returning detailed information about a specific folder including permissions, metadata, and creation information.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "id":1,
  "uid": "nErXDvCkzz",
  "title": "Department ABC",
  "url": "/dashboards/f/nErXDvCkzz/department-abc",
  "hasAcl": false,
  "canSave": true,
  "canEdit": true,
  "canAdmin": true,
  "createdBy": "admin",
  "created": "2018-01-31T17:43:12+01:00",
  "updatedBy": "admin",
  "updated": "2018-01-31T17:43:12+01:00",
  "version": 1
}
```

----------------------------------------

TITLE: Showing Result of 'Join by Labels' Transformation
DESCRIPTION: This Markdown table shows the output after applying the 'Join by labels' transformation to the input series (series1, series2, series3). The join is configured to use the 'what' label as the value field, combining the series into a wider table.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_30

LANGUAGE: markdown
CODE:
```
| cluster | job | Temp | Speed |
| ------- | --- | ---- | ----- |
| A       | J1  | 10   |       |
| A       | J1  | 200  |       |
| B       | J1  | 10   | 22    |
| B       | J1  | 200  | 77    |
```

----------------------------------------

TITLE: Creating Deprecation Notice in Markdown
DESCRIPTION: Template for documenting deprecation notices in pull request descriptions that need to be included in the changelog.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/merge-pull-request.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
# Deprecation notice

<Deprecation description>
```

----------------------------------------

TITLE: Verifying Maximum Files Limit on macOS (Bash)
DESCRIPTION: Executes the `sysctl kern.maxfiles` command on macOS to query and display the current value of the kernel's maximum allowed open files limit (`kern.maxfiles`). This is used to verify if changes made to this setting (e.g., increasing it to 524288) have been successfully applied.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_19

LANGUAGE: bash
CODE:
```
sysctl kern.maxfiles
```

----------------------------------------

TITLE: Retrieving Library Element by UID Response Example (HTTP/JSON)
DESCRIPTION: Example HTTP 200 OK response for the 'Get library element by UID' request. The JSON body contains the requested library element object, including its ID, UID, name, model, and metadata, nested within the `result` field.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
    "result": {
      "id": 25,
      "orgId": 1,
      "folderId": 0,
      "uid": "V--OrYHnz",
      "name": "API docs Example",
      "kind": 1,
      "type": "text",
      "description": "",
      "model": {...},
      "version": 1,
      "meta": {
          "folderName": "General",
          "folderUid": "",
          "connectedDashboards": 1,
          "created": "2021-09-27T09:56:17+02:00",
          "updated": "2021-09-27T09:56:17+02:00",
          "createdBy": {
              "id": 1,
              "name": "admin",
              "avatarUrl": "/avatar/46d229b033af06a191ff2267bca9ae56"
          },
          "updatedBy": {
              "id": 1,
              "name": "admin",
              "avatarUrl": "/avatar/46d229b033af06a191ff2267bca9ae56"
          }
      }
   }
}
```

----------------------------------------

TITLE: Embedding Image using Hugo Figure Shortcode (SAML Sign Requests)
DESCRIPTION: This Hugo shortcode embeds a screenshot illustrating the 'Sign requests' option within the SAML configuration form in Grafana 11.2. It highlights the UI change related to making private key and certificate fields optional when signed requests are disabled. The `src` parameter specifies the image location.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-2.md#2025-04-23_snippet_5

LANGUAGE: hugo
CODE:
```
{{< figure src="/media/docs/grafana/screenshot-grafana-11-2-saml-sign-requests.png" alt="Sign requests in SAML config form" >}}
```

----------------------------------------

TITLE: Setting a Single Dashboard Variable via URL Parameter
DESCRIPTION: Demonstrates how to set a dashboard variable named 'example' to the value 'value' by appending a query parameter prefixed with 'var-' to the dashboard URL. This allows pre-configuring dashboard state through the URL.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/create-dashboard-url-variables/index.md#2025-04-23_snippet_1

LANGUAGE: uri
CODE:
```
https://${your-domain}/path/to/your/dashboard?var-example=value
```

----------------------------------------

TITLE: Logging Out User (Revoke All Tokens) via Grafana Admin HTTP API - HTTP
DESCRIPTION: Makes an HTTP POST request to log out the user from all devices by revoking all associated auth tokens. No JSON body is required and a JSON message confirming successful logout is returned. Only users with proper logout permission can execute this request.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_15

LANGUAGE: http
CODE:
```
POST /api/admin/users/1/logout HTTP/1.1\nAccept: application/json\nContent-Type: application/json
```

LANGUAGE: json
CODE:
```
{\n  "message": "User auth token revoked"\n}
```

----------------------------------------

TITLE: Fixed Time Range in rate Function with PromQL
DESCRIPTION: Example of using a fixed time interval (5m) with the rate function to calculate the rate of change for HTTP requests.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/template-variables/index.md#2025-04-23_snippet_2

LANGUAGE: PromQL
CODE:
```
rate(http_requests_total[5m])
```

----------------------------------------

TITLE: Defining Custom String Type for MySQL Connection in Go
DESCRIPTION: Demonstrates how to create a custom string type for MySQL connection strings to avoid conflicts with other string providers.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/best-practices.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
type MySQLConnectionString string
```

----------------------------------------

TITLE: Starting the Grafana Stack with Alternative Docker Compose Syntax - Bash
DESCRIPTION: This Bash snippet provides an alternative, legacy-compatible syntax for starting Grafana, Loki, and Prometheus containers with Docker Compose in detached mode. It is meant for environments where the executable is 'docker-compose' rather than 'docker compose'. Dependencies include both Docker and the docker-compose CLI tool. The command will set up all declared services, running them in the background. Similar port conflicts and dependencies apply as with the modern syntax.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
docker-compose up -d

```

----------------------------------------

TITLE: Retrieving Team Preferences - HTTP
DESCRIPTION: Retrieves team UI/display preferences, such as theme and timezone, using an authenticated GET request specifying the team ID. The API key used here differs from previous examples.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_18

LANGUAGE: http
CODE:
```
GET /api/teams/2/preferences HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Replacing SystemJS Usage with Standard Imports in Grafana Plugins
DESCRIPTION: SystemJS is no longer exported from `@grafana/runtime`. Plugin developers must refactor their code to use standard ES module `import` syntax and manage dependencies via npm/yarn instead of relying on SystemJS for module loading.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v11-0.md#2025-04-23_snippet_7



----------------------------------------

TITLE: Restricting Azure AD OAuth to Specific Email Domains (INI)
DESCRIPTION: This configuration restricts Grafana Azure AD authentication to users from listed domains via the allowed_domains parameter. Domains must be separated by space or comma. Only users with emails in these domains are granted access.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_8

LANGUAGE: ini
CODE:
```
allowed_domains = mycompany.com mycompany.org
```

----------------------------------------

TITLE: Listing SSO Settings via HTTP API in HTTP
DESCRIPTION: Demonstrates how to list all configured SSO providers and their settings using a HTTP GET request to the /api/v1/sso-settings endpoint. Requires proper authentication (Bearer token) and the 'settings:read' permission with the appropriate scope. The response is a JSON array of SSO configurations with minimal provider-specific details. Useful for fetching a summary of all single sign-on providers managed by the API.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/sso-settings.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/v1/sso-settings HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n[\n  {\n    "id":        "1",\n    "provider":  "github",\n    "settings": {\n      "apiUrl": "https://api.github.com/user",\n      "clientId": "my_github_client",\n      "clientSecret": "*********",\n      "enabled": true,\n      "scopes": "user:email,read:org"\n      // rest of the settings\n    },\n    "source":    "system",\n  },\n  {\n    "id":        "2",\n    "provider":  "azuread",\n    "settings": {\n      "authUrl": "https://login.microsoftonline.com/00000000-0000-0000-0000-000000000000/oauth2/v2.0/authorize",\n      "clientId": "my_azuread_client",\n      "clientSecret": "*********",\n      "enabled": true,\n      "scopes": "openid,email,profile"\n      // rest of the settings\n    },\n    "source":    "system",\n  }\n]
```

----------------------------------------

TITLE: PostgreSQL Code Mode with Time Filter Example
DESCRIPTION: Example showing how to use the timeFilter macro with a date column in PostgreSQL queries. This is used for time-based filtering in Grafana dashboards.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_1

LANGUAGE: SQL
CODE:
```
$__timeFilter(date_column)
```

----------------------------------------

TITLE: Querying VM CPU Performance with KQL in Azure Monitor Logs
DESCRIPTION: This query retrieves a virtual machine's CPU performance data using the Perf table, filtered by the dashboard's time range using the $__timeFilter macro. Results are averaged over 5-minute time grains and ordered chronologically.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/query-editor/index.md#2025-04-23_snippet_0

LANGUAGE: kusto
CODE:
```
Perf
# $__timeFilter is a special Grafana macro that filters the results to the time span of the dashboard
| where $__timeFilter(TimeGenerated)
| where CounterName == "% Processor Time"
| summarize avg(CounterValue) by bin(TimeGenerated, 5m), Computer
| order by TimeGenerated asc
```

----------------------------------------

TITLE: Response for Dashboard Search with Specific Criteria in HTTP
DESCRIPTION: This HTTP response shows the format of the returned data when searching for dashboards with specific criteria. It includes detailed information about the matching dashboard, including folder information.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder_dashboard_search.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

[
  {
    "id":1,
    "uid": "cIBgcSjkk",
    "orgId": 1,
    "title":"Production Overview",
    "url": "/d/cIBgcSjkk/production-overview",
    "type":"dash-db",
    "tags":[prod],
    "isStarred":true,
    "folderId": 2,
    "folderUid": "000000163",
    "folderTitle": "Folder",
    "folderUrl": "/dashboards/f/000000163/folder",
    "uri":"db/production-overview" // deprecated in Grafana v5.0
  }
]
```

----------------------------------------

TITLE: Example HTTP Response for Deleting a Grafana Custom Role
DESCRIPTION: Provides an example of a successful HTTP 200 OK response after deleting a Grafana custom role using the DELETE `/api/access-control/roles/:uid` endpoint. The JSON body contains a simple confirmation message: 'Role deleted'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_12

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8

{
    "message": "Role deleted"
}
```

----------------------------------------

TITLE: Example HTTP Response for Successful Grafana Report Creation
DESCRIPTION: Demonstrates a typical HTTP 200 OK response received after successfully creating a Grafana report via the API. The JSON body includes the unique ID (`id`) of the newly created report and a confirmation message.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_5

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 35

{
	"id": 4,
	"message": "Report created"
}
```

----------------------------------------

TITLE: Exporting All Mute Timings via Grafana Provisioning API (HTTP Request)
DESCRIPTION: Makes a GET request to `/api/v1/provisioning/mute-timings/export` to export all mute timings in a specified file format (YAML, JSON, or HCL). Optional query parameters 'download' (boolean) and 'format' (string, default 'yaml') control the download behavior and file type respectively. Expects a 200 OK response with the exported data or a 403 Forbidden if permissions are insufficient.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_24

LANGUAGE: http
CODE:
```
GET /api/v1/provisioning/mute-timings/export
```

----------------------------------------

TITLE: Fetching Data Source Resources by ID in HTTP
DESCRIPTION: Sends a GET request to fetch resources from a data source identified by ID. This endpoint is deprecated as of Grafana v9.0.0.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_17

LANGUAGE: http
CODE:
```
GET api/datasources/112/resources/dimension-keys?region=us-east-2&namespace=AWS%2FEC2&dimensionFilters=%7B%7D&metricName=CPUUtilization HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: GenericPublicError Data Structure Definition - Go
DESCRIPTION: Comprehensive error structure for public API errors. Includes HTTP status code, message ID for error tracking, optional message text, and additional error-specific data in the extra field.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_52

LANGUAGE: go
CODE:
```
type GenericPublicError struct {
    StatusCode string         `json:"statusCode" binding:"required"`
    MessageId  string         `json:"messageId" binding:"required"`
    Message    string         `json:"message"`
    Extra      map[string]any `json:"extra"`
}
```

----------------------------------------

TITLE: Defining GET Endpoint for Exporting All Contact Points - HTTP
DESCRIPTION: Defines an HTTP GET endpoint for exporting all contact points in provisioning file formats (yaml, json, hcl), supporting optional decryption of secure values if privileges permit. Query parameters include 'decrypt', 'download', 'format', and 'name'. Responses include 200 OK for successful exports or 403 Forbidden when permission is denied.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_21

LANGUAGE: http
CODE:
```
GET /api/v1/provisioning/contact-points/export
```

----------------------------------------

TITLE: Example Output Data Frame for Concatenate Fields Transformation
DESCRIPTION: This table shows the resulting data frame after applying the 'Concatenate fields' transformation to Query A and Query B, combining all fields into a single view.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_3

LANGUAGE: text
CODE:
```
| Temp | Uptime  | AQI | Errors |
| ---- | ------- | --- | ------ |
| 15.4 | 1230233 | 3.2 | 5      |
```

----------------------------------------

TITLE: Query Formatting for MySQL Tables with Special Characters
DESCRIPTION: Example showing how table names containing prohibited characters or reserved words are automatically quoted with backticks in MySQL queries.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_0

LANGUAGE: SQL
CODE:
```
`table-name`
```

----------------------------------------

TITLE: Executing a Notification Template - Go Templating - Go
DESCRIPTION: This snippet demonstrates how to execute a previously defined Go template ('custom_template') by passing the notification context as dot (.). It applies the template to render notification contents using Grafana's alerting data. Dependencies include a valid Go template definition named 'custom_template' and a dot object matching Grafana's notification schema. The output is the notification message generated by the template.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
```go
{{ template "custom_template" . }}
```
```

----------------------------------------

TITLE: Verifying Persistent Volume Claim Status using Bash
DESCRIPTION: Checks the status of the PersistentVolumeClaim (PVC) named `grafana-pvc` within the 'my-grafana' namespace using `kubectl get`. The `-o wide` flag provides additional details, such as the actual volume bound and capacity. This verifies if the storage requested in the manifest has been successfully provisioned and bound. Requires `kubectl` installed and configured.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
kubectl get pvc --namespace=my-grafana -o wide
```

----------------------------------------

TITLE: Controlling Data Point Consolidation with consolidateBy() in Graphite
DESCRIPTION: The `consolidateBy()` Graphite function specifies the aggregation method (e.g., 'sum', 'average', 'max', 'min') used when Graphite needs to reduce the number of data points returned to match the `maxDataPoints` requested by Grafana. This overrides the default 'average' consolidation and can be crucial for preserving peaks or understanding totals correctly.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/graphite/query_help.md#2025-04-23_snippet_6

LANGUAGE: Graphite Query Language
CODE:
```
consolidateBy
```

----------------------------------------

TITLE: Enabling Current User Authentication in Grafana Configuration
DESCRIPTION: This code snippet shows how to enable Current User authentication for Azure in the Grafana server configuration file. It sets the 'user_identity_enabled' flag to true in the [azure] section.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_8

LANGUAGE: ini
CODE:
```
[azure]
user_identity_enabled = true
```

----------------------------------------

TITLE: Deleting a Notification Template Group via Grafana Provisioning API (HTTP)
DESCRIPTION: Defines the `DELETE` request endpoint `/api/v1/provisioning/templates/:name` to remove a specific Grafana notification template group. The `name` path parameter identifies the template group. An optional `version` query parameter enables optimistic concurrency validation. Successful deletion returns a 204 No Content status, while a conflict results in a 409 Conflict status.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_13

LANGUAGE: plaintext
CODE:
```
DELETE /api/v1/provisioning/templates/:name
```

----------------------------------------

TITLE: Setting Prometheus Directory Permissions (Linux/macOS)
DESCRIPTION: This command uses 'sudo' and 'chown' to recursively change the ownership of the Prometheus configuration ('/etc/prometheus') and data ('/var/lib/prometheus') directories to the 'prometheus' user and group. This is often required when running Prometheus as a dedicated user.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
sudo chown -R prometheus:prometheus /etc/prometheus /var/lib/prometheus
```

----------------------------------------

TITLE: Defining Dashboard Scopes in Grafana RBAC
DESCRIPTION: Specifies scopes to restrict actions to a set of dashboards. `dashboards:*` matches any dashboard, while `dashboards:uid:1` targets the specific dashboard with UID 1.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_29

LANGUAGE: text
CODE:
```
dashboards:*
```

LANGUAGE: text
CODE:
```
dashboards:uid:*
```

----------------------------------------

TITLE: Setting Default Browser Language - Bash
DESCRIPTION: Sets RENDERING_LANGUAGE to define Accept-Language for the headless browser, affecting the language of rendered content. The value should follow HTTP Accept-Language syntax. Requires at least v3.9.0+ of the renderer.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_37

LANGUAGE: bash
CODE:
```
# Available from v3.9.0+
RENDERING_LANGUAGE="fr-CH, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5"
```

----------------------------------------

TITLE: Complete SAML Settings Update Payload for Grafana Admin API
DESCRIPTION: Complete JSON payload example combining both updates and removals of SAML settings. This demonstrates how to simultaneously enable SAML, disable single logout, and remove the allow_idp_initiated setting.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/settings-updates-at-runtime/index.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
{
  "updates": {
    "auth.saml": {
      "enabled": "true",
      "single_logout": "false"
    }
  },
  "removals": {
    "auth.saml": ["allow_idp_initiated"]
  }
}
```

----------------------------------------

TITLE: Setting Notification Policy Tree - Grafana REST HTTP Endpoint - http
DESCRIPTION: Specifies the HTTP PUT endpoint used to set or replace the whole notification routing policy (policy tree) in Grafana. Does not require a path parameter, but accepts a complete notification routing tree object as the request body. Endpoint: `PUT /api/v1/provisioning/policies`. Accepts the optional `X-Disable-Provenance` header for UI-level resource updates. Outputs an Ack object on acceptance or ValidationError if the input is not valid.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_38

LANGUAGE: http
CODE:
```
PUT /api/v1/provisioning/policies
```

----------------------------------------

TITLE: Representing Labeled Time Series Input (Series 2)
DESCRIPTION: This Markdown table displays sample time series data for 'series2' with labels (what="Temp", cluster="B", job="J1"). It's part of the input for the 'Join by labels' transformation example.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_28

LANGUAGE: markdown
CODE:
```
| Time | Value |
| ---- | ----- |
| 1    | 10    |
| 2    | 200   |
```

----------------------------------------

TITLE: Defining Wire Injector in Go
DESCRIPTION: Shows how to declare an injector function using wire.Build to wire up providers.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_4

LANGUAGE: go
CODE:
```
// +build wireinject
// The build tag makes sure the stub is not built in the final build.

package main

import (
    "context"

    "github.com/google/wire"
    "example.com/foobarbaz"
)

func initializeBaz(ctx context.Context) (foobarbaz.Baz, error) {
    wire.Build(foobarbaz.MegaSet)
    return foobarbaz.Baz{}, nil
}
```

----------------------------------------

TITLE: Rendering Email Subject with Go HTML Templates - GoTemplate
DESCRIPTION: This snippet utilizes the 'HiddenSubject' function from Go's HTML template package to dynamically render the email subject line, including the recipient's name. Dependencies include the availability of the 'HiddenSubject' function and the .Subject and .Name variables in the template context. Inputs are the subject text and recipient's name, with the output being a dynamically generated email subject.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/verify_email.txt#2025-04-23_snippet_0

LANGUAGE: gotemplate
CODE:
```
{{HiddenSubject .Subject "Verify your email - {{.Name}}"}}
```

----------------------------------------

TITLE: Enabling Grafana Service on Boot (Bash)
DESCRIPTION: Uses `systemctl enable` to configure the `grafana-server` service to start automatically when the Raspberry Pi boots up. Requires `sudo` privileges and `systemd` (which is standard on Raspberry Pi OS Lite).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/install-grafana-on-raspberry-pi/index.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
sudo /bin/systemctl enable grafana-server
```

----------------------------------------

TITLE: Requesting All Mute Timings - HTTP
DESCRIPTION: This snippet issues a GET request to the mute-timings endpoint, authenticating via Bearer token and setting JSON as both requested and provided content type. The endpoint serves as a means for clients to list all configured mute timing intervals used for silencing alerts during specific periods.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
GET /api/v1/provisioning/mute-timings\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Generating Lezer Grammar Parser with Yarn (Shell)
DESCRIPTION: This shell command uses yarn with dlx to invoke the @lezer/generator package. It takes a grammar specification in search.grammar and outputs a JavaScript parser file, search.js, regenerating the search grammar after modifications. Dependencies include yarn, the @lezer/generator package, and a valid search.grammar file in the current directory. Input is the grammar definition, and output is the regenerated search.js file (and search.terms.js), which are used for parsing alerting search queries.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/alerting/unified/search/README.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
yarn dlx @lezer/generator search.grammar -o search.js
```

----------------------------------------

TITLE: Querying Grafana Teams API with Auth Headers
DESCRIPTION: Example of querying Grafana's API to search for teams using authentication headers. Shows how to retrieve team information including IDs, names, and member counts.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
curl -H "X-WEBAUTH-USER: admin" -H "X-WEBAUTH-GROUPS: lokiteamOnExternalSystem" http://localhost:3000/api/teams/search
```

----------------------------------------

TITLE: Setting Minimum TLS Version - JSON
DESCRIPTION: Sets the minimum TLS version allowed for HTTPS connections in the image renderer's JSON configuration file. Options are 'TLSv1.2' (default) or 'TLSv1.3'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_18

LANGUAGE: json
CODE:
```
{
  "service": {
    "minTLSVersion": "TLSv1.2"
  }
}
```

----------------------------------------

TITLE: Example Output Data for Config from Query Results Transformation
DESCRIPTION: This table shows the output after applying the 'Config from query results' transformation. It's the same data as Input[0] (Query A), but the 'Value' field now includes configuration (Max=100) derived from Input[1] (Query B).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_6

LANGUAGE: text
CODE:
```
| Time          | Value (config: Max=100) |
| ------------- | ----------------------- |
| 1626178119127 | 10                      |
| 1626178119129 | 30                      |
```

----------------------------------------

TITLE: Embedding YouTube Videos in Hugo/Grafana Documentation Markdown
DESCRIPTION: This snippet shows how to incorporate YouTube videos directly into Grafana documentation pages using the Hugo shortcode format. The 'id' parameter provides the YouTube video ID, and the optional 'rel=0' disables related videos. This functionality requires the documentation site to support such shortcodes and is used to offer inline video demonstrations for new features. Only YouTube video IDs are supported; ensure videos are accessible.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-2.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
{{< youtube id="XHwwRCdxHMg?rel=0" >}}
```

----------------------------------------

TITLE: Example SAML Assertion for Group Membership
DESCRIPTION: This XML snippet shows a partial SAML assertion containing a 'groups' attribute. It includes two `AttributeValue` elements, 'admins_group' and 'division_1', demonstrating how group information might be structured in the SAML response from an Identity Provider.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_8

LANGUAGE: xml
CODE:
```
<saml2:Attribute
    Name="groups"
    NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified">
    <saml2:AttributeValue
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:type="xs:string">admins_group
    </saml2:AttributeValue>
    <saml2:AttributeValue
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:type="xs:string">division_1
    </saml2:AttributeValue>
</saml2:Attribute>
```

----------------------------------------

TITLE: Starting Grafana Server from Standalone Binary Installation
DESCRIPTION: Starts the Grafana server directly from the binary executable. This command should be run from the root directory where the standalone Grafana binaries were extracted. It starts Grafana in the foreground of the current terminal session.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/mac/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
./bin/grafana server
```

----------------------------------------

TITLE: Examples of Absolute and Semi-Relative Time Range Syntax in Grafana
DESCRIPTION: Illustrates how to define absolute time ranges using specific timestamps (YYYY-MM-DD HH:MM:SS format) or relative values like 'now-24h' within the absolute range fields ('From' and 'To'). Also shows examples of semi-relative ranges which combine an absolute start time with a relative end time ('now'), or a modified relative start time ('now/d+8h') with a relative end time ('now').
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/use-dashboards/index.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
2020-05-14 00:00:00 to 2020-05-15 23:59:59
```

LANGUAGE: plaintext
CODE:
```
now-24h
```

LANGUAGE: plaintext
CODE:
```
Start time: 2023-05-01 00:00:00
End time: now
```

LANGUAGE: plaintext
CODE:
```
Start time: now/d+8h
End time: now
```

----------------------------------------

TITLE: Organizing App Plugin Sections - Grafana INI
DESCRIPTION: This section header introduces configuration for organizing app plugins into navigation sections. Individual directives below this header will map a plugin ID to a navigation section ID and determine sort order, such as '<pluginId> = <sectionId> <sortWeight>'. This enables custom UI organization for app pages, with parameters required for each directive under this header.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_32

LANGUAGE: ini
CODE:
```
[navigation.app_sections]
```

----------------------------------------

TITLE: Registering Authorization Service on Local GRPC Server in Grafana via INI
DESCRIPTION: This snippet configures Grafana to register the authorization service on the local GRPC server using the [authorization] INI section, with listen=true and mode="grpc". "app_mode" is set to development to indicate the environment context. The client connects via GRPC on localhost, making this suitable for local experimentation or internal service communication.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/README.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
app_mode = development

[authorization]
remote_address = "localhost:10000"
listen = true
mode = "grpc"

```

----------------------------------------

TITLE: Rendering PluginSignatureBadge Status Variants - React/TypeScript
DESCRIPTION: Each code snippet below demonstrates the usage of the PluginSignatureBadge React component, wrapped inside an ExampleFrame for isolated Storybook presentation. The main dependency is the @grafana/ui PluginSignatureBadge component. The key parameter for each usage is the status prop, which may take values such as "internal", "valid", "invalid", "modified", or "unsigned" to display distinct visual badges representing plugin signature state. These snippets are intended for use in Storybook MDX files, and showcase what the badge will look like in different signature verification scenarios.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PluginSignatureBadge/PluginSignatureBadge.mdx#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<ExampleFrame>\n  <PluginSignatureBadge status=\"internal\" />\n</ExampleFrame>
```

LANGUAGE: tsx
CODE:
```
<ExampleFrame>\n  <PluginSignatureBadge status=\"valid\" />\n</ExampleFrame>
```

LANGUAGE: tsx
CODE:
```
<ExampleFrame>\n  <PluginSignatureBadge status=\"invalid\" />\n</ExampleFrame>
```

LANGUAGE: tsx
CODE:
```
<ExampleFrame>\n  <PluginSignatureBadge status=\"modified\" />\n</ExampleFrame>
```

LANGUAGE: tsx
CODE:
```
<ExampleFrame>\n  <PluginSignatureBadge status=\"unsigned\" />\n</ExampleFrame>
```

----------------------------------------

TITLE: Removing an External Group from a Team Response Example in JSON
DESCRIPTION: Returns a JSON object confirming that the group has been removed from the team after a successful DELETE request. A message key contains the operation result. The API grants this response only on valid, successful deletions with no error or permission issues.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team_sync.md#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{\"message\":\"Team Group removed\"}
```

----------------------------------------

TITLE: Rendered HTML with Dynamic data-testid Attributes
DESCRIPTION: HTML output example showing how dynamic data-testid values appear in the rendered DOM.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_8

LANGUAGE: html
CODE:
```
<div class="card-item-name" data-testid="data-testid Data source list item A">A</div>
<div class="card-item-name" data-testid="data-testid Data source list item B">B</div>
<div class="card-item-name" data-testid="data-testid Data source list item C">C</div>
```

----------------------------------------

TITLE: Modifying Viewer Role Permissions with RBAC HTTP API in Bash
DESCRIPTION: This bash script fetches the basic viewer role, removes general app plugin access, adds specific access to kentik-connect-app plugin, and updates the role using the Grafana RBAC API. It uses jq for JSON manipulation and requires a service account token for authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
# Fetch the role, modify it to remove the undesired permissions, add the new permission and increment its version
curl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' \
  -X GET '<grafana_url>/api/access-control/roles/basic_viewer' | \
  jq 'del(.created)| del(.updated) | del(.permissions[].created) | del(.permissions[].updated) | .version += 1' | \
  jq 'del(.permissions[] | select (.action == "plugins.app:access" and .scope == "plugins:*"))' | \
  jq '.permissions += [{"action": "plugins.app:access", "scope": "plugins:id:kentik-connect-app"}]' > /tmp/basic_viewer.json

# Update the role
curl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' -H 'Content-Type: application/json' \
  -X PUT -d @/tmp/basic_viewer.json '<grafana_url>/api/access-control/roles/basic_viewer'
```

----------------------------------------

TITLE: Setting Default Browser Timezone - Bash
DESCRIPTION: Sets BROWSER_TZ to specify the timezone for the headless browser during rendering when not provided by Grafana. Accepts IANA timezone IDs, falling back to the system TZ if unset. Used for consistent time-based rendering.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_35

LANGUAGE: bash
CODE:
```
BROWSER_TZ=Europe/Stockholm
```

----------------------------------------

TITLE: Using the is_nan Function in Grafana Expressions
DESCRIPTION: Demonstrates the `is_nan` function, which checks if a value is NaN (Not a Number). It returns 1 for NaN values and 0 otherwise, needed because `NaN` is not equal to `NaN`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_8

LANGUAGE: Grafana Expressions
CODE:
```
is_nan($A)
```

----------------------------------------

TITLE: Enabling Strong Password Policy in Grafana
DESCRIPTION: Configuration to enable Grafana's enhanced password policy that enforces stronger password requirements including minimum length, character types, and complexity.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/grafana/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
[auth.basic]
password_policy = true
```

----------------------------------------

TITLE: Embedding Video using Custom Hugo Shortcode (OpenID Discovery URL)
DESCRIPTION: This snippet employs the custom `video-embed` Hugo shortcode to embed a screen recording. The video shows how entering an OpenID Connect Discovery URL in the Generic OAuth configuration form automatically populates related fields like Auth URL, Token URL, and API URL. The `src` parameter specifies the video file path.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-2.md#2025-04-23_snippet_7

LANGUAGE: hugo
CODE:
```
{{< video-embed src="/media/docs/grafana/screen-recording-11-2-openid-discovery-url.mp4" >}}
```

----------------------------------------

TITLE: Updating All Grafana Plugins using CLI (Bash)
DESCRIPTION: Uses the Grafana command-line interface (CLI) tool to update all installed Grafana plugins to their latest compatible versions. This is recommended after upgrading the main Grafana application to ensure plugin compatibility.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/upgrade/upgrade-common-tasks.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
grafana cli plugins update-all
```

----------------------------------------

TITLE: Configuring Grafana Support Bundle Settings (INI)
DESCRIPTION: This snippet shows the configuration options available within the `[support_bundles]` section of the Grafana configuration file (`grafana.ini`). It allows enabling/disabling bundle creation (`enabled`), restricting generation to server admins (`server_admin_only`), and specifying public keys for encrypting bundles (`public_keys`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/troubleshooting/support-bundles/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[support_bundles]
# Enable support bundle creation (default: true)
enabled = true
# Only server admins can generate and view support bundles. When set to false, organization admins can generate and view support bundles (default: true)
server_admin_only = true
# If set, bundles will be encrypted with the provided public keys separated by whitespace
public_keys = ""
```

----------------------------------------

TITLE: Listing Status of Docker Compose Services - Bash
DESCRIPTION: This command lists the status of the services defined in the current docker-compose context. It shows a table view including each service's container name, command, state, and ports. Dependencies: Docker and Docker Compose must be running. Input: None. Output: The state ('Up' or otherwise) and network/port assignments for each service, which helps verify successful setup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
docker-compose ps

```

----------------------------------------

TITLE: Changing Default Raspberry Pi Password (Bash)
DESCRIPTION: Initiates the password change process for the currently logged-in user ('pi' in this context). It prompts the user to enter the current password ('raspberry' by default) and then the new password twice for security.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/install-grafana-on-raspberry-pi/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
passwd
```

----------------------------------------

TITLE: Applying Text Transformation and Utility Functions in Grafana Go Templates
DESCRIPTION: This template snippet uses various built-in and Grafana-specific transformation functions for string manipulation (title, toUpper, toLower, trimSpace, match, reReplaceAll, join, safeHtml, stringSlice) for notification content. Dependencies include function support in the Grafana templating engine. Key parameters are the specific string or list values to be transformed and formatted. Output includes altered strings, regex-matched values, concatenated lists, and HTML-safe text for output rendering.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_7

LANGUAGE: go
CODE:
```
{{ define "custom_template" }}
  {{ title "hello, world!" }}
  {{ toUpper "Hello, world!" }}
  {{ toLower "Hello, world!" }}
  {{ trimSpace "Hello, world!" }}
  {{ match "a.*" "abc" }}
  {{ reReplaceAll "localhost:(.*)" "example.com:$1" "localhost:8080" }}
  {{ join "-" (stringSlice "a" "b" "c") }}
  {{ safeHtml "<b>Text</b>"}}
  {{ stringSlice "a" "b" "c" }}
{{ end }}
```

----------------------------------------

TITLE: Generating RTK API Clients - Bash
DESCRIPTION: Command to generate RTK API clients using yarn. This processes the spec files and creates the API clients.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/tests/apis/openapi_snapshots/README.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
yarn generate-apis
```

----------------------------------------

TITLE: Including Thresholds Documentation using Hugo Shortcode
DESCRIPTION: This Hugo shortcode includes shared documentation for threshold options from `visualizations/thresholds-options-1.md`. Dependencies include Hugo and the referenced file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/candlestick/index.md#2025-04-23_snippet_6

LANGUAGE: plaintext
CODE:
```
{{< docs/shared lookup="visualizations/thresholds-options-1.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Embedding Components within Trans for Variable Display in JSX
DESCRIPTION: Demonstrates embedding a custom component (`SearchTerm`) inside the `<Trans>` component. This pattern is suitable when the nested component primarily serves to display or style the interpolated variable (`term`). Requires `Trans` and potentially UI components like `@grafana/ui/Text`.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
import { Trans } from 'app/core/internationalization';
import { Text } from '@grafana/ui';

const SearchTerm = ({ term }) => <Text color="success">{term}</Text>;

const SearchTitle = ({ term }) => (
  <Trans i18nKey="search-page.results-title">
    Results for <SearchTerm term={term} />
  </Trans>
);
```

----------------------------------------

TITLE: Querying Service Account Token Permissions with cURL and jq - Bash
DESCRIPTION: This bash snippet performs an HTTP GET request to the Grafana API endpoint "/api/access-control/user/permissions" using a specific Bearer token for authentication. The response, piped to 'jq', is formatted as JSON, listing all permission keys and their corresponding resources for the token. Requires cURL, jq, network access to the Grafana instance, a valid service account token with appropriate API rights. Input: Token string and Grafana URL. Output: JSON structure displaying permissions. Limitation: Sensitive to correct token and endpoint; output may be truncated for brevity.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/_index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
curl -H "Authorization: Bearer glsa_HOruNAb7SOiCdshU9algkrq7FDsNSLAa_54e2f8be" -X GET '<grafana_url>/api/access-control/user/permissions' | jq
```

----------------------------------------

TITLE: Enabling Panel Redesign via 'newPanelChromeUI' Feature Toggle (Plaintext)
DESCRIPTION: This represents the 'newPanelChromeUI' feature toggle key used in Grafana configuration. Setting this toggle enables the preview of the redesigned dashboard panel UI, which improves accessibility and information layout for React-based panels in Grafana v9.4.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-4.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
newPanelChromeUI
```

----------------------------------------

TITLE: Listing API Keys Request Example using HTTP
DESCRIPTION: Example HTTP GET request to list API keys using the deprecated `/api/auth/keys` endpoint. Requires `apikeys:read` permission on `apikeys:*` scope. Includes standard HTTP headers like `Accept`, `Content-Type`, and `Authorization` with a bearer token. The optional `includeExpired` query parameter can be used.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/auth.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/auth/keys HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Documenting Breaking Changes in Markdown
DESCRIPTION: Template for documenting breaking changes in pull request descriptions that need to be included in the changelog.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/merge-pull-request.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
# Release notice breaking change

<Breaking change description>
```

----------------------------------------

TITLE: Updating User Details via Grafana HTTP API (http)
DESCRIPTION: Shows a HTTP PUT request to update user details, including email, name, login, and theme, for a specified user ID. Includes JSON body with new values, requiring administrative credentials and proper JSON content headers.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
PUT /api/users/2 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=\n\n{\n  "email":"user@mygraf.com",\n  "name":"User2",\n  "login":"user",\n  "theme":"light"\n}
```

----------------------------------------

TITLE: Enabling Insecure Email Lookup in Grafana OAuth Configuration - INI
DESCRIPTION: This snippet allows administrators to enable the deprecated email-based identity lookup mechanism for OAuth providers in Grafana. Placing `oauth_allow_insecure_email_lookup = true` under the `[auth]` section of the main configuration file (`grafana.ini`) reverts to the previous behavior where user accounts across identity providers are matched on email address. This setting is only recommended as a last resort and especially discouraged when using multi-tenant Azure AD due to security risks, including the potential for account takeovers.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v10-0.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[auth]
oauth_allow_insecure_email_lookup = true

```

----------------------------------------

TITLE: Configuring JWT to Skip Org Role Sync in Grafana (INI)
DESCRIPTION: This snippet shows how to configure the Grafana server to skip automatic organization role assignment when authenticating users via JWT. By setting skip_org_role_sync = true in the [auth.jwt] section of the Grafana configuration file, the organization role synchronization during login is bypassed, allowing user roles and permissions to be managed through alternative workflows such as the UI. This requires access to the Grafana.ini (or relevant config file), and is relevant for deployments managing roles outside the JWT claim processing.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_13

LANGUAGE: ini
CODE:
```
[auth.jwt]
# ...
skip_org_role_sync = true
```

----------------------------------------

TITLE: Creating a Short URL via HTTP POST Request
DESCRIPTION: This snippet demonstrates an example HTTP POST request to the `/api/short-urls` endpoint to create a shortened URL in Grafana. It requires `Accept` and `Content-Type` headers set to `application/json`, an `Authorization` header with a bearer token, and a JSON body containing the relative `path` to be shortened.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/short_url.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
POST /api/short-urls HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "path": "d/TxKARsmGz/new-dashboard?orgId=1&from=1599389322894&to=1599410922894"
}
```

----------------------------------------

TITLE: Creating an event table schema in SQL
DESCRIPTION: SQL definition for creating a simple event table with time_sec, description, and tags fields. This represents a basic schema for storing event data in a SQL database.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_0

LANGUAGE: sql
CODE:
```
CREATE TABLE [event] (
  time_sec bigint,
  description nvarchar(100),
  tags nvarchar(100),
)
```

----------------------------------------

TITLE: Error Response for Shared Dashboard Creation in Grafana
DESCRIPTION: This HTTP response demonstrates an error when attempting to create a shared dashboard that is already public, returning a status code 400 with an error message.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
HTTP/1.1 400 Bad request
Content-Type: application/json; charset=UTF-8
Content-Length: 107

{
    "statusCode": 400,
    "messageId": "publicdashboards.dashboardIsPublic",
    "message": "Dashboard is already public"
}
```

----------------------------------------

TITLE: Remove User Role Assignment Response
DESCRIPTION: Success response for role removal operation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_22

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8

{
    "message": "Role removed from user."
}
```

----------------------------------------

TITLE: Confirmation Response for Organization Update - JSON
DESCRIPTION: Typical JSON response for successfully updating the organization, confirming the change with a message key. A 200 HTTP status code accompanies this response.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_11

LANGUAGE: json
CODE:
```
{"message":"Organization updated"}
```

----------------------------------------

TITLE: Grouping and Aggregating Series with groupByNode() in Graphite
DESCRIPTION: The `groupByNode()` function aggregates multiple time series into fewer series based on common metric path nodes. It takes a node index (e.g., `2`) to group by and an aggregation function (e.g., `'sum'`) to apply (like sum, average, max). This is particularly useful when working with wildcard queries that return many related series.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/graphite/query_help.md#2025-04-23_snippet_2

LANGUAGE: Graphite Query Language
CODE:
```
groupByNode(2, 'sum')
```

----------------------------------------

TITLE: Obtaining External URL or Path Prefix in Grafana Templates - Go Template
DESCRIPTION: Examples for {{ externalURL }} and {{ pathPrefix }}, which return, respectively, the configured external URL or path prefix for a Grafana instance. No arguments required; outputs are URL strings as specified in the server configuration. Useful for constructing links back to Grafana from within alerts.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_15

LANGUAGE: Go Template
CODE:
```
{{ externalURL }}

```

LANGUAGE: Go Template
CODE:
```
{{ pathPrefix }}

```

----------------------------------------

TITLE: Navigating into the Tutorial Environment Directory - Bash
DESCRIPTION: This Bash snippet changes the current working directory to 'tutorial-environment', which should have been created by cloning the tutorial environment repository. There are no dependencies other than having previously run the 'git clone' command. This command prepares the shell environment for running subsequent Docker Compose commands necessary for bringing up the Grafana stack.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
cd tutorial-environment

```

----------------------------------------

TITLE: Exporting Notification Policy Tree via HTTP API - HTTP
DESCRIPTION: This snippet demonstrates how to issue a GET request to the Grafana provisioning API to export the notification policy tree in YAML format. Authentication is provided using a Bearer token in the Authorization header. The request and response specify content types for correct serialization. Required parameters include the 'format=yaml' query and proper headers. The output is a YAML document representing notification policies suitable for import/export operations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
GET /api/v1/provisioning/policies/export?format=yaml\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Running Grafana Docker Container with Experimental Layers Enabled
DESCRIPTION: This bash command demonstrates how to run a Grafana Docker container with experimental layers enabled by setting the GF_PANELS_ENABLE_ALPHA environment variable to true.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/geomap/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
docker run -p 3000:3000 -e "GF_PANELS_ENABLE_ALPHA=true" grafana/grafana:<VERSION>
```

----------------------------------------

TITLE: Resetting Basic Roles - Grafana Access Control HTTP API - HTTP
DESCRIPTION: Demonstrates a POST request to reset permissions for basic roles using the dedicated hard-reset endpoint. The body must indicate with 'BasicRoles' boolean whether to reset basic roles. Requires 'roles:write' permission with an escalate scope. Used for restoring default permissions when necessary.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_40

LANGUAGE: http
CODE:
```
POST /api/access-control/roles/hard-reset
Accept: application/json
Content-Type: application/json

{
    "BasicRoles": true
}
```

----------------------------------------

TITLE: Folders API GET Response Example
DESCRIPTION: Example HTTP response for the GET /api/folders endpoint, returning a JSON array of folders with their IDs, UIDs, and titles.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

[
  {
    "id":1,
    "uid": "nErXDvCkzz",
    "title": "Department ABC"
  },
  {
    "id":2,
    "uid": "k3S1cklGk",
    "title": "Department RND"
  }
]
```

----------------------------------------

TITLE: Querying Metrics with Variable Interpolation - Prometheus - Markdown Example
DESCRIPTION: This snippet demonstrates how to use a variable in a Prometheus query within a Grafana dashboard panel. The variable `$server` acts as a placeholder for different server instance values, allowing for dynamic querying. Prerequisites include a working Grafana setup with Prometheus as a data source and at least one dashboard variable named `server`. The expected input is that the variable gets replaced at runtime with the selected value(s), enabling interactive exploration of system threads for different servers.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/_index.md#2025-04-23_snippet_0

LANGUAGE: prometheus
CODE:
```
wmi_system_threads{instance=~"$server"}
```

----------------------------------------

TITLE: Printing Values with Go Templates in Grafana Alerting - Go Template
DESCRIPTION: Demonstrates how to print the value of a variable, variable field, function output, and dot context using Go template syntax inside Grafana alerting templates. Dependencies include Grafana\'s template processing context and the Go text/template language. $values and .Alerts are standard variables exposed in alert/notification contexts, and humanize is a custom or built-in function; outputs are rendered to the final notification or alert message. No external imports required, but context-specific variable availability may constrain usage.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/language.md#2025-04-23_snippet_0

LANGUAGE: Go Template
CODE:
```
{{ $values }}
{{ $values.A.Value }}
{{ humanize 1000.0 }}
{{ .Alerts }}
```

----------------------------------------

TITLE: Using Ceil Function in Grafana Expressions
DESCRIPTION: The ceil function rounds a number up to the nearest integer value. It works with numeric inputs.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_15

LANGUAGE: text
CODE:
```
ceil(3.123)
```

----------------------------------------

TITLE: Installing Grizzly CLI for Grafana Resource Migration - Shell
DESCRIPTION: This script demonstrates how to download and install the Grizzly CLI tool from the official GitHub releases for use in automating migration of dashboards, folders, and other resources. The binary is fetched for a specified OS/architecture combination and set as executable for all users. Requires: curl, access to /usr/local/bin, and potentially adaptation for other platforms. This is intended as a prerequisite for subsequent migration operations via Grizzly, and will not overwrite existing binaries unless permissions allow.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
# download the binary (adapt os and arch as needed)
$ curl -fSL -o "/usr/local/bin/grr" "https://github.com/grafana/grizzly/releases/download/v0.3.1/grr-linux-amd64"

# make it executable
$ chmod a+x "/usr/local/bin/grr"
```

----------------------------------------

TITLE: Grafana Permissions Table in Markdown
DESCRIPTION: Markdown table documenting Grafana permissions, their associated scopes, and descriptions. Covers various system aspects including data sources, feature management, folders, LDAP configuration, library panels, licensing, and organization user management.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_25

LANGUAGE: markdown
CODE:
```
| `datasources:write`                   | <ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>                                                       | Update data sources.                                                                                                                                                                                                      |
| `featuremgmt.read`                    | None                                                                                                                | Read feature toggles.                                                                                                                                                                                                     |
| `featuremgmt.write`                   | None                                                                                                                | Write feature toggles.                                                                                                                                                                                                    |
| `folders.permissions:read`            | <ul><li>`folders:*`</li><li>`folders:uid:*`</li></ul>                                                               | Read permissions for one or more folders and their subfolders.                                                                                                                                                            |
| `folders.permissions:write`           | <ul><li>`folders:*`</li><li>`folders:uid:*`</li></ul>                                                               | Update permissions for one or more folders and their subfolders.                                                                                                                                                          |
| `folders:create`                      | <ul><li>`folders:*`</li><li>`folders:uid:*`</li><li>`folders:uid:general`</li></ul>                                 | Create folders or subfolders. If granted with scope `folders:uid:general`, it allows to create root level folders. Otherwise, it allows creating subfolders under the specified folders.                                  |
| `folders:delete`                      | <ul><li>`folders:*`</li><li>`folders:uid:*`</li></ul>                                                               | Delete one or more folders and their subfolders.                                                                                                                                                                          |
| `folders:read`                        | <ul><li>`folders:*`</li><li>`folders:uid:*`</li></ul>                                                               | Read one or more folders and their subfolders.                                                                                                                                                                            |
| `folders:write`                       | <ul><li>`folders:*`</li><li>`folders:uid:*`</li></ul>                                                               | Update one or more folders and their subfolders.                                                                                                                                                                          |
| `ldap.config:reload`                  | None                                                                                                                | Reload the LDAP configuration.                                                                                                                                                                                            |
| `ldap.status:read`                    | None                                                                                                                | Verify the availability of the LDAP server or servers.                                                                                                                                                                    |
| `ldap.user:read`                      | None                                                                                                                | Read users via LDAP.                                                                                                                                                                                                      |
| `ldap.user:sync`                      | None                                                                                                                | Sync users via LDAP.                                                                                                                                                                                                      |
| `library.panels:create`               | <ul><li>`folders:*`</li><li>`folders:uid:*`</li></ul>                                                               | Create a library panel in one or more folders and their subfolders.                                                                                                                                                       |
| `library.panels:read`                 | <ul><li>`folders:*`</li><li>`folders:uid:*`</li><li>`library.panels:*`</li><li>`library.panels:uid:*`</li></ul>     | Read one or more library panels.                                                                                                                                                                                          |
| `library.panels:write`                | <ul><li>`folders:*`</li><li>`folders:uid:*`</li><li>`library.panels:*`</li><li>`library.panels:uid:*`</li></ul>     | Update one or more library panels.                                                                                                                                                                                        |
| `library.panels:delete`               | <ul><li>`folders:*`</li><li>`folders:uid:*`</li><li>`library.panels:*`</li><li>`library.panels:uid:*`</li></ul>     | Delete one or more library panels.                                                                                                                                                                                        |
| `licensing.reports:read`              | None                                                                                                                | Get custom permission reports.                                                                                                                                                                                            |
| `licensing:delete`                    | None                                                                                                                | Delete the license token.                                                                                                                                                                                                 |
| `licensing:read`                      | None                                                                                                                | Read licensing information.                                                                                                                                                                                               |
| `licensing:write`                     | None                                                                                                                | Update the license token.                                                                                                                                                                                                 |
| `migrationassistant:migrate`          | None                                                                                                                | Execute on-prem to cloud migrations through the Migration Assistant.   |
| `org.users:write`                     | <ul><li>`users:*`</li><li>`users:id:*`</li></ul>                                                                    | Update the organization role (`None`, `Viewer`, `Editor`, or `Admin`) of a user.                                                                                                                                          |
| `org.users:add`                       | <ul><li>`users:*`</li><li>`users:id:*`</li></ul>                                                                    | Add a user to an organization or invite a new user to an organization.                                                                                                                                                    |
| `org.users:read`                      | <ul><li>`users:*`</li><li>`users:id:*`</li></ul>                                                                    | Get user profiles within an organization.                                                                                                                                                                                 |
| `org.users:remove`                    | <ul><li>`users:*`</li><li>`users:id:*`</li></ul>                                                                    | Remove a user from an organization.                                                                                                                                                                                       |
```

----------------------------------------

TITLE: Editing Prometheus systemd Service File with nano (Linux/MacOS, Bash)
DESCRIPTION: This snippet shows how to open and edit the Prometheus systemd service unit file using nano on Linux or MacOS. Admins must ensure the \"prometheus.service\" file is located in \"/etc/systemd/system/\". Editing this file allows you to set paths, configuration, and restart behaviors for the Prometheus service. Requires superuser privileges. No output is produced; changes are saved in the file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_17

LANGUAGE: bash
CODE:
```
sudo nano /etc/systemd/system/prometheus.service
```

----------------------------------------

TITLE: Querying Multiple Columns for Templating Variable in PostgreSQL
DESCRIPTION: Shows a SQL query that joins two tables to retrieve hostnames from different sources. This query demonstrates how to create a templating variable with multiple columns.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_8

LANGUAGE: sql
CODE:
```
SELECT host.hostname, other_host.hostname2 FROM host JOIN other_host ON host.city = other_host.city
```

----------------------------------------

TITLE: Configuring Etcd Storage for Grafana API Server in INI
DESCRIPTION: This INI configuration snippet, added to Grafana's configuration file, instructs the Grafana Kubernetes API server to use etcd as its storage backend. It sets the `storage_type` to `etcd` and specifies the network address(es) of the etcd server(s) via `etcd_servers`.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/README.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
[grafana-apiserver]
storage_type = etcd
etcd_servers = 127.0.0.1:2379
```

----------------------------------------

TITLE: Querying and Processing Tank Temperature Data with Flux for Grafana Alerting
DESCRIPTION: This Flux query retrieves temperature data (actual and setpoint) for multiple specified tanks from an InfluxDB bucket ('HyperEncabulator'). It filters the data, aggregates it using a mean function over Grafana's window period, pivots it to align actual and setpoint values by timestamp, calculates the temperature difference (`setpoint - actual`), renames the calculated difference column from '_value' to 'difference', keeps only essential columns, and drops intermediate ones. The final result is yielded for use in Grafana multidimensional alerting, representing the temperature deviation for each tank. Requires an InfluxDB source named 'HyperEncabulator' with the specified data structure.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_9

LANGUAGE: flux
CODE:
```
from(bucket: "HyperEncabulator")
 |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
 |> filter(fn: (r) => r["_measurement"] == "TemperatureData")
 |> filter(fn: (r) => r["MeasType"] == "actual" or r["MeasType"] == "setpoint")
 |> filter(fn: (r) => r["Tank"] == "A5" or r["Tank"] == "B4" or r["Tank"] == "C3" or r["Tank"] == "D2" or r["Tank"] == "E1")
 |> filter(fn: (r) => r["_field"] == "Temperature")
 |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
 |> pivot(rowKey:["_time"], columnKey: ["MeasType"], valueColumn: "_value")
 |> map(fn: (r) => ({ r with _value: (r.setpoint - r.actual)}))
 |> rename(columns: {_value: "difference"})
 |> keep(columns: ["_time", "difference", "Tank"])
 |> drop(columns: ["actual", "setpoint"])
 |> yield(name: "mean")
```

----------------------------------------

TITLE: Retrieving Library Element by Name Request Example (HTTP)
DESCRIPTION: Example HTTP GET request to fetch library elements matching a specific name using the `/api/library-elements/name/:name` endpoint. The name 'API docs Example' is provided in the path. Requires authentication via Bearer token.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
GET /api/library-elements/name/API docs Example HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Ensuring Previous Regex Behavior in Rename Transformation (Regex)
DESCRIPTION: This example demonstrates how to wrap a previous regex pattern, such as `(.*)`, within forward slashes (`/(.*)/`) in Grafana 9.0's "rename by regex" transformation. This explicitly avoids the new global flag interpretation and guarantees the same behavior as before the update.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-0.md#2025-04-23_snippet_6

LANGUAGE: regex
CODE:
```
/(.*)/
```

----------------------------------------

TITLE: Example HTTP Response for Moving a Grafana Folder
DESCRIPTION: This snippet illustrates a successful (HTTP 200 OK) response after moving a Grafana folder. The response body is a JSON object containing the updated details of the moved folder, including its `id`, `uid`, `title`, `url`, permissions (`canSave`, `canEdit`, etc.), timestamps, the new `parentUid`, and an array `parents` listing the hierarchy of parent folders.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_12

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
	"id": 4,
	"uid": "a5393ec3-5568-4e88-8809-b866968ae8a6",
	"title": "just-testing",
	"url": "/dashboards/f/a5393ec3-5568-4e88-8809-b866968ae8a6/just-testing",
	"hasAcl": false,
	"canSave": true,
	"canEdit": true,
	"canAdmin": true,
	"canDelete": true,
	"createdBy": "Anonymous",
	"created": "2023-04-27T21:55:01.593741+03:00",
	"updatedBy": "Anonymous",
	"updated": "2023-04-27T21:55:15.747444+03:00",
	"parentUid": "d80b18c0-266a-4aa4-ad5d-5537a00cb8e8",
	"parents": [
		{
			"id": 2,
			"uid": "d80b18c0-266a-4aa4-ad5d-5537a00cb8e8",
			"title": "f0",
			"url": "",
			"hasAcl": false,
			"canSave": true,
			"canEdit": true,
			"canAdmin": true,
			"canDelete": true,
			"createdBy": "Anonymous",
			"created": "2023-04-27T21:53:46.070672+03:00",
			"updatedBy": "Anonymous",
			"updated": "2023-04-27T21:53:46.070673+03:00"
		}
	]
}
```

----------------------------------------

TITLE: Starting Grafana Service (Bash)
DESCRIPTION: Uses `systemctl start` to immediately start the `grafana-server` service. This makes Grafana accessible on port 3000 after execution. Requires `sudo` privileges and `systemd`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/install-grafana-on-raspberry-pi/index.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
sudo /bin/systemctl start grafana-server
```

----------------------------------------

TITLE: Notification Template Groups Response - JSON
DESCRIPTION: This snippet provides an example HTTP 200 OK response for the notification template group request. The response body is JSON-formatted and contains an array of objects, each describing a template by name, content, and provenance. Templates leverage Go templating with definitions for message and subject customization, and their provenance field tracks source. This structure supports dynamic, reusable notification messages for alerting workflows.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_7

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  {\n    "name": "custom_email.message",\n    "template": "{{ define \"custom_email.message\" }}\n  Custom alert!\n{{ end }}",\n    "provenance": "file"\n  },\n  {\n    "name": "custom_email.subject",\n    "template": "{{ define \"custom_email.subject\" }}\n{{ len .Alerts.Firing }} firing alert(s), {{ len .Alerts.Resolved }} resolved alert(s)\n{{ end }}",\n    "provenance": "file"\n  }\n]
```

----------------------------------------

TITLE: Representing Time Series Data for Inner Join (Query B)
DESCRIPTION: This Markdown table displays example time series data from 'Query B', meant to be joined with 'Query A' using an inner join. It contains columns for Time, Server, and Errors.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_16

LANGUAGE: markdown
CODE:
```
| Time                | Server   | Errors |
| ------------------- | -------- | ------ |
| 2020-07-07 11:34:20 | server 1 | 15     |
| 2020-07-07 11:24:20 | server 2 | 5      |
| 2020-07-07 11:04:20 | server 3 | 10     |
```

----------------------------------------

TITLE: Querying Grafana Team Groups with Auth Headers
DESCRIPTION: Example of querying specific team groups in Grafana using authentication headers. Demonstrates how to verify group mappings for a particular team.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
curl -H "X-WEBAUTH-USER: admin" -H "X-WEBAUTH-GROUPS: lokiteamOnExternalSystem" http://localhost:3000/api/teams/2/groups
```

----------------------------------------

TITLE: Generating Dynamic Environment Label Value using Go Template in Grafana
DESCRIPTION: This Go template is used within Grafana's alert configuration to dynamically set the value of a custom `environment` label based on the value of the `environment` label present in the queried metric (`$labels.environment`). It maps 'prod' to 'production', 'staging' to 'staging', and defaults any other value to 'development'. This templated label is crucial for routing alert notifications to different teams or policies based on the originating environment.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_7

LANGUAGE: go
CODE:
```
{{- if eq $labels.environment "prod" -}}
production
{{- else if eq $labels.environment "staging" -}}
staging
{{- else -}}
development
{{- end -}}
```

----------------------------------------

TITLE: Creating Host Directory for Bind Mount (Bash)
DESCRIPTION: Bash command to create a directory named `data` in the current working directory (`$PWD`) on the host machine. This directory will be used as the target for a bind mount, allowing Grafana data to be stored directly on the host filesystem.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_16

LANGUAGE: bash
CODE:
```
mkdir $PWD/data
```

----------------------------------------

TITLE: Enabling Trace IDs in Error Messages via Feature Flag (Configuration)
DESCRIPTION: This feature flag, `tracing`, enables the inclusion of trace IDs in error alert messages within Grafana, aiding in debugging. This is part of an opt-in feature and should be enabled alongside `persistNotifications` for full functionality. Set this flag to true in Grafana configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-0.md#2025-04-23_snippet_1

LANGUAGE: configuration
CODE:
```
tracing
```

----------------------------------------

TITLE: Recompiling Protobuf Files in Grafana and Plugin SDK
DESCRIPTION: Commands to recompile protobuf files after upgrading the protobuf library. This requires Buf CLI to be installed and available in your path. The commands navigate to the Grafana directory and plugin SDK directory to execute the necessary compilation commands.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/upgrade-dependencies.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
cd $GRAFANA
make protobuf
cd $GRAFANA_PLUGIN_SDK_GO
mage protobuf
```

----------------------------------------

TITLE: Example Annotation Output with Label and Value
DESCRIPTION: This shows the rendered output of a Grafana alert annotation template that includes both a label (`instance`) and a query value. It demonstrates how dynamic data from the alert context is substituted into the template.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_4

LANGUAGE: plaintext
CODE:
```
CPU usage for Instance 1 has exceeded 80% (81.2345) for the last 5 minutes.
```

----------------------------------------

TITLE: Using Asynchronous Validation in Form Field (JavaScript/JSX)
DESCRIPTION: Provides a sample of using an asynchronous validator within a form, passing an async function as a validation rule in the react-hook-form register call. Highlights error message handling and dependency on validateAsync function. Integrates error indication and custom error messages for async form validation.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_12

LANGUAGE: jsx
CODE:
```
<Form ...>{
  ({register, errors}) => (
    <>
      <Field invalid={!!errors.name} error={errors.name?.message}
      <Input
        defaultValue={default.name}
        {...register("name", {
          required: 'Name is required',
          validation: async v => {
            return  await validateAsync(v);
          },
        )}
      />
    </>
  )}
</Form>
```

----------------------------------------

TITLE: Incorrect Method-Level Release Tag Placement Example - TypeScript
DESCRIPTION: This snippet shows a discouraged documentation style where each method within a class has its own release tag, rather than using a class-level release tag and overriding only where necessary. It serves as a negative example for TSDoc usage in TypeScript, promoting consistency and reducing redundant tagging. The context involves class-based APIs with methods of varying stability.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/code-comments.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
/**
 * Helps to create DataFrame objects and handle
 * the heavy lifting of creating a complex object.
 *
 * @example
 * ```typescript
 * const dataFrame = factory.create();
 * ```
 **/
export class DataFrameFactory {
  /**
   * @public
   **/
  create(): DataFrame {}

  /**
   * @beta
   **/
  createMany(): DataFrame[] {}
}
```

----------------------------------------

TITLE: Response for Service Account Token Creation in Grafana (HTTP)
DESCRIPTION: The HTTP response from creating a service account token includes the token ID, name, and the actual token key that will be used for authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_11

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
	"id": 7,
	"name": "grafana",
	"key": "eyJrIjoiVjFxTHZ6dGdPSjg5Um92MjN1RlhjMkNqYkZUbm9jYkwiLCJuIjoiZ3JhZmFuYSIsImlkIjoxfQ=="
}
```

----------------------------------------

TITLE: Setting Device Scale Factor - Bash
DESCRIPTION: Configures RENDERING_VIEWPORT_DEVICE_SCALE_FACTOR to specify the device pixel ratio for renders. Higher numbers yield higher-resolution images. Useful for print-quality output. Requires v3.9.0+; default is 1.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_47

LANGUAGE: bash
CODE:
```
# Available from v3.9.0+
RENDERING_VIEWPORT_DEVICE_SCALE_FACTOR=2
```

----------------------------------------

TITLE: Accessing Context Variables in Go Template
DESCRIPTION: These Go template snippets demonstrate accessing and rendering context variables (`.InvitedBy`, `.OrgName`, `.LinkUrl`). They are used within the email template to insert dynamic data provided when the template is executed, such as the name of the person sending the invitation, the name of the Grafana organization, and the unique URL for accepting the invitation.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/new_user_invite.txt#2025-04-23_snippet_1

LANGUAGE: go-template
CODE:
```
[[.InvitedBy]]
```

LANGUAGE: go-template
CODE:
```
[[.OrgName]]
```

LANGUAGE: go-template
CODE:
```
[[.LinkUrl]]
```

----------------------------------------

TITLE: Dashboard Permissions API Response
DESCRIPTION: Example response from the GET permissions API endpoint showing the permission structure. The response includes details about user, team, and role permissions with their respective permission levels.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_permissions.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Content-Length: 551

[
  {
    "id": 1,
    "dashboardId": -1,
    "created": "2017-06-20T02:00:00+02:00",
    "updated": "2017-06-20T02:00:00+02:00",
    "userId": 0,
    "userLogin": "",
    "userEmail": "",
    "teamId": 0,
    "team": "",
    "role": "Viewer",
    "permission": 1,
    "permissionName": "View",
    "uid": "dHEquNzGz",
    "title": "",
    "slug": "",
    "isFolder": false,
    "url": ""
  },
  {
    "id": 2,
    "dashboardId": -1,
    "created": "2017-06-20T02:00:00+02:00",
    "updated": "2017-06-20T02:00:00+02:00",
    "userId": 0,
    "userLogin": "",
    "userEmail": "",
    "teamId": 0,
    "team": "",
    "role": "Editor",
    "permission": 2,
    "permissionName": "Edit",
    "uid": "dHEquNzGz",
    "title": "",
    "slug": "",
    "isFolder": false,
    "url": ""
  }
]
```

----------------------------------------

TITLE: Defining Reusable Templates with 'define' in Go Templates
DESCRIPTION: Illustrates how to define a named, reusable template block using the `define` keyword followed by the template name in double quotes (e.g., `"print_labels"`). The content of the reusable template goes between the `define` and `end` tags.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_6

LANGUAGE: go
CODE:
```
{{ define "print_labels" }}
{{ end }}
```

----------------------------------------

TITLE: Mapping Grafana Roles Based on User Email via JMESPath (INI)
DESCRIPTION: This INI configuration uses a JMESPath expression in `role_attribute_path` to assign the 'Admin' role to the user with email 'admin@company.com' and the 'Viewer' role to all other users. The `skip_org_role_sync` setting must be set to `false` for this role mapping to take effect upon user login.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/google/index.md#2025-04-23_snippet_4

LANGUAGE: ini
CODE:
```
```ini
role_attribute_path = email=='admin@company.com' && 'Admin' || 'Viewer'
skip_org_role_sync = false
```
```

----------------------------------------

TITLE: Setting Environment Label based on Instance Label (Exact Match)
DESCRIPTION: This Go template creates an `environment` label based on the exact value of the `instance` label provided by the query. It uses `if/else if/else` logic and the `eq` (equals) function to map specific instance names ('prod-server-1', 'staging-server-1') to environment names ('production', 'staging'), with a default of 'development'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_15

LANGUAGE: gotemplate
CODE:
```
{{- if eq $labels.instance "prod-server-1" -}}
production
{{- else if eq $labels.instance "staging-server-1" -}}
staging
{{- else -}}
development
{{- end -}}
```

----------------------------------------

TITLE: Wire-Generated Code with Error Handling in Go
DESCRIPTION: Shows the updated initialization code generated by Wire that includes error checking and propagation.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_14

LANGUAGE: go
CODE:
```
func InitializeEvent() (Event, error) {
    message := NewMessage()
    greeter := NewGreeter(message)
    event, err := NewEvent(greeter)
    if err != nil {
        return Event{}, err
    }
    return event, nil
}
```

----------------------------------------

TITLE: Demonstrating JSON Parsing in Grafana
DESCRIPTION: This example shows how to parse JSON data in Grafana, extracting a specific field and renaming it. It transforms a dataset with timestamp and JSON data into a time series with a single value column.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_11

LANGUAGE: markdown
CODE:
```
#### Dataset Example

| Timestamp           | json_data     |
| ------------------- | ------------- |
| 1636678740000000000 | {"value": 1}  |
| 1636678680000000000 | {"value": 5}  |
| 1636678620000000000 | {"value": 12} |

#### Transformed Data

| Timestamp           | my_value |
| ------------------- | -------- |
| 1636678740000000000 | 1        |
| 1636678680000000000 | 5        |
| 1636678620000000000 | 12       |
```

----------------------------------------

TITLE: Successful Response for Sending Test Email in Grafana API (HTTP)
DESCRIPTION: This HTTP response shows a successful result after sending a test email with a report using the Grafana Reporting API. It returns a 200 OK status code and a JSON body confirming that the test email was sent.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_12

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 29

{
	"message": "Test email sent"
}
```

----------------------------------------

TITLE: Templating Summary Annotation with Dynamic Values in Grafana Alerting (Go Template)
DESCRIPTION: This Go template snippet demonstrates how to create a dynamic `summary` annotation for a Grafana alert rule. It uses the `$labels.instance` variable to insert the specific instance identifier and `$values.A.Value` to include the actual metric value that triggered the alert, making the annotation more informative.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/_index.md#2025-04-23_snippet_1

LANGUAGE: go-template
CODE:
```
CPU usage for {{ $labels.instance }} has exceeded 80% ({{ $values.A.Value }}) for the last 5 minutes.
```

----------------------------------------

TITLE: Representing SQL-like Data for Outer Join (Enrollments Table)
DESCRIPTION: This Markdown table presents sample data for an 'Enrollments' table, intended to be joined with the 'Students' table using an outer join based on 'StudentID'. It contains columns for StudentID, CourseID, and Grade.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_25

LANGUAGE: markdown
CODE:
```
| StudentID | CourseID | Grade |
| --------- | -------- | ----- |
| 1         | CS101    | A     |
| 1         | CS102    | B     |
| 2         | MATH201  | A     |
| 3         | PHYS101  | B     |
| 5         | HIST101  | B     |
```

----------------------------------------

TITLE: Defining Grafana Plugin Manifest Metadata (JSON)
DESCRIPTION: This JSON object, embedded within the PGP signed message, defines the manifest details for the 'test-datasource' Grafana plugin. It specifies the manifest version (2.0.0), signature type (private), signing organization details, root URLs (for development/testing), plugin ID ('test-datasource'), version (1.0.0), signing timestamp, the PGP key ID used for signing, and a SHA512 hash for the 'plugin.json' file to ensure its integrity.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/valid-v2-pvt-signature/plugin/MANIFEST.txt#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "private",
  "signedByOrg": "willbrowne",
  "signedByOrgName": "Will Browne",
  "rootUrls": [
    "http://localhost:3000/"
  ],
  "plugin": "test-datasource",
  "version": "1.0.0",
  "time": 1661171417046,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "203ef4a613c5693c437a665cd67f95e2756a0f71b336b2ffb265db7c180d0b19"
  }
}
```

----------------------------------------

TITLE: Comparing Dashboard Versions in Grafana HTTP API
DESCRIPTION: This HTTP request compares two different dashboard versions by calculating their JSON diff. It requires specifying base and new versions along with the diff type (json or basic).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_7

LANGUAGE: http
CODE:
```
POST /api/dashboards/calculate-diff HTTP/1.1
Accept: text/html
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "base": {
    "dashboardId": 1,
    "version": 1
  },
  "new": {
    "dashboardId": 1,
    "version": 2
  },
  "diffType": "json"
}
```

----------------------------------------

TITLE: Example Response for Updating an Organization (HTTP/JSON)
DESCRIPTION: Example successful HTTP response (200 OK) after updating a Grafana organization. The response body is a JSON object confirming the update.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_23

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{"message":"Organization updated"}
```

----------------------------------------

TITLE: Setting Up Development Data Sources using Make and Docker (Bash)
DESCRIPTION: Runs the `make devenv` command to automatically set up specified data sources (e.g., `influxdb`, `loki`) for the Grafana development environment. It leverages Docker and Docker Compose to generate a configuration and run the required database containers in the background. Requires Docker to be installed.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
make devenv sources=influxdb,loki
```

----------------------------------------

TITLE: Reverting Service Account Token to API Key in Grafana (HTTP)
DESCRIPTION: This HTTP request converts a service account token back to a legacy API key. This operation deletes the service account and creates a legacy API Key for the given keyId.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_14

LANGUAGE: http
CODE:
```
DELETE /api/serviceaccounts/1/revert/glsa_VVQjot0nijQ59lun6pMZRtsdBXxnFQ9M_77c34a79 HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Basic YWRtaW46YWRtaW4=
```

----------------------------------------

TITLE: Running Go Linters in Grafana
DESCRIPTION: Command to run all configured linters on the Go codebase using the make command with the lint-go target.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/style-guide.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
make lint-go
```

----------------------------------------

TITLE: Example Response for Querying Annotations - HTTP+JSON
DESCRIPTION: Shows a sample HTTP 200 response body after querying the annotation endpoint. The response contains an array of annotation JSON objects detailing id, alertId, dashboardId, dashboardUID, panelId, userId, time, tags, and other metadata. Useful for understanding the structure of annotation objects returned by the API.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n[\n    {\n        "id": 1124,\n        "alertId": 0,\n        "dashboardId": 468,\n        "dashboardUID": "uGlb_lG7z",\n        "panelId": 2,\n        "userId": 1,\n        "userName": "",\n        "newState": "",\n        "prevState": "",\n        "time": 1507266395000,\n        "timeEnd": 1507266395000,\n        "text": "test",\n        "metric": "",\n        "tags": [\n            "tag1",\n            "tag2"\n        ],\n        "data": {}\n    },\n    {\n        "id": 1123,\n        "alertId": 0,\n        "dashboardId": 468,\n        "dashboardUID": "jcIIG-07z",\n        "panelId": 2,\n        "userId": 1,\n        "userName": "",\n        "newState": "",\n        "prevState": "",\n        "time": 1507265111000,\n        "text": "test",\n        "metric": "",\n        "tags": [\n            "tag1",\n            "tag2"\n        ],\n        "data": {}\n    }\n]
```

----------------------------------------

TITLE: Searching for Dashboards with Specific Criteria in HTTP
DESCRIPTION: This HTTP GET request searches for dashboards using specific criteria. It uses the /api/search endpoint with query parameters for a search query, starred status, and tag filter.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder_dashboard_search.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
GET /api/search?query=Production%20Overview&starred=true&tag=prod HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Grouping and Aggregating with Metric Field for Wide Data Frames - SQL
DESCRIPTION: Demonstrates using the $__timeGroupAlias macro to aggregate by 5-minute intervals, applying SQL MIN() aggregation to 'value_double', and adds a hard-coded 'metric' label. For use with test_data in Grafana panel with wide data frame formatting. Depends on Grafana SQL macros.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_9

LANGUAGE: sql
CODE:
```
SELECT
  $__timeGroupAlias(time_date_time,'5m'),
  min(value_double),
  'min' as metric
FROM test_data
WHERE $__timeFilter(time_date_time)
GROUP BY time
ORDER BY time
```

----------------------------------------

TITLE: Docker Command to Launch Apache Authentication Proxy
DESCRIPTION: Docker command to run Apache HTTP server container with custom configuration and htpasswd file, linked to the Grafana container for authentication proxying.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
docker run -i -p 80:80 --link grafana:grafana -v $(pwd)/httpd.conf:/usr/local/apache2/conf/httpd.conf -v $(pwd)/htpasswd:/tmp/htpasswd httpd:2.4
```

----------------------------------------

TITLE: Updating an Organization via Grafana API (HTTP)
DESCRIPTION: Example HTTP PUT request to update an existing Grafana organization identified by `:orgId`. It sends a JSON payload containing the new organization name. This operation requires Basic Authentication and the `orgs:write` permission. Note that address fields are not currently implemented.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_22

LANGUAGE: http
CODE:
```
PUT /api/orgs/1 HTTP/1.1
Accept: application/json
Content-Type: application/json

{
  "name":"Main Org 2."
}
```

----------------------------------------

TITLE: Importing Plugins into Grafana Cloud via HTTP API - Shell
DESCRIPTION: This shell loop reads the plugins.json file created previously and issues an authenticated HTTP POST request via curl for each plugin to the Grafana Cloud instance. It dynamically constructs the stack identifier from the provided Grafana Cloud instance URL, extracting name and version from JSON. The access token (<GRAFANA_CLOUD_ACCESS_TOKEN>) must be set prior to execution. Dependencies: jq, curl, populated plugins.json, and a valid Grafana Cloud API token. Each attempt's response is echoed to the console for confirmation. Make sure to use correct variable values and ensure that plugins.json matches expected structure.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
CLOUD_INSTANCE=$GRAFANA_CLOUD_INSTANCE_URL

stack_slug="${CLOUD_INSTANCE#*//}"
stack_slug="${stack_slug%%.*}"
jq -c '.[]' plugins.json | while IFS= read -r plugin; do
  name=$(echo "$plugin" | jq -r '.name')
  version=$(echo "$plugin" | jq -r '.version')
  echo "Adding plugin $name with version $version to stack $stack_slug"
  response=$(curl -s -X POST "https://grafana.com/api/instances/$stack_slug/plugins" \
            -H "Authorization: Bearer <GRAFANA_CLOUD_ACCESS_TOKEN>" \
            -H "Content-Type: application/json" \
            -d "{\"plugin\": \"$name\", \"version\": \"$version\"}")
  echo "POST response for plugin $name version $version: $response"
done
```

----------------------------------------

TITLE: Kubernetes Playlist Creation Manifest - YAML
DESCRIPTION: This YAML manifest defines a Playlist custom resource for the Grafana app, with a metadata section using generateName, labels, annotations, and a detailed spec including title, interval, and items. Dependencies include the relevant CRD being available in the Kubernetes cluster. The spec's items array defines dashboard selection logic. Limitations: the generateName field must avoid boolean string values such as 'yes' or 'true' as they will be interpreted as booleans.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_7

LANGUAGE: yaml
CODE:
```
apiVersion: playlist.grafana.app/v0alpha1\nkind: Playlist\nmetadata:\n  generateName: x # anything is ok here... except yes or true -- they become boolean!\n  labels:\n    foo: bar\n  annotations:\n    grafana.app/slug: \"slugger\"\n    grafana.app/updatedBy: \"updater\"\nspec:\n  title: Playlist with auto generated UID\n  interval: 5m\n  items:\n  - type: dashboard_by_tag\n    value: panel-tests\n  - type: dashboard_by_uid\n    value: vmie2cmWz # dashboard from devenv
```

----------------------------------------

TITLE: Querying Time-Dependent Data for Templating Variable in PostgreSQL
DESCRIPTION: Illustrates a SQL query that uses a time filter macro to retrieve time-dependent data for a templating variable. This query is useful for creating dynamic variables based on the current time range.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_9

LANGUAGE: sql
CODE:
```
SELECT event_name FROM event_log WHERE $__timeFilter(time_column)
```

----------------------------------------

TITLE: Listing Organizations for a User via Grafana HTTP API (http)
DESCRIPTION: Provides an authenticated HTTP GET request format for retrieving all organizations associated with a user ID. Useful for management tools or dashboards showing user-role relationships and organization membership.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_10

LANGUAGE: http
CODE:
```
GET /api/users/1/orgs HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=
```

----------------------------------------

TITLE: Deleting SSO Settings for a Provider via HTTP API in HTTP
DESCRIPTION: Illustrates how to remove SSO settings for a provider with a HTTP DELETE request to /api/v1/sso-settings/:provider. The request must be authorized using a bearer token and requires 'settings:write' permission. On success, the server responds with an empty 204 status. Useful for reverting provider settings to defaults or removing unwanted provider configurations. Ensure proper error handling for cases where the provider's settings do not exist.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/sso-settings.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
DELETE /api/v1/sso-settings/azuread HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 204\nContent-Type: application/json
```

----------------------------------------

TITLE: Granting Reset Permission to Grafana Admin via YAML Provisioning - YAML Example
DESCRIPTION: This YAML snippet updates the 'basic:grafana_admin' basic role provisioning to grant the capability to reset basic roles by adding the 'roles:write' action with a specific escalation scope. Required prerequisites: access to configuration file, role versioning, understanding of RBAC scopes. Input is the YAML config; output is an updated role permission that can call the reset endpoint.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_9

LANGUAGE: yaml
CODE:
```
apiVersion: 2
roles:
  - name: 'basic:grafana_admin'
    global: true
    version: 3
    from:
      - name: 'basic:grafana_admin'
        global: true
    permissions:
      # Permission allowing to reset basic roles
      - action: 'roles:write'
        scope: 'permissions:type:escalate'

```

----------------------------------------

TITLE: Tagging Stable API Endpoints in Go Comments
DESCRIPTION: This Go comment demonstrates how to mark an API endpoint as stable. By adding the `stable` tag to the `swagger:route` directive, the endpoint is included in the `api.json` definition, which represents the publicly documented stable API surface. Endpoints without this tag are considered unstable and are only included in the `post.json` file.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/ngalert/api/tooling/README.md#2025-04-23_snippet_2

LANGUAGE: go
CODE:
```
// swagger:route GET /provisioning/contact-points provisioning stable RouteGetContactpoints
```

----------------------------------------

TITLE: Using $<varname> Syntax in SQL Queries
DESCRIPTION: SQL query example using the $<varname> syntax to incorporate a template variable named 'hostname' with the Grafana time filter macro.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/template-variables/index.md#2025-04-23_snippet_4

LANGUAGE: sql
CODE:
```
SELECT
  atimestamp time,
  aint value
FROM table
WHERE $__timeFilter(atimestamp) and hostname in($hostname)
ORDER BY atimestamp
```

----------------------------------------

TITLE: Configuring Grafana Plugin Application Settings using YAML
DESCRIPTION: This YAML example illustrates the configuration file structure for provisioning Grafana plugin applications. It defines a list under `apps`, where each entry configures a specific installed plugin (identified by `type`). Key settings include the target organization (`org_id` or `org_name`), enabled/disabled status (`disabled`), custom configuration data (`jsonData`), and encrypted sensitive configuration (`secureJsonData`). This allows automating plugin setup across Grafana instances.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md#2025-04-23_snippet_3

LANGUAGE: yaml
CODE:
```
apiVersion: 1

apps:
  # <string> the type of app, plugin identifier. Required
  - type: raintank-worldping-app
    # <int> Org ID. Default to 1, unless org_name is specified
    org_id: 1
    # <string> Org name. Overrides org_id unless org_id not specified
    org_name: Main Org.
    # <bool> disable the app. Default to false.
    disabled: false
    # <map> fields that will be converted to json and stored in jsonData. Custom per app.
    jsonData:
      # key/value pairs of string to object
      key: value
    # <map> fields that will be converted to json, encrypted and stored in secureJsonData. Custom per app.
    secureJsonData:
      # key/value pairs of string to string
      key: value
```

----------------------------------------

TITLE: Linking to Grafana Playground Example for Pie Charts
DESCRIPTION: Uses a Hugo shortcode (`docs/play`) to embed a link to a pre-configured Grafana Play dashboard. This allows users to interactively explore an example featuring bar and pie charts.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
{{< docs/play title="Grafana Bar Charts and Pie Charts" url="https://play.grafana.org/d/ktMs4D6Mk/" >}}
```

----------------------------------------

TITLE: Querying Graphite Apps for Chained Variables
DESCRIPTION: This Graphite query returns all applications for use in a parent variable of a chained variable setup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_2

LANGUAGE: graphite
CODE:
```
apps.*
```

----------------------------------------

TITLE: Configuring Nested Attribute Paths for JWT Login
DESCRIPTION: Configuration for accessing nested attributes in JWT structure using JMESPath syntax to extract username and email values.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
# [auth.jwt]
# ...

# Specify a nested attribute to use as a username to sign in.
username_attribute_path = user.username # user's login is johndoe

# Specify a nested attribute to use as an email to sign in.
email_attribute_path = user.emails[1] # user's email is professional@email.com
```

----------------------------------------

TITLE: Representing SQL-like Data for Outer Join (Students Table)
DESCRIPTION: This Markdown table shows sample data representing a 'Students' table, used as input for an outer join example with SQL-like data. It includes columns for StudentID, Name, and Major.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_24

LANGUAGE: markdown
CODE:
```
| StudentID | Name     | Major            |
| --------- | -------- | ---------------- |
| 1         | John     | Computer Science |
| 2         | Emily    | Mathematics      |
| 3         | Michael  | Physics          |
| 4         | Jennifer | Chemistry        |
```

----------------------------------------

TITLE: Visualizing Issue Triage Process with ASCII Flowchart
DESCRIPTION: ASCII flowchart diagram showing the complete issue triage workflow for Grafana, including decision points for information completeness, issue duplication, reproducibility, and priority assignment.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/ISSUE_TRIAGE.md#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
                         +-------------------+
                        |                   |
                        |  new issue/       |                                                                             +
                        |  more info added  |
                        |                   |
                        +---------|---------+
                                  |
                    +-------------|-----------+
                    |                         |
        NO   +-------  all info needed to     ------+  YES
             |      |  categorize the issue?  |     |
             |      |                         |     |
             |      +-------------------------+     |
      +------|-----------+             +------------|----------+
      |                  |             |                       |
      | label:           |             |  label: type/*        |
      | needs more info  |             |  label: area/*        |
      |                  |             |  label: datasource/*  |
      +------------------+             |            |          |
                                       +------------|----------+
                                                    |
                                           +--------|-------+
                                           |                |
                             NO  +---------- is duplicate?  --------------------+ YES
                                 |         |                |                   |
                                 |         +----------------+                   |
                                 |                             +----------------|---------------+
                          +------|-----+                       |                                |
                          |            |                       |  add comment:                  |
          NO  +------------ can repro? ------------+  YES      |                                |
              |           |            |           |           |  /duplicate of #<issue number> |
              |           +------------+           |           |                                |
              |                                    |           +--------------------------------+
+-------------|-------------+                      |
|                           |             +--------|---------+
| label:                    |             |                  |
| triage/needs-confirmation |  NO +-------- needs priority?  ------+ YES
|                           |     |       |                  |     |
+-------------|-------------+     |       +------------------+     |
              |                   |                                |
+-------------|------+    +-------|--------+            +----------|---------+
|                    |    |                |            |                    |
| Assign to project  ------     Done       -------------- label: priority/*  |
|                    |    |                |            |                    |
+--------------------+    +----------------+            +--------------------+
```

----------------------------------------

TITLE: Receiving Success Response After PATCH User Preferences - JSON
DESCRIPTION: HTTP response message indicating successful PATCH update of user preferences. Returns a simple JSON message confirming the operation, suitable for client-side acknowledgment or UI feedback.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{"message":"Preferences updated"}
```

----------------------------------------

TITLE: Using Environment Variables in ldap.toml (Bash)
DESCRIPTION: This snippet demonstrates how to use environment variable expansion within the `ldap.toml` file. By using the `${VAR_NAME}` syntax, sensitive information like the `bind_password` can be sourced from environment variables at runtime, improving security by avoiding hardcoded credentials in configuration files.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
```bash
bind_password = "${LDAP_ADMIN_PASSWORD}"
```
```

----------------------------------------

TITLE: Basic Usage of RadioButtonGroup with Grafana UI (JSX)
DESCRIPTION: Demonstrates how to import the RadioButtonList from @grafana/ui and use the RadioButtonGroup component with options, value, and onChange handler. Required dependency is the @grafana/ui package. Key props include options (list of choices), value (currently selected), and onChange (handler for selection changes). Input is an options array, output is a rendered group of radio buttons that allow single selection.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/RadioButtonList/RadioButtonList.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { RadioButtonList } from '@grafana/ui';

<RadioButtonGroup options={...} value={...} onChange={...} />

```

----------------------------------------

TITLE: Configuring Feature Toggles in Grafana's custom.ini
DESCRIPTION: This snippet shows the necessary changes to the custom.ini file to enable the Kubernetes Aggregator, Data Plane Aggregator, and API Server kubectl access features in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/aggregator/README.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[feature_toggles]
kubernetesAggregator = true
dataplaneAggregator = true
grafanaAPIServerEnsureKubectlAccess = true
```

----------------------------------------

TITLE: Using InfluxDB Explore-Generated Flux Queries in Grafana
DESCRIPTION: Demonstrates a Flux query structure typically generated by the InfluxDB UI's Data Explorer. Users build a query visually in InfluxDB, copy the generated Flux script from the Script Editor, and paste it into a Grafana panel's query editor associated with an InfluxDB-Flux data source. This allows leveraging InfluxDB's query building tools for visualization in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-influxdb.md#2025-04-23_snippet_1

LANGUAGE: flux
CODE:
```
// Example structure of Flux code generated by InfluxDB Explore
from(bucket: "your-bucket-name")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "your-measurement")
  |> filter(fn: (r) => r["_field"] == "your-field")
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "mean")
```

----------------------------------------

TITLE: Defining Plugins with YAML in Grafana Helm values.yaml - YAML
DESCRIPTION: This YAML snippet defines plugin installation in the Grafana Helm Chart by updating the plugins section in values.yaml. It lists plugin identifiers to be installed automatically upon deployment using Helm. Ensure correct indentation and use unique plugin IDs. Expected input is a list of plugin names. No explicit dependencies other than a functioning values.yaml and a proper Helm release.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_14

LANGUAGE: yaml
CODE:
```
.......
............
......
plugins:
# here we are installing two plugins, make sure to keep the indentation correct as written here.

- alexanderzobnin-zabbix-app
- grafana-clock-panel
.......
............
......
```

----------------------------------------

TITLE: Using the is_number Function in Grafana Expressions
DESCRIPTION: Demonstrates the `is_number` function, which checks if a value is a real number. It returns 1 for real numbers and 0 for non-real values like null, Inf+, Inf-, and NaN.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_10

LANGUAGE: Grafana Expressions
CODE:
```
is_number($A)
```

----------------------------------------

TITLE: Initializing Greeter with Message in Go
DESCRIPTION: Defines an initializer for the Greeter struct that takes a Message as a parameter and assigns it to the Greeter's Message field.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_2

LANGUAGE: go
CODE:
```
func NewGreeter(m Message) Greeter {
    return Greeter{Message: m}
}

type Greeter struct {
    Message Message // <- adding a Message field
}
```

----------------------------------------

TITLE: Adding Multiple Age Public Keys to Grafana Configuration (INI)
DESCRIPTION: This example configuration shows how to specify multiple 'age' public keys in the `public_keys` setting, separated by whitespace. When multiple keys are provided, the generated support bundle can be decrypted by the holder of any corresponding private key.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/troubleshooting/support-bundles/index.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
[support_bundles]
public_keys = "age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p age1yu8vzu554pv3klw46yhdv4raz36k5w3vy30lpxn46923lqngudyqvxacer"
```

----------------------------------------

TITLE: Configuring NGINX Server Section for Loki Live Tailing
DESCRIPTION: This NGINX server section configuration handles both WebSocket connections for Loki live tailing and standard HTTP requests to Grafana. It properly sets headers for WebSocket upgrades and forwards requests to a local Grafana instance.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/loki/query-editor/index.md#2025-04-23_snippet_3

LANGUAGE: nginx
CODE:
```
  location ~ /(api/datasources/proxy/\d+/loki/api/v1/tail) {
      proxy_pass          http://localhost:3000$request_uri;
      proxy_set_header    Host              $host;
      proxy_set_header    X-Real-IP         $remote_addr;
      proxy_set_header    X-Forwarded-for   $proxy_add_x_forwarded_for;
      proxy_set_header    X-Forwarded-Proto "https";
      proxy_set_header    Connection        $connection_upgrade;
      proxy_set_header    Upgrade           $http_upgrade;
  }

  location / {
      proxy_pass          http://localhost:3000/;
      proxy_set_header    Host              $host;
      proxy_set_header    X-Real-IP         $remote_addr;
      proxy_set_header    X-Forwarded-for   $proxy_add_x_forwarded_for;
      proxy_set_header    X-Forwarded-Proto "https";
  }
```

----------------------------------------

TITLE: Representing SQL-like Data for Inner Join (Enrollments Table)
DESCRIPTION: This Markdown table presents sample data for an 'Enrollments' table, intended to be joined with the 'Students' table using an inner join based on 'StudentID'. It contains columns for StudentID, CourseID, and Grade.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_19

LANGUAGE: markdown
CODE:
```
| StudentID | CourseID | Grade |
| --------- | -------- | ----- |
| 1         | CS101    | A     |
| 1         | CS102    | B     |
| 2         | MATH201  | A     |
| 3         | PHYS101  | B     |
| 5         | HIST101  | B     |
```

----------------------------------------

TITLE: Updating Grafana Library Element via API (HTTP)
DESCRIPTION: This snippet demonstrates an example HTTP PATCH request to update an existing Grafana library element identified by its UID (`nErXDvCkzz`). It includes required headers like `Accept`, `Content-Type`, and `Authorization` (with a bearer token). The request body contains the fields to be updated, such as `name`, `kind`, and the current `version` for optimistic locking.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_10

LANGUAGE: http
CODE:
```
PATCH /api/library-elements/nErXDvCkzz HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "name": "Renamed library panel",
  "kind": 1,
  "version": 1
}
```

----------------------------------------

TITLE: Formatting Simplified Alert Data as JSON in Go Template
DESCRIPTION: This Go template, named `webhook.custom.simple_alerts`, processes a slice of Grafana alerts provided as context (`.`). It iterates through the alerts using `range`, extracts key fields (Status, Labels, StartsAt, EndsAt) into a dictionary using `coll.Dict`, appends each dictionary to a slice using `coll.Append`, and finally formats the resulting slice into a JSON array string using `data.ToJSON`. This template is designed to be embedded within other Go templates using `tmpl.Exec`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/example-custom-json-payload.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
{{- /* Embed json templates in other json templates. */ -}}
{{ define "webhook.custom.simple_alerts" -}}
  {{- $alerts := coll.Slice -}}
  {{- range . -}}
    {{ $alerts = coll.Append (coll.Dict
    "status" .Status
    "labels" .Labels
    "startsAt" .StartsAt
    "endsAt" .EndsAt
    ) $alerts}}
  {{- end -}}
  {{- $alerts | data.ToJSON -}}
{{- end }}
```

----------------------------------------

TITLE: Generating an Age Encryption Key Pair (Bash)
DESCRIPTION: This command uses the 'age' tool to generate a new cryptographic key pair suitable for encrypting Grafana support bundles. The private key is saved to `key.txt`, and the corresponding public key is printed to standard output. The public key needs to be added to the Grafana configuration for encryption.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/troubleshooting/support-bundles/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ age-keygen -o key.txt
Public key: age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p
```

----------------------------------------

TITLE: Decrypting an Age-Encrypted Support Bundle (Bash)
DESCRIPTION: This command uses the 'age' tool to decrypt a Grafana support bundle (`.tar.gz.age` file) that was previously encrypted. It requires the private key file (`-i keyfile`) corresponding to one of the public keys used for encryption and specifies the output file name (`-o output.tar.gz`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/troubleshooting/support-bundles/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
age --decrypt -i keyfile -o output.tar.gz downloaded.tar.gz.age
```

----------------------------------------

TITLE: Configuring Grafana License Validation via grafana.ini (INI)
DESCRIPTION: This configuration snippet, placed within the `[enterprise]` section of the `grafana.ini` file, sets the `license_validation_type` parameter to `aws`. This instructs Grafana Enterprise to validate its license against AWS License Manager instead of the default Grafana Labs validation service. This is one of the two methods to configure the validation type.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-instance-outside-aws/index.md#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
[enterprise]
license_validation_type=aws
```

----------------------------------------

TITLE: Implementing a Basic DatePicker in React/TSX
DESCRIPTION: This example shows how to integrate the `DatePicker` component from `@grafana/ui` into a React application. It utilizes the `useState` hook to manage the selected date and the visibility state (`isOpen`) of the date picker. A `Button` component is used to toggle the date picker's display, and the `onChange` and `onClose` props are used to update the date state and close the picker, respectively.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/DateTimePickers/DatePicker/DatePicker.mdx#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import { useState } from 'react';
import { DatePicker, Button } from '@grafana/ui';

const [date, setDate] = useState<Date>(new Date());
const [open, setOpen] = useState(false);

return (
  <>
    <Button onClick={() => setOpen(true)}>Show Calendar</Button>
    <DatePicker isOpen={open} value={date} onChange={(newDate) => setDate(newDate)} onClose={() => setOpen(false)} />
  </>
);
```

----------------------------------------

TITLE: Displaying URLs for Runbooks and Alert Data in Grafana-Managed Alerts
DESCRIPTION: This template displays URL links specific to Grafana-managed alerts, including dashboard URLs, panel URLs, alert generator URLs, silence URLs, and runbook URLs from annotations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_16

LANGUAGE: go
CODE:
```
{{ define "custom.alert_additional_details" -}}
{{ len .Alerts.Resolved }} resolved alert(s)
{{ range .Alerts.Resolved -}}
  {{ template "alert.additional_details" . -}}
{{ end }}
{{ len .Alerts.Firing }} firing alert(s)
{{ range .Alerts.Firing -}}
  {{ template "alert.additional_details" . -}}
{{ end -}}
{{ end -}}
{{ define "alert.additional_details" }}
- Dashboard: {{ .DashboardURL }}
- Panel: {{ .PanelURL }}
- AlertGenerator: {{ .GeneratorURL }}
- Silence: {{ .SilenceURL }}
- RunbookURL: {{ .Annotations.runbook_url}}
{{ end -}}
```

----------------------------------------

TITLE: HTTP Success Bulk Updating Team Roles - Grafana Access Control - JSON
DESCRIPTION: Depicts a successful JSON response after bulk updating a team's role assignments. Returns a confirmation message in a JSON object, sent with HTTP 200 OK and content type of JSON.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_39

LANGUAGE: json
CODE:
```
{
    "message": "Team roles have been updated."
}
```

----------------------------------------

TITLE: Setting Default Button Type in Grafana UI Component (JSX)
DESCRIPTION: Specifies the default `type` attribute for the `<Button>` component within the `grafana/ui` library as `"button"`. This change, referenced in pull request #48183, prevents buttons from unintentionally submitting forms by default when placed within a form element.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-9-0-0.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
type="button"
```

----------------------------------------

TITLE: Grafana Label Matcher Examples
DESCRIPTION: Provides specific examples of Grafana label matchers using different operators (`=`, `!=`, `=~`, `!~`) applied to the example label set `{ foo=bar, baz=qux, id=12 }`. These demonstrate positive and negative equality matching as well as regular expression matching.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/how_label_matching_works.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
foo=bar
```

LANGUAGE: plaintext
CODE:
```
foo!=bar
```

LANGUAGE: plaintext
CODE:
```
id=~[0-9]+
```

LANGUAGE: plaintext
CODE:
```
baz!~[0-9]+
```

----------------------------------------

TITLE: Defining Role and Folder Relations in OpenFGA Schema
DESCRIPTION: This code snippet presents an excerpt from the OpenFGA schema definition language. It defines the 'role' type with an 'assignee' relation (allowing roles to be assigned to users, team members, or other roles) and the 'folder' type with 'parent' and 'read' relations. The 'read' relation on a folder illustrates how access can be granted directly, inherited from a parent folder ('read from parent'), or granted via role assignment ('role#assignee').
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_9

LANGUAGE: text
CODE:
```
type role
  relations
    define assignee: [user, team#member, role#assignee]

type folder
  relations
    define parent: [folder]

    define read: [user, team#member, role#assignee] or view or read from parent
```

----------------------------------------

TITLE: Setting HTTP Service Port - JSON
DESCRIPTION: Configures the listening port for the renderer's HTTP server in the JSON file. Setting to 0 will automatically pick an unused port, while the default is 8081.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_12

LANGUAGE: json
CODE:
```
{
  "service": {
    "port": 0
  }
}
```

----------------------------------------

TITLE: Defining a Grafana Plugin Manifest in JSON
DESCRIPTION: This JSON object serves as the manifest file within a PGP signed message for a Grafana plugin. It defines crucial metadata: `manifestVersion` (2.0.0), `signatureType` (grafana), signing organization details (`signedByOrg`, `signedByOrgName`), the unique plugin identifier (`plugin`: "myorgid-simple-app"), a version placeholder (`%VERSION%`), a timestamp (`time`), the signing key ID (`keyId`), and a `files` object mapping filenames to their SHA512 checksums. This manifest is essential for Grafana to validate and load the plugin.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/app-with-child/dist/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "rootUrls": [],
  "plugin": "myorgid-simple-app",
  "version": "%VERSION%",
  "time": 1642614241713,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "1abecfd0229814f6c284ff3c8dd744548f8d676ab3250cd7902c99dabf11480e",
    "child/plugin.json": "66ba0dffaf3b1bfa17eb9a8672918fc66d1001f465b1061f4fc19c2f2c100f51"
  }
}
```

----------------------------------------

TITLE: Creating Grafana YUM/DNF Repository File in Bash
DESCRIPTION: Defines the content for a YUM/DNF repository configuration file located at `/etc/yum.repos.d/grafana.repo`. This file configures the system's package manager to use the official Grafana RPM repository, enabling installation and updates via `dnf` or `yum`. It specifies the repository name, base URL, GPG check settings, and the location of the imported GPG key.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
[grafana]
name=grafana
baseurl=https://rpm.grafana.com
repo_gpgcheck=1
enabled=1
gpgcheck=1
gpgkey=https://rpm.grafana.com/gpg.key
sslverify=1
sslcacert=/etc/pki/tls/certs/ca-bundle.crt
```

----------------------------------------

TITLE: Forwarding Port to Grafana Pod with Kubectl (Bash)
DESCRIPTION: Establishes port forwarding using `kubectl port-forward`. It maps a local port (3000) to the target port (3000) on a specific Grafana pod (identified by name, e.g., 'grafana-58445b6986-dxrrw') within the 'my-grafana' namespace. The `--address 0.0.0.0` flag makes the forwarded port accessible on all local network interfaces.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_15

LANGUAGE: bash
CODE:
```
kubectl port-forward pod/grafana-58445b6986-dxrrw --namespace=my-grafana --address 0.0.0.0 3000:3000
```

----------------------------------------

TITLE: Starting Grafana Service with systemd (Linux)
DESCRIPTION: Reloads the systemd daemon configuration and starts the Grafana server service. This is used on Linux systems configured with systemd after installation via APT or .deb package.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
sudo systemctl daemon-reload
sudo systemctl start grafana-server
```

----------------------------------------

TITLE: Listing External Groups for a Team Response Example in JSON
DESCRIPTION: Shows the JSON array returned by the Team Sync GET endpoint, listing all external groups assigned to the team. Each object contains the organization ID, team ID, and LDAP-style groupId string. Output is returned on success (HTTP 200) and is limited to available groups for the team.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team_sync.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
[\n  {\n    \"orgId\": 1,\n    \"teamId\": 1,\n    \"groupId\": \"cn=editors,ou=groups,dc=grafana,dc=org\"\n  }\n]
```

----------------------------------------

TITLE: Configuring Playwright Project for MySQL Plugin Tests in TypeScript
DESCRIPTION: This code snippet demonstrates how to add a new Playwright project configuration for MySQL plugin tests. It sets up the test directory, specifies Chrome as the testing browser, and configures authentication for admin access.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e-plugins.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
{
  name: 'mysql',
  testDir: path.join(testDirRoot, '/mysql'),
  use: {
    ...devices['Desktop Chrome'],
    storageState: 'playwright/.auth/admin.json',
  },
  dependencies: ['authenticate'],
}
```

----------------------------------------

TITLE: Starting Grafana Stack with Docker Compose (Standard)
DESCRIPTION: This shell command uses Docker Compose (modern syntax) to build, (re)create, start, and attach to containers for a service, running them in detached mode (`-d`). This command is intended for standard local setups but is marked to be ignored in the interactive tutorial environment.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
docker compose up -d
```

----------------------------------------

TITLE: Non-Real Number Values in Grafana Expressions
DESCRIPTION: Lists the values considered non-real numbers by the `is_number` function: null, positive infinity, negative infinity, and NaN.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_11

LANGUAGE: Grafana Expressions
CODE:
```
null
```

LANGUAGE: Grafana Expressions
CODE:
```
Inf+
```

LANGUAGE: Grafana Expressions
CODE:
```
Inf-
```

LANGUAGE: Grafana Expressions
CODE:
```
NaN
```

----------------------------------------

TITLE: Starting Grafana Server using Binary (macOS)
DESCRIPTION: Executes the Grafana server binary directly on macOS. Requires navigating to the installation directory and running the command from the terminal. Used for standalone macOS binary installations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_16

LANGUAGE: bash
CODE:
```
./bin/grafana server
```

----------------------------------------

TITLE: Moving Unpacked Grafana Binary to Installation Directory - Shell
DESCRIPTION: Moves the unpacked Grafana binary distribution to /usr/local/grafana for standard system-wide usage. Prerequisite: Extracted binary from tar.gz archive. Input: Path to extracted files. Output: Files located at /usr/local/grafana. Replace <DOWNLOAD PATH> as appropriate.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_8

LANGUAGE: shell
CODE:
```
sudo mv <DOWNLOAD PATH> /usr/local/grafana
```

----------------------------------------

TITLE: Searching TraceQL by Trace ID
DESCRIPTION: Example of querying a specific trace using its trace ID in the TraceQL editor
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/datasources/tempo-editor-traceql.md#2025-04-23_snippet_0

LANGUAGE: traceql
CODE:
```
41928b92edf1cdbe0ba6594baee5ae9
```

----------------------------------------

TITLE: Including Shared Documentation using Hugo Shortcode
DESCRIPTION: This Hugo shortcode includes content from a separate shared file (`manage-users/view-server-org-list.md`) within the Grafana documentation source, potentially specific to a Grafana version (`<GRAFANA VERSION>`). This promotes content reuse and modularity in the documentation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/manage-users/view-server-org-list-and-edit.md#2025-04-23_snippet_1

LANGUAGE: hugo
CODE:
```
{{< docs/shared lookup="manage-users/view-server-org-list.md" source="grafana" version="<GRAFANA VERSION>" >}}
```

----------------------------------------

TITLE: Visualizing Distortion Handler Flow in Grafana Plugin Sandbox
DESCRIPTION: Sequence diagram showing the interaction flow between Incubator Realm, Distortion Handler, and Child Window during a fetch request from a sandboxed plugin. Illustrates how distortions intercept and modify API calls.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/plugins/sandbox/README.md#2025-04-23_snippet_0

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant blue as Incubator Realm
    participant proxy as DistortionHandler
    participant red as Child Window
    blue ->> red: Handle (onClick)
    red ->> red: run handleClick
    Note right of red: handleClick tries to<br> run a fetch() request
    red ->> proxy: get fetch function
    Note over red, proxy: This is not the fetch call itself, this is<br>"give me the function object I'll use<br> when I call fetch"
    proxy ->> blue: should distord [fetch] ?
    blue ->> proxy: use [distortedFetch]
    proxy ->> red: use [distortedFetch] (modified object)
    Note over red, proxy: Returns a function that will<br> be called as the "fetch" function
    red ->> red: run fetch
    Note right of red: Code runs a fetch() request<br> using the distorted fetch function
```

----------------------------------------

TITLE: Checking Current Shell Resource Limits (Bash)
DESCRIPTION: Executes the `ulimit -a` command to display all current resource limits applied to the shell session. This is particularly useful for diagnosing 'Too many open files' errors by checking the 'open files' limit reported.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
ulimit -a
```

----------------------------------------

TITLE: Tagging a promlib Version using Git Commands
DESCRIPTION: This sequence of Git commands is used to tag a specific commit as a new version for the promlib package within the Grafana repository. First, it checks out the desired commit using its SHA. Then, it creates a lightweight tag following the pattern 'pkg/promlib/<VERSION>'. Finally, it pushes this specific tag to the 'origin' remote repository. No release action is needed; tagging is sufficient for the Go module registry.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/promlib/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
git checkout <COMMIT_SHA>
```

LANGUAGE: bash
CODE:
```
git tag pkg/promlib/<VERSION>
```

LANGUAGE: bash
CODE:
```
git push origin pkg/promlib/<VERSION>
```

----------------------------------------

TITLE: Implementing Controlled Sorting in InteractiveTable with TSX
DESCRIPTION: This TSX snippet illustrates how to implement controlled sorting (e.g., server-side sorting) in the `InteractiveTable`. It uses the `useState` hook to manage the table data and the `useCallback` hook to memoize the `fetchData` function. The `fetchData` function receives sorting arguments (`sortBy`) and is responsible for fetching or calculating the newly sorted data, then updating the state using `setData`. A `setTimeout` simulates an asynchronous operation like an API call. The `InteractiveTable` is configured with this `fetchData` prop to handle sorting externally.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InteractiveTable/InteractiveTable.mdx#2025-04-23_snippet_5

LANGUAGE: tsx
CODE:
```
interface WithPaginationData {
  id: string;
  firstName: string;
  lastName: string;
  car: string;
  age: number;
}

export const WithControlledSort: StoryFn<typeof InteractiveTable> = (args) => {
  const columns: Array<Column<WithPaginationData>> = [
    { id: 'firstName', header: 'First name', sortType: 'string' },
    { id: 'lastName', header: 'Last name', sortType: 'string' },
    { id: 'car', header: 'Car', sortType: 'string' },
    { id: 'age', header: 'Age' },
  ];
  const [data, setData] = useState(pageableData);

  // In production the function will most likely make an API call to fetch the sorted data
  const fetchData = useCallback(({ sortBy }: FetchDataArgs<WithPaginationData>) => {
    if (!sortBy?.length) {
      return setData(pageableData);
    }

    setTimeout(() => {
      const newData = [...pageableData];
      newData.sort((a, b) => {
        const sort = sortBy[0];
        const aData = a[sort.id as keyof Omit<WithPaginationData, 'age'>];
        const bData = b[sort.id as keyof Omit<WithPaginationData, 'age'>];
        if (sort.desc) {
          return bData.localeCompare(aData);
        }
        return aData.localeCompare(bData);
      });
      setData(newData);
    }, 300);
  }, []);

  return <InteractiveTable columns={columns} data={data} getRowId={(r) => r.id} pageSize={15} fetchData={fetchData} />;
};
```

----------------------------------------

TITLE: Multi-Value Variables in Tag Queries with Regex Formatting
DESCRIPTION: Example of using regex formatting with a multi-value variable in a tag query. This pattern uses the Equal Tilde operator with the advanced variable formatting syntax.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/template-variables/index.md#2025-04-23_snippet_1

LANGUAGE: text
CODE:
```
server=~${servers:regex}
```

----------------------------------------

TITLE: Configuring Auth Proxy Headers in Grafana
DESCRIPTION: Configuration setting for defining custom headers to sync user attributes in Grafana's auth proxy setup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_9

LANGUAGE: properties
CODE:
```
headers = "Groups:X-WEBAUTH-GROUPS"
```

----------------------------------------

TITLE: Listing Installed Grafana Plugins (Bash)
DESCRIPTION: Uses the 'plugins ls' command to list all Grafana plugins currently installed in the configured plugins directory.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_15

LANGUAGE: bash
CODE:
```
grafana cli plugins ls
```

----------------------------------------

TITLE: Creating Annotation Using Graphite-Compatible Format - HTTP+JSON
DESCRIPTION: Demonstrates how to submit an annotation in Graphite's event format using a POST request. The JSON body requires 'what', 'tags', and optionally 'when' and 'data'. Tags can be an array or a string and the API will use the current time if 'when' is not provided. The endpoint confirms annotation creation with a message and generated id.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
POST /api/annotations/graphite HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n  "what": "Event - deploy",\n  "tags": ["deploy", "production"],\n  "when": 1467844481,\n  "data": "deploy of main branch happened at Wed Jul 6 22:34:41 UTC 2016"\n}
```

----------------------------------------

TITLE: Querying Single Dimension Time Series Data in SQL
DESCRIPTION: This SQL query demonstrates retrieving time series data with a single dimension from a table 'T'. It aggregates 'Temperature' into hourly buckets ('BUCKET(StartTime, 1h)') and calculates the average ('AVG(Temperature)'), grouping the results by both the time bucket and the 'Location' column. The 'Location' column serves as the dimension, allowing Grafana to distinguish between time series for different locations (e.g., 'Temp {Location=LGA}', 'Temp {Location=BOS}'). The results are ordered by time.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/fundamentals/timeseries-dimensions/index.md#2025-04-23_snippet_0

LANGUAGE: sql
CODE:
```
SELECT BUCKET(StartTime, 1h), AVG(Temperature) AS Temp, Location FROM T
  GROUP BY BUCKET(StartTime, 1h), Location
  ORDER BY time asc
```

----------------------------------------

TITLE: Defining Grafana Plugin Manifest Schema - JSON
DESCRIPTION: This JSON snippet defines the schema and metadata for a Grafana plugin, specifying version, signature details, plugin identity, timestamp, signing key, and checksums for constituent files. Dependencies include a valid JSON parser and OpenPGP-compliant tools to generate and verify signatures. The manifest input is a strict JSON object; output is used for validation processes or distribution checks.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/invalid-v2-extra-file/plugin/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "plugin": "test",
  "version": "1.0.0",
  "time": 1605807330546,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "2bb467c0bfd6c454551419efe475b8bf8573734e73c7bab52b14842adb62886f"
  }
}
```

----------------------------------------

TITLE: Viewing Deployment Rollout History with Kubectl (Bash)
DESCRIPTION: Executes `kubectl rollout history` to display the revision history for the specified deployment ('grafana') within the given namespace ('my-grafana'). This command is used multiple times: initially to see the first deployment, after annotations to see change causes, before a rollback to list revisions, and after a rollback to verify the history.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_16

LANGUAGE: bash
CODE:
```
kubectl rollout history deployment/grafana --namespace=my-grafana
```

LANGUAGE: bash
CODE:
```
kubectl rollout history deployment/grafana --namespace=my-grafana
```

LANGUAGE: bash
CODE:
```
kubectl rollout history deployment grafana --namespace=my-grafana
```

LANGUAGE: bash
CODE:
```
kubectl rollout history deployment grafana --namespace=my-grafana
```

LANGUAGE: bash
CODE:
```
kubectl rollout history deployment grafana --namespace=my-grafana
```

----------------------------------------

TITLE: Disabling Grafana Organization/Role Synchronization via SAML
DESCRIPTION: This INI configuration snippet sets the `skip_org_role_sync` option to `true` within the `[auth.saml]` section. When enabled, Grafana will ignore role and organization membership information from the SAML assertion during login, preventing it from overwriting any manual changes made within Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_11

LANGUAGE: ini
CODE:
```
[auth.saml]
skip_org_role_sync = true
```

----------------------------------------

TITLE: Starting Grafana Stack with Docker Compose (Interactive Environment)
DESCRIPTION: This bash command uses docker-compose (legacy syntax) to start the Grafana stack services defined in a docker-compose.yml file in detached mode (`-d`). This specific command is intended for execution within the interactive Killercoda learning environment.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
docker-compose up -d
```

----------------------------------------

TITLE: Example Variable Query Results for Different User Selections
DESCRIPTION: Sample InfluxDB queries that would be generated based on different user selections of datacenter and host variables, showing how variable substitution works in practice.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
SHOW TAG VALUES WITH KEY = "cpu" WHERE "datacenter" =~ /^America/ AND "host" =~ /^server2/
SHOW TAG VALUES WITH KEY = "cpu" WHERE "datacenter" =~ /^Africa/ AND "host" =~ /^server/7/
SHOW TAG VALUES WITH KEY = "cpu" WHERE "datacenter" =~ /^Europe/ AND "host" =~ /^server3+server4/
```

----------------------------------------

TITLE: Creating Self-Signed Certificate using OpenSSL (Bash)
DESCRIPTION: Uses the `openssl x509` command with the `-req`, `-days`, `-in`, `-signkey`, and `-out` flags to create a self-signed X.509 certificate file named `grafana.crt` in `/etc/grafana/`. The certificate is generated from the CSR (`grafana.csr`), signed with the private key (`grafana.key`), and is valid for 365 days. Requires `openssl`, the CSR file, and the private key file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
sudo openssl x509 -req -days 365 -in /etc/grafana/grafana.csr -signkey /etc/grafana/grafana.key -out /etc/grafana/grafana.crt
```

----------------------------------------

TITLE: Including Shared Standard Options Documentation (Hugo Shortcode)
DESCRIPTION: Uses a Hugo shortcode (`docs/shared`) to embed a reusable documentation section covering standard options applicable to many Grafana visualizations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_9

LANGUAGE: markdown
CODE:
```
{{< docs/shared lookup="visualizations/standard-options.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Configuring Apache2 for WebSocket Proxying for Loki Live Tailing
DESCRIPTION: This configuration allows Apache2 to proxy WebSocket connections between the browser and Grafana server for Loki's live tailing feature. It uses ProxyPassMatch to route requests with the specific Loki tail API pattern to the Grafana server running on localhost:3000.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/loki/query-editor/index.md#2025-04-23_snippet_1

LANGUAGE: apache
CODE:
```
ProxyPassMatch "^/(api/datasources/proxy/\d+/loki/api/v1/tail)" "ws://127.0.0.1:3000/$1"
```

----------------------------------------

TITLE: Updating Playlist via kubectl patch - Shell
DESCRIPTION: This shell command updates an existing Playlist custom resource. It uses the 'patch' subcommand with a patch file and target resource name. The correct playlist name must be provided, and the patch file should have the new desired resource definition. Requires access to the kubeconfig and appropriate RBAC permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_11

LANGUAGE: sh
CODE:
```
kubectl --kubeconfig=./grafana.kubeconfig patch playlist <NAME> --patch-file playlist-generate.yaml
```

----------------------------------------

TITLE: Example Input Data Frame (Query A) for Concatenate Fields Transformation
DESCRIPTION: This table represents example input data (Query A) containing temperature and uptime information, intended to be used with the 'Concatenate fields' transformation in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_1

LANGUAGE: text
CODE:
```
| Temp | Uptime  |
| ---- | ------- |
| 15.4 | 1230233 |
```

----------------------------------------

TITLE: Example Field Mapping Configuration for Value Mappings
DESCRIPTION: This table demonstrates how to configure the field mapping within the 'Config from query results' transformation to use the configuration query result (shown previously) for generating value mappings. It maps the 'Value', 'Text', and 'Color' fields from the config query to the corresponding value mapping properties.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_8

LANGUAGE: text
CODE:
```
| Field | Use as                 | Select     |
| ----- | ---------------------- | ---------- |
| Value | Value mappings / Value | All values |
| Text  | Value mappings / Text  | All values |
| Color | Value mappings / Color | All values |
```

----------------------------------------

TITLE: Defining Hidden Global Custom Roles in Grafana Provisioning - YAML
DESCRIPTION: This YAML snippet creates a hidden global custom role in Grafana by setting the 'global' and 'hidden' fields to true. The role includes permissions for reading, writing, and creating users, and will not appear in the role picker UI. Dependencies are the Grafana provisioning system and correct configuration file placement. Input parameters specify global scope and hidden status; output is a hidden global role available across organizations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_3

LANGUAGE: yaml
CODE:
```
# config file version\napiVersion: 2\n\nroles:\n  - name: custom:users:writer\n    description: 'List, create, or update other users.'\n    version: 1\n    global: true\n    hidden: true\n    permissions:\n      - action: 'users:read'\n        scope: 'global.users:*'\n      - action: 'users:write'\n        scope: 'global.users:*'\n      - action: 'users:create'\n
```

----------------------------------------

TITLE: Selecting Reusable Rendering Mode - JSON
DESCRIPTION: Configures the renderer's JSON file to use the 'reusable' mode. Only one browser instance is created and shared for all rendering requests. Each request opens a new incognito page. If the browser crashes, it will not restart automatically.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_8

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "mode": "reusable"
  }
}
```

----------------------------------------

TITLE: Mocking Backend Service in Grafana Tests
DESCRIPTION: Example of mocking the getBackendSrv function in Grafana tests. It uses jest.mock to replace the implementation of getBackendSrv with a mock function that returns the desired response.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/testing.md#2025-04-23_snippet_6

LANGUAGE: tsx
CODE:
```
jest.mock('@grafana/runtime', () => ({
  ...jest.requireActual('@grafana/runtime'),
  getBackendSrv: () => ({
    post: postMock,
  }),
}));
```

----------------------------------------

TITLE: Deleting Mute Time Intervals in Grafana RBAC
DESCRIPTION: Specifies the RBAC permission required to delete existing mute time intervals used in Grafana alerting notifications. No specific associated scopes are listed (n/a).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_4

LANGUAGE: plaintext
CODE:
```
`alert.notifications.time-intervals:delete`
```

----------------------------------------

TITLE: Importing RadioButtonGroup in React (JSX)
DESCRIPTION: This snippet shows how to import the RadioButtonGroup component from the @grafana/ui package for use within a React JSX file. It is intended as a first step before rendering the component in the application. The RadioButtonGroup dependency must be installed as part of @grafana/ui and used within a React project.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/RadioButtonGroup/RadioButtonGroup.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { RadioButtonGroup } from '@grafana/ui';
```

----------------------------------------

TITLE: Service Initialization Example
DESCRIPTION: Example showing how to access settings by injecting setting.Cfg into services and components
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/recommended-practices.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
Cfg struct
Injection
```

----------------------------------------

TITLE: Apache Configuration for BasicAuth with Grafana
DESCRIPTION: Apache virtual host configuration for implementing BasicAuth authentication and forwarding authenticated user information to Grafana via X-WEBAUTH-USER header.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
    <VirtualHost *:80>
        ServerAdmin webmaster@authproxy
        ServerName authproxy
        ErrorLog "logs/authproxy-error_log"
        CustomLog "logs/authproxy-access_log" common

        <Proxy *>
            AuthType Basic
            AuthName GrafanaAuthProxy
            AuthBasicProvider file
            AuthUserFile /etc/apache2/grafana_htpasswd
            Require valid-user

            RewriteEngine On
            RewriteRule .* - [E=PROXY_USER:%{LA-U:REMOTE_USER},NS]
            RequestHeader set X-WEBAUTH-USER "%{PROXY_USER}e"
        </Proxy>

        RequestHeader unset Authorization

        ProxyRequests Off
        ProxyPass / http://localhost:3000/
        ProxyPassReverse / http://localhost:3000/
    </VirtualHost>
```

----------------------------------------

TITLE: Selecting Hostname Column for Template Variable Dropdown - SQL
DESCRIPTION: Retrieves all values from the 'hostname' column in 'my_host' table for use in a template variable dropdown in Grafana. Requires a MySQL-compatible database connection. Input: None, Output: a list of unique hostnames. Used to allow users to select hosts dynamically when displaying dashboard data.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_3

LANGUAGE: sql
CODE:
```
SELECT hostname FROM my_host
```

----------------------------------------

TITLE: Configuring OTLP Trace Export Settings in Grafana
DESCRIPTION: Configuration block for setting up OpenTelemetry OTLP trace export in Grafana. Specifies the destination address for sending traces to an OTLP collector running on localhost port 4317.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/tempo/README.md#2025-04-23_snippet_0

LANGUAGE: toml
CODE:
```
[tracing.opentelemetry.otlp]
# otlp destination (ex localhost:4317)
address = localhost:4317
```

----------------------------------------

TITLE: Marking Duplicate Issues in GitHub
DESCRIPTION: This command is used within a GitHub issue comment to mark it as a duplicate of another existing issue. Replace `<issue number>` with the actual number of the issue it duplicates. GitHub automatically recognizes this command and links the issues. The Grafana bot then adds the `type/duplicate` label and a closing comment.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/ISSUE_TRIAGE.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
/duplicate of #<issue number>
```

----------------------------------------

TITLE: Querying Dashboard Read Permissions for a Token with cURL and jq - Bash
DESCRIPTION: This snippet issues a cURL GET request to the Grafana API for a given service account token, then uses jq to filter and display only dashboard read permissions. It isolates the 'dashboards:read' array to show specific dashboard or folder UIDs the token can access. Prerequisites: Valid Bearer token, cURL, jq, and network connectivity. Input: Token and Grafana URL. Output: Filtered JSON array of dashboard resources. Limitation: Only displays 'dashboards:read' permissions; token must have at least one such permission.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/_index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
curl -H "Authorization: Bearer glsa_HOruNAb7SOiCdshU9algkrq7FDsNSLAa_54e2f8be" -X GET '<grafana_url>/api/access-control/user/permissions' | jq '."dashboards:read"'
```

----------------------------------------

TITLE: Resulting Plaintext Output of Rendered Annotation Template - Plaintext
DESCRIPTION: This output illustrates the notification message a user would see after the annotation template is rendered with sample alert data. It shows a resolved template that specifies which instance was affected and the actual metric value that triggered the alert. It demonstrates how template variables translate into end-user facing alert details.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/templates.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
CPU usage for Instance 1 has exceeded 80% (81.2345) for the last 5 minutes.
```

----------------------------------------

TITLE: HTTP 201 Success Response for Alert Rule Creation (HTTP)
DESCRIPTION: This HTTP response example is returned after a successful POST request to create a new alert rule. It confirms creation with HTTP 201, providing a JSON body containing all attributes of the new alert rule, such as id, uid, org details, rule group, condition, and the actual alert rule data structure. The response can be parsed by clients to confirm correct resource creation and obtain its identifiers for further operations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
HTTP/1.1 201 Created
Content-Type: application/json

{
  "id": 1,
  "uid": "XXXXXXXXX",
  "orgID": 1,
  "folderUID": "SET_FOLDER_UID",
  "ruleGroup": "API3",
  "title": "TEST-API_1",
  "condition": "B",
  "data": [
    {
      "refId": "A",
      "queryType": "",
      "relativeTimeRange": {
        "from": 600,
        "to": 0
      },
      "datasourceUid": "XXXXXXXXX-XXXXXXXXX-XXXXXXXXXX",
      "model": {
        "expr": "up",
        "hide": false,
        "intervalMs": 1000,
        "maxDataPoints": 43200,
        "refId": "A"
      }
    },
    {
      "refId": "B",
      "queryType": "",
      "relativeTimeRange": {
        "from": 0,
        "to": 0
      },
      "datasourceUid": "-100",
      "model": {
        "conditions": [
          {
            "evaluator": {
              "params": [
                6
              ],
              "type": "gt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A"
              ]
            },
            "reducer": {
              "params": [],
              "type": "last"
            },
            "type": "query"
          }
        ],
        "datasource": {
          "type": "__expr__",
          "uid": "-100"
        },
        "hide": false,
        "intervalMs": 1000,
        "maxDataPoints": 43200,
        "refId": "B",
        "type": "classic_conditions"
      }
    }
  ],
  "updated": "2024-08-02T13:19:32.609640048Z",
  "noDataState": "OK",
  "execErrState": "OK",
  "for": "5m",
  "annotations": {
    "summary": "test_api_1"
  },
  "labels": {
    "API": "test1"
  },
  "provenance": "api",
  "isPaused": false,
  "notification_settings": null,
  "record": null
}
```

----------------------------------------

TITLE: Using the log Function in Grafana Expressions
DESCRIPTION: Shows the usage of the `log` function, which calculates the natural logarithm of its argument (number or series). It returns NaN if the input value is less than 0.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_12

LANGUAGE: Grafana Expressions
CODE:
```
log(-1)
```

LANGUAGE: Grafana Expressions
CODE:
```
log($A)
```

----------------------------------------

TITLE: Defining Numeric Constants in Grafana Expressions
DESCRIPTION: Illustrates the supported formats for numeric constants in Grafana math expressions, including decimal, octal (leading zero), hexadecimal (leading 0x), and exponential notation with signs.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_1

LANGUAGE: Grafana Expressions
CODE:
```
2.24
```

LANGUAGE: Grafana Expressions
CODE:
```
072
```

LANGUAGE: Grafana Expressions
CODE:
```
0x2A
```

LANGUAGE: Grafana Expressions
CODE:
```
-0.8e-2
```

----------------------------------------

TITLE: Reading Grafana Data Source Permissions (Plaintext)
DESCRIPTION: Defines the `datasources.permissions:read` permission action required to list permissions for data sources in Grafana. Access is associated with data source scopes `datasources:*` and `datasources:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_21

LANGUAGE: plaintext
CODE:
```
`datasources.permissions:read`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>
```

----------------------------------------

TITLE: Configuring Storybook Metadata for RenderUserContentAsHTML
DESCRIPTION: This MDX snippet uses the imported `Meta` component to configure the Storybook metadata for the `RenderUserContentAsHTML` component documentation. It sets the title that appears in the Storybook navigation (`MDX|RenderUserContentAsHTML`) and specifies the component being documented (`RenderUserContentAsHTML`).
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/RenderUserContentAsHTML/RenderUserContentAsHTML.mdx#2025-04-23_snippet_1

LANGUAGE: mdx
CODE:
```
<Meta title="MDX|RenderUserContentAsHTML" component={RenderUserContentAsHTML} />
```

----------------------------------------

TITLE: Executing Custom Notification Title Template in Grafana
DESCRIPTION: This snippet demonstrates how to execute the custom title template by passing the context (dot) to the template.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_19

LANGUAGE: go
CODE:
```
{{ template "custom_title" . }}
```

----------------------------------------

TITLE: Querying Specific Log File with LogQL in Grafana Explore
DESCRIPTION: This LogQL query retrieves all log entries from the specified file `/var/log/tns-app.log` using the Loki data source within Grafana Explore. It requires a configured Loki data source with access to the target log file and is typically run by pressing Shift + Enter in the query editor.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_5

LANGUAGE: logql
CODE:
```
{filename="/var/log/tns-app.log"}
```

----------------------------------------

TITLE: Backing up Authentik Database
DESCRIPTION: Command to dump Authentik's database for backup purposes using Docker Compose.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/authentik/README.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
cd devenv;
docker-compose exec -T authentikdb bash -c "pg_dump -U authentik authentik" > docker/blocks/auth/authentik/cloak.sql
```

----------------------------------------

TITLE: Displaying Grafana CLI Help (Bash)
DESCRIPTION: An example command to display the help information for the Grafana CLI using the '-h' flag. This output includes default paths and Docker configuration details.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
grafana cli -h
```

----------------------------------------

TITLE: Setting Minimum TLS Version - Bash
DESCRIPTION: Defines the minimum accepted TLS version for the image renderer's HTTPS server using the HTTP_MIN_TLS_VERSION environment variable. Accepts 'TLSv1.2' or 'TLSv1.3', defaulting to 'TLSv1.2'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_17

LANGUAGE: bash
CODE:
```
HTTP_MIN_TLS_VERSION=TLSv1.2
```

----------------------------------------

TITLE: DraggableManager Bounds Configuration
DESCRIPTION: Implementation of the getBounds function required for DraggableManager initialization, showing how to set dragging boundaries.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/explore/TraceView/components/utils/DraggableManager/README.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
_getDraggingBounds = (): DraggableBounds => {
  if (!this._realmElm) {
    throw new Error('invalid state');
  }
  const { left: clientXLeft, width } = this._realmElm.getBoundingClientRect();
  return {
    clientXLeft,
    width,
    maxValue: 0.98,
    minValue: 0.02,
  };
};
```

----------------------------------------

TITLE: Applying an Ad Hoc Filter via URL Parameter
DESCRIPTION: Demonstrates how to apply an ad hoc filter using a URL parameter. The parameter 'var-adhoc' corresponds to the ad hoc filter variable name in the dashboard. The value 'example_key|=|example_value' specifies the filter key, operator, and value, separated by pipes. Note that pipes and other special characters must be URL-encoded.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/create-dashboard-url-variables/index.md#2025-04-23_snippet_4

LANGUAGE: uri
CODE:
```
https://${your-domain}/path/to/your/dashboard?var-adhoc=example_key|=|example_value
```

----------------------------------------

TITLE: Using Select Component with Portal Menu Behavior in Grafana UI (React/JSX)
DESCRIPTION: Demonstrates how to use the Select component from @grafana/ui with the menuShouldPortal property in a React (JSX) environment. This feature allows the options menu to be rendered in a portal, potentially avoiding display and positioning issues in complex layouts. The menuShouldPortal property accepts a boolean value to toggle the behavior. Dependencies include the @grafana/ui package and a React setup. The snippet is intended for tests or components that may be affected by menu rendering changes in upcoming Grafana versions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v8-1.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
```jsx\n<Select menuShouldPortal {...otherProps} />\n```
```

----------------------------------------

TITLE: Representing Specific Subresource Permissions in OpenFGA
DESCRIPTION: This tuple example grants a user ('user:1') 'read' access to a specific subresource (e.g., settings or public access) of a particular resource (e.g., a dashboard). The object string includes the subresource identifier, and the context specifies the subresource's group resource.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_4

LANGUAGE: text
CODE:
```
{ “user”: “user:1”, relation: “read”, object:”resource:dashboard.grafana.app/dashboards/<subresource>/<resource_name>” }` with additional context `{ "group_resource": "dashboard.grafana.app/dashboards/<subresource>" }
```

----------------------------------------

TITLE: Installing Plugin Dependencies using Yarn (Shell)
DESCRIPTION: Installs the project dependencies listed in the `package.json` file using the Yarn package manager. This command must be run inside the root directory of the newly created plugin (`my-plugin`). Requires Yarn to be installed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/create-plugin.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
yarn install
```

----------------------------------------

TITLE: Embedding YouTube Video using Hugo Shortcode
DESCRIPTION: This Hugo shortcode embeds a YouTube video into the documentation page. It's used here to provide a visual demonstration or explanation related to the centralized alert history feature in Grafana. It requires a valid YouTube video ID.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-2.md#2025-04-23_snippet_0

LANGUAGE: hugo
CODE:
```
{{< youtube id="0fNtby8ieEw" >}}
```

----------------------------------------

TITLE: JSON Structure for Pluralization Keys in Translation Catalog
DESCRIPTION: Illustrates the expected structure within the `grafana.json` message catalog for handling pluralization. The base `i18nKey` (e.g., `inbox.heading`) is extended with suffixes like `_one` (for singular) and `_other` (for plural) according to i18next conventions. This structure needs to be manually created or adjusted after extraction.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_13

LANGUAGE: json
CODE:
```
{
  "inbox": {
    "heading_one": "You got {{count}} message",
    "heading_other": "You got {{count}} messages"
  }
}
```

----------------------------------------

TITLE: Using Math Expressions in Grafana Alerting
DESCRIPTION: Illustrates basic math operations within Grafana alert expressions using variables representing query results (e.g., $A, $B, $C) and constants. These expressions allow arithmetic calculations and comparisons. They can transform data or define the final alert condition based on comparisons like greater than, less than, or involving multiplication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/alert-rules/queries-conditions.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
$A + 1
```

LANGUAGE: plaintext
CODE:
```
$A * 100
```

LANGUAGE: plaintext
CODE:
```
$B > 70
```

LANGUAGE: plaintext
CODE:
```
$B < $C * 100
```

----------------------------------------

TITLE: Defining UserView Interface for UsersIndicator Component
DESCRIPTION: This snippet defines the UserView interface used by the UsersIndicator component. It specifies the structure of user data, including name, avatar URL, and last active timestamp.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/UsersIndicator/UsersIndicator.mdx#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { DateTimeInput } from '@grafana/data';

export interface UserView {
  user: {
    /** User's name, containing first + last name */
    name: string;
    /** URL to the user's avatar */
    avatarUrl?: string;
  };
  /** Datetime string when the user was last active */
  lastActiveAt: DateTimeInput;
}
```

----------------------------------------

TITLE: Configuring NGINX WebSocket Mapping for Loki Live Tailing
DESCRIPTION: This NGINX configuration creates a mapping for the HTTP upgrade header to properly handle WebSocket connections. This is required in the http section of the NGINX configuration to support Loki's live tailing feature.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/loki/query-editor/index.md#2025-04-23_snippet_2

LANGUAGE: nginx
CODE:
```
  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }
```

----------------------------------------

TITLE: Enabling Automatic Login with Azure AD OAuth (INI)
DESCRIPTION: This snippet enables automatic login with Azure AD in Grafana by setting auto_login to true in the configuration. This feature allows bypassing the login screen if only one auth provider is using auto_login. If multiple providers enable this flag, the setting is ignored.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_9

LANGUAGE: ini
CODE:
```
auto_login = true
```

----------------------------------------

TITLE: Annotating Deployment Change Cause with Kubectl (Bash)
DESCRIPTION: Uses `kubectl annotate` to add or update the `kubernetes.io/change-cause` annotation on a deployment ('grafana') in a specific namespace ('my-grafana'). This annotation provides a human-readable description of the change associated with a deployment revision, which is displayed by `kubectl rollout history`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_17

LANGUAGE: bash
CODE:
```
kubectl annotate deployment/grafana kubernetes.io/change-cause='deployed the default base yaml file' --namespace=my-grafana
```

LANGUAGE: bash
CODE:
```
kubectl annotate deployment grafana --namespace=my-grafana kubernetes.io/change-cause='using grafana-oss-dev:10.1.0-124419pre for testing'
```

----------------------------------------

TITLE: Tagging the Release Commit using Git
DESCRIPTION: Creates an annotated Git tag named 'v0.1.0' pointing to the latest commit (the release commit just created). The tag includes a message describing its purpose, formally marking this commit as release version 0.1.0.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/publish-your-plugin.md#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
git tag -a v0.1.0 -m "Create release tag v0.1.0"
```

----------------------------------------

TITLE: Including Backup Instructions using Hugo Shortcode
DESCRIPTION: This Hugo shortcode embeds the shared documentation content for backing up Grafana. It references the `back-up/back-up-grafana.md` file within the shared source (`grafana`), uses a version placeholder (`<GRAFANA_VERSION>`), and includes a `leveloffset="+1"` parameter to adjust the heading levels within the included content for proper document structure.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v11.4/index.md#2025-04-23_snippet_1

LANGUAGE: hugo
CODE:
```
{{< docs/shared lookup="back-up/back-up-grafana.md" source="grafana" version="<GRAFANA_VERSION>" leveloffset="+1" >}}
```

----------------------------------------

TITLE: Increasing Maximum Files Limit on macOS (Bash)
DESCRIPTION: Uses the `sysctl` command with `sudo` privileges on macOS to increase the kernel's maximum allowed open files (`kern.maxfiles`) limit to 524288. This can help resolve errors related to reaching system limits for file watchers or open files during development tasks.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_17

LANGUAGE: bash
CODE:
```
sudo sysctl -w kern.maxfiles=524288
```

----------------------------------------

TITLE: Restarting Grafana Service with init.d (Linux)
DESCRIPTION: Restarts the Grafana server service using the init.d script. Apply configuration changes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
sudo service grafana-server restart
```

----------------------------------------

TITLE: Importing Storybook Blocks and TagsInput Component in MDX
DESCRIPTION: This snippet imports the `Meta` and `ArgTypes` components from `@storybook/blocks` and the `TagsInput` component from the relative path `./TagsInput`. These imports are necessary for defining the Storybook documentation page structure and content for the `TagsInput` component.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/TagsInput/TagsInput.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Meta, ArgTypes } from '@storybook/blocks';
import { TagsInput } from './TagsInput';
```

----------------------------------------

TITLE: Migrating Plugin E2E Tests from `grafana/e2e` to `grafana/plugin-e2e`
DESCRIPTION: The Cypress-based `@grafana/e2e` testing tool is deprecated. Plugin developers should migrate their end-to-end tests to the new Playwright-based `@grafana/plugin-e2e` package. A migration guide is available.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v11-0.md#2025-04-23_snippet_4



----------------------------------------

TITLE: Configuring Grafana for Kubectl Development Access in INI
DESCRIPTION: This INI configuration block prepares Grafana for development interaction using `kubectl`. It sets `app_mode` to `development`, enables feature toggles for kubectl access (`grafanaAPIServerEnsureKubectlAccess`) and Kubernetes playlists (`kubernetesPlaylists`), and configures dual-writing mode 2 with periodic data sync for playlists within the unified storage system. This setup generates a development kubeconfig and starts a parallel SSL listener.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/README.md#2025-04-23_snippet_5

LANGUAGE: ini
CODE:
```
app_mode = development

[feature_toggles]
grafanaAPIServerEnsureKubectlAccess = true
kubernetesPlaylists = true

[unified_storage.playlists.playlist.grafana.app]
dualWriterMode = 2
dualWriterPeriodicDataSyncJobEnabled = true
```

----------------------------------------

TITLE: Identifying Comment Character in INI Configuration
DESCRIPTION: Specifies that the semicolon (`;`) character is used to denote comments within Grafana's INI configuration files (`sample.ini`, `custom.ini`). Lines starting with a semicolon are ignored by Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/windows/index.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
;
```

----------------------------------------

TITLE: Configuring Active LDAP Synchronization Schedule in Grafana (Bash/Config)
DESCRIPTION: Details how to enable and schedule background LDAP synchronization in Grafana using the `sync_cron` setting within the `[auth.ldap]` configuration block. Explains the cron syntax options, predefined schedulers, and the `active_sync_enabled` flag. This feature requires Grafana Enterprise or Cloud.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/enhanced-ldap/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
[auth.ldap]
...

# You can use the Cron syntax or several predefined schedulers -
# @yearly (or @annually) | Run once a year, midnight, Jan. 1st        | 0 0 1 1 *
# @monthly               | Run once a month, midnight, first of month | 0 0 1 * *
# @weekly                | Run once a week, midnight between Sat/Sun  | 0 0 * * 0
# @daily (or @midnight)  | Run once a day, midnight                   | 0 0 * * *
# @hourly                | Run once an hour, beginning of hour        | 0 * * * *
sync_cron = "0 1 * * *" # This is default value (At 1 am every day)
# This cron expression format uses 5 space-separated fields, for example
# sync_cron = "*/10 * * * *"
# This will run the LDAP Synchronization every 10th minute, which is also the minimal interval between the Grafana sync times i.e. you cannot set it for every 9th minute

# You can also disable active LDAP synchronization
active_sync_enabled = true # enabled by default
```

----------------------------------------

TITLE: Cleaning Up Docker Environment for Grafana Tutorial (Shell)
DESCRIPTION: This shell command uses `docker-compose down -v` to stop and remove all containers, networks, and associated volumes defined in the `docker-compose.yml` file for the Grafana tutorial environment. The `-v` flag specifically ensures that volumes are removed along with the containers.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_10

LANGUAGE: shell
CODE:
```
docker-compose down -v
```

----------------------------------------

TITLE: Documenting TLS and OAuth Configuration Parameters - Markdown
DESCRIPTION: This snippet is a Markdown table used for documenting configuration options in Grafana, focusing on TLS certificate parameters and OAuth settings. It provides details on whether a setting is mandatory, the type of value expected, and default values where applicable, as well as descriptive help text. Inputs are configuration keys (e.g., `tls_client_cert`), with textual descriptions and some include hyperlinks for additional context. No code execution is performed, and the output is intended for user reference in deployment or setup guides.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/gitlab/index.md#2025-04-23_snippet_7

LANGUAGE: markdown
CODE:
```
| `tls_client_cert`            | No       | No                 | The path to the certificate|                                      |
| `tls_client_key`             | No       | No                 | The path to the key|                                      |
| `tls_client_ca`              | No       | No                 | The path to the trusted certificate authority list|                                      |
| `use_pkce`                   | No       | Yes                | Set to `true` to use [Proof Key for Code Exchange (PKCE)](https://datatracker.ietf.org/doc/html/rfc7636). Grafana uses the SHA256 based `S256` challenge method and a 128 bytes (base64url encoded) code verifier| `true`                               |
| `use_refresh_token`          | No       | Yes                | Set to `true` to use refresh token and check access token expiration. The `accessTokenExpirationCheck` feature toggle should also be enabled to use refresh token| `true`                               |
| `signout_redirect_url`       | No       | Yes                | URL to redirect to after the user logs out|                                      |
```

----------------------------------------

TITLE: Folder Update API Response Example
DESCRIPTION: Example HTTP response for the PUT /api/folders/:uid endpoint, returning the updated folder's details including its new title and updated metadata.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_7

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "id":1,
  "uid": "nErXDvCkzz",
  "title": "Department DEF",
  "url": "/dashboards/f/nErXDvCkzz/department-def",
  "hasAcl": false,
  "canSave": true,
  "canEdit": true,
  "canAdmin": true,
  "createdBy": "admin",
  "created": "2018-01-31T17:43:12+01:00",
  "updatedBy": "admin",
  "updated": "2018-01-31T17:43:12+01:00",
  "version": 1
}
```

----------------------------------------

TITLE: Azure AD SAML Attribute URLs for Group/Role Claims
DESCRIPTION: Provides example URLs for `role`, `groups`, and `displayname` attributes required when mapping SAML assertions from Azure AD for group and role claims in Grafana. These specific URLs must be used exactly as shown due to Azure's interpretation and restrictions on these claims, as documented by Microsoft.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml-ui/index.md#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
http://schemas.microsoft.com/ws/2008/06/identity/claims/role
http://schemas.microsoft.com/ws/2008/06/identity/claims/groups
http://schemas.microsoft.com/identity/claims/displayname
```

----------------------------------------

TITLE: Defining Grafana Plugin Manifest Metadata in JSON
DESCRIPTION: This JSON object serves as a manifest file for a Grafana plugin, contained within a PGP signed message. It includes essential metadata such as the manifest version (`manifestVersion`), signature details (`signatureType`, `signedByOrg`, `signedByOrgName`, `keyId`), associated URLs (`rootUrls`), plugin identifier (`plugin`), version (`version`), timestamp (`time`), and file integrity checks (`files`). This structure is used by Grafana to verify and manage the plugin.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/non-pvt-with-root-url/plugin/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "rootUrls": [
    "https://dev.grafana.com/"
  ],
  "plugin": "test-datasource",
  "version": "1.0.0",
  "time": 1661173657946,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "203ef4a613c5693c437a665cd67f95e2756a0f71b336b2ffb265db7c180d0b19"
  }
}
```

----------------------------------------

TITLE: Querying InfluxDB Hosts for Chained Variables
DESCRIPTION: This InfluxDB query returns all hosts for a selected datacenter in a chained variable setup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_6

LANGUAGE: influxql
CODE:
```
SHOW TAG VALUES WITH KEY = "hostname" WHERE "datacenter" =~ /^$datacenter$/
```

----------------------------------------

TITLE: Example HTTP Request with Invalid Action for Grafana Role Creation
DESCRIPTION: Demonstrates an HTTP POST request to the `/api/access-control/roles` endpoint attempting to create a role with an invalid permission action (`serviceaccounts.permissions:reader`). This type of request triggers a validation error if permission validation is enabled (default since Grafana 10.2).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_5

LANGUAGE: http
CODE:
```
POST /api/access-control/roles HTTP/1.1
Content-Type: application/json
{
	"Name": "Read Service Account with id 6",
	"Permissions": [
			{
			"action": "serviceaccounts.permissions:reader",
			"scope": "serviceaccounts:uid:6"
		}
	]
}
```

----------------------------------------

TITLE: Capturing Groups in Regex to Extract and Modify Variable Options
DESCRIPTION: A regular expression that both filters and extracts parts of variable options, returning only the captured groups ('01' or '02') instead of the full option names.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_10

LANGUAGE: regex
CODE:
```
/.*(01|02)/
```

----------------------------------------

TITLE: Building Grafana Docker Image with Custom URL Plugins (Bash)
DESCRIPTION: Demonstrates building a custom Grafana Docker image that includes plugins specified via a URL, alongside standard plugins. The `GF_INSTALL_PLUGINS` build argument uses the format '<url to plugin zip>;<plugin install folder name>' for the custom plugin. The resulting image 'grafana-custom' is then used to start a container.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
# go to the folder
cd packaging/docker/custom

# running the build command
docker build \
  --build-arg "GRAFANA_VERSION=latest" \
  --build-arg "GF_INSTALL_PLUGINS=http://plugin-domain.com/my-custom-plugin.zip;my-custom-plugin,grafana-clock-panel,grafana-simple-json-datasource" \
  -t grafana-custom .

# running the docker run command
docker run -d -p 3000:3000 --name=grafana grafana-custom
```

----------------------------------------

TITLE: Including Data Links and Actions Documentation using Hugo Shortcode
DESCRIPTION: This Hugo shortcode includes shared documentation for data links and actions from `visualizations/datalink-options-2.md`. Dependencies include Hugo and the referenced file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/candlestick/index.md#2025-04-23_snippet_4

LANGUAGE: plaintext
CODE:
```
{{< docs/shared lookup="visualizations/datalink-options-2.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Configuring File Storage for Grafana API Server in INI
DESCRIPTION: This INI configuration snippet sets the storage type for the Grafana Kubernetes API server to `file`. When this option is enabled, the API server will store its objects as JSON files on the local filesystem, typically within the `{data.path}/grafana-apiserver/` directory.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/README.md#2025-04-23_snippet_4

LANGUAGE: ini
CODE:
```
[grafana-apiserver]
storage_type = file
```

----------------------------------------

TITLE: Enabling Custom Base Layers - Grafana INI
DESCRIPTION: This configuration option toggles the ability to load custom map base layers in the Grafana UI. Set the value to "false" to disable loading other custom base maps and hide related options; default is "true". No additional dependencies are needed except for a valid Grafana deployment. Accepted values are boolean-like strings: "true" or "false".
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_30

LANGUAGE: ini
CODE:
```
enable_custom_baselayers = true
```

----------------------------------------

TITLE: Calling Templates with Notification Data in Grafana - Go
DESCRIPTION: This snippet shows how to invoke a previously defined template (`custom_message`) in Grafana's Go templating system by passing it the full notification data context (dot). The input is notification data; the output depends on the logic defined in the referenced template. Use within notification message bodies to render formatted alert information.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_3

LANGUAGE: go
CODE:
```
{{ template "custom_message" . }}
```

----------------------------------------

TITLE: Showing Result of Inner Join on Time Series Data
DESCRIPTION: This Markdown table illustrates the output after applying an inner join transformation to the data from Query A and Query B. The join is performed on the 'Time' column, and only rows with matching timestamps in both queries are included.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_17

LANGUAGE: markdown
CODE:
```
| Time                | Job     | Uptime    | Server   | Errors |
| ------------------- | ------- | --------- | -------- | ------ |
| 2020-07-07 11:34:20 | node    | 25260122  | server 1 | 15     |
| 2020-07-07 11:24:20 | postgre | 123001233 | server 2 | 5      |
```

----------------------------------------

TITLE: Uninstalling Grafana Enterprise via DNF using Shell
DESCRIPTION: Removes the Grafana Enterprise package using the `dnf remove` command. Requires `sudo` privileges. This command uninstalls Grafana Enterprise that was previously installed using `dnf install grafana-enterprise`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_15

LANGUAGE: shell
CODE:
```
sudo dnf remove grafana-enterprise
```

----------------------------------------

TITLE: Deleting a Query from Grafana Query History (HTTP Response)
DESCRIPTION: This snippet shows a successful HTTP 200 OK response after deleting a query history entry. The JSON body contains a confirmation message and the internal ID of the deleted query.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_5

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
    "message": "Query deleted",
    "id": 28
}
```

----------------------------------------

TITLE: Verifying Prometheus Configuration and Data Directories (Linux/macOS)
DESCRIPTION: These commands use 'ls' to check for the existence of the default Prometheus configuration directory ('/etc/prometheus'), data directory ('/var/lib/prometheus'), and the primary configuration file ('prometheus.yml'). This helps ensure necessary files and directories are present.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
ls /etc/prometheus /var/lib/prometheus
ls /etc/prometheus/prometheus.yml
```

----------------------------------------

TITLE: Representing Labeled Time Series Input (Series 1)
DESCRIPTION: This Markdown table shows sample time series data for 'series1' which includes labels (what="Temp", cluster="A", job="J1"). This data serves as input for the 'Join by labels' transformation example.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_27

LANGUAGE: markdown
CODE:
```
| Time | Value |
| ---- | ----- |
| 1    | 10    |
| 2    | 200   |
```

----------------------------------------

TITLE: Wrapping Components with ErrorBoundaryAlert - React & Grafana UI - JSX
DESCRIPTION: Illustrates the use of ErrorBoundaryAlert from Grafana UI to automatically render a pre-configured alert when a child component throws an error. Requires '@grafana/ui' and React. Expects a React component as its child. Outputs either the child component or an alert UI in case of errors. Suitable for rapid error notification integration in React applications.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ErrorBoundary/ErrorBoundary.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
import { ErrorBoundaryAlert } from '@grafana/ui';\n\n<ErrorBoundaryAlert>\n  <Component />\n</ErrorBoundaryAlert>;
```

----------------------------------------

TITLE: Increasing File Watcher Limit on Linux (Bash)
DESCRIPTION: Increases the `inotify` file watcher limit on Linux systems to prevent `ENOSPC: System limit for number of file watchers reached` errors, often seen during frontend development (`yarn start`). It appends the setting `fs.inotify.max_user_watches=524288` to `/etc/sysctl.conf` using `sudo tee -a` and applies the change immediately with `sudo sysctl -p`.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_16

LANGUAGE: bash
CODE:
```
echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
```

----------------------------------------

TITLE: Adjusting Permissions for SSL Certificates - Bash
DESCRIPTION: This snippet provides bash commands to ensure the 'grafana' Linux group has the necessary read permissions on SSL certificate and key files used by Grafana. By updating file ownership and access levels, these commands guarantee that the Grafana process can access cryptographic materials at runtime. Dependencies include sudo privileges and existing certificate files in the specified locations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
# Adjust group ownership and permissions for LetsEncrypt and Grafana certificate files
$ sudo chgrp -R grafana /etc/letsencrypt/*
$ sudo chmod -R g+rx /etc/letsencrypt/*
$ sudo chgrp -R grafana /etc/grafana/grafana.crt /etc/grafana/grafana.key
$ sudo chmod 440 /etc/grafana/grafana.crt /etc/grafana/grafana.key
```

----------------------------------------

TITLE: Defining Grafana Fixed Role: fixed:datasources:writer
DESCRIPTION: Specifies the `fixed:datasources:writer` role (ID: `fixed_q8HXq8kjjA5IlHHgBJlKlUyaNik`) within Grafana. This role encompasses permissions inherited from `fixed:datasources:reader` along with specific write capabilities (`datasources:create`, `datasources:write`, `datasources:delete`), enabling users to fully manage data sources (read, query, create, delete, update).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
fixed:datasources:writer
```

LANGUAGE: plaintext
CODE:
```
fixed_q8HXq8kjjA5IlHHgBJlKlUyaNik
```

LANGUAGE: plaintext
CODE:
```
Permissions included:
- fixed:datasources:reader
- datasources:create
- datasources:write
- datasources:delete
```

----------------------------------------

TITLE: Formatting Alert Time with 'date' Function in Grafana Go Templates
DESCRIPTION: This snippet demonstrates the use of the 'date' function to format alert times within a template loop, producing a custom string such as '15:04:05 MST' per alert. Requires alerts with a .StartsAt Time field, and the template engine must support the 'date' filter. The input is the .StartsAt time object and the desired date format string; output is a formatted string per alert entry.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_8

LANGUAGE: go
CODE:
```
{{ define "custom_template" }}
  {{ range .Alerts }}
    {{ .StartsAt | date "15:04:05 MST" }}
  {{ end}}
{{ end }}
```

----------------------------------------

TITLE: Installing Wire via Go
DESCRIPTION: This command installs the latest version of Wire using Go's package management system. It adds the Wire binary to the user's GOPATH.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/README.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
go install github.com/google/wire/cmd/wire@latest
```

----------------------------------------

TITLE: Using Round Function in Grafana Expressions
DESCRIPTION: The round function returns a rounded integer value from a numeric input. It can be used with literal values or variables.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_14

LANGUAGE: text
CODE:
```
round(3.123)
```

LANGUAGE: text
CODE:
```
round($A)
```

----------------------------------------

TITLE: Starting Prometheus Service with Specific Configuration (Bash)
DESCRIPTION: This shell command starts the Prometheus server executable ('./prometheus') using a specific configuration file located at './prometheus.yml'. The '--config.file' flag overrides the default configuration file location.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
./prometheus --config.file=./prometheus.yml
```

----------------------------------------

TITLE: Defining Grafana Fixed Role: fixed:datasources.id:reader
DESCRIPTION: Specifies the `fixed:datasources.id:reader` role (ID: `fixed_entg--fHmDqWY2-69N0ocawK0Os`) within Grafana. This role grants the `datasources.id:read` permission, allowing users to read the ID of a data source based on its name.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_3

LANGUAGE: plaintext
CODE:
```
fixed:datasources.id:reader
```

LANGUAGE: plaintext
CODE:
```
fixed_entg--fHmDqWY2-69N0ocawK0Os
```

LANGUAGE: plaintext
CODE:
```
Permissions included:
- datasources.id:read
```

----------------------------------------

TITLE: Displaying Component Props using Storybook ArgTypes in MDX
DESCRIPTION: Utilizes the Storybook `ArgTypes` component within MDX to automatically generate and display a table of properties (props) for the specified component (`Space`). This table includes details like prop names, types, default values, and descriptions, based on the component's definition.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Space.mdx#2025-04-23_snippet_2

LANGUAGE: mdx
CODE:
```
<ArgTypes of={Space} />
```

----------------------------------------

TITLE: Receiving Success Response After PATCH Org Preferences - JSON
DESCRIPTION: Sample HTTP response showing success after a PATCH update to organization preferences. Returns a JSON message confirming completion, to be handled by administrative scripts or dashboards.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_11

LANGUAGE: json
CODE:
```
{"message":"Preferences updated"}
```

----------------------------------------

TITLE: Provisioning Template Group Deletion - YAML
DESCRIPTION: Shows how to delete notification template groups in Grafana's provisioning system. Identifies each template group by organization ID and unique template group name under the 'deleteTemplates' key. Inputs are the API version and list of template names/organization IDs. Outputs result in permanent removal of specified template groups from provisioned alerting resources.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_24

LANGUAGE: yaml
CODE:
```
# config file version\napiVersion: 1\n\n# List of alert rule UIDs that should be deleted\ndeleteTemplates:\n  # <int> organization ID, default = 1\n  - orgId: 1\n    # <string, required> name of the template group, must be unique\n    name: my_first_template\n
```

----------------------------------------

TITLE: Rendering Text with TextLink in JSX
DESCRIPTION: Demonstrates how to use the Text component with a nested TextLink component for creating linked text.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Text/Text.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Text color="primary" element="p">
  If you need more help of how to write in Grafana you can go to our
  <TextLink href="https://grafana.com/docs/writers-toolkit/" external>
    Writer's Toolkit
  </TextLink>
</Text>
```

----------------------------------------

TITLE: Setting Device Scale Factor - JSON
DESCRIPTION: Sets rendering.deviceScaleFactor to alter the device pixel density for rendered images. Values greater than 1 yield higher DPI renders at greater resource cost. Input as integer.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_48

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "deviceScaleFactor": 2
  }
}
```

----------------------------------------

TITLE: Installing Plugin Insecurely from a Specific URL (Bash)
DESCRIPTION: Demonstrates using the '--insecure' flag along with '--pluginUrl' to install a plugin from a custom URL while disabling TLS verification. This is discouraged due to security risks.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
grafana cli --insecure --pluginUrl https://company.com/grafana/plugins/<plugin-id>-<plugin-version>.zip plugins install <plugin-id>
```

----------------------------------------

TITLE: Example HTTP Response for Listing Roles Assigned to a User
DESCRIPTION: Illustrates a successful HTTP 200 OK response containing a JSON array of roles assigned to a user, retrieved via the GET `/api/access-control/users/:userId/roles` endpoint. Each role object in the array includes details like version, UID, name, display name, description, group, timestamps, and global status.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_14

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8

[
    {
        "version": 4,
        "uid": "6dNwJq57z",
        "name": "fixed:reports:writer",
        "displayName": "Report writer",
        "description": "Create, read, update, or delete all reports and shared report settings.",
        "group": "Reports",
        "updated": "2021-11-19T10:48:00+01:00",
        "created": "2021-11-19T10:48:00+01:00",
        "global": false
    }
]
```

----------------------------------------

TITLE: Selecting Custom or Default Alert Message in Go Template
DESCRIPTION: This Go template code block implements the logic for selecting the final alert message content. It checks if a custom message is provided in the '.Message' context variable. If '.Message' exists and is non-empty, its content is rendered. Otherwise, it falls back to rendering the default alert message structure by invoking the '__default_message' template with the current context.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/ng_alert_notification.txt#2025-04-23_snippet_5

LANGUAGE: go-template
CODE:
```
[[- if .Message -]]
    [[ .Message ]]
[[- else -]]
    [[ template "__default_message" . ]]
[[- end ]]
```

----------------------------------------

TITLE: Fetching Actual User Details via Grafana API (HTTP)
DESCRIPTION: Retrieves details for the currently authenticated user using a GET request to `/api/user`. Requires Basic Authentication. The response is a JSON object containing user attributes like ID, email, login, theme, organization ID, admin status, creation/update timestamps, and avatar URL.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_14

LANGUAGE: http
CODE:
```
GET /api/user HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Basic YWRtaW46YWRtaW4=
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "id":1,
  "email":"admin@mygraf.com",
  "name":"Admin",
  "login":"admin",
  "theme":"light",
  "orgId":1,
  "isGrafanaAdmin":true,
  "isDisabled":false
  "isExternal": false,
  "authLabels": [],
  "updatedAt": "2019-09-09T11:31:26+01:00",
  "createdAt": "2019-09-09T11:31:26+01:00",
  "avatarUrl": ""
}
```

----------------------------------------

TITLE: Changing Ownership of Grafana Installation Directory - Shell
DESCRIPTION: Recursively changes ownership of the Grafana installation directory to the 'grafana' user and 'users' group. Ensures correct permissions and prevents access issues. Run after installing or after directory creation events.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_9

LANGUAGE: shell
CODE:
```
sudo chown -R grafana:users /usr/local/grafana
```

----------------------------------------

TITLE: Building Grafana Docker Container
DESCRIPTION: Commands to build a Grafana docker container from the current branch and tag it as grafana/grafana:dev
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha-test-unified-alerting/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ cd <grafana repo>
$ make build-docker-full
```

----------------------------------------

TITLE: Stopping Grafana Service via systemd using Shell
DESCRIPTION: Stops the Grafana server service using the `systemctl stop` command. This command is used when Grafana is managed by systemd, typically after installation via RPM or after setting up the systemd unit file for a binary install. Requires `sudo` privileges and is part of the uninstallation process.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_12

LANGUAGE: shell
CODE:
```
sudo systemctl stop grafana-server
```

----------------------------------------

TITLE: Truncating Text with Nested Components in JSX
DESCRIPTION: Illustrates how to truncate text using the Text component with nested elements and the truncate prop.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Text/Text.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
<Text color="primary" element="p" truncate>
  And Forrest Gump said:
  <Text italic>Life is like a box of chocolates. You never know what you are gonna get.</Text>
</Text>
```

----------------------------------------

TITLE: Context Scoping with 'with' in Go Templates
DESCRIPTION: Illustrates the `with` statement in Go templates, which is similar to `if` but updates the dot (`.`) context to the value of the expression (`$array`). It checks if `$array` exists and then uses `len .` to access its length within the scoped context. An `else` block handles the case where `$array` is empty or false.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
{{ with $array }}
There are {{ len . }} item(s)
{{ else }}
There are no alerts
{{ end }}
```

----------------------------------------

TITLE: Configuring Generic OAuth Authentication Using Terraform Provider
DESCRIPTION: This Terraform configuration sets up Generic OAuth authentication for Grafana. It specifies the OAuth2 settings including authorization endpoints, client credentials, and token handling options for integration with an Auth0 provider.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_0

LANGUAGE: terraform
CODE:
```
resource "grafana_sso_settings" "generic_sso_settings" {
  provider_name = "generic_oauth"
  oauth2_settings {
    name              = "Auth0"
    auth_url          = "https://<domain>/authorize"
    token_url         = "https://<domain>/oauth/token"
    api_url           = "https://<domain>/userinfo"
    client_id         = "<client id>"
    client_secret     = "<client secret>"
    allow_sign_up     = true
    auto_login        = false
    scopes            = "openid profile email offline_access"
    use_pkce          = true
    use_refresh_token = true
  }
}
```

----------------------------------------

TITLE: Using Go Generate for Mock Generation in Grafana
DESCRIPTION: Example of adding a go:generate comment directive to automatically generate mock implementations using mockery. This allows IDE integration for mock generation.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/style-guide.md#2025-04-23_snippet_6

LANGUAGE: go
CODE:
```
package <package>

import (
	...
)

//go:generate mockery --name InterfaceName --structname MockImplementationName --inpackage --filename my_implementation_mock.go
```

----------------------------------------

TITLE: Humanizing Query Value (Index Function)
DESCRIPTION: This Go template demonstrates an alternative way to format a query value using the `humanize` function. It retrieves the value of query 'A' using the `index` function before passing it to `humanize`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_10

LANGUAGE: gotemplate
CODE:
```
{{ humanize (index $values "A").Value }}
```

----------------------------------------

TITLE: Reading Notification Templates in Grafana RBAC
DESCRIPTION: Specifies the RBAC permission required to read templates used for formatting Grafana alerting notifications. No specific associated scopes are listed (n/a).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_5

LANGUAGE: plaintext
CODE:
```
`alert.notifications.templates:read`
```

----------------------------------------

TITLE: Including Grafana Upgrade Introduction using Hugo Shortcode
DESCRIPTION: This Hugo shortcode dynamically includes shared introductory content for Grafana upgrades from a central file. It references the 'upgrade/intro.md' file, ensuring consistent upgrade information across documentation versions. The 'source' and 'version' parameters specify the origin and version context for the included content.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v9.1/index.md#2025-04-23_snippet_0

LANGUAGE: hugo
CODE:
```
{{< docs/shared lookup="upgrade/intro.md" source="grafana" version="<GRAFANA VERSION>" >}}
```

----------------------------------------

TITLE: Mapping Grafana Server Administrator Role Based on User Email (Bash/INI)
DESCRIPTION: This configuration snippet, shown in a Bash context but applicable to Grafana's INI file, uses a JMESPath expression to assign the Grafana server admin role. If the user's email is 'admin@company.com', they receive the 'GrafanaAdmin' role (granting server-wide administrative privileges). All other users are assigned the 'Viewer' organization role.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/gitlab/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
role_attribute_path = email=='admin@company.com' && 'GrafanaAdmin' || 'Viewer'
```

----------------------------------------

TITLE: Kubernetes Folder Creation Manifest - YAML
DESCRIPTION: This YAML manifest defines a Folder custom resource for use with Grafana's app platform using Unified Storage, specifying generateName and a spec containing the title. Designed for use in environments with Unified Storage enabled and requires the Folder CRD to be installed.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_14

LANGUAGE: yaml
CODE:
```
apiVersion: folder.grafana.app/v1beta1\nkind: Folder\nmetadata:\n  generateName: x # anything is ok here... except yes or true -- they become boolean!\nspec:\n  title: Example folder
```

----------------------------------------

TITLE: Rendering the LoadingBar Story and Argument Types in Storybook (MDX)
DESCRIPTION: These snippets render the LoadingBar documentation within Storybook's MDX context. <Canvas of={LoadingBarStories.Basic} /> displays the Basic variation of LoadingBar with live interactivity, while <ArgTypes of={LoadingBar} /> lists the props available for the component. These blocks require defined stories and appropriate Storybook configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/LoadingBar/LoadingBar.mdx#2025-04-23_snippet_2

LANGUAGE: mdx
CODE:
```
<Canvas of={LoadingBarStories.Basic} />
```

LANGUAGE: mdx
CODE:
```
<ArgTypes of={LoadingBar} />
```

----------------------------------------

TITLE: Hiding the API Keys Tab - Grafana HTTP API - HTTP
DESCRIPTION: This code sample shows how to hide the API keys tab from the Grafana UI by calling a specific POST endpoint with authentication. The operation is confirmed by a JSON response with a message indicating that the API keys are now hidden.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
POST /api/serviceaccounts/hideApiKeys HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{\n\t"message": "API keys hidden"\n}
```

----------------------------------------

TITLE: Importing Switch Component in React
DESCRIPTION: This snippet demonstrates how to import and use the Switch component from the Grafana UI library. It shows the basic usage with common props like disabled, value, and onChange.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Switch/Switch.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { Switch } from '@grafana/ui';

<Switch disabled={...} value={...} onChange={...} />
```

----------------------------------------

TITLE: Installing Fonts for Server-Side Image Rendering - Bash
DESCRIPTION: These bash commands install necessary font packages on RPM-based Linux systems to resolve missing text issues when using server-side image (PNG) rendering in Grafana. Dependencies include having sudo privileges and the yum package manager. The commands install fontconfig, freetype fonts, and urw-fonts to ensure proper rendering of text in generated images. Execute all commands in sequence to apply the fix.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/troubleshooting/_index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
sudo yum install fontconfig\nsudo yum install freetype*\nsudo yum install urw-fonts
```

----------------------------------------

TITLE: Initializing Flamegraph Component in React TSX
DESCRIPTION: Example showing how to import and use the Flamegraph component with basic props configuration. The component is initialized with dark theme, custom data frame, additional header elements, sticky header, and vertical layout settings.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-flamegraph/README.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import { Flamegraph } from '@grafana/flamegraph';

<FlameGraph
  getTheme={() => createTheme({ colors: { mode: 'dark' } })}
  data={dataFrame}
  extraHeaderElements={
    <Button onClick={() => {}} variant="secondary">
      Download
    />
  }
  stickyHeader
  vertical
/>
```

----------------------------------------

TITLE: Implementing Ordered List Content Template in Markdown
DESCRIPTION: Example of integrating shared content within a numbered list structure using docs/list and docs/shared shortcodes. Shows how to combine static list items with shared content.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/example.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
{{< docs/list >}}
  {{< docs/shared lookup="manage-users/view-server-user-list.md" source="grafana" version="<GRAFANA VERSION>" >}}
  1. Click the user account that you want to edit. If necessary, use the search field to find the account.
{{< /docs/list >}}
```

----------------------------------------

TITLE: Defining GET Endpoint for Listing Alert Rules - HTTP
DESCRIPTION: Specifies an HTTP GET endpoint used to retrieve all alert rules currently provisioned in Grafana. This endpoint returns a collection of alert rules and does not require parameters. The expected response schema is ProvisionedAlertRules, with a 200 OK indicating successful retrieval.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_18

LANGUAGE: http
CODE:
```
GET /api/v1/provisioning/alert-rules
```

----------------------------------------

TITLE: Starting Grafana Development Server using Make Bash
DESCRIPTION: This Bash command executes the `run` target defined in the project's Makefile. It compiles and starts the Grafana development server, incorporating any configuration changes made, such as enabling feature toggles.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/README.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
make run
```

----------------------------------------

TITLE: Configuring Loki Exporter for Grafana Audit Logs
DESCRIPTION: This snippet shows the configuration options for the Loki exporter, which sends audit logs to a Loki service. It includes settings for the communication protocol, URL, TLS, and tenant ID.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/audit-grafana.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
[auditing.logs.loki]
# Set the communication protocol to use with Loki (can be grpc or http)
type = grpc
# Set the address for writing logs to Loki
url = localhost:9095
# Defaults to true. If true, it establishes a secure connection to Loki
tls = true
# Set the tenant ID for Loki communication, which is disabled by default.
# The tenant ID is required to interact with Loki running in multi-tenant mode.
tenant_id =
```

----------------------------------------

TITLE: Response for Deleting Snapshot via Grafana HTTP API (HTTP)
DESCRIPTION: Exhibits the JSON response for a successful snapshot deletion, confirming the operation with a message and the snapshot ID. This payload is useful for user notification and error handling in client tools.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_7

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{"message":"Snapshot deleted. It might take an hour before it's cleared from any CDN caches.", "id": 1}
```

----------------------------------------

TITLE: Starring a Query in Grafana Query History (HTTP Request)
DESCRIPTION: This snippet presents an example HTTP POST request to mark a specific query history entry (identified by UID) as starred. No request body is needed. Requires authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
POST /api/query-history/star/P8zM2I1nz HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Provisioning Microsoft SQL Server Data Source in Grafana Using YAML
DESCRIPTION: Example YAML configuration for provisioning a Microsoft SQL Server data source in Grafana, including connection parameters, pool settings, and security credentials.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/_index.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: MSSQL
    type: mssql
    url: localhost:1433
    user: grafana
    jsonData:
      database: grafana
      maxOpenConns: 100
      maxIdleConns: 100
      maxIdleConnsAuto: true
      connMaxLifetime: 14400
      connectionTimeout: 0
      encrypt: 'false'
    secureJsonData:
      password: 'Password!'
```

----------------------------------------

TITLE: Enabling Apache Proxy Modules for Grafana - Bash
DESCRIPTION: These bash commands activate Apache proxy modules mod_proxy and mod_proxy_http. Run these on your system with Apache installed, typically using sudo. Both modules must be enabled for Apache to forward HTTP connections to Grafana. After enabling, restart Apache as instructed in the documentation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
a2enmod proxy\na2enmod proxy_http
```

----------------------------------------

TITLE: Managing Notification Policies (Routes) in Grafana RBAC
DESCRIPTION: Specifies the RBAC permission required to create new, update, and modify existing notification policies (routes) within Grafana alerting. No specific associated scopes are listed (n/a).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_9

LANGUAGE: plaintext
CODE:
```
`alert.notifications.routes:write`
```

----------------------------------------

TITLE: Defining LogQL LBAC Rule to Exclude Label Value (Task 2)
DESCRIPTION: Example LogQL query used as an LBAC rule for Team A in Task 2. This rule filters logs or metrics, granting access only to data points where the label `secret` does *not* have the value `true`. It demonstrates using the 'not equal' operator for exclusion.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_5

LANGUAGE: logql
CODE:
```
{secret!="true"}
```

----------------------------------------

TITLE: Creating a Release Branch using Git
DESCRIPTION: Creates and switches to a new Git branch named 'release-0.1.x'. This is the first step in preparing a specific version (0.1.0 in this example) of the Grafana plugin for release. Requires Git to be installed and initialized in the project directory.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/publish-your-plugin.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
git checkout -b release-0.1.x
```

----------------------------------------

TITLE: Calling a Custom Alerts Summary Template in Grafana - Go
DESCRIPTION: This code shows how to invoke the 'custom.alerts' template with the whole notification data context. The resulting output depends on the logic defined in the template, typically summarizing all alerts in the notification. Input is the notification data object.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_6

LANGUAGE: go
CODE:
```
{{ template "custom.alerts" . }}
```

----------------------------------------

TITLE: Enabling Detailed Timing Metrics - JSON
DESCRIPTION: Enables timingMetrics in rendering JSON configuration to provide breakdown of render step durations for Prometheus. This is useful for performance debugging when fine-grained metrics are required, and must be supported by the remote renderer version.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_22

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "timingMetrics": true
  }
}
```

----------------------------------------

TITLE: Snapshots Configuration Properties
DESCRIPTION: Settings controlling Grafana's snapshot functionality including external snapshot publishing.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_10

LANGUAGE: properties
CODE:
```
enabled=true
external_enabled=true
external_snapshot_url=https://snapshots.raintank.io
external_snapshot_name="Publish to snapshots.raintank.io"
public_mode=false
```

----------------------------------------

TITLE: Defining LogQL LBAC Rule Excluding Specific Namespace (Task 4)
DESCRIPTION: Example LogQL query used as an LBAC rule for Team B in Task 4. This rule filters logs or metrics, granting access only to data points where the `namespace` label does *not* have the value `dev`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_8

LANGUAGE: logql
CODE:
```
{namespace!="dev"}
```

----------------------------------------

TITLE: Finding Grafana Annotation Tags (HTTP Response)
DESCRIPTION: Example successful HTTP response (Status 200 OK) after requesting annotation tags via the Grafana API. The response body contains a JSON object with a `result` field, which includes an array of `tags` found, each with its name (`tag`) and occurrence count (`count`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_13

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
    "result": {
        "tags": [
            {
                "tag": "outage",
                "count": 1
            }
        ]
    }
}
```

----------------------------------------

TITLE: Querying Current User Preferences via HTTP API - HTTP
DESCRIPTION: Sends a GET request to retrieve the current user preferences in Grafana, requiring Bearer authentication. The operation does not accept a body and responds with a JSON object of preference fields. Useful for automation or inspection of per-user settings; requires access to the HTTP API. Inputs are HTTP headers including Authorization, and output is a JSON payload representing user preference state.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/user/preferences HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Documenting Node Graph Data Structures in Grafana Visualizations (Markdown)
DESCRIPTION: This snippet uses Markdown to communicate required and optional field names and types for node and edge data frames that power Grafana node graph visualizations. It provides detailed API documentation and table formats, includes inline admonition calls, and embeds links to shared documentation and external sources. Inputs include Markdown tables and admonitions; outputs are formatted visual documentation consumed by users or developers referencing Grafana visualization requirements. Limitations include dependency on correct embedding syntax (e.g., Hugo shortcodes), and is intended for inclusion in user-facing docs rather than direct code execution.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/node-graph/index.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
### Field overrides

{{< docs/shared lookup="visualizations/overrides-options.md" source="grafana" version="<GRAFANA_VERSION>" >}}

## Data API

This visualization needs a specific shape of the data to be returned from the data source in order to correctly display it.

Node graphs, at minimum, require a data frame describing the edges of the graph. By default, node graphs will compute the nodes and any stats based on this data frame. Optionally a second data frame describing the nodes can be sent in case there is need to show more node specific metadata. You have to set `frame.meta.preferredVisualisationType = 'nodeGraph'` on both data frames or name them `nodes` and `edges` respectively for the node graph to render.

### Edges data frame structure

Required fields:

| Field name | Type   | Description                    |
| ---------- | ------ | ------------------------------ |
| id         | string | Unique identifier of the edge. |
| source     | string | Id of the source node.         |
| target     | string | Id of the target.              |

Optional fields:

| Field name      | Type          | Description                                                                                                                                                                                                                                                               |
| --------------- | ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| mainstat        | string/number | First stat shown in the overlay when hovering over the edge. It can be a string showing the value as is or it can be a number. If it is a number, any unit associated with that field is also shown                                                                       |
| secondarystat   | string/number | Same as mainStat, but shown right under it.                                                                                                                                                                                                                               |
| detail__*    | string/number | Any field prefixed with `detail__` will be shown in the header of context menu when clicked on the edge. Use `config.displayName` for more human readable label.                                                                                                          |
| thickness       | number        | The thickness of the edge. Default: `1`                                                                                                                                                                                                                                   |
| highlighted     | boolean       | Sets whether the edge should be highlighted. Useful, for example, to represent a specific path in the graph by highlighting several nodes and edges. Default: `false`                                                                                                     |
| color           | string        | Sets the default color of the edge. It can be an acceptable HTML color string. Default: `#999`                                                                                                                                                                            |
| strokeDasharray | string        | Sets the pattern of dashes and gaps used to render the edge. If unset, a solid line is used as edge. For more information and examples, refer to the [`stroke-dasharray` MDN documentation](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray). |

{{< admonition type="caution" >}}
Starting with 10.5, `highlighted` is deprecated.
It will be removed in a future release.
Use `color` to indicate a highlighted edge state instead.
{{< /admonition >}}

### Nodes data frame structure

Required fields:

| Field name | Type   | Description                                                                                  |
| ---------- | ------ | -------------------------------------------------------------------------------------------- |
| id         | string | Unique identifier of the node. This ID is referenced by edge in its source and target field. |

Optional fields:

| Field name    | Type          | Description                                                                                                                                                                                                                                                                                                                                                              |
| ------------- | ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| title         | string        | Name of the node visible in just under the node.                                                                                                                                                                                                                                                                                                                         |
| subtitle      | string        | Additional, name, type or other identifier shown under the title.                                                                                                                                                                                                                                                                                                        |
| mainstat      | string/number | First stat shown inside the node itself. It can either be a string showing the value as is or a number. If it is a number, any unit associated with that field is also shown.                                                                                                                                                                                            |
| secondarystat | string/number | Same as mainStat, but shown under it inside the node.                                                                                                                                                                                                                                                                                                                    |
| arc__*     | number        | Any field prefixed with `arc__` will be used to create the color circle around the node. All values in these fields should add up to 1. You can specify color using `config.color.fixedColor`.                                                                                                                                                                           |
| detail__*  | string/number | Any field prefixed with `detail__` will be shown in the header of context menu when clicked on the node. Use `config.displayName` for more human readable label.                                                                                                                                                                                                         |
| color         | string/number | Can be used to specify a single color instead of using the `arc__` fields to specify color sections. It can be either a string which should then be an acceptable HTML color string or it can be a number in which case the behavior depends on `field.config.color.mode` setting. This can be for example used to create gradient colors controlled by the field value. |
| icon          | string        | Name of the icon to show inside the node instead of the default stats. Only Grafana [built in icons](https://developers.grafana.com/ui/latest/index.html?path=/story/docs-overview-icon--icons-overview)) are allowed.                                                                                                                                                   |
| nodeRadius    | number        | Radius value in pixels. Used to manage node size.                                                                                                                                                                                                                                                                                                                        |
| highlighted   | boolean       | Sets whether the node should be highlighted. Useful for example to represent a specific path in the graph by highlighting several nodes and edges. Default: `false`                                                                                                                                                                                                      |
```

----------------------------------------

TITLE: Deleting Grafana Annotation by ID (HTTP Request)
DESCRIPTION: Example HTTP DELETE request to the `/api/annotations/:id` endpoint to remove a specific annotation in Grafana. It requires a valid `Authorization` header (Bearer token shown) and the ID of the annotation to be deleted (e.g., `1`). The `Accept` and `Content-Type` headers are set to `application/json`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_10

LANGUAGE: http
CODE:
```
DELETE /api/annotations/1 HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Setting Maximum Viewport Height - JSON
DESCRIPTION: Establishes rendering.maxHeight in JSON as the upper bound for the rendering viewport height, measured in pixels. Used to validate and constrain rendering requests.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_46

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "maxHeight": 500
  }
}
```

----------------------------------------

TITLE: Assigning Basic Role to Multiple Users - Terraform
DESCRIPTION: This Terraform example shows how to create multiple user resources and assign a basic role to all of them at once using a single 'grafana_role_assignment'. It requires defined users and a valid basic role UID, such as 'basic_editor'. The 'users' parameter allows assigning a role to several users simultaneously by passing their IDs. Inputs: user resource definitions and the targeted role UID. Outputs: all listed users with the specified Grafana role. Passwords and user parameters must be configured according to organization policies.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-terraform-provisioning/index.md#2025-04-23_snippet_2

LANGUAGE: terraform
CODE:
```
resource "grafana_user" "editor_user_2" {
  email    = "terraform_editor_2@example.com"
  login    = "terraform_editor_2_user"
  password = <TEST_PASSWORD>
}
resource "grafana_user" "editor_user_3" {
  email    = "terraform_editor_3@example.com"
  login    = "terraform_editor_3_user"
  password = <TEST_PASSWORD>
}

# Assign Editor role to multiply users
resource "grafana_role_assignment" "editor_role_assignment" {
  role_uid = "basic_editor"
  users    = [grafana_user.editor_user_2.id, grafana_user.editor_user_3.id]
}

```

----------------------------------------

TITLE: Increasing Open File Limit for Current Session (Bash)
DESCRIPTION: Sets the maximum number of open files (soft limit, `-S`) to 4096 (`-n 4096`) using the `ulimit` command. This temporary change applies only to the current shell session and can help resolve 'Too many open files' errors encountered during operations like `make run`.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
ulimit -S -n 4096
```

----------------------------------------

TITLE: Migrating Register Syntax in react-hook-form v7+ (JavaScript/JSX)
DESCRIPTION: Contrasts deprecated (ref-based) vs. updated (spread-based) registration for form inputs when migrating to react-hook-form v7. Demonstrates required field registration inline in input and clarifies library's API breaking change. Relies on react-hook-form version awareness and JSX inputs.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_13

LANGUAGE: jsx
CODE:
```
-(<input ref={register({ required: true })} name="test" />) + <input {...register('test', { required: true })} />;
```

----------------------------------------

TITLE: STARTTLS Connection Configuration
DESCRIPTION: Configuration settings for LDAP with STARTTLS connection
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/openldap/README.md#2025-04-23_snippet_5

LANGUAGE: ini
CODE:
```
port = 389
use_ssl = true
start_tls = true
```

----------------------------------------

TITLE: Managing Notification Templates in Grafana RBAC
DESCRIPTION: Specifies the RBAC permission required to create new or update existing templates used for Grafana alerting notifications. No specific associated scopes are listed (n/a).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_6

LANGUAGE: plaintext
CODE:
```
`alert.notifications.templates:write`
```

----------------------------------------

TITLE: Managing Mute Time Intervals in Grafana RBAC
DESCRIPTION: Specifies the RBAC permission required to create new or update existing mute time intervals for Grafana alerting notifications. No specific associated scopes are listed (n/a).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_3

LANGUAGE: plaintext
CODE:
```
`alert.notifications.time-intervals:write`
```

----------------------------------------

TITLE: Downloading Docker Compose Configuration - Bash
DESCRIPTION: Downloads the official Docker Compose YAML file for running Grafana, Loki, and Promtail from the Loki repository. This snippet requires wget to be installed and internet access. The downloaded configuration sets up the necessary containers for the tutorial environment, saving the file as docker-compose.yaml. The main output is the docker-compose.yaml file in the current directory. This is the foundational step for initializing the monitoring stack.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-with-logs/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
wget https://raw.githubusercontent.com/grafana/loki/refs/heads/main/production/docker-compose.yaml -O docker-compose.yaml
```

----------------------------------------

TITLE: Defining GET Endpoint for Exporting Alert Rule Group - HTTP
DESCRIPTION: Defines an HTTP GET endpoint used to export an alert rule group in provisioning file formats such as yaml, json, or hcl within Grafana. It supports both path and query parameters (e.g., specifying format and download options), allowing clients to initiate a file download or receive the export contents directly. This endpoint requires valid path parameters :folderUid and :group to identify the resource to export; returns success (200) or not found (404) responses.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_17

LANGUAGE: http
CODE:
```
GET /api/v1/provisioning/folder/:folderUid/rule-groups/:group/export
```

----------------------------------------

TITLE: Adding an admin user to a Grafana organization
DESCRIPTION: This optional step adds the admin user to a previously created organization. It's useful if the organization was created earlier or if subsequent steps fail.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/create-api-tokens-for-org.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
curl -X POST -H "Content-Type: application/json" -d '{"loginOrEmail":"admin", "role": "Admin"}' http://admin:admin@localhost:3000/api/orgs/<org id of new org>/users
```

----------------------------------------

TITLE: Referencing Query Value by Ref ID in Go Templates - Go Template - Markdown
DESCRIPTION: This snippet demonstrates how to reference a floating point value from a specific alert query (using its Ref ID, here 'A') in a Grafana alert rule template using the Go templating language. Dependencies include Grafana's alerting system with instant query results available, and knowledge of Go template syntax. The input is the values object with properties per Ref ID, and the output is the inserted value within the rendered annotation or label. Constraints are that this only works for instant queries and the Ref ID must match an available query.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_0

LANGUAGE: Go Template
CODE:
```
{{ $values.A.Value }}
```

----------------------------------------

TITLE: Querying Recorded Query Data in Prometheus (PromQL)
DESCRIPTION: This PromQL query example demonstrates how Grafana retrieves historical data points for a specific recorded query from the configured Prometheus remote write target. Grafana automatically generates this query, including the metric name and labels (`id`, `name`), when a recorded query is added to a dashboard panel. The panel's data source becomes '-- Mixed --' as it combines the original panel queries with this Prometheus query.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/recorded-queries/index.md#2025-04-23_snippet_0

LANGUAGE: promql
CODE:
```
generated_recorded_query_name{id="generated_id", name="recorded query name"}
```

----------------------------------------

TITLE: PGP Signature Block for Grafana Manifest (Text)
DESCRIPTION: This block contains the PGP signature corresponding to the preceding JSON manifest data within the signed message. Generated using OpenPGP.js v4.10.1 (as indicated by the comment), it allows verification of the manifest's origin (Grafana Labs) and integrity using the public key identified by `keyId: \"7e4d0c6a708866e7\"` found in the manifest itself. The signature is applied to the canonical form of the JSON data prepended by the PGP headers.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/installer/plugin/MANIFEST.txt#2025-04-23_snippet_1

LANGUAGE: text
CODE:
```
-----BEGIN PGP SIGNATURE-----
Version: OpenPGP.js v4.10.1
Comment: https://openpgpjs.org

wqEEARMKAAYFAl+2rOIACgkQfk0ManCIZudNOwIJAT8FTzwnRFCSLTOaR3F3
2Fh96eRbghokXcQG9WqpQAg8ZiVfGXeWWRNtV+nuQ9VOZOTO0BovWLuMkym2
ci8ABpWOAgd46LkGn3Dd8XVnGmLI6UPqHAXflItOrCMRiGcYJn5PxP1aCz8h
D0JoNI9TIKrhMtM4voU3Qhf3mIOTHueuDNS48w==
=mu2j
-----END PGP SIGNATURE-----
```

----------------------------------------

TITLE: Getting LBAC Rules for a Data Source in HTTP
DESCRIPTION: This HTTP GET request retrieves all existing LBAC rules for a data source identified by its UID. It requires specific permissions and returns a JSON response with team UIDs and their associated rules.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/datasource_lbac_rules.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/datasources/uid/my_datasource/lbac/teams HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Querying Graphite Servers for Chained Variables
DESCRIPTION: This Graphite query returns all servers for a selected application in a chained variable setup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_3

LANGUAGE: graphite
CODE:
```
apps.$app.*
```

----------------------------------------

TITLE: Creating New Alert Rule with HTTP POST - HTTP
DESCRIPTION: This HTTP POST request creates a new alert rule by submitting a ProvisionedAlertRule in the request body. Optional header 'X-Disable-Provenance' can enable editing provisioned resources via the Grafana UI. Upon success, the endpoint returns the created alert rule with a 201 status code; validation errors result in a 400 error. Input must conform to the ProvisionedAlertRule schema, and authorization may be needed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_31

LANGUAGE: HTTP
CODE:
```
POST /api/v1/provisioning/alert-rules
```

----------------------------------------

TITLE: Displaying Invitation Link in Go Template
DESCRIPTION: This Go template snippet inserts the unique invitation URL (`.LinkUrl`) from the context data into the email body. This link allows the recipient to accept the invitation and join the Grafana organization. Requires the Go templating engine and the `.LinkUrl` variable in the context.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/new_user_invite.txt#2025-04-23_snippet_3

LANGUAGE: gotemplate
CODE:
```
{{.LinkUrl}}
```

----------------------------------------

TITLE: Configuring YAML Frontmatter for Grafana Release Notes
DESCRIPTION: YAML configuration block defining build settings and product labels for Grafana release notes documentation. Specifies that the page should not be listed and applies product tags for cloud, enterprise and open source versions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-8-0-0-beta1.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
_build:
  list: false
labels:
  products:
    - cloud
    - enterprise
    - oss
title: Release notes for Grafana 8.0.0-beta1
```

----------------------------------------

TITLE: Rendering Card Grid using Hugo Shortcode
DESCRIPTION: This Hugo shortcode renders a grid of cards. The content for the cards is sourced from the page's front matter under the key specified (`cards`). The `type="simple"` parameter defines the visual layout style of the grid. This is used here to display links to the detailed pages for each Drilldown app (Metrics, Logs, Traces, Profiles).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/explore/simplified-exploration/_index.md#2025-04-23_snippet_2

LANGUAGE: hugo
CODE:
```
{{< card-grid key="cards" type="simple" >}}
```

----------------------------------------

TITLE: Basic Load Test Execution
DESCRIPTION: Runs the default load test for 15 minutes using 2 virtual users
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ ./run.sh
```

----------------------------------------

TITLE: Installing Grafana OSS via RPM Repository - Bash
DESCRIPTION: Installs the open-source (OSS) version of Grafana using zypper on SUSE/openSUSE from the previously added RPM repository. Requires: zypper, sudo privileges, repository configured. No parameters; output: grafana installed as system package.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
sudo zypper install grafana
```

----------------------------------------

TITLE: LBAC Rules Update API Response Example in HTTP
DESCRIPTION: This is an example HTTP response for a successful PUT request to update LBAC rules. It returns a JSON object confirming the update, including the data source ID, name, UID, and the updated rules for each team.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/datasource_lbac_rules.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Content-Length: 35

{
  "id": 1,
  "message": "Data source LBAC rules updated",
  "name": "loki",
  "rules": [
    {
      "teamUId": "fdnd1pf4m9sxvc",
      "rules": [
        "{ service_name=\"bigquery-sync-mysql\" }"
      ]
    },
    {
      "teamUid": "dfed1p2m9sxvfc",
      "rules": [
        "{ service_name=\"api\" }"
      ]
    }
  ],
  "uid": "ee1nm1t7spog0e"
}
```

----------------------------------------

TITLE: Using Grafana's Interval Variable in Prometheus Queries
DESCRIPTION: This Prometheus query demonstrates the use of the `$__interval` variable within the `rate()` function. Grafana automatically calculates this variable based on the panel width and selected time range, providing an adaptive time interval for aggregations suitable for the current zoom level.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/_index.md#2025-04-23_snippet_2

LANGUAGE: promql
CODE:
```
rate(http_requests_total[$__interval])
```

----------------------------------------

TITLE: Reading Receiver Permissions in Grafana RBAC
DESCRIPTION: Specifies the RBAC permission required to read permissions associated with contact points (receivers) in Grafana. This action is typically associated with broader `receivers:*` or specific `receivers:uid:*` scopes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
`receivers.permissions:read`
```

----------------------------------------

TITLE: Resetting Grafana Notification Policies via YAML Provisioning
DESCRIPTION: This YAML configuration example demonstrates how to reset the notification policy tree for specified organization IDs back to the Grafana default settings using provisioning. The `resetPolicies` key contains a list of organization IDs whose policies should be reset upon Grafana restart or provision reload.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_26

LANGUAGE: yaml
CODE:
```
# config file version
apiVersion: 1

# List of orgIds that should be reset to the default policy
resetPolicies:
  - 1

```

----------------------------------------

TITLE: Building Grafana E2E Test Plugin (Shell)
DESCRIPTION: This shell command uses yarn to build the end-to-end test plugin. It compiles the necessary frontend assets for the plugin described in the document for production or testing deployment.
SOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/grafana-extensionstest-app/README.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
yarn e2e:plugin:build
```

----------------------------------------

TITLE: Declaring Storybook Meta and ArgTypes in MDX for FeatureBadge (MDX)
DESCRIPTION: This snippet defines Storybook metadata and automatically generates a property table for the FeatureBadge component using MDX. The <Meta /> tag specifies the component to document along with its title, while <ArgTypes /> displays all props. Required environment includes Storybook with MDX support, and the FeatureBadge component properly exported. Input is the component reference; outputs are the Storybook documentation blocks for metadata and argument display.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/FeatureBadge/FeatureBadge.mdx#2025-04-23_snippet_1

LANGUAGE: mdx
CODE:
```
<Meta title=\"MDX|FeatureBadge\" component={FeatureBadge} />
```

LANGUAGE: mdx
CODE:
```
<ArgTypes of={FeatureBadge} />
```

----------------------------------------

TITLE: Forcing License Token Refresh via HTTP - Grafana Licensing API - HTTP
DESCRIPTION: This HTTP POST request is issued to /api/licensing/token/renew to manually request a new licensing token for Grafana Enterprise. The request requires a Bearer token and an empty JSON object as the body. The operation requires licensing:write permission. Proper headers must be set.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/licensing.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
POST /api/licensing/token/renew\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{}
```

----------------------------------------

TITLE: Handling Plurals with Trans Component using 'count' Prop in JSX
DESCRIPTION: Example of using the `<Trans>` component for handling pluralization. The `count` prop is provided with the numerical value (`messages.length`), and the variable `{{ count }}` is used in the default string. The `i18nKey` base (`inbox.heading`) will be used by i18next to find appropriate plural forms (_one, _other, etc.). Requires `Trans` import.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_11

LANGUAGE: js
CODE:
```
import { Trans } from 'app/core/internationalization';

<Trans i18nKey="inbox.heading" count={messages.length}>
  You got {{ count: messages.length }} messages
</Trans>;
```

----------------------------------------

TITLE: Team Creation Response Example - JSON
DESCRIPTION: Displays the JSON payload returned on successful creation of a Grafana team. The response includes a success message, the team's numeric ID, and a unique identifier (uid).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{\n  \"message\":\"Team created\",\n  \"teamId\":2,\n  \"uid\":\"ceaulqadfoav4e\"\n}
```

----------------------------------------

TITLE: Displaying Current Year using Go Template Functions
DESCRIPTION: This Go template snippet uses the built-in `now` function to get the current timestamp and pipes it (|) to the `date` function. The `date` function formats the timestamp using Go's reference layout string "2006" to display only the current year. It's used for copyright information in the email footer.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/welcome_on_signup.txt#2025-04-23_snippet_3

LANGUAGE: go-template
CODE:
```
{{now | date "2006"}}
```

----------------------------------------

TITLE: Importing the Grafana GPG Key - Bash
DESCRIPTION: Downloads the Grafana repository GPG signing key and installs it to the keyring, which is necessary for verifying package authenticity. Dependencies: wget, gpg, sudo. Input: None. Output: Places grafana.gpg in /etc/apt/keyrings/ for apt use. Required before adding a Grafana repository.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
sudo mkdir -p /etc/apt/keyrings/
wget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/grafana.gpg > /dev/null
```

----------------------------------------

TITLE: Starting Docker Stack using docker-compose (Shell)
DESCRIPTION: Starts the containers defined in the `docker-compose.yml` file in detached mode (`-d`) using the `docker-compose up` command. This brings up the full Grafana stack (Grafana, Prometheus, etc.) required for the tutorial as part of the interactive setup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
docker-compose up -d
```

----------------------------------------

TITLE: Using FileUpload Component (React, JSX)
DESCRIPTION: This snippet demonstrates how to import and use the FileUpload component from the @grafana/ui library in a React JSX context. The FileUpload component provides a button to trigger a file selection dialog, with the 'onFileUpload' prop handling file input events. Users can further customize the button label and accepted file types through respective props. The example shows logging the first uploaded file to the console when a file is selected.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/FileUpload/FileUpload.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { FileUpload } from '@grafana/ui';

<FileUpload
  onFileUpload={({ currentTarget }) => console.log('file', currentTarget?.files && currentTarget.files[0])}
/>;
```

----------------------------------------

TITLE: Defining OpenAPI Group Configuration in JSX
DESCRIPTION: Configuration object specifying the API group and version for OpenAPI snapshot generation.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/api/README.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
{
  Group:   "dashboard.grafana.app",
  Version: "v0alpha1",
}
```

----------------------------------------

TITLE: Showing Result of 'Labels to Fields' (Columns Mode)
DESCRIPTION: This Markdown table illustrates the output of the 'Labels to fields' transformation when used in 'Columns' mode. It converts time series labels (Server, Datacenter) into distinct columns alongside Time and Value.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_31

LANGUAGE: markdown
CODE:
```
| Time                | Server   | Datacenter | Value |
| ------------------- | -------- | ---------- | ----- |
| 2020-07-07 11:34:20 | Server A | EU         | 1     |
| 2020-07-07 11:34:20 | Server B | EU         | 2     |
```

----------------------------------------

TITLE: Wire-Generated Code with Custom Message in Go
DESCRIPTION: Shows the updated initialization code generated by Wire that includes passing the custom phrase to NewMessage.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_17

LANGUAGE: go
CODE:
```
func InitializeEvent(phrase string) (Event, error) {
    message := NewMessage(phrase)
    greeter := NewGreeter(message)
    event, err := NewEvent(greeter)
    if err != nil {
        return Event{}, err
    }
    return event, nil
}
```

----------------------------------------

TITLE: Enabling Workload Identity in Grafana Server Configuration
DESCRIPTION: INI configuration for enabling Workload Identity in Grafana's server configuration. This setting allows Grafana running in a Kubernetes environment to use Azure Workload Identity for authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_6

LANGUAGE: ini
CODE:
```
[azure]
workload_identity_enabled = true
```

----------------------------------------

TITLE: Presenting a PGP-Signed JSON Manifest for Grafana Plugin (JSON & PGP) - JSON
DESCRIPTION: This snippet demonstrates a plugin manifest containing essential metadata (such as manifest version, plugin version, signing organization, keyId, and hash of related files) in JSON, wrapped within PGP signed message delimiters. The manifest is used to verify the integrity and authenticity of plugin files by validating the signature. No direct dependencies are required to read this file, but PGP software or a compatible library such as OpenPGP.js is needed for signature verification. The content allows end-users or automation tools to check whether the plugin files they receive originate from Grafana and have not been tampered with.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/duplicate-plugins/nested/nested/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n{\n  "manifestVersion": "2.0.0",\n  "signatureType": "grafana",\n  "signedByOrg": "grafana",\n  "signedByOrgName": "Grafana Labs",\n  "plugin": "test-app",\n  "version": "1.0.0",\n  "time": 1621411638406,\n  "keyId": "7e4d0c6a708866e7",\n  "files": {\n    "plugin.json": "d4aee2052f5f9aaa3eecc90e5c5d9568efcd2d97595cd77fdcd1de0ada922638"\n  }\n}\n-----BEGIN PGP SIGNATURE-----\nVersion: OpenPGP.js v4.10.1\nComment: https://openpgpjs.org\n\nwqIEARMKAAYFAmCkxzYACgkQfk0ManCIZucKRAIJAUqsvNDA1GaHdMSQ4h+3\nlOXkvN7xMbzOpRvC3Wu7agfsNgmaQtctL/502jUpH94J6aItg7Wmx+mtvVGj\n5i456DitAgkBWDQU7KMAYRhAPNToRZhAdIBr0UXEOS6P9sM+xDuQ/gjZ2J+/\nIy8j85zhl//0hC/RLspYVxgbZFIHmEto/y+3bbs=\n=1s40\n-----END PGP SIGNATURE-----
```

----------------------------------------

TITLE: Creating AWS IAM Policy for Grafana SNS Publishing (JSON)
DESCRIPTION: This JSON snippet defines an AWS IAM policy granting permissions necessary for Grafana to publish messages to a specific Amazon SNS topic. It allows the 'sns:Publish' and 'sns:GetTopicAttributes' actions on the specified SNS topic resource ARN, which needs to be replaced with the actual ARN. This policy is attached to an IAM user or role whose credentials Grafana will use for authentication with AWS SNS.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/manage-contact-points/integrations/configure-amazon-sns.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": ["sns:Publish", "sns:GetTopicAttributes"],
      "Resource": "arn:aws:sns:<region>:<account_id>:<topic_name>"
    }
  ]
}
```

----------------------------------------

TITLE: Response for Deleting Snapshot by deleteKey via Grafana HTTP API (HTTP)
DESCRIPTION: Shows the JSON HTTP response upon successful deletion via the deleteKey mechanism, echoing a message and the deleted resource's ID, similar to authorized deletion responses for consistency.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_9

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{"message":"Snapshot deleted. It might take an hour before it's cleared from any CDN caches.", "id": 1}
```

----------------------------------------

TITLE: Enabling Debug Logging for Plugin Installation (Bash)
DESCRIPTION: Shows how to use the '--debug' or '-d' global option to enable verbose debug logging during a plugin installation. The debug output will be displayed in the terminal.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
grafana cli --debug plugins install <plugin-id>
```

----------------------------------------

TITLE: Fetching Usage Report Preview with HTTP GET Request
DESCRIPTION: Example HTTP GET request to preview the usage report that would be sent to the vendor.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
GET /api/admin/usage-report-preview
Accept: application/json
Content-Type: application/json
```

----------------------------------------

TITLE: Configuring Login Claims for JWT Authentication
DESCRIPTION: Configuration for specifying which JWT claims should be used for username and email identification during login, with option to auto-create users.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
# [auth.jwt]
# ...

# Specify a claim to use as a username to sign in.
username_claim = sub

# Specify a claim to use as an email to sign in.
email_claim = sub

# auto-create users if they are not already matched
# auto_sign_up = true
```

----------------------------------------

TITLE: Configuring Loki Logging Driver in Docker Compose
DESCRIPTION: This snippet shows how to configure a Docker service to use the Loki logging driver. It requires installing the Loki Docker driver plugin first and specifies the Loki server URL for log pushing.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/loki-promtail/README.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
# For this to work you need to install the logging driver see https://github.com/grafana/loki/tree/master/cmd/docker-driver#plugin-installation
logging:
  driver: loki
  options:
    loki-url: "http://loki:3100/loki/api/v1/push"
```

----------------------------------------

TITLE: Example Grouped Grafana Alert Notification for US-West Region (JSON)
DESCRIPTION: This JSON object shows an example of a grouped alert notification payload sent by Grafana Alerting to the 'US-West-Alerts' receiver. It combines firing alerts for both 'High CPU usage' and 'High Memory usage' from the 'us-west' region into a single notification, demonstrating the grouping functionality based on notification policies and labels.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_6

LANGUAGE: json
CODE:
```
{
  "receiver": "US-West-Alerts",
  "status": "firing",
  "alerts": [
    {
      "status": "firing",
      "labels": {
        "alertname": "High CPU usage - Multi-region",
        "grafana_folder": "Multi-region alerts",
        "instance": "server-05",
...
  {
    "status": "firing",
      "labels": {
        "alertname": "High Memory usage - Multi-region",
        "grafana_folder": "Multi-region alerts",
        "instance": "server-10",
      },

...}
```

----------------------------------------

TITLE: Stopping Grafana server via init.d - Shell
DESCRIPTION: Stops the Grafana server if managed via legacy init.d scripts. Requires service management compatibility and sudo access. No parameters. Output: service process stopped.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_12

LANGUAGE: shell
CODE:
```
sudo service grafana-server stop
```

----------------------------------------

TITLE: Disabling Presence Indicator in Grafana (INI)
DESCRIPTION: This INI configuration snippet disables the dashboard presence indicator feature in Grafana Enterprise or Cloud. Setting `recent_users_age` to 0 under the `[analytics.views]` section in the Grafana configuration file turns off the display of user avatars indicating recent activity. Requires Grafana Enterprise or Cloud.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/assess-dashboard-usage/index.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
```ini
[analytics.views]


# Disables the presence indicator
recent_users_age = 0
```
```

----------------------------------------

TITLE: Starting Grafana Service with init.d (Linux)
DESCRIPTION: Starts the Grafana server service using the init.d script. Used on older Linux systems or those configured with init.d.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
sudo service grafana-server start
```

----------------------------------------

TITLE: Enabling Anonymous Stats Display Feature Toggle in Grafana
DESCRIPTION: Configuration snippet to enable the displayAnonymousStats feature toggle, which allows viewing anonymous users and devices statistics in Grafana versions 10.2, 10.3, and 10.4.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/anonymous-auth/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
[feature_toggles]
enable = displayAnonymousStats
```

----------------------------------------

TITLE: Retrieving Client Certificate and Key for Caddy TLS
DESCRIPTION: These commands retrieve the client certificate and key from the Caddy TLS container, which are required for configuring TLS in Grafana Alerting webhook contact points.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/caddy_tls/README.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
docker exec devenv-caddy_tls-1 cat /etc/caddy/client.pem
```

LANGUAGE: shell
CODE:
```
docker exec devenv-caddy_tls-1 cat /etc/caddy/client.key
```

----------------------------------------

TITLE: Provisioning Custom Grafana Role with Permissions - Terraform
DESCRIPTION: This Terraform snippet illustrates how to define a custom Grafana role with specific permissions using the 'grafana_role' resource. Required dependencies include the Grafana Terraform provider and an adequately permissioned authentication token. The configuration covers the role's name, description, version, UID, and global availability, as well as a set of permission blocks specifying actions (like 'org.users:add', 'teams:create', etc.) and their scopes. Inputs: role metadata and permission settings. Outputs: a new custom role in your Grafana instance. Limitations: all action and scope strings must align with Grafana's RBAC model.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-terraform-provisioning/index.md#2025-04-23_snippet_3

LANGUAGE: terraform
CODE:
```
resource "grafana_role" "my_new_role" {
  name  = "my_new_role"
  description = "My test role"
  version = 1
  uid = "newroleuid"
  global = true

  permissions {
    action = "org.users:add"
    scope = "users:*"
  }
  permissions {
    action = "org.users:write"
    scope = "users:*"
  }
  permissions {
    action = "org.users:read"
    scope = "users:*"
  }
  permissions {
	  action = "teams:create"
  }
  permissions {
	  action = "teams:read"
	  scope = "teams:*"
  }
  permissions {
	  action = "teams:write"
	  scope = "teams:*"
  }
}

```

----------------------------------------

TITLE: Querying Frontend Settings via Grafana HTTP API - HTTP
DESCRIPTION: This snippet demonstrates how to retrieve current frontend configuration settings from a Grafana instance using a GET HTTP request. The request should include an Authorization header with a valid Bearer token and appropriate Accept and Content-Type headers set to application/json. The endpoint returns a JSON object detailing active datasources, build info, features, and default datasource settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/other.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/frontend/settings HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n
```

----------------------------------------

TITLE: Adding Links in Grafana Announcement Banner using Markdown
DESCRIPTION: Demonstrates how to add hyperlinks to announcement banner messages using Markdown syntax.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/announcement-banner/_index.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
[link text](https://www.example.com)
```

----------------------------------------

TITLE: Correlation Deletion Response in Grafana HTTP API
DESCRIPTION: HTTP response returned when a correlation is successfully deleted. The response indicates the operation was successful.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
{
  "message": "Correlation deleted"
}
```

----------------------------------------

TITLE: Including Standard Options Documentation using Hugo Shortcode
DESCRIPTION: This Hugo shortcode dynamically includes shared documentation content related to standard visualization options. It references a specific markdown file (`visualizations/standard-options.md`) from the `grafana` source, ensuring consistency across documentation by reusing common content. The `<GRAFANA_VERSION>` placeholder indicates that the specific version of the documentation to include is determined dynamically.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/canvas/index.md#2025-04-23_snippet_1

LANGUAGE: hugo
CODE:
```
{{< docs/shared lookup="visualizations/standard-options.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Defining Grafana Mute Timing using Terraform
DESCRIPTION: Creates a Grafana mute timing named 'No weekends' that prevents alert notifications from being sent during the specified intervals, in this case, Saturdays and Sundays. Requires replacing the placeholder Terraform resource name (`<terraform_mute_timing_name>`). This resource can be associated with notification policies to pause alerting during specific times.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_6

LANGUAGE: terraform
CODE:
```
 resource "grafana_mute_timing" "<terraform_mute_timing_name>" {
     name = "No weekends"

     intervals {
         weekdays = ["saturday", "sunday"]
     }
 }
```

----------------------------------------

TITLE: Checking Actual Dependencies of Grafana Server
DESCRIPTION: Command to view the actual compiled dependencies of grafana-server using the verbose flag. This can be useful for understanding what modules are actually included in the executable.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/UPGRADING_DEPENDENCIES.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
grafana-server -vv
```

----------------------------------------

TITLE: Controlling Time Range via URL Query Parameters
DESCRIPTION: Example URL query parameters `time` and `time.window` used to define a specific time range in Grafana. Both parameters should be specified in milliseconds. This example sets a 10-second range centered around the epoch timestamp 1500000000000 (from 1499999995000 to 1500000005000).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/manage-dashboard-links/index.md#2025-04-23_snippet_0

LANGUAGE: url
CODE:
```
?time=1500000000000&time.window=10000
```

----------------------------------------

TITLE: Retrieving CA Certificate from MQTT Container
DESCRIPTION: Command to display the contents of the CA certificate from the MQTT container. This certificate is needed when configuring TLS for MQTT contact points in Grafana Alerting.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/mqtt/README.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
docker exec devenv-mqtt-1 cat /etc/certs/ca.pem
```

----------------------------------------

TITLE: Enabling Persistent Notifications Page via Feature Flag (Configuration)
DESCRIPTION: This feature flag, `persistNotifications`, enables the display of error alerts (potentially including trace IDs if `tracing` is also enabled) on a dedicated page accessible under the user's Profile in Grafana. Set this flag to true in Grafana configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-0.md#2025-04-23_snippet_2

LANGUAGE: configuration
CODE:
```
persistNotifications
```

----------------------------------------

TITLE: Checking Port Usage (Windows/PowerShell)
DESCRIPTION: This PowerShell command uses 'netstat' to list active network connections and listening ports, then filters the output using 'findstr' to show any usage of port 9090. This helps identify potential port conflicts on Windows.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_8

LANGUAGE: powershell
CODE:
```
netstat -ano | findstr :9090
```

----------------------------------------

TITLE: Including Shared Documentation for Connect Null Values using Hugo Shortcode
DESCRIPTION: This Hugo shortcode dynamically includes shared documentation content about connecting null values from a separate file ('visualizations/connect-null-values.md'). It uses parameters like 'source', 'version', and 'leveloffset' to fetch the correct content for the specific Grafana version and adjust heading levels for proper integration into the current document structure. This promotes content reuse across the documentation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/visualizations/graph-styles-options.md#2025-04-23_snippet_2

LANGUAGE: Hugo Shortcode
CODE:
```
{{< docs/shared lookup="visualizations/connect-null-values.md" source="grafana" version="<GRAFANA_VERSION>" leveloffset="+1" >}}
```

----------------------------------------

TITLE: Set User Role Assignments Request
DESCRIPTION: PUT request to update multiple role assignments for a user. Requires both users.roles:add and users.roles:remove permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_23

LANGUAGE: http
CODE:
```
PUT /api/access-control/users/1/roles
Accept: application/json
Content-Type: application/json

{
    "global": false,
    "roleUids": [
        "ZiHQJq5nk",
        "GzNQ1357k"
    ]
}
```

----------------------------------------

TITLE: Reading Grafana Data Source Caching Settings (Plaintext)
DESCRIPTION: Defines the `datasources.caching:read` permission action needed to read data source query caching settings in Grafana. Access is related to data source scopes `datasources:*` and `datasources:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_14

LANGUAGE: plaintext
CODE:
```
`datasources.caching:read`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>
```

----------------------------------------

TITLE: Switching user context to a new Grafana organization
DESCRIPTION: This command switches the context for the admin user to the newly created organization, allowing further operations within that org's context.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/create-api-tokens-for-org.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
curl -X POST http://admin:admin@localhost:3000/api/user/using/<id of new org>
```

----------------------------------------

TITLE: Displaying Alert Labels and Annotations in Go Templates for Grafana Alerts
DESCRIPTION: This template iterates through firing and resolved alerts, displaying all labels and annotations for each alert. It shows the structure of both labels and annotations in a formatted list.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_14

LANGUAGE: go
CODE:
```
{{ define "custom.alert_labels_and_annotations" -}}
{{ len .Alerts.Resolved }} resolved alert(s)
{{ range .Alerts.Resolved -}}
  {{ template "alert.labels_and_annotations" . -}}
{{ end }}
{{ len .Alerts.Firing }} firing alert(s)
{{ range .Alerts.Firing -}}
  {{ template "alert.labels_and_annotations" . -}}
{{ end -}}
{{ end -}}
{{ define "alert.labels_and_annotations" }}
Alert labels: {{ len .Labels.SortedPairs }}
{{ range .Labels.SortedPairs -}}
- {{ .Name }} = {{ .Value }}
{{ end -}}
Alert annotations: {{ len .Annotations.SortedPairs }}
{{ range .Annotations.SortedPairs -}}
- {{ .Name }} = {{ .Value }}
{{ end -}}
{{ end -}}
```

----------------------------------------

TITLE: CloudWatch Logs Query for Alerting
DESCRIPTION: Example CloudWatch Logs Insights query that can be used for alerting. This query counts exceptions per hour, which returns numeric data suitable for alerts.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_8

LANGUAGE: text
CODE:
```
filter @message like /Exception/
    | stats count(*) as exceptionCount by bin(1h)
    | sort exceptionCount desc
```

----------------------------------------

TITLE: Formatting Grafana Variables for Graphite Glob Pattern
DESCRIPTION: Demonstrates the `:glob` format option, often used for Graphite queries. It formats multi-value variables into a glob pattern enclosed in curly braces `{value1,value2}`. The example shows `['test1', 'test2']` interpolated as `'{test1,test2}'`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
servers = ['test1', 'test2']
String to interpolate: '${servers:glob}'
Interpolation result: '{test1,test2}'
```

----------------------------------------

TITLE: Defining and Signing a Plugin Manifest with PGP - JSON
DESCRIPTION: This snippet shows a JSON object describing plugin metadata for Grafana, including versioning, organizational metadata, referenced root URLs, and cryptographic hashes for the plugin files. The manifest is enclosed by a PGP signature block that ensures data authenticity and integrity using OpenPGP.js. Required dependencies are tools supporting PGP signature generation and verification, like OpenPGP.js. Key fields like 'manifestVersion' and 'plugin' must match Grafana plugin requirements. The expected input is a well-formed JSON, and the output is a signed message for plugin verification. Limitations include the need to update the signature if any content changes.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/test-app-with-roles/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"private\",\n  \"signedByOrg\": \"gabrielmabille\",\n  \"signedByOrgName\": \"gabrielmabille\",\n  \"rootUrls\": [\n    \"http://localhost:3000/\"\n  ],\n  \"plugin\": \"test-app\",\n  \"version\": \"1.0.0\",\n  \"time\": 1667484928676,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"3348335ec100392b325f3eeb882a07c729e9cbf0f1ae331239f46840bb1a01eb\"\n  }\n}\n-----BEGIN PGP SIGNATURE-----\nVersion: OpenPGP.js v4.10.10\nComment: https://openpgpjs.org\n\nwrgEARMKAAYFAmNjzQAAIQkQfk0ManCIZucWIQTzOyW2kQdOhGNlcPN+TQxq\ncIhm509bAgiY3ZHrA6i95x6vef1z2cS6Q6+zzeLrfZ31AFtxq2Y/OYIQKBZC\nBZIp9LufCLCEDnwp+ocMGtDQV7yk1vUKM/zz/QIJAYs8d8pVnao31eqUB5Hy\n8WdkLFYa3V6rx1Da3iM24A5JgJwpTgudVYRQFRH6XR/HZt/EBRckAeQPxsN6\nqodkjllo\n=TMGo\n-----END PGP SIGNATURE-----
```

----------------------------------------

TITLE: Updating Organization User Details via PATCH - HTTP
DESCRIPTION: This HTTP PATCH request modifies properties (such as role) for a specific user in the current organization, using targeted authentication and a JSON payload identifying the new role. Only available to authorized admins. User ID is specified in the path.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
PATCH /api/org/users/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  "role": "Viewer",\n}
```

----------------------------------------

TITLE: Writing Grafana Release Notes with Markdown - Markdown
DESCRIPTION: This snippet consists of markdown content for the release notes of Grafana 7.4.5, including a generated notification and a bulleted list of significant security bug fixes with references to relevant CVEs and affected product tiers. It is intended for user-facing changelogs or documentation pages. The formatting uses standard Markdown headers, comments, and lists. No code dependencies are needed, but markdown rendering tools or platforms are expected to consume this block.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-4-5.md#2025-04-23_snippet_1

LANGUAGE: Markdown
CODE:
```
<!-- Auto generated by update changelog github action -->\n\n# Release notes for Grafana 7.4.5\n\n### Bug fixes\n\n- **Security**: Fix API permissions issues related to team-sync CVE-2021-28146, CVE-2021-28147. (Enterprise)\n- **Security**: Usage insights requires signed in users CVE-2021-28148. (Enterprise)\n- **Security**: Do not allow editors to incorrectly bypass permissions on the default data source. CVE-2021-27962. (Enterprise)
```

----------------------------------------

TITLE: Enabling Verbose Logging - Bash
DESCRIPTION: Enables verbose logging during image rendering in remote rendering services by setting RENDERING_VERBOSE_LOGGING to 'true'. When enabled with appropriate log level, debug-level messages are output for troubleshooting. No dependencies except log level must also be set to 'debug'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_25

LANGUAGE: bash
CODE:
```
RENDERING_VERBOSE_LOGGING=true
```

----------------------------------------

TITLE: Exporting a Specific Mute Timing via Grafana Provisioning API (HTTP Request)
DESCRIPTION: Makes a GET request to `/api/v1/provisioning/mute-timings/:name/export` to export a single mute timing specified by its 'name' in the path parameter. Optional query parameters 'download' (boolean) and 'format' (string, default 'yaml') control download behavior and file type. Requires the mute timing 'name' as a path parameter and appropriate permissions. Expects a 200 OK response with the exported data or a 403 Forbidden.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_25

LANGUAGE: http
CODE:
```
GET /api/v1/provisioning/mute-timings/:name/export
```

----------------------------------------

TITLE: Updating Grafana Contact Point with Message Template using Terraform
DESCRIPTION: Modifies the 'My contact point email' contact point (referenced by `<terraform_contact_point_name>`) to use the 'custom_email.message' template defined previously. The `email.message` property is set to invoke the template (`{{ template "custom_email.message" .}}`), thus customizing the content of email notifications sent via this contact point. Requires replacing the placeholder names.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_5

LANGUAGE: terraform
CODE:
```
 resource "grafana_contact_point" "<terraform_contact_point_name>" {
     name = "My contact point email"

     email {
         addresses               = ["<email_address>"]
         message                 = "{{ template \"custom_email.message\" .}}"
     }
 }
```

----------------------------------------

TITLE: Remove Team Member Response Example - JSON
DESCRIPTION: Reply in JSON confirming that the team member has been removed. Contains a status message only. No content about the deleted user is included.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_15

LANGUAGE: json
CODE:
```
{\n  \"message\":\"Team Member removed\"\n}
```

----------------------------------------

TITLE: Deleting a User from Organization - HTTP
DESCRIPTION: This HTTP DELETE command removes a user from the organization by specifying the userId in the URL. The operation is restricted to users with the proper org.users:remove permission. Requires Bearer token authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
DELETE /api/org/users/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Validating Go Modfile Ownership - Bash CLI Example
DESCRIPTION: This snippet demonstrates how to invoke the Modowners tool's 'check' command to validate a go.mod file. The command checks that every Go dependency in the specified modfile is assigned an owner. It requires Go installed and accessibility to the modowners.go script. The command returns no output if the file is valid or an error if unowned dependencies are found.
SOURCE: https://github.com/grafana/grafana/blob/main/scripts/modowners/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
go run scripts/modowners/modowners.go check go.mod
```

----------------------------------------

TITLE: Upgrading Grafana using YUM Repository (Bash)
DESCRIPTION: Updates the Grafana package specifically using the YUM package manager. This command assumes Grafana was installed using the Grafana YUM repository and is suitable for Red Hat-based systems like RHEL, CentOS, or Fedora.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/upgrade/upgrade-common-tasks.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
sudo yum update grafana
```

----------------------------------------

TITLE: Adding User Permission to Data Source in HTTP
DESCRIPTION: Sends a POST request to set user permission for a data source. The 'permission' field can be set to 'Query', 'Edit', or 'Admin' to add permission, or an empty string to remove it.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/datasource_permissions.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
POST /api/access-control/datasources/my_datasource/users/1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "permission": "Query",
}
```

----------------------------------------

TITLE: Configuring Google Chat Contact Point - YAML
DESCRIPTION: Sets up Grafana alert notifications to be sent to a Google Chat room via webhook. The essential parameter is the webhook 'url', with optional support for templated message content. Output is a formatted alert message posted on the specified Google Chat webhook endpoint. Requires a valid Google Chat webhook URL and no extra dependencies.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_8

LANGUAGE: yaml
CODE:
```
type: googlechat\nsettings:\n  # <string, required>\n  url: https://google/webhook\n  # <string>\n  message: |\n    {{ template \"default.message\" . }}\n
```

----------------------------------------

TITLE: Querying Elasticsearch Terms Filtered by Another Variable (JSON)
DESCRIPTION: This JSON query is used within Grafana's template variable settings to define a variable (e.g., `$host`). It queries Elasticsearch for terms in the `hostname` field, but filters the results based on the current value of another variable named `$source`. This allows for dynamic, dependent variable updates in a Grafana dashboard.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/elasticsearch/template-variables/index.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
```
{"find": "terms", "field": "hostname", "query": "source:$source"}
```
```

----------------------------------------

TITLE: Team Preferences Response Example - JSON
DESCRIPTION: The JSON object returned includes presentation-related settings for the referenced team, such as theme, default dashboard, and timezone. All fields are returned as strings or numbers, with empty values if not set.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_19

LANGUAGE: json
CODE:
```
{\n  \"theme\": \"\",\n  \"homeDashboardId\": 0,\n  \"timezone\": \"\"\n}
```

----------------------------------------

TITLE: Generating Multi-Region Test Data in CSV Format for Grafana Alerts
DESCRIPTION: This CSV data simulates CPU usage across different regions, services, and instances. It's used to create test data for demonstrating alert rules in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_4

LANGUAGE: csv
CODE:
```
region,cpu-usage,service,instance
us-west,35,web-server-1,server-01
us-west,81,web-server-1,server-02
us-east,79,web-server-2,server-03
us-east,52,web-server-2,server-04
us-west,45,db-server-1,server-05
us-east,77,db-server-2,server-06
us-west,82,db-server-1,server-07
us-east,93,db-server-2,server-08
```

----------------------------------------

TITLE: Enabling SAML Debug Logging in Grafana INI
DESCRIPTION: Shows how to enable debug level logging specifically for the SAML authentication module (`saml.auth`) in Grafana. This is configured within the `[log]` section of the Grafana configuration file using the `filters` option, aiding in troubleshooting SAML issues.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_19

LANGUAGE: ini
CODE:
```
[log]
filters = saml.auth:debug
```

----------------------------------------

TITLE: Kubectl Edit Confirmation Output (Bash)
DESCRIPTION: This text represents the standard output message from `kubectl` confirming that edits made to a deployment (e.g., 'grafana') using the `kubectl edit` command have been successfully saved and applied to the Kubernetes cluster.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_19

LANGUAGE: bash
CODE:
```
deployment.apps/grafana edited
```

----------------------------------------

TITLE: Querying User Permissions
DESCRIPTION: GET request to retrieve permissions for the current user. Optional reloadcache parameter to refresh permission cache.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_15

LANGUAGE: http
CODE:
```
GET /api/access-control/user/permissions
Accept: application/json
```

----------------------------------------

TITLE: Example Response for Updating Annotation - HTTP+JSON
DESCRIPTION: Sample HTTP response showing a successful full update of an annotation. The JSON response includes a confirmation message indicating completion of the operation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_7

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{\n    "message":"Annotation updated"\n}
```

----------------------------------------

TITLE: Executing a Common Labels/Annotations Template in Grafana - Go
DESCRIPTION: This snippet calls the 'custom.common_labels_and_annotations' template, passing in the notification data to generate a summary message containing shared metadata. Intended for use in notification channels needing group-level alert context. Input is the notification data object.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_12

LANGUAGE: go
CODE:
```
{{ template "custom.common_labels_and_annotations" . }}
```

----------------------------------------

TITLE: Setting KUBECONFIG and Querying API Resources using Kubectl Bash
DESCRIPTION: This Bash script demonstrates how to interact with the Grafana Kubernetes API server using `kubectl` during development. It first exports the `KUBECONFIG` environment variable, pointing it to the auto-generated development kubeconfig file located within the Grafana data directory. Then, it runs `kubectl api-resources` to list the resources available via the Grafana API server, confirming connectivity.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/README.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
export KUBECONFIG=$PWD/data/grafana-apiserver/grafana.kubeconfig
kubectl api-resources
```

----------------------------------------

TITLE: Displaying Notification Policy Component Diagram using Hugo Figure Shortcode
DESCRIPTION: Uses the Hugo 'figure' shortcode to embed a diagram showing the components and workflow within a notification policy, illustrating how it determines contact points, timings, and grouping. The snippet specifies the image source path, maximum display width, and alternative text.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/notifications/_index.md#2025-04-23_snippet_2

LANGUAGE: hugo
CODE:
```
{{< figure src="/media/docs/alerting/alerting-notification-policy-diagram-v5.png" max-width="750px" alt="A diagram of the notification policy component" >}}
```

----------------------------------------

TITLE: Configuring Tempo Backend Server in YAML
DESCRIPTION: This YAML snippet demonstrates how to configure the HTTP listen port for a Tempo backend server in Grafana v7.5. To use Tempo as a backend data source, specify the desired port under the 'server' configuration block in your Tempo configuration file. The 'http_listen_port' parameter determines which port Tempo listens for HTTP requests, and the snippet assumes no other dependencies are required within this block. The expected outcome is that Tempo will be reachable over HTTP on port 3101 as configured.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v7-5.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
server:\n  http_listen_port: 3101\n
```

----------------------------------------

TITLE: Slow Auth Token Test
DESCRIPTION: Executes auth token test with random query latency between 1 and 30 seconds
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
$ ./run.sh -c auth_token_slow_test -s 30
```

----------------------------------------

TITLE: Importing Storybook Blocks and UI Component in TypeScript
DESCRIPTION: This snippet imports the Meta and ArgTypes utilities from the Storybook blocks package and the Label component for documentation purposes. Dependencies include '@storybook/blocks' and the local './Label' module. These imports are foundational for setting up Storybook documentation, allowing the metadata and prop tables to be generated and rendered.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Label.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Meta, ArgTypes } from '@storybook/blocks';
import { Label } from './Label';
```

----------------------------------------

TITLE: Variable Syntax Example with [[ ]] Format in PromQL
DESCRIPTION: Example of using the [[varname]] syntax in Prometheus queries, which allows using variables in the middle of words.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/template-variables/index.md#2025-04-23_snippet_6

LANGUAGE: PromQL
CODE:
```
rate(http_requests_total{job=~"[[job]]"}[$_rate_interval])
```

----------------------------------------

TITLE: Querying Flask App CPU Usage in Prometheus
DESCRIPTION: This PromQL query selects the `flask_app_cpu_usage` metric from a configured Prometheus data source within Grafana. It is used as the input for an alert rule to monitor the CPU usage of a Flask application. The surrounding text indicates this query is entered in the query editor and used to set an alert threshold (e.g., 75%).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_6

LANGUAGE: promql
CODE:
```
flask_app_cpu_usage{}
```

----------------------------------------

TITLE: Debugging Wire Dependency Injection Error in Go
DESCRIPTION: An error message from Google Wire showing that a Struct function received an incorrect first argument. The error indicates that the function expects a pointer to a named struct but received a double pointer (**example.com/foo.A) instead.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/StructNotAStruct/want/wire_errs.txt#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
example.com/foo/wire.go:x:y: first argument to Struct must be a pointer to a named struct; found **example.com/foo.A
```

----------------------------------------

TITLE: Printing All Values from Classic Alert Conditions in Grafana (Go Template)
DESCRIPTION: This Go template snippet is used to print the numerical values from all firing time series in a Grafana classic alert condition. It uses the same match-based filtering on keys within $values, but prints $v.Value rather than $v.Labels. Dependencies include Grafana alert templating context and a properly structured $values object. Change 'B' in the match regex to your classic condition's Ref ID if needed. Outputs formatted lines like 'B0: 81.2345'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_18

LANGUAGE: go
CODE:
```
{{ range $k, $v := $values -}}\n{{ if (match "B[0-9]+" $k) -}}\n{{ $k }}: {{ $v.Value }}{{ end }}\n{{ end }}
```

----------------------------------------

TITLE: JSON Diff Response for Dashboard Comparison in Grafana HTTP API
DESCRIPTION: This HTTP response returns an HTML representation of the JSON diff between two dashboard versions, similar to diffs seen on GitHub or GitLab.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: text/html; charset=UTF-8

<p id="l1" class="diff-line diff-json-same">
  <!-- Diff omitted -->
</p>
```

----------------------------------------

TITLE: Add User Role Assignment Response
DESCRIPTION: Success response for role assignment operation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_20

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8

{
    "message": "Role added to the user."
}
```

----------------------------------------

TITLE: Defining grafana.datasource Attributes for OpenTelemetry
DESCRIPTION: Defines OpenTelemetry semantic convention attributes for Grafana datasources. It includes `grafana.datasource.type` (string, e.g., 'prometheus') and `grafana.datasource.uid` (string, e.g., 'abcdefg-123456'). Both attributes are recommended and stable.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/semconv/README.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
<!-- semconv trace.grafana.datasource -->
| Attribute  | Type | Description  | Examples  | [Requirement Level](https://opentelemetry.io/docs/specs/semconv/general/attribute-requirement-level/) | Stability |
|---|---|---|---|---|---|
| `grafana.datasource.type` | string | The datasource type. | `prometheus`; `loki`; `grafana-github-datasource` | `Recommended` | ![Stable](https://img.shields.io/badge/-stable-lightgreen) |
| `grafana.datasource.uid` | string | The datasource unique identifier. | `abcdefg-123456` | `Recommended` | ![Stable](https://img.shields.io/badge/-stable-lightgreen) |
<!-- endsemconv -->
```

----------------------------------------

TITLE: Configuring Rule Query Offset for Unified Alerting - INI - Markdown Block
DESCRIPTION: Sets the rule_query_offset used when converting alert rules with unified alerting. This configuration should be included in the Grafana OSS or Enterprise configuration file under the [unified_alerting.prometheus_conversion] section. The rule_query_offset parameter determines the default offset time for rule queries during conversion unless overridden by a rule group setting. Requires knowledge of Grafana INI configuration syntax.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/alerting-migration/migration-api.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[unified_alerting.prometheus_conversion]\nrule_query_offset = 1m\n
```

----------------------------------------

TITLE: Illustrating Series to Rows Transformation in Markdown
DESCRIPTION: This code snippet demonstrates how to represent tabular data in Markdown, showing the input and output of the 'Series to rows' transformation in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_40

LANGUAGE: markdown
CODE:
```
**Query A:**

| Time                | Temperature |
| ------------------- | ----------- |
| 2020-07-07 11:34:20 | 25          |
| 2020-07-07 10:31:22 | 22          |
| 2020-07-07 09:30:05 | 19          |

**Query B:**

| Time                | Humidity |
| ------------------- | -------- |
| 2020-07-07 11:34:20 | 24       |
| 2020-07-07 10:32:20 | 29       |
| 2020-07-07 09:30:57 | 33       |

Here is the result after applying the Series to rows transformation.

| Time                | Metric      | Value |
| ------------------- | ----------- | ----- |
| 2020-07-07 11:34:20 | Temperature | 25    |
| 2020-07-07 11:34:20 | Humidity    | 22    |
| 2020-07-07 10:32:20 | Humidity    | 29    |
| 2020-07-07 10:31:22 | Temperature | 22    |
| 2020-07-07 09:30:57 | Humidity    | 33    |
| 2020-07-07 09:30:05 | Temperature | 19    |
```

----------------------------------------

TITLE: Example Configuration Query Result for Value Mappings
DESCRIPTION: This table represents the data returned by a configuration query, intended to be used for creating value mappings via the 'Config from query results' transformation. Each row defines a mapping from a value to text and color.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_7

LANGUAGE: text
CODE:
```
| Value | Text   | Color |
| ----- | ------ | ----- |
| L     | Low    | blue  |
| M     | Medium | green |
| H     | High   | red   |
```

----------------------------------------

TITLE: Handling BackendSrv Fetch Errors for Invalid JSON in JavaScript
DESCRIPTION: Illustrates a breaking change in Grafana's `backendSrv.fetch()` behavior. Previously, API calls like `getBackendSrv().post()` returning invalid JSON would resolve with an empty object (`{}`). Starting from this version, such responses will throw an error if the response is expected to be JSON (based on Content-Type header or request options). Developers must now wrap calls to `backendSrv` methods in error handling logic (e.g., try/catch) to manage potential JSON parsing errors.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-9-0-0-beta2.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
// PREVIOUSLY: this was returning with an empty object {} - in case the response is an invalid JSON
return await getBackendSrv().post(`${API_ROOT}/${id}/install`);

// AFTER THIS CHANGE: the following will throw an error - in case the response is an invalid JSON
return await getBackendSrv().post(`${API_ROOT}/${id}/install`);
```

----------------------------------------

TITLE: Sample Trust Relationship for IAM Role with Grafana Assume Role
DESCRIPTION: JSON configuration for the trust relationship policy document needed when setting up Grafana Assume Role. This policy allows Grafana's AWS account to assume the role using STS with a specific external ID for security.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/aws-authentication/index.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "AWS": {Grafana's AWS Account}
            },
            "Action": "sts:AssumeRole",
            "Condition": {
                "StringEquals": {
                    "sts:ExternalId": {External ID unique to your account}
                }
            }
        }
    ]
}
```

----------------------------------------

TITLE: Configuring Grafana Plugin Directory Path in INI
DESCRIPTION: This INI configuration snippet shows how to set the `plugins` property within the `[paths]` section of the Grafana configuration file. This property specifies the directory where Grafana should look for custom plugins. Replace `/path/to/grafana-plugins` with the actual absolute path to your plugin development directory. Grafana must be restarted for this change to take effect.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/set-up-environment.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[paths]
plugins = "/path/to/grafana-plugins"
```

----------------------------------------

TITLE: Building the Plugin for Production using Yarn
DESCRIPTION: Executes the production build process for the plugin using Yarn. This command typically compiles source code, bundles assets, and places the distributable files into a 'dist' directory, ready for packaging. Requires Yarn and the necessary build toolchain (e.g., Node.js) to be installed, along with project dependencies.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/publish-your-plugin.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
yarn build
```

----------------------------------------

TITLE: Configuring Code Expiration for Passwordless Auth in Grafana (INI)
DESCRIPTION: This configuration sets the validity duration for the one-time password (OTP) or magic link sent via email for passwordless authentication. The `code_expiration` option under `[auth.passwordless]` defines how long the code remains valid. The example sets it to 20 minutes (`20m`). Passwordless authentication must be enabled.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/passwordless/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
[auth.passwordless]
enabled = true
code_expiration = 20m
```

----------------------------------------

TITLE: Iterating Alerts and Accessing Labels via Dot Notation in Grafana Templates - Go
DESCRIPTION: This snippet demonstrates accessing a label using dot notation within a Go template definition in Grafana. It iterates over `.Alerts` and prints each alert's name using `.Labels.alertname`. It requires each alert to define an `alertname` label; intended output is a set of alert names formatted for notification.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_2

LANGUAGE: go
CODE:
```
{{ define "custom_message" -}}
{{ range .Alerts }}
The name of the alert is {{ .Labels.alertname }}
{{ end }}
{{ end }}
```

----------------------------------------

TITLE: SQL Query for Second Part of Multi-Series Graph in Grafana
DESCRIPTION: This query is the second part of a two-query set for a multi-series graph in Grafana. It's similar to the first query but calculates the average of valueTwo instead.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_11

LANGUAGE: sql
CODE:
```
SELECT
  $__timeGroup(time, '5m') as time,
  measurement + ' - value two' as metric,
  avg(valueTwo) as valueTwo
FROM
  metric_values
GROUP BY
  $__timeGroup(time, '5m'),
  measurement
ORDER BY 1
```

----------------------------------------

TITLE: Receiving Success Response After Org Preferences Update - JSON
DESCRIPTION: Simple JSON response indicating successful update of organization preferences. Returned after a valid PUT or PATCH request to the org preferences endpoint. Message is always "Preferences updated" upon success.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_9

LANGUAGE: json
CODE:
```
{"message":"Preferences updated"}
```

----------------------------------------

TITLE: YAML Front Matter Configuration for Release Notes
DESCRIPTION: YAML configuration block defining build settings and product labels for Grafana 7.5.3 release notes documentation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-3.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
_build:
  list: false
labels:
  products:
    - cloud
    - enterprise
    - oss
title: Release notes for Grafana 7.5.3
```

----------------------------------------

TITLE: Higher-Order Component withErrorBoundary for Error Wrapping - React & Grafana UI - TypeScript
DESCRIPTION: Demonstrates creating a higher-order component with withErrorBoundary, enabling any component to be wrapped in an error boundary declaratively. Requires '@grafana/ui', TypeScript, and React. Accepts a functional component and error boundary options, returning a new component with built-in error protection. Useful for consistently handling errors across reusable components.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ErrorBoundary/ErrorBoundary.mdx#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { withErrorBoundary } from '@grafana/ui';\n\ninterface MyCompProps {}\n\nconst MyComp = withErrorBoundary(\n  (props: MyCompProps) => {\n    return <>...</>;\n  },\n  { style: 'page' }\n);
```

----------------------------------------

TITLE: Creating a Simple Story in JSX
DESCRIPTION: Shows how to create a basic story for a component using a named export.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/storybook.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
export const someStory = () => <MyComponent />;
```

----------------------------------------

TITLE: Setting Multiple Values for a Dashboard Variable via URL
DESCRIPTION: Shows how to pass multiple values ('value1', 'value2') for a single dashboard variable ('example') by repeating the 'var-example' query parameter for each value. This is useful for variables that support multiple selections.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/create-dashboard-url-variables/index.md#2025-04-23_snippet_3

LANGUAGE: uri
CODE:
```
https://${your-domain}/path/to/your/dashboard?var-example=value1&var-example=value2
```

----------------------------------------

TITLE: Configuring DNS using dnsmasq
DESCRIPTION: Commands to install and configure dnsmasq for local domain resolution with .loc TLD
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha_test/README.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ sudo apt-get install dnsmasq
$ echo 'address=/loc/127.0.0.1' | sudo tee /etc/dnsmasq.d/dnsmasq-loc.conf > /dev/null
$ sudo /etc/init.d/dnsmasq restart
$ ping whatever.loc
```

----------------------------------------

TITLE: Removing an External Group from a Team with HTTP API in HTTP
DESCRIPTION: Shows a DELETE request to remove an external group from a given Grafana team. The 'groupId' is provided as a URL query parameter, and valid bearer authentication is required with 'teams.permissions:write'. The request and response both use JSON, and error codes handle issues such as invalid authorization or references.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team_sync.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
DELETE /api/teams/1/groups?groupId=cn%3Deditors%2Cou%3Dgroups%2Cdc%3Dgrafana%2Cdc%3Dorg HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt
```

----------------------------------------

TITLE: Embedding Image of Pie Chart Labels (Hugo Shortcode)
DESCRIPTION: Uses a Hugo shortcode (`figure`) to embed an image illustrating how labels (Name and Percent) appear on a Grafana pie chart. Attributes like `src`, `alt`, and `max-width` configure the image display.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_7

LANGUAGE: markdown
CODE:
```
{{< figure src="/static/img/docs/pie-chart-panel/pie-chart-labels-7-5.png" alt="Pie chart labels" max-width="350px" >}}
```

----------------------------------------

TITLE: Including Body Partial with Go Template
DESCRIPTION: Uses the Go template directive `{{> body }}` to include or render a partial template named 'body'. This is a common technique for modularizing templates, allowing the main content area to be defined separately and injected dynamically.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/partials/layout/default.txt#2025-04-23_snippet_0

LANGUAGE: Go Template
CODE:
```
{{> body }}
```

----------------------------------------

TITLE: Defining Pie Chart Data with Multiple Rows and Columns (Markdown Table)
DESCRIPTION: Presents a data format with multiple numeric columns and multiple rows using a Markdown table. This example demonstrates that by default, only the values from the last row are summed for the pie chart unless configured to show 'All values'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_4

LANGUAGE: markdown
CODE:
```
| Value1 | Value2 | Value3 | Optional |
| ------ | ------ | ------ | -------- |
| 5      | 3      | 2      | Sums10   |
| 10     | 6      | 4      | Sums20   |
| 20     | 8      | 2      | Sums30   |
```

----------------------------------------

TITLE: Example Output Data after Convert Field Type Transformation
DESCRIPTION: This table displays the result after applying the 'Convert field type' transformation to the 'Time' field from the sample query. The transformation converted the year strings to full timestamp representations, setting the time to the beginning of each year (00:00:00). This example likely used 'Time' as the target type and 'YYYY' as the DateFormat.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_10

LANGUAGE: text
CODE:
```
| Time                | Mark  | Value |
| ------------------- | ----- | ----- |
| 2017-01-01 00:00:00 | above | 25    |
| 2018-01-01 00:00:00 | below | 22    |
| 2019-01-01 00:00:00 | below | 29    |
| 2020-01-01 00:00:00 | above | 22    |
```

----------------------------------------

TITLE: Skipping OAuth Provider Role Sync via 'skip_org_role_sync' (Plaintext)
DESCRIPTION: This represents the 'skip_org_role_sync' configuration option used within an individual OAuth provider's settings in Grafana v9.4. Setting this allows Grafana administrators to manage organization roles within Grafana itself, bypassing role synchronization specifically for that configured OAuth provider.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-4.md#2025-04-23_snippet_4

LANGUAGE: plaintext
CODE:
```
skip_org_role_sync
```

----------------------------------------

TITLE: Enabling Debug Log Level in Grafana Configuration - YAML
DESCRIPTION: This YAML snippet modifies the logging configuration in grafana.ini (as embedded in values.yaml), changing the log level to 'debug' under the mode: console section. It ensures verbose logging for troubleshooting. Requires correct indentation. Necessary when detailed logs are essential.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_22

LANGUAGE: yaml
CODE:
```
# This is the values.yaml file
   .....
.......
....
grafana.ini:
paths:
   data: /var/lib/grafana/
   .....
.......
....
   mode: console
   level: debug
```

----------------------------------------

TITLE: Formatting Grafana Variables for Elasticsearch Lucene Queries
DESCRIPTION: Shows the `:lucene` format option, designed for Elasticsearch Lucene queries. It formats multi-value variables into a Lucene OR query string `("value1" OR "value2")`. The example shows `['test1', 'test2']` interpolated as `'("test1" OR "test2")'`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
servers = ['test1', 'test2']
String to interpolate: '${servers:lucene}'
Interpolation result: '("test1" OR "test2")'
```

----------------------------------------

TITLE: Example Error Log for Invalid Certificate Authority (Log)
DESCRIPTION: Illustrates Grafana server log entries showing a rendering failure due to an `ERR_CERT_AUTHORITY_INVALID` error. This typically occurs when the Grafana instance uses HTTPS with a certificate signed by an internal or custom CA that is not trusted by the Chromium instance used for rendering.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_9

LANGUAGE: log
CODE:
```
t=2019-12-04T12:39:22+0000 lvl=error msg="Render request failed" logger=rendering error=map[] url="https://192.168.106.101:3443/d-solo/zxDJxNaZk/graphite-metrics?orgId=1&refresh=1m&from=1575438321300&to=1575459921300&var-Host=master1&panelId=4&width=1000&height=500&tz=Europe%2FBerlin&render=1" timestamp=0001-01-01T00:00:00.000Z
t=2019-12-04T12:39:22+0000 lvl=error msg="Rendering failed." logger=context userId=1 orgId=1 uname=admin error="Rendering failed: Error: net::ERR_CERT_AUTHORITY_INVALID at https://192.168.106.101:3443/d-solo/zxDJxNaZk/graphite-metrics?orgId=1&refresh=1m&from=1575438321300&to=1575459921300&var-Host=master1&panelId=4&width=1000&height=500&tz=Europe%2FBerlin&render=1"
t=2019-12-04T12:39:22+0000 lvl=error msg="Request Completed" logger=context userId=1 orgId=1 uname=admin method=GET path=/render/d-solo/zxDJxNaZk/graphite-metrics status=500 remote_addr=192.168.106.101 time_ms=310 size=1722 referer="https://grafana.xxx-xxx/d/zxDJxNaZk/graphite-metrics?orgId=1&refresh=1m"
```

----------------------------------------

TITLE: Response for Root Level Folder and Dashboard Retrieval in HTTP
DESCRIPTION: This HTTP response demonstrates the format of the returned data when retrieving folders and dashboards at the root level. It includes details such as ID, UID, title, URL, type, tags, and starred status for each item.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder_dashboard_search.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

[
  {
    "id": 163,
    "uid": "000000163",
    "orgId": 1,
    "title": "Folder",
    "url": "/dashboards/f/000000163/folder",
    "type": "dash-folder",
    "tags": [],
    "isStarred": false,
    "uri":"db/folder" // deprecated in Grafana v5.0
  },
  {
    "id":1,
    "uid": "cIBgcSjkk",
    "orgId": 1,
    "title":"Production Overview",
    "url": "/d/cIBgcSjkk/production-overview",
    "type":"dash-db",
    "tags":[prod],
    "isStarred":true,
    "uri":"db/production-overview" // deprecated in Grafana v5.0
  }
]
```

----------------------------------------

TITLE: Setting HTTPS Certificate and Key Files - Bash
DESCRIPTION: Specifies the file paths for the HTTPS certificate and key using HTTP_CERT_FILE and HTTP_CERT_KEY environment variables. Used to start the renderer's HTTPS server. Paths must be accessible within the container or host running the process.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_15

LANGUAGE: bash
CODE:
```
HTTP_CERT_FILE=./path/to/cert
HTTP_CERT_KEY=./path/to/key
```

----------------------------------------

TITLE: Restoring Dashboard to Previous Version in Grafana HTTP API
DESCRIPTION: This HTTP request restores a dashboard to a specific previous version by providing the dashboard UID and the version number to restore to.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
POST /api/dashboards/uid/QA7wKklGz/restore
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "version": 1
}
```

----------------------------------------

TITLE: Example HTTP Request for Deleting a Grafana Custom Role
DESCRIPTION: Shows an example HTTP DELETE request to the `/api/access-control/roles/:uid` endpoint to delete a specific Grafana custom role identified by its UID. It includes query parameters `force=true` to delete assignments even if the role is assigned, and `global=false` to specify the role is not global (using the default org ID). An `Accept: application/json` header indicates the expected response format.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_11

LANGUAGE: http
CODE:
```
DELETE /api/access-control/roles/jZrmlLCGka?force=true&global=false
Accept: application/json
```

----------------------------------------

TITLE: Displaying Code Expiration Time in Grafana Template (Go Template)
DESCRIPTION: This template placeholder inserts the duration (in minutes) for which the confirmation code remains valid. The `.Expire` variable, containing the time limit, must be available during template rendering.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/passwordless_verify_new_user.txt#2025-04-23_snippet_2

LANGUAGE: go-template
CODE:
```
{{ .Expire }}
```

----------------------------------------

TITLE: Listing Dependencies Owned by Teams - Bash CLI Example
DESCRIPTION: This example uses the Modowners 'modules' command to list all direct Go module dependencies owned by specified teams. The command targets owners provided as a comma-separated list. Requires Go, the modowners.go script, and a populated go.mod. Output lists each dependency@version owned by the given teams.
SOURCE: https://github.com/grafana/grafana/blob/main/scripts/modowners/README.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
go run scripts/modowners/modowners.go modules -o @grafana/grafana-release-guild,@grafana/identity-access-team go.mod
```

----------------------------------------

TITLE: Implementing RadioButtonGroup with AutoSaveField in React
DESCRIPTION: Example of using AutoSaveField with a RadioButtonGroup component for automatic option selection saving.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/AutoSaveField/AutoSaveField.mdx#2025-04-23_snippet_4

LANGUAGE: jsx
CODE:
```
<AutoSaveField
  onFinishChange={customRequest}
  //Complete field args if needed
>
  {(onChange) => (
    <RadioButtonGroup
      options={radioButtonOptions}
      value={currentOption}
      onChange={(value) => {
        onChange(value);
        //Complete code if needed
      }}
    />
  )}
</AutoSaveField>
```

----------------------------------------

TITLE: Granting CAP_NET_BIND_SERVICE via systemd Override (INI)
DESCRIPTION: These INI-formatted configuration lines are added to the systemd service override file (e.g., `/etc/systemd/system/grafana-server.service.d/override.conf`). They grant the `CAP_NET_BIND_SERVICE` capability, allowing the Grafana process to bind to ports below 1024. `PrivateUsers=false` is required as capabilities cannot be granted within a private user namespace.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/systemd/bind-net-capabilities.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[Service]
# Give the CAP_NET_BIND_SERVICE capability
CapabilityBoundingSet=CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_BIND_SERVICE

# A private user cannot have process capabilities on the host's user
# namespace and thus CAP_NET_BIND_SERVICE has no effect.
PrivateUsers=false
```

----------------------------------------

TITLE: LDAP TLS Configuration
DESCRIPTION: TLS configuration settings for LDAP server connection in the TOML configuration file
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/openldap/README.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
tls_ciphers = ["TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"]
min_tls_version = "TLS1.2"
ssl_skip_verify = true
root_ca_cert = "devenv/docker/blocks/auth/openldap/certs/default-ca.pem"
client_cert = "devenv/docker/blocks/auth/openldap/certs/ldap.crt"
client_key = "devenv/docker/blocks/auth/openldap/certs/ldap.key"
```

----------------------------------------

TITLE: Creating New Mute Timing with HTTP POST - HTTP
DESCRIPTION: This HTTP POST snippet is used to create a mute timing, requiring a MuteTimeInterval object in the request body. The endpoint returns the created entity with status 201 or a validation error with 400. Headers can include 'X-Disable-Provenance' for enabling resource editing within Grafana UI. The request body must match the MuteTimeInterval schema, and results are in JSON.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_33

LANGUAGE: HTTP
CODE:
```
POST /api/v1/provisioning/mute-timings
```

----------------------------------------

TITLE: Update Team Response Example - JSON
DESCRIPTION: A simple JSON response indicating successful update of a team. Contains only a status message confirming the operation. Does not return the modified team object.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_7

LANGUAGE: json
CODE:
```
{\n  \"message\":\"Team updated\"\n}
```

----------------------------------------

TITLE: Teamsync Configuration for Nested Keycloak Groups (INI)
DESCRIPTION: Example Grafana configuration for teamsync when using nested Keycloak groups that might contain special characters. It uses the `reverse` function in the JMESPath expression for `groups_attribute_path` to handle potentially complex group names like `Global:department`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_5

LANGUAGE: ini
CODE:
```
[auth.generic_oauth]
groups_attribute_path = reverse("Global:department")
```

----------------------------------------

TITLE: Providing Cryptographic Signature for Plugin Manifest (PGP SIGNATURE)
DESCRIPTION: This PGP SIGNATURE block supplies the cryptographic signature for the plugin's JSON manifest, enabling verification of the manifest's integrity and authenticity using the specified key. Dependencies include an OpenPGP implementation for verification (e.g., GnuPG or OpenPGP.js), and the validity of the original manifest as input; the output is a boolean verification result. The signature is ASCII-armored, must be kept alongside the manifest, and is only usable if the manifest content remains unchanged.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/plugin-with-dist/plugin/dist/MANIFEST.txt#2025-04-23_snippet_1

LANGUAGE: PGP SIGNATURE
CODE:
```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "plugin": "test-datasource",
  "version": "1.0.0",
  "time": 1661171059101,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "203ef4a613c5693c437a665cd67f95e2756a0f71b336b2ffb265db7c180d0b19"
  }
}
-----BEGIN PGP SIGNATURE-----
Version: OpenPGP.js v4.10.10
Comment: https://openpgpjs.org

wrgEARMKAAYFAmMDdXMAIQkQfk0ManCIZucWIQTzOyW2kQdOhGNlcPN+TQxq
cIhm54zLAgdfVimeut6Gw9MrIACBZUSH0ht9p9j+iG6MDjpmEFIpqVJrem6f
8wBv0/kmYU3LV9MWyPuUeRfBdccjQKSjEXlfEAIJAVmut9LcSKIykhWuQA+7
VMVvJPXzlPkeoYsGYvzAlxh8i2UomCU15UChe62Gzq5V5HgGYkX5layIb5XX
y2Pio0lc
=/TR0
-----END PGP SIGNATURE-----
```

----------------------------------------

TITLE: Node Metrics Data in InfluxDB Line Protocol
DESCRIPTION: Time series data points containing various system metrics exported by node_exporter. Includes measurements for disk performance, memory utilization, system load, and other node statistics formatted in InfluxDB line protocol with nanosecond precision timestamps.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/incomplete_fields_full.txt#2025-04-23_snippet_2

LANGUAGE: influxdb
CODE:
```
node_disk,device=nvme0n1 discard_time_seconds_total=0 1625842606119350390
node_disk,device=dm-0 discard_time_seconds_total=0 1625842606119387469
node_disk,device=dm-1 discard_time_seconds_total=0 1625842606119408059
node_disk,device=dm-2 discard_time_seconds_total=0 1625842606119427965
node_disk,device=nvme0n1 flush_requests_total=8.2776030773264636e-305 1625842606119351194
node_disk,device=dm-0 flush_requests_total=0 1625842606119388383
node_disk,device=dm-1 flush_requests_total=0 1625842606119408727
node_disk,device=dm-2 flush_requests_total=0 1625842606119428731
node_disk,device=nvme0n1 flush_requests_time_seconds_total=112.684 1625842606119352392
node_disk,device=dm-0 flush_requests_time_seconds_total=0 1625842606119389100
node_disk,device=dm-1 flush_requests_time_seconds_total=0 1625842606119409394
node_disk,device=dm-2 flush_requests_time_seconds_total=0 1625842606119429446
node intr_total=384262117 1625842606119685058
node context_switches_total=605111048 1625842606119685058
node forks_total=515402 1625842606119685058
node_memory MemTotal_bytes=16445845504 1625842606118926829
node_memory MemFree_bytes=3914833920 1625842606118926829
node_memory MemAvailable_bytes=10026749952 1625842606118926829
```

----------------------------------------

TITLE: Displaying Alerting Architecture Diagram using Hugo Figure Shortcode
DESCRIPTION: Uses the Hugo 'figure' shortcode to embed a diagram illustrating the Grafana Alerting architecture, highlighting the decoupled nature of the alert generator and the Alertmanager. The snippet specifies the image source path, maximum display width, and alternative text.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/notifications/_index.md#2025-04-23_snippet_3

LANGUAGE: hugo
CODE:
```
{{< figure src="/media/docs/alerting/alerting-alertmanager-architecture.png" max-width="750px" alt="A diagram with the alert generator and alert manager architecture" >}}
```

----------------------------------------

TITLE: Attaching OpenPGP Signature Block to Plugin Manifest - Plaintext
DESCRIPTION: This plaintext snippet represents an ASCII-armored OpenPGP signature block that signs the preceding JSON manifest. The block includes signature version, hash algorithm, OpenPGP.js comments, and the digital signature body, which must be parsed via OpenPGP verification tools. The block is bounded by 'BEGIN PGP SIGNATURE' and 'END PGP SIGNATURE', and is required for cryptographically verifying the manifest's authenticity.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/invalid-v2-extra-file/plugin/MANIFEST.txt#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
-----BEGIN PGP SIGNATURE-----
Version: OpenPGP.js v4.10.1
Comment: https://openpgpjs.org

wqEEARMKAAYFAl+2rOIACgkQfk0ManCIZudNOwIJAT8FTzwnRFCSLTOaR3F3
2Fh96eRbghokXcQG9WqpQAg8ZiVfGXeWWRNtV+nuQ9VOZOTO0BovWLuMkym2
ci8ABpWOAgd46LkGn3Dd8XVnGmLI6UPqHAXflItOrCMRiGcYJn5PxP1aCz8h
D0JoNI9TIKrhMtM4voU3Qhf3mIOTHueuDNS48w==
=mu2j
-----END PGP SIGNATURE-----
```

----------------------------------------

TITLE: Updating Dependencies and Running Kubernetes Code Generation - Shell
DESCRIPTION: Provides shell script commands to update the k8s.io/code-generator Go package and execute the update-codegen.sh script. The first command ensures all Go module dependencies are downloaded, while the second command runs a script that deletes existing generated code and regenerates Kubernetes OpenAPI Go code in place. Prerequisites: Go installed, code-generator dependency in go.mod, executable update-codegen.sh script in the hack directory. Input: none (commands are run from the shell). Output: Updated/generate Go code files.
SOURCE: https://github.com/grafana/grafana/blob/main/hack/README.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
# ensure k8s.io/code-generator pkg is up to date
go mod download

# the happy path
./hack/update-codegen.sh
```

----------------------------------------

TITLE: New Access Control API Endpoints for Data Source Permissions in Grafana v10.3*
DESCRIPTION: Specifies the replacement API endpoints for managing data source permissions introduced in Grafana v10.3 (backported from v10.2.3*). These endpoints leverage the Access Control feature for listing, adding, or removing permissions for users, teams, and built-in roles on specific data sources identified by their UID.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v10-3.md#2025-04-23_snippet_1

LANGUAGE: text
CODE:
```
- `GET /api/access-control/datasources/:uid` for listing data source permissions
- `POST /api/access-control/datasources/:uid/users/:id`, `POST /api/access-control/datasources/:uid/teams/:id`, and `POST /api/access-control/datasources/:uid/buildInRoles/:id` for adding or removing data source permissions
```

----------------------------------------

TITLE: Unstarring a Query in Grafana Query History (HTTP Response)
DESCRIPTION: This snippet illustrates a successful HTTP 200 OK response after unstarring a query. The JSON response body contains the complete query history entry, reflecting its updated starred status (typically `starred: false` after this operation).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_11

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
{
  "result": {
    "uid": "P8zM2I1nz",
    "datasourceUid": "PE1C5CBDA0504A6A3",
    "createdBy": 1,
    "createdAt": 1643630762,
    "starred": false,
    "comment": "Debugging query",
    "queries": [
      {
        "refId": "A",
        "key": "Q-87fed8e3-62ba-4eb2-8d2a-4129979bb4de-0",
        "scenarioId": "csv_content",
        "datasource": {
            "type": "testdata",
            "uid": "PD8C576611E62080A"
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Templating Summary Annotation using 'index' Function in Grafana Alerting (Go Template)
DESCRIPTION: This Go template snippet provides an alternative method for creating a dynamic `summary` annotation in Grafana alerting. It uses the `index` function to access specific labels (`index $labels \"instance\"`) and values (`index $values \"A\"`), achieving the same result as direct variable access.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/_index.md#2025-04-23_snippet_2

LANGUAGE: go-template
CODE:
```
CPU usage for {{ index $labels "instance" }} has exceeded 80% ({{ index $values "A" }}) for the last 5 minutes.
```

----------------------------------------

TITLE: Displaying TagsInput Props Documentation using ArgTypes Component
DESCRIPTION: This JSX snippet uses the `ArgTypes` component from Storybook. It automatically generates and displays a table detailing the props (properties), their types, default values, and descriptions for the specified `TagsInput` component, based on its definition and associated JSDoc/TypeScript types.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/TagsInput/TagsInput.mdx#2025-04-23_snippet_2

LANGUAGE: mdx
CODE:
```
<ArgTypes of={TagsInput} />
```

----------------------------------------

TITLE: Creating Docker Secret for AWS Region (Bash)
DESCRIPTION: Creates a Docker secret named `aws_region` containing the specified AWS region ('us-east-1'). The secret value is piped to the `docker secret create` command. Requires Docker secrets capability.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
echo "us-east-1" | docker secret create aws_region -
```

----------------------------------------

TITLE: Configuring Grafana Database Connection via Kubernetes Environment Variables
DESCRIPTION: Configures the database connection for Grafana High Availability by setting environment variables within the Grafana pod definition, typically edited using `kubectl edit deployment my-release`. Replace the bracketed placeholders in the `value` fields with your actual database connection details. This is an alternative method to using `grafana.ini` for database configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-eks/index.md#2025-04-23_snippet_2

LANGUAGE: yaml
CODE:
```
- name: GF_DATABASE_TYPE
  value: [database type]
- name: GF_DATABASE_HOST
  value: [database address and port]
- name: GF_DATABASE_NAME
  value: [database name]
- name: GF_DATABASE_USER
  value: [database username]
- name: GF_DATABASE_PASSWORD
  value: [database password]
```

----------------------------------------

TITLE: Defining CSV Correlation Content for Grafana - CSV
DESCRIPTION: This snippet defines the structure and templated variables for a CSV table used in Grafana's correlation feature. It references extracted fields such as time, msg, hostNumber, and status, which are populated at runtime using previously configured transformations (logfmt and regex). Required dependencies are a configured Grafana Explore environment, enabled correlation mode, and proper extraction of referenced variables in previous steps. Inputs are dynamically substituted variables; the output is a table row per correlated log entry. This format assumes variable names match those set up in earlier steps and is intended for direct use in Grafana's correlation scenario.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/explore/correlations-editor-in-explore.md#2025-04-23_snippet_2

LANGUAGE: csv
CODE:
```
time,msg,hostNumber,status\n${time},${msg},${hostNumber},${status}
```

----------------------------------------

TITLE: Replacing Deprecated `ArrayVector` with Plain Arrays in Grafana Plugins
DESCRIPTION: The `Vector` interface, specifically `ArrayVector`, deprecated in v10, now generates TypeScript build errors. Usage should be replaced with standard JavaScript/TypeScript arrays. While runtime compatibility exists temporarily for older compiled plugins using `get`/`set`, this mechanism will be removed in the future.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v11-0.md#2025-04-23_snippet_5



----------------------------------------

TITLE: Wire Error: Missing Provider for Injector Output Type
DESCRIPTION: This error message indicates that the Wire dependency injection tool could not find a provider function or value for the type 'example.com/foo.Foo', which is the expected output type of the injector function 'injectMissingOutputType' defined in 'example.com/foo/wire.go'. A provider for 'Foo' needs to be included in the Wire set used by this injector.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/MultipleMissingInputs/want/wire_errs.txt#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
example.com/foo/wire.go:x:y: inject injectMissingOutputType: no provider found for example.com/foo.Foo, output of injector
```

----------------------------------------

TITLE: Configuring AWS License Validation via Kubernetes Environment Variable
DESCRIPTION: Configures Grafana Enterprise to validate its license against AWS License Manager by setting the `GF_ENTERPRISE_LICENSE_VALIDATION_TYPE` environment variable to `aws` within the Grafana pod definition (edited via `kubectl edit deployment my-release`). This is an alternative to modifying `grafana.ini`. Appropriate IAM permissions must be granted to the EKS node or pod execution role.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-eks/index.md#2025-04-23_snippet_4

LANGUAGE: yaml
CODE:
```
name: GF_ENTERPRISE_LICENSE_VALIDATION_TYPE
value: aws
```

----------------------------------------

TITLE: Combined Grafana Label Matchers Example
DESCRIPTION: Illustrates that multiple label matchers are combined using the AND logical operator. Both `foo=bar` and `id=~[0-9]+` must match for the rule to apply to the example label set `{ foo=bar, baz=qux, id=12 }`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/how_label_matching_works.md#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
foo=bar
```

LANGUAGE: plaintext
CODE:
```
id=~[0-9]+
```

----------------------------------------

TITLE: Percent-Encoding Grafana Variables for URL Parameters
DESCRIPTION: Demonstrates the `:percentencode` format option. This formats single or multi-value variables for safe inclusion in URL parameters by percent-encoding reserved characters. Multi-value variables are comma-separated before encoding. The example shows `['foo()bar BAZ', 'test2']` interpolated as `'foo%28%29bar%20BAZ%2Ctest2'`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
servers = ['foo()bar BAZ', 'test2']
String to interpolate: '${servers:percentencode}'
Interpolation result: 'foo%28%29bar%20BAZ%2Ctest2'
```

----------------------------------------

TITLE: Defining Alert Label Formatting in Go Template
DESCRIPTION: Defines a template named '__default_alert_labels' responsible for formatting the labels of a single alert. It specifically extracts and displays the 'alertname' label if present, then removes it from the label set and uses the '__default_sorted_pairs' template to display the remaining labels in a sorted list format. Expects the alert object with a '.Labels' map as context.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/ng_alert_notification.txt#2025-04-23_snippet_2

LANGUAGE: go-template
CODE:
```
[[- define "__default_alert_labels" -]]
[[- $labels := .Labels -]]
[[- if index $labels "alertname" ]]
Alertname: [[ index .Labels "alertname" -]]
[[ $labels = $labels.Remove (toStrings (list "alertname")) ]]
[[- end ]]
Labels: [[ template "__default_sorted_pairs" $labels ]]
[[- end -]]
```

----------------------------------------

TITLE: Launching Grafana Auth Environment with Docker Compose
DESCRIPTION: Command to spin up a service for authentication testing in Grafana. This make command adds the specified authentication provider's docker-compose configuration to the main docker-compose file used by the devenv target.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
make devenv=auth/oauth
```

----------------------------------------

TITLE: Filtering Events by Time Range for Template Variable - SQL
DESCRIPTION: Fetches 'event_name' values from the 'event_log' table, applying Grafana's $__timeFilter macro for dynamic date filtering, which refreshes based on dashboard time range. Aka, outputs events relevant to the selected dashboard window. Useful for time-dependent variable drop-downs; requires Grafana macros.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_5

LANGUAGE: sql
CODE:
```
SELECT event_name FROM event_log WHERE $__timeFilter(time_column)
```

----------------------------------------

TITLE: Exporting Generated API Hooks and Types
DESCRIPTION: Index file that exports the generated API hooks and types for use in the application.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/api/README.md#2025-04-23_snippet_4

LANGUAGE: jsx
CODE:
```
import { generatedAPI } from './endpoints.gen';

export const dashboardAPI = generatedAPI;
export const { useCreateDashboardMutation, useUpdateDashboardMutation} = dashboardAPI;
// eslint-disable-next-line no-barrel-files/no-barrel-files
export { type Dashboard } from './endpoints.gen';
```

----------------------------------------

TITLE: Deleting an Organization via Grafana API (HTTP)
DESCRIPTION: Example HTTP DELETE request to remove a Grafana organization identified by `:orgId`. This operation requires Basic Authentication and the `orgs:delete` permission.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_24

LANGUAGE: http
CODE:
```
DELETE /api/orgs/1 HTTP/1.1
Accept: application/json
```

----------------------------------------

TITLE: Structuring Content with Hugo Section Shortcode
DESCRIPTION: This Hugo shortcode is likely used to define a structural section within the Grafana documentation page, potentially for layout, grouping related content (like the subsequent topics), or navigation purposes within the documentation framework.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/user-management/_index.md#2025-04-23_snippet_1

LANGUAGE: hugo
CODE:
```
{{< section >}}
```

----------------------------------------

TITLE: Extracting Prometheus Archive and Changing Directory (Bash)
DESCRIPTION: This shell command first extracts a Prometheus archive file (matching the pattern 'prometheus-*.tar.gz') using 'tar' and then changes the current working directory to the extracted directory.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
tar xvfz prometheus-*.tar.gz
cd prometheus-*
```

----------------------------------------

TITLE: Running Grafana in Docker for Plugin Development
DESCRIPTION: This shell command uses Docker to run Grafana version 7.0.0 in a detached container (`-d`). It maps the host's port 3000 to the container's port 3000 (`-p 3000:3000`), mounts a local directory named `grafana-plugins` (relative to the current working directory `$(pwd)`) to the container's standard plugin path (`/var/lib/grafana/plugins`) using a volume mount (`-v`), and names the container `grafana`. This setup allows plugin development without a local Grafana installation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/set-up-environment.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
docker run -d -p 3000:3000 -v "$(pwd)"/grafana-plugins:/var/lib/grafana/plugins --name=grafana grafana/grafana:7.0.0
```

----------------------------------------

TITLE: Generating Prop Documentation with ArgTypes in MDX
DESCRIPTION: This MDX snippet employs the `ArgTypes` component from Storybook to automatically generate and display a documentation table for the component's properties. It references the imported `SliderProps` type via the `of` prop, allowing Storybook to introspect the type and present details about each prop, such as its name, type, default value, and description, directly within the documentation page.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Slider/Slider.mdx#2025-04-23_snippet_2

LANGUAGE: mdx
CODE:
```
<ArgTypes of={SliderProps} />
```

----------------------------------------

TITLE: Displaying a Text Button with React in Storybook (TSX)
DESCRIPTION: This snippet exhibits how to use the 'fill="text"' prop on the Button component to produce a text-styled button (no visible background or border) in combination with different sizes. This is rendered inside ExampleFrame in a Storybook MDX. Designers or developers can use this to document and interact with the visual style of text-only buttons in a React design system.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Button/Button.mdx#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
<ExampleFrame>\n  <Button fill=\"text\" size=\"sm\" style={{ margin: '5px' }}>\n    {'Small'}\n  </Button>\n  <Button fill=\"text\" size=\"md\" style={{ margin: '5px' }}>\n    {'Medium'}\n  </Button>\n  <Button fill=\"text\" size=\"lg\" style={{ margin: '5px' }}>\n    {'Large'}\n  </Button>\n</ExampleFrame>
```

----------------------------------------

TITLE: Getting Specific Dashboard Version by UID in Grafana HTTP API
DESCRIPTION: This HTTP request retrieves a specific version of a dashboard using both the dashboard UID and version number. It returns complete dashboard configuration data for that version.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
GET /api/dashboards/id/1/versions/1 HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Verifying JWT Using JSON Web Key Set from HTTPS Endpoint
DESCRIPTION: Configuration for verifying JWT tokens using a JSON Web Key Set loaded from a remote HTTPS endpoint with caching options.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_5

LANGUAGE: ini
CODE:
```
# [auth.jwt]
# ...

jwk_set_url = https://your-auth-provider.example.com/.well-known/jwks.json

# Cache TTL for data loaded from http endpoint.
cache_ttl = 60m
```

----------------------------------------

TITLE: Response for Creating Global User
DESCRIPTION: Example response after successfully creating a new Grafana user, returning the user ID and a success message.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_9

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{"id":5,"message":"User created"}
```

----------------------------------------

TITLE: Base64 Encoding Certificate and Key Files for Grafana Configuration (Shell)
DESCRIPTION: Shows shell commands using `base64` to encode the certificate (`cert.pem`) and private key (`key.pem`) files into Base64 format, saving them as `.base64` files. The `-w0` switch prevents line wrapping, which is typically needed on Linux systems but not macOS. These Base64 strings might be used in certain configuration scenarios.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_21

LANGUAGE: sh
CODE:
```
$ base64 -w0 key.pem > key.pem.base64
$ base64 -w0 cert.pem > cert.pem.base64
```

----------------------------------------

TITLE: Search Users with Paging Response Example (json)
DESCRIPTION: Depicts the JSON response for a paged user search, including a total count, result users array, and page information. Each user contains properties similar to those from the regular search endpoint, facilitating navigation and pagination in client applications.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{\n  "totalCount": 2,\n  "users": [\n    {\n      "id": 1,\n      "name": "Admin",\n      "login": "admin",\n      "email": "admin@mygraf.com",\n      "isAdmin": true,\n      "isDisabled": false,\n      "lastSeenAt": "2020-04-10T20:29:27+03:00",\n      "lastSeenAtAge': "2m",\n      "authLabels": ["OAuth"]\n    },\n    {\n      "id": 2,\n      "name": "User",\n      "login": "user",\n      "email": "user@mygraf.com",\n      "isAdmin": false,\n      "isDisabled": false,\n      "lastSeenAt": "2020-01-24T12:38:47+02:00",\n      "lastSeenAtAge": "2M",\n      "authLabels": []\n    }\n  ],\n  "page": 1,\n  "perPage": 10\n}
```

----------------------------------------

TITLE: Example Humanized Percentage Output
DESCRIPTION: This shows the example output of applying the `humanizePercentage` function to a query value (e.g., 0.1) within a Grafana alert template, rendering it as a percentage.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_13

LANGUAGE: plaintext
CODE:
```
10%
```

----------------------------------------

TITLE: Representing SQL-like Data for Inner Join (Students Table)
DESCRIPTION: This Markdown table shows sample data representing a 'Students' table, used as input for an inner join example with SQL-like data. It includes columns for StudentID, Name, and Major.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_18

LANGUAGE: markdown
CODE:
```
| StudentID | Name     | Major            |
| --------- | -------- | ---------------- |
| 1         | John     | Computer Science |
| 2         | Emily    | Mathematics      |
| 3         | Michael  | Physics          |
| 4         | Jennifer | Chemistry        |
```

----------------------------------------

TITLE: Auth Proxy Test
DESCRIPTION: Runs authentication proxy test scenario
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
$ ./run.sh -c auth_proxy_test
```

----------------------------------------

TITLE: Creating Docker Secret for AWS Secret Access Key (Bash)
DESCRIPTION: Creates a Docker secret named `aws_secret_access_key` containing the specified AWS Secret Access Key ('topsecret9b78c6'). The secret value is piped to the `docker secret create` command. Requires Docker secrets capability.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
echo "topsecret9b78c6" | docker secret create aws_secret_access_key -
```

----------------------------------------

TITLE: Including Shared Field Override Options Documentation (Hugo Shortcode)
DESCRIPTION: Uses a Hugo shortcode (`docs/shared`) to include a standard documentation block explaining how to use field overrides to customize settings for specific fields within Grafana visualizations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_12

LANGUAGE: markdown
CODE:
```
{{< docs/shared lookup="visualizations/overrides-options.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Email Verification Template with Dynamic Variables - Go Template
DESCRIPTION: This code snippet is a Go Template used for generating email content for user signup verification in Grafana. It utilizes dynamic variables (e.g., .ConfirmationCode, .Expire, .AppUrl, .Code) that are replaced with actual user-specific values at runtime. Inputs include the confirmation code and expiry time, and output is a message body with these fields substituted. Dependencies: template rendering infrastructure, likely in a Go application or service; it assumes these variables are present in the data context.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/passwordless_verify_new_user.txt#2025-04-23_snippet_0

LANGUAGE: Go Template
CODE:
```
[[HiddenSubject .Subject "Welcome to Grafana, please complete your signup!"]]

Hi,

Copy and paste the email verification code:
[[.ConfirmationCode]]
into the sign up form to verify your email address. This confirmation code will expire in {{ .Expire }} minutes. 
Alternatively, you can use the button below to verify your email address. 

[[.AppUrl]]login/?code=[[.Code]]&confirmationCode=[[.ConfirmationCode]]
```

----------------------------------------

TITLE: Humanizing Query Value (Dot Notation)
DESCRIPTION: This Go template uses the `humanize` function to format the numeric value of query 'A' into a more human-readable string (e.g., applying metric prefixes like k, M, G). The value is accessed using dot notation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_9

LANGUAGE: gotemplate
CODE:
```
{{ humanize $values.A.Value }}
```

----------------------------------------

TITLE: Showing Result of 'Labels to Fields' (Rows Mode - Series 1)
DESCRIPTION: This Markdown table shows the partial output for the first time series when using the 'Labels to fields' transformation in 'Rows' mode. Each label (Server, Datacenter) and its corresponding value are presented as separate rows.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_32

LANGUAGE: markdown
CODE:
```
| label      | value    |
| ---------- | -------- |
| Server     | Server A |
| Datacenter | EU       |
```

----------------------------------------

TITLE: Including Value Mappings Documentation using Hugo Shortcode
DESCRIPTION: This Hugo shortcode dynamically includes shared documentation content related to value mapping options. It references a specific markdown file (`visualizations/value-mappings-options.md`) from the `grafana` source, ensuring consistency across documentation. The `<GRAFANA_VERSION>` placeholder indicates that the specific version of the documentation to include is determined dynamically.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/canvas/index.md#2025-04-23_snippet_2

LANGUAGE: hugo
CODE:
```
{{< docs/shared lookup="visualizations/value-mappings-options.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Accessing Dot Context in Go Templates for Grafana - Go Template
DESCRIPTION: Shows how to print the full context available via dot (\'.\') in a Go template, which refers to Notification Data at the start of notification templates or to alert data in annotation/label templates. This snippet depends on the current template context in Grafana; outputs will be the JSON/object exposed at dot. Context-specific interpretation of dot applies when inside constructs like range, with, or included templates.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/language.md#2025-04-23_snippet_1

LANGUAGE: Go Template
CODE:
```
{{ .Alerts }}
```

----------------------------------------

TITLE: Querying InfluxDB Datacenters for Chained Variables
DESCRIPTION: This InfluxDB query returns all datacenters for use in a parent variable of a chained variable setup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_5

LANGUAGE: influxql
CODE:
```
SHOW TAG VALUES WITH KEY = "datacenter"
```

----------------------------------------

TITLE: Configuring Dashboards Section in Grafana Config File - INI
DESCRIPTION: This snippet shows how to begin a new section for dashboards configuration in the Grafana server's configuration file using INI syntax. The '[dashboards]' section can be used to specify settings such as default home dashboard paths or other dashboard-related server-wide preferences. Ensure this section header is placed appropriately in the main Grafana config file ('grafana.ini'), and adjust indentation as needed for any properties to follow. No parameters appear in this snippet; it is a section header required for specifying subsequent dashboard configuration entries. If present, any entries under this section must be valid according to Grafana's configuration documentation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/organization-preferences/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[dashboards]
```

----------------------------------------

TITLE: Defining Grafana Notification Message Template using Terraform
DESCRIPTION: Creates a Grafana notification template group named 'custom_emails' containing a single template named 'custom_email.message'. This template uses Go's templating language (`{{ define ... }}`) to provide custom content ('Lorem ipsum - Custom alert!') for email notifications. Requires replacing the placeholder Terraform resource name (`<terraform_message_template_name>`). Contact points can reference this template to customize their messages.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_4

LANGUAGE: terraform
CODE:
```
 resource "grafana_message_template" "<terraform_message_template_name>" {
     name = "custom_emails"

     template = <<EOT
 {{ define "custom_email.message" }}
 Lorem ipsum - Custom alert!
 {{ end }}
 EOT
 }
```

----------------------------------------

TITLE: Installing Grafana UI Library with Yarn
DESCRIPTION: Command to install the @grafana/ui package using Yarn package manager.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/Intro.mdx#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
yarn add @grafana/ui
```

----------------------------------------

TITLE: Fetching Grafana Stats with HTTP GET Request
DESCRIPTION: Example HTTP GET request to retrieve Grafana statistics including counts of users, organizations, dashboards and other entities.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
GET /api/admin/stats
Accept: application/json
Content-Type: application/json
```

----------------------------------------

TITLE: Retrieving a Service Account by ID - Grafana HTTP API - HTTP
DESCRIPTION: This snippet illustrates retrieving a service account via its ID using a GET request. The request must include proper authentication and accept headers. The expected output is a JSON object with detailed service account properties, such as login, orgId, timestamps, avatar URL, and assigned teams.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
GET /api/serviceaccounts/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{\n\t"id": 1,\n\t"name": "test",\n\t"login": "sa-test",\n\t"orgId": 1,\n\t"isDisabled": false,\n\t"createdAt": "2022-03-21T14:35:33Z",\n\t"updatedAt": "2022-03-21T14:35:33Z",\n\t"avatarUrl": "/avatar/8ea890a677d6a223c591a1beea6ea9d2",\n\t"role": "Viewer",\n\t"teams": []\n}
```

----------------------------------------

TITLE: Adding an External Group to a Team Response Example in JSON
DESCRIPTION: The JSON response for a successful POST request to add a group, confirming association with the team. Returns a message indicating a successful addition or an error if the group already exists for that team. Only available if the user possesses adequate write permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team_sync.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{\"message\":\"Group added to Team\"}
```

----------------------------------------

TITLE: Creating Grafana Dashboards (Plaintext)
DESCRIPTION: Defines the `dashboards:create` permission action required to create dashboards within specific folders and their subfolders in Grafana. This action depends on folder-related scopes like `folders:*` and `folders:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_6

LANGUAGE: plaintext
CODE:
```
`dashboards:create`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`folders:*`</li><li>`folders:uid:*`</li></ul>
```

----------------------------------------

TITLE: Alternate Wire Injector Syntax Using Panic
DESCRIPTION: Shows a more concise way to write Wire injectors using panic instead of explicit return statements. This approach reduces boilerplate code while maintaining the same functionality.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_11

LANGUAGE: go
CODE:
```
func injectFoo() Foo {
    panic(wire.Build(/* ... */))
}
```

----------------------------------------

TITLE: Constructing Verification URL Base using Go Template
DESCRIPTION: This Go template snippet outputs the base URL of the Grafana application (`.AppUrl`). This is used as the prefix for constructing the full email verification link. The `.AppUrl` variable is expected from the Grafana backend context.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/verify_email.txt#2025-04-23_snippet_3

LANGUAGE: Go Template
CODE:
```
[[.AppUrl]]
```

----------------------------------------

TITLE: Wire Injector Function in Go
DESCRIPTION: Defines an injector function for Wire to use in generating the initialization code for the Event.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_7

LANGUAGE: go
CODE:
```
//+build wireinject

func InitializeEvent() Event {
    wire.Build(NewEvent, NewGreeter, NewMessage)
    return Event{}
}
```

----------------------------------------

TITLE: Customizing the EmptyState Component in JSX
DESCRIPTION: This snippet shows how to customize the `EmptyState` component, specifically the `not-found` variant. It demonstrates adding a secondary action `Button` (e.g., to clear a search), providing a custom `image` (represented by `<AnyReactNode />`), setting a message, and including additional information and a `TextLink` as children.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/EmptyState/EmptyState.mdx#2025-04-23_snippet_4

LANGUAGE: jsx
CODE:
```
import { Button, EmptyState, TextLink } from '@grafana/ui';

<EmptyState
  variant="not-found"
  button={<Button variant="secondary" onClick={clearSearchQuery} />}
  image={<AnyReactNode />}
  message="No playlists found"
  variant="not-found" // Note: Duplicate variant prop in original example
>
  Optionally provide some additional information here. Maybe even a link to{' '}
  <TextLink href="<externalDocsLink>" external>
    documentation.
  </TextLink>
</EmptyState>;
```

----------------------------------------

TITLE: Listing Required Image Rendering Dependencies on Debian 9 (Bash)
DESCRIPTION: Provides a list of package names that need to be installed on a Debian 9 (Stretch) system to satisfy the dependencies for the Grafana image rendering plugin. These packages supply the required shared libraries.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
libx11 libcairo libcairo2 libxtst6 libxcomposite1 libx11-xcb1 libxcursor1 libxdamage1 libnss3 libcups libcups2 libxss libxss1 libxrandr2 libasound2 libatk1.0-0 libatk-bridge2.0-0 libpangocairo-1.0-0 libgtk-3-0 libgbm1 libxshmfence1
```

----------------------------------------

TITLE: Key/Value SQL Query for Template Variables
DESCRIPTION: SQL query that creates a key/value template variable by returning two columns named __text and __value, allowing for friendly display names with underlying ID values.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/template-variables/index.md#2025-04-23_snippet_2

LANGUAGE: sql
CODE:
```
SELECT hostname __text, id __value FROM host
```

----------------------------------------

TITLE: Mapping a Static User Role in Grafana Configuration File (.ini)
DESCRIPTION: This ini code sets the same 'Viewer' role to all users by defining the role_attribute_path. Set skip_org_role_sync to false to ensure organization role mappings are not skipped. No dependencies are required apart from access to modify Grafana's configuration file; changes affect all users regardless of identity provider attributes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_6

LANGUAGE: ini
CODE:
```
role_attribute_path = "'Viewer'"
skip_org_role_sync = false
```

----------------------------------------

TITLE: Configuring DataSourceHttpSettings in a Plugin's ConfigEditor (React/JSX)
DESCRIPTION: This JSX code demonstrates how to use the DataSourceHttpSettings component within a custom ConfigEditor for a Grafana data source plugin. It passes properties including a default URL, the plugin's configuration, access options visibility, an options change handler, and whether SigV4 authentication is enabled. Dependencies include React, the DataSourceHttpSettings component, and appropriate type definitions for props. The snippet requires the options and onOptionsChange props to be provided, representing the data source configuration and change handler respectively. Inputs are the component props and outputs are the rendered configuration panel. Limitations include the need for Grafana's plugin development context and potentially additional config settings within the editor.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/DataSourceSettings/DataSourceHttpSettings.mdx#2025-04-23_snippet_0

LANGUAGE: JSX
CODE:
```
export const ConfigEditor = (props: Props) => {
  const { options, onOptionsChange } = props;
  return (
    <>
      <DataSourceHttpSettings
        defaultUrl="http://localhost:9090"
        dataSourceConfig={options}
        showAccessOptions={true}
        onChange={onOptionsChange}
        sigV4AuthEnabled={false}
      />

      {/* Additional configuration settings for your data source plugin.*/}
    </>
  );
};
```

----------------------------------------

TITLE: Navigating to Grafana Development Environment Directory (Bash)
DESCRIPTION: This command changes the current working directory to `devenv`. This directory, located within the Grafana repository, contains scripts and configurations for setting up Grafana data sources required for development purposes.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
cd devenv
```

----------------------------------------

TITLE: InfluxDB Output Load Test
DESCRIPTION: Runs load test and sends results to a specified InfluxDB instance
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
$ ./run.sh  -o influxdb=http://localhost:8086/myDb
```

----------------------------------------

TITLE: Representing Group Resource Permissions in OpenFGA
DESCRIPTION: This snippet shows an example OpenFGA tuple granting a specific user ('user:1') the 'read' relation to all resources belonging to the 'dashboard.grafana.app/dashboards' group resource within a namespace. This provides broad access to a category of resources.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
{ “user”: “user:1”, relation: “read”, object:”group_resource:dashboard.grafana.app/dashboards” }
```

----------------------------------------

TITLE: Generating Props Table in MDX
DESCRIPTION: Shows how to automatically generate a props table for a component in an MDX file.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/storybook.md#2025-04-23_snippet_3

LANGUAGE: jsx
CODE:
```
import { Props } from '@storybook/addon-docs/blocks';
import { MyComponent } from './MyComponent';

<Props of={MyComponent} />;
```

----------------------------------------

TITLE: Listing Apache-2.0 Licensed Directories in Grafana Project
DESCRIPTION: This code block enumerates the directories and their subdirectories that are licensed under Apache-2.0 within the Grafana project. It includes various packages, components, and specific plugin directories.
SOURCE: https://github.com/grafana/grafana/blob/main/LICENSING.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
packages/grafana-data/
packages/grafana-e2e-selectors/
packages/grafana-runtime/
packages/grafana-ui/
packaging/
kinds/
pkg/kinds/
pkg/kindsys/
pkg/registry/schemas/
grafana-mixin/
public/app/plugins/datasource/tempo
public/app/features/explore/TraceView/components
public/img/icons/solid/
public/img/icons/unicons/
```

----------------------------------------

TITLE: Defining and Displaying a System Data Frame - Plaintext
DESCRIPTION: This snippet provides a tabular plaintext representation of a system frame used for storing time-aligned sensor metric data. Columns include labels, timestamp, sensor reading values, and state, each annotated with type and label metadata. This format is leveraged for debugging, documentation, and validation of data structure assumptions during telemetry pipeline development. Inputs are statically defined rows/columns; expected output is an easy-to-read tabular display; no runtime dependencies are required; limitations include absence of dynamic data generation.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/changing_types_NaN.golden.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
+----------------+-------------------------------+------------------+------------------+-----------------+\n| Name: labels   | Name: time                    | Name: sensor     | Name: sensor2    | Name: state     |\n| Labels:        | Labels:                       | Labels:          | Labels:          | Labels:         |\n| Type: []string | Type: []time.Time             | Type: []*float64 | Type: []*float64 | Type: []*string |\n+----------------+-------------------------------+------------------+------------------+-----------------+\n| host=A         | 2021-03-22 11:51:30 +0300 MSK | 0                | null             | aaa             |\n| host=B         | 2021-03-22 11:51:30 +0300 MSK | null             | 0                | bbb             |\n| host=A         | 2021-03-22 11:51:31 +0300 MSK | null             | 0                | ccc             |\n| host=B         | 2021-03-22 11:51:31 +0300 MSK | 0                | null             | 1               |\n+----------------+-------------------------------+------------------+------------------+-----------------+
```

----------------------------------------

TITLE: Manual Mouse Position Calculation Example
DESCRIPTION: Shows how to manually calculate mouse position relative to a div element without DraggableManager, demonstrating the convenience that DraggableManager provides.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/explore/TraceView/components/utils/DraggableManager/README.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<div className="DividerDemo--realm">
  <div
    className="DividerDemo--divider"
    onMouseDown={(event) => {
      const { clientX, target } = event;
      const { left, width } = target.getBoundingClientRect();
      const localX = clientX - left;
      console.log('within the client area, x:', clientX);
      console.log('within the div, x:        ', localX);
      console.log('position along the width: ', localX / width);
    }}
  />
</div>
```

----------------------------------------

TITLE: Escaping Folder Titles in Grafana Alert Provisioning (Markdown)
DESCRIPTION: This markdown snippet demonstrates how to escape slashes in folder titles within alerting configuration files for Grafana. No external dependencies are needed; it is intended as usage guidance embedded in release note documentation. The section showcases before-and-after examples for folder title formatting, helping users avoid misinterpretation of slashes as folder separators. Inputs are configuration folder titles; outputs are the correctly escaped forms as expected by newer versions of Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/CHANGELOG.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
eg. if an alert group contains:
`folder: folder_with_/_in_title`
it should become:
`folder: folder_with_\/_in_title` Issue [#77450](https://github.com/grafana/grafana/issues/77450)
```

----------------------------------------

TITLE: Enabling Prometheus Metrics - JSON
DESCRIPTION: Specifies JSON configuration to enable metrics collection for the Grafana remote rendering service. The metrics.enabled and collectDefaultMetrics booleans control default metrics collection, and requestDurationBuckets lists histogram buckets for Prometheus latency metrics. Requires compatible Grafana service version.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_20

LANGUAGE: json
CODE:
```
{
  "service": {
    "metrics": {
      "enabled": true,
      "collectDefaultMetrics": true,
      "requestDurationBuckets": [1, 5, 7, 9, 11, 13, 15, 20, 30]
    }
  }
}
```

----------------------------------------

TITLE: Defining a Grafana Plugin Manifest with File Hashes (JSON)
DESCRIPTION: This JSON snippet defines the metadata for a Grafana data source plugin, including plugin identifier, version, signing info, and SHA256 hashes for associated files. The manifest is intended to be cryptographically signed and verified during plugin installation. Key parameters such as 'signedByOrg', 'plugin', and the files' map must be provided to allow secure management and validation of plugin components.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/nested-plugins/parent/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "plugin": "test-datasource",
  "version": "1.0.0",
  "time": 1661172777367,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "a029469ace740e9502bfb0d40924d1cccae73d0b18adcd8f1ceb7f17bf36beb8",
    "nested/plugin.json": "e64abd35cd211e0e4682974ad5cdd1be7a0b7cd24951d302a16d9e2cb6cefea4"
  }
}
```

----------------------------------------

TITLE: Regenerating Codegen Files for Secret API in Grafana
DESCRIPTION: This command regenerates the codegen files (those prefixed by 'zz_') for the Secret API. These files are not currently using grafana-app-sdk and lack a CUE schema definition.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/apis/secret/README.md#2025-04-23_snippet_0

LANGUAGE: sh
CODE:
```
./hack/update-codegen.sh secret
```

----------------------------------------

TITLE: Creating a Migration Snapshot with Grafana API - Bash
DESCRIPTION: This curl command triggers the creation of a snapshot in an existing migration session in Grafana. It sends a POST request to the /api/cloudmigration/migration/{sessionUid}/snapshot endpoint, where {sessionUid} must be replaced by an active session ID. Dependencies include curl, valid admin authentication, and an existing migration session. The command does not require body data, and the API returns a snapshot creation result.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/cloudmigration/api/curl_commands.txt#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
curl -X POST -H \"Content-Type: application/json\" \\
  http://admin:admin@localhost:3000/api/cloudmigration/migration/{sessionUid}/snapshot
```

----------------------------------------

TITLE: Defining Provider with Dependencies in Go
DESCRIPTION: Shows how to create a provider function (ProvideBar) that depends on another type (Foo).
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
package foobarbaz

// ...

type Bar struct {
    X int
}

// ProvideBar returns a Bar: a negative Foo.
func ProvideBar(foo Foo) Bar {
    return Bar{X: -foo.X}
}
```

----------------------------------------

TITLE: Configuring Grizzly Contexts for Grafana Instances in Shell
DESCRIPTION: These shell commands configure two separate Grizzly contexts: `grafana-onprem` for the source Grafana instance and `grafana-cloud` for the destination Grafana Cloud instance. For each context, it sets the output format to JSON, the Grafana instance URL, and the authentication token using environment variables (`$GRAFANA_ENT_INSTANCE_URL`, `$GRAFANA_SOURCE_TOKEN`, `$GRAFANA_CLOUD_INSTANCE_URL`, `$GRAFANA_DEST_TOKEN`). The `grr config use-context` command switches the active context.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_5

LANGUAGE: shell
CODE:
```
grr config create-context grafana-onprem
grr config use-context grafana-onprem
grr config set output-format json
grr config set grafana.url $GRAFANA_ENT_INSTANCE_URL
grr config set grafana.token $GRAFANA_SOURCE_TOKEN

grr config create-context grafana-cloud
grr config use-context grafana-cloud
grr config set output-format json
grr config set grafana.url $GRAFANA_CLOUD_INSTANCE_URL
grr config set grafana.token $GRAFANA_DEST_TOKEN
```

----------------------------------------

TITLE: Asynchronous Field Validation Function (JavaScript)
DESCRIPTION: Implements an asynchronous validation function simulating backend or service calls for validating field values with react-hook-form. Uses a Promise with setTimeout to mock delay and failure, with error handling reflecting real-world async validation. Requires ValidateResult type/context, and compatibility with field-level async validation in react-hook-form.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_11

LANGUAGE: js
CODE:
```
validateAsync = (newValue: string) => {
  try {
    (await new Promise()) <
      ValidateResult >
      ((resolve, reject) => {
        setTimeout(() => {
          reject('Something went wrong...');
        }, 2000);
      });
    return true;
  } catch (e) {
    return false;
  }
};
```

----------------------------------------

TITLE: Getting Folders with kubectl - Shell
DESCRIPTION: This shell command lists Folder custom resources in the current namespace using the configured kubeconfig. The command assumes that the Folder CRD exists in the cluster and that the kubeconfig is properly authenticated.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_12

LANGUAGE: sh
CODE:
```
kubectl --kubeconfig=./grafana.kubeconfig get folder
```

----------------------------------------

TITLE: Starting Grafana E2E Test Server (Shell)
DESCRIPTION: This shell command starts the Grafana server specifically configured for end-to-end testing. It sets the HTTP listening port to 3000 using an environment variable and executes the 'start-server' script located in './scripts/grafana-server/'. This server instance likely includes the provisioned test plugin needed for the tests.
SOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/grafana-extensionstest-app/README.md#2025-04-23_snippet_5

LANGUAGE: shell
CODE:
```
PORT=3000 ./scripts/grafana-server/start-server
```

----------------------------------------

TITLE: Configuring Storybook Meta Component
DESCRIPTION: Sets up the Storybook documentation metadata for the Badge component using MDX format.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Badge/Badge.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<Meta title="MDX|Badge" component={Badge} />
```

----------------------------------------

TITLE: Custom URL Load Test
DESCRIPTION: Runs load test against a custom target URL
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ ./run.sh -u http://grafana.loc
```

----------------------------------------

TITLE: Example URL Link with Time Range Parameters
DESCRIPTION: An example URL for a Grafana dashboard link that includes the `from` and `to` query parameters to specify a fixed time range (`now-3h` to `now`). This ensures the linked dashboard opens with the desired time context when the link is clicked. This functionality is typically enabled via the 'Include current time range' option when configuring links.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/manage-dashboard-links/index.md#2025-04-23_snippet_2

LANGUAGE: url
CODE:
```
https://play.grafana.org/d/000000010/annotations?orgId=1&from=now-3h&to=now
```

----------------------------------------

TITLE: Grafana HTTPS Permission Denied Error - Log
DESCRIPTION: This log snippet shows a typical Grafana error message when the process fails to access the SSL certificate due to insufficient permissions. It indicates the background HTTP server service stopping and provides the file path and specific error encountered. Ensuring correct group and file permissions resolves this issue.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_11

LANGUAGE: log
CODE:
```
level=error msg="Stopped background service" service=*api.HTTPServer reason="open /etc/grafana/grafana.crt: permission denied"
```

----------------------------------------

TITLE: Configuring YAML Frontmatter for Grafana Documentation
DESCRIPTION: YAML configuration block defining metadata for the Grafana documentation page, including description, keywords, labels, title, and cross-reference links.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/pyroscope/query-profile-data.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
description: Explore your profiling data using Profiles Drilldown or the Pyroscope query editor.
keywords:
  - query
  - profiling
  - pyroscope
labels:
  products:
    - cloud
    - enterprise
    - oss
title: Query profile data
menuTitle: Query profile data
weight: 400
refs:
  configure-tempo-data-source:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/datasources/tempo/configure-tempo-data-source/
    - pattern: /docs/grafana-cloud/
      destination: docs/grafana-cloud/connect-externally-hosted/data-sources/tempo/configure-tempo-data-source/
  flame-graph:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/flame-graph/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/flame-graph/
  explore:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/explore/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana/<GRAFANA_VERSION>/explore/
  explore-profiles:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/explore/simplified-exploration/profiles/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana-cloud/visualizations/simplified-exploration/profiles/
  explore-profiles-install:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/explore/simplified-exploration/profiles/access/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana-cloud/visualizations/simplified-exploration/profiles/access/
  provisioning-data-sources:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/administration/provisioning/#datasources
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana/<GRAFANA_VERSION>/administration/provisioning/#datasources
  flame-graph-panel:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/flame-graph/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/flame-graph/
```

----------------------------------------

TITLE: Checking if Prometheus is in System PATH (Linux/macOS)
DESCRIPTION: These commands use 'which' to determine the full path of the 'prometheus' and 'promtool' executables if they are found within the directories listed in the system's PATH environment variable. No output indicates they are not in the PATH.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
which prometheus
which promtool
```

----------------------------------------

TITLE: Example Static Summary Annotation in Grafana Alerting
DESCRIPTION: This snippet shows a basic, static text example for the `summary` annotation in a Grafana alert rule. It describes the alert condition without using any dynamic data or templating.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/_index.md#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
CPU usage has exceeded 80% for the last 5 minutes.
```

----------------------------------------

TITLE: Reading Mute Time Intervals in Grafana RBAC
DESCRIPTION: Specifies the RBAC permission required to read mute time intervals configured for Grafana alerting notifications. No specific associated scopes are listed (n/a).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
`alert.notifications.time-intervals:read`
```

----------------------------------------

TITLE: Example Response for Updating Grafana Library Element (HTTP/JSON)
DESCRIPTION: This snippet shows a sample successful HTTP 200 response after updating a Grafana library element. The response body is in JSON format and contains the full details of the updated library element, including its ID, orgId, folder details, UID, updated name, kind, model, incremented version, and metadata like timestamps and creator/updater information.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_11

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
    "result": {
        "id": 28,
        "orgId": 1,
        "folderId": 0,
        "folderUid": "",
        "uid": "nErXDvCkzz",
        "name": "Renamed library panel",
        "kind": 1,
        "type": "",
        "description": "",
        "model": {
            "description": "",
            "type": ""
        },
        "version": 2,
        "meta": {
            "folderName": "General",
            "folderUid": "",
            "connectedDashboards": 0,
            "created": "2021-09-30T09:14:22+02:00",
            "updated": "2021-09-30T09:25:57.697214+02:00",
            "createdBy": {
                "id": 1,
                "name": "admin",
                "avatarUrl": "/avatar/46d229b033af06a191ff2267bca9ae56"
            },
            "updatedBy": {
                "id": 1,
                "name": "admin",
                "avatarUrl": "/avatar/46d229b033af06a191ff2267bca9ae56"
            }
        }
    }
}
```

----------------------------------------

TITLE: Retrieving All Correlations in Grafana HTTP API
DESCRIPTION: HTTP request for retrieving all correlations across all data sources. This endpoint supports pagination and filtering by source data source UIDs.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_10

LANGUAGE: http
CODE:
```
GET /api/datasources/correlations HTTP/1.1
Accept: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Example TraceQL Filter Query
DESCRIPTION: Example TraceQL query showing duration filter and span name matching using regex operator
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/datasources/tempo-search-traceql.md#2025-04-23_snippet_0

LANGUAGE: traceql
CODE:
```
{duration>5ms && duration<10ms && name=~"get|log_results_cache"}
```

----------------------------------------

TITLE: Listing Lookup User Results - JSON
DESCRIPTION: This JSON snippet is returned from the /api/org/users/lookup endpoint, containing an array with limited details per user. Fields include userId, login, and avatarUrl, primarily for display in UI selection widgets or permission setting dialogs.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
[\n  {\n    "userId": 1,\n    "login": "admin",\n    "avatarUrl": "/avatar/46d229b033af06a191ff2267bca9ae56"\n  }\n]
```

----------------------------------------

TITLE: Updating Grafana Container Image on EKS using Kubectl
DESCRIPTION: Updates the Grafana container image within a Kubernetes deployment named 'my-release' to a specific Grafana Enterprise version. This command requires `kubectl` access to the EKS cluster. Replace `<version>` with the desired Grafana Enterprise version (e.g., 11.3.0). Only Grafana Enterprise versions 8.3.0 and later support AWS Marketplace licenses.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-eks/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
kubectl set image deployment/my-release grafana=grafana/grafana-enterprise:<version>
```

----------------------------------------

TITLE: Checking Prometheus Service Status (Windows/PowerShell)
DESCRIPTION: This PowerShell command uses 'sc query' to check the status of the Windows service named 'prometheus'. It helps determine if the Prometheus service is running, stopped, or paused on a Windows system.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_15

LANGUAGE: powershell
CODE:
```
sc query prometheus
```

----------------------------------------

TITLE: Importing CollapsableSection Component
DESCRIPTION: Import statements for the Storybook documentation and the CollapsableSection component.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Collapse/CollapsableSection.mdx#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { Meta, ArgTypes } from '@storybook/blocks';
import { CollapsableSection } from './CollapsableSection';
```

----------------------------------------

TITLE: Representing Time Series Data for Outer Join (Query A)
DESCRIPTION: This Markdown table shows example time series data from 'Query A', intended as input for an outer join transformation. It includes columns for Time, Job, and Uptime.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_21

LANGUAGE: markdown
CODE:
```
| Time                | Job     | Uptime    |
| ------------------- | ------- | --------- |
| 2020-07-07 11:34:20 | node    | 25260122  |
| 2020-07-07 11:24:20 | postgre | 123001233 |
| 2020-07-07 11:14:20 | postgre | 345001233 |
```

----------------------------------------

TITLE: Querying Owner for a Specific Dependency - Bash CLI Example
DESCRIPTION: This command fetches the assigned owner of a specific dependency and version from go.mod using the Modowners tool. It requires including the dependency in the format 'dependency@version'. Dependencies are the modowners.go script, Go, and a properly formatted go.mod. Output is a single owner team identifier, or empty if unassigned.
SOURCE: https://github.com/grafana/grafana/blob/main/scripts/modowners/README.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
go run scripts/modowners/modowners.go owners -d cloud.google.com/go/storage@v1.30.1 go.mod
```

----------------------------------------

TITLE: Using Variables in Grafana Trace Custom Queries (Markdown)
DESCRIPTION: Demonstrates the syntax for using variables in custom queries by wrapping them in ${} notation, with examples showing how to access span properties and tags.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/jaeger/_index.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
To use a variable you need to wrap it in `${}`. For example: `${__span.name}`.
```

----------------------------------------

TITLE: Representing Labeled Time Series Input (Series 3)
DESCRIPTION: This Markdown table presents sample time series data for 'series3' including labels (what="Speed", cluster="B", job="J1"). This data is used as input in the 'Join by labels' transformation example.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_29

LANGUAGE: markdown
CODE:
```
| Time | Value |
| ---- | ----- |
| 22   | 22    |
| 28   | 77    |
```

----------------------------------------

TITLE: Managing Precommit Hooks with Lefthook
DESCRIPTION: Commands for installing and uninstalling precommit hooks using Lefthook
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_2

LANGUAGE: sh
CODE:
```
make lefthook-install
make lefthook-uninstall
```

----------------------------------------

TITLE: Checking Symbolic Link Setup - Shell
DESCRIPTION: Demonstrates verifying the correct setup of the GOROOT/src directory for the grafana repository using shell commands. It lists the current working directory and displays symbolic links to ensure the project points to the proper location. This is necessary for ensuring the code generation scripts locate files correctly. The commands expect the user to have the correct filesystem structure.
SOURCE: https://github.com/grafana/grafana/blob/main/hack/README.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
❯ pwd
/Users/ryan/go/src/github.com/grafana
❯ ls -l
total 0
lrwxr-xr-x  1 ryan  staff  37 Oct  5 09:34 grafana -> /Users/ryan/workspace/grafana/grafana
```

----------------------------------------

TITLE: Special Value Functions in Grafana Expressions
DESCRIPTION: Illustrates functions that return single special values: `inf` (positive infinity), `infn` (negative infinity), `nan` (Not a Number), and `null`. Primarily used for testing purposes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_13

LANGUAGE: Grafana Expressions
CODE:
```
inf()
```

LANGUAGE: Grafana Expressions
CODE:
```
infn()
```

LANGUAGE: Grafana Expressions
CODE:
```
nan()
```

LANGUAGE: Grafana Expressions
CODE:
```
null()
```

----------------------------------------

TITLE: Listing Required Image Rendering Dependencies on CentOS 7 (Bash)
DESCRIPTION: Lists the package names needed on a minimal CentOS 7 installation for the Grafana image rendering plugin to function correctly. These packages provide essential libraries for the embedded Chromium browser.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
libXcomposite libXdamage libXtst cups libXScrnSaver pango atk adwaita-cursor-theme adwaita-icon-theme at at-spi2-atk at-spi2-core cairo-gobject colord-libs dconf desktop-file-utils ed emacs-filesystem gdk-pixbuf2 glib-networking gnutls gsettings-desktop-schemas gtk-update-icon-cache gtk3 hicolor-icon-theme jasper-libs json-glib libappindicator-gtk3 libdbusmenu libdbusmenu-gtk3 libepoxy liberation-fonts liberation-narrow-fonts liberation-sans-fonts liberation-serif-fonts libgusb libindicator-gtk3 libmodman libproxy libsoup libwayland-cursor libwayland-egl libxkbcommon m4 mailx nettle patch psmisc redhat-lsb-core redhat-lsb-submod-security rest spax time trousers xdg-utils xkeyboard-config alsa-lib
```

----------------------------------------

TITLE: Extracting Instance Names from Prometheus Metrics with Regex
DESCRIPTION: A regular expression for Prometheus metrics that extracts only the instance names from the full metric string, making the variable options cleaner and more readable.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_11

LANGUAGE: regex
CODE:
```
/.*instance="([^"]*).*/

```

----------------------------------------

TITLE: Importing Grafana Enterprise Reports via API in Shell
DESCRIPTION: This shell command processes the `reports.json` file (containing exported reports) using `jq` to extract each report object individually. It then iterates through each JSON object (`while read -r json`), using `curl` to send an HTTP POST request for each report to the `/api/reports` endpoint of the destination Grafana Cloud instance (`$GRAFANA_CLOUD_INSTANCE_URL`). Authentication is done via a Bearer token (`$GRAFANA_DEST_TOKEN`), and the content type is set to `application/json`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_9

LANGUAGE: shell
CODE:
```
jq -M -r -c '.[]' < reports.json | while read -r json; do curl -XPOST ${GRAFANA_CLOUD_INSTANCE_URL}/api/reports -H"Authorization: Bearer $GRAFANA_DEST_TOKEN" -d"$json" -H 'Content-Type: application/json'; done
```

----------------------------------------

TITLE: Disabling Basic Authentication in Grafana
DESCRIPTION: Configuration snippet to disable Grafana's built-in basic authentication system. This setting can be used when implementing alternative authentication methods.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/grafana/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
[auth.basic]
enabled = false
```

----------------------------------------

TITLE: Example Response for Updating a User in an Organization (HTTP/JSON)
DESCRIPTION: Example successful HTTP response (200 OK) after updating a user's role within a Grafana organization. The JSON response body confirms the update.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_31

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{"message":"Organization user updated"}
```

----------------------------------------

TITLE: Deleting Snapshot by deleteKey via Grafana HTTP API (HTTP)
DESCRIPTION: Describes the unauthenticated GET request for deleting a snapshot using the secret deleteKey. Used for public or external deletion scenarios where bearer token is not available. Ensures snapshot can be removed if the delete key is known.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
GET /api/snapshots-delete/XXXXXXX HTTP/1.1\nAccept: application/json
```

----------------------------------------

TITLE: Receiving Current User Preferences Response - JSON
DESCRIPTION: This is a sample JSON HTTP response returned after querying user preferences. The response includes theme, dashboard, timezone, and other settings, with some fields allowed to be null or empty depending on the user's configuration. Expected input is a corresponding successful HTTP GET; output is structured JSON suitable for client consumption.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{\n    "theme": "",\n    "homeDashboardId": 217,\n    "homeDashboardUID": "jcIIG-07z",\n    "timezone": "utc",\n    "weekStart": "",\n    "navbar": {\n        "bookmarkUrls": null\n    },\n    "queryHistory": {\n        "homeTab": ""\n    }\n}
```

----------------------------------------

TITLE: Azure Monitor Legend Pattern Examples
DESCRIPTION: Examples of how to format dimension values in Azure Monitor legend aliases.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/azuremonitor/query_help.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
dimension: {{dimensionvalue}}
```

----------------------------------------

TITLE: Example Annotation Output with Query Value
DESCRIPTION: This shows the rendered output of the previous Go template examples for alert annotations. It displays a static message combined with the dynamic query value (81.2345) that triggered the alert.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
CPU usage has exceeded 80% (81.2345) for the last 5 minutes.
```

----------------------------------------

TITLE: Displaying TextArea Props Documentation in JSX
DESCRIPTION: This code renders the documentation for the TextArea component's props using Storybook's ArgTypes.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/TextArea/TextArea.mdx#2025-04-23_snippet_3

LANGUAGE: jsx
CODE:
```
<ArgTypes of={TextArea} />
```

----------------------------------------

TITLE: Adding a Custom CA Certificate to Trust Store on Windows (Shell)
DESCRIPTION: Demonstrates using the `certutil` command on Windows to add a custom root CA certificate (`internal-root-ca.crt.pem`) to the system's Root Certification Authorities store. This makes the certificate trusted by applications like Chromium that use the Windows certificate store.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
certutil –addstore "Root" <path>/internal-root-ca.crt.pem
```

----------------------------------------

TITLE: Installing Dependencies using npm (Shell)
DESCRIPTION: This command uses the Node Package Manager (npm) to install the project's dependencies, which are typically defined in a `package.json` file. Running this command is a prerequisite before executing build tasks.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/README.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
npm install
```

----------------------------------------

TITLE: Uninstalling the Grafana Deployment via Helm - Bash
DESCRIPTION: This command uninstalls the specified Grafana Helm release ('my-grafana') from the 'monitoring' namespace, removing associated Kubernetes objects. Assumes Helm 3 and proper access rights. Release and namespace names must be matched to the actual deployment.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_26

LANGUAGE: bash
CODE:
```
helm uninstall my-grafana -n monitoring
```

----------------------------------------

TITLE: Configuring Server Root URL in Grafana INI (INI)
DESCRIPTION: Sets the public root URL for the Grafana instance, ensuring license validation works by matching the license URL to the server root. This property must reflect the actual external URL used by clients. It accepts full URLs with protocol and trailing slash. The setting is required for correct license verification and should not use localhost or contain wildcards.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/_index.md#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
[server]\nroot_url = https://grafana.example.com/
```

----------------------------------------

TITLE: Configuring Document Metadata using YAML Frontmatter
DESCRIPTION: This YAML block defines metadata for the documentation page. It includes aliases for redirects, a description, search keywords, product applicability labels (cloud, enterprise, oss), menu and page titles, display weight, and internal reference link mappings for 'heatmap' and 'histogram' documentation sections, ensuring links adapt based on the Grafana version context.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/fundamentals/intro-histograms/index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
---
aliases:
  - ../basics/intro-histograms/
  - ../getting-started/intro-histograms/
description: An introduction to histograms and heatmaps
keywords:
  - grafana
  - heatmap
  - panel
  - documentation
  - histogram
labels:
  products:
    - cloud
    - enterprise
    - oss
menuTitle: Histograms and heatmaps
title: Introduction to histograms and heatmaps
weight: 650
refs:
  heatmap:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/heatmap/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/heatmap/
  histogram:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/histogram/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/histogram/
---
```

----------------------------------------

TITLE: Representing Typed Resource Subresource Permissions using Context Filter in OpenFGA
DESCRIPTION: This example shows how to grant access to subresources of typed resources (like folders) which only have an ID, not a name. It uses the 'resource_read' relation on the typed resource object (e.g., 'folder:<uid>') and specifies the target subresource within the 'context' using a 'subresource_filter'. This distinguishes subresource access from direct resource access.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_6

LANGUAGE: text
CODE:
```
{ “user”: “user:1”, relation: “resource_read”, object:”folder:<uid>” }
context: { "subresource_filter": ["folder.grafana.app/folders/<subresource>"] }
```

----------------------------------------

TITLE: Installing Grafana UI Library with NPM
DESCRIPTION: Command to install the @grafana/ui package using NPM package manager.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/Intro.mdx#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm install @grafana/ui
```

----------------------------------------

TITLE: Importing Storybook and FeatureBadge Dependencies in React (TypeScript)
DESCRIPTION: This snippet imports the Meta and ArgTypes utilities from Storybook\'s blocks module, as well as the FeatureBadge React component for documentation setup. Dependencies required are @storybook/blocks and the local FeatureBadge module. These imports are prerequisites for rendering component documentation and argument tables in Storybook.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/FeatureBadge/FeatureBadge.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Meta, ArgTypes } from '@storybook/blocks';
import { FeatureBadge } from './FeatureBadge';
```

----------------------------------------

TITLE: Retrieving Grafana Service URL with Minikube (Bash)
DESCRIPTION: Uses the `minikube service` command to obtain the accessible URL for the 'grafana' service within the 'my-grafana' namespace. This command automatically opens the URL in a browser and prints the URL, assuming the service is configured with `type: LoadBalancer`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
minikube service grafana --namespace=my-grafana
```

----------------------------------------

TITLE: Example Output of Basic Alert Name List in Grafana Templates - template_output
DESCRIPTION: This snippet is the rendered output when the custom message template is executed with alert data. It displays the list of alert names as plain text, suitable for Slack, Email, or other notification channels. It assumes at least two alerts ("InstanceDown" and "CpuOverload") in the notification.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_4

LANGUAGE: template_output
CODE:
```
The name of the alert is InstanceDown

The name of the alert is CpuOverload
```

----------------------------------------

TITLE: Listing Supported Visualizations for Grafana Actions using Hugo Shortcode
DESCRIPTION: This snippet utilizes the Hugo `column-list` shortcode to present a list of Grafana visualization types that support the Actions feature for triggering API calls. Each list item includes a reference link (`ref:`) to the corresponding visualization documentation. This relies on the Hugo static site generator and the availability of the `column-list` shortcode.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/configure-data-links/index.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
{{< column-list >}}

- [Bar chart](ref:bar-chart)
- [Candlestick](ref:candlestick)
- [State timeline](ref:state-timeline)
- [Status history](ref:status-history)
- [Table](ref:table)
- [Time series](ref:time-series)
- [Trend](ref:trend)
- [XY chart](ref:xy-chart)

{{< /column-list >}}
```

----------------------------------------

TITLE: Enabling Prometheus Metric Encyclopedia Experimental Feature
DESCRIPTION: This feature toggle, `prometheusMetricEncyclopedia`, when enabled, activates an experimental Prometheus metric encyclopedia within the query builder. This feature replaces the standard metric dropdown with a paginated, searchable, and filterable interface, enhancing the experience of browsing large numbers of Prometheus metrics.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-5.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
prometheusMetricEncyclopedia
```

----------------------------------------

TITLE: nginx Rewrite Rule for Sub Path - Nginx
DESCRIPTION: A simple rewrite directive for use in nginx location blocks to strip the /grafana/ prefix from URLs before forwarding to the backend. Add this line inside the relevant nginx location sections to ensure correct path mapping when serving Grafana from a sub path. Critical for proper resource and API routing in proxied sub path deployments.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_3

LANGUAGE: nginx
CODE:
```
 rewrite  ^/grafana/(.*)  /$1 break;
```

----------------------------------------

TITLE: Example Test Output
DESCRIPTION: Sample output showing test execution metrics and results
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
          /\      |‾‾|  /‾‾/  /‾/
     /\  /  \     |  |_/  /  / /
    /  \/    \    |      |  /  ‾‾\
   /          \   |  |‾\  \ | (_) |
  / __________ \  |__|  \__\ \___/ .io

  execution: local
     output: -
     script: src/auth_token_test.js

    duration: 15m0s, iterations: -
         vus: 2,     max: 2

    done [==========================================================] 15m0s / 15m0s

    █ user auth token test

      █ user authenticates through ui with username and password

        ✓ response status is 200
        ✓ response has cookie 'grafana_session' with 32 characters

      █ batch tsdb requests

        ✓ response status is 200

    checks.....................: 100.00% ✓ 32844 ✗ 0
    data_received..............: 411 MB  457 kB/s
    data_sent..................: 12 MB   14 kB/s
    group_duration.............: avg=95.64ms  min=16.42ms  med=94.35ms  max=307.52ms p(90)=137.78ms p(95)=146.75ms
    http_req_blocked...........: avg=1.27ms   min=942ns    med=610.08µs max=48.32ms  p(90)=2.92ms   p(95)=4.25ms
    http_req_connecting........: avg=1.06ms   min=0s       med=456.79µs max=47.19ms  p(90)=2.55ms   p(95)=3.78ms
    http_req_duration..........: avg=58.16ms  min=1ms      med=52.59ms  max=293.35ms p(90)=109.53ms p(95)=120.19ms
    http_req_receiving.........: avg=38.98µs  min=6.43µs   med=32.55µs  max=16.2ms   p(90)=64.63µs  p(95)=78.8µs
    http_req_sending...........: avg=328.66µs min=8.09µs   med=110.77µs max=44.13ms  p(90)=552.65µs p(95)=1.09ms
    http_req_tls_handshaking...: avg=0s       min=0s       med=0s       max=0s       p(90)=0s       p(95)=0s
    http_req_waiting...........: avg=57.79ms  min=935.02µs med=52.15ms  max=293.06ms p(90)=109.04ms p(95)=119.71ms
    http_reqs..................: 34486   38.317775/s
    iteration_duration.........: avg=1.09s    min=1.81µs   med=1.09s    max=1.3s     p(90)=1.13s    p(95)=1.14s
    iterations.................: 1642    1.824444/s
    vus........................: 2       min=2   max=2
    vus_max....................: 2       min=2   max=2
```

----------------------------------------

TITLE: Importing and Using UsersIndicator Component in React
DESCRIPTION: This snippet demonstrates how to import the UsersIndicator component from @grafana/ui and use it in a React component. It shows how to pass user data and set a limit for displayed users.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/UsersIndicator/UsersIndicator.mdx#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import { UsersIndicator } from '@grafana/ui';

const users = [
  {
    user: {
      name: 'John Smith',
      avatarUrl: 'https://example.com/avatar.png',
    },
    lastActiveAt: '2023-04-18T15:00:00.000Z',
  },
  {
    user: {
      name: 'Jane Doe',
      avatarUrl: 'https://example.com/avatar.png',
    },
    lastActiveAt: '2023-04-17T10:00:00.000Z',
  },
  {
    user: {
      name: 'Bob Johnson',
      avatarUrl: 'https://example.com/avatar.png',
    },
    lastActiveAt: '2023-04-16T08:00:00.000Z',
  },
];

const ExampleComponent = () => {
  return (
    <div>
      <UsersIndicator users={users} limit={2} />
    </div>
  );
};
```

----------------------------------------

TITLE: Updating Swagger Version with Bingo
DESCRIPTION: These bash commands show how to update the Swagger version using Bingo, which is recommended if there are issues generating the specifications.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/api/README.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
go install github.com/bwplotka/bingo@latest
bingo get github.com/go-swagger/go-swagger/cmd/swagger@v0.30.2
```

----------------------------------------

TITLE: Creating Migration Directory in Shell
DESCRIPTION: These shell commands create a new directory named `grafana-migration` and then change the current working directory into the newly created folder. This is done to organize the files generated during the migration process.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
mkdir grafana-migration
cd grafana-migration
```

----------------------------------------

TITLE: Enabling Preserve Host Header in IIS Proxy via Windows CMD
DESCRIPTION: Sets the preserveHostHeader flag in the IIS proxy settings to true using the appcmd.exe tool from a Windows command prompt. This is required for Grafana versions greater than 8.3.5, so IIS forwards the original host header to the backend, enabling proper CSRF and CORS validation. Requires administrative privileges. Input: None. Output: Updated IIS configuration for correct reverse proxy behavior. Dependency: IIS with Application Request Routing installed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/iis/index.md#2025-04-23_snippet_2

LANGUAGE: cmd
CODE:
```
%windir%\system32\inetsrv\appcmd.exe set config -section:system.webServer/proxy -preserveHostHeader:true /commit:apphost
```

----------------------------------------

TITLE: Checking for Invalid Data Source UIDs in Grafana with curl and jq
DESCRIPTION: A curl command that fetches all data sources from the Grafana API and uses jq to filter those with invalid UIDs. This helps identify data sources that will be affected by the new UID format enforcement in Grafana v11.2 and later.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v11.2/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
curl http://localhost:3000/api/datasources | jq '.[] | select((.uid | test("^[a-zA-Z0-9\\-_]+$") | not) or (.uid | length > 40)) | {id, uid, name, type}'
```

----------------------------------------

TITLE: Defining a Multi-Instance CPU Usage Test Dataset (CSV within Markdown)
DESCRIPTION: This snippet defines sample CSV content used as a test data source within Grafana's TestData plugin, simulating multiple server instances and associated CPU usage metrics. The CSV is intended for use in a test alert rule configuration, with each row representing an alert instance based on the region, service, and instance fields. The data must be pasted into Grafana's 'CSV Content' scenario of the TestData data source; it outputs four distinct time series to drive alert evaluation, and is a prerequisite for testing the notification templating features.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt4/index.md#2025-04-23_snippet_5

LANGUAGE: CSV
CODE:
```
region,cpu-usage,service,instance
us-west,88,web-server-1,server-01
us-west,81,web-server-1,server-02
us-east,79,web-server-2,server-03
us-east,52,web-server-2,server-04
```

----------------------------------------

TITLE: Starting Grafana Stack with Docker Compose - Bash
DESCRIPTION: This snippet launches the Grafana stack in detached mode using the Docker Compose plugin for Docker CLI (v2+). You must have Docker and Docker Compose installed and configured. It downloads necessary images and starts required services (Grafana, Prometheus, Loki) in the background. Input: None; Output: Containers running in detached mode; any port conflicts result in errors.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt4/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
docker compose up -d
```

----------------------------------------

TITLE: Setting Storybook Metadata using MDX
DESCRIPTION: Uses the Storybook `Meta` component within an MDX file to configure the documentation page. It sets the title that appears in the Storybook navigation ('MDX|Space') and associates the documentation with the imported `Space` component.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Space.mdx#2025-04-23_snippet_1

LANGUAGE: mdx
CODE:
```
<Meta title="MDX|Space" component={Space} />
```

----------------------------------------

TITLE: Embedding YouTube Video using Hugo Shortcode
DESCRIPTION: This Hugo shortcode embeds a YouTube video into the Grafana documentation page. The 'id' parameter specifies the unique YouTube video identifier ('59uCGJN5hPI') to be displayed. This is used to provide supplementary video content related to user and permission management.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/user-management/_index.md#2025-04-23_snippet_0

LANGUAGE: hugo
CODE:
```
{{< youtube id="59uCGJN5hPI" >}}
```

----------------------------------------

TITLE: Example: Decrypting an Age-Encrypted Support Bundle (Bash)
DESCRIPTION: This is a specific example command for decrypting an encrypted Grafana support bundle using the 'age' tool. It uses the private key stored in `key.txt` to decrypt the file `af6684b4-d613-4b31-9fc3-7cb579199bea.tar.gz.age` and saves the decrypted archive as `data.tar.gz`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/troubleshooting/support-bundles/index.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
age --decrypt -i key.txt -o data.tar.gz af6684b4-d613-4b31-9fc3-7cb579199bea.tar.gz.age
```

----------------------------------------

TITLE: Error Message for InterfaceValue Usage in Go Wire Framework
DESCRIPTION: Error message from the Google Wire dependency injection framework indicating incorrect usage of the InterfaceValue function. The error specifies that the first argument to InterfaceValue must be a pointer to an interface type, but a string was provided instead.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/InterfaceValueInvalidArg0/want/wire_errs.txt#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
example.com/foo/wire.go:x:y: first argument to InterfaceValue must be a pointer to an interface type; found string
```

----------------------------------------

TITLE: Including Shared Panel Options Documentation via Hugo Shortcode
DESCRIPTION: This Hugo shortcode embeds shared content related to Grafana panel options into the current document. It specifies the lookup path (`visualizations/panel-options.md`), the source project (`grafana`), and includes a version placeholder (`<GRAFANA_VERSION>`) for context-specific documentation inclusion.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/flame-graph/index.md#2025-04-23_snippet_3

LANGUAGE: hugo
CODE:
```
{{< docs/shared lookup="visualizations/panel-options.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Implementing Collapse Component in React JSX
DESCRIPTION: Example showing how to use the Collapse component with React useState hook for managing the open/closed state. The component accepts label, isOpen, and onToggle props, with the ability to wrap child content that can be shown or hidden.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Collapse/Collapse.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
const [isOpen, setIsOpen] = useState(false);

<Collapse label="Collapse panel" isOpen={isOpen} onToggle={() => setIsOpen(!isOpen)}>
  <p>Panel data</p>
</Collapse>;
```

----------------------------------------

TITLE: Using Grafana Variables in TestData CSV Metric Values
DESCRIPTION: This snippet demonstrates using Grafana's variable syntax within the 'String Input' field for the TestData data source's 'CSV Metric Values' scenario. It dynamically inserts values from the columns '1980', '2000', and '2020' of the selected source data row into the target query, typically for generating graph data points.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/explore/correlations-editor-in-explore.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
${1980},${2000},${2020}
```

----------------------------------------

TITLE: Rendering TagList Example in JSX
DESCRIPTION: This snippet demonstrates how to render an example of the TagList component using Storybook's Canvas component. It references the 'List' story from TagListStories.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tags/TagList.mdx#2025-04-23_snippet_1

LANGUAGE: JSX
CODE:
```
<Canvas of={TagListStories.List} />
```

----------------------------------------

TITLE: Receiving Success Response After User Preferences Update - JSON
DESCRIPTION: Sample HTTP response confirming that the user preferences have been updated successfully. The message is returned as JSON and is typically expected after a valid PUT or PATCH operation. Response is succinct and indicates success without additional fields.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{"message":"Preferences updated"}
```

----------------------------------------

TITLE: Retrieving a Specific Playlist via Grafana HTTP API
DESCRIPTION: Sends a GET request to `/api/playlists/:uid` to retrieve a specific playlist identified by its unique ID (UID). Requires an `Authorization` header with a bearer token. Returns a JSON object containing the playlist details, including its items.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/playlist.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
GET /api/playlists/1 HTTP/1.1
Accept: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
{
  "uid" : "1",
  "name": "my playlist",
  "interval": "5m",
  "items": [
    {
      "id": 1,
      "playlistUid": "1",
      "type": "dashboard_by_uid",
      "value": "3",
      "order": 1,
      "title":"my third dashboard"
    },
    {
      "id": 2,
      "playlistUid": "1",
      "type": "dashboard_by_tag",
      "value": "myTag",
      "order": 2,
      "title":"my other dashboard"
    }
  ]
}
```

----------------------------------------

TITLE: Displaying Notification Routing Diagram using Hugo Figure Shortcode
DESCRIPTION: Uses the Hugo 'figure' shortcode to embed a diagram illustrating how the notification policy tree routes alerts by matching alert labels to the appropriate notification policy. The snippet specifies the image source path, maximum display width, and alternative text for accessibility.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/notifications/_index.md#2025-04-23_snippet_1

LANGUAGE: hugo
CODE:
```
{{< figure src="/media/docs/alerting/notification-routing.png" max-width="750px" alt="A diagram displaying how the notification policy tree routes alerts" >}}
```

----------------------------------------

TITLE: Verifying JWT Using a PEM-Encoded Key File
DESCRIPTION: Configuration for verifying JWT tokens using a single cryptographic key loaded from a PEM-encoded file with optional Key ID specification.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_7

LANGUAGE: ini
CODE:
```
key_file = /path/to/key.pem
```

----------------------------------------

TITLE: Adding or Updating Go Dependencies with Go Modules
DESCRIPTION: Commands for adding or updating Go dependencies using Go modules. The example shows how to update to the latest or a specific version of a package and mentions the importance of committing dependency files.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/UPGRADING_DEPENDENCIES.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
go get example.com/some/module/pkg
```

LANGUAGE: bash
CODE:
```
go get example.com/some/module/pkg@vX.Y.Z
```

----------------------------------------

TITLE: Creating Grafana systemd Unit File - Shell
DESCRIPTION: Creates an empty file for the Grafana systemd service unit at '/etc/systemd/system/grafana-server.service' using 'touch'. Prepares for manual entry of service configuration. Requires: sudo, touch installed. Output: empty file created at target location.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_8

LANGUAGE: shell
CODE:
```
sudo touch /etc/systemd/system/grafana-server.service
```

----------------------------------------

TITLE: YAML Front Matter Configuration for Grafana 8.2.0-beta1 Release Notes
DESCRIPTION: YAML configuration at the top of the Markdown file that defines build settings, labels for product editions, and the title of the release notes document.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-8-2-0-beta1.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
_build:
  list: false
labels:
  products:
    - cloud
    - enterprise
    - oss
title: Release notes for Grafana 8.2.0-beta1
```

----------------------------------------

TITLE: Setting Maximum Device Scale Factor - JSON
DESCRIPTION: Defines rendering.maxDeviceScaleFactor to cap the maximum DPI (device scale factor) for renders. This ensures requests do not overload the renderer with very high-resolution requirements.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_50

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "maxDeviceScaleFactor": 4
  }
}
```

----------------------------------------

TITLE: Rendering LoadingPlaceholder in React with JSX
DESCRIPTION: This code snippet demonstrates how to render the LoadingPlaceholder React component with the 'text' prop set to display a custom loading message. The component is intended to alert users that an operation is in progress, and can be configured with various text values as required. No additional dependencies are needed beyond the LoadingPlaceholder component itself; the expected input is a 'text' string prop. The output is a loading UI element rendered in a React application.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/LoadingPlaceholder/LoadingPlaceholder.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<LoadingPlaceholder text=\"Loading...\" />
```

----------------------------------------

TITLE: Displaying Grafana Version and Year in Footer using Go Template
DESCRIPTION: Renders a footer line using Go template syntax within Grafana. It accesses the `.BuildVersion` variable (presumably available in the template's execution context) to display the specific Grafana build version. It also uses the built-in `now` variable piped to the `date` function with the Go layout '2006' to display the current year.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/partials/layout/default.txt#2025-04-23_snippet_1

LANGUAGE: Go Template
CODE:
```
Sent by Grafana v[[.BuildVersion]] (c) [[now | date "2006"]] Grafana Labs
```

----------------------------------------

TITLE: Setting Additional Browser Arguments - JSON
DESCRIPTION: Lists extra browser launch arguments in JSON configuration under rendering.args. Each string in the array represents a command-line switch to alter headless browser startup for rendering tasks. Useful for advanced tuning or working around containerization restrictions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_32

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "args": [
      "--no-sandbox",
      "--disable-setuid-sandbox",
      "--disable-dev-shm-usage",
      "--disable-accelerated-2d-canvas",
      "--disable-gpu",
      "--window-size=1280x758"
    ]
  }
}
```

----------------------------------------

TITLE: Starting Grafana E2E Test Server
DESCRIPTION: Starts the Grafana end-to-end (e2e) test server, specifically configured to load provisioned test plugins. It runs the server on port 3000 by setting the PORT environment variable and executing the start script located at `./scripts/grafana-server/start-server`.
SOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/README.md#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
PORT=3000 ./scripts/grafana-server/start-server
```

----------------------------------------

TITLE: Importing TextArea Component and Related Stories in JavaScript
DESCRIPTION: This snippet shows the import statements for the TextArea component, related stories, and other necessary components for documentation.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/TextArea/TextArea.mdx#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { ArgTypes, Canvas } from '@storybook/blocks';
import { Field } from '../Forms/Field';
import { TextArea } from './TextArea';
import * as TextAreaStories from './TextArea.story';
import { ExampleFrame } from '../../utils/storybook/ExampleFrame';
```

----------------------------------------

TITLE: Grafana Documentation Frontmatter Configuration
DESCRIPTION: This YAML block defines metadata for the documentation page, including aliases for redirection, a brief description, product labels (cloud, enterprise, oss), menu title, page title, display weight, and reference links (`refs`) for various visualization types. The `refs` section maps short names (like 'table', 'histogram') to actual documentation paths, potentially varying based on Grafana version or deployment type (oss vs cloud).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/configure-thresholds/index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
---
aliases:
  - ../panels/
  - ../panels/configure-thresholds/
  - ../panels/specify-thresholds/about-thresholds/
  - ../panels/specify-thresholds/add-a-threshold/
  - ../panels/specify-thresholds/add-threshold-to-graph/
  - ../panels/specify-thresholds/delete-a-threshold/
  - ../panels/thresholds/
description: Configure thresholds in your visualizations
labels:
  products:
    - cloud
    - enterprise
    - oss
menuTitle: Configure thresholds
title: Configure thresholds
weight: 100
refs:
  table:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/table/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/table/
  histogram:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/histogram/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/histogram/
  bar-chart:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/bar-chart/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/bar-chart/
  time-series:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/time-series/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/time-series/
  trend:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/trend/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/trend/
  geomap:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/geomap/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/geomap/
  stat:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/stat/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/stat/
  state-timeline:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/state-timeline/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/state-timeline/
  gauge:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/gauge/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/gauge/
  bar-gauge:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/bar-gauge/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/bar-gauge/
  canvas:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/canvas/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/canvas/
  candlestick:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/candlestick/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/candlestick/
  status-history:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/status-history/
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/status-history/
---
```

----------------------------------------

TITLE: Selecting All Fields in InfluxQL
DESCRIPTION: SQL query to select all fields from a specified measurement in InfluxQL.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/query-editor/index.md#2025-04-23_snippet_1

LANGUAGE: SQL
CODE:
```
SELECT * FROM <measurement_name>
```

----------------------------------------

TITLE: Formatting Grafana Variables for OpenTSDB Distributed Queries
DESCRIPTION: Illustrates the `:distributed` format option, specifically for OpenTSDB. It formats multi-value variables by joining them with the variable name, like `'value1,variable_name=value2'`. The example shows `['test1', 'test2']` interpolated as `'test1,servers=test2'`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
servers = ['test1', 'test2']
String to interpolate: '${servers:distributed}'
Interpolation result: 'test1,servers=test2'
```

----------------------------------------

TITLE: Starting Grafana Server Using Binary - Shell
DESCRIPTION: Starts the Grafana server manually with a specified homepath using the standalone binary. Useful for initial setup and to auto-create required directories. Requires: extracted Grafana binaries, executable permission, shell access. No inputs; this command blocks until interrupted. Output: Grafana process runs until stopped (e.g., with CTRL+C).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_10

LANGUAGE: shell
CODE:
```
/usr/local/grafana/bin/grafana-server --homepath /usr/local/grafana
```

----------------------------------------

TITLE: Configuring Grafana License Validation via Environment Variable (Shell)
DESCRIPTION: This snippet demonstrates setting the `GF_ENTERPRISE_LICENSE_VALIDATION_TYPE` environment variable to `aws`. This serves as an alternative to modifying the `grafana.ini` file, instructing Grafana Enterprise to use AWS License Manager for license validation. This method is commonly preferred in containerized or orchestrated deployments.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-instance-outside-aws/index.md#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
GF_ENTERPRISE_LICENSE_VALIDATION_TYPE=aws
```

----------------------------------------

TITLE: Example HTTP Response for Grafana Role Creation/Update
DESCRIPTION: Illustrates a successful HTTP 200 OK response from the Grafana Access Control API after creating or updating a custom role. The JSON body includes details like the role's UID, version, name, description, permissions, and timestamps.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8

{
    "version": 2,
    "uid": "jZrmlLCGka",
    "name": "custom:delete:create:roles",
    "displayName": "custom delete create roles",
    "description": "My custom role which gives users permissions to delete and create roles",
    "group":"My Group",
    "displayName": "My Custom Role",
    "global": false,
    "permissions": [
        {
            "action": "roles:delete",
            "scope": "permissions:type:delegate",
            "updated": "2021-05-13T23:19:46+02:00",
            "created": "2021-05-13T23:19:46+02:00"
        }
    ],
    "updated": "2021-05-13T23:20:51.416518+02:00",
    "created": "2021-05-13T23:19:46+02:00"
}
```

----------------------------------------

TITLE: Launching E2E Tests with Custom Backend URL using Shell
DESCRIPTION: Demonstrates how to run end-to-end tests against a specific Grafana instance by setting the BASE_URL environment variable before invoking the yarn e2e command. Requires a running Grafana instance at the specified URL and yarn installed in the development environment. The BASE_URL parameter directs tests to the remote instance, and the command runs all E2E scripts as defined in the project's configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e-core.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
BASE_URL=http://172.0.10.2:3333 yarn e2e
```

----------------------------------------

TITLE: Viewing Grafana Log Warning for Running Allowed Unsigned Plugins (Bash)
DESCRIPTION: This log message appears when Grafana successfully loads an unsigned plugin because the configuration explicitly permits it via the `allow_loading_unsigned_plugins` setting. It serves as a warning that a potentially risky operation is occurring.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/plugin-management/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
WARN[06-01|16:45:59] Running an unsigned plugin   pluginID=<plugin id>
```

----------------------------------------

TITLE: Markdown Headers and Frontmatter Configuration
DESCRIPTION: Markdown frontmatter configuration specifying page metadata including title, menu title, description, weight and keywords for the traces to profiles documentation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/pyroscope/configure-traces-to-profiles.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
---
title: Configure traces to profiles
menuTitle: Configure traces to profiles
description: Learn how to configure the traces to profiles integration in Grafana and Grafana Cloud.
weight: 300
keywords:
  - continuous profiling
  - tracing
---
```

----------------------------------------

TITLE: Folder Update Version Mismatch Error Response
DESCRIPTION: Example HTTP error response (412 Precondition Failed) when attempting to update a folder that has been modified by someone else, indicated by a version mismatch.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
HTTP/1.1 412 Precondition Failed
Content-Type: application/json; charset=UTF-8
Content-Length: 97

{
  "message": "The folder has been changed by someone else",
  "status": "version-mismatch"
}
```

----------------------------------------

TITLE: Changing User Password using cURL Script (Bash)
DESCRIPTION: Provides a Bash script example using cURL to change a user's password (specifically the Admin user) via the Grafana API. It sends a PUT request with Basic Authentication embedded in the URL and a JSON payload containing `oldPassword`, `newPassword`, and `confirmNew` fields to the `/api/user/password` endpoint.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_16

LANGUAGE: bash
CODE:
```
curl -X PUT -H "Content-Type: application/json" -d '{
  "oldPassword": "oldpass",
  "newPassword": "newpass",
  "confirmNew": "newpass"
}' http://admin:oldpass@<your_grafana_host>:3000/api/user/password
```

----------------------------------------

TITLE: Exporting Grafana Playlists via API in Shell
DESCRIPTION: This shell script first creates a directory named `playlists`. It then uses `curl` to fetch a list of all playlist UIDs from the source Grafana instance's `/api/playlists` endpoint, authenticating with `$GRAFANA_SOURCE_TOKEN`. The `jq` command extracts each UID. A `while` loop then iterates through each UID, using `curl` again to fetch the full details for that specific playlist (`/api/playlists/$uid`) and saves the JSON response to a file named after the UID within the `playlists` directory.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_10

LANGUAGE: shell
CODE:
```
mkdir playlists
curl "${GRAFANA_ONPREM_INSTANCE_URL}/api/playlists" \
 -H "Authorization: Bearer $GRAFANA_SOURCE_TOKEN" \
 | jq -M -r -c '.[] | .uid' \
 | while read -r uid; do \
 curl "${GRAFANA_ONPREM_INSTANCE_URL}/api/playlists/$uid" \
     -H "Authorization: Bearer $GRAFANA_SOURCE_TOKEN" \
     > playlists/$uid.json; \
 done
```

----------------------------------------

TITLE: Fetching Specific Role in Grafana RBAC API
DESCRIPTION: Makes a GET request to retrieve details of a specific role by its UID. Requires the 'roles:read' action on 'roles:*' scope.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
GET /api/access-control/roles/PYnDO3rMk
Accept: application/json
Content-Type: application/json
```

----------------------------------------

TITLE: Accessing Reduced Range Query Value
DESCRIPTION: This Go template snippet demonstrates accessing the result of a reduce expression (with Ref ID 'B') applied to a range query. The `$values` variable holds the output of the reduction.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_8

LANGUAGE: gotemplate
CODE:
```
{{ $values.B.Value }}
```

----------------------------------------

TITLE: Displaying Stack Component Prop Types in Storybook MDX
DESCRIPTION: This snippet injects an auto-generated table of the Stack component’s accepted props into the Storybook documentation. <ArgTypes of={Stack} /> parses the Stack component and renders a list of its properties, enhancing discoverability and usability for developers. This requires Storybook configured for MDX and the Stack component to have proper PropTypes or TypeScript type annotations.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Stack/Stack.mdx#2025-04-23_snippet_1

LANGUAGE: mdx
CODE:
```
<ArgTypes of={Stack} />
```

----------------------------------------

TITLE: Deleting Grafana Data Sources (Plaintext)
DESCRIPTION: Defines the `datasources:delete` permission action required to delete data sources in Grafana. Access is associated with data source scopes `datasources:*` and `datasources:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_17

LANGUAGE: plaintext
CODE:
```
`datasources:delete`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>
```

----------------------------------------

TITLE: Formatting Grafana Variables as Plain Text Representation
DESCRIPTION: Demonstrates the `:text` format option. It formats variables into their text representation. For single-value variables, it returns the value as text. For multi-value variables, it returns a string with values joined by ` + `. The example shows `["test1", "test2"]` interpolated as `"test1 + test2"`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
servers = ["test1", "test2"]
String to interpolate: '${servers:text}'
Interpolation result: "test1 + test2"
```

----------------------------------------

TITLE: Declaring Grafana Plugin Signature Manifest - JSON
DESCRIPTION: This JSON snippet represents the digital signature manifest for a Grafana plugin. It declares metadata such as manifest and plugin versions, signature type, signing organization, file hashes, and signing key ID. This structure is consumed by Grafana to authenticate and verify the integrity of plugin files using the checksum and associated cryptographic information. Key fields include 'manifestVersion', 'signatureType', 'signedByOrg', 'plugin', 'files', and 'keyId', where 'files' maps plugin filenames to their hashed checksums.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/valid-v2-signature/plugin/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "plugin": "test-datasource",
  "version": "1.0.0",
  "time": 1661171059101,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "203ef4a613c5693c437a665cd67f95e2756a0f71b336b2ffb265db7c180d0b19"
  }
}
```

----------------------------------------

TITLE: Defining Plugin Metadata and Checksums in Manifest (JSON)
DESCRIPTION: This JSON snippet specifies metadata for a Grafana plugin, including manifest version, signature type, organizational details, plugin identity, version, timestamp, a signing key ID, and a mapping of included files with their cryptographic checksums. It is essential for validating plugin provenance and is a required dependency when distributing or installing plugins in Grafana environments. Inputs include organizational signing details, plugin information, and SHA checksums; outputs are JSON objects used for signature verification. No programming logic is present; the file is intended for programmatic consumption.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/plugin-with-dist/plugin/dist/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "plugin": "test-datasource",
  "version": "1.0.0",
  "time": 1661171059101,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "203ef4a613c5693c437a665cd67f95e2756a0f71b336b2ffb265db7c180d0b19"
  }
}
```

----------------------------------------

TITLE: Formatting Grafana Variables as Regex String
DESCRIPTION: Demonstrates the `:regex` format option. This formats multi-value variables into a single regex string where values are treated as alternatives, separated by `|` and enclosed in parentheses `(value1|value2)`. Regex special characters within values are escaped. The example shows `['test1.', 'test2']` interpolated as `'(test1\.|test2)'`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
servers = ['test1.', 'test2']
String to interpolate: '${servers:regex}'
Interpolation result: '(test1\.|test2)'
```

----------------------------------------

TITLE: Implementing Greet method for Greeter in Go
DESCRIPTION: Adds a Greet method to the Greeter struct that returns the stored Message.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_3

LANGUAGE: go
CODE:
```
func (g Greeter) Greet() Message {
    return g.Message
}
```

----------------------------------------

TITLE: Sample API Key Generation Output
DESCRIPTION: Example output from the API key generation command. The string after '/api/core/v2/apikeys/' is the actual API key to be used in the Grafana notification channel configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/sensugo/notes.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
Created: /api/core/v2/apikeys/0a1b2c3d-4e5f-6a7b-8c9d-0e1f2a3b4c5d
```

----------------------------------------

TITLE: Wire Framework Error Message in Go
DESCRIPTION: An error message generated by Google's Wire dependency injection framework. The error occurs when attempting to use the Value function with an interface type (io.Reader) instead of using the InterfaceValue function as required by Wire.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/ValueIsInterfaceValue/want/wire_errs.txt#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
example.com/foo/wire.go:x:y: argument to Value may not be an interface value (found io.Reader); use InterfaceValue instead
```

----------------------------------------

TITLE: Including Shared Field Overrides Documentation via Hugo Shortcode
DESCRIPTION: This Hugo shortcode dynamically includes shared documentation concerning field overrides in Grafana visualizations. It uses the `docs/shared` shortcode, specifying the content path via `lookup` (`visualizations/overrides-options.md`), the `source` as 'grafana', and a dynamic `version` placeholder (`<GRAFANA_VERSION>`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/flame-graph/index.md#2025-04-23_snippet_4

LANGUAGE: hugo
CODE:
```
{{< docs/shared lookup="visualizations/overrides-options.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Using JSONFormatter Component within Tooltip (JSX)
DESCRIPTION: Illustrates the usage of a hypothetical `JSONFormatter` component. The surrounding text indicates this component might be used inside the `Tooltip` component, specifically mentioning its relevance for the 'Info alternative' theme, suggesting the Tooltip can render complex React elements.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tooltip/Tooltip.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
<JSONFormatter />
```

----------------------------------------

TITLE: Listing Directories with Original Upstream Licenses in Grafana Project
DESCRIPTION: This code block specifies the directories and their subdirectories that maintain their original upstream licenses within the Grafana project. Currently, it only lists the 'public/vendor/' directory.
SOURCE: https://github.com/grafana/grafana/blob/main/LICENSING.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
public/vendor/
```

----------------------------------------

TITLE: Displaying Note Admonition in Hugo/Markdown
DESCRIPTION: This Hugo shortcode generates a 'note' type admonition block within the Markdown content. It is used here to highlight that Data source management features are specific to Grafana Enterprise and Grafana Cloud, providing relevant documentation links within the note. This snippet requires a Markdown processor that supports Hugo shortcodes, like Hugo itself.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
{{% admonition type="note" %}}
[Data source management](https://grafana.com/docs/grafana/<GRAFANA_VERSION>/administration/data-source-management/) is only available in [Grafana Enterprise](https://grafana.com/docs/grafana/<GRAFANA_VERSION>/introduction/grafana-enterprise/) and [Grafana Cloud](https://grafana.com/docs/grafana-cloud/).
{{% /admonition %}}
```

----------------------------------------

TITLE: Adding Comments in Go Templates
DESCRIPTION: Shows the standard syntax for adding comments within Go templates using `{{/*` and `*/}}`. The content inside these delimiters is ignored during template execution.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_11

LANGUAGE: go
CODE:
```
{{/* This is a comment */}}
```

----------------------------------------

TITLE: Migrating Test Helper Usage in Grafana Frontend (JavaScript)
DESCRIPTION: These JavaScript code snippets show how to update frontend test cases following the removal of the selectOptionInTest utility from the @grafana/ui package. Developers should replace selectOptionInTest with the select helper from react-select-event. The new syntax requires importing from react-select-event and passing an additional options object, such as specifying the container. This migration ensures code does not bundle testing libraries into production and that tests correctly simulate option selection in Select components.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-9-0-0.md#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
// before
import { selectOptionInTest } from '@grafana/ui';
// ...test usage
await selectOptionInTest(selectEl, 'Option 2');
```

LANGUAGE: JavaScript
CODE:
```
// after
import { select } from 'react-select-event';
// ...test usage
await select(selectEl, 'Option 2', { container: document.body });
```

----------------------------------------

TITLE: Restarting Grafana Docker Container
DESCRIPTION: Restarts a specific Docker container named 'grafana'. Assumes a container with this name is already running.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
docker restart grafana
```

----------------------------------------

TITLE: Sample Dashboards Read Permissions Array - JSON
DESCRIPTION: This JSON array exemplifies the filtered output from the API showing the unique identifiers (UIDs) of dashboards and folders a token can read. Each entry is a UID for a Grafana dashboard or folder. There are no dependencies or inputs; it's a static example for documentation. Output: UID array. Limitation: Trailing comma may not be valid in strict JSON parsing.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/_index.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
[
  "dashboards:uid:70KrY6IVz",
  "dashboards:uid:d61be733D",
  "folders:uid:dBS87Axw2",
]
```

----------------------------------------

TITLE: Using FormattedValueDisplay with Custom Value in React (JSX)
DESCRIPTION: Demonstrates usage of the FormattedValueDisplay component in a React JSX context, passing a 'value' prop containing a text object and a 'style' prop to customize the font size. This example requires React, the FormattedValueDisplay component, and assumes correct prop shaping. The key input is the value object, while output is a formatted displayed element. Suitable for customizable UI views requiring formatted numeric or string display.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/FormattedValueDisplay/FormattedValueDisplay.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<FormattedValueDisplay value={{ text: 'Test value' }} style={{ fontSize: 12 }} />
```

----------------------------------------

TITLE: Retrieving All Notification Template Groups with HTTP GET - HTTP
DESCRIPTION: This HTTP request lists all notification template groups using the GET method. The endpoint responds with NotificationTemplates upon success with status code 200. No parameters, headers, or request body are required, and the response is expected to be in a standardized JSON schema.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_30

LANGUAGE: HTTP
CODE:
```
GET /api/v1/provisioning/templates
```

----------------------------------------

TITLE: Upgrading Grafana Docker Container (Bash)
DESCRIPTION: Pulls the latest official Grafana image, stops the currently running Grafana container, removes the old container, and then starts a new container using the latest image. It mounts a volume (`/var/lib/grafana`) to persist data and configures the container to restart automatically. Container name (`my-grafana-container`) and volume path are examples and should be adjusted.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/upgrade/upgrade-common-tasks.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
docker pull grafana/grafana
docker stop my-grafana-container
docker rm my-grafana-container
docker run -d --name=my-grafana-container --restart=always -v /var/lib/grafana:/var/lib/grafana grafana/grafana
```

----------------------------------------

TITLE: Adding API Reducer to Redux Store
DESCRIPTION: Integration of the generated API reducer into the Redux store configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/api/README.md#2025-04-23_snippet_6

LANGUAGE: jsx
CODE:
```
import { dashboardAPI } from '<pathToYourAPI>';
  const rootReducers = {
    ...,
    [dashboardAPI.reducerPath]: dashboardAPI.reducer,
  };
```

----------------------------------------

TITLE: Deploying OpenLDAP Container
DESCRIPTION: Command to build and deploy the OpenLDAP container using make
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/openldap/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
make devenv sources=auth/openldap
```

----------------------------------------

TITLE: Defining Grafana Fixed Role: fixed:ldap:reader
DESCRIPTION: Specifies the `fixed:ldap:reader` role (ID: `fixed_lMcOPwSkxKY-qCK8NMJc5k6izLE`) within Grafana. This role grants `ldap.user:read` and `ldap.status:read` permissions, allowing users to read the LDAP configuration and LDAP status information.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_12

LANGUAGE: plaintext
CODE:
```
fixed:ldap:reader
```

LANGUAGE: plaintext
CODE:
```
fixed_lMcOPwSkxKY-qCK8NMJc5k6izLE
```

LANGUAGE: plaintext
CODE:
```
Permissions included:
- ldap.user:read
- ldap.status:read
```

----------------------------------------

TITLE: Implementing Database Operations with SQLStore in Go
DESCRIPTION: Demonstrates how to implement database operations using SQLStore within a service, showing dashboard deletion as an example.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/database.md#2025-04-23_snippet_2

LANGUAGE: go
CODE:
```
func (s *MyService) DeleteDashboard(ctx context.Context, cmd *models.DeleteDashboardCommand) error {
    if err := s.SQLStore.WithDbSession(ctx, func(sess *db.Session) error {
        _, err := sess.Exec("DELETE FROM dashboards WHERE dashboard_id=?", cmd.DashboardID)
        return err
    })
}
```

----------------------------------------

TITLE: Starting Docker Compose Services
DESCRIPTION: Command to start all services defined in the docker-compose configuration
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha-test-unified-alerting/README.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
$ docker-compose up -d
```

----------------------------------------

TITLE: Displaying Error with Stack Trace using ErrorWithStack - React & Grafana UI - JSX
DESCRIPTION: Shows how to display both an error message and its stack trace using the ErrorWithStack component from Grafana UI. Requires an 'error' object, an optional 'title', and 'errorInfo' as props. Depends on '@grafana/ui' and React. Useful for debugging, as it consolidates error details for developers or users. Outputs a formatted error display.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ErrorBoundary/ErrorBoundary.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
import { ErrorWithStack } from '@grafana/ui';\n\n<ErrorWithStack error={new Error('Test error')} title={'Unexpected error'} errorInfo={null} />;
```

----------------------------------------

TITLE: Illustrating Basic Supported Data Format for Grafana Table (CSV)
DESCRIPTION: This CSV snippet shows an example of a well-structured dataset with data present in every cell, which is the ideal format for the Grafana Table visualization. It demonstrates the expected column-row structure.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/table/index.md#2025-04-23_snippet_0

LANGUAGE: csv
CODE:
```
```csv
Column1, Column2, Column3
value1 , value2 , value3
value4 , value5 , value6
value7 , value8 , value9
```
```

----------------------------------------

TITLE: Sharing Panel Snapshot - Markdown
DESCRIPTION: Shows 'ps' as the keyboard shortcut for sharing a snapshot of the current panel in Grafana. This is intended for quick sharing or exporting of panel state and requires no special dependencies other than permissions to share snapshots.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_6

LANGUAGE: markdown
CODE:
```
`ps`
```

----------------------------------------

TITLE: Configuring Jest Tests for Combobox Virtualization
DESCRIPTION: Setup code for mocking getBoundingClientRect in Jest tests to support virtualization testing of the Combobox component.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Combobox/Combobox.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
beforeAll(() => {
  const mockGetBoundingClientRect = jest.fn(() => ({
    width: 120,
    height: 120,
    top: 0,
    left: 0,
    bottom: 0,
    right: 0,
  }));

  Object.defineProperty(Element.prototype, 'getBoundingClientRect', {
    value: mockGetBoundingClientRect,
  });
});
```

----------------------------------------

TITLE: Representing Time Series Data for Outer Join (Query B)
DESCRIPTION: This Markdown table displays example time series data from 'Query B', meant to be joined with 'Query A' using an outer join. It contains columns for Time, Server, and Errors.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_22

LANGUAGE: markdown
CODE:
```
| Time                | Server   | Errors |
| ------------------- | -------- | ------ |
| 2020-07-07 11:34:20 | server 1 | 15     |
| 2020-07-07 11:24:20 | server 2 | 5      |
| 2020-07-07 11:04:20 | server 3 | 10     |
```

----------------------------------------

TITLE: Updating SAML Settings via Grafana Admin API
DESCRIPTION: JSON payload example for enabling SAML authentication and disabling single logout through the Grafana Admin API. The updates parameter specifies settings to change.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/settings-updates-at-runtime/index.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "updates": {
    "auth.saml": {
      "enabled": "true",
      "single_logout": "false"
    }
  }
}
```

----------------------------------------

TITLE: Starting Grafana Service with Homebrew (macOS)
DESCRIPTION: Starts the Grafana service managed by Homebrew on macOS. Assumes Grafana was installed using `brew install grafana`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_14

LANGUAGE: bash
CODE:
```
brew services start grafana
```

----------------------------------------

TITLE: Generating Cloud API Endpoints for Grafana
DESCRIPTION: Commands to regenerate the machine-generated endpoints.gen.ts file. Involves cleaning swagger files, generating OpenAPI3 specifications, and running the API generation script. Requires Node.js and yarn to be installed.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/migrate-to-cloud/api/README.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
make swagger-clean && make openapi3-gen
```

LANGUAGE: shell
CODE:
```
yarn generate-apis
```

----------------------------------------

TITLE: Using Wildcards in Graphite Queries
DESCRIPTION: Example of using wildcards to retrieve multiple time series in a single query, showing how to efficiently query CPU utilization metrics across different categories.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/query-editor/index.md#2025-04-23_snippet_2

LANGUAGE: graphite
CODE:
```
cpu.percent.*.g
```

----------------------------------------

TITLE: Embedding Video Files with Video-Embed Shortcode in Hugo/Grafana Documentation Markdown
DESCRIPTION: This snippet utilizes the video-embed shortcode to directly display local MP4 video demos on documentation pages. The 'src' parameter references the video file, 'max-width' sets the display width, and 'caption' describes the video content. This is intended for hosting demo or explanatory videos without dependence on external platforms. Videos must be uploaded to the correct location, and descriptive captions should be supplied.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-2.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
{{< video-embed src="/media/docs/grafana/screen-recording-10-2-y-axis-zoom-demo.mp4" max-width="750px" caption="Y-axis zooming demo" >}}
```

----------------------------------------

TITLE: Confirmation Response for Updating Organization User - JSON
DESCRIPTION: This JSON response signals successful update of a user's attributes within the organization following a PATCH request. Typical responses contain a message field with confirmation text. A 200 status indicates successful operation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_7

LANGUAGE: json
CODE:
```
{"message":"Organization user updated"}
```

----------------------------------------

TITLE: Implementing Select with AutoSaveField in React
DESCRIPTION: Example of using AutoSaveField with a Select component for automatic dropdown selection saving.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/AutoSaveField/AutoSaveField.mdx#2025-04-23_snippet_5

LANGUAGE: jsx
CODE:
```
<AutoSaveField
  onFinishChange={customRequest}
  //Complete field args if needed
>
  {(onChange) => (
    <Select
      loadOptions={optionsList}
      value={option}
      onChange={(value) => {
        onChange(value);
        //Complete code if needed
      }}
    />
  )}
</AutoSaveField>
```

----------------------------------------

TITLE: Representing Direct Generic Resource Permissions in OpenFGA
DESCRIPTION: This example shows an OpenFGA tuple granting a user ('user:1') direct 'read' access to a specific generic resource. The object identifies the resource by its type and name (e.g., a specific dashboard). Context is required to specify the 'group_resource' for filtering purposes in list requests.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_3

LANGUAGE: text
CODE:
```
{ “user”: “user:1”, relation: “read”, object:”resource:dashboard.grafana.app/dashboards/<name>” }` with additional context. This context store the GroupResource. `{ "group_resource": "dashboard.grafana.app/dashboards" }
```

----------------------------------------

TITLE: Handling Empty Collections with 'range' and 'else' in Go Templates
DESCRIPTION: Extends the `range` statement by adding an `else` block. This allows rendering alternative content when the collection being iterated over (`$array`) is empty or nil.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_3

LANGUAGE: go
CODE:
```
{{ range $array }}
  {{ .itemPropertyName }}
{{ else }}
  Empty array
{{ end }}
```

----------------------------------------

TITLE: Adding Comments with Whitespace Control in Go Templates
DESCRIPTION: Demonstrates adding comments while simultaneously removing potential leading or trailing whitespace (like newlines) around the comment using the `{{-` and `-}}` syntax variants: `{{- /* ... */ -}}`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_12

LANGUAGE: go
CODE:
```
{{- /* This is a comment with no leading or trailing line breaks */ -}}
```

----------------------------------------

TITLE: Sharing Link for Panel - Markdown
DESCRIPTION: Uses the 'pu' keyboard shortcut when hovering over a panel in Grafana to open the share link dialog. The shortcut triggers the UI for copying or sharing the panel's direct link. No configuration is required other than having panel keyboard shortcuts enabled.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_4

LANGUAGE: markdown
CODE:
```
`pu`
```

----------------------------------------

TITLE: Using Alias Patterns in Grafana for InfluxDB
DESCRIPTION: These placeholders are used within Grafana's alias field for InfluxDB queries to dynamically name the time series in visualizations. `$measurement` uses the measurement name, `$1`-`$9` use parts of a dot-separated measurement name, `$col` uses the column name, and `$tag_exampletag` or `[[tag_exampletag]]` uses the value of the specified tag.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/influxdb/query_help.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
- $measurement = replaced with measurement name
- $1 - $9 = replaced with part of measurement name (if you separate your measurement name with dots)
- $col = replaced with column name
- $tag_exampletag = replaced with the value of the <i>exampletag</i> tag
- You can also use [[tag_exampletag]] pattern replacement syntax
```

----------------------------------------

TITLE: Implementing EmptyState Completed Variant in JSX
DESCRIPTION: This snippet illustrates the usage of the `EmptyState` component with the `completed` variant. This is suitable for situations where the user has finished all available tasks, such as clearing notifications, displaying a confirmation message.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/EmptyState/EmptyState.mdx#2025-04-23_snippet_3

LANGUAGE: jsx
CODE:
```
import { EmptyState } from '@grafana/ui';

<EmptyState variant="completed" message="You're all caught up" />;
```

----------------------------------------

TITLE: Representing Time Series Data for Inner Join (Query A)
DESCRIPTION: This Markdown table shows example time series data from 'Query A', intended as input for an inner join transformation. It includes columns for Time, Job, and Uptime.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_15

LANGUAGE: markdown
CODE:
```
| Time                | Job     | Uptime    |
| ------------------- | ------- | --------- |
| 2020-07-07 11:34:20 | node    | 25260122  |
| 2020-07-07 11:24:20 | postgre | 123001233 |
| 2020-07-07 11:14:20 | postgre | 345001233 |
```

----------------------------------------

TITLE: Starting Grafana Stack with Legacy Docker Compose Command - Bash
DESCRIPTION: This snippet starts the Grafana stack using the legacy "docker-compose" binary (used for Docker Compose v1). It is functionally similar to the previous command, launching all services defined in the local "docker-compose.yml" file in detached mode. This uses the legacy hyphenated command, which is still available on some systems. Input: None; Output: Containers running in background, ready for Grafana tutorial use.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt4/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
docker-compose up -d
```

----------------------------------------

TITLE: HTTP Success Resetting Basic Roles - Grafana Access Control - JSON
DESCRIPTION: Gives the HTTP/1.1 200 OK response for a reset operation on basic roles. The returned JSON object includes a message confirming the reset has occurred.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_41

LANGUAGE: json
CODE:
```
{
    "message": "Reset performed"
}
```

----------------------------------------

TITLE: Embedding Timezone Support Image using Hugo Shortcode
DESCRIPTION: This Hugo shortcode embeds an image illustrating the new time zone support feature in Grafana Alerting mute timings. It specifies the image source path (`/media/docs/alerting/timezone-support.png`), maximum display width (`600px`), and a caption (`Time zone support`). This shortcode is likely used within Grafana's documentation build process (Hugo).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-1.md#2025-04-23_snippet_0

LANGUAGE: hugo
CODE:
```
{{< figure src="/media/docs/alerting/timezone-support.png" max-width="600px" caption="Time zone support" >}}
```

----------------------------------------

TITLE: Illustrating Unsupported Incomplete Data Format for Grafana Table (CSV)
DESCRIPTION: This CSV snippet demonstrates an incomplete dataset where some rows lack data for all columns (e.g., the 'gap1, gap2' row). The Grafana Table visualization requires a complete column-row structure and will not display data with such gaps.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/table/index.md#2025-04-23_snippet_1

LANGUAGE: csv
CODE:
```
```csv
Column1, Column2, Column3
value1 , value2 , value3
gap1   , gap2
value4 , value5 , value6
```
```

----------------------------------------

TITLE: Querying Annotations with Epoch Time in SQL for Grafana
DESCRIPTION: SQL query example for fetching Grafana annotations where the time column (`epoch_time`) stores epoch values. It selects the epoch time as `time`, a metric as `text`, and concatenates two metrics for `tags`. The `$__unixEpochFilter` macro is used to filter data based on the Grafana dashboard's time range. Requires a table `public.test_data` with `epoch_time`, `metric1`, and `metric2` columns.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_15

LANGUAGE: sql
CODE:
```
SELECT
  epoch_time as time,
  metric1 as text,
  concat_ws(', ', metric1::text, metric2::text) as tags
FROM
  public.test_data
WHERE
  $__unixEpochFilter(epoch_time)
```

----------------------------------------

TITLE: Updating Organization Name - HTTP
DESCRIPTION: This HTTP PUT request updates the organization's name with a JSON payload. It must include a Bearer token and proper permissions (orgs:write). Used to change organization metadata.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_10

LANGUAGE: http
CODE:
```
PUT /api/org HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  "name":"Main Org."\n}
```

----------------------------------------

TITLE: Basic JSX Example with data-testid Attribute
DESCRIPTION: A simple JSX example showing how to add the data-testid attribute to an input field for E2E testing identification.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<input data-testid="Username input field" className="gf-form-input login-form-input" type="text" />
```

----------------------------------------

TITLE: Setting HTTP Protocol to HTTPS - JSON
DESCRIPTION: Sets the service protocol to 'https' within the JSON configuration file. Renderer v3.11.0 or later is required. Default is 'http'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_14

LANGUAGE: json
CODE:
```
{
  "service": {
    "protocol": "https"
  }
}
```

----------------------------------------

TITLE: Importing Storybook Blocks and Component Modules in TypeScript
DESCRIPTION: This code snippet imports essential modules from Storybook (@storybook/blocks) as well as the RefreshPicker component and its related story definitions. These imports are foundational for rendering and documenting the component in Storybook. Dependencies include @storybook/blocks and the project's local RefreshPicker and story files; there are no parameters or outputs as this code only facilitates module availability.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/RefreshPicker/RefreshPicker.mdx#2025-04-23_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { Meta, Canvas, ArgTypes } from '@storybook/blocks';
import { RefreshPicker } from './RefreshPicker';
import * as RefreshPickerStories from './RefreshPicker.story';
```

----------------------------------------

TITLE: Stopping the Grafana Docker Container - Bash
DESCRIPTION: Demonstrates listing running Docker containers and stopping the Grafana container by name. These commands require Docker installed and the Grafana container already running. Outputs the list of containers and stops the specified one; only containers running with the specified name or ID will be affected.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
# The `docker ps` command shows the processes running in Docker
docker ps

# This will display a list of containers that looks like the following:
CONTAINER ID   IMAGE  COMMAND   CREATED  STATUS   PORTS    NAMES
cd48d3994968   grafana/grafana-enterprise   "/run.sh"   8 seconds ago   Up 7 seconds   0.0.0.0:3000->3000/tcp   grafana

# To stop the grafana container run the command
# docker stop CONTAINER-ID or use
# docker stop NAME, which is `grafana` as previously defined
docker stop grafana
```

----------------------------------------

TITLE: Installing Dependencies with Homebrew on macOS
DESCRIPTION: Commands for installing required development dependencies using Homebrew package manager on macOS
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
brew install git
brew install go
brew install node@22
```

----------------------------------------

TITLE: Application Insights Legend Pattern Example
DESCRIPTION: Example of how to format server values in Application Insights legend aliases.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/azuremonitor/query_help.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
server: {{groupbyvalue}}
```

----------------------------------------

TITLE: SQL Stored Procedure for Multi-Series Time Data in Grafana
DESCRIPTION: This stored procedure combines multiple queries to return data for a multi-series graph in Grafana. It uses epoch time parameters and complex time calculations to group and format the data.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_12

LANGUAGE: sql
CODE:
```
CREATE PROCEDURE sp_test_epoch(
  @from int,
  @to 	int
)	AS
BEGIN
  SELECT
    cast(cast(DATEDIFF(second, {d '1970-01-01'}, DATEADD(second, DATEDIFF(second,GETDATE(),GETUTCDATE()), time))/600 as int)*600 as int) as time,
    measurement + ' - value one' as metric,
    avg(valueOne) as value
  FROM
    metric_values
  WHERE
    time >= DATEADD(s, @from, '1970-01-01') AND time <= DATEADD(s, @to, '1970-01-01')
  GROUP BY
    cast(cast(DATEDIFF(second, {d '1970-01-01'}, DATEADD(second, DATEDIFF(second,GETDATE(),GETUTCDATE()), time))/600 as int)*600 as int),
    measurement
  UNION ALL
  SELECT
    cast(cast(DATEDIFF(second, {d '1970-01-01'}, DATEADD(second, DATEDIFF(second,GETDATE(),GETUTCDATE()), time))/600 as int)*600 as int) as time,
    measurement + ' - value two' as metric,
    avg(valueTwo) as value
  FROM
    metric_values
  WHERE
    time >= DATEADD(s, @from, '1970-01-01') AND time <= DATEADD(s, @to, '1970-01-01')
  GROUP BY
    cast(cast(DATEDIFF(second, {d '1970-01-01'}, DATEADD(second, DATEDIFF(second,GETDATE(),GETUTCDATE()), time))/600 as int)*600 as int),
    measurement
  ORDER BY 1
END
```

----------------------------------------

TITLE: Handling wire.Bind Function Argument Error in Go
DESCRIPTION: This snippet demonstrates a sample error message generated when the wire.Bind function from the Google Wire dependency injection library is invoked with an incorrect number of arguments. The error shows that the function was called with only one argument (*Fooer), while it requires two interfaces. Developers using Wire must ensure both arguments are provided to avoid this compile-time error. Inputs are the function arguments, and the output is a diagnostic error to aid in debugging.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/InterfaceBindingNotEnoughArgs/want/wire_errs.txt#2025-04-23_snippet_0

LANGUAGE: Go
CODE:
```
example.com/foo/wire.go:x:y: not enough arguments in call to wire.Bind
	have (*Fooer)
	want (interface{}, interface{})
```

----------------------------------------

TITLE: Enhancing Generated Endpoints
DESCRIPTION: Example of modifying generated endpoints using enhanceEndpoints to customize behavior.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/api/README.md#2025-04-23_snippet_5

LANGUAGE: jsx
CODE:
```
export const dashboardsAPI = generatedApi.enhanceEndpoints({
  endpoints: {
    // Need to mutate the generated query to set the Content-Type header correctly
    updateDashboard: (endpointDefinition) => {
      const originalQuery = endpointDefinition.query;
      if (originalQuery) {
        endpointDefinition.query = (requestOptions) => ({
          ...originalQuery(requestOptions),
          headers: {
            'Content-Type': 'application/merge-patch+json',
          },
        });
      }
    },
  },
});
```

----------------------------------------

TITLE: Representing Folder Sub-Resource Permissions in OpenFGA
DESCRIPTION: This snippet demonstrates granting a user ('user:1') access to specific types of sub-resources within a folder. It uses the 'resource_read' relation on the folder object (identified by UID) and includes a context object specifying the allowed subresource types (e.g., dashboards, alerting rules).
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_2

LANGUAGE: text
CODE:
```
{ “user”: “user:1”, relation: “resource_read”, object:”folder:<uid>”}` with additional context. This context holds all GroupResources in a list e.g. `{ "subresources": ["dashboard.grafana.app/dashboards", "alerting.grafana.app/rules" ] }
```

----------------------------------------

TITLE: Configuring Grafana for Self-Instrumentation
DESCRIPTION: INI configuration that needs to be added to Grafana to enable logging to file in JSON format, frontend logging, and OpenTelemetry tracing with Jaeger. This configuration is necessary for the self-instrumentation tools to collect data.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/self-instrumentation/readme.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[log.file]
format = json

[log.frontend]
enabled = true
custom_endpoint=http://localhost:12347/collect

[tracing.opentelemetry.jaeger]
address = http://localhost:14268/api/traces
```

----------------------------------------

TITLE: Sample Log Line Format
DESCRIPTION: Example of a log line format that matches the pattern used in the Loki query. Shows timestamp, log level, HTTP method, URL, status code, and request duration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-with-logs/index.md#2025-04-23_snippet_5

LANGUAGE: log
CODE:
```
2023-04-22T02:49:32.562825+00:00 level=info method=GET url=test.com status=200 duration=171ms
```

----------------------------------------

TITLE: Defining Relative Time Overrides in Grafana Query Options
DESCRIPTION: Provides examples of string values for the 'Relative time' query option in Grafana panels. These strings allow overriding the dashboard's time picker with specific relative time ranges like 'Last 5 minutes' or 'This week so far'. This feature enables displaying metrics from different time periods on the same dashboard but only functions when the dashboard's time range is relative.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/_index.md#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
| Example          | Relative time field |
| ---------------- | ------------------- |
| Last 5 minutes   | `now-5m`            |
| The day so far   | `now/d`             |
| Last 5 days      | `now-5d/d`          |
| This week so far | `now/w`             |
| Last 2 years     | `now-2y/y`          |
```

----------------------------------------

TITLE: Installing @grafana/prometheus with npm (Shell)
DESCRIPTION: This command uses the npm package manager to download and install the `@grafana/prometheus` library and add it as a dependency to the current project's `package.json` file. It requires npm (Node Package Manager), typically installed with Node.js, to be present on the system.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-prometheus/README.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
npm install @grafana/prometheus
```

----------------------------------------

TITLE: Using the InfoBox Component in React/TypeScript
DESCRIPTION: This React/TypeScript snippet demonstrates the usage of the `InfoBox` component. It shows how to instantiate the component with properties like `title` for the box title, `severity` to control the visual style ('info' in this case), an optional `url` linking to documentation, and an `onDismiss` callback function (`dissmisInfoBox`) to handle user dismissal.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InfoBox/InfoBox.mdx#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<InfoBox title="Example info box" severity="info" url="http://url.to.some.documentation" onDismiss={dissmisInfoBox} />
```

----------------------------------------

TITLE: LDAPS Connection Configuration
DESCRIPTION: Configuration settings for LDAPS (LDAP over SSL) connection
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/openldap/README.md#2025-04-23_snippet_4

LANGUAGE: ini
CODE:
```
port = 636
use_ssl = true
start_tls = false
```

----------------------------------------

TITLE: Disabling Alerting Upgrade Dry-Run in Grafana Configuration (TOML)
DESCRIPTION: This TOML configuration snippet shows how to disable the automatic dry-run of the legacy alerting to Grafana Alerting upgrade feature on Grafana startup. By setting `alertingUpgradeDryrunOnStart` to `false` under the `[feature_toggles]` section in the Grafana configuration file, the dry-run process that normally occurs on each start-up is prevented. This is relevant for users preparing for the removal of legacy alerting in v11.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v10.4/index.md#2025-04-23_snippet_0

LANGUAGE: toml
CODE:
```
[feature_toggles]
alertingUpgradeDryrunOnStart=false
```

----------------------------------------

TITLE: Setting Annotation Cleanup and Tag Constraints - Grafana INI
DESCRIPTION: Documents `[annotations]` section. `cleanupjob_batchsize` configures the batch size for annotation cleanup jobs; `tags_length` limits the number of tags per annotation (between 500 and 4096, default 500, higher values may decrease performance). Used for dashboard, API, and alert annotations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_24

LANGUAGE: ini
CODE:
```
[annotations]
# Batch size for cleanup jobs
cleanupjob_batchsize = 100
# Max number of tags allowed per annotation; range 500-4096
tags_length = 500

```

----------------------------------------

TITLE: Creating a Chained Variable Query in InfluxDB
DESCRIPTION: Query that filters hostname tag values based on a previously selected region variable, demonstrating chained variables functionality.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/template-variables/index.md#2025-04-23_snippet_1

LANGUAGE: sql
CODE:
```
SHOW TAG VALUES WITH KEY = "hostname"  WHERE region = '$region'
```

----------------------------------------

TITLE: Using ClickOutsideWrapper Component in JSX
DESCRIPTION: This JSX snippet demonstrates the basic usage of the `ClickOutsideWrapper` component. It wraps a simple `div` element. The `onClick` prop is assigned a function that logs 'Clicked outside' to the console whenever a click event occurs outside the boundaries of the wrapped `div`. This requires React and the imported `ClickOutsideWrapper` component.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ClickOutsideWrapper/ClickOutsideWrapper.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<ClickOutsideWrapper onClick={() => console.log('Clicked outside')}>
  <div style={{ width: '300px' }}>Container</div>
</ClickOutsideWrapper>
```

----------------------------------------

TITLE: Creating a Service Account in Grafana
DESCRIPTION: This command creates a new Service Account named 'test' with Admin role in the current organization context.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/create-api-tokens-for-org.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
curl -X POST -H "Content-Type: application/json" -d '{"name":"test", "role": "Admin"}' http://admin:admin@localhost:3000/api/serviceaccounts
```

----------------------------------------

TITLE: Displaying User Name in Go Template
DESCRIPTION: This Go template snippet inserts the value of the `.Name` variable from the template data into the email body. It's used to personalize the welcome message greeting for the recipient. Requires the `.Name` variable to be present in the data passed to the template execution.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/welcome_on_signup.txt#2025-04-23_snippet_1

LANGUAGE: go-template
CODE:
```
{{.Name}}
```

----------------------------------------

TITLE: Defining Empty Time Range Value Object in JavaScript
DESCRIPTION: This snippet demonstrates the structure of the value returned by the TimeRangeInput component when the input is cleared, using the dateTime(null) method to represent an empty state for both 'from' and 'to' fields. The example is useful for understanding the required object shape and handling empty input scenarios in forms utilizing Grafana's time range picker. Dependencies include the dateTime function from Grafana's data libraries, and the expected output is an object representing an empty time range.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/DateTimePickers/TimeRangeInput.mdx#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
{\n  from: dateTime(null),\n  to: dateTime(null),\n  raw: {\n    from: dateTime(null),\n    to: dateTime(null),\n  },\n};
```

----------------------------------------

TITLE: ValidationError Data Structure Definition - Go
DESCRIPTION: Simple error structure containing a message field for validation errors. Used for returning validation-related error messages in the API.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_51

LANGUAGE: go
CODE:
```
type ValidationError struct {
    Msg string `json:"msg"`
}
```

----------------------------------------

TITLE: Configuring Grafana Aggregator in custom.ini (INI)
DESCRIPTION: This INI configuration snippet modifies Grafana's settings in `custom.ini`. It enables `kubectl` access (`grafanaAPIServerEnsureKubectlAccess`), disables experimental APIs (`grafanaAPIServerWithExperimentalAPIs`) to prevent conflicts with the test service, explicitly enables the `kubernetesAggregator` feature toggle, and configures the `[grafana-apiserver]` section with paths to the client certificate and key files needed for the aggregator to securely communicate with backend services. These settings are essential for local testing.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/aggregator/README.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[feature_toggles]
grafanaAPIServerEnsureKubectlAccess = true
; disable the experimental APIs flag to disable bundling of the example service locally
grafanaAPIServerWithExperimentalAPIs = false
kubernetesAggregator = true

[grafana-apiserver]
proxy_client_cert_file = ./data/grafana-aggregator/client.crt
proxy_client_key_file = ./data/grafana-aggregator/client.key
```

----------------------------------------

TITLE: Defining Basic Provider in Go
DESCRIPTION: Demonstrates how to define a simple provider function that returns a Foo struct.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
package foobarbaz

type Foo struct {
    X int
}

// ProvideFoo returns a Foo.
func ProvideFoo() Foo {
    return Foo{X: 42}
}
```

----------------------------------------

TITLE: Alert Management Commands
DESCRIPTION: Various commands for managing alerts including setup, Slack configuration, and provisioning
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha_test/README.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
$ ./alerts.sh setup
$ ./alerts.sh slack -d
$ ./alerts.sh slack -u https://hooks.slack.com/services/...
$ ./alerts.sh slack -u https://hooks.slack.com/services/... -r -e 10m
$ ./alerts.sh provision
$ ./alerts.sh provision -a 10
$ ./alerts.sh provision -a 10 -c 100
$ ./alerts.sh pause
$ ./alerts.sh unpause
```

----------------------------------------

TITLE: Changing Directory to Project Folder - Bash
DESCRIPTION: This snippet demonstrates changing the current shell directory to the repo directory just cloned. It assumes the previous 'git clone' operation was successful and the 'tutorial-environment' folder exists. Input: Existing directory name. Output: Updates the shell's current working directory, which is required for executing subsequent Docker and docker-compose commands on the project files.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
cd tutorial-environment

```

----------------------------------------

TITLE: Defining an Editor Custom Role for Alert Rules in a Specific Folder via Grafana RBAC API
DESCRIPTION: This JSON payload defines a custom role (`custom:alert_rules_updater`) for the Grafana RBAC API (`PUT access-control/roles`). It grants comprehensive write access (read, write, create actions) to alert rules within a specific folder (`folders:uid:UID_F`). It also includes permissions (`alert.notifications.receivers:list`, `alert.notifications.time-intervals:read`) required for simplified notification routing, which should be removed if not using that feature.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/access-roles/index.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
PUT access-control/roles
{
	"name": "custom:alert_rules_updater",
	"displayName": "Alert rules editor in folder F",
	"description": "Edit access to rules in folder F that use DS1 and DS2",
	"permissions": [
    	{
        	"action": "alert.rules:read",
        	"scope": "folders:uid:UID_F"
    	},
    	{
        	"action": "alert.rules:read", // Note: Duplicate read permission in original example
        	"scope": "folders:uid:UID_F"
    	},
    	{
        	"action": "alert.rules:write",
        	"scope": "folders:uid:UID_F"
    	},
    	{
        	"action": "alert.rules:create",
        	"scope": "folders:uid:UID_F"
    	},
    	{
        	"action": "alert.notifications.receivers:list",
    	},
{
        	"action": "alert.notifications.time-intervals:read",
    	},
	]
}
```

----------------------------------------

TITLE: Including Shared Introduction for Grafana Upgrade - Markdown
DESCRIPTION: This snippet uses a Hugo shortcode to insert shared introductory documentation for upgrading Grafana. It requires the Hugo static site generator and access to the configured documentation partial templates. The key parameters are 'lookup', specifying the partial, 'source', designating the source application, and 'version', indicating the target Grafana version. The output is dynamically rendered Markdown documentation content. Limitations include requiring the template infrastructure to be present and correct for rendering.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v10.3/index.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
{{< docs/shared lookup=\"upgrade/intro.md\" source=\"grafana\" version=\"<GRAFANA VERSION>\" >}}
```

----------------------------------------

TITLE: Re-encrypting Database Secrets via Grafana CLI (Command Line Invocation - shell)
DESCRIPTION: This command allows administrators to re-encrypt all existing secrets in the Grafana database using the configured Google Cloud KMS key. The grafana cli admin secrets-migration re-encrypt command must be run from the root directory of Grafana Enterprise and will migrate any secrets encrypted with older keys to use the new provider. No parameters are required beyond appropriate grafana.ini configuration, and the operation may take several minutes depending on the database size.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-google-cloud-kms/index.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
grafana cli admin secrets-migration re-encrypt
```

----------------------------------------

TITLE: Generating Password Reset Email Template - Golang Templates - Text
DESCRIPTION: This snippet constructs an email template with placeholder expressions compatible with the Go language's text/template package. It requires variables such as .Subject, .Name, .EmailCodeValidHours, .AppUrl, and .Code to be supplied at render time. The template generates a subject and email body that provides a personalized reset link, used within the password reset process; expected inputs are user-specific data injected via server-side code, and the output is a fully formed email with a functional reset URL. No constraints are imposed by the template itself, but the containing application must ensure timely and accurate variable substitution.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/reset_password.txt#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
[[HiddenSubject .Subject "Reset your Grafana password - [[.Name]]"]]

Hi [[.Name]],

Copy and paste the following link directly in your browser to reset your password within [[.EmailCodeValidHours]] hours.
[[.AppUrl]]user/password/reset?code=[[.Code]]
```

----------------------------------------

TITLE: Data Source Query Response in JSON
DESCRIPTION: Example response for a successful query to the Test data source, returning time series data in JSON format.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_21

LANGUAGE: json
CODE:
```
{
  "results": {
    "A": {
      "frames": [
        {
          "schema": {
            "refId": "A",
            "fields": [
              {
                "name": "time",
                "type": "time",
                "typeInfo": {
                  "frame": "time.Time"
                }
              },
              {
                "name": "A-series",
                "type": "number",
                "typeInfo": {
                  "frame": "int64",
                  "nullable": true
                }
              }
            ]
          },
          "data": {
            "values": [
              [1644488152084, 1644488212084, 1644488272084, 1644488332084, 1644488392084, 1644488452084],
              [1, 20, 90, 30, 5, 0]
            ]
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Installing hubot-grafana Plugin using npm (Bash)
DESCRIPTION: This command uses the Node Package Manager (npm) to download and install the `hubot-grafana` plugin within the Hubot project's directory. The `--save` flag ensures that the plugin is added to the project's dependencies in the `package.json` file. This step is necessary before the plugin can be activated in Hubot.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/integrate-hubot/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm install hubot-grafana --save
```

----------------------------------------

TITLE: Integrating DatePickerWithInput Component in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to import, initialize, and use the DatePickerWithInput component from @grafana/ui in a React TypeScript application. It uses the useState hook to manage the selected date and attaches handlers to update the state when a new date is picked. Required dependencies are React and @grafana/ui. The key input props are width (specifies input width in rem), value (the current selected date, as Date or string), and onChange (callback fired when the date changes). The component returns a rendered DatePickerWithInput tied to local state; it expects valid Date or string values and updates accordingly. Limitations include ensuring proper imports and that the value and setDate types align with expectations.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/DateTimePickers/DatePickerWithInput/DatePickerWithInput.mdx#2025-04-23_snippet_0

LANGUAGE: TSX
CODE:
```
import { useState } from 'react';
import { DatePickerWithInput } from '@grafana/ui';

const [date, setDate] = useState<Date | string>(new Date());
return <DatePickerWithInput width={40} value={date} onChange={(newDate) => setDate(newDate)} />;
```

----------------------------------------

TITLE: Constructing a Grafana Silence Form URL with Pre-filled Parameters
DESCRIPTION: Provides an example URL demonstrating how to link to the Grafana silence creation form with pre-filled label matchers and a comment. It uses the `matcher` query parameter (format: `[label][operator][value]`, operators: `=`, `!=`, `=~`, `!~`) and the `comment` query parameter. Multiple `matcher` parameters can be specified. An optional `alertmanager` query parameter can be added to target an external Alertmanager.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/create-silence.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
https://mygrafana/alerting/silence/new?matcher=severity%3Dcritical&matcher=cluster!~europe-*&comment=Silence%20critical%20EU%20alert
```

----------------------------------------

TITLE: Embedding Grafana Play Dashboard Link using Hugo Shortcode
DESCRIPTION: This Hugo shortcode is used within the Grafana documentation framework to embed an interactive link or preview related to a Grafana Play dashboard. It specifically links to a dashboard demonstrating 'The Four Golden Signals' observability strategy. The `title` parameter provides the display text, and the `url` parameter points to the specific dashboard on play.grafana.org.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/best-practices/index.md#2025-04-23_snippet_0

LANGUAGE: hugo
CODE:
```
{{< docs/play title="The Four Golden Signals" url="https://play.grafana.org/d/000000109/" >}}
```

----------------------------------------

TITLE: Including Shared Tooltip Options Documentation (Hugo Shortcode)
DESCRIPTION: Uses a Hugo shortcode (`docs/shared`) to include a common documentation snippet describing tooltip configuration options for Grafana visualizations. The `leveloffset` parameter adjusts heading levels for proper nesting.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_8

LANGUAGE: markdown
CODE:
```
{{< docs/shared lookup="visualizations/tooltip-options-1.md" source="grafana" version="<GRAFANA_VERSION>" leveloffset="+1" >}}
```

----------------------------------------

TITLE: Legacy PanelChrome Loading Indicator Implementation (Pre-v9.4.0) in React
DESCRIPTION: Illustrates the deprecated method for displaying a loading indicator in `PanelChrome` versions prior to Grafana 9.4.0. This approach involved passing a `PanelChrome.LoadingIndicator` component within an array to the `leftItems` prop.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_5

LANGUAGE: tsx
CODE:
```
<PanelChrome
  title="My awesome panel title"
  leftItems={[<PanelChrome.LoadingIndicator loading={isRefreshing} onCancel={onCancelQuery} key="loading-indicator" />]}
  width={400}
  height={200}
>
  {(innerwidth, innerheight) => {
    return (
      <div
        style={{
          width: innerwidth,
          height: innerheight,
          background: 'white',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        New panel with old API
      </div>
    );
  }}
</PanelChrome>
```

----------------------------------------

TITLE: Retrieving All Folders with HTTP GET Request
DESCRIPTION: Example HTTP GET request to retrieve all folders the authenticated user has permission to view. The request includes authorization via Bearer token and can be limited by the 'limit' query parameter.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/folders?limit=10 HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Querying Electricity Power Data with Flux for Grafana Alerts
DESCRIPTION: This Flux query fetches electricity data from the 'HillValley' bucket, specifically power readings from a lightning strike at the clocktower. It filters by measurement, location, source, and field before aggregating and yielding the mean values.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_3

LANGUAGE: flux
CODE:
```
from(bucket: "HillValley")
|> range(start: v.timeRangeStart, stop: v.timeRangeStop)
|> filter(fn: (r) => r["_measurement"] == "ElectricityData")
|> filter(fn: (r) => r["Location"] == "clocktower")
|> filter(fn: (r) => r["Source"] == "lightning")
|> filter(fn: (r) => r["_field"] == "power")
|> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
|> yield(name: "mean")
```

----------------------------------------

TITLE: Embedding YouTube Video in Hugo
DESCRIPTION: This Hugo shortcode embeds a YouTube video into the page using the specified video ID ('RGiktzfhRd0'). It relies on Hugo's built-in or custom 'youtube' shortcode definition to render the video player. The purpose is to provide a visual overview of the Grafana v11.5 release.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-5.md#2025-04-23_snippet_0

LANGUAGE: hugo
CODE:
```
{{< youtube id="RGiktzfhRd0" >}}
```

----------------------------------------

TITLE: Rendering Basic TextArea Example in JSX
DESCRIPTION: This code demonstrates how to render a basic example of the TextArea component using Storybook's Canvas.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/TextArea/TextArea.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<Canvas of={TextAreaStories.Basic} />
```

----------------------------------------

TITLE: Variable Syntax Example with $ Format in PromQL
DESCRIPTION: Example of using the $varname syntax in Prometheus queries, which is easier to read but doesn't allow using variables in the middle of a word.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/template-variables/index.md#2025-04-23_snippet_5

LANGUAGE: PromQL
CODE:
```
rate(http_requests_total{job=~"$job"}[$_rate_interval])
```

----------------------------------------

TITLE: Displaying Tag Component Props in Storybook
DESCRIPTION: This snippet uses the Storybook ArgTypes component to automatically generate documentation for the props of the Tag component.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tags/Tag.mdx#2025-04-23_snippet_3

LANGUAGE: JSX
CODE:
```
<ArgTypes of={Tag} />
```

----------------------------------------

TITLE: Adding Shared Upgrade Task Documentation - Markdown
DESCRIPTION: This snippet provides a modular inclusion of common upgrade task instructions through a Hugo shortcode. Prerequisites include having a partial named 'upgrade-common-tasks.md' and the correct provision of the 'source' and 'version' variables. Its key functionality is to streamline upgrade instruction consistency. The output integrates task documentation into the page, with substitution happening during site compilation. Dependencies are the Hugo generator and properly maintained docs partials.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v10.3/index.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
{{< docs/shared lookup=\"upgrade/upgrade-common-tasks.md\" source=\"grafana\" version=\"<GRAFANA VERSION>\" >}}
```

----------------------------------------

TITLE: Cloning Tutorial Environment Repository using Git
DESCRIPTION: This command clones the 'tutorial-environment' repository from GitHub using the Git command-line tool. This repository contains the configuration files and resources needed to follow the Grafana Alerting Part 2 tutorial. Requires Git to be installed on the system.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt2/index.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
git clone https://github.com/grafana/tutorial-environment.git
```

----------------------------------------

TITLE: License Token Refresh Response Example - Grafana Licensing API - HTTP
DESCRIPTION: This snippet presents the typical HTTP response to a token renewal request, showing the detailed JSON payload for debugging. The status code is 200 if successful, and the response format may change over time.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/licensing.md#2025-04-23_snippet_5

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 357\n\n{\n  "jti":"2",\n  "iss":"https://grafana.com",\n  "sub":"https://play.grafana.org/"\n  "lid":"1",\n  "included_users":15,\n  "lic_exp_warn_days":30,\n  "tok_exp_warn_days":2,\n  "update_days":1,\n  "prod":["grafana-enterprise"],\n  "company":"Grafana Labs"\n}\n
```

----------------------------------------

TITLE: API Endpoint Path for Evaluation
DESCRIPTION: API endpoint path used by AlertingQueryRunner for evaluation requests.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/alerting/unified/TESTING.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
api/v1/eval
```

----------------------------------------

TITLE: Creating Grafana Systemd Service File using Shell
DESCRIPTION: Creates an empty systemd unit file for the Grafana server at `/etc/systemd/system/grafana-server.service` using the `touch` command. Requires `sudo` privileges. This file will be populated with service definition details for managing the Grafana server process via systemd when installed from binaries.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_8

LANGUAGE: shell
CODE:
```
sudo touch /etc/systemd/system/grafana-server.service
```

----------------------------------------

TITLE: Updating Contact Point - Grafana REST HTTP Endpoint - http
DESCRIPTION: Specifies the HTTP PUT route used for updating an existing contact point resource in Grafana provisioning. The endpoint requires a valid contact point UID as a path parameter and accepts a request body with the updated contact point definition. Requires: `PUT /api/v1/provisioning/contact-points/:uid` endpoint, UID (path), request body, and optionally the `X-Disable-Provenance` header to enable UI editing. Outputs an Ack response on acceptance or ValidationError on a bad request.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_36

LANGUAGE: http
CODE:
```
PUT /api/v1/provisioning/contact-points/:uid
```

----------------------------------------

TITLE: Fetching Loki Label Values with datasource.languageProvider - TypeScript
DESCRIPTION: Illustrates how to obtain possible values for a specific Loki label using fetchLabelValues. The API call can be customized with a stream selector and a time range, returning a Promise of string arrays. Example scenarios demonstrate usage with and without selector filtering, employing standard async/await error handling and supporting secure, cached requests.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/loki/docs/app_plugin_developer_documentation.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
/**
 * Fetch label values
 *
 * This asynchronous function fetches values associated with a specified label name.
 * It returns a promise that resolves to an array of strings containing the label values.
 *
 * @param labelName - The name of the label for which you want to retrieve values.
 * @param options - (Optional) An object containing additional options.
 * @param options.streamSelector - (Optional) The stream selector to filter label values. If not provided, all label values are fetched.
 * @param options.timeRange - (Optional) The time range for which you want to retrieve label values. If not provided, the default time range is used.
 * @returns A promise containing an array of label values.
 * @throws An error if the fetch operation fails.
 */
async function fetchLabelValues(
  labelName: string,
  options?: { streamSelector?: string; timeRange?: TimeRange }
): Promise<string[]>;

/**
 * Example usage without stream selector:
 */

const labelName = 'job';
try {
  const values = await fetchLabelValues(labelName);
  console.log(values);
} catch (error) {
  console.error(`Error fetching label values: ${error.message}`);
}

/**
 * Example usage with stream selector:
 */

const labelName = 'job';
const streamSelector = '{app="grafana"}';
try {
  const values = await fetchLabelValues(labelName, { streamSelector });
  console.log(values);
} catch (error) {
  console.error(`Error fetching label values: ${error.message}`);
}

```

----------------------------------------

TITLE: Getting a Notification Template Group via Grafana Provisioning API (HTTP Request)
DESCRIPTION: Makes a GET request to `/api/v1/provisioning/templates/:name` to retrieve a specific notification template group identified by its 'name' in the path. Requires the template group 'name' as a mandatory path parameter.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_28

LANGUAGE: http
CODE:
```
GET /api/v1/provisioning/templates/:name
```

----------------------------------------

TITLE: Configuring Storybook and Importing InlineToast - TypeScript
DESCRIPTION: This snippet imports the Meta and ArgTypes components from the Storybook Blocks library, as well as the InlineToast component itself. These imports are prerequisites for configuring the Storybook MDX documentation and exposing the target component. Required dependencies: '@storybook/blocks' for Storybook components and './InlineToast' for the source component. No parameters or outputs are defined directly in this snippet, and it is intended to be used within a Storybook MDX documentation file.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InlineToast/InlineToast.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Meta, ArgTypes } from '@storybook/blocks';
import { InlineToast } from './InlineToast';
```

----------------------------------------

TITLE: CPU Usage Metrics in InfluxDB Line Protocol
DESCRIPTION: CPU usage metrics data showing various measurements for different CPU cores including system, user, idle, nice, irq, iowait, steal, guest usage percentages. Each line represents metrics for a different CPU core with timestamp in nanoseconds precision.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/same_metrics_different_labels_same_time.txt#2025-04-23_snippet_0

LANGUAGE: influxdb
CODE:
```
cpu,cpu=cpu0,host=MacBook-Pro-Alexander.local usage_system=6.000000000005457,usage_idle=82.00000000012005,usage_nice=0,usage_irq=0,usage_steal=0,usage_guest=0,usage_guest_nice=0,usage_user=12.000000000033651,usage_iowait=0,usage_softirq=0 1616403090000000000
cpu,cpu=cpu1,host=MacBook-Pro-Alexander.local usage_user=0,usage_irq=0,usage_softirq=0,usage_steal=0,usage_guest_nice=0,usage_system=0,usage_idle=100,usage_nice=0,usage_iowait=0,usage_guest=0 1616403090000000000
cpu,cpu=cpu2,host=MacBook-Pro-Alexander.local usage_system=4.901960784315911,usage_idle=88.23529411773097,usage_iowait=0,usage_guest=0,usage_user=6.862745098042275,usage_nice=0,usage_irq=0,usage_softirq=0,usage_steal=0,usage_guest_nice=0 1616403090000000000
cpu,cpu=cpu3,host=MacBook-Pro-Alexander.local usage_user=0,usage_iowait=0,usage_steal=0,usage_guest_nice=0,usage_softirq=0,usage_guest=0,usage_system=0,usage_idle=100,usage_nice=0,usage_irq=0 1616403090000000000
cpu,cpu=cpu4,host=MacBook-Pro-Alexander.local usage_idle=91.91919191902859,usage_nice=0,usage_iowait=0,usage_steal=0,usage_guest=0,usage_guest_nice=0,usage_system=3.0303030303011163,usage_irq=0,usage_softirq=0,usage_user=5.0505050504922915 1616403090000000000
cpu,cpu=cpu5,host=MacBook-Pro-Alexander.local usage_softirq=0,usage_guest_nice=0,usage_idle=100,usage_nice=0,usage_iowait=0,usage_steal=0,usage_guest=0,usage_user=0,usage_system=0,usage_irq=0 1616403090000000000
cpu,cpu=cpu6,host=MacBook-Pro-Alexander.local usage_idle=93.0000000000291,usage_irq=0,usage_softirq=0,usage_steal=0,usage_guest_nice=0,usage_user=5.000000000006821,usage_system=2.000000000001023,usage_guest=0,usage_nice=0,usage_iowait=0 1616403090000000000
cpu,cpu=cpu7,host=MacBook-Pro-Alexander.local usage_guest_nice=0,usage_user=0,usage_system=0,usage_idle=100,usage_iowait=0,usage_guest=0,usage_nice=0,usage_irq=0,usage_softirq=0,usage_steal=0 1616403090000000000
cpu,cpu=cpu8,host=MacBook-Pro-Alexander.local usage_system=1.9801980198033176,usage_idle=95.04950495055924,usage_softirq=0,usage_steal=0,usage_guest_nice=0,usage_user=2.970297029704976,usage_nice=0,usage_iowait=0,usage_irq=0,usage_guest=0 1616403090000000000
cpu,cpu=cpu9,host=MacBook-Pro-Alexander.local usage_guest=0,usage_user=0,usage_system=0,usage_idle=100,usage_nice=0,usage_iowait=0,usage_softirq=0,usage_irq=0,usage_steal=0,usage_guest_nice=0 1616403090000000000
cpu,cpu=cpu10,host=MacBook-Pro-Alexander.local usage_system=0,usage_idle=100,usage_nice=0,usage_guest=0,usage_guest_nice=0,usage_user=0,usage_iowait=0,usage_irq=0,usage_softirq=0,usage_steal=0 1616403090000000000
cpu,cpu=cpu11,host=MacBook-Pro-Alexander.local usage_guest_nice=0,usage_user=0,usage_idle=100,usage_nice=0,usage_softirq=0,usage_guest=0,usage_system=0,usage_iowait=0,usage_irq=0,usage_steal=0 1616403090000000000
cpu,cpu=cpu-total,host=MacBook-Pro-Alexander.local usage_nice=0,usage_iowait=0,usage_irq=0,usage_idle=95.8368026645606,usage_system=1.4987510408004405,usage_softirq=0,usage_steal=0,usage_guest=0,usage_guest_nice=0,usage_user=2.6644462947563388 1616403090000000000
```

----------------------------------------

TITLE: Setting Viewport Width - Bash
DESCRIPTION: Sets RENDERING_VIEWPORT_WIDTH for default browser viewport width during rendering. Value is in pixels. Applies only when width not set in request. Requires v3.9.0+.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_39

LANGUAGE: bash
CODE:
```
# Available from v3.9.0+
RENDERING_VIEWPORT_WIDTH=1000
```

----------------------------------------

TITLE: Ignoring HTTPS Errors - JSON
DESCRIPTION: Configures the rendering JSON with ignoresHttpsErrors set to true, instructing the renderer to ignore HTTPS errors on navigation. Suitable only for debugging or non-production environments due to security risks.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_34

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "ignoresHttpsErrors": true
  }
}
```

----------------------------------------

TITLE: Importing Components and Storybook Blocks - JavaScript
DESCRIPTION: This code snippet imports the Meta block from Storybook and the CodeEditor component from the project.
The Meta block is used for configuring stories in Storybook MDX, while the CodeEditor import makes the custom component available for documentation and stories. Both dependencies must be installed and correctly referenced in the project configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Monaco/CodeEditor.mdx#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { Meta } from '@storybook/blocks';
import { CodeEditor } from './CodeEditor';
```

----------------------------------------

TITLE: Protecting User Roles from Auth Scheme Adoption (Grafana Enterprise/Cloud) (Bash)
DESCRIPTION: Configures Grafana Enterprise/Cloud to prevent users with specified roles from having their authentication method automatically changed when a new external provider (like SAML or OAuth) is configured. This is done by setting `protected_roles` under the `[auth.security]` section with a space-separated list of roles (e.g., `server_admins`, `org_admins`). Valid roles are `viewers`, `editors`, `org_admins`, `server_admins`, and `all`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/_index.md#2025-04-23_snippet_7

LANGUAGE: Bash
CODE:
```
[auth.security]
protected_roles = server_admins org_admins
```

----------------------------------------

TITLE: Add Team Member Response Example - JSON
DESCRIPTION: Returns a confirmation message in JSON format upon successful addition of a team member. Indicates that the membership has been created.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_13

LANGUAGE: json
CODE:
```
{\n  \"message\":\"Member added to Team\"\n}
```

----------------------------------------

TITLE: Creating New Contact Point with HTTP POST - HTTP
DESCRIPTION: This HTTP POST request adds a new embedded contact point by sending an EmbeddedContactPoint object in the request body. The 'EmbeddedContactPoint.name' field determines whether it is grouped with an existing contact point. Optionally, the 'X-Disable-Provenance' header can be provided. Successful responses have status 202 with the new contact point, while a 400 indicates validation failure.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_32

LANGUAGE: HTTP
CODE:
```
POST /api/v1/provisioning/contact-points
```

----------------------------------------

TITLE: Linking Grafana UI for Local Development with Yarn - Shell
DESCRIPTION: These commands illustrate how to set up local development with @grafana/ui using Yarn linking. The process requires Yarn and assumes @grafana/ui is present in your local packages. First, change directory to packages/grafana-ui. The first command creates a Yarn link, allowing local packages to share dependencies via a symlink. The second command links this package into your target project. YARN_IGNORE_PATH is set to ensure proper path handling during linking.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/README.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
YARN_IGNORE_PATH=1 yarn link
```

LANGUAGE: shell
CODE:
```
yarn link "@grafana/ui"
```

----------------------------------------

TITLE: Setting Email Subject with HiddenSubject in Go Template
DESCRIPTION: This Go template snippet utilizes a `HiddenSubject` directive or function, likely specific to Grafana's templating system. It aims to set the email subject line, possibly using the value of the `.Subject` variable passed during template execution, or falling back to a default subject string that includes the inviter's name (`[[.InvitedBy]]`).
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/new_user_invite.txt#2025-04-23_snippet_0

LANGUAGE: go-template
CODE:
```
[[HiddenSubject .Subject "[[.InvitedBy]] has invited you to join Grafana"]]
```

----------------------------------------

TITLE: Mute Timings List Response - JSON
DESCRIPTION: An example HTTP 200 OK response representing the list of mute timings. The payload is a JSON array, where each object includes the name, configured weekdays, version, and provenance for each mute timing. These intervals can be used in alert routing to suppress notifications during recurring events, e.g., weekends.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_9

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  {\n    "name": "weekends",\n    "time_intervals": [\n      {\n        "weekdays": [\n          "saturday",\n          "sunday"\n        ]\n      }\n    ],\n    "version": "",\n    "provenance": "file"\n  }\n]
```

----------------------------------------

TITLE: SQL Query for Grafana Annotations with Native Date/Time Type
DESCRIPTION: This query demonstrates how to retrieve annotation data using a time column with a native SQL date/time data type. It combines multiple values into a single tags string.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_9

LANGUAGE: sql
CODE:
```
SELECT
  time,
  measurement as text,
  convert(varchar, valueOne) + ',' + convert(varchar, valueTwo) as tags
FROM
  metric_values
WHERE
  $__timeFilter(time_column)
ORDER BY 1
```

----------------------------------------

TITLE: Listing Owners and Dependency Count - Bash CLI Example
DESCRIPTION: This command lists all owners of Go dependencies as parsed from go.mod along with the number of dependencies each owns. It uses the Modowners 'owners' command with options for aggregating and counting (-a -c). Prerequisites include Go and access to the modowners.go script. Output presents one owner per line with the dependency count.
SOURCE: https://github.com/grafana/grafana/blob/main/scripts/modowners/README.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
go run scripts/modowners/modowners.go owners -a -c go.mod
```

----------------------------------------

TITLE: Setting Up TestMain for Package Tests in Grafana
DESCRIPTION: Implementation of TestMain that uses the Grafana testsuite for proper test setup and teardown. Required for tests that use the database to ensure proper cleanup.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/style-guide.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
package mypkg

import (
	"testing"

	"github.com/grafana/grafana/pkg/tests/testsuite"
)

func TestMain(m *testing.M) {
	testsuite.Run(m)
}
```

----------------------------------------

TITLE: Querying Graphite CPU Metrics for Chained Variables
DESCRIPTION: This theoretical Graphite query would return CPU metrics for selected servers in a multi-level chained variable setup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_4

LANGUAGE: graphite
CODE:
```
apps.$app.$server.cpu.*
```

----------------------------------------

TITLE: Including What's New Content Section in Hugo
DESCRIPTION: This Hugo shortcode likely includes or renders content related to 'what's new' features, potentially pulling information dynamically or from another template/file associated with 'docs/whats-new'. It structures the release notes page by delegating the generation of a specific documentation section, likely containing detailed links or summaries.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-5.md#2025-04-23_snippet_1

LANGUAGE: hugo
CODE:
```
{{< docs/whats-new  >}}
```

----------------------------------------

TITLE: YAML Frontend Matter Configuration for Release Notes
DESCRIPTION: YAML configuration block defining build settings, product labels and title for the Grafana 7.5.5 release notes page.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-5.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
_build:
  list: false
labels:
  products:
    - cloud
    - enterprise
    - oss
title: Release notes for Grafana 7.5.5
```

----------------------------------------

TITLE: Demonstrating Table Data in Markdown
DESCRIPTION: This code snippet shows how to create a table in Markdown format, representing data before and after applying the 'Rows to fields' transformation in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_39

LANGUAGE: markdown
CODE:
```
| Name    | Value | Max |
| ------- | ----- | --- |
| ServerA | 10    | 100 |
| ServerB | 20    | 200 |
| ServerC | 30    | 300 |

**Output:**

| ServerA (config: max=100) | ServerB (config: max=200) | ServerC (config: max=300) |
| ------------------------- | ------------------------- | ------------------------- |
| 10                        | 20                        | 30                        |
```

----------------------------------------

TITLE: Using Time Range Variables with query_result in PromQL
DESCRIPTION: Example of using query_result with $__range_s to populate a variable with instances having a certain state over the dashboard's time range.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/template-variables/index.md#2025-04-23_snippet_1

LANGUAGE: PromQL
CODE:
```
Query: query_result(max_over_time(<metric>[${__range_s}s]) != <state>)
Regex:
```

----------------------------------------

TITLE: SQL Query to Execute Stored Procedure for Grafana Graph
DESCRIPTION: This query executes the stored procedure 'sp_test_epoch' with Grafana time range macros as parameters. It's used to retrieve data for a multi-series graph panel in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_13

LANGUAGE: sql
CODE:
```
DECLARE
  @from int = $__unixEpochFrom(),
  @to int = $__unixEpochTo()

EXEC dbo.sp_test_epoch @from, @to
```

----------------------------------------

TITLE: Generating API Key for Sensu Go
DESCRIPTION: Command to generate an API key for the admin user in Sensu Go. This key is required for configuring the Grafana notification channel to communicate with Sensu Go.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/sensugo/notes.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
sensuctl api-key grant admin
```

----------------------------------------

TITLE: Generating Password Reset Email Templates using Go HTML Templates - Go Template
DESCRIPTION: This snippet defines a password reset email using Go HTML templates for the Grafana application. It requires Go's 'html/template' package and expects variables such as .Name, .AppUrl, .Code, .EmailCodeValidHours, .BuildVersion, and .Subject for correct rendering. The key functionality includes dynamically constructing the subject line and body, inserting personalized content, and providing a time-limited password reset link; output is an HTML-formatted email-ready template for sending password reset instructions. No external libraries are used beyond Go standard templates; variables must be sufficiently defined for proper rendering.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/reset_password.txt#2025-04-23_snippet_0

LANGUAGE: gotemplate
CODE:
```
{{HiddenSubject .Subject "Reset your Grafana password - {{.Name}}"}}

Hi {{.Name}},

Copy and paste the following link directly in your browser to reset your password within {{.EmailCodeValidHours}} hours.
{{.AppUrl}}user/password/reset?code={{.Code}}


Sent by Grafana v{{.BuildVersion}} (c) {{now | date "2006"}} Grafana Labs
```

----------------------------------------

TITLE: Implementing Text Input with AutoSaveField in React
DESCRIPTION: Example of using AutoSaveField with a basic Input component for automatic text saving. The component accepts a custom request handler and onChange event handler.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/AutoSaveField/AutoSaveField.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<AutoSaveField
  onFinishChange={customRequest}
  //Complete field args if needed
>
  {(onChange) => (
    <Input
      value={inputTextValue}
      onChange={(e) => {
        onChange(e.currentTarget.value);
        //Complete code if needed
      }}
    />
  )}
</AutoSaveField>
```

----------------------------------------

TITLE: Providing PGP Signature for Grafana Plugin Manifest Verification
DESCRIPTION: This block contains the OpenPGP signature corresponding to the signed message containing the JSON manifest. Generated using OpenPGP.js v4.10.10, it allows verification of the manifest's origin (Grafana Labs, key ID '7e4d0c6a708866e7') and integrity using PGP verification tools.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/renderer-added-file/plugin/MANIFEST.txt#2025-04-23_snippet_1

LANGUAGE: pgp
CODE:
```
-----BEGIN PGP SIGNATURE-----
Version: OpenPGP.js v4.10.10
Comment: https://openpgpjs.org

wrgEARMKAAYFAmN8tEAAIQkQfk0ManCIZucWIQTzOyW2kQdOhGNlcPN+TQxq
cIhm576UAgiedgIhpOgTi/ypYgg8AtGQqKAwnDuDRDrYOc6LUDuskbSsR+J7
f2QjcPGpPk3alaqiTYMxixkTgmD01hltaTJ0AwIJAS9XkKHKxC9/ZhSHYemw
7wUeKs6AEvKR6amYZ+TF2pVyiJ9cEnl9J55MmDikqKFrIqC9J0V9r9wFkPAF
kOKVOY+y
=gqF+
-----END PGP SIGNATURE-----
```

----------------------------------------

TITLE: Enabling Profiling with Pyroscope in Grafana
DESCRIPTION: Environment variables and command required to enable profiling with Pyroscope. Sets the diagnostics profiling to enabled and configures the address for the profiling service before running Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/self-instrumentation/readme.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
export GF_DIAGNOSTICS_PROFILING_ENABLED=true
export GF_DIAGNOSTICS_PROFILING_ADDR=0.0.0.0
make run
```

----------------------------------------

TITLE: Configuring Dependabot for Module Updates
DESCRIPTION: YAML configuration for Dependabot to include the new module in dependency updates.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/manage-go-module.md#2025-04-23_snippet_4

LANGUAGE: yaml
CODE:
```
# .github/dependabot.yml
updates:
  - package-ecosystem: 'github-actions'
    directory: '/'
    schedule:
      interval: 'daily'
  - package-ecosystem: 'gomod'
    directories:
      - '/'
      - '/pkg/your/new/module' # Add your new module here
```

----------------------------------------

TITLE: Authenticating as Admin in FreeIPA
DESCRIPTION: Command to authenticate as the admin user in FreeIPA using Kerberos. This requires entering the admin password (Secret123) when prompted.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/freeipa/notes.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
kinit admin
```

----------------------------------------

TITLE: Starting Storage-Server via Shell - Shell
DESCRIPTION: This shell command starts the standalone GRPC storage-server for Grafana Unified Storage. It sets the GF_DEFAULT_TARGET environment variable and runs the server binary. Requires the built Grafana executable and associated configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_18

LANGUAGE: sh
CODE:
```
GF_DEFAULT_TARGET=storage-server ./bin/grafana server target
```

----------------------------------------

TITLE: Consolidating Data Points
DESCRIPTION: The consolidateBy() function controls how Graphite consolidates metrics when there are more data points than pixels. This affects how data points are aggregated for display.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/query-editor/index.md#2025-04-23_snippet_4

LANGUAGE: graphite
CODE:
```
consolidateBy()
```

----------------------------------------

TITLE: Including Upgrade Introduction using Hugo Shortcode
DESCRIPTION: This Hugo shortcode dynamically includes the shared introduction content specific to Grafana upgrades. It uses the `docs/shared` shortcode, specifying the content file (`upgrade/intro.md`), the source (`grafana`), and uses a placeholder (`<GRAFANA_VERSION>`) to potentially fetch version-specific content.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v11.4/index.md#2025-04-23_snippet_0

LANGUAGE: hugo
CODE:
```
{{< docs/shared lookup="upgrade/intro.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Listing Added Helm Repositories - Helm CLI - Bash
DESCRIPTION: This snippet lists all Helm repositories currently added to the Helm client. It requires Helm to be installed and outputs the repository names and URLs. This is typically used for verification after adding a new repository.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
helm repo list
```

LANGUAGE: bash
CODE:
```
NAME    URL
grafana https://grafana.github.io/helm-charts
```

----------------------------------------

TITLE: All Correlations Retrieval Response in Grafana HTTP API
DESCRIPTION: HTTP response containing an array of all correlations across all data sources. The response includes complete details for each correlation relationship in the system.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_11

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
[
  {
    "description": "Prometheus to Loki",
    "label": "My Label",
    "sourceUID": "uyBf2637k",
    "targetUID": "PDDA8E780A17E7EF1",
    "uid": "J6gn7d31L",
    "provisioned": false,
    "type": "query",
    "config": {
      "field": "message",
      "target": {},
    }
  },
  {
    "description": "Loki to Tempo",
    "label": "Another Label",
    "sourceUID": "PDDA8E780A17E7EF1",
    "targetUID": "P15396BDD62B2BE29",
    "uid": "uWCpURgVk",
    "provisioned": false,
    "type": "query",
    "config": {
      "field": "message",
      "target": {},
    }
  }
]
```

----------------------------------------

TITLE: Example Grafana Alert Summary Annotation Text
DESCRIPTION: Provides an example text string for the 'summary' annotation in a Grafana alert rule. This concise summary explains the condition that triggered the alert, such as CPU usage exceeding a threshold.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/alert-rules/annotation-label.md#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
CPU usage has exceeded 80% for the last 5 minutes.
```

----------------------------------------

TITLE: Verifying File Watcher Limit on Linux (Bash)
DESCRIPTION: Reads and prints the current value of the kernel parameter `fs.inotify.max_user_watches` directly from the proc filesystem (`/proc/sys/fs/inotify/max_user_watches`). This command is used on Linux systems to confirm if the file watcher limit was successfully updated, expecting output like `524288` after applying the increase.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_18

LANGUAGE: bash
CODE:
```
cat /proc/sys/fs/inotify/max_user_watches
```

----------------------------------------

TITLE: Displaying Grizzly Help in Shell
DESCRIPTION: This command executes the Grizzly (`grr`) CLI tool with the `--help` flag. Its purpose is to display the available commands, options, and general usage instructions for the Grizzly tool.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
$ grr --help
```

----------------------------------------

TITLE: Adding the Stable Grafana APT Repository - Bash
DESCRIPTION: Appends the stable Grafana repository to the system's sources list using the signed key for package verification. Requires prior GPG key installation. Inputs: None. Outputs: Updates /etc/apt/sources.list.d/grafana.list for stable releases.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
```

----------------------------------------

TITLE: Defining Alert Summarization Logic in Go Template
DESCRIPTION: Defines a template named '__default_alerts_summarize' that iterates over a collection of alerts (passed as context). For each alert in the collection, it invokes the '__default_alert_labels' and '__default_alert_annotations' templates to display the alert's details.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/ng_alert_notification.txt#2025-04-23_snippet_1

LANGUAGE: go-template
CODE:
```
[[- define "__default_alerts_summarize" -]]
[[- range . ]]
[[- template "__default_alert_labels" . ]]
[[- template "__default_alert_annotations" . ]]
[[ end ]]
[[- end -]]
```

----------------------------------------

TITLE: Including Field Overrides Documentation using Hugo Shortcode
DESCRIPTION: This Hugo shortcode includes shared documentation for field override options from `visualizations/overrides-options.md`. Dependencies include Hugo and the referenced file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/candlestick/index.md#2025-04-23_snippet_7

LANGUAGE: plaintext
CODE:
```
{{< docs/shared lookup="visualizations/overrides-options.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Basic Required Field Validation in Form (JavaScript/JSX)
DESCRIPTION: Details how to perform simple required-field validation in a form using react-hook-form. The snippet shows indicating an invalid state, displaying an error, and providing a default value, with references to default state and error mapping. Dependencies include Form, Field, Input from @grafana/ui, and react-hook-form registration.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_9

LANGUAGE: jsx
CODE:
```
<Form ...>{
  ({register, errors}) => (
    <>
      <Field invalid={!!errors.name} error={errors.name && 'Name is required'}
      <Input
        {...register("name", { required: true })}
        defaultValue={default.name}
      />
    </>
  )}
</Form>
```

----------------------------------------

TITLE: Referencing Grafana Queries as Parameters using #[A-Z]
DESCRIPTION: Grafana allows referencing the results of other queries within the same panel using the `#[A-Z]` syntax (e.g., `#A`, `#B`, `#C`). This enables using the output of one query (e.g., a specific metric series) as an input parameter to a Graphite function in another query line.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/graphite/query_help.md#2025-04-23_snippet_3

LANGUAGE: Grafana Query Reference Syntax
CODE:
```
#[A-Z]
```

----------------------------------------

TITLE: Successful Response for Updating a Shared Dashboard in Grafana
DESCRIPTION: This HTTP response shows the successful update of a shared dashboard, returning the complete updated dashboard configuration including its UID, access token, and modified settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Content-Length: 78

{
    "uid": "cd56d9fd-f3d4-486d-afba-a21760e2acbe",
    "dashboardUid": "xCpsVuc4z",
    "accessToken": "5c948bf96e6a4b13bd91975f9a2028b7",
    "createdBy": 1,
    "updatedBy": 1,
    "createdAt": "2023-09-05T15:48:21-03:00",
    "updatedAt": "2023-09-05T15:48:21-03:00",
    "timeSelectionEnabled": false,
    "isEnabled": false,
    "annotationsEnabled": false,
    "share": "public"
}
```

----------------------------------------

TITLE: Importing Avatar Component in JSX
DESCRIPTION: This snippet demonstrates how to import and use the Avatar component from Grafana UI. It shows setting up a user object and rendering the Avatar with custom props.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/UsersIndicator/Avatar.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { Avatar } from '@grafana/ui';

const user = {
  id: 5,
  name: 'Admin',
  email: 'admin@org.com',
  avatarUrl: 'https://secure.gravatar.com/avatar',
};

const Example = () => {
  return <Avatar src={user.avatarUrl} alt={`Avatar for the user ${user.name}`} width={4} height={4} />;
};
```

----------------------------------------

TITLE: Bulk Update Team Members Response Example - JSON
DESCRIPTION: Returns a JSON message stating that team memberships have been updated. This confirms bulk addition or removal of members and administrators has been applied.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_17

LANGUAGE: json
CODE:
```
{\n  \"message\":\"Team memberships have been updated\"\n}
```

----------------------------------------

TITLE: Defining Versioned Selectors for Components in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates the structure of a versioned selector object used in Grafana's E2E testing framework. Keys are semantic version strings (e.g., '11.1.0', '9.5.0') representing the minimum Grafana version for which the associated selector value is valid. The value is typically a string selector (like a data-testid attribute) used to target UI elements. This mechanism allows tests to adapt to UI changes across different Grafana versions.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-e2e-selectors/src/selectors/README.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
```typescript
const components = {
 PanelEditor: {
   content: {
        '11.1.0': 'data-testid Panel editor content', // resolved for Grafana >= 11.1.0
        '9.5.0': 'Panel editor content', // resolved for Grafana >= 9.5.0 <11.1.0
   },
 }
 ...
}
```
```

----------------------------------------

TITLE: Defining Storybook Metadata and Props Table in MDX
DESCRIPTION: This snippet utilizes Storybook MDX syntax to register metadata for the Label component and display its prop types. The <Meta> tag specifies the story's title and the targeted component, while <ArgTypes of={Label} /> generates a prop table. This allows Storybook to automatically document all supported properties and conveys essential usage information for developers.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Label.mdx#2025-04-23_snippet_1

LANGUAGE: mdx
CODE:
```
<Meta title="MDX|Label" component={Label} />

# Label

The label component can be used to label form inputs with a heading/"Option name" and a description. To automatically have the right arrangement of this component with a form input, use the `Field` component. There is also a categorised variant of the label, where the heading shows nested categories before the actual option name.

This label component is used in full-page forms in Grafana, for example in the datasource settings. In some parts of Grafana, there are inline forms which do not use this type of label.

### Props

<ArgTypes of={Label} />
```

----------------------------------------

TITLE: Showing Result of Outer Join on SQL-like Data
DESCRIPTION: This Markdown table displays the outcome of applying an outer join transformation to the 'Students' and 'Enrollments' tables using 'StudentID'. It includes all rows from both tables, showing matched data and indicating unmatched rows with NULL values.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_26

LANGUAGE: markdown
CODE:
```
| StudentID | Name     | Major            | CourseID | Grade |
| --------- | -------- | ---------------- | -------- | ----- |
| 1         | John     | Computer Science | CS101    | A     |
| 1         | John     | Computer Science | CS102    | B     |
| 2         | Emily    | Mathematics      | MATH201  | A     |
| 3         | Michael  | Physics          | PHYS101  | B     |
| 4         | Jennifer | Chemistry        | NULL     | NULL  |
| 5         | NULL     | NULL             | HIST101  | B     |
```

----------------------------------------

TITLE: Checking Docker Daemon Status - Bash
DESCRIPTION: This snippet executes 'docker ps' to list all running Docker containers, confirming that the Docker daemon/service is active. Docker must be installed and running for this command to succeed. Input: None. Output: A tabular list of running containers, or an error if Docker is not active; used as a verification step before starting containers for the tutorial. No container is started or modified by this command.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
docker ps

```

----------------------------------------

TITLE: PGP Signature Block for Manifest Verification
DESCRIPTION: This block contains an ASCII-armored OpenPGP signature corresponding to the preceding JSON manifest data. Generated using OpenPGP.js v4.10.1 and signed by Grafana Labs (keyId: 7e4d0c6a708866e7), this signature allows verification of the manifest's integrity and authenticity using the Grafana Labs public PGP key. The hash algorithm used is SHA512, as indicated in the signed message header.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/duplicate-plugins/nested/MANIFEST.txt#2025-04-23_snippet_1

LANGUAGE: pgp
CODE:
```
-----BEGIN PGP SIGNATURE-----
Version: OpenPGP.js v4.10.1
Comment: https://openpgpjs.org

wqIEARMKAAYFAmCkyjYACgkQfk0ManCIZufMrgIJAWouS5oNJixNsold48Jw
BuCFtAT7cP0rqxiyu/Z1c06IIVcmEJg/KngcUDhP8bEN4xAunP7KfZktmGp9
+8OqVbd/AgkBg9tWWgnMWln8XENca0ou1PTd/y24embsK3UNweqBAJPDL9el
nnmA5UWS7pFiHQTLp/daE08o2FGclRbgHcOtFBI=
=cSQ0
-----END PGP SIGNATURE-----
```

----------------------------------------

TITLE: Cloning Tutorial Environment Repository with Git - Bash
DESCRIPTION: This Bash snippet clones the tutorial environment repository from GitHub using Git. Git must be installed and available in your system's PATH. The cloned repository contains configuration files and assets required to set up Grafana, Loki, and Prometheus using Docker Compose. The only required parameter is the repository URL, and the output will be a directory named 'tutorial-environment' in the current directory. Run this command before setting up the environment with Docker.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/grafana/tutorial-environment.git

```

----------------------------------------

TITLE: Querying Total Disk Bytes Written with PromQL
DESCRIPTION: This PromQL query retrieves the time series data for the `node_disk_written_bytes_total` metric from a Prometheus data source. It filters the results to include only metrics associated with the job labeled `integrations/macos-node` and where the `device` label is not empty. This is typically used in Grafana's Metrics browser to visualize cumulative disk writes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/fundamentals/intro-to-prometheus/index.md#2025-04-23_snippet_0

LANGUAGE: promql
CODE:
```
node_disk_written_bytes_total{job="integrations/macos-node", device!=""}
```

----------------------------------------

TITLE: Getting All Mute Timings via Grafana Provisioning API (HTTP Request)
DESCRIPTION: Makes a GET request to the `/api/v1/provisioning/mute-timings` endpoint to retrieve all defined mute timings within Grafana's alerting provisioning system. Expects a 200 OK response containing the mute timings data, typically conforming to a 'MuteTimings' schema.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_23

LANGUAGE: http
CODE:
```
GET /api/v1/provisioning/mute-timings
```

----------------------------------------

TITLE: Matching All Alerts with a Specific Label using Regex in Grafana
DESCRIPTION: This regex pattern `team=~.+` is used within a Grafana notification policy's matching criteria. It selects all alert instances that have the label 'team' present with any non-empty value. This is demonstrated in an example where alerts are grouped based on the value of the 'team' label.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/notifications/group-alert-notifications.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
team=~.+
```

----------------------------------------

TITLE: RBAC Configuration Section - Grafana INI
DESCRIPTION: This section header indicates the beginning of settings controlling Role-based Access Control in Grafana. It does not itself enable RBAC, but groups relevant options underneath. Dependencies include Grafana's enterprise features; further directive keys would be defined below this header. This is a namespace for settings and does not accept parameters on its own.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_31

LANGUAGE: ini
CODE:
```
[rbac]
```

----------------------------------------

TITLE: Setting HTTP Protocol to HTTPS - Bash
DESCRIPTION: Enables HTTPS protocol for the image renderer's HTTP server using the HTTP_PROTOCOL environment variable. Effective from renderer version v3.11.0 and later. Possible values are 'http' and 'https', with default as 'http'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
HTTP_PROTOCOL=https
```

----------------------------------------

TITLE: Importing Storybook Components and Types for RangeSlider Documentation (TypeScript)
DESCRIPTION: This snippet imports the `Meta` and `ArgTypes` components from `@storybook/blocks` to configure the Storybook documentation page and automatically generate controls for component props. It also imports the `RangeSliderProps` type definition from a relative path (`./types`), which is used by `ArgTypes` to document the component's interface.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Slider/RangeSlider.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Meta, ArgTypes } from '@storybook/blocks';
import { RangeSliderProps } from './types';
```

----------------------------------------

TITLE: Configuring Grafana Plugin Installation via Helm Chart (YAML)
DESCRIPTION: This YAML snippet shows how to configure the Grafana Helm chart to automatically install specific plugins during deployment. It uses the `plugins` field within the Helm `values.yaml` file. The example lists two plugins: `grafana-oncall-app` version `v1.9.0`, fetched directly via its download URL, and `redis-datasource`, likely fetched by name from the default Grafana plugin repository. This method ensures plugins are consistently installed as part of the Grafana deployment managed by Helm.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/plugin-management/index.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
plugins:
  - https://grafana.com/api/plugins/grafana-oncall-app/versions/v1.9.0/download;grafana-oncall-app
  - redis-datasource
```

----------------------------------------

TITLE: Checking Grafana Service Status with init.d (Linux)
DESCRIPTION: Verifies the current status of the Grafana server service using the init.d script.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
sudo service grafana-server status
```

----------------------------------------

TITLE: Querying Hostnames for Templating Variable in PostgreSQL
DESCRIPTION: Demonstrates a simple SQL query to retrieve all unique hostnames from a table. This query is used to populate a Grafana templating variable with hostname options.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_7

LANGUAGE: sql
CODE:
```
SELECT hostname FROM host
```

----------------------------------------

TITLE: Hugo Shortcode for Including Shared Documentation in Grafana Docs
DESCRIPTION: This snippet shows a Hugo shortcode used within the Grafana documentation source files (likely Markdown). It dynamically includes content from a shared markdown file ('dashboards/time-range-URLs.md') based on the specified source ('grafana') and version ('<GRAFANA_VERSION>'). This templating mechanism helps maintain consistency and reuse content across different parts or versions of the documentation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/use-dashboards/index.md#2025-04-23_snippet_2

LANGUAGE: hugo
CODE:
```
{{< docs/shared lookup="dashboards/time-range-URLs.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Migrating ClipboardButton Component Callbacks in React
DESCRIPTION: Example showing how to migrate from deprecated ClipboardButton component callbacks to the new simplified API. The new implementation accepts the copied text directly as the callback argument rather than a ClipboardEvent object.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-9-0-0-beta3.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<ClipboardButton
  {/*other props... */}
  onClipboardCopy={(e) => {
    console.log(`Text "${e.text}" was copied!`);
  }}
/>
```

LANGUAGE: tsx
CODE:
```
<ClipboardButton
  {/* other props... */}
  onClipboardCopy={(copiedText) => {
    console.log(`Text "${copiedText}" was copied!`);
  }}
/>
```

----------------------------------------

TITLE: Building and Watching Grafana E2E Test Plugin (Shell)
DESCRIPTION: This shell command uses yarn to build the end-to-end test plugin in development mode. It watches for file changes within the plugin source directory and rebuilds the plugin automatically, useful during plugin development.
SOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/grafana-extensionstest-app/README.md#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
yarn e2e:plugin:build:dev
```

----------------------------------------

TITLE: Enabling Prometheus Editor API Call Caching Experimental Feature
DESCRIPTION: This feature toggle, `prometheusResourceBrowserCache`, activates experimental caching for Prometheus editor API calls directly within the Prometheus data source configuration. Enabling this cache is intended to improve the performance of the Prometheus query editor, particularly beneficial for users dealing with high-cardinality Prometheus instances.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-5.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
prometheusResourceBrowserCache
```

----------------------------------------

TITLE: Enabling Feature Toggles in Grafana via INI Configuration
DESCRIPTION: This INI configuration snippet shows how to enable feature toggles in the Grafana configuration file, specifically the 'panelTitleSearch' feature. The snippet should be added to the 'feature_toggles' section to enable new features, with each enabled feature separated by spaces. No additional dependencies are required, but changes will only take effect after saving the configuration and restarting the Grafana server. Only features compatible with the current Grafana version can be enabled this way.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/search-dashboards/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[feature_toggles]
# enable features, separated by spaces
enable = panelTitleSearch
```

----------------------------------------

TITLE: Updated Message Initializer with Custom Phrase in Go
DESCRIPTION: Modifies the NewMessage function to accept a custom phrase as an argument.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_16

LANGUAGE: go
CODE:
```
func NewMessage(phrase string) Message {
    return Message(phrase)
}
```

----------------------------------------

TITLE: Visualizing Data Request Count Evolution by Host in Grafana (Loki Query) - loki-query
DESCRIPTION: This snippet comprises two Loki queries for use in a graph panel to visualize the number of successful and erroneous data requests over time, grouped by host. Use both queries in the same panel for comparison; each 'host' label represents a distinct Grafana server (high-availability scenarios). Inputs are the kind ('usage_insights'), eventName, and error status. Outputs are aggregated counts by host, split by success and error; outputs depend on the log fields present.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/export-logs.md#2025-04-23_snippet_4

LANGUAGE: loki-query
CODE:
```
sum by(host) (count_over_time({kind=\"usage_insights\"} | json | eventName=\"data-request\" | error != \"\" [$__interval]))
```

LANGUAGE: loki-query
CODE:
```
sum by(host) (count_over_time({kind=\"usage_insights\"} | json | eventName=\"data-request\" | error = \"\" [$__interval]))
```

----------------------------------------

TITLE: Defining Pie Chart Data with Multiple Rows (Markdown Table)
DESCRIPTION: Shows a data format using multiple rows with one value and one label column using a Markdown table. By default, the pie chart shows only the last row's value unless configured otherwise.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
| Value | Label  |
| ----- | ------ |
| 5     | Value1 |
| 3     | Value2 |
| 2     | Value3 |
```

----------------------------------------

TITLE: Embedding YouTube Video using Hugo Shortcode
DESCRIPTION: This Hugo shortcode embeds a YouTube video directly into the documentation page. The `id` parameter specifies the unique identifier of the YouTube video (`MSHeWWsHaIA`) to be displayed, providing a visual aid or tutorial related to the simplified exploration features.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/explore/simplified-exploration/_index.md#2025-04-23_snippet_1

LANGUAGE: hugo
CODE:
```
{{< youtube id="MSHeWWsHaIA" >}}
```

----------------------------------------

TITLE: Embedding YouTube Tutorial for Grafana Pie Charts
DESCRIPTION: Uses a Hugo shortcode (`youtube`) to embed a YouTube video tutorial directly into the documentation page. The video guides users through creating and customizing Grafana pie chart visualizations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
{{< youtube id="A_lDhM9w4_g" >}}
```

----------------------------------------

TITLE: Defining Grafana Fixed Role: fixed:folders:reader
DESCRIPTION: Specifies the `fixed:folders:reader` role (ID: `fixed_yeW-5QPeo-i5PZUIUXMlAA97GnQ`) within Grafana. This role grants `folders:read` and `dashboards:read` permissions, allowing users to read all folders and dashboards.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_8

LANGUAGE: plaintext
CODE:
```
fixed:folders:reader
```

LANGUAGE: plaintext
CODE:
```
fixed_yeW-5QPeo-i5PZUIUXMlAA97GnQ
```

LANGUAGE: plaintext
CODE:
```
Permissions included:
- folders:read
- dashboards:read
```

----------------------------------------

TITLE: Creating Extended Variable Queries for CPU Metrics in InfluxDB
DESCRIPTION: A query to retrieve CPU metrics for selected hosts, extending the variable chaining pattern by filtering CPU metrics based on previously selected datacenter and host variables.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_7

LANGUAGE: influxql
CODE:
```
SHOW TAG VALUES WITH KEY = "cpu" WHERE "datacenter" =~ /^$datacenter$/ AND "host" =~ /^$host$/
```

----------------------------------------

TITLE: Displaying Confirmation Code in Grafana Template (Go Template)
DESCRIPTION: This template placeholder inserts the unique confirmation code required for email verification into the email body. The `.ConfirmationCode` variable must be provided when rendering the template.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/passwordless_verify_new_user.txt#2025-04-23_snippet_1

LANGUAGE: go-template
CODE:
```
[[.ConfirmationCode]]
```

----------------------------------------

TITLE: MultiCombobox Props Documentation
DESCRIPTION: Storybook ArgTypes component for displaying MultiCombobox props documentation.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Combobox/MultiCombobox.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
<ArgTypes of={MultiCombobox} />
```

----------------------------------------

TITLE: CPU Time Series Metrics in Prometheus Format
DESCRIPTION: CPU usage metrics broken down by CPU cores (0-7) and different modes (idle, iowait, irq, nice, etc). Each metric includes seconds_total as the counter and a millisecond-precision timestamp.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/incomplete_fields_full.txt#2025-04-23_snippet_0

LANGUAGE: prometheus
CODE:
```
node_cpu,cpu=0,mode=idle seconds_total=99081.979999999996 1625842606118404128
node_cpu,cpu=0,mode=iowait seconds_total=53.490000000000002 1625842606118404128
node_cpu,cpu=0,mode=irq seconds_total=0 1625842606118404128
```

----------------------------------------

TITLE: Capturing Browser Output - Bash
DESCRIPTION: Sets RENDERING_DUMPIO to 'true', directing the headless browser's debug and error output to the main remote rendering process. Useful for troubleshooting rendering problems by capturing low-level browser errors. No other dependencies.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_27

LANGUAGE: bash
CODE:
```
RENDERING_DUMPIO=true
```

----------------------------------------

TITLE: Customizing RadioButtonList Layout with CSS Grid (JSX)
DESCRIPTION: Illustrates how to change the RadioButtonList/RadiobuttonGroup layout using a CSS-in-JS class via the className prop. The grid-template-columns style creates a multi-column display. Prerequisite is a CSS-in-JS solution (like Emotion) in the build. The component takes options, value, onChange, and className; the output is a visually distributed list of radio buttons.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/RadioButtonList/RadioButtonList.mdx#2025-04-23_snippet_3

LANGUAGE: jsx
CODE:
```
import { RadioButtonList } from '@grafana/ui';

<RadioButtonGroup
  options={...}
  value={...}
  onChange={...}
  className={css`
    grid-template-columns: 1fr 1fr 1fr;
  `}
/>

```

----------------------------------------

TITLE: Manual Dependency Injection in Go Main Function
DESCRIPTION: Demonstrates how to manually initialize and connect all components of the greeter program without using Wire.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_6

LANGUAGE: go
CODE:
```
func main() {
    message := NewMessage()
    greeter := NewGreeter(message)
    event := NewEvent(greeter)

    event.Start()
}
```

----------------------------------------

TITLE: Creating Playlist via kubectl - Shell
DESCRIPTION: This shell command submits a Playlist manifest to the Kubernetes API using a custom kubeconfig and the 'create' subcommand. It assumes that the playlist-generate.yaml file contains a valid Playlist resource definition. Success output will acknowledge creation.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_8

LANGUAGE: sh
CODE:
```
kubectl --kubeconfig=./grafana.kubeconfig create -f playlist-generate.yaml
```

----------------------------------------

TITLE: Resynchronizing Permissions after Access Control Migration in Grafana - SQL
DESCRIPTION: This sequence of SQL DELETE statements resets dashboard, folder, and data source permissions by removing all roles and permissions with names matching 'managed:%' in the database, as well as relevant migration logs. This is necessary if RBAC and legacy access controls become out of sync due to version changes. Prerequisites include a full database backup prior to running these queries. After execution, all dashboard, folder, and data source permissions are realigned with those from the legacy access control, erasing any updates made under RBAC. These queries should be executed with caution on the Grafana database backend.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/troubleshooting/index.md#2025-04-23_snippet_2

LANGUAGE: sql
CODE:
```
DELETE
FROM builtin_role
where role_id IN (SELECT id
                  FROM role
                  WHERE name LIKE 'managed:%');
DELETE
FROM team_role
where role_id IN (SELECT id
                  FROM role
                  WHERE name LIKE 'managed:%');
DELETE
FROM user_role
where role_id IN (SELECT id
                  FROM role
                  WHERE name LIKE 'managed:%');
DELETE
FROM permission
where role_id IN (SELECT id
                  FROM role
                  WHERE name LIKE 'managed:%');
DELETE
FROM role
WHERE name LIKE 'managed:%';
DELETE
FROM migration_log
WHERE migration_id IN ('teams permissions migration',
                       'dashboard permissions',
                       'dashboard permissions uid scopes',
                       'data source permissions',
                       'data source uid permissions',
                       'managed permissions migration',
                       'managed folder permissions alert actions repeated migration',
                       'managed permissions migration enterprise');
```

----------------------------------------

TITLE: Sample Output: Specific Dependency Owner - Plaintext
DESCRIPTION: This output shows the owner of the specified Go dependency as determined by the Modowners 'owners -d' command. The result is a single line with the owning team's identifier for reporting or verification.
SOURCE: https://github.com/grafana/grafana/blob/main/scripts/modowners/README.md#2025-04-23_snippet_4

LANGUAGE: plaintext
CODE:
```
@grafana/grafana-backend-group
```

----------------------------------------

TITLE: Changing Directory to the Plugin Folder (Shell)
DESCRIPTION: Changes the current working directory in the terminal to the newly created plugin directory, assumed to be named `my-plugin`. This step is necessary to run subsequent commands like dependency installation and building within the context of the plugin project.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/create-plugin.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
cd my-plugin
```

----------------------------------------

TITLE: Updating a Shared Dashboard in Grafana using HTTP PATCH
DESCRIPTION: This HTTP request updates an existing shared dashboard by specifying the dashboard UID and public dashboard UID. It allows modification of settings like time selection, enabled status, annotations, and share mode.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
PATCH /api/dashboards/uid/xCpsVuc4z/public-dashboards/cd56d9fd-f3d4-486d-afba-a21760e2acbe HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
    "timeSelectionEnabled": false,
    "isEnabled": true,
    "annotationsEnabled": false,
    "share": "public"
}
```

----------------------------------------

TITLE: Templating Alert Annotations with Go Templating Language - Go
DESCRIPTION: This snippet demonstrates how to use Go templating syntax within an annotation to display dynamic values such as the affected instance and the measured CPU usage. It incorporates variables like $labels.instance and $values.A.Value, which are contextually provided by Grafana's alerting system. This template should be applied to an annotation field (e.g., summary) in an alert rule definition and outputs descriptive plain text contextualizing why an alert was triggered.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/templates.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
CPU usage for {{ $labels.instance }} has exceeded 80% ({{ $values.A.Value }}) for the last 5 minutes.
```

----------------------------------------

TITLE: Executing Grafana Backend - Shell
DESCRIPTION: These shell commands start the Grafana backend for Unified Storage development/demonstration. The 'bra run' and 'make run' commands launch Grafana in-process with relevant configurations; they require the correct working directory and the presence of an appropriate configuration file. It is assumed that the tool 'bra' and Makefile targets are available.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_2

LANGUAGE: sh
CODE:
```
bra run
```

LANGUAGE: sh
CODE:
```
make run
```

----------------------------------------

TITLE: Including Value Mappings Documentation using Hugo Shortcode
DESCRIPTION: This Hugo shortcode includes shared documentation for value mapping options from `visualizations/value-mappings-options.md`. Dependencies include Hugo and the referenced file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/candlestick/index.md#2025-04-23_snippet_5

LANGUAGE: plaintext
CODE:
```
{{< docs/shared lookup="visualizations/value-mappings-options.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Example Response for Creating Graphite Annotation - HTTP+JSON
DESCRIPTION: A sample server response after successfully creating an annotation using the Graphite endpoint. Returns a 'message' string and the generated annotation id. The response is in JSON format and confirms completion of the operation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_5

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{\n    "message":"Graphite annotation added",\n    "id": 1\n}
```

----------------------------------------

TITLE: Listing Supported Visualizations for Grafana Data Links using Hugo Shortcode
DESCRIPTION: This snippet uses the Hugo `column-list` shortcode to display a list of Grafana visualization types where data links can be configured. Each item links to the respective visualization's documentation using reference links (`ref:`). This requires the Hugo static site generator with the custom `column-list` shortcode defined.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/configure-data-links/index.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
{{< column-list >}}

- [Bar chart](ref:bar-chart)
- [Bar gauge](ref:bar-gauge)
- [Candlestick](ref:candlestick)
- [Canvas](ref:canvas)
- [Gauge](ref:gauge)
- [Geomap](ref:geomap)
- [Heatmap](ref:heatmap)
- [Histogram](ref:histogram)
- [Pie chart](ref:pie-chart)
- [Stat](ref:stat)
- [State timeline](ref:state-timeline)
- [Status history](ref:status-history)
- [Table](ref:table)
- [Time series](ref:time-series)
- [Trend](ref:trend)
- [XY chart](ref:xy-chart)

{{< /column-list >}}
```

----------------------------------------

TITLE: Copying LDAP CA Certificate
DESCRIPTION: Commands to retrieve the container ID and copy the CA certificate from the OpenLDAP container
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/openldap/README.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
# get the container ID
docker ps

docker cp CONTAINER-ID:"/container/service/:ssl-tools/assets/default-ca/default-ca.pem" devenv/docker/blocks/auth/openldap/certs
```

----------------------------------------

TITLE: Creating Vertical Divider with Direction Prop in @grafana/ui - TypeScript
DESCRIPTION: This TypeScript snippet demonstrates importing the Divider component from @grafana/ui and configuring it to render vertically by passing the direction=\"vertical\" prop. It visually separates elements within a header, such as splitting a title from a logo. The dependencies are React and @grafana/ui. Key parameter is direction with the value \"vertical\". Should be used within a React component or JSX file.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Divider/Divider.mdx#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Divider } from '@grafana/ui';

    <header>
        <h1>My title here</h1>
        <Divider direction="vertical" />
        <img src="logo.png" alt="logo" />
    </header>
    <main>
        <p>Main content goes here</p>
    </main>

```

----------------------------------------

TITLE: Defining Functions in TypeScript
DESCRIPTION: Demonstrates the proper way to name functions using camelCase in TypeScript.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
// bad
const CalculatePercentage = () => { ... }
// bad
const calculate_percentage = () => { ... }

// good
const calculatePercentage = () => { ... }
```

----------------------------------------

TITLE: Receiving Success Response After Team Preferences Update - HTTP
DESCRIPTION: This snippet demonstrates the expected HTTP response when team preferences are successfully updated via the Grafana API. The response contains a status code of 200 and a plain text JSON message confirming the update. No dependencies or parameters are involved at this stage—this is the result of a valid update request.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_21

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: text/plain; charset=utf-8\n\n{\n  "message":"Preferences updated"\n}
```

----------------------------------------

TITLE: Defining Regexp Structure in Go
DESCRIPTION: Defines the Regexp type as an interface{} with a comment about its thread-safety.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_45

LANGUAGE: go
CODE:
```
> A Regexp is safe for concurrent use by multiple goroutines,
> except for configuration methods, such as Longest.

[interface{}](#interface)
```

----------------------------------------

TITLE: Displaying Configuration Diagram using Hugo Figure Shortcode
DESCRIPTION: Uses the Hugo 'figure' shortcode to embed an image visualizing how alert rules forward firing alerts either directly to a contact point or through notification policies. The snippet specifies the image source path, maximum display width, alternative text for accessibility, and a descriptive caption.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/notifications/_index.md#2025-04-23_snippet_0

LANGUAGE: hugo
CODE:
```
{{< figure src="/media/docs/alerting/alerting-configure-notifications-v2.png" max-width="750px" alt="Configure alert rules to forward firing alerts directly to a contact point or through notification policies" caption="Configure alert rules to forward firing alerts directly to a contact point or through notification policies" >}}
```

----------------------------------------

TITLE: Translating Prop Values in Components (React, TypeScript/JSX)
DESCRIPTION: This set of code snippets demonstrates how to ensure that string props, such as placeholder, are properly localized using the t() translation function from Grafana's i18n utilities. The bad example hardcodes the placeholder, while the good example first translates it. Dependencies: React, t() function from @grafana/i18n, corresponding UI components. Inputs: string props in JSX. Outputs: properly internationalized components that display locale-aware placeholder text or attribute values.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-eslint-rules/README.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
// Bad ❌
<input type="value" placeholder={'Username'} />;
```

LANGUAGE: tsx
CODE:
```
// Good ✅
const placeholder = t('form.username-placeholder', 'Username');
return <input type="value" placeholder={placeholder} />;
```

----------------------------------------

TITLE: Grafana MSSQL Connection Parameters
DESCRIPTION: Connection parameters for configuring Grafana's MSSQL datasource to connect to the Azure SQL Edge instance. These credentials are used for local development and testing.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/mssql_arm64/README.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
Host: localhost
Database: master
User: sa
Password: Password! (or MSSQL_SA_PASSWORD value from docker-compose.yaml)
```

----------------------------------------

TITLE: Toggling Panel Legend Visibility - Markdown
DESCRIPTION: Defines 'pl' as the keyboard shortcut for hiding or showing the legend on the selected panel. It works when hovering over a panel with no dependencies other than standard keyboard shortcut availability.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_10

LANGUAGE: markdown
CODE:
```
`pl`
```

----------------------------------------

TITLE: Changing Directory to Tutorial Environment - Bash
DESCRIPTION: This snippet changes the current working directory to the cloned "tutorial-environment" repository. It assumes that the repository was successfully cloned in the previous step and exists in the local directory structure. Input: None; Output: Shell working directory changed to "tutorial-environment".
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt4/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
cd tutorial-environment
```

----------------------------------------

TITLE: Upgrading Grafana using Zypper (Bash)
DESCRIPTION: Updates all installed packages, including Grafana, using the Zypper package manager. This command is intended for openSUSE or SUSE Linux Enterprise systems where Grafana was installed via repositories managed by Zypper.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/upgrade/upgrade-common-tasks.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
sudo zypper update
```

----------------------------------------

TITLE: Opening Panel in Explore Mode - Markdown
DESCRIPTION: Denotes 'px' as the keyboard shortcut to open a hovered Grafana panel in Explore mode. Explore mode enables deeper investigation of data. Prerequisite is a hovered panel and the shortcut's activation is dependent on user's Explore permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_7

LANGUAGE: markdown
CODE:
```
`px`
```

----------------------------------------

TITLE: Defining Storybook Meta for Tag Component in JSX
DESCRIPTION: This snippet sets up the Storybook Meta component for the Tag. It specifies the title for the documentation and associates it with the Tag component.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tags/Tag.mdx#2025-04-23_snippet_1

LANGUAGE: JSX
CODE:
```
<Meta title="MDX|Tag" component={Tag} />
```

----------------------------------------

TITLE: Embedding an Image Figure using Hugo Shortcode
DESCRIPTION: This Hugo shortcode (`figure`) embeds an image illustrating a histogram example into the documentation. It specifies the image source path (`src`), sets a maximum display width (`max-width`) for responsiveness, and provides a descriptive caption (`caption`). Hugo processes this shortcode to generate the appropriate HTML figure element.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/fundamentals/intro-histograms/index.md#2025-04-23_snippet_1

LANGUAGE: gotemplate
CODE:
```
{{< figure src="/static/img/docs/histogram-panel/histogram-example-v8-0.png" max-width="625px" caption="Bar chart example" >}}
```

----------------------------------------

TITLE: Defining Access Control Service Scope in Grafana RBAC
DESCRIPTION: The `services:accesscontrol` scope restricts an action specifically to the role-based access control service itself. This is often used in conjunction with `status:accesscontrol` actions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_41

LANGUAGE: text
CODE:
```
services:accesscontrol
```

----------------------------------------

TITLE: Configuring Local NPM Registry for @grafana Scope in .npmrc
DESCRIPTION: This configuration line, when added to an `.npmrc` file in a project (like a plugin), directs the package manager (npm or yarn) to fetch packages belonging to the `@grafana` scope from the specified local registry URL (typically a Verdaccio instance running locally) instead of the default public npm registry.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/README.md#2025-04-23_snippet_3

LANGUAGE: plaintext
CODE:
```
@grafana:registry=http://localhost:4873/
```

----------------------------------------

TITLE: InfluxDB Annotation Query Example
DESCRIPTION: SQL query example for creating annotations in Grafana dashboards. Demonstrates how to select title and description from events table with time filtering.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/query-editor/index.md#2025-04-23_snippet_4

LANGUAGE: sql
CODE:
```
SELECT title, description
from events
WHERE $timeFilter
ORDER BY time ASC
```

----------------------------------------

TITLE: Configuring Grafana Jaeger Tracing Endpoint (INI)
DESCRIPTION: An INI configuration snippet for Grafana's `config.ini` file. It specifies the Jaeger collector's API endpoint address (`http://localhost:14268/api/traces`) under the `[tracing.opentelemetry.jaeger]` section, enabling Grafana to send traces to a local Jaeger instance started via `make devenv`.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/instrumentation.md#2025-04-23_snippet_5

LANGUAGE: ini
CODE:
```
```ini
[tracing.opentelemetry.jaeger]
address = http://localhost:14268/api/traces
```
```

----------------------------------------

TITLE: Setting Additional Browser Arguments - Bash
DESCRIPTION: Configures headless browser startup options using RENDERING_ARGS. Accepts a comma-separated list of Chromium command-line flags, such as '--no-sandbox' or '--window-size=1280x758', to modify browser runtime behavior for rendering.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_31

LANGUAGE: bash
CODE:
```
RENDERING_ARGS=--no-sandbox,--disable-setuid-sandbox,--disable-dev-shm-usage,--disable-accelerated-2d-canvas,--disable-gpu,--window-size=1280x758
```

----------------------------------------

TITLE: Registering PanelContainer with Storybook Meta (TSX/MDX)
DESCRIPTION: This snippet uses the Storybook Meta component to register the PanelContainer for documentation and preview within the Storybook UI. The title sets the documentation section to 'MDX|PanelContainer' and links the component prop to the imported PanelContainer instance, making it visible and interactive in Storybook. This requires Storybook and the related blocks package to be installed.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelContainer/PanelContainer.mdx#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
<Meta title=\"MDX|PanelContainer\" component={PanelContainer} />
```

----------------------------------------

TITLE: Defining Interfaces in TypeScript
DESCRIPTION: Shows the correct way to define interfaces using PascalCase in TypeScript.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
// bad
interface buttonProps {
  //...
}
// bad
interface button_props {
  //...
}
// bad
interface IButtonProps {
  //...
}

// good
interface ButtonProps {
  //...
}

// bad
type requestInfo = ...
// bad
type request_info = ...

// good
type RequestInfo = ...
```

----------------------------------------

TITLE: Defining Pie Chart Data with a Single Row (Markdown Table)
DESCRIPTION: Illustrates the simplest data format for a pie chart using a Markdown table. A single row containing multiple numeric columns is shown, where each column represents a slice in the pie chart by default.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
| Value1 | Value2 | Value3 | Optional |
| ------ | ------ | ------ | -------- |
| 5      | 3      | 2      | Sums10   |
```

----------------------------------------

TITLE: Setting HTTP Service Host - JSON
DESCRIPTION: Configures the renderer's JSON file to set the service's host property, specifying the network interface for the HTTP server. Default behavior without this setting is to use the local host.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_10

LANGUAGE: json
CODE:
```
{
  "service": {
    "host": "localhost"
  }
}
```

----------------------------------------

TITLE: Adding Custom Title Items and Actions to PanelChrome in React
DESCRIPTION: Shows how to enhance the `PanelChrome` header by adding custom React elements. The `titleItems` prop is used to insert components (like `IconButton`s) next to the title, while the `actions` prop allows adding elements (like a `Button`) to the right side of the header, enabling more complex panel interactions.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
<PanelChrome
  title="My awesome panel title"
  titleItems={
    <>
      <IconButton
        className={css`
          margin-right: 10px;
        `}
        name="github"
        variant="secondary"
        tooltip="extra content to render"
      />
      <IconButton name="sliders-v-alt" variant="secondary" tooltip="extra content2 to render" />
    </>
  }
  actions={
    <Button size="sm" variant="secondary" key="A">
      Breakdown
    </Button>
  }
  width={500}
  height={200}
>
  {(innerwidth, innerheight) => {
    return (
      <div
        style={{
          width: innerwidth,
          height: innerheight,
          background: 'rgba(230,0,0,0.05)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        New panel with old API
      </div>
    );
  }}
</PanelChrome>
```

----------------------------------------

TITLE: Data Source Health Check Response in HTTP
DESCRIPTION: Example response for a successful health check of a CloudWatch data source, indicating successful API queries.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_15

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "message": "1. Successfully queried the CloudWatch metrics API.\n2. Successfully queried the CloudWatch logs API.",
  "status": "OK"
}
```

----------------------------------------

TITLE: Explicit Variable Passing with Trans Component using 'values' Prop in JSX
DESCRIPTION: Shows how to use the `values` prop on the `<Trans>` component to explicitly pass variables (like `term` mapped to `myVariable`). This allows referencing the variable using `{{ myVariable }}` within nested components (`Text`) that also contain translatable text. Requires `Trans` and potentially UI components.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_3

LANGUAGE: jsx
CODE:
```
import { Trans } from 'app/core/internationalization';
import { Text } from '@grafana/ui';

const SearchTitle = ({ term }) => (
  <Trans i18nKey="search-page.results-title" values={{ myVariable: term }}>
    Results for <Text color="success">{'{{ myVariable }}'} and this translated text is also in green</Text>
  </Trans>
);
```

----------------------------------------

TITLE: Presenting Arrow Base64 Encoded Test Data Response - Plaintext
DESCRIPTION: This snippet contains an Arrow-encoded base64 string representing the equivalent of the system data frame tabular information. It serves for interoperability and allows for performance and schema validation workflows in Grafana. There are no external runtime dependencies for reading the string, but decoding and interpreting the Arrow format requires the Arrow library stack in supported languages. Key parameters are the base64 string and its mapping to row/field data, with the output being deserialized frames matching the in-memory schema. Limitations: Manual editing is discouraged as corruption is possible; usage is primarily for automated test ingestion.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/changing_types_NaN.golden.txt#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
FRAME=QVJST1cxAAD/////mAIAABAAAAAAAAoADgAMAAsABAAKAAAAFAAAAAAAAAEDAAoADAAAAAgABAAKAAAACAAAAFQAAAACAAAAKAAAAAQAAADs/p...Snipped for brevity...AAABBUlJPVzE=
```

----------------------------------------

TITLE: Using __searchFilter with Query Variables in Graphite
DESCRIPTION: Example using the __searchFilter placeholder in a query to filter results based on user input in the dropdown select box.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/template-variables/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
apps.$app.servers.$__searchFilter
```

----------------------------------------

TITLE: Rendering ArgTypes Table for Cascader Props - Markdown/JSX
DESCRIPTION: Renders an interactive table using Storybook's ArgTypes block, displaying all configurable properties of the Cascader component. This enables users to review and understand available props and their expected types directly within the documentation. The component must be imported, and the ArgTypes block must be supplied with the correct component reference as shown.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Cascader/Cascader.mdx#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
<ArgTypes of={Cascader} />
```

----------------------------------------

TITLE: Handling JSX/HTML within Trans Component Interpolation in JSX
DESCRIPTION: Illustrates that directly interpolating JSX elements as variables (`{{ userName }}`) within `<Trans>` does not work. Instead, embed the JSX tags directly within the `<Trans>` component's children and interpolate the string variable inside the tags. Requires `Trans` import.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_9

LANGUAGE: jsx
CODE:
```
import { Trans } from 'app/core/internationalization';

// This will not work
const userName = <strong>user.name</strong>;
<Trans i18nKey="page.greeting">Hello {{ userName }}!</Trans>;

// Instead, put the JSX inside the phrase directly
const userName = user.name;
<Trans i18nKey="page.greeting">
  Hello <strong>{{ userName }}</strong>!
</Trans>;
```

----------------------------------------

TITLE: Formatting Grafana Variables as CSV String
DESCRIPTION: Demonstrates the `:csv` format option for Grafana variables. This formats variables with multiple values into a single comma-separated string without quotes. The example shows an array `['test1', 'test2']` interpolated as `'test1,test2'`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
servers = ['test1', 'test2']
String to interpolate: '${servers:csv}'
Interpolation result: 'test1,test2'
```

----------------------------------------

TITLE: Including Shared Configuration Options Introduction via Hugo Shortcode
DESCRIPTION: This Hugo shortcode includes shared documentation content from a specified file (`lookup`). It targets the introduction to visualization configuration options (`config-options-intro.md`) for the 'grafana' source, using a placeholder (`<GRAFANA_VERSION>`) for the Grafana version to ensure version-specific content is displayed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/flame-graph/index.md#2025-04-23_snippet_2

LANGUAGE: hugo
CODE:
```
{{< docs/shared lookup="visualizations/config-options-intro.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Deleting a Custom Role via YAML Provisioning - YAML Example
DESCRIPTION: This YAML snippet shows how to mark a custom role ('custom:reports:editor') for deletion in Grafana's provisioning config by setting its state to 'absent' and force to true. After updating the config file, reloading provisioning removes the role and all its assignments. Inputs: role name/uid, organization id, 'absent' state and force flag; outputs: custom role removal. Requires access to configuration and reload privileges.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_10

LANGUAGE: yaml
CODE:
```
# config file version
apiVersion: 2

roles:
  - name: 'custom:reports:editor'
    orgId: 1
    state: 'absent'
    force: true

```

----------------------------------------

TITLE: Estimating Required Open File Count for Grafana Build (Bash)
DESCRIPTION: This command uses `find` to list files in key Grafana directories (`./conf`, `./pkg`, `./public/views`) that are typically watched for changes during development builds (`make run`). The output is piped to `wc -l` to count the number of files, providing an estimate for setting an appropriate open files limit (`ulimit -n`).
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
find ./conf ./pkg ./public/views | wc -l
```

----------------------------------------

TITLE: Using Floor Function in Grafana Expressions
DESCRIPTION: The floor function rounds a number down to the nearest integer value. It works with numeric inputs.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_16

LANGUAGE: text
CODE:
```
floor(3.123)
```

----------------------------------------

TITLE: Interpolating Variables with Trans Component in JSX
DESCRIPTION: Illustrates using the `<Trans>` component within a React functional component (`SearchTitle`) to translate text containing a dynamic variable (`term`). The variable is interpolated using double curly braces. Requires importing `Trans` from `app/core/internationalization`.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
import { Trans } from 'app/core/internationalization';

const SearchTitle = ({ term }) => <Trans i18nKey="search-page.results-title">Results for {{ term }}</Trans>;
```

----------------------------------------

TITLE: CPU Usage Metrics in InfluxDB Line Protocol
DESCRIPTION: InfluxDB line protocol data showing CPU usage metrics across multiple cores with various metrics including user, system, idle, nice, iowait, irq, softirq, steal, guest, and guest_nice percentages. Data is collected from a MacBook Pro with measurements taken at timestamps 1616403089000000000 and 1616403090000000000.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/part_metrics_different_labels_different_time.txt#2025-04-23_snippet_0

LANGUAGE: influxdb
CODE:
```
cpu,cpu=cpu9,host=MacBook-Pro-Alexander.local usage_guest=0,usage_user=0,usage_system=0,usage_idle=100,usage_nice=0,usage_iowait=0,usage_softirq=0,usage_irq=0,usage_steal=0,usage_guest_nice=0 1616403089000000000
cpu,cpu=cpu10,host=MacBook-Pro-Alexander.local usage_system=0,usage_idle=100,usage_nice=0,usage_guest=0,usage_guest_nice=0,usage_user=0,usage_iowait=0,usage_irq=0,usage_softirq=0,usage_steal=0 1616403089000000000
cpu,cpu=cpu11,host=MacBook-Pro-Alexander.local usage_guest_nice=0,usage_user=0,usage_idle=100,usage_nice=0,usage_softirq=0,usage_guest=0,usage_system=0,usage_iowait=0,usage_irq=0,usage_steal=0 1616403089000000000
cpu,cpu=cpu-total,host=MacBook-Pro-Alexander.local usage_nice=0,usage_iowait=0,usage_irq=0,usage_idle=95.8368026645606,usage_system=1.4987510408004405,usage_softirq=0,usage_steal=0,usage_guest=0,usage_guest_nice=0,usage_user=2.6644462947563388 1616403089000000000
cpu,cpu=cpu0,host=MacBook-Pro-Alexander.local usage_system=6.000000000005457,usage_idle=82.00000000012005,usage_nice=0,usage_irq=0,usage_steal=0,usage_guest=0,usage_guest_nice=0,usage_user=12.000000000033651,usage_iowait=0,usage_softirq=0 1616403090000000000
```

----------------------------------------

TITLE: Setting Maximum Device Scale Factor - Bash
DESCRIPTION: Uses RENDERING_VIEWPORT_MAX_DEVICE_SCALE_FACTOR to restrict the device scale factor parameter for rendering. Prevents excessive memory/cpu usage for extremely high-resolution renders. Default max is 4. Requires v3.9.0+.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_49

LANGUAGE: bash
CODE:
```
# Available from v3.9.0+
RENDERING_VIEWPORT_MAX_DEVICE_SCALE_FACTOR=4
```

----------------------------------------

TITLE: Complex reducerTester Usage with Predicates in TypeScript
DESCRIPTION: Shows advanced usage of reducerTester when dealing with complex states containing properties difficult to compare directly (like Date objects). Uses a predicate function to evaluate individual properties in the resulting state.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/redux.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
reducerTester()
  .givenReducer(someReducer, initialState)
  .whenActionIsDispatched(someAction('reducer tests'))
  .thenStatePredicateShouldEqual((resultingState) => {
    expect(resultingState.data).toEqual('reducer tests');
    return true;
  });
```

----------------------------------------

TITLE: Configuring Storybook Metadata for RangeSlider Documentation (MDX)
DESCRIPTION: This MDX/JSX snippet utilizes the `Meta` component imported from Storybook to set the title of the documentation page to "MDX|RangeSlider". This title organizes the component within the Storybook UI sidebar, indicating it's part of the MDX documentation section.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Slider/RangeSlider.mdx#2025-04-23_snippet_1

LANGUAGE: mdx
CODE:
```
<Meta title="MDX|RangeSlider" />
```

----------------------------------------

TITLE: Querying List of Migration Snapshots with Grafana API - Bash
DESCRIPTION: This curl command retrieves the list of migration snapshots for a session from the Grafana API. It sends a GET request to /api/cloudmigration/migration/{sessionUid}/snapshots with pagination parameters limit and page. Dependencies: curl and admin access to a Grafana instance. Replace {sessionUid} as required; the output lists up to 100 snapshots per page.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/cloudmigration/api/curl_commands.txt#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
curl -X GET http://admin:admin@localhost:3000/api/cloudmigration/migration/{sessionUid}/snapshots?limit=100&page=1
```

----------------------------------------

TITLE: Defining ReceiverExport Structure in Go
DESCRIPTION: Defines the ReceiverExport structure with properties for configuring alert receivers.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_44

LANGUAGE: go
CODE:
```
**Properties**

| Name                    | Type                       | Go type    | Required | Default | Description | Example |
| ----------------------- | -------------------------- | ---------- | :------: | ------- | ----------- | ------- |
| `disableResolveMessage` | boolean                    | `bool`     |          |         |             |         |
| `settings`              | [RawMessage](#raw-message) | RawMessage |          |         |             |         |
| `type`                  | string                     | string     |          |         |             |         |
| `uid`                   | string                     | string     |          |         |             |         |
```

----------------------------------------

TITLE: Discouraged Use of Returns Tag for Obvious Functions - TypeScript
DESCRIPTION: This code snippet exemplifies a discouraged TSDoc practice where a @returns tag describes the output of a simple, self-evident function. The isEqual function returns a boolean indicating equality between two numbers, which is already evident from context and TypeScript types. The comment demonstrates over-documentation for elementary logic.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/code-comments.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
/**
 * Compares two numbers to see if they are equal to each other.
 *
 * @returns true if values are equal
 * @public
 **/
export const isEqual = (x: number, y: number): boolean => {
  return x === y;
};
```

----------------------------------------

TITLE: Configuring grafana-server systemd Unit - INI
DESCRIPTION: Provides the complete contents for a systemd unit file to manage Grafana server as a service on Linux. Requires editing /etc/systemd/system/grafana-server.service with these directives after installation. Sets up service start order, user/group security, restart on failure, and systemd integration. Inputs: None. Outputs: Grafana is launched via systemd under the appropriate user and directory layout.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_11

LANGUAGE: ini
CODE:
```
[Unit]
Description=Grafana Server
After=network.target

[Service]
Type=simple
User=grafana
Group=users
ExecStart=/usr/local/grafana/bin/grafana server --config=/usr/local/grafana/conf/grafana.ini --homepath=/usr/local/grafana
Restart=on-failure

[Install]
WantedBy=multi-user.target
```

----------------------------------------

TITLE: Example Response for Getting Users in an Organization (HTTP/JSON)
DESCRIPTION: Example successful HTTP response (200 OK) containing a JSON array of users within the specified Grafana organization. Each object in the array includes the user's `orgId`, `userId`, `email`, `login`, and `role`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_27

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
[
  {
    "orgId":1,
    "userId":1,
    "email":"admin@mygraf.com",
    "login":"admin",
    "role":"Admin"
  }
]
```

----------------------------------------

TITLE: Configuring Terraform Provider for Grafana - Terraform
DESCRIPTION: This snippet demonstrates how to configure the Terraform provider for Grafana by specifying the required provider (with minimum version) and authentication details. It includes the definition of provider block with placeholders for Grafana instance URL and API key, which are prerequisites for connecting Terraform to Grafana. Inputs to replace: \u003cgrafana-url\u003e (the URL of your Grafana instance) and \u003capi-key\u003e (a valid API token). Provider version must be 2.9.0 or higher. Output: successful authentication and ability to manage resources in the specified Grafana instance. Note: Actual values must NOT be hardcoded in production.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_0

LANGUAGE: Terraform
CODE:
```
terraform {
    required_providers {
        grafana = {
            source = "grafana/grafana"
            version = ">= 2.9.0"
        }
    }
}

provider "grafana" {
    url = \u003cgrafana-url\u003e
    auth = \u003capi-key\u003e
}

```

----------------------------------------

TITLE: Starting Jaeger Locally using Grafana Devenv (Bash)
DESCRIPTION: A bash command using `make` to start the Jaeger tracing backend via the Grafana development environment (`devenv`). This command is the first step in setting up a local environment for collecting and visualizing traces generated by Grafana during development.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/instrumentation.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
```bash
make devenv sources=jaeger
```
```

----------------------------------------

TITLE: Blocking All Web Crawlers in robots.txt
DESCRIPTION: This configuration snippet is part of a `robots.txt` file. The `User-agent: *` line indicates that the following rules apply to all web crawlers. The `Disallow: /` line instructs these crawlers not to access any part of the website, starting from the root directory. This effectively prevents the site from being indexed by search engines or other automated bots.
SOURCE: https://github.com/grafana/grafana/blob/main/public/robots.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
User-agent: *
Disallow: /
```

----------------------------------------

TITLE: Rendering Badge Component Props Documentation
DESCRIPTION: Displays the automatically generated documentation for all props available on the Badge component.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Badge/Badge.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
<ArgTypes of={Badge} />
```

----------------------------------------

TITLE: Configuring Permitted Provisioning Paths for File-Based Sync in Grafana - INI
DESCRIPTION: This snippet defines which local file system paths are allowed for file provisioning in Grafana. By editing the '[paths]' section of grafana.ini or custom.ini, administrators specify directories that Grafana can use for provisioning synced dashboards and folders. Multiple paths can be listed using a pipe ('|') separator, and the paths must not have empty values or trailing pipes. These paths restrict local path selection from the UI when setting up file provisioning and need to match the working directory structure.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/observability-as-code/provision-resources/file-path-setup.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[paths]
; This is devenv/dev-dashboards and conf/provisioning by default.
permitted_provisioning_paths = grafana/ | /etc/grafana/provisioning/

```

----------------------------------------

TITLE: Running Playwright E2E Tests for Grafana Plugin (Shell)
DESCRIPTION: This shell command uses yarn to execute Playwright tests. The '--project extensions-test-app' argument specifies that only the tests associated with the 'extensions-test-app' project configuration should be run. This command runs the end-to-end test suite against the running Grafana instance.
SOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/grafana-extensionstest-app/README.md#2025-04-23_snippet_6

LANGUAGE: shell
CODE:
```
yarn playwright test --project extensions-test-app
```

----------------------------------------

TITLE: Displaying Grid Component Properties with ArgTypes in MDX
DESCRIPTION: This snippet utilizes the `ArgTypes` component imported from Storybook blocks. By passing the `Grid` component to the `of` prop (`<ArgTypes of={Grid} />`), it automatically introspects the component's properties (props) and generates an interactive table displaying their names, types, default values, and descriptions. This relies on the component having well-defined prop types or being written in TypeScript.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Grid/Grid.mdx#2025-04-23_snippet_2

LANGUAGE: mdx
CODE:
```
<ArgTypes of={Grid} />
```

----------------------------------------

TITLE: System Metrics in InfluxDB Line Protocol
DESCRIPTION: Line protocol metric data capturing system statistics including CPU load averages (1, 5, 15 min), number of CPUs, and active users. Tags include host information and a custom label. Timestamp is in nanosecond precision.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/single_metric.txt#2025-04-23_snippet_0

LANGUAGE: influx
CODE:
```
system,host=MacBook-Pro-Alexander.local,mylabel=boom load15=2.00341796875,n_cpus=12i,n_users=6i,load1=3.15966796875,load5=2.3837890625 1616403089000000000
```

----------------------------------------

TITLE: Confirmation of Organization Creation (Admin API) - JSON
DESCRIPTION: JSON response for successful organization creation in admin mode, returning the orgId of the created entity and a message indicating success. This allows programmatic verification and further processing.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_19

LANGUAGE: json
CODE:
```
{\n  "orgId":"1",\n  "message":"Organization created"\n}
```

----------------------------------------

TITLE: Generating Section Menu with Hugo Shortcode
DESCRIPTION: This Hugo shortcode dynamically generates a menu listing related documentation sections or pages based on the site structure. The `menuTitle="true"` parameter configures the shortcode to use the titles of the linked pages as the menu item text, effectively creating a navigation list for specific upgrade guides. This requires the Hugo static site generator environment.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/_index.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
{{< section menuTitle="true">}}
```

----------------------------------------

TITLE: Adjusting and Formatting Alert Timezones with 'tz' and 'date' in Grafana Go Templates
DESCRIPTION: This snippet uses the 'tz' function to shift the .StartsAt time for each alert into a specific timezone (e.g., Europe/Paris), then pipes the result through 'date' for formatted output (such as '21:01:45 CET'). Requires .Alerts as input and timezone string as a parameter. Outputs are timezone-adjusted and formatted date strings, supporting local display of alert events.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_9

LANGUAGE: go
CODE:
```
{{ define "custom_template" }}
  {{ range .Alerts }}
    {{ .StartsAt | tz "Europe/Paris" }}
    {{ .StartsAt | tz "Europe/Paris" | date "15:04:05 MST" }}
  {{ end}}
{{ end }}
```

----------------------------------------

TITLE: Appending Verification Code to URL using Go Template
DESCRIPTION: This Go template snippet retrieves and appends the unique verification code (`.Code`) as a query parameter to the verification URL. The `.Code` variable is provided by the Grafana backend during template rendering.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/verify_email.txt#2025-04-23_snippet_4

LANGUAGE: Go Template
CODE:
```
[[.Code]]
```

----------------------------------------

TITLE: Enabling Tracing in Grafana (Bash)
DESCRIPTION: Command to start Grafana server with tracing enabled and specifying a custom trace file location.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
./grafana server -tracing -tracing-file=/tmp/trace.out
```

----------------------------------------

TITLE: Toggling Panel Edit Mode - Markdown
DESCRIPTION: This snippet highlights the keyboard shortcut for toggling the panel's edit mode in Grafana using the 'e' key. The context is when a user hovers over a Grafana panel. No code dependencies exist; the shortcut simply opens or closes the edit view for the hovered panel. This requires that keyboard shortcuts be active in the user session.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
`e`
```

----------------------------------------

TITLE: Retrieving CA Certificate for Caddy TLS
DESCRIPTION: This command retrieves the CA certificate from the Caddy TLS container, which may be needed for configuring Grafana Alerting.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/caddy_tls/README.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
docker exec devenv-caddy_tls-1 cat /etc/caddy/ca.pem
```

----------------------------------------

TITLE: Configuring App Plugin Access with YAML Provisioning
DESCRIPTION: This YAML configuration demonstrates how to modify the basic viewer role using Grafana's provisioning system. It removes general app plugin access and grants specific access to the kentik-connect-app plugin.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_8

LANGUAGE: yaml
CODE:
```
---
apiVersion: 2

roles:
  - name: 'basic:viewer'
    version: 8
    global: true
    from:
      - name: 'basic:viewer'
        global: true
    permissions:
      - action: 'plugins.app:access'
        scope: 'plugins:*'
        state: 'absent'
      - action: 'plugins.app:access'
        scope: 'plugins:id:kentik-connect-app'
        state: 'present'
```

----------------------------------------

TITLE: Announced Deprecations Table in Markdown
DESCRIPTION: This table lists the currently announced deprecations in Grafana, including the feature name, announcement date, disabling date, removal date, description, and current status.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/deprecation-policy.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
| Name                                                                     | Announcement Date | Disabling date | Removal Date | Description                                                                                                             | Status  |
| ------------------------------------------------------------------------ | ----------------- | -------------- | ------------ | ----------------------------------------------------------------------------------------------------------------------- | ------- |
| [Support for Mysql 5.7](https://github.com/grafana/grafana/issues/68446) | 2023-05-15        | October 2023   |              | MySQL 5.7 is being deprecated in October 2023 and Grafana's policy is to test against the officially supported version. | Planned |
```

----------------------------------------

TITLE: StatementPosition Resolver Type Definition
DESCRIPTION: Defines the type signature for resolvers that determine the cursor position context within a SQL query. Takes token context parameters and returns a boolean.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-sql/src/components/query-editor-raw/README.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
export type StatementPositionResolver = (
  currentToken: LinkedToken | null,
  previousKeyword: LinkedToken | null,
  previousNonWhiteSpace: LinkedToken | null,
  previousIsSlash: Boolean // To be removed as it's CloudWatch specific
) => Boolean;
```

----------------------------------------

TITLE: Reading Grafana API Keys (Plaintext)
DESCRIPTION: Defines the `apikeys:read` permission action necessary to read API keys within Grafana. Access is associated with the scopes `apikeys:*` and `apikeys:id:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_3

LANGUAGE: plaintext
CODE:
```
`apikeys:read`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`apikeys:*`</li><li>`apikeys:id:*`</li></ul>
```

----------------------------------------

TITLE: Writing a Test with Parameterized Selectors
DESCRIPTION: TypeScript test example demonstrating how to use parameterized selectors to click on a specific data source.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
describe('List test', () => {
  it('clicks on data source named B', () => {
    e2e.pages.DataSources.visit();
    // To prevent flaky tests, always do a .should on any selector that you expect to be in the DOM.
    // Read more here: https://docs.cypress.io/guides/core-concepts/retry-ability.html#Commands-vs-assertions
    e2e.pages.DataSources.dataSources('B').should('be.visible').click();
  });
});
```

----------------------------------------

TITLE: Embedding Image for Scheme Gradient Mode with Thresholds using Hugo Shortcode
DESCRIPTION: This Hugo shortcode embeds an image illustrating how the 'Scheme' gradient mode appears when the color scheme is set to 'From thresholds (by value)'. It renders an HTML figure element containing the specified image, setting its source, maximum width, and alternative text.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/visualizations/graph-styles-options.md#2025-04-23_snippet_0

LANGUAGE: Hugo Shortcode
CODE:
```
{{< figure src="/static/img/docs/time-series-panel/gradient_mode_scheme_thresholds_line.png" max-width="1200px" alt="Colors scheme: From thresholds" >}}
```

----------------------------------------

TITLE: Sample Output: Owners with Dependency Counts - Plaintext
DESCRIPTION: This snippet showcases a sample output from running the 'owners -a -c' command with Modowners. The output lists teams and the number of dependencies they own, each on its own line. This provides insight into ownership distribution across teams for audit or reporting purposes.
SOURCE: https://github.com/grafana/grafana/blob/main/scripts/modowners/README.md#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
@grafana/grafana-release-guild 5\n@grafana/grafana-bi-squad 2\n@grafana/grafana-app-platform-squad 13\n@grafana/observability-metrics 4\n@grafana/observability-traces-and-profiling 6\n@grafana/aws-datasources 2\n@grafana/alerting-squad-backend 22\n@grafana/plugins-platform-backend 7\n@grafana/grafana-operator-experience-squad 3\n@grafana/dataviz-squad 1\n@grafana/grafana-backend-group 75\n@grafana/grafana-as-code 11\n@grafana/identity-access-team 6\n@grafana/partner-datasources 4
```

----------------------------------------

TITLE: Example HTTP Request for Updating a Grafana Role
DESCRIPTION: Illustrates an HTTP PUT request to the `/api/access-control/roles/:uid` endpoint to update an existing Grafana role identified by its UID (`jZrmlLCGka`). The request body must include an incremented `version` number and the complete updated role definition (name, description, permissions, etc.), which replaces the existing role configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_9

LANGUAGE: http
CODE:
```
PUT /api/access-control/roles/jZrmlLCGka
Accept: application/json
Content-Type: application/json

{
    "version": 3,
    "name": "custom:delete:write:roles",
    "displayName": "custom delete write roles",
    "description": "My custom role which gives users permissions to delete and write roles",
    "group":"My Group",
    "displayName": "My Custom Role",
    "global": false,
    "permissions": [
        {
            "action": "roles:delete",
            "scope": "permissions:type:delegate"
        },
        {
            "action": "roles:write",
            "scope": "permissions:type:delegate"
        }
    ]
}
```

----------------------------------------

TITLE: Querying Current Organization Preferences via HTTP API - HTTP
DESCRIPTION: GET request to the organization preferences endpoint, returning the organization-wide default preferences. Uses Bearer authentication and expects/returns JSON payload. Suitable for administrators needing to audit or manage org-level defaults.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
GET /api/org/preferences HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Importing and Using FilterPill Component in JSX
DESCRIPTION: This JSX snippet demonstrates how to import the `FilterPill` component from `@grafana/ui` and render it within a React application. It shows the basic usage with a `label` prop to set the text displayed on the pill and an `onClick` prop to define the action (logging to console in this example) performed when the pill is clicked.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/FilterPill/FilterPill.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { FilterPill } from '@grafana/ui';

<FilterPill label={'Test'} onClick={() => console.log('toggle')} />;
```

----------------------------------------

TITLE: Generating Interface Mocks with Mockery in Go
DESCRIPTION: Command to generate mock implementations using the mockery library, which automates creating mocks for large interfaces. Includes explanation of key parameters.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/style-guide.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
mockery --name InterfaceName --structname MockImplementationName --inpackage --filename my_implementation_mock.go
```

----------------------------------------

TITLE: Overriding License Path in Grafana Configuration File (INI)
DESCRIPTION: Specifies a custom path to the Grafana Enterprise license JWT file for license updates, overriding standard defaults. This is used when renewing or replacing a license to ensure Grafana loads the new file. The license_path property should match the location of the current (possibly replaced) license file. No output is produced, but incorrect path can prevent license acceptance.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/_index.md#2025-04-23_snippet_4

LANGUAGE: ini
CODE:
```
[enterprise]\nlicense_path = /path/to/your/license.jwt
```

----------------------------------------

TITLE: Comparing Span Attributes with TraceQL (TraceQL)
DESCRIPTION: Demonstrates a TraceQL query to match traces where span attributes meet specific values, using logical operators to combine conditions. Requires a configured multi-stack Tempo data source in Grafana with appropriate X-Scope-OrgID header for cross-tenant access. The example illustrates that condition satisfaction in separate tenants will not return a matching trace, as TraceQL considers traces within contiguous storage. Input includes span attributes/value checks; outputs are matching trace results or an empty set if distributed across tenants. Limitation: Conditions must be met within the same tenant for a trace to be returned.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/tempo/query-editor/_index.md#2025-04-23_snippet_0

LANGUAGE: TraceQL
CODE:
```
{ span.attr1 = \"bar\" } && { span.attr2 = \"foo\" }
```

----------------------------------------

TITLE: Resolving Multiple Dependency Issue in Go with Wire
DESCRIPTION: This snippet demonstrates how to resolve the multiple dependency issue by creating a new type to differentiate between dependencies of the same underlying type. It shows wrapping and unwrapping techniques to work with Wire's injection system.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/faq.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
type OtherFoo Foo

func newOtherFoo() *OtherFoo {
	// Call the original provider...
	foo := newFoo2()
	// ...then convert it to the new type.
	return (*OtherFoo)(foo)
}

func provideBar(foo1 *Foo, otherFoo *OtherFoo) *Bar {
	// Convert the new type into the unwrapped type...
	foo2 := (*Foo)(otherFoo)
	// ...then use it to call the original provider.
	return newBar(foo1, foo2)
}

func inject() *Bar {
	wire.Build(newFoo1, newOtherFoo, provideBar)
	return nil
}
```

----------------------------------------

TITLE: Enabling Aggregation for Prometheus Data Source
DESCRIPTION: This bash script sets the KUBECONFIG environment variable and applies a Kubernetes configuration file to enable aggregation for a Prometheus data source.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/aggregator/README.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
export KUBECONFIG=./data/grafana-apiserver/grafana.kubeconfig
kubectl apply -f pkg/aggregator/examples/datasource.yml --validate=false
```

----------------------------------------

TITLE: Sharing Embed Link for Panel - Markdown
DESCRIPTION: Documents 'pe' as the keyboard shortcut for opening the share embed dialog on a hovered Grafana panel. This allows users to retrieve embeddable code for the selected panel. No additional context or dependencies beyond enabled keyboard shortcuts.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_5

LANGUAGE: markdown
CODE:
```
`pe`
```

----------------------------------------

TITLE: Illustrating Grafana's Variable Parameter Interpretation
DESCRIPTION: This snippet explicitly shows the query parameter format Grafana recognizes for setting dashboard variables. The 'var-example=value' parameter sets the dashboard variable 'example' to 'value'. The 'var-' prefix signals Grafana to interpret the parameter as a variable assignment.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/create-dashboard-url-variables/index.md#2025-04-23_snippet_2

LANGUAGE: uri
CODE:
```
https://${your-domain}/path/to/your/dashboard?var-example=value
```

----------------------------------------

TITLE: Toggling Panel Fullscreen - Markdown
DESCRIPTION: This snippet documents the use of the 'v' key to toggle fullscreen mode for a Grafana panel. The user must first hover over the target panel. There's no programmatic dependency; the input is the keyboard shortcut and the output is the panel entering or exiting fullscreen mode.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
`v`
```

----------------------------------------

TITLE: Creating Migration Session with Grafana API - Bash
DESCRIPTION: This curl command creates a new migration session via the Grafana API. It sends a POST request with a JSON body containing an authentication token to the /api/cloudmigration/migration endpoint. Dependencies: Requires curl, access to a running Grafana instance, and proper admin credentials. The AuthToken field should carry a valid token, and the output will be a session object if successful.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/cloudmigration/api/curl_commands.txt#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
curl -X POST -H \"Content-Type: application/json\" \\
  http://admin:admin@localhost:3000/api/cloudmigration/migration \\
  -d '{"AuthToken":"eyJUb2tlbiI6ImNvbXBsZXRlbHlfZmFrZV90b2tlbl9jZG9peTFhYzdwdXlwZCIsIkluc3RhbmNlIjp7IlN0YWNrSUQiOiAzODYzLCJTbHVnIjoic3R1Ymluc3RhbmNlIiwiUmVnaW9uU2x1ZyI6ImZha2UtcmVnaW9uIiwiQ2x1c3RlclNsdWciOiJmYWtlLWNsdXNlciJ9fQo="}'
```

----------------------------------------

TITLE: Deleting Alert Rules with YAML Provisioning in Grafana
DESCRIPTION: Specifies the alert rule UIDs for deletion within a Grafana instance using YAML configuration. This snippet requires Grafana provisioning and file access to the appropriate configuration directory. Each entry must include the organization ID and the unique rule UID that should be deleted. When the file is applied (on startup or via reload), the listed rules are removed. The file must be edited and Grafana reloaded for future deletions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
# config file version\napiVersion: 1\n\n# List of alert rule UIDs that should be deleted\ndeleteRules:\n  # <int> organization ID, default = 1\n  - orgId: 1\n    # <string, required> unique identifier for the rule\n    uid: my_id_1
```

----------------------------------------

TITLE: Checking Provisioning Validity with --dry-run - kubectl Bash
DESCRIPTION: Runs a 'kubectl apply' dry-run against 'grafana.yaml' to validate manifest correctness on the API server without making changes. Useful for syntax and conflict checks before applying changes in production. Shows typical success output structure for unchanged objects.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_36

LANGUAGE: bash
CODE:
```
kubectl apply -f grafana.yaml --dry-run=server --namespace=grafana

```

----------------------------------------

TITLE: Label Examples for Joining in Grafana Expressions
DESCRIPTION: Illustrates examples of labels used to identify individual series or numbers. These labels are used for joining data in binary operations, including exact matches and subset matching.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_4

LANGUAGE: Grafana Expressions
CODE:
```
{host=web01}
```

LANGUAGE: Grafana Expressions
CODE:
```
{host=A,dc=MIA}
```

LANGUAGE: Grafana Expressions
CODE:
```
{host=A}
```

----------------------------------------

TITLE: Removing Whitespace with '-}}' in Go Templates
DESCRIPTION: Demonstrates how to remove unwanted leading/trailing whitespace and line breaks caused by template formatting. By replacing the closing delimiter `}}` with `-}}` (specifically `{{ range ... -}}`), the whitespace adjacent to the tag is trimmed from the output.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_14

LANGUAGE: go
CODE:
```
{{ range .Alerts -}}
  {{ range .Labels.SortedPairs -}}
    {{ .Name }} = {{ .Value }}
  {{ end }}
{{ end }}
```

----------------------------------------

TITLE: Including Field Overrides Documentation using Hugo Shortcode
DESCRIPTION: This Hugo shortcode dynamically includes shared documentation content related to field override options. It references a specific markdown file (`visualizations/overrides-options.md`) from the `grafana` source, promoting documentation reuse. The `<GRAFANA_VERSION>` placeholder indicates that the specific version of the documentation to include is determined dynamically.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/canvas/index.md#2025-04-23_snippet_3

LANGUAGE: hugo
CODE:
```
{{< docs/shared lookup="visualizations/overrides-options.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Language Definition Interface
DESCRIPTION: Defines the interface for customizing SQL language behavior including language loading and completion provider configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-sql/src/components/query-editor-raw/README.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
interface LanguageDefinition extends monacoTypes.languages.ILanguageExtensionPoint {
  // TODO: Will allow providing a custom language definition.
  loadLanguage?: (module: any) => Promise<void>;
  // Provides API for customizing the autocomplete
  completionProvider?: (m: Monaco) => SQLCompletionItemProvider;
}
```

----------------------------------------

TITLE: Implementing Row Expansion in InteractiveTable with TSX
DESCRIPTION: This TSX snippet shows how to enable row expansion in the `InteractiveTable`. It defines a `TableData` interface, sample data, and column definitions. An `ExpandedCell` component is created to render the content of the expanded row area. The `InteractiveTable` component is configured with the `renderExpandedRow` prop pointing to the `ExpandedCell` component and `showExpandAll` to optionally display a button to expand all rows. The `getRowId` prop is used to uniquely identify each row.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InteractiveTable/InteractiveTable.mdx#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
interface TableData {
  datasource: string;
  repo: string;
  description: string;
}

const tableData: TableData[] = [
  //...
];

const columns: Array<Column<TableData>> = [
  //...
];

const ExpandedCell = ({ description }: TableData) => {
  return <p>{description}</p>;
};

export const MyComponent = () => {
  return (
    <InteractiveTable
      columns={columns}
      data={tableData}
      getRowId={(r) => r.datasource}
      renderExpandedRow={ExpandedCell}
      showExpandAll
    />
  );
};
```

----------------------------------------

TITLE: Testing Select Component Rendering in Grafana
DESCRIPTION: Example test for verifying that a Select component (OrgRolePicker) renders correctly. It demonstrates the recommended practice of querying Select components by using a label and checking for the presence of the combobox role.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/testing.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
describe('OrgRolePicker', () => {
  it('should render the picker', () => {
    setup(
      <>
        <label htmlFor={'role-picker'}>Role picker</label>
        <OrgRolePicker value={OrgRole.Admin} inputId={'role-picker'} onChange={() => {}} />
      </>
    );
    expect(screen.getByRole('combobox', { name: 'Role picker' })).toBeInTheDocument();
  });
});
```

----------------------------------------

TITLE: Displaying Inviter Name in Go Template
DESCRIPTION: This Go template snippet inserts the value of the `.InvitedBy` variable from the provided context data into the email body. It identifies the person who sent the Grafana organization invitation. Requires the Go templating engine and the `.InvitedBy` variable in the context.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/new_user_invite.txt#2025-04-23_snippet_2

LANGUAGE: gotemplate
CODE:
```
{{.InvitedBy}}
```

----------------------------------------

TITLE: Grafana Plugin Manifest JSON Configuration
DESCRIPTION: A manifest file that defines the plugin metadata, version, signing information, and file hashes for integrity verification. The manifest includes hashes for module.js files and plugin.json configurations across different directories.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/pluginsintegration/pluginassets/testdata/module-hash-valid-deeply-nested/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "plugin": "test-app",
  "version": "1.0.0",
  "time": 1726234125061,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "datasource/module.js": "04d70db091d96c4775fb32ba5a8f84cc22893eb43afdb649726661d4425c6711",
    "datasource/plugin.json": "3fd712717a21617cc76f9043efcd43d4ebf5564dd155a28e4e3c736739f6931e",
    "datasource/panels/one/module.js": "cbd1ac2284645a0e1e9a8722a729f5bcdd2b831222728709c6360beecdd6143f",
    "datasource/panels/one/plugin.json": "b9b4556a7220ea77650ffd228da6d441e68df3405d50dab5773c10f4afae5ad3",
    "module.js": "266c19bc148b22ddef2a288fc5f8f40855bda22ccf60be53340b4931e469ae2a",
    "plugin.json": "31f04aceb2a9b14c2e501f38a4de5ab1c7a3e7306f58353fa5c1a86b716c971c"
  }
}
```

----------------------------------------

TITLE: Changing User Password via Grafana API (HTTP/JSON)
DESCRIPTION: Updates the password for the authenticated user via a PUT request to `/api/user/password`. Requires Basic Authentication and a JSON payload containing `oldPassword` and `newPassword`. Returns a JSON success message upon completion.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_15

LANGUAGE: http
CODE:
```
PUT /api/user/password HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Basic YWRtaW46YWRtaW4=

{
  "oldPassword": "old_password",
  "newPassword": "new_password"
}
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{"message":"User password changed"}
```

----------------------------------------

TITLE: LBAC Rules API Response Example in HTTP
DESCRIPTION: This is an example HTTP response for a successful GET request to retrieve LBAC rules. It returns a JSON object containing an array of rules, each associating a team UID with specific LBAC rules.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/datasource_lbac_rules.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Content-Length: 131

{
  "rules": [
    {
      "teamUId": "fdnd1pf4m9sxvc",
      "rules": [
        "{ service_name=\"bigquery-sync-mysql\" }"
      ]
    },
    {
      "teamUid": "dfed1p2m9sxvfc",
      "rules": [
        "{ service_name=\"api\" }"
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Embedding Image using Hugo Figure Shortcode (Loki Forward Search)
DESCRIPTION: This Hugo shortcode embeds an image with an optional caption into the documentation. This specific instance displays a screenshot illustrating the 'Forward' direction search option for Loki logs within Grafana's Explore interface. The `src` parameter points to the image file path, and `alt` provides alternative text.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-2.md#2025-04-23_snippet_1

LANGUAGE: hugo
CODE:
```
{{< figure src="/static/img/logs/forward_search.png" alt="Explore logs with the Direction option selected" caption-align="left" >}}
```

----------------------------------------

TITLE: Building Grafana Docker Container
DESCRIPTION: Commands to build a Grafana docker container from the current branch and tag it as grafana/grafana:dev
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha_test/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ cd <grafana repo>
$ make build-docker-full
```

----------------------------------------

TITLE: Using AutoSizeInput with Prefix Icon in React JSX
DESCRIPTION: This snippet demonstrates how to add a prefix element, specifically an `Icon` component with the name "search", to the `AutoSizeInput` component using the `prefix` prop. This is useful for adding visual context or indicators to the input field. It requires the `AutoSizeInput` and `Icon` components.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Input/AutoSizeInput.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<AutoSizeInput prefix={<Icon name="search" />} />
```

----------------------------------------

TITLE: Defining a Wire Provider Set for Greeters in Go
DESCRIPTION: Illustrates how to create a Wire provider set for greeters, including multiple greeter implementations and their dependencies.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/best-practices.md#2025-04-23_snippet_2

LANGUAGE: go
CODE:
```
var GreeterSet = wire.NewSet(NewStdoutGreeter)

func DefaultGreeter(ctx context.Context) *Greeter {
    // ...
}

func NewStdoutGreeter(ctx context.Context, msgs []Message) *Greeter {
    // ...
}

func NewGreeter(ctx context.Context, w io.Writer, msgs []Message) (*Greeter, error) {
    // ...
}
```

----------------------------------------

TITLE: Provisioning Directory Structure for Grafana - Directory Layout
DESCRIPTION: This pseudo-code snippet shows the expected directory layout for storing provisioning manifests. The 'provisioning/' folder contains subfolders for 'datasources/' and 'dashboards/', each holding YAML files defining resources to be provisioned. The correct directory structure is required for Grafana to automatically discover and apply configuration files at startup or runtime. No dependencies are required for this layout, but the file content formats must match Grafana's provisioning specifications.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/provision-dashboards-and-data-sources/index.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
provisioning/\n  datasources/\n    <yaml files>\n  dashboards/\n    <yaml files>\n
```

----------------------------------------

TITLE: Starting Example Aggregated Microservice (Shell)
DESCRIPTION: This command uses `go run` to start an instance of the Grafana API server configured specifically to act as the example microservice (`example.grafana.app/v0alpha1`). It specifies the secure port (7443), provides the necessary TLS server certificate and key (`server.crt`, `server.key`), configures request header authentication using the CA certificate (`ca.crt`) and specific header names for user/group information, and sets verbosity to 10. This service runs independently and will be discovered and proxied by the main Grafana aggregator.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/aggregator/README.md#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
go run ./pkg/cmd/grafana apiserver \
  --runtime-config=example.grafana.app/v0alpha1=true \
  --secure-port 7443 \
  --tls-cert-file $PWD/data/grafana-aggregator/server.crt \
  --tls-private-key-file $PWD/data/grafana-aggregator/server.key \ 
  --requestheader-client-ca-file=$PWD/data/grafana-aggregator/ca.crt \
  --requestheader-extra-headers-prefix=X-Remote-Extra- \
  --requestheader-group-headers=X-Remote-Group \
  --requestheader-username-headers=X-Remote-User \
  -v 10
```

----------------------------------------

TITLE: Storybook Args Documentation
DESCRIPTION: JSX component for displaying the CollapsableSection component's props documentation.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Collapse/CollapsableSection.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
<ArgTypes of={CollapsableSection} />
```

----------------------------------------

TITLE: Installing a Specific Version of a Plugin (Bash)
DESCRIPTION: Command to install a particular version of a Grafana plugin, specified by both '<plugin-id>' and '<version>'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_14

LANGUAGE: bash
CODE:
```
grafana cli plugins install <plugin-id> <version>
```

----------------------------------------

TITLE: Getting Report Settings via HTTP GET Request
DESCRIPTION: Example of retrieving global reports branding settings including logos and email footer configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_9

LANGUAGE: http
CODE:
```
GET /api/reports/settings HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Reporting Multiple Provider Bindings with Wire (Go)
DESCRIPTION: This snippet generates a diagnostic message when the Wire dependency injection tool detects multiple conflicting bindings for a specific type (e.g., example.com/foo.Foo or example.com/foo.Bar) in Go source files. It lists the current active provider chain and all previous providers or provider sets that contributed the same dependency, referencing their source locations and kinds (provider, provider set, value, bind). These messages assist developers in troubleshooting and resolving ambiguous dependency graph setups. There are no third-party dependencies besides Wire itself; expected input is the result of running Wire's diagnostic routines, and output is verbose, human-readable diagnostic text. Limitations: Not intended for programmatic parsing, but for human investigation of dependency wiring errors.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/MultipleBindings/want/wire_errs.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
example.com/foo/wire.go:x:y: multiple bindings for example.com/foo.Foo
current:
<- provider "provideFooAgain" (example.com/foo/foo.go:x:y)
previous:
<- provider "provideFoo" (example.com/foo/foo.go:x:y)

```

LANGUAGE: plaintext
CODE:
```
example.com/foo/wire.go:x:y: multiple bindings for example.com/foo.Foo
current:
<- provider "provideFoo" (example.com/foo/foo.go:x:y)
previous:
<- provider "provideFoo" (example.com/foo/foo.go:x:y)
<- provider set "Set" (example.com/foo/foo.go:x:y)

```

LANGUAGE: plaintext
CODE:
```
example.com/foo/wire.go:x:y: multiple bindings for example.com/foo.Foo
current:
<- provider "provideFoo" (example.com/foo/foo.go:x:y)
previous:
<- provider "provideFoo" (example.com/foo/foo.go:x:y)
<- provider set "Set" (example.com/foo/foo.go:x:y)
<- provider set "SuperSet" (example.com/foo/foo.go:x:y)

```

LANGUAGE: plaintext
CODE:
```
example.com/foo/foo.go:x:y: SetWithDuplicateBindings has multiple bindings for example.com/foo.Foo
current:
<- provider "provideFoo" (example.com/foo/foo.go:x:y)
<- provider set "Set" (example.com/foo/foo.go:x:y)
<- provider set "SuperSet" (example.com/foo/foo.go:x:y)
previous:
<- provider "provideFoo" (example.com/foo/foo.go:x:y)
<- provider set "Set" (example.com/foo/foo.go:x:y)

```

LANGUAGE: plaintext
CODE:
```
example.com/foo/wire.go:x:y: multiple bindings for example.com/foo.Foo
current:
<- wire.Value (example.com/foo/wire.go:x:y)
previous:
<- provider "provideFoo" (example.com/foo/foo.go:x:y)

```

LANGUAGE: plaintext
CODE:
```
example.com/foo/wire.go:x:y: multiple bindings for example.com/foo.Bar
current:
<- wire.Bind (example.com/foo/wire.go:x:y)
previous:
<- provider "provideBar" (example.com/foo/foo.go:x:y)

```

----------------------------------------

TITLE: Select Component with Custom Value - After
DESCRIPTION: Updated implementation requiring onCreateOption handler for custom value support
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/CHANGELOG.md#2025-04-23_snippet_3

LANGUAGE: JSX
CODE:
```
import { Select } from '@grafana/ui';
...
<Select
...
allowCustomValue
onCreateOption={(customValue) => {
    // Do things with the customValue
}}
/>
```

----------------------------------------

TITLE: Manual hosts file configuration
DESCRIPTION: Example of /etc/hosts entries for local Grafana and Prometheus access
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha_test/README.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ cat /etc/hosts
127.0.0.1       grafana.loc
127.0.0.1       prometheus.loc
```

----------------------------------------

TITLE: Defining Grafana Email Contact Point using Terraform
DESCRIPTION: Creates a Grafana contact point named 'My contact point email' configured to send alert notifications via email. Requires replacing the placeholder Terraform resource name (`<terraform_contact_point_name>`) and the recipient email address (`<email_address>`). This resource defines a target for alert notifications.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_3

LANGUAGE: terraform
CODE:
```
 resource "grafana_contact_point" "<terraform_contact_point_name>" {
     name = "My contact point email"

     email {
         addresses               = ["<email_address>"]
     }
 }
```

----------------------------------------

TITLE: Converting Time with Go Template Function - Go Template
DESCRIPTION: Illustrates use of the {{ toTime }} function to convert a Unix timestamp (in seconds) into a Go time object, formatted as a date-time string. Requires Grafana Go template context. Input is a numerical Unix timestamp, output is a time string (RFC3339 displayed). Function is specific to Grafana's implementation of Go templates.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_7

LANGUAGE: Go Template
CODE:
```
{{ toTime 1727802106 }}

```

----------------------------------------

TITLE: Building Keycloak Docker Image for Mac M1
DESCRIPTION: Commands to remove existing Keycloak images and build a new one compatible with Mac M1 architecture.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/jwt_proxy/readme.md#2025-04-23_snippet_6

LANGUAGE: sh
CODE:
```
$ docker rmi $(docker images | grep 'keycloak')
```

LANGUAGE: sh
CODE:
```
$ ./docker-build-keycloak-m1-image.sh
```

----------------------------------------

TITLE: Configuring Grafana for Iframe Embedding
DESCRIPTION: Additional INI configuration to allow embedding Grafana dashboards in iframes.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/jwt_proxy/readme.md#2025-04-23_snippet_4

LANGUAGE: ini
CODE:
```
[security]
allow_embedding = true
```

----------------------------------------

TITLE: Building and Watching Core Grafana Frontend
DESCRIPTION: Starts the development process for the core Grafana frontend. This command typically builds the frontend assets and watches for file changes, enabling live reloading during development, making the development feedback loop faster.
SOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/README.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
yarn start
```

----------------------------------------

TITLE: Naming Series by Metric Path Node with aliasByNode() in Graphite
DESCRIPTION: The `aliasByNode()` function dynamically generates a series alias based on a specified node (part) of the metric path. The integer argument (e.g., `2`) indicates the zero-indexed node position to use for the alias, simplifying legend management for metrics with structured naming conventions.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/graphite/query_help.md#2025-04-23_snippet_1

LANGUAGE: Graphite Query Language
CODE:
```
aliasByNode(2)
```

----------------------------------------

TITLE: Defining Grafana Fixed Role: fixed:folders:writer
DESCRIPTION: Specifies the `fixed:folders:writer` role (ID: `fixed_wJXLoTzgE7jVuz90dryYoiogL0o`) within Grafana. This role includes all permissions from `fixed:dashboards:writer` and adds folder management capabilities (`folders:read`, `folders:write`, `folders:create`, `folders:delete`) and folder permission management (`folders.permissions:read`, `folders.permissions:write`). It allows users to read, update, and delete all folders and dashboards, create folders and subfolders, and manage folder permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_9

LANGUAGE: plaintext
CODE:
```
fixed:folders:writer
```

LANGUAGE: plaintext
CODE:
```
fixed_wJXLoTzgE7jVuz90dryYoiogL0o
```

LANGUAGE: plaintext
CODE:
```
Permissions included:
- fixed:dashboards:writer
- folders:read
- folders:write
- folders:create
- folders:delete
- folders.permissions:read
- folders.permissions:write
```

----------------------------------------

TITLE: Syntax Example for Accessing Vault Database Secrets
DESCRIPTION: Demonstrates the Grafana variable expansion syntax (`$__vault{<argument>}`) for retrieving dynamic credentials from a Vault database secrets engine. The argument specifies the engine (`database`), the credential path (`database/creds/grafana`), and the field name (`username`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/integrate-with-hashicorp-vault/index.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
$__vault{database:database/creds/grafana:username}
```

----------------------------------------

TITLE: Removed Data Source Permission API Endpoints in Grafana v10.3*
DESCRIPTION: Lists the specific data source permission API endpoints that have been removed in Grafana v10.3 (backported from v10.2.3*). Automation or integrations relying on these endpoints will break and need to be updated to use the new access control endpoints.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v10-3.md#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
- `GET /datasources/:datasourceId/permissions`
- `POST /api/datasources/:datasourceId/permissions`
- `DELETE /datasources/:datasourceId/permissions`
- `POST /datasources/:datasourceId/enable-permissions`
- `POST /datasources/:datasourceId/disable-permissions`
```

----------------------------------------

TITLE: Listing Supported Visualizations using Column List Shortcode
DESCRIPTION: This Hugo shortcode block creates a multi-column list. Inside the block, standard Markdown list items are used, referencing other documentation pages using the `ref:` syntax defined in the YAML frontmatter. This snippet lists Grafana visualizations that support threshold configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/configure-thresholds/index.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
{{< column-list >}}

- [Bar chart](ref:bar-chart)
- [Bar gauge](ref:bar-gauge)
- [Candlestick](ref:candlestick)
- [Canvas](ref:canvas)
- [Gauge](ref:gauge)
- [Geomap](ref:geomap)
- [Histogram](ref:histogram)
- [Stat](ref:stat)
- [State timeline](ref:state-timeline)
- [Status history](ref:status-history)
- [Table](ref:table)
- [Time series](ref:time-series)
- [Trend](ref:trend)

{{< /column-list >}}
```

----------------------------------------

TITLE: Building Docker Stack using docker-compose (Shell)
DESCRIPTION: Builds the Docker images defined in the `docker-compose.yml` file within the repository using the `docker-compose build` command. This prepares the Grafana, Prometheus, and other necessary services for the tutorial environment as part of the interactive setup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
docker-compose build
```

----------------------------------------

TITLE: Button with data-testid for Testing Only
DESCRIPTION: Example of a button using data-testid attribute for testing identification without affecting screen readers.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_11

LANGUAGE: html
CODE:
```
<button data-testid="modal-close-button">Close<button>
```

----------------------------------------

TITLE: Adding Client-Side Pagination to InteractiveTable in TSX
DESCRIPTION: This TSX example shows how to enable client-side pagination for the `InteractiveTable`. It defines an interface `WithPaginationData`, provides sample data (`pageableData`), and defines the table columns. Pagination is enabled by passing the `pageSize` prop to the `InteractiveTable` component, specifying the number of rows per page. All data must be provided upfront as only client-side pagination is supported.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InteractiveTable/InteractiveTable.mdx#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
interface WithPaginationData {
  id: string;
  firstName: string;
  lastName: string;
  car: string;
  age: number;
}

export const MyComponent = () => {
  const pageableData: WithPaginationData[] = [
    { id: '48a3926a-e82c-4c26-b959-3a5f473e186e', firstName: 'Brynne', lastName: 'Denisevich', car: 'Cougar', age: 47 },
    {
      id: 'cf281390-adbf-4407-8cf3-a52e012f63e6',
      firstName: 'Aldridge',
      lastName: 'Shirer',
      car: 'Viper RT/10',
      age: 74,
    },
    // ...
    {
      id: 'b9b0b559-acc1-4bd8-b052-160ecf3e4f68',
      firstName: 'Ermanno',
      lastName: 'Sinott',
      car: 'Thunderbird',
      age: 26,
    },
  ];
  const columns: Array<Column<WithPaginationData>> = [
    { id: 'firstName', header: 'First name' },
    { id: 'lastName', header: 'Last name' },
    { id: 'car', header: 'Car', sortType: 'string' },
    { id: 'age', header: 'Age', sortType: 'number' },
  ];
  return <InteractiveTable columns={columns} data={pageableData} getRowId={(r) => r.id} pageSize={15} />;
};
```

----------------------------------------

TITLE: Updating a Data Source by UID via Grafana API - HTTP
DESCRIPTION: This API call updates an existing data source identified by its unique UID string using the modern endpoint. The PUT request includes new or updated fields in JSON form, with sensitive data placed under secureJsonData for encryption. Requires bearer authentication. Response echoes most recent config, lists encrypted fields, and confirms the update. Only available in recent versions of Grafana, preferable to the deprecated ID method.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_9

LANGUAGE: http
CODE:
```
PUT /api/datasources/uid/kLtEtcRGk HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  "id":1,\n  "uid": "updated UID",\n  "orgId":1,\n  "name":"test_datasource",\n  "type":"graphite",\n  "access":"proxy",\n  "url":"http://mydatasource.com",\n  "password":"",\n  "user":"",\n  "database":"",\n  "basicAuth":true,\n  "basicAuthUser":"basicuser",\n  "secureJsonData": {\n    "basicAuthPassword": "basicpassword"\n  },\n  "isDefault":false,\n  "jsonData":null\n}
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{\n  "datasource": {\n    "id": 1,\n    "uid": "updated UID",\n    "orgId": 1,\n    "name": "test_datasource",\n    "type": "graphite",\n    "typeLogoUrl": "",\n    "access": "proxy",\n    "url": "http://mydatasource.com",\n    "password": "",\n    "user": "",\n    "database": "",\n    "basicAuth": true,\n    "basicAuthUser": "basicuser",\n    "basicAuthPassword": "",\n    "withCredentials": false,\n    "isDefault": false,\n    "jsonData": {},\n    "secureJsonFields": {\n      "basicAuthPassword": true\n    },\n    "version": 1,\n    "readOnly": false\n  },\n  "id": 102,\n  "message": "Datasource updated",\n  "name": "test_datasource"\n}
```

----------------------------------------

TITLE: Using useStyles2 Hook for Theming in React Components
DESCRIPTION: Demonstrates how to use the useStyles2 hook to apply themed styles in a React component. The hook memoizes the styling function and provides access to the theme object.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/themes.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import { FC } from 'react';
import { GrafanaTheme2 } from '@grafana/data';
import { useStyles2 } from '@grafana/ui';
import { css } from '@emotion/css';

function Foo(props: FooProps) {
  const styles = useStyles2(getStyles);
  // Use styles with className
}

const getStyles = (theme: GrafanaTheme2) =>
  css({
    padding: theme.spacing(1, 2),
  });
```

----------------------------------------

TITLE: Launching JWT Proxy Block in Grafana Devenv
DESCRIPTION: Command to start the Grafana development environment with JWT proxy authentication using the oauth source.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/jwt_proxy/readme.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
make devenv sources="auth/jwt_proxy"
```

----------------------------------------

TITLE: Configuring Draggable Manager Options in TypeScript
DESCRIPTION: Specifies the configuration type for initializing a draggable manager, listing the required bounds-mapping function and several optional event callbacks for handling drag and mouse events. It also allows specifying behavioral flags such as whether bounds reset on resize and a string tag for distinguishing manager instances. Callbacks use a shared update type and the object ensures type safety when setting up draggable interaction logic.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/explore/TraceView/components/utils/DraggableManager/README.md#2025-04-23_snippet_5

LANGUAGE: TypeScript
CODE:
```
type DraggableManagerOptions = {
  getBounds: (?string) => DraggableBounds,
  onMouseEnter?: DraggingUpdate => void,
  onMouseLeave?: DraggingUpdate => void,
  onMouseMove?: DraggingUpdate => void,
  onDragStart?: DraggingUpdate => void,
  onDragMove?: DraggingUpdate => void,
  onDragEnd?: DraggingUpdate => void,
  resetBoundsOnResize?: boolean,
  tag?: string,
};
```

----------------------------------------

TITLE: Range Query with Reduce Expression Value Interpolation - Go Template - Markdown
DESCRIPTION: This snippet is similar to the previous, but uses $values.B.Value, which may refer to a reduce expression result in Grafana alerting. The context is when a query in Ref ID 'A' is a range query, so a reduce expression (Ref ID 'B') is used for a single float value. Required dependencies are alerting rule setup in Grafana with both range and reduce instant queries. Both $values.B.Value and $labels.instance must be available for the template to work.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_3

LANGUAGE: Go Template
CODE:
```
{{ $values.B.Value }} CPU usage for {{ $labels.instance }} over the last 5 minutes.
```

----------------------------------------

TITLE: Installing Grafana UI via npm - Bash
DESCRIPTION: This snippet shows how to install the @grafana/ui package using npm. Make sure npm is installed. This command adds @grafana/ui to your node_modules and records it in your package.json dependencies. No parameters are required. The input is the package name and the output is an updated package.json and installed files.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/README.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm install @grafana/ui
```

----------------------------------------

TITLE: Creating Alert Message Templates for Grafana Alerts
DESCRIPTION: This code snippet demonstrates how to format alert messages using Grafana's templating syntax. It retrieves label values and formats numeric values to a specific number of decimal places for improved readability in alert notifications.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_4

LANGUAGE: text
CODE:
```
{{  $values.D.Labels.Source }} at the {{  $values.D.Labels.Location }} has generated {{ printf "%.2f"  $values.D.Value }} jigowatts.
```

----------------------------------------

TITLE: Defining Grafana Fixed Role: fixed:folders.permissions:reader
DESCRIPTION: Specifies the `fixed:folders.permissions:reader` role (ID: `fixed_E06l4cx0JFm47EeLBE4nmv3pnSo`) within Grafana. This role grants the `folders.permissions:read` permission, allowing users to read all folder permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_10

LANGUAGE: plaintext
CODE:
```
fixed:folders.permissions:reader
```

LANGUAGE: plaintext
CODE:
```
fixed_E06l4cx0JFm47EeLBE4nmv3pnSo
```

LANGUAGE: plaintext
CODE:
```
Permissions included:
- folders.permissions:read
```

----------------------------------------

TITLE: Binary Operations in Grafana Expressions
DESCRIPTION: Examples of binary operations between variables in Grafana expressions. The behavior depends on the data types (number, time series) of the operands and involves a union based on labels.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_3

LANGUAGE: Grafana Expressions
CODE:
```
$A + $B
```

LANGUAGE: Grafana Expressions
CODE:
```
$A || $B
```

----------------------------------------

TITLE: Example Humanized Output
DESCRIPTION: This shows the example output of applying the `humanize` function to a query value (like 554900) within a Grafana alert template, resulting in a more readable format.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_11

LANGUAGE: plaintext
CODE:
```
554.9k
```

----------------------------------------

TITLE: Using 't' Function for Simple String Translation in JavaScript
DESCRIPTION: Shows the usage of the `t` function imported from `app/core/internationalization` to translate simple strings in JavaScript code, often used for element props like `placeholder`. It takes the translation key and the default English text as arguments.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_5

LANGUAGE: jsx
CODE:
```
import { t } from "app/core/internationalization"

const placeholder = t('form.username-placeholder','Username');

return <input type="value" placeholder={placeholder}>
```

----------------------------------------

TITLE: Using the is_null Function in Grafana Expressions
DESCRIPTION: Shows the usage of the `is_null` function to check if a value is null. It returns 1 for null values and 0 otherwise, applicable to numbers or time series.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_9

LANGUAGE: Grafana Expressions
CODE:
```
is_null($A)
```

----------------------------------------

TITLE: Setting Email Subject with Default in Go Template
DESCRIPTION: This Go template snippet uses a custom `HiddenSubject` function to set the email's subject line. It attempts to use the value of the `.Subject` variable passed in the template data, falling back to the default string "Welcome to Grafana" if `.Subject` is not available or empty. This is typically placed at the beginning of the template.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/welcome_on_signup.txt#2025-04-23_snippet_0

LANGUAGE: go-template
CODE:
```
{{HiddenSubject .Subject "Welcome to Grafana"}}
```

----------------------------------------

TITLE: Implementing EmptyState with Call-to-Action Variant and Button in JSX
DESCRIPTION: This snippet demonstrates how to use the `EmptyState` component from `@grafana/ui` with the `call-to-action` variant. It includes a custom message and a `LinkButton` to prompt the user to create a new playlist. Additional context is provided via children, including a `TextLink` for more information.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/EmptyState/EmptyState.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { EmptyState, LinkButton, TextLink } from '@grafana/ui';

<EmptyState
  variant="call-to-action"
  message="You haven't created any playlists yet"
  button={
    <LinkButton icon="plus" href="playlists/new" size="lg">
      Create playlist
    </LinkButton>
  }
>
  You can use playlists to cycle dashboards on TVs without user control.{' '}
  <TextLink external href="<externalDocsLink>">
    Learn more.
  </TextLink>
</EmptyState>;
```

----------------------------------------

TITLE: Displaying Spinner Component Example in Storybook
DESCRIPTION: This JSX code renders a canvas in Storybook to display the basic example of the Spinner component from the SpinnerStories.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Spinner/Spinner.mdx#2025-04-23_snippet_2

LANGUAGE: JSX
CODE:
```
<Canvas of={SpinnerStories.Basic} />
```

----------------------------------------

TITLE: Adding Header Tooltips to InteractiveTable Columns in TSX
DESCRIPTION: This TSX code demonstrates how to add tooltips to the headers of `InteractiveTable` columns. It defines the data interface, sample data, and columns similar to the pagination example. A `headerToolTips` object is created, mapping column IDs (`age`, `lastName`) to tooltip configuration objects. These configurations can include simple text content or a function returning JSX for more complex tooltips, as well as an optional `iconName`. The `InteractiveTable` is rendered with this `headerToolTips` prop.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InteractiveTable/InteractiveTable.mdx#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
interface WithPaginationData {
  id: string;
  firstName: string;
  lastName: string;
  car: string;
  age: number;
}

export const MyComponent = () => {
  const pageableData: WithPaginationData[] = [
    { id: '48a3926a-e82c-4c26-b959-3a5f473e186e', firstName: 'Brynne', lastName: 'Denisevich', car: 'Cougar', age: 47 },
    {
      id: 'cf281390-adbf-4407-8cf3-a52e012f63e6',
      firstName: 'Aldridge',
      lastName: 'Shirer',
      car: 'Viper RT/10',
      age: 74,
    },
    // ...
    {
      id: 'b9b0b559-acc1-4bd8-b052-160ecf3e4f68',
      firstName: 'Ermanno',
      lastName: 'Sinott',
      car: 'Thunderbird',
      age: 26,
    },
  ];
  const columns: Array<Column<WithPaginationData>> = [
    { id: 'firstName', header: 'First name' },
    { id: 'lastName', header: 'Last name' },
    { id: 'car', header: 'Car', sortType: 'string' },
    { id: 'age', header: 'Age', sortType: 'number' },
  ];

  const headerToolTips = {
    age: { content: 'The number of years since the person was born' },
    lastName: {
      content: () => {
        return (
          <>
            <h4>Here is an h4</h4>
            <div>Some content</div>
            <div>Some more content</div>
          </>
        );
      },
      iconName: 'plus-square',
    },
  };
  return (
    <InteractiveTable columns={columns} data={pageableData} getRowId={(r) => r.id} headerToolTips={headerToolTips} />
  );
};
```

----------------------------------------

TITLE: Example Response for Patching Annotation - HTTP+JSON
DESCRIPTION: Shows the confirmation message in the HTTP response after partially updating an annotation using PATCH. The JSON object contains only a 'message' key indicating a successful operation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_9

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{\n    "message":"Annotation patched"\n}
```

----------------------------------------

TITLE: Setting Email Subject via Go Template Directive
DESCRIPTION: This Go template directive, potentially custom to Grafana's email system, sets the subject line for the email. The `HiddenSubject` likely indicates a special handling mechanism, assigning the string "Welcome to Grafana" to the `.Subject` variable in the template's data context, which is then used as the email subject.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/welcome_on_signup.txt#2025-04-23_snippet_0

LANGUAGE: gotemplate
CODE:
```
[[HiddenSubject .Subject "Welcome to Grafana"]]
```

----------------------------------------

TITLE: Examining Wire Dependency Injection Error Message in Go
DESCRIPTION: This error occurs when using Wire for dependency injection in Go and a provider function returns an error type, but the injection site doesn't allow for error handling. The error message indicates that a provider for 'example.com/foo.Foo' returns an error that cannot be properly managed in the injection context.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/InjectorMissingError/want/wire_errs.txt#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
example.com/foo/wire.go:x:y: inject injectFoo: provider for example.com/foo.Foo returns error but injection not allowed to fail
```

----------------------------------------

TITLE: Checking Deployment and ConfigMap Status - kubectl Bash
DESCRIPTION: Checks the rollout status of the Grafana deployment, then lists all objects (pods, services, etc.) and ConfigMaps in the 'my-grafana' namespace. Useful to ensure proper deployment status and configuration propagation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_35

LANGUAGE: bash
CODE:
```
# first check the rollout status
kubectl rollout status deployment grafana --namespace=my-grafana

```

LANGUAGE: bash
CODE:
```
# then check the deployment and configMap information
kubectl get all --namespace=my-grafana

```

----------------------------------------

TITLE: Receiving Current Organization Preferences Response - JSON
DESCRIPTION: Sample JSON response for a successful GET to the organization preferences endpoint, containing theme, dashboard, and timezone settings. Response may have empty or default values indicating lack of overrides at the org level. Intended for administrative tools or inspection GUIs.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_7

LANGUAGE: json
CODE:
```
{\n    "theme": "",\n    "homeDashboardId": 0,\n    "timezone": "",\n    "weekStart": "",\n    "navbar": {\n        "bookmarkUrls": null\n    },\n    "queryHistory": {\n        "homeTab": ""\n    }\n}
```

----------------------------------------

TITLE: Adding Page Object to Pages Export
DESCRIPTION: Shows how to add a Login page object to the Pages export in the selectors file for accessibility in tests.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
export const Pages = {
  Login,
  …,
  …,
  …,
};
```

----------------------------------------

TITLE: Generating OpenAPI Specifications using Make Commands
DESCRIPTION: This bash command demonstrates how to regenerate the OpenAPI v2 and v3 specifications for Grafana. It cleans the existing swagger files and generates new OpenAPI 3 specifications.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/api/README.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
make swagger-clean && make openapi3-gen
```

----------------------------------------

TITLE: Enabling Shared Dashboard Feature - Grafana INI
DESCRIPTION: This setting enables or disables the shared dashboards feature in Grafana when placed under the '[public_dashboards]' section. Setting 'enabled = false' prevents users from creating or accessing shared dashboards. The key accepts boolean-like values and only applies if placed within the correct section of the configuration file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_35

LANGUAGE: ini
CODE:
```
enabled = false
```

----------------------------------------

TITLE: Starting Grafana Service with Homebrew on macOS
DESCRIPTION: Starts the Grafana service using Homebrew's services management. This command should be run after successfully installing Grafana via Homebrew. It ensures Grafana runs as a background service.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/mac/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
brew services start grafana
```

----------------------------------------

TITLE: Configuring skip_org_role_sync for OAuth Provider in Grafana (INI)
DESCRIPTION: Demonstrates how to enable the skip_org_role_sync option in the Grafana configuration for a Generic OAuth2 provider to prevent the synchronization and overriding of manually assigned organization roles during login. No additional dependencies are required beyond a standard Grafana configuration file. The relevant section is [auth.generic_oauth], where skip_org_role_sync is set to true; this is particularly important prior to upgrading to Grafana v10.1 to retain user role assignments. The configuration takes effect on all logins via the specified OAuth provider.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v10.1/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[auth.generic_oauth]
...
skip_org_role_sync = true
```

----------------------------------------

TITLE: Running Grafana with Unified Storage GRPC - Shell
DESCRIPTION: This shell command runs the Grafana server using Unified Storage with a GRPC backend by overriding the storage_type environment variable. This is required when you want Grafana to communicate with an externally running storage-server.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_19

LANGUAGE: sh
CODE:
```
GF_GRAFANA_APISERVER_STORAGE_TYPE=unified-grpc ./bin/grafana server
```

----------------------------------------

TITLE: Generating PKI for Grafana Aggregator Local Testing (Shell)
DESCRIPTION: Executes the `make-aggregator-pki.sh` script located in the `hack` directory. This script uses `openssl` to generate the required certificates and keys (CA, server, client) for secure communication between the Grafana aggregator and the example aggregated API servers during local development testing. The generated files are typically placed in the `data/grafana-aggregator` directory.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/aggregator/README.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
./hack/make-aggregator-pki.sh
```

----------------------------------------

TITLE: Dividing Series Element-wise with divideSeries() in Graphite
DESCRIPTION: The `divideSeries()` Graphite function performs element-wise division between two time series. The example shows how to use Grafana's query references (`#A`, `#B`) to pass the results of two separate queries as the dividend and divisor series for the function.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/graphite/query_help.md#2025-04-23_snippet_5

LANGUAGE: Graphite Query Language
CODE:
```
divideSeries(#A, #B)
```

----------------------------------------

TITLE: Updated Greet Method with Grumpy Check in Go
DESCRIPTION: Modifies the Greet method to return a different message if the Greeter is grumpy.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_11

LANGUAGE: go
CODE:
```
func (g Greeter) Greet() Message {
    if g.Grumpy {
        return Message("Go away!")
    }
    return g.Message
}
```

----------------------------------------

TITLE: Markdown Documentation for Grafana Runtime Library
DESCRIPTION: Documentation header and beta notice for the @grafana/runtime package, explaining its basic requirements and purpose.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-runtime/README.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
# Grafana Runtime library

> **@grafana/runtime is currently in BETA**.

This package allows access to grafana services. It requires Grafana to be running already and the functions to be imported as externals.
```

----------------------------------------

TITLE: Using UserIcon Component with Custom Children in React
DESCRIPTION: This example shows how to use the UserIcon component with custom children. It demonstrates passing a string as children to display additional information about extra users.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/UsersIndicator/UserIcon.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
import { UserIcon } from '@grafana/ui';

const ExampleComponent = () => {
  const userView = {
    user: { id: 1, name: 'John Smith', avatarUrl: 'https://example.com/avatar.png' },
    lastActiveAt: '2023-04-18T15:00:00.000Z',
  };

  return (
    <div>
      <UserIcon userView={userView} showTooltip={false}>
        +10
      </UserIcon>
    </div>
  );
};
```

----------------------------------------

TITLE: Cloning Demo Repository using Git (Bash)
DESCRIPTION: Clones the Grafana Prometheus alerting demo repository from GitHub using the `git clone` command. This is the first step in setting up the local tutorial environment.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/tonypowa/grafana-prometheus-alerting-demo.git
```

----------------------------------------

TITLE: Defining Grafana Notification Policies via YAML Provisioning
DESCRIPTION: This YAML snippet demonstrates the structure for provisioning Grafana notification policies. It includes defining the organization ID, the receiver contact point, grouping logic (`group_by`), matching rules (`matchers`, `object_matchers`), mute time intervals, and timing configurations (`group_wait`, `group_interval`, `repeat_interval`). Nested routes can also be defined within the `routes` key.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_25

LANGUAGE: yaml
CODE:
```
# config file version
apiVersion: 1

# List of notification policies
policies:
  # <int> organization ID, default = 1
  - orgId: 1
    # <string> name of the contact point that should be used for this route
    receiver: grafana-default-email
    # <list> The labels by which incoming alerts are grouped together. For example,
    #        multiple alerts coming in for cluster=A and alertname=LatencyHigh would
    #        be batched into a single group.
    #
    #        To aggregate by all possible labels use the special value '...' as
    #        the sole label name, for example:
    #        group_by: ['...']
    #        This effectively disables aggregation entirely, passing through all
    #        alerts as-is. This is unlikely to be what you want, unless you have
    #        a very low alert volume or your upstream notification system performs
    #        its own grouping.
    group_by: ['...']
    # <list> a list of prometheus-like matchers that an alert rule has to fulfill to match the node (allowed chars
    #        [a-zA-Z_:])
    matchers:
      - alertname = Watchdog
      - service_id_X = serviceX
      - severity =~ "warning|critical"
    # <list> a list of grafana-like matchers that an alert rule has to fulfill to match the node
    object_matchers:
      - ['alertname', '=', 'CPUUsage']
      - ['service_id-X', '=', 'serviceX']
      - ['severity', '=~', 'warning|critical']
    # <list> Times when the route should be muted. These must match the name of a
    #        mute time interval.
    #        Additionally, the root node cannot have any mute times.
    #        When a route is muted it will not send any notifications, but
    #        otherwise acts normally (including ending the route-matching process
    #        if the `continue` option is not set)
    mute_time_intervals:
      - abc
    # <duration> How long to initially wait to send a notification for a group
    #            of alerts. Allows to collect more initial alerts for the same group.
    #            (Usually ~0s to few minutes), default = 30s
    group_wait: 30s
    # <duration> How long to wait before sending a notification about new alerts that
    #            are added to a group of alerts for which an initial notification has
    #            already been sent. (Usually ~5m or more), default = 5m
    group_interval: 5m
    # <duration>  How long to wait before sending a notification again if it has already
    #             been sent successfully for an alert. (Usually ~3h or more), default = 4h
    repeat_interval: 4h
    # <list> Zero or more child policies. The schema is the same as the root policy.
    # routes:
    #   # Another recursively nested policy...
    #   - receiver: another-receiver
    #     matchers:
    #       - ...
    #     ...

```

----------------------------------------

TITLE: Reading Grafana Data Source IDs (Plaintext)
DESCRIPTION: Defines the `datasources.id:read` permission action needed to read data source IDs in Grafana. This is related to data source scopes `datasources:*` and `datasources:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_19

LANGUAGE: plaintext
CODE:
```
`datasources.id:read`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>
```

----------------------------------------

TITLE: Setting up Self-Instrumentation Environment in Grafana
DESCRIPTION: Command to initialize the development environment with required self-instrumentation monitoring tools. This sets up Prometheus, Loki, Tempo, and Pyroscope for monitoring Grafana itself.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/self-instrumentation/readme.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
make devenv sources=self-instrumentation
```

----------------------------------------

TITLE: Configuring Google OAuth HD Parameter Validation
DESCRIPTION: A new security validation checks the ID token's HD parameter against allowed domains. If using legacy Google OAuth configurations via `api_url` that lack the HD parameter, login may fail. This validation can be disabled by setting the configuration toggle `validate_hd` to false.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v11-0.md#2025-04-23_snippet_1



----------------------------------------

TITLE: Outputting Real-time Greeting Message in Plaintext
DESCRIPTION: A simple plaintext greeting that displays the current time in a standardized format. The time is displayed in UTC format with complete date and time information.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/ExampleWithMocks/want/program_out.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
Real time greeting: Good day! It is [current time elided]
```

----------------------------------------

TITLE: Rendering Email Body with Go HTML Templates - GoTemplate
DESCRIPTION: This snippet uses Go template placeholders to create a personalized body for a verification email. Variables such as .Name, .VerificationEmailLifetimeHours, .AppUrl, and .Code are required for rendering full content, and are supplied by the backend. Inputs are the relevant context variables, and the output is a plain-text email of instructions and a verification link specific to each user.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/verify_email.txt#2025-04-23_snippet_1

LANGUAGE: gotemplate
CODE:
```
Hi {{.Name}},

Copy and paste the following link directly in your browser to verify your email within {{.VerificationEmailLifetimeHours}} hour(s).
{{.AppUrl}}user/email/update?code={{.Code}}

```

----------------------------------------

TITLE: Defining Grafana Fixed Role: fixed:ldap:writer
DESCRIPTION: Specifies the `fixed:ldap:writer` role (ID: `fixed_p6AvnU4GCQyIh7-hbwI-bk3GYnU`) within Grafana. This role includes all permissions from `fixed:ldap:reader` and adds `ldap.user:sync` and `ldap.config:reload`. It allows users to read and update the LDAP configuration, read LDAP status information, sync users, and reload the configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_13

LANGUAGE: plaintext
CODE:
```
fixed:ldap:writer
```

LANGUAGE: plaintext
CODE:
```
fixed_p6AvnU4GCQyIh7-hbwI-bk3GYnU
```

LANGUAGE: plaintext
CODE:
```
Permissions included:
- fixed:ldap:reader
- ldap.user:sync
- ldap.config:reload
```

----------------------------------------

TITLE: Suggestion Registry Item Interface
DESCRIPTION: Defines the interface for registry items that map statement positions to suggestion kinds for SQL autocomplete functionality.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-sql/src/components/query-editor-raw/README.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
export interface SuggestionKindRegistyItem extends RegistryItem {
  id: StatementPosition;
  kind: SuggestionKind[];
}
```

----------------------------------------

TITLE: License Status Response Example - Grafana Licensing API - HTTP
DESCRIPTION: This snippet shows the HTTP response to a successful license check against Grafana's licensing API. The response code is 200 and the body contains the boolean value true. Output indicates a valid license.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/licensing.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 4\n\ntrue
```

----------------------------------------

TITLE: Formatting Grafana Variables as SQL String Literals
DESCRIPTION: Shows the `:sqlstring` format option. This formats single or multi-valued variables into a comma-separated string suitable for SQL queries. Each value is enclosed in single quotes (`'`) and internal single quotes are escaped by doubling them (`''`). The example shows `["test'1", "test2"]` interpolated as `"'test''1','test2'"`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
servers = ["test'1", "test2"]
String to interpolate: '${servers:sqlstring}'
Interpolation result: "'test''1','test2'"
```

----------------------------------------

TITLE: Defining Component Selectors with Mixed Attributes
DESCRIPTION: TypeScript example showing how to define selectors for both aria-label and data-testid attributes in a component object.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
export const Components = {
  Login: {
    openButton: 'open-button', // this looks for an aria-label
    closeButton: 'data-testid modal-close-button', // this  looks for a data-testid
  },
};
```

----------------------------------------

TITLE: Using Interval Variable in Graphite Function
DESCRIPTION: This snippet demonstrates how to use an interval variable named 'myinterval' in a Graphite summarize function. The interval variable is used to specify the time range for summarization.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_0

LANGUAGE: graphite
CODE:
```
summarize($myinterval, sum, false)
```

----------------------------------------

TITLE: Setting Hidden Email Subject in Go Template
DESCRIPTION: This snippet utilizes a custom Go template function `HiddenSubject` to set a potentially hidden or programmatic subject line for the email. It dynamically includes the inviter's name (`.InvitedBy`) within the subject text. Requires the Go templating engine and context variables `.Subject` and `.InvitedBy`.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/new_user_invite.txt#2025-04-23_snippet_0

LANGUAGE: gotemplate
CODE:
```
{{HiddenSubject .Subject "{{.InvitedBy}} has invited you to join Grafana"}}
```

----------------------------------------

TITLE: Using the Grafana UI Carousel Component (JSX)
DESCRIPTION: This JSX snippet demonstrates the basic usage of the Carousel component from `@grafana/ui`. It shows how to import the component and pass an array of image objects (each with 'path' and 'name') to the 'images' prop to render an interactive image carousel. This example assumes a React environment.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Carousel/Carousel.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { Carousel } from '@grafana/ui';

const images = [
  { path: '/path/to/image1.jpg', name: 'First Image' },
  { path: '/path/to/image2.jpg', name: 'Second Image' },
  { path: '/path/to/image3.jpg', name: 'Third Image' },
];

// Basic usage
<Carousel images={images} />;
```

----------------------------------------

TITLE: String Case Conversion and Manipulation - Go Template
DESCRIPTION: Shows how to use Go template functions {{ title }}, {{ toUpper }}, and {{ toLower }} for basic string case conversion in Grafana annotation and label templates. Requires Grafana Go templates. The input is a string, output is the manipulated string (converted case or title-cased). Best used for formatting user-facing strings or labels.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_8

LANGUAGE: Go Template
CODE:
```
{{ title "hello, world!" }}

```

LANGUAGE: Go Template
CODE:
```
{{ toUpper "Hello, world!" }}

```

LANGUAGE: Go Template
CODE:
```
{{ toLower "Hello, world!" }}

```

----------------------------------------

TITLE: Time Formatting with Approach A in Plaintext
DESCRIPTION: Approach A for formatting time-based greetings showing two different timestamps. It displays dates in UTC format with years 0001 and 2000.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/ExampleWithMocks/want/program_out.txt#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
Approach A
Good day! It is 0001-01-01 00:00:00 +0000 UTC
Good day! It is 2000-01-01 00:00:00 +0000 UTC
```

----------------------------------------

TITLE: Example Input Data (Query A) for Config from Query Results Transformation
DESCRIPTION: This table represents example input data (Input[0], from Query A named ServerA) used in the 'Config from query results' transformation example. This data will have configuration applied to its 'Value' field.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_4

LANGUAGE: text
CODE:
```
| Time          | Value |
| ------------- | ----- |
| 1626178119127 | 10    |
| 1626178119129 | 30    |
```

----------------------------------------

TITLE: Provisioning Viewer Role for Reporter Permissions via YAML (yaml)
DESCRIPTION: This YAML configuration snippet provisions the Grafana Viewer role to inherit the permissions of both 'basic:viewer' and 'fixed:reports:writer', thereby granting the ability to manage reports. The 'from' list specifies permission inheritance, and the global and version fields track the deployment scope and configuration versioning. This snippet must be placed within a supported Grafana provisioning file and is ideal for infrastructure-as-code scenarios.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_4

LANGUAGE: yaml
CODE:
```
apiVersion: 2

roles:
  - name: 'basic:viewer'
    global: true
    version: 3
    from:
      - name: 'basic:viewer'
        global: true
      - name: 'fixed:reports:writer'
        global: true
```

----------------------------------------

TITLE: Using Named Capture Groups for Display Names and Values in Variables
DESCRIPTION: A regular expression with named capture groups that separates the display text and actual values for variable options, creating a more user-friendly dropdown while maintaining the correct values for queries.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_12

LANGUAGE: regex
CODE:
```
/chip_name="(?<text>[^"]+)|chip="(?<value>[^"]+)/g
```

----------------------------------------

TITLE: Configuring Server Read Timeout in Grafana Configuration
DESCRIPTION: This configuration snippet sets the `read_timeout` option within the `[server]` section of the Grafana configuration file. It specifies the maximum duration (e.g., '5s', '5m', '5ms') Grafana waits for reading an incoming request before timing out and closing idle connections. Setting the value to `0` disables the timeout entirely.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v7-5.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[server]
read_timeout = 0
```

----------------------------------------

TITLE: Defining Role Scopes in Grafana RBAC
DESCRIPTION: Specifies scopes to restrict actions to a set of roles. `roles:*` matches any role, while `roles:uid:randomuid` targets only the role with the specific UID 'randomuid'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_40

LANGUAGE: text
CODE:
```
roles:*
```

LANGUAGE: text
CODE:
```
roles:uid:*
```

----------------------------------------

TITLE: Showing Result of 'Labels to Fields' (Rows Mode - Series 2)
DESCRIPTION: This Markdown table shows the partial output for the second time series when using the 'Labels to fields' transformation in 'Rows' mode. Similar to the first series, labels and their values are displayed in rows.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_33

LANGUAGE: markdown
CODE:
```
| label      | value    |
| ---------- | -------- |
| Server     | Server B |
| Datacenter | EU       |
```

----------------------------------------

TITLE: Starting Grafana Core Frontend Development Server (Shell)
DESCRIPTION: This shell command uses yarn to start the development server for the core Grafana frontend. It typically watches for file changes in the Grafana core source code and rebuilds the frontend automatically, facilitating rapid development.
SOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/grafana-extensionstest-app/README.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
yarn start
```

----------------------------------------

TITLE: Stopping Grafana Service via init.d using Shell
DESCRIPTION: Stops the Grafana server service using the legacy `service` command for init.d systems. This might be relevant on older systems or if Grafana was configured to use init.d instead of systemd. Requires `sudo` privileges and is part of the uninstallation process.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_13

LANGUAGE: shell
CODE:
```
sudo service grafana-server stop
```

----------------------------------------

TITLE: Declaring Storybook Meta and ArgTypes for InlineToast - MDX
DESCRIPTION: This snippet sets up Storybook metadata for the InlineToast component in MDX, indicating its documentation section and component reference. It also documents the intended use of InlineToast, which signals temporary states near other UI elements, and exposes its argument types (properties) for interactive controls. Dependencies include the imported InlineToast component and recognised MDX Storybook components. Inputs include component references and titles, and outputs are rendered documentation and controls within Storybook. Must be placed in an MDX documentation file processed by Storybook.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InlineToast/InlineToast.mdx#2025-04-23_snippet_1

LANGUAGE: mdx
CODE:
```
<Meta title="MDX|InlineToast" component={InlineToast} />

# InlineToast

Used to indicate temporal status near fields/components, such as a _Saved_ indicator next to a field, or a little _Copied!_ indicator above a button

<ArgTypes of={InlineToast} />
```

----------------------------------------

TITLE: Configuring Storybook Meta for Cascader Component - Markdown/JSX
DESCRIPTION: Defines the Storybook Meta configuration block, setting the title as 'MDX|Cascader' and specifying the imported Cascader component. This ensures Storybook properly recognizes and categorizes the Cascader documentation and stories. It should be placed at the top of the MDX file and expects the Cascader component and its props to be imported in the file's JavaScript context.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Cascader/Cascader.mdx#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
<Meta title="MDX|Cascader" component={Cascader} />
```

----------------------------------------

TITLE: Deleting API Key Request Example using HTTP
DESCRIPTION: Example HTTP DELETE request to delete a specific API key using the deprecated `/api/auth/keys/:id` endpoint (e.g., `/api/auth/keys/3`). Requires `apikeys:delete` permission on `apikeys:*` scope. Includes standard HTTP headers and an `Authorization` bearer token.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/auth.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
DELETE /api/auth/keys/3 HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Implementing TextArea with AutoSaveField in React
DESCRIPTION: Example of using AutoSaveField with a TextArea component for automatic multi-line text saving.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/AutoSaveField/AutoSaveField.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<AutoSaveField
  onFinishChange={customRequest}
  //Complete field args if needed
>
  {(onChange) => (
    <TextArea
      value={textAreaValue}
      onChange={(e) => {
        onChange(e.currentTarget.value);
        //Complete code if needed
      }}
    />
  )}
</AutoSaveField>
```

----------------------------------------

TITLE: Wire Tool Error Message for Invalid Provider
DESCRIPTION: An error message from Google's Wire dependency injection tool indicating that a struct variable named 'myFakeSet' is neither a provider nor a provider set. This typically occurs during compilation when Wire attempts to resolve dependencies.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/EmptyVar/want/wire_errs.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
example.com/foo/wire.go:x:y: var example.com/foo.myFakeSet struct{} is not a provider or a provider set
```

----------------------------------------

TITLE: Viewing Grafana Log Warning for Unsigned/Invalid Plugins (Bash)
DESCRIPTION: This log message indicates that Grafana found unsigned plugins or plugins with invalid signatures during startup scanning. By default, Grafana will not load or start these plugins. The specific plugin IDs involved are mentioned in the log.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/plugin-management/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
WARN[05-26|12:00:00] Some plugin scanning errors were found   errors="plugin '<plugin id>' is unsigned, plugin '<plugin id>' has an invalid signature"
```

----------------------------------------

TITLE: Disabling Query History Database Migration via Config (INI)
DESCRIPTION: This configuration entry, `query_history`, located in the `custom.ini` file (or equivalent Grafana configuration source), allows disabling the automatic migration of Explore query history from browser local storage to the Grafana database, introduced in Grafana 9.0. Set appropriately to prevent the migration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-0.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
query_history
```

----------------------------------------

TITLE: Building Grafana Transformation Documentation (Shell)
DESCRIPTION: Provides shell commands to navigate to the documentation directory within the Grafana repository and build the specific transformation documentation Markdown file (`index.md`) and potentially all documentation using `make`. These commands are part of the instructions for developers contributing to Grafana documentation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
$ cd /docs (from the root of the repository)
$ make sources/panels-visualizations/query-transform-data/transform-data/index.md
$ make docs
```

----------------------------------------

TITLE: Rendering Modern PanelChrome Loading State (v9.4.0+) in React
DESCRIPTION: Shows a rendered example of the modern approach to indicating a loading state in `PanelChrome` (v9.4.0+). It uses the `loadingState` prop set to `LoadingState.Loading` and demonstrates handling query cancellation through the `onCancelQuery` prop.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_8

LANGUAGE: tsx
CODE:
```
<PanelChrome
  title="My awesome panel title"
  loadingState={LoadingState.Loading}
  onCancelQuery={action('CancelQuery: onClick fired')}
  width={400}
  height={200}
>
  {(innerwidth, innerheight) => {
    return (
      <div
        style={{
          width: innerwidth,
          height: innerheight,
          background: 'rgba(230,0,0,0.05)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        Content
      </div>
    );
  }}
</PanelChrome>
```

----------------------------------------

TITLE: Upgrading Grafana using APT Repository (Bash)
DESCRIPTION: Updates the local package list using 'apt-get update' and then upgrades all installed packages, including Grafana if installed from the official APT repository, using 'apt-get upgrade'. This method relies on the system's package manager to handle the upgrade process.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/upgrade/upgrade-common-tasks.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
sudo apt-get update
sudo apt-get upgrade
```

----------------------------------------

TITLE: Managing User Conflicts with Grafana CLI (Bash)
DESCRIPTION: This snippet shows Bash commands using `grafana-cli user-manager conflicts` to manage user identity conflicts that could arise from case-sensitivity issues in older Grafana versions. It covers listing conflicts, generating a patch file for resolution, validating the file, and ingesting the changes into the database. This tool is not needed for Grafana Cloud or instances using MySQL.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-3.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
# lists all the conflicting users
$ grafana-cli user-manager conflicts list

# creates a conflict patch file to edit
$ grafana-cli user-manager conflicts generate-file

# reads edited conflict patch file for validation
$ grafana-cli user-manager conflicts validate-file <filepath>

# ingests the conflict users file. Can be executed once per file and will change the state of the database.
$ grafana-cli user-manager conflicts ingest-file <filepath>
```

----------------------------------------

TITLE: Displaying User Name in Email Body using Go Template
DESCRIPTION: This Go template snippet retrieves and displays the recipient's name (`.Name`) in the email's greeting. It assumes the `.Name` variable is passed into the template context by the Grafana backend.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/verify_email.txt#2025-04-23_snippet_1

LANGUAGE: Go Template
CODE:
```
[[.Name]]
```

----------------------------------------

TITLE: Sample InfluxDB Line Protocol Data
DESCRIPTION: Sample data entries in InfluxDB line protocol format showing measurements for a system with two hosts (A and B). Each entry includes sensor readings, states, and timestamps in nanosecond precision.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/changing_types_NaN.txt#2025-04-23_snippet_0

LANGUAGE: influxdb
CODE:
```
system,host=A sensor=0,sensor2="NaN",state="aaa" 1616403090000000000
system,host=B sensor="NaN",sensor2=0,state="bbb" 1616403090000000000
system,host=A sensor="NaN",sensor2=0,state="ccc" 1616403091000000000
system,host=B sensor=0,sensor2="NaN",state=1 1616403091000000000
```

----------------------------------------

TITLE: Admin-Level Organization Details by Name - JSON
DESCRIPTION: This JSON snippet returns organization and address details for the organization identified by name. It is used after an admin-level lookup to verify existence and inspect organization metadata.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_17

LANGUAGE: json
CODE:
```
{\n  "id":1,\n  "name":"Main Org.",\n  "address":{\n    "address1":"",\n    "address2":"",\n    "city":"",\n    "zipCode":"",\n    "state":"",\n    "country":""\n  }\n}
```

----------------------------------------

TITLE: Initializing Event with Greeter in Go
DESCRIPTION: Creates an initializer for the Event struct that takes a Greeter as a parameter and assigns it to the Event's Greeter field.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_4

LANGUAGE: go
CODE:
```
func NewEvent(g Greeter) Event {
    return Event{Greeter: g}
}

type Event struct {
    Greeter Greeter // <- adding a Greeter field
}
```

----------------------------------------

TITLE: Exporting the Grafana Pod Name - kubectl - Bash
DESCRIPTION: This command sets the `POD_NAME` shell variable to the name of the first Grafana pod, filtered by specific labels. It requires access to the Kubernetes cluster and a running Grafana deployment. The exported variable is useful for subsequent port-forward commands.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
export POD_NAME=$(kubectl get pods --namespace monitoring -l "app.kubernetes.io/name=grafana,app.kubernetes.io/instance=my-grafana" -o jsonpath="{.items[0].metadata.name}")
```

----------------------------------------

TITLE: Overriding Grafana Log Level via grafana.ini - INI Configuration in Bash Block
DESCRIPTION: Provides a '[log]' section of 'grafana.ini' for setting log level to 'debug'. Needed to collect verbose logs for troubleshooting. To be placed in a ConfigMap and mounted into the Grafana pod. Presented here in a bash block, but contents are INI format.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_30

LANGUAGE: bash
CODE:
```
[log]
; # Either "debug", "info", "warn", "error", "critical", default is "info"
; # we change from info to debug level
level = debug

```

----------------------------------------

TITLE: Adding a License Token via HTTP - Grafana Licensing API - HTTP
DESCRIPTION: This HTTP POST request example illustrates sending a JSON license token to apply a license with the /licensing/token endpoint. Requires a Bearer token and Content-Type set to application/json. The payload includes a 'token' field with the JWT license. Ensure proper permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/licensing.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
POST /licensing/token\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0aGlzIjoiaXMiLCJub3QiOiJhIiwidmFsaWQiOiJsaWNlbnNlIn0.bxDzxIoJlYMwiEYKYT_l2s42z0Y30tY-6KKoyz9RuLE"}
```

----------------------------------------

TITLE: Writing Grafana Announcement Banners (Plaintext)
DESCRIPTION: Defines the `banners:write` permission action allowing the creation of announcement banners in Grafana. This action does not list specific scope dependencies.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_5

LANGUAGE: plaintext
CODE:
```
`banners:write`
```

----------------------------------------

TITLE: Configuring Storybook Metadata for LoadingBar in MDX
DESCRIPTION: This snippet defines the Storybook metadata for the LoadingBar component using the <Meta> tag in MDX. The 'title' prop organizes the component in Storybook, while the 'component' prop registers the LoadingBar for interactive documentation. This requires Storybook MDX support and ensures the LoadingBar is documented as part of the Storybook UI.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/LoadingBar/LoadingBar.mdx#2025-04-23_snippet_1

LANGUAGE: mdx
CODE:
```
<Meta title="MDX|LoadingBar" component={LoadingBar} />
```

----------------------------------------

TITLE: Configuring Unified Storage Playlists - INI
DESCRIPTION: This snippet configures Grafana's Unified Storage playlist backend using an INI file. It specifies storage targets, enables HTTPS protocol for the server, toggles features such as Kubernetes-based playlist storage, and selects the unified storage type for the API server. The dualWriterMode setting under unified_storage controls how data is read/written across legacy and unified storage backends. Required dependency is Grafana running with a compatible backend; configuration must be placed in the appropriate config file.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
; need to specify target here for override to work later\ntarget = all\n\n[server]\n; https is required for kubectl\nprotocol = https\n\n[feature_toggles]\n; store playlists in k8s\nkubernetesPlaylists = true\n\n[grafana-apiserver]\n; use unified storage for k8s apiserver\nstorage_type = unified\n\n# Dualwriter modes\n# 0: disabled (default mode)\n# 1: read from legacy, write to legacy, write to unified best-effort\n# 2: read from legacy, write to both\n# 3: read from unified, write to both\n# 4: read from unified, write to unified\n# 5: read from unified, write to unified, ignore background sync state\n[unified_storage.playlists.playlist.grafana.app]\ndualWriterMode = 0
```

----------------------------------------

TITLE: Time Formatting with Approach B in Plaintext
DESCRIPTION: Approach B for formatting time-based greetings showing two different timestamps. It displays dates in UTC format with years 0001 and 1000.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/ExampleWithMocks/want/program_out.txt#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
Approach B
Good day! It is 0001-01-01 00:00:00 +0000 UTC
Good day! It is 1000-01-01 00:00:00 +0000 UTC
```

----------------------------------------

TITLE: Wire Error: Missing Provider for Recursive Dependency (Foo)
DESCRIPTION: This complex Wire error message shows that a provider for 'example.com/foo.Foo' is missing. The dependency trace indicates 'Foo' is needed by 'example.com/foo.Zip' (via 'provideZip'), which is needed by 'example.com/foo.Zap' (via 'provideZap'), which is needed by 'example.com/foo.Zop' (via 'provideZop'). This chain originates from the requirements of the injector 'injectMissingRecursiveType' defined in 'example.com/foo/wire.go'. A provider for 'Foo' must be accessible within the Wire set used by this injector.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/MultipleMissingInputs/want/wire_errs.txt#2025-04-23_snippet_3

LANGUAGE: text
CODE:
```
example.com/foo/wire.go:x:y: inject injectMissingRecursiveType: no provider found for example.com/foo.Foo
needed by example.com/foo.Zip in provider "provideZip" (example.com/foo/foo.go:x:y)
needed by example.com/foo.Zap in provider "provideZap" (example.com/foo/foo.go:x:y)
needed by example.com/foo.Zop in provider "provideZop" (example.com/foo/foo.go:x:y)
```

----------------------------------------

TITLE: Migrating Grafana App Plugins from React Router v5 to v6
DESCRIPTION: React Router v5 is deprecated in Grafana v11. App plugin developers are advised to migrate their plugins to use React Router v6. Refer to the official Grafana and React Router migration guides for detailed instructions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v11-0.md#2025-04-23_snippet_3



----------------------------------------

TITLE: YAML Build Configuration for Grafana Release Notes
DESCRIPTION: YAML configuration for build settings and product labels specifying cloud, enterprise and open source distributions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-13.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
_build:
  list: false
labels:
  products:
    - cloud
    - enterprise
    - oss
title: Release notes for Grafana 7.5.13
```

----------------------------------------

TITLE: Retrieving Folders and Dashboards at Root Level in HTTP
DESCRIPTION: This HTTP GET request retrieves folders and dashboards at the root level. It uses the /api/search endpoint with query parameters for an empty search query and non-starred items.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder_dashboard_search.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/search?query=&starred=false HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Deleting a License Token via HTTP - Grafana Licensing API - HTTP
DESCRIPTION: This example demonstrates sending a DELETE request to /api/licensing/token to remove the stored license from the Grafana database. Requires Bearer token authentication and a JSON body containing the 'instance' root URL. The operation mandates proper admin privileges.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/licensing.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
DELETE /api/licensing/token\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{"instance": "http://play.grafana.org/"}
```

----------------------------------------

TITLE: Aggregating Azure Security Resources using Kusto Query Language
DESCRIPTION: This query aggregates security resources, extending various properties and then summarizing the count of resources by recommendation name and state. It demonstrates the use of 'extend', 'summarize', and 'count' for complex data transformation and aggregation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/query-editor/index.md#2025-04-23_snippet_6

LANGUAGE: kusto
CODE:
```
securityresources
| where type == 'microsoft.security/assessments'
| extend resourceId=id,
    recommendationId=name,
    resourceType=type,
    recommendationName=properties.displayName,
    source=properties.resourceDetails.Source,
    recommendationState=properties.status.code,
    description=properties.metadata.description,
    assessmentType=properties.metadata.assessmentType,
    remediationDescription=properties.metadata.remediationDescription,
    policyDefinitionId=properties.metadata.policyDefinitionId,
    implementationEffort=properties.metadata.implementationEffort,
    recommendationSeverity=properties.metadata.severity,
    category=properties.metadata.categories,
    userImpact=properties.metadata.userImpact,
    threats=properties.metadata.threats,
    portalLink=properties.links.azurePortal
| summarize numberOfResources=count(resourceId) by tostring(recommendationName), tostring(recommendationState)
```

----------------------------------------

TITLE: Retrieving Client Certificates from MQTT Container
DESCRIPTION: Commands to display the contents of client certificate and key from the MQTT container. These certificates are required for mutual TLS authentication when configuring secure MQTT connections.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/mqtt/README.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
docker exec devenv-mqtt-1 cat /etc/certs/client.pem
docker exec devenv-mqtt-1 cat /etc/certs/client.key
```

----------------------------------------

TITLE: Defining GET Endpoint for Listing Contact Points - HTTP
DESCRIPTION: Specifies a GET endpoint to list all configured contact points in provisioning within Grafana. It supports optional filtering by the 'name' query parameter. The endpoint returns a 200 OK response and a ContactPoints schema with the available resources.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_20

LANGUAGE: http
CODE:
```
GET /api/v1/provisioning/contact-points
```

----------------------------------------

TITLE: Configuring OAuth Authentication in Grafana
DESCRIPTION: OAuth configuration settings for Grafana including client credentials, endpoints, and role mapping for Authentik integration.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/authentik/README.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
[auth.generic_oauth]
name = authentik
enabled = true
client_id = 43e8d2746fe2e508325a23cdf816d6ddd12e94f1
client_secret = e50440f14a010fd69dfed85bc6c071653f22c73e2c6c8d7ba96a936937d92040936b7e5a4bcc1bf40d5cf1dc019b1db327a1a00e2183c53471fb7530d4a09d7e
scopes = openid email profile
auth_url = http://localhost:9000/application/o/authorize/
token_url = http://localhost:9000/application/o/token/
api_url = http://localhost:9000/application/o/userinfo/
role_attribute_path = contains(groups[*], 'admin') && 'Admin' || contains(groups[*], 'editor') && 'Editor' || 'Viewer'
signout_redirect_url = http://localhost:9000/application/o/grafana-oidc/end-session/
```

----------------------------------------

TITLE: Grafana Plugin Manifest Definition (JSON)
DESCRIPTION: This JSON object, found within a PGP signed message, serves as the manifest for a Grafana plugin ("test", version "1.0.0"). It specifies the manifest version (2.0.0), signature details (type: grafana, organization: Grafana Labs), plugin metadata, timestamp, signing key ID, and a SHA256 hash for the `plugin.json` file, ensuring integrity when verified against the accompanying PGP signature.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/installer/plugin/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "plugin": "test",
  "version": "1.0.0",
  "time": 1605807330546,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "2bb467c0bfd6c454551419efe475b8bf8573734e73c7bab52b14842adb62886f"
  }
}
```

----------------------------------------

TITLE: Using createTheme in Tests
DESCRIPTION: Demonstrates how to use the createTheme function to generate a theme object for testing purposes.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/themes.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { createTheme } from '@grafana/data';

describe('MyComponent', () => {
  it('should work', () => {
    result = functionThatNeedsTheme(createTheme());
    expect(result).toBe(true);
  });
});
```

----------------------------------------

TITLE: Implementing Basic EmptyState Not-Found Variant in JSX
DESCRIPTION: This snippet demonstrates the simplest use case for the `EmptyState` component with the `not-found` variant. It's used when a search or filter yields no results, providing only a relevant message. Default image and styling for this variant are used.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/EmptyState/EmptyState.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
import { EmptyState } from '@grafana/ui';

<EmptyState variant="not-found" message="No playlists found" />;
```

----------------------------------------

TITLE: Printing Common Labels and Annotations in Grafana Notification Templates - Go
DESCRIPTION: This Go template example prints the count and values of resolved and firing alerts, then lists labels and annotations common to all alerts using '.CommonLabels.SortedPairs' and '.CommonAnnotations.SortedPairs'. It expects notification data with these structures supplied by Grafana alerting. Useful for summarizing alert groups with shared context.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_11

LANGUAGE: go
CODE:
```
{{ define "custom.common_labels_and_annotations" -}}
{{ len .Alerts.Resolved }} resolved alert(s)
{{ len .Alerts.Firing }} firing alert(s)
Common labels: {{ len .CommonLabels.SortedPairs }}
{{ range .CommonLabels.SortedPairs -}}
- {{ .Name }} = {{ .Value }}
{{ end }}
Common annotations: {{ len .CommonAnnotations.SortedPairs }}
{{ range .CommonAnnotations.SortedPairs }}
- {{ .Name }} = {{ .Value }}
{{ end }}
{{ end -}}
```

----------------------------------------

TITLE: Creating a Service Account token in Grafana
DESCRIPTION: This command generates a new token for the previously created Service Account. The returned key should be securely stored as it cannot be retrieved later.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/create-api-tokens-for-org.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
curl -X POST -H "Content-Type: application/json" -d '{"name":"test-token"}' http://admin:admin@localhost:3000/api/serviceaccounts/<service account id>/tokens
```

----------------------------------------

TITLE: Kubernetes Kubeconfig with Default Grafana Credentials - YAML
DESCRIPTION: This YAML fragment shows the user section with basic authentication for kubeconfig, using Grafana's default credentials. This fragment is to be substituted for the username and password fields in the full kubeconfig above. The primary limitation is the hardcoded secret keys, which is intended for local development and not production.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_4

LANGUAGE: yaml
CODE:
```
    username: admin\n    password: admin
```

----------------------------------------

TITLE: Defining Library Panel Scopes in Grafana RBAC
DESCRIPTION: Specifies scopes to restrict actions to a set of library panels. `library.panels:*` matches any library panel, whereas `library.panels:uid:1` targets the specific library panel with UID 1.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_33

LANGUAGE: text
CODE:
```
library.panels:*
```

LANGUAGE: text
CODE:
```
library.panels:uid:*
```

----------------------------------------

TITLE: Configuring Basic Grafana Settings in INI Format
DESCRIPTION: Sample configuration sections from a Grafana INI file showing default settings, security options, authentication settings, plugin configuration, and feature toggles.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
# default section
instance_name = ${HOSTNAME}

[security]
admin_user = admin

[auth.google]
client_secret = 0ldS3cretKey

[plugin.grafana-image-renderer]
rendering_ignore_https_errors = true

[feature_toggles]
enable = newNavigation
```

----------------------------------------

TITLE: Defining Route Structure in Go
DESCRIPTION: Defines the Route structure with various properties for handling alerts, including matchers, receivers, and nested routes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_47

LANGUAGE: go
CODE:
```
**Properties**

{{% responsive-table %}}

| Name                  | Type                               | Go type             | Required | Default | Description                             | Example |
| --------------------- | ---------------------------------- | ------------------- | :------: | ------- | --------------------------------------- | ------- |
| `continue`            | boolean                            | `bool`              |          |         |                                         |         |
| `group_by`            | []string                           | `[]string`          |          |         |                                         |         |
| `group_interval`      | string                             | string              |          |         |                                         |         |
| `group_wait`          | string                             | string              |          |         |                                         |         |
| `match`               | map of string                      | `map[string]string` |          |         | Deprecated. Remove before v1.0 release. |         |
| `match_re`            | [MatchRegexps](#match-regexps)     | `MatchRegexps`      |          |         |                                         |         |
| `matchers`            | [Matchers](#matchers)              | `Matchers`          |          |         |                                         |         |
| `mute_time_intervals` | []string                           | `[]string`          |          |         |                                         |         |
| `object_matchers`     | [ObjectMatchers](#object-matchers) | `ObjectMatchers`    |          |         |                                         |         |
| `provenance`          | [Provenance](#provenance)          | Provenance          |          |         |                                         |         |
| `receiver`            | string                             | string              |          |         |                                         |         |
| `repeat_interval`     | string                             | string              |          |         |                                         |         |
| `routes`              | [][Route](#route)                  | `[]*Route`          |          |         |                                         |         |

{{% /responsive-table %}}
```

----------------------------------------

TITLE: Documenting OAuth Organization Role Sync Settings - Markdown
DESCRIPTION: This snippet demonstrates the use of markdown syntax to structure technical documentation about OAuth configuration options within Grafana. It explains `skip_org_role_sync` and `oauth_skip_org_role_update_sync`, provides their default values, describes their effects, and supplies behavior matrices for various auth providers using markdown tables. Dependencies are a markdown renderer, and the input is configuration setting behaviors; the output is marked-up documentation suitable for Grafana's community or internal use. There are no executable sections, only documentation structures and special admonition shortcodes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_16

LANGUAGE: markdown
CODE:
```
#### `skip_org_role_sync`

`skip_org_role_sync` prevents the synchronization of organization roles for a specific OAuth integration, while the deprecated setting `oauth_skip_org_role_update_sync` affects all configured OAuth providers.

The default value for `skip_org_role_sync` is `false`.

With `skip_org_role_sync` set to `false`, the users' organization and role is reset on every new login, based on the external provider's role. See your provider in the tables below.

With `skip_org_role_sync` set to `true`, when a user logs in for the first time, Grafana sets the organization role based on the value specified in `auto_assign_org_role` and forces the organization to `auto_assign_org_id` when specified, otherwise it falls back to OrgID `1`.

{{< admonition type="note" >}}
Enabling `skip_org_role_sync` also disables the synchronization of Grafana Admins from the external provider, as such `allow_assign_grafana_admin` is ignored.
{{< /admonition >}}

Use this setting when you want to manage the organization roles of your users from within Grafana and be able to manually assign them to multiple organizations, or to prevent synchronization conflicts when they can be synchronized from another provider.

The behavior of `oauth_skip_org_role_update_sync` and `skip_org_role_sync`, can be seen in the tables below:

`[auth.grafana_com]`

| `oauth_skip_org_role_update_sync` | `skip_org_role_sync` | Resulting Org Role                                                                                                                  | Modifiable |
| --------------------------------- | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------- | ---------- |
| false                             | false                | Synchronize user organization role with Grafana.com role. If no role is provided, `auto_assign_org_role` is set.                    | false      |
| true                              | false                | Skips organization role synchronization for all OAuth providers' users. Role is set to `auto_assign_org_role`.                      | true       |
| false                             | true                 | Skips organization role synchronization for Grafana.com users. Role is set to `auto_assign_org_role`.                               | true       |
| true                              | true                 | Skips organization role synchronization for Grafana.com users and all other OAuth providers. Role is set to `auto_assign_org_role`. | true       |

`[auth.azuread]`

| `oauth_skip_org_role_update_sync` | `skip_org_role_sync` | Resulting Org Role                                                                                                              | Modifiable |
| --------------------------------- | -------------------- | ------------------------------------------------------------------------------------------------------------------------------- | ---------- |
| false                             | false                | Synchronize user organization role with AzureAD role. If no role is provided, `auto_assign_org_role` is set.                    | false      |
| true                              | false                | Skips organization role synchronization for all OAuth providers' users. Role is set to `auto_assign_org_role`.                  | true       |
| false                             | true                 | Skips organization role synchronization for AzureAD users. Role is set to `auto_assign_org_role`.                               | true       |
| true                              | true                 | Skips organization role synchronization for AzureAD users and all other OAuth providers. Role is set to `auto_assign_org_role`. | true       |

`[auth.google]`

| `oauth_skip_org_role_update_sync` | `skip_org_role_sync` | Resulting Org Role                                                                     | Modifiable |
| --------------------------------- | -------------------- | -------------------------------------------------------------------------------------- | ---------- |
| false                             | false                | User organization role is set to `auto_assign_org_role` and cannot be changed.         | false      |
| true                              | false                | User organization role is set to `auto_assign_org_role` and can be changed in Grafana. | true       |
| false                             | true                 | User organization role is set to `auto_assign_org_role` and can be changed in Grafana. | true       |
| true                              | true                 | User organization role is set to `auto_assign_org_role` and can be changed in Grafana. | true       |

{{< admonition type="note" >}}
For GitLab, GitHub, Okta, Generic OAuth providers, Grafana synchronizes organization roles and sets Grafana Admins. The `allow_assign_grafana_admin` setting is also accounted for, to allow or not setting the Grafana Admin role from the external provider.
{{< /admonition >}}

`[auth.github]`

| `oauth_skip_org_role_update_sync` | `skip_org_role_sync` | Resulting Org Role                                                                                                                                               | Modifiable |
| --------------------------------- | -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------- |
| false                             | false                | Synchronize user organization role with GitHub role. If no role is provided, `auto_assign_org_role` is set.                                                      | false      |
| true                              | false                | Skips organization role synchronization for all OAuth providers' users. Role is set to `auto_assign_org_role`.                                                   | true       |
| false                             | true                 | Skips organization role and Grafana Admin synchronization for GitHub users. Role is set to `auto_assign_org_role`.                                               | true       |
| true                              | true                 | Skips organization role synchronization for all OAuth providers and skips Grafana Admin synchronization for GitHub users. Role is set to `auto_assign_org_role`. | true       |

`[auth.gitlab]`

| `oauth_skip_org_role_update_sync` | `skip_org_role_sync` | Resulting Org Role                                                                                                                                               | Modifiable |
| --------------------------------- | -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------- |
| false                             | false                | Synchronize user organization role with GitLab role. If no role is provided, `auto_assign_org_role` is set.                                                      | false      |
| true                              | false                | Skips organization role synchronization for all OAuth providers' users. Role is set to `auto_assign_org_role`.                                                   | true       |
| false                             | true                 | Skips organization role and Grafana Admin synchronization for GitLab users. Role is set to `auto_assign_org_role`.                                               | true       |
| true                              | true                 | Skips organization role synchronization for all OAuth providers and skips Grafana Admin synchronization for GitLab users. Role is set to `auto_assign_org_role`. | true       |

`[auth.generic_oauth]`

| `oauth_skip_org_role_update_sync` | `skip_org_role_sync` | Resulting Org Role                                                                                                                                                       | Modifiable |
| --------------------------------- | -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------- |
| false                             | false                | Synchronize user organization role with the provider's role. If no role is provided, `auto_assign_org_role` is set.                                                      | false      |
| true                              | false                | Skips organization role synchronization for all OAuth providers' users. Role is set to `auto_assign_org_role`.                                                           | true       |
| false                             | true                 | Skips organization role and Grafana Admin synchronization for the provider's users. Role is set to `auto_assign_org_role`.                                               | true       |
| true                              | true                 | Skips organization role synchronization for all OAuth providers and skips Grafana Admin synchronization for the provider's users. Role is set to `auto_assign_org_role`. | true       |
```

----------------------------------------

TITLE: Writing Public Grafana Dashboard Configuration (Plaintext)
DESCRIPTION: Defines the `dashboards.public:write` permission action required to write shared (public) dashboard configurations in Grafana. This is linked to dashboard scopes `dashboards:*` and `dashboards:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_13

LANGUAGE: plaintext
CODE:
```
`dashboards.public:write`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`dashboards:*`</li><li>`dashboards:uid:*`</li></ul>
```

----------------------------------------

TITLE: Initializing Message in Go
DESCRIPTION: Creates a simple initializer function for the Message type that returns a hard-coded message.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
func NewMessage() Message {
    return Message("Hi there!")
}
```

----------------------------------------

TITLE: Enabling Grafana Service at Boot with init.d (Linux)
DESCRIPTION: Configures the Grafana server service to start automatically at boot using init.d mechanisms (update-rc.d).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
sudo update-rc.d grafana-server defaults
```

----------------------------------------

TITLE: Importing Storybook Blocks and LoadingBar in JavaScript
DESCRIPTION: This snippet imports core Storybook blocks including Meta, Canvas, and ArgTypes, as well as the LoadingBar component and its associated stories. Dependencies include '@storybook/blocks' and local LoadingBar components and stories. This setup is required for leveraging Storybook's MDX documentation features and creating interactive examples for the LoadingBar component.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/LoadingBar/LoadingBar.mdx#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { Meta, Canvas, ArgTypes } from '@storybook/blocks';
import { LoadingBar } from './LoadingBar';
import * as LoadingBarStories from './LoadingBar.story';
```

----------------------------------------

TITLE: Importing Storybook Meta and Cascader Component - TypeScript
DESCRIPTION: This snippet imports the Meta and ArgTypes utilities from Storybook blocks and the Cascader component from the local module. These imports are required to define component metadata and property descriptions in the Storybook documentation. This is a prerequisite for configuring Storybook stories and ensuring the correct component context is available.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Cascader/Cascader.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Meta, ArgTypes } from '@storybook/blocks';
import { Cascader } from './Cascader';
```

----------------------------------------

TITLE: Response for Grafana Stats Request
DESCRIPTION: Example response showing Grafana statistics with counts of various entities like users, organizations, dashboards, and alerts.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_5

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "users":2,
  "orgs":1,
  "dashboards":4,
  "snapshots":2,
  "tags":6,
  "datasources":1,
  "playlists":1,
  "stars":2,
  "alerts":2,
  "activeUsers":1
}
```

----------------------------------------

TITLE: Displaying TagList Props in JSX
DESCRIPTION: This snippet shows how to display the props of the TagList component using Storybook's ArgTypes component. It provides a detailed view of the component's properties and their descriptions.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tags/TagList.mdx#2025-04-23_snippet_2

LANGUAGE: JSX
CODE:
```
<ArgTypes of={TagList} />
```

----------------------------------------

TITLE: User Management Configuration Properties
DESCRIPTION: Settings for user management including signup, organization assignment, and permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_13

LANGUAGE: properties
CODE:
```
allow_sign_up=false
allow_org_create=false
auto_assign_org=true
auto_assign_org_id=1
auto_assign_org_role=Viewer
verify_email_enabled=false
login_default_org_id=-1
default_theme=dark
default_language=en-US
viewers_can_edit=false
editors_can_admin=false
user_invite_max_lifetime_duration=24h
verification_email_max_lifetime_duration=1h
last_seen_update_interval=15m
```

----------------------------------------

TITLE: Displaying Keyboard Shortcuts Reference - Markdown
DESCRIPTION: This snippet demonstrates how pressing the question mark key ('?') on the keyboard opens the Grafana keyboard shortcuts reference overlay. It is documented for end-users and requires that the user be in a Grafana dashboard context. No external dependencies are required, and the input is the keyboard shortcut itself while the output is a UI overlay displaying available shortcuts. Usage is limited to environments where Grafana keyboard shortcuts are enabled.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
`?`
```

----------------------------------------

TITLE: Defining a Dashboard Provider in Grafana - YAML
DESCRIPTION: This YAML manifest defines a dashboard provider for Grafana. It specifies the provider's name, target folder, type ('file'), and a path to the dashboard definitions. Place this content in 'default.yaml' under 'provisioning/dashboards/'. You must set the 'options.path' value to the directory containing JSON dashboard definitions. Default paths for Windows and Linux are provided in the comments. Restart Grafana or wait for the refresh interval after placing the file. This configuration requires careful folder and path management.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/provision-dashboards-and-data-sources/index.md#2025-04-23_snippet_3

LANGUAGE: yaml
CODE:
```
apiVersion: 1\n\nproviders:\n  - name: Default # A uniquely identifiable name for the provider\n    folder: Services # The folder where to place the dashboards\n    type: file\n    options:\n      path:\n        <path to dashboard definitions>\n        # Default path for Windows: C:/Program Files/GrafanaLabs/grafana/public/dashboards\n        # Default path for Linux is: /var/lib/grafana/dashboards\n
```

----------------------------------------

TITLE: Representing Time Series Timestamps Efficiently (Plaintext Example)
DESCRIPTION: This snippet demonstrates a sequence of Unix timestamps, showing both a naïve full storage format and an optimized delta (difference) encoding for storage efficiency. It visually illustrates how a time series database (TSDB) can reduce redundant data when storing regular measurements. Inputs are timestamp values, and outputs are arrays of original and delta-encoded timestamps. No dependencies are required, and this example is language-agnostic for demonstration purposes only.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/fundamentals/timeseries/index.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
1572524345, 1572524375, 1572524404, 1572524434, 1572524464
```

LANGUAGE: plaintext
CODE:
```
1572524345, +30, +29, +30, +30
```

LANGUAGE: plaintext
CODE:
```
1572524345, +30, -1, +1, +0
```

----------------------------------------

TITLE: Visualizing Alert Instance State Transitions using Mermaid
DESCRIPTION: A Mermaid state diagram illustrating the lifecycle of a Grafana alert instance. It shows transitions between Normal, Pending, and Alerting states, including the 'Resolved' transition back to Normal. Notes indicate when 'Resolved' and 'Alerting' instances trigger notifications. This diagram visually supports the explanation of alert evaluation and state changes provided in the surrounding text.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/alert-rule-evaluation/_index.md#2025-04-23_snippet_0

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
    direction LR
        Normal --///> Pending
        note right of Normal
            Route "Resolved" alert instances
            for notifications
        end note
        Pending --///> Alerting
        Alerting --///> Normal: Resolved
        note right of Alerting
            Route "Alerting" alert instances
            for notifications
        end note
```

----------------------------------------

TITLE: Filtering Query Variable Results with __searchFilter - SQL
DESCRIPTION: Filters hostname query results interactively using the $__searchFilter variable, which adapts to user's input in the dashboard's dropdown selection. The filter is enclosed in quotes as required by Grafana. Useful for responsive searching in large datasets.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_8

LANGUAGE: sql
CODE:
```
SELECT hostname FROM my_host  WHERE hostname LIKE '$__searchFilter'
```

----------------------------------------

TITLE: Disabling Organization Role Sync from Grafana Cloud
DESCRIPTION: Configuration to prevent Grafana Cloud from overriding user organization roles in the Grafana instance, allowing local role management.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/grafana-cloud/index.md#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
[auth.grafana_com]
# ..
# prevents the sync of org roles from Grafana.com
skip_org_role_sync = true
```

----------------------------------------

TITLE: Defining Update Service Account Parameters in Go
DESCRIPTION: This snippet shows how to define the parameters for the updateServiceAccount endpoint. It includes a path parameter for the service account ID and a body parameter for the update form.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/api/README.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
// swagger:parameters updateServiceAccount
type UpdateServiceAccountParams struct {
	// in:path
	ServiceAccountId int64 `json:"serviceAccountId"`
	// in:body
	Body serviceaccounts.UpdateServiceAccountForm
}
```

----------------------------------------

TITLE: CPU Usage Metrics in Prometheus Format
DESCRIPTION: Time-series metrics showing CPU usage statistics including total user seconds and guest seconds across different CPU cores and modes. Each line represents a distinct metric with labels for CPU number and mode, followed by the metric value and timestamp in nanoseconds.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/incomplete_fields.txt#2025-04-23_snippet_0

LANGUAGE: prometheus
CODE:
```
node_cpu,cpu=7,mode=user seconds_total=6410.4799999999996 1625783151607273176
node_cpu,cpu=0,mode=user guest_seconds_total=0 1625783151607273176
node_cpu,cpu=0,mode=nice guest_seconds_total=0 1625783151607273176
node_cpu,cpu=1,mode=user guest_seconds_total=0 1625783151607273176
```

----------------------------------------

TITLE: HTTP Success Unassigning Role from Team - Grafana Access Control - JSON
DESCRIPTION: Example JSON response for successful removal of a role from a team, with a message confirming the unassignment. HTTP/1.1 200 OK and Content-Type: application/json are used.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_37

LANGUAGE: json
CODE:
```
{
    "message": "Role removed from team."
}
```

----------------------------------------

TITLE: Debugging Multiple Bindings Error in Google Wire Dependency Injection
DESCRIPTION: An error message from the Google Wire dependency injection tool showing that there are multiple bindings for the 'Foo' type. The type is provided both by a provider function 'provideFoo' and through a provider set 'Set', while also being passed as an argument to an injector function 'injectBar'.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/InjectInputConflict/want/wire_errs.txt#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
example.com/foo/wire.go:x:y: multiple bindings for example.com/foo.Foo
current:
<- provider "provideFoo" (example.com/foo/foo.go:x:y)
<- provider set "Set" (example.com/foo/foo.go:x:y)
previous:
<- argument foo to injector function injectBar (example.com/foo/wire.go:x:y)
```

----------------------------------------

TITLE: Defining Provider with Error Handling in Go
DESCRIPTION: Illustrates a provider function (ProvideBaz) that can return an error along with the value.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_2

LANGUAGE: go
CODE:
```
package foobarbaz

import (
    "context"
    "errors"
)

// ...

type Baz struct {
    X int
}

// ProvideBaz returns a value if Bar is not zero.
func ProvideBaz(ctx context.Context, bar Bar) (Baz, error) {
    if bar.X == 0 {
        return Baz{}, errors.New("cannot provide baz when bar is zero")
    }
    return Baz{X: bar.X}, nil
}
```

----------------------------------------

TITLE: Configuring Key ID for JWT Verification
DESCRIPTION: Configuration for specifying the Key ID when verifying JWT tokens with a specific key.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_8

LANGUAGE: ini
CODE:
```
key_id = my-key-id
```

----------------------------------------

TITLE: Scaling Grafana Instances
DESCRIPTION: Commands to scale the number of Grafana instances using Docker Compose
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha_test/README.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
$ docker-compose up --scale grafana=<instances> -d
# for example 3 instances
$ docker-compose up --scale grafana=3 -d
```

----------------------------------------

TITLE: Including Shared Value Mapping Options Documentation (Hugo Shortcode)
DESCRIPTION: Uses a Hugo shortcode (`docs/shared`) to embed a reusable documentation section detailing value mapping options used for customizing how values are displayed in Grafana visualizations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_11

LANGUAGE: markdown
CODE:
```
{{< docs/shared lookup="visualizations/value-mappings-options.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Importing Badge Component and Storybook Dependencies
DESCRIPTION: Imports the necessary Storybook documentation components and the Badge component for documentation.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Badge/Badge.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Meta, ArgTypes } from '@storybook/blocks';
import { Badge } from './Badge';
```

----------------------------------------

TITLE: Analyzing Dependency Injection Error in Go
DESCRIPTION: This error message indicates a problem with dependency injection using Wire in a Go file. The provider for 'example.com/foo.Foo' returns a cleanup function, but the injection point does not handle this cleanup function.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/InjectorMissingCleanup/want/wire_errs.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
example.com/foo/wire.go:x:y: inject injectFoo: provider for example.com/foo.Foo returns cleanup but injection does not return cleanup function
```

----------------------------------------

TITLE: Importing Toggletip Component in TypeScript
DESCRIPTION: This code snippet shows how to import the Toggletip component and its types for use in a TypeScript environment.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Toggletip/Toggletip.mdx#2025-04-23_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { ArgTypes } from '@storybook/blocks';
import { Toggletip } from './Toggletip';
```

----------------------------------------

TITLE: Using Animation with and without Reduced Motion Handling (Styled Components, TypeScript)
DESCRIPTION: This set of code snippets demonstrates correct and incorrect usage of animation properties within the Grafana CSS-in-JS framework. The bad example applies CSS animation unconditionally, while the good examples show how to wrap animations in a media query or use the theme.transitions.handleMotion utility for accessibility and motion sensitivity. Dependencies: GrafanaTheme2, css from styled-components/emotion, and a defined rotate and pulse animation. Input: theme object. Output: style object for a 'loading' class. The pattern must avoid applying motion for users with reduced-motion preferences.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-eslint-rules/README.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
// Bad ❌
const getStyles = (theme: GrafanaTheme2) => ({
  loading: css({
    animationName: rotate,
    animationDuration: '2s',
    animationIterationCount: 'infinite',
  }),
});
```

LANGUAGE: typescript
CODE:
```
// Good ✅
const getStyles = (theme: GrafanaTheme2) => ({
  loading: css({
    [theme.transitions.handleMotion('no-preference')]: {
      animationName: rotate,
      animationDuration: '2s',
      animationIterationCount: 'infinite',
    },
    [theme.transitions.handleMotion('reduce')]: {
      animationName: pulse,
      animationDuration: '2s',
      animationIterationCount: 'infinite',
    },
  }),
});
```

LANGUAGE: typescript
CODE:
```
// Good ✅
const getStyles = (theme: GrafanaTheme2) => ({
  loading: css({
    '@media (prefers-reduced-motion: no-preference)': {
      animationName: rotate,
      animationDuration: '2s',
      animationIterationCount: 'infinite',
    },
    '@media (prefers-reduced-motion: reduce)': {
      animationName: pulse,
      animationDuration: '2s',
      animationIterationCount: 'infinite',
    },
  }),
});
```

----------------------------------------

TITLE: Embedding YouTube Video for InfluxDB SQL Support using Hugo Shortcode
DESCRIPTION: This Hugo shortcode embeds a YouTube video with the ID 'jGclGsv5PBA' into the documentation. The video likely demonstrates or explains the new native SQL support feature for InfluxDB within Grafana. Requires the Hugo static site generator and its 'youtube' shortcode definition.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-3.md#2025-04-23_snippet_1

LANGUAGE: hugo
CODE:
```
{{< youtube id="jGclGsv5PBA" >}}
```

----------------------------------------

TITLE: Defining Data Source Scopes in Grafana RBAC
DESCRIPTION: Specifies scopes to restrict actions to a set of data sources. `datasources:*` matches any data source, whereas `datasources:uid:1` targets the specific data source with UID 1.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_30

LANGUAGE: text
CODE:
```
datasources:*
```

LANGUAGE: text
CODE:
```
datasources:uid:*
```

----------------------------------------

TITLE: Accessing Grafana with JWT Authentication
DESCRIPTION: Command to access the Grafana instance configured with JWT authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/jwt_proxy/readme.md#2025-04-23_snippet_3

LANGUAGE: sh
CODE:
```
http://env.grafana.local:8088
```

----------------------------------------

TITLE: Querying Log Groups with OpenSearch SQL in CloudWatch
DESCRIPTION: Demonstrates how to query a single log group using OpenSearch SQL syntax in CloudWatch. The query counts exceptions within a specified time window.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/query-editor/index.md#2025-04-23_snippet_1

LANGUAGE: sql
CODE:
```
SELECT window.start, COUNT(*) AS exceptionCount
FROM `log_group`
WHERE `@message` LIKE '%Exception%'
```

----------------------------------------

TITLE: Representing Permissions for All Subresources of a Type in OpenFGA
DESCRIPTION: This tuple format allows granting a user ('user:1') 'read' access to all subresources of a specific type under a given resource group (e.g., all dashboard subresources). The object identifier targets the subresource type directly.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_5

LANGUAGE: text
CODE:
```
{ “user”: “user:1”, relation: “read”, object:”resource:dashboard.grafana.app/dashboards/<subresource>” }
```

----------------------------------------

TITLE: Creating Folder via kubectl - Shell
DESCRIPTION: This shell command creates a Folder custom resource in Kubernetes by applying the specified manifest file using a Grafana-authenticated kubeconfig. This requires proper cluster setup and the existence of the folder-generate.yaml file.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_15

LANGUAGE: sh
CODE:
```
kubectl --kubeconfig=./grafana.kubeconfig create -f folder-generate.yaml
```

----------------------------------------

TITLE: Installing and Generating Grafana Icons
DESCRIPTION: Commands for setting up the development environment and generating icon components. Includes instructions for installing dependencies and regenerating components after changes.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-icons/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
yarn install
yarn generate
```

----------------------------------------

TITLE: InfluxDB Line Protocol - Actuator Commands Data Point 1
DESCRIPTION: InfluxDB line protocol data point containing measurements for aircraft actuator states including angles, currents and brake positions. Timestamp: 1618400059121931000
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/mixed_number_types.txt#2025-04-23_snippet_0

LANGUAGE: influxdb
CODE:
```
avionics_actuator_ActuatorCommands,host=MacBook-Pro-Alexander.local tilt_deg_2=-17.7650375,surface_angle_deg_3=11.6852818,tilt_deg_0=-1.15918803,surface_angle_deg_8=-9.71168709,pitch_deg_4=-15.3900461,motor_current_A_6=12.0532084,pitch_brake_3=true,surface_angle_deg_1=-12.3403225,surface_angle_deg_7=29.6087742,tilt_brake_1=true,motor_current_A_11=15.4619112,motor_current_A_5=-5.99128914,pitch_brake_1=true,motor_current_A_2=9.32099056,tilt_brake_0=true,tilt_brake_4=false,tailno="GHIL",motor_current_A_1=2.68936205,pitch_brake_5=false,tilt_deg_3=47.3740387,surface_angle_deg_2=15.5803757,motor_current_A_4=24.7537708,tilt_deg_4=-32.8259926,pitch_brake_2=false,surface_angle_deg_0=-13.7655039,pitch_brake_0=true,tilt_deg_1=-20.9695129,motor_current_A_3=9.7648468,pitch_deg_5=9.11340141,motor_current_A_10=43.7951317,pitch_deg_1=8.13307095,surface_angle_deg_4=16.7721748,surface_angle_deg_6=-0.672622204,tilt_brake_2=true,motor_current_A_7=-15.5444078,surface_angle_deg_9=-27.5968456,tilt_brake_5=true,pitch_deg_2=-3.20253587,pitch_brake_4=true,tilt_deg_5=7.48156977,motor_current_A_8=37.8594284,pitch_deg_0=-29.9564457,tilt_brake_3=true,motor_current_A_0=1.99507976,surface_angle_deg_5=-16.7661037,pitch_deg_3=-20.904705,recorder="fcc1",motor_current_A_9=-19.5889759 1618400059121931000
```

----------------------------------------

TITLE: Using Selectors in JSX Components
DESCRIPTION: JSX example demonstrating how to import and use selectors from the E2E framework in component markup.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_3

LANGUAGE: jsx
CODE:
```
import { selectors } from '@grafana/e2e-selectors';

<input data-testid={selectors.pages.Login.username} className="gf-form-input login-form-input" type="text" />;
```

----------------------------------------

TITLE: Retrieving All Library Elements Response Example (HTTP/JSON)
DESCRIPTION: Example HTTP 200 OK response for the 'Get all library elements' request. The JSON body includes pagination details (`totalCount`, `page`, `perPage`) and an array of library element objects (`elements`) with their properties like ID, UID, name, kind, model, and metadata.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "result": {
     "totalCount": 15,
     "page": 1,
     "perPage": 10
     "elements": [
        {
            "id": 25,
            "orgId": 1,
            "folderId": 0,
            "uid": "V--OrYHnz",
            "name": "API docs Example",
            "kind": 1,
            "type": "text",
            "description": "",
            "model": {...},
            "version": 1,
            "meta": {
                "folderName": "General",
                "folderUid": "",
                "connectedDashboards": 1,
                "created": "2021-09-27T09:56:17+02:00",
                "updated": "2021-09-27T09:56:17+02:00",
                "createdBy": {
                    "id": 1,
                    "name": "admin",
                    "avatarUrl": "/avatar/46d229b033af06a191ff2267bca9ae56"
                },
                "updatedBy": {
                    "id": 1,
                    "name": "admin",
                    "avatarUrl": "/avatar/46d229b033af06a191ff2267bca9ae56"
                }
            }
        },
        {...}
        {...}
     ],
  }
}
```

----------------------------------------

TITLE: Defining Grafana Fixed Role: fixed:datasources.insights:reader
DESCRIPTION: Specifies the `fixed:datasources.insights:reader` role (ID: `fixed_EBZ3NwlfecNPp2p0XcZRC1nfEYk`) within Grafana. This role grants the `datasources.insights:read` permission, allowing users to read data source insights data.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_4

LANGUAGE: plaintext
CODE:
```
fixed:datasources.insights:reader
```

LANGUAGE: plaintext
CODE:
```
fixed_EBZ3NwlfecNPp2p0XcZRC1nfEYk
```

LANGUAGE: plaintext
CODE:
```
Permissions included:
- datasources.insights:read
```

----------------------------------------

TITLE: Building and Watching Grafana Test Plugins
DESCRIPTION: Builds the test plugins located in the designated directory (likely `plugins-repo/` or similar) and watches for file changes. This allows developers to see updates to test plugins reflected during local development without manual rebuilds.
SOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/README.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
yarn e2e:plugin:build:dev
```

----------------------------------------

TITLE: Listing TLS Certificates in MQTT Container
DESCRIPTION: Command to list available TLS certificates in the /etc/certs directory of the MQTT container. Used for verifying available certificate files for TLS configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/mqtt/README.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
docker exec devenv-mqtt-1 ls /etc/certs/
```

----------------------------------------

TITLE: Rendering Spinner Component Properties in Storybook
DESCRIPTION: This JSX code displays the properties (ArgTypes) of the Spinner component in the Storybook documentation.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Spinner/Spinner.mdx#2025-04-23_snippet_3

LANGUAGE: JSX
CODE:
```
<ArgTypes of={Spinner} />
```

----------------------------------------

TITLE: Data Source Configuration Properties
DESCRIPTION: Configuration for data source defaults and SQL connection settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_12

LANGUAGE: properties
CODE:
```
default_manage_alerts_ui_toggle=
max_open_conns_default=100
max_idle_conns_default=100
max_conn_lifetime_default=14400
```

----------------------------------------

TITLE: Defining grafana.datasource.request Attributes for OpenTelemetry
DESCRIPTION: Defines OpenTelemetry semantic convention attributes for Grafana datasource requests. It includes `grafana.datasource.request.query_count` (int, e.g., '3'), representing the number of queries in the request. This attribute is recommended and stable.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/semconv/README.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
<!-- semconv trace.grafana.datasource.request -->
| Attribute  | Type | Description  | Examples  | [Requirement Level](https://opentelemetry.io/docs/specs/semconv/general/attribute-requirement-level/) | Stability |
|---|---|---|---|---|---|
| `grafana.datasource.request.query_count` | int | The number of queries in the request. | `3` | `Recommended` | ![Stable](https://img.shields.io/badge/-stable-lightgreen) |
<!-- endsemconv -->
```

----------------------------------------

TITLE: Showing Result of Outer Join on Time Series Data
DESCRIPTION: This Markdown table illustrates the output after applying an outer join transformation to the data from Query A and Query B. The join includes all rows from both queries based on the 'Time' column, filling in missing values with nulls where timestamps don't match.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_23

LANGUAGE: markdown
CODE:
```
| Time                | Job     | Uptime    | Server   | Errors |
| ------------------- | ------- | --------- | -------- | ------ |
| 2020-07-07 11:04:20 |         |           | server 3 | 10     |
| 2020-07-07 11:14:20 | postgre | 345001233 |          |        |
| 2020-07-07 11:34:20 | node    | 25260122  | server 1 | 15     |
| 2020-07-07 11:24:20 | postgre | 123001233 | server 2 | 5      |
```

----------------------------------------

TITLE: Example Grafana Log Entry for Plugin Registration (Text)
DESCRIPTION: Illustrates a typical informational log message produced by the Grafana server when it successfully detects and registers a plugin upon startup. This specific example shows the registration of a plugin with the ID `my-plugin`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/create-plugin.md#2025-04-23_snippet_4

LANGUAGE: text
CODE:
```
INFO[01-01|12:00:00] Plugin registered       logger=plugin.loader pluginID=my-plugin
```

----------------------------------------

TITLE: Defining Service Account Scopes in Grafana RBAC
DESCRIPTION: Specifies scopes to restrict actions to a set of service accounts within an organization. `serviceaccounts:*` matches any service account, while `serviceaccounts:id:1` targets the specific service account with ID 1.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_42

LANGUAGE: text
CODE:
```
serviceaccounts:*
```

LANGUAGE: text
CODE:
```
serviceaccounts:id:*
```

----------------------------------------

TITLE: Tooltip Options Table in Markdown
DESCRIPTION: Markdown table defining tooltip configuration options for Grafana visualizations, including tooltip mode and maximum width settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/xy-chart/index.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
| Option       | Description |
| ------------ | ----------- |
| Tooltip mode | When you hover your cursor over the visualization, Grafana can display tooltips. Choose how they behave:<ul><li>**Single** - The hover tooltip shows only a single series, the one that you are hovering over on the visualization.</li><li>**Hidden** - Do not display the tooltip when you interact with the visualization.</li></ul> |
| Max width    | Set the maximum width of the tooltip box. |
```

----------------------------------------

TITLE: Creating a Hubot Alias for a Grafana Command (Hubot Command/Bash)
DESCRIPTION: This is an example command sent to a running Hubot instance that has the `hubot-alias` plugin installed. It creates an alias named `graf-lb`. When a user types `hubot graf-lb`, Hubot will execute the longer command `graf db loadbalancers:2 now-20m`, which retrieves panel 2 from the 'loadbalancers' dashboard for the last 20 minutes. This demonstrates how to simplify complex Grafana queries via Hubot.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/integrate-hubot/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
hubot alias graf-lb=graf db loadbalancers:2 now-20m
```

----------------------------------------

TITLE: Storybook Meta Configuration
DESCRIPTION: JSX configuration for Storybook documentation, setting up the component metadata.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Collapse/CollapsableSection.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<Meta title="MDX|CollapsableSection" component={CollapsableSection} />
```

----------------------------------------

TITLE: Building Individual Grafana Packages using Yarn Scope
DESCRIPTION: This command uses Yarn workspaces and the `--scope` flag to build specific individual packages within the `@grafana` namespace (e.g., data, ui, runtime). It runs the `packages:build` script defined in the root `package.json`.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/README.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
yarn packages:build --scope=@grafana/<data|e2e|e2e-selectors|runtime|schema|ui>
```

----------------------------------------

TITLE: Successful Response for Retrieving a Shared Dashboard in Grafana
DESCRIPTION: This HTTP response returns details of the shared dashboard including its UID, access token, creation information, and configuration settings like time selection, enabled status, and annotations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
    "uid": "e71950f3-e7dd-4d1e-aa8a-a857bc5e7d64",
    "dashboardUid": "xCpsVuc4z",
    "accessToken": "dab10f3a4fbb4342a602b03079c7ed64",
    "createdBy": 1,
    "updatedBy": 1,
    "createdAt": "2023-09-05T15:48:21-03:00",
    "updatedAt": "2023-09-05T15:48:21-03:00",
    "timeSelectionEnabled": false,
    "isEnabled": false,
    "annotationsEnabled": false,
    "share": "public"
}
```

----------------------------------------

TITLE: Storybook Meta Configuration
DESCRIPTION: Meta configuration for the MultiCombobox Storybook documentation using JSX syntax.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Combobox/MultiCombobox.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<Meta title="MDX|MultiCombobox" component={MultiCombobox} />
```

----------------------------------------

TITLE: Grafana Plugin Manifest Content in JSON
DESCRIPTION: This JSON object represents the signed content within the PGP message, acting as a manifest for a Grafana plugin. It specifies the manifest version, signature details (type, organization), plugin identifier ('test-app'), version ('1.0.0'), signing timestamp, the PGP Key ID used for signing, and a mapping of file paths within the plugin to their SHA512 checksums. This structure is used by Grafana to verify the integrity of plugin files upon installation or loading.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/includes-symlinks/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "plugin": "test-app",
  "version": "1.0.0",
  "time": 1622547655175,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "symlink_to_txt": "9f32c171bf78a85d5cb77a48ab44f85578ee2942a1fc9f9ec4fde194ae4ff048",
    "plugin.json": "c59a51bf6d7ecd7a99608ccb99353390c8b973672a938a0247164324005c0caf",
    "dashboards/connections.json": "bea86da4be970b98dc4681802ab55cdef3441dc3eb3c654cb207948d17b25303",
    "dashboards/extra/memory.json": "7c042464941084caa91d0a9a2f188b05315a9796308a652ccdee31ca4fbcbfee",
    "text.txt": "9f32c171bf78a85d5cb77a48ab44f85578ee2942a1fc9f9ec4fde194ae4ff048"
  }
}
```

----------------------------------------

TITLE: Configuring LDAP Authentication in Grafana
DESCRIPTION: LDAP configuration settings for Grafana's config file to enable Authentik LDAP authentication with active sync.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/authentik/README.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[auth.ldap]
enabled = true
config_file = devenv/docker/blocks/auth/authentik/ldap_authentik.toml

sync_cron = "* * * * 1"
active_sync_enabled = true
```

----------------------------------------

TITLE: Example Vault Configuration for Development Server in Grafana INI
DESCRIPTION: Provides a concrete example of configuring the `[keystore.vault]` section in `grafana.ini` to connect to a local Vault development server (`vault server -dev`). It sets the URL, specifies 'token' as the authentication method, and provides a placeholder token.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/integrate-with-hashicorp-vault/index.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[keystore.vault]
url = http://127.0.0.1:8200 # HTTP should only be used for local testing
auth_method = token
token = s.sAZLyI0r7sFLMPq6MWtoOhAN # replace with your key
```

----------------------------------------

TITLE: Embedding Back Up Steps for Grafana Data - Markdown
DESCRIPTION: This snippet embeds shared backup instructions relevant to Grafana upgrades using a Hugo shortcode. Dependencies include the Hugo documentation infrastructure and prepared backup guidance in 'back-up-grafana.md'. The 'leveloffset' parameter controls heading levels for proper document structure. Inputs include the version placeholder, which should be substituted during the build. Output is contextually integrated backup documentation, but requires the static site generator's cooperation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v10.3/index.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
{{< docs/shared lookup=\"back-up/back-up-grafana.md\" source=\"grafana\" version=\"<GRAFANA VERSION>\" leveloffset=\"+1\" >}}
```

----------------------------------------

TITLE: Using Grafana CLI Admin Command with Homebrew (Apple Silicon Path)
DESCRIPTION: Executes a Grafana CLI admin command (`reset-admin-password`) for a Homebrew installation on Apple Silicon. It specifies the paths for the CLI binary, configuration file (`grafana.ini`), homepath, and overrides the data path. Replace `<new password>` with the desired new administrator password. Paths may differ on Intel-based Macs.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/mac/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
/opt/homebrew/opt/grafana/bin/grafana cli --config /opt/homebrew/etc/grafana/grafana.ini --homepath /opt/homebrew/opt/grafana/share/grafana --configOverrides cfg:default.paths.data=/opt/homebrew/var/lib/grafana admin reset-admin-password <new password>
```

----------------------------------------

TITLE: Executing Custom Alert Labels and Annotations Template in Grafana
DESCRIPTION: This snippet demonstrates how to execute the custom template for displaying alert labels and annotations by passing the context (dot) to the template.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_15

LANGUAGE: go
CODE:
```
{{ template "custom.alert_labels_and_annotations" . }}
```

----------------------------------------

TITLE: Rendering RadioButtonGroup with Required Props in React (JSX)
DESCRIPTION: This snippet illustrates rendering the RadioButtonGroup component with options, value, and onChange properties. "options" should be an array of option objects, "value" the current selected value, and "onChange" a callback for value changes. Inputs and outputs must adhere to component expectations, and the options must be mutually exclusive. This example assumes RadioButtonGroup is correctly imported.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/RadioButtonGroup/RadioButtonGroup.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<RadioButtonGroup options={...} value={...} onChange={...} />
```

----------------------------------------

TITLE: Installing Grafana Schema Package
DESCRIPTION: Commands to install the @grafana/schema package using either yarn or npm package managers
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-schema/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
yarn add @grafana/schema
```

LANGUAGE: bash
CODE:
```
npm install @grafana/schema
```

----------------------------------------

TITLE: Structuring a PGP Signed Message for Grafana Plugin Manifest
DESCRIPTION: This text represents a complete PGP signed message containing a Grafana plugin manifest (JSON payload). The structure includes the signed message content enclosed between '-----BEGIN PGP SIGNED MESSAGE-----' and '-----BEGIN PGP SIGNATURE-----', specifying the hash algorithm used (SHA512). The block concludes with the ASCII-armored PGP signature itself, providing verification of the message's origin and integrity.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/non-pvt-with-root-url/plugin/MANIFEST.txt#2025-04-23_snippet_1

LANGUAGE: pgp
CODE:
```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "rootUrls": [
    "https://dev.grafana.com/"
  ],
  "plugin": "test-datasource",
  "version": "1.0.0",
  "time": 1661173657946,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "203ef4a613c5693c437a665cd67f95e2756a0f71b336b2ffb265db7c180d0b19"
  }
}
-----BEGIN PGP SIGNATURE-----
Version: OpenPGP.js v4.10.10
Comment: https://openpgpjs.org

wrgEARMKAAYFAmMDf5oAIQkQfk0ManCIZucWIQTzOyW2kQdOhGNlcPN+TQxq
cIhm54/fAgkBVr9FXILsku+PsG86pZbxSbB/5/OeDsoqq9vJ30R3yaBYJC0N
tcS1PtWPzc3yMqJY1zi5pem0WfmYdH3j++NqB3QCCIUz1eAjgbilvIvoyj/j
Ia9Vcje1c3xApMFAeD4DdUBgFljAUFzz48IjZacjSNFm+gaNPhWJzYmo83wz
VqEbGL1A
=SzNa
-----END PGP SIGNATURE-----
```

----------------------------------------

TITLE: Referencing Mock API Module Path in TypeScript
DESCRIPTION: File path reference for mock API helper functions used in Grafana alerting tests.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/alerting/unified/TESTING.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
public/app/features/alerting/unified/mockApi.ts
```

----------------------------------------

TITLE: Cleaning Up Local Aggregation Test Resources (Shell)
DESCRIPTION: This command uses `kubectl delete` with the `-f` flag pointing to the example directory (`./pkg/services/apiserver/aggregator/examples/`) containing the manifest files. It removes the `APIService` and `ExternalName` resources previously created using `kubectl apply`, effectively unregistering the example service from the Grafana aggregator and cleaning up the test setup. Requires `KUBECONFIG` to be set correctly.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/aggregator/README.md#2025-04-23_snippet_6

LANGUAGE: shell
CODE:
```
kubectl delete -f ./pkg/services/apiserver/aggregator/examples/
```

----------------------------------------

TITLE: Implementing Event Number Provider in Go
DESCRIPTION: Example showing an unused provider function that returns an event number, demonstrating Wire's error detection for unused providers.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_18

LANGUAGE: go
CODE:
```
func NewEventNumber() int  {
    return 1
}

func InitializeEvent(phrase string) (Event, error) {
     // woops! NewEventNumber is unused.
    wire.Build(NewEvent, NewGreeter, NewMessage, NewEventNumber)
    return Event{}, nil
}
```

----------------------------------------

TITLE: JSON Structure Example for JWT Claims
DESCRIPTION: Example of a JWT structure with nested user attributes that can be accessed using JMESPath syntax for username and email claims.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
{
  "user": {
    "UID": "1234567890",
    "name": "John Doe",
    "username": "johndoe",
    "emails": ["personal@email.com", "professional@email.com"]
  }
}
```

----------------------------------------

TITLE: Flux Query with Macro Usage
DESCRIPTION: Example of a Flux query using Grafana macros for time range, bucket, and window period. Shows both the original query with macros and the interpolated version with actual values.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/query-editor/index.md#2025-04-23_snippet_3

LANGUAGE: flux
CODE:
```
from(bucket: v.defaultBucket)
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "cpu" or r["_measurement"] == "swap")
  |> filter(fn: (r) => r["_field"] == "usage_system" or r["_field"] == "free")
  |> aggregateWindow(every: v.windowPeriod, fn: mean)
  |> yield(name: "mean")
```

LANGUAGE: flux
CODE:
```
from(bucket: "grafana")
  |> range(start: 2020-06-11T13:59:07Z, stop: 2020-06-11T14:59:07Z)
  |> filter(fn: (r) => r["_measurement"] == "cpu" or r["_measurement"] == "swap")
  |> filter(fn: (r) => r["_field"] == "usage_system" or r["_field"] == "free")
  |> aggregateWindow(every: 2s, fn: mean)
  |> yield(name: "mean")
```

----------------------------------------

TITLE: Sample Trace JSON Structure
DESCRIPTION: Example JSON structure showing a single trace with span details, including trace ID, span ID, operation name, timestamps, tags, and process information.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/jaeger/_index.md#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{
  "data": [
    {
      "traceID": "2ee9739529395e31",
      "spans": [
        {
          "traceID": "2ee9739529395e31",
          "spanID": "2ee9739529395e31",
          "flags": 1,
          "operationName": "CAS",
          "references": [],
          "startTime": 1616095319593196,
          "duration": 1004,
          "tags": [
            {
              "key": "sampler.type",
              "type": "string",
              "value": "const"
            }
          ],
          "logs": [],
          "processID": "p1",
          "warnings": null
        }
      ],
      "processes": {
        "p1": {
          "serviceName": "loki-all",
          "tags": [
            {
              "key": "jaeger.version",
              "type": "string",
              "value": "Go-2.25.0"
            }
          ]
        }
      },
      "warnings": null
    }
  ],
  "total": 0,
  "limit": 0,
  "offset": 0,
  "errors": null
}
```

----------------------------------------

TITLE: Demonstrating Horizontal Divider Usage with @grafana/ui - TypeScript
DESCRIPTION: This snippet imports the Divider component from @grafana/ui and shows how to insert a horizontal divider between a page header and main content in a React component. Dependencies required are React and the @grafana/ui library. No special props are passed, so the Divider defaults to horizontal mode. Inputs are typical JSX; output is a visual separation within the page layout. The snippet must be used within a React rendering context.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Divider/Divider.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Divider } from '@grafana/ui';

    <header>
        <h1>My title here</h1>
        <img src="logo.png" alt="logo" />
    </header>
    <Divider />
    <main>
        <p>Main content goes here</p>
    </main>

```

----------------------------------------

TITLE: Accessing Instant Query Value
DESCRIPTION: This Go template snippet shows how to access the value of an instant query result, identified by Ref ID 'A', using the `$values` variable within a Grafana alert template.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_7

LANGUAGE: gotemplate
CODE:
```
{{ $values.A.Value }}
```

----------------------------------------

TITLE: Release Notes Configuration in YAML
DESCRIPTION: YAML configuration file for Grafana 7.5.10 release notes specifying build settings, product labels and title information.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-10.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
_build:
  list: false
labels:
  products:
    - cloud
    - enterprise
    - oss
title: Release notes for Grafana 7.5.10
```

----------------------------------------

TITLE: Testing Accessibility with React Testing Library
DESCRIPTION: Demonstrates how to write tests with accessibility in mind using React Testing Library. The example tests whether an input field has the correct value by querying it by its role and accessible name.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/accessibility.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
it('has username set', () => {
  expect(screen.getByRole('textbox', { name: 'Username' })).toHaveValue('Test');
});
```

----------------------------------------

TITLE: Rendering Card Grid using Hugo Shortcode
DESCRIPTION: This Hugo shortcode calls the `card-grid` template to generate a grid of navigational cards. The `key=\"cards\"` parameter specifies that the card data should be sourced from the `cards` object (specifically its `items` array) in the frontmatter. The `type=\"simple\"` attribute likely controls the visual layout or style of the card grid.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/_index.md#2025-04-23_snippet_1

LANGUAGE: hugo
CODE:
```
{{< card-grid key="cards" type="simple" >}}
```

----------------------------------------

TITLE: Rendering TextLink with Standalone External Link in React (JSX)
DESCRIPTION: This snippet shows how to render an external, standalone TextLink component using the href, color, inline, and external props. It demonstrates changing the link color to the 'primary' palette, setting the link as non-inline (standalone), and opening an external URL. Dependencies: React, Grafana UI's TextLink component. The main prop parameters are href (destination URL), color (link color, such as 'primary'), inline (boolean for inline/standalone), and external (opens link externally, shows icon). The output is an anchor element styled based on the props, with appearance adapting to dark/light theme settings.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Link/TextLink.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<TextLink href=\"https://google.es\" color=\"primary\" inline={false} external>\n  This an external standalone link example\n</TextLink>
```

----------------------------------------

TITLE: Overriding Specific Configuration Settings via CLI (Bash)
DESCRIPTION: Provides an example of using the '--configOverrides' global option to temporarily override a specific Grafana configuration setting. This example redirects log output to '/dev/null' during a plugin installation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
grafana cli --configOverrides cfg:default.paths.log=/dev/null plugins install <plugin-id>
```

----------------------------------------

TITLE: Grafana LDAP Authentication Configuration
DESCRIPTION: Basic LDAP authentication configuration for Grafana's configuration file
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/openldap/README.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[auth.ldap]
enabled = true
config_file = conf/ldap.toml
```

----------------------------------------

TITLE: Defining Tabbed Content for Data Links and Actions using Hugo Shortcodes
DESCRIPTION: This snippet utilizes Hugo shortcodes (`{{< tabs >}}`, `{{< tab-content >}}`, `{{< /tab-content >}}`, `{{< /tabs >}}`) to create a tabbed interface within the documentation page. It separates the instructions for adding data links and adding actions to Grafana Canvas elements into distinct, user-selectable tabs.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/canvas/index.md#2025-04-23_snippet_0

LANGUAGE: hugo
CODE:
```
{{< tabs >}}
{{< tab-content name="Add data links" >}}
To add a data link, follow these steps:

1. Enable inline editing.
1. Click the element to which you want to add the data link.
1. In either the inline editor or panel editor, expand the **Selected element** editor.
1. Scroll down to the **Data links and actions** section and expand it.
1. Click **+ Add link**.
1. In the dialog box that opens, enter a **Title**.

   This is a human-readable label for the link displayed in the UI. This is a required field.

1. Enter the **URL** or variable to which you want to link.

   To add a data link variable, click in the **URL** field and enter `$` or press Ctrl+Space or Cmd+Space to see a list of available variables. This is a required field.

1. If you want the link to open in a new tab, toggle the **Open in a new tab** switch.
1. If you want the data link to open with a single click on the element, toggle the **One click** switch.

   Only one data link or action can have **One click** enabled at a time.

1. Click **Save** to save changes and close the dialog box.
1. Disable inline editing.
   {{< /tab-content >}}
   {{< tab-content name="Add actions" >}}
   To add an action, by follow these steps:

1. Enable inline editing.
1. Click the element to which you want to add the data link.
1. In either the inline editor or panel editor, expand the **Selected element** editor.
1. Scroll down to the **Data links and actions** section and expand it.
1. Click **+ Add action**.
1. In the dialog box that opens, set the action options:

   | Option               | Description                                                                                                                                                                                     |
   | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   | Title                | A human-readable label for the action that's displayed in the UI.                                                                                                                               |
   | Confirmation message | A descriptive prompt to confirm or cancel the action.                                                                                                                                           |
   | One click            | If you want the action to be triggered by a single click on the element, toggle the switch.</p><p>Only one data link or action can have **One click** enabled at a time.                        |
   | Method               | Select from **POST**, **PUT**, or **GET**.                                                                                                                                                      |
   | URL                  | The request URL or variable to which you want to link.</p><p>To add a variable, click in the **URL** field and enter `$` or press Ctrl+Space or Cmd+Space to see a list of available variables. |
   | Query parameters     | **Key** and **Value** pairs. Click the **+** icon to add as many key/value pairs as you need.                                                                                                   |
   | Headers              | Comprised of **Key** and **Value** pairs and a **Content-Type**.</p><p>Click the **+** icon to add as many key/value pairs as you need.                                                         |
   | Content-Type         | Select from the following: **application/json**, **text/plain**, **application/XML**, and **application/x-www-form-urlencoded**.                                                                |
   | Body                 | The body of the request.                                                                                                                                                                        |

1. Click **Save** to save changes and close the dialog box.
1. Disable inline editing.
   {{< /tab-content >}}
   {{< /tabs >}}
```

----------------------------------------

TITLE: Invalid Dynamic i18nKey Usage with Trans Component in JSX
DESCRIPTION: Provides an example of incorrect usage where the `i18nKey` prop for the `<Trans>` component is constructed dynamically using template literals. This approach is invalid because the tooling requires static analysis to extract translation keys.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_4

LANGUAGE: jsx
CODE:
```
const ErrorMessage = ({ id, message }) => <Trans i18nKey={`errors.${id}`}>There was an error: {{ message }}</Trans>;
```

----------------------------------------

TITLE: Upgrading Grafana Release to Update Admin Credentials - Bash
DESCRIPTION: This Helm upgrade command applies new admin credentials defined in values.yaml to the Grafana deployment. This redeploys the Helm release using the latest configuration. Ensure only intended personnel have access to these new static credentials.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_25

LANGUAGE: bash
CODE:
```
helm upgrade my-grafana grafana/grafana -f values.yaml -n monitoring
```

----------------------------------------

TITLE: Creating Docker Compose with Specific Database Sources for Grafana
DESCRIPTION: This Make command generates a docker-compose file with specified database sources (influxdb, prometheus, elastic5) configured and ready to use with fake data for development.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/README.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
make devenv sources=influxdb,prometheus,elastic5
```

----------------------------------------

TITLE: Configuring sensuctl in Sensu Go Docker Container
DESCRIPTION: Command to configure sensuctl with pre-set credentials. This step is necessary before generating an API key. It sets the URL, username, password, and namespace for the Sensu Go instance.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/sensugo/notes.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
sensuctl configure -n --url http://127.0.0.1:8080 --username admin --password 'Password123' --namespace default
```

----------------------------------------

TITLE: Enabling Verbose Logging - JSON
DESCRIPTION: Sets verboseLogging to true in rendering JSON configuration to capture debug-level logs during rendering. Used for obtaining detailed output useful when diagnosing rendering issues. Works in conjunction with high log level settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_26

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "verboseLogging": true
  }
}
```

----------------------------------------

TITLE: Defining Grafana Plugin Manifest in JSON
DESCRIPTION: This JSON object serves as the manifest for the 'test-app' Grafana plugin, version 1.0.0. It specifies metadata including the manifest version (2.0.0), signature details (type: grafana, organization: grafana, key ID: 7e4d0c6a708866e7), timestamp, and a list of plugin files ('plugin.json', 'nested/plugin.json') with their corresponding SHA512 hashes for integrity verification. This manifest is designed to be cryptographically signed, as indicated by the surrounding PGP message structure.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/duplicate-plugins/nested/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "plugin": "test-app",
  "version": "1.0.0",
  "time": 1621412405893,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "e2c9f711796252bdde63b19691b248aaabea361f521fff6de8ded8d95a333609",
    "nested/plugin.json": "d4aee2052f5f9aaa3eecc90e5c5d9568efcd2d97595cd77fdcd1de0ada922638"
  }
}
```

----------------------------------------

TITLE: Example Dashboard Link to External GitHub Issue
DESCRIPTION: An example URL demonstrating how to create a dashboard link that directs users to create a new GitHub issue. The URL includes query parameters to pre-fill the issue title, incorporating the current dashboard name (URL encoded). This can be used in both general dashboard links and specific URL links.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/manage-dashboard-links/index.md#2025-04-23_snippet_1

LANGUAGE: url
CODE:
```
https://github.com/grafana/grafana/issues/new?title=Dashboard%3A%20HTTP%20Requests
```

----------------------------------------

TITLE: Expected Format for PKCS#8 Private Key (Text)
DESCRIPTION: Illustrates the expected format of a PEM-encoded PKCS#8 private key file. Grafana requires the private key in this format when configured for SAML request signing. The content of the key is represented by '...'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_3

LANGUAGE: text
CODE:
```
-----BEGIN PRIVATE KEY-----
...
...
-----END PRIVATE KEY-----
```

----------------------------------------

TITLE: Building Grafana Backend
DESCRIPTION: Compiles the Grafana backend code written in Go using the project's Makefile. This step is necessary to create the executable binary for the Grafana server before it can be run.
SOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/README.md#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
make build-go
```

----------------------------------------

TITLE: Retrieving Raw UID for Grafana Datasource Variables
DESCRIPTION: Shows the `:raw` format option, specifically for datasource variables. It returns the unique identifier (UID) of the selected data source instead of its user-friendly name. The example shows a variable holding a datasource UID being interpolated as the same UID string.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
datasourceVariable = 'd7bbe725-9e48-4af8-a0cb-6cb255d873a3'
String to interpolate: '${datasourceVariable:raw}'
Interpolation result: 'd7bbe725-9e48-4af8-a0cb-6cb255d873a3'
```

----------------------------------------

TITLE: New Forms Migration - Switch Component Example
DESCRIPTION: Example showing how to use the new Switch component directly from @grafana/ui in Grafana 7
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/CHANGELOG.md#2025-04-23_snippet_1

LANGUAGE: JSX
CODE:
```
import { Switch} from '@grafana/ui';
…
<Switch ... />
```

----------------------------------------

TITLE: Starting Grafana with Docker Compose
DESCRIPTION: Starts the Grafana service (and any other services defined in `docker-compose.yml`) in detached mode (`-d`). Pulls the image if necessary and creates the container.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
docker compose up -d
```

----------------------------------------

TITLE: Ending a List using Hugo Shortcode
DESCRIPTION: This Hugo shortcode closes the list element previously opened by `{{< docs/list >}}`. It signifies the end of the list structure within the rendered documentation page.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/manage-users/view-server-org-list-and-edit.md#2025-04-23_snippet_2

LANGUAGE: hugo
CODE:
```
{{< /docs/list >}}
```

----------------------------------------

TITLE: Configuring Page Metadata using YAML Front Matter
DESCRIPTION: This YAML block at the beginning of the file defines metadata for the documentation page using Hugo front matter. 'headless: true' likely prevents the page from being included in certain site structures or lists. The 'labels' section assigns product categories ('enterprise', 'oss') to the page. 'title' sets the displayed title of the page to 'Upgrade guide introduction'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/upgrade/intro.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
---
headless: true
labels:
  products:
    - enterprise
    - oss
title: Upgrade guide introduction
---
```

----------------------------------------

TITLE: Defining Grafana Fixed Role: fixed:folders.permissions:writer
DESCRIPTION: Specifies the `fixed:folders.permissions:writer` role (ID: `fixed_3GAgpQ_hWG8o7-lwNb86_VB37eI`) within Grafana. This role includes all permissions from `fixed:folders.permissions:reader` and adds `folders.permissions:write`, allowing users to read and update all folder permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_11

LANGUAGE: plaintext
CODE:
```
fixed:folders.permissions:writer
```

LANGUAGE: plaintext
CODE:
```
fixed_3GAgpQ_hWG8o7-lwNb86_VB37eI
```

LANGUAGE: plaintext
CODE:
```
Permissions included:
- fixed:folders.permissions:reader
- folders.permissions:write
```

----------------------------------------

TITLE: Defining YAML Frontmatter for Grafana Release Notes
DESCRIPTION: YAML configuration block at the beginning of the document that sets build parameters, product labels, and document title for Grafana release notes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-8-1-0-beta1.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
_build:
  list: false
labels:
  products:
    - cloud
    - enterprise
    - oss
title: Release notes for Grafana 8.1.0-beta1
```

----------------------------------------

TITLE: Deleting the Monitoring Namespace via kubectl - Bash
DESCRIPTION: This command deletes the 'monitoring' namespace from the Kubernetes cluster, removing all resources within it (including Grafana). Use with caution as all objects in the namespace will be destroyed. Requires cluster-admin or namespace-delete permissions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_27

LANGUAGE: bash
CODE:
```
kubectl delete namespace monitoring
```

----------------------------------------

TITLE: Mocking Window Object in Jest Tests for Grafana
DESCRIPTION: Example of mocking the window object in Jest tests using spies. It demonstrates how to mock the window.location property and ensure proper cleanup after the tests to prevent leakage between test cases.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/testing.md#2025-04-23_snippet_5

LANGUAGE: tsx
CODE:
```
let windowSpy: jest.SpyInstance;

beforeAll(() => {
  windowSpy = jest.spyOn(window, 'location', 'get');
});

afterAll(() => {
  windowSpy.mockRestore();
});

it('should test with window', function () {
  windowSpy.mockImplementation(() => ({
    href: 'www.example.com',
  }));
  expect(window.location.href).toBe('www.example.com');
});
```

----------------------------------------

TITLE: Suggestions Registry Item Interface
DESCRIPTION: Defines the interface for registry items that provide completion suggestions for specific suggestion kinds. Links suggestion kinds to async functions that return completion items.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-sql/src/components/query-editor-raw/README.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
export interface SuggestionsRegistyItem extends RegistryItem {
  id: SuggestionKind;
  suggestions: (position: PositionContext, m: typeof monacoTypes) => Promise<CustomSuggestion[]>;
}
```

----------------------------------------

TITLE: Deleting Notification Templates in Grafana RBAC
DESCRIPTION: Specifies the RBAC permission required to delete existing templates used for Grafana alerting notifications. No specific associated scopes are listed (n/a).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_7

LANGUAGE: plaintext
CODE:
```
`alert.notifications.templates:delete`
```

----------------------------------------

TITLE: Defining React Components with TypeScript
DESCRIPTION: Shows the proper way to define React components using TypeScript with generic types.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_10

LANGUAGE: jsx
CODE:
```
// bad
export class YourClass extends PureComponent { ... }

// good
export class YourClass extends PureComponent<{},{}> { ... }
```

----------------------------------------

TITLE: General Grafana CLI Command Syntax (Bash)
DESCRIPTION: Illustrates the general structure for executing Grafana CLI commands. It shows the order of global options, the specific command, command-specific options, and any required arguments.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
grafana cli [global options] command [command options] [arguments...]
```

----------------------------------------

TITLE: Updating Basic Editor Role Permissions with Bash, cURL, and jq (bash)
DESCRIPTION: This bash script fetches the existing 'basic_editor' role configuration via a GET request, uses jq to remove metadata, increment the version, and append new permissions allowing roles read, write, and delete. The modified JSON is saved to a temporary file, then uploaded via a PUT request to the Grafana API. Requires 'jq', valid Bearer token, and access to the correct Grafana endpoint. Script inputs are API endpoints and existing role data; expected output is a successfully updated role. Use with care—incorrect jq filtering can corrupt the role structure.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
# Fetch the role, modify it to add the desired permissions and increment its version
curl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' \
  -X GET '<grafana_url>/api/access-control/roles/basic_editor' | \
  jq 'del(.created)| del(.updated) | del(.permissions[].created) | del(.permissions[].updated) | .version += 1' | \
  jq '.permissions += [{"action": "roles:read", "scope": "roles:*"}, {"action": "roles:write", "scope": "permissions:type:delegate"}, {"action": "roles:delete", "scope": "permissions:type:delegate"}]' > /tmp/basic_editor.json

# Update the role
curl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' -H 'Content-Type: application/json' \
  -X PUT-d @/tmp/basic_editor.json '<grafana_url>/api/access-control/roles/basic_editor'
```

----------------------------------------

TITLE: Configuring SAML Organization Mapping with Spaces using JSON Syntax in Grafana INI
DESCRIPTION: Shows how to use JSON array syntax for the `org_mapping` option in Grafana's SAML configuration. This is necessary when mapping organization names or external identifiers that contain spaces, mapping "Org 1" to Org ID 2 as Editor and "ExternalOrg" to the Grafana organization named "ACME Corp." as Admin.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_13

LANGUAGE: ini
CODE:
```
org_mapping = ["Org 1:2:Editor", "ExternalOrg:ACME Corp.:Admin"]
```

----------------------------------------

TITLE: Rendering Static Collapsible Panel in PanelChrome - TypeScript
DESCRIPTION: Shows a static usage of the PanelChrome component within a JSX frame, demonstrating how to define a collapsible panel with specific title, width, and height. The content is rendered dynamically using provided innerwidth and innerheight props for styling. Prerequisites include React and the PanelChrome component, with all key props supplied directly. No internal state or event handling is present; output is a collapsible panel rendered with fixed configuration. Limitations include static behavior without state feedback or interactivity beyond basic collapse/expand.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_10

LANGUAGE: TypeScript
CODE:
```
<ExampleFrame>
  <PanelChrome title="My awesome panel title" width={400} height={200} collapsible={true}>
    {(innerwidth, innerheight) => {
      return (
        <div
          style={{
            width: innerwidth,
            height: innerheight,
            background: 'rgba(230,0,0,0.05)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
          }}
        >
          Content
        </div>
      );
    }}
  </PanelChrome>
</ExampleFrame>
```

----------------------------------------

TITLE: Executing an Alert Iteration Template - Go Templating - Go
DESCRIPTION: This snippet runs the previously defined alert iteration template ('custom_template') by passing the notification context as the dot (.) data object. The dependencies and context are identical to the alert iteration template, requiring a template definition and a notification object populated according to Grafana's specification. The result is a detailed notification message with all alert details rendered as specified in the template.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_3

LANGUAGE: go
CODE:
```
```go
{{ template "custom_template" . }}
```
```

----------------------------------------

TITLE: Importing RenderUserContentAsHTML Component and Storybook Utilities
DESCRIPTION: This snippet imports the necessary components and utilities for the Storybook MDX documentation page. It imports `Meta` and `ArgTypes` from `@storybook/blocks` for defining Storybook metadata and displaying component props, and it imports the `RenderUserContentAsHTML` component itself from its local file path.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/RenderUserContentAsHTML/RenderUserContentAsHTML.mdx#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { Meta, ArgTypes } from '@storybook/blocks';
import { RenderUserContentAsHTML } from './RenderUserContentAsHTML';
```

----------------------------------------

TITLE: Using Environment Variable Interpolation in Grafana YAML Provisioning
DESCRIPTION: This YAML snippet exemplifies the use of environment variable interpolation in Grafana provisioning configuration. It shows how a variable like `$EMAIL` within the `addresses` setting for an email contact point receiver will be replaced by the value of the corresponding environment variable during provisioning. Escaping with `$$variable` prevents interpolation if the dollar sign is intended literally.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_29

LANGUAGE: yaml
CODE:
```
contactPoints:
  - orgId: 1
    name: My Contact Email Point
    receivers:
      - uid: 1
        type: email
        settings:
          addresses: $EMAIL

```

----------------------------------------

TITLE: Installing @grafana/prometheus with Yarn (Shell)
DESCRIPTION: This command uses the yarn package manager to download and install the `@grafana/prometheus` library and add it as a dependency to the current project. It requires yarn to be installed on the system.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-prometheus/README.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
yarn add @grafana/prometheus
```

----------------------------------------

TITLE: Defining Grafana Plugin Manifest v2.0.0 (JSON)
DESCRIPTION: This JSON object represents a Grafana plugin manifest (version 2.0.0). It specifies the plugin ID ('test-renderer'), version ('1.0.0'), signing organization ('grafana' / 'Grafana Labs'), timestamp, signing key ID, and includes a SHA256 hash for the 'plugin.json' file to ensure its integrity. This manifest is used by Grafana to load and verify the plugin.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/renderer-added-file/plugin/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "plugin": "test-renderer",
  "version": "1.0.0",
  "time": 1669116992691,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "2f8fc554d0a080b9719ba43c0a8df366a88500eb129dfd4aedd9e3d147178273"
  }
}
```

----------------------------------------

TITLE: Requesting Organization by ID (Admin API) - HTTP
DESCRIPTION: This HTTP GET demonstrates how to retrieve organization details by organization ID via the admin API endpoint /api/orgs/:orgId. Requires Basic authentication using username and password, only available to Grafana server administrators.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_14

LANGUAGE: http
CODE:
```
GET /api/orgs/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json
```

----------------------------------------

TITLE: Using Grafana Form Component with react-hook-form (TypeScript/TSX)
DESCRIPTION: Demonstrates basic integration of the deprecated Form component from @grafana/ui using react-hook-form concepts in a TypeScript (TSX) environment. Illustrates default values, type-safe DTO definition, input registration, error handling, and form submission logic. Requires @grafana/ui, react-hook-form, and relevant React components (Field, Input, Button), accepting defaultValues and onSubmit parameters and yielding form UI elements and submission handling.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import { Forms } from '@grafana/ui';

interface UserDTO {
  name: string;
  email: string;
  //...
}

const defaultUser: Partial<UserDTO> = {
  name: 'Roger Waters',
  // ...
}

<Form
  defaultValues={defaultUser}
  onSubmit={async (user: UserDTO) => await createUser(user)}
>{({register, errors}) => {
  return (
    <Field>
      <Input {...register("name")}/>
      <Input {...register("email", {required: true})} type="email" />
      <Button type="submit">Create User</Button>
    </Field>
  )
}}</Form>
```

----------------------------------------

TITLE: Wire Error Output for Unused Provider
DESCRIPTION: Shell output showing Wire's error message when detecting an unused provider in the dependency injection configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_19

LANGUAGE: shell
CODE:
```
$GOPATH/src/github.com/google/wire/_tutorial/wire.go:24:1:
inject InitializeEvent: unused provider "NewEventNumber"
wire: generate failed
```

----------------------------------------

TITLE: Including Shared Documentation Content using Hugo Shortcode
DESCRIPTION: This Hugo shortcode includes shared content from another file (`plugins/rename-note.md`) located within the `grafana` source directory. It substitutes the placeholder `<GRAFANA_VERSION>` with the actual Grafana version during site generation. This specific shortcode is used to display a note regarding potential plugin renaming based on the Grafana version.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/explore/simplified-exploration/_index.md#2025-04-23_snippet_0

LANGUAGE: hugo
CODE:
```
{{< docs/shared source="grafana" lookup="plugins/rename-note.md" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Locating Grafana Translation File Path in Crowdin
DESCRIPTION: This snippet represents the file path structure within the Grafana OSS project on Crowdin where translation strings are located. Users navigate this path, replacing `'language denomination'` with the specific language code (e.g., 'fr', 'de'), to access the `grafana.json` file containing the translatable strings for that language. Access requires proofreader permissions on the Grafana OSS Crowdin project.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_14

LANGUAGE: plaintext
CODE:
```
grafana/main > public > locales > 'language denomination' > grafana.json
```

----------------------------------------

TITLE: YAML Front Matter for InfluxDB Configuration Guide
DESCRIPTION: YAML configuration defining metadata for the InfluxDB configuration guide, including aliases, description, keywords, and menu information.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/configure-influxdb-data-source/_index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
---
aliases:
  - ../data-sources/influxdb/
  - ../data-sources/influxdb/provision-influxdb/
  - ../features/datasources/influxdb/
  - provision-influxdb/
description: Guide for using InfluxDB in Grafana
keywords:
  - grafana
  - influxdb
  - guide
  - flux
labels:
  products:
    - cloud
    - enterprise
    - oss
menuTitle: Configure the InfluxDB data source
title: Configure the InfluxDB data source
weight: 300
refs:
  provision-grafana:
    - pattern: /docs/grafana/
      destination: /docs/grafana/<GRAFANA_VERSION>/administration/provisioning/#provision-grafana
    - pattern: /docs/grafana-cloud/
      destination: /docs/grafana/<GRAFANA_VERSION>/administration/provisioning/#provision-grafana
---
```

----------------------------------------

TITLE: Defining Draggable Bounds Type in TypeScript
DESCRIPTION: Defines the structure of the draggable bounds object, specifying required and optional fields such as left boundary offset, width, and optional minimum/maximum values for constraining the drag region. This type is meant to be returned by a bounds calculation function and ensures that draggable UI logic receives consistent and precise layout data. Input values like client offsets and width are expected as numbers, and min/max constraints (if provided) operate in normalized ranges.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/explore/TraceView/components/utils/DraggableManager/README.md#2025-04-23_snippet_4

LANGUAGE: TypeScript
CODE:
```
type DraggableBounds = {
  clientXLeft: number,
  maxValue?: number,
  minValue?: number,
  width: number,
};
```

----------------------------------------

TITLE: Stopping Grafana server systemd Service - Shell
DESCRIPTION: Stops the Grafana server if it is running as a systemd service. Requires systemd, Grafana previously configured as a service, sudo access. No parameters required. Output: service stopped.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_11

LANGUAGE: shell
CODE:
```
sudo systemctl stop grafana-server
```

----------------------------------------

TITLE: Configuring Threema Gateway Contact Point - YAML
DESCRIPTION: Creates a Threema Gateway integration for Grafana alerts. Requires API secret, gateway ID, and recipient ID, all of which must be provided. Sends notifications through Threema's infrastructure to defined recipients. Outputs Threema push notifications as per Grafana alert triggers.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_19

LANGUAGE: yaml
CODE:
```
type: threema\nsettings:\n  # <string, required>\n  api_secret: xxx\n  # <string, required>\n  gateway_id: A5K94S9\n  # <string, required>\n  recipient_id: A9R4KL4S\n
```

----------------------------------------

TITLE: Conditional Rendering with 'if' in Go Templates
DESCRIPTION: Demonstrates using the `if` statement in Go templates to conditionally render content. If the variable `$element` is not empty or false, its value is printed; otherwise, a message indicating it's empty is shown.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
{{ if $element }}
Element value: {{$element}}
{{ else }}
Element is empty
{{ end }}
```

----------------------------------------

TITLE: Embedding Grafana Play Dashboard Example
DESCRIPTION: This Hugo shortcode embeds an interactive Grafana dashboard example from play.grafana.org. The `title` parameter provides hover text or a caption, and the `url` parameter specifies the dashboard to be embedded.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/configure-thresholds/index.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
{{< docs/play title="Threshold example" url="https://play.grafana.org/d/000000167/" >}}
```

----------------------------------------

TITLE: Dry Run Output Examples - kubectl Output
DESCRIPTION: Illustrates sample output from a successful dry-run of a 'kubectl apply' command. Reflects objects (persistentvolumeclaim, deployment, service) that are unchanged in server-side dry-run. Use output to verify intended effects before actual changes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_37

LANGUAGE: bash
CODE:
```
persistentvolumeclaim/grafana-pvc unchanged (server dry run)
deployment.apps/grafana unchanged (server dry run)
service/grafana unchanged (server dry run)

```

----------------------------------------

TITLE: TimeRange Data Structure Definition - Go
DESCRIPTION: Defines a time range structure with start and end times specified in 24-hour format. Times are represented as strings, with examples showing format like '18:00' for 6:00 PM.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_50

LANGUAGE: go
CODE:
```
type TimeRange struct {
    EndTime   string `json:"end_time"`
    StartTime string `json:"start_time"`
}
```

----------------------------------------

TITLE: Deleting Contact Points with YAML Provisioning in Grafana
DESCRIPTION: Lists receivers to be deleted from a Grafana instance using YAML provisioning files. Grafana must have provisioning enabled, and this file must be placed in the 'provisioning/alerting' directory. Each entry provides the organization ID and the receiver's UID for deletion. The file is processed during startup or on request via the Admin API; updates require editing the YAML and triggering a reload.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_3

LANGUAGE: yaml
CODE:
```
# config file version\napiVersion: 1\n\n# List of receivers that should be deleted\ndeleteContactPoints:\n  # <int> organization ID, default = 1\n  - orgId: 1\n    # <string, required> unique identifier for the receiver\n    uid: first_uid
```

----------------------------------------

TITLE: Displaying Grafana Build Version in Go Template
DESCRIPTION: This Go template snippet inserts the value of the `.BuildVersion` variable from the template data into the email footer. It's used to indicate which version of Grafana sent the email. Requires the `.BuildVersion` variable to be present in the template data.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/welcome_on_signup.txt#2025-04-23_snippet_2

LANGUAGE: go-template
CODE:
```
{{.BuildVersion}}
```

----------------------------------------

TITLE: Writing Grafana Annotations (Plaintext)
DESCRIPTION: Defines the `annotations:write` permission action required to update annotations in Grafana. This capability is linked to scopes including `annotations:*`, `annotations:type:*`, `dashboards:*`, `dashboards:uid:*`, `folders:*`, and `folders:uid:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
`annotations:write`
```

LANGUAGE: plaintext
CODE:
```
<ul><li>`annotations:*`</li><li>`annotations:type:*`</li><li>`dashboards:*`</li><li>`dashboards:uid:*`</li><li>`folders:*`</li><li>`folders:uid:*`</li></ul>
```

----------------------------------------

TITLE: Configuring API Generation Settings
DESCRIPTION: Configuration object for the RTK Query API generation script, specifying output file, API definition, schema, and endpoint filters.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/api/README.md#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
'../public/app/api/clients/dashboard/endpoints.gen.ts': {
    apiFile: '../public/app/api/clients/dashboard/baseAPI.ts',
    schemaFile: '../data/openapi/dashboard.grafana.app-v0alpha1.json',
    filterEndpoints: ['createDashboard', 'updateDashboard'],
    tag: true,
}
```

----------------------------------------

TITLE: Example HTTP Error Response for Invalid Action in Grafana Role Creation
DESCRIPTION: Shows the HTTP 400 Bad Request response received when attempting to create a Grafana role with an invalid permission action (e.g., `serviceaccounts.permissions:reader`). The JSON body contains details about the validation error, indicating the specific action that was not found.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
HTTP/1.1 400 Bad Request
Content-Type: application/json
{
	"extra": {
		"validationError": "the provided action was not found in the list of valid actions: serviceaccounts.permissions:reader"
	},
	"message": "Permission contains an invalid action",
	"messageId": "accesscontrol.permission-invalid-action",
	"statusCode": 400,
	"traceID": ""
}
```

----------------------------------------

TITLE: Uninstalling Grafana OSS - Shell
DESCRIPTION: Removes the open-source Grafana package from the system using zypper. Requires repository/package present, sudo, zypper. No arguments. Output: grafana package and related files removed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_13

LANGUAGE: shell
CODE:
```
sudo zypper remove grafana
```

----------------------------------------

TITLE: Error Response for Dashboard Restoration in Grafana HTTP API
DESCRIPTION: This HTTP error response is returned when a dashboard version is not found during a restoration attempt. It includes a message explaining the failure reason.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
HTTP/1.1 404 Not Found
Content-Type: application/json; charset=UTF-8
Content-Length: 46

{
  "message": "Dashboard version not found"
}
```

----------------------------------------

TITLE: Implementing a Service in a Subpackage (Alphabetical Service Example)
DESCRIPTION: Demonstrates implementation of a service in a subpackage, including service constructor, method implementations, and storage interface pattern. This follows the principle of keeping implementation details in subpackages while interfaces remain in the root package.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/package-hierarchy.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
package alphabeticalimpl

// this name can be whatever, it's not supposed to be used from outside
// the service except for in Wire.
type Svc struct { … }

func ProviceSvc(numbers numerical.Numerical, db db.DB) Svc { … }

func (s *Svc) GetLetter(ctx context.Context, q root.GetLetterQuery) (root.Letter, error) { … }
func (s *Svc) ListCachedLetters(ctx context.Context, q root.ListCachedLettersQuery) root.Letters { … }
func (s *Svc) DeleteLetter(ctx context.Context, q root.DeleteLetterCommand) error { … }

type letterStore interface {
  Get(ctx.Context, id int) (root.Letter, error)
  Delete(ctx.Context, root.DeleteLetterCommand) error
}

type sqlLetterStore struct {
  db.DB
}

func (s *sqlStore) Get(ctx.Context, id int) (root.Letter, error) { … }
func (s *sqlStore) Delete(ctx.Context, root.DeleteLetterCommand) error { … }
```

----------------------------------------

TITLE: Configuring Webpack 5 Fallbacks for Grafana Plugin Development in JavaScript
DESCRIPTION: Provides a sample Webpack configuration modification (`webpack.config.js`) for Grafana plugin developers migrating to Webpack 5. Due to Webpack 5 no longer including polyfills for Node.js core modules by default, this snippet demonstrates how to add necessary fallbacks (e.g., for 'os', 'stream', 'timers') using browser-compatible libraries like 'os-browserify' and 'stream-browserify' to prevent build failures. This configuration should be added to the plugin's custom Webpack setup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-9-0-0-beta2.md#2025-04-23_snippet_0

LANGUAGE: js
CODE:
```
// webpack.config.js

module.exports.getWebpackConfig = (config, options) => ({
  ...config,
  resolve: {
    ...config.resolve,
    fallback: {
      os: require.resolve('os-browserify/browser'),
      stream: require.resolve('stream-browserify'),
      timers: require.resolve('timers-browserify'),
    },
  },
});
```

----------------------------------------

TITLE: List User Permissions Response
DESCRIPTION: Example response showing LDAP-related permissions assigned to a specific user.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_18

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8

[
    {
        "action": "ldap.status:read",
        "scope": ""
    },
    {
        "action": "ldap.user:read",
        "scope": ""
    }
]
```

----------------------------------------

TITLE: Referencing Previous Global OAuth Role Sync Skip Option (Plaintext)
DESCRIPTION: This represents the 'oauth_skip_org_role_sync_update' configuration option mentioned for historical context in Grafana v9.4 release notes. It previously controlled skipping organization role synchronization globally for *all* configured OAuth providers, unlike the newer provider-specific 'skip_org_role_sync' option.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-4.md#2025-04-23_snippet_5

LANGUAGE: plaintext
CODE:
```
oauth_skip_org_role_sync_update
```

----------------------------------------

TITLE: Example Legacy Regex Pattern for Rename Transformation (Regex)
DESCRIPTION: This shows an example of a simple regex pattern `(.*)` that might have been used in the "rename by regex" transformation prior to Grafana 9.0. Due to changes allowing global patterns (`/.../g`), transformations using such patterns might behave differently in v9.0 without modification.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-0.md#2025-04-23_snippet_5

LANGUAGE: regex
CODE:
```
(.*)
```

----------------------------------------

TITLE: Build Configuration YAML for Grafana Release Notes
DESCRIPTION: YAML configuration block specifying build settings and product labels for Grafana 7.5.12 release notes documentation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-12.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
_build:
  list: false
labels:
  products:
    - cloud
    - enterprise
    - oss
title: Release notes for Grafana 7.5.12
```

----------------------------------------

TITLE: Embedding Figures in Documentation using Shortcodes
DESCRIPTION: These Hugo shortcode examples demonstrate how to embed images (figures) within the documentation, specifically showing different ways thresholds can be visualized (lines, dashed lines, regions, etc.). Each `figure` shortcode specifies parameters like `max-width`, the image source (`src`), and alternative text (`alt`) for accessibility.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/configure-thresholds/index.md#2025-04-23_snippet_4

LANGUAGE: markdown
CODE:
```
{{< figure max-width="500px" src="/media/docs/grafana/panels-visualizations/screenshot-thresholds-lines-v10.4.png" alt="Visualization with threshold as a line" >}}
```

LANGUAGE: markdown
CODE:
```
{{< figure max-width="500px" src="/media/docs/grafana/panels-visualizations/screenshot-thresholds-dashed-lines-v10.4.png" alt="Visualization with threshold as a dashed line" >}}
```

LANGUAGE: markdown
CODE:
```
{{< figure max-width="500px" src="/media/docs/grafana/panels-visualizations/screenshot-thresholds-regions-v10.4.png" alt="Visualization with threshold as a region" >}}
```

LANGUAGE: markdown
CODE:
```
{{< figure max-width="500px" src="/media/docs/grafana/panels-visualizations/screenshot-thresholds-lines-regions-v10.4.png" alt="Visualization with threshold as a region and line" >}}
```

LANGUAGE: markdown
CODE:
```
{{< figure max-width="500px" src="/media/docs/grafana/panels-visualizations/screenshot-thresholds-dashed-lines-regions-v10.4.png" alt="Visualization with threshold as a region and dashed line" >}}
```

----------------------------------------

TITLE: Duplicating a Panel - Markdown
DESCRIPTION: Lists 'pd' as the shortcut for duplicating the current hovered panel in Grafana. Requires panel keyboard shortcuts to be active and is intended to quickly create a copy of a panel for further editing.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_8

LANGUAGE: markdown
CODE:
```
`pd`
```

----------------------------------------

TITLE: Creating Accessible Form Fields in Grafana UI
DESCRIPTION: Demonstrates how to properly associate labels with form controls using Grafana's Field component. The example shows an Input element being wrapped in a Field component with a label, which automatically associates the label with the input via the id attribute.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/accessibility.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<Field label="Name">
  <Input id="name" placeholder="Enter a name" />
</Field>
```

----------------------------------------

TITLE: Staging the Distribution Directory using Git
DESCRIPTION: Adds the 'dist' directory, containing the production build output, to the Git staging area. The '-f' flag forces the addition, which might be necessary if the 'dist' directory is listed in the project's '.gitignore' file. This prepares the built plugin artifacts for committing.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/publish-your-plugin.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
git add -f dist
```

----------------------------------------

TITLE: Embedding HTML/Components in Trans and JSON Representation
DESCRIPTION: Demonstrates embedding standard HTML tags (`<button>`, `<a>`) or React components within the `<Trans>` component. The description also shows the corresponding representation in the `grafana.json` file, where embedded elements are replaced with indexed placeholders like `<0>` and `<1>`. Requires `Trans` import.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_10

LANGUAGE: js
CODE:
```
import { Trans } from "app/core/internationalization"

<Trans i18nKey="page.explainer">
  Click <button>here</button> to <a href="https://grafana.com">learn more.</a>
</Trans>

// ↓ is in the grafana.json file like ↓
{
  "page": {
    "explainer": "Click <0>here</0> to <1>learn more</1>"
  }
}
```

----------------------------------------

TITLE: Changing Directory to Tutorial Environment using cd
DESCRIPTION: This command changes the current working directory in the shell to the 'tutorial-environment' directory. This directory should have been created by the preceding 'git clone' command. Subsequent commands related to the tutorial setup are expected to be run from within this directory.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt2/index.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
cd tutorial-environment
```

----------------------------------------

TITLE: Enabling Development Mode in Grafana Configuration (INI)
DESCRIPTION: Sets the `app_mode` to `development` within the `custom.ini` file, located in the `conf` directory. This overrides the default settings from `defaults.ini` and enables features useful during Grafana development.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_7

LANGUAGE: ini
CODE:
```
app_mode = development
```

----------------------------------------

TITLE: Utilizing KV Methods (SortedPairs, Names, Values, Remove) in Grafana Go Templates
DESCRIPTION: This snippet shows how to use advanced methods available on the KV object within Go-based Grafana templates, including getting sorted pairs, names, values, and removing keys with string slices. Dependencies include the presence of a KV-like object (e.g., .CommonLabels) with attached methods. Key parameters: none for most, but Remove expects a string slice like (stringSlice "grafana_folder"). Outputs include lists, arrays, and mutated KVs for use inside the template.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_5

LANGUAGE: go
CODE:
```
{{ define "custom_template" }}
  {{ .CommonLabels.SortedPairs }}
  {{ .CommonLabels.Names }}
  {{ .CommonLabels.Values }}
  {{ .CommonLabels.Remove (stringSlice "grafana_folder") }}
{{ end }}
```

----------------------------------------

TITLE: Appending Footer with Dynamic Build Information - GoTemplate
DESCRIPTION: This snippet appends a footer to the email including the Grafana build version, copyright, and the current year. It leverages Go's template functions for value substitution (e.g., .BuildVersion and now) and string formatting. Inputs are .BuildVersion and the result of 'now | date' with output as a completed footer line.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/verify_email.txt#2025-04-23_snippet_2

LANGUAGE: gotemplate
CODE:
```
Sent by Grafana v{{.BuildVersion}} (c) {{now | date "2006"}} Grafana Labs
```

----------------------------------------

TITLE: Declaring Constants in TypeScript
DESCRIPTION: Shows the proper way to declare constants using ALL_CAPS in TypeScript.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
// bad
const constantValue = "This string won't change";
// bad
const constant_value = "This string won't change";

// good
const CONSTANT_VALUE = "This string won't change";
```

----------------------------------------

TITLE: Including Common Grafana Upgrade Tasks using Hugo Shortcode
DESCRIPTION: This Hugo shortcode incorporates shared content detailing common tasks performed during a Grafana upgrade. It references 'upgrade/upgrade-common-tasks.md', ensuring standardized procedures are presented across different upgrade guides. The 'source' and 'version' parameters specify the content origin and version context.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v9.1/index.md#2025-04-23_snippet_2

LANGUAGE: hugo
CODE:
```
{{< docs/shared lookup="upgrade/upgrade-common-tasks.md" source="grafana" version="<GRAFANA VERSION>" >}}
```

----------------------------------------

TITLE: Setting Alternative Grafana Port Number (Example)
DESCRIPTION: Provides `8080` as an example value for the `http_port` setting in `custom.ini`. This port is suggested as an alternative to the default port `3000`, particularly on Windows systems where port `3000` might require extra privileges.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/windows/index.md#2025-04-23_snippet_4

LANGUAGE: plaintext
CODE:
```
8080
```

----------------------------------------

TITLE: Installing Grafana UI via Yarn - Bash
DESCRIPTION: This snippet demonstrates how to install the @grafana/ui package using Yarn. It requires Yarn to be installed on your system. Running this command will add the @grafana/ui library to your project's dependencies as defined in package.json. No parameters are required. The input is the package name and the output is the installed dependency.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
yarn add @grafana/ui
```

----------------------------------------

TITLE: Defining a Signed Plugin Manifest - Grafana - JSON
DESCRIPTION: This snippet provides the manifest JSON object for a Grafana plugin, specifying metadata such as manifest version, signature details, root URLs, plugin identifier, version, and file checksums. Dependencies include a PGP tool for signature verification and an environment where the plugin will be loaded (Grafana). Critical keys include 'plugin', 'version', and the 'files' map which ties file names to their hash values. The expected input is a parsed JSON block; the output guides plugin installation and verification processes. Use this as part of a signed plugin package, ensuring the metadata matches actual file contents.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/pluginsintegration/pluginassets/testdata/module-hash-valid/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "private",
  "signedByOrg": "giuseppeguerra",
  "signedByOrgName": "giuseppeguerra",
  "rootUrls": [
    "http://127.0.0.1:3000/"
  ],
  "plugin": "test-datasource",
  "version": "1.0.0",
  "time": 1725959570435,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "module.js": "5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03",
    "plugin.json": "129fab4e0584d18c778ebdfa5fe1a68edf2e5c5aeb8290b2c68182c857cb59f8"
  }
}
```

----------------------------------------

TITLE: Regenerating Protobuf Files for Grafana
DESCRIPTION: This command regenerates the Protobuf files for the Grafana project using the make system.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/apis/secret/README.md#2025-04-23_snippet_1

LANGUAGE: sh
CODE:
```
make protobuf
```

----------------------------------------

TITLE: Configuring Storybook Metadata for TagsInput using Meta Component
DESCRIPTION: This JSX snippet utilizes the `Meta` component from Storybook to configure the documentation page. It sets the title displayed in the Storybook sidebar to "MDX|TagsInput" and links the documentation to the `TagsInput` component, enabling features like controls and auto-generated docs.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/TagsInput/TagsInput.mdx#2025-04-23_snippet_1

LANGUAGE: mdx
CODE:
```
<Meta title="MDX|TagsInput" component={TagsInput} />
```

----------------------------------------

TITLE: Wire Error: Missing Provider for Indirect Dependency (Bar)
DESCRIPTION: This Wire error indicates that a provider for the type 'example.com/foo.Bar' is missing. 'Bar' is required as a dependency by 'example.com/foo.Baz', which is created by the 'provideBaz' provider function (in 'example.com/foo/foo.go'). The error was encountered during the analysis of the 'injectMultipleMissingTypes' injector in 'example.com/foo/wire.go'. Ensure a provider for 'Bar' is included in the relevant Wire set.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/MultipleMissingInputs/want/wire_errs.txt#2025-04-23_snippet_2

LANGUAGE: text
CODE:
```
example.com/foo/wire.go:x:y: inject injectMultipleMissingTypes: no provider found for example.com/foo.Bar
needed by example.com/foo.Baz in provider "provideBaz" (example.com/foo/foo.go:x:y)
```

----------------------------------------

TITLE: Enabling Teamsync in Grafana for Keycloak (INI)
DESCRIPTION: Grafana configuration setting required to enable teamsync with Keycloak. The `groups_attribute_path` specifies the JMESPath expression to extract group information (expected to be named 'groups') from the ID token provided by Keycloak. This requires a corresponding 'groups' mapper to be configured in the Keycloak client.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_4

LANGUAGE: ini
CODE:
```
[auth.generic_oauth]
groups_attribute_path = groups
```

----------------------------------------

TITLE: Updating a Service Account - Grafana HTTP API - HTTP
DESCRIPTION: This snippet demonstrates updating an existing service account using the PATCH endpoint. The request specifies the changes in a JSON body; only the fields to be updated must be provided (e.g., name, role). Authentication is enforced. The response returns the updated service account object with all relevant details, enabling confirmation of the update operation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
PATCH /api/serviceaccounts/2 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=\n\n{\n  "name": "test",\n\t"role": "Editor"\n}
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{\n\t"id": 2,\n\t"name": "test",\n\t"login": "sa-grafana",\n\t"orgId": 1,\n\t"isDisabled": false,\n\t"createdAt": "2022-03-21T14:35:44Z",\n\t"updatedAt": "2022-03-21T14:35:44Z",\n\t"avatarUrl": "/avatar/8ea890a677d6a223c591a1beea6ea9d2",\n\t"role": "Editor",\n\t"teams": []\n}
```

----------------------------------------

TITLE: Using Dynamic Selectors in JSX Components
DESCRIPTION: JSX example showing how to use parameterized selectors when rendering a list of data sources.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_7

LANGUAGE: jsx
CODE:
```
<ul>
  {dataSources.map(({ id, name }) => (
    <li className="card-item-wrapper" key={id}>
      <a className="card-item" href={`datasources/edit/${id}`}>
        <div className="card-item-name" data-testid={selectors.pages.DataSources.dataSources(name)}>
          {name}
        </div>
      </a>
    </li>
  ))}
</ul>
```

----------------------------------------

TITLE: Dumping Grafana Pod Logs via kubectl for Single-Container Deployment - Bash
DESCRIPTION: This bash command retrieves logs from the Grafana deployment pod in the monitoring namespace using kubectl. It's useful for troubleshooting single-container deployments. Requires kubectl installed, appropriate permissions, and a running deployment. Outputs standard logs from the Pod.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_20

LANGUAGE: bash
CODE:
```
# dump Pod logs for a Deployment (single-container case)
kubectl logs --namespace=monitoring deploy/my-grafana
```

----------------------------------------

TITLE: Importing Storybook and Component Dependencies in TypeScript
DESCRIPTION: Imports necessary modules from Storybook and the local Box component to prepare for component story setup in TypeScript. No external dependencies beyond Storybook and local project modules are required. This snippet sets up the foundation for building Storybook documentation and interactive demos for the Box component.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Box/Box.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Meta, ArgTypes } from '@storybook/blocks';
import { Box } from './Box';
```

----------------------------------------

TITLE: Defining Message, Greeter, and Event structs in Go
DESCRIPTION: Defines the basic structure for a Message type, Greeter struct, and Event struct, which form the components of the greeter program.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
type Message string

type Greeter struct {
    // ... TBD
}

type Event struct {
    // ... TBD
}
```

----------------------------------------

TITLE: Listing ConfigMaps in Namespace - kubectl Bash
DESCRIPTION: Retrieves the list of all ConfigMap objects present in the specified Kubernetes namespace. Useful for validating ConfigMap creation and troubleshooting configuration mounting issues.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_32

LANGUAGE: bash
CODE:
```
kubectl get configmap --namespace=my-grafana

```

----------------------------------------

TITLE: Configuring Stacking and Fill in Grafana for InfluxDB
DESCRIPTION: To correctly stack time series data from InfluxDB in Grafana, points must align. Missing points can cause visual gaps. Use `fill(0)` in the InfluxDB query and set a `group by time` interval (e.g., `10s`) matching the metric write frequency. This inserts zero values for missing data, ensuring proper stacking.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/influxdb/query_help.md#2025-04-23_snippet_1

LANGUAGE: influxql
CODE:
```
fill(0)
```

LANGUAGE: influxql
CODE:
```
group by time ... 10s
```

----------------------------------------

TITLE: Deploying OpenLDAP Containers with Make
DESCRIPTION: Command to build and deploy the OpenLDAP containers using make command with the auth/openldap-multiple source
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/openldap-multiple/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
make devenv sources=auth/openldap-multiple
```

----------------------------------------

TITLE: Truncating Text with Tooltip in JSX
DESCRIPTION: Demonstrates how to truncate text using a parent container and add a tooltip for displaying the full content on hover.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Text/Text.mdx#2025-04-23_snippet_3

LANGUAGE: jsx
CODE:
```
<Tooltip content="This is a example of a span element truncated by its parent container">
  <div style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>
    <Text color="primary" variant="body">
      {'This is a example of a span element truncated by its parent container.'}
    </Text>
  </div>
</Tooltip>
```

----------------------------------------

TITLE: Retrieving a Specific Migration Snapshot with Grafana API - Bash
DESCRIPTION: This curl command fetches details for a specific snapshot within a migration session via Grafana API. It sends a GET request to /api/cloudmigration/migration/{sessionUid}/snapshot/{snapshotUid}, allowing for paged output using resultLimit and resultPage parameters. Dependencies: curl, valid sessionUid and snapshotUid values, and Grafana admin access. Returns detailed information about the target snapshot.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/cloudmigration/api/curl_commands.txt#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
curl -X GET http://admin:admin@localhost:3000/api/cloudmigration/migration/{sessionUid}/snapshot/{snapshotUid}?resultLimit=100&resultPage=1
```

----------------------------------------

TITLE: Configuring Hosts File for Local Domain Resolution
DESCRIPTION: Example hosts file configuration for mapping local domains to localhost
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha-test-unified-alerting/README.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ cat /etc/hosts
127.0.0.1       grafana.loc
127.0.0.1       prometheus.loc
```

----------------------------------------

TITLE: Making Authenticated API Call to Grafana
DESCRIPTION: Example curl command demonstrating how to make an authenticated API call to Grafana using a JWT token.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/oauth/readme.md#2025-04-23_snippet_4

LANGUAGE: sh
CODE:
```
curl --request GET \
  --url http://127.0.0.1:3000/api/folders \
  --header 'Accept: application/json' \
  --header 'X-JWT-Assertion: eyJ......'
```

----------------------------------------

TITLE: Configuring Custom XYZ Tile Server as Default Baselayer in Grafana (INI)
DESCRIPTION: Example for setting a custom XYZ tile server as the default base map in Grafana. This requires specifying a URL template with {z}/{x}/{y} placeholders and attribution information.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/geomap/index.md#2025-04-23_snippet_6

LANGUAGE: ini
CODE:
```
default_baselayer_config = `{
  "type": "xyz",
  "config": {
    "attribution": "Open street map",
    "url": "https://tile.openstreetmap.org/{z}/{x}/{y}.png"
  }
}`
```

----------------------------------------

TITLE: Showing Grafana Admin Commands (Bash)
DESCRIPTION: Displays help information specifically for the 'admin' subcommand group in the Grafana CLI, listing all available administrative commands. Available in Grafana 4.1+.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_19

LANGUAGE: bash
CODE:
```
grafana cli admin
```

----------------------------------------

TITLE: Getting Data Source Permissions in HTTP
DESCRIPTION: Sends a GET request to retrieve all existing permissions for a data source with the given UID. Requires specific permissions and returns a JSON array of permission objects.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/datasource_permissions.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/access-control/datasources/my_datasource HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Defining k8s Attributes for OpenTelemetry in Grafana Context
DESCRIPTION: Defines OpenTelemetry semantic convention attributes related to Kubernetes within the Grafana context. It includes `k8s.dataplaneservice.name` (string, e.g., 'v0alpha1.prometheus.grafana.app'), specifying the name of the DataPlaneService. This attribute is recommended and stable.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/semconv/README.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
<!-- semconv trace.k8s -->
| Attribute  | Type | Description  | Examples  | [Requirement Level](https://opentelemetry.io/docs/specs/semconv/general/attribute-requirement-level/) | Stability |
|---|---|---|---|---|---|
| `k8s.dataplaneservice.name` | string | The name of the DataPlaneService. | `v0alpha1.prometheus.grafana.app` | `Recommended` | ![Stable](https://img.shields.io/badge/-stable-lightgreen) |
<!-- endsemconv -->
```

----------------------------------------

TITLE: Opening a Documentation List Block (Hugo)
DESCRIPTION: This Hugo shortcode `docs/list` initiates a formatted list block within the Grafana documentation. It's used to structure sequential steps or items.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/manage-users/view-server-user-list-search.md#2025-04-23_snippet_0

LANGUAGE: hugo
CODE:
```
{{< docs/list >}}
```

----------------------------------------

TITLE: Importing GPG Key and Repository for Grafana Installation - Bash
DESCRIPTION: This snippet demonstrates how to import the Grafana RPM GPG public key required for package verification on SUSE/openSUSE Linux. The wget command downloads the key, while rpm --import adds the key to the system. Required commands: wget, rpm. Inputs: no parameters needed; commands are as written. Outputs: gpg.key file is created and key is imported for rpm trust. Ensure you have network connectivity and sudo privileges.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
wget -q -O gpg.key https://rpm.grafana.com/gpg.key
sudo rpm --import gpg.key
```

----------------------------------------

TITLE: Importing Local Tooltip Component (TypeScript)
DESCRIPTION: Imports the `Tooltip` component from a relative path './Tooltip'. This is the component whose documentation is being generated in this file.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tooltip/Tooltip.mdx#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Tooltip } from './Tooltip';
```

----------------------------------------

TITLE: Improved Query Method Return Pattern in Go
DESCRIPTION: The refactored version of the previous query pattern, showing how to properly return results from a service method instead of mutating an input struct. This is the recommended approach.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/communication.md#2025-04-23_snippet_2

LANGUAGE: go
CODE:
```
type GetQuery struct {
  Something int
}

func (s *Service) Get(ctx context.Context, cmd GetQuery) (ResultType, error) {
  // ...do something
  return result, nil
}
```

----------------------------------------

TITLE: Cloning Tutorial Repository using Git
DESCRIPTION: This shell command clones the 'tutorial-environment' repository from GitHub, which contains the necessary files and configurations for the Grafana Alerting tutorial.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
git clone https://github.com/grafana/tutorial-environment.git
```

----------------------------------------

TITLE: Configuring Port Forwarding for Docker on Windows with WSL 2
DESCRIPTION: PowerShell commands to set up port forwarding between WSL 2 VM and Windows host for Grafana access.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/jwt_proxy/readme.md#2025-04-23_snippet_7

LANGUAGE: powershell
CODE:
```
wsl --list # Find the default
wsl -s Ubuntu # Change the default
```

LANGUAGE: powershell
CODE:
```
$hostAddr = '0.0.0.0';
$wslHostAddr = wsl hostname -I;
iex "netsh interface portproxy delete v4tov4 listenport=3000 listenaddress=$hostAddr"
iex "netsh interface portproxy add v4tov4 listenport=3000 listenaddress=$hostAddr connectport=3000 connectaddress=$wslHostAddr"
```

----------------------------------------

TITLE: Using DateTimePicker in React with TypeScript
DESCRIPTION: Demonstrates basic usage of the DateTimePicker component in a React (TypeScript) environment by managing a DateTime state with useState, and updating it via the onChange handler. Requires the @grafana/data and @grafana/ui packages; expects a DateTime object as the value. The rendered DateTimePicker receives its label, current date, and an updater callback. Inputs: label string, DateTime value, onChange function. Outputs: a rendered DateTimePicker component reflecting the passed value. No disabled values or validation constraints are applied.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/DateTimePickers/DateTimePicker/DateTimePicker.mdx#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import { useState } from 'react';\nimport { DateTime, dateTime } from '@grafana/data';\nimport { DateTimePicker } from '@grafana/ui';\n\nconst [date, setDate] = useState<DateTime>(dateTime('2021-05-05 12:00:00'));\nreturn <DateTimePicker label=\"Date\" date={date} onChange={setDate} />;
```

----------------------------------------

TITLE: Embedding Image using Hugo Figure Shortcode (Zendesk Query Editor)
DESCRIPTION: This Hugo shortcode embeds an image, specifically showing the query editor for the new Zendesk data source in Grafana. It serves as a visual aid accompanying the announcement of the Zendesk data source integration. The `src` parameter specifies the image location.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-2.md#2025-04-23_snippet_2

LANGUAGE: hugo
CODE:
```
{{< figure src="/media/docs/zendesk/zendesk_query_editor.png" alt="Zendesk Query Editor" >}}
```

----------------------------------------

TITLE: Binding Interfaces in Go with Wire
DESCRIPTION: Demonstrates how to bind a concrete implementation to an interface using wire.Bind in a provider set.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_6

LANGUAGE: go
CODE:
```
type Fooer interface {
    Foo() string
}

type MyFooer string

func (b *MyFooer) Foo() string {
    return string(*b)
}

func provideMyFooer() *MyFooer {
    b := new(MyFooer)
    *b = "Hello, World!"
    return b
}

type Bar string

func provideBar(f Fooer) string {
    // f will be a *MyFooer.
    return f.Foo()
}

var Set = wire.NewSet(
    provideMyFooer,
    wire.Bind(new(Fooer), new(*MyFooer)),
    provideBar)
```

----------------------------------------

TITLE: Defining Email Content with Grafana/Go Template Placeholders
DESCRIPTION: This template defines the structure and content of the email verification message sent by Grafana. It uses placeholders like `[[HiddenSubject .Subject ...]]` (likely for setting the email subject), `[[.ConfirmationCode]]` (for the verification code), `{{ .Expire }}` (for the code's expiration time), and constructs a verification URL using `[[.AppUrl]]` and other parameters. These placeholders are dynamically replaced with actual values when Grafana generates and sends the email.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/passwordless_verify_existing_user.txt#2025-04-23_snippet_0

LANGUAGE: Go Template
CODE:
```
[[HiddenSubject .Subject "Verify your email"]]

Hi,

Copy and paste the confirmation code in the login form to verify your email address. 

Copy and paste the email verification code:
[[.ConfirmationCode]]
in the in the login form to verify your email address. This confirmation code will expire in {{ .Expire }} minutes. 
Alternatively, you can use the button below to verify your email address. 

[[.AppUrl]]login/?code=[[.Code]]&confirmationCode=[[.ConfirmationCode]]
```

----------------------------------------

TITLE: Including Standard Options Documentation using Hugo Shortcode
DESCRIPTION: This Hugo shortcode includes shared documentation for standard visualization options from `visualizations/standard-options.md`. Dependencies include Hugo and the referenced file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/candlestick/index.md#2025-04-23_snippet_3

LANGUAGE: plaintext
CODE:
```
{{< docs/shared lookup="visualizations/standard-options.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Creating Standalone MDX Documentation
DESCRIPTION: Demonstrates how to create an MDX file without a direct relationship to a component story.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/storybook.md#2025-04-23_snippet_4

LANGUAGE: jsx
CODE:
```
<Meta title="Docs Overview/Color Palettes"/>

# Guidelines for using colors

...
```

----------------------------------------

TITLE: Response for Service Account Token Reversion in Grafana (HTTP)
DESCRIPTION: The HTTP response after successfully reverting a service account to an API key provides a confirmation message.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_15

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
	"message": "Reverted service account to API key"
}
```

----------------------------------------

TITLE: Accessible Form Example for Testing
DESCRIPTION: Example of a form field setup that will be used in accessibility testing. Shows a username input field with a label and default value.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/accessibility.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
<Field label="Username">
  <Input id="username" placeholder="Enter a name" value={'Test'} />
</Field>
```

----------------------------------------

TITLE: Using ThemeContext.Consumer for Theme Access
DESCRIPTION: Demonstrates how to use ThemeContext.Consumer to provide the current theme to a component directly.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/themes.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
import { ThemeContext } from '@grafana/data';

<ThemeContext.Consumer>{(theme) => <Foo theme={theme} />}</ThemeContext.Consumer>;
```

----------------------------------------

TITLE: Example Response for Deleting an Organization (HTTP/JSON)
DESCRIPTION: Example successful HTTP response (200 OK) after deleting a Grafana organization. The response body is a JSON object confirming the deletion.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_25

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{"message":"Organization deleted"}
```

----------------------------------------

TITLE: Configuring Default Base Layer for Geomap Plugin
DESCRIPTION: JSON configuration example for setting the default base map layer in the Geomap Plugin using OpenStreetMap tiles.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_29

LANGUAGE: ini
CODE:
```
default_baselayer_config = `{
  "type": "xyz",
  "config": {
    "attribution": "Open street map",
    "url": "https://tile.openstreetmap.org/{z}/{x}/{y}.png"
  }
}`
```

----------------------------------------

TITLE: Using Struct Fields as Providers in Go with Wire
DESCRIPTION: Illustrates how to use wire.FieldsOf to promote struct fields into provided types without writing separate provider functions.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_9

LANGUAGE: go
CODE:
```
type Foo struct {
    S string
    N int
    F float64
}

func provideFoo() Foo {
    return Foo{ S: "Hello, World!", N: 1, F: 3.14 }
}

func injectedMessage() string {
    wire.Build(
        provideFoo,
        wire.FieldsOf(new(Foo), "S"))
    return ""
}
```

----------------------------------------

TITLE: Example Successful Response for Short URL Creation
DESCRIPTION: This snippet shows an example of a successful HTTP 200 response after creating a short URL. The response body is JSON and includes the unique identifier (`uid`) of the short URL and the full `url` that redirects to the original path, including the necessary `orgId`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/short_url.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "uid": AT76wBvGk,
  "url": http://localhost:3000/goto/AT76wBvGk?orgId=1
}
```

----------------------------------------

TITLE: Starting PGP Signed Message Block
DESCRIPTION: Marks the beginning of a PGP signed message section, indicating the content that follows is signed for integrity and authenticity verification using the specified hash algorithm (SHA512). This header is part of the standard PGP message format.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/invalid-v2-missing-file/plugin/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: pgp
CODE:
```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512
```

----------------------------------------

TITLE: Updating Grafana Notification Route Matchers for Subfolders with Slashes
DESCRIPTION: Provides an example of how to update Grafana notification route matchers when upgrading to v11.0 if a folder name previously contained a forward slash ('/'). The matcher key `grafanafolder` needs to be changed to `grafana_folder`, and the value part corresponding to the folder name might also need adjustment (replacing '/' with '_') to ensure correct notification routing after the subfolder feature is enabled. This adjustment is necessary for specific cases involving alert rules in folders with slashes in their names where notification policies match the folder name.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-0.md#2025-04-23_snippet_0

LANGUAGE: configuration
CODE:
```
// Original matcher (before v11.0 upgrade)
grafanafolder=folder_with/in_title

// Updated matcher (for v11.0+ with subfolders enabled)
grafana_folder=folder_with/_in_title
```

----------------------------------------

TITLE: Using reducerTester for Redux Reducer Testing in TypeScript
DESCRIPTION: Demonstrates basic usage of the Fluent API reducerTester to test Redux reducers. The example shows how to initialize the test with a reducer and initial state, dispatch an action, and verify the resulting state.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/redux.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
reducerTester()
  .givenReducer(someReducer, initialState)
  .whenActionIsDispatched(someAction('reducer tests'))
  .thenStateShouldEqual({ ...initialState, data: 'reducer tests' });
```

----------------------------------------

TITLE: Changing Directory using cd (Bash)
DESCRIPTION: Changes the current working directory to the newly cloned `grafana-prometheus-alerting-demo` repository folder using the `cd` command. This is necessary before running subsequent setup commands.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
cd grafana-prometheus-alerting-demo
```

----------------------------------------

TITLE: Response for Getting All Dashboard Versions in Grafana HTTP API
DESCRIPTION: This HTTP response returns an array of dashboard versions with metadata including version numbers, creation timestamps, and change messages.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_1

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Content-Length: 428

[
  {
    "id": 2,
    "dashboardId": 1,
    "uid": "QA7wKklGz",
    "parentVersion": 1,
    "restoredFrom": 0,
    "version": 2,
    "created": "2017-06-08T17:24:33-04:00",
    "createdBy": "admin",
    "message": "Updated panel title"
  },
  {
    "id": 1,
    "dashboardId": 1,
    "uid": "QA7wKklGz",
    "parentVersion": 0,
    "restoredFrom": 0,
    "version": 1,
    "created": "2017-06-08T17:23:33-04:00",
    "createdBy": "admin",
    "message": "Initial save"
  }
]
```

----------------------------------------

TITLE: Displaying Verification Link Lifetime using Go Template
DESCRIPTION: This Go template snippet inserts the duration, in hours, for which the email verification link remains valid (`.VerificationEmailLifetimeHours`). This value is expected to be provided by the Grafana backend when rendering the template.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/verify_email.txt#2025-04-23_snippet_2

LANGUAGE: Go Template
CODE:
```
[[.VerificationEmailLifetimeHours]]
```

----------------------------------------

TITLE: Configuring Wire Dependencies for Grafana Services
DESCRIPTION: Shows how to set up Wire dependency injection for Grafana services, including defining wire sets and initialization functions for both production and test environments.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/services.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
// +build wireinject

package server

import (
	"github.com/google/wire"
	"github.com/grafana/grafana/pkg/example"
    "github.com/grafana/grafana/pkg/infra/db"
)

var wireBasicSet = wire.NewSet(
	example.ProvideService,

)

var wireSet = wire.NewSet(
	wireBasicSet,
	sqlstore.ProvideService,
)

var wireTestSet = wire.NewSet(
	wireBasicSet,
)

func Initialize(cla setting.CommandLineArgs, opts Options, apiOpts api.ServerOptions) (*Server, error) {
	wire.Build(wireExtsSet)
	return &Server{}, nil
}

func InitializeForTest(cla setting.CommandLineArgs, opts Options, apiOpts api.ServerOptions, sqlStore db.DB) (*Server, error) {
	wire.Build(wireExtsTestSet)
	return &Server{}, nil
}
```

----------------------------------------

TITLE: Setting up Corepack for Yarn
DESCRIPTION: Commands to enable and install Yarn package manager via Corepack
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
corepack enable
corepack install
```

----------------------------------------

TITLE: Embedding Video using Custom Hugo Shortcode (SAML Certificate Generation)
DESCRIPTION: This snippet utilizes the custom `video-embed` Hugo shortcode to display a screen recording. The video demonstrates the process of generating a new SAML certificate and private key directly within the Grafana UI form, a feature introduced for easier SAML setup. The `src` parameter points to the video file path.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-2.md#2025-04-23_snippet_6

LANGUAGE: hugo
CODE:
```
{{< video-embed src="/media/docs/grafana/screen-recording-11-2-generate-saml-certificate.mp4" >}}
```

----------------------------------------

TITLE: Creating a DataSources Page with Parameterized Selectors
DESCRIPTION: TypeScript example showing how to create a Page object with a function that returns a formatted selector string.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
export const DataSources = {
  url: '/datasources',
  dataSources: (dataSourceName: string) => `data-testid Data source list item ${dataSourceName}`,
};
```

----------------------------------------

TITLE: Illustrating Indentation Effects in Go Templates
DESCRIPTION: Shows a Go template with nested `range` loops and indentation for readability. This example highlights that indentation and line breaks within the template source are preserved in the final rendered output by default.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_13

LANGUAGE: go
CODE:
```
{{ range .Alerts }}
  {{ range .Labels.SortedPairs }}
    {{ .Name }} = {{ .Value }}
  {{ end }}
{{ end }}
```

----------------------------------------

TITLE: Accessing Sensu Go Docker Container
DESCRIPTION: Command to access the Sensu Go backend container's shell. This is required to run sensuctl commands for configuration and API key generation.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/sensugo/notes.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
docker exec -it sensu-backend /bin/ash
```

----------------------------------------

TITLE: Basic Fixed Phrase Translation using Trans Component in JSX
DESCRIPTION: A minimal example demonstrating the `<Trans>` component from `app/core/internationalization` for translating a static string. The `i18nKey` attribute specifies the unique identifier for this phrase in the translation catalog.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_7

LANGUAGE: jsx
CODE:
```
import { Trans } from 'app/core/internationalization';

<Trans i18nKey="page.greeting">Hello user!</Trans>;
```

----------------------------------------

TITLE: Representing Direct User Managed Permissions in OpenFGA
DESCRIPTION: This snippet shows a simplified OpenFGA tuple format used for representing managed permissions assigned directly to a user. It directly links the user ('user:<user_uid>') with the permission ('read') and the object ('folder:<folder_uid>').
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_7

LANGUAGE: text
CODE:
```
user:<user_uid> read folder:<folder_uid>
```

----------------------------------------

TITLE: Markdown Comment Include Template
DESCRIPTION: Shared markdown content inclusion template for best practices documentation related to trace structures. Uses a docs/shared import pattern to include common content.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/tempo/query-editor/traceql-structure.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
[//]: # 'Shared content for best practices for traces'
[//]: # 'This content is located in /tempo/docs/sources/shared/trace-structure.md'

{{< docs/shared source="tempo" lookup="traceql-query-structure.md" version="<TEMPO_VERSION>" >}}
```

----------------------------------------

TITLE: Importing ColorPicker Components in TypeScript/React
DESCRIPTION: Import statements for ColorPicker components and Storybook documentation utilities
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ColorPicker/ColorPicker.mdx#2025-04-23_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { Meta, ArgTypes } from '@storybook/blocks';
import { ColorPicker, SeriesColorPicker } from './ColorPicker';
import { ColorPickerInput } from './ColorPickerInput';
```

----------------------------------------

TITLE: Data Source Deletion Response in HTTP
DESCRIPTION: Example response for a successful data source deletion, returning a success message and the ID of the deleted data source.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_13

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "message":"Data source deleted",
  "id": 1
}
```

----------------------------------------

TITLE: Fetching Series Labels for Loki Stream Selector with datasource.languageProvider - TypeScript
DESCRIPTION: Presents a method to fetch all label names and their possible values for a specific Loki stream selector using fetchSeriesLabels. Returns a Promise resolving to a record of label name/value arrays, with options to specify time range. This snippet is essential for discovering available metadata in a given log stream and supports robust error handling in plugin development.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/loki/docs/app_plugin_developer_documentation.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
/**
 * Fetch series labels for a selector
 *
 * This method fetches labels for a given stream selector, such as `{job="grafana"}`.
 * It returns a promise that resolves to a record mapping label names to their corresponding values.
 *
 * @param streamSelector - The stream selector for which you want to retrieve labels.
 * @param options - (Optional) An object containing additional options - currently only time range.
 * @param options.timeRange - (Optional) The time range for which you want to retrieve label keys. If not provided, the default time range is used.
 * @returns A promise containing a record of label names and their values.
 * @throws An error if the fetch operation fails.
 */
async function fetchSeriesLabels(
  streamSelector: string,
  options?: { timeRange?: TimeRange }
): Promise<Record<string, string[]>>;

/**
 * Example usage:
 */
const streamSelector = '{job="grafana"}';
try {
  const labels = await fetchSeriesLabels(streamSelector);
  console.log(labels);
} catch (error) {
  console.error(`Error fetching labels: ${error.message}`);
}

```

----------------------------------------

TITLE: Deploying Authentik Container with Make
DESCRIPTION: Command to build and deploy the Authentik container using Make with authentication sources.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/authentik/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
make devenv sources=auth/authentik
```

----------------------------------------

TITLE: Declaring AGPL-3.0 License via SPDX Comment
DESCRIPTION: This comment utilizes the Software Package Data Exchange (SPDX) standard format to specify the license governing the file's content. It explicitly declares the license as the GNU Affero General Public License version 3.0 only (AGPL-3.0-only). This convention aids automated tools and developers in understanding the licensing terms.
SOURCE: https://github.com/grafana/grafana/blob/main/hack/boilerplate.go.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
// SPDX-License-Identifier: AGPL-3.0-only
```

----------------------------------------

TITLE: System Metrics in InfluxDB Line Protocol
DESCRIPTION: Two data points in InfluxDB line protocol format showing system metrics like CPU load, number of CPUs, and users. Each point includes tags (host, mylabel) and fields (load metrics, cpu count, user count) with nanosecond precision timestamps.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/same_metrics_different_labels_different_time.txt#2025-04-23_snippet_0

LANGUAGE: influxdb
CODE:
```
system,host=MacBook-Pro-Alexander.local,mylabel=boom1 load15=2.00341796875,n_cpus=12i,n_users=6i,load1=3.15966796875,load5=2.3837890625 1616403089000000000
system,host=MacBook-Pro-Alexander.local,mylabel=boom2 load15=2.00341796875,n_cpus=11i,n_users=6i,load1=3.15966796875,load5=2.3837890625 1616403090000000000
```

----------------------------------------

TITLE: Signing and Structuring a Plugin Manifest File in Grafana (JSON)
DESCRIPTION: This snippet demonstrates a JSON-based manifest for a Grafana plugin, encapsulated within a PGP-signed message. It includes metadata such as manifest version, plugin name, keyId, version, signing organizational info, and integrity hashes for plugin files. Intended for secure plugin distribution, the JSON must be paired with its PGP signature to enable signature verification by consumers. No external dependencies are required beyond PGP verification tools and consumer compatibility with JSON manifest format.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/valid-v2-pvt-signature-root-url-uri/plugin/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "private",
  "signedByOrg": "willbrowne",
  "signedByOrgName": "Will Browne",
  "rootUrls": [
    "http://localhost:3000/grafana"
  ],
  "plugin": "test-datasource",
  "version": "1.0.0",
  "time": 1661171981629,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "203ef4a613c5693c437a665cd67f95e2756a0f71b336b2ffb265db7c180d0b19"
  }
}
```

----------------------------------------

TITLE: Upgrading Grafana Plugins to React 18
DESCRIPTION: React 17 has been removed as a peer dependency from Grafana packages. Plugins utilizing newer versions of these packages must ensure they are compatible with and upgraded to React 18.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v11-0.md#2025-04-23_snippet_6



----------------------------------------

TITLE: Removing Grafana zypper Repository - Shell
DESCRIPTION: Removes the Grafana repository from zypper repositories, cleaning package management configuration. Requires sudo, zypper. Parameter: repository named 'grafana' must exist. Output: repository removed from system.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_15

LANGUAGE: shell
CODE:
```
sudo zypper removerepo grafana
```

----------------------------------------

TITLE: Setting OpenTelemetry Span Attributes in Go
DESCRIPTION: Compares two Go syntax styles for setting OpenTelemetry span attributes using the `attribute` package. The preferred method `attribute.<Type>(\"key\", value)` is recommended over `attribute.Key(\"key\").<Type>(value)` for improved readability and conciseness when adding attributes like datasource name or organization ID to spans.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/instrumentation.md#2025-04-23_snippet_3

LANGUAGE: go
CODE:
```
```go
attribute.String("datasource_name", proxy.ds.Name)
// vs
attribute.Key("datasource_name").String(proxy.ds.Name)

attribute.Int64("org_id", proxy.ctx.SignedInUser.OrgID)
// vs
attribute.Key("org_id").Int64(proxy.ctx.SignedInUser.OrgID)
```
```

----------------------------------------

TITLE: Importing Storybook Components and Spinner for Documentation
DESCRIPTION: This code snippet imports necessary components from Storybook and the Spinner component along with its stories for documentation purposes.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Spinner/Spinner.mdx#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { Meta, Canvas, ArgTypes } from '@storybook/blocks';
import { Spinner } from './Spinner';
import * as SpinnerStories from './Spinner.story';
```

----------------------------------------

TITLE: Upgrading Go Dependencies
DESCRIPTION: Command for upgrading a specific Go module dependency. This updates the module to its latest version and requires running go mod tidy afterward to ensure dependency files are consistent.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/UPGRADING_DEPENDENCIES.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
go get -u <MODULE>
```

LANGUAGE: bash
CODE:
```
go mod tidy
```

----------------------------------------

TITLE: Frontend Build Commands
DESCRIPTION: Commands for installing dependencies and starting the frontend build process
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
yarn install --immutable
yarn start
```

----------------------------------------

TITLE: Setting Up Reverse Proxy for JWK Set URL
DESCRIPTION: Command to run a reverse proxy using localtunnel for the JWK set URL in the JWT authentication setup.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/oauth/readme.md#2025-04-23_snippet_5

LANGUAGE: sh
CODE:
```
npx localtunnel --port 8087
```

----------------------------------------

TITLE: Rendering ValuePicker React Component in Storybook (TypeScript/React)
DESCRIPTION: This snippet demonstrates how to use the ValuePicker component within a React (TypeScript) application, providing it with a label, options array, change handler, and style props. The component requires dependencies on React, Storybook, and the ValuePicker implementation itself. Key parameters include an array of options (each with value and label), an onChange callback, and styling options like variant and size. On interaction, the ValuePicker displays a button that reveals a dropdown menu for selection, returning the selected value via the handler.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ValuePicker/ValuePicker.mdx#2025-04-23_snippet_0

LANGUAGE: TypeScript
CODE:
```
<ValuePicker
  label="Choose an option"
  options={[
    {
      value: 'option1',
      label: 'Option 1',
    },
    {
      value: 'option2',
      label: 'Option 2',
    },
    {
      value: 'option3',
      label: 'Option 3',
    },
  ]}
  onChange={(value) => doThings}
  variant="primary"
  size="md"
/>
```

----------------------------------------

TITLE: Updating Controller as to render Prop Pattern in react-hook-form v7+ (JavaScript/JSX)
DESCRIPTION: Shows migration of Controller component usage from the as prop to the render prop, conforming to react-hook-form v7's API updates. Offers two variants: one using only field, and one with both field and fieldState. This facilitates integration with React components expecting to be controlled via field state.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_14

LANGUAGE: jsx
CODE:
```
- <Controller as={<input />} />
+ <Controller render={({ field }) => <input {...field} />}
// or
+ <Controller render={({ field, fieldState }) => <input {...field} />} />
```

----------------------------------------

TITLE: Collectd Environment Variables Configuration
DESCRIPTION: Lists the required and optional environment variables for configuring the collectd monitoring system. Includes settings for Graphite connection, host identification, metric collection intervals and reporting preferences.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/collectd/README.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
- `HOST_NAME`
  - Will be sent to Graphite
  - Required
- `GRAPHITE_HOST`
  - Graphite IP or hostname
  - Required
- `GRAPHITE_PORT`
  - Graphite port
  - Optional, defaults to 2003
- `GRAPHITE_PREFIX`
  - Graphite prefix
  - Optional, defaults to collectd.
- `REPORT_BY_CPU`
  - Report per-CPU metrics if true, global sum of CPU metrics if false
  - Optional, defaults to false.
- `COLLECT_INTERVAL`
  - Collection interval and thus resolution of metrics
  - Optional, defaults to 10
```

----------------------------------------

TITLE: Defining Default Alert Message Structure in Go Template
DESCRIPTION: Defines the main structure for a default Grafana alert notification message. It displays counts of firing and resolved alerts, group labels, calls '__default_alerts_summarize' to list details for each state, and includes a link to the Grafana alerts page. Expects context variables like '.Alerts.Firing', '.Alerts.Resolved', '.GroupLabels', and '.AlertPageUrl'.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/ng_alert_notification.txt#2025-04-23_snippet_0

LANGUAGE: go-template
CODE:
```
[[- define "__default_message" -]]
You have [[ len .Alerts.Firing ]] firing alert(s), and [[ len .Alerts.Resolved ]] resolved alert(s) for [[ .GroupLabels ]]

[[ if .Alerts.Firing -]]
([[ len .Alerts.Firing ]]) FIRING
-----------
[[ template "__default_alerts_summarize" .Alerts.Firing ]]
[[- end ]]

[[- if .Alerts.Resolved ]]
([[ len .Alerts.Resolved ]]) RESOLVED
-------------
[[ template "__default_alerts_summarize" .Alerts.Resolved ]]
[[- end ]]
Go to the Alerts page: [[ .AlertPageUrl ]]
[[- end -]]
```

----------------------------------------

TITLE: Inspecting Panel Data or Settings - Markdown
DESCRIPTION: Specifies the use of 'i' as the shortcut to open inspection options for a hovered Grafana panel. This allows users to examine raw data, query, or panel configuration. Only dependency is session with keyboard shortcuts enabled.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_9

LANGUAGE: markdown
CODE:
```
`i`
```

----------------------------------------

TITLE: Including Graph Styles Options Documentation using Hugo Shortcode
DESCRIPTION: This Hugo shortcode includes shared documentation content for graph styles options from `visualizations/graph-styles-options.md`. The `leveloffset="+1"` parameter likely adjusts heading levels within the included content. Dependencies include the Hugo static site generator and the referenced markdown file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/candlestick/index.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
{{< docs/shared lookup="visualizations/graph-styles-options.md" source="grafana" version="<GRAFANA_VERSION>" leveloffset="+1" >}}
```

----------------------------------------

TITLE: Updating Dockerfile for New Module
DESCRIPTION: Docker configuration to include the new module in the build process.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/manage-go-module.md#2025-04-23_snippet_3

LANGUAGE: dockerfile
CODE:
```
# Dockerfile
COPY pkg/your/new/module ./pkg/your/new/module
```

----------------------------------------

TITLE: Appending PGP Signed Message and Signature - Grafana Plugin Manifest - Plaintext
DESCRIPTION: This snippet illustrates a plaintext wrapper around the JSON manifest using PGP-signed message formatting, concluding with a base64-encoded PGP signature. The section beginning with '-----BEGIN PGP SIGNED MESSAGE-----' and ending with '-----END PGP SIGNATURE-----' enables digital signature verification of the manifest block. The expected prerequisite is the use of OpenPGP-compatible software for validating the integrity and authorship of the JSON manifest. The input block is a signed message, and the output is usually a verified status or the recovered data; non-alteration of format is essential for successful verification.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/pluginsintegration/pluginassets/testdata/module-hash-valid/MANIFEST.txt#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

{
  "manifestVersion": "2.0.0",
  "signatureType": "private",
  "signedByOrg": "giuseppeguerra",
  "signedByOrgName": "giuseppeguerra",
  "rootUrls": [
    "http://127.0.0.1:3000/"
  ],
  "plugin": "test-datasource",
  "version": "1.0.0",
  "time": 1725959570435,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "module.js": "5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03",
    "plugin.json": "129fab4e0584d18c778ebdfa5fe1a68edf2e5c5aeb8290b2c68182c857cb59f8"
  }
}
-----BEGIN PGP SIGNATURE-----
Version: OpenPGP.js v4.10.11
Comment: https://openpgpjs.org

wrkEARMKAAYFAmbgDZIAIQkQfk0ManCIZucWIQTzOyW2kQdOhGNlcPN+TQxq
cIhm5wbfAgkAXmKJcM8uAKb3TepYW/oyGhRLR8L6eM9mCoYwKkatITKJ6bRe
Wnz37AMcPx0DahgfCzCXRLo4CspPJylr2JV8DagCCQCfCjHgLFhKGpBP71Y1
mgcQ1/CJefb6B2H45G25MwUFTlSTGLDqW4QMi2kQvXnnUMjXquv2+iVd6qyz
0Rqvpou/QQ==
=QNmr
-----END PGP SIGNATURE-----
```

----------------------------------------

TITLE: Basic DraggableManager Mouse Event Handler Implementation
DESCRIPTION: Demonstrates how to implement basic mouse event handling with DraggableManager for a draggable divider component.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/explore/TraceView/components/utils/DraggableManager/README.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<div className="DividerDemo--realm">
  <div className="DividerDemo--divider" onMouseDown={this._dragManager.handleMouseDown} />
</div>
```

----------------------------------------

TITLE: Adding Grafana Local Domain to Hosts File
DESCRIPTION: Instructions for adding the 'env.grafana.local' domain to the hosts file on Mac/Linux and Windows systems.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/jwt_proxy/readme.md#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
127.0.0.1   env.grafana.local
::1         env.grafana.local
```

----------------------------------------

TITLE: Embedding Logs Panel Correlation Figure using Hugo Shortcode
DESCRIPTION: Utilizes a Hugo 'figure' shortcode to embed an image visualizing correlation links within the Grafana Logs Panel. The 'src' parameter defines the image path relative to the static directory, 'max-width' controls the display size, and 'caption' provides descriptive text below the image. This snippet requires a Hugo static site generator environment for processing and rendering the figure.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/correlations/use-correlations-in-visualizations/index.md#2025-04-23_snippet_0

LANGUAGE: shortcode
CODE:
```
{{< figure src="/static/img/docs/correlations/correlations-in-logs-panel-10-0.png" max-width="600px" caption="Correlation links in Logs panel" >}}
```

----------------------------------------

TITLE: Querying Time Series Data with Fill Parameter in PostgreSQL
DESCRIPTION: Shows a SQL query that groups time series data by 5-minute intervals, sums values, includes hostname, and uses the fill parameter to convert null values to zero. This query demonstrates how to handle null values in time series data.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_5

LANGUAGE: sql
CODE:
```
SELECT
  $__timeGroupAlias("createdAt",'5m',0),
  sum(value) as value,
  hostname
FROM test_data
WHERE
  $__timeFilter("createdAt")
GROUP BY time, hostname
ORDER BY time
```

----------------------------------------

TITLE: Region Demo Mouse Event Implementation
DESCRIPTION: Shows how to implement mouse event handling for a region-based drag interaction, including move and leave events.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/explore/TraceView/components/utils/DraggableManager/README.md#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
<div
  className="RegionDemo--realm"
  onMouseDown={this._dragManager.handleMouseDown}
  onMouseMove={this._dragManager.handleMouseMove}
  onMouseLeave={this._dragManager.handleMouseMove}
>
  {/* Draw visuals for the currently dragged range, otherwise empty */}
</div>
```

----------------------------------------

TITLE: Configuring Raspberry Pi WiFi Connection (Bash/Config)
DESCRIPTION: Creates a `wpa_supplicant.conf` file in the boot directory to automatically connect the Raspberry Pi to a specified WiFi network upon startup. Requires replacing placeholders with the actual country code, WiFi SSID, and password. This step is optional if using a wired network connection.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/install-grafana-on-raspberry-pi/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
ctrl_interface=/var/run/wpa_supplicant
update_config=1
country=<Insert 2 letter ISO 3166-1 country code here>

network={
 ssid="<Name of your WiFi>"
 psk="<Password for your WiFi>"
}

```

----------------------------------------

TITLE: Embedding Table Correlation Figure using Hugo Shortcode
DESCRIPTION: Employs a Hugo 'figure' shortcode to display an image showing correlation links within a Grafana Table visualization. Parameters include 'src' for the image location within the static assets, 'max-width' for constraining the image size, and 'caption' for context. This shortcode is processed by the Hugo static site generator during site build.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/correlations/use-correlations-in-visualizations/index.md#2025-04-23_snippet_1

LANGUAGE: shortcode
CODE:
```
{{< figure src="/static/img/docs/correlations/correlations-in-table-10-0.png" max-width="600px" caption="Correlations links in table" >}}
```

----------------------------------------

TITLE: Legacy Forms Migration - Switch Component Example
DESCRIPTION: Example showing how to migrate from old Switch component to LegacyForms namespace in Grafana 7
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/CHANGELOG.md#2025-04-23_snippet_0

LANGUAGE: JSX
CODE:
```
import { LegacyForms } from '@grafana/ui';
…
<LegacyForms.Switch ... />
```

----------------------------------------

TITLE: Required Terraform Grafana Provider Version for Data Source Permissions
DESCRIPTION: Indicates the minimum version requirement (v2.6.0) for the Terraform Grafana provider to ensure compatibility with the new data source permission management endpoints introduced in Grafana v10.3. Users managing data source permissions via Terraform must upgrade the provider.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v10-3.md#2025-04-23_snippet_2

LANGUAGE: text
CODE:
```
version 2.6.0
```

----------------------------------------

TITLE: Verifying Kubernetes Namespace Creation using Bash
DESCRIPTION: Retrieves and displays information about the specified Kubernetes namespace ('my-grafana') using `kubectl`. This command confirms that the namespace was successfully created in the previous step. Requires `kubectl` to be installed and configured.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
kubectl get namespace my-grafana
```

----------------------------------------

TITLE: Setting Email Subject in Grafana Template (Go Template)
DESCRIPTION: This snippet defines the subject line for the Grafana signup confirmation email using template syntax. It likely uses a custom `HiddenSubject` function or directive, referencing the `.Subject` variable and providing a default subject "Welcome to Grafana, please complete your signup!".
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/passwordless_verify_new_user.txt#2025-04-23_snippet_0

LANGUAGE: go-template
CODE:
```
[[HiddenSubject .Subject "Welcome to Grafana, please complete your signup!"]]
```

----------------------------------------

TITLE: Custom Virtual Users Load Test
DESCRIPTION: Executes load test with a specified number of virtual users
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
$ ./run.sh -v 10
```

----------------------------------------

TITLE: Installing hubot-alias Plugin using npm (Bash)
DESCRIPTION: This command installs the `hubot-alias` plugin using npm (`i` is short for `install`) and adds it to the project's dependencies with `--save`. This plugin allows users to create shorter, custom aliases for longer Hubot commands, simplifying interactions, particularly for frequently used Grafana graph requests.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/integrate-hubot/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
npm i --save hubot-alias
```

----------------------------------------

TITLE: Creating Provider Sets in Go with Wire
DESCRIPTION: Demonstrates how to group providers into sets using wire.NewSet and combine multiple sets.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_3

LANGUAGE: go
CODE:
```
package foobarbaz

import (
    // ...
    "github.com/google/wire"
)

// ...

var SuperSet = wire.NewSet(ProvideFoo, ProvideBar, ProvideBaz)

// ...

import (
    // ...
    "example.com/some/other/pkg"
)

// ...

var MegaSet = wire.NewSet(SuperSet, pkg.OtherSet)
```

----------------------------------------

TITLE: Installing Plugin from a Specific URL (Bash)
DESCRIPTION: Illustrates using the '--pluginUrl' global option to install a plugin directly from a specified .zip file URL, bypassing the default Grafana plugin repository.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
grafana cli --pluginUrl https://company.com/grafana/plugins/<plugin-id>-<plugin-version>.zip plugins install <plugin-id>
```

----------------------------------------

TITLE: YAML Frontmatter Configuration for Grafana 9.1.0-beta1 Release Notes
DESCRIPTION: YAML frontmatter configuration that defines metadata for the Grafana 9.1.0-beta1 release notes document. It specifies empty aliases, hide_menu set to true, and labels for different product tiers including cloud, enterprise, and open source software (oss).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-9-1-0-beta1.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
---
aliases: []
hide_menu: true
labels:
  products:
    - cloud
    - enterprise
    - oss
title: Release notes for Grafana 9.1.0-beta1
---
```

----------------------------------------

TITLE: Showing Intermediate Result of 'Labels to Fields' Merging (Series 1)
DESCRIPTION: This Markdown table illustrates the intermediate state after the first part of the 'Labels to fields' transformation acts on a single series (Series 1) with the label Server=ServerA, before the final merge step.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_35

LANGUAGE: markdown
CODE:
```
| Time                | Server  | Value |
| ------------------- | ------- | ----- |
| 2020-07-07 11:34:20 | ServerA | 10    |
```

----------------------------------------

TITLE: Configuring ESRI World Imagery as Default Baselayer in Grafana (INI)
DESCRIPTION: Configuration example for setting ESRI World Imagery as the default base map in Grafana. This uses the predefined 'world-imagery' server option from the ESRI tile server.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/geomap/index.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
geomap_default_baselayer = `{
  "type": "esri-xyz",
  "config": {
    "server": "world-imagery"
  }
}`
```

----------------------------------------

TITLE: Restarting Prometheus Service on Windows (PowerShell)
DESCRIPTION: This snippet demonstrates restarting the Prometheus service using PowerShell on Windows. 'net stop' stops the service, and 'net start' initiates it again. Assumes Prometheus is installed and registered as a Windows Service. Both commands require administrative privileges. The output describes the stopping and starting process of the service.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_21

LANGUAGE: powershell
CODE:
```
net stop prometheus
net start prometheus
```

----------------------------------------

TITLE: Defining ProvisionedAlertRules Structure in Go
DESCRIPTION: Defines the ProvisionedAlertRules type as a slice of ProvisionedAlertRule objects.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_42

LANGUAGE: go
CODE:
```
[][ProvisionedAlertRule](#provisioned-alert-rule)
```

----------------------------------------

TITLE: Viewing OAuth2-proxy Logs for Prometheus Authentication
DESCRIPTION: Sample log output showing successful requests from Grafana to Prometheus through the OAuth2-proxy, including both status check and query requests with associated authentication details.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/prometheus_oauth2_proxy_azure/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
2023-04-19 11:29:40 172.31.0.1:55602 - d96b832a-170a-41eb-a974-6558c5ce4454 - - [2023/04/19 09:29:40] some-random-tunnel-address.trycloudflare.com GET / "/api/v1/status/buildinfo" HTTP/1.1 "Grafana/10.0.0-pre" 200 187 0.016
2023-04-19 11:29:41 172.31.0.1:55602 - db27c56a-ccd6-4cdb-a040-318113781abf - 65ac87f4-931f-4e46-9761-f8bf1ad36b48 [2023/04/19 09:29:41] some-random-tunnel-address.trycloudflare.com POST / "/api/v1/query" HTTP/1.1 "Grafana/10.0.0-pre" 200 103 0.003
```

----------------------------------------

TITLE: Implementing Checkbox with AutoSaveField in React
DESCRIPTION: Example of using AutoSaveField with a Checkbox component for automatic boolean value saving.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/AutoSaveField/AutoSaveField.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
<AutoSaveField
  onFinishChange={customRequest}
  //Complete field args if needed
>
  {(onChange) => (
    <Checkbox
      value={checkBoxTest}
      onChange={(e) => {
        onChange(e.currentTarget.value);
        //Complete code if needed
      }}
    />
  )}
</AutoSaveField>
```

----------------------------------------

TITLE: Showing Result of 'Labels to Fields' with Value Field Name
DESCRIPTION: This Markdown table demonstrates the output of the 'Labels to fields' transformation when the 'Server' label is selected as the 'Value field name'. Each unique value of the 'Server' label becomes a separate column.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_34

LANGUAGE: markdown
CODE:
```
| Time                | Datacenter | Server A | Server B |
| ------------------- | ---------- | -------- | -------- |
| 2020-07-07 11:34:20 | EU         | 1        | 2        |
```

----------------------------------------

TITLE: Encapsulating Signed Plugin Manifest with PGP Signature - PGP ASCII Armored
DESCRIPTION: This code block encapsulates a JSON manifest inside a PGP signed message, using the PGP ASCII Armor format for safe textual transmission and verification. It ensures that the included manifest has not been tampered with, by providing a cryptographic hash and a public signature which must be verified against the original signing key. Dependencies include OpenPGP-compatible libraries or utilities for signature verification. The expected input is the JSON manifest and the corresponding PGP private key for signing; output is the signed block to be bundled with the plugin distribution. The block begins and ends with clearly marked delimiters for programmatic parsing.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/pluginsintegration/pluginassets/testdata/module-hash-no-module-js/MANIFEST.txt#2025-04-23_snippet_1

LANGUAGE: pgp
CODE:
```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "plugin": "test-app",
  "version": "1.0.0",
  "time": 1726230812215,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "31f04aceb2a9b14c2e501f38a4de5ab1c7a3e7306f58353fa5c1a86b716c971c",
    "something.js": "266c19bc148b22ddef2a288fc5f8f40855bda22ccf60be53340b4931e469ae2a"
  }
}
-----BEGIN PGP SIGNATURE-----
Version: OpenPGP.js v4.10.11
Comment: https://openpgpjs.org

wrkEARMKAAYFAmbkMRwAIQkQfk0ManCIZucWIQTzOyW2kQdOhGNlcPN+TQxq
cIhm53UWAgkBE2oxqyzBji86eCOzLmCT7IgQaoSMMF48tu+XdgwFS5/NU5su
deKad3taDnSU9a7GkCaisRVQOWy/UtFS1FNQTtkCCQBc1cZ6JsPWh2Pd60h0
9U5aviYde6g1DCKO1riaUzHzrruBiHmHWjzr2aYwACb89vs2XcZqvue1Byb+
y2inBDhHvQ==
=qMej
-----END PGP SIGNATURE-----
```

----------------------------------------

TITLE: Importing and Injecting Support Bundles Registry in Go Service Constructor
DESCRIPTION: This Go snippet demonstrates how to import the support bundles registry into a service's ProvideService constructor by adding a supportbundles.Service parameter. Dependencies for this pattern typically include Grafana's supportbundles package and the service being constructed. The function allows the service to register support bundle collectors, and 'make gen-go' must be run to wire the dependency. Key parameters are the injected registry and other service dependencies. The output is an instantiated service with access to the registry.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/support-bundles.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
type UsageStats struct {
	...
}

func ProvideService(
	...
	bundleRegistry supportbundles.Service, // Bundle registry
) (*UsageStats, error)
```

----------------------------------------

TITLE: Defining TLS/SSL Usage in Markdown
DESCRIPTION: Documentation explaining the preferred terminology for TLS/SSL in Grafana's codebase and documentation. It clarifies that while both terms are used, TLS is preferred as the current standard while SSL is considered deprecated.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/engineering/terminology.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
# Grafana technical terminology

<!-- Keep terms in alphabetical order: -->

This glossary defines technical terms used in Grafana.

## TLS/SSL

The acronyms [TLS](https://en.wikipedia.org/wiki/Transport_Layer_Security) (Transport Layer Security) and
[SSL](https://en.wikipedia.org/wiki/SSL) (Secure Socket Layer) are both used to describe the HTTPS security layer.
In practice, they are synonymous. However, TLS is considered the current name for the technology, and SSL is considered
[deprecated](https://tools.ietf.org/html/rfc7568).

As such, while we use both terms in our codebase and documentation, we generally prefer TLS.
However, we use both acronyms in combination when referring to this type of technology, that is, _TLS/SSL_. We do this because we don't want to confuse readers who may not be aware of them being synonymous, and SSL is still prevalent in common discourse.
```

----------------------------------------

TITLE: Representing Direct Folder Permissions in OpenFGA
DESCRIPTION: This example illustrates an OpenFGA tuple that grants a user ('user:1') direct 'read' access to a specific folder identified by its name. Folders use a distinct 'folder' type in the schema.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_1

LANGUAGE: text
CODE:
```
{ “user”: “user:1”, relation: “read”, object:”folder:<name>” }
```

----------------------------------------

TITLE: Displaying Query Value in Annotation (Index Function)
DESCRIPTION: This Go template snippet shows an alternative method to include a query result's value (Ref ID 'A') in a Grafana alert annotation using the `index` function with the `$values` variable. This achieves the same outcome as dot notation but can be useful in different scenarios.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_1

LANGUAGE: gotemplate
CODE:
```
CPU usage has exceeded 80% ({{ index $values "A" }}) for the last 5 minutes.
```

----------------------------------------

TITLE: Restarting Grafana Docker Container
DESCRIPTION: This shell command restarts the Docker container named `grafana`. Restarting the container is necessary after adding or removing plugins in the mounted volume, as Grafana scans and loads plugins only during its startup sequence. This ensures that any changes to the plugin directory are recognized by the running Grafana instance.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/set-up-environment.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
docker restart grafana
```

----------------------------------------

TITLE: Accessing FreeIPA Docker Container Shell
DESCRIPTION: Command to access the bash shell of the running FreeIPA Docker container for user management.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/freeipa/notes.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
docker exec -it freeipa /bin/bash
```

----------------------------------------

TITLE: Removing Role Assignments from Grafana Teams via YAML Provisioning
DESCRIPTION: This YAML configuration example illustrates how to remove specific role assignments from a Grafana team using provisioning. It defines the 'custom:users:writer' role, assigns it and 'fixed:users:writer' to the 'user admins' team, and uses `state: 'absent'` within the `teams > roles` section to remove both roles from the 'user writers' team within organization ID 1 upon reloading the configuration. Role assignments for 'user admins' remain unaffected.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/assign-rbac-roles/index.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
# config file version
apiVersion: 2

# Roles to insert/update in the database
roles:
  - name: 'custom:users:writer'
    description: 'List/update other users in the organization'
    version: 1
    global: true
    permissions:
      - action: 'org.users:read'
        scope: 'users:*'
      - action: 'org.users:write'
        scope: 'users:*'

# Assignments to teams
teams:
  - name: 'user writers'
    orgId: 1
    roles:
      - name: 'fixed:users:writer'
        global: true
        state: 'absent' # Remove assignment
      - name: 'custom:users:writer'
        global: true
        state: 'absent' # Remove assignment
  - name: 'user admins'
    orgId: 1
    roles:
      - name: 'fixed:users:writer'
        global: true
      - name: 'custom:users:writer'
        global: true
```

----------------------------------------

TITLE: License Delete Response Example - Grafana Licensing API - HTTP
DESCRIPTION: Shows the HTTP response after issuing a delete license request. The 202 Accepted status indicates that the license was successfully removed or did not exist. The JSON body is an empty object, matching expected output for this operation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/licensing.md#2025-04-23_snippet_7

LANGUAGE: http
CODE:
```
HTTP/1.1 202 Accepted\nContent-Type: application/json\nContent-Length: 2\n\n{}
```

----------------------------------------

TITLE: Rendering Flame Graph Color Schema Screenshot using Hugo Shortcode
DESCRIPTION: This Hugo shortcode displays an image figure. It defines the image path (`src`), constrains its maximum display width (`max-width`), and includes descriptive alternative text (`alt`) related to applying different color schemes in the flame graph visualization.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/flame-graph/index.md#2025-04-23_snippet_1

LANGUAGE: hugo
CODE:
```
{{< figure src="/media/docs/grafana/panels-visualizations/screenshot-flamegraph-color-v11.6.png" max-width="700px" alt="Different color scheme" >}}
```

----------------------------------------

TITLE: Representing Team Member Managed Permissions in OpenFGA
DESCRIPTION: This example demonstrates how managed permissions are assigned to members of a team in OpenFGA. It uses the '#member' relation on the team object ('team:<team_uid>#member') to grant the 'read' permission on the specified folder ('folder:<folder_uid>') to all team members.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_8

LANGUAGE: text
CODE:
```
team:<team_uid>#member read folder:<folder_uid>
```

----------------------------------------

TITLE: Verifying APIService Availability after Microservice Start (Shell)
DESCRIPTION: After waiting for the aggregator to perform its discovery check (approximately 10 seconds after the example service starts), this command sequence again sets the `KUBECONFIG` variable and uses `kubectl get apiservice` to check the status of the registered `APIService`. The expected output now shows `AVAILABLE` as `True`, indicating that the aggregator successfully connected to the example microservice via its configured TLS and confirmed its readiness.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/aggregator/README.md#2025-04-23_snippet_5

LANGUAGE: shell
CODE:
```
export KUBECONFIG=$PWD/data/grafana-apiserver/grafana.kubeconfig
kubectl get apiservice
# SAMPLE OUTPUT
# NAME                           SERVICE                     AVAILABLE      AGE
# v0alpha1.example.grafana.app   grafana/example-apiserver   True           30m
```

----------------------------------------

TITLE: Declaring and Using Custom Errors in Go for Grafana
DESCRIPTION: This snippet demonstrates how to declare a custom error base and use it in a function. It shows error wrapping and handling of specific error types.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/errors.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
  "errors"
  "github.com/grafana/grafana/pkg/util/errutil"
  "example.org/thing"
)

var ErrBaseNotFound = errutil.NewBase(errutil.StatusNotFound, "main.notFound", errutil.WithPublicMessage("Thing not found"))

func Look(id int) (*Thing, error) {
  t, err := thing.GetByID(id)
  if errors.Is(err, thing.ErrNotFound) {
    return nil, ErrBaseNotFound.Errorf("did not find thing with ID %d: %w", id, err)
  }

  return t, nil
}
```

----------------------------------------

TITLE: Importing Grid Component and Storybook Blocks in MDX
DESCRIPTION: This snippet imports the necessary components for the MDX documentation page. It imports the `Grid` component itself from its local file and the `Meta` and `ArgTypes` components from Storybook blocks. `Meta` is used to define Storybook metadata for the component, and `ArgTypes` automatically generates documentation for the component's props.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Grid/Grid.mdx#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { Meta, ArgTypes } from '@storybook/blocks';
import { Grid } from './Grid';
```

----------------------------------------

TITLE: Importing Forms Module in React (JavaScript/JSX)
DESCRIPTION: This snippet shows how to import the Forms module from the @grafana/ui package within a React context. This import is necessary to access UI components including Field, Input, and related form controls as part of the Grafana design system. Dependencies include @grafana/ui; required for rendering standardized form elements.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Field.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { Forms } from '@grafana/ui';
```

----------------------------------------

TITLE: Including Shared Upgrade Documentation - Hugo Shortcode - Plaintext
DESCRIPTION: This snippet demonstrates how to include shared documentation files into the current Grafana documentation page using a Hugo shortcode. The 'lookup' parameter specifies the shared markdown file to include, while the 'source' and 'version' parameters provide context for sourcing the correct content. This approach modularizes documentation and ensures reuse of standard upgrade instructions across multiple pages.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v8.4/index.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
{{< docs/shared lookup=\"upgrade/intro.md\" source=\"grafana\" version=\"<GRAFANA VERSION>\" >}}
```

----------------------------------------

TITLE: Setting Environment Variables for Drone Configuration in Bash
DESCRIPTION: Sets the DRONE_SERVER and DRONE_TOKEN environment variables required for Drone pipeline modifications. These variables are used to verify that only Grafana employees can make changes to the pipelines.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/drone-pipeline.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
export DRONE_SERVER=<value_from_drone_account>
export DRONE_TOKEN=<value_from_drone_account>
```

----------------------------------------

TITLE: Starting Etcd Development Environment using Make Bash
DESCRIPTION: This Bash command uses the Makefile to set up and launch an etcd instance configured for development purposes (`devenv`). Running this command is a prerequisite for configuring Grafana to use etcd as the storage backend for its Kubernetes API server.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/README.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
make devenv sources=etcd
```

----------------------------------------

TITLE: Protobuf Compiler Plugin Installation - Shell
DESCRIPTION: This shell command installs the Go plugin for protoc required for compiling protobuf definitions for use with GRPC in Go. It assumes that the Go toolchain is available and GOPATH/bin is in the PATH.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_20

LANGUAGE: sh
CODE:
```
go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
```

----------------------------------------

TITLE: Implementing Options Struct and Greeter Provider in Go
DESCRIPTION: Shows how to use an options struct for a provider function with multiple dependencies, and how to create a Wire provider set for it.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/best-practices.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
type Options struct {
    // Messages is the set of recommended greetings.
    Messages []Message
    // Writer is the location to send greetings. nil goes to stdout.
    Writer io.Writer
}

func NewGreeter(ctx context.Context, opts *Options) (*Greeter, error) {
    // ...
}

var GreeterSet = wire.NewSet(wire.Struct(new(Options), "*"), NewGreeter)
```

----------------------------------------

TITLE: Setting Email Subject Dynamically using Go Template
DESCRIPTION: This snippet uses Grafana's specific `HiddenSubject` directive along with Go template variables to set the email's subject line. It includes the Grafana instance name (`.Name`) within the subject. The `.Subject` variable likely holds a default or base subject provided by the backend.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/verify_email.txt#2025-04-23_snippet_0

LANGUAGE: Go Template
CODE:
```
[[HiddenSubject .Subject "Verify your email - [[.Name]]"]]
```

----------------------------------------

TITLE: Installing Frontend Dependencies for Grafana Test Plugins
DESCRIPTION: Installs the required frontend dependencies for the Grafana project and its test plugins using Yarn. The `--immutable` flag ensures that the yarn.lock file is not updated and matches the dependencies specified, crucial for reproducible builds in CI/CD environments or shared development setups.
SOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/README.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
yarn install --immutable
```

----------------------------------------

TITLE: Configuring GRPC Storage-Server - INI
DESCRIPTION: This INI snippet configures the Grafana API server to connect to a GRPC storage-server by specifying its address. This is required for running Unified Storage as an external GRPC service and must be added to the grafana-apiserver section in the configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_16

LANGUAGE: ini
CODE:
```
[grafana-apiserver]\n; your gRPC server address\naddress = localhost:10000
```

----------------------------------------

TITLE: Updating `filterQuery` Method Execution Order for `DataSourceWithBackend`
DESCRIPTION: For Grafana data sources extending `DataSourceWithBackend`, the `filterQuery` method is now invoked *before* the main `query` method. Any query migration logic previously assumed to run before `filterQuery` must now be incorporated directly within the `filterQuery` method itself.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v11-0.md#2025-04-23_snippet_0



----------------------------------------

TITLE: Apply Terraform Configuration
DESCRIPTION: Shell commands showing the process of applying Terraform configuration and the expected output, including plan confirmation and completion messages.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_10

LANGUAGE: shell
CODE:
```
terraform apply
```

LANGUAGE: shell
CODE:
```
Plan: 4 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
Terraform will perform the actions described above.
Only 'yes' will be accepted to approve.

Enter a value:
```

LANGUAGE: shell
CODE:
```
Apply complete! Resources: 4 added, 0 changed, 0 destroyed.
```

----------------------------------------

TITLE: Defining Enums in TypeScript
DESCRIPTION: Shows the correct way to define enums using PascalCase in TypeScript.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
// bad
enum buttonVariant {
 //...
}

// good
enum ButtonVariant {
 //...
}
```

----------------------------------------

TITLE: Installing Frontend Dependencies with Yarn (Shell)
DESCRIPTION: This shell command uses yarn to install the project's frontend dependencies based on the lock file. The '--immutable' flag ensures that the installation uses the exact versions specified in the lock file, preventing unexpected changes and ensuring reproducible builds.
SOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/grafana-extensionstest-app/README.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
yarn install --immutable
```

----------------------------------------

TITLE: Node CPU Metrics Line Protocol Format
DESCRIPTION: Time series data points showing CPU metrics in Prometheus line protocol format. Each line represents a measurement of CPU time in different modes (user, guest, nice) across multiple CPU cores with timestamps in nanoseconds.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/incomplete_fields_2.txt#2025-04-23_snippet_0

LANGUAGE: prometheus
CODE:
```
node_cpu,cpu=7,mode=user seconds_total=6410.4799999999996 1625783151607273170
node_cpu,cpu=0,mode=user guest_seconds_total=0 1625783151607273175
node_cpu,cpu=0,mode=nice guest_seconds_total=0 1625783151607273175
node_cpu,cpu=1,mode=user guest_seconds_total=0 1625783151607273175
node_cpu,cpu=7,mode=user seconds_total=2410.4799999999996 1625783151607273178
```

----------------------------------------

TITLE: Removing a Panel - Markdown
DESCRIPTION: Shows 'pr' as the shortcut to remove a hovered panel in Grafana. Appropriate panel permissions are required for this operation, and it relies on the panel currently being active (hovered) and keyboard shortcuts being enabled.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_11

LANGUAGE: markdown
CODE:
```
`pr`
```

----------------------------------------

TITLE: Interpreting Google Wire Dependency Injection Error Message
DESCRIPTION: This error message is displayed when Google Wire can't find a provider for a string pointer type. The message indicates that an injector is trying to use a *string type, but no provider for that type has been defined.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/FieldsOfStructDoNotProvidePtrToField/want/wire_errs.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
example.com/foo/wire.go:x:y: inject injectedMessagePtr: no provider found for *string, output of injector
```

----------------------------------------

TITLE: Accessing Theme Object in React Components
DESCRIPTION: Shows how to use the useTheme2 hook to access the theme object directly within a React component, allowing usage of theme variables.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/themes.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
import { FC } from 'react';
import { useTheme2 } from '@grafana/ui';

const Foo: FC<FooProps> = () => {
  const theme = useTheme2();

  // Your component has access to the theme variables now
};
```

----------------------------------------

TITLE: Registering Example APIService with Grafana Aggregator using kubectl (Shell)
DESCRIPTION: This sequence of shell commands first sets the `KUBECONFIG` environment variable to point to the kubeconfig file generated by the Grafana API server (`$PWD/data/grafana-apiserver/grafana.kubeconfig`). It then uses `kubectl apply` to create the necessary `APIService` and `ExternalName` resources defined in the YAML files within the example directory (`./pkg/services/apiserver/aggregator/examples/manual-test/`), effectively telling the aggregator about the example service. Finally, `kubectl get apiservice` checks the status, initially showing `False` for availability as the service isn't running yet.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/aggregator/README.md#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
export KUBECONFIG=$PWD/data/grafana-apiserver/grafana.kubeconfig
kubectl apply -f ./pkg/services/apiserver/aggregator/examples/manual-test/
# SAMPLE OUTPUT
# apiservice.apiregistration.k8s.io/v0alpha1.example.grafana.app created
# externalname.service.grafana.app/example-apiserver created

kubectl get apiservice
# SAMPLE OUTPUT
# NAME                           SERVICE                     AVAILABLE                      AGE
# v0alpha1.example.grafana.app   grafana/example-apiserver   False (FailedDiscoveryCheck)   29m
```

----------------------------------------

TITLE: Configuring Grafana for FreeIPA LDAP Authentication
DESCRIPTION: INI configuration snippet to enable LDAP authentication in Grafana's configuration file. This points Grafana to the ldap_freeipa.toml file for LDAP settings.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/freeipa/notes.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
[auth.ldap]
enabled = true
config_file = conf/ldap_freeipa.toml
; allow_sign_up = true
```

----------------------------------------

TITLE: Getting All Dashboard Versions by UID in Grafana HTTP API
DESCRIPTION: This HTTP request retrieves all existing dashboard versions for a dashboard with the specified UID. It supports limit and start parameters to control pagination of results.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/dashboards/uid/QA7wKklGz/versions?limit=2?start=0 HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Executing a Query on Prometheus Data Source
DESCRIPTION: This curl command sends a POST request to execute a query on a Prometheus data source. It uses basic authentication and reads the query data from a JSON file.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/aggregator/README.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
curl 'http://admin:admin@localhost:3000/apis/prometheus.grafana.app/v0alpha1/namespaces/default/connections/example/query' -X POST -d '@pkg/aggregator/examples/datasource-query.json'
```

----------------------------------------

TITLE: Requesting Organization by Name (Admin API) - HTTP
DESCRIPTION: This HTTP GET fetches organization details by name from the /api/orgs/name/:orgName endpoint as an admin. Basic authentication is required; organization name is percent-encoded in the URL.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_16

LANGUAGE: http
CODE:
```
GET /api/orgs/name/Main%20Org%2E HTTP/1.1\nAccept: application/json\nContent-Type: application/json
```

----------------------------------------

TITLE: Configuring Build and Product Labels in YAML
DESCRIPTION: YAML configuration for build settings and product labeling specifying build list status and applicable product categories (cloud, enterprise, open source).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-8-0-0-beta3.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
_build:
  list: false
labels:
  products:
    - cloud
    - enterprise
    - oss
title: Release notes for Grafana 8.0.0-beta3
```

----------------------------------------

TITLE: Including Shared Grafana Field Override Documentation (Hugo Shortcode)
DESCRIPTION: This Hugo shortcode dynamically includes content from the specified shared documentation file (`visualizations/overrides-options.md`). It ensures that the documentation for field overrides is sourced from a central location, using the 'grafana' source and specific to the version indicated by `<GRAFANA_VERSION>`. This mechanism promotes content reuse and consistency across documentation versions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/geomap/index.md#2025-04-23_snippet_7

LANGUAGE: hugo
CODE:
```
{{< docs/shared lookup=\"visualizations/overrides-options.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}
```

----------------------------------------

TITLE: SQLStore Service Structure Definition in Go
DESCRIPTION: Shows how to define a service structure with SQLStore dependency injection for database operations.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/database.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
type MyService struct {
    SQLStore *sqlstore.SQLStore `inject:""`
}
```

----------------------------------------

TITLE: Using SELECT Clause with Derivative Function in InfluxQL
DESCRIPTION: Example of an InfluxQL SELECT clause that uses the derivative function with mean aggregation, divided by 10 and aliased as 'REQ/s'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/query-editor/index.md#2025-04-23_snippet_0

LANGUAGE: SQL
CODE:
```
SELECT derivative(mean("value"), 10s) / 10 AS "REQ/s"
FROM....
```

----------------------------------------

TITLE: Enabling Starred Dashboards Navigation via Feature Flag (Configuration)
DESCRIPTION: This feature flag, `savedItems`, enables the opt-in feature allowing users to access their starred dashboards directly from the main navigation bar in Grafana 9.0. Set this flag to true in the Grafana configuration to activate the feature.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-0.md#2025-04-23_snippet_0

LANGUAGE: configuration
CODE:
```
savedItems
```

----------------------------------------

TITLE: Running Full API Regeneration with Make
DESCRIPTION: This command executes the primary build process using Make. It regenerates both the OpenAPI documentation and the Go server stubs based on the defined Go types and comments in the source code.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/ngalert/api/tooling/README.md#2025-04-23_snippet_0

LANGUAGE: make
CODE:
```
make
```

----------------------------------------

TITLE: Constructing Verification URL in Grafana Template (Go Template)
DESCRIPTION: This snippet constructs the complete URL for email verification. It combines the base application URL (`.AppUrl`), a user-specific code (`.Code`), and the confirmation code (`.ConfirmationCode`) as query parameters for the login page. These variables must be available during template rendering.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/passwordless_verify_new_user.txt#2025-04-23_snippet_3

LANGUAGE: go-template
CODE:
```
[[.AppUrl]]login/?code=[[.Code]]&confirmationCode=[[.ConfirmationCode]]
```

----------------------------------------

TITLE: Testing Grafana deb/rpm Repository Updates using Docker and Bash
DESCRIPTION: This sequence of Bash commands details the steps to test Grafana's deb and rpm repository update process within a Docker container. It involves starting the specified `grafana/grafana-ci-deploy` container, copying the Grafana build directory and a GPG private key into it, loading the signing key using a script, downloading example Grafana deb and rpm packages, and finally executing dedicated test scripts (`test-*-repo.sh`) to update and publish the local repositories. This process requires Docker, the Grafana CI deploy image, the Grafana project source code, a GPG private key, and its corresponding password.
SOURCE: https://github.com/grafana/grafana/blob/main/scripts/build/update_repo/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
docker run -ti --rm -u 0:0 grafana/grafana-ci-deploy:1.2.3 bash # 1.2.3 is the newest image at the time of writing
# in the container:
mkdir -p /dist

#outside of container:
cd <grafana project dir>/..
docker cp grafana <container_name>:/ 
docker cp <gpg.key used for signing> <container_name>:/private.key

#in container:
./scripts/build/update_repo/load-signing-key.sh
cd dist && wget https://dl.grafana.com/oss/release/grafana_5.4.3_amd64.deb && wget https://dl.grafana.com/oss/release/grafana-5.4.3-1.x86_64.rpm && cd ..

#run these scripts to update local deb and rpm repos and publish them:
./scripts/build/update_repo/test-update-deb-repo.sh <gpg key password>
./scripts/build/update_repo/test-publish-deb-repo.sh
./scripts/build/update_repo/test-update-rpm-repo.sh <gpg key password>
./scripts/build/update_repo/test-publish-rpm-repo.sh

```

----------------------------------------

TITLE: Defining Emotion Class Names in TypeScript
DESCRIPTION: Illustrates the correct way to define Emotion class names using camelCase in TypeScript.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
const getStyles = (theme: GrafanaTheme2) => ({
  // bad
  ElementWrapper: css`...`,
  // bad
  ['element-wrapper']: css`...`,

  // good
  elementWrapper: css({
    padding: theme.spacing(1, 2),
    background: theme.colors.background.secondary,
  }),
});
```

----------------------------------------

TITLE: Removing Grafana Repository File using Shell
DESCRIPTION: Removes the Grafana YUM/DNF repository configuration file located at `/etc/yum.repos.d/grafana.repo`. The `-i` flag prompts for confirmation before removal. Requires `sudo` privileges. This is an optional step during uninstallation to clean up repository configurations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_16

LANGUAGE: shell
CODE:
```
sudo rm -i /etc/yum.repos.d/grafana.repo
```

----------------------------------------

TITLE: Disabling LDAP Organization Role Synchronization (INI)
DESCRIPTION: This configuration snippet for Grafana's main INI file demonstrates how to disable the automatic synchronization of organization roles based on LDAP group mappings. Setting `skip_org_role_sync` to `true` allows administrators to manage Grafana organization roles manually, even when authentication is handled by LDAP. LDAP must still be enabled (`enabled = true`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
```ini
[auth.ldap]
# Set to `true` to enable LDAP integration (default: `false`)
enabled = true

# Path to the LDAP specific configuration file (default: `/etc/grafana/ldap.toml`)
config_file = /etc/grafana/ldap.toml

# Allow sign-up should be `true` (default) to allow Grafana to create users on successful LDAP authentication.
# If set to `false` only already existing Grafana users will be able to login.
allow_sign_up = true

# Prevent synchronizing ldap users organization roles
skip_org_role_sync = true
```
```

----------------------------------------

TITLE: Executing Log Simulator and Appending Output to Log File - Bash
DESCRIPTION: Runs the downloaded Python script to generate log entries and appends each output line to /var/log/web_requests.log using sudo permissions. Requires Python 3 to be installed, and appropriate permissions to write to the destination file. The command pipes output from the script into tee, which appends to the specified log file, ensuring Promtail can watch the file for ingestion by Loki. Input: No direct user-provided variables; Output: continuously updated log file for log monitoring.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-with-logs/index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
python3 ./web-server-logs-simulator.py | sudo tee -a /var/log/web_requests.log
```

----------------------------------------

TITLE: Testing Select Component Options in Grafana
DESCRIPTION: Test case for verifying that a Select component displays the correct options. It demonstrates how to interact with the Select component by clicking it and then checking for the presence of specific options in the dropdown.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/testing.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
it('should have an "Editor" option', async () => {
  const { user } = setup(
    <>
      <label htmlFor={'role-picker'}>Role picker</label>
      <OrgRolePicker value={OrgRole.Admin} inputId={'role-picker'} onChange={() => {}} />
    </>
  );
  await user.click(screen.getByRole('combobox', { name: 'Role picker' }));
  expect(screen.getByText('Editor')).toBeInTheDocument();
});
```

----------------------------------------

TITLE: Adapting to Changed Panel View URL Format for Repeated Panels
DESCRIPTION: Due to the Scenes library integration, the URL format for viewing individual repeated panels has changed. URLs previously using parameters like `&viewPanel=panel-5` are now invalid and will cause a 'Panel not found' error. The new format resembles `&viewPanel=panel-3-clone1`. To get the correct URL, reopen the panel in view mode.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v11-0.md#2025-04-23_snippet_2

LANGUAGE: text
CODE:
```
&viewPanel=panel-5
```

LANGUAGE: text
CODE:
```
&viewPanel=panel-3-clone1
```

----------------------------------------

TITLE: Defining PGP Signature Block
DESCRIPTION: Contains the PGP signature data used to verify the integrity and authenticity of the preceding signed message content (the JSON manifest). It includes metadata about the OpenPGP software version used for signing (OpenPGP.js v4.10.1) and the signature itself in Radix-64 encoding. This block concludes the PGP signed message.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/invalid-v2-missing-file/plugin/MANIFEST.txt#2025-04-23_snippet_2

LANGUAGE: pgp
CODE:
```
-----BEGIN PGP SIGNATURE-----
Version: OpenPGP.js v4.10.1
Comment: https://openpgpjs.org

wqIEARMKAAYFAl+2tJMACgkQfk0ManCIZueB0AIJAT/PWs226MaIu3eDZy4o
3UH/tIExyY4zR+VSBfTS+Gji5BcIRkIn7bhM1U40KDraDCvQOl3WetgqQkPd
wcSTJJocAgkBrsrxNz/Nl+vw/usre3Funj0hPVS/6NnJXwe6sVH+gAQfeddz
MzYTY/gcUVWp8Y7l/Hg44nry0PS3sr5LQ30w/FY=
=ev+T
-----END PGP SIGNATURE-----
```

----------------------------------------

TITLE: Wire Framework Error Using Unexported Identifier
DESCRIPTION: An error message from the Go Wire dependency injection framework. The error occurs when trying to inject a string value that references the unexported identifier 'privateMsg'. In Go, identifiers starting with lowercase letters are private to their package and cannot be accessed from outside.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/UnexportedValue/want/wire_errs.txt#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
example.com/foo/wire.go:x:y: inject injectedMessage: value string can't be used: uses unexported identifier privateMsg
```

----------------------------------------

TITLE: User Update Response Example (json)
DESCRIPTION: Offers the success response after a user update operation, as a simple JSON message string. Indicates that the user information was successfully modified, confirming the operation outcome for API clients.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_9

LANGUAGE: json
CODE:
```
{"message":"User updated"}
```

----------------------------------------

TITLE: Creating Directory for Grafana Logs on Mac OS
DESCRIPTION: This bash command creates a directory for Grafana logs in the /var/log folder with sudo permissions, which is necessary for containers that read from log files on Mac OS.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/README.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
sudo mkdir /var/log/grafana
```

----------------------------------------

TITLE: Importing Storybook and Tag Components in JavaScript
DESCRIPTION: This snippet imports necessary components and stories for the Tag documentation in Storybook. It includes Meta, Canvas, and ArgTypes from Storybook, as well as the Tag component and its stories.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tags/Tag.mdx#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { Meta, Canvas, ArgTypes } from '@storybook/blocks';
import { Tag } from './Tag';
import * as TagStories from './Tag.story';
```

----------------------------------------

TITLE: Example Output of Separated Firing and Resolved Alerts in Grafana Templates - template_output
DESCRIPTION: Sample output of the 'custom.firing_and_resolved_alerts' template. Shows resolved and firing alert sections, each listing summary, status, and description. Highlights structure and information provided in custom notifications.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_10

LANGUAGE: template_output
CODE:
```
1 resolved alert(s)

  Summary: The database server db1 has exceeded 75% of available disk space.
  Status: resolved
  Description: This alert fires when a database server is at risk of running out of disk space. You should take measures to increase the maximum available disk space as soon as possible to avoid possible corruption.

1 firing alert(s)

  Summary: The web server web1 has been responding to 5% of HTTP requests with 5xx errors for the last 5 minutes.
  Status: firing
  Description: This alert fires when a web server responds with more 5xx errors than is expected. This could be an issue with the web server or a backend service.
```

----------------------------------------

TITLE: Including Thresholds Documentation using Hugo Shortcode
DESCRIPTION: This Hugo shortcode dynamically includes shared documentation content related to threshold options. It references a specific markdown file (`visualizations/thresholds-options-2.md`) from the `grafana` source, ensuring consistency. The `<GRAFANA_VERSION>` placeholder indicates that the specific version of the documentation to include is determined dynamically.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/canvas/index.md#2025-04-23_snippet_4

LANGUAGE: hugo
CODE:
```
{{< docs/shared lookup="visualizations/thresholds-options-2.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Uploading a Migration Snapshot to Grafana API - Bash
DESCRIPTION: This curl command uploads a migration snapshot to the Grafana API by issuing a POST request to the /api/cloudmigration/migration/{sessionUid}/snapshot/{snapshotUid}/upload endpoint. The command sets the Content-Type header to application/json but does not require a data payload by default. Dependencies: Requires curl, valid sessionUid and snapshotUid, and Grafana admin credentials.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/cloudmigration/api/curl_commands.txt#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
curl -X POST -H \"Content-Type: application/json\" \\
   http://admin:admin@localhost:3000/api/cloudmigration/migration/{sessionUid}/snapshot/{snapshotUid}/upload
```

----------------------------------------

TITLE: Enabling Data Source Onboarding via 'datasourceOnboarding' Feature Toggle (Plaintext)
DESCRIPTION: This represents the 'datasourceOnboarding' feature toggle key used in Grafana configuration. Setting this toggle enables the preview of the new data source connection guidance page shown in Dashboards and Explore when no data source is configured in Grafana v9.4.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-4.md#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
datasourceOnboarding
```

----------------------------------------

TITLE: Embedding Video using Custom Hugo Shortcode (Catchpoint Plugin)
DESCRIPTION: This snippet uses a custom Hugo shortcode named `video-embed` to embed a video file. This specific instance showcases the functionality of the Catchpoint data source plugin for Grafana. The `src` parameter points to the video file path.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-2.md#2025-04-23_snippet_3

LANGUAGE: hugo
CODE:
```
{{< video-embed src="/media/docs/plugins/Catchpoint.mp4" >}}
```

----------------------------------------

TITLE: YAML Configuration for Grafana Release Notes
DESCRIPTION: YAML front matter configuration specifying build settings, product labels, and title for Grafana 7.5.9 release notes documentation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-9.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
_build:
  list: false
labels:
  products:
    - cloud
    - enterprise
    - oss
title: Release notes for Grafana 7.5.9
```

----------------------------------------

TITLE: Defining Update Service Account Response in Go
DESCRIPTION: This snippet demonstrates how to define the response structure for a successful updateServiceAccount operation. It includes fields for the message, ID, name, and service account details.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/api/README.md#2025-04-23_snippet_2

LANGUAGE: go
CODE:
```
// swagger:response updateServiceAccountResponse
type UpdateServiceAccountResponse struct {
	// in:body
	Body struct {
		Message        string                                    `json:"message"`
		ID             int64                                     `json:"id"`
		Name           string                                    `json:"name"`
		ServiceAccount *serviceaccounts.ServiceAccountProfileDTO `json:"serviceaccount"`
	}
}
```

----------------------------------------

TITLE: Deprecated Explore Query Field Methods in Grafana
DESCRIPTION: List of deprecated methods for setting Explore query fields in Grafana. These methods (setExploreQueryField, setExploreMetricsQueryField, setExploreLogsQueryField) will be removed in future releases. Developers should instead use conditional rendering based on props.app in their query editors.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-9-0-0.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
setExploreQueryField
setExploreMetricsQueryField
setExploreLogsQueryField
```

----------------------------------------

TITLE: Nesting Italic Text within Text Component in JSX
DESCRIPTION: Shows how to nest an italic Text component within another Text component for emphasis.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Text/Text.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<Text color="primary" element="p">
  And Forrest Gump said:
  <Text italic>Life is like a box of chocolates. You never know what you're gonna get.</Text>
</Text>
```

----------------------------------------

TITLE: Parsing Login Ping Response from Grafana HTTP API - JSON
DESCRIPTION: This JSON response represents a successful session renewal or validation from the /api/login/ping endpoint, indicating that the user is logged in. No parameters are needed for parsing, and the primary output is a message property confirming login status. The response is minimal and intended for session checks in web clients.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/other.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{\"message\": \"Logged in\"}\n
```

----------------------------------------

TITLE: Rendering InlineField with Input - React JSX
DESCRIPTION: This snippet demonstrates how to use the InlineField component to render an Input element with an inline label. The label is set with the 'label' prop, and the Input is provided as a child to InlineField with a sample placeholder. InlineField can be paired with various form elements and supports props to customize label width and add a tooltip. No external dependencies are needed beyond React and the components themselves. Input is expected to be imported or available in the project context.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/InlineField.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<InlineField label=\"Inline field\">\n  <Input placeholder=\"Inline input\" />\n</InlineField>\n
```

----------------------------------------

TITLE: Documenting Component Properties with Comments in TypeScript
DESCRIPTION: Shows how to add comments to component properties that will be displayed in the Props table.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/storybook.md#2025-04-23_snippet_5

LANGUAGE: tsx
CODE:
```
interface MyProps {
  /** Sets the initial values, which are overridden when the query returns a value*/
  defaultValues: Array<T>;
}
```

----------------------------------------

TITLE: API Key Authentication Test
DESCRIPTION: Executes test using admin API key authentication
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
$ ./run.sh -c auth_token_test -k "<api key here>"
```

----------------------------------------

TITLE: Embedding Image Figures in Hugo/Grafana Documentation Markdown
DESCRIPTION: This snippet demonstrates how to use the Hugo/Grafana documentation site's figure shortcode for embedding an image with sizing and caption controls. The 'src' parameter specifies the image file, 'max-width' controls display size, and 'caption' provides a descriptive caption for screen readers and context. Used for visually illustrating new features or UI changes within technical documentation. No external dependencies are required, but proper file paths and accessible captions are advised.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-2.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
{{< figure src="/media/docs/grafana/dashboards/WidgetVizSplit.png" max-width="750px" caption="DESCRIPTIVE CAPTION" >}}
```

----------------------------------------

TITLE: Including Legend Options Documentation using Hugo Shortcode
DESCRIPTION: This Hugo shortcode includes shared documentation content related to legend options from the specified file (`visualizations/legend-options-1.md`). It ensures consistency by reusing documentation across different versions or contexts, substituting the correct Grafana version. Dependencies include the Hugo static site generator and the referenced markdown file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/candlestick/index.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
{{< docs/shared lookup="visualizations/legend-options-1.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Example of Incorrect Placement of Example and Public Tag in TSDoc - TypeScript
DESCRIPTION: This snippet illustrates a discouraged documentation pattern where the @public tag is placed before the @example block within a class comment. This serves as a negative example, warning that such tag placement can reduce consistency and clarity. There are no functional dependencies, but the context is TypeScript code using TSDoc annotations.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/code-comments.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
/**
 * Helps to create DataFrame objects and handle
 * the heavy lifting of creating a complex object.
 *
 * @public
 * @example
 * ```typescript
 * const dataFrame = factory.create();
 * ```
 **/
export class DataFrameFactory {
  create(): DataFrame {}
}
```

----------------------------------------

TITLE: Cloning Tutorial Environment Repository with Git - Bash
DESCRIPTION: This snippet demonstrates how to clone the official Grafana tutorial environment repository using Git. It requires Git to be installed and configured on your system. The command will create a "tutorial-environment" directory containing all resources needed to set up the demo environment locally. Input: None; Output: Local copy of the repository created in the working directory.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt4/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/grafana/tutorial-environment.git
```

----------------------------------------

TITLE: Including Common Upgrade Tasks using Hugo Shortcode
DESCRIPTION: This Hugo shortcode incorporates the shared documentation section detailing common tasks involved in a Grafana upgrade process. It utilizes the `docs/shared` shortcode, referencing the `upgrade/upgrade-common-tasks.md` file from the `grafana` source, and includes a version placeholder (`<GRAFANA_VERSION>`).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v11.4/index.md#2025-04-23_snippet_2

LANGUAGE: hugo
CODE:
```
{{< docs/shared lookup="upgrade/upgrade-common-tasks.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Starting Grafana Server for Aggregation Testing (Shell)
DESCRIPTION: Executes the `make run` command in the Grafana project directory. This command compiles and starts the Grafana server, incorporating the settings defined in `custom.ini`, including the enabled aggregator feature and associated PKI configurations. This makes the main Grafana API server ready to aggregate other services.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/aggregator/README.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
make run
```

----------------------------------------

TITLE: Defining a Service Interface and Domain Types in Go (Alphabetical Service Example)
DESCRIPTION: Example of how to structure a service root package with interfaces, domain types, and query/command structures. This demonstrates the pattern where domain types and interfaces are defined in the root package to enable interaction with the service.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/package-hierarchy.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
package alphabetical

type Alphabetical interface {
  // GetLetter returns either an error or letter.
  GetLetter(context.Context, GetLetterQuery) (Letter, error)
  // ListCachedLetters cannot fail, and doesn't return an error.
  ListCachedLetters(context.Context, ListCachedLettersQuery) Letters
  // DeleteLetter doesn't have any return values other than errors, so it
  // returns only an error.
  DeleteLetter(context.Contxt, DeltaCommand) error
}

type Letter byte

type Letters []Letter

type GetLetterQuery struct {
  ID int
}

// Create queries/commands for methods even if they are empty.
type ListCachedLettersQuery struct {}

type DeleteLetterCommand struct {
  ID int
}
```

----------------------------------------

TITLE: Specifying Prometheus ExecStart Command in systemd (Linux/MacOS, Bash)
DESCRIPTION: This snippet represents the \"ExecStart\" directive inside a systemd unit file for Prometheus. It defines the command systemd executes to start the Prometheus server, with paths to the binary, configuration file, and data storage directory. Users must verify the correctness of all referenced paths. This line is edited within the service file and is not meant to be run directly as a shell command.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_18

LANGUAGE: bash
CODE:
```
ExecStart=/usr/local/bin/prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/var/lib/prometheus/
```

----------------------------------------

TITLE: Defining Grafana Fixed Role: fixed:datasources.permissions:writer
DESCRIPTION: Specifies the `fixed:datasources.permissions:writer` role (ID: `fixed_aiQh9YDfLOKjQhYasF9_SFUjQiw`) within Grafana. This role includes all permissions from `fixed:datasources.permissions:reader` and adds `datasources.permissions:write`, allowing users to create, read, or delete permissions of a data source.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_6

LANGUAGE: plaintext
CODE:
```
fixed:datasources.permissions:writer
```

LANGUAGE: plaintext
CODE:
```
fixed_aiQh9YDfLOKjQhYasF9_SFUjQiw
```

LANGUAGE: plaintext
CODE:
```
Permissions included:
- fixed:datasources.permissions:reader
- datasources.permissions:write
```

----------------------------------------

TITLE: Configuring JWT Authentication with JWK Set URL
DESCRIPTION: Alternative configuration for JWT authentication in Grafana using a JWK set URL instead of a local file.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/oauth/readme.md#2025-04-23_snippet_6

LANGUAGE: ini
CODE:
```
[auth.jwt]
enabled = true
header_name = X-JWT-Assertion
username_claim = login
email_claim = email
jwk_set_url = <YOUR REVERSE PROXY URL>/auth/realms/grafana/protocol/openid-connect/certs
cache_ttl = 60m
expect_claims = {"iss": "http://localhost:8087/auth/realms/grafana", "azp": "grafana-oauth"}
auto_sign_up = true
```

----------------------------------------

TITLE: Updated Greeter Initializer with Grumpy State in Go
DESCRIPTION: Modifies the NewGreeter function to randomly set a grumpy state based on the current time.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_10

LANGUAGE: go
CODE:
```
func NewGreeter(m Message) Greeter {
    var grumpy bool
    if time.Now().Unix()%2 == 0 {
        grumpy = true
    }
    return Greeter{Message: m, Grumpy: grumpy}
}
```

----------------------------------------

TITLE: Provisioning Alertmanager Data Source in Grafana Using YAML
DESCRIPTION: This YAML snippet illustrates how to provision an Alertmanager data source by editing Grafana's configuration files. It sets up a data source named 'Alertmanager' with parameters for implementation type, connection URL, user authentication, and options for Grafana-managed alerts. Dependencies include Grafana (with provisioning enabled) and knowledge of valid implementation values. Inputs involve the configuration options for the data source; outputs are the resulting Alertmanager data source created on Grafana startup. Ensure sensitive fields, like passwords, are securely managed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/alertmanager/_index.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: 1

datasources:
  - name: Alertmanager
    type: alertmanager
    url: http://localhost:9093
    access: proxy
    jsonData:
      # Valid options for implementation include mimir, cortex and prometheus
      implementation: prometheus
      # Whether or not Grafana should send alert instances to this Alertmanager
      handleGrafanaManagedAlerts: false
    # optionally
    basicAuth: true
    basicAuthUser: my_user
    secureJsonData:
      basicAuthPassword: test_password

```

----------------------------------------

TITLE: Embedding Admonition/Callout Blocks in Grafana Documentation with Hugo Shortcode
DESCRIPTION: This snippet highlights the use of the admonition shortcode to add callout or note blocks in Grafana/Hugo documentation files. The 'type' parameter controls the callout style (e.g., 'note'). Inside the block, additional formatting and guidance can be offered, including links and explanations about linking practices for documentation maintainability. This requires the documentation build system to support Hugo-style shortcode processing.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-2.md#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
{{% admonition type="note" %}}
Use full URLs for links. When linking to versioned docs, replace the version with the version interpolation placeholder (for example, <GRAFANA_VERSION>, <TEMPO_VERSION>, <MIMIR_VERSION>) so the system can determine the correct set of docs to point to. For example, "https://grafana.com/docs/grafana/latest/administration/" becomes "https://grafana.com/docs/grafana/<GRAFANA_VERSION>/administration/".
{{% /admonition %}}
```

----------------------------------------

TITLE: Importing Grafana Resources with Grizzly in Shell
DESCRIPTION: These shell commands first switch the Grizzly context to `grafana-cloud`. Then, they sequentially apply (push) the previously exported Grafana resources from the current directory (`.`) to the configured Grafana Cloud instance. Resources are applied in a specific order (Folders, Library Elements, Data Sources, Dashboards, Alerts) using targeted apply commands (`grr apply . -t 'ResourceType/*'`) to handle dependencies.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_7

LANGUAGE: shell
CODE:
```
grr config use-context grafana-cloud

grr apply . -t 'DashboardFolder/*'
grr apply . -t 'LibraryElement/*'
grr apply . -t 'Datasource/*'
grr apply . -t 'Dashboard/*'
grr apply . -t 'AlertRuleGroup/*'
grr apply . -t 'AlertContactPoint/*'
grr apply . -t 'AlertNotificationPolicy/*'
```

----------------------------------------

TITLE: Annotating Methods with Main and Partial Stability Using TSDoc - TypeScript
DESCRIPTION: This code demonstrates the recommended way to indicate both main and partial stability in a TypeScript class using TSDoc. The DataFrameFactory class is marked as @public, while the createMany method is specifically marked as @beta, highlighting that certain parts of the API may be less stable. This pattern relies on TypeScript and TSDoc, applying different release tags at class and method levels. Inputs and outputs revolve around DataFrame and DataFrames types, respectively.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/code-comments.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
/**
 * Helps to create DataFrame objects and handle
 * the heavy lifting of creating a complex object.
 *
 * @example
 * ```typescript
 * const dataFrame = factory.create();
 * ```
 *
 * @public
 **/
export class DataFrameFactory {
  create(): DataFrame {}

  /**
   * @beta
   **/
  createMany(): DataFrames[] {}
}
```

----------------------------------------

TITLE: Grafana Fixed Role Permissions Table
DESCRIPTION: Markdown table showing fixed role identifiers, their unique IDs, associated permissions, and descriptions. Covers permissions for managing library panels, licensing, migration, organization users, organizations, and plugins.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_15

LANGUAGE: markdown
CODE:
```
| `fixed:library.panels:general.reader`        | `fixed_ct0DghiBWR_2BiQm3EvNPDVmpio` | `library.panels:read`                                                                                                                                                                                                                                                       | Read all library panels at the root level.                                                                                                                                                                                                                                            |
| `fixed:library.panels:general.writer`        | `fixed_DgprkmqfN_1EhZ2v1_d1fYG8LzI` | All permissions from `fixed:library.panels:general.reader` plus<br>`library.panels:create`<br>`library.panels:delete`<br>`library.panels:write`                                                                                                                             | Create, read, write or delete all library panels and their permissions at the root level.                                                                                                                                                                             |
| `fixed:library.panels:reader`                | `fixed_tvTr9CnZ6La5vvUO_U_X1LPnhUs` | `library.panels:read`                                                                                                                                                                                                                                                       | Read all library panels.                                                                                                                                                                                                                                                              |
| `fixed:library.panels:writer`                | `fixed_JTljAr21LWLTXCkgfBC4H0lhBC8` | All permissions from `fixed:library.panels:reader` plus<br>`library.panels:create`<br>`library.panels:delete`<br>`library.panels:write`                                                                                                                                     | Create, read, write or delete all library panels and their permissions.                                                                                                                                                                                                               |
| `fixed:licensing:reader`                     | `fixed_OADpuXvNEylO2Kelu3GIuBXEAYE` | `licensing:read`<br>`licensing.reports:read`                                                                                                                                                                                                                                | Read licensing information and licensing reports.                                                                                                                                                                                                                                     |
| `fixed:licensing:writer`                     | `fixed_gzbz3rJpQMdaKHt-E4q0PVaKMoE` | All permissions from `fixed:licensing:viewer` and <br>`licensing:write`<br>`licensing:delete`                                                                                                                                                                               | Read licensing information and licensing reports, update and delete the license token.                                                                                                                                                                                                |
| `fixed:migrationassistant:migrator`          | `fixed_LLk2p7TRuBztOAksTQb1Klc8YTk` | `migrationassistant:migrate`                                                                                                                                                                                                                                                | Execute on-prem to cloud migrations through the Migration Assistant.                                                                                                                                                                                                                  |
| `fixed:org.users:reader`                     | `fixed_oCqNwlVHLOpw7-jAlwp4HzYqwGY` | `org.users:read`                                                                                                                                                                                                                                                            | Read users within a single organization.                                                                                                                                                                                                                                              |
| `fixed:org.users:writer`                     | `fixed_VERj5nayasjgf_Yh0sWqqCkxWlw` | All permissions from `fixed:org.users:reader` and <br>`org.users:add`<br>`org.users:remove`<br>`org.users:write`                                                                                                                                                            | Within a single organization, add a user, invite a new user, read information about a user and their role, remove a user from that organization, or change the role of a user.                                                                                                        |
| `fixed:organization:maintainer`              | `fixed_CMm-uuBaPUBf4r8XG3jIvxo55bg` | All permissions from `fixed:organization:reader` and <br> `orgs:write`<br>`orgs:create`<br>`orgs:delete`<br>`orgs.quotas:write`                                                                                                                                             | Create, read, write, or delete an organization. Read or write its quotas. This role needs to be assigned globally.                                                                                                                                                                    |
| `fixed:organization:reader`                  | `fixed_0SZPJlTHdNEe8zO91zv7Zwiwa2w` | `orgs:read`<br>`orgs.quotas:read`                                                                                                                                                                                                                                           | Read an organization and its quotas.                                                                                                                                                                                                                                                  |
| `fixed:organization:writer`                  | `fixed_Y4jGqDd8w1yCrPwlik8z5Iu8-3M` | All permissions from `fixed:organization:reader` and <br> `orgs:write`<br>`orgs.preferences:read`<br>`orgs.preferences:write`                                                                                                                                               | Read an organization, its quotas, or its preferences. Update organization properties, or its preferences.                                                                                                                                                                             |
| `fixed:plugins:maintainer`                   | `fixed_yEOKidBcWgbm74x-nTa3lW5lOyY` | `plugins:install`                                                                                                                                                                                                                                                           | Install and uninstall plugins. Needs to be assigned globally.                                                                                                                                                                                                                         |
| `fixed:plugins:writer`                       | `fixed_MRYpGk7kpNNwt2VoVOXFiPnQziE` | `plugins:write`                                                                                                                                                                                                                                                             | Enable and disable plugins and edit plugins' settings.                                                                                                                                                                                                                                |
| `fixed:plugins.app:reader`                   | `fixed_AcZRiNYx7NueYkUqzw1o2OGGUAA` | `plugins.app:access`                                                                                                                                                                                                                                                        | Access application plugins (still enforcing the organization role).                                                                                                                                                                                                                   |
```

----------------------------------------

TITLE: Selecting Default Rendering Mode - JSON
DESCRIPTION: Sets the rendering mode to 'default' in the renderer's JSON configuration file, which causes a new browser to be used for each image rendering request. This mode can be memory-intensive with high concurrency.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "mode": "default"
  }
}
```

----------------------------------------

TITLE: Response Example for Retrieving Single Report Details - JSON
DESCRIPTION: This JSON code snippet presents an example of the response object returned from the /api/reports/:id endpoint. The object contains comprehensive information about the chosen report, including scheduling, options, associated dashboards, formats, and timestamps. A successful response uses HTTP status 200 and is served in JSON format.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{\n\t\"id\": 2,\n\t\"userId\": 1,\n\t\"orgId\": 1,\n\t\"name\": \"Report 2\",\n\t\"recipients\": \"example-report@grafana.com\",\n\t\"replyTo\": \"\",\n\t\"message\": \"Hi, \\nPlease find attached a PDF status report. If you have any questions, feel free to contact me!\\nBest,\",\n\t\"schedule\": {\n\t\t\"startDate\": \"2022-10-02T00:00:00+02:00\",\n\t\t\"endDate\": null,\n\t\t\"frequency\": \"once\",\n\t\t\"intervalFrequency\": \"\",\n\t\t\"intervalAmount\": 0,\n\t\t\"workdaysOnly\": false,\n\t\t\"dayOfMonth\": \"2\",\n\t\t\"timeZone\": \"Europe/Warsaw\"\n\t},\n\t\"options\": {\n\t\t\"orientation\": \"landscape\",\n\t\t\"layout\": \"grid\",\n\t},\n\t\"enableDashboardUrl\": true,\n\t\"state\": \"scheduled\",\n\t\"dashboards\": [\n\t\t{\n\t\t\t\"dashboard\": {\n\t\t\t\t\"id\": 463,\n\t\t\t\t\"uid\": \"7MeksYbmk\",\n\t\t\t\t\"name\": \"Alerting with TestData\"\n\t\t\t},\n\t\t\t\"timeRange\": {\n\t\t\t\t\"from\": \"\",\n\t\t\t\t\"to\": \"\"\n\t\t\t},\n\t\t\t\"reportVariables\": {\n\t\t\t\t\"namefilter\": \"TestData\"\n\t\t\t}\n\t\t}\n\t],\n\t\"formats\": [\n\t\t\"pdf\",\n\t\t\"csv\"\n\t],\n\t\"created\": \"2022-09-12T11:44:42+02:00\",\n\t\"updated\": \"2022-09-12T11:44:42+02:00\"\n}
```

----------------------------------------

TITLE: Example Configuration Data (Query B) for Config from Query Results Transformation
DESCRIPTION: This table represents the configuration data (Input[1], from Query B) used in the 'Config from query results' transformation example. The 'Value' field (100) from this query will be used to set the 'Max' configuration on Query A's 'Value' field.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_5

LANGUAGE: text
CODE:
```
| Time          | Value |
| ------------- | ----- |
| 1626178119127 | 100   |
| 1626178119129 | 100   |
```

----------------------------------------

TITLE: Example HTTP Request with Invalid Scope for Grafana Role Creation
DESCRIPTION: Demonstrates an HTTP POST request to the `/api/access-control/roles` endpoint attempting to create a role with an invalid permission scope (`serviceaccounts:serviceaccount6`) for the given action (`serviceaccounts.permissions:read`). This triggers a validation error, as the scope doesn't match expected patterns like `*`, `serviceaccounts:*` or `serviceaccounts:id:*`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_7

LANGUAGE: http
CODE:
```
POST /api/access-control/roles HTTP/1.1
Content-Type: application/json
{
	"Name": "Read Service Account with id 6",
	"Permissions": [
			{
			"action": "serviceaccounts.permissions:read",
			"scope": "serviceaccounts:serviceaccount6"
		}
	]
}
```

----------------------------------------

TITLE: Generating OpenAPI Spec Files - Bash
DESCRIPTION: Command to generate or update OpenAPI specification files by running the OpenAPI test file.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/tests/apis/openapi_snapshots/README.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
go test pkg/tests/apis/openapi_test.go
```

----------------------------------------

TITLE: Adding Basic Role Permission to Data Source in HTTP
DESCRIPTION: Sends a POST request to set permission for a basic role (Admin, Editor, or Viewer) for a data source. The 'permission' field can be set to 'Query', 'Edit', or 'Admin' to add permission, or an empty string to remove it.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/datasource_permissions.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
POST /api/access-control/datasources/my_datasource/builtInRoles/Admin
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "permission": "Edit",
}
```

----------------------------------------

TITLE: Go Interface Implementation Error Message
DESCRIPTION: This is a Go compiler error message that occurs when attempting to use a string type where an interface implementation is expected. The error indicates that 'string' doesn't implement the 'Fooer' interface from the 'example.com/foo' package.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/InterfaceBindingDoesntImplement/want/wire_errs.txt#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
example.com/foo/wire.go:x:y: string does not implement example.com/foo.Fooer
```

----------------------------------------

TITLE: Example JSON Payload for Team Sync
DESCRIPTION: Sample JSON payload from an OAuth2 provider containing a 'groups' array ('engineers', 'analysts'). When used with the corresponding `groups_attribute_path` configuration, Grafana Team Sync will attempt to map these group names to Grafana teams.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_11

LANGUAGE: json
CODE:
```
{
    ...
    "groups": [
        "engineers",
        "analysts",
    ],
    ...
}
```

----------------------------------------

TITLE: Launching OAuth Block in Grafana Development Environment
DESCRIPTION: Command to launch the OAuth block in Grafana's development environment using the 'make devenv' command.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/oauth/readme.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
make devenv sources="auth/oauth"
```

----------------------------------------

TITLE: Storybook Meta Configuration
DESCRIPTION: Storybook metadata configuration for ColorPicker component documentation
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ColorPicker/ColorPicker.mdx#2025-04-23_snippet_1

LANGUAGE: JSX
CODE:
```
<Meta title="Pickers and Editors/ColorPicker/ColorPicker" />
```

----------------------------------------

TITLE: Markdown Cell Types Documentation
DESCRIPTION: Markdown table documenting different cell types available in Grafana tables including Auto, Sparkline, Colored text, Gauge, and other display options.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/table/index.md#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
| Cell type                                 | Description                                                                                                                                                                                                                                                                                                                                   |
| ----------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Auto                                      | Automatically displays values with sensible defaults applied.                                                                                                                                                                                                                 |
| Sparkline                   | Shows values rendered as a sparkline.                                                                                                                                                                                                                                                                                                         |
| Colored text             | If thresholds are set, then the field text is displayed in the appropriate threshold color.                                                                                                                                                                                                                                                   |
| Colored background | If thresholds are set, then the field background is displayed in the appropriate threshold color.                                                                                                                                                                                                                             |
| Gauge                           | Cells can be displayed as a graphical gauge, with several different presentation types. You can set the Gauge display mode and the Value display options.                                                                                                                                            |
| Data links                                | If you've configured data links, when the cell type is **Auto**, the cell text becomes clickable. If you change the cell type to **Data links**, the cell text reflects the titles of the configured data links. To control the application of data link text more granularly, use a **Cell option > Cell type > Data links** field override. |
| JSON View                   | Shows values formatted as code.                                                                                                                                                                                                                                                                                               |
| Image                           | If the field value is an image URL or a base64 encoded image, the table displays the image.                                                                                                                                                                                                                                                   |
| Actions                       | The cell displays a button that triggers a basic, unauthenticated API call when clicked.                                                                                                                                                                                                                                                      |
```

----------------------------------------

TITLE: Defining RawMessage Structure in Go
DESCRIPTION: Defines the RawMessage type as an interface{}.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_43

LANGUAGE: go
CODE:
```
[interface{}](#interface)
```

----------------------------------------

TITLE: YAML Configuration for Release Notes
DESCRIPTION: Front matter YAML configuration specifying build settings, product labels, and release title for Grafana 7.5.0 documentation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-0.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
_build:
  list: false
labels:
  products:
    - cloud
    - enterprise
    - oss
title: Release notes for Grafana 7.5.0
```

----------------------------------------

TITLE: Configuring YAML Front Matter for Grafana Release Notes
DESCRIPTION: YAML front matter configuration for the Grafana 8.2.2 release notes page. Specifies build settings, product labels, and page title.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-8-2-2.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
_build:
  list: false
labels:
  products:
    - cloud
    - enterprise
    - oss
title: Release notes for Grafana 8.2.2
```

----------------------------------------

TITLE: Executing Templates with Specific Data Context in Go Templates
DESCRIPTION: Demonstrates passing a specific part of the data context (e.g., `.Alerts`) when executing a defined template (`"print_alerts"`). The executed template will receive `.Alerts` as its dot (`.`) context.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_8

LANGUAGE: go
CODE:
```
{{ template "print_alerts" .Alerts }}
```

----------------------------------------

TITLE: Response for Admin Settings Update
DESCRIPTION: Example response after successfully updating Grafana admin settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 32

{
  "message":"Settings updated"
}
```

----------------------------------------

TITLE: Sending Reports via HTTP POST Request
DESCRIPTION: Example of sending a report by ID with options to use emails from the report configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_8

LANGUAGE: http
CODE:
```
POST /api/reports/email HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "id":"3",
  "useEmailsFromReport": true
}
```

----------------------------------------

TITLE: Showing Intermediate Result of 'Labels to Fields' Merging (Series 2)
DESCRIPTION: This Markdown table shows the intermediate state after the first part of the 'Labels to fields' transformation acts on a second series (Series 2) with the label Datacenter=EU, prior to the final merge step.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_36

LANGUAGE: markdown
CODE:
```
| Time                | Datacenter | Value |
| ------------------- | ---------- | ----- |
| 2020-07-07 11:34:20 | EU         | 20    |
```

----------------------------------------

TITLE: Including Shared Panel Options Documentation (Hugo Shortcode)
DESCRIPTION: Uses a Hugo shortcode (`docs/shared`) to include a reusable documentation block detailing standard panel options available across different Grafana visualizations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_6

LANGUAGE: markdown
CODE:
```
{{< docs/shared lookup="visualizations/panel-options.md" source="grafana" version="<GRAFANA_VERSION>" >}}
```

----------------------------------------

TITLE: Configuring Grafana LDAP Authentication
DESCRIPTION: INI configuration block for enabling LDAP authentication in Grafana and specifying the LDAP configuration file path
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/openldap-multiple/README.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[auth.ldap]
enabled = true
config_file = ./devenv/docker/blocks/auth/openldap-multiple/ldap_dev.toml
```

----------------------------------------

TITLE: Including Shared Common Upgrade Tasks - Hugo Shortcode - Plaintext
DESCRIPTION: This snippet injects shared documentation for common upgrade tasks into the page using a Hugo shortcode. By specifying the relevant markdown file and context parameters, it ensures all essential upgrade steps are communicated to users. It supports documentation maintainability by referencing centrally managed content.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v8.4/index.md#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
{{< docs/shared lookup=\"upgrade/upgrade-common-tasks.md\" source=\"grafana\" version=\"<GRAFANA VERSION>\" >}}
```

----------------------------------------

TITLE: Wire Dependency Injection Error in Go
DESCRIPTION: An error message from the Wire dependency injection framework indicating that a value of type 'int' cannot be used in 'injectBar' because the variable 'f' is not declared in package scope. This typically occurs when trying to inject a local variable or undeclared identifier.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/ValueFromFunctionScope/want/wire_errs.txt#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
example.com/foo/wire.go:x:y: inject injectBar: value int can't be used: f is not declared in package scope
```

----------------------------------------

TITLE: Creating Docker Secret for AWS Access Key ID (Bash)
DESCRIPTION: Creates a Docker secret named `aws_access_key_id` containing the specified AWS Access Key ID ('aws01us02'). The secret value is piped to the `docker secret create` command. Requires Docker secrets capability (e.g., Swarm mode).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
echo "aws01us02" | docker secret create aws_access_key_id -
```

----------------------------------------

TITLE: Configuring Grafana User Settings for Team-Based Access Control
DESCRIPTION: This configuration snippet shows how to set up Grafana to automatically assign new users to an organization with no basic role, forcing permissions to be granted through team membership instead of default assignments.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_10

LANGUAGE: ini
CODE:
```
[users]
# Set to true to automatically assign new users to the default organization (id 1)
auto_assign_org = true

# Set this value to automatically add new users to the provided organization (if auto_assign_org above is set to true)
auto_assign_org_id = <org_id>

# Default role new users will be automatically assigned (if auto_assign_org above is set to true)
auto_assign_org_role = None
```

----------------------------------------

TITLE: Restricting Azure AD OAuth to Specific Tenant IDs (INI)
DESCRIPTION: This configuration restricts Azure AD authentication to users from specific tenant IDs by setting allowed_organizations in Grafana's OAuth configuration. The tenant ID(s) must be obtained from the Azure Portal under Entra ID Overview. Multiple tenants can be separated by commas or spaces, enhancing access control granularity.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_5

LANGUAGE: ini
CODE:
```
allowed_organizations = 8bab1c86-8fba-33e5-2089-1d1c80ec267d
```

----------------------------------------

TITLE: Discouraged Use of Param Tag for Obvious Parameters - TypeScript
DESCRIPTION: This snippet highlights a discouraged pattern where the @param tags redundantly describe simple, self-explanatory parameters in a function that compares two numbers for equality. It illustrates the guidance that such documentation is unnecessary for straightforward code where types and names are already clear. The code functions in TypeScript and depends only on basic number parameters.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/code-comments.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
/**
 * Compares two numbers to see if they are equal to each other.
 *
 * @param x - The first number
 * @param y - The second number
 * @public
 **/
export const isEqual = (x: number, y: number): boolean => {
  return x === y;
};
```

----------------------------------------

TITLE: Configuring Feature Toggles in Grafana (INI Configuration File) - ini
DESCRIPTION: This INI configuration code enables the experimental Git Sync feature by activating specific feature toggles in the Grafana configuration file (`grafana.ini` or `custom.ini`). Required dependencies include access to the file system for editing the appropriate config files, and familiarity with restarting the Grafana server after changes. The snippet sets both 'provisioning' and 'kubernetesDashboards' toggles to 'true', and optionally enables 'grafanaAPIServerEnsureKubectlAccess' for easier development. The expected inputs are boolean values; upon saving and restarting Grafana, these options activate experimental features necessary for Git Sync. Constraints: Editing INI files requires administrator privileges on the host.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/observability-as-code/provision-resources/git-sync-setup.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[feature_toggles]
provisioning = true
kubernetesDashboards = true ; use k8s from browser

# If you want easy kubectl setup development mode
grafanaAPIServerEnsureKubectlAccess = true

```

----------------------------------------

TITLE: Testing Mouse Selection in Combobox
DESCRIPTION: Test code demonstrating how to test mouse-based option selection in the Combobox component using React Testing Library.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Combobox/Combobox.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
render(<Combobox options={options} onChange={onChangeHandler} value={null} />);

const input = screen.getByRole('combobox');
await userEvent.click(input);

const item = await screen.findByRole('option', { name: 'Option 1' });
await userEvent.click(item);
expect(screen.getByDisplayValue('Option 1')).toBeInTheDocument();
```

----------------------------------------

TITLE: Implementing Standalone Content Template in Markdown
DESCRIPTION: Shortcode syntax for including standalone shared content from external files. Uses the docs/shared lookup pattern to reference content from a specific Grafana version.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/example.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
{{< docs/shared lookup="example.md" source="grafana" version="<GRAFANA VERSION>" >}}
```

----------------------------------------

TITLE: Documenting Fixed Access Control Roles - Markdown Table - Markdown
DESCRIPTION: Defines fixed roles for Grafana using a Markdown table, listing their role keys, permission IDs, allowed actions, and descriptions. This construct requires a Markdown parser or viewer for proper rendering. Inputs are not taken directly; the table is maintained manually or via code-generation. Outputs are an organized display of role reference, aiding both implementation and audit. Limitations include lack of programmatic enforcement or validation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_16

LANGUAGE: Markdown
CODE:
```
| `fixed:provisioning:writer`                  | `fixed_bgk1FCyR6OEDwhgirZlQgu5LlCA` | `provisioning:reload`                                                                                                                                                                                                                                                       | Reload provisioning.                                                                                                                                                                                                                                                                  |
| `fixed:reports:reader`                       | `fixed_72_8LU_0ukfm6BdblOw8Z9q-GQ8` | `reports:read`<br>`reports:send`<br>`reports.settings:read`                                                                                                                                                                                                                 | Read all reports and shared report settings.                                                                                                                                                                                                                                          |
| `fixed:reports:writer`                       | `fixed_jBW3_7g1EWOjGVBYeVRwtFxhUNw` | All permissions from `fixed:reports:reader` and <br>`reports:create`<br>`reports:write`<br>`reports:delete`<br>`reports.settings:write`                                                                                                                                     | Create, read, update, or delete all reports and shared report settings.                                                                                                                                                                                                               |
| `fixed:roles:reader`                         | `fixed_GkfG-1NSwEGb4hpK3-E3qHyNltc` | `roles:read`<br>`teams.roles:read`<br>`users.roles:read`<br>`users.permissions:read`                                                                                                                                                                                        | Read all access control roles, roles and permissions assigned to users, teams.                                                                                                                                                                                                        |
| `fixed:roles:resetter`                       | `fixed_WgPpC3qJRmVpVTJavFNwfS5RuzQ` | `roles:write` with scope `permissions:type:escalate`                                                                                                                                                                                                                        | Reset basic roles to their default.                                                                                                                                                                                                                                                   |
| `fixed:roles:writer`                         | `fixed_W5aFaw8isAM27x_eWfElBhZ0iOc` | All permissions from `fixed:roles:reader` and <br>`roles:write`<br>`roles:delete`<br>`teams.roles:add`<br>`teams.roles:remove`<br>`users.roles:add`<br>`users.roles:remove`                                                                                                 | Create, read, update, or delete all roles, assign or unassign roles to users, teams.                                                                                                                                                                                                  |
| `fixed:serviceaccounts:creator`              | `fixed_Ikw60fckA0MyiiZ73BawSfOULy4` | `serviceaccounts:create`                                                                                                                                                                                                                                                    | Create Grafana service accounts.                                                                                                                                                                                                                                                      |
| `fixed:serviceaccounts:reader`               | `fixed_QFjJAZ88iawMLInYOxPA1DB1w6I` | `serviceaccounts:read`                                                                                                                                                                                                                                                      | Read Grafana service accounts.                                                                                                                                                                                                                                                        |
| `fixed:serviceaccounts:writer`               | `fixed_iBvUNUEZBZ7PUW0vdkN5iojc2sk` | `serviceaccounts:read`<br>`serviceaccounts:create`<br>`serviceaccounts:write`<br>`serviceaccounts:delete`<br>`serviceaccounts.permissions:read`<br>`serviceaccounts.permissions:write`                                                                                      | Create, update, read and delete all Grafana service accounts and manage service account permissions.                                                                                                                                                                                  |
| `fixed:settings:reader`                      | `fixed_0LaUt1x6PP8hsZzEBhqPQZFUd8Q` | `settings:read`                                                                                                                                                                                                                                                             | Read Grafana instance settings.                                                                                                                                                                                                                                                       |
| `fixed:settings:writer`                      | `fixed_joIHDgMrGg790hMhUufVzcU4j44` | All permissions from `fixed:settings:reader` and<br>`settings:write`                                                                                                                                                                                                        | Read and update Grafana instance settings.                                                                                                                                                                                                                                            |
| `fixed:stats:reader`                         | `fixed_OnRCXxZVINWpcKvTF5A1gecJ7pA` | `server.stats:read`                                                                                                                                                                                                                                                         | Read Grafana instance statistics.                                                                                                                                                                                                                                                     |
| `fixed:teams:creator`                        | `fixed_nzVQoNSDSn0fg1MDgO6XnZX2RZI` | `teams:create`<br>`org.users:read`                                                                                                                                                                                                                                          | Create a team and list organization users (required to manage the created team).                                                                                                                                                                                                      |
| `fixed:teams:read`                           | `fixed_Z8pB0GQlrqRt8IZBCJQxPWvJPgQ` | `teams:read`                                                                                                                                                                                                                                                                | List all teams.                                                                                                                                                                                                                                                                       |
| `fixed:teams:writer`                         | `fixed_xw1T0579h620MOYi4L96GUs7fZY` | `teams:create`<br>`teams:delete`<br>`teams:read`<br>`teams:write`<br>`teams.permissions:read`<br>`teams.permissions:write`                                                                                                                                                  | Create, read, update and delete teams and manage team memberships.                                                                                                                                                                                                                    |
```

----------------------------------------

TITLE: Connecting Grafana Authorization Client to Remote GRPC Server via INI
DESCRIPTION: This configuration connects the authorization client to a remote GRPC server using the [authorization] INI section. The remote_address parameter specifies the server endpoint, mode is set to "grpc", and the local server does not listen (listen=false). This setup enables distributed architectures and requires network connectivity to the remote authorization server.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/README.md#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
[authorization]
remote_address = "server.example.org:10000"
listen = false
mode = "grpc"

```

----------------------------------------

TITLE: Listing Required Image Rendering Dependencies on Debian 10 (Bash)
DESCRIPTION: Provides a list of package names required for the Grafana image rendering plugin on a Debian 10 (Buster) system. Installing these packages ensures Chromium has access to its necessary shared libraries.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
libxdamage1 libxext6 libxi6 libxtst6 libnss3 libcups2 libxss1 libxrandr2 libasound2 libatk1.0-0 libatk-bridge2.0-0 libpangocairo-1.0-0 libpango-1.0-0 libcairo2 libatspi2.0-0 libgtk3.0-cil libgdk3.0-cil libx11-xcb-dev libgbm1 libxshmfence1
```

----------------------------------------

TITLE: Generated Wire Injector in Go
DESCRIPTION: Illustrates the generated implementation of an injector function by Wire.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_5

LANGUAGE: go
CODE:
```
// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
    "example.com/foobarbaz"
)

func initializeBaz(ctx context.Context) (foobarbaz.Baz, error) {
    foo := foobarbaz.ProvideFoo()
    bar := foobarbaz.ProvideBar(foo)
    baz, err := foobarbaz.ProvideBaz(ctx, bar)
    if err != nil {
        return foobarbaz.Baz{}, err
    }
    return baz, nil
}
```

----------------------------------------

TITLE: Importing and Using UserIcon Component in React
DESCRIPTION: This snippet demonstrates how to import and use the UserIcon component with basic props. It shows setting up a userView object and passing it to the component along with other props.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/UsersIndicator/UserIcon.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { UserIcon } from '@grafana/ui';

const ExampleComponent = () => {
  const userView = {
    user: { id: 1, name: 'John Smith', avatarUrl: 'https://example.com/avatar.png' },
    lastActiveAt: '2023-04-18T15:00:00.000Z',
  };

  return (
    <div>
      <UserIcon userView={userView} showTooltip={true} className={styles.custom} />
    </div>
  );
};
```

----------------------------------------

TITLE: Mapping Roles Based on GitHub Username
DESCRIPTION: JMESPath expression that assigns Admin role to a specific GitHub user (octocat) and Viewer role to all other users. Used in the role_attribute_path configuration setting.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
role_attribute_path = [login=='octocat'][0] && 'Admin' || 'Viewer'
```

----------------------------------------

TITLE: Configuring Grafana for WebDAV External Image Storage
DESCRIPTION: This INI configuration snippet shows how to set up Grafana to use WebDAV as the external image storage provider. It specifies the WebDAV URL, public URL format, and dummy authentication credentials for testing purposes.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/webdav/README.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[external_image_storage]
provider = webdav

[external_image_storage.webdav]
url = http://127.0.0.1:5000/images
public_url = http://127.0.0.1:5000/images/{{file}}

; as auth is not configured in Dufs, these are just dummy values
username = test
password = test
```

----------------------------------------

TITLE: Rendering Tooltip Prop Table using ArgTypes (JSX)
DESCRIPTION: Uses the imported `ArgTypes` component from Storybook to render an interactive table detailing the props (arguments) accepted by the `Tooltip` component. The `of` prop is crucial, linking `ArgTypes` to the specific `Tooltip` component.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tooltip/Tooltip.mdx#2025-04-23_snippet_3

LANGUAGE: jsx
CODE:
```
<ArgTypes of={Tooltip} />
```

----------------------------------------

TITLE: Examples of Multi-Select Operators for Ad Hoc Filters in Grafana
DESCRIPTION: Displays the operators used for multi-value selection within Grafana's ad hoc filtering feature. '=~' represents 'One of' (matches any of the specified values for a label), and '!=~' represents 'Not one of' (matches if the label's value is not among the specified values). The availability of these operators depends on the specific data source being used for the filter.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/use-dashboards/index.md#2025-04-23_snippet_3

LANGUAGE: plaintext
CODE:
```
=| (One of)
```

LANGUAGE: plaintext
CODE:
```
!=| (Not one of)
```

----------------------------------------

TITLE: kubectl Output Example - No Playlist Resources Found - Shell
DESCRIPTION: This shell output message indicates that no Playlist resources were discovered in the specified Kubernetes namespace when queried via kubectl. There are no input parameters and this is only seen when the resource list is empty.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_6

LANGUAGE: sh
CODE:
```
No resources found in default namespace.
```

----------------------------------------

TITLE: Displaying a Primary Button with React in Storybook (TSX)
DESCRIPTION: This snippet demonstrates how to render Primary variant Buttons of different sizes (small, medium, large) using the Button component within an ExampleFrame in a Storybook MDX file. The snippet requires the Button and ExampleFrame components, with props for variant, size, and styling passed to the Button. Outputs are interactive buttons with specified variants and sizes, suitable for design system documentation or visual regression testing.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Button/Button.mdx#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<ExampleFrame>\n  <Button variant=\"primary\" size=\"sm\" style={{ margin: '5px' }}>\n    {'Small'}\n  </Button>\n  <Button variant=\"primary\" size=\"md\" style={{ margin: '5px' }}>\n    {'Medium'}\n  </Button>\n  <Button variant=\"primary\" size=\"lg\" style={{ margin: '5px' }}>\n    {'Large'}\n  </Button>\n</ExampleFrame>
```

----------------------------------------

TITLE: Defining Constant Value 42
DESCRIPTION: A single number constant with the value of 42. This could be used as a configuration value, magic number, or cultural reference in the codebase.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/ValueIsStruct/want/program_out.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
42
```

----------------------------------------

TITLE: Typing Connected Redux Props in React Components with TypeScript
DESCRIPTION: Shows how to use ConnectedProps from React Redux to automatically infer the type of props injected by connect. This pattern separates the connect call into two parts for proper type inference when using mapStateToProps and mapDispatchToProps.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/redux.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { connect, ConnectedProps } from 'react-redux';

const mapStateToProps = (state: StoreState) => {
  return {
    location: state.location,
    initDone: state.panelEditor.initDone,
    uiState: state.panelEditor.ui,
  };
};

const mapDispatchToProps = {
  updateLocation,
  initPanelEditor,
  panelEditorCleanUp,
  setDiscardChanges,
  updatePanelEditorUIState,
  updateTimeZoneForSession,
};

const connector = connect(mapStateToProps, mapDispatchToProps);

type Props = OwnProps & ConnectedProps<typeof connector>;

class PanelEditorUnconnected extends PureComponent<Props> {}

export const PanelEditor = connector(PanelEditorUnconnected);
```

----------------------------------------

TITLE: Deleting API Key Response Example using HTTP/JSON
DESCRIPTION: Example HTTP 200 OK response after successfully deleting an API key via the deprecated `DELETE /api/auth/keys/:id` endpoint. The response body contains a simple JSON message confirming the deletion.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/auth.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{"message":"API key deleted"}
```

----------------------------------------

TITLE: YAML Configuration for Grafana Release Notes
DESCRIPTION: YAML frontmatter configuration for Grafana 7.5.11 release notes documentation, specifying build settings and product labels.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-11.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
_build:
  list: false
labels:
  products:
    - cloud
    - enterprise
    - oss
title: Release notes for Grafana 7.5.11
```

----------------------------------------

TITLE: Configuring Traefik for Grafana on a Sub Path (Docker Provider) - YAML
DESCRIPTION: Shows Docker label configuration for Traefik to route requests with a specific path prefix (/grafana) along with host-based matching. Designed for containers deployed with Docker or Docker Compose, attach these labels to the Grafana service. Requires Traefik to be up and running in Docker mode. Supports sub path routing for multi-tenant or multi-app scenarios.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_10

LANGUAGE: yaml
CODE:
```
labels:\n  traefik.http.routers.grafana.rule: Host(`example.com`) && PathPrefix(`/grafana`)\n  traefik.http.services.grafana.loadbalancer.server.port: 3000
```

----------------------------------------

TITLE: Defining Global User Scopes in Grafana RBAC
DESCRIPTION: Specifies scopes to restrict actions to a set of global users (across all organizations). `global.users:*` matches any user, while `global.users:id:1` targets the specific user with ID 1.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_32

LANGUAGE: text
CODE:
```
global.users:*
```

LANGUAGE: text
CODE:
```
global.users:id:*
```

----------------------------------------

TITLE: Configuring Server Domain and Root URL in Grafana (INI, Bash Syntax)
DESCRIPTION: Configures the Grafana server for operation behind an IIS reverse proxy under a custom subpath. Requires a "custom.ini" file in Grafana's conf directory. The [server] section sets the public domain (including subpath if relevant) and root_url to ensure Grafana generates correct links/resources under reverse proxy. Inputs: domain and root_url values. Outputs: Correct subpath operation for Grafana. Dependencies: None beyond standard Grafana installation. Restart Grafana after making these changes.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/iis/index.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
[server]
domain = yourdomain.com:8080
root_url = %(protocol)s://%(domain)s/grafana/

```

----------------------------------------

TITLE: Obtaining JWT Token for OAuth Admin
DESCRIPTION: Curl command to obtain a JWT token for the OAuth admin user from Keycloak's token endpoint.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/oauth/readme.md#2025-04-23_snippet_3

LANGUAGE: sh
CODE:
```
curl --request POST \
  --url http://localhost:8087/realms/grafana/protocol/openid-connect/token \
  --header 'Content-Type: application/x-www-form-urlencoded' \
  --data client_id=grafana-oauth \
  --data grant_type=password \
  --data client_secret=d17b9ea9-bcb1-43d2-b132-d339e55872a8 \
  --data scope=openid \
  --data username=oauth-admin \
  --data password=grafana
```

----------------------------------------

TITLE: PGP Signed Message Structure for Grafana Plugin Manifest
DESCRIPTION: This snippet shows the complete structure of a PGP signed message containing a Grafana plugin manifest. It starts with '-----BEGIN PGP SIGNED MESSAGE-----', includes the manifest JSON payload, and ends with the PGP signature block ('-----BEGIN PGP SIGNATURE-----' to '-----END PGP SIGNATURE-----'). The headers specify the hash algorithm used (SHA512) and the signature itself verifies the integrity and origin of the enclosed JSON manifest.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/app-with-child/dist/MANIFEST.txt#2025-04-23_snippet_1

LANGUAGE: text
CODE:
```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "rootUrls": [],
  "plugin": "myorgid-simple-app",
  "version": "%VERSION%",
  "time": 1642614241713,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "1abecfd0229814f6c284ff3c8dd744548f8d676ab3250cd7902c99dabf11480e",
    "child/plugin.json": "66ba0dffaf3b1bfa17eb9a8672918fc66d1001f465b1061f4fc19c2f2c100f51"
  }
}
-----BEGIN PGP SIGNATURE-----
Version: OpenPGP.js v4.10.1
Comment: https://openpgpjs.org

wqEEARMKAAYFAmHoTeEACgkQfk0ManCIZudvLwIJAQcy8NwEZZb58SuD9fhS
kaWb9mxvhdAL6Zau+AZKQ3w2ZKzynwgKK/xwDSnX8BNI5UjcCh+0WxkpiAHL
bm6/dhzdAgi7Mo/W5IyXqMt9/0AyyFNA1wVlLCj47C+4op4hIw054ZJ9u2j9
KCVjajZ9bGaV6ucBnG5/l4MLFhUK1M0slI2qvw==
=atro
-----END PGP SIGNATURE-----
```

----------------------------------------

TITLE: Showing Final Merged Result of 'Labels to Fields'
DESCRIPTION: This Markdown table displays the final output after the merge step in the 'Labels to fields' transformation when applied to two series with non-overlapping labels (except Time). The transformation joins the intermediate tables on matching fields (Time).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_37

LANGUAGE: markdown
CODE:
```
| Time                | Server  | Value | Datacenter |
| ------------------- | ------- | ----- | ---------- |
| 2020-07-07 11:34:20 | ServerA | 10    |            |
| 2020-07-07 11:34:20 |         | 20    | EU         |
```

----------------------------------------

TITLE: User Search Response Example (json)
DESCRIPTION: Shows a typical JSON array response from the user search API. Each object contains user information such as id, name, login, email, admin status, account status, recent activity, and authentication labels. This response format is expected from GET requests to /api/users or search endpoints.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
[\n  {\n    "id": 1,\n    "name": "Admin",\n    "login": "admin",\n    "email": "admin@mygraf.com",\n    "isAdmin": true,\n    "isDisabled": false,\n    "lastSeenAt": "2020-04-10T20:29:27+03:00",\n    "lastSeenAtAge": "2m",\n    "authLabels": ["OAuth"]\n  },\n  {\n    "id": 2,\n    "name": "User",\n    "login": "user",\n    "email": "user@mygraf.com",\n    "isAdmin": false,\n    "isDisabled": false,\n    "lastSeenAt": "2020-01-24T12:38:47+02:00",\n    "lastSeenAtAge": "2M",\n    "authLabels": []\n  }\n]
```

----------------------------------------

TITLE: Configuring Build and Product Labels in YAML
DESCRIPTION: YAML configuration block specifying build settings and product labels for Grafana release documentation. Defines build list parameter and product categories including cloud, enterprise, and open source versions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-8-1-8.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
_build:
  list: false
labels:
  products:
    - cloud
    - enterprise
    - oss
title: Release notes for Grafana 8.1.8
```

----------------------------------------

TITLE: Listing Caddy TLS Certificates
DESCRIPTION: This command lists the contents of the /etc/caddy directory in the Caddy TLS container, showing available certificates.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/caddy_tls/README.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
docker exec devenv-caddy_tls-1 ls /etc/caddy/
```

----------------------------------------

TITLE: Listing Detailed Organization Users - JSON
DESCRIPTION: This JSON snippet is the 200 OK response from querying organization users, returning an array of user objects with details such as orgId, userId, email, avatarUrl, login, role, and timestamps. Used for administrative overviews and audits.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
[\n  {\n    "orgId": 1,\n    "userId": 1,\n    "email": "admin@localhost",\n    "avatarUrl": "/avatar/46d229b033af06a191ff2267bca9ae56",\n    "login": "admin",\n    "role": "Admin",\n    "lastSeenAt": "2019-08-09T11:02:49+02:00",\n    "lastSeenAtAge": "< 1m"\n  }\n]
```

----------------------------------------

TITLE: Setting Viewport Height - JSON
DESCRIPTION: Assigns default viewport height for the rendering service using rendering.height, with value in pixels. Used only if the height parameter is missing from requests.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_42

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "height": 500
  }
}
```

----------------------------------------

TITLE: Configuring Redux Store Middleware
DESCRIPTION: Adding the generated API middleware to the Redux store configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/api/README.md#2025-04-23_snippet_7

LANGUAGE: jsx
CODE:
```
import { dashboardAPI } from '<pathToYourAPI>';
export function configureStore(initialState?: Partial<StoreState>) {
  const store = reduxConfigureStore({
    reducer: createRootReducer(),
    middleware: (getDefaultMiddleware) =>
      getDefaultMiddleware({ thunk: true, serializableCheck: false, immutableCheck: false }).concat(
        ...,
        dashboardAPI.middleware
      ),
    ...,
  });
```

----------------------------------------

TITLE: Starting Grafana Using Make
DESCRIPTION: This command starts Grafana using the make run command, which is typically used in development environments.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/aggregator/README.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
make run
```

----------------------------------------

TITLE: Implementing Deprecated SQLStore Handler in Go
DESCRIPTION: Example showing how to register and implement a deprecated sqlstore handler for deleting dashboards. Uses the bus system for handler registration and inTransactionCtx for database operations.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/database.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
func init() {
    bus.AddHandlerCtx("sql", DeleteDashboard)
}

func DeleteDashboard(ctx context.Context, cmd *models.DeleteDashboardCommand) error {
    return inTransactionCtx(ctx, func(sess *DBSession) error {
        _, err := sess.Exec("DELETE FROM dashboards WHERE dashboard_id=?", cmd.DashboardID)
        return err
    })
}
```

----------------------------------------

TITLE: kubectl Output Example - Playlist Created - Shell
DESCRIPTION: This shell output shows the acknowledgment message upon successful creation of a Playlist resource via kubectl. The message includes the generated resource identity.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_9

LANGUAGE: sh
CODE:
```
playlist.playlist.grafana.app/u394j4d3-s63j-2d74-g8hf-958773jtybf2 created
```

----------------------------------------

TITLE: Using the Legend Component in JSX
DESCRIPTION: This snippet demonstrates the basic usage of the `Legend` component in a JSX context. It shows importing `Forms` (though not directly used in the snippet itself, it implies the context of form elements) from `@grafana/ui` and rendering the `Legend` component with a variable `label` as its child. The component is intended to be used within a `FieldSet` to provide a caption.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Legend.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { Forms } from '@grafana/ui';

<Legend>{label}</Legend>;
```

----------------------------------------

TITLE: Implementing React Component Constructor
DESCRIPTION: Shows the proper way to implement a React component constructor with typed props.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
// bad
constructor(props) {...}

// good
constructor(props: Props) {...}
```

----------------------------------------

TITLE: Testing Redux Thunks with thunkTester in TypeScript
DESCRIPTION: Demonstrates how to test thunks using the thunkTester Fluent API. This example shows initializing the test with a thunk, dispatching it with arguments, and asserting on the resulting dispatched actions.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/redux.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
const dispatchedActions = await thunkTester(initialState).givenThunk(someThunk).whenThunkIsDispatched(arg1, arg2, arg3);

expect(dispatchedActions).toEqual([someAction('reducer tests')]);
```

----------------------------------------

TITLE: Apache Proxy Configuration for Grafana (Sub Path) - Bash
DESCRIPTION: This setup forwards requests both for a specific sub-path (e.g., /your_path) and the root. The order is significant: lines with sub paths must precede those for the root for correct proxying. This configuration is designed for <VirtualHost> in Apache, targeting scenarios where Grafana is hosted under a URL sub path.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
  ProxyPreserveHost on\n  ProxyPass /your_path http://your_grafana_server:3000\n  ProxyPassReverse /your_path http://your_grafana_server:3000\n  ProxyPass / http://your_grafana_server:3000/your_path\n  ProxyPassReverse / http://192.168.250.5:3000/your_path
```

----------------------------------------

TITLE: Checking Node.js Heap Size Limit (Bash/Node.js)
DESCRIPTION: Runs a short Node.js script via the command line (`node -e`) to retrieve and display the currently configured V8 JavaScript engine's heap size limit in megabytes (MB). This helps diagnose potential 'JavaScript heap out of memory' errors during tasks like `yarn start`. Requires Node.js to be installed.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_20

LANGUAGE: bash
CODE:
```
node -e 'console.log(v8.getHeapStatistics().heap_size_limit/(1024*1024))'
```

----------------------------------------

TITLE: Referencing Variables in Grafana Expressions
DESCRIPTION: Demonstrates how to reference data from other queries or expressions using their RefID. A dollar sign prefix is used for simple RefIDs, while curly braces are needed for RefIDs containing spaces.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_0

LANGUAGE: Grafana Expressions
CODE:
```
$A
```

LANGUAGE: Grafana Expressions
CODE:
```
${my variable}
```

----------------------------------------

TITLE: Using the Grafana Icon Component (React/JSX)
DESCRIPTION: This JSX snippet demonstrates the basic usage of the `Icon` component to render a specific icon ('check') by passing its name via the `name` prop. Although the snippet includes an import for `css` from `@emotion/css`, it's not directly used here but suggests that Emotion can be utilized for applying styles, such as setting the icon size via the `className` prop as mentioned in the accompanying text.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Icon/Icon.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { css } from '@emotion/css';

<Icon name="check" />;
```

----------------------------------------

TITLE: Sample Output: Team-Owned Dependencies List - Plaintext
DESCRIPTION: The snippet displays output from the Modowners 'modules' command when querying dependencies by owner. Each line contains a dependency referenced by name and version using the 'dependency@version' format. This information helps teams track their directly owned Go modules.
SOURCE: https://github.com/grafana/grafana/blob/main/scripts/modowners/README.md#2025-04-23_snippet_6

LANGUAGE: plaintext
CODE:
```
github.com/BurntSushi/toml@v1.2.1\ngithub.com/go-ldap/ldap/v3@v3.4.4\ngithub.com/magefile/mage@v1.14.0\ngolang.org/x/oauth2@v0.8.0\ngithub.com/drone/drone-cli@v1.6.1\ngithub.com/google/go-github/v45@v45.2.0\ngithub.com/Masterminds/semver/v3@v3.1.1\ngopkg.in/square/go-jose.v2@v2.6.0\nfilippo.io/age@v1.1.1\ngithub.com/docker/docker@v23.0.4+incompatible
```

----------------------------------------

TITLE: Initializing New Go Module
DESCRIPTION: Commands for initializing a new Go module within the Grafana project structure. This creates the module with the correct GitHub path.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/manage-go-module.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
cd pkg/your/new/module
go mod init github.com/grafana/grafana/pkg/your/new/module
```

----------------------------------------

TITLE: Removing Developer Dashboards and Data Sources in Grafana
DESCRIPTION: This bash command removes previously set up developer dashboards and data sources from Grafana by passing the 'undev' parameter to the setup script.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/README.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
./setup.sh undev
```

----------------------------------------

TITLE: Refactoring Query with Result Field in Go
DESCRIPTION: Example showing how to refactor a query with a Result field that gets mutated to a method that returns the result directly. This improves code clarity and follows modern Go conventions.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/communication.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
type GetQuery struct {
  Something int

  Result ResultType
}

func (s *Service) Get(ctx context.Context, cmd *GetQuery) error {
  // ...do something
  cmd.Result = result
  return nil
}
```

----------------------------------------

TITLE: Defining LogQL LBAC Rule with Regex Matcher (Task 3)
DESCRIPTION: Example LogQL query used as an LBAC rule for Team A in Task 3. This rule filters logs, granting access to data points matching `cluster=\"us-west-0\"` AND where the `namespace` label matches the regex `dev|prod` (i.e., namespace is either 'dev' or 'prod'). It demonstrates combining exact matchers with regex matchers.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_6

LANGUAGE: logql
CODE:
```
{cluster="us-west-0", namespace=~"dev|prod"}
```

----------------------------------------

TITLE: Updated Wire Injector with Custom Message in Go
DESCRIPTION: Modifies the Wire injector function to accept a custom message phrase as an argument.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_15

LANGUAGE: go
CODE:
```
func InitializeEvent(phrase string) (Event, error) {
    wire.Build(NewEvent, NewGreeter, NewMessage)
    return Event{}, nil
}
```

----------------------------------------

TITLE: Using OpenFGA CLI for Store and Model Operations - Bash
DESCRIPTION: Demonstrates OpenFGA CLI usage to interact with the running Zanzana/Grafana server. Includes examples for listing stores, reading models, and listing tuples, which are typical authorization relationship operations. Dependencies: A live OpenFGA-compatible server (Zanzana) and the OpenFGA CLI must be installed. Expected input: none; commands are executed directly. Output: Information on current stores, models, and tuples for debugging or management purposes.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/README.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
# List all stores
fga store list

# Other commands
fga model read
fga tuple list
```

----------------------------------------

TITLE: Building Grafana Plugin Backend with Make (Shell)
DESCRIPTION: This shell command uses the 'make' utility to execute the 'build-go' target defined in a Makefile. This target is responsible for compiling the Go language backend code for the Grafana plugin.
SOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/grafana-extensionstest-app/README.md#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
make build-go
```

----------------------------------------

TITLE: Basic Component Styling with Emotion in Grafana
DESCRIPTION: Demonstrates how to use the useStyles2 hook to access theme values in component styles. The getStyles function receives the theme object and returns CSS definitions using Emotion's css function, with spacing utilities from the Grafana theme.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/styling.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import { GrafanaTheme2 } from '@grafana/data';
import { useStyles2 } from '@grafana/ui';
import { css } from '@emotion/css';

const Foo = (props: FooProps) => {
  const styles = useStyles2(getStyles);

  // Use styles with classNames
  return <div className={styles}>...</div>;
};

const getStyles = (theme: GrafanaTheme2) =>
  css({
    padding: theme.spacing(1, 2), // will result in 8px 16px padding
  });
```

----------------------------------------

TITLE: Selecting Default Rendering Mode - Bash
DESCRIPTION: Sets the rendering mode to 'default' using an environment variable for the image renderer. In this mode, a new browser instance is launched for each rendering request, which can increase memory usage under high concurrency. Particularly recommended not to remove the default Chromium flag '--disable-gpu' for stability.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
RENDERING_MODE=default
```

----------------------------------------

TITLE: Initializing Storybook Component in JSX
DESCRIPTION: Demonstrates how to set up the default export for a Storybook component file, including title, component reference, and decorators.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/storybook.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import MyComponent from './MyComponent';

export default {
  title: 'General/MyComponent',
  component: MyComponent,
  decorators: [ ... ],
}
```

----------------------------------------

TITLE: Confirmation of User Added to Organization - JSON
DESCRIPTION: JSON object indicating a user has been successfully added to an organization. Contains a message and the userId of the created/added user. Returned after a successful POST.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_13

LANGUAGE: json
CODE:
```
{"message":"User added to organization","userId":1}
```

----------------------------------------

TITLE: Setting Storybook Page Title using Meta Component in MDX
DESCRIPTION: This MDX snippet utilizes the `Meta` component (imported previously from `@storybook/blocks`) to define metadata for the documentation page. The `title` attribute sets the display name of the component's documentation in the Storybook sidebar, organizing it under the 'MDX' category with the name 'Slider'.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Slider/Slider.mdx#2025-04-23_snippet_1

LANGUAGE: mdx
CODE:
```
<Meta title="MDX|Slider" />
```

----------------------------------------

TITLE: Changing Directory using Shell
DESCRIPTION: This shell command changes the current working directory to the 'tutorial-environment' directory, which was created by the previous 'git clone' command. This is necessary to access the files within the repository.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
cd tutorial-environment
```

----------------------------------------

TITLE: Advanced JSX Example with Dynamic Selectors
DESCRIPTION: JSX example showing a data source list with dynamic data-testid attributes based on item names.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_5

LANGUAGE: jsx
CODE:
```
<ul>
  {dataSources.map(({ id, name }) => (
    <li className="card-item-wrapper" key={id}>
      <a className="card-item" href={`datasources/edit/${id}`}>
        <div className="card-item-name">{name}</div>
      </a>
    </li>
  ))}
</ul>
```

----------------------------------------

TITLE: Configuring Build and Label Settings in YAML
DESCRIPTION: This YAML configuration sets build options and product labels for the release notes document. It disables list building and specifies that the content applies to cloud, enterprise, and open-source versions of Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-7.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
_build:
  list: false
labels:
  products:
    - cloud
    - enterprise
    - oss
title: Release notes for Grafana 7.5.7
```

----------------------------------------

TITLE: Fixing TypeScript Error for CSS Property in Grafana UI
DESCRIPTION: This code snippet addresses a TypeScript error where the 'css' property was missing in a type definition for Grafana UI components. It's part of a pull request to fix this issue in the plugin development environment.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-8-2-0-beta1.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
// Fix TS error property `css` is missing in type.
```

----------------------------------------

TITLE: Defining and Signing a Grafana Plugin Manifest - JSON
DESCRIPTION: This snippet presents a JSON manifest detailing the version, signing organization, plugin metadata, and sha256 checksums for each file in a Grafana plugin package. It is enclosed within a PGP signed message to provide authenticity and integrity; the manifest must be verified using the corresponding PGP signature block and an appropriate public key. Dependencies include Grafana plugin signing processes, and key parameters include file hash mappings and signature metadata. The input is the plugin's metadata and file hashes; the output is a verifiable manifest used by Grafana to trust and install plugins.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/test-app/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "plugin": "test-app",
  "version": "1.0.0",
  "time": 1621356785895,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "c59a51bf6d7ecd7a99608ccb99353390c8b973672a938a0247164324005c0caf",
    "dashboards/connections.json": "bea86da4be970b98dc4681802ab55cdef3441dc3eb3c654cb207948d17b25303",
    "dashboards/memory.json": "7c042464941084caa91d0a9a2f188b05315a9796308a652ccdee31ca4fbcbfee",
    "dashboards/connections_result.json": "124d85c9c2e40214b83273f764574937a79909cfac3f925276fbb72543c224dc"
  }
}
```

----------------------------------------

TITLE: Activating AWS KMS Encryption Provider in Grafana INI
DESCRIPTION: Updates the main `[security]` section of the `grafana.ini` configuration file to enable the previously defined AWS KMS provider. The `encryption_provider` parameter is set to the custom provider key (`awskms.example-encryption-key`), and this key is also listed in `available_encryption_providers`. The legacy `secret_key` is kept for backward compatibility or as a default if external providers are not configured.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-aws-kms/index.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
   [security]
   # previous encryption key, used for legacy alerts, decrypting existing secrets or used as default provider when external providers are not configured
   secret_key = AaaaAaaa
   # encryption provider key in the format <PROVIDER>.<KEY_NAME>
   encryption_provider = awskms.example-encryption-key
   # list of configured key providers, space separated
   available_encryption_providers = awskms.example-encryption-key
```

----------------------------------------

TITLE: Increasing Node.js Heap Size Limit (Windows Batch/PowerShell)
DESCRIPTION: Sets the `NODE_OPTIONS` environment variable using the `Set` command in the Windows Command Prompt or PowerShell. It configures the `--max-old-space-size` flag to 8192, instructing Node.js processes launched from this session to use a maximum heap size of 8192 MB (8 GB). This helps resolve 'JavaScript heap out of memory' errors, with the change applying only to the current session.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_22

LANGUAGE: batch
CODE:
```
Set NODE_OPTIONS="--max-old-space-size=8192"
```

----------------------------------------

TITLE: Implementing Contextual Logging in Go
DESCRIPTION: Shows how to use a contextual logger to include additional key/value pairs attached to context.Context, such as a traceID. This allows correlating logs with traces or other common identifiers.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/instrumentation.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
import (
  "context"
  "fmt"

  "github.com/grafana/grafana/pkg/infra/log"
)

var logger = log.New("my-logger")

func doSomething(ctx context.Context) {
  ctxLogger := logger.FromContext(ctx)
  ctxLogger.Debug("Debug msg")
  ctxLogger.Info("Info msg")
  ctxLogger.Warning("Warning msg")
  ctxLogger.Error("Error msg", "error", fmt.Errorf("BOOM"))
}
```

----------------------------------------

TITLE: Creating a comprehensive SQL data types demonstration table
DESCRIPTION: SQL statements for creating and populating a table containing a wide variety of Microsoft SQL Server data types. This example shows the creation of a table with various data types and inserting a row with sample values.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_1

LANGUAGE: sql
CODE:
```
CREATE TABLE [mssql_types] (
  c_bit bit, c_tinyint tinyint, c_smallint smallint, c_int int, c_bigint bigint, c_money money, c_smallmoney smallmoney, c_numeric numeric(10,5),
  c_real real, c_decimal decimal(10,2), c_float float,
  c_char char(10), c_varchar varchar(10), c_text text,
  c_nchar nchar(12), c_nvarchar nvarchar(12), c_ntext ntext,
  c_datetime datetime,  c_datetime2 datetime2, c_smalldatetime smalldatetime, c_date date, c_time time, c_datetimeoffset datetimeoffset
)

INSERT INTO [mssql_types]
SELECT
  1, 5, 20020, 980300, 1420070400, '$20000.15', '£2.15', 12345.12,
  1.11, 2.22, 3.33,
  'char10', 'varchar10', 'text',
  N'☺nchar12☺', N'☺nvarchar12☺', N'☺text☺',
  GETDATE(), CAST(GETDATE() AS DATETIME2), CAST(GETDATE() AS SMALLDATETIME), CAST(GETDATE() AS DATE), CAST(GETDATE() AS TIME), SWITCHOFFSET(CAST(GETDATE() AS DATETIMEOFFSET), '-07:00')
```

----------------------------------------

TITLE: Wire Tool Error Message for Non-Provider Function Variables
DESCRIPTION: This error message is displayed when the Wire dependency injection tool encounters a variable of function type that is being used as if it were a provider or provider set, which is not supported. The error includes the file location and the specific variable that caused the issue.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/FuncArgProvider/want/wire_errs.txt#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
example.com/foo/wire.go:x:y: var fn func() *example.com/foo.Foo is not a provider or a provider set
```

----------------------------------------

TITLE: Defining RouteExport Structure in Go
DESCRIPTION: Defines the RouteExport structure, which is similar to Route but excludes certain fields for provisioning file format compatibility.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_48

LANGUAGE: go
CODE:
```
**Properties**

| Name                  | Type                               | Go type             | Required | Default | Description                             | Example |
| --------------------- | ---------------------------------- | ------------------- | :------: | ------- | --------------------------------------- | ------- |
| `continue`            | boolean                            | `bool`              |          |         |                                         |         |
| `group_by`            | []string                           | `[]string`          |          |         |                                         |         |
| `group_interval`      | string                             | string              |          |         |                                         |         |
| `group_wait`          | string                             | string              |          |         |                                         |         |
| `match`               | map of string                      | `map[string]string` |          |         | Deprecated. Remove before v1.0 release. |         |
| `match_re`            | [MatchRegexps](#match-regexps)     | `MatchRegexps`      |          |         |                                         |         |
| `matchers`            | [Matchers](#matchers)              | `Matchers`          |          |         |                                         |         |
| `mute_time_intervals` | []string                           | `[]string`          |          |         |                                         |         |
| `object_matchers`     | [ObjectMatchers](#object-matchers) | `ObjectMatchers`    |          |         |                                         |         |
| `receiver`            | string                             | string              |          |         |                                         |         |
| `repeat_interval`     | string                             | string              |          |         |                                         |         |
| `routes`              | [][RouteExport](#route-export)     | `[]*RouteExport`    |          |         |                                         |         |
```

----------------------------------------

TITLE: Configuring Server Root URL for Grafana Webhooks - YAML
DESCRIPTION: This YAML snippet sets the 'root_url' parameter under the 'server' section of the Grafana configuration file, specifying the publicly accessible domain for the instance. This URL is required to allow webhook communication between GitHub and Grafana for real-time dashboard updates and pull request integrations. Ensure the server is accessible from the public internet via the specified domain, and modify 'PUBLIC_DOMAIN.HERE' to match your actual public DNS or proxy address.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/observability-as-code/provision-resources/git-sync-setup.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
[server]\nroot_url = https://PUBLIC_DOMAIN.HERE
```

----------------------------------------

TITLE: Creating a Login Page Representation for E2E Testing
DESCRIPTION: TypeScript code demonstrating how to create a Page object for the login page with URL and selector definition.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
export const Login = {
  // Called via `Login.visit()`
  url: '/login',
  // Called via `Login.username()`
  username: 'data-testid Username input field',
};
```

----------------------------------------

TITLE: Separating Firing and Resolved Alerts in Grafana Notification Templates - Go
DESCRIPTION: This Go template defines 'custom.firing_and_resolved_alerts' to separate alerts by their status (firing or resolved), printing resolved alerts first and then firing alerts. Uses sub-template 'alert.summary_and_description' for consistent formatting. Requires '.Alerts.Firing' and '.Alerts.Resolved' in the notification data; output gives a clear summary per alert state.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_8

LANGUAGE: go
CODE:
```
{{ define "custom.firing_and_resolved_alerts" -}}
{{ len .Alerts.Resolved }} resolved alert(s)
{{ range .Alerts.Resolved -}}
  {{ template "alert.summary_and_description" . -}}
{{ end }}
{{ len .Alerts.Firing }} firing alert(s)
{{ range .Alerts.Firing -}}
  {{ template "alert.summary_and_description" . -}}
{{ end -}}
{{ end -}}
{{ define "alert.summary_and_description" }}
  Summary: {{.Annotations.summary}}
  Status: {{ .Status }}
  Description: {{.Annotations.description}}
{{ end -}}
```

----------------------------------------

TITLE: Formatting Alerts with Summaries and Descriptions in Grafana using Go Templates - Go
DESCRIPTION: Defines two nested Go templates for Grafana: 'custom.alerts' computes the number of alerts and iterates over them, invoking the sub-template 'alert.summary_and_description', which displays the summary, status, and description from alert annotations. Requires the notification context to provide '.Alerts' and suitable annotations. Input is alert data; output is a formatted alert summary list.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_5

LANGUAGE: go
CODE:
```
{{ define "custom.alerts" -}}
{{ len .Alerts }} alert(s)
{{ range .Alerts -}}
  {{ template "alert.summary_and_description" . -}}
{{ end -}}
{{ end -}}
{{ define "alert.summary_and_description" }}
  Summary: {{.Annotations.summary}}
  Status: {{ .Status }}
  Description: {{.Annotations.description}}
{{ end -}}
```

----------------------------------------

TITLE: Setting Dynamic Query Alias with Grafana Variables
DESCRIPTION: This snippet shows how to use Grafana's variable syntax in the 'Alias' field of the Query Editor. It dynamically sets the alias (legend label) for the query result using the value from the 'State' field of the selected source data row.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/explore/correlations-editor-in-explore.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
${State}
```

----------------------------------------

TITLE: Grafana Plugin Manifest JSON Structure
DESCRIPTION: JSON manifest file for a Grafana test plugin including version information, file hashes, and metadata. Contains manifest version, signature details, plugin identification, and cryptographic hashes of plugin files.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/pluginsintegration/pluginassets/testdata/module-hash-valid-nested/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "plugin": "test-app",
  "version": "1.0.0",
  "time": 1726230803822,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "module.js": "266c19bc148b22ddef2a288fc5f8f40855bda22ccf60be53340b4931e469ae2a",
    "plugin.json": "31f04aceb2a9b14c2e501f38a4de5ab1c7a3e7306f58353fa5c1a86b716c971c",
    "datasource/module.js": "04d70db091d96c4775fb32ba5a8f84cc22893eb43afdb649726661d4425c6711",
    "datasource/plugin.json": "3fd712717a21617cc76f9043efcd43d4ebf5564dd155a28e4e3c736739f6931e",
    "panels/one/module.js": "cbd1ac2284645a0e1e9a8722a729f5bcdd2b831222728709c6360beecdd6143f",
    "panels/one/plugin.json": "b9b4556a7220ea77650ffd228da6d441e68df3405d50dab5773c10f4afae5ad3"
  }
}
```

----------------------------------------

TITLE: Generating Alert Notification Templates - Golang Templating - Go
DESCRIPTION: This snippet defines a Go HTML template to generate alert notification messages for Grafana alerts. Dependencies include Go's text/template engine and provision of all referenced template variables from surrounding Go code (e.g., .Subject, .Title, .Error, .EvalMatches). Inputs are expected as a struct containing alert context such as titles, messages, states, metric values, URLs, and build version. Outputs are rendered notification messages for use in emails or alert channels; if the alert state or error conditions are present, it conditionally displays corresponding data sections. Variable interpolation and control flow are performed by Go's builtin template syntax; all original formatting and logic must be preserved for the template to function correctly.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/alert_notification.txt#2025-04-23_snippet_0

LANGUAGE: Go
CODE:
```
{{HiddenSubject .Subject "{{.Title}}"}}

{{.Title}}
----------------

{{.Message}}

{{if ne .Error "" }}
Error message:
{{.Error}}
{{end}}

{{if ne .State "ok" }}
{{range .EvalMatches}}
Metric name:
{{.Metric}}
Value:
{{.Value}}
{{end}}
{{end}}

View your Alert rule:
{{.RuleUrl}}"

Go to the Alerts page:
{{.AlertPageUrl}}


Sent by Grafana v{{.BuildVersion}} (c) {{now | date "2006"}} Grafana Labs
```

----------------------------------------

TITLE: Database Migration Implementation in Go
DESCRIPTION: Example of implementing database migrations in a service using the migrator framework to add new columns.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/database.md#2025-04-23_snippet_3

LANGUAGE: go
CODE:
```
func (s *MyService) AddMigration(mg *migrator.Migrator) {
    // ...

    mg.AddMigration("Add column age", NewAddColumnMigration(table, &Column{
        Name:     "age",
        Type:     migrator.DB_BigInt,
        Nullable: true,
    }))
}
```

----------------------------------------

TITLE: Add User Role Assignment Request
DESCRIPTION: POST request to assign a role to a user. Requires users.roles:add permission with permissions:type:delegate scope.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_19

LANGUAGE: http
CODE:
```
POST /api/access-control/users/1/roles
Accept: application/json
Content-Type: application/json

{
    "global": false,
    "roleUid": "XvHQJq57z"
}
```

----------------------------------------

TITLE: Updating Reports via HTTP PUT Request
DESCRIPTION: Example of updating an existing report with new configuration including schedule, recipients, and dashboard settings.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_6

LANGUAGE: http
CODE:
```
GET /api/reports HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
	"name": "Updated Report",
	"recipients": "example-report@grafana.com",
	"replyTo": "",
	"message": "Hello, please, find the report attached",
	"schedule": {
		"frequency": "hourly",
		"timeZone": "Africa/Cairo",
		"workdaysOnly": true,
		"startDate": "2022-10-10T10:00:00+02:00",
		"endDate": "2022-11-20T19:00:00+02:00"
	},
	"options": {
		"orientation": "landscape",
		"layout": "grid"
	},
	"enableDashboardUrl": true,
	"state": "scheduled",
	"dashboards": [
		{
			"dashboard": {
				"id": 463,
				"uid": "7MeksYbmk",
				"name": "Alerting with TestData"
			},
			"timeRange": {
				"from": "2022-08-08T15:00:00+02:00",
				"to": "2022-09-02T17:00:00+02:00"
			},
			"reportVariables": {
				"variable1": "Value1"
			}
		}
	],
	"formats": [
		"pdf",
		"csv"
	]
}
```

----------------------------------------

TITLE: Example Error When Modifying ulimit Fails (Text)
DESCRIPTION: Displays a typical error message received when the `ulimit` command fails due to insufficient permissions, often because a lower hard limit is already in place (potentially set in shell initialization files like `~/.bashrc`). This indicates the user should check existing shell configurations for conflicting `ulimit` commands.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_15

LANGUAGE: text
CODE:
```
ulimit: open files: cannot modify limit: Operation not permitted
```

----------------------------------------

TITLE: Using SecretInput in React with TypeScript
DESCRIPTION: Demonstrates how to import and use the SecretInput component from the '@grafana/ui' package in a React (TypeScript/TSX) application. The snippet shows the SecretInput in use with key props: value (for the secret/pwd string), isConfigured (boolean to control input behavior), onChange (handler for input update), and onReset (handler for reset action). Assumes dependencies on React and @grafana/ui. The main inputs are the required props to control state and behavior; output is a password input element that may render differently based on configuration. Limitations: actual callback implementations are not provided.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/SecretInput/SecretInput.mdx#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import {SecretInput} from '@grafana/ui';

<SecretInput
  value={...}
  isConfigured={...}
  onChange={...}
  onReset={...}
/>
```

----------------------------------------

TITLE: Example Output of Alerts with Summary and Description in Grafana Templates - template_output
DESCRIPTION: This is a sample output showing how two alerts would appear after running the 'custom.alerts' template. Outputs include alert count, each alert's summary, status, and description, formatted for notification display. Indicates typical real-world alert events.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_7

LANGUAGE: template_output
CODE:
```
2 alert(s)

  Summary: The database server db1 has exceeded 75% of available disk space.
  Status: firing
  Description: This alert fires when a database server is at risk of running out of disk space. You should take measures to increase the maximum available disk space as soon as possible to avoid possible corruption.

  Summary: The web server web1 has been responding to 5% of HTTP requests with 5xx errors for the last 5 minutes.
  Status: resolved
  Description: This alert fires when a web server responds with more 5xx errors than is expected. This could be an issue with the web server or a backend service.
```

----------------------------------------

TITLE: Resetting Basic Role Permissions on Boot via Grafana rbac Section - Bash Config
DESCRIPTION: This bash-formatted config snippet shows how to set the 'reset_basic_roles' option in the Grafana [rbac] config section, ensuring that basic role permissions are reset to defaults upon every instance boot. Dependencies: valid Grafana configuration file, and Grafana Enterprise 9.4+. Caution—permissions will reset each time Grafana restarts while this flag is enabled.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
[rbac]
reset_basic_roles = true

```

----------------------------------------

TITLE: Page Weight Configuration in YAML Front Matter
DESCRIPTION: Example showing how to configure page weight and menu title in Hugo front matter for controlling page order and menu display text.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/README.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
weight: 100
menuTitle: "Custom Menu Text"
```

----------------------------------------

TITLE: Creating Docker Compose with Specific Database Versions for Grafana
DESCRIPTION: This Make command creates a docker-compose file with specific versions of databases (postgres 9.2) and Grafana (6.7.0-beta1) for development testing.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/README.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
make devenv sources=postgres,auth/openldap,grafana postgres_version=9.2 grafana_version=6.7.0-beta1
```

----------------------------------------

TITLE: Configuring Sensu Go Contact Point - YAML
DESCRIPTION: Sets up Sensu Go as a notification target for Grafana alert events. Requires Sensu Go API URL and API key. Optional entity, check, handler, namespace, and message fields can be provided to customize alert delivery within Sensu Go's monitoring ecosystem. Outputs custom Sensu events per Grafana alert.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_17

LANGUAGE: yaml
CODE:
```
type: sensugo\nsettings:\n  # <string, required>\n  url: http://sensu-api.local:8080\n  # <string, required>\n  apikey: xxx\n  # <string>\n  entity: default\n  # <string>\n  check: default\n  # <string>\n  handler: some_handler\n  # <string>\n  namespace: default\n  # <string>\n  message: |\n    {{ template \"default.message\" . }}\n
```

----------------------------------------

TITLE: Enabling Hashicorp Vault Provider in Grafana INI Security Section
DESCRIPTION: This configuration snippet updates the `[security]` section of `grafana.ini` to enable a previously defined Hashicorp Vault provider. The `encryption_provider` key is set to the specific Vault provider key name (e.g., `hashicorpvault.example-encryption-key`), and this name is also added to the space-separated `available_encryption_providers` list. The original `secret_key` remains for backward compatibility.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-hashicorp-key-vault/index.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
   ```
   [security]
   # previous encryption key, used for legacy alerts, decrypting existing secrets or used as default provider when external providers are not configured
   secret_key = AaaaAaaa
   # encryption provider key in the format <PROVIDER>.<KEY-NAME>
   encryption_provider = hashicorpvault.example-encryption-key
   # list of configured key providers, space separated
   available_encryption_providers = hashicorpvault.example-encryption-key
   ```
```

----------------------------------------

TITLE: Including Shared Backup Documentation - Hugo Shortcode - Plaintext
DESCRIPTION: This shortcode snippet includes backup instructions into the upgrade documentation by referencing the shared backup markdown file. The 'leveloffset' parameter adjusts heading levels for seamless integration into the current document structure. This technique facilitates consistent backup guidance for Grafana upgrades, ensuring users follow recommended procedures.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v8.4/index.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
{{< docs/shared lookup=\"back-up/back-up-grafana.md\" source=\"grafana\" version=\"<GRAFANA VERSION>\" leveloffset=\"+1\" >}}
```

----------------------------------------

TITLE: Deprecation Grace Period Table in Markdown
DESCRIPTION: This table outlines the grace periods between announcing a deprecation and disabling the feature by default, categorized by the size of the feature. It provides examples for each size category.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/deprecation-policy.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
| Size   | Duration   | Example                                                          |
| ------ | ---------- | ---------------------------------------------------------------- |
| Large  | 1-2 years  | Classic alerting, scripted dashboards, AngularJS                 |
| Medium | 6 months   | Supported database for Grafana's backend                         |
| Small  | 1-3 months | Refresh OAuth access_token automatically using the refresh_token |
```

----------------------------------------

TITLE: Custom Duration Load Test
DESCRIPTION: Executes load test with a custom duration parameter
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ ./run.sh -d 10s
```

----------------------------------------

TITLE: Annotating Factory Class with Examples and Public Release Tag - TypeScript
DESCRIPTION: This snippet demonstrates how to document a TypeScript class using TSDoc, providing an overview, a usage example, and a release tag (@public) at the bottom. Dependencies include TypeScript and the TSDoc tooling. The DataFrameFactory class includes a create method and serves as a best-practice example for documenting both the purpose and intended usage in code comments. Inputs and outputs pertain to the class and DataFrame instances, respectively.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/code-comments.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
/**
 * Helps to create DataFrame objects and handle
 * the heavy lifting of creating a complex object.
 *
 * @example
 * ```typescript
 * const dataFrame = factory.create();
 * ```
 *
 * @public
 **/
export class DataFrameFactory {
  create(): DataFrame {}
}
```

----------------------------------------

TITLE: Creating Grafana Data Sources (Plaintext)
DESCRIPTION: Defines the `datasources:create` permission action necessary to create new data sources in Grafana. This action does not list specific scope dependencies.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_16

LANGUAGE: plaintext
CODE:
```
`datasources:create`
```

----------------------------------------

TITLE: Querying Annotations with Native Date/Time in SQL for Grafana
DESCRIPTION: SQL query example demonstrating how to fetch Grafana annotations when the time column (`native_date_time`) uses a native SQL date/time data type. It aliases the column as `time`, uses `metric1` for `text`, and combines `metric1` and `metric2` for `tags`. The `$__timeFilter` macro is used to filter results according to the Grafana dashboard's time range. Assumes the existence of a `public.test_data` table with the specified columns.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_17

LANGUAGE: sql
CODE:
```
SELECT
  native_date_time as time,
  metric1 as text,
  concat_ws(', ', metric1::text, metric2::text) as tags
FROM
  public.test_data
WHERE
  $__timeFilter(native_date_time)
```

----------------------------------------

TITLE: Updated Wire Injector with Error Handling in Go
DESCRIPTION: Modifies the Wire injector function to include an error in the return type.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_13

LANGUAGE: go
CODE:
```
func InitializeEvent() (Event, error) {
    wire.Build(NewEvent, NewGreeter, NewMessage)
    return Event{}, nil
}
```

----------------------------------------

TITLE: Using Group By Time in Grafana for InfluxDB
DESCRIPTION: The `group by time` clause in InfluxDB queries aggregated data over time intervals, crucial for performance in Grafana. If left empty, Grafana auto-calculates it. When using `fill(0)` or `fill(null)`, set a low limit for the auto interval (e.g., `60s` if data is written every 60 seconds) via the Grafana query editor's 'group by time' option below the query.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/influxdb/query_help.md#2025-04-23_snippet_2

LANGUAGE: influxql
CODE:
```
fill(0)
```

LANGUAGE: influxql
CODE:
```
fill(null)
```

LANGUAGE: influxql
CODE:
```
group by time ... 60s
```

----------------------------------------

TITLE: Adding Module Replace Directive
DESCRIPTION: Go module replace directive for temporary local development before the module is published to the main branch.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/manage-go-module.md#2025-04-23_snippet_2

LANGUAGE: go
CODE:
```
// In your module's go.mod
replace github.com/grafana/grafana/pkg/<my-module> => ../../../<my-module>
```

----------------------------------------

TITLE: Defining Sample CSV Data for Grafana TestData Source
DESCRIPTION: Provides sample comma-separated value (CSV) data representing simulated web traffic views for different devices (desktop, mobile). This data is intended to be used with the Grafana TestData data source (CSV Content scenario) to generate multiple time series, enabling the testing of alert rules and notification policies that route based on labels like 'device'.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt2/index.md#2025-04-23_snippet_3

LANGUAGE: csv
CODE:
```
device,views
desktop,1200
mobile,900
```

----------------------------------------

TITLE: Documenting and Introducing the CodeEditor Component - MDX
DESCRIPTION: This simple MDX snippet introduces the CodeEditor and provides a short description. It is meant to appear in the rendered Storybook documentation, giving users a brief overview. There are no functional dependencies, but it should follow the Storybook documentation conventions.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Monaco/CodeEditor.mdx#2025-04-23_snippet_2

LANGUAGE: mdx
CODE:
```
# CodeEditor

Monaco Code editor
```

----------------------------------------

TITLE: Retrieving All Library Elements Request Example (HTTP)
DESCRIPTION: Example HTTP GET request to fetch the first 10 library elements from the Grafana API using the `/api/library-elements` endpoint. The `perPage` query parameter limits the results. Requires authentication via a Bearer token in the `Authorization` header.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/library-elements?perPage=10 HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Linking MDX Documentation to Component Stories in TypeScript
DESCRIPTION: Demonstrates how to connect an MDX file to a component's stories for documentation purposes.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/storybook.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
import { TabsBar } from './TabsBar';

import mdx from './TabsBar.mdx';

export default {
  title: 'General/Tabs/TabsBar',
  component: TabsBar,
  parameters: {
    docs: {
      page: mdx,
    },
  },
};
```

----------------------------------------

TITLE: Migrating scrollTop Control to ScrollContainer using refs in React (TypeScript)
DESCRIPTION: This snippet illustrates the recommended approach to scrolling in the new ScrollContainer component using refs. It creates a reference to a DOM element, and on scrollTop state changes, scrolls the ScrollContainer to the new offset programmatically in a useEffect. Required dependencies are React, useRef, useEffect, and the ScrollContainer component. The ref is passed to the container component, which must attach to a scrollable DOM element. This pattern is more idiomatic in React and leverages native scroll APIs.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ScrollContainer/ScrollContainer.mdx#2025-04-23_snippet_1

LANGUAGE: TSX
CODE:
```
const [scrollTop, setScrollTop] = useState(0);
const scrollRef = useRef<HTMLDivElement>(null);

useEffect(() => {
  scrollRef.current?.scrollTo(0, scrollTop);
}, [scrollTop]);

return <ScrollContainer ref={scrollRef}>// Your amazing scrolling content</ScrollContainer>;
```

----------------------------------------

TITLE: Disabling Options in RadioButtonGroup in React (JSX)
DESCRIPTION: This code sequence demonstrates defining a list of options and a corresponding set of disabled options for use with the RadioButtonGroup component. It shows how to pass both enabled and disabled options when rendering RadioButtonGroup, using the disabledOptions prop to prevent certain selections. Required: options array with label/value pairs, array of option values to disable, and handlers for value and change. Only the specified options in disabledOptions are disabled for selection.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/RadioButtonGroup/RadioButtonGroup.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
const options = [
  { label: 'Prometheus', value: 'prometheus' },
  { label: 'Graphite', value: 'graphite' },
  { label: 'Elastic', value: 'elastic' },
  { label: 'InfluxDB', value: 'influx' },
];

const disabledOptions = ['prometheus', 'elastic'];


<RadioButtonGroup
  options={options}
  disabledOptions={disabledOptions}
  value={...}
  onChange={...}
/>
```

----------------------------------------

TITLE: Importing TabsBar Components in JavaScript
DESCRIPTION: This snippet shows the import statements for the TabsBar-related components. It imports ArgTypes from Storybook, and the Counter and Tab components from their respective files.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tabs/TabsBar.mdx#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { ArgTypes } from '@storybook/blocks';
import { Counter } from './Counter';
import { Tab } from './Tab';
```

----------------------------------------

TITLE: Configuring DNSMasq for Local Domain Resolution
DESCRIPTION: Commands to install and configure dnsmasq for resolving .loc domains to localhost
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha-test-unified-alerting/README.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ sudo apt-get install dnsmasq
$ echo 'address=/loc/127.0.0.1' | sudo tee /etc/dnsmasq.d/dnsmasq-loc.conf > /dev/null
$ sudo /etc/init.d/dnsmasq restart
$ ping whatever.loc
PING whatever.loc (127.0.0.1) 56(84) bytes of data.
64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.076 ms
--- whatever.loc ping statistics ---
1 packet transmitted, 1 received, 0% packet loss, time 1998ms
```

----------------------------------------

TITLE: Configuring OAuth Authentication in Grafana
DESCRIPTION: Configuration snippet for enabling and setting up OAuth authentication in Grafana's custom.ini file. It includes settings for Keycloak integration, scopes, attribute mappings, and role assignments.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/oauth/readme.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[auth.generic_oauth]
enabled = true
name = Keycloak-OAuth
allow_sign_up = true
client_id = grafana-oauth
client_secret = d17b9ea9-bcb1-43d2-b132-d339e55872a8
scopes = openid email profile offline_access roles
email_attribute_path = email
login_attribute_path = username
name_attribute_path = full_name
groups_attribute_path = groups
auth_url = http://localhost:8087/realms/grafana/protocol/openid-connect/auth
token_url = http://localhost:8087/realms/grafana/protocol/openid-connect/token
role_attribute_path = contains(roles[*], 'grafanaadmin') && 'GrafanaAdmin' || contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'
allow_assign_grafana_admin = true
signout_redirect_url = http://localhost:8087/realms/grafana/protocol/openid-connect/logout?post_logout_redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Flogin
```

----------------------------------------

TITLE: Wire Error: Missing Provider for Indirect Dependency (Foo)
DESCRIPTION: This error message from Wire signifies a missing provider for the type 'example.com/foo.Foo'. This type is required as an input dependency by the type 'example.com/foo.Baz', which itself is constructed by the provider function 'provideBaz' (located in 'example.com/foo/foo.go'). This specific error occurred while processing the injector function 'injectMultipleMissingTypes' in 'example.com/foo/wire.go'. A provider for 'Foo' must be available to the Wire set.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/MultipleMissingInputs/want/wire_errs.txt#2025-04-23_snippet_1

LANGUAGE: text
CODE:
```
example.com/foo/wire.go:x:y: inject injectMultipleMissingTypes: no provider found for example.com/foo.Foo
needed by example.com/foo.Baz in provider "provideBaz" (example.com/foo/foo.go:x:y)
```

----------------------------------------

TITLE: Filtering Variable Options with Regex to Match End Patterns
DESCRIPTION: A regular expression that filters variable options to only include those ending with '01' or '02'. This can be used in the Regex field of variable configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_9

LANGUAGE: regex
CODE:
```
/(01|02)$/
```

----------------------------------------

TITLE: Starting Docker Compose Services
DESCRIPTION: Commands to start services and check for errors in the logs
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha_test/README.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
$ docker-compose up -d
$ docker-compose logs | grep error
```

----------------------------------------

TITLE: Retrieving Library Element Connections Response Example (HTTP/JSON)
DESCRIPTION: Example HTTP 200 OK response for the 'Get library element connections' request. The JSON body contains an array of connection objects within the `result` field, detailing where the specified library element is used (e.g., dashboard UIDs).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_7

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
    "result": [
        {
            "id": 148,
            "kind": 1,
            "elementId": 25,
            "connectionId": 527,
            "connectionUid": "dHEquNzGz",
            "created": "2021-09-27T10:00:07+02:00",
            "createdBy": {
                "id": 1,
                "name": "admin",
                "avatarUrl": "/avatar/46d229b033af06a191ff2267bca9ae56"
            }
        }
    ]
}
```

----------------------------------------

TITLE: Sample CSV Data for Memory Usage Simulation in Grafana
DESCRIPTION: This CSV data represents simulated memory usage metrics across different regions, services, and instances. It's intended to be used as input for a Grafana data source or alert rule configuration, specifically for the 'High Memory usage - Multi-region' rule mentioned in the text, to demonstrate alert triggering based on this data.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_5

LANGUAGE: csv
CODE:
```
region,memory-usage,service,instance
us-west,42,cache-server-1,server-09
us-west,88,cache-server-1,server-10
us-east,74,api-server-1,server-11
us-east,90,api-server-1,server-12
us-west,53,analytics-server-1,server-13
us-east,81,analytics-server-2,server-14
us-west,77,analytics-server-1,server-15
us-east,94,analytics-server-2,server-16
```

----------------------------------------

TITLE: Importing Dependencies for Storybook and PanelContainer (JavaScript/TypeScript)
DESCRIPTION: This snippet imports the Meta utility from Storybook's block library and the PanelContainer component from a local file. The Meta import enables Storybook metadata setup, while PanelContainer is the main subject being documented or previewed. These imports are prerequisites for integrating the PanelContainer component into the Storybook environment.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelContainer/PanelContainer.mdx#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { Meta } from '@storybook/blocks';
import { PanelContainer } from './PanelContainer';
```

----------------------------------------

TITLE: Implementing OrgRolePicker Component in Grafana
DESCRIPTION: Implementation of the OrgRolePicker component that wraps the Select component with organization role options. It demonstrates how to create a reusable select component with custom options and proper accessibility attributes.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/testing.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
import { OrgRole } from '@grafana/data';
import { Select } from '@grafana/ui';

interface Props {
  value: OrgRole;
  disabled?: boolean;
  'aria-label'?: string;
  inputId?: string;
  onChange: (role: OrgRole) => void;
  autoFocus?: boolean;
  width?: number | 'auto';
}

const options = Object.keys(OrgRole).map((key) => ({ label: key, value: key }));

export function OrgRolePicker({ value, onChange, 'aria-label': ariaLabel, inputId, autoFocus, ...restProps }: Props) {
  return (
    <Select
      inputId={inputId}
      value={value}
      options={options}
      onChange={(val) => onChange(val.value as OrgRole)}
      placeholder="Choose role..."
      aria-label={ariaLabel}
      autoFocus={autoFocus}
      {...restProps}
    />
  );
}
```

----------------------------------------

TITLE: Structuring GitHub Notification Labels in Gmail (Markdown)
DESCRIPTION: This Markdown code snippet illustrates a hierarchy of labels for Gmail to organize GitHub notifications. The structure distinguishes between actionable (mine) and non-actionable (other) notifications, with sub-labels for activity, assignment, and mentions, enhancing workflow clarity. Users are expected to create these labels manually or import them using Gmail's filter import feature; inputs are processed notification emails, and the output is a labeled inbox structure.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/ISSUE_TRIAGE.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
```
 - Inbox
 ...
 - GitHub (mine)
   - activity
   - assigned
   - mentions
 - GitHub (other)
  - Grafana
```
```

----------------------------------------

TITLE: Enabling Automatic Generic OAuth Login via Grafana Configuration (Bash)
DESCRIPTION: Configures Grafana to automatically attempt login using a specific generic OAuth provider by setting `auto_login` to `true` within the `[auth.generic_oauth]` section of the configuration file. This bypasses the standard login page but is only effective if it's the sole provider configured for automatic login; the setting is ignored if multiple providers have `auto_login` enabled.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/_index.md#2025-04-23_snippet_4

LANGUAGE: Bash
CODE:
```
[auth.generic_oauth]
auto_login = true
```

----------------------------------------

TITLE: Setting Presence Indicator Timeframe in Grafana (INI)
DESCRIPTION: This INI configuration snippet sets the time window considered 'recent' for displaying user avatars in the dashboard presence indicator. The `recent_users_age` parameter under the `[analytics.views]` section defines this duration (e.g., '10m' for 10 minutes). This configuration needs to be added to the Grafana configuration file and requires Grafana Enterprise or Cloud.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/assess-dashboard-usage/index.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
```ini
[analytics.views]

# Set age for recent active users to 10 minutes
recent_users_age = 10m
```
```

----------------------------------------

TITLE: Disk I/O Metrics in Prometheus Format
DESCRIPTION: Disk I/O statistics for devices nvme0n1, dm-0, dm-1, and dm-2, including reads, writes, merges, and timing metrics. Each metric includes detailed counters and timestamps.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/incomplete_fields_full.txt#2025-04-23_snippet_1

LANGUAGE: prometheus
CODE:
```
node_disk,device=nvme0n1 reads_completed_total=1.3411377179449652e-304 1625842606119336434
node_disk,device=dm-0 reads_completed_total=2.1994805592372739e-304 1625842606119375842
node_disk,device=dm-1 reads_completed_total=2.1922059384353575e-304 1625842606119395462
```

----------------------------------------

TITLE: Rotating Data Keys using Grafana Admin API
DESCRIPTION: Triggers the rotation of data encryption keys via the Grafana Admin API endpoint `/encryption/rotate-data-keys`. This disables the currently active data key for encryption, forcing a new key to be generated on demand for subsequent encryption operations. Note that this does not re-encrypt secrets already encrypted with the rotated key. It is recommended to perform this action during maintenance.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_8

LANGUAGE: plaintext
CODE:
```
/encryption/rotate-data-keys
```

----------------------------------------

TITLE: Configuring Grafana Audit Logging
DESCRIPTION: This snippet shows the main configuration options for enabling and customizing audit logging in Grafana. It includes settings for enabling the feature, specifying loggers, and controlling log content and verbosity.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/audit-grafana.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
[auditing]
# Enable the auditing feature
enabled = false
# List of enabled loggers
loggers = file
# Keep dashboard content in the logs (request or response fields); this can significantly increase the size of your logs.
log_dashboard_content = false
# Keep requests and responses body; this can significantly increase the size of your logs.
verbose = false
# Write an audit log for every status code.
# By default it only logs the following ones: 2XX, 3XX, 401, 403 and 500.
log_all_status_codes = false
# Maximum response body (in bytes) to be audited; 500KiB by default.
# May help reducing the memory footprint caused by auditing.
max_response_size_bytes = 512000
```

----------------------------------------

TITLE: Inserting User Name with Go Template Variable
DESCRIPTION: This snippet uses the Go template syntax `[[.Name]]` to dynamically insert the recipient's name into the email body. It acts as a placeholder that gets replaced by the value of the `Name` field from the data object provided during template rendering, personalizing the welcome message.
SOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/welcome_on_signup.txt#2025-04-23_snippet_1

LANGUAGE: gotemplate
CODE:
```
[[.Name]]
```

----------------------------------------

TITLE: Overriding Default Plugin Directory for Installation (Bash)
DESCRIPTION: Demonstrates how to use the '--pluginsDir' global option to specify a non-default directory for installing a Grafana plugin. The command installs '<plugin-id>' into the specified '/var/lib/grafana/devplugins' directory instead of the default one.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
grafana cli --pluginsDir \"/var/lib/grafana/devplugins\" plugins install <plugin-id>
```

----------------------------------------

TITLE: Displaying Grafana Build Version in Go Template
DESCRIPTION: This Go template snippet inserts the Grafana build version (`.BuildVersion`) from the context data into the email footer. This indicates which version of Grafana generated the invitation email. Requires the Go templating engine and the `.BuildVersion` variable in the context.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/new_user_invite.txt#2025-04-23_snippet_4

LANGUAGE: gotemplate
CODE:
```
{{.BuildVersion}}
```

----------------------------------------

TITLE: Configuring SAML Authentication in Grafana
DESCRIPTION: SAML configuration settings for Grafana including certificate paths, IdP metadata URL, and attribute mappings for Authentik integration.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/authentik/README.md#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
[auth.saml]
enabled = true
certificate_path = devenv/docker/blocks/auth/authentik/cert.crt
private_key_path = devenv/docker/blocks/auth/authentik/key.pem
idp_metadata_url = http://localhost:9000/api/v3/providers/saml/2/metadata/?download
assertion_attribute_name = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name
assertion_attribute_login = http://schemas.goauthentik.io/2021/02/saml/username
assertion_attribute_email = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
assertion_attribute_groups = http://schemas.xmlsoap.org/claims/Group
assertion_attribute_org = http://schemas.xmlsoap.org/claims/Group
allow_sign_up = true
single_logout = true # supported by authentik v2023.1 and newer
signature_algorithm = rsa-sha256
allow_idp_initiated = true
org_mapping = admin:1:Admin, editor:1:Editor, viewer:1:Viewer
```

----------------------------------------

TITLE: Documentation Alias Example in YAML Front Matter
DESCRIPTION: Example showing how to set up page aliases in Hugo front matter for proper URL redirects when moving or removing pages.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/README.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
aliases:
  - /old/page/location
  - /another/old/location
```

----------------------------------------

TITLE: Searching Teams with GraphQL HTTP API - HTTP
DESCRIPTION: Demonstrates how to perform a paginated and filtered search for teams using the Grafana HTTP API. Requires valid Bearer token authentication and may include optional query parameters for fine-tuned searches. Returns a paged JSON list of teams matching filter criteria.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/teams/search?perpage=10&page=1&query=mytestteam HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt
```

----------------------------------------

TITLE: Enabling Insecure Email Lookup via Grafana Configuration (Bash)
DESCRIPTION: Demonstrates how to enable email-based user lookup for OAuth authentication within the Grafana configuration file by setting `oauth_allow_insecure_email_lookup` to `true` under the `[auth]` section. This overrides the default behavior of using the IdP's unique ID but carries potential security implications and is generally discouraged.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/_index.md#2025-04-23_snippet_2

LANGUAGE: Bash
CODE:
```
[auth]
oauth_allow_insecure_email_lookup = true
```

----------------------------------------

TITLE: Creating a dashboard using Service Account token in Grafana
DESCRIPTION: This command demonstrates how to create a new dashboard using the Service Account token. It includes a sample dashboard JSON and uses bearer token authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/create-api-tokens-for-org.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
curl -X POST --insecure -H "Authorization: Bearer eyJrIjoiR0ZXZmt1UFc0OEpIOGN5RWdUalBJTllUTk83VlhtVGwiLCJuIjoiYXBpa2V5Y3VybCIsImlkIjo2fQ==" -H "Content-Type: application/json" -d '{
  "dashboard": {
    "id": null,
    "title": "Production Overview",
    "tags": [ "templated" ],
    "timezone": "browser",
    "rows": [
      {
      }
    ],
    "schemaVersion": 6,
    "version": 0
  },
  "overwrite": false
}' http://localhost:3000/api/dashboards/db
```

----------------------------------------

TITLE: Copying Provisioning Resources to Grafana Pod - kubectl Bash
DESCRIPTION: Uses 'kubectl cp' to copy a local 'alerting' directory (containing provisioning files) to the '/etc/grafana/provisioning/' directory in the Grafana pod. This is necessary when adding new provisioning resources after initial pod creation. Replace <pod_name> and namespace appropriately; run before restarting and reloading resources.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_27

LANGUAGE: bash
CODE:
```
kubectl cp alerting my-grafana/<pod_name>:/etc/grafana/provisioning/

```

----------------------------------------

TITLE: Changing Ownership of Grafana Directory using Shell
DESCRIPTION: Recursively changes the owner and group of the Grafana installation directory (`/usr/local/grafana`) to the `grafana` user and `users` group using the `chown` command. Requires `sudo` privileges. This ensures the Grafana process has the necessary permissions to operate within its directory, especially after manual binary installation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_7

LANGUAGE: shell
CODE:
```
sudo chown -R grafana:users /usr/local/grafana
```

----------------------------------------

TITLE: Displaying Field Errors with Form and Field Components (JavaScript/JSX)
DESCRIPTION: Demonstrates how to visually indicate form validation errors by using the errors object from react-hook-form. Wraps an input in a Field component and passes invalid and error props based on validation outcomes. This improves UX by connecting validation state to field presentation, requiring compatible Field and Input components.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_3

LANGUAGE: jsx
CODE:
```
<Field label="Name" invalid={!!errors.name} error="Name is required">
  <Input {...register('name', { required: true })} />
</Field>
```

----------------------------------------

TITLE: Implementing Dynamic Inputs with FieldArray in Grafana UI (JSX)
DESCRIPTION: This JSX snippet demonstrates how to use the deprecated `FieldArray` component from `@grafana/ui` within a `Form`. It shows how to map over the `fields` array (provided by the render prop) to render `Input` components for each item and how to use the `append` function (also from the render prop) with a `Button` to add new items to the array. It utilizes `control` and `register` from `react-hook-form`, passed down by the parent `Form` component.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/FieldArray.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { Form, FieldArray } from '@grafana/ui';

<Form onSubmit={() => console.log('form submitted')}>
  ({control, register}) => (
    <FieldArray control={control} name="People">
      {({ fields, append }) => (
          <div>
              {fields.map((field, index) => (
                  <div key={field.id}>
                      <Input key={index} {...register(`people[${index}].firstName` as const)} value={field.firstName} />
                      <Input {...register(`people[${index}].lastName` as const)} value={field.lastName} />
                  </div>
              ))}
              <Button onClick={() => append({firstName: 'Roger', lastName: 'Waters'})}>Append</Button>
          </div>
      )}
    </FieldArray>
  )
</Form>;
```

----------------------------------------

TITLE: Migrating from Knobs to Controls in TypeScript
DESCRIPTION: Provides an example of how to migrate a story from using Knobs to using Controls for interacting with component properties.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/storybook.md#2025-04-23_snippet_6

LANGUAGE: tsx
CODE:
```
import { Story } from '@storybook/react';
import { Props } from './Component';

export const Simple: Story<Props> = ({ prop1, prop2 }) => {
  return <Component prop1={prop1} prop2={prop2} />;
};

Simple.args = {
  prop1: 'Example text',
  prop2: 'option 1',
};

export default {
  title: 'Component/Component',
  component: Component,
  argTypes: {
    prop2: { control: { type: 'select', options: ['option1', 'option2'] } },
  },
};
```

----------------------------------------

TITLE: Implementing a Support Bundle Collector with Custom Collection Logic in Go
DESCRIPTION: This Go snippet implements a support bundle collector by defining a method on the UsageStats type that returns a configured supportbundles.Collector struct. The collector includes metadata for UI display as well as a function (Fn) that generates a JSON report file using usage stats, handling errors, and returns a supportbundles.SupportItem. Dependencies include context, encoding/json, and the service's own GetUsageReport method. Main inputs are the service context, outputs include a JSON file containing usage stats. The collector is configurable for inclusion defaults, and file constraints are minimal (any file extension possible).
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/support-bundles.md#2025-04-23_snippet_1

LANGUAGE: go
CODE:
```
func (uss *UsageStats) supportBundleCollector() supportbundles.Collector {
	return supportbundles.Collector{
		UID:               "usage-stats", // Unique ID for the collector
		DisplayName:       "Usage statistics", // Display name for the collector in the UI
		Description:       "Usage statistics of the Grafana instance", // Description for the collector in the UI
		IncludedByDefault: false, // Indicates whether the collector is included by default in the support bundle and can't be deselected. Usually you want this to be false.
		Default:           false, // Indicates whether the collector is selected by default in the support bundle. User can still deselect it.
		// Function that will actually collect the file during the support bundle generation.
		Fn: func(ctx context.Context) (*supportbundles.SupportItem, error) {
			// Add your service's logic to collect the information you need
			// In this example we collect the usage stats and place them appropriately in JSON
			// This helps us get information about the usage of the Grafana instance
			report, err := uss.GetUsageReport(context.Background())
			if err != nil {
				return nil, err
			}

			data, err := json.Marshal(report)
			if err != nil {
				return nil, err
			}

			return &supportbundles.SupportItem{
				// Filename of the file in the archive
				// Can be any extension (most commonly, .json and .md).
				Filename:  "usage-stats.json",
				FileBytes: data, // []byte of the file
			}, nil
		},
	}
}
```

----------------------------------------

TITLE: Assigning Grafana Admin Role via Keycloak (INI)
DESCRIPTION: Grafana configuration example for allowing specific Keycloak roles (e.g., `grafanaadmin`) to grant Grafana server administrator privileges. It modifies the `role_attribute_path` to map the designated role to Grafana's `GrafanaAdmin` role and requires setting `allow_assign_grafana_admin = true`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_7

LANGUAGE: ini
CODE:
```
role_attribute_path = contains(roles[*], 'grafanaadmin') && 'GrafanaAdmin' || contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'
allow_assign_grafana_admin = true
```

----------------------------------------

TITLE: Creating Kubernetes ConfigMap from Grafana Configuration (Bash)
DESCRIPTION: This command uses `kubectl` to create a Kubernetes ConfigMap named `ge-config`. The ConfigMap's data is sourced directly from the `grafana.ini` file located at the specified path (`/path/to/your/grafana.ini`). This makes the Grafana configuration available to the Grafana pod within the Kubernetes cluster. Requires `kubectl` installed and configured.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_42

LANGUAGE: bash
CODE:
```
```bash
kubectl create configmap ge-config --from-file=/path/to/your/grafana.ini
```
```

----------------------------------------

TITLE: Using ToolbarButtonRow with Multiple Button Types in JSX
DESCRIPTION: This example demonstrates how to use the ToolbarButtonRow component with various button configurations, including a text button, a button group, and an icon button. It shows how to set different variants and properties for each button within the row.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ToolbarButton/ToolbarButtonRow.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<ToolbarButtonRow>
  <ToolbarButton variant="default" iconOnly={false} isOpen={false}>
    Last 6 hours
  </ToolbarButton>
  <ButtonGroup>
    <ToolbarButton icon="search-minus" variant="default" />
    <ToolbarButton icon="search-plus" variant="default" />
  </ButtonGroup>
  <ToolbarButton icon="sync" isOpen={false} variant="primary" />
</ToolbarButtonRow>
```

----------------------------------------

TITLE: Integrating AutoSizeInput with Field Component in React JSX Forms
DESCRIPTION: This example shows how to wrap an `AutoSizeInput` within a `Field` component to leverage form features like labels and descriptions. The `AutoSizeInput` is given a `name` attribute ("importantInput") and marked as `required` for form validation. This pattern requires both the `Field` and `AutoSizeInput` components.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Input/AutoSizeInput.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<Field label="Important information" description="This information is very important, so you really need to fill it in">
  <AutoSizeInput name="importantInput" required />
</Field>
```

----------------------------------------

TITLE: Pushing the Release Branch and Tag using Git
DESCRIPTION: Pushes the local 'release-0.1.x' branch and the newly created annotated tag ('v0.1.0') to the remote Git repository named 'origin'. The '--set-upstream' option links the local branch to the remote branch for future pushes/pulls, and '--follow-tags' ensures tags pointing to the pushed commits are also sent.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/publish-your-plugin.md#2025-04-23_snippet_5

LANGUAGE: shell
CODE:
```
git push --set-upstream origin release-0.1.x --follow-tags
```

----------------------------------------

TITLE: Building the Grafana Plugin in Development Mode (Shell)
DESCRIPTION: Runs the development build script defined in the plugin's `package.json` (usually aliased to `yarn dev`). This typically involves compiling TypeScript/JavaScript, bundling assets using webpack, and watching for file changes for automatic rebuilding. Requires dependencies to be installed via `yarn install`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/create-plugin.md#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
yarn dev
```

----------------------------------------

TITLE: Using Hour Selection in Flux to Filter Data by Time of Day
DESCRIPTION: This Flux code snippet demonstrates the hourSelection function, which filters data to include only readings from a specific time range during the day. This is useful for excluding periods like overnight shutdowns from alerting conditions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_8

LANGUAGE: flux
CODE:
```
|> hourSelection(start: 7, stop: 23)
```

----------------------------------------

TITLE: Button with aria-label for Accessibility
DESCRIPTION: Example of a button with aria-label to provide context for screen readers.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_10

LANGUAGE: html
CODE:
```
<button aria-label="close">X<button>
```

----------------------------------------

TITLE: Defining GET Endpoint for Fetching Mute Timing - HTTP
DESCRIPTION: Specifies the HTTP GET endpoint to retrieve a specific mute timing configuration within Grafana by its unique name (provided as a path parameter). The endpoint is used to obtain detailed configuration for suppression periods or alert muting schedules, requiring a valid name for lookup.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_22

LANGUAGE: http
CODE:
```
GET /api/v1/provisioning/mute-timings/:name
```

----------------------------------------

TITLE: Starting a List using Hugo Shortcode
DESCRIPTION: This Hugo shortcode initiates a list structure (likely ordered or unordered) within the rendered Grafana documentation page. It's part of the Hugo templating system used for structuring content.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/manage-users/view-server-org-list-and-edit.md#2025-04-23_snippet_0

LANGUAGE: hugo
CODE:
```
{{< docs/list >}}
```

----------------------------------------

TITLE: Creating and Manipulating Collections with Namespaced Functions in Grafana Go Templates
DESCRIPTION: This example demonstrates use of namespaced collection utilities (coll.Dict, coll.Slice, coll.Append) to create dictionaries, build lists, and append new elements in Go templates. The snippet outlines dependency on coll namespace functions, available in suitable Grafana versions. Key parameters are dictionary keys/values and list items. Inputs and outputs include complex data structures for use in template logic such as loops and range operations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_10

LANGUAGE: go
CODE:
```
{{ define "collection.example" }}
{{- /* Create a dictionary of alert metadata */ -}}
{{- $metadata := coll.Dict
    "severity" "critical"
    "team" "infrastructure"
    "environment" "production"
-}}

{{- /* Create a slice of affected services */ -}}
{{- $services := coll.Slice "database" "cache" "api" -}}

{{- /* Append a new service to the list */ -}}
{{- $services = coll.Append "web" $services -}}

{{- /* Use the collections in a template */ -}}
Affected Services: {{ range $services }}{{ . }},{{ end }}

Alert Metadata:
{{- range $k, $v := $metadata }}
  {{ $k }}: {{ $v }}
{{- end }}
{{ end }}
```

----------------------------------------

TITLE: Importing Storybook and Component Dependencies in TypeScript
DESCRIPTION: Imports the `Meta` and `ArgTypes` components from `@storybook/blocks` for creating Storybook MDX documentation, and imports the `Space` component from its local file './Space' to be documented.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Space.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Meta, ArgTypes } from '@storybook/blocks';
import { Space } from './Space';
```

----------------------------------------

TITLE: Calculating Percentage Between Series with asPercent() in Graphite
DESCRIPTION: The `asPercent()` Graphite function calculates one series as a percentage of another (or a total). This example demonstrates its use with Grafana's query referencing, taking the results of query `#A` and query `#B` as input parameters to compute the percentage relationship between them.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/graphite/query_help.md#2025-04-23_snippet_4

LANGUAGE: Graphite Query Language
CODE:
```
asPercent(#A, #B)
```

----------------------------------------

TITLE: Tagging Translation Team in Crowdin Comments
DESCRIPTION: This snippet shows the specific tag (`@Translated`) to use when adding comments or feedback to translations within the Grafana OSS project on Crowdin. Using this tag ensures that the team responsible for linguistics and translations is notified about the feedback submitted in the 'Comments' section for a specific string.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_15

LANGUAGE: plaintext
CODE:
```
@Translated
```

----------------------------------------

TITLE: Backing Up Keycloak Database
DESCRIPTION: Command to dump the Keycloak database for backup purposes in the Grafana development environment.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/jwt_proxy/readme.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
cd devenv;
docker-compose exec -T oauthkeycloakdb bash -c "pg_dump -U keycloak keycloak" > docker/blocks/auth/jwt_proxy/cloak.sql
```

----------------------------------------

TITLE: Configuring Grafana to Assign a Fixed Role to All Users (INI)
DESCRIPTION: Grafana configuration snippet that assigns the 'Viewer' role to all users authenticating via this OAuth provider, irrespective of the information in the payload. It uses a JMESPath literal string ('Viewer') for `role_attribute_path` and ensures `skip_org_role_sync` is false.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_7

LANGUAGE: ini
CODE:
```
role_attribute_path = "'Viewer'"
skip_org_role_sync = false
```

----------------------------------------

TITLE: Disabling Angular Plugin Support in Grafana Configuration
DESCRIPTION: This configuration setting disables the loading of Angular-based plugins in Grafana as part of the Angular deprecation strategy. Setting `angular_support_enabled` to `false` in the Grafana configuration file prevents Angular plugins from being initialized and loaded. This change requires editing the Grafana configuration.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-1.md#2025-04-23_snippet_1

LANGUAGE: ini
CODE:
```
angular_support_enabled = false
```

----------------------------------------

TITLE: Embedding Image for Scheme Gradient Mode with Color Scheme using Hugo Shortcode
DESCRIPTION: This Hugo shortcode embeds an image showing a line chart utilizing the 'Scheme' gradient mode with the 'Green-Yellow-Red (by value)' color scheme selected. It generates an HTML figure containing the image, defining its source, maximum width, and alt text.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/visualizations/graph-styles-options.md#2025-04-23_snippet_1

LANGUAGE: Hugo Shortcode
CODE:
```
{{< figure src="/static/img/docs/time-series-panel/gradient_mode_scheme_line.png" max-width="1200px" alt="Color scheme: Green-Yellow-Red" >}}
```

----------------------------------------

TITLE: Dumping Grafana Pod Logs for Multi-Container Deployment via kubectl - Bash
DESCRIPTION: This command fetches logs for a specific container ('my-grafana') in a multi-container deployment using kubectl. Useful for troubleshooting deployments with sidecars or additional containers. Requires specifying both deployment and container via -c flag.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_21

LANGUAGE: bash
CODE:
```
# dump Pod logs for a Deployment (multi-container case)
kubectl logs --namespace=monitoring deploy/grafana -c my-grafana
```

----------------------------------------

TITLE: Using Struct Providers in Go with Wire
DESCRIPTION: Shows how to use wire.Struct to construct a struct type and specify which fields should be injected.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_7

LANGUAGE: go
CODE:
```
type Foo int
type Bar int

func ProvideFoo() Foo {/* ... */}

func ProvideBar() Bar {/* ... */}

type FooBar struct {
    MyFoo Foo
    MyBar Bar
}

var Set = wire.NewSet(
    ProvideFoo,
    ProvideBar,
    wire.Struct(new(FooBar), "MyFoo", "MyBar"))
```

----------------------------------------

TITLE: InfluxDB Line Protocol - Actuator Commands Data Point 2
DESCRIPTION: InfluxDB line protocol data point containing measurements for aircraft actuator states including angles, currents and brake positions. Timestamp: 1618400059173608000
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/mixed_number_types.txt#2025-04-23_snippet_1

LANGUAGE: influxdb
CODE:
```
avionics_actuator_ActuatorCommands,host=MacBook-Pro-Alexander.local surface_angle_deg_0=-16.4649525,pitch_brake_2=false,motor_current_A_10=42.0176544,pitch_brake_3=false,tailno="GHIL",pitch_deg_1=9.89322376,surface_angle_deg_2=11.1123266,pitch_deg_4=-16.7317562,tilt_brake_2=true,motor_current_A_8=36.8988419,tilt_deg_5=5.36965704,surface_angle_deg_4=17.8226891,surface_angle_deg_6=-0.707197368,tilt_deg_2=-20.144413,pitch_brake_5=true,pitch_deg_2=-2.82733965,tilt_brake_5=false,motor_current_A_1=5.20447683,pitch_brake_1=false,motor_current_A_9=-19.5628815,surface_angle_deg_1=-12.6342392,pitch_deg_3=-21i,tilt_brake_4=true,motor_current_A_6=8.51478672,motor_current_A_0=2.84927869,tilt_deg_0=2.93773961,tilt_brake_3=true,tilt_deg_1=-20.8846588,surface_angle_deg_3=8.33424473,tilt_deg_4=-28.9802303,pitch_deg_5=6.43800926,surface_angle_deg_7=28.5278912,motor_current_A_7=-17.6263618,recorder="fcc1",surface_angle_deg_5=-23.5173836,tilt_brake_0=true,motor_current_A_5=-5.96704578,tilt_deg_3=45.6446266,motor_current_A_11=11.097291,pitch_brake_0=true,surface_angle_deg_9=-27.9620895,motor_current_A_3=6.87531996,motor_current_A_4=23.7491093,pitch_deg_0=-29.835228,motor_current_A_2=6.56280565,pitch_brake_4=false,surface_angle_deg_8=-9.53332138,tilt_brake_1=true 1618400059173608000
```

----------------------------------------

TITLE: Deriving Global Custom Roles from Existing Roles in Grafana Provisioning - YAML
DESCRIPTION: This YAML snippet defines a global custom role that inherits permissions from existing fixed roles using the 'from' attribute. Explicit permission entries with 'state: absent' are used to exclude certain permissions from the inherited set. Requires Grafana provisioning, and roles must be correctly referenced in the file. Inputs include base roles and exclusion rules; the output is a global custom role with customized permission inheritance.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_4

LANGUAGE: yaml
CODE:
```
# config file version\napiVersion: 2\n\nroles:\n  - name: custom:org.users:writer\n    description: 'List and remove other users from the organization.'\n    version: 1\n    global: true\n    from:\n      - name: 'fixed:org.users:reader'\n        global: true\n      - name: 'fixed:org.users:writer'\n        global: true\n    permissions:\n      - action: 'org.users:write'\n        scope: 'users:*'\n        state: 'absent'\n      - action: 'org.users:add'\n        scope: 'users:*'\n        state: 'absent'\n
```

----------------------------------------

TITLE: Including Shared Documentation Content (Hugo)
DESCRIPTION: This Hugo shortcode `docs/shared` includes content from another file (`manage-users/view-server-user-list.md`). It specifies the source ('grafana') and uses a placeholder (`<GRAFANA VERSION>`) for the version, allowing content reuse across different documentation versions.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/manage-users/view-server-user-list-search.md#2025-04-23_snippet_1

LANGUAGE: hugo
CODE:
```
{{< docs/shared lookup="manage-users/view-server-user-list.md" source="grafana" version="<GRAFANA VERSION>" >}}
```

----------------------------------------

TITLE: Formatting Grafana Variables as Pipe-Separated String
DESCRIPTION: Illustrates the `:pipe` format option. This formats multi-value variables into a single string where values are separated by a pipe character (`|`). The example shows `['test1.', 'test2']` interpolated as `'test1.|test2'`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
servers = ['test1.', 'test2']
String to interpolate: '${servers:pipe}'
Interpolation result: 'test1.|test2'
```

----------------------------------------

TITLE: Using Hugo Section Shortcode for Content Structuring
DESCRIPTION: This snippet shows a Hugo shortcode `{{< section >}}` used within the Grafana documentation source files. It likely serves to define a logical section within the page content for structural organization when processed by the Hugo static site generator.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/_index.md#2025-04-23_snippet_0

LANGUAGE: go-template
CODE:
```
{{< section >}}
```

----------------------------------------

TITLE: Mapping SAML Assertion Attribute for User Name (Simple String)
DESCRIPTION: This INI configuration snippet demonstrates how to map the Grafana user's display name to a single attribute named 'displayName' received in the SAML assertion. This is a simple, direct mapping under the `[auth.saml]` section.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_4

LANGUAGE: ini
CODE:
```
#plain string mapping
assertion_attribute_name = displayName
```

----------------------------------------

TITLE: Defining Class Names in TypeScript
DESCRIPTION: Demonstrates the correct way to name classes using PascalCase in TypeScript.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
// bad
class dataLink {
  //...
}

// good
class DataLink {
  //...
}
```

----------------------------------------

TITLE: Including Shared Documentation for Disconnect Values using Hugo Shortcode
DESCRIPTION: This Hugo shortcode dynamically includes shared documentation content about disconnecting values based on thresholds from a separate file ('visualizations/disconnect-values.md'). Similar to the 'connect-null-values' shortcode, it uses parameters like 'source', 'version', and 'leveloffset' to retrieve the appropriate content for the Grafana version and integrate it seamlessly by adjusting heading levels. This ensures consistency and avoids content duplication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/visualizations/graph-styles-options.md#2025-04-23_snippet_3

LANGUAGE: Hugo Shortcode
CODE:
```
{{< docs/shared lookup="visualizations/disconnect-values.md" source="grafana" version="<GRAFANA_VERSION>" leveloffset="+1" >}}
```

----------------------------------------

TITLE: Embedding Subfolder Selection Image using Hugo Shortcode
DESCRIPTION: This Hugo shortcode is used in Grafana's documentation to display a screenshot demonstrating the new subfolder selection UI, specifically the folder picker. It defines the image source (`/media/docs/grafana/screenshot-grafana-10.1-subfolders-folder-picker.png`), its maximum width on the page (`750px`), and provides a descriptive caption (`Selecting a folder in Grafana`). This requires the `nestedFolders` feature toggle to be enabled.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-1.md#2025-04-23_snippet_2

LANGUAGE: hugo
CODE:
```
{{< figure src="/media/docs/grafana/screenshot-grafana-10.1-subfolders-folder-picker.png" max-width="750px" caption="Selecting a folder in Grafana" >}}
```

----------------------------------------

TITLE: Configuring Grafana Live Origins Example
DESCRIPTION: Configuration example showing how to set allowed origins for Grafana Live WebSocket connections. This allows connections from subdomains of example.com using HTTPS.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_27

LANGUAGE: ini
CODE:
```
[live]
allowed_origins = "https://*.example.com"
```

----------------------------------------

TITLE: Using Trans Component for Basic Translation in JSX
DESCRIPTION: Demonstrates the fundamental use of the `<Trans>` component from `app/core/internationalization` to mark a simple string with an interpolation variable (`pageTitle`) for translation in a React component. The `i18nKey` provides a unique identifier for the translation string.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Trans i18nKey="search-results.panel-link">Go to {{ pageTitle }}</Trans>
```

----------------------------------------

TITLE: Configuring Grafana HTTP Port in INI File
DESCRIPTION: Identifies the `http_port` configuration parameter within Grafana's INI configuration files (`sample.ini` or `custom.ini`). This setting determines the port Grafana listens on. It needs to be uncommented (by removing the leading semicolon) and set to the desired port number in `custom.ini`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/windows/index.md#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
http_port
```

----------------------------------------

TITLE: Stopping Grafana Server (init.d) - Shell
DESCRIPTION: Stops the Grafana server running under init.d script control. Suitable for older Linux distributions still using SysV init systems. Input: None. Output: Stops Grafana server started via init.d.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_14

LANGUAGE: shell
CODE:
```
sudo service grafana-server stop
```

----------------------------------------

TITLE: Implementing Method Signatures for Alphabetical Interface in Go
DESCRIPTION: Example of an interface definition that follows Grafana's command/query pattern guidelines. Shows method signatures that handle queries and commands with appropriate return types.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/communication.md#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
type Alphabetical interface {
  // GetLetter returns either an error or letter.
  GetLetter(context.Context, GetLetterQuery) (Letter, error)
  // ListCachedLetters cannot fail, and doesn't return an error.
  ListCachedLetters(context.Context, ListCachedLettersQuery) Letters
  // DeleteLetter doesn't have any return values other than errors, so it
  // returns only an error.
  DeleteLetter(context.Contxt, DeleteLetterCommand) error
}
```

----------------------------------------

TITLE: Moving Grafana Binary Directory using Shell
DESCRIPTION: Moves the unpacked Grafana binary directory from its download location (`<DOWNLOAD PATH>`) to the standard installation path `/usr/local/grafana`. Requires `sudo` privileges. This step is part of the manual binary installation process.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_6

LANGUAGE: shell
CODE:
```
sudo mv <DOWNLOAD PATH> /usr/local/grafana
```

----------------------------------------

TITLE: Accessing Span Tags with Dot Notation in Grafana Traces (Markdown)
DESCRIPTION: Illustrates how to access specific tags from a span, including handling cases where tag names contain dots by using bracket notation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/jaeger/_index.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
To access a specific tag named `version`, you would use `${__span.tags.version}`. In case the tag contains dot, you have to access it as `${__span.tags["http.status"]}`.
```

----------------------------------------

TITLE: Configuring Reserved Labels in Unified Alerting - Grafana INI
DESCRIPTION: Covers `[unified_alerting.reserved_labels]` for disabling specific reserved labels auto-added by the Grafana Alerting engine. Accepts a comma-separated list in `disabled_labels`. Used to suppress unwanted internal metadata like folder information from alerts.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_22

LANGUAGE: ini
CODE:
```
[unified_alerting.reserved_labels]
# Comma-separated list of reserved labels to disable
disabled_labels = grafana_folder

```

----------------------------------------

TITLE: Writing a Basic Cypress Login Test
DESCRIPTION: A TypeScript test example showing how to use the Login page object to visit the page and interact with elements.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
describe('Login test', () => {
  it('passes', () => {
    e2e.pages.Login.visit();
    // To prevent flaky tests, always do a `.should` on any selector that you expect to be in the DOM.
    // Read more here: https://docs.cypress.io/guides/core-concepts/retry-ability.html#Commands-vs-assertions
    e2e.pages.Login.username().should('be.visible').type('admin');
  });
});
```

----------------------------------------

TITLE: Retrieving All Kubernetes Objects in a Namespace - kubectl - Bash
DESCRIPTION: This command retrieves the status of all objects in the `monitoring` Kubernetes namespace. Used for cluster resource inspection and troubleshooting after Helm deployment. Requires access via `kubectl`.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
kubectl get all -n monitoring
```

----------------------------------------

TITLE: Enabling New Navigation via 'topnav' Feature Toggle (Plaintext)
DESCRIPTION: This represents the 'topnav' feature toggle key used in Grafana configuration. Setting this toggle enables the preview of the redesigned top navigation bar in Grafana Open Source and Enterprise editions (v9.4).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-4.md#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
topnav
```

----------------------------------------

TITLE: Revoking an Auth Token for Actual User via Grafana API (HTTP/JSON)
DESCRIPTION: Revokes a specific authentication token (identified by `authTokenId` in the JSON payload) for the currently authenticated user using a POST request to `/api/user/revoke-auth-token`. This logs out the corresponding device/session, requiring re-authentication. Requires authentication (Bearer Token shown). Returns a JSON success message.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_24

LANGUAGE: http
CODE:
```
POST /api/user/revoke-auth-token HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

{
  "authTokenId": 364
}
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{
  "message": "User auth token revoked"
}
```

----------------------------------------

TITLE: OData Filter Expression Examples
DESCRIPTION: Examples of OData filter expressions for Application Insights queries, demonstrating equality, inequality, and logical operators.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/azuremonitor/query_help.md#2025-04-23_snippet_2

LANGUAGE: odata
CODE:
```
client/city eq 'Boydton'
client/city ne 'Boydton'
client/city ne 'Boydton' and client/city ne 'Dublin'
client/city eq 'Boydton' or client/city eq 'Dublin'
```

----------------------------------------

TITLE: Organization List Response (Admin API) - JSON
DESCRIPTION: The JSON response for organization listings is an array of organization objects, each with id and name attributes. This is primarily used for administrative overviews, listing all Grafana organizations.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_21

LANGUAGE: json
CODE:
```
[\n  {\n    "id":1,\n    "name":"Main Org."\n  }\n]
```

----------------------------------------

TITLE: Accessing Grafana Explore Tab (Plaintext)
DESCRIPTION: Defines the `datasources:explore` permission action that enables access to the Explore tab in Grafana, allowing users to interactively query data sources. No specific scope dependencies are listed.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_18

LANGUAGE: plaintext
CODE:
```
`datasources:explore`
```

----------------------------------------

TITLE: Rotating Data Encryption Keys via Grafana Admin HTTP API - HTTP
DESCRIPTION: Issues an HTTP POST request to rotate all data encryption keys as part of Grafana's admin encryption config. There is no body in either request or response. On success, a 204 No Content status is returned, confirming the operation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_18

LANGUAGE: http
CODE:
```
POST /api/admin/encryption/rotate-data-keys HTTP/1.1\nAccept: application/json\nContent-Type: application/json
```

LANGUAGE: http
CODE:
```
HTTP/1.1 204\nContent-Type: application/json
```

----------------------------------------

TITLE: Importing ArgTypes from Storybook Blocks (TypeScript)
DESCRIPTION: Imports the `ArgTypes` component from the `@storybook/blocks` library. This component is typically used in Storybook MDX files to automatically generate and display documentation for a component's arguments (props).
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tooltip/Tooltip.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { ArgTypes } from '@storybook/blocks';
```

----------------------------------------

TITLE: Setting HTTP Service Host - Bash
DESCRIPTION: Defines the HTTP server's listening host for the image renderer using the HTTP_HOST environment variable. By default, it is unset and will use the local host. Useful when binding the service to a specific network interface.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
HTTP_HOST=localhost
```

----------------------------------------

TITLE: Setting Default Browser Timezone - JSON
DESCRIPTION: Sets the rendering.timezone field to establish a default timezone for headless browser renders. Accepts strings matching supported timezone IDs. Ensures rendered images are consistent with the desired locale.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_36

LANGUAGE: json
CODE:
```
{
  "rendering": {
    "timezone": "Europe/Stockholm"
  }
}
```

----------------------------------------

TITLE: Defining Delegate Permission Scope in Grafana RBAC
DESCRIPTION: This scope applies specifically to roles managing Access Control itself. `permissions:type:delegate` allows a user to delegate their own permissions (or a subset) by creating new roles or assignments.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_35

LANGUAGE: text
CODE:
```
permissions:type:delegate
```

----------------------------------------

TITLE: Publishing Events in a Grafana Service
DESCRIPTION: Example showing how to publish an event in Grafana so that other services can react to it. This demonstrates creating an event struct and using the event bus to publish it.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/communication.md#2025-04-23_snippet_4

LANGUAGE: go
CODE:
```
event := &events.StickersSentEvent {
    UserID: "taylor",
    Count:   1,
}
if err := s.bus.Publish(event); err != nil {
    return err
}
```

----------------------------------------

TITLE: SQL Query with Multiple Columns for Grafana Time Series
DESCRIPTION: This query demonstrates how to use multiple columns in a Grafana time series query. It groups time data and calculates both minimum and maximum values.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_6

LANGUAGE: sql
CODE:
```
SELECT
  $__timeGroupAlias(time_date_time, '5m'),
  min(value_double) as min_value,
  max(value_double) as max_value
FROM test_data
WHERE $__timeFilter(time_date_time)
GROUP BY time
ORDER BY 1
```

----------------------------------------

TITLE: Using seriesByTag Function in Graphite
DESCRIPTION: The seriesByTag function takes tag expressions (=, !=, =~, !=~) to filter timeseries when exploring data in Graphite. This helps narrow down the dataset when working with high-cardinality tags.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/query-editor/index.md#2025-04-23_snippet_0

LANGUAGE: graphite
CODE:
```
seriesByTag()
```

----------------------------------------

TITLE: Declaring and Assigning Variables in Go Templates
DESCRIPTION: Shows how to declare and initialize variables within a Go template using the `:=` operator. A variable (`$variable`) can be assigned the current context (`.`) or a literal value like a string.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_5

LANGUAGE: go
CODE:
```
{{ $variable := . }}
{{ $variable := "This is a test" }}
{{ $variable }}
```

----------------------------------------

TITLE: kubectl Output Example - List Playlists - Shell
DESCRIPTION: This shell output presents a sample table printed by kubectl upon listing Playlist resources, showing name, title, interval, and creation timestamp. Output is for verification and informational purposes.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_10

LANGUAGE: sh
CODE:
```
NAME                                   TITLE                              INTERVAL   CREATED AT\nu394j4d3-s63j-2d74-g8hf-958773jtybf2   Playlist with auto generated UID   5m         2023-12-14T13:53:35Z 
```

----------------------------------------

TITLE: Retrieving Team Members - HTTP
DESCRIPTION: Performs a GET request to the team members endpoint to list all members belonging to a specific team. Requires Bearer authentication. Returns a JSON array of user membership objects.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_10

LANGUAGE: http
CODE:
```
GET /api/teams/1/members HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt
```

----------------------------------------

TITLE: Executing Templates with Filtered Data Context in Go Templates
DESCRIPTION: Shows executing the same defined template (`"print_alerts"`) but passing a filtered subset of the data (e.g., `.Alerts.Firing`). This allows reusing the template logic for different data views.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_9

LANGUAGE: go
CODE:
```
{{ template "print_alerts" .Alerts.Firing }}
```

----------------------------------------

TITLE: Creating Custom Grafana Configuration File (Windows)
DESCRIPTION: Instructs copying the sample configuration file (`sample.ini`) to create a custom configuration file (`custom.ini`) within the `conf` directory. Customizations should be made in `custom.ini` to avoid being overwritten during upgrades.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/windows/index.md#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
copy sample.ini to custom.ini
```

----------------------------------------

TITLE: Docker Compose Log Filter Configuration
DESCRIPTION: Example showing how to configure log filters and level in a docker-compose.yaml file. Demonstrates setting specific log levels for different components like sqlstore and plugins.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_18

LANGUAGE: yaml
CODE:
```
GF_LOG_FILTERS: sqlstore:debug,plugins:info
GF_LOG_LEVEL: error
```

----------------------------------------

TITLE: kubectl Output Example - No Folder Resources Found - Shell
DESCRIPTION: This shell output message confirms the absence of any Folder resources when queried using kubectl in the default namespace.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_13

LANGUAGE: sh
CODE:
```
No resources found in default namespace.
```

----------------------------------------

TITLE: Checking Open File Limit on Unix
DESCRIPTION: This shell command checks the maximum number of open file descriptors allowed for the current user process on Unix-like systems. This limit affects the number of simultaneous connections (like WebSockets for Grafana Live) a process can handle.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-live.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
ulimit -n
```

----------------------------------------

TITLE: Deleting a Folder with HTTP DELETE Request
DESCRIPTION: Example HTTP DELETE request to remove an existing folder identified by UID. This operation deletes the folder along with all its dashboards and alerts. Requires 'folders:delete' permission.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_9

LANGUAGE: http
CODE:
```
DELETE /api/folders/nErXDvCkzz HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

```

----------------------------------------

TITLE: Basic Diff Response for Dashboard Comparison in Grafana HTTP API
DESCRIPTION: This HTTP response returns a simplified HTML summary of changes between two dashboard versions when using the 'basic' diff type.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_9

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: text/html; charset=UTF-8

<div class="diff-group">
  <!-- Diff omitted -->
</div>
```

----------------------------------------

TITLE: Enabling Kubernetes Playlists Feature Toggle in Grafana INI
DESCRIPTION: This INI configuration snippet enables the `kubernetesPlaylists` feature flag within Grafana's configuration file (e.g., `custom.ini`). This toggle is necessary to activate the Kubernetes-compatible API server features related to managing playlists.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/README.md#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[feature_toggles]
kubernetesPlaylists = true
```

----------------------------------------

TITLE: Implementing React Component DefaultProps
DESCRIPTION: Demonstrates the correct way to implement defaultProps in a React component with proper typing.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
// bad
static defaultProps = { ... }

// good
static defaultProps: Partial<Props> = { ... }
```

----------------------------------------

TITLE: Including Axis Options Documentation using Hugo Shortcode
DESCRIPTION: This Hugo shortcode includes shared documentation content for axis options from `visualizations/axis-options-2.md`. The `leveloffset="+1"` parameter adjusts heading levels. Dependencies include Hugo and the referenced file.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/candlestick/index.md#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
{{< docs/shared lookup="visualizations/axis-options-2.md" source="grafana" version="<GRAFANA_VERSION>" leveloffset="+1" >}}
```

----------------------------------------

TITLE: Dashboard Permissions Update Response
DESCRIPTION: Example response from the POST permissions API endpoint showing a successful update. It returns a simple message confirming the permissions were updated.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_permissions.md#2025-04-23_snippet_3

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Content-Length: 35

{"message":"Dashboard permissions updated"}
```

----------------------------------------

TITLE: Setting Profiling Environment Variables (Bash)
DESCRIPTION: Examples of environment variables to configure profiling settings for Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
export GF_DIAGNOSTICS_PROFILING_ENABLED=true
export GF_DIAGNOSTICS_PROFILING_ADDR=0.0.0.0
export GF_DIAGNOSTICS_PROFILING_PORT=8080
export GF_DIAGNOSTICS_PROFILING_BLOCK_RATE=5
export GF_DIAGNOSTICS_PROFILING_MUTEX_RATE=5
```

----------------------------------------

TITLE: Enabling URL Login for JWT Authentication
DESCRIPTION: Configuration to enable JWT authentication from URL query parameter, which allows authentication tokens to be passed in the URL for iframe embedding scenarios.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_4

LANGUAGE: ini
CODE:
```
# [auth.jwt]
# ...
url_login = true # enable JWT authentication in the URL
```

----------------------------------------

TITLE: Backing Up Keycloak Database
DESCRIPTION: Docker command to dump the Keycloak database for backup purposes in the development environment.
SOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/oauth/readme.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
cd devenv;
docker-compose exec -T oauthkeycloakdb bash -c "pg_dump -U keycloak keycloak" > docker/blocks/auth/oauth/cloak.sql
```

----------------------------------------

TITLE: Processing OpenAPI Files - Bash
DESCRIPTION: Command to process OpenAPI files without generating RTK API clients, useful for separate client generation workflows.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/tests/apis/openapi_snapshots/README.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
yarn process-specs
```

----------------------------------------

TITLE: Checking Prometheus Service Status (Linux/systemd)
DESCRIPTION: This command uses 'systemctl', the systemd service manager tool on Linux, to check the current status of the 'prometheus' service. It helps determine if the Prometheus service is active (running), inactive (dead), or in a failed state.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
sudo systemctl status prometheus
```

----------------------------------------

TITLE: Reading Notification Policies (Routes) in Grafana RBAC
DESCRIPTION: Specifies the RBAC permission required to read notification policies (also known as routes) which determine how alerts are routed in Grafana. No specific associated scopes are listed (n/a).
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_8

LANGUAGE: plaintext
CODE:
```
`alert.notifications.routes:read`
```

----------------------------------------

TITLE: Initializing Empty Struct in Go
DESCRIPTION: Creates an empty struct in Go using the address-of operator (&) with empty curly braces. This is a common pattern for initializing structs with default values.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/StructPointer/want/program_out.txt#2025-04-23_snippet_0

LANGUAGE: go
CODE:
```
41 1 &{}
```

----------------------------------------

TITLE: Initializing ElasticSearch Development Environment
DESCRIPTION: Development environment setup commands for working with ElasticSearch data source in Grafana. Includes options for specifying ElasticSearch version.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/elasticsearch/docs/developer_documentation.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
make devenv sources=elastic
make devenv sources=elastic elastic_version=7.17.0
```

----------------------------------------

TITLE: Viewing Trace in Web Browser (Go)
DESCRIPTION: Command to view a collected trace file using the Go trace tool in a web browser.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
go tool trace <trace file>
```

----------------------------------------

TITLE: Collecting CPU Profile (Bash)
DESCRIPTION: Command to collect a 30-second CPU profile using curl.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
curl 'http://<profile-addr>:<profile-port>/debug/pprof/profile?seconds=30' > profile.pprof
```

----------------------------------------

TITLE: Analyzing Heap Profiles (Go)
DESCRIPTION: Command to compare two heap profiles using the Go pprof tool.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
go tool pprof -http=localhost:8081 --base heap1.pprof heap2.pprof
```

----------------------------------------

TITLE: Updating Current User Preferences via HTTP API - HTTP
DESCRIPTION: Performs a complete replacement of the current user's preferences in Grafana via a PUT request. Requires Bearer token authentication, and expects a JSON body describing the desired preferences fields such as theme, dashboard UID, and timezone. A valid request returns a success message. Ensure all necessary settings are set explicitly because omitted fields revert to system defaults.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_2

LANGUAGE: http
CODE:
```
PUT /api/user/preferences HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  "theme": "",\n  "homeDashboardUID":"home",\n  "timezone":"utc"\n}
```

----------------------------------------

TITLE: Deleting a Playlist via Grafana HTTP API
DESCRIPTION: Sends a DELETE request to `/api/playlists/:uid` to delete a specific playlist identified by its UID. Requires an `Authorization` header with a bearer token. Returns an empty JSON object on successful deletion.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/playlist.md#2025-04-23_snippet_5

LANGUAGE: http
CODE:
```
DELETE /api/playlists/1 HTTP/1.1
Accept: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json
{}
```

----------------------------------------

TITLE: Deleting a Service Account - Grafana HTTP API - HTTP
DESCRIPTION: This snippet details how to delete a service account from Grafana using the DELETE endpoint, authenticated via Basic Auth. Only the ID of the service account is required in the URI. The expected JSON response confirms successful deletion via a message property.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_4

LANGUAGE: http
CODE:
```
DELETE /api/serviceaccounts/2 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=
```

LANGUAGE: http
CODE:
```
HTTP/1.1 200\nContent-Type: application/json\n\n{\n\t"message": "Service account deleted"\n}
```

----------------------------------------

TITLE: Setting Tracing Environment Variables (Bash)
DESCRIPTION: Examples of environment variables to configure tracing settings for Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
export GF_DIAGNOSTICS_TRACING_ENABLED=true
export GF_DIAGNOSTICS_TRACING_FILE=/tmp/trace.out
```

----------------------------------------

TITLE: Referencing Data Sources Mock Path in TypeScript
DESCRIPTION: File path reference for mock data source setup functions in Grafana alerting tests.
SOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/alerting/unified/TESTING.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
public/app/features/alerting/unified/testSetup/datasources.ts
```

----------------------------------------

TITLE: Kubernetes Integration Tests Overview in Markdown
DESCRIPTION: Documentation header explaining the purpose of the directory containing Kubernetes API integration tests for Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/tests/apis/README.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
# K8s integration tests

This directory contains integration tests the k8s api services
```

----------------------------------------

TITLE: Defining ProvisionedAlertRule Struct in Go
DESCRIPTION: This code snippet represents the Go struct definition for ProvisionedAlertRule. It includes various fields such as annotations, condition, data, and other properties related to alert rule configuration in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_41

LANGUAGE: go
CODE:
```
type ProvisionedAlertRule struct {
    Annotations  map[string]string  `json:"annotations,omitempty"`
    Condition    string              `json:"condition"`
    Data         []*AlertQuery       `json:"data"`
    ExecErrState string              `json:"execErrState"`
    FolderUID    string              `json:"folderUID"`
    For          Duration            `json:"for"`
    ID           int64               `json:"id,omitempty"`
    IsPaused     bool                `json:"isPaused,omitempty"`
    Labels       map[string]string  `json:"labels,omitempty"`
    NoDataState  string              `json:"noDataState"`
    OrgID        int64               `json:"orgID"`
    Provenance   Provenance          `json:"provenance,omitempty"`
    RuleGroup    string              `json:"ruleGroup"`
}
```

----------------------------------------

TITLE: Getting Users in an Organization via Grafana API (HTTP)
DESCRIPTION: Example HTTP GET request to retrieve a list of users belonging to a specific Grafana organization identified by `:orgId`. This operation requires Basic Authentication (e.g., http://admin:admin@localhost:3000/api/orgs/1/users) and the `org.users:read` permission with the `users:*` scope.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_26

LANGUAGE: http
CODE:
```
GET /api/orgs/1/users HTTP/1.1
Accept: application/json
Content-Type: application/json
```

----------------------------------------

TITLE: Enabling Profiling with Block and Mutex Profiling (Bash)
DESCRIPTION: Command to start Grafana server with profiling enabled, including block and mutex profiling at 20% fraction.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
./grafana server -profile -profile-addr=0.0.0.0 -profile-port=8080 -profile-block-rate=5 -profile-mutex-rate=5
```

----------------------------------------

TITLE: Select Component with Custom Value - Before
DESCRIPTION: Previous implementation of Select component with custom value support
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/CHANGELOG.md#2025-04-23_snippet_2

LANGUAGE: JSX
CODE:
```
import { Select } from '@grafana/ui';
...
<Select
...
allowCustomValue
/>
```

----------------------------------------

TITLE: Defining Release Notes Metadata with YAML Frontmatter - YAML
DESCRIPTION: The snippet establishes structured frontmatter at the top of the file for Grafana 7.4.5 release notes, specifying build settings, product labels (cloud, enterprise, oss), and a title field. This metadata is intended for static site generators or changelog tooling. No code dependencies are required; it is a pure YAML configuration. Inputs include boolean flags and string lists, used to classify and contextualize the subsequent notes. Output is a structured data section, typically parsed automatically.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-4-5.md#2025-04-23_snippet_0

LANGUAGE: YAML
CODE:
```
---\n_build:\n  list: false\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Release notes for Grafana 7.4.5\n---
```

----------------------------------------

TITLE: Changing User Password via Grafana Admin HTTP API - HTTP
DESCRIPTION: This snippet demonstrates an HTTP PUT request to update the password of a specific Grafana user via the admin API. Basic Authentication and the required permission scope must be used. It accepts a JSON body with a new "password" value and expects a JSON confirmation message in response.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_10

LANGUAGE: http
CODE:
```
PUT /api/admin/users/2/password HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{"password":"userpassword"}
```

LANGUAGE: json
CODE:
```
{"message": "User password updated"}
```

----------------------------------------

TITLE: Rendering LinkButton Components as Anchor Buttons with React in Storybook (TSX)
DESCRIPTION: This snippet shows how to use the LinkButton component to create anchor tags styled as buttons for navigation, using the 'href' prop and different sizes. Placed inside ExampleFrame for a visual preview, it demonstrates best practices for integrating navigation links into button groups in a React Storybook MDX context. The LinkButton must accept href and style props, outputting anchor elements styled like buttons of different sizes.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Button/Button.mdx#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
<ExampleFrame>\n  <LinkButton href=\"/\" size=\"sm\" style={{ margin: '5px' }}>\n    {'Small'}\n  </LinkButton>\n  <LinkButton href=\"/\" size=\"md\" style={{ margin: '5px' }}>\n    {'Medium'}\n  </LinkButton>\n  <LinkButton href=\"/\" size=\"lg\" style={{ margin: '5px' }}>\n    {'Large'}\n  </LinkButton>\n</ExampleFrame>
```

----------------------------------------

TITLE: Initializing AsyncSelect with Asynchronous Options Loading in React and @grafana/ui (JSX)
DESCRIPTION: Demonstrates the usage of AsyncSelect to load options asynchronously using a loadOptions prop and handling defaultOptions in React. Requires the @grafana/ui AsyncSelect component and React useState. Key inputs are the asynchronous loader and current value; output is the rendered AsyncSelect with dynamically loaded options. Set defaultOptions to true for initial load when mounted.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Select/Select.mdx#2025-04-23_snippet_3

LANGUAGE: jsx
CODE:
```

import { AsyncSelect } from '@grafana/ui';

const basicSelectAsync = () => {
  const [value, setValue] = useState<SelectableValue<string>>();

  return (
    <AsyncSelect
      loadOptions={loadAsyncOptions}
      defaultOptions
      value={value}
      onChange={v => {
        setValue(v);
      }}
    />
  );
};
```

----------------------------------------

TITLE: Defining a SQL Server Stored Procedure for Time-Grouped Data Aggregation
DESCRIPTION: This SQL script defines a stored procedure named `sp_test_datetime` in Microsoft SQL Server. It accepts two `datetime` parameters, `@from` and `@to`, representing a time range. The procedure queries a table `metric_values`, calculates the average of `valueOne` and `valueTwo` separately, grouping results into 10-minute intervals (calculated using `DATEDIFF` and integer casting to mimic Grafana's time grouping). It combines the results for both values using `UNION ALL` and orders them by time. This prepares data suitable for time-series visualization in Grafana.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_14

LANGUAGE: sql
CODE:
```
CREATE PROCEDURE sp_test_datetime(
  @from datetime,
  @to 	datetime
)	AS
BEGIN
  SELECT
    cast(cast(DATEDIFF(second, {d '1970-01-01'}, time)/600 as int)*600 as int) as time,
    measurement + ' - value one' as metric,
    avg(valueOne) as value
  FROM
    metric_values
  WHERE
    time >= @from AND time <= @to
  GROUP BY
    cast(cast(DATEDIFF(second, {d '1970-01-01'}, time)/600 as int)*600 as int),
    measurement
  UNION ALL
  SELECT
    cast(cast(DATEDIFF(second, {d '1970-01-01'}, time)/600 as int)*600 as int) as time,
    measurement + ' - value two' as metric,
    avg(valueTwo) as value
  FROM
    metric_values
  WHERE
    time >= @from AND time <= @to
  GROUP BY
    cast(cast(DATEDIFF(second, {d '1970-01-01'}, time)/600 as int)*600 as int),
    measurement
  ORDER BY 1
END

```

----------------------------------------

TITLE: Rendering TextLink with Custom External Icon in React (JSX)
DESCRIPTION: This snippet demonstrates customizing the icon of an external TextLink by providing the icon prop, here set to 'google'. Dependencies: the TextLink React component with props href for destination URL, external to mark it as outside, and icon specifying which icon to display. Input parameters include href (the link's URL), icon (icon name like 'google'), and external flag. Output is a link rendered with user-selected icon instead of default. The icon prop must reference an icon available in the Grafana UI icon library.
SOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Link/TextLink.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
<TextLink href=\"https://google.es\" icon=\"google\" external>\n  This an external with a specific icon\n</TextLink>
```

----------------------------------------

TITLE: Set User Role Assignments Response
DESCRIPTION: Success response for bulk role assignment update operation.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_24

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8

{
    "message": "User roles have been updated."
}
```

----------------------------------------

TITLE: Defining TimeInterval Structure in Go
DESCRIPTION: Defines the TimeInterval structure with properties for specifying time intervals, including days, months, times, and weekdays.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_49

LANGUAGE: go
CODE:
```
**Properties**

{{% responsive-table %}}

| Name            | Type                       | Go type        | Required | Default | Description | Example |
| --------------- | -------------------------- | -------------- | :------: | ------- | ----------- | ------- |
| `days_of_month` | []string                   | []string       |          |         |             |         |
| `location`      | string                     | string         |          |         |             |         |
| `months`        | []string                   | []string       |          |         |             |         |
| `times`         | [][TimeRange](#time-range) | `[]*TimeRange` |          |         |             |         |
| `weekdays`      | []string                   | []string       |          |         |             |         |
| `years`         | []string                   | []string       |          |         |             |         |

{{% /responsive-table %}}
```

----------------------------------------

TITLE: Defining Grafana Plugin Signature Manifest - JSON
DESCRIPTION: This JSON object provides a manifest describing a Grafana plugin for cryptographic signing, including metadata such as manifestVersion, plugin name, version, timestamps, signing keys, and the SHA256 checksums of files within the plugin. Dependencies include a Grafana-compatible signing/verifying process and the consumer should expect this to be followed by a PGP signature for verification. Required fields are the manifestVersion, plugin name, file hash dictionary, and related metadata. The primary input is a plugin build, and the output is a manifest to be consumed by signature verification tools. Any changes in file integrity or metadata would require updating this manifest and resigning.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/pluginsintegration/pluginassets/testdata/module-hash-no-module-js/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "manifestVersion": "2.0.0",
  "signatureType": "grafana",
  "signedByOrg": "grafana",
  "signedByOrgName": "Grafana Labs",
  "plugin": "test-app",
  "version": "1.0.0",
  "time": 1726230812215,
  "keyId": "7e4d0c6a708866e7",
  "files": {
    "plugin.json": "31f04aceb2a9b14c2e501f38a4de5ab1c7a3e7306f58353fa5c1a86b716c971c",
    "something.js": "266c19bc148b22ddef2a288fc5f8f40855bda22ccf60be53340b4931e469ae2a"
  }
}
```

----------------------------------------

TITLE: Initialize Terraform Working Directory
DESCRIPTION: Shell command to initialize Terraform working directory and install the Grafana provider.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_9

LANGUAGE: shell
CODE:
```
terraform init
```

----------------------------------------

TITLE: Signing Plugin Metadata with PGP - JSON inside PGP Block - JavaScript/JSON
DESCRIPTION: This snippet showcases a JSON object that specifies plugin metadata for a Grafana plugin, including name, version, file hashes, and a keyId for signing. It relies on no explicit dependencies but assumes PGP-compatible tools are available for signature verification. The JSON section is wrapped between PGP markers (-----BEGIN PGP SIGNED MESSAGE----- and -----END PGP SIGNATURE-----), with a detached PGP signature appended, allowing consumers to verify the integrity and authenticity of the metadata using the provided keyId. Inputs are the metadata fields, outputs are the verifiable signed message and its cryptographic signature.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/lacking-files/plugin/MANIFEST.txt#2025-04-23_snippet_0

LANGUAGE: JSON
CODE:
```
-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n{\n  "plugin": "test",\n  "version": "1.0.0",\n  "files": {\n    "executable": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",\n    "plugin.json": "f19e18ca5dec690b94f2ff7866372db4bc63f4ff1101ee5d9061b9a6f026f6dd"\n  },\n  "time": 1589270570251,\n  "keyId": "7e4d0c6a708866e7"\n}\n-----BEGIN PGP SIGNATURE-----\nVersion: OpenPGP.js v4.10.1\nComment: https://openpgpjs.org\n\nwqIEARMKAAYFAl66WCoACgkQfk0ManCIZuf8zwIJAWBVDJyzqchZ/DN7ZDCy\nKyb63CajW/XdgHalPDB0sZ/80ExjCSprkFYPL+hUlTUHIXh+jGkfnYpMoqWA\nOm77bFc2AgkBV8HTsuRw/lXUezKnDuXcgUIvHvEwKWTvtbLgcuMXMDAVAEBj\nisBWmA8xvUfMzgQ9CJUHAaJ6hf1erpE4BuBqtMM=\n=uBIX\n-----END PGP SIGNATURE-----
```

----------------------------------------

TITLE: Error Message for Wire Bind Function in Go
DESCRIPTION: An error message from the Go compiler or Wire framework indicating that the Bind function was called incorrectly. The function expects a pointer to an interface as its first argument, but a string was provided instead.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/InterfaceBindingInvalidArg0/want/wire_errs.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
example.com/foo/wire.go:x:y: first argument to Bind must be a pointer to an interface type; found string
```

----------------------------------------

TITLE: Example Response for Deleting a User from an Organization (HTTP/JSON)
DESCRIPTION: Example successful HTTP response (200 OK) after removing a user from a Grafana organization. The JSON response body confirms the removal.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_33

LANGUAGE: http
CODE:
```
HTTP/1.1 200
Content-Type: application/json

{"message":"User removed from organization"}
```

----------------------------------------

TITLE: Unstarring a Query in Grafana Query History (HTTP Request)
DESCRIPTION: This snippet shows an example HTTP DELETE request to remove the starred status from a specific query history entry identified by its UID. Authentication is required.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_10

LANGUAGE: http
CODE:
```
DELETE /api/query-history/star/P8zM2I1nz  HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Handling Plurals with 't' Function using 'count' Option in JavaScript
DESCRIPTION: Demonstrates using the `t` function for pluralization in plain JavaScript. The `count` is passed within the options object (third argument), and the `{{count}}` placeholder is used in the default string. The `i18nKey` (`inbox.heading`) guides i18next to select the correct plural form. Requires `t` import.
SOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_12

LANGUAGE: js
CODE:
```
import { t } from 'app/core/internationalization';

const translatedString = t('inbox.heading', 'You got {{count}} messages', { count: messages.length });
```

----------------------------------------

TITLE: Querying Elasticsearch Terms Ordered by Document Count (JSON)
DESCRIPTION: This JSON query retrieves terms from the `hostname` field in Elasticsearch for a Grafana template variable. The `"orderBy": "doc_count"` parameter sorts the results by the number of documents containing each term, in descending order by default (Top-N). This is useful for populating a variable with the most frequent values.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/elasticsearch/template-variables/index.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
```
{"find": "terms", "field": "hostname", "orderBy": "doc_count"}
```
```

----------------------------------------

TITLE: Getting Dashboard Permissions with HTTP API
DESCRIPTION: This snippet demonstrates how to make a GET request to retrieve all existing permissions for a dashboard using its UID. It includes the required headers for authentication.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_permissions.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
GET /api/dashboards/uid/dHEquNzGz/permissions HTTP/1.1
Accept: application/json
Content-Type: application/json
Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk
```

----------------------------------------

TITLE: Displaying Organization Name in Go Template
DESCRIPTION: This Go template snippet inserts the value of the `.OrgName` variable from the provided context data into the email body. It's used to display the name of the Grafana organization the recipient is invited to. Requires the Go templating engine and the `.OrgName` variable in the context.
SOURCE: https://github.com/grafana/grafana/blob/main/public/emails/new_user_invite.txt#2025-04-23_snippet_1

LANGUAGE: gotemplate
CODE:
```
{{.OrgName}}
```

----------------------------------------

TITLE: Updated Event Initializer with Error Handling in Go
DESCRIPTION: Modifies the NewEvent function to return an error if the Greeter is grumpy, demonstrating how Wire handles error cases.
SOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_9

LANGUAGE: go
CODE:
```
func NewEvent(g Greeter) (Event, error) {
    if g.Grumpy {
        return Event{}, errors.New("could not create event: event greeter is grumpy")
    }
    return Event{Greeter: g}, nil
}
```

----------------------------------------

TITLE: Configuring Webhook Contact Point - YAML
DESCRIPTION: Configures a generic webhook integration for Grafana alerts. Requires a target URL and supports HTTP method, authentication, TLS settings, alert limits, and an HMAC configuration for signed requests. Provides extensive customization for outbound webhooks, security via TLS and HMAC, and limits on the number of alerts per payload. Outputs HTTP requests to the specified endpoint.
SOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_21

LANGUAGE: yaml
CODE:
```
type: webhook\nsettings:\n  # <string, required>\n  url: https://endpoint_url\n  # <string> options: POST, PUT\n  httpMethod: POST\n  # <string>\n  username: abc\n  # <string>\n  password: abc123\n  # <string>\n  authorization_scheme: Bearer\n  # <string>\n  authorization_credentials: abc123\n  # <string>\n  maxAlerts: '10'\n  # <map>\n  tlsConfig:\n    # <bool>\n    insecureSkipVerify: false\n    # <string>\n    clientCertificate: certificate in PEM format\n    # <string>\n    clientKey: key in PEM format\n    # <string>\n    caCertificate: CA certificate in PEM format\n  hmacConfig:\n    #<string>\n    secret: secret-key\n    #<string>\n    header: X-Grafana-Alerting-Signature\n    #<string>\n    timestampHeader: X-Grafana-Alerting-Signature-Timestamp\n
```