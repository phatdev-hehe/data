TITLE: Installing Oh My Zsh using wget (Shell)
DESCRIPTION: Command to install Oh My Zsh using wget. This fetches the installation script from the official repository and executes it.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
sh -c "$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
```

----------------------------------------

TITLE: Defining Kubernetes Aliases with Oh My Zsh - Shell
DESCRIPTION: This snippet presents a Markdown-formatted table listing various Oh My Zsh aliases mapped to their full kubectl command equivalents and explanations. It enables shell users to quickly execute complex or repetitive kubectl commands through short aliases, promoting efficient Kubernetes administration. Aliases cover a breadth of Kubernetes management areas, such as pods, services, ingress, namespaces, ConfigMaps, secrets, and deployments, with groupings for organization; inputs are shell commands and outputs are improved command-line workflows.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectl/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
| Alias    | Command                                            | Description                                                                                      |\n| :------- | :------------------------------------------------- | :----------------------------------------------------------------------------------------------- |\n| k        | `kubectl`                                          | The kubectl command                                                                              |\n| kca      | `kubectl --all-namespaces`                         | The kubectl command targeting all namespaces                                                     |\n| kaf      | `kubectl apply -f`                                 | Apply a YML file                                                                                 |\n| keti     | `kubectl exec -ti`                                 | Drop into an interactive terminal on a container                                                 |\n|          |                                                    | **Manage configuration quickly to switch contexts between local, dev and staging**               |\n| kcuc     | `kubectl config use-context`                       | Set the current-context in a kubeconfig file                                                     |\n| kcsc     | `kubectl config set-context`                       | Set a context entry in kubeconfig                                                                |\n| kcdc     | `kubectl config delete-context`                    | Delete the specified context from the kubeconfig                                                 |\n| kccc     | `kubectl config current-context`                   | Display the current-context                                                                      |\n| kcgc     | `kubectl config get-contexts`                      | List of contexts available                                                                       |\n|          |                                                    | **General aliases**                                                                              |\n| kdel     | `kubectl delete`                                   | Delete resources by filenames, stdin, resources and names, or by resources and label selector    |\n| kdelf    | `kubectl delete -f`                                | Delete a pod using the type and name specified in -f argument                                    |\n|          |                                                    | **Pod management**                                                                               |\n| kgp      | `kubectl get pods`                                 | List all pods in ps output format                                                                |\n| kgpl     | `kgp -l`                                           | Get pods by label. Example: `kgpl \"app=myapp\" -n myns`                                           |\n| kgpn     | `kgp -n`                                           | Get pods by namespace. Example: `kgpn kube-system`                                               |\n| kgpsl    | `kubectl get pods --show-labels`                   | List all pods in ps output format with labels                                                    |\n| kgpw     | `kgp --watch`                                      | After listing/getting the requested object, watch for changes                                    |\n| kgpwide  | `kgp -o wide`                                      | Output in plain-text format with any additional information. For pods, the node name is included |\n| kep      | `kubectl edit pods`                                | Edit pods from the default editor                                                                |\n| kdp      | `kubectl describe pods`                            | Describe all pods                                                                                |\n| kdelp    | `kubectl delete pods`                              | Delete all pods matching passed arguments                                                        |\n|          |                                                    | **Service management**                                                                           |\n| kgs      | `kubectl get svc`                                  | List all services in ps output format                                                            |\n| kgsw     | `kgs --watch`                                      | After listing all services, watch for changes                                                    |\n| kgswide  | `kgs -o wide`                                      | After listing all services, output in plain-text format with any additional information          |\n| kes      | `kubectl edit svc`                                 | Edit services(svc) from the default editor                                                       |\n| kds      | `kubectl describe svc`                             | Describe all services in detail                                                                  |\n| kdels    | `kubectl delete svc`                               | Delete all services matching passed argument                                                     |\n|          |                                                    | **Ingress management**                                                                           |\n| kgi      | `kubectl get ingress`                              | List ingress resources in ps output format                                                       |\n| kei      | `kubectl edit ingress`                             | Edit ingress resource from the default editor                                                    |\n| kdi      | `kubectl describe ingress`                         | Describe ingress resource in detail                                                              |\n| kdeli    | `kubectl delete ingress`                           | Delete ingress resources matching passed argument                                                |\n|          |                                                    | **Namespace management**                                                                         |\n| kgns     | `kubectl get namespaces`                           | List the current namespaces in a cluster                                                         |\n| kcn      | `kubectl config set-context --current --namespace` | Change current namespace                                                                         |\n| kens     | `kubectl edit namespace`                           | Edit namespace resource from the default editor                                                  |\n| kdns     | `kubectl describe namespace`                       | Describe namespace resource in detail                                                            |\n| kdelns   | `kubectl delete namespace`                         | Delete the namespace. WARNING! This deletes everything in the namespace                          |\n|          |                                                    | **ConfigMap management**                                                                         |\n| kgcm     | `kubectl get configmaps`                           | List the configmaps in ps output format                                                          |\n| kecm     | `kubectl edit configmap`                           | Edit configmap resource from the default editor                                                  |\n| kdcm     | `kubectl describe configmap`                       | Describe configmap resource in detail                                                            |\n| kdelcm   | `kubectl delete configmap`                         | Delete the configmap                                                                             |\n|          |                                                    | **Secret management**                                                                            |\n| kgsec    | `kubectl get secret`                               | Get secret for decoding                                                                          |\n| kdsec    | `kubectl describe secret`                          | Describe secret resource in detail                                                               |\n| kdelsec  | `kubectl delete secret`                            | Delete the secret                                                                                |\n|          |                                                    | **Deployment management**                                                                        |\n| kgd      | `kubectl get deployment`                           | Get the deployment                                                                               |\n| kgdw     | `kgd --watch`                                      | After getting the deployment, watch for changes                                                  |\n| kgdwide  | `kgd -o wide`                                      | After getting the deployment, output in plain-text format with any additional information        |\n| ked      | `kubectl edit deployment`                          | Edit deployment resource from the default editor                                                 |\n| kdd      | `kubectl describe deployment`                      | Describe deployment resource in detail                                                           |\n| kdeld    | `kubectl delete deployment`                        | Delete the deployment                                                                            |\n| ksd      | `kubectl scale deployment`                         | Scale a deployment                                                                               |
```

----------------------------------------

TITLE: Manual Installation Steps for Oh My Zsh
DESCRIPTION: Steps to manually install Oh My Zsh including cloning the repository, optionally backing up the existing .zshrc file, creating a new zsh configuration file, changing the default shell, and initializing the new configuration.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_14

LANGUAGE: sh
CODE:
```
git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh
```

LANGUAGE: sh
CODE:
```
cp ~/.zshrc ~/.zshrc.orig
```

LANGUAGE: sh
CODE:
```
cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
```

LANGUAGE: sh
CODE:
```
chsh -s $(which zsh)
```

----------------------------------------

TITLE: Validating JSON Structure via is_json Command (Console)
DESCRIPTION: Shows how to validate JSON content from a file using the 'is_json' command. Outputs 'true' or 'false' and returns an exit code indicating the validity. Useful for schema conformance checks in pipelines; requires a supported backend and reads from stdin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jsontools/README.md#2025-04-22_snippet_2

LANGUAGE: console
CODE:
```
# validate if file's content conforms to a valid JSON schema\n$ is_json < data.json\ntrue\n# shows true / false and returns the proper exit code\n$ echo $?\n0
```

----------------------------------------

TITLE: Installing Oh My Zsh using fetch (Shell)
DESCRIPTION: Command to install Oh My Zsh using fetch. This fetches the installation script from the official repository and executes it.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
sh -c "$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
```

----------------------------------------

TITLE: Configuring Docker Option Stacking in Zsh
DESCRIPTION: Configuration to enable option stacking for Docker commands in Zsh. This allows combining multiple options but may cause some completion issues.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/docker/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
zstyle ':completion:*:*:docker:*' option-stacking yes
zstyle ':completion:*:*:docker-*:*' option-stacking yes
```

----------------------------------------

TITLE: Configuring Oh My Zsh Plugins (Shell)
DESCRIPTION: Example configuration for enabling multiple plugins in Oh My Zsh. This is added to the .zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_5

LANGUAGE: sh
CODE:
```
plugins=(
  git
  bundler
  dotenv
  macos
  rake
  rbenv
  ruby
)
```

----------------------------------------

TITLE: Git Branch Management Functions - Shell
DESCRIPTION: Core functions for managing Git branches including current branch detection, main/develop branch identification, and branch renaming operations.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
current_branch() # Returns name of current branch
git_current_user_email() # Returns user.email config
git_current_user_name() # Returns user.name config
git_develop_branch() # Returns development branch name
git_main_branch() # Returns main branch name
grename <old> <new> # Renames branch including on remote
gbda # Deletes all merged branches
gbds # Deletes all squash-merged branches
```

----------------------------------------

TITLE: Enabling Docker Plugin in Oh My Zsh
DESCRIPTION: Shows how to add the Docker plugin to Oh My Zsh configuration in zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/docker/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... docker)
```

----------------------------------------

TITLE: Binding Arrow Keys for history-substring-search - Zsh - Shell
DESCRIPTION: Binds the UP and DOWN arrow keys to the respective history-substring-search functions in Zsh, allowing substring-based navigation through command history using the keyboard. No external dependencies are required; Zsh must support the bindkey command and the history-substring-search functions must be available (typically via plugin sourcing). Inputs are the arrow key codes; outputs are key bindings affecting command line behavior. Limitations may arise if key codes differ by terminal or OS.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
bindkey '^[[A' history-substring-search-up # or '\eOA'
bindkey '^[[B' history-substring-search-down # or '\eOB'
```

----------------------------------------

TITLE: Using GNU ls in macOS and FreeBSD
DESCRIPTION: This snippet configures Oh My Zsh to use GNU ls instead of the default BSD ls in macOS and FreeBSD by setting a zstyle-based configuration before sourcing oh-my-zsh.sh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_15

LANGUAGE: zsh
CODE:
```
zstyle ':omz:lib:theme-and-appearance' gnu-ls yes
```

----------------------------------------

TITLE: Setting Custom Installation Directory for Oh My Zsh
DESCRIPTION: This snippet demonstrates how to set a custom directory for Oh My Zsh installation by using the ZSH environment variable. The custom directory is set prior to running the install script.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_11

LANGUAGE: sh
CODE:
```
ZSH="$HOME/.dotfiles/oh-my-zsh" sh install.sh
```

----------------------------------------

TITLE: Defining Multiple Zsh Aliases for Git Commands
DESCRIPTION: Defines a collection of Zsh shell aliases to shorten and simplify frequently used Git commands. These aliases cover a wide range of Git operations including staging, committing, branching, checking out, cloning, amending commits, bisecting, and navigating the repository structure (e.g., `grt` changes to the Git root). They are intended for use within an Oh My Zsh environment and depend on the `git` command-line tool and potentially Oh My Zsh helper functions (e.g., `git_current_branch`, `git_develop_branch`, `git_main_branch`).
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
alias grt='cd "$(git rev-parse --show-toplevel || echo .)"'
alias ggpnp='ggl && ggp'
alias ggpur='ggu'
alias g='git'
alias ga='git add'
alias gaa='git add --all'
alias gapa='git add --patch'
alias gau='git add --update'
alias gav='git add --verbose'
alias gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign --message "--wip-- [skip ci]"'
alias gam='git am'
alias gama='git am --abort'
alias gamc='git am --continue'
alias gamscp='git am --show-current-patch'
alias gams='git am --skip'
alias gap='git apply'
alias gapt='git apply --3way'
alias gbs='git bisect'
alias gbsb='git bisect bad'
alias gbsg='git bisect good'
alias gbsn='git bisect new'
alias gbso='git bisect old'
alias gbsr='git bisect reset'
alias gbss='git bisect start'
alias gbl='git blame -w'
alias gb='git branch'
alias gba='git branch --all'
alias gbd='git branch --delete'
alias gbD='git branch --delete --force'
alias gbgd='LANG=C git branch --no-color -vv | grep ": gone]" | cut -c 3- | awk '\''{print $1}'\'' | xargs git branch -d'
alias gbgD='LANG=C git branch --no-color -vv | grep ": gone]" | cut -c 3- | awk '\''{print $1}'\'' | xargs git branch -D'
alias gbm='git branch --move'
alias gbnm='git branch --no-merged'
alias gbr='git branch --remote'
alias ggsup='git branch --set-upstream-to=origin/$(git_current_branch)'
alias gbg='LANG=C git branch -vv | grep ": gone]"'
alias gco='git checkout'
alias gcor='git checkout --recurse-submodules'
alias gcb='git checkout -b'
alias gcB='git checkout -B'
alias gcd='git checkout $(git_develop_branch)'
alias gcm='git checkout $(git_main_branch)'
alias gcp='git cherry-pick'
alias gcpa='git cherry-pick --abort'
alias gcpc='git cherry-pick --continue'
alias gclean='git clean --interactive -d'
alias gcl='git clone --recurse-submodules'
alias gclf='git clone --recursive --shallow-submodules --filter=blob:none --also-filter-submodules'
alias gccd='git clone --recurse-submodules "$@" && cd "$(basename $_ .git)"'
alias gcam='git commit --all --message'
alias gcas='git commit --all --signoff'
alias gcasm='git commit --all --signoff --message'
alias gcmsg='git commit --message'
alias gcsm='git commit --signoff --message'
alias gc='git commit --verbose'
alias gca='git commit --verbose --all'
alias gca!='git commit --verbose --all --amend'
alias gcan!='git commit --verbose --all --no-edit --amend'
alias gcans!='git commit --verbose --all --signoff --no-edit --amend'
alias gcann!='git commit --verbose --all --date=now --no-edit --amend'
alias gc!='git commit --verbose --amend'
```

----------------------------------------

TITLE: Manual Update of Oh My Zsh
DESCRIPTION: Instructions for manually updating Oh My Zsh by using the omz command or by directly calling the upgrade script. This allows for immediate updates outside the scheduled checks.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_20

LANGUAGE: sh
CODE:
```
omz update

# Automate via script
$ZSH/tools/upgrade.sh
```

----------------------------------------

TITLE: Installing Oh My Zsh using curl (Shell)
DESCRIPTION: Command to install Oh My Zsh using curl. This fetches the installation script from the official repository and executes it.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
```

----------------------------------------

TITLE: Configuring Plugins Array with NVM in Oh My Zsh - Zsh
DESCRIPTION: This snippet shows how to add the nvm plugin to the plugins array in your .zshrc file for Oh My Zsh, enabling its autocompletion and automatic sourcing features. No external dependencies are required beyond Oh My Zsh and a proper installation of nvm. To include nvm, add its name in the parentheses alongside other plugins; the updated plugins array is then used by Oh My Zsh on startup.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nvm/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... nvm)
```

----------------------------------------

TITLE: Loading Docker Compose Plugin in Oh My Zsh
DESCRIPTION: Instructions for enabling the Docker Compose plugin in Oh My Zsh by adding it to the plugins array in the zshrc configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/docker-compose/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... docker-compose)
```

----------------------------------------

TITLE: Kubernetes Resource Management Commands
DESCRIPTION: Collection of kubectl command aliases for managing various Kubernetes resources including deployments, replicasets, pods, services, and more. Each alias provides a shorthand for common kubectl operations.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectl/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
krsd="kubectl rollout status deployment"
kres="kubectl set env $@ REFRESHED_AT=..."
kgrs="kubectl get replicaset"
kdrs="kubectl describe replicaset"
kers="kubectl edit replicaset"
krh="kubectl rollout history"
kru="kubectl rollout undo"
kpf="kubectl port-forward"
kga="kubectl get all"
kgaa="kubectl get all --all-namespaces"
kl="kubectl logs"
klf="kubectl logs -f"
kcp="kubectl cp"
```

----------------------------------------

TITLE: URL Encoding JSON String via urlencode_json Command (Console)
DESCRIPTION: Demonstrates URL encoding a JSON string directly from the command line using 'urlencode_json'. Converts structured JSON to a percent-encoded string suitable for transmission over URLs. Accepts data from stdin; backend requirement applies.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jsontools/README.md#2025-04-22_snippet_3

LANGUAGE: console
CODE:
```
# json data directly from the command line\n$ echo '{"b":2, "a":1}' | urlencode_json\n%7B%22b%22:2,%20%22a%22:1%7D
```

----------------------------------------

TITLE: Setting Up Extract Plugin in Zsh
DESCRIPTION: This snippet demonstrates how to add the 'extract' plugin to the plugins array in the Zsh configuration file (zshrc). By adding 'extract', users can leverage a unified command to extract a wide range of archive types without needing to remember specific commands for each type.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/extract/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... extract)
```

----------------------------------------

TITLE: Git Work in Progress Commands - Shell
DESCRIPTION: Commands for managing work-in-progress states, allowing temporary commits and branch switching.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/README.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
gwip # Commit wip branch
gunwip # Uncommit wip branch
gunwipall # Uncommit all recent --wip-- commits
work_in_progress # Echo warning if current branch is wip
```

----------------------------------------

TITLE: Setting fzf Installation Path via FZF_BASE (Zsh)
DESCRIPTION: Demonstrates setting the `FZF_BASE` environment variable to explicitly specify the installation directory path for `fzf`. This variable should be defined in the `.zshrc` file before Oh My Zsh is sourced to ensure the plugin can locate the fzf executable.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fzf/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
export FZF_BASE=/path/to/fzf/install/dir
```

----------------------------------------

TITLE: Manually Initializing pyenv in .zshrc (Zsh)
DESCRIPTION: This Zsh code snippet demonstrates how to manually initialize `pyenv` within the `.zshrc` file. It sets the `PYENV_ROOT` environment variable, updates the system `PATH` to include pyenv's binaries, and runs `pyenv init`. This is often necessary to place before the Oh My Zsh `plugins=(...)` line to resolve 'badly configured' errors by ensuring pyenv is set up before the plugin loads.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pyenv/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"
```

----------------------------------------

TITLE: Formatting Conventional Commits for Oh-My-Zsh
DESCRIPTION: Demonstrates the format for writing commit messages according to the Conventional Commits specification used by Oh-My-Zsh. Shows the syntax with type, scope, breaking change indicator, and subject format.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
type(scope)!: subject
```

----------------------------------------

TITLE: Installing Terraform Plugin in Oh My Zsh
DESCRIPTION: Instructions for adding the Terraform plugin to Oh My Zsh configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/terraform/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
plugins=(... terraform)
```

----------------------------------------

TITLE: Enabling the History Plugin in Oh My Zsh - zsh
DESCRIPTION: This snippet demonstrates how to activate the 'history' plugin in Oh My Zsh by adding it to the 'plugins' array within your .zshrc configuration file. No additional dependencies are required beyond an existing Oh My Zsh installation. Users need to edit their .zshrc file and add 'history' to the list of plugins, after which reloading the shell makes available several convenient history examination aliases.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... history)
```

----------------------------------------

TITLE: Enabling Lazy Loading for NVM Plugin via zstyle - Zsh
DESCRIPTION: This zsh snippet enables the lazy loading feature for the nvm plugin via a zstyle configuration. By deferring nvm's initialization until it is actually used, this setting speeds up shell startup. To activate the lazy behavior, add the provided zstyle line to your .zshrc prior to sourcing Oh My Zsh. The only requirements are a functional Oh My Zsh installation and the nvm plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nvm/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
zstyle ':omz:plugins:nvm' lazy yes
```

----------------------------------------

TITLE: Using Global Aliases in Zsh
DESCRIPTION: These examples demonstrate how to use global aliases in Zsh commands. Global aliases can be used in any position in the command line, allowing for quick piping to less or silencing stderr output.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/common-aliases/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
$ ls -l /var/log L
# will run
$ ls -l /var/log | less
```

LANGUAGE: zsh
CODE:
```
$ find . -type f NE
# will run
$ find . -type f 2>/dev/null
```

----------------------------------------

TITLE: Command Examples with Sudo
DESCRIPTION: Example commands showing the result after pressing escape twice to add sudo prefix.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sudo/README.md#2025-04-22_snippet_3

LANGUAGE: console
CODE:
```
$ sudo apt-get install build-essential
```

LANGUAGE: console
CODE:
```
$ sudo -e /etc/hosts
```

LANGUAGE: console
CODE:
```
$ rm some-system-file.txt
-su: some-system-file.txt: Permission denied
$ sudo rm some-system-file.txt
Password:
$
```

----------------------------------------

TITLE: Using Git Aliases for Commit Messages in Zsh
DESCRIPTION: This syntax snippet shows how to use git aliases with the git-commit plugin to create standardized commit messages based on the conventional commits specification. It outlines the various types of commits that can be specified and details optional parameters such as scope and attention. Ensure the correct format as incorrect syntax may result in unintended commit messages.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-commit/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
git <type> [(-s, --scope) "<scope>"] [(-a, --attention)] "<message>"
```

----------------------------------------

TITLE: Loading the SSH Plugin in Oh My Zsh Configuration
DESCRIPTION: Shows how to enable the SSH plugin by adding it to the plugins array in the zshrc file. Once enabled, the plugin provides host completion and SSH key management utilities.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... ssh)
```

----------------------------------------

TITLE: Configuring Fancy Ctrl-Z Plugin in Oh My Zsh - Zsh
DESCRIPTION: This snippet demonstrates how to enable the 'fancy-ctrl-z' plugin by adding it to the plugins array in your .zshrc configuration file. The plugin allows users to suspend a running job (such as Vim) with Ctrl-Z and quickly return to it by pressing Ctrl-Z again, eliminating the need for manual 'fg' commands. No additional dependencies are required other than having Oh My Zsh and the 'fancy-ctrl-z' plugin installed; edits are made directly in the .zshrc file, with 'fancy-ctrl-z' specified among other plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fancy-ctrl-z/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... fancy-ctrl-z)
```

----------------------------------------

TITLE: Toggle Async Git Prompt in Oh My Zsh
DESCRIPTION: Provides settings to control the experimental async prompt feature in Oh My Zsh. It can be turned on or off using zstyle configurations in the .zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_17

LANGUAGE: sh
CODE:
```
zstyle ':omz:alpha:lib:git' async-prompt no
zstyle ':omz:alpha:lib:git' async-prompt force
```

----------------------------------------

TITLE: Enabling HTTPie Plugin in Oh My Zsh (zsh)
DESCRIPTION: This snippet demonstrates how to add the 'httpie' plugin to the list of plugins in the .zshrc configuration file for Oh My Zsh. By including 'httpie' in the 'plugins' array, users enable shell autocompletion for the HTTPie command line client. No additional dependencies beyond Oh My Zsh and optionally zsh-completions are needed. The configuration expects users to edit .zshrc directly; input is the plugin name and output is enhanced shell completion for HTTPie commands.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/httpie/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... httpie)
```

----------------------------------------

TITLE: Enabling the Web-Search Plugin in ZSH Configuration
DESCRIPTION: Shows how to enable the web-search plugin in the .zshrc configuration file. Add 'web-search' to the plugins array in your .zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/web-search/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=( ... web-search)
```

----------------------------------------

TITLE: Renaming and Formatting Kubernetes Context Names via Mapping (Zsh)
DESCRIPTION: This set of snippets demonstrates how to use the kubectx_mapping associative array to rename and reformat display names of Kubernetes contexts in your prompt. Entries use prompt expansion (e.g., coloring with %F{color}) and can include special formatting or emoji for specific context names. These lines go into your .zshrc, support advanced customizations, and ensure that your prompt displays human-friendly cluster identifiers instead of raw context names.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectx/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
kubectx_mapping[minikube]="mini"
kubectx_mapping[context_name_from_kubeconfig]="$emoji[wolf_face]"
kubectx_mapping[production_cluster]="%{$fg[yellow]%}prod!%{$reset_color%}"
# contexts with spaces
kubectx_mapping[context\ with\ spaces]="%F{red}spaces%f"
# don't use quotes as it will break the prompt
kubectx_mapping["context with spaces"]="%F{red}spaces%f" # ti
```

----------------------------------------

TITLE: Configuring Plugin Array for Oh My Zsh in Zsh
DESCRIPTION: This snippet shows how to include the 'direnv' plugin by adding it to the plugins array in your .zshrc file. It enables integrated Direnv support in the Zsh shell. Users must have the direnv binary installed on their system for the plugin to function, and should list 'direnv' among other desired plugins in the plugins assignment. This configuration will be read automatically on Zsh startup, activating the Direnv plugin for session use.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/direnv/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... direnv)
```

----------------------------------------

TITLE: Including Gems to be Wrapped in Bundler Plugin
DESCRIPTION: This snippet demonstrates how to add gems to the list of wrapped commands in the Bundler plugin. It shows the syntax for setting the BUNDLED_COMMANDS variable before the plugin list in the .zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bundler/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
BUNDLED_COMMANDS=(rubocop)
plugins=(... bundler ...)
```

----------------------------------------

TITLE: Git Tag and Worktree Operations - Shell
DESCRIPTION: Commands for managing Git tags and worktree operations including listing, moving, and removing worktrees.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/README.md#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
gtl(){ git tag --sort=-v:refname -n --list ${1}\* }; noglob gtl
gwtls # git worktree list
gwtmv # git worktree move
gwtrm # git worktree remove
```

----------------------------------------

TITLE: Bulk Defining Context Name Mappings for kubectx (Zsh)
DESCRIPTION: This snippet shows the recommended way to declare and assign multiple context display-name mappings for the kubectx_prompt_info function all at once. It utilizes Zsh's associative array feature (typeset -A) followed by a value assignment block for flexibility and readability. Used in the .zshrc file, this allows multiple contextual formatting rules—including coloring and emoji—to be specified compactly for prompt customization.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectx/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
typeset -A kubectx_mapping
kubectx_mapping=(
  minikube                      "mini"
  context_name_from_kubeconfig  "$emoji[wolf_face]"
  production_cluster            "%{$fg[yellow]%}prod!%{$reset_color%}"
  "context with spaces"         "%F{red}spaces%f"
)
```

----------------------------------------

TITLE: RSync Command Aliases
DESCRIPTION: Set of predefined rsync command aliases including copy, move, update, and synchronize operations. Each alias includes progress indicators and human-readable output formatting.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rsync/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
rsync -avz --progress -h
rsync -avz --progress -h --remove-source-files
rsync -avzu --progress -h
rsync -avzu --delete --progress -h
```

----------------------------------------

TITLE: Installing Latest Zsh-z Version for Oh My Zsh
DESCRIPTION: Commands to manually install the latest version of Zsh-z from GitHub into the Oh My Zsh custom plugins directory.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
git clone https://github.com/agkozak/zsh-z ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-z
```

----------------------------------------

TITLE: Kubernetes Node Management Commands
DESCRIPTION: Kubectl command aliases specifically for managing Kubernetes nodes, including listing, editing, describing, and deleting nodes.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectl/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
kgno="kubectl get nodes"
kgnosl="kubectl get nodes --show-labels"
keno="kubectl edit node"
kdno="kubectl describe node"
kdelno="kubectl delete node"
```

----------------------------------------

TITLE: Setting Oh My Zsh Theme (Shell)
DESCRIPTION: Example of how to set a specific theme in Oh My Zsh by modifying the ZSH_THEME variable in the .zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_6

LANGUAGE: sh
CODE:
```
ZSH_THEME="robbyrussell"
```

----------------------------------------

TITLE: Enabling ASDF Plugin in Oh My Zsh
DESCRIPTION: Shows how to enable the ASDF plugin by adding it to the plugins array in .zshrc configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/asdf/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
plugins=(asdf)
```

----------------------------------------

TITLE: Binding Keys to n-cd and n-kill Widgets in Zsh
DESCRIPTION: This Zsh configuration snippet shows how to bind `Ctrl+B` to the `n-cd` directory bookmark widget and `Ctrl+Y` to the `n-kill` process killing widget. It assumes the widgets are already autoloaded (e.g., by the plugin's main file).
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
zle -N znt-cd-widget
bindkey "^B" znt-cd-widget
zle -N znt-kill-widget
bindkey "^Y" znt-kill-widget
```

----------------------------------------

TITLE: Configuring Magic Enter Plugin in Oh My Zsh - zsh
DESCRIPTION: This snippet demonstrates how to set up the Magic Enter plugin by defining default commands for the Enter key in Git and non-Git directories within the .zshrc file. Dependencies include Oh My Zsh with the magic-enter plugin installed and enabled. The key parameters are MAGIC_ENTER_GIT_COMMAND (used in Git repositories) and MAGIC_ENTER_OTHER_COMMAND (used elsewhere), as well as the plugin activation line. Input consists of configuration lines in the .zshrc file; expected output is the automatic running of the commands depending on directory context when pressing Enter. The configuration is constrained to zsh/Oh My Zsh environments, and must be evaluated before the plugins line in .zshrc.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/magic-enter/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
# defaults\nMAGIC_ENTER_GIT_COMMAND='git status -u .'\nMAGIC_ENTER_OTHER_COMMAND='ls -lh .'\n\nplugins=(... magic-enter)
```

----------------------------------------

TITLE: Configuring Oh My Zsh Update Frequency and Mode
DESCRIPTION: Snippet detailing how to set the update check frequency and mode for Oh My Zsh using zstyle settings in the .zshrc file. It enables configuring automatic updates and reminder modes.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_18

LANGUAGE: sh
CODE:
```
zstyle ':omz:update' mode auto
zstyle ':omz:update' mode reminder
zstyle ':omz:update' mode disabled

# Control how often to check for updates
zstyle ':omz:update' frequency 7
```

----------------------------------------

TITLE: Sample .env File with Export Statements
DESCRIPTION: This example demonstrates the format of a .env file using export statements. It includes environment variables for AWS S3 token, secret key, MongoDB URI, and port number.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dotenv/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
export AWS_S3_TOKEN=d84a83539134f28f412c652b09f9f98eff96c9a
export SECRET_KEY=7c6c72d959416d5aa368a409362ec6e2ac90d7f
export MONGO_URI=mongodb://127.0.0.1:27017
export PORT=3001
```

----------------------------------------

TITLE: Unattended Installation of Oh My Zsh
DESCRIPTION: This snippet shows how to perform an unattended installation of Oh My Zsh. It uses the --unattended flag to avoid changing the default shell and running zsh post-install.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_12

LANGUAGE: sh
CODE:
```
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
```

----------------------------------------

TITLE: Binding Arrow and Control Keys for History Navigation - Zsh - Shell
DESCRIPTION: Shows assigning keyboard shortcuts (UP, DOWN arrows; optionally Control-P/N for emacs mode) to history-substring-search functions, facilitating history navigation via substring search. Requires correct keycodes determined from the user's terminal, as well as plugin functions loaded. Inputs: bindkey commands with codes; outputs: custom shell navigation key bindings.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_13

LANGUAGE: shell
CODE:
```
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
```

----------------------------------------

TITLE: Pretty Printing JSON via pp_json Command (Console)
DESCRIPTION: Demonstrates how to use the 'pp_json' tool to pretty print JSON data fetched from a URL using 'curl'. The JSON output is formatted for readability in the terminal. The tool requires a working backend (node, python3, or ruby) and reads piped data from stdin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jsontools/README.md#2025-04-22_snippet_1

LANGUAGE: console
CODE:
```
# curl json data and pretty print the results\ncurl https://coderwall.com/bobwilliams.json | pp_json
```

----------------------------------------

TITLE: Executing Frontend Documentation Searches via Alias (Zsh)
DESCRIPTION: This snippet illustrates usage patterns for performing frontend documentation searches via the plugin's commands or aliases. The examples show two variations: a direct context search and an explicit call to the 'frontend' command. Both approaches require the frontend-search plugin to be enabled and function as aliases to open a browser with search results. Inputs are the context and search terms; outputs involve launching the documentation site. Limitations: only supported contexts are recognized, and additional configuration may be needed for fallback behavior.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/frontend-search/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
$ angular dependency injection
# Will turn into ...
$ frontend angular dependency injection

```

----------------------------------------

TITLE: Configuring Git-Flow Plugin in ZSH
DESCRIPTION: The code snippet shows how to add the 'git-flow' plugin to the plugin list in a ZSH configuration file. This enables autocompletion and shorthand aliases for git-flow commands. This requires Oh My Zsh to be installed and configured as the shell.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-flow/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... git-flow)
```

----------------------------------------

TITLE: Warping to a directory using a warp point
DESCRIPTION: Command to navigate to the directory associated with the warp point 'foo'.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_18

LANGUAGE: zsh
CODE:
```
wd foo
```

----------------------------------------

TITLE: ASDF Version Management Commands
DESCRIPTION: Demonstrates common ASDF commands for managing runtime versions, including adding plugins, installing/uninstalling versions, and setting version preferences at different scopes (current directory, parent directory, and global).
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/asdf/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
# Add plugin to asdf
asdf plugin add nodejs

# Install the latest available version
asdf install nodejs latest

# Uninstall the latest version
asdf uninstall nodejs latest

# Install a specific version
asdf install nodejs 16.5.0

# Set the latest version in .tool-versions of the `current directory`
asdf set nodejs latest

# Set a specific version in the `parent directory`
asdf set -p nodejs 16.5.0   # -p is shorthand for --parent

# Set a global version under `$HOME`
asdf set -u nodejs 16.5.0   # -u is shorthand for --home
```

----------------------------------------

TITLE: Configuring fzf Default Command via FZF_DEFAULT_COMMAND (Zsh)
DESCRIPTION: Illustrates setting the `FZF_DEFAULT_COMMAND` environment variable to define the default command `fzf` should use when its input is a TTY (terminal). This setting should be placed in `.zshrc` before Oh My Zsh sourcing. If not set, the plugin defaults to using `fd`, `rg`, or `ag` if available.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fzf/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
export FZF_DEFAULT_COMMAND='<your fzf default command>'
```

----------------------------------------

TITLE: Loading multiple SSH identities with ssh-agent plugin
DESCRIPTION: Configure multiple SSH identities to be loaded automatically. This has no effect if the lazy setting is enabled.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
zstyle :omz:plugins:ssh-agent identities id_rsa id_rsa2 id_github
```

----------------------------------------

TITLE: Configuring Plugin Array for Oh My Zsh in Zsh
DESCRIPTION: This snippet demonstrates how to include the 'kubectl' plugin in the plugins array within the .zshrc configuration file for Oh My Zsh. By adding 'kubectl' to the array, users enable autocompletion for kubectl commands and access predefined aliases for Kubernetes management. No external dependencies are required beyond Oh My Zsh and the presence of the kubectl binary; edit .zshrc and restart the shell session to activate changes.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectl/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... kubectl)
```

----------------------------------------

TITLE: Setting maximum lifetime for SSH identities
DESCRIPTION: Configure the maximum lifetime for loaded SSH identities, specified in seconds or using time formats as described in sshd_config(5).
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_7

LANGUAGE: zsh
CODE:
```
zstyle :omz:plugins:ssh-agent lifetime 4h
```

----------------------------------------

TITLE: Enabling the .NET Core CLI Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This snippet shows how to enable the '.NET Core CLI' plugin within the Oh My Zsh framework. By adding 'dotnet' to the `plugins` array in the user's `.zshrc` file, Zsh will load the plugin, providing command completions and aliases for the `dotnet` command-line interface.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dotnet/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
plugins=(... dotnet)
```

----------------------------------------

TITLE: Enabling the macOS Plugin in Zsh Configuration
DESCRIPTION: This Zsh configuration snippet demonstrates how to enable the 'macos' plugin within Oh My Zsh by adding it to the plugins array in the ~/.zshrc file. Ensure 'macos' is included in the parentheses alongside any other desired plugins to activate its functionalities.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/macos/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... macos)
```

----------------------------------------

TITLE: AWS roles configuration in ~/.aws/config
DESCRIPTION: Example configuration for AWS profiles including a source profile with MFA settings and a role-based profile with source profile reference. This setup enables role assumption with MFA authentication.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/aws/README.md#2025-04-22_snippet_2

LANGUAGE: ini
CODE:
```
[profile source-profile-name]
mfa_serial = arn:aws:iam::111111111111:mfa/myuser
region = us-east-1
output = json

[profile profile-with-role]
role_arn = arn:aws:iam::9999999999999:role/myrole
mfa_serial = arn:aws:iam::111111111111:mfa/myuser
source_profile = source-profile-name
region = us-east-1
output = json
```

----------------------------------------

TITLE: Enabling Proxy with Environment Variables (Method 1)
DESCRIPTION: Setting up proxy configuration by defining environment variables for proxy URL and no-proxy domains, then enabling the proxy with a command. This method uses direct environment variable configuration.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shell-proxy/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
SHELLPROXY_URL="http://127.0.0.1:8123"
SHELLPROXY_NO_PROXY="localhost,127.0.0.1"
proxy enable
```

----------------------------------------

TITLE: Pacaur Package Manager Commands
DESCRIPTION: A collection of shell aliases for the Pacaur package manager, providing shortcuts for common package management operations like installing, removing, updating, and querying packages.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/archlinux/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pacclean="pacaur -Sc"
pacclr="pacaur -Scc"
pain="pacaur -S"
pains="pacaur -U"
painsd="pacaur -S --asdeps"
paloc="pacaur -Qi"
palocs="pacaur -Qs"
palst="pacaur -Qe"
pamir="pacaur -Syy"
paorph="pacaur -Qtd"
pare="pacaur -R"
parem="pacaur -Rns"
parep="pacaur -Si"
pareps="pacaur -Ss"
paupd="pacaur -Sy"
paupg="pacaur -Syua"
pasu="pacaur -Syua --no-confirm"
upgrade="pacaur -Syu"
```

----------------------------------------

TITLE: Configuring Yarn Plugin for Yarn Berry Support
DESCRIPTION: This snippet sets a zstyle to configure the Yarn plugin for use with Yarn Berry (version 2 or higher). It should be added to the .zshrc file to enable Berry-specific aliases.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/yarn/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
zstyle ':omz:plugins:yarn' berry yes
```

----------------------------------------

TITLE: Kubernetes Resource Wrappers
DESCRIPTION: Output formatting wrappers for kubectl that provide colored JSON and YAML output using external tools like jq, fx, and yh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectl/README.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
kj="kubectl output in JSON, colorized with jq"
kjx="kubectl output in JSON, colorized with fx"
ky="kubectl output in YAML, colorized with yh"
```

----------------------------------------

TITLE: Enabling Gitfast Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This snippet demonstrates how to enable the 'gitfast' plugin within an Oh My Zsh configuration. By adding 'gitfast' to the plugins array in the user's `.zshrc` file, the faster Git completion provided by this plugin is activated.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gitfast/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... gitfast)
```

----------------------------------------

TITLE: Warping to a subdirectory within a warp point
DESCRIPTION: Command to navigate to a specific subdirectory path within a warp point target, with autocompletion support.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_19

LANGUAGE: zsh
CODE:
```
wd foo some/inner/path
```

----------------------------------------

TITLE: Configuring alias-finder with zstyle options
DESCRIPTION: Example configuration for enabling alias-finder features using zstyle. This shows how to autoload the plugin for every command and enable options for longer suggestions, exact matching, and cheaper alternatives.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/alias-finder/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
# ~/.zshrc

zstyle ':omz:plugins:alias-finder' autoload yes # disabled by default
zstyle ':omz:plugins:alias-finder' longer yes # disabled by default
zstyle ':omz:plugins:alias-finder' exact yes # disabled by default
zstyle ':omz:plugins:alias-finder' cheaper yes # disabled by default
```

----------------------------------------

TITLE: Loading the VS Code Plugin in Oh My Zsh Configuration
DESCRIPTION: Shows how to add the VS Code plugin to the plugins array in the .zshrc file to enable its functionality.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vscode/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... vscode)
```

----------------------------------------

TITLE: Configuring Git Prompt Plugin in Oh My Zsh - Zsh Shell
DESCRIPTION: This snippet demonstrates how to enable the git-prompt plugin in your Oh My Zsh configuration by adding it to the plugins array in your .zshrc file. The plugin provides detailed information about the current Git repository's status in your prompt. Ensure that Oh My Zsh is already installed and configured, and that python3 is available on your system as a dependency.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-prompt/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... git-prompt)
```

----------------------------------------

TITLE: AWS credentials configuration in ~/.aws/credentials
DESCRIPTION: Example configuration for AWS source profile credentials containing the access key ID and secret access key, which are required for authentication with AWS services.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/aws/README.md#2025-04-22_snippet_1

LANGUAGE: ini
CODE:
```
[source-profile-name]
aws_access_key_id = ...
aws_secret_access_key = ...
```

----------------------------------------

TITLE: Activating git-auto-fetch Plugin in Oh My Zsh (Shell)
DESCRIPTION: This shell code snippet demonstrates how to enable the git-auto-fetch plugin by adding it to the plugins array in your .zshrc file. There are no additional dependencies beyond Oh My Zsh. The snippet shows an example syntax; users should ensure 'git-auto-fetch' is included alongside any other desired plugins. Input is direct modification to the configuration file, and output is automatic fetching in git-enabled directories. There are no special constraints aside from using Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-auto-fetch/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
plugins=(... git-auto-fetch)
```

----------------------------------------

TITLE: Enabling fzf Plugin in Oh My Zsh (Zsh)
DESCRIPTION: Shows how to activate the `fzf` plugin by adding its name to the `plugins` array within the `.zshrc` configuration file. This step is required for Oh My Zsh to load the plugin's functionality, including fuzzy auto-completion and key bindings.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fzf/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... fzf)
```

----------------------------------------

TITLE: Using opswd Command for GitHub Credentials
DESCRIPTION: This example demonstrates how to use the 'opswd' command to retrieve GitHub credentials. It will copy the username, password, and TOTP (if available) to the clipboard sequentially, with user confirmations between each step.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/1password/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
opswd github.com
```

----------------------------------------

TITLE: Listing all warp points
DESCRIPTION: Command to display all warp points stored in the configuration file (default: ~/.warprc).
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_22

LANGUAGE: zsh
CODE:
```
wd list
```

----------------------------------------

TITLE: Configuring and Using bgnotify Plugin in Zsh
DESCRIPTION: This snippet demonstrates how to configure the bgnotify plugin, including customizing the notification threshold, disabling the terminal bell, and defining a custom notification format function. It also shows how to add the plugin to the Oh My Zsh configuration.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bgnotify/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
bgnotify_bell=false   ## disable terminal bell
bgnotify_threshold=4  ## set your own notification threshold

function bgnotify_formatted {
  ## $1=exit_status, $2=command, $3=elapsed_time

  # Humanly readable elapsed time
  local elapsed="$(( $3 % 60 ))s"
  (( $3 < 60 ))   || elapsed="$((( $3 % 3600) / 60 ))m $elapsed"
  (( $3 < 3600 )) || elapsed="$((  $3 / 3600 ))h $elapsed"

  [ $1 -eq 0 ] && title="Holy Smokes Batman" || title="Holy Graf Zeppelin"
  [ $1 -eq 0 ] && icon="$HOME/icons/success.png" || icon="$HOME/icons/fail.png"
  bgnotify "$title - took ${elapsed}" "$2" "$icon"
}

plugins=(git bgnotify)  ## add to plugins list
source $ZSH/oh-my-zsh.sh  ## existing source call
```

----------------------------------------

TITLE: Enabling Flutter Plugin in Oh My Zsh Configuration (Zsh)
DESCRIPTION: This Zsh configuration snippet demonstrates how to activate the Oh My Zsh Flutter plugin by adding 'flutter' to the plugins array within the user's `.zshrc` file. This modification enables Flutter-specific aliases and completions in the Zsh shell. Requires Oh My Zsh to be installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/flutter/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... flutter)
```

----------------------------------------

TITLE: Configuring n-list Appearance via n-list.conf (Zsh)
DESCRIPTION: This snippet provides an example configuration from `n-list.conf`, demonstrating how to set appearance options for Zsh Navigation Tools. It shows how to define local Zsh variables for `bold`, `colorpair`, `border`, and available `themes`.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
# Should the list (text, borders) be drawn in bold
local bold=0

# Main color pair (foreground/background)
local colorpair="white/black"

# Should draw the border?
local border=1

# Combinations of colors to try out with Ctrl-T and Ctrl-G
# The last number is the bold option, 0 or 1
local -a themes
themes=( "white/black/1" "green/black/0" "green/black/1" "white/blue/0" "white/blue/1"
         "magenta/black/0" "magenta/black/1" )
```

----------------------------------------

TITLE: Using the Web-Search Plugin with Examples
DESCRIPTION: Demonstrates the two equivalent ways to use the web-search plugin: either with the web_search function or directly with the search context alias.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/web-search/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
$ web_search google oh-my-zsh
$ google oh-my-zsh
```

----------------------------------------

TITLE: Enabling lazy loading of SSH identities
DESCRIPTION: Prevent loading any identities on start, which is useful when combined with the AddKeysToAgent feature in OpenSSH 7.2+.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_6

LANGUAGE: zsh
CODE:
```
zstyle :omz:plugins:ssh-agent lazy yes
```

----------------------------------------

TITLE: Configuring Zsh FPATH for Homebrew Hub Completions
DESCRIPTION: This Zsh snippet checks whether the Homebrew `hub` completions directory is included in the FPATH, and adds it if it's not. This is necessary for users who have installed `hub` via Homebrew and are using the system `zsh`. No external dependencies required.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/github/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
if (( ! ${fpath[(I)/usr/local/share/zsh/site-functions]} )); then
  FPATH=/usr/local/share/zsh/site-functions:$FPATH
fi
```

----------------------------------------

TITLE: Enabling frontend-search Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This snippet demonstrates how to activate the frontend-search plugin by editing the plugins array in your ~/.zshrc configuration file. You must add 'frontend-search' to the plugin list and then reload the shell for changes to take effect. The dependency is Oh My Zsh, and the key parameter is the plugins array, which should already exist. The output is enabling additional aliases and commands for quick frontend documentation searching. No parameters are taken at runtime; only the edited configuration matters.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/frontend-search/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=( ... frontend-search)

```

----------------------------------------

TITLE: Debugging Jira Plugin Configuration via Shell Command
DESCRIPTION: This shell command (`jira dumpconfig`) is used for debugging the Jira plugin's configuration. Executing it displays the effective settings currently being used by the plugin, such as the resolved JIRA URL, prefix, and other variables. This is primarily intended for developers.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jira/README.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
jira dumpconfig   # displays the effective configuration
```

----------------------------------------

TITLE: Installing mise and Enabling as a Plugin in Zsh
DESCRIPTION: This snippet demonstrates how to download and install the mise runtime executor, as well as how to enable it as a plugin in the Zsh configuration file. Dependencies include internet access for downloading the installer script. Key parameters include the plugin name to be added to the Zsh configuration.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mise/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
curl https://mise.jdx.dev/install.sh | sh
```

LANGUAGE: bash
CODE:
```
plugins=(mise)
```

----------------------------------------

TITLE: Configuring Completion for Multiple Pass Repositories - Zsh
DESCRIPTION: Defines custom completion and aliasing for a secondary pass repository within Zsh. It uses 'compdef' to link completion functions, utilizes 'zstyle' to specify a custom repository path, and defines a shell function 'workpass' for seamless access. Dependencies include Oh My Zsh with the 'pass' plugin and the pass command-line tool. The new function allows users to access a non-default password store by running 'workpass', passing all arguments through while correctly setting 'PASSWORD_STORE_DIR'.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pass/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
compdef _pass workpass
zstyle ':completion::complete:workpass::' prefix "$HOME/work/pass"
workpass() {
  PASSWORD_STORE_DIR=$HOME/work/pass pass $@
}
```

----------------------------------------

TITLE: Configuring Auto-Fetch Interval with Environment Variable (sh)
DESCRIPTION: This snippet sets the fetch interval, in seconds, for git-auto-fetch by defining the GIT_AUTO_FETCH_INTERVAL variable in your .zshrc. No external dependencies are required beyond the environment variable support in the shell. The key parameter is the interval value (1200 seconds in this example). Input is the integer value of update interval, and output is the adjusted auto-fetch timing. Ensure the line is placed in the appropriate shell configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-auto-fetch/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
GIT_AUTO_FETCH_INTERVAL=1200 # in seconds
```

----------------------------------------

TITLE: Configuring Oh My Zsh with Macports Plugin - Zsh
DESCRIPTION: Demonstrates how to enable the Macports plugin by adding it to the plugins array in your .zshrc configuration file. This step is required in order to load Macports completions and custom aliases after starting a new shell session. The `plugins` array should include 'macports' alongside any other desired plugins. No other setup or parameters are needed; the plugin will load at shell startup.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/macports/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... macports)
```

----------------------------------------

TITLE: Configuring oh-my-zsh Plugins (zsh)
DESCRIPTION: This snippet demonstrates how to enable the Python plugin in oh-my-zsh by adding 'python' to the plugins array in your .zshrc configuration file. The plugins array allows customization of which oh-my-zsh plugins are active in each shell session. Only the specified plugins will be loaded, and the configuration must be set before oh-my-zsh is sourced. This snippet contains a single line and is required for enabling Python-related aliases and functions.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/python/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... python)
```

----------------------------------------

TITLE: Enabling Autojump Plugin in Oh My Zsh Configuration
DESCRIPTION: Configuration snippet showing how to enable the autojump plugin in the Oh My Zsh plugins array within the .zshrc file. The autojump tool must be installed separately before enabling this plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/autojump/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... autojump)
```

----------------------------------------

TITLE: Enabling the per-directory-history Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This code snippet demonstrates how to enable the 'per-directory-history' plugin within an Oh My Zsh configuration. To activate it, add 'per-directory-history' to the 'plugins' array located in the user's '.zshrc' file. This ensures the plugin is loaded when Zsh starts.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/per-directory-history/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... per-directory-history)
```

----------------------------------------

TITLE: Pretty Printing NDJSON Objects via pp_ndjson Command (Console)
DESCRIPTION: Illustrates how to pretty print multiple JSON objects provided as NDJSON (newline-delimited JSON) using 'pp_ndjson'. Each input line is treated as a separate JSON object and formatted accordingly. Reads piped NDJSON from stdin and outputs formatted results; backend dependency applies.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jsontools/README.md#2025-04-22_snippet_5

LANGUAGE: console
CODE:
```
# echo two separate json objects and pretty print both\n$ echo '{"a": "b"}\\n{"c": [1,2,3]}' | pp_ndjson\n{\n    "a": "b"\n}\n{\n    "c": [\n        1,\n        2,\n        3\n    ]\n}
```

----------------------------------------

TITLE: Configuring Custom .env Filename in Zsh
DESCRIPTION: This snippet demonstrates how to set a custom filename for the .env file using the ZSH_DOTENV_FILE variable in the zshrc file. In this example, it's set to '.dotenv'.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dotenv/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
# in ~/.zshrc, before Oh My Zsh is sourced:
ZSH_DOTENV_FILE=.dotenv
```

----------------------------------------

TITLE: Configuring Gradle Plugin in zsh
DESCRIPTION: This snippet shows how to add the Gradle plugin to the zsh configuration. By adding "gradle" to the plugins array, users integrate Gradle functionality such as aliases and command completions into their shell environment. The plugins array is modified in the zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gradle/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... gradle)
```

----------------------------------------

TITLE: Binding Ctrl+R to n-history Widget in Zsh
DESCRIPTION: This configuration snippet demonstrates how to bind the `Ctrl+R` key combination to the `n-history` incremental search widget in Zsh. It requires autoloading the widget function, registering it with the Zsh Line Editor (zle), and then creating the keybinding.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
autoload znt-history-widget
zle -N znt-history-widget
bindkey "^R" znt-history-widget
```

----------------------------------------

TITLE: Using macOS keychain with ssh-agent plugin
DESCRIPTION: Configure the ssh-agent plugin to use the macOS keychain when loading SSH identities, enabling password storage in the system keychain.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_11

LANGUAGE: zsh
CODE:
```
zstyle :omz:plugins:ssh-agent ssh-add-args --apple-load-keychain
```

----------------------------------------

TITLE: Defining Additional Lazy-Load Trigger Commands for NVM - Zsh
DESCRIPTION: This zsh snippet demonstrates how to specify extra commands that will also trigger lazy loading of the nvm plugin. By appending commands (such as eslint, prettier, typescript) to the lazy-cmd option with zstyle, you can customize which commands cause nvm to initialize. It is necessary for the zstyle options to be placed before sourcing Oh My Zsh in your .zshrc. The settings assume that lazy loading is already enabled.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nvm/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
zstyle ':omz:plugins:nvm' lazy-cmd eslint prettier typescript ...
```

----------------------------------------

TITLE: Installing Sudo Plugin in Oh My Zsh
DESCRIPTION: Configuration snippet showing how to enable the sudo plugin in Oh My Zsh by adding it to the plugins array in zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sudo/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... sudo)
```

----------------------------------------

TITLE: Implementing SVN Prompt Function for Agnoster Theme
DESCRIPTION: This function displays SVN repository information in the agnoster theme prompt. It shows the revision number, branch name, and indicates if there are uncommitted changes using different colors.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/svn/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
prompt_svn() {
    local rev branch
    if in_svn; then
        rev=$(svn_get_rev_nr)
        branch=$(svn_get_branch_name)
        if [[ $(svn_dirty_choose_pwd 1 0) -eq 1 ]]; then
            prompt_segment yellow black
            echo -n "$rev@$branch"
            echo -n "±"
        else
            prompt_segment green black
            echo -n "$rev@$branch"
        fi
    fi
}
```

----------------------------------------

TITLE: Configuring GitHub CLI Plugin in Zsh
DESCRIPTION: This snippet illustrates how to activate the GitHub CLI plugin within a Zsh environment by updating the plugins array in the zshrc file. There are no additional dependencies, and the configuration does not introduce new aliases. The key purpose is to enable command completion for GitHub CLI commands.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gh/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... gh)
```

----------------------------------------

TITLE: Enabling the Laravel Plugin in Oh My Zsh (Shell)
DESCRIPTION: This snippet demonstrates how to enable the Laravel plugin in an oh-my-zsh environment by adding 'laravel' to the plugins array in your .zshrc configuration file. There are no external code dependencies but requires oh-my-zsh to be installed and sourced in the shell startup. You can include additional plugins by separating their names with spaces inside the parentheses. After updating, reload your shell or source your .zshrc to activate the plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/laravel/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
plugins=(... laravel)
```

----------------------------------------

TITLE: Setting Python Plugin Virtual Environment Names and Sourcing oh-my-zsh (sh)
DESCRIPTION: This snippet shows how to configure preferred virtual environment names and load oh-my-zsh in your .zshrc file. It sets the 'PYTHON_VENV_NAME' and 'PYTHON_VENV_NAMES' shell variables, customizing how the plugin creates and detects virtual environments for activation. The configuration must be done before sourcing oh-my-zsh to ensure the variables are used correctly by the plugin's utilities. Inputs are the preferred virtual environment names, and output is an active oh-my-zsh shell with these Python plugin settings.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/python/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
PYTHON_VENV_NAME=".venv"
PYTHON_VENV_NAMES=($PYTHON_VENV_NAME venv)
...
plugins=(... python)
source "$ZSH/oh-my-zsh.sh"
```

----------------------------------------

TITLE: URL Decoding JSON String via urldecode_json Command (Console)
DESCRIPTION: Shows how to decode a percent-encoded JSON string to its original format using 'urldecode_json'. Useful for processing web-passed JSON data back into readable JSON; it expects input from stdin and relies on a supported backend.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jsontools/README.md#2025-04-22_snippet_4

LANGUAGE: console
CODE:
```
# url encoded string to decode\n$ echo '%7B%22b%22:2,%20%22a%22:1%7D' | urldecode_json\n{"b":2, "a":1}
```

----------------------------------------

TITLE: Adding vi-mode to Oh My Zsh Plugins Array
DESCRIPTION: Shows how to enable the vi-mode plugin by adding it to the plugins array in the zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vi-mode/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... vi-mode)
```

----------------------------------------

TITLE: Enabling the Jira Plugin in Oh My Zsh
DESCRIPTION: This snippet shows how to enable the Jira plugin by adding its name (`jira`) to the `plugins` array within the Oh My Zsh configuration file (`.zshrc`). This makes the `jira` command available in the shell.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jira/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... jira)
```

----------------------------------------

TITLE: Re-enabling Tab Completion for Zsh-z Alias - Shell
DESCRIPTION: When setopt COMPLETE_ALIASES disables tab completion for command aliases, this compdef line reassigns completion to Zsh-z. It should be placed directly under the setopt command in .zshrc and uses variable expansion to determine the Zsh-z alias.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_25

LANGUAGE: shell
CODE:
```
compdef _zshz ${ZSHZ_CMD:-${_Z_CMD:-z}}
```

----------------------------------------

TITLE: Using Z Command for Directory Navigation in Bash
DESCRIPTION: Example demonstrating how to use the z command to quickly navigate to a previously visited directory using a partial match.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
/usr/bin$ z plug  # Even 'z p' might suffice
~/.oh-my-zsh/plugins$
```

----------------------------------------

TITLE: Configuring Random Theme Candidates (Shell)
DESCRIPTION: Configuration to specify a list of favorite themes for Oh My Zsh to randomly select from.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_9

LANGUAGE: sh
CODE:
```
ZSH_THEME_RANDOM_CANDIDATES=(
  "robbyrussell"
  "agnoster"
)
```

----------------------------------------

TITLE: Enabling .nvmrc Autoload and Silent Output for NVM Plugin - Zsh
DESCRIPTION: These zsh snippets enable automatic loading of a Node.js version as specified by a .nvmrc file in the current directory using the nvm plugin. The autoload option activates the feature, and the silent-autoload hides output produced by nvm during autoload (but does not suppress other nvm output). Both settings are enabled via zstyle commands that should be placed before Oh My Zsh is sourced. Dependencies include a valid nvm installation and the nvm plugin enabled in Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nvm/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
zstyle ':omz:plugins:nvm' autoload yes
zstyle ':omz:plugins:nvm' silent-autoload yes # optionally remove the output generated by NVM when autoloading
```

----------------------------------------

TITLE: Migrating autojump Database to Zsh-z Compatible Format - Awk
DESCRIPTION: This AWK command transforms an autojump.txt database file to the format expected by Zsh-z, producing an output suitable for use as ~/.z. It extracts key fields, formats them with pipes as delimiters, and sets timestamps to the current date, requiring AWK and access to a valid autojump.txt file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_24

LANGUAGE: awk
CODE:
```
awk -F "\t" '{printf("%s|%0.f|%s\n", $2, $1, '"$(date +%s)"')}' < /path/to/autojump.txt > ~/.z
```

----------------------------------------

TITLE: Configuring Custom Paths for Allowed and Disallowed Lists
DESCRIPTION: This example shows how to set custom file paths for the allowed and disallowed lists using ZSH_DOTENV_ALLOWED_LIST and ZSH_DOTENV_DISALLOWED_LIST variables in the zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dotenv/README.md#2025-04-22_snippet_4

LANGUAGE: zsh
CODE:
```
# in ~/.zshrc, before Oh My Zsh is sourced:
ZSH_DOTENV_ALLOWED_LIST=/path/to/dotenv/allowed/list
ZSH_DOTENV_DISALLOWED_LIST=/path/to/dotenv/disallowed/list
```

----------------------------------------

TITLE: Enabling Oh My Zsh npm Plugin in Zsh
DESCRIPTION: This snippet shows how to enable the npm plugin by adding 'npm' to the 'plugins' array within the user's .zshrc configuration file. This activation makes the plugin's aliases and completion features available in the Zsh shell.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/npm/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... npm)
```

----------------------------------------

TITLE: Installing React Native Plugin in ZSH
DESCRIPTION: Configuration snippet showing how to enable the React Native plugin in Oh My Zsh by adding it to the plugins array in zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/react-native/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... react-native)
```

----------------------------------------

TITLE: Decoding Base64 Data with decode64/d64 (console)
DESCRIPTION: These console commands demonstrate decoding a base64 string using the decode64 function and its alias d64. The commands support both direct parameter input and data piped into the function, outputting the original decoded text. Both aliases depend on the encode64 plugin being active in the Zsh shell and expect the base64 string as input, returning the decoded text on STDOUT.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/encode64/README.md#2025-04-22_snippet_3

LANGUAGE: console
CODE:
```
$ decode64 b2gtbXktenNo
oh-my-zsh%
$ d64 b2gtbXktenNo
oh-my-zsh%
```

LANGUAGE: console
CODE:
```
$ echo "b2gtbXktenNoCg==" | decode64
oh-my-zsh
$ echo "b2gtbXktenNoCg==" | d64
oh-my-zsh
```

----------------------------------------

TITLE: Configuring jsontools Plugin in Oh My Zsh (Zsh)
DESCRIPTION: Shows how to enable the 'jsontools' plugin by adding it to the plugins array in a .zshrc configuration file, making its command-line JSON functions available in your Zsh environment. No additional parameters are required, but you must ensure one supported backend ('node', 'python3', or 'ruby') is in your PATH.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jsontools/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... jsontools)
```

----------------------------------------

TITLE: Disabling fzf Key Bindings via DISABLE_FZF_KEY_BINDINGS (Zsh)
DESCRIPTION: Shows how to prevent the `fzf` plugin from setting up its default key bindings (CTRL-T, CTRL-R, ALT-C) by setting the `DISABLE_FZF_KEY_BINDINGS` environment variable to "true". Place this command in your `.zshrc` file before sourcing Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fzf/README.md#2025-04-22_snippet_4

LANGUAGE: zsh
CODE:
```
DISABLE_FZF_KEY_BINDINGS="true"
```

----------------------------------------

TITLE: Configuring GNU Coreutils Plugin
DESCRIPTION: This snippet shows how to enable the gnu-utils plugin in oh-my-zsh by adding it to the plugins array in the ~/.zshrc file. This setup alters command paths to prioritize GNU coreutils over the default BSD versions in environments like macOS.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gnu-utils/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... gnu-utils)
```

----------------------------------------

TITLE: Adding virtualenvwrapper Plugin to Oh My Zsh
DESCRIPTION: Shows how to enable the virtualenvwrapper plugin by adding it to the plugins array in your zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/virtualenvwrapper/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... virtualenvwrapper)
```

----------------------------------------

TITLE: Configuring Ignored Random Themes (Shell)
DESCRIPTION: Configuration to specify a list of themes to be ignored when Oh My Zsh is set to use random themes.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_10

LANGUAGE: sh
CODE:
```
ZSH_THEME_RANDOM_IGNORED=(pygmalion tjkirch_mod)
```

----------------------------------------

TITLE: Installing safe-paste Plugin in Oh My Zsh Configuration
DESCRIPTION: Shows how to enable the safe-paste plugin by adding it to the plugins array in the zshrc configuration file. This allows users to safely paste and review code before execution.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/safe-paste/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... safe-paste)
```

----------------------------------------

TITLE: Enabling the 'man' Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This configuration snippet demonstrates how to enable the 'man' plugin within an Oh My Zsh setup. By adding `man` to the `plugins` array in the `~/.zshrc` file, the user activates the plugin's functionality. This plugin provides a shortcut (<kbd>Esc</kbd> + man) to prepend 'man ' before the previous command in the shell history, making it easy to look up the manual page for that command.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/man/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... man)
```

----------------------------------------

TITLE: Creating a Widget to Toggle Path Shrinking with Keyboard Shortcut
DESCRIPTION: Definition of a Zsh widget that toggles path shrinking and binds it to a keyboard shortcut (ALT+SHIFT+S).
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shrink-path/README.md#2025-04-22_snippet_6

LANGUAGE: zsh
CODE:
```
# Widget definition
shrink-path-toggle() {
  zstyle -t ':prompt:shrink_path' expand \
    && zstyle -d ':prompt:shrink_path' expand \
    || zstyle ':prompt:shrink_path' expand true
  zle reset-prompt
}
zle -N shrink-path-toggle
# Key binding to ALT+SHIFT+S
bindkey "^[S" shrink-path-toggle
```

----------------------------------------

TITLE: Example of command-not-found plugin in action on Ubuntu
DESCRIPTION: This example demonstrates how the plugin works on Ubuntu when trying to run a command that isn't installed. It suggests packages that contain the command and provides installation instructions.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/command-not-found/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
$ mutt
The program 'mutt' can be found in the following packages:
 * mutt
 * mutt-kz
 * mutt-patched
Try: sudo apt install <selected package>
```

----------------------------------------

TITLE: Executing Gradle Commands
DESCRIPTION: These examples demonstrate how to execute common Gradle tasks using the zsh plugin. The wrapper function `gradle-or-gradlew` checks for the presence of a gradlew file, deciding whether to use gradle or gradlew, allowing for seamless execution of tasks such as "test" and "build".
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gradle/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
gradle test
gradle build
```

----------------------------------------

TITLE: Using Jump Plugin Keybinding (After Expansion) (zsh)
DESCRIPTION: Displays the result of pressing `CTRL+G` after typing a mark name (`mymark`) in a command, as shown in the previous example. The 'jump' plugin replaces the mark name with the actual directory path it points to (`/path/to/my/mark`), demonstrating the path expansion feature.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jump/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
$ cp /tmp/file /path/to/my/mark
```

----------------------------------------

TITLE: Configuring Poetry Plugin in Zsh
DESCRIPTION: This code snippet demonstrates how to configure the Poetry plugin within a Zshrc file. The Poetry plugin simplifies management of Python dependencies and environments, automatically updating completions as Poetry versions change. To activate the plugin, add 'poetry' to the plugins array in the Zshrc configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/poetry/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... poetry)
```

----------------------------------------

TITLE: Setting VI_MODE_RESET_PROMPT_ON_MODE_CHANGE Option
DESCRIPTION: Controls whether the prompt is redrawn when switching to a different input mode. When set to true, the prompt will be redrawn when changing modes.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vi-mode/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
VI_MODE_RESET_PROMPT_ON_MODE_CHANGE=true
```

----------------------------------------

TITLE: Enabling the command-not-found plugin in Oh My Zsh
DESCRIPTION: This snippet shows how to enable the command-not-found plugin by adding it to the plugins array in your zshrc configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/command-not-found/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... command-not-found)
```

----------------------------------------

TITLE: Configuring Pip Plugin for Oh My Zsh - Zsh
DESCRIPTION: This snippet demonstrates adding the pip plugin to the plugins array in a .zshrc file, enabling pip command completions and aliases in the shell. The user should add 'pip' along with other desired plugins within parentheses. After saving the .zshrc file and reloading the shell, the pip plugin functionality becomes available. Prerequisite: Oh My Zsh installed with plugin infrastructure enabled.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pip/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... pip)
```

----------------------------------------

TITLE: Configuring Poetry Environment Plugin in zsh
DESCRIPTION: This snippet demonstrates how to add the 'poetry-env' plugin to the zshrc file to enable automatic switching of poetry environments. Ensure 'poetry-env' is included in the plugins array of your zshrc configuration. The script relies on the presence of a pyproject.toml file to detect a poetry environment.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/poetry-env/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... poetry-env)
```

----------------------------------------

TITLE: Configuring OpenTofu Prompt Functions in Zsh
DESCRIPTION: This configuration snippet shows how to integrate OpenTofu prompt functions into the Zsh theme. It uses `tofu_prompt_info` to display the current workspace and `tofu_version_prompt_info` for the current version, with customizable prefix and suffix strings.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/opentofu/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
PROMPT='$(tofu_prompt_info)'
RPROMPT='$(tofu_version_prompt_info)'
```

LANGUAGE: shell
CODE:
```
# for tofu_prompt_info
ZSH_THEME_TOFU_PROMPT_PREFIX="%{$fg[white]%}"
ZSH_THEME_TOFU_PROMPT_SUFFIX="%{$reset_color%}"
# for tofu_version_prompt_info
ZSH_THEME_TOFU_VERSION_PROMPT_PREFIX="%{$fg[white]%}"
ZSH_THEME_TOFU_VERSION_PROMPT_SUFFIX="%{$reset_color%}"
```

----------------------------------------

TITLE: Loading the AWS plugin in Oh My Zsh
DESCRIPTION: This snippet shows how to add the aws plugin to the Oh My Zsh configuration by adding it to the plugins array in your zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/aws/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... aws)
```

----------------------------------------

TITLE: Yay Package Manager Commands
DESCRIPTION: A collection of shell aliases for the Yay package manager, providing shortcuts for common package management operations and system maintenance tasks.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/archlinux/README.md#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
yaconf="yay -Pg"
yaclean="yay -Sc"
yaclr="yay -Scc"
yain="yay -S"
yains="yay -U"
yainsd="yay -S --asdeps"
yaloc="yay -Qi"
yalocs="yay -Qs"
yalst="yay -Qe"
yamir="yay -Syy"
yaorph="yay -Qtd"
yare="yay -R"
yarem="yay -Rns"
yarep="yay -Si"
yareps="yay -Ss"
yaupd="yay -Sy"
yaupg="yay -Syu"
yasu="yay -Syu --no-confirm"
upgrade="yay -Syu"
```

----------------------------------------

TITLE: Configuring Node Plugin for Oh My Zsh
DESCRIPTION: This snippet explains how to enable the node plugin in Oh My Zsh by adding 'node' to the plugins array in the zshrc file. The plugin facilitates quick access to specific sections in Node.js documentation.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/node/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... node)
```

----------------------------------------

TITLE: Enabling dotenv Plugin in Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to enable the dotenv plugin in the Oh My Zsh configuration file (zshrc). Add 'dotenv' to the plugins array to activate the plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dotenv/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
plugins=(... dotenv)
```

----------------------------------------

TITLE: Configuring and Using Timer Plugin in Oh My Zsh
DESCRIPTION: Demonstrates how to use the timer plugin in Oh My Zsh. The example shows execution times for sleep commands and demonstrates how to customize the timer format and precision. It also shows the timer working with a more complex command that reads from /dev/urandom.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/timer/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
me@here:~$ sleep 1                                         /1.0s
me@here:~$ sleep 73                                     /1m13.0s
me@here:~$ TIMER_FORMAT='[%d]'; TIMER_PRECISION=2        [0.00s]
me@here:~$ head -c50 < /dev/urandom | hexdump
0000000 b2 16 20 f0 29 1f 61 2d 8a 29 20 8c 8c 39 5a ab
0000010 21 47 0e f9 ee a4 76 46 71 9e 4f 6b a4 c4 51 cb
0000020 f9 1f 7e b9 6f 2c ae dd cf 40 6d 64 a8 fb d3 db
0000030 09 37
0000032                                                  [0.02s]
```

----------------------------------------

TITLE: Command Examples without Sudo
DESCRIPTION: Example commands showing typical usage scenarios before applying sudo prefix.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sudo/README.md#2025-04-22_snippet_2

LANGUAGE: console
CODE:
```
$ apt-get install build-essential
```

LANGUAGE: console
CODE:
```
$ vim /etc/hosts
```

LANGUAGE: console
CODE:
```
$ rm some-system-file.txt
-su: some-system-file.txt: Permission denied
$
```

----------------------------------------

TITLE: Powerline10k compatibility settings for ssh-agent plugin
DESCRIPTION: Configure the ssh-agent plugin to work with Powerline10k's instant prompt feature by enabling quiet and lazy modes.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_10

LANGUAGE: zsh
CODE:
```
zstyle :omz:plugins:ssh-agent quiet yes
zstyle :omz:plugins:ssh-agent lazy yes
```

----------------------------------------

TITLE: Configuring Hyperlink Creation ('hyperlink') in Zsh
DESCRIPTION: Sets the 'hyperlink' option for the eza plugin using `zstyle`. Setting it to 'yes' makes the plugin always add the `--hyperlink` flag to `eza` commands, embedding clickable hyperlinks in the output using terminal escape codes. The default is 'no'. This configuration must be set before Oh My Zsh loads plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_10

LANGUAGE: zsh
CODE:
```
zstyle ':omz:plugins:eza' 'hyperlink' yes|no
```

----------------------------------------

TITLE: Configuring Time Style ('time-style') in Zsh
DESCRIPTION: Sets the 'time-style' option for the eza plugin using `zstyle`, controlling the format of timestamps. The value `$TIME_STYLE` should be replaced with a valid time style option accepted by `eza` (e.g., 'iso', 'long-iso', 'full-iso', 'relative'). Consult `man eza` for valid options. If not set, the `eza` default is used. This configuration must be set before Oh My Zsh loads plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_9

LANGUAGE: zsh
CODE:
```
zstyle ':omz:plugins:eza' 'time-style' $TIME_STYLE
```

----------------------------------------

TITLE: Configuring Project-Specific Jira URL via Shell
DESCRIPTION: Demonstrates how to set a project-specific JIRA instance URL using shell commands. By navigating into the project directory (`cd`) and appending the URL to a `.jira-url` file, this configuration takes precedence over global settings (like `$JIRA_URL` or `~/.jira-url`) for commands run within that directory.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jira/README.md#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
cd to/my/project
echo "https://jira.atlassian.com" >> .jira-url
```

----------------------------------------

TITLE: Customizing Jira Issue Extraction from Git Branch Name in Zsh
DESCRIPTION: Provides an example Zsh function definition for `jira_branch`. This function overrides the plugin's default behavior for extracting a Jira issue key from the current Git branch name. It's intended for users with custom branch naming conventions (e.g., 'type/KEY-123/description') and should be defined in `.zshrc` after sourcing Oh My Zsh. The function uses `git rev-parse` to get the branch name and parameter expansion to isolate the key.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jira/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
# Determine branch name from naming convention 'type/KEY-123/description'.
function jira_branch() {
  # Get name of the branch
  issue_arg=$(git rev-parse --abbrev-ref HEAD)
  # Strip prefixes like feature/ or bugfix/
  issue_arg=${issue_arg#*/}
  # Strip suffixes like /some-branch-description
  issue_arg=${issue_arg%%/*}
  # Return the value
  echo $issue_arg
}
```

----------------------------------------

TITLE: Disabling fzf Auto-Completion via DISABLE_FZF_AUTO_COMPLETION (Zsh)
DESCRIPTION: Provides the command to disable the loading of `fzf`'s fuzzy auto-completion feature by setting the `DISABLE_FZF_AUTO_COMPLETION` environment variable to "true". This configuration must be set in `.zshrc` before Oh My Zsh is sourced.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fzf/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
DISABLE_FZF_AUTO_COMPLETION="true"
```

----------------------------------------

TITLE: Limit Oh My Zsh Update Verbosity
DESCRIPTION: Demonstrates how to adjust the verbosity of update prompts in Oh My Zsh using zstyle settings, allowing for default prompts, minimal updates, or silent mode for only errors.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_19

LANGUAGE: sh
CODE:
```
zstyle ':omz:update' verbose default
zstyle ':omz:update' verbose minimal
zstyle ':omz:update' verbose silent
```

----------------------------------------

TITLE: Manual Inspection of Oh My Zsh Install Script (Shell)
DESCRIPTION: Commands to download and manually inspect the Oh My Zsh installation script before running it.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
sh install.sh
```

----------------------------------------

TITLE: Using the 'pj' Command with Path Precedence (Zsh)
DESCRIPTION: This Zsh command-line example illustrates how the `pj` command works when multiple directories share the same name across different paths listed in `$PROJECT_PATHS`. It demonstrates that the command prioritizes the directory found in the path listed earlier in the `$PROJECT_PATHS` array. The example assumes `$PROJECT_PATHS` is set and shows the resulting `cd` action.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pj/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
PROJECT_PATHS=(~/code ~/work)
$ ls ~/code    # ~/code/blog ~/code/react
$ ls ~/work    # ~/work/blog ~/work/project
$ pj blog      # <-- will cd to ~/code/blog
```

----------------------------------------

TITLE: Setting Cursor Styles for Different Vi Modes
DESCRIPTION: Defines the cursor style to use in each active vim mode with customizable numeric values for different cursor appearances.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vi-mode/README.md#2025-04-22_snippet_5

LANGUAGE: zsh
CODE:
```
# defaults
VI_MODE_CURSOR_NORMAL=2
VI_MODE_CURSOR_VISUAL=6
VI_MODE_CURSOR_INSERT=6
VI_MODE_CURSOR_OPPEND=0
```

----------------------------------------

TITLE: Creating a Dynamic Proxy Configuration Script (Method 2)
DESCRIPTION: Creating an executable configuration script at $HOME/.config/proxy to dynamically determine proxy settings based on the operating system. The script returns the proxy URL and no-proxy domains.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shell-proxy/README.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
#!/bin/bash

# HTTP Proxy
if [[ "$(uname)" = Darwin ]]; then
  echo "http://127.0.0.1:6152" # Surge Mac
else
  echo "http://127.0.0.1:8123" # polipo
fi

# No Proxy
echo "localhost,127.0.0.1"
```

----------------------------------------

TITLE: Fish-style Working Directory in Command Prompt
DESCRIPTION: Configuration to add a fish-style working directory in your command prompt by modifying your theme or zshrc.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shrink-path/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
setopt prompt_subst
PS1='%n@%m $(shrink_path -f)>'
```

----------------------------------------

TITLE: Configuring Key Bindings for npm Toggle in Zsh
DESCRIPTION: These commands demonstrate how to set custom key bindings for the `npm_toggle_install_uninstall` function provided by the npm plugin. It uses the `bindkey` command for different Zsh keymaps (emacs, vi command mode, vi insert mode). The user needs to replace '<seq>' with their desired key sequence.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/npm/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
bindkey -M emacs '<seq>' npm_toggle_install_uninstall
bindkey -M vicmd '<seq>' npm_toggle_install_uninstall
bindkey -M viins '<seq>' npm_toggle_install_uninstall
```

----------------------------------------

TITLE: Configuring Icon Display ('icons') in Zsh
DESCRIPTION: Sets the 'icons' option for the eza plugin using `zstyle`. Setting it to 'yes' makes the plugin always add the `--icons` flag to `eza` commands, displaying icons next to file and folder names. The default is 'no'. This configuration must be set before Oh My Zsh loads plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_5

LANGUAGE: zsh
CODE:
```
zstyle ':omz:plugins:eza' 'icons' yes|no
```

----------------------------------------

TITLE: Activating zsh-history-substring-search in Oh-my-zsh Config (Zsh)
DESCRIPTION: Modifies the 'plugins' array within the ~/.zshrc file to include 'zsh-history-substring-search', thereby enabling the plugin within an Oh-my-zsh environment. Replace '[plugins...]' with any existing plugins already listed in the array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
plugins=( [plugins...] zsh-history-substring-search)
```

----------------------------------------

TITLE: Sample .env File without Export Statements
DESCRIPTION: This example shows an alternative format for a .env file without using export statements. It includes the same environment variables as the previous example.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dotenv/README.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
AWS_S3_TOKEN=d84a83539134f28f412c652b09f9f98eff96c9a
SECRET_KEY=7c6c72d959416d5aa368a409362ec6e2ac90d7f
MONGO_URI=mongodb://127.0.0.1:27017
PORT=3001
```

----------------------------------------

TITLE: Displaying Default Git Prompt Structure - Text Representation
DESCRIPTION: This text snippet illustrates the default structure of the shell prompt after enabling the git-prompt plugin. The format is '(branch and tracking info|local status)', where placeholders are replaced at runtime by relevant branch names, tracking status, and working directory state. Inputs (such as git actions) dynamically update these fields. No external dependencies are required for interpreting this output, though understanding the symbols requires reading the related documentation.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-prompt/README.md#2025-04-22_snippet_1

LANGUAGE: text
CODE:
```
(<branch><branch tracking>|<local status>)
```

----------------------------------------

TITLE: Displaying Node Version in Zsh Prompt using nodenv_prompt_info (Zsh)
DESCRIPTION: Demonstrates how to use the `nodenv_prompt_info` function provided by the nodenv plugin within the Zsh prompt configuration. By assigning its command substitution `$(nodenv_prompt_info)` to `RPROMPT` (right prompt), the currently active Node.js version (managed by nodenv or global) will be displayed. Requires the nodenv plugin to be enabled.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nodenv/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
RPROMPT='$(nodenv_prompt_info)'
```

----------------------------------------

TITLE: Configuring Perms Plugin in Zsh
DESCRIPTION: The snippet shows how to add the perms plugin to the plugins array in the zshrc configuration file, which enables commands for managing file permissions through this plugin. No external dependencies are needed other than having Zsh installed. This setup allows the use of predefined functions for setting permissions on files and directories.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/perms/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... perms)
```

----------------------------------------

TITLE: Enabling iTerm2 Shell Integration via zstyle Configuration - Shell
DESCRIPTION: This snippet configures the iTerm2 plugin to enable its shell integration features by adding a zstyle command before sourcing Oh My Zsh in your zshrc. Setting 'zstyle :omz:plugins:iterm2 shell-integration yes' ensures that shell integration is activated, which provides advanced session features in iTerm2. Place this line before the line that sources oh-my-zsh to ensure proper effect.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/iterm2/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
zstyle :omz:plugins:iterm2 shell-integration yes
```

----------------------------------------

TITLE: Configuring Mix Plugin in Zsh
DESCRIPTION: This snippet demonstrates how to enable the Mix plugin in the Oh My Zsh configuration by adding 'mix' to the plugins array in the .zshrc file. No additional dependencies are required aside from having Oh My Zsh installed. The inputs involve editing the .zshrc file to include the plugin name. This setup allows for completions associated with the Mix tool.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mix/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... mix)
```

----------------------------------------

TITLE: Configuring Plugins in oh-my-zsh
DESCRIPTION: This snippet demonstrates how to add the 'gcloud' plugin to your oh-my-zsh configuration to support Google Cloud SDK CLI completion. Ensure that the Google Cloud SDK is installed. If installed in a non-standard location, set the 'CLOUDSDK_HOME' variable. For environments without 'python2', set the 'CLOUDSDK_PYTHON' variable.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gcloud/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... gcloud)
```

----------------------------------------

TITLE: Overriding Package Manager Preferences for Debian Plugin - Shell Script
DESCRIPTION: This snippet illustrates how to set the $apt_pref and $apt_upgr shell variables to override the default behavior of the Debian plugin in Oh My Zsh before it is sourced. By assigning alternative commands (e.g., 'apt' for package manager and 'full-upgrade' for the upgrade command), users can customize which tool the plugin's aliases and scripts will use. Only supported within the context of Oh My Zsh and a POSIX-compatible shell; variables must be defined before sourcing the framework.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/debian/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
apt_pref='apt'
apt_upgr='full-upgrade'
```

----------------------------------------

TITLE: Customizing Color Settings for Less Pager
DESCRIPTION: Shows how to customize the color settings by modifying the less_termcap array after Oh My Zsh is sourced
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/colored-man-pages/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
less_termcap[md]="${fg_bold[blue]}" # this tells less to print bold text in bold blue
```

----------------------------------------

TITLE: Default kube-ps1 Prompt Structure
DESCRIPTION: Illustrates the default output format for the `kube-ps1` prompt segment, including the symbol, context name, and namespace name, enclosed in parentheses and separated by configured delimiters. `<symbol>` is the configured icon (defaulting to ⎈).
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_7

LANGUAGE: text
CODE:
```
(<symbol>|<context>:<namespace>)
```

----------------------------------------

TITLE: Configuring Custom VS Code Executable in Oh My Zsh
DESCRIPTION: Demonstrates how to manually specify which VS Code flavor to use by setting the VSCODE environment variable in .zshrc. This allows users to choose between code, code-insiders, or codium.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vscode/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
ZSH_THEME=...

# Choose between one [code, code-insiders or codium]
# The following line will make the plugin to open VS Code Insiders
# Invalid entries will be ignored, no aliases will be added
VSCODE=code-insiders

plugins=(... vscode)

source $ZSH/oh-my-zsh.sh
```

----------------------------------------

TITLE: Configuring Terraform Workspace Prompt
DESCRIPTION: Configuration for displaying Terraform workspace information in shell prompt using prompt functions.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/terraform/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
RPROMPT='$(tf_prompt_info)'
RPROMPT='$(tf_version_prompt_info)'
```

----------------------------------------

TITLE: Example Git Plugin Conventional Commit Format
DESCRIPTION: Example of a properly formatted commit message for adding functionality to the git plugin. Shows the proper scope naming convention.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
feat(git): add alias for `git commit`
```

----------------------------------------

TITLE: Implementing Battery Percentage in Oh My Zsh Theme
DESCRIPTION: This code demonstrates how to add the battery_pct_prompt function to a custom Oh My Zsh theme. It allows for displaying battery percentage information in the right prompt (RPROMPT).
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/battery/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
RPROMPT='$(battery_pct_prompt) ...'
```

----------------------------------------

TITLE: Adding Custom Search Engines to Web-Search Plugin
DESCRIPTION: Shows how to customize the web-search plugin by adding additional search engines using the ZSH_WEB_SEARCH_ENGINES variable. This must be set before Oh My Zsh is sourced.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/web-search/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
ZSH_WEB_SEARCH_ENGINES=(
    <context> <URL>
    <context> <URL>
)
```

----------------------------------------

TITLE: Enabling Common Aliases Plugin in Oh My Zsh
DESCRIPTION: This code snippet shows how to enable the Common Aliases plugin in the Oh My Zsh configuration file (zshrc). It adds 'common-aliases' to the plugins array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/common-aliases/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... common-aliases)
```

----------------------------------------

TITLE: Enabling the Jump Plugin in Oh My Zsh (zsh)
DESCRIPTION: Demonstrates how to enable the 'jump' plugin by adding its name to the `plugins` array within the `.zshrc` configuration file. This activates the plugin's functionality, including commands like `jump`, `mark`, `unmark`, `marks`, and the CTRL+G keybinding.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jump/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... jump)
```

----------------------------------------

TITLE: Enabling Golang Plugin in Oh My Zsh
DESCRIPTION: This snippet demonstrates how to activate the Oh My Zsh `golang` plugin by adding its name to the `plugins` array within the user's `.zshrc` configuration file. This enables Go command completions and aliases defined by the plugin. Requires Oh My Zsh to be installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/golang/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... golang)
```

----------------------------------------

TITLE: Generating Passwords with ZSH Plugin
DESCRIPTION: This code snippet allows users to add the genpass plugin to their ZSH configuration to use the password generators interactively. By including 'genpass' in the plugins array within zshrc, these generators become accessible from the command line.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/genpass/README.md#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
plugins=(... genpass)
```

----------------------------------------

TITLE: Setting Oh My Zsh Theme to Agnoster (Shell)
DESCRIPTION: Example of how to set the Agnoster theme in Oh My Zsh by modifying the ZSH_THEME variable in the .zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_7

LANGUAGE: sh
CODE:
```
ZSH_THEME="agnoster" # (this is one of the fancy ones)
# see https://github.com/ohmyzsh/ohmyzsh/wiki/Themes#agnoster
```

----------------------------------------

TITLE: Using isodate Aliases for Date Formatting - Zsh Shell
DESCRIPTION: Lists and documents the primary date formatting aliases provided by the isodate plugin. These aliases map common date commands to convenient shell shortcuts conforming to ISO 8601 standards or locale/unix timestamp formats. Each alias takes no arguments and prints the date in a specific format directly to standard output.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/isodate/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
isodate       # date +%Y-%m-%dT%H:%M:%S%z
```

LANGUAGE: zsh
CODE:
```
isodate_utc   # date -u +%Y-%m-%dT%H:%M:%SZ
```

LANGUAGE: zsh
CODE:
```
isodate_basic # date -u +%Y%m%dT%H%M%SZ
```

LANGUAGE: zsh
CODE:
```
unixstamp     # date +%s
```

LANGUAGE: zsh
CODE:
```
date_locale   # date +"%c"
```

----------------------------------------

TITLE: Configuring kube-ps1 for Zsh (Manual Source)
DESCRIPTION: Sources the `kube-ps1.sh` script and prepends the `kube_ps1` function output to the Zsh `PROMPT` variable. This method requires manually cloning the repository and specifying the correct path to `kube-ps1.sh` in the `.zshrc` file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
source /path/to/kube-ps1.sh
PROMPT='$(kube_ps1)'$PROMPT
```

----------------------------------------

TITLE: Activating Zsh-z in Oh My Zsh
DESCRIPTION: Configuration example for activating the built-in Zsh-z plugin in Oh My Zsh by adding it to the plugins array in .zshrc.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
plugins=( git z )
```

----------------------------------------

TITLE: Configuring Custom Proxy Config Location (Method 3)
DESCRIPTION: Setting a custom location for the proxy configuration script by defining the SHELLPROXY_CONFIG environment variable. This allows keeping the configuration in a different location than the default.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shell-proxy/README.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
SHELLPROXY_CONFIG="$HOME/.dotfiles/proxy-config"
```

----------------------------------------

TITLE: Configuring knife_ssh Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This snippet demonstrates how to include the 'knife_ssh' plugin within the plugins array in your .zshrc configuration file for Oh My Zsh. Enabling this plugin introduces the knife_ssh function and related completion utilities, streamlining SSH connections to Chef-managed servers. Prerequisites include having Oh My Zsh and the 'knife' CLI installed. The plugins array should be edited to append 'knife_ssh' (and any other desired plugins).
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/knife_ssh/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... knife_ssh)
```

----------------------------------------

TITLE: Filtering Alias Expansion in Zsh
DESCRIPTION: This example shows how to prevent specific aliases from being expanded by 'globalias'. By setting `GLOBALIAS_FILTER_VALUES=(l)` in `.zshrc`, the alias `l` will not be expanded when SPACE is pressed, while other aliases like `la` will still expand as usual. This requires defining the aliases `l='ls -lh'` and `la='ls --color=auto -lah'` beforehand.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/globalias/README.md#2025-04-22_snippet_6

LANGUAGE: zsh
CODE:
```
# .zshrc
alias l='ls -lh'
alias la='ls --color=auto -lah'
GLOBALIAS_FILTER_VALUES=(l)

$ l<space>
# does not expand
$ la<space>
# expands to:
$ ls --color=auto -lah
```

----------------------------------------

TITLE: Customizing Mercurial Prompt Theme Variables in Oh My Zsh (Zsh)
DESCRIPTION: This snippet shows how to redefine the appearance of Mercurial prompt elements by customizing plugin variables. Users can tweak color codes and symbols for the Mercurial prompt's prefix, suffix, dirty, and clean states. Requires Oh My Zsh's Mercurial plugin to be installed and sourced. Place these settings after sourcing Oh My Zsh in your .zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mercurial/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
ZSH_THEME_HG_PROMPT_PREFIX="%{$fg_bold[magenta]%}hg:(%{$fg[red]%}"
ZSH_THEME_HG_PROMPT_SUFFIX="%{$reset_color%}"
ZSH_THEME_HG_PROMPT_DIRTY="%{$fg[magenta]%}) %{$fg[yellow]%}✗%{$reset_color%}"
ZSH_THEME_HG_PROMPT_CLEAN="%{$fg[magenta]%})"
```

----------------------------------------

TITLE: Customizing conda environment display in prompt
DESCRIPTION: Example configuration for customizing how conda environment information appears in the prompt. This sets a green color for the environment name and places it in the right prompt (RPROMPT).
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/conda-env/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
ZSH_THEME_CONDA_PREFIX='conda:%F{green}'
ZSH_THEME_CONDA_SUFFIX='%f'
RPROMPT='$(conda_prompt_info)'
```

----------------------------------------

TITLE: Configuring Color Scale Mode ('color-scale-mode') in Zsh
DESCRIPTION: Sets the 'color-scale-mode' option for the eza plugin using `zstyle`. Choose between 'gradient' (default) for gradient coloring or 'fixed' for fixed coloring when using color scaling. This corresponds to the `--color-scale-mode` flag in `eza`. This configuration must be set before Oh My Zsh loads plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_7

LANGUAGE: zsh
CODE:
```
zstyle ':omz:plugins:eza' 'color-scale-mode' gradient|fixed
```

----------------------------------------

TITLE: Customizing Prompt with Kubernetes Context via kubectx (Zsh)
DESCRIPTION: This snippet illustrates how to integrate the kubectx_prompt_info function into your Zsh shell prompt configuration. It configures both right (RPS1) and left (PROMPT) sides of the prompt to call kubectx_prompt_info, which will display the currently active Kubernetes context. To use, insert these lines into your .zshrc; the function returns a string with the context name and works alongside other prompt content.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectx/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
# right prompt
RPS1='$(kubectx_prompt_info)'
# left prompt
PROMPT="$PROMPT"'$(kubectx_prompt_info)'
```

----------------------------------------

TITLE: Hostname-based Configuration File Loading
DESCRIPTION: This text snippet illustrates the order in which configuration files are loaded based on the parts of the hostname. The system checks for configuration files in the $ZSH_CUSTOM/profiles directory corresponding to increasingly specific parts of the domain name, starting from the top-level domain to the full hostname.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/profiles/README.md#2025-04-22_snippet_1

LANGUAGE: text
CODE:
```
$ZSH_CUSTOM/profiles/com
$ZSH_CUSTOM/profiles/domain.com
$ZSH_CUSTOM/profiles/host.domain.com
```

----------------------------------------

TITLE: Enabling the virtualenv plugin in Oh My Zsh configuration
DESCRIPTION: This snippet shows how to add the virtualenv plugin to the plugins array in your .zshrc file to activate the plugin's functionality.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/virtualenv/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
plugins=(... virtualenv)
```

----------------------------------------

TITLE: Installing Ruby Plugin in Oh My Zsh Configuration
DESCRIPTION: Shows how to enable the Ruby plugin by adding it to the plugins array in the zshrc file. This allows access to all Ruby-related aliases defined by the plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ruby/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... ruby)
```

----------------------------------------

TITLE: Remapping Key Bindings Example
DESCRIPTION: Example of how to remap vi-mode key bindings when using a low $KEYTIMEOUT value, specifically remapping 'vv' to 'V' for the edit-command-line function.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vi-mode/README.md#2025-04-22_snippet_6

LANGUAGE: zsh
CODE:
```
bindkey -M vicmd 'V' edit-command-line # this remaps `vv` to `V` (but overrides `visual-mode`)
```

----------------------------------------

TITLE: Passing additional arguments to ssh-add command
DESCRIPTION: Configure additional arguments to be passed to the ssh-add command when adding identities on startup.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_9

LANGUAGE: zsh
CODE:
```
zstyle :omz:plugins:ssh-agent ssh-add-args -K -c -a /run/user/1000/ssh-auth
```

----------------------------------------

TITLE: Using Colored Command with Git Help
DESCRIPTION: Demonstrates how to use the colored prefix to colorize other help pages
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/colored-man-pages/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
colored git help clone
```

----------------------------------------

TITLE: Defining Project Paths for 'pj' Plugin (Zsh)
DESCRIPTION: This Zsh snippet demonstrates how to define the `$PROJECT_PATHS` environment variable in your `.zshrc` file. This array variable lists the directories where the 'pj' plugin will search for project folders. Paths with spaces need to be quoted.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pj/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
PROJECT_PATHS=(~/src ~/work ~/"dir with spaces")
```

----------------------------------------

TITLE: Adding procs Plugin to oh-my-zsh Configuration - Shell
DESCRIPTION: This snippet demonstrates how to include the procs plugin in your oh-my-zsh configuration by adding it to the plugins array within your .zshrc file. This is required to enable completions for procs. The plugins array may contain additional plugins, so procs should be added alongside others. No additional dependencies are needed beyond a working oh-my-zsh installation and the procs utility.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/procs/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
plugins=(... procs)
```

----------------------------------------

TITLE: Adding Mode Indicators to Prompt Manually
DESCRIPTION: Examples of how to add mode indicators to PROMPT or RPROMPT manually using the vi_mode_prompt_info function.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vi-mode/README.md#2025-04-22_snippet_4

LANGUAGE: zsh
CODE:
```
source $ZSH/oh-my-zsh.sh

PROMPT="$PROMPT\$(vi_mode_prompt_info)"
RPROMPT="\$(vi_mode_prompt_info)$RPROMPT"
```

----------------------------------------

TITLE: Customizing Mode Indicators
DESCRIPTION: Example showing how to customize the appearance of mode indicators for normal and insert modes using Prompt Expansion sequences.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vi-mode/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
MODE_INDICATOR="%F{white}+%f"
INSERT_MODE_INDICATOR="%F{yellow}+%f"
```

----------------------------------------

TITLE: Configuring Color Scaling ('color-scale') in Zsh
DESCRIPTION: Sets the 'color-scale' option for the eza plugin using `zstyle`, controlling field highlighting. Specify 'all', 'age', 'size', or a comma-separated list. This corresponds to the `--color-scale` flag in `eza`. The default is 'none'. This configuration must be set before Oh My Zsh loads plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_6

LANGUAGE: zsh
CODE:
```
zstyle ':omz:plugins:eza' 'color-scale' all|age|size
```

----------------------------------------

TITLE: Configuring Pygments Style for Colorize
DESCRIPTION: This snippet shows how to set a custom style for Pygments syntax highlighting using the ZSH_COLORIZE_STYLE environment variable.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/colorize/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
ZSH_COLORIZE_STYLE="colorful"
```

----------------------------------------

TITLE: Adding Composer Plugin to Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to enable the Composer plugin in the Oh My Zsh configuration file (zshrc). It demonstrates adding 'composer' to the plugins array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/composer/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... composer)
```

----------------------------------------

TITLE: Enabling Oh My Zsh Debian Plugin - Zsh
DESCRIPTION: This snippet demonstrates how to activate the Debian plugin within the Oh My Zsh framework by adding it to the plugins array inside the .zshrc configuration file. No additional dependencies besides Oh My Zsh are required; the snippet simply appends 'debian' to the array. This enables all related aliases and functions on the next shell session. It accepts any existing plugin entries and adds the debian plugin for extended functionality.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/debian/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... debian)
```

----------------------------------------

TITLE: Enabling Yarn Plugin in Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to add the Yarn plugin to the plugins array in the zshrc file to enable it in Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/yarn/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... yarn)
```

----------------------------------------

TITLE: Provisioning Dependencies for oh-my-zsh Azure Plugin (bash)
DESCRIPTION: This set of commands installs critical dependencies in an Ubuntu environment, including curl, jq, zsh, git, and vim, followed by the oh-my-zsh installer and the Azure CLI installation script. These ensure all required tools are available for using and developing the oh-my-zsh Azure plugin. The inputs are the APT package manager and remote installation scripts; outputs include installed utilities and a configured shell. Internet connectivity and permissions to install system packages are prerequisites.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/azure/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
apt install -y curl jq zsh git vim
sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
curl -sL https://aka.ms/InstallAzureCLIDeb | bash
```

----------------------------------------

TITLE: Enabling Arch Linux Plugin in Oh My Zsh
DESCRIPTION: This snippet shows how to enable the Arch Linux plugin in the Oh My Zsh configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/archlinux/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... archlinux)
```

----------------------------------------

TITLE: Encoding File Content to Base64 with encodefile64/ef64 (console)
DESCRIPTION: These commands show encoding an input file's contents to base64 using encodefile64 (and its alias ef64), saving the result to a new file with a .txt extension. The function requires a filename as a parameter and will create a new file containing the base64-encoded contents. This operation is subject to the prerequisites of file existence and plugin configuration within Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/encode64/README.md#2025-04-22_snippet_2

LANGUAGE: console
CODE:
```
$ encodefile64 ohmyzsh.icn
ohmyzsh.icn's content encoded in base64 and saved as ohmyzsh.icn.txt
$ ef64 "oh-my-zsh"
ohmyzsh.icn's content encoded in base64 and saved as ohmyzsh.icn.txt
```

----------------------------------------

TITLE: Customizing Zsh Prompt to Include Mercurial Status (Zsh)
DESCRIPTION: This example demonstrates how to modify the PROMPT variable in .zshrc to include Mercurial repository information using 'hg_prompt_info'. It assumes the use of the 'robbyrussell' theme and appends Mercurial details after the existing Git information. Requires Oh My Zsh, enabled git and mercurial plugins, and use of a compatible theme. Input: existing PROMPT variable, Output: extended prompt with Mercurial info.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mercurial/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
PROMPT='${ret_status}%{$fg_bold[green]%}%p %{$fg[cyan]%}%c %{$fg_bold[blue]%}$(git_prompt_info)$(hg_prompt_info)%{$fg_bold[blue]%} % %{$reset_color%}'
```

----------------------------------------

TITLE: Defining LANDO_ZSH_WRAPPED_COMMANDS
DESCRIPTION: This snippet defines the commands to be wrapped by Lando, listed as a string of commands separated by spaces. Users can modify this to include or exclude specific commands as required by their projects.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lando/README.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
LANDO_ZSH_WRAPPED_COMMANDS="mysql php composer test artisan"
```

----------------------------------------

TITLE: Commands for Enabling/Disabling kube-ps1
DESCRIPTION: Lists and explains the `kubeon` and `kubeoff` commands used to control the visibility of the `kube-ps1` prompt segment within the shell. `kubeon` and `kubeoff` affect the current shell only, while the `-g` flag makes the change persistent across future shell sessions by modifying a configuration file (`~/.kube/kube-ps1`).
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_9

LANGUAGE: text
CODE:
```
kubeon     : turn on kube-ps1 status for this shell.  Takes precedence over
             global setting for current session
kubeon -g  : turn on kube-ps1 status globally
kubeoff    : turn off kube-ps1 status for this shell. Takes precedence over
             global setting for current session
kubeoff -g : turn off kube-ps1 status globally
```

----------------------------------------

TITLE: Setting Up Plugins in Oh My Zsh
DESCRIPTION: This snippet shows how to add the git-commit plugin to the plugins array in your zshrc file. This is necessary to enable the use of git aliases for conventional commit messages when using Oh My Zsh. Make sure to edit the correct configuration file and adjust for any existing plugins in use.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-commit/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... git-commit)
```

----------------------------------------

TITLE: Adding a warp point to a specific directory with custom name
DESCRIPTION: Command to add a warp point named 'bar' pointing to the '/foo/' directory.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_16

LANGUAGE: zsh
CODE:
```
wd addcd /foo/ bar
```

----------------------------------------

TITLE: Configuring File Size Prefix ('size-prefix') in Zsh
DESCRIPTION: Sets the 'size-prefix' option for the eza plugin using `zstyle`, controlling how file sizes are displayed. Options are 'binary' (Ki, Mi), 'none' (bytes), or 'si' (k, M - default). This corresponds to the `--size-prefix` flag in `eza`. This configuration must be set before Oh My Zsh loads plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_8

LANGUAGE: zsh
CODE:
```
zstyle ':omz:plugins:eza' 'size-prefix' (binary|none|si)
```

----------------------------------------

TITLE: Configuring Header Display ('header') in Zsh
DESCRIPTION: Sets the 'header' option for the eza plugin using `zstyle`. Setting it to 'yes' makes the plugin always add the `-h` flag to `eza` commands, displaying a header row for each column. The default is 'no'. This configuration must be set before Oh My Zsh loads plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
zstyle ':omz:plugins:eza' 'header' yes|no
```

----------------------------------------

TITLE: Installing zsh-history-substring-search via Homebrew (Shell)
DESCRIPTION: Installs the zsh-history-substring-search plugin using the Homebrew package manager and configures Zsh to load it by appending the source command to the user's ~/.zshrc file. Requires Homebrew to be installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
brew install zsh-history-substring-search
echo 'source $(brew --prefix)/share/zsh-history-substring-search/zsh-history-substring-search.zsh' >> ~/.zshrc
```

----------------------------------------

TITLE: Reloading Zsh Configuration (Shell)
DESCRIPTION: Executes 'exec zsh' to replace the current shell process with a new Zsh instance. This effectively reloads the Zsh configuration files (like ~/.zshrc) and applies any recent changes, such as activating newly added plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
exec zsh
```

----------------------------------------

TITLE: Adding MicroK8s Plugin to Oh My Zsh
DESCRIPTION: This snippet shows how to add the MicroK8s plugin to the plugins array in the zshrc file. This allows the use of convenient aliases and autocompletion for MicroK8s commands.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/microk8s/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... microk8s)
```

----------------------------------------

TITLE: scd Usage Examples
DESCRIPTION: Demonstrates common usage patterns of the scd command including indexing directories, pattern matching, and creating aliases.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/scd/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
# Index recursively some paths for the very first run
scd -ar ~/Documents/

# Change to a directory path matching "doc"
scd doc

# Change to a path matching all of "a", "b" and "c"
scd a b c

# Change to a directory path that ends with "ts"
scd "ts$"

# Show selection menu and ranking of 20 most likely directories
scd -v

# Alias current directory as "xray"
scd --alias=xray

# Jump to a previously defined aliased directory
scd xray
```

----------------------------------------

TITLE: Installing Rake Plugin in Oh My Zsh
DESCRIPTION: Instructions for adding the Rake plugin to Oh My Zsh configuration by modifying the plugins array in zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rake/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... rake)
```

----------------------------------------

TITLE: Adding the Systemd Plugin to Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to enable the systemd plugin in the Oh My Zsh configuration file (zshrc).
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/systemd/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... systemd)
```

----------------------------------------

TITLE: Adding Reddit Search Engine Example
DESCRIPTION: Specific example showing how to add Reddit as a custom search engine to the web-search plugin. This creates both a web_search context and an alias.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/web-search/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
ZSH_WEB_SEARCH_ENGINES=(reddit "https://www.reddit.com/search/?q=")
```

----------------------------------------

TITLE: Configuring Vim-Style Smartcase for Zsh-z - Shell
DESCRIPTION: This shell line sets Zsh-z to interpret lowercase patterns as case-insensitive and mixed/uppercase ones as case-sensitive, mimicking Vim's smartcase behavior. Append to your .zshrc to change default search logic.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_22

LANGUAGE: shell
CODE:
```
ZSHZ_CASE=smart
```

----------------------------------------

TITLE: Adding Pre-commit Plugin to Zsh Configuration
DESCRIPTION: This snippet shows how to add the pre-commit plugin to the list of plugins in your zshrc file. It requires that you have ohmyzsh installed and you need to add 'pre-commit' to the plugins array. The input should be your existing plugins array in your zshrc file, and the output is the updated array with the pre-commit plugin included.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pre-commit/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... pre-commit)
```

----------------------------------------

TITLE: Encrypting and uploading directories with symmetric cipher
DESCRIPTION: Command to encrypt and upload a directory with symmetric cipher and gpg output using the transfer plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/transfer/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
transfer directory -ca
```

----------------------------------------

TITLE: Configuring SSH for Separate Last-Working-Dir Files
DESCRIPTION: This snippet demonstrates how to configure the SSH server to allow separate last-working-dir files for different SSH users by enabling the use of environment variables. The configuration requires updates to the sshd_config file and authorized_keys entries.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/last-working-dir/README.md#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
PermitUserEnvironment yes
```

LANGUAGE: plaintext
CODE:
```
environment=\"SSH_USER=a.test@example.com\" ssh-ed25519 AAAAC3Nz...
```

----------------------------------------

TITLE: Skipping Aliases in Oh My Zsh
DESCRIPTION: Shows how to disable default aliases in Oh My Zsh by using zstyle configurations in the .zshrc file. The configuration must be set before sourcing Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_16

LANGUAGE: sh
CODE:
```
# Skip all aliases, in lib files and enabled plugins
zstyle ':omz:*' aliases no

# Skip all aliases in lib files
zstyle ':omz:lib:*' aliases no
# Skip only aliases defined in the directories.zsh lib file
zstyle ':omz:lib:directories' aliases no

# Skip all plugin aliases
zstyle ':omz:plugins:*' aliases no
# Skip only the aliases from the git plugin
zstyle ':omz:plugins:git' aliases no
```

----------------------------------------

TITLE: Adding Aliases Plugin to Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to enable the 'aliases' plugin in the Oh My Zsh configuration file (zshrc). It requires adding 'aliases' to the plugins array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/aliases/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(aliases)
```

----------------------------------------

TITLE: Batch Add Git Working Directories to Zsh-z Database - Shell
DESCRIPTION: This loop will recursively search for Git repositories under the present working directory using find, extract each repository's parent directory, and add it to the Zsh-z database by calling z --add. Requires that find, dirname (or Zsh parameter expansion), and Zsh-z are installed and accessible.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_23

LANGUAGE: shell
CODE:
```
for i in $(find $PWD -maxdepth 3 -name .git -type d); do
  z --add ${i:h}
done
```

----------------------------------------

TITLE: Enabling the cp Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This Zsh configuration snippet demonstrates how to enable the 'cp' plugin in Oh My Zsh. By adding 'cp' to the 'plugins' array within the '.zshrc' file, the user activates the plugin's features, including the 'cpv' command which uses 'rsync' with predefined options. This modification requires editing the '.zshrc' file and assumes Oh My Zsh is already installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/cp/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... cp)
```

----------------------------------------

TITLE: Configuring Directory Grouping ('dirs-first') in Zsh
DESCRIPTION: Sets the 'dirs-first' option for the eza plugin using `zstyle`. Setting it to 'yes' groups directories before files in the output. The default is 'no'. This configuration must be set before Oh My Zsh loads plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
zstyle ':omz:plugins:eza' 'dirs-first' yes|no
```

----------------------------------------

TITLE: Adding Volta Plugin to Oh My Zsh Configuration
DESCRIPTION: This code snippet shows how to enable the Volta plugin by adding it to the plugins array in the user's zshrc file. This allows for Volta command completion in the terminal.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/volta/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
plugins=(... volta)
```

----------------------------------------

TITLE: Enabling Bazel Plugin in Oh My Zsh Configuration
DESCRIPTION: This code snippet shows how to enable the Bazel plugin in the Oh My Zsh configuration file (zshrc). It demonstrates adding 'bazel' to the plugins array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bazel/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... bazel)
```

----------------------------------------

TITLE: Enabling kubectx Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This snippet shows how to add the 'kubectx' plugin to the Oh My Zsh plugins array inside your .zshrc file. The plugin enhances your prompt by displaying the active Kubernetes cluster context via the kubectx_prompt_info function. No external dependencies are required beyond Oh My Zsh and the kubectx plugin; after editing the plugins array, reload your shell or source your .zshrc for changes to take effect.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectx/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... kubectx)
```

----------------------------------------

TITLE: Expanding Regular and Global Aliases in Zsh
DESCRIPTION: This example demonstrates the expansion of both regular and global aliases using 'globalias'. It assumes a regular alias `l='ls --color=auto -lah'` and a global alias `alias -g G="| grep --color=auto -P"` are defined in `.zshrc`. Typing `l<space>G<space>` expands both aliases in place.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/globalias/README.md#2025-04-22_snippet_4

LANGUAGE: zsh
CODE:
```
# .zshrc:
alias -g G="| grep --color=auto -P"
alias l='ls --color=auto -lah'

$ l<space>G<space>
# expands to
$ ls --color=auto -lah | grep --color=auto -P
```

----------------------------------------

TITLE: Encrypting and uploading files with symmetric cipher
DESCRIPTION: Command to encrypt and upload a file with symmetric cipher and create ASCII armored output using the transfer plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/transfer/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
transfer file -ca
```

----------------------------------------

TITLE: Configuring Agents for Keychain Plugin
DESCRIPTION: This configuration style sets the agents managed by the keychain plugin to both gpg and ssh, modifying the default behavior of only managing gpg. It should be placed before sourcing oh-my-zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/keychain/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
zstyle :omz:plugins:keychain agents gpg,ssh
```

----------------------------------------

TITLE: Configuring encode64 Plugin in Oh My Zsh (zsh)
DESCRIPTION: This code snippet demonstrates how to add the encode64 plugin to the plugins array in the .zshrc configuration file. Adding the plugin enables a set of base64 encoding and decoding aliases and functions in the Zsh shell environment. The only prerequisite is the encode64 plugin being available within the Oh My Zsh plugins directory, and no additional parameters are required.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/encode64/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... encode64)
```

----------------------------------------

TITLE: Encoding Data to Base64 with encode64/e64 Aliases (console)
DESCRIPTION: These snippets illustrate encoding the string 'oh-my-zsh' to base64 using the encode64 function and its e64 alias from the command line. The commands can accept input as either a direct parameter or via piped input. Both forms require that the encode64 plugin is loaded in Zsh, and output the base64-encoded string to STDOUT. The commands return the base64 string, with or without padding, depending on the input method.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/encode64/README.md#2025-04-22_snippet_1

LANGUAGE: console
CODE:
```
$ encode64 "oh-my-zsh"
b2gtbXktenNo
$ e64 "oh-my-zsh"
b2gtbXktenNo
```

LANGUAGE: console
CODE:
```
$ echo "oh-my-zsh" | encode64
b2gtbXktenNo==
$ echo "oh-my-zsh" | e64
b2gtbXktenNo==
```

----------------------------------------

TITLE: Enabling Z Plugin in Zsh Configuration
DESCRIPTION: Instructions for adding the z plugin to the plugins array in your .zshrc file to enable the functionality.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
plugins=(... z)
```

----------------------------------------

TITLE: Customizing Cluster Name Display in kube-ps1
DESCRIPTION: Defines a shell function `get_cluster_short` that extracts the first part of a dot-separated cluster name (e.g., 'sandbox' from 'sandbox.k8s.example.com') and assigns this function's name to the `KUBE_PS1_CLUSTER_FUNCTION` environment variable. This causes `kube-ps1` to use the custom function to format the cluster name in the prompt. The function must be defined in the shell configuration before `kube_ps1` is called.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_13

LANGUAGE: sh
CODE:
```
function get_cluster_short() {
  echo "$1" | cut -d . -f1
}

KUBE_PS1_CLUSTER_FUNCTION=get_cluster_short
```

----------------------------------------

TITLE: Cloning zsh-history-substring-search for Oh-my-zsh (Shell)
DESCRIPTION: Clones the zsh-history-substring-search plugin repository from GitHub into the custom plugins directory of an Oh-my-zsh installation ($ZSH_CUSTOM/plugins/ or ~/.oh-my-zsh/custom/plugins/ by default). This is the first step for manual installation with Oh-my-zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-history-substring-search
```

----------------------------------------

TITLE: Customizing Terraform Prompt Theme
DESCRIPTION: Variables for customizing the appearance of Terraform workspace and version information in the prompt with color formatting.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/terraform/README.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
ZSH_THEME_TF_PROMPT_PREFIX="%{$fg[white]%}"
ZSH_THEME_TF_PROMPT_SUFFIX="%{$reset_color%}"
ZSH_THEME_TF_VERSION_PROMPT_PREFIX="%{$fg[white]%}"
ZSH_THEME_TF_VERSION_PROMPT_SUFFIX="%{$reset_color%}"
```

----------------------------------------

TITLE: Installing the Shell-Proxy Plugin in Zsh
DESCRIPTION: Instructions for adding the shell-proxy plugin to the Oh My Zsh configuration. This is done by adding the plugin name to the plugins array in the user's zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shell-proxy/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... shell-proxy)
```

----------------------------------------

TITLE: Using rbwpw Function Syntax
DESCRIPTION: Example usage of the rbwpw wrapper function that copies passwords to clipboard and automatically clears after 20 seconds.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rbw/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
rbwpw <service>
```

----------------------------------------

TITLE: Configuring mongocli Plugin in Oh My Zsh - Zsh
DESCRIPTION: This snippet demonstrates how to register the mongocli plugin by adding it to the plugins array in the .zshrc file for Oh My Zsh. The plugin must be listed among other desired plugins to enable various mongocli-related aliases and command shortcuts in the shell environment. The configuration should be placed within the .zshrc startup script for Zsh. No additional dependencies are needed beyond Oh My Zsh and the mongocli plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mongocli/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... mongocli)
```

----------------------------------------

TITLE: Running wd commands silently
DESCRIPTION: Command to execute a wd command without any output being displayed, useful for scripts.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_30

LANGUAGE: zsh
CODE:
```
wd --quiet <command>
```

----------------------------------------

TITLE: Overriding Agnoster Theme's build_prompt Function
DESCRIPTION: This function overrides the default agnoster theme build_prompt function to include SVN information alongside git information in the command prompt.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/svn/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
build_prompt() {
    RETVAL=$?
    prompt_status
    prompt_context
    prompt_dir
    prompt_git
    prompt_svn
    prompt_end
}
```

----------------------------------------

TITLE: Using .venv File to Override Default Virtualenv Selection
DESCRIPTION: Example showing how to create a .venv file to specify a different virtualenv name for a directory.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/virtualenvwrapper/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
➜  github $ cat ansible/.venv
myvirtualenv
➜  github $ cd ansible
(myvirtualenv) ➜  ansible git:(devel) $ cd ..
➜  github $
```

----------------------------------------

TITLE: Configuring Geeknote Plugin in Oh My Zsh - Zsh
DESCRIPTION: This snippet shows how to enable the Geeknote plugin in the Oh My Zsh framework by adding 'geeknote' to the plugins array within the .zshrc configuration file. There are no external code dependencies beyond Oh My Zsh, and the user simply needs to edit their .zshrc file and restart the shell for changes to take effect. The plugins array accepts multiple plugin names, and this snippet includes Geeknote as part of that list.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/geeknote/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=( ... geeknote ...)
```

----------------------------------------

TITLE: Enabling the mongo-atlas Plugin in Zsh
DESCRIPTION: This Zsh configuration snippet shows how to enable the `mongo-atlas` plugin within Oh My Zsh. Add `mongo-atlas` to the `plugins` array in your `~/.zshrc` file to activate command-line completion for the MongoDB Atlas CLI. Oh My Zsh must be installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mongo-atlas/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... mongo-atlas)
```

----------------------------------------

TITLE: Trizen Package Manager Commands
DESCRIPTION: A collection of shell aliases for the Trizen package manager, providing shortcuts for common package management operations and configuration tasks.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/archlinux/README.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
trconf="trizen -C"
trclean="trizen -Sc"
trclr="trizen -Scc"
trin="trizen -S"
trins="trizen -U"
trinsd="trizen -S --asdeps"
trloc="trizen -Qi"
trlocs="trizen -Qs"
trlst="trizen -Qe"
trmir="trizen -Syy"
trorph="trizen -Qtd"
trre="trizen -R"
trrem="trizen -Rns"
trrep="trizen -Si"
trreps="trizen -Ss"
trupd="trizen -Sy"
trupg="trizen -Syua"
trsu="trizen -Syua --no-confirm"
upgrade="trizen -Syu"
```

----------------------------------------

TITLE: Customizing Sudo Plugin Key Bindings
DESCRIPTION: Commands to customize the key bindings for the sudo plugin across different editing modes (emacs, vicmd, and viins).
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sudo/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
bindkey -M emacs '<seq>' sudo-command-line
bindkey -M vicmd '<seq>' sudo-command-line
bindkey -M viins '<seq>' sudo-command-line
```

----------------------------------------

TITLE: Displaying wd help information
DESCRIPTION: Command to show the usage information and available commands for the wd plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_27

LANGUAGE: zsh
CODE:
```
wd help
```

----------------------------------------

TITLE: Enabling the 'mvn' Plugin in Oh My Zsh Configuration - zsh
DESCRIPTION: This snippet demonstrates how to activate the 'mvn' plugin by adding it to the 'plugins' array in your .zshrc file. The plugin enriches your terminal experience with Maven command aliases and completions. To enable it, insert 'mvn' within the parentheses alongside other plugins; no additional dependencies beyond Oh My Zsh are required. After saving, reload your shell or source your .zshrc to apply the change.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mvn/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... mvn)
```

----------------------------------------

TITLE: Enabling the Helm Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This Zsh configuration snippet demonstrates how to enable the Helm plugin in Oh My Zsh. To activate the plugin's features, including completions and aliases, add the `helm` identifier to the `plugins` array within your `~/.zshrc` configuration file. Oh My Zsh must be installed as a prerequisite.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/helm/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... helm)
```

----------------------------------------

TITLE: Decrypting downloaded directories
DESCRIPTION: Command to decrypt and extract a directory archive that was previously encrypted using gpg with the transfer plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/transfer/README.md#2025-04-22_snippet_4

LANGUAGE: zsh
CODE:
```
gpg -d your_archive.tgz.gpg | tar xz
```

----------------------------------------

TITLE: Disabling Grunt Options Cache Update on File Change in Zsh
DESCRIPTION: Uses `zstyle` in `.zshrc` to modify the grunt completion caching behavior. Setting `no_update_options yes` prevents the completion system from automatically updating the cached options even if the target Gruntfile has been modified.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/grunt/README.md#2025-04-22_snippet_4

LANGUAGE: zsh
CODE:
```
zstyle ':completion::complete:grunt::options:' no_update_options yes
```

----------------------------------------

TITLE: Using the wake Command to Wake a Device
DESCRIPTION: Demonstrates how to use the 'wake' command provided by the plugin to wake up a configured device by specifying its name.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wakeonlan/README.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
$ wake leto
```

----------------------------------------

TITLE: Adding WP-CLI Plugin to Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to enable the WP-CLI plugin in Oh My Zsh by adding it to the plugins array in your zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wp-cli/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... wp-cli)
```

----------------------------------------

TITLE: Expanding Glob Path Expression in Zsh
DESCRIPTION: This example illustrates the expansion of a file path glob pattern using 'globalias'. Typing `ls **/*.json` and pressing SPACE expands the command to list all `.json` files found in the current directory and its subdirectories, replacing the glob pattern with the actual matching filenames.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/globalias/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
$ ls **/*.json<space>
# expands to
$ ls folder/file.json anotherfolder/another.json
```

----------------------------------------

TITLE: Custom Key Binding for Piping Last Command Output in Foot - INI
DESCRIPTION: This configuration snippet sets up a custom key binding in the foot terminal emulator. When Control+Shift+g is pressed, the output of the last shell command is written to a temporary file, which is then opened in emacsclient (terminal mode) within a new footclient instance. After the emacsclient session ends, the temporary file is removed. Dependencies include foot, footclient, emacsclient, sh, and mktemp. The snippet should be placed under the [key-bindings] section of your foot configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/foot/README.md#2025-04-22_snippet_1

LANGUAGE: ini
CODE:
```
[key-bindings]
pipe-command-output=[sh -c "f=$(mktemp); cat - > $f; footclient emacsclient -nw $f; rm $f"] Control+Shift+g
```

----------------------------------------

TITLE: Configuring Phing Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This snippet shows how to enable the Phing plugin by adding "phing" to the plugins array in your ".zshrc" file. No external dependencies are required other than Oh My Zsh and the Phing plugin already being included. This configuration enables autocompletion for Phing targets when using the terminal. The "plugins" array can contain multiple plugin names, and you should list "phing" alongside any other plugins used. This must be done in the user’s ".zshrc" shell configuration file, without any constraints assuming Oh My Zsh is installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/phing/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... phing)
```

----------------------------------------

TITLE: Loading SSH identities using brace expansion
DESCRIPTION: A simplified way to specify multiple SSH identities from the same location using brace expansion.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_5

LANGUAGE: zsh
CODE:
```
zstyle :omz:plugins:ssh-agent identities ~/.config/ssh/{id_rsa,id_rsa2,id_github}
```

----------------------------------------

TITLE: Adding Vault Plugin to Oh My Zsh Configuration
DESCRIPTION: This code snippet shows how to add the Vault plugin to the plugins array in the zshrc file. This enables Vault completion functionality in Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vault/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... vault)
```

----------------------------------------

TITLE: Integrating OpenTofu Plugin in Zsh Configuration
DESCRIPTION: This snippet demonstrates how to include the OpenTofu plugin in the Zsh configuration by adding it to the plugins array in `~/.zshrc`. OpenTofu is a community-driven fork of Terraform adding support for the `tofu` command.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/opentofu/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
plugins=(... opentofu)
```

----------------------------------------

TITLE: Customization of JJ Prompt in ZSH Theme
DESCRIPTION: The snippet customizes the prompt in zsh using the Jujutsu CLI's template syntax. It defines a function to display a shortened change ID in the command prompt. This customization requires the jj CLI to function properly, and jj_prompt_template is used to escape special characters.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jj/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
_my_theme_jj_info() {
  jj_prompt_template 'self.change_id().shortest(3)'
}

PROMPT='$(_my_theme_jj_info) $'
```

----------------------------------------

TITLE: Activating Custom Zsh-z in Oh My Zsh
DESCRIPTION: Configuration example for activating the manually installed Zsh-z plugin in Oh My Zsh by adding it to the plugins array in .zshrc.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
plugins=( git zsh-z )
```

----------------------------------------

TITLE: Loading Rails Plugin in Oh My Zsh
DESCRIPTION: Configuration snippet showing how to enable the Rails plugin in Oh My Zsh by adding it to the plugins array in zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rails/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... rails)
```

----------------------------------------

TITLE: Loading Zsh-z with Znap Plugin Manager - Shell
DESCRIPTION: This command-line snippet sources Zsh-z using the Znap plugin manager. Place it in .zshrc after sourcing Znap itself. Znap will fetch, cache, and source the plugin script.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_18

LANGUAGE: shell
CODE:
```
znap source agkozak/zsh-z
```

----------------------------------------

TITLE: Excluding Gems from Being Wrapped in Bundler Plugin
DESCRIPTION: This snippet shows how to exclude gems from being wrapped by the Bundler plugin. It demonstrates the syntax for setting the UNBUNDLED_COMMANDS variable before the plugin list in the .zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bundler/README.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
UNBUNDLED_COMMANDS=(foreman spin)
plugins=(... bundler ...)
```

----------------------------------------

TITLE: Customizing Battery Charging Indicator in Oh My Zsh
DESCRIPTION: This snippet shows how to customize the battery charging indicator by setting the BATTERY_CHARGING variable. Users can change the icon to their preference.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/battery/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
BATTERY_CHARGING="⚡️"
```

----------------------------------------

TITLE: Configuring Plugins Array for Oh My Zsh - Zsh
DESCRIPTION: This snippet demonstrates how to activate the ember-cli plugin by adding it to the plugins array within the .zshrc configuration file. By including 'ember-cli', users enable Ember CLI-specific command completion and aliases in their Oh My Zsh environment. No additional dependencies are required beyond having Oh My Zsh installed; users simply update their .zshrc and reload their shell session for changes to take effect.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ember-cli/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... ember-cli)
```

----------------------------------------

TITLE: Loading Multiple Identities with Keychain Plugin
DESCRIPTION: This snippet configures the keychain plugin to load multiple identities, such as SSH keys and GPG key IDs, by specifying them in the identities style. Ensure the specified IDs are valid for your system setup.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/keychain/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
zstyle :omz:plugins:keychain identities id_ed25519 id_github 2C5879C2
```

----------------------------------------

TITLE: Configuring wd after AUR installation
DESCRIPTION: Function to add to .zshrc after installing wd from AUR to load the plugin from the system location.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_4

LANGUAGE: zsh
CODE:
```
wd() {
    . /usr/share/wd/wd.sh
}
```

----------------------------------------

TITLE: Installing dbt Plugin in Oh My Zsh Configuration
DESCRIPTION: Instructions for adding the dbt plugin to Oh My Zsh's configuration file. Users need to add 'dbt' to their plugins array in the zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dbt/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... dbt)
```

----------------------------------------

TITLE: Accessing Specific Emoji by Name in Zsh
DESCRIPTION: Demonstrates the general syntax for printing a specific Unicode emoji character by accessing the `$emoji` associative array with the desired emoji's name. This requires the `emoji` plugin to be loaded, which defines the `$emoji` variable.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
$> echo $emoji[<name>]
```

----------------------------------------

TITLE: Enabling Mercurial Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This snippet shows how to enable the Mercurial plugin by adding 'mercurial' to the 'plugins' array in your .zshrc configuration file. No additional dependencies are needed besides Oh My Zsh. Once enabled, users gain access to Mercurial aliases and prompt hooks. The plugin should be listed among other plugins in the array. No inputs besides the plugin name are required.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mercurial/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... mercurial)
```

----------------------------------------

TITLE: Modifying robbyrussell Theme to Add Branch Prompt Info - Oh My Zsh - Diff
DESCRIPTION: Provides a unified diff for altering the 'robbyrussell' Zsh theme to use 'branch_prompt_info' instead of 'git_prompt_info'. Assumes familiarity with Zsh prompt customization and access to Oh My Zsh themes. Replace or update relevant PROMPT lines as shown to display current branch/bookmark info in the terminal prompt.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/branch/README.md#2025-04-22_snippet_3

LANGUAGE: diff
CODE:
```
diff --git a/themes/robbyrussell.zsh-theme b/themes/robbyrussell.zsh-theme
index 2fd5f2cd..9d89a464 100644
--- a/themes/robbyrussell.zsh-theme
+++ b/themes/robbyrussell.zsh-theme
@@ -1,5 +1,5 @@
 PROMPT="%(?:%{$fg_bold[green]%}➜ :%{$fg_bold[red]%}➜ )"
-PROMPT+=' %{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)'
+PROMPT+=' %{$fg[cyan]%}%c%{$reset_color%} $(branch_prompt_info)'

 ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg_bold[blue]%}git:(%{$fg[red]%}"
 ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%} "
```

----------------------------------------

TITLE: Expanding Regular Alias in Zsh
DESCRIPTION: This snippet provides a simple example of regular alias expansion with 'globalias'. Assuming the alias `S="sudo systemctl"` is defined in `.zshrc`, typing `S<space>` will expand it to `sudo systemctl`.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/globalias/README.md#2025-04-22_snippet_5

LANGUAGE: zsh
CODE:
```
# .zsrc:
alias S="sudo systemctl"

$ S<space>
# expands to:
$ sudo systemctl
```

----------------------------------------

TITLE: Adding a warp point to current directory
DESCRIPTION: Command to add a new warp point named 'foo' to the current working directory.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_15

LANGUAGE: zsh
CODE:
```
wd add foo
```

----------------------------------------

TITLE: Activating K9s Plugin in Oh My Zsh Plugins Array - zsh
DESCRIPTION: This snippet shows users how to add the 'k9s' plugin to the Oh My Zsh plugins array for Zsh. To use this functionality, users must be using Oh My Zsh and have access to a `.zshrc` file. The 'plugins' array accepts plugin names, and by including 'k9s', users enable command completion for the K9s CLI. No additional dependencies are required beyond Oh My Zsh and K9s itself; input is an array of plugin names and the output is enhanced shell functionality.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/k9s/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... k9s)
```

----------------------------------------

TITLE: Enabling Globalias Plugin in Zsh
DESCRIPTION: This snippet shows how to enable the 'globalias' plugin within Oh My Zsh by adding its name to the `plugins` array in the `.zshrc` configuration file. This is the standard method for activating Oh My Zsh plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/globalias/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... globalias)
```

----------------------------------------

TITLE: Adding Invoke Plugin to Oh My Zsh Plugin Array - Zsh
DESCRIPTION: This code snippet shows the syntax required to include the invoke plugin in the list of active plugins within the user's ".zshrc" configuration file for Oh My Zsh. To use it, simply add "invoke" into the existing plugins array. This enables autocompletion support for the pyinvoke tool. It assumes that Oh My Zsh is already installed and that the ".zshrc" file is being edited; users should reload or restart their shell for changes to take effect.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/invoke/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... invoke)
```

----------------------------------------

TITLE: Adding Stack Plugin to Oh My Zsh Configuration
DESCRIPTION: This snippet demonstrates how to enable the Stack plugin in Oh My Zsh by adding it to the plugins array in your zshrc file. The plugin provides command completion for Stack commands.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/stack/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
plugins=(... stack)
```

----------------------------------------

TITLE: Adding fnm Plugin to Oh My Zsh Configuration - Zsh
DESCRIPTION: This snippet demonstrates how to include the fnm plugin in the Oh My Zsh plugins array within the .zshrc file to enable autocompletion for fnm commands. No additional dependencies beyond Oh My Zsh and the fnm tool are required. The 'plugins' array should contain 'fnm' alongside any existing plugins. Intended input is the .zshrc configuration file; there is no explicit output, but users receive extended CLI functionality via autocompletion.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fnm/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... fnm)
```

----------------------------------------

TITLE: Expanding Subcommand in Zsh
DESCRIPTION: This snippet shows how 'globalias' expands command substitutions (subcommands enclosed in backticks). Typing `mkdir "`date -R`"` followed by SPACE executes the `date -R` command and substitutes its output into the `mkdir` command line before execution.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/globalias/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
$ mkdir "`date -R`"
# expands to
$ mkdir Tue,\ 04\ Oct\ 2016\ 13:54:03\ +0300
```

----------------------------------------

TITLE: Loading Zsh-z with Zinit Plugin Manager - Shell
DESCRIPTION: By adding this line to .zshrc, users load Zsh-z with the Zinit plugin manager. Zinit will automatically clone the repository and source the plugin script on shell startup. No extra configuration required unless customizing plugin options.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_16

LANGUAGE: shell
CODE:
```
zinit load agkozak/zsh-z
```

----------------------------------------

TITLE: Installing TaskWarrior Plugin in Oh My Zsh Configuration
DESCRIPTION: Configuration snippet showing how to enable the TaskWarrior plugin in the Oh My Zsh plugins array within the .zshrc file. This enables TaskWarrior command completion functionality.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/taskwarrior/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... taskwarrior)
```

----------------------------------------

TITLE: Configuring Starship Plugin in Zsh Configuration
DESCRIPTION: Shows how to enable the Starship plugin in the Oh My Zsh configuration by adding it to the plugins array in .zshrc file. Note that enabling this plugin will unset the ZSH_THEME variable.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/starship/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... starship)
```

----------------------------------------

TITLE: Example: Displaying a Random Vehicle Emoji in Zsh
DESCRIPTION: Shows a practical use case of the `random_emoji` function to output a random emoji belonging to the 'vehicles' group, which must be present in `$emoji_groups`.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_6

LANGUAGE: zsh
CODE:
```
$> random_emoji vehicles
```

----------------------------------------

TITLE: Vim Split Navigation Commands
DESCRIPTION: Examples of commands for loading files into specific split windows using wincmd navigation.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vim-interaction/README.md#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
# Do a ':wincmd h' first
> vh /tmp/myfile.scala

# Do a ':wincmd j' first
> vj /tmp/myfile.scala

# Do a ':wincmd k' first
> vk /tmp/myfile.scala

# Do a ':wincmd l' first
> vl /tmp/myfile.scala
```

----------------------------------------

TITLE: Opening .zshrc File for Editing (Shell)
DESCRIPTION: Command to open the .zshrc file in the vi text editor for customization.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
vi ~/.zshrc
```

----------------------------------------

TITLE: Loading Zsh-z with Zplug Plugin Manager - Shell
DESCRIPTION: This snippet should be added to .zshrc before the zplug load call. The Zplug manager uses this line to clone and register Zsh-z. To activate changes, run zplug install then zplug load.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_19

LANGUAGE: shell
CODE:
```
zplug "agkozak/zsh-z"
```

----------------------------------------

TITLE: Configuring Plugins Array in Zsh - Oh My Zsh - Zsh
DESCRIPTION: Shows how to enable the branch plugin by modifying the plugins array in your .zshrc file. No dependencies beyond an existing Oh My Zsh installation are required. The user should insert 'branch' into the plugins array to activate branch information in the prompt. This is a standard configuration step for plugin usage.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/branch/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... branch)
```

----------------------------------------

TITLE: Unloading Zsh-z with Zinit - Shell
DESCRIPTION: This command removes the Zsh-z module if loaded through Zinit, restoring the shell to its prior state. Useful for testing or temporary deactivation. Can be run interactively or scripted.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_17

LANGUAGE: shell
CODE:
```
zinit unload agkozak/zsh-z
```

----------------------------------------

TITLE: Adding The Fuck Plugin to Oh My Zsh Configuration
DESCRIPTION: Configuration snippet showing how to add The Fuck plugin to the plugins array in your zshrc file. This enables the plugin's functionality in your Oh My Zsh setup.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/thefuck/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
plugins=(... thefuck)
```

----------------------------------------

TITLE: Configuring hitokoto Plugin in zsh
DESCRIPTION: This snippet shows how to add the hitokoto plugin to the plugins array in your .zshrc file to enable fetching random quotes. Ensure oh-my-zsh is installed as a prerequisite. The .zshrc file must be updated, and zsh must be restarted for changes to take effect. This command outputs a random quote each time you run the hitokoto command in zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/hitokoto/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... hitokoto)
```

----------------------------------------

TITLE: Configuring Plugin Array in Zsh
DESCRIPTION: This snippet demonstrates how to include the Fig plugin in the Zsh configuration. It assumes the user has access to their .zshrc file and contains instructions for adding 'fig' to the plugins array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fig/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... fig)
```

----------------------------------------

TITLE: Configuring Redis-CLI Plugin in Oh My Zsh
DESCRIPTION: Code snippet showing how to enable the redis-cli plugin by adding it to the plugins array in the zshrc configuration file. This enables Redis CLI command completion functionality.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/redis-cli/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... redis-cli)
```

----------------------------------------

TITLE: Adding a warp point with default name
DESCRIPTION: Command to add a warp point to a specific directory using the directory's name as the warp point name.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_17

LANGUAGE: zsh
CODE:
```
wd addcd /foo/
```

----------------------------------------

TITLE: Configuring Systemd Prompt Variables
DESCRIPTION: This example demonstrates how to configure the appearance of systemd unit status in the command prompt by setting specific environment variables.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/systemd/README.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
ZSH_THEME_SYSTEMD_PROMPT_PREFIX="["
ZSH_THEME_SYSTEMD_PROMPT_SUFFIX="]"
ZSH_THEME_SYSTEMD_PROMPT_ACTIVE="+"
ZSH_THEME_SYSTEMD_PROMPT_NOTACTIVE="X"
ZSH_THEME_SYSTEMD_PROMPT_CAPS=1
```

----------------------------------------

TITLE: Listing All Available Emojis with Names in Zsh
DESCRIPTION: Shows the usage of the `display_emoji` function without arguments. This function, provided by the plugin, prints a list of all available emoji characters along with their corresponding human-readable names.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_9

LANGUAGE: zsh
CODE:
```
$> display_emoji
```

----------------------------------------

TITLE: Basic CallVim Usage Command
DESCRIPTION: Shows the basic usage syntax for the callvim function, including available options for running commands before and after file loading.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vim-interaction/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
usage: callvim [-b cmd] [-a cmd] [file ... fileN]
```

----------------------------------------

TITLE: Integrating Heroku CLI Plugin in Zsh
DESCRIPTION: This snippet shows how to add the Heroku plugin to the list of active plugins in a Zsh configuration file. It assumes that you have Zsh installed and a .zshrc file available for customization. To enable Heroku CLI completion, add 'heroku' to the plugins array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/heroku/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
plugins=(... heroku)
```

----------------------------------------

TITLE: Configuring isodate Plugin in Oh My Zsh - Zsh Shell
DESCRIPTION: Demonstrates how to enable the isodate plugin by adding it to the plugins array in the .zshrc configuration file. This setup step is required to use the isodate command aliases provided by the plugin. The input 'isodate' should be added among other plugins as shown; after saving, reload the shell or source .zshrc for changes to take effect.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/isodate/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... isodate)
```

----------------------------------------

TITLE: Enabling the Tig Plugin in Oh My Zsh
DESCRIPTION: This code snippet shows how to enable the tig plugin in Oh My Zsh by adding it to the plugins array in your zshrc configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/tig/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... tig)
```

----------------------------------------

TITLE: Configuring kube-ps1 to use the 'oc' Binary
DESCRIPTION: Sets the `KUBE_PS1_BINARY` environment variable to `oc`. This instructs `kube-ps1` to use the OpenShift CLI tool (`oc`) instead of the default `kubectl` for querying cluster information. This line should be added to the shell configuration file (`.zshrc` or `.bashrc`).
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_5

LANGUAGE: sh
CODE:
```
KUBE_PS1_BINARY=oc
```

----------------------------------------

TITLE: Command Usage for port-livecheck-maintainer - Text
DESCRIPTION: Documents the available usage patterns and options for the 'port-livecheck-maintainer' command, which checks for updates to Macports packages maintained by specified maintainers or the current user. Inputs can either be omitted, a list of maintainer IDs passed, or help flags used; the outputs are update check results or help text. No dependencies beyond the Oh My Zsh plugin mechanism and zsh are required. The maintainer id is determined from the MACPORTS_MAINTAINER environment variable or the USER variable.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/macports/README.md#2025-04-22_snippet_1

LANGUAGE: text
CODE:
```
Usage:\n  port-livecheck-maintainer\n  port-livecheck-maintainer (maintainer)+\n  port-livecheck-maintainer -h|--help\n\nCheck\n\nOptions:\n  maintainer  maintainer id\n  -h          print this help message and exit
```

----------------------------------------

TITLE: Configuring kube-ps1 for Bash (Manual Source)
DESCRIPTION: Sources the `kube-ps1.sh` script and integrates the `kube_ps1` function output into the Bash `PS1` prompt variable. This method requires manually cloning the repository and specifying the correct path to `kube-ps1.sh` in the `.bashrc` file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
source /path/to/kube-ps1.sh
PS1='[\u@\h \W $(kube_ps1)]\$ '
```

----------------------------------------

TITLE: Running Hanami Command Aliases in Console - Console
DESCRIPTION: This example illustrates how to use a Hanami alias (such as HED) in conjunction with another alias (like hdd) within a shell session. It executes the equivalent full command with the HANAMI_ENV environment variable set to 'development', in this case dropping the development database. This snippet assumes the Hanami Oh My Zsh plugin is properly configured and loaded in the terminal session.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/hanami/README.md#2025-04-22_snippet_1

LANGUAGE: console
CODE:
```
$ HED hdd # equivalent to 'HANAMI_ENV=development hanami db drop'
```

----------------------------------------

TITLE: Removing a warp point
DESCRIPTION: Command to delete the warp point named 'foo' from the warp points list.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_21

LANGUAGE: zsh
CODE:
```
wd rm foo
```

----------------------------------------

TITLE: Enabling the git-hubflow Plugin in Oh My Zsh Configuration
DESCRIPTION: This Zsh configuration snippet shows how to enable the `git-hubflow` plugin by adding its name to the `plugins` array within the user's `.zshrc` file. Activating this plugin requires Oh My Zsh and the HubFlow tool to be installed separately. It provides command-line completions and aliases for HubFlow commands.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-hubflow/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... git-hubflow)
```

----------------------------------------

TITLE: Accessing Shortcut with Fastfile Prefix
DESCRIPTION: This snippet demonstrates accessing a previously created shortcut using the Fastfile prefix. Commands like `cd §pjdb` or `subl §pjdb` utilize the Fastfile alias to refer to the directory path.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fastfile/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
$ cd §pjdb
$ subl §pjdb
```

----------------------------------------

TITLE: Configuring kube-ps1 using zplugin for Zsh
DESCRIPTION: Instructs the `zplugin` Zsh plugin manager to load the `kube-ps1` plugin from the specified GitHub repository and prepends the `kube_ps1` function output to the Zsh `PROMPT`. Requires `zplugin` to be installed and configured in `.zshrc`.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
zplugin light jonmosco/kube-ps1
PROMPT='$(kube_ps1)'$PROMPT
```

----------------------------------------

TITLE: Enabling Pipenv Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This snippet shows how to enable the Pipenv plugin within the Oh My Zsh framework. By adding `pipenv` to the `plugins` array in the `.zshrc` file, the plugin's features (completion, auto-shell, aliases) become available in the Zsh shell. Oh My Zsh must be installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pipenv/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... pipenv ...)
```

----------------------------------------

TITLE: Initializing Argo CD Plugin in Zsh Configuration - Zsh
DESCRIPTION: This snippet demonstrates how to enable the Argo CD plugin by adding 'argocd' to the 'plugins' array within the '.zshrc' configuration file. No additional dependencies are required other than Oh My Zsh itself and the Argo CD plugin. Users should insert 'argocd' among other plugins in the array. The output is Zsh completion for Argo CD commands whenever a new terminal is started. There are no aliases or additional configurations provided by this plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/argocd/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... argocd)
```

----------------------------------------

TITLE: Adding the chezmoi Plugin to Oh My Zsh Configuration
DESCRIPTION: Shows how to enable the chezmoi plugin by adding it to the plugins array in your zshrc file. This allows zsh to provide completion for the chezmoi dotfile manager.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/chezmoi/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
plugins=(... chezmoi)
```

----------------------------------------

TITLE: Configuring Gulp Plugin in Oh My Zsh - Shell
DESCRIPTION: This shell configuration snippet demonstrates how to activate the Gulp plugin for Oh My Zsh by adding 'gulp' to the plugins array inside the .zshrc file. There are no external dependencies other than Oh My Zsh being installed, and the presence of a gulpfile.js in the project directory for task detection. This enables autocompletion for 'gulp' tasks in the terminal that use this configuration.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gulp/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
plugins=(... gulp)
```

----------------------------------------

TITLE: Customizing chruby Plugin Path in Oh My Zsh
DESCRIPTION: This snippet demonstrates how to specify custom paths for loading chruby and its auto-switching functionality. It uses zstyle commands to set the paths for the chruby.sh and auto.sh files.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/chruby/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
zstyle :omz:plugins:chruby path /local/path/to/chruby.sh
zstyle :omz:plugins:chruby auto /local/path/to/auto.sh
```

----------------------------------------

TITLE: Fallback Mechanism for JJ and Git in Prompt
DESCRIPTION: This code offers a fallback mechanism that tries to use Jujutsu CLI's features in the prompt, and if it fails, falls back to using Git's information. This strategy ensures compatibility with themes that may not natively support jj. It relies on both jj and git_prompt_info functions.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jj/README.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
_my_theme_vcs_info() {
  jj_prompt_template 'self.change_id().shortest(3)' \
  || git_prompt_info
}

PROMPT='$(_my_theme_vcs_info) $'
```

----------------------------------------

TITLE: Defining Jump Target Entries for n-list in Zsh
DESCRIPTION: This Zsh code shows how to set up specific entries as jump targets within `n-list`, navigable using the `[` and `]` keys. It uses the `NLIST_HOP_INDEXES` array, populated with the 1-based indices of the target entries.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_6

LANGUAGE: zsh
CODE:
```
typeset -a NLIST_HOP_INDEXES
NLIST_HOP_INDEXES=( 1 10 )
```

----------------------------------------

TITLE: Configuring Please Plugin for Oh My Zsh
DESCRIPTION: The example code snippet demonstrates how to enable the Please plugin in Oh My Zsh by adding it to the plugins array in your zshrc file. This configuration allows users to utilize autocomplete features and predefined aliases for the Please command line tool.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/please/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... please)
```

----------------------------------------

TITLE: Setting Shrink-Path Options via Zstyle
DESCRIPTION: Example of how to configure shrink-path options using the zstyle command.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shrink-path/README.md#2025-04-22_snippet_4

LANGUAGE: zsh
CODE:
```
zstyle :prompt:shrink_path fish yes
```

----------------------------------------

TITLE: Adding the wakeonlan Plugin to Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to enable the wakeonlan plugin by adding it to the plugins array in your zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wakeonlan/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... wakeonlan)
```

----------------------------------------

TITLE: Uploading a File using the Droplr Plugin (Zsh)
DESCRIPTION: This command demonstrates how to upload a local file to Droplr using the `droplr` command-line tool provided by the plugin. Replace `./path/to/file/` with the actual path to the file you want to upload. Requires the Droplr.app to be installed, running, and logged in on MacOS.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/droplr/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
droplr ./path/to/file/
```

----------------------------------------

TITLE: Fixing Underline in Linux VT via Terminfo (Shell)
DESCRIPTION: This shell command addresses potential underline display issues in the Linux virtual terminal (`TERM=linux`). It fetches the terminfo entry using `infocmp`, modifies the `ncv` capability to 0 (which might result in color highlighting instead of true underline), and compiles the new entry using `tic`, placing it in `~/.terminfo` for automatic use.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_9

LANGUAGE: shell
CODE:
```
{ infocmp -x linux; printf '\t%s\n' 'ncv@,'; } > /tmp/t && tic -x /tmp/t
```

----------------------------------------

TITLE: Customizing the Right Prompt to Show Azure Subscription (zsh)
DESCRIPTION: This snippet sets the Zsh right-hand prompt (RPROMPT) to display the current selected Azure subscription using the azure_prompt_info function, which is provided by the oh-my-zsh Azure plugin. This relies on the plugin being loaded and may use additional variables (e.g., ZSH_THEME_AZURE_PREFIX and ZSH_THEME_azure_SUFFIX) for customizing appearance. There are no inputs, and the output is a dynamic display of the subscription in the prompt. Ensure that the plugin is installed and configured for this to work.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/azure/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
RPROMPT='$(azure_prompt_info)'
```

----------------------------------------

TITLE: Enabling the Screen Plugin in Oh My Zsh
DESCRIPTION: This code snippet demonstrates how to add the screen plugin to the plugins array in your zshrc file to enable it. Once enabled, the plugin will automatically set the title and hardstatus of tab windows in screen.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/screen/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... screen)
```

----------------------------------------

TITLE: Loading RSync Plugin in Oh My Zsh
DESCRIPTION: Configuration snippet showing how to enable the rsync plugin in Oh My Zsh by adding it to the plugins array in zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rsync/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... rsync)
```

----------------------------------------

TITLE: Enabling Meteor Plugin in Oh My Zsh - Zsh
DESCRIPTION: This snippet demonstrates how to enable the Meteor plugin by adding 'meteor' to the plugins array in your .zshrc configuration file. This setup is necessary for activating Meteor-specific aliases and command completions. The plugins array can include multiple plugins, and the ellipsis (...) indicates additional plugins may already be present. No external dependencies are needed aside from Oh My Zsh being installed and .zshrc being correctly sourced.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/meteor/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... meteor)
```

----------------------------------------

TITLE: Using Jump Plugin Keybinding (Before Expansion) (zsh)
DESCRIPTION: Shows an example command line input before using the `CTRL+G` keybinding provided by the 'jump' plugin. The user has typed a mark name (`mymark`) which is intended to be expanded into its full path.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jump/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
$ cp /tmp/file mymark<C-g>
```

----------------------------------------

TITLE: Using mise for Node.js Version Management in Bash
DESCRIPTION: This snippet illustrates how to manage Node.js versions using mise commands. It showcases installing and setting different versions of Node.js. Required prerequisites are having mise installed and configured. The commands involve specifying version numbers or using the system's default version.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mise/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
mise install node         Install the current version specified in .tool-versions/.mise.toml
mise use -g node@system   Use system node as global default
mise install node@20.0.0  Install a specific version number
mise use -g node@20       Use node-20.x as global default

```

----------------------------------------

TITLE: Enabling Legacy Completion for Docker
DESCRIPTION: Configuration to enable legacy completion mode for Docker commands, useful when current completion doesn't work well or when using Podman's Docker wrapper.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/docker/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
zstyle ':omz:plugins:docker' legacy-completion yes
```

----------------------------------------

TITLE: Configuring Plugin List in Zshrc - Bash
DESCRIPTION: This snippet demonstrates how to add the mix-fast plugin to the list of active plugins in the .zshrc configuration file. No external dependencies are required, but the mix-fast plugin should be installed in your Oh-My-Zsh plugin directory. Modify the plugins array to include 'mix-fast' alongside any existing plugins. This enables the faster autocompletion functionality when opening a new Zsh session.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mix-fast/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
plugins=(foo bar mix-fast)
```

----------------------------------------

TITLE: Enabling Bridgetown Plugin in Oh My Zsh Configuration
DESCRIPTION: This code snippet shows how to add the Bridgetown plugin to the plugins array in the zshrc file. This enables the plugin and its features in Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bridgetown/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... bridgetown)
```

----------------------------------------

TITLE: Enabling the Drush Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This snippet demonstrates how to enable the Drush plugin within the Oh My Zsh configuration file (`.zshrc`). It involves adding the identifier `drush` to the `plugins` array. This activation step is required to make the plugin's aliases and functions available in the Zsh shell.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/drush/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... drush)
```

----------------------------------------

TITLE: Enabling Cabal Plugin in Oh My Zsh Configuration
DESCRIPTION: This code snippet demonstrates how to add the Cabal plugin to the plugins array in the zshrc file. This enables Cabal completion and the cabal_sandbox_info function in Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/cabal/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... cabal)
```

----------------------------------------

TITLE: Enabling the git-lfs Oh My Zsh Plugin (Zsh)
DESCRIPTION: This Zsh code snippet demonstrates how to activate the `git-lfs` plugin within Oh My Zsh. It requires adding the string `git-lfs` to the `plugins` array within the user's `.zshrc` configuration file. Once added and the shell is reloaded, the aliases and functions defined by the plugin become available.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-lfs/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... git-lfs)
```

----------------------------------------

TITLE: Checking wd version
DESCRIPTION: Command to display the currently running version of the wd plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_28

LANGUAGE: zsh
CODE:
```
wd --version
```

----------------------------------------

TITLE: Combined Usage with zsh-syntax-highlighting - Zsh - Shell
DESCRIPTION: Demonstrates sourcing the zsh-syntax-highlighting plugin before zsh-history-substring-search to ensure compatibility and proper highlighting order. Requires both script files. Inputs are file names; outputs are that both plugins are loaded and interact as intended.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_12

LANGUAGE: shell
CODE:
```
source zsh-syntax-highlighting.zsh
source zsh-history-substring-search.zsh
```

----------------------------------------

TITLE: Disabling a kube-ps1 Feature via Environment Variable
DESCRIPTION: Demonstrates how to disable a specific visual component of the `kube-ps1` prompt, such as the separator between the symbol and the context name, by setting its corresponding environment variable (`KUBE_PS1_SEPARATOR` in this case) to an empty string in the shell configuration file (`.zshrc` or `.bashrc`).
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_10

LANGUAGE: sh
CODE:
```
KUBE_PS1_SEPARATOR=''
```

----------------------------------------

TITLE: Enabling the Dirpersist Plugin in Oh My Zsh
DESCRIPTION: This code shows how to activate the dirpersist plugin in your zshrc configuration file. The plugin must be added to the plugins array in your zshrc file to enable directory persistence functionality.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dirpersist/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... dirpersist)
```

----------------------------------------

TITLE: Configuring last-working-dir Plugin in Zsh
DESCRIPTION: This snippet shows how to enable the `last-working-dir` plugin in Zsh by adding it to the plugins array in the .zshrc configuration file. This setup allows automatically jumping to the last working directory when a new shell starts.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/last-working-dir/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... last-working-dir)
```

----------------------------------------

TITLE: Activating the minikube plugin in Oh My Zsh configuration
DESCRIPTION: This Zsh configuration snippet demonstrates how to enable the `minikube` plugin in Oh My Zsh. By adding `minikube` to the `plugins` array within your `.zshrc` file, you activate command-line completion features for the `minikube` tool.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/minikube/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... minikube)
```

----------------------------------------

TITLE: Setting Cache Expiration for Grunt Completions in Zsh
DESCRIPTION: Configures the cache expiration period for grunt command completions using `zstyle` in `.zshrc`. The `expire 1` setting specifies that the cache for grunt options should expire after 1 day, overriding the default of 7 days.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/grunt/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
zstyle ':completion::complete:grunt::options:' expire 1
```

----------------------------------------

TITLE: Basic Sourcing of Zsh-z Plugin in Zsh
DESCRIPTION: The simplest way to install Zsh-z is by sourcing the plugin file in your .zshrc configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
source /path/to/zsh-z.plugin.zsh
```

----------------------------------------

TITLE: Usage Instructions for Textastic Plugin Commands
DESCRIPTION: Documents the three main usage patterns for the 'tt' command that integrates with Textastic editor: launching the editor, opening directories, and opening specific files.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/textastic/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
 * If `tt` command is called without an argument, launch Textastic

 * If `tt` is passed a directory, cd to it and open it in Textastic

 * If `tt` is passed a file, open it in Textastic
```

----------------------------------------

TITLE: Setting Character Set for Emotty Function in Zsh
DESCRIPTION: Specify a different set of emoji characters for the emotty plugin by setting the environment variable 'emotty_set' to the desired character set name. The available predefined sets include modes like 'nature', 'stellar', and 'zodiac'. By default, the 'emoji' set is used.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emotty/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
emotty_set=nature
```

----------------------------------------

TITLE: Using node-docs Function in Zsh
DESCRIPTION: This snippet demonstrates using the node-docs function to open specific API documentation pages on the Node.js website. The function uses the parameter to determine the documentation section to open, such as 'fs' for file system or 'path'.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/node/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
# Opens https://nodejs.org/docs/latest-v10.x/api/fs.html
$ node-docs fs
# Opens https://nodejs.org/docs/latest-v10.x/api/path.html
$ node-docs path
```

----------------------------------------

TITLE: Configuring Perl Plugin in Oh My Zsh - Zsh
DESCRIPTION: This Zsh configuration snippet demonstrates how to enable the Perl plugin by adding 'perl' to the plugins array in the .zshrc file. Prerequisite: Oh My Zsh must be installed and sourced in your shell startup script. The 'plugins' array in .zshrc is used by Oh My Zsh to load optional plugins, and adding 'perl' activates its aliases and functions the next time the shell starts. No additional parameters are required; the plugin is loaded if specified in the array. Limitations: Any user custom changes to the array should be preserved.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/perl/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... perl)
```

----------------------------------------

TITLE: Enabling Keychain Plugin in oh-my-zsh
DESCRIPTION: This snippet adds the keychain plugin to the oh-my-zsh plugins list to automatically start the keychain tool for managing gpg and ssh credentials. Requires oh-my-zsh to be installed and configured.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/keychain/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... keychain)
```

----------------------------------------

TITLE: Using alias-finder with shortest gs alias
DESCRIPTION: Usage example showing that alias-finder provides no suggestions when using the shortest 'gs' shell alias since there are no shorter alternatives.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/alias-finder/README.md#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
╭─tim@fox ~/repo/gitopolis ‹main› 
╰─$ gs
         # <=== no suggestions alias-finder because this is the shortest
## main...origin/main
```

----------------------------------------

TITLE: Sprunge Basic Text Upload Example
DESCRIPTION: Example showing the output of uploading a simple string to sprunge.us using the plugin, which returns a unique URL.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sprunge/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
$ sprunge "hello"
http://sprunge.us/XxjnKz
```

----------------------------------------

TITLE: Enabling the DirCycle Plugin in .zshrc
DESCRIPTION: This code shows how to enable the DirCycle plugin by adding it to the plugins array in your .zshrc configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dircycle/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(
    # all your enabled plugins
    dircycle
)
```

----------------------------------------

TITLE: Adding the wd plugin in oh-my-zsh configuration
DESCRIPTION: Shows how to enable the wd plugin in oh-my-zsh by adding it to the plugins list in the .zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... wd)
```

----------------------------------------

TITLE: Installing zsh-interactive-cd Plugin in ZSH Configuration
DESCRIPTION: This code snippet shows how to add the zsh-interactive-cd plugin to the plugins list in the ~/.zshrc configuration file. This enables the interactive directory navigation functionality after the next shell restart or source of the configuration.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-interactive-cd/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... zsh-interactive-cd)
```

----------------------------------------

TITLE: Configuring zsh-history-substring-search with zplug (Zsh)
DESCRIPTION: Adds a line to the ~/.zshrc file to instruct the zplug plugin manager to load the 'zsh-users/zsh-history-substring-search' repository as a plugin. This configuration line should be placed within the zplug section of the ~/.zshrc file. Requires zplug to be set up.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_4

LANGUAGE: zsh
CODE:
```
zplug "zsh-users/zsh-history-substring-search", as: plugin
```

----------------------------------------

TITLE: Installing wd using zplug
DESCRIPTION: Configuration code to install the wd plugin using the zplug plugin manager for zsh, specifying it as a command and providing a hook to load it.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_6

LANGUAGE: zsh
CODE:
```
zplug "mfaerevaag/wd", as:command, use:"wd.sh", hook-load:"wd() { . $ZPLUG_REPOS/mfaerevaag/wd/wd.sh }"
```

----------------------------------------

TITLE: Adding Rust Plugin to Oh-My-Zsh Configuration
DESCRIPTION: Shows how to enable the Rust plugin by adding it to the plugins array in the zshrc configuration file. This enables command completion for Rust tools.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rust/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... rust)
```

----------------------------------------

TITLE: Installing Dirhistory Plugin in Zsh
DESCRIPTION: Configuration snippet showing how to enable the dirhistory plugin in the zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dirhistory/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... dirhistory)
```

----------------------------------------

TITLE: Configuring Plugins in ZSH
DESCRIPTION: This snippet shows how to include the 'lando' plugin in the ZSH plugins configuration. Users should add 'lando' to their plugins array in their .zshrc file to enable this functionality.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lando/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... lando)
```

----------------------------------------

TITLE: Enabling Autoenv Plugin in Zsh Configuration
DESCRIPTION: This code snippet shows how to add the Autoenv plugin to the plugins array in the zshrc file. This enables the Autoenv functionality in Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/autoenv/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... autoenv)
```

----------------------------------------

TITLE: Enabling the Kind Plugin in Oh My Zsh Configuration (zsh)
DESCRIPTION: Adds the 'kind' plugin to the Oh My Zsh plugins array within the .zshrc configuration file. This step is necessary to activate the plugin's features, including command completions and aliases, in the Zsh environment.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kind/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... kind)
```

----------------------------------------

TITLE: Activating gitignore Plugin in Oh My Zsh Configuration (Zsh)
DESCRIPTION: This snippet demonstrates how to activate the gitignore plugin by adding it to the plugins array within your .zshrc configuration file. The plugin enables command-line interaction with gitignore.io, requiring both Oh My Zsh and an active internet connection. No additional dependencies besides Oh My Zsh are necessary. Users should ensure 'gitignore' is present in the array for functionality.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gitignore/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... gitignore)
```

----------------------------------------

TITLE: Enabling the pyenv Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This snippet shows how to add the `pyenv` plugin to the `plugins` array within the user's `.zshrc` file. This action enables the Oh My Zsh pyenv plugin, allowing it to manage pyenv integration.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pyenv/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... pyenv)
```

----------------------------------------

TITLE: Enabling Cpanm Plugin in Oh My Zsh Configuration
DESCRIPTION: Shows how to add the cpanm plugin to the Oh My Zsh plugins array in the zshrc configuration file. This enables completion functionality for Cpanminus commands.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/cpanm/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... cpanm)
```

----------------------------------------

TITLE: Disabling Color for a kube-ps1 Element
DESCRIPTION: Example of disabling color for a specific segment of the `kube-ps1` prompt (the context name in this case) by setting its corresponding color environment variable (`KUBE_PS1_CTX_COLOR`) to an empty string. This customization is typically applied in shell configuration files (`.zshrc`, `.bashrc`).
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_11

LANGUAGE: sh
CODE:
```
KUBE_PS1_CTX_COLOR=''
```

----------------------------------------

TITLE: Adding Battery Plugin to Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to add the battery plugin to the list of plugins in the .zshrc file. It enables the battery-related functions for use in custom themes.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/battery/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... battery)
```

----------------------------------------

TITLE: Adding Arduino CLI Plugin to Oh My Zsh Configuration
DESCRIPTION: This code snippet demonstrates how to enable the Arduino CLI plugin by adding it to the plugins array in the zshrc file. The plugin provides command completion for arduino-cli commands.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/arduino-cli/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... arduino-cli)
```

----------------------------------------

TITLE: Adding NATS Plugin to Zshrc
DESCRIPTION: This snippet demonstrates how to enable the NATS plugin for Zsh by adding it to the plugins array in the zshrc configuration file. It provides autocompletion for tools from NATS, such as nsc and natscli. There are no dependencies other than having a Zsh shell where you can configure plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nats/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... nats)
```

----------------------------------------

TITLE: Setting Colorize Tool in Zsh Environment
DESCRIPTION: This snippet demonstrates how to set the ZSH_COLORIZE_TOOL environment variable to use chroma instead of the default pygmentize.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/colorize/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
ZSH_COLORIZE_TOOL=chroma
```

----------------------------------------

TITLE: Disabling Global Scripts Directory Addition in Yarn Plugin
DESCRIPTION: This code sets a zstyle to disable the feature that adds Yarn's global scripts directory to the $PATH. It should be added to the .zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/yarn/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
zstyle ':omz:plugins:yarn' global-path no
```

----------------------------------------

TITLE: Underlying Command for Text QR Code Generation (Shell)
DESCRIPTION: The actual `curl` command executed by the `qrcode` alias. It sends the provided 'text' as POST data (`-d "text"`) to the `qrcode.show` web service. The service processes the text and returns a text-based representation of the corresponding QR code to standard output.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/qrcode/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
curl -d "text" qrcode.show
```

----------------------------------------

TITLE: Demonstrating Cloud Foundry CLI Help Commands in Bash
DESCRIPTION: This snippet shows how to use the Cloud Foundry CLI help commands. It includes examples for listing all commands, getting general help, and obtaining specific command help.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/cloudfoundry/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
cf help # List the most popular and commonly used commands
cf help -a # Complete list of all possible commands
cf <COMMAND_NAME> --help # Help on a specific command including arguments and examples
```

----------------------------------------

TITLE: Installing Copybuffer Plugin in Oh My Zsh
DESCRIPTION: Demonstrates how to enable the copybuffer plugin in Oh My Zsh by adding it to the plugins array in .zshrc configuration file. The plugin allows copying current command line text using ctrl-o shortcut.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/copybuffer/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... copybuffer)
```

----------------------------------------

TITLE: Configuring eecms Plugin in Zsh
DESCRIPTION: The code snippet demonstrates how to include the eecms plugin in your Zsh configuration by modifying the plugins array in your .zshrc file. This setup enables auto-completion for eecms console commands and defines an alias for running the eecms file with PHP. Ensure that the ExpressionEngine project is available in the current environment for the commands to function as expected.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eecms/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
plugins=(... eecms)
```

----------------------------------------

TITLE: Configuring Grunt Completion to Show File Path in Zsh
DESCRIPTION: Uses `zstyle` to configure the Zsh completion for the `grunt` command. This specific setting, `show_grunt_path yes`, instructs the completion system to display the path to the relevant Gruntfile during completion suggestions for grunt options. This should be added to `.zshrc`.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/grunt/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
zstyle ':completion::complete:grunt::options:' show_grunt_path yes
```

----------------------------------------

TITLE: Enabling the eza Plugin in Zsh
DESCRIPTION: Adds the 'eza' plugin to the list of enabled plugins in the Oh My Zsh configuration file (`.zshrc`). This command needs to be placed within the `plugins` array definition.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... eza)
```

----------------------------------------

TITLE: Directory Navigation Example Commands
DESCRIPTION: Example sequence of commands demonstrating the directory navigation pattern that builds up the directory stack.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dirhistory/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
cd ~
cd /usr
cd share
cd doc
```

----------------------------------------

TITLE: Enabling Watson Plugin in Oh My Zsh Configuration
DESCRIPTION: This code snippet demonstrates how to add the Watson plugin to the plugins array in the zshrc file. This enables Watson command completion in Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/watson/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... watson)
```

----------------------------------------

TITLE: Adding CodeClimate Plugin to Zsh Plugins Array
DESCRIPTION: This snippet shows how to modify the Zsh configuration to include the CodeClimate plugin for CLI autocompletion. Ensure your .zshrc file is editable and that the CodeClimate CLI is installed. The plugins array should already exist in your .zshrc, with other plugins included as needed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/codeclimate/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... codeclimate)
```

----------------------------------------

TITLE: Enabling ssh-agent plugin in oh-my-zsh
DESCRIPTION: Add ssh-agent to your plugins array in your zshrc file to enable the plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... ssh-agent)
```

----------------------------------------

TITLE: Loading Tmux Plugin in Zsh Configuration
DESCRIPTION: Shows how to enable the tmux plugin by adding it to the plugins array in the zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/tmux/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... tmux)
```

----------------------------------------

TITLE: Enabling Zsh Completion Caching via zstyle
DESCRIPTION: Configures the Zsh completion system to use caching by setting the `use-cache` style to `yes` for all completions (`:completion:*`). This setting should be placed in the `.zshrc` file to improve completion performance for plugins like grunt.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/grunt/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
zstyle ':completion:*' use-cache yes
```

----------------------------------------

TITLE: Setting LANDO_ZSH_SITES_DIRECTORY Variable
DESCRIPTION: This snippet configures the directory path where the plugin will stop searching for the .lando.yml or equivalent configuration file. Users should set this variable to point to a directory, ensuring it aligns with their project's structure.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lando/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
LANDO_ZSH_SITES_DIRECTORY="$HOME/Code"
```

----------------------------------------

TITLE: Basic scd Command Syntax
DESCRIPTION: Shows the basic command syntax for the scd function including optional patterns and parameters.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/scd/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
scd [options] [pattern1 pattern2 ...]
```

----------------------------------------

TITLE: Rebinding DirCycle Functions to Custom Keys
DESCRIPTION: This code shows how to rebind the DirCycle functions to alternative key sequences (Alt+Shift+arrow keys) in xterm-256color.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dircycle/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
bindkey '^[[1;4D' insert-cycledleft
bindkey '^[[1;4C' insert-cycledright
bindkey "\e[1;4A" insert-cycledup
bindkey "\e[1;4B" insert-cycleddown
```

----------------------------------------

TITLE: Enabling Celery Plugin in Oh My Zsh Configuration
DESCRIPTION: This code snippet demonstrates how to add the Celery plugin to the plugins array in the zshrc file. This enables Celery completion functionality in Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/celery/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
plugins=(... celery)
```

----------------------------------------

TITLE: Using Tab Completion with the wake Command
DESCRIPTION: Shows how to use tab completion to see available device names that can be woken up with the wake command.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wakeonlan/README.md#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
$ wake <tab>
```

----------------------------------------

TITLE: Enabling Unique Search Results - Zsh - Shell
DESCRIPTION: Sets the HIST_SUBSTRING_SEARCH_ENSURE_UNIQUE shell variable to enable unique search results when using history-substring-search in Zsh. Requires the plugin script to be loaded. This ensures that only unique entries are shown when cycling through history searches. Input is an environment variable assignment; no output is produced except for altering command search behavior.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_7

LANGUAGE: shell
CODE:
```
HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE=1
```

----------------------------------------

TITLE: Enabling Homebrew Plugin in Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to enable the Homebrew plugin in the Oh My Zsh configuration file (zshrc). It demonstrates adding 'brew' to the plugins array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/brew/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... brew)
```

----------------------------------------

TITLE: Enabling Apache2 MacPorts Plugin in Oh My Zsh Configuration
DESCRIPTION: This code snippet shows how to enable the apache2-macports plugin in the Oh My Zsh configuration file. It demonstrates adding the plugin name to the plugins array in the user's zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/apache2-macports/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... apache2-macports)
```

----------------------------------------

TITLE: Example: Displaying the Mouse Face Emoji in Zsh
DESCRIPTION: Provides a specific example of displaying an emoji. It uses the `$emoji` associative array, provided by the plugin, to retrieve and print the mouse face emoji (🐭) to the standard output.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
$> echo $emoji[mouse_face]
```

----------------------------------------

TITLE: Adding the UFW Plugin to Oh My Zsh Configuration
DESCRIPTION: This snippet demonstrates how to enable the UFW plugin in the Oh My Zsh configuration by adding it to the plugins array in the user's zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ufw/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... ufw)
```

----------------------------------------

TITLE: Enabling n98-magerun Plugin in Zsh
DESCRIPTION: This snippet demonstrates how to enable the n98-magerun plugin by adding it to the plugins array in the zshrc configuration file. This setup allows the use of predefined aliases and completion features for n98-magerun commands in Zsh. Prerequisite: OhMyZsh installation.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/n98-magerun/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... n98-magerun)
```

----------------------------------------

TITLE: Enabling 1Password Plugin in Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to add the 1Password plugin to the list of plugins in the .zshrc file. This is required to enable the plugin's functionality in Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/1password/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... 1password)
```

----------------------------------------

TITLE: Enabling Oh My Zsh Grunt Plugin in Zsh
DESCRIPTION: Adds the 'grunt' plugin to the Oh My Zsh plugins array within the `.zshrc` configuration file. This makes the grunt completions and potentially other plugin features available in the Zsh shell. The `...` indicates other plugins might already be present.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/grunt/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... grunt)
```

----------------------------------------

TITLE: Directory Structure Example for Path Shrinking
DESCRIPTION: Example directory tree used to demonstrate how the shrink-path plugin behaves with different options.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shrink-path/README.md#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
/home/
  me/
    f o o/     # The prefix f is ambiguous between "f o o" and "f i g".
      bar/
        quux/
      biz/     # The prefix b is ambiguous between bar and biz.
    f i g/
      baz/
```

----------------------------------------

TITLE: Enabling Toolbox Plugin in Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to add the toolbox plugin to the plugins array in the .zshrc file, enabling its functionality in Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/toolbox/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... toolbox)
```

----------------------------------------

TITLE: Configuring tmux-cssh Plugin in oh-my-zsh
DESCRIPTION: This code snippet demonstrates how to enable the tmux-cssh plugin by adding it to the plugins array in the .zshrc configuration file. The plugin provides autocompletion for the tmux-cssh command.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/tmux-cssh/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... tmux-cssh)
```

----------------------------------------

TITLE: Adding the SVN-Fast-Info Plugin to Oh My Zsh
DESCRIPTION: Configuration snippet showing how to add the svn-fast-info plugin to the Oh My Zsh plugins array in your zshrc file, enabling its functionality.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/svn-fast-info/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... svn-fast-info)
```

----------------------------------------

TITLE: Installing OpenShift CLI using Homebrew
DESCRIPTION: Installs the `openshift-cli` package, which provides the `oc` command-line tool, using Homebrew on macOS. This is necessary if you want to use `kube-ps1` with OpenShift clusters via the `oc` binary.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
brew install openshift-cli
```

----------------------------------------

TITLE: Installing the TLDR Plugin in Oh My Zsh
DESCRIPTION: This snippet shows how to enable the tldr plugin by adding it to the plugins array in your zshrc configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/tldr/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... tldr)
```

----------------------------------------

TITLE: Bundling zsh-history-substring-search with antigen (Zsh)
DESCRIPTION: Configures the antigen plugin manager within ~/.zshrc to bundle the 'zsh-users/zsh-history-substring-search' plugin. This line should be added before the 'antigen apply' command. The 'antigen apply' command then processes the configuration and loads the specified plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_5

LANGUAGE: zsh
CODE:
```
antigen bundle zsh-users/zsh-history-substring-search
antigen apply
```

----------------------------------------

TITLE: Enabling autopep8 Plugin in Oh My Zsh Configuration
DESCRIPTION: This code snippet shows how to add the autopep8 plugin to the plugins array in the zshrc file. This enables the autopep8 completion functionality in Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/autopep8/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... autopep8)
```

----------------------------------------

TITLE: Enabling the 'pj' Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This Zsh snippet shows how to add the 'pj' plugin to the `plugins` array in your `.zshrc` file to enable its functionality within Oh My Zsh. This step is necessary before using the `pj` or `pjo` commands.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pj/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... pj)
```

----------------------------------------

TITLE: Enabling Foot Plugin in Oh My Zsh via .zshrc - Zsh
DESCRIPTION: This snippet shows how to add the 'foot' plugin to your list of active Oh My Zsh plugins by editing the .zshrc configuration file. The 'plugins' array should include 'foot' alongside any other plugins in use. No external dependencies beyond Oh My Zsh and the foot plugin are required. After modification, restarting your terminal session will load the plugin and enable its features.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/foot/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... foot)
```

----------------------------------------

TITLE: Customizing Namespace Display in kube-ps1
DESCRIPTION: Defines a shell function `get_namespace_upper` that converts the provided namespace name (input as `$1`) to uppercase using `tr`. It then exports the `KUBE_PS1_NAMESPACE_FUNCTION` environment variable set to the function's name, instructing `kube-ps1` to use this custom logic for displaying the namespace in the prompt. The function must be defined before `kube_ps1` is called.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_14

LANGUAGE: sh
CODE:
```
function get_namespace_upper() {
    echo "$1" | tr '[:lower:]' '[:upper:]'
}

export KUBE_PS1_NAMESPACE_FUNCTION=get_namespace_upper
```

----------------------------------------

TITLE: Using 'qrcode' Alias for Text QR Code Generation (Shell)
DESCRIPTION: Invokes the `qrcode` alias with the desired text (replace `[text]` with actual content). This alias executes `curl -d "text" qrcode.show`, sending the text to the qrcode.show service via a POST request to generate and display a text-based QR code in the terminal. Requires the `curl` utility to be installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/qrcode/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
qrcode [text]
```

----------------------------------------

TITLE: Adding the Spring Boot Plugin to Oh-My-Zsh
DESCRIPTION: Configuration snippet that shows how to enable the Spring Boot plugin in your .zshrc file by adding it to the plugins array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/spring/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... spring)
```

----------------------------------------

TITLE: Adding zbell Plugin to Oh My Zsh
DESCRIPTION: Code snippet showing how to add the zbell plugin to the plugins array in your zshrc file to enable it.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zbell/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... zbell)
```

----------------------------------------

TITLE: Adding Menu Selection to Completion System
DESCRIPTION: Zstyle configuration to enable menu selection for completion, providing a nicer visual interface when using tab completion with Zsh-z.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
zstyle ':completion:*' menu select
```

----------------------------------------

TITLE: Enabling svcat Plugin in Oh My Zsh Configuration
DESCRIPTION: This snippet demonstrates how to enable the svcat plugin in the Oh My Zsh configuration file (zshrc). The plugin provides tab completion for the Kubernetes service catalog CLI commands.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/svcat/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
plugins=(... svcat)
```

----------------------------------------

TITLE: Adding Symfony Plugin to Oh My Zsh Configuration
DESCRIPTION: Shows how to enable the Symfony plugin by adding it to the plugins array in the zshrc file. The ellipsis indicates that other plugins can be included alongside symfony.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/symfony/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
plugins=(... symfony)
```

----------------------------------------

TITLE: Enabling Prezto Module Directory - Shell
DESCRIPTION: This code configures Prezto's module directory path in the user's ~/.zpreztorc file using the zstyle utility. It ensures Prezto recognizes contributed modules stored in ~/.zprezto-contrib and is required for the system to find and load the Zsh-z module. The snippet should be placed among the initial style settings, and the line must be uncommented.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_8

LANGUAGE: shell
CODE:
```
zstyle ':prezto:load' pmodule-dirs $HOME/.zprezto-contrib
```

----------------------------------------

TITLE: Loading the shrink-path Plugin in Zsh
DESCRIPTION: Code snippet showing how to add the shrink-path plugin to the plugins array in your zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shrink-path/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... shrink-path)
```

----------------------------------------

TITLE: Loading zsh-history-substring-search with Zinit - Zsh - Shell
DESCRIPTION: Illustrates two ways of loading the zsh-history-substring-search plugin using Zinit in .zshrc. The first zinit load command fetches the plugin from GitHub, and the zinit ice command sets loading options like waiting and running additional configuration functions. Requires Zinit and network access. Inputs are plugin repository identifiers and configuration flags; the outputs are that the plugin is installed and configured on shell start.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_9

LANGUAGE: shell
CODE:
```
zinit load 'zsh-users/zsh-history-substring-search
zinit ice wait atload'_history_substring_search_config'
```

----------------------------------------

TITLE: Displaying a Random Emoji in Zsh
DESCRIPTION: Shows how to execute the `random_emoji` function, provided by the plugin, to print a single random Unicode emoji character from the entire collection to the standard output.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
$> random_emoji
```

----------------------------------------

TITLE: Installing wd using Antigen
DESCRIPTION: Configuration code to install the wd plugin using the Antigen plugin manager for zsh in the .zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
antigen bundle mfaerevaag/wd
```

----------------------------------------

TITLE: Using the cf command to compile Coffeescript in Zsh
DESCRIPTION: Demonstrates how to use the 'cf' command provided by the Oh My Zsh Coffeescript plugin to compile Coffeescript code into JavaScript directly in the terminal.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/coffee/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
$ cf 'if a then b else c'
if (a) {
  b;
} else {
  c;
}
```

----------------------------------------

TITLE: Adding zoxide Plugin to Oh My Zsh Configuration
DESCRIPTION: This code snippet shows how to add the zoxide plugin to the plugins array in the .zshrc file. This enables the zoxide functionality in the Oh My Zsh environment.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zoxide/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... zoxide)
```

----------------------------------------

TITLE: Setting Chroma Formatter for Terminal Output
DESCRIPTION: This snippet demonstrates how to configure the Chroma formatter for 256-color terminal output using the ZSH_COLORIZE_CHROMA_FORMATTER environment variable.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/colorize/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
ZSH_COLORIZE_CHROMA_FORMATTER=terminal256
```

----------------------------------------

TITLE: Binding Arrow Keys via Terminfo Variables - Zsh - Shell
DESCRIPTION: Binds history-substring-search functions to keys using terminfo variables, which may better accommodate terminal differences in key coding. Requires Zsh with terminfo support and the functions for history-substring-search present. Input: terminfo variable expansion in bindkey; Output: more portable key bindings.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_14

LANGUAGE: shell
CODE:
```
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down
```

----------------------------------------

TITLE: Example: Displaying a Random Face Emoji in Zsh
DESCRIPTION: Provides an example call to the `random_emoji` function, requesting a random emoji from the 'faces' group defined within the `$emoji_groups` variable.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_7

LANGUAGE: zsh
CODE:
```
$> random_emoji faces
```

----------------------------------------

TITLE: Using Emojis in the Zsh Prompt (PROMPT variable)
DESCRIPTION: Provides examples of customizing the Zsh prompt (`PROMPT` variable) using emojis provided by the plugin. It shows setting a static emoji via `$emoji`, using command substitution (`$(...)`) with `random_emoji` for a dynamic emoji, and assigning an emoji to a variable for reuse.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_12

LANGUAGE: zsh
CODE:
```
PROMPT="$emoji[penguin]  > "
PROMPT='$(random_emoji fruits)  > '
surfer=$emoji[surfer]
PROMPT="$surfer  > "
```

----------------------------------------

TITLE: Adding Bun Plugin to Oh-My-Zsh Configuration
DESCRIPTION: This snippet shows how to add the Bun plugin to the plugins array in your zshrc file to enable Bun completions in your shell.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bun/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... bun)
```

----------------------------------------

TITLE: Enabling Knife Plugin in Oh My Zsh - zsh - Shell Scripting
DESCRIPTION: This code snippet demonstrates how to include the knife plugin in the plugins array within the .zshrc configuration file for Oh My Zsh. By adding 'knife' to this array, users enable Knife-specific command completion functionality in their terminal. The array can contain multiple plugin names, and this change requires restarting or reloading the shell session for changes to take effect. No additional dependencies are needed beyond Oh My Zsh and the plugin itself.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/knife/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... knife)
```

----------------------------------------

TITLE: Configuring Fasd Plugin in Zshrc
DESCRIPTION: This snippet shows how to add 'fasd' to the plugins array in the .zshrc configuration file for Oh My Zsh. This operation integrates Fasd as a shell plugin enhancing file navigation. The configuration requires the 'fasd' command-line tool to be installed before adding it to the plugins array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fasd/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... fasd)
```

----------------------------------------

TITLE: Directory History State Example
DESCRIPTION: Example showing the internal state of directory history variables.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dirhistory/README.md#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
➜  /usr typeset -pm dirhistory_\*
typeset -ax dirhistory_past=( /home/user /usr )
typeset -ax dirhistory_future=( /usr/share/doc /usr/share )
```

----------------------------------------

TITLE: Using a custom config file for wd
DESCRIPTION: Command to specify a custom configuration file for wd instead of the default ~/.warprc, useful for testing.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_29

LANGUAGE: zsh
CODE:
```
wd --config ./file <command>
```

----------------------------------------

TITLE: Cleaning invalid warp points
DESCRIPTION: Command to remove warp points that point to non-existent directories. Requires confirmation unless --force is used.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_26

LANGUAGE: zsh
CODE:
```
wd clean
```

----------------------------------------

TITLE: Configuring Emacs Plugin in Oh My Zsh
DESCRIPTION: The code snippet shows the configuration required to add the Emacs plugin to the plugins array in the zshrc file. It requires knowledge of Zsh and assumes Emacs 24+ is available. This setup allows quick access to Emacs functionality using a set of aliases.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emacs/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... emacs)
```

----------------------------------------

TITLE: Named Colors Available for kube-ps1 Customization
DESCRIPTION: Lists the standard color names (black, red, green, yellow, blue, magenta, cyan) that can be assigned as values to the various `KUBE_PS1_*_COLOR` environment variables for basic color customization of the prompt elements.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_12

LANGUAGE: text
CODE:
```
black, red, green, yellow, blue, magenta, cyan
```

----------------------------------------

TITLE: Adding GRC Plugin to Zsh Configuration
DESCRIPTION: This snippet demonstrates how to add the Generic Colouriser plugin ('grc') to the plugins array in a Zsh configuration file ('zshrc') to enhance terminal command outputs with color. Pre-requisite includes having the 'grc' package installed on the system. This specifically modifies the Zsh configuration to utilize the color capabilities of the 'grc'.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/grc/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... grc)
```

----------------------------------------

TITLE: Enabling Bundler Plugin in Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to add the Bundler plugin to the Oh My Zsh configuration file. It demonstrates the syntax for including the plugin in the plugins array of the zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bundler/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... bundler)
```

----------------------------------------

TITLE: Integrating Homestead Plugin in Zsh Configuration
DESCRIPTION: This snippet demonstrates how to enable the Homestead plugin by adding it to the plugins array in the zshrc file. The plugin enhances command-line completion for Laravel's Homestead. Ensure you have Oh My Zsh installed with plugin management enabled.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/homestead/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
plugins=(... homestead)
```

----------------------------------------

TITLE: Configuring JJ Plugin in Oh My Zsh
DESCRIPTION: This snippet demonstrates how to add the jj plugin to your zshrc file to enable autocompletion for the Jujutsu CLI. For this setup, the jj plugin must be included in the plugins array of the zshrc file. This plugin enhances the shell with jj-specific capabilities.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jj/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... jj)
```

----------------------------------------

TITLE: Example: Displaying a Random Fruit Emoji in Zsh
DESCRIPTION: A concrete example of using the `random_emoji` function to display a random emoji specifically from the 'fruits' group. Requires the 'fruits' group to be defined in `$emoji_groups`.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_4

LANGUAGE: zsh
CODE:
```
$> random_emoji fruits
```

----------------------------------------

TITLE: Enabling the Juju Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This snippet shows how to add the 'juju' plugin to the `plugins` array within the user's `.zshrc` file. This step is necessary to activate the aliases and functions provided by the Oh My Zsh juju plugin. Requires Oh My Zsh to be installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/juju/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... juju)
```

----------------------------------------

TITLE: Listing Active Prezto Modules for Loading - Shell
DESCRIPTION: This snippet defines the set of Prezto modules to load via zstyle in ~/.zpreztorc. Each module is listed as a single-quoted string, using a backslash to indicate continuation. The configuration determines which functionalities are enabled in the shell; users extend it to include Zsh-z by adding 'zsh-z' as shown elsewhere.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_9

LANGUAGE: shell
CODE:
```
zstyle ':prezto:load' pmodule \
    'environment' \
    'terminal' \
    'editor' \
    'history' \
    'directory' \
    'spectrum' \
    'utility' \
    'completion' \
    'prompt'
```

----------------------------------------

TITLE: Setting up jenv Plugin in Zsh Configuration
DESCRIPTION: This code snippet shows how to include the jenv plugin in your Zsh configuration by adding it to the plugins array. This step is necessary to initialize jenv and use its features in your Zsh environment.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jenv/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... jenv)
```

----------------------------------------

TITLE: Demonstrating Dnote Book Name Completion
DESCRIPTION: Shows how to use tab completion to view books that start with 'j' in Dnote.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dnote/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
$ dnote view j(press <TAB> here)
```

----------------------------------------

TITLE: Example: Displaying a Random Animal Emoji in Zsh
DESCRIPTION: A specific example demonstrating the `random_emoji` function retrieving and printing a random emoji from the 'animals' group, as defined in `$emoji_groups`.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_5

LANGUAGE: zsh
CODE:
```
$> random_emoji animals
```

----------------------------------------

TITLE: Configuring Oh My Zsh Plugins Array (Zsh)
DESCRIPTION: This snippet demonstrates how to add the 'octozen' plugin to the plugins array in a Zsh configuration file. Activating the plugin will invoke the display_octozen function to fetch and display a GitHub Octocat zen quote during shell startup. Requires an active internet connection for the fetch operation, which times out after two seconds. No additional dependencies except a functioning Oh My Zsh setup are needed. Inputs: the desired plugins list. Outputs: zen quote display upon terminal startup.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/octozen/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... octozen)
```

----------------------------------------

TITLE: Demonstration of Automatic Virtualenv Activation in Git Repositories
DESCRIPTION: Example showing how virtualenvs are automatically activated when navigating into git repositories with matching names and deactivated when leaving them.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/virtualenvwrapper/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
➜  github $ cd ansible
(ansible) ➜  ansible git:(devel) $ cd docs
(ansible) ➜  docs git:(devel) $ cd ..
(ansible) ➜  ansible git:(devel) $ cd ..
➜  github $
```

----------------------------------------

TITLE: Configuring Heroku-alias Plugin in oh-my-zsh - Zsh
DESCRIPTION: This snippet demonstrates how to add the 'heroku-alias' plugin to the oh-my-zsh plugins array in a Zsh configuration file (zshrc). This is a prerequisite for using the custom Heroku CLI aliases defined by the plugin. The user must edit their zshrc file and include 'heroku-alias' in the plugins list; upon restarting the shell, the new aliases become available globally. No additional parameters are required beyond editing the configuration file. The only dependency is oh-my-zsh and the Heroku CLI installed on the system.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/heroku-alias/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... heroku-alias)
```

----------------------------------------

TITLE: Enabling the 'oc' Plugin in Oh My Zsh Configuration (Bash/Zsh)
DESCRIPTION: This configuration snippet demonstrates how to activate the 'oc' plugin within the Oh My Zsh framework by adding 'oc' to the plugins array in the user's `.zshrc` file. This enables autocompletion for OpenShift CLI commands. Requires Oh My Zsh to be installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/oc/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
plugins=(... oc)
```

----------------------------------------

TITLE: Binding Keys in Vicmd Mode for History Navigation - Zsh - Shell
DESCRIPTION: Binds 'k' and 'j' keys in vicmd (vi command) mode to customize command history navigation using history-substring-search in Zsh. Requires plugin functions loaded and knowledge of vi key maps. Inputs: vicmd binding specifications; output: VI-style history navigation via substring search.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_16

LANGUAGE: shell
CODE:
```
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
```

----------------------------------------

TITLE: Configuring Ubuntu Plugin in Oh My Zsh
DESCRIPTION: Shows how to enable the Ubuntu plugin by adding it to the plugins array in the zshrc configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ubuntu/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... ubuntu)
```

----------------------------------------

TITLE: Adding mysql-macports Plugin to Oh My Zsh Configuration - Shell - zsh
DESCRIPTION: This snippet demonstrates how to add the mysql-macports plugin to the plugins array in your .zshrc configuration file. It requires that Oh My Zsh is already installed and that MySQL is set up via MacPorts. The plugins array can contain multiple plugins, so the ellipsis (...) represents any other plugins the user may have enabled. After updating this line, restart your terminal or source the .zshrc file to enable the plugin and its aliases.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mysql-macports/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... mysql-macports)
```

----------------------------------------

TITLE: Configuring GlassFish Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This code snippet demonstrates how to enable the GlassFish plugin by adding it to the plugins array in your zshrc configuration file. The plugin provides tab-completion support for the 'asadmin' command used in managing Oracle GlassFish servers. To apply the change, save the file and reload your shell or source the updated .zshrc; no additional dependencies are required aside from having Oh My Zsh installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/glassfish/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... glassfish)
```

----------------------------------------

TITLE: Adding Vundle Plugin to Oh My Zsh Configuration
DESCRIPTION: Shows how to enable the Vundle plugin in Oh My Zsh by adding it to the plugins array in your zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vundle/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... vundle)
```

----------------------------------------

TITLE: Enabling gpg-agent Plugin in Oh My Zsh
DESCRIPTION: This code snippet demonstrates how to activate the gpg-agent plugin in Oh My Zsh by adding it to the plugins array in the zshrc file. The gpg-agent manages private keys independently. Ensure that Oh My Zsh is correctly installed and configured.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gpg-agent/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... gpg-agent)
```

----------------------------------------

TITLE: Traditional Escaped Rake Command Example
DESCRIPTION: Shows the traditional way of running rake tasks with arguments using escaped square brackets, which the plugin helps avoid.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rake/README.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
rake namespace:task\['argument'\]
```

----------------------------------------

TITLE: Enabling the transfer plugin in ohmyzsh
DESCRIPTION: How to enable the transfer plugin by adding it to the plugins array in your zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/transfer/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... transfer)
```

----------------------------------------

TITLE: Zim Installation Command - Shell
DESCRIPTION: Running this shell command applies new .zimrc changes, downloading and enabling any new modules such as Zsh-z. Prerequisite is that zimfw is installed and executable.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_15

LANGUAGE: shell
CODE:
```
zimfw install
```

----------------------------------------

TITLE: Installing rbw Plugin in Oh My Zsh
DESCRIPTION: Instructions for adding the rbw plugin to Oh My Zsh configuration by modifying the plugins array in zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rbw/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... rbw)
```

----------------------------------------

TITLE: Defining Religion Emoji Unicode Characters
DESCRIPTION: This snippet defines Unicode characters for various religious symbols and emojis. It includes both fully-qualified and unqualified versions for compatibility with different systems.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_52

LANGUAGE: Unicode
CODE:
```
# subgroup: religion
1F6D0                                      ; fully-qualified     # 🛐 place of worship
269B FE0F                                  ; fully-qualified     # ⚛️ atom symbol
269B                                       ; unqualified         # ⚛ atom symbol
1F549 FE0F                                 ; fully-qualified     # 🕉️ om
1F549                                      ; unqualified         # 🕉 om
2721 FE0F                                  ; fully-qualified     # ✡️ star of David
2721                                       ; unqualified         # ✡ star of David
2638 FE0F                                  ; fully-qualified     # ☸️ wheel of dharma
2638                                       ; unqualified         # ☸ wheel of dharma
262F FE0F                                  ; fully-qualified     # ☯️ yin yang
262F                                       ; unqualified         # ☯ yin yang
271D FE0F                                  ; fully-qualified     # ✝️ latin cross
271D                                       ; unqualified         # ✝ latin cross
2626 FE0F                                  ; fully-qualified     # ☦️ orthodox cross
2626                                       ; unqualified         # ☦ orthodox cross
262A FE0F                                  ; fully-qualified     # ☪️ star and crescent
262A                                       ; unqualified         # ☪ star and crescent
262E FE0F                                  ; fully-qualified     # ☮️ peace symbol
262E                                       ; unqualified         # ☮ peace symbol
1F54E                                      ; fully-qualified     # 🕎 menorah
1F52F                                      ; fully-qualified     # 🔯 dotted six-pointed star
```

----------------------------------------

TITLE: Remote Console Command Definition
DESCRIPTION: Command for running Ruby console in production environment on a remote server, taking server and directory parameters.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rails/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
remote_console <server> <directory>
```

----------------------------------------

TITLE: Using alias-finder with git status command
DESCRIPTION: Usage example showing how alias-finder suggests the 'gst' alias when running the unaliased 'git status' command.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/alias-finder/README.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
╭─tim@fox ~/repo/gitopolis ‹main› 
╰─$ git status

gst='git status'         # <=== shorter suggestion from alias-finder

On branch main
Your branch is up-to-date with 'origin/main'.
nothing to commit, working tree clean
```

----------------------------------------

TITLE: Adding Dnote Plugin to Oh My Zsh Configuration
DESCRIPTION: Shows how to enable the Dnote plugin by adding it to the plugins array in the zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dnote/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(dnote)
```

----------------------------------------

TITLE: Enabling the Droplr Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This snippet shows how to enable the 'droplr' plugin by adding its name to the `$plugins` array within the `.zshrc` configuration file. This step is necessary to make the `droplr` command available in the Zsh shell.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/droplr/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... droplr)
```

----------------------------------------

TITLE: Configuring Postgres Plugin in Oh My Zsh - Shell (zsh)
DESCRIPTION: This snippet shows how to enable the Postgres plugin by adding it to the plugins list in the .zshrc configuration file. This enables a collection of Postgres-focused command aliases for shell usage. Prerequisites include having Oh My Zsh and Postgres (installed via Homebrew) set up on OSX. The plugins array must include 'postgres' for activation. Input is the edited plugins list; output is access to the defined Postgres aliases upon relaunching the shell.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/postgres/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... postgres)
```

----------------------------------------

TITLE: Enabling the sfffe Plugin in Oh My Zsh (zsh)
DESCRIPTION: Shows how to add the 'sfffe' plugin to the plugins array in the .zshrc file to activate its functionality within an Oh My Zsh environment. This enables the use of functions like ajs, acss, fjs, and fcss, which require the 'ack' tool to be installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sfffe/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... sfffe)
```

----------------------------------------

TITLE: Cloning Zsh-z Plugin with Git - Shell
DESCRIPTION: This snippet demonstrates how to clone the Zsh-z repository into the custom module directory for prezto users using the git command-line tool. It assumes git is installed and the ~/.zprezto-contrib directory exists or will be created. The result is a local copy of the zsh-z plugin for manual management and activation.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_7

LANGUAGE: shell
CODE:
```
git clone https://github.com/agkozak/zsh-z.git ~/.zprezto-contrib/zsh-z
```

----------------------------------------

TITLE: Enabling Tugboat Plugin in Oh My Zsh Configuration
DESCRIPTION: This code snippet shows how to add the Tugboat plugin to the plugins array in the Oh My Zsh configuration file. It enables autocompletion for Tugboat commands in the Zsh shell.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/tugboat/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... tugboat)
```

----------------------------------------

TITLE: Clearing Grunt Completion Cache and Restarting Zsh
DESCRIPTION: Provides the necessary commands to apply changes made to `zstyle` settings for grunt completions. `rm ~/.zcompcache/grunt` removes the specific cache file for grunt, and `exec zsh` replaces the current shell process with a new one, effectively restarting Zsh and loading the updated configuration.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/grunt/README.md#2025-04-22_snippet_5

LANGUAGE: zsh
CODE:
```
$ rm ~/.zcompcache/grunt
$ exec zsh
```

----------------------------------------

TITLE: Listing Emojis from the 'faces' Group in Zsh
DESCRIPTION: Example of using the `display_emoji` function with a group name ('faces') as an argument. It lists only the emoji characters and their names that belong to the specified group.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_10

LANGUAGE: zsh
CODE:
```
$> display_emoji faces
```

----------------------------------------

TITLE: Installing the copyfile plugin in Oh My Zsh
DESCRIPTION: Configuration snippet showing how to enable the copyfile plugin in Oh My Zsh by adding it to the plugins array in your .zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/copyfile/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... copyfile)
```

----------------------------------------

TITLE: Installing and Activating Plugins with Zplug - Shell
DESCRIPTION: These commands install and then load any Zplug-managed plugins, including Zsh-z if registered. Run manually after updating .zshrc configuration lines.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_20

LANGUAGE: shell
CODE:
```
zplug install
zplug load
```

----------------------------------------

TITLE: Adding Doctl Plugin to Oh My Zsh Configuration
DESCRIPTION: Shows how to enable the Doctl plugin by adding it to the plugins array in the zshrc configuration file. The ellipsis indicates preservation of any existing plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/doctl/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
plugins=(... doctl)
```

----------------------------------------

TITLE: Configuring Gem Plugin for Oh My Zsh - Zsh
DESCRIPTION: Demonstrates how to enable the Gem plugin by adding it to the plugins array within a .zshrc configuration file. No external dependencies beyond Oh My Zsh are required. The plugins array can contain multiple plugin names; in this example, \"gem\" is added to enable Rubygems-specific completions and aliases.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gem/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... gem)
```

----------------------------------------

TITLE: Configuring Fabric Plugin in Zshrc
DESCRIPTION: The snippet shows how to add the Fabric plugin to the plugins array of the Zsh configuration file. This configuration is necessary for Zsh to provide command completion functionality for Fabric. No additional dependencies are required apart from having Fabric installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fabric/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... fabric)
```

----------------------------------------

TITLE: Enabling Tailscale Plugin in Oh My Zsh
DESCRIPTION: This code snippet shows how to add the Tailscale plugin to the plugins array in your zshrc file to enable command completion for the Tailscale CLI tool.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/tailscale/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
plugins=(... tailscale)
```

----------------------------------------

TITLE: Configuring Fastfile Plugin in Zsh
DESCRIPTION: This snippet shows how to add the Fastfile plugin to the Oh My Zsh configuration by including it in the plugins array in the zshrc file. The syntax `plugins=(... fastfile)` is used within the zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fastfile/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... fastfile)
```

----------------------------------------

TITLE: Installing kube-ps1 via Homebrew on macOS
DESCRIPTION: Updates Homebrew package lists and installs the `kube-ps1` package. This is the recommended installation method for macOS users. Requires Homebrew to be installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ brew update
$ brew install kube-ps1
```

----------------------------------------

TITLE: Configuring Colemak Plugin in Zsh
DESCRIPTION: This snippet provides the configuration steps to enable the Colemak plugin and vi mode in Zsh. It requires editing the `~/.zshrc` file to include the plugin and bind the vi mode key. The input must be the `~/.zshrc` file and the output is the customized Zsh environment with Colemak layout support.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/colemak/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
plugins=(... colemak)
```

LANGUAGE: shell
CODE:
```
bindkey -v
```

----------------------------------------

TITLE: Enabling the repo Plugin in Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to add the repo plugin to the plugins array in your zshrc file to enable its functionality. Once added, all the repo-related aliases and autocompletion will become available.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/repo/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... repo)
```

----------------------------------------

TITLE: Samtools Plugin README Documentation
DESCRIPTION: Documentation explaining the samtools plugin functionality for Oh My Zsh, which provides command autocompletion for the samtools bioinformatics toolkit.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/samtools/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# Samtools plugin

This plugin adds support for [samtools](http://www.htslib.org/):

* Adds autocomplete options for all samtools sub commands.
```

----------------------------------------

TITLE: Adding Chuck Norris Plugin to Oh My Zsh Configuration
DESCRIPTION: Shows how to enable the Chuck Norris plugin by adding it to the plugins array in your zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/chucknorris/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... chucknorris)
```

----------------------------------------

TITLE: Installing Torrent Plugin in Oh My Zsh
DESCRIPTION: Configuration snippet showing how to enable the torrent plugin in the Oh My Zsh framework by adding it to the plugins array in the zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/torrent/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... torrent)
```

----------------------------------------

TITLE: Adding Xcode Plugin to Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to add the Xcode plugin to your Oh My Zsh configuration by modifying the plugins array in your .zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/xcode/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... xcode)
```

----------------------------------------

TITLE: Snap Command Aliases in Markdown Table
DESCRIPTION: A markdown table defining the mapping between short aliases and their corresponding snap commands. These aliases provide shortcuts for common operations like version checking, package finding, installation, removal, and package management.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/snap/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
| Alias | Full command |
| --- | ---|
| sv | snap version |
| sf | snap find |
| si | snap install |
| sin | snap info |
| sr | snap remove |
| sref | snap refresh |
| srev | snap revert |
| sl | snap list |
| sd | snap disable |
| se | snap enable |
```

----------------------------------------

TITLE: Enabling the Scaleway CLI Plugin in Oh My Zsh
DESCRIPTION: This code snippet shows how to add the Scaleway CLI plugin to the plugins array in your zshrc configuration file. This enables command completion for the Scaleway CLI tool.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/scw/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... scw)
```

----------------------------------------

TITLE: Directory Navigation Example with dirs Command
DESCRIPTION: This example demonstrates navigating through directories and viewing the directory stack with the dirs -v command.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dircycle/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
~$ cd Projects
~/Projects$ cd Hacktoberfest
~/Projects/Hacktoberfest$ cd oh-my-zsh
~/Projects/Hacktoberfest/oh-my-zsh$ dirs -v
0       ~/Projects/Hacktoberfest/oh-my-zsh
1       ~/Projects/Hacktoberfest
2       ~/Projects
3       ~
```

----------------------------------------

TITLE: Enabling Grails Plugin in Oh My Zsh Configuration - Zsh
DESCRIPTION: This code snippet instructs users to activate the Grails plugin by including it in the plugins array within their .zshrc file. No external dependencies are required beyond Oh My Zsh and the Grails plugin. The 'plugins' array determines which plugins are loaded for Zsh; adding 'grails' enables command completion for Grails CLI commands. Users may include 'grails' alongside other plugins as needed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/grails/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... grails)
```

----------------------------------------

TITLE: Configuring Emotty Plugin in Zsh
DESCRIPTION: To configure the emotty plugin, add 'emotty' to the plugins array in the .zshrc file. This configuration is necessary to enable the plugin's functionality in the Zsh prompt. Ensure the emoji plugin is also installed, as it is a prerequisite.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emotty/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
plugins=(... emotty)
```

----------------------------------------

TITLE: Example kube-ps1 Output When Context is Not Set
DESCRIPTION: Displays the prompt structure shown by `kube-ps1` when the `kubectl` current-context is not set or cannot be determined via the configured binary. `<symbol>` represents the configured or default symbol.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_8

LANGUAGE: text
CODE:
```
(<symbol>|N/A:N/A)
```

----------------------------------------

TITLE: Loading SUSE Plugin in Oh My Zsh
DESCRIPTION: Configuration snippet showing how to enable the SUSE plugin in Oh My Zsh by adding it to the plugins array in .zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/suse/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... suse)
```

----------------------------------------

TITLE: Loading Zsh-z with Zim Plugin Manager - Shell
DESCRIPTION: This snippet registers the Zsh-z plugin as a Zim module in the user's .zimrc file. It points to the GitHub URL, allowing Zim to download and keep the plugin updated. Requires running zimfw install afterwards for activation.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_14

LANGUAGE: shell
CODE:
```
zmodule https://github.com/agkozak/zsh-z
```

----------------------------------------

TITLE: Enabling JFrog Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This Zsh configuration snippet demonstrates how to activate the `jfrog` plugin within the Oh My Zsh framework. By adding `jfrog` to the `plugins` array in the user's `.zshrc` file, Zsh will load the plugin upon startup, enabling command-line completion features for the JFrog CLI. The ellipsis (`...`) represents other potential plugins already present in the configuration.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jfrog/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... jfrog)
```

----------------------------------------

TITLE: Reloading Zsh Shell Session - Shell
DESCRIPTION: Runs the Zsh shell executable, typically after updating .zshrc or plugins, to apply new configuration to the current session. No dependencies beyond Zsh; no input or output parameters. Limitations: All unsaved shell state is lost and subshells may be spawned if not run as exec.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_10

LANGUAGE: shell
CODE:
```
exec zsh
```

----------------------------------------

TITLE: Installing RVM Plugin in Oh My Zsh
DESCRIPTION: Configuration snippet showing how to enable the RVM plugin in Oh My Zsh by adding it to the plugins array in the zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rvm/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... rvm)
```

----------------------------------------

TITLE: Initializing Fortune Data with strfile Command
DESCRIPTION: Command to generate the fortune database for the Chuck Norris quotes after installing the fortune program.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/chucknorris/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
strfile $ZSH/plugins/chucknorris/fortunes/chucknorris\n
```

----------------------------------------

TITLE: Expanding Glob Range Expression in Zsh
DESCRIPTION: This example demonstrates how the 'globalias' plugin expands a numeric range glob expression. Typing `touch {1..10}` followed by the SPACE key automatically expands the command to `touch 1 2 3 4 5 6 7 8 9 10`.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/globalias/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
$ touch {1..10}<space>
# expands to
$ touch 1 2 3 4 5 6 7 8 9 10
```

----------------------------------------

TITLE: Adding vagrant-prompt Plugin to Oh My Zsh
DESCRIPTION: Shows how to enable the vagrant-prompt plugin in the Oh My Zsh configuration file by adding it to the plugins array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vagrant-prompt/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... vagrant-prompt)
```

----------------------------------------

TITLE: Installing Conda Plugin in Oh My Zsh
DESCRIPTION: Instructions for enabling the conda plugin in Oh My Zsh by adding it to the plugins array in the zshrc configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/conda/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... conda)
```

----------------------------------------

TITLE: Configuring Group Ownership Display ('show-group') in Zsh
DESCRIPTION: Sets the 'show-group' option for the eza plugin using `zstyle`. Setting it to 'yes' (the default) makes the plugin always add the `-g` flag to `eza` commands, displaying the group ownership of files. Setting it to 'no' omits this flag. This configuration must be set before Oh My Zsh loads plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_4

LANGUAGE: zsh
CODE:
```
zstyle ':omz:plugins:eza' 'show-group' yes|no
```

----------------------------------------

TITLE: Adding Ant Plugin to Oh My Zsh Configuration
DESCRIPTION: Shows how to enable the Ant plugin in Oh My Zsh by adding it to the plugins array in the zshrc configuration file. The plugin caches ant targets in a .ant_targets file for improved performance.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ant/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... ant)
```

----------------------------------------

TITLE: Binding Control Keys in Emacs Mode - Zsh - Shell
DESCRIPTION: Shows how to bind Control-P and Control-N specifically in emacs keymap mode to facilitate up/down history navigation with history-substring-search. Requires history-substring-search functions loaded into Zsh. Input: emacs keymap specifications and key codes; Output: customized history navigation in emacs editing mode.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_15

LANGUAGE: shell
CODE:
```
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
```

----------------------------------------

TITLE: Installing Termux API Package for Battery Plugin on Android
DESCRIPTION: This command installs the termux-api package within Termux on Android. It's required for the battery plugin to function correctly on Android devices using Termux.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/battery/README.md#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
pkg install termux-api
```

----------------------------------------

TITLE: Configuring Yii Plugin in Oh My Zsh
DESCRIPTION: This code snippet shows how to enable the Yii plugin by adding it to the plugins array in the zshrc configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/yii/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... yii)
```

----------------------------------------

TITLE: Configuring Plugins Array in Oh My Zsh - Zsh
DESCRIPTION: This snippet demonstrates how to add the Hanami plugin to the plugins array in your .zshrc file, enabling the use of provided Hanami aliases in your terminal. Requires Oh My Zsh to be installed; no additional dependencies are necessary beyond the plugin repository. The plugins array can include multiple entries, with 'hanami' appended to activate this plugin's features.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/hanami/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... hanami)
```

----------------------------------------

TITLE: Fixing Underline in tmux/screen via Terminfo (Shell)
DESCRIPTION: This shell command provides a fix for potential underline display issues in terminals identified as `screen-256color` (common in tmux/screen). It retrieves the existing terminfo entry using `infocmp`, modifies the `ncv` capability to disable specific video attributes (like underline limitations), and compiles the modified entry using `tic`, storing it in `~/.terminfo`.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_8

LANGUAGE: shell
CODE:
```
{ infocmp -x screen-256color; printf '\t%s\n' 'ncv@,'; } > /tmp/t && tic -x /tmp/t
```

----------------------------------------

TITLE: Plugin Configuration ohmyzsh
DESCRIPTION: This snippet shows how to enable the emoji-clock plugin by adding it to the plugins array in the zshrc file. The plugin displays the current time using a clock emoji with precision up to half an hour. No additional dependencies are required; just insert the plugin name into the array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji-clock/README.md#2025-04-22_snippet_0

LANGUAGE: Plain Text
CODE:
```
plugins=(... emoji-clock)
```

----------------------------------------

TITLE: Enabling pm2 Plugin in oh-my-zsh Configuration (zsh)
DESCRIPTION: This snippet demonstrates how to enable the pm2 plugin by modifying the plugins array in your .zshrc file. Users must add 'pm2' as an entry to activate the plugin and gain access to its aliases and completions. The plugins array can contain multiple plugin names within the parentheses.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pm2/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... pm2)
```

----------------------------------------

TITLE: Configuring Sublime Text Plugin in Oh My Zsh
DESCRIPTION: This code shows how to enable the Sublime Text plugin by adding it to the plugins array in your zshrc configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sublime/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... sublime)
```

----------------------------------------

TITLE: Adding Buf Plugin to Oh My Zsh Configuration
DESCRIPTION: Instructions for enabling the Buf plugin in Oh My Zsh by adding it to the plugins array in the zshrc configuration file. This enables command completion for the Buf CLI tool which is used for working with Protocol Buffers.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/buf/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... buf)
```

----------------------------------------

TITLE: Configuring Git Status Display ('git-status') in Zsh
DESCRIPTION: Sets the 'git-status' option for the eza plugin using `zstyle`. Setting it to 'yes' makes the plugin always add the `--git` flag to `eza` commands, showing Git status for tracked files/repositories. The default is 'no'. This configuration must be set before Oh My Zsh loads plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
zstyle ':omz:plugins:eza' 'git-status' yes|no
```

----------------------------------------

TITLE: Restarting the Zsh Shell
DESCRIPTION: This command restarts the Zsh shell to apply changes after enabling the DirCycle plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dircycle/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
exec zsh
```

----------------------------------------

TITLE: Setting up keybinding for wd browse feature
DESCRIPTION: Configuration to add to .zshrc to set up a keyboard shortcut (Ctrl+B by default) for the fzf-powered browse feature of wd.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_14

LANGUAGE: zsh
CODE:
```
# ctrl-b to open the fzf browser
bindkey ${FZF_WD_BINDKEY:-'^B'} wd_browse_widget
```

----------------------------------------

TITLE: Adding Hitchhiker Plugin to Oh My Zsh
DESCRIPTION: This snippet shows how to add the hitchhiker plugin to the list of plugins in the Zsh configuration file. It is necessary to include it in the plugins array for activation.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/hitchhiker/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... hitchhiker)
```

----------------------------------------

TITLE: Commit Message with Issue Reference Example
DESCRIPTION: Example of referencing issues in commit messages to automatically link them in the changelog.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/CONTRIBUTING.md#2025-04-22_snippet_5

LANGUAGE: markdown
CODE:
```
feat(archlinux): add support for aura AUR helper (#9467)
```

----------------------------------------

TITLE: Enabling Kitty Plugin in Oh My Zsh Configuration (Zsh)
DESCRIPTION: This configuration snippet shows how to enable the Kitty plugin within Oh My Zsh by adding its name (`kitty`) to the `plugins` array in the user's `.zshrc` file. The `...` indicates that other plugins might already be present in the array. Activating this plugin makes its specific aliases and functions available in the shell.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kitty/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... kitty)
```

----------------------------------------

TITLE: Disabling Pipenv Auto-Shell Activation in Oh My Zsh (Zsh)
DESCRIPTION: This configuration snippet demonstrates how to disable the automatic activation and deactivation of the Pipenv virtual environment shell managed by the plugin. Setting the `auto-shell` zstyle for the `:omz:plugins:pipenv` context to `no` in the `.zshrc` file, before sourcing Oh My Zsh itself, prevents the plugin from automatically entering or exiting the pipenv shell.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pipenv/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
zstyle ':omz:plugins:pipenv' auto-shell no
```

----------------------------------------

TITLE: Activating the Leiningen Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This Zsh code snippet demonstrates how to enable the Leiningen plugin for Oh My Zsh. It involves editing the `.zshrc` file and adding the string `lein` to the `plugins` array, which activates the Leiningen-specific completions in the Zsh shell. Ensure Oh My Zsh is installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lein/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... lein)
```

----------------------------------------

TITLE: Loading Zsh-z with Zgen Plugin Manager - Shell
DESCRIPTION: This code snippet is intended for use in .zshrc files managed by zgen. Adding it above the zgen save call ensures the Zsh-z plugin is loaded each session. Dependencies include Zgen and access to GitHub repositories. To fully activate, run zgen reset and restart the shell.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_12

LANGUAGE: shell
CODE:
```
zgen load agkozak/zsh-z
```

----------------------------------------

TITLE: Installing rbenv Plugin in Oh My Zsh Configuration
DESCRIPTION: Shows how to enable the rbenv plugin by adding it to the plugins array in the zshrc configuration file. This enables Ruby version and gemset information in the shell prompt.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rbenv/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... rbenv)
```

----------------------------------------

TITLE: Defining Unicode Code Points for Human Gesture Emojis
DESCRIPTION: Defines Unicode code point sequences for emojis representing human gestures with gender and skin tone modifiers. Each sequence includes the base emoji code point followed by optional skin tone and gender modifier code points.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_17

LANGUAGE: unicode
CODE:
```
1F9CF 200D 2642 FE0F                       ; fully-qualified     # 🧏‍♂️ deaf man
1F9CF 200D 2642                            ; minimally-qualified # 🧏‍♂ deaf man
1F9CF 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧏🏻‍♂️ deaf man: light skin tone
1F9CF 1F3FB 200D 2642                      ; minimally-qualified # 🧏🏻‍♂ deaf man: light skin tone
1F647                                      ; fully-qualified     # 🙇 person bowing
1F926                                      ; fully-qualified     # 🤦 person facepalming
1F937                                      ; fully-qualified     # 🤷 person shrugging
```

----------------------------------------

TITLE: Enabling chruby Plugin in Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to add the chruby plugin to the plugins array in the zshrc file. This enables the plugin's functionality in Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/chruby/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... chruby)
```

----------------------------------------

TITLE: Installing Symfony2 Plugin in Oh My Zsh
DESCRIPTION: Instructions for enabling the Symfony2 plugin in Oh My Zsh by adding it to the plugins array in the zshrc configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/symfony2/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
plugins=(... symfony2)
```

----------------------------------------

TITLE: Enabling Systemadmin Plugin in Oh My Zsh
DESCRIPTION: This code snippet shows how to enable the Systemadmin plugin in the Oh My Zsh configuration file (zshrc). It demonstrates adding the 'systemadmin' plugin to the plugins array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/systemadmin/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... systemadmin)
```

----------------------------------------

TITLE: Configuring Oh My Zsh Plugins Array (Zsh)
DESCRIPTION: This Zsh code snippet demonstrates how to enable the `lpass` plugin within an Oh My Zsh configuration. Users need to add `lpass` to the `plugins` array in their `.zshrc` file. This modification instructs Oh My Zsh to load the specified plugin upon shell startup.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lpass/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... lpass)
```

----------------------------------------

TITLE: Warping back to previous directories
DESCRIPTION: Commands to navigate back to previous directories using dot syntax, which is a wrapper for the zsh dirs function.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_20

LANGUAGE: zsh
CODE:
```
wd ..
wd ...
```

----------------------------------------

TITLE: Activating Zsh-z Module in Prezto - Shell
DESCRIPTION: This updated snippet adds 'zsh-z' to the end of the Prezto module loading list, ensuring the plugin is included and initialized on shell startup. Preserve the backslash at the end of the previous line to allow adding new modules. Edit ~/.zpreztorc or equivalent files accordingly.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_10

LANGUAGE: shell
CODE:
```
zstyle ':prezto:load' pmodule \
    'environment' \
    'terminal' \
    'editor' \
    'history' \
    'directory' \
    'spectrum' \
    'utility' \
    'completion' \
    'prompt' \
    'zsh-z'
```

----------------------------------------

TITLE: Enabling Pass Plugin in Oh My Zsh - Shell
DESCRIPTION: Demonstrates how to add the 'pass' plugin to the list of enabled plugins in the Oh My Zsh configuration. This step is necessary to activate password manager completion features. No additional dependencies are required beyond Oh My Zsh itself; the snippet should be placed in the '.zshrc' file, replacing '...' with any other desired plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pass/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
plugins=(... pass)
```

----------------------------------------

TITLE: Enabling Scala Plugin in Oh My Zsh Configuration
DESCRIPTION: Configuration snippet showing how to enable the Scala plugin in Oh My Zsh by adding it to the plugins array in the zshrc file
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/scala/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... scala)
```

----------------------------------------

TITLE: Defining Unicode Code Points for Human Activity Emoji with Gender and Skin Tone Modifiers
DESCRIPTION: This code snippet defines Unicode code point sequences for various human activity emoji (rowing, swimming, bouncing ball, lifting weights) with different gender and skin tone modifiers. Each line includes the hexadecimal code points, qualification status (fully-qualified, minimally-qualified, or unqualified), and a visual representation of the resulting emoji.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_28

LANGUAGE: unicode
CODE:
```
1F6A3 1F3FF 200D 2642                      ; minimally-qualified # 🚣🏿‍♂ man rowing boat: dark skin tone
1F6A3 200D 2640 FE0F                       ; fully-qualified     # 🚣‍♀️ woman rowing boat
1F6A3 200D 2640                            ; minimally-qualified # 🚣‍♀ woman rowing boat
1F6A3 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🚣🏻‍♀️ woman rowing boat: light skin tone
1F6A3 1F3FB 200D 2640                      ; minimally-qualified # 🚣🏻‍♀ woman rowing boat: light skin tone
1F6A3 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🚣🏼‍♀️ woman rowing boat: medium-light skin tone
1F6A3 1F3FC 200D 2640                      ; minimally-qualified # 🚣🏼‍♀ woman rowing boat: medium-light skin tone
1F6A3 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🚣🏽‍♀️ woman rowing boat: medium skin tone
1F6A3 1F3FD 200D 2640                      ; minimally-qualified # 🚣🏽‍♀ woman rowing boat: medium skin tone
1F6A3 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🚣🏾‍♀️ woman rowing boat: medium-dark skin tone
1F6A3 1F3FE 200D 2640                      ; minimally-qualified # 🚣🏾‍♀ woman rowing boat: medium-dark skin tone
1F6A3 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🚣🏿‍♀️ woman rowing boat: dark skin tone
1F6A3 1F3FF 200D 2640                      ; minimally-qualified # 🚣🏿‍♀ woman rowing boat: dark skin tone
1F3CA                                      ; fully-qualified     # 🏊 person swimming
1F3CA 1F3FB                                ; fully-qualified     # 🏊🏻 person swimming: light skin tone
1F3CA 1F3FC                                ; fully-qualified     # 🏊🏼 person swimming: medium-light skin tone
1F3CA 1F3FD                                ; fully-qualified     # 🏊🏽 person swimming: medium skin tone
1F3CA 1F3FE                                ; fully-qualified     # 🏊🏾 person swimming: medium-dark skin tone
1F3CA 1F3FF                                ; fully-qualified     # 🏊🏿 person swimming: dark skin tone
1F3CA 200D 2642 FE0F                       ; fully-qualified     # 🏊‍♂️ man swimming
1F3CA 200D 2642                            ; minimally-qualified # 🏊‍♂ man swimming
1F3CA 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🏊🏻‍♂️ man swimming: light skin tone
1F3CA 1F3FB 200D 2642                      ; minimally-qualified # 🏊🏻‍♂ man swimming: light skin tone
1F3CA 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🏊🏼‍♂️ man swimming: medium-light skin tone
1F3CA 1F3FC 200D 2642                      ; minimally-qualified # 🏊🏼‍♂ man swimming: medium-light skin tone
1F3CA 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🏊🏽‍♂️ man swimming: medium skin tone
1F3CA 1F3FD 200D 2642                      ; minimally-qualified # 🏊🏽‍♂ man swimming: medium skin tone
1F3CA 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🏊🏾‍♂️ man swimming: medium-dark skin tone
1F3CA 1F3FE 200D 2642                      ; minimally-qualified # 🏊🏾‍♂ man swimming: medium-dark skin tone
1F3CA 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🏊🏿‍♂️ man swimming: dark skin tone
1F3CA 1F3FF 200D 2642                      ; minimally-qualified # 🏊🏿‍♂ man swimming: dark skin tone
1F3CA 200D 2640 FE0F                       ; fully-qualified     # 🏊‍♀️ woman swimming
1F3CA 200D 2640                            ; minimally-qualified # 🏊‍♀ woman swimming
1F3CA 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🏊🏻‍♀️ woman swimming: light skin tone
1F3CA 1F3FB 200D 2640                      ; minimally-qualified # 🏊🏻‍♀ woman swimming: light skin tone
1F3CA 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🏊🏼‍♀️ woman swimming: medium-light skin tone
1F3CA 1F3FC 200D 2640                      ; minimally-qualified # 🏊🏼‍♀ woman swimming: medium-light skin tone
1F3CA 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🏊🏽‍♀️ woman swimming: medium skin tone
1F3CA 1F3FD 200D 2640                      ; minimally-qualified # 🏊🏽‍♀ woman swimming: medium skin tone
1F3CA 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🏊🏾‍♀️ woman swimming: medium-dark skin tone
1F3CA 1F3FE 200D 2640                      ; minimally-qualified # 🏊🏾‍♀ woman swimming: medium-dark skin tone
1F3CA 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🏊🏿‍♀️ woman swimming: dark skin tone
1F3CA 1F3FF 200D 2640                      ; minimally-qualified # 🏊🏿‍♀ woman swimming: dark skin tone
26F9 FE0F                                  ; fully-qualified     # ⛹️ person bouncing ball
26F9                                       ; unqualified         # ⛹ person bouncing ball
26F9 1F3FB                                 ; fully-qualified     # ⛹🏻 person bouncing ball: light skin tone
26F9 1F3FC                                 ; fully-qualified     # ⛹🏼 person bouncing ball: medium-light skin tone
26F9 1F3FD                                 ; fully-qualified     # ⛹🏽 person bouncing ball: medium skin tone
26F9 1F3FE                                 ; fully-qualified     # ⛹🏾 person bouncing ball: medium-dark skin tone
26F9 1F3FF                                 ; fully-qualified     # ⛹🏿 person bouncing ball: dark skin tone
26F9 FE0F 200D 2642 FE0F                   ; fully-qualified     # ⛹️‍♂️ man bouncing ball
26F9 200D 2642 FE0F                        ; unqualified         # ⛹‍♂️ man bouncing ball
26F9 FE0F 200D 2642                        ; unqualified         # ⛹️‍♂ man bouncing ball
26F9 200D 2642                             ; unqualified         # ⛹‍♂ man bouncing ball
26F9 1F3FB 200D 2642 FE0F                  ; fully-qualified     # ⛹🏻‍♂️ man bouncing ball: light skin tone
26F9 1F3FB 200D 2642                       ; minimally-qualified # ⛹🏻‍♂ man bouncing ball: light skin tone
26F9 1F3FC 200D 2642 FE0F                  ; fully-qualified     # ⛹🏼‍♂️ man bouncing ball: medium-light skin tone
26F9 1F3FC 200D 2642                       ; minimally-qualified # ⛹🏼‍♂ man bouncing ball: medium-light skin tone
26F9 1F3FD 200D 2642 FE0F                  ; fully-qualified     # ⛹🏽‍♂️ man bouncing ball: medium skin tone
26F9 1F3FD 200D 2642                       ; minimally-qualified # ⛹🏽‍♂ man bouncing ball: medium skin tone
26F9 1F3FE 200D 2642 FE0F                  ; fully-qualified     # ⛹🏾‍♂️ man bouncing ball: medium-dark skin tone
26F9 1F3FE 200D 2642                       ; minimally-qualified # ⛹🏾‍♂ man bouncing ball: medium-dark skin tone
26F9 1F3FF 200D 2642 FE0F                  ; fully-qualified     # ⛹🏿‍♂️ man bouncing ball: dark skin tone
26F9 1F3FF 200D 2642                       ; minimally-qualified # ⛹🏿‍♂ man bouncing ball: dark skin tone
26F9 FE0F 200D 2640 FE0F                   ; fully-qualified     # ⛹️‍♀️ woman bouncing ball
26F9 200D 2640 FE0F                        ; unqualified         # ⛹‍♀️ woman bouncing ball
26F9 FE0F 200D 2640                        ; unqualified         # ⛹️‍♀ woman bouncing ball
26F9 200D 2640                             ; unqualified         # ⛹‍♀ woman bouncing ball
26F9 1F3FB 200D 2640 FE0F                  ; fully-qualified     # ⛹🏻‍♀️ woman bouncing ball: light skin tone
26F9 1F3FB 200D 2640                       ; minimally-qualified # ⛹🏻‍♀ woman bouncing ball: light skin tone
26F9 1F3FC 200D 2640 FE0F                  ; fully-qualified     # ⛹🏼‍♀️ woman bouncing ball: medium-light skin tone
26F9 1F3FC 200D 2640                       ; minimally-qualified # ⛹🏼‍♀ woman bouncing ball: medium-light skin tone
26F9 1F3FD 200D 2640 FE0F                  ; fully-qualified     # ⛹🏽‍♀️ woman bouncing ball: medium skin tone
26F9 1F3FD 200D 2640                       ; minimally-qualified # ⛹🏽‍♀ woman bouncing ball: medium skin tone
26F9 1F3FE 200D 2640 FE0F                  ; fully-qualified     # ⛹🏾‍♀️ woman bouncing ball: medium-dark skin tone
26F9 1F3FE 200D 2640                       ; minimally-qualified # ⛹🏾‍♀ woman bouncing ball: medium-dark skin tone
26F9 1F3FF 200D 2640 FE0F                  ; fully-qualified     # ⛹🏿‍♀️ woman bouncing ball: dark skin tone
26F9 1F3FF 200D 2640                       ; minimally-qualified # ⛹🏿‍♀ woman bouncing ball: dark skin tone
1F3CB FE0F                                 ; fully-qualified     # 🏋️ person lifting weights
1F3CB                                      ; unqualified         # 🏋 person lifting weights
1F3CB 1F3FB                                ; fully-qualified     # 🏋🏻 person lifting weights: light skin tone
1F3CB 1F3FC                                ; fully-qualified     # 🏋🏼 person lifting weights: medium-light skin tone
1F3CB 1F3FD                                ; fully-qualified     # 🏋🏽 person lifting weights: medium skin tone
1F3CB 1F3FE                                ; fully-qualified     # 🏋🏾 person lifting weights: medium-dark skin tone
1F3CB 1F3FF                                ; fully-qualified     # 🏋🏿 person lifting weights: dark skin tone
1F3CB FE0F 200D 2642 FE0F                  ; fully-qualified     # 🏋️‍♂️ man lifting weights
1F3CB 200D 2642 FE0F                       ; unqualified         # 🏋‍♂️ man lifting weights
1F3CB FE0F 200D 2642                       ; unqualified         # 🏋️‍♂ man lifting weights
1F3CB 200D 2642                            ; unqualified         # 🏋‍♂ man lifting weights
1F3CB 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🏋🏻‍♂️ man lifting weights: light skin tone
1F3CB 1F3FB 200D 2642                      ; minimally-qualified # 🏋🏻‍♂ man lifting weights: light skin tone
1F3CB 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🏋🏼‍♂️ man lifting weights: medium-light skin tone
1F3CB 1F3FC 200D 2642                      ; minimally-qualified # 🏋🏼‍♂ man lifting weights: medium-light skin tone
1F3CB 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🏋🏽‍♂️ man lifting weights: medium skin tone
```

----------------------------------------

TITLE: Sky & Weather Emoji Unicode Definitions
DESCRIPTION: Unicode code point definitions for sky and weather related emoji including celestial bodies and weather phenomena
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_43

LANGUAGE: unicode
CODE:
```
1F311                                      ; fully-qualified     # 🌑 new moon
1F312                                      ; fully-qualified     # 🌒 waxing crescent moon
1F313                                      ; fully-qualified     # 🌓 first quarter moon
```

----------------------------------------

TITLE: Adding alias-finder to Oh My Zsh plugins
DESCRIPTION: Configuration example showing how to enable the alias-finder plugin in your zshrc file by adding it to the plugins array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/alias-finder/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... alias-finder)
```

----------------------------------------

TITLE: Keycap Unicode Definitions
DESCRIPTION: Unicode codepoint definitions for numeric keycap symbols (0-9, #, *) and the number 10. Each keycap is defined with both fully-qualified (with FE0F variant selector) and unqualified versions.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_57

LANGUAGE: unicode
CODE:
```
0023 FE0F 20E3                             ; fully-qualified     # #️⃣ keycap: #
0023 20E3                                  ; unqualified         # #⃣ keycap: #
002A FE0F 20E3                             ; fully-qualified     # *️⃣ keycap: *
002A 20E3                                  ; unqualified         # *⃣ keycap: *
0030 FE0F 20E3                             ; fully-qualified     # 0️⃣ keycap: 0
```

----------------------------------------

TITLE: Passing Options to Keychain Program
DESCRIPTION: This configuration adds additional options to the keychain program call, allowing customization of its behavior, such as enabling quiet mode. Modify options based on desired behavior for keychain.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/keychain/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
zstyle :omz:plugins:keychain options --quiet
```

----------------------------------------

TITLE: Shortening a Link using the Droplr Plugin (Zsh)
DESCRIPTION: This command shows how to shorten a given URL using the `droplr` command-line tool. Replace `https://example.com` with the URL you wish to shorten. Requires the Droplr.app to be installed, running, and logged in on MacOS.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/droplr/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
droplr https://example.com
```

----------------------------------------

TITLE: Benchmarking Branch Prompt Info Script - Branch Plugin - Console
DESCRIPTION: Shows the performance benchmark of running the branch plugin directly as a Zsh script. Useful for validating the speed improvement of the branch plugin over native VCS commands. Assumes Oh My Zsh and the plugin are installed; test script should exist at the given path. Similar output metrics as the Mercurial benchmark.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/branch/README.md#2025-04-22_snippet_2

LANGUAGE: console
CODE:
```
$ time zsh /tmp/branch_prompt_info_test.zsh
0.00s user 0.01s system 78% cpu 0.014 total
```

----------------------------------------

TITLE: Decrypting downloaded files
DESCRIPTION: Command to decrypt a file that was previously encrypted using gpg with the transfer plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/transfer/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
gpg -d file -ca
```

----------------------------------------

TITLE: Enabling the fbterm Plugin in Oh My Zsh (zsh)
DESCRIPTION: This zsh configuration snippet shows how to enable the `fbterm` plugin in Oh My Zsh. By adding `fbterm` to the `plugins` array within the user's `.zshrc` file, the plugin gets activated. This specific plugin automatically starts the `fbterm` terminal emulator if the shell session is initiated on a real TTY (e.g., `/dev/tty*`). The ellipsis (`...`) indicates that other plugins might already be listed in the array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fbterm/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... fbterm)
```

----------------------------------------

TITLE: Enabling Tmuxinator Plugin in Oh My Zsh Configuration
DESCRIPTION: This code snippet shows how to add the tmuxinator plugin to the plugins array in the zshrc file. This enables the plugin's functionality in Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/tmuxinator/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... tmuxinator)
```

----------------------------------------

TITLE: Enabling Multipass Plugin in Oh My Zsh Configuration
DESCRIPTION: This snippet demonstrates how to add the `multipass` plugin to the `plugins` array in the `.zshrc` file for Oh My Zsh. Activating this plugin enables command completion and aliases for Multipass commands within the Zsh shell.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/multipass/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... multipass)
```

----------------------------------------

TITLE: Updating Zsh Prompt to Display Java Version
DESCRIPTION: This code snippet demonstrates how to use the jenv_prompt_info function to display the current Java version in the right-hand side of the prompt by modifying the RPROMPT variable. It requires the jenv plugin to be set up in Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jenv/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
PROMPT="%~$ "
RPROMPT='$(jenv_prompt_info)'
```

----------------------------------------

TITLE: Defining Unicode Sequences for Sports and Activity Emojis
DESCRIPTION: This snippet defines Unicode sequences for various sports and activity emojis, including cartwheeling, wrestling, water polo, handball, and juggling. It provides sequences for different genders and skin tones, along with their qualification status (fully-qualified or minimally-qualified).
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_30

LANGUAGE: Unicode
CODE:
```
1F938 1F3FD 200D 2642                      ; minimally-qualified # 🤸🏽‍♂ man cartwheeling: medium skin tone
1F938 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🤸🏾‍♂️ man cartwheeling: medium-dark skin tone
1F938 1F3FE 200D 2642                      ; minimally-qualified # 🤸🏾‍♂ man cartwheeling: medium-dark skin tone
1F938 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🤸🏿‍♂️ man cartwheeling: dark skin tone
1F938 1F3FF 200D 2642                      ; minimally-qualified # 🤸🏿‍♂ man cartwheeling: dark skin tone
1F938 200D 2640 FE0F                       ; fully-qualified     # 🤸‍♀️ woman cartwheeling
1F938 200D 2640                            ; minimally-qualified # 🤸‍♀ woman cartwheeling
1F938 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🤸🏻‍♀️ woman cartwheeling: light skin tone
1F938 1F3FB 200D 2640                      ; minimally-qualified # 🤸🏻‍♀ woman cartwheeling: light skin tone
1F938 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🤸🏼‍♀️ woman cartwheeling: medium-light skin tone
1F938 1F3FC 200D 2640                      ; minimally-qualified # 🤸🏼‍♀ woman cartwheeling: medium-light skin tone
1F938 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🤸🏽‍♀️ woman cartwheeling: medium skin tone
1F938 1F3FD 200D 2640                      ; minimally-qualified # 🤸🏽‍♀ woman cartwheeling: medium skin tone
1F938 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🤸🏾‍♀️ woman cartwheeling: medium-dark skin tone
1F938 1F3FE 200D 2640                      ; minimally-qualified # 🤸🏾‍♀ woman cartwheeling: medium-dark skin tone
1F938 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🤸🏿‍♀️ woman cartwheeling: dark skin tone
1F938 1F3FF 200D 2640                      ; minimally-qualified # 🤸🏿‍♀ woman cartwheeling: dark skin tone
1F93C                                      ; fully-qualified     # 🤼 people wrestling
1F93C 200D 2642 FE0F                       ; fully-qualified     # 🤼‍♂️ men wrestling
1F93C 200D 2642                            ; minimally-qualified # 🤼‍♂ men wrestling
1F93C 200D 2640 FE0F                       ; fully-qualified     # 🤼‍♀️ women wrestling
1F93C 200D 2640                            ; minimally-qualified # 🤼‍♀ women wrestling
1F93D                                      ; fully-qualified     # 🤽 person playing water polo
1F93D 1F3FB                                ; fully-qualified     # 🤽🏻 person playing water polo: light skin tone
1F93D 1F3FC                                ; fully-qualified     # 🤽🏼 person playing water polo: medium-light skin tone
1F93D 1F3FD                                ; fully-qualified     # 🤽🏽 person playing water polo: medium skin tone
1F93D 1F3FE                                ; fully-qualified     # 🤽🏾 person playing water polo: medium-dark skin tone
1F93D 1F3FF                                ; fully-qualified     # 🤽🏿 person playing water polo: dark skin tone
1F93D 200D 2642 FE0F                       ; fully-qualified     # 🤽‍♂️ man playing water polo
1F93D 200D 2642                            ; minimally-qualified # 🤽‍♂ man playing water polo
1F93D 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🤽🏻‍♂️ man playing water polo: light skin tone
1F93D 1F3FB 200D 2642                      ; minimally-qualified # 🤽🏻‍♂ man playing water polo: light skin tone
1F93D 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🤽🏼‍♂️ man playing water polo: medium-light skin tone
1F93D 1F3FC 200D 2642                      ; minimally-qualified # 🤽🏼‍♂ man playing water polo: medium-light skin tone
1F93D 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🤽🏽‍♂️ man playing water polo: medium skin tone
1F93D 1F3FD 200D 2642                      ; minimally-qualified # 🤽🏽‍♂ man playing water polo: medium skin tone
1F93D 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🤽🏾‍♂️ man playing water polo: medium-dark skin tone
1F93D 1F3FE 200D 2642                      ; minimally-qualified # 🤽🏾‍♂ man playing water polo: medium-dark skin tone
1F93D 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🤽🏿‍♂️ man playing water polo: dark skin tone
1F93D 1F3FF 200D 2642                      ; minimally-qualified # 🤽🏿‍♂ man playing water polo: dark skin tone
1F93D 200D 2640 FE0F                       ; fully-qualified     # 🤽‍♀️ woman playing water polo
1F93D 200D 2640                            ; minimally-qualified # 🤽‍♀ woman playing water polo
1F93D 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🤽🏻‍♀️ woman playing water polo: light skin tone
1F93D 1F3FB 200D 2640                      ; minimally-qualified # 🤽🏻‍♀ woman playing water polo: light skin tone
1F93D 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🤽🏼‍♀️ woman playing water polo: medium-light skin tone
1F93D 1F3FC 200D 2640                      ; minimally-qualified # 🤽🏼‍♀ woman playing water polo: medium-light skin tone
1F93D 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🤽🏽‍♀️ woman playing water polo: medium skin tone
1F93D 1F3FD 200D 2640                      ; minimally-qualified # 🤽🏽‍♀ woman playing water polo: medium skin tone
1F93D 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🤽🏾‍♀️ woman playing water polo: medium-dark skin tone
1F93D 1F3FE 200D 2640                      ; minimally-qualified # 🤽🏾‍♀ woman playing water polo: medium-dark skin tone
1F93D 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🤽🏿‍♀️ woman playing water polo: dark skin tone
1F93D 1F3FF 200D 2640                      ; minimally-qualified # 🤽🏿‍♀ woman playing water polo: dark skin tone
1F93E                                      ; fully-qualified     # 🤾 person playing handball
1F93E 1F3FB                                ; fully-qualified     # 🤾🏻 person playing handball: light skin tone
1F93E 1F3FC                                ; fully-qualified     # 🤾🏼 person playing handball: medium-light skin tone
1F93E 1F3FD                                ; fully-qualified     # 🤾🏽 person playing handball: medium skin tone
1F93E 1F3FE                                ; fully-qualified     # 🤾🏾 person playing handball: medium-dark skin tone
1F93E 1F3FF                                ; fully-qualified     # 🤾🏿 person playing handball: dark skin tone
1F93E 200D 2642 FE0F                       ; fully-qualified     # 🤾‍♂️ man playing handball
1F93E 200D 2642                            ; minimally-qualified # 🤾‍♂ man playing handball
1F93E 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🤾🏻‍♂️ man playing handball: light skin tone
1F93E 1F3FB 200D 2642                      ; minimally-qualified # 🤾🏻‍♂ man playing handball: light skin tone
1F93E 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🤾🏼‍♂️ man playing handball: medium-light skin tone
1F93E 1F3FC 200D 2642                      ; minimally-qualified # 🤾🏼‍♂ man playing handball: medium-light skin tone
1F93E 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🤾🏽‍♂️ man playing handball: medium skin tone
1F93E 1F3FD 200D 2642                      ; minimally-qualified # 🤾🏽‍♂ man playing handball: medium skin tone
1F93E 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🤾🏾‍♂️ man playing handball: medium-dark skin tone
1F93E 1F3FE 200D 2642                      ; minimally-qualified # 🤾🏾‍♂ man playing handball: medium-dark skin tone
1F93E 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🤾🏿‍♂️ man playing handball: dark skin tone
1F93E 1F3FF 200D 2642                      ; minimally-qualified # 🤾🏿‍♂ man playing handball: dark skin tone
1F93E 200D 2640 FE0F                       ; fully-qualified     # 🤾‍♀️ woman playing handball
1F93E 200D 2640                            ; minimally-qualified # 🤾‍♀ woman playing handball
1F93E 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🤾🏻‍♀️ woman playing handball: light skin tone
1F93E 1F3FB 200D 2640                      ; minimally-qualified # 🤾🏻‍♀ woman playing handball: light skin tone
1F93E 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🤾🏼‍♀️ woman playing handball: medium-light skin tone
1F93E 1F3FC 200D 2640                      ; minimally-qualified # 🤾🏼‍♀ woman playing handball: medium-light skin tone
1F93E 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🤾🏽‍♀️ woman playing handball: medium skin tone
1F93E 1F3FD 200D 2640                      ; minimally-qualified # 🤾🏽‍♀ woman playing handball: medium skin tone
1F93E 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🤾🏾‍♀️ woman playing handball: medium-dark skin tone
1F93E 1F3FE 200D 2640                      ; minimally-qualified # 🤾🏾‍♀ woman playing handball: medium-dark skin tone
1F93E 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🤾🏿‍♀️ woman playing handball: dark skin tone
1F93E 1F3FF 200D 2640                      ; minimally-qualified # 🤾🏿‍♀ woman playing handball: dark skin tone
1F939                                      ; fully-qualified     # 🤹 person juggling
1F939 1F3FB                                ; fully-qualified     # 🤹🏻 person juggling: light skin tone
1F939 1F3FC                                ; fully-qualified     # 🤹🏼 person juggling: medium-light skin tone
1F939 1F3FD                                ; fully-qualified     # 🤹🏽 person juggling: medium skin tone
1F939 1F3FE                                ; fully-qualified     # 🤹🏾 person juggling: medium-dark skin tone
1F939 1F3FF                                ; fully-qualified     # 🤹🏿 person juggling: dark skin tone
1F939 200D 2642 FE0F                       ; fully-qualified     # 🤹‍♂️ man juggling
1F939 200D 2642                            ; minimally-qualified # 🤹‍♂ man juggling
```

----------------------------------------

TITLE: Transport-Air Emoji Unicode Definitions
DESCRIPTION: Unicode code point definitions for airplane and air transport related emoji including qualifiers and descriptions
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_40

LANGUAGE: unicode
CODE:
```
2708 FE0F                                  ; fully-qualified     # ✈️ airplane
2708                                       ; unqualified         # ✈ airplane
1F6E9 FE0F                                 ; fully-qualified     # 🛩️ small airplane
1F6E9                                      ; unqualified         # 🛩 small airplane
1F6EB                                      ; fully-qualified     # 🛫 airplane departure
```

----------------------------------------

TITLE: Configuring Kitchen Plugin in Zsh
DESCRIPTION: This snippet demonstrates how to configure the kitchen plugin in Zsh by adding it to the plugins array in the zshrc file. This enables completion support for Test Kitchen. Ensure that the zshrc file is sourced after modifications.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kitchen/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... kitchen)
```

----------------------------------------

TITLE: Setting Up Ubuntu Environment for Azure Plugin Development (bash)
DESCRIPTION: This code snippet uses Docker to quickly start a Bash shell in an Ubuntu container, mounting the current directory and starting at /mnt. It is intended for developing or testing oh-my-zsh plugins in a clean Linux environment. The main dependency is Docker; it pulls the Ubuntu image and opens an interactive shell with mounted source code. There are no direct inputs or outputs beyond establishing the working container for development.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/azure/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
 docker run -it -v $(pwd):/mnt -w /mnt ubuntu bash
```

----------------------------------------

TITLE: Enabling Terminitor Plugin in Oh My Zsh Configuration
DESCRIPTION: This code snippet demonstrates how to add the Terminitor plugin to the plugins array in the zshrc file. This enables the Terminitor completions in Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/terminitor/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... terminitor)
```

----------------------------------------

TITLE: Configuring zbell_ignore Array
DESCRIPTION: Example configuration for the zbell_ignore array, which specifies which programs to ignore when determining whether to ring the bell. By default, it includes the editor and pager.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zbell/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
zbell_ignore=($EDITOR $PAGER)
```

----------------------------------------

TITLE: Listing warp points to current directory
DESCRIPTION: Command to show all warp points that point to the current directory or optionally display the path to a specific warp point.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_25

LANGUAGE: zsh
CODE:
```
wd show
```

----------------------------------------

TITLE: Enabling Kate Plugin in oh-my-zsh via zshrc (Markdown)
DESCRIPTION: Documents the command to add the 'kate' plugin to the oh-my-zsh plugins array in a Markdown code block. This step ensures the Kate plugin's aliases and functions are enabled in the user's shell session by adding "kate" to the plugins listed in the .zshrc file. No additional dependencies are required beyond oh-my-zsh and the Kate plugin itself.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kate/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
```
plugins=(... kate)
```
```

----------------------------------------

TITLE: Adding CakePHP Completion Plugin to Oh My Zsh Configuration
DESCRIPTION: This code snippet shows how to add the CakePHP completion plugin to the Oh My Zsh configuration. It demonstrates the syntax for including the 'cake' plugin in the plugins array of the zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/cake/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
plugins=(... cake)
```

----------------------------------------

TITLE: Unicode Mapping for Place and Building Emoji
DESCRIPTION: Maps Unicode values to building and place-related emoji, including stadiums, houses, office buildings, and landmarks. Each entry includes both fully-qualified (with FE0F modifier) and unqualified versions where applicable.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_37

LANGUAGE: txt
CODE:
```
1F3DF FE0F                                 ; fully-qualified     # 🏟️ stadium
1F3DF                                      ; unqualified         # 🏟 stadium
1F3DB FE0F                                 ; fully-qualified     # 🏛️ classical building
1F3DB                                      ; unqualified         # 🏛 classical building
```

----------------------------------------

TITLE: Unicode Emoji Codepoint Reference for Human Figures
DESCRIPTION: A structured listing of Unicode codepoints that define emoji for human figures in various poses, with different skin tones and gender variations. Each line contains the hexadecimal code sequence, qualification status (fully-qualified or minimally-qualified), and the visual representation of the emoji.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_25

LANGUAGE: plaintext
CODE:
```
1F9CD 1F3FB                                ; fully-qualified     # 🧍🏻 person standing: light skin tone
1F9CD 1F3FC                                ; fully-qualified     # 🧍🏼 person standing: medium-light skin tone
1F9CD 1F3FD                                ; fully-qualified     # 🧍🏽 person standing: medium skin tone
1F9CD 1F3FE                                ; fully-qualified     # 🧍🏾 person standing: medium-dark skin tone
1F9CD 1F3FF                                ; fully-qualified     # 🧍🏿 person standing: dark skin tone
1F9CD 200D 2642 FE0F                       ; fully-qualified     # 🧍‍♂️ man standing
1F9CD 200D 2642                            ; minimally-qualified # 🧍‍♂ man standing
1F9CD 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧍🏻‍♂️ man standing: light skin tone
1F9CD 1F3FB 200D 2642                      ; minimally-qualified # 🧍🏻‍♂ man standing: light skin tone
1F9CD 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🧍🏼‍♂️ man standing: medium-light skin tone
1F9CD 1F3FC 200D 2642                      ; minimally-qualified # 🧍🏼‍♂ man standing: medium-light skin tone
1F9CD 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🧍🏽‍♂️ man standing: medium skin tone
1F9CD 1F3FD 200D 2642                      ; minimally-qualified # 🧍🏽‍♂ man standing: medium skin tone
1F9CD 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🧍🏾‍♂️ man standing: medium-dark skin tone
1F9CD 1F3FE 200D 2642                      ; minimally-qualified # 🧍🏾‍♂ man standing: medium-dark skin tone
1F9CD 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🧍🏿‍♂️ man standing: dark skin tone
1F9CD 1F3FF 200D 2642                      ; minimally-qualified # 🧍🏿‍♂ man standing: dark skin tone
1F9CD 200D 2640 FE0F                       ; fully-qualified     # 🧍‍♀️ woman standing
1F9CD 200D 2640                            ; minimally-qualified # 🧍‍♀ woman standing
1F9CD 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🧍🏻‍♀️ woman standing: light skin tone
1F9CD 1F3FB 200D 2640                      ; minimally-qualified # 🧍🏻‍♀ woman standing: light skin tone
1F9CD 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🧍🏼‍♀️ woman standing: medium-light skin tone
1F9CD 1F3FC 200D 2640                      ; minimally-qualified # 🧍🏼‍♀ woman standing: medium-light skin tone
1F9CD 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🧍🏽‍♀️ woman standing: medium skin tone
1F9CD 1F3FD 200D 2640                      ; minimally-qualified # 🧍🏽‍♀ woman standing: medium skin tone
1F9CD 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🧍🏾‍♀️ woman standing: medium-dark skin tone
1F9CD 1F3FE 200D 2640                      ; minimally-qualified # 🧍🏾‍♀ woman standing: medium-dark skin tone
1F9CD 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🧍🏿‍♀️ woman standing: dark skin tone
1F9CD 1F3FF 200D 2640                      ; minimally-qualified # 🧍🏿‍♀ woman standing: dark skin tone
1F9CE                                      ; fully-qualified     # 🧎 person kneeling
1F9CE 1F3FB                                ; fully-qualified     # 🧎🏻 person kneeling: light skin tone
1F9CE 1F3FC                                ; fully-qualified     # 🧎🏼 person kneeling: medium-light skin tone
1F9CE 1F3FD                                ; fully-qualified     # 🧎🏽 person kneeling: medium skin tone
1F9CE 1F3FE                                ; fully-qualified     # 🧎🏾 person kneeling: medium-dark skin tone
1F9CE 1F3FF                                ; fully-qualified     # 🧎🏿 person kneeling: dark skin tone
1F9CE 200D 2642 FE0F                       ; fully-qualified     # 🧎‍♂️ man kneeling
1F9CE 200D 2642                            ; minimally-qualified # 🧎‍♂ man kneeling
1F9CE 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧎🏻‍♂️ man kneeling: light skin tone
1F9CE 1F3FB 200D 2642                      ; minimally-qualified # 🧎🏻‍♂ man kneeling: light skin tone
1F9CE 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🧎🏼‍♂️ man kneeling: medium-light skin tone
1F9CE 1F3FC 200D 2642                      ; minimally-qualified # 🧎🏼‍♂ man kneeling: medium-light skin tone
1F9CE 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🧎🏽‍♂️ man kneeling: medium skin tone
1F9CE 1F3FD 200D 2642                      ; minimally-qualified # 🧎🏽‍♂ man kneeling: medium skin tone
1F9CE 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🧎🏾‍♂️ man kneeling: medium-dark skin tone
1F9CE 1F3FE 200D 2642                      ; minimally-qualified # 🧎🏾‍♂ man kneeling: medium-dark skin tone
1F9CE 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🧎🏿‍♂️ man kneeling: dark skin tone
1F9CE 1F3FF 200D 2642                      ; minimally-qualified # 🧎🏿‍♂ man kneeling: dark skin tone
1F9CE 200D 2640 FE0F                       ; fully-qualified     # 🧎‍♀️ woman kneeling
1F9CE 200D 2640                            ; minimally-qualified # 🧎‍♀ woman kneeling
1F9CE 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🧎🏻‍♀️ woman kneeling: light skin tone
1F9CE 1F3FB 200D 2640                      ; minimally-qualified # 🧎🏻‍♀ woman kneeling: light skin tone
1F9CE 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🧎🏼‍♀️ woman kneeling: medium-light skin tone
1F9CE 1F3FC 200D 2640                      ; minimally-qualified # 🧎🏼‍♀ woman kneeling: medium-light skin tone
1F9CE 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🧎🏽‍♀️ woman kneeling: medium skin tone
1F9CE 1F3FD 200D 2640                      ; minimally-qualified # 🧎🏽‍♀ woman kneeling: medium skin tone
1F9CE 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🧎🏾‍♀️ woman kneeling: medium-dark skin tone
1F9CE 1F3FE 200D 2640                      ; minimally-qualified # 🧎🏾‍♀ woman kneeling: medium-dark skin tone
1F9CE 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🧎🏿‍♀️ woman kneeling: dark skin tone
1F9CE 1F3FF 200D 2640                      ; minimally-qualified # 🧎🏿‍♀ woman kneeling: dark skin tone
1F468 200D 1F9AF                           ; fully-qualified     # 👨‍🦯 man with probing cane
1F468 1F3FB 200D 1F9AF                     ; fully-qualified     # 👨🏻‍🦯 man with probing cane: light skin tone
1F468 1F3FC 200D 1F9AF                     ; fully-qualified     # 👨🏼‍🦯 man with probing cane: medium-light skin tone
1F468 1F3FD 200D 1F9AF                     ; fully-qualified     # 👨🏽‍🦯 man with probing cane: medium skin tone
1F468 1F3FE 200D 1F9AF                     ; fully-qualified     # 👨🏾‍🦯 man with probing cane: medium-dark skin tone
1F468 1F3FF 200D 1F9AF                     ; fully-qualified     # 👨🏿‍🦯 man with probing cane: dark skin tone
1F469 200D 1F9AF                           ; fully-qualified     # 👩‍🦯 woman with probing cane
1F469 1F3FB 200D 1F9AF                     ; fully-qualified     # 👩🏻‍🦯 woman with probing cane: light skin tone
1F469 1F3FC 200D 1F9AF                     ; fully-qualified     # 👩🏼‍🦯 woman with probing cane: medium-light skin tone
1F469 1F3FD 200D 1F9AF                     ; fully-qualified     # 👩🏽‍🦯 woman with probing cane: medium skin tone
1F469 1F3FE 200D 1F9AF                     ; fully-qualified     # 👩🏾‍🦯 woman with probing cane: medium-dark skin tone
1F469 1F3FF 200D 1F9AF                     ; fully-qualified     # 👩🏿‍🦯 woman with probing cane: dark skin tone
1F468 200D 1F9BC                           ; fully-qualified     # 👨‍🦼 man in motorized wheelchair
1F468 1F3FB 200D 1F9BC                     ; fully-qualified     # 👨🏻‍🦼 man in motorized wheelchair: light skin tone
1F468 1F3FC 200D 1F9BC                     ; fully-qualified     # 👨🏼‍🦼 man in motorized wheelchair: medium-light skin tone
1F468 1F3FD 200D 1F9BC                     ; fully-qualified     # 👨🏽‍🦼 man in motorized wheelchair: medium skin tone
1F468 1F3FE 200D 1F9BC                     ; fully-qualified     # 👨🏾‍🦼 man in motorized wheelchair: medium-dark skin tone
1F468 1F3FF 200D 1F9BC                     ; fully-qualified     # 👨🏿‍🦼 man in motorized wheelchair: dark skin tone
1F469 200D 1F9BC                           ; fully-qualified     # 👩‍🦼 woman in motorized wheelchair
1F469 1F3FB 200D 1F9BC                     ; fully-qualified     # 👩🏻‍🦼 woman in motorized wheelchair: light skin tone
1F469 1F3FC 200D 1F9BC                     ; fully-qualified     # 👩🏼‍🦼 woman in motorized wheelchair: medium-light skin tone
1F469 1F3FD 200D 1F9BC                     ; fully-qualified     # 👩🏽‍🦼 woman in motorized wheelchair: medium skin tone
1F469 1F3FE 200D 1F9BC                     ; fully-qualified     # 👩🏾‍🦼 woman in motorized wheelchair: medium-dark skin tone
1F469 1F3FF 200D 1F9BC                     ; fully-qualified     # 👩🏿‍🦼 woman in motorized wheelchair: dark skin tone
1F468 200D 1F9BD                           ; fully-qualified     # 👨‍🦽 man in manual wheelchair
1F468 1F3FB 200D 1F9BD                     ; fully-qualified     # 👨🏻‍🦽 man in manual wheelchair: light skin tone
1F468 1F3FC 200D 1F9BD                     ; fully-qualified     # 👨🏼‍🦽 man in manual wheelchair: medium-light skin tone
1F468 1F3FD 200D 1F9BD                     ; fully-qualified     # 👨🏽‍🦽 man in manual wheelchair: medium skin tone
1F468 1F3FE 200D 1F9BD                     ; fully-qualified     # 👨🏾‍🦽 man in manual wheelchair: medium-dark skin tone
1F468 1F3FF 200D 1F9BD                     ; fully-qualified     # 👨🏿‍🦽 man in manual wheelchair: dark skin tone
1F469 200D 1F9BD                           ; fully-qualified     # 👩‍🦽 woman in manual wheelchair
1F469 1F3FB 200D 1F9BD                     ; fully-qualified     # 👩🏻‍🦽 woman in manual wheelchair: light skin tone
```

----------------------------------------

TITLE: Enabling CakePHP 3 Plugin in Oh My Zsh Configuration
DESCRIPTION: This code snippet shows how to add the CakePHP 3 plugin to the plugins array in the zshrc file. This enables the plugin's functionality in Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/cakephp3/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... cakephp3)
```

----------------------------------------

TITLE: Defining Unicode Codepoints for Emoji Characters
DESCRIPTION: This snippet defines Unicode codepoints for various emoji characters. It includes professions like detectives, guards, and construction workers, as well as royalty such as princes and princesses. Each emoji is defined with different skin tone modifiers and gender variations.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_21

LANGUAGE: Unicode
CODE:
```
1F575 1F3FB 200D 2640                      ; minimally-qualified # 🕵🏻‍♀ woman detective: light skin tone
1F575 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🕵🏼‍♀️ woman detective: medium-light skin tone
1F575 1F3FC 200D 2640                      ; minimally-qualified # 🕵🏼‍♀ woman detective: medium-light skin tone
1F575 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🕵🏽‍♀️ woman detective: medium skin tone
1F575 1F3FD 200D 2640                      ; minimally-qualified # 🕵🏽‍♀ woman detective: medium skin tone
1F575 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🕵🏾‍♀️ woman detective: medium-dark skin tone
1F575 1F3FE 200D 2640                      ; minimally-qualified # 🕵🏾‍♀ woman detective: medium-dark skin tone
1F575 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🕵🏿‍♀️ woman detective: dark skin tone
1F575 1F3FF 200D 2640                      ; minimally-qualified # 🕵🏿‍♀ woman detective: dark skin tone
1F482                                      ; fully-qualified     # 💂 guard
1F482 1F3FB                                ; fully-qualified     # 💂🏻 guard: light skin tone
1F482 1F3FC                                ; fully-qualified     # 💂🏼 guard: medium-light skin tone
1F482 1F3FD                                ; fully-qualified     # 💂🏽 guard: medium skin tone
1F482 1F3FE                                ; fully-qualified     # 💂🏾 guard: medium-dark skin tone
1F482 1F3FF                                ; fully-qualified     # 💂🏿 guard: dark skin tone
1F482 200D 2642 FE0F                       ; fully-qualified     # 💂‍♂️ man guard
1F482 200D 2642                            ; minimally-qualified # 💂‍♂ man guard
1F482 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 💂🏻‍♂️ man guard: light skin tone
1F482 1F3FB 200D 2642                      ; minimally-qualified # 💂🏻‍♂ man guard: light skin tone
1F482 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 💂🏼‍♂️ man guard: medium-light skin tone
1F482 1F3FC 200D 2642                      ; minimally-qualified # 💂🏼‍♂ man guard: medium-light skin tone
1F482 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 💂🏽‍♂️ man guard: medium skin tone
1F482 1F3FD 200D 2642                      ; minimally-qualified # 💂🏽‍♂ man guard: medium skin tone
1F482 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 💂🏾‍♂️ man guard: medium-dark skin tone
1F482 1F3FE 200D 2642                      ; minimally-qualified # 💂🏾‍♂ man guard: medium-dark skin tone
1F482 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 💂🏿‍♂️ man guard: dark skin tone
1F482 1F3FF 200D 2642                      ; minimally-qualified # 💂🏿‍♂ man guard: dark skin tone
1F482 200D 2640 FE0F                       ; fully-qualified     # 💂‍♀️ woman guard
1F482 200D 2640                            ; minimally-qualified # 💂‍♀ woman guard
1F482 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 💂🏻‍♀️ woman guard: light skin tone
1F482 1F3FB 200D 2640                      ; minimally-qualified # 💂🏻‍♀ woman guard: light skin tone
1F482 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 💂🏼‍♀️ woman guard: medium-light skin tone
1F482 1F3FC 200D 2640                      ; minimally-qualified # 💂🏼‍♀ woman guard: medium-light skin tone
1F482 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 💂🏽‍♀️ woman guard: medium skin tone
1F482 1F3FD 200D 2640                      ; minimally-qualified # 💂🏽‍♀ woman guard: medium skin tone
1F482 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 💂🏾‍♀️ woman guard: medium-dark skin tone
1F482 1F3FE 200D 2640                      ; minimally-qualified # 💂🏾‍♀ woman guard: medium-dark skin tone
1F482 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 💂🏿‍♀️ woman guard: dark skin tone
1F482 1F3FF 200D 2640                      ; minimally-qualified # 💂🏿‍♀ woman guard: dark skin tone
1F477                                      ; fully-qualified     # 👷 construction worker
1F477 1F3FB                                ; fully-qualified     # 👷🏻 construction worker: light skin tone
1F477 1F3FC                                ; fully-qualified     # 👷🏼 construction worker: medium-light skin tone
1F477 1F3FD                                ; fully-qualified     # 👷🏽 construction worker: medium skin tone
1F477 1F3FE                                ; fully-qualified     # 👷🏾 construction worker: medium-dark skin tone
1F477 1F3FF                                ; fully-qualified     # 👷🏿 construction worker: dark skin tone
1F477 200D 2642 FE0F                       ; fully-qualified     # 👷‍♂️ man construction worker
1F477 200D 2642                            ; minimally-qualified # 👷‍♂ man construction worker
1F477 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 👷🏻‍♂️ man construction worker: light skin tone
1F477 1F3FB 200D 2642                      ; minimally-qualified # 👷🏻‍♂ man construction worker: light skin tone
1F477 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 👷🏼‍♂️ man construction worker: medium-light skin tone
1F477 1F3FC 200D 2642                      ; minimally-qualified # 👷🏼‍♂ man construction worker: medium-light skin tone
1F477 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 👷🏽‍♂️ man construction worker: medium skin tone
1F477 1F3FD 200D 2642                      ; minimally-qualified # 👷🏽‍♂ man construction worker: medium skin tone
1F477 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 👷🏾‍♂️ man construction worker: medium-dark skin tone
1F477 1F3FE 200D 2642                      ; minimally-qualified # 👷🏾‍♂ man construction worker: medium-dark skin tone
1F477 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 👷🏿‍♂️ man construction worker: dark skin tone
1F477 1F3FF 200D 2642                      ; minimally-qualified # 👷🏿‍♂ man construction worker: dark skin tone
1F477 200D 2640 FE0F                       ; fully-qualified     # 👷‍♀️ woman construction worker
1F477 200D 2640                            ; minimally-qualified # 👷‍♀ woman construction worker
1F477 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 👷🏻‍♀️ woman construction worker: light skin tone
1F477 1F3FB 200D 2640                      ; minimally-qualified # 👷🏻‍♀ woman construction worker: light skin tone
1F477 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 👷🏼‍♀️ woman construction worker: medium-light skin tone
1F477 1F3FC 200D 2640                      ; minimally-qualified # 👷🏼‍♀ woman construction worker: medium-light skin tone
1F477 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 👷🏽‍♀️ woman construction worker: medium skin tone
1F477 1F3FD 200D 2640                      ; minimally-qualified # 👷🏽‍♀ woman construction worker: medium skin tone
1F477 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 👷🏾‍♀️ woman construction worker: medium-dark skin tone
1F477 1F3FE 200D 2640                      ; minimally-qualified # 👷🏾‍♀ woman construction worker: medium-dark skin tone
1F477 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 👷🏿‍♀️ woman construction worker: dark skin tone
1F477 1F3FF 200D 2640                      ; minimally-qualified # 👷🏿‍♀ woman construction worker: dark skin tone
1F934                                      ; fully-qualified     # 🤴 prince
1F934 1F3FB                                ; fully-qualified     # 🤴🏻 prince: light skin tone
1F934 1F3FC                                ; fully-qualified     # 🤴🏼 prince: medium-light skin tone
1F934 1F3FD                                ; fully-qualified     # 🤴🏽 prince: medium skin tone
1F934 1F3FE                                ; fully-qualified     # 🤴🏾 prince: medium-dark skin tone
1F934 1F3FF                                ; fully-qualified     # 🤴🏿 prince: dark skin tone
1F478                                      ; fully-qualified     # 👸 princess
1F478 1F3FB                                ; fully-qualified     # 👸🏻 princess: light skin tone
1F478 1F3FC                                ; fully-qualified     # 👸🏼 princess: medium-light skin tone
1F478 1F3FD                                ; fully-qualified     # 👸🏽 princess: medium skin tone
1F478 1F3FE                                ; fully-qualified     # 👸🏾 princess: medium-dark skin tone
1F478 1F3FF                                ; fully-qualified     # 👸🏿 princess: dark skin tone
1F473                                      ; fully-qualified     # 👳 person wearing turban
1F473 1F3FB                                ; fully-qualified     # 👳🏻 person wearing turban: light skin tone
1F473 1F3FC                                ; fully-qualified     # 👳🏼 person wearing turban: medium-light skin tone
1F473 1F3FD                                ; fully-qualified     # 👳🏽 person wearing turban: medium skin tone
1F473 1F3FE                                ; fully-qualified     # 👳🏾 person wearing turban: medium-dark skin tone
1F473 1F3FF                                ; fully-qualified     # 👳🏿 person wearing turban: dark skin tone
1F473 200D 2642 FE0F                       ; fully-qualified     # 👳‍♂️ man wearing turban
1F473 200D 2642                            ; minimally-qualified # 👳‍♂ man wearing turban
1F473 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 👳🏻‍♂️ man wearing turban: light skin tone
1F473 1F3FB 200D 2642                      ; minimally-qualified # 👳🏻‍♂ man wearing turban: light skin tone
1F473 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 👳🏼‍♂️ man wearing turban: medium-light skin tone
1F473 1F3FC 200D 2642                      ; minimally-qualified # 👳🏼‍♂ man wearing turban: medium-light skin tone
1F473 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 👳🏽‍♂️ man wearing turban: medium skin tone
```

----------------------------------------

TITLE: Configuring JHBuild Plugin in Oh My Zsh - Zsh
DESCRIPTION: This code snippet demonstrates how to enable the JHBuild plugin within Oh My Zsh by adding 'jhbuild' to the plugins array in your .zshrc configuration file. This setup step is required to utilize the defined JHBuild aliases for command-line efficiency. The 'plugins' array should include 'jhbuild' alongside any other plugins used; no arguments or special formatting are required beyond appending the plugin name.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jhbuild/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... jhbuild)
```

----------------------------------------

TITLE: Directory History After CD Command
DESCRIPTION: Example showing how the cd command affects directory history state.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dirhistory/README.md#2025-04-22_snippet_5

LANGUAGE: sh
CODE:
```
➜  /u/bin typeset -pm dirhistory_\*
typeset -ax dirhistory_past=( /home/user /usr )
typeset -ax dirhistory_future=( /usr/bin )
```

----------------------------------------

TITLE: Starting Zsh with Minimal Configuration (Debugging)
DESCRIPTION: Commands (`zsh -f` or `zsh --no-rcs`) to launch the Zsh shell without sourcing any of its usual startup files (like `.zshrc`, `.zshenv`, `.zprofile`, `.zlogin`). This provides a minimal Zsh environment useful for debugging scripts like `kube-ps1` and isolating potential conflicts with user-specific configurations.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_16

LANGUAGE: zsh
CODE:
```
zsh -f
or
zsh --no-rcs
```

----------------------------------------

TITLE: Manual installation step 1: Cloning the wd repository
DESCRIPTION: Command to clone the wd repository from GitHub to a local directory for manual installation.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_9

LANGUAGE: zsh
CODE:
```
git clone git@github.com:mfaerevaag/wd.git ~/.local/wd --depth 1
```

----------------------------------------

TITLE: Documenting BBEdit Plugin Commands in Markdown
DESCRIPTION: This snippet describes the various commands available in the BBEdit plugin for Oh My Zsh. It includes usage instructions for the 'bb', 'bbpb', and 'bbd' commands, explaining how they interact with BBEdit.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bbedit/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
### Usage

 * If the `bb` command is called without an argument, launch BBEdit

 * If `bb` is passed a directory, cd to it and open it in BBEdit

 * If `bb` is passed a file, open it in BBEdit

 * If `bbpb` create a new BBEdit document with the contents of the clipboard

 * If `bbd` alias for BBEdit diff tool
```

----------------------------------------

TITLE: Adding Vagrant Plugin to Oh My Zsh Configuration
DESCRIPTION: Code snippet showing how to enable the Vagrant plugin in Oh My Zsh by adding it to the plugins array in your zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vagrant/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... vagrant)
```

----------------------------------------

TITLE: Configuring Nmap Plugin in Zshrc
DESCRIPTION: The snippet demonstrates how to add the Nmap plugin to the array of plugins in the zshrc configuration file for Oh My Zsh. This setup requires no external dependencies beyond having Oh My Zsh installed, and it adds a variety of Nmap-related aliases. To configure, add the 'nmap' entry to the plugins array. This setup allows for simplified invocation of Nmap scans through easy-to-remember aliases.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nmap/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... nmap)
```

----------------------------------------

TITLE: Adding Toolbox Prompt Information to RPROMPT
DESCRIPTION: This code demonstrates how to use the toolbox_prompt_info() function in the RPROMPT variable to display the toolbox indicator when inside a toolbox container.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/toolbox/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
RPROMPT='$(toolbox_prompt_info)'
```

----------------------------------------

TITLE: Unicode Emoji Mapping - Light and Video Equipment
DESCRIPTION: Unicode codepoint mappings for light sources and video equipment emoji symbols.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_50

LANGUAGE: txt
CODE:
```
# subgroup: light & video
1F3A5                                      ; fully-qualified     # 🎥 movie camera
1F39E FE0F                                 ; fully-qualified     # 🎞️ film frames
1F39E                                      ; unqualified         # 🎞 film frames
```

----------------------------------------

TITLE: Integrating vagrant_prompt_info with Command Prompt
DESCRIPTION: Demonstrates how to include Vagrant VM status information in either the main prompt or right prompt by adding the vagrant_prompt_info function to the appropriate prompt variable.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vagrant-prompt/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
PROMPT="$PROMPT"' $(vagrant_prompt_info)'
# or
RPROMPT='$(vagrant_prompt_info)'
```

----------------------------------------

TITLE: Using Official and Alias Emoji Names in Zsh
DESCRIPTION: Illustrates that the plugin supports both official Unicode names (e.g., 'grinning_face_with_smiling_eyes') and shorter aliases derived from Gemoji (e.g., 'smile') for the same emoji character (😄). Both commands access the `$emoji` variable and produce identical output.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_14

LANGUAGE: zsh
CODE:
```
echo $emoji[grinning_face_with_smiling_eyes]
echo $emoji[smile]
```

----------------------------------------

TITLE: Activating catimg Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This Zsh configuration snippet demonstrates how to enable the `catimg` plugin within an Oh My Zsh setup. By adding `catimg` to the `plugins` array located in the user's `.zshrc` file, the plugin's functionality, including the `catimg` command for displaying images, becomes available in the shell. Note that this plugin requires `magick convert` (from ImageMagick) to be installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/catimg/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... catimg)
```

----------------------------------------

TITLE: Configuring FirewallD Plugin in Zsh Script
DESCRIPTION: Defines the addition of FirewallD to the plugins array, enhancing command-line functionality with pre-defined aliases for common FirewallD operations. This integration is achieved by adding \"firewalld\" to the plugins list, simplifying the execution of firewall commands with shorthand notations and functions.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/firewalld/README.md#2025-04-22_snippet_0

LANGUAGE: Zsh
CODE:
```
plugins=(... firewalld)
```

----------------------------------------

TITLE: Installing wd using Home Manager for NixOS
DESCRIPTION: Configuration to add to home.nix file to install wd via Home Manager in NixOS using fetchFromGitHub.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_5

LANGUAGE: nix
CODE:
```
programs.zsh.plugins = [
  {
    name = "wd";
    src = pkgs.fetchFromGitHub {
      owner = "mfaerevaag";
      repo = "wd";
      rev = "v0.5.2";
      sha256 = "sha256-4yJ1qhqhNULbQmt6Z9G22gURfDLe30uV1ascbzqgdhg=";
    };
  }
];
```

----------------------------------------

TITLE: Demonstrating Specific Book Name Completion
DESCRIPTION: Shows another example of tab completion with a more specific partial book name 'ja'.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dnote/README.md#2025-04-22_snippet_5

LANGUAGE: zsh
CODE:
```
$ dnote edit ja(press <TAB> here)
```

----------------------------------------

TITLE: Installing wd from Arch Linux AUR
DESCRIPTION: Command to install the wd plugin from the Arch User Repository using an AUR helper like yay.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
yay -S zsh-plugin-wd-git
# or use any other AUR helper
```

----------------------------------------

TITLE: Configuring Gas Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This snippet demonstrates how to add the 'gas' plugin to your Oh My Zsh configuration by editing the plugins array in your .zshrc file. To activate autocompletion for the 'gas' command (a git author switcher tool), users must append 'gas' to their active plugin list. The plugins array should include any additional plugins you wish to enable alongside 'gas'.
Required: Oh My Zsh installation, the gas plugin present in the plugins directory, and appropriate permissions to update .zshrc. The snippet expects users to be editing their configuration in Zsh; no output is generated except the updated configuration.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gas/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... gas)
```

----------------------------------------

TITLE: Geometric Shapes Unicode Mapping
DESCRIPTION: Unicode mappings for geometric shape emoji including circles, squares, diamonds, and triangles of various colors and sizes.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_59

LANGUAGE: plaintext
CODE:
```
1F534                                      ; fully-qualified     # 🔴 red circle
1F7E0                                      ; fully-qualified     # 🟠 orange circle
1F7E1                                      ; fully-qualified     # 🟡 yellow circle
```

----------------------------------------

TITLE: Adding Ionic Plugin to Zsh
DESCRIPTION: This snippet demonstrates how to add the Ionic CLI plugin to the plugins array in a Zsh configuration file. This inclusion enables command completion and shorthand aliases for frequently used Ionic commands, enhancing the command line experience for developers working with the Ionic framework in Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ionic/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... ionic)
```

----------------------------------------

TITLE: Displaying a Random Emoji from a Group in Zsh
DESCRIPTION: Illustrates using the `random_emoji` function with an argument specifying an emoji group name (e.g., `fruits`, `animals`). This prints a random emoji belonging only to the specified group. Group definitions are stored in the `$emoji_groups` variable.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
$> random_emoji <group>
```

----------------------------------------

TITLE: Benchmarking Mercurial Branch Command - Mercurial - Console
DESCRIPTION: Demonstrates timing of the 'hg branch' command within a console environment. This output helps compare the performance difference between vanilla VCS commands and the branch plugin. Requires Mercurial to be installed and the benchmark to be run inside a Mercurial repository. Output includes user/system time and actual elapsed time.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/branch/README.md#2025-04-22_snippet_1

LANGUAGE: console
CODE:
```
$ time hg branch
0.11s user 0.14s system 70% cpu 0.355 total
```

----------------------------------------

TITLE: CDE Usage Example Commands
DESCRIPTION: Example commands demonstrating the setup for using the cde feature.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dirhistory/README.md#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
cd ~
cd /usr
cd share
cd doc

# <Alt + Left>
# <Alt + Left>
```

----------------------------------------

TITLE: Directory History After CDE Command
DESCRIPTION: Example showing how the cde command preserves directory history state.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dirhistory/README.md#2025-04-22_snippet_6

LANGUAGE: sh
CODE:
```
➜  /u/bin typeset -pm dirhistory_\*
typeset -ax dirhistory_past=( /home/user /usr /usr/bin )
typeset -ax dirhistory_future=( /usr/share/doc /usr/share )
```

----------------------------------------

TITLE: Installing Zsh-z with Antigen
DESCRIPTION: Command for installing Zsh-z using the Antigen plugin manager. This should be added to .zshrc before the 'antigen apply' line.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
antigen bundle agkozak/zsh-z
```

----------------------------------------

TITLE: Breaking Change Commit Message Example
DESCRIPTION: Complete example of a commit message introducing breaking changes, including the breaking change indicator and explanatory text in the commit body.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/CONTRIBUTING.md#2025-04-22_snippet_4

LANGUAGE: markdown
CODE:
```
style(agnoster)!: change dirty git repo glyph

BREAKING CHANGE: the glyph to indicate when a git repository is dirty has
changed from a Powerline character to a standard UTF-8 emoji. You can
change it back by setting `ZSH_THEME_DIRTY_GLYPH`.

Fixes #420

Co-authored-by: Username <email>
```

----------------------------------------

TITLE: Manual installation step 3: Installing manpage
DESCRIPTION: Commands to install the wd manpage into the system manpage directory and update the manpage database.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_11

LANGUAGE: zsh
CODE:
```
sudo install -m 644 ~/.local/wd/wd.1 /usr/share/man/man1/wd.1
sudo mandb /usr/share/man/man1
```

----------------------------------------

TITLE: Customizing Vagrant Prompt Appearance
DESCRIPTION: Shows the customization variables that can be set in .zshrc to control the appearance of the Vagrant status information in the prompt, including prefix, suffix, and symbols for different VM states.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vagrant-prompt/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
ZSH_THEME_VAGRANT_PROMPT_PREFIX="%{$fg_bold[blue]%}["
ZSH_THEME_VAGRANT_PROMPT_SUFFIX="%{$fg_bold[blue]%}]%{$reset_color%} "
ZSH_THEME_VAGRANT_PROMPT_RUNNING="%{$fg_no_bold[green]%}●"
ZSH_THEME_VAGRANT_PROMPT_POWEROFF="%{$fg_no_bold[red]%}●"
ZSH_THEME_VAGRANT_PROMPT_SUSPENDED="%{$fg_no_bold[yellow]%}●"
ZSH_THEME_VAGRANT_PROMPT_NOT_CREATED="%{$fg_no_bold[white]%}○"
```

----------------------------------------

TITLE: Configuring Pylint Plugin in Oh My Zsh - Zsh Shell
DESCRIPTION: This snippet demonstrates how to enable the Pylint plugin by adding 'pylint' to the plugins array in a .zshrc configuration file. This setup provides autocompletion and command aliases for Pylint within Zsh. To activate the changes, the user must reload or restart the shell session. No extra dependencies are required beyond Oh My Zsh and the Pylint Python package.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pylint/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... pylint)
```

----------------------------------------

TITLE: Creating a Device Configuration File for wakeonlan
DESCRIPTION: Shows the format for a device configuration file that should be placed in ~/.wakeonlan/. The file contains the MAC address and network broadcast address for the target device.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wakeonlan/README.md#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
00:11:22:33:44:55:66 192.168.0.255
```

----------------------------------------

TITLE: Unicode Country Flag Code Points
DESCRIPTION: Maps Unicode code point pairs to country flag emoji with fully-qualified status indicators. Each entry includes hexadecimal Unicode values and the corresponding country name.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_61

LANGUAGE: unicode
CODE:
```
1F1E6 1F1E8                                ; fully-qualified     # 🇦🇨 flag: Ascension Island
1F1E6 1F1E9                                ; fully-qualified     # 🇦🇩 flag: Andorra
1F1E6 1F1EA                                ; fully-qualified     # 🇦🇪 flag: United Arab Emirates
[...truncated for brevity...]
1F1EE 1F1F2                                ; fully-qualified     # 🇮🇲 flag: Isle of Man
1F1EE 1F1F3                                ; fully-qualified     # 🇮🇳 flag: India
```

----------------------------------------

TITLE: Enabling Qodana Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This Zsh code snippet shows how to activate the Qodana plugin by adding its name to the `plugins` array within the Oh My Zsh configuration file (`.zshrc`). This step is necessary to enable command-line completions for the JetBrains Qodana CLI. Requires Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/qodana/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... qodana)
```

----------------------------------------

TITLE: Using the open_lighthouse_ticket Alias (lho) (Console)
DESCRIPTION: Demonstrates using the `lho` alias (for `open_lighthouse_ticket`) to open Lighthouse ticket #23. The command reads the project URL from the required `.lighthouse-url` file in the current directory, appends the ticket number (23 in this case), prints a confirmation message, and opens the constructed URL in the default web browser.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lighthouse/README.md#2025-04-22_snippet_2

LANGUAGE: console
CODE:
```
$ lho 23
Opening ticket #23
# The browser goes to https://rails.lighthouseapp.com/projects/8994/tickets/23
```

----------------------------------------

TITLE: Adding Sigstore Plugin to Oh My Zsh Configuration
DESCRIPTION: Demonstrates how to enable the Sigstore plugin by adding it to the plugins array in the zshrc configuration file. This enables completion for Cosign, Sget, and Rekor CLI tools.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sigstore/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... sigstore)
```

----------------------------------------

TITLE: Defining Emotion-Related Emojis (Unicode)
DESCRIPTION: Lists Unicode code points, qualification status, and descriptions for emojis categorized under 'emotion'. Includes various heart symbols, symbols like 'anger', 'collision', 'dizzy', speech/thought bubbles, and others. Contains both fully-qualified and unqualified variants for some emojis. Each line follows the format: <Unicode sequence> ; <qualification> # <description>.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_5

LANGUAGE: plaintext
CODE:
```
# subgroup: emotion
1F48B                                      ; fully-qualified     # 💋 kiss mark
1F48C                                      ; fully-qualified     # 💌 love letter
1F498                                      ; fully-qualified     # 💘 heart with arrow
1F49D                                      ; fully-qualified     # 💝 heart with ribbon
1F496                                      ; fully-qualified     # 💖 sparkling heart
1F497                                      ; fully-qualified     # 💗 growing heart
1F493                                      ; fully-qualified     # 💓 beating heart
1F49E                                      ; fully-qualified     # 💞 revolving hearts
1F495                                      ; fully-qualified     # 💕 two hearts
1F49F                                      ; fully-qualified     # 💟 heart decoration
2763 FE0F                                  ; fully-qualified     # ❣️ heart exclamation
2763                                       ; unqualified         # ❣ heart exclamation
1F494                                      ; fully-qualified     # 💔 broken heart
2764 FE0F                                  ; fully-qualified     # ❤️ red heart
2764                                       ; unqualified         # ❤ red heart
1F9E1                                      ; fully-qualified     # 🧡 orange heart
1F49B                                      ; fully-qualified     # 💛 yellow heart
1F49A                                      ; fully-qualified     # 💚 green heart
1F499                                      ; fully-qualified     # 💙 blue heart
1F49C                                      ; fully-qualified     # 💜 purple heart
1F90E                                      ; fully-qualified     # 🤎 brown heart
1F5A4                                      ; fully-qualified     # 🖤 black heart
1F90D                                      ; fully-qualified     # 🤍 white heart
1F4AF                                      ; fully-qualified     # 💯 hundred points
1F4A2                                      ; fully-qualified     # 💢 anger symbol
1F4A5                                      ; fully-qualified     # 💥 collision
1F4AB                                      ; fully-qualified     # 💫 dizzy
1F4A6                                      ; fully-qualified     # 💦 sweat droplets
1F4A8                                      ; fully-qualified     # 💨 dashing away
1F573 FE0F                                 ; fully-qualified     # 🕳️ hole
1F573                                      ; unqualified         # 🕳 hole
1F4A3                                      ; fully-qualified     # 💣 bomb
1F4AC                                      ; fully-qualified     # 💬 speech balloon
1F441 FE0F 200D 1F5E8 FE0F                 ; fully-qualified     # 👁️‍🗨️ eye in speech bubble
1F441 200D 1F5E8 FE0F                      ; unqualified         # 👁‍🗨️ eye in speech bubble
1F441 FE0F 200D 1F5E8                      ; unqualified         # 👁️‍🗨 eye in speech bubble
1F441 200D 1F5E8                           ; unqualified         # 👁‍🗨 eye in speech bubble
1F5E8 FE0F                                 ; fully-qualified     # 🗨️ left speech bubble
1F5E8                                      ; unqualified         # 🗨 left speech bubble
1F5EF FE0F                                 ; fully-qualified     # 🗯️ right anger bubble
1F5EF                                      ; unqualified         # 🗯 right anger bubble
1F4AD                                      ; fully-qualified     # 💭 thought balloon
1F4A4                                      ; fully-qualified     # 💤 zzz
```

----------------------------------------

TITLE: Defining Unicode Emoji for Person Gesturing NO
DESCRIPTION: This snippet defines Unicode codepoints for the 'person gesturing NO' emoji, including variations for different skin tones and genders. It includes both fully-qualified and minimally-qualified versions of the emoji.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_14

LANGUAGE: Unicode
CODE:
```
1F645                                      ; fully-qualified     # 🙅 person gesturing NO
1F645 1F3FB                                ; fully-qualified     # 🙅🏻 person gesturing NO: light skin tone
1F645 1F3FC                                ; fully-qualified     # 🙅🏼 person gesturing NO: medium-light skin tone
1F645 1F3FD                                ; fully-qualified     # 🙅🏽 person gesturing NO: medium skin tone
1F645 1F3FE                                ; fully-qualified     # 🙅🏾 person gesturing NO: medium-dark skin tone
1F645 1F3FF                                ; fully-qualified     # 🙅🏿 person gesturing NO: dark skin tone
1F645 200D 2642 FE0F                       ; fully-qualified     # 🙅‍♂️ man gesturing NO
1F645 200D 2642                            ; minimally-qualified # 🙅‍♂ man gesturing NO
1F645 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🙅🏻‍♂️ man gesturing NO: light skin tone
1F645 1F3FB 200D 2642                      ; minimally-qualified # 🙅🏻‍♂ man gesturing NO: light skin tone
```

----------------------------------------

TITLE: Example Multi-plugin Style Commit Format
DESCRIPTION: Example of a commit message affecting multiple plugins or sections, showing that the scope can be omitted when changes are not specific to one section.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2

LANGUAGE: markdown
CODE:
```
style: fix inline declaration of arrays
```

----------------------------------------

TITLE: Result of Basic Dnote Command Completion
DESCRIPTION: Shows the result after tab completion is performed on a partial Dnote command.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dnote/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
$ dnote add
```

----------------------------------------

TITLE: Adding LXD Plugin to Oh My Zsh
DESCRIPTION: This snippet demonstrates how to add the LXD plugin to the plugins array in the Zsh configuration file. This setup enables command completions and aliases for LXC in Oh My Zsh. No external dependencies are required aside from having Oh My Zsh installed. To activate, insert 'lxd' into the plugins array within the zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lxd/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... lxd)
```

----------------------------------------

TITLE: Defining Country Flag Emojis Using Unicode
DESCRIPTION: This snippet shows the Unicode definition format for country flag emojis. Each line contains the Unicode code points for the flag, followed by a qualification status and a description of the flag.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_62

LANGUAGE: Unicode
CODE:
```
1F1EE 1F1F4                                ; fully-qualified     # 🇮🇴 flag: British Indian Ocean Territory
1F1EE 1F1F6                                ; fully-qualified     # 🇮🇶 flag: Iraq
1F1EE 1F1F7                                ; fully-qualified     # 🇮🇷 flag: Iran
1F1EE 1F1F8                                ; fully-qualified     # 🇮🇸 flag: Iceland
1F1EE 1F1F9                                ; fully-qualified     # 🇮🇹 flag: Italy
```

----------------------------------------

TITLE: Formatting Unicode Emoji Test Data - Unicode Emoji Specification - Plain Text
DESCRIPTION: This snippet presents the official data structure and format for Unicode emoji test data as specified for UTS #51 version 12.0. No dependencies are required, but users should be familiar with Unicode and text file manipulation. Key parameters include lists of Unicode code points, statuses (such as 'fully-qualified' or 'unqualified'), group/subgroup annotations as comments, and descriptive emoji names. Expected input is a structured text file following this convention, and the output is consistent reference data for emoji testing; it is not intended for programmatic parsing but rather as human-readable or reference data for further processing. Limitations include a lack of syntax for machine-checked integrity—parsing logic must be built separately.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_0

LANGUAGE: Plain Text
CODE:
```
# emoji-data.txt\n# (Originally emoji-test.txt)\n# (Retrieved from https://unicode.org/Public/emoji/12.0/emoji-test.txt)\n\n# Date: 2019-01-27, 15:43:01 GMT\n# \u00a9 2019 Unicode\u00ae, Inc.\n# Unicode and the Unicode Logo are registered trademarks of Unicode, Inc. in the U.S. and other countries.\n# For terms of use, see http://www.unicode.org/terms_of_use.html\n#\n# Emoji Keyboard/Display Test Data for UTS #51\n# Version: 12.0\n#\n# For documentation and usage, see http://www.unicode.org/reports/tr51\n#\n# This file provides data for testing which emoji forms should be in keyboards and which should also be displayed/processed.\n# Format: code points; status # emoji name\n#     Code points \u2014 list of one or more hex code points, separated by spaces\n#     Status\n#       component           \u2014 an Emoji_Component,\n#                             excluding Regional_Indicators, ASCII, and non-Emoji.\n#       fully-qualified     \u2014 a fully-qualified emoji (see ED-18 in UTS #51),\n#                             excluding Emoji_Component\n#       minimally-qualified \u2014 a minimally-qualified emoji (see ED-18a in UTS #51)\n#       unqualified         \u2014 a unqualified emoji (See ED-19 in UTS #51)\n# Notes:\n#   \u2022 This includes the emoji components that need emoji presentation (skin tone and hair)\n#     when isolated, but omits the components that need not have an emoji\n#     presentation when isolated.\n#   \u2022 The RGI set is covered by the listed fully-qualified emoji. \n#   \u2022 The listed minimally-qualified and unqualified cover all cases where an\n#     element of the RGI set is missing one or more emoji presentation selectors.\n#   \u2022 The file is in CLDR order, not codepoint order. This is recommended (but not required!) for keyboard palettes.\n#   \u2022 The groups and subgroups are illustrative. See the Emoji Order chart for more information.\n\n\n# group: Smileys & Emotion\n\n# subgroup: face-smiling\n1F600                                      ; fully-qualified     # \ud83d\ude00 grinning face\n1F603                                      ; fully-qualified     # \ud83d\ude03 grinning face with big eyes\n1F604                                      ; fully-qualified     # \ud83d\ude04 grinning face with smiling eyes\n1F601                                      ; fully-qualified     # \ud83d\ude01 beaming face with smiling eyes\n1F606                                      ; fully-qualified     # \ud83d\ude06 grinning squinting face\n1F605                                      ; fully-qualified     # \ud83d\ude05 grinning face with sweat\n1F923                                      ; fully-qualified     # \ud83e\udd23 rolling on the floor laughing\n1F602                                      ; fully-qualified     # \ud83d\ude02 face with tears of joy\n1F642                                      ; fully-qualified     # \ud83d\ude42 slightly smiling face\n1F643                                      ; fully-qualified     # \ud83d\ude43 upside-down face\n1F609                                      ; fully-qualified     # \ud83d\ude09 winking face\n1F60A                                      ; fully-qualified     # \ud83d\ude0a smiling face with smiling eyes\n1F607                                      ; fully-qualified     # \ud83d\ude07 smiling face with halo\n\n# subgroup: face-affection\n1F970                                      ; fully-qualified     # \ud83e\udd70 smiling face with hearts\n1F60D                                      ; fully-qualified     # \ud83d\ude0d smiling face with heart-eyes\n1F929                                      ; fully-qualified     # \ud83e\udd29 star-struck\n1F618                                      ; fully-qualified     # \ud83d\ude18 face blowing a kiss\n1F617                                      ; fully-qualified     # \ud83d\ude17 kissing face\n263A FE0F                                  ; fully-qualified     # \u263a\ufe0f smiling face\n263A                                       ; unqualified         # \u263a smiling face\n1F61A                                      ; fully-qualified     # \ud83d\ude1a kissing face with closed eyes\n1F619                                      ; fully-qualified     # \ud83d\ude19 kissing face with smiling eyes\n\n# subgroup: face-tongue\n1F60B                                      ; fully-qualified     # \ud83d\ude0b face savoring food\n1F61B                                      ; fully-qualified     # \ud83d\ude1b face with tongue\n1F61C                                      ; fully-qualified     # \ud83d\ude1c winking face with tongue\n1F92A                                      ; fully-qualified     # \ud83e\udd2a zany face\n1F61D                                      ; fully-qualified     # \ud83d\ude1d squinting face with tongue\n1F911                                      ; fully-qualified     # \ud83e\udd11 money-mouth face\n\n# subgroup: face-hand\n1F917                                      ; fully-qualified     # \ud83e\udd17 hugging face\n1F92D                                      ; fully-qualified     # \ud83e\udd2d face with hand over mouth\n1F92B                                      ; fully-qualified     # \ud83e\udd2b shushing face\n1F914                                      ; fully-qualified     # \ud83e\udd14 thinking face\n\n# subgroup: face-neutral-skeptical\n1F910                                      ; fully-qualified     # \ud83e\udd10 zipper-mouth face\n1F928                                      ; fully-qualified     # \ud83e\udd28 face with raised eyebrow\n1F610                                      ; fully-qualified     # \ud83d\ude10 neutral face\n1F611                                      ; fully-qualified     # \ud83d\ude11 expressionless face\n1F636                                      ; fully-qualified     # \ud83d\ude36 face without mouth\n1F60F                                      ; fully-qualified     # \ud83d\ude0f smirking face\n1F612                                      ; fully-qualified     # \ud83d\ude12 unamused face\n1F644                                      ; fully-qualified     # \ud83d\ude44 face with rolling eyes\n1F62C                                      ; fully-qualified     # \ud83d\ude2c grimacing face\n1F925                                      ; fully-qualified     # \ud83e\udd25 lying face\n\n# subgroup: face-sleepy\n1F60C                                      ; fully-qualified     # \ud83d\ude0c relieved face\n1F614                                      ; fully-qualified     # \ud83d\ude14 pensive face\n1F62A                                      ; fully-qualified     # \ud83d\ude2a sleepy face\n1F924                                      ; fully-qualified     # \ud83e\udd24 drooling face\n1F634                                      ; fully-qualified     # \ud83d\ude34 sleeping face\n\n# subgroup: face-unwell\n1F637                                      ; fully-qualified     # \ud83d\ude37 face with medical mask\n1F912                                      ; fully-qualified     # \ud83e\udd12 face with thermometer\n1F915                                      ; fully-qualified     # \ud83e\udd15 face with head-bandage\n1F922                                      ; fully-qualified     # \ud83e\udd22 nauseated face\n1F92E                                      ; fully-qualified     # \ud83e\udd2e face vomiting\n1F927                                      ; fully-qualified     # \ud83e\udd27 sneezing face\n1F975                                      ; fully-qualified     # \ud83e\udd75 hot face\n1F976                                      ; fully-qualified     # \ud83e\udd76 cold face\n1F974                                      ; fully-qualified     # \ud83e\udd74 woozy face\n1F635                                      ; fully-qualified     # \ud83d\ude35 dizzy face\n1F92F                                      ; fully-qualified     # \ud83e\udd2f exploding head\n\n# subgroup: face-hat\n1F920                                      ; fully-qualified     # \ud83e\udd20 cowboy hat face\n1F973                                      ; fully-qualified     # \ud83e\udd73 partying face\n\n# subgroup: face-glasses\n1F60E                                      ; fully-qualified     # \ud83d\ude0e smiling face with sunglasses\n1F913                                      ; fully-qualified     # \ud83e\udd13 nerd face\n1F9D0                                      ; fully-qualified     # \ud83e\udd50 face with monocle\n\n# subgroup: face-concerned\n1F615                                      ; fully-qualified     # \ud83d\ude15 confused face\n1F61F                                      ; fully-qualified     # \ud83d\ude1f worried face\n1F641                                      ; fully-qualified     # \ud83d\ude41 slightly frowning face\n2639 FE0F                                  ; fully-qualified     # \u2639\ufe0f frowning face\n2639                                       ; unqualified         # \u2639 frowning face\n1F62E                                      ; fully-qualified     # \ud83d\ude2e face with open mouth\n1F62F                                      ; fully-qualified     # \ud83d\ude2f hushed face\n1F632                                      ; fully-qualified     # \ud83d\ude32 astonished face\n1F633                                      ; fully-qualified     # \ud83d\ude33 flushed face\n1F97A                                      ; fully-qualified     # \ud83e\udd7a pleading face\n1F626                                      ; fully-qualified     # \ud83d\ude26 frowning face with open mouth\n1F627                                      ; fully-qualified     # \ud83d\ude27 anguished face\n1F628                                      ; fully-qualified     # \ud83d\ude28 fearful face\n1F630                                      ; fully-qualified     # \ud83d\ude30 anxious face with sweat\n1F625                                      ; fully-qualified     # \ud83d\ude25 sad but relieved face\n1F622                                      ; fully-qualified     # \ud83d\ude22 crying face\n1F62D                                      ; fully-qualified     # \ud83d\ude2d loudly crying face\n1F631                                      ; fully-qualified     # \ud83d\ude31 face screaming in fear\n1F616                                      ; fully-qualified     # \ud83d\ude16 confounded face\n1F623                                      ; fully-qualified     # \ud83d\ude23 persevering face\n1F61E                                      ; fully-qualified     # \ud83d\ude1e disappointed face\n1F613                                      ; fully-qualified     # \ud83d\ude13 downcast face with sweat\n1F629                                      ; fully-qualified     # \ud83d\ude29 weary face\n1F62B                                      ; fully-qualified     # \ud83d\ude2b tired face\n1F971                                      ; fully-qualified     # \ud83e\udd71 yawning face
```

----------------------------------------

TITLE: Systemd Unit Status Prompt Format Example
DESCRIPTION: This example shows the output format of the systemd_prompt_info function which can be used in the command prompt to display systemd unit statuses.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/systemd/README.md#2025-04-22_snippet_1

LANGUAGE: text
CODE:
```
<prefix><unit>:<active|notactive><suffix>
```

----------------------------------------

TITLE: Sourcing zsh-history-substring-search Script - Zsh - Shell
DESCRIPTION: Sources the primary zsh-history-substring-search plugin script into the current interactive Zsh session, making its functions available. Requires the script file to be present in the current directory or specified path. Input: script filename; Output: plugin functions loaded for use.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_11

LANGUAGE: shell
CODE:
```
source zsh-history-substring-search.zsh
```

----------------------------------------

TITLE: Querying Dash with Keywords
DESCRIPTION: This command queries the Dash application for a specific term or documentation related to a specified keyword, such as 'python:tuple'.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dash/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
dash python:tuple
```

----------------------------------------

TITLE: Adding Colorize Plugin to Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to enable the colorize plugin in the Oh My Zsh configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/colorize/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... colorize)
```

----------------------------------------

TITLE: Unicode Person Emoji Definitions
DESCRIPTION: Comprehensive list of Unicode codepoint combinations for human emojis with various skin tones and attributes. Each line contains the Unicode values and a description of the represented emoji, marked as either fully-qualified or minimally-qualified.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_10

LANGUAGE: unicode
CODE:
```
1F476                                      ; fully-qualified     # 👶 baby
1F476 1F3FB                                ; fully-qualified     # 👶🏻 baby: light skin tone
1F476 1F3FC                                ; fully-qualified     # 👶🏼 baby: medium-light skin tone
1F9D1                                      ; fully-qualified     # 🧑 person
1F468 200D 1F9B0                           ; fully-qualified     # 👨‍🦰 man: red hair
1F468 1F3FB 200D 1F9B0                     ; fully-qualified     # 👨🏻‍🦰 man: light skin tone, red hair
1F471 200D 2640 FE0F                       ; fully-qualified     # 👱‍♀️ woman: blond hair
1F471 200D 2640                            ; minimally-qualified # 👱‍♀ woman: blond hair
```

----------------------------------------

TITLE: Enabling the Hasura Plugin in Oh My Zsh Configuration (zsh)
DESCRIPTION: This snippet shows how to enable the Hasura plugin for Oh My Zsh. The `hasura` identifier needs to be added to the `plugins` array within the user's `~/.zshrc` file. This activates the Hasura CLI autocompletion features provided by the plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/hasura/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... hasura)
```

----------------------------------------

TITLE: Adding Ngrok to Zsh Plugins
DESCRIPTION: This snippet shows how to add the Ngrok plugin to your Zsh configuration file to enable command line completion for Ngrok CLI commands. The plugins must be listed in the plugins array of your .zshrc file, and this requires Oh My Zsh framework installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ngrok/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... ngrok)
```

----------------------------------------

TITLE: Creating a Shortcut with Fastfile
DESCRIPTION: This command generates a shortcut using the Fastfile plugin. Here `fastfile pjdb /code/project/backend/database` creates a shortcut 'pjdb' for the specified directory. This requires Fastfile plugin to be enabled in zsh configuration.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fastfile/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
$ fastfile pjdb /code/project/backend/database
```

----------------------------------------

TITLE: Setting Zsh-z Case Sensitivity - Shell
DESCRIPTION: This shell snippet modifies Zsh-z's search case sensitivity to 'ignore' mode, providing simple case-insensitive matching. Set this environment variable in .zshrc as needed. No dependencies beyond Zsh-z itself.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_21

LANGUAGE: shell
CODE:
```
ZSHZ_CASE=ignore
```

----------------------------------------

TITLE: Manual installation step 2: Adding wd function to shell configuration
DESCRIPTION: Function to add to .zshrc or .profile to load the wd plugin after manual installation.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_10

LANGUAGE: zsh
CODE:
```
wd() {
    . ~/.local/wd/wd.sh
}
```

----------------------------------------

TITLE: Installing the Yum Plugin in Oh My Zsh
DESCRIPTION: This code shows how to enable the Yum plugin by adding it to the plugins array in your zshrc configuration file. The plugin provides various aliases for Yum package management commands.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/yum/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... yum)
```

----------------------------------------

TITLE: Installing rand-quote Plugin in Oh My Zsh Configuration
DESCRIPTION: Instructions for adding the rand-quote plugin to the Oh My Zsh plugins array in the .zshrc configuration file. After adding the plugin, users need to restart zsh for changes to take effect.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rand-quote/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... rand-quote)
```

----------------------------------------

TITLE: Unicode Emoji Mapping - Clothing Items
DESCRIPTION: Unicode codepoint mappings for clothing and accessory related emoji symbols, including qualification status for each entry.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_44

LANGUAGE: txt
CODE:
```
# subgroup: clothing
1F453                                      ; fully-qualified     # 👓 glasses
1F576 FE0F                                 ; fully-qualified     # 🕶️ sunglasses
1F576                                      ; unqualified         # 🕶 sunglasses
```

----------------------------------------

TITLE: Using Profiles Plugin in Zshrc
DESCRIPTION: This snippet demonstrates how to include the 'profiles' plugin in the Zsh configuration file (zshrc) to enable hostname-based customization. The plugin must be added to the plugins array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/profiles/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
plugins=(... profiles)
```

----------------------------------------

TITLE: Configuring ohmyzsh Plugins Array for powify (Shell Script)
DESCRIPTION: This code snippet demonstrates how to enable the `powify` plugin within the ohmyzsh framework. It requires adding the string `powify` to the `plugins` array located in the user's `.zshrc` configuration file. The ellipsis (`...`) indicates that other plugins may already exist in the array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/powify/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
plugins=(... powify)
```

----------------------------------------

TITLE: Automatic installation of wd using curl
DESCRIPTION: Command to automatically download and install wd using curl. This method doesn't provide the manpage and runs remote code.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_7

LANGUAGE: zsh
CODE:
```
curl -L https://github.com/mfaerevaag/wd/raw/master/install.sh | sh
```

----------------------------------------

TITLE: Enabling Stripe Plugin in Oh My Zsh Configuration
DESCRIPTION: This code snippet demonstrates how to enable the Stripe plugin by adding it to the plugins array in your zshrc file. The plugin provides command-line completion for the Stripe CLI.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/stripe/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
plugins=(... stripe)
```

----------------------------------------

TITLE: Vim File Loading Examples
DESCRIPTION: Collection of example commands showing different ways to load files into Vim, including splits and post-load commands.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vim-interaction/README.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
> v /tmp/myfile.scala

> vvsp /tmp/myfile.scala
or
> v -b':vsp' /tmp/myfile.scala

> vhsp -aG /tmp/myfile.scala
or
> v -b':sp' -aG /tmp/myfile.scala

> v -a':1t$' /tmp/myfile.scala

> v *.txt
```

----------------------------------------

TITLE: Enabling Dash Plugin in Zsh
DESCRIPTION: Add the 'dash' plugin to the plugins array in your zshrc file to enable it. This step is necessary for querying the Dash application from the command line.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dash/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... dash)
```

----------------------------------------

TITLE: Result of Dnote Book Name Completion
DESCRIPTION: Shows the list of matching book names that appear when tab completion is performed on a partial book name.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dnote/README.md#2025-04-22_snippet_4

LANGUAGE: zsh
CODE:
```
$ dnote v j
javascript  job         js
```

----------------------------------------

TITLE: Enabling the Lighthouse Plugin in Oh My Zsh (Zsh)
DESCRIPTION: Adds the 'lighthouse' plugin to the Oh My Zsh plugins array within the `.zshrc` configuration file. This step is necessary to activate the plugin's commands and functionality within the Zsh shell.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lighthouse/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... lighthouse)
```

----------------------------------------

TITLE: Enabling the Ansible Plugin in Oh My Zsh Configuration
DESCRIPTION: This code snippet shows how to enable the Ansible plugin in your Oh My Zsh configuration by adding it to the plugins array in your zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ansible/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... ansible)
```

----------------------------------------

TITLE: Enabling the Laravel 4 Plugin in Oh My Zsh
DESCRIPTION: This Zsh configuration snippet demonstrates how to enable the 'laravel4' plugin within Oh My Zsh by adding its name to the `plugins` array in the user's `.zshrc` configuration file. This step is necessary to activate the aliases provided by the plugin, such as `la4`, `la4dump`, `la4cache`, and `la4routes`.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/laravel4/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... laravel4)
```

----------------------------------------

TITLE: Commit Message with Inline Code Formatting
DESCRIPTION: Example of using backticks in commit messages to format inline code that will be highlighted in the changelog.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/CONTRIBUTING.md#2025-04-22_snippet_6

LANGUAGE: markdown
CODE:
```
feat(shell-proxy): enable unexported `DEFAULT_PROXY` setting (#9774)
```

----------------------------------------

TITLE: Rebuilding zcompdump for completion
DESCRIPTION: Command to force a rebuild of zcompdump to ensure proper functioning of zsh completions for wd.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_13

LANGUAGE: zsh
CODE:
```
rm -f ~/.zcompdump; compinit
```

----------------------------------------

TITLE: Loading Supervisor Plugin in Oh My Zsh Configuration
DESCRIPTION: Configuration snippet showing how to enable the Supervisor plugin by adding it to the plugins array in the zshrc file. This enables tab completion for supervisord and supervisorctl commands.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/supervisor/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... supervisor)
```

----------------------------------------

TITLE: Listing Emojis from the 'people' Group in Zsh
DESCRIPTION: Demonstrates calling the `display_emoji` function to list emojis specifically belonging to the 'people' group, including their names.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_11

LANGUAGE: zsh
CODE:
```
$> display_emoji people
```

----------------------------------------

TITLE: Defining Arrow Emoji Unicode Characters
DESCRIPTION: This snippet defines Unicode characters for various arrow emojis, including directional arrows and special arrow buttons. It specifies both fully-qualified and unqualified versions of each emoji.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_51

LANGUAGE: Unicode
CODE:
```
# subgroup: arrow
2B06 FE0F                                  ; fully-qualified     # ⬆️ up arrow
2B06                                       ; unqualified         # ⬆ up arrow
2197 FE0F                                  ; fully-qualified     # ↗️ up-right arrow
2197                                       ; unqualified         # ↗ up-right arrow
27A1 FE0F                                  ; fully-qualified     # ➡️ right arrow
27A1                                       ; unqualified         # ➡ right arrow
2198 FE0F                                  ; fully-qualified     # ↘️ down-right arrow
2198                                       ; unqualified         # ↘ down-right arrow
2B07 FE0F                                  ; fully-qualified     # ⬇️ down arrow
2B07                                       ; unqualified         # ⬇ down arrow
2199 FE0F                                  ; fully-qualified     # ↙️ down-left arrow
2199                                       ; unqualified         # ↙ down-left arrow
2B05 FE0F                                  ; fully-qualified     # ⬅️ left arrow
2B05                                       ; unqualified         # ⬅ left arrow
2196 FE0F                                  ; fully-qualified     # ↖️ up-left arrow
2196                                       ; unqualified         # ↖ up-left arrow
2195 FE0F                                  ; fully-qualified     # ↕️ up-down arrow
2195                                       ; unqualified         # ↕ up-down arrow
2194 FE0F                                  ; fully-qualified     # ↔️ left-right arrow
2194                                       ; unqualified         # ↔ left-right arrow
21A9 FE0F                                  ; fully-qualified     # ↩️ right arrow curving left
21A9                                       ; unqualified         # ↩ right arrow curving left
21AA FE0F                                  ; fully-qualified     # ↪️ left arrow curving right
21AA                                       ; unqualified         # ↪ left arrow curving right
2934 FE0F                                  ; fully-qualified     # ⤴️ right arrow curving up
2934                                       ; unqualified         # ⤴ right arrow curving up
2935 FE0F                                  ; fully-qualified     # ⤵️ right arrow curving down
2935                                       ; unqualified         # ⤵ right arrow curving down
1F503                                      ; fully-qualified     # 🔃 clockwise vertical arrows
1F504                                      ; fully-qualified     # 🔄 counterclockwise arrows button
1F519                                      ; fully-qualified     # 🔙 BACK arrow
1F51A                                      ; fully-qualified     # 🔚 END arrow
1F51B                                      ; fully-qualified     # 🔛 ON! arrow
1F51C                                      ; fully-qualified     # 🔜 SOON arrow
1F51D                                      ; fully-qualified     # 🔝 TOP arrow
```

----------------------------------------

TITLE: Using alias-finder with git st alias
DESCRIPTION: Usage example showing how alias-finder suggests the 'gs' alias when running the 'git st' alias from .gitconfig.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/alias-finder/README.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
╭─tim@fox ~/repo/gitopolis ‹main› 
╰─$ git st
gs='git st'         # <=== shorter suggestion from alias-finder
## main...origin/main
```

----------------------------------------

TITLE: Configuring FluxCD Plugin in Oh My Zsh Initialization - zsh
DESCRIPTION: This snippet demonstrates how to enable the FluxCD plugin in Oh My Zsh by including 'fluxcd' in the plugins array within the user's .zshrc file. The configuration enables shell completions and related utilities for FluxCD, requiring Oh My Zsh to be installed and sourced by the user's shell. The plugins array accepts multiple plugins; '...' represents other active plugins. Users must reload or source their .zshrc for changes to take effect.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fluxcd/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... fluxcd)

```

----------------------------------------

TITLE: Starting Bash with Minimal Configuration (Debugging)
DESCRIPTION: Command to launch the Bash shell while explicitly preventing it from reading and executing the user's initialization files (like `.bashrc`, `.bash_profile`). This is useful for debugging shell scripts like `kube-ps1` in a clean environment, isolating issues caused by user customizations.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_15

LANGUAGE: bash
CODE:
```
bash --norc
```

----------------------------------------

TITLE: Listing files in a warp point target
DESCRIPTION: Command to list all files in the directory associated with the warp point 'foo'.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_23

LANGUAGE: zsh
CODE:
```
wd ls foo
```

----------------------------------------

TITLE: Querying Dash without Keywords
DESCRIPTION: This command queries the Dash application for information related to the specified term, such as 'golang'.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dash/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
dash golang
```

----------------------------------------

TITLE: Loading Zsh-z with Zcomet Plugin Manager - Shell
DESCRIPTION: This snippet loads the Zsh-z plugin via the zcomet plugin manager in the user's .zshrc. It must be placed after sourcing zcomet itself and before running compinit through zcomet. No additional parameters are required, and zcomet will clone, source, and activate the module as needed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_11

LANGUAGE: shell
CODE:
```
zcomet load agkozak/zsh-z
```

----------------------------------------

TITLE: Installing the conda-env plugin in Oh My Zsh
DESCRIPTION: Adding the conda-env plugin to the plugins array in your zshrc file enables the plugin functionality.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/conda-env/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
plugins=(... conda-env)
```

----------------------------------------

TITLE: Enabling the Compleat Plugin in Oh My Zsh Configuration
DESCRIPTION: Code snippet showing how to add the compleat plugin to the plugins array in the zshrc file. This enables the compleat functionality that loads completions from the compleat tool.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/compleat/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... compleat)
```

----------------------------------------

TITLE: Example .lighthouse-url File Content (Console)
DESCRIPTION: Shows an example `.lighthouse-url` file content using the `cat` command. This file must exist in the directory where the `lho` command is run and should contain the base URL of the specific Lighthouse project to interact with.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lighthouse/README.md#2025-04-22_snippet_1

LANGUAGE: console
CODE:
```
$ cat .lighthouse-url
https://rails.lighthouseapp.com/projects/8994
```

----------------------------------------

TITLE: Enabling the Podman Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This snippet demonstrates how to add the 'podman' plugin to the plugins array in the .zshrc configuration file for Oh My Zsh. The purpose is to activate Podman-specific auto-completion and aliases in the Zsh shell environment. The only dependency is Oh My Zsh with Podman support; after modifying this line, users should source their .zshrc or restart their shell for changes to take effect.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/podman/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... podman)
```

----------------------------------------

TITLE: Configuring Laravel 5 Zsh Plugin
DESCRIPTION: This snippet demonstrates how to add the Laravel 5 plugin to your list of active zsh plugins. The configuration is done by appending 'laravel5' to the plugins array in your zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/laravel5/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... laravel5)
```

----------------------------------------

TITLE: Example Output of the `drnew` Function (Text)
DESCRIPTION: This snippet shows the example terminal output after the `drnew` function successfully completes the installation of a new Drupal website. It displays the default administrative username (`admin`) and a randomly generated password, which are needed for the initial site login.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/drush/README.md#2025-04-22_snippet_1

LANGUAGE: text
CODE:
```
Installation complete.  User name: admin  User password: cf7t8yqNEm
```

----------------------------------------

TITLE: Executing Dash Commands
DESCRIPTION: This command opens and switches to the Dash application. Dash must be installed on macOS for this command to work.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dash/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
dash
```

----------------------------------------

TITLE: Enabling Bower Plugin in Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to add the Bower plugin to the plugins array in the zshrc file. This enables the Bower plugin functionality in Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bower/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... bower)
```

----------------------------------------

TITLE: Adding Rebar Plugin to Oh My Zsh Configuration
DESCRIPTION: Shows how to enable the Rebar plugin by adding it to the plugins array in the zshrc configuration file. This enables command completion support for the Rebar Erlang build tool.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rebar/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... rebar)
```

----------------------------------------

TITLE: Configuring Localstack Plugin in Oh My Zsh - zsh
DESCRIPTION: This snippet configures the Localstack plugin by specifying it within the plugins array in your .zshrc configuration file. Including 'localstack' enables CLI support for Localstack commands via the 'lsk' utility. There are no external dependencies beyond Oh My Zsh and the presence of the localstack plugin. The plugins array should be adjusted to include other desired plugins alongside 'localstack', and proper shell quoting should be used to avoid syntax errors. This setup is required to access Localstack CLI features in your zsh session.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/localstack/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... localstack)
```

----------------------------------------

TITLE: Example Output of the chuck_cow Command
DESCRIPTION: Displays a sample output of the chuck_cow command which shows a Chuck Norris fortune in a cowthink bubble with ASCII art.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/chucknorris/README.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
Last login: Fri Jan 30 23:12:26 on ttys001
 ______________________________________
( When Chuck Norris plays Monopoly, it )
( affects the actual world economy.    )
 --------------------------------------
        o   ^__^
         o  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
```

----------------------------------------

TITLE: Installing Rake Fast Plugin in Zsh
DESCRIPTION: Shows how to add the rake-fast plugin to the zsh configuration file (.zshrc). The plugin should be added to the plugins array in the configuration.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rake-fast/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... rake-fast)
```

----------------------------------------

TITLE: Installing Themes Plugin in Oh My Zsh Configuration
DESCRIPTION: Configuration snippet showing how to enable the themes plugin by adding it to the plugins array in the zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/themes/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
plugins=(... themes)
```

----------------------------------------

TITLE: Activating Capistrano Plugin in Zshrc
DESCRIPTION: This snippet demonstrates how to add the Capistrano plugin to the Zsh configuration by modifying the plugins array in the zshrc file. Execution relies on the Oh My Zsh framework being installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/capistrano/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
plugins=(... capistrano)
```

----------------------------------------

TITLE: Specifying LANDO_ZSH_CONFIG_FILE
DESCRIPTION: This code sets up the configuration file name that the plugin checks to confirm the presence of Lando. Changing this allows users to specify a different configuration if needed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lando/README.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
LANDO_ZSH_CONFIG_FILE=".lando.dev.yml"
```

----------------------------------------

TITLE: Configuring Plugins Array in oh-my-zsh Shell Script
DESCRIPTION: This snippet demonstrates how to enable the Mosh plugin in the oh-my-zsh environment by adding 'mosh' to the plugins array within the .zshrc configuration file. No external dependencies are required other than oh-my-zsh being installed, and the user must place 'mosh' among other desired plugins. On reload of the shell, this will activate SSH tab completion for Mosh hostnames. The only input is the plugins array, and after sourcing .zshrc, the plugin becomes active.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mosh/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
plugins=(... mosh)
```

----------------------------------------

TITLE: Adding Rclone Plugin to Oh My Zsh Configuration
DESCRIPTION: Shows how to enable the Rclone plugin by adding it to the plugins array in the zshrc configuration file. This enables command completion for Rclone commands in the terminal.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rclone/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... rclone)
```

----------------------------------------

TITLE: Alphanumeric Symbols Unicode Mapping
DESCRIPTION: Unicode mappings for alphanumeric-related emoji symbols including input buttons, blood type indicators, and Japanese service buttons.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_58

LANGUAGE: plaintext
CODE:
```
1F520                                      ; fully-qualified     # 🔠 input latin uppercase
1F521                                      ; fully-qualified     # 🔡 input latin lowercase
1F522                                      ; fully-qualified     # 🔢 input numbers
```

----------------------------------------

TITLE: Adding Skaffold Plugin to Oh My Zsh Configuration
DESCRIPTION: This code snippet shows how to enable the Skaffold autocompletion plugin in Oh My Zsh by adding it to the plugins array in the zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/skaffold/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... skaffold)
```

----------------------------------------

TITLE: Adding Operator SDK Plugin to Oh My Zsh Configuration (Shell)
DESCRIPTION: This shell configuration snippet shows how to add the `operator-sdk` plugin to the `plugins` array within an Oh My Zsh configuration file (`.zshrc`). This enables features provided by the plugin, such as autocompletions, for users working with the Operator SDK. The ellipsis (...) represents other plugins that might already be in the array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/operator-sdk/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
plugins=(... operator-sdk)
```

----------------------------------------

TITLE: Hotel Emoji Unicode Definitions
DESCRIPTION: Unicode code point definitions for hotel related emoji including bellhop bell and luggage
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_41

LANGUAGE: unicode
CODE:
```
1F6CE FE0F                                 ; fully-qualified     # 🛎️ bellhop bell
1F6CE                                      ; unqualified         # 🛎 bellhop bell
1F9F3                                      ; fully-qualified     # 🧳 luggage
```

----------------------------------------

TITLE: Loading Completion System for Zsh-z
DESCRIPTION: Command to load the Zsh completion system required for Zsh-z tab completion to work properly when not using a framework.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
autoload -U compinit; compinit
```

----------------------------------------

TITLE: Plugin and Theme Commit Scope Examples
DESCRIPTION: Correct and incorrect examples of scope naming conventions for plugin and theme changes in commit messages.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
- ✅ `fix(agnoster): commit subject`
- ❌ `fix(theme/agnoster): commit subject`
```

----------------------------------------

TITLE: Enabling the 'otp' Plugin in Oh My Zsh Configuration (Zsh)
DESCRIPTION: This Zsh code snippet demonstrates how to activate the 'otp' plugin within the Oh My Zsh framework. It involves modifying the 'plugins' array in the user's '.zshrc' configuration file to include 'otp', allowing Zsh to load the plugin upon startup.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/otp/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... otp)
```

----------------------------------------

TITLE: Adding lol Plugin to oh-my-zsh Configuration
DESCRIPTION: This snippet shows how to enable the 'lol' plugin by adding it to the plugins array within the zshrc file. The plugin provides amusing aliases for common shell commands. Ensure oh-my-zsh is installed and update the plugins array to include 'lol'. No specific parameters are required.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lol/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... lol)
```

----------------------------------------

TITLE: Adding Git-Flow AVH Plugin to Zsh Plugins Array
DESCRIPTION: This snippet demonstrates how to add the git-flow AVH Edition plugin to the plugins array in your .zshrc file to enable its functionality. Ensure that the git-flow tool is installed separately, and you're using Zsh's native git completion.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-flow-avh/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... git-flow-avh)
```

----------------------------------------

TITLE: Adding the Charm Plugin to Oh My Zsh
DESCRIPTION: Instructions for adding the Charm plugin to the plugins array in your zshrc file. This enables completion functionality for the Charm CLI in your Z shell environment.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/charm/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... charm)
```

----------------------------------------

TITLE: Configuring ForkLift Plugin in Oh My Zsh
DESCRIPTION: This snippet shows how to add the ForkLift plugin to the plugins array in the zshrc configuration file. The ForkLift plugin provides command-line functionalities to interact with the ForkLift FTP application on macOS. The main prerequisite is having the ForkLift application installed on the system. By adding 'forklift' to your Zsh plugins, you enable the use of its specific commands in the shell.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/forklift/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... forklift)
```

----------------------------------------

TITLE: Installing ACPI Tools on Debian/Ubuntu for Battery Plugin
DESCRIPTION: This command installs the necessary ACPI tools on Debian/Ubuntu systems to enable the battery plugin functionality. Users need to run this with sudo privileges.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/battery/README.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
sudo apt install acpi
```

----------------------------------------

TITLE: Enabling the SVN Plugin in Oh My Zsh
DESCRIPTION: This snippet shows how to add the SVN plugin to the plugins array in your .zshrc file to enable Subversion integration.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/svn/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... svn)
```

----------------------------------------

TITLE: Configuring pep8 Plugin in Oh My Zsh - Shell
DESCRIPTION: Shows how to enable the pep8 plugin by editing the plugins array in the .zshrc file. The pep8 plugin adds completions for the pep8 command, a tool for enforcing Python's PEP 8 style guide. To activate, the user should append \"pep8\" to the plugins=() array; no additional dependencies are required beyond having pep8 installed. This configuration makes the plugin available in the Zsh shell, enhancing productivity for Python developers.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pep8/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
plugins=(... pep8)
```

----------------------------------------

TITLE: Installing Colored Man Pages Plugin in Zsh
DESCRIPTION: Shows how to enable the colored-man-pages plugin in the Zsh configuration file
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/colored-man-pages/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... colored-man-pages)
```

----------------------------------------

TITLE: Enabling Zeus Plugin in Oh My Zsh Configuration
DESCRIPTION: This code snippet shows how to add the Zeus plugin to the plugins array in the zshrc file. This enables the Zeus plugin functionality in Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zeus/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... zeus)
```

----------------------------------------

TITLE: Usage Examples for Catspeak Aliases with oh-my-zsh in Shell
DESCRIPTION: This snippet provides usage examples for the 'lol' plugin aliases in the shell. Users can execute commands such as making a directory, terminating processes, and modifying file permissions using catspeak aliases. Expected input includes standard shell command parameters following each alias, resulting in the execution of the mapped command.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lol/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
# mkdir new-directory
icanhas new-directory

# killall firefox
nomnom firefox

# chmod u=r,go= some.file
nowai u=r,go= some.file

# ssh root@catserver.org
pwned root@catserver.org

# git commit -m "$(curl -s https://whatthecommit.com/index.txt)"
yolo
```

----------------------------------------

TITLE: Installing the Copypath Plugin in Oh My Zsh
DESCRIPTION: This snippet shows how to enable the copypath plugin by adding it to the plugins array in your zshrc configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/copypath/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... copypath)
```

----------------------------------------

TITLE: Enabling the pod Plugin in Oh My Zsh Configuration
DESCRIPTION: This configuration snippet demonstrates how to activate the `pod` plugin within Oh My Zsh by adding its name to the `plugins` array in the user's `.zshrc` file. Enabling this plugin provides command-line completion features for CocoaPods commands. Requires Oh My Zsh to be installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pod/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... pod)
```

----------------------------------------

TITLE: Configuring Azure Plugin in oh-my-zsh (zsh)
DESCRIPTION: This code snippet demonstrates how to include the Azure plugin in the plugins array within your .zshrc configuration to enable command completions and utilities for Azure CLI. No external dependencies besides oh-my-zsh are required for this line, but the plugin's full capabilities may require installing jq and the Azure CLI. The main parameter is 'azure', which enables all associated features upon shell startup. There are no direct inputs or outputs with this snippet; it is a configuration instruction.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/azure/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... azure)
```

----------------------------------------

TITLE: Enabling Roswell Plugin in Oh My Zsh Configuration
DESCRIPTION: This code snippet demonstrates how to add the Roswell plugin to the plugins array in the user's zshrc file. This enables Roswell completions and aliases in the Oh My Zsh environment.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ros/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... ros)
```

----------------------------------------

TITLE: Unicode Emoji Mapping - Phone Devices
DESCRIPTION: Unicode codepoint mappings for phone and communication device emoji symbols.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_48

LANGUAGE: txt
CODE:
```
# subgroup: phone
1F4F1                                      ; fully-qualified     # 📱 mobile phone
1F4F2                                      ; fully-qualified     # 📲 mobile phone with arrow
260E FE0F                                  ; fully-qualified     # ☎️ telephone
```

----------------------------------------

TITLE: Defining Cat-Face Emojis (Unicode)
DESCRIPTION: Lists Unicode code points, qualification status, and descriptions for emojis categorized under 'cat-face'. Includes various cat expressions like 'grinning cat', 'cat with tears of joy', and 'pouting cat'. Each line follows the format: <Unicode sequence> ; <qualification> # <description>.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_3

LANGUAGE: plaintext
CODE:
```
# subgroup: cat-face
1F63A                                      ; fully-qualified     # 😺 grinning cat
1F638                                      ; fully-qualified     # 😸 grinning cat with smiling eyes
1F639                                      ; fully-qualified     # 😹 cat with tears of joy
1F63B                                      ; fully-qualified     # 😻 smiling cat with heart-eyes
1F63C                                      ; fully-qualified     # 😼 cat with wry smile
1F63D                                      ; fully-qualified     # 😽 kissing cat
1F640                                      ; fully-qualified     # 🙀 weary cat
1F63F                                      ; fully-qualified     # 😿 crying cat
1F63E                                      ; fully-qualified     # 😾 pouting cat
```

----------------------------------------

TITLE: Displaying Hitchhiker Quotes in Console
DESCRIPTION: This snippet illustrates the output of the 'hitchhiker_cow' command, showing a quote from The Hitchhiker's Guide to the Galaxy formatted using the 'cowthink' program. Required dependencies include 'fortune,' 'strfile,' and 'cowthink.'
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/hitchhiker/README.md#2025-04-22_snippet_1

LANGUAGE: console
CODE:
```
$ hitchhiker_cow
 _______________________________________
( "OK, so ten out of ten for style, but )
( minus several million for good        )
( thinking, yeah? "                     )
 ---------------------------------------
        o   ^__^
         o  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
```

----------------------------------------

TITLE: Loading the DNF Plugin in Oh My Zsh
DESCRIPTION: This code shows how to enable the dnf plugin by adding it to the plugins array in your zshrc configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dnf/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... dnf)
```

----------------------------------------

TITLE: Unicode Mapping for Transportation Emoji
DESCRIPTION: Maps Unicode values to various transportation-related emoji, including ground vehicles, trains, cars, and water vessels. Includes both fully-qualified and unqualified versions with variation selectors.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_39

LANGUAGE: txt
CODE:
```
1F682                                      ; fully-qualified     # 🚂 locomotive
1F683                                      ; fully-qualified     # 🚃 railway car
1F684                                      ; fully-qualified     # 🚄 high-speed train
```

----------------------------------------

TITLE: Defining Face-Costume Emojis (Unicode)
DESCRIPTION: Lists Unicode code points, qualification status, and descriptions for emojis categorized under 'face-costume'. Includes emojis like 'pile of poo', 'clown face', 'ghost', and 'robot'. Each line follows the format: <Unicode sequence> ; <qualification> # <description>.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
# subgroup: face-costume
1F4A9                                      ; fully-qualified     # 💩 pile of poo
1F921                                      ; fully-qualified     # 🤡 clown face
1F479                                      ; fully-qualified     # 👹 ogre
1F47A                                      ; fully-qualified     # 👺 goblin
1F47B                                      ; fully-qualified     # 👻 ghost
1F47D                                      ; fully-qualified     # 👽 alien
1F47E                                      ; fully-qualified     # 👾 alien monster
1F916                                      ; fully-qualified     # 🤖 robot
```

----------------------------------------

TITLE: Configuring Percol Plugin in Zshrc - Zsh
DESCRIPTION: This snippet demonstrates how to enable the percol plugin by adding it to the plugins array in your .zshrc file. The percol plugin allows enhanced searching through your Zsh history and, if enabled, jump bookmarks via percol's fuzzy finder utility. Ensure you have percol installed via pip, and, if desired, the jump plugin enabled before percol. No additional parameters are required; simply append "percol" within the plugins array to activate functionality when you reload your Zsh configuration.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/percol/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... percol)
```

----------------------------------------

TITLE: Enabling Cursor Style Changes with VI_MODE_SET_CURSOR
DESCRIPTION: Controls whether the cursor style changes when switching between input modes. Set to true to enable this feature.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vi-mode/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
VI_MODE_SET_CURSOR=true
```

----------------------------------------

TITLE: Enabling Symfony6 Plugin in Oh My Zsh Configuration
DESCRIPTION: This code snippet demonstrates how to add the symfony6 plugin to the plugins array in your zshrc file. This enables native completion for Symfony 6.2 and above in your Oh My Zsh environment.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/symfony6/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
plugins=(... symfony6)
```

----------------------------------------

TITLE: Unicode Emoji Mapping - Computer Equipment
DESCRIPTION: Unicode codepoint mappings for computer and technology related emoji symbols.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_49

LANGUAGE: txt
CODE:
```
# subgroup: computer
1F50B                                      ; fully-qualified     # 🔋 battery
1F50C                                      ; fully-qualified     # 🔌 electric plug
1F4BB                                      ; fully-qualified     # 💻 laptop computer
```

----------------------------------------

TITLE: Unicode Emoji Mapping - Musical Instruments
DESCRIPTION: Unicode codepoint mappings for musical instrument emoji symbols including various instruments.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_47

LANGUAGE: txt
CODE:
```
# subgroup: musical-instrument
1F3B7                                      ; fully-qualified     # 🎷 saxophone
1F3B8                                      ; fully-qualified     # 🎸 guitar
1F3B9                                      ; fully-qualified     # 🎹 musical keyboard
```

----------------------------------------

TITLE: Example kube-ps1 Output When Binary is Missing
DESCRIPTION: Displays the default prompt structure shown by `kube-ps1` when the configured Kubernetes command-line tool (`kubectl` or `oc`, specified by `KUBE_PS1_BINARY`) cannot be found in the system's PATH. `<symbol>` represents the configured or default symbol.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_6

LANGUAGE: text
CODE:
```
(<symbol>|BINARY-N/A:N/A)
```

----------------------------------------

TITLE: Adding istioctl to Oh My Zsh Plugins (Shell)
DESCRIPTION: This shell snippet shows how to enable the `istioctl` Oh My Zsh plugin by adding its name to the `plugins` array within the user's `.zshrc` configuration file. This makes `istioctl` related aliases and completions available in the Zsh shell. Ellipsis (...) indicates potentially existing plugins.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/istioctl/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
plugins=(... istioctl)
```

----------------------------------------

TITLE: Defining Unicode Emoji for Person Gesturing OK
DESCRIPTION: This snippet defines Unicode codepoints for the 'person gesturing OK' emoji, including variations for different skin tones. It shows the beginning of the definition set for this emoji group.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_15

LANGUAGE: Unicode
CODE:
```
1F646                                      ; fully-qualified     # 🙆 person gesturing OK
1F646 1F3FB                                ; fully-qualified     # 🙆🏻 person gesturing OK: light skin tone
1F646 1F3FC                                ; fully-qualified     # 🙆🏼 person gesturing OK: medium-light skin tone
1F646 1F3FD                                ; fully-qualified     # 🙆🏽 person gesturing OK: medium skin tone
```

----------------------------------------

TITLE: Using 'qrsvg' Alias for SVG QR Code Generation (Shell)
DESCRIPTION: Invokes the `qrsvg` alias with the desired text (replace `[text]` with actual content). This alias executes `curl -d "text" qrcode.show -H "Accept: image/svg+xml"`, sending the text to the qrcode.show service via POST and specifically requesting an SVG format QR code using the Accept HTTP header. The raw SVG content is outputted to standard output. Requires the `curl` utility.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/qrcode/README.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
qrsvg  [text]
```

----------------------------------------

TITLE: Enabling the ng Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This Zsh configuration snippet demonstrates how to activate the `ng` plugin within Oh My Zsh to enable command-line autocompletion for the Angular CLI (`ng`). Add `ng` to the `plugins` array in your `~/.zshrc` file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ng/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... ng)
```

----------------------------------------

TITLE: Adding JRuby Plugin to oh-my-zsh Plugins Array - Zsh
DESCRIPTION: This snippet demonstrates how to enable the JRuby plugin by adding 'jruby' to the 'plugins' array in your .zshrc configuration file for oh-my-zsh. Prerequisites include an existing oh-my-zsh installation and JRuby available in the user\'s $PATH. The key parameter is the plugin name within the array, which activates predefined aliases. The output is extended shell functionality for JRuby via new command aliases; users must reload their shell configuration after editing.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jruby/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... jruby)
```

----------------------------------------

TITLE: Defining Unicode Sequences for Climbing Person Emoji
DESCRIPTION: Unicode code point sequences that define climbing person emoji with various gender and skin tone modifiers. Each entry includes hexadecimal code points and qualifiers, followed by the rendered emoji and its description.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_27

LANGUAGE: unicode
CODE:
```
1F9D7 200D 2642 FE0F                       ; fully-qualified     # 🧗‍♂️ man climbing
1F9D7 200D 2642                            ; minimally-qualified # 🧗‍♂ man climbing
1F9D7 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧗🏻‍♂️ man climbing: light skin tone
1F9D7 1F3FB 200D 2642                      ; minimally-qualified # 🧗🏻‍♂ man climbing: light skin tone
1F9D7 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🧗🏼‍♂️ man climbing: medium-light skin tone
1F9D7 1F3FC 200D 2642                      ; minimally-qualified # 🧗🏼‍♂ man climbing: medium-light skin tone
1F9D7 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🧗🏽‍♂️ man climbing: medium skin tone
1F9D7 1F3FD 200D 2642                      ; minimally-qualified # 🧗🏽‍♂ man climbing: medium skin tone
1F9D7 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🧗🏾‍♂️ man climbing: medium-dark skin tone
1F9D7 1F3FE 200D 2642                      ; minimally-qualified # 🧗🏾‍♂ man climbing: medium-dark skin tone
1F9D7 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🧗🏿‍♂️ man climbing: dark skin tone
1F9D7 1F3FF 200D 2642                      ; minimally-qualified # 🧗🏿‍♂ man climbing: dark skin tone
1F9D7 200D 2640 FE0F                       ; fully-qualified     # 🧗‍♀️ woman climbing
1F9D7 200D 2640                            ; minimally-qualified # 🧗‍♀ woman climbing
1F9D7 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🧗🏻‍♀️ woman climbing: light skin tone
1F9D7 1F3FB 200D 2640                      ; minimally-qualified # 🧗🏻‍♀ woman climbing: light skin tone
1F9D7 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🧗🏼‍♀️ woman climbing: medium-light skin tone
1F9D7 1F3FC 200D 2640                      ; minimally-qualified # 🧗🏼‍♀ woman climbing: medium-light skin tone
1F9D7 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🧗🏽‍♀️ woman climbing: medium skin tone
1F9D7 1F3FD 200D 2640                      ; minimally-qualified # 🧗🏽‍♀ woman climbing: medium skin tone
1F9D7 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🧗🏾‍♀️ woman climbing: medium-dark skin tone
1F9D7 1F3FE 200D 2640                      ; minimally-qualified # 🧗🏾‍♀ woman climbing: medium-dark skin tone
1F9D7 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🧗🏿‍♀️ woman climbing: dark skin tone
1F9D7 1F3FF 200D 2640                      ; minimally-qualified # 🧗🏿‍♀ woman climbing: dark skin tone
```

----------------------------------------

TITLE: Zgen Refresh and Shell Restart - Shell
DESCRIPTION: These commands refresh the zgen plugin manager's state and re-initialize the shell, updating loaded plugins. Must be run after modifying the .zshrc to include or reorder plugins for changes to take effect.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_13

LANGUAGE: shell
CODE:
```
zgen reset
zsh
```

----------------------------------------

TITLE: Enabling Sprunge Plugin in Oh My Zsh Configuration
DESCRIPTION: Instructions for adding the Sprunge plugin to the Oh My Zsh plugins list in the user's .zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sprunge/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... sprunge)
```

----------------------------------------

TITLE: Unicode Emoji Code Points for Human Gestures
DESCRIPTION: Defines Unicode code points for emoji sequences representing human gestures with various skin tones and gender modifiers. Includes both fully-qualified and minimally-qualified sequences.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_16

LANGUAGE: unicode
CODE:
```
1F646 1F3FE                                ; fully-qualified     # 🙆🏾 person gesturing OK: medium-dark skin tone
1F646 1F3FF                                ; fully-qualified     # 🙆🏿 person gesturing OK: dark skin tone
1F646 200D 2642 FE0F                       ; fully-qualified     # 🙆‍♂️ man gesturing OK
1F646 200D 2642                            ; minimally-qualified # 🙆‍♂ man gesturing OK
```

----------------------------------------

TITLE: Unicode Codepoint Definitions for Family Emoji
DESCRIPTION: Defines Unicode sequences for emoji representing people holding hands and kissing with various skin tone combinations. Each line contains the Unicode codepoints and a description of the resulting emoji.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_31

LANGUAGE: unicode
CODE:
```
1F9D1 200D 1F91D 200D 1F9D1                ; fully-qualified     # 🧑‍🤝‍🧑 people holding hands
1F9D1 1F3FB 200D 1F91D 200D 1F9D1 1F3FB    ; fully-qualified     # 🧑🏻‍🤝‍🧑🏻 people holding hands: light skin tone
1F9D1 1F3FC 200D 1F91D 200D 1F9D1 1F3FB    ; fully-qualified     # 🧑🏼‍🤝‍🧑🏻 people holding hands: medium-light skin tone, light skin tone
# [Additional lines omitted for brevity]
```

----------------------------------------

TITLE: Adding Git Extras Plugin to Zsh Configuration
DESCRIPTION: This snippet shows how to add the git-extras plugin to the plugins list in the zsh configuration file, allowing Zsh to augment git command completions with those provided by git-extras. Ensure git-extras is installed before enabling this plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-extras/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... git-extras)
```

----------------------------------------

TITLE: Underlying Command for SVG QR Code Generation (Shell)
DESCRIPTION: The actual `curl` command executed by the `qrsvg` alias. It sends the provided 'text' as POST data (`-d "text"`) to the `qrcode.show` service. Crucially, it includes an HTTP header (`-H "Accept: image/svg+xml"`) to specify that the desired response format is Scalable Vector Graphics (SVG). The service returns the QR code as SVG data.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/qrcode/README.md#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
curl -d "text" qrcode.show -H "Accept: image/svg+xml"
```

----------------------------------------

TITLE: Enabling URLTools Plugin in Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to add the URLTools plugin to the plugins array in the Oh My Zsh configuration file (~/.zshrc). This enables the URL encoding and decoding functionality provided by the plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/urltools/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... urltools)
```

----------------------------------------

TITLE: Installing the Singlechar Plugin in Oh My Zsh
DESCRIPTION: This code snippet demonstrates how to add the Singlechar plugin to the Oh My Zsh configuration by adding it to the plugins array in the zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/singlechar/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... singlechar)
```

----------------------------------------

TITLE: Defining Unicode Codepoints for Skin Tones and Hair Styles
DESCRIPTION: This snippet defines Unicode codepoints for emoji components representing different skin tones and hair styles. These are used as modifiers for other emojis to represent diversity.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_35

LANGUAGE: Unicode
CODE:
```
# subgroup: skin-tone
1F3FB                                      ; component           # 🏻 light skin tone
1F3FC                                      ; component           # 🏼 medium-light skin tone
1F3FD                                      ; component           # 🏽 medium skin tone
1F3FE                                      ; component           # 🏾 medium-dark skin tone
1F3FF                                      ; component           # 🏿 dark skin tone

# subgroup: hair-style
1F9B0                                      ; component           # 🦰 red hair
1F9B1                                      ; component           # 🦱 curly hair
1F9B3                                      ; component           # 🦳 white hair
1F9B2                                      ; component           # 🦲 bald
```

----------------------------------------

TITLE: Defining Unicode Codepoints for Relationship Emojis
DESCRIPTION: This snippet defines Unicode codepoints for emojis representing various types of relationships, including kisses and couples with heart. It specifies both fully-qualified and minimally-qualified versions.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_32

LANGUAGE: Unicode
CODE:
```
1F469 200D 2764 200D 1F48B 200D 1F468      ; minimally-qualified # 👩‍❤‍💋‍👨 kiss: woman, man
1F468 200D 2764 FE0F 200D 1F48B 200D 1F468 ; fully-qualified     # 👨‍❤️‍💋‍👨 kiss: man, man
1F468 200D 2764 200D 1F48B 200D 1F468      ; minimally-qualified # 👨‍❤‍💋‍👨 kiss: man, man
1F469 200D 2764 FE0F 200D 1F48B 200D 1F469 ; fully-qualified     # 👩‍❤️‍💋‍👩 kiss: woman, woman
1F469 200D 2764 200D 1F48B 200D 1F469      ; minimally-qualified # 👩‍❤‍💋‍👩 kiss: woman, woman
1F491                                      ; fully-qualified     # 💑 couple with heart
1F469 200D 2764 FE0F 200D 1F468            ; fully-qualified     # 👩‍❤️‍👨 couple with heart: woman, man
1F469 200D 2764 200D 1F468                 ; minimally-qualified # 👩‍❤‍👨 couple with heart: woman, man
1F468 200D 2764 FE0F 200D 1F468            ; fully-qualified     # 👨‍❤️‍👨 couple with heart: man, man
1F468 200D 2764 200D 1F468                 ; minimally-qualified # 👨‍❤‍👨 couple with heart: man, man
1F469 200D 2764 FE0F 200D 1F469            ; fully-qualified     # 👩‍❤️‍👩 couple with heart: woman, woman
1F469 200D 2764 200D 1F469                 ; minimally-qualified # 👩‍❤‍👩 couple with heart: woman, woman
```

----------------------------------------

TITLE: Installing rbfu Plugin in Oh My Zsh Configuration
DESCRIPTION: Shows how to enable the rbfu plugin by adding it to the plugins array in the zshrc configuration file. Note that this plugin is deprecated and should not be used.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rbfu/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... rbfu)
```

----------------------------------------

TITLE: Configuring the SDK plugin in Oh My Zsh
DESCRIPTION: This snippet shows how to enable the SDK plugin by adding it to the plugins array in your zshrc file. The plugin provides autocompletion for all SDKMAN commands.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sdk/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... sdk)
```

----------------------------------------

TITLE: Unicode Emoji Mapping - Sound Equipment
DESCRIPTION: Unicode codepoint mappings for sound-related emoji symbols including speakers and audio devices.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_45

LANGUAGE: txt
CODE:
```
# subgroup: sound
1F507                                      ; fully-qualified     # 🔇 muted speaker
1F508                                      ; fully-qualified     # 🔈 speaker low volume
1F509                                      ; fully-qualified     # 🔉 speaker medium volume
```

----------------------------------------

TITLE: Other Symbol Unicode Definitions
DESCRIPTION: Unicode codepoint definitions for various symbols including medical symbols, mathematical operators, and special characters. Each symbol is defined with both fully-qualified (with FE0F variant selector) and unqualified versions where applicable.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_56

LANGUAGE: unicode
CODE:
```
2695 FE0F                                  ; fully-qualified     # ⚕️ medical symbol
2695                                       ; unqualified         # ⚕ medical symbol
267E FE0F                                  ; fully-qualified     # ♾️ infinity
267E                                       ; unqualified         # ♾ infinity
267B FE0F                                  ; fully-qualified     # ♻️ recycling symbol
```

----------------------------------------

TITLE: Adding Thor Plugin to Oh My Zsh Configuration
DESCRIPTION: This code snippet shows how to enable the Thor plugin in the Oh My Zsh configuration file (zshrc). It demonstrates adding 'thor' to the plugins array.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/thor/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... thor)
```

----------------------------------------

TITLE: Adding ZNT Plugin to Oh My Zsh Configuration (Zsh)
DESCRIPTION: This snippet shows how to enable the Zsh Navigation Tools plugin by adding `zsh-navigation-tools` to the `plugins` array within the `.zshrc` file for Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... zsh-navigation-tools)
```

----------------------------------------

TITLE: Automatic installation of wd using wget
DESCRIPTION: Command to automatically download and install wd using wget. This method doesn't provide the manpage and runs remote code.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_8

LANGUAGE: zsh
CODE:
```
wget --no-check-certificate https://github.com/mfaerevaag/wd/raw/master/install.sh -O - | sh
```

----------------------------------------

TITLE: Defining Unicode Code Points for Person-Activity Emoji Subgroup
DESCRIPTION: A comprehensive list of Unicode code points for emoji representing people engaged in various activities. The file includes fully-qualified and minimally-qualified variants with different skin tones and gender modifiers for each base emoji.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_24

LANGUAGE: unicode
CODE:
```
# subgroup: person-activity
1F486                                      ; fully-qualified     # 💆 person getting massage
1F486 1F3FB                                ; fully-qualified     # 💆🏻 person getting massage: light skin tone
1F486 1F3FC                                ; fully-qualified     # 💆🏼 person getting massage: medium-light skin tone
1F486 1F3FD                                ; fully-qualified     # 💆🏽 person getting massage: medium skin tone
1F486 1F3FE                                ; fully-qualified     # 💆🏾 person getting massage: medium-dark skin tone
1F486 1F3FF                                ; fully-qualified     # 💆🏿 person getting massage: dark skin tone
1F486 200D 2642 FE0F                       ; fully-qualified     # 💆‍♂️ man getting massage
1F486 200D 2642                            ; minimally-qualified # 💆‍♂ man getting massage
1F486 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 💆🏻‍♂️ man getting massage: light skin tone
1F486 1F3FB 200D 2642                      ; minimally-qualified # 💆🏻‍♂ man getting massage: light skin tone
1F486 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 💆🏼‍♂️ man getting massage: medium-light skin tone
1F486 1F3FC 200D 2642                      ; minimally-qualified # 💆🏼‍♂ man getting massage: medium-light skin tone
1F486 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 💆🏽‍♂️ man getting massage: medium skin tone
1F486 1F3FD 200D 2642                      ; minimally-qualified # 💆🏽‍♂ man getting massage: medium skin tone
1F486 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 💆🏾‍♂️ man getting massage: medium-dark skin tone
1F486 1F3FE 200D 2642                      ; minimally-qualified # 💆🏾‍♂ man getting massage: medium-dark skin tone
1F486 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 💆🏿‍♂️ man getting massage: dark skin tone
1F486 1F3FF 200D 2642                      ; minimally-qualified # 💆🏿‍♂ man getting massage: dark skin tone
1F486 200D 2640 FE0F                       ; fully-qualified     # 💆‍♀️ woman getting massage
1F486 200D 2640                            ; minimally-qualified # 💆‍♀ woman getting massage
1F486 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 💆🏻‍♀️ woman getting massage: light skin tone
1F486 1F3FB 200D 2640                      ; minimally-qualified # 💆🏻‍♀ woman getting massage: light skin tone
1F486 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 💆🏼‍♀️ woman getting massage: medium-light skin tone
1F486 1F3FC 200D 2640                      ; minimally-qualified # 💆🏼‍♀ woman getting massage: medium-light skin tone
1F486 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 💆🏽‍♀️ woman getting massage: medium skin tone
1F486 1F3FD 200D 2640                      ; minimally-qualified # 💆🏽‍♀ woman getting massage: medium skin tone
1F486 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 💆🏾‍♀️ woman getting massage: medium-dark skin tone
1F486 1F3FE 200D 2640                      ; minimally-qualified # 💆🏾‍♀ woman getting massage: medium-dark skin tone
1F486 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 💆🏿‍♀️ woman getting massage: dark skin tone
1F486 1F3FF 200D 2640                      ; minimally-qualified # 💆🏿‍♀ woman getting massage: dark skin tone
1F487                                      ; fully-qualified     # 💇 person getting haircut
1F487 1F3FB                                ; fully-qualified     # 💇🏻 person getting haircut: light skin tone
1F487 1F3FC                                ; fully-qualified     # 💇🏼 person getting haircut: medium-light skin tone
1F487 1F3FD                                ; fully-qualified     # 💇🏽 person getting haircut: medium skin tone
1F487 1F3FE                                ; fully-qualified     # 💇🏾 person getting haircut: medium-dark skin tone
1F487 1F3FF                                ; fully-qualified     # 💇🏿 person getting haircut: dark skin tone
1F487 200D 2642 FE0F                       ; fully-qualified     # 💇‍♂️ man getting haircut
1F487 200D 2642                            ; minimally-qualified # 💇‍♂ man getting haircut
1F487 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 💇🏻‍♂️ man getting haircut: light skin tone
1F487 1F3FB 200D 2642                      ; minimally-qualified # 💇🏻‍♂ man getting haircut: light skin tone
1F487 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 💇🏼‍♂️ man getting haircut: medium-light skin tone
1F487 1F3FC 200D 2642                      ; minimally-qualified # 💇🏼‍♂ man getting haircut: medium-light skin tone
1F487 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 💇🏽‍♂️ man getting haircut: medium skin tone
1F487 1F3FD 200D 2642                      ; minimally-qualified # 💇🏽‍♂ man getting haircut: medium skin tone
1F487 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 💇🏾‍♂️ man getting haircut: medium-dark skin tone
1F487 1F3FE 200D 2642                      ; minimally-qualified # 💇🏾‍♂ man getting haircut: medium-dark skin tone
1F487 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 💇🏿‍♂️ man getting haircut: dark skin tone
1F487 1F3FF 200D 2642                      ; minimally-qualified # 💇🏿‍♂ man getting haircut: dark skin tone
1F487 200D 2640 FE0F                       ; fully-qualified     # 💇‍♀️ woman getting haircut
1F487 200D 2640                            ; minimally-qualified # 💇‍♀ woman getting haircut
1F487 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 💇🏻‍♀️ woman getting haircut: light skin tone
1F487 1F3FB 200D 2640                      ; minimally-qualified # 💇🏻‍♀ woman getting haircut: light skin tone
1F487 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 💇🏼‍♀️ woman getting haircut: medium-light skin tone
1F487 1F3FC 200D 2640                      ; minimally-qualified # 💇🏼‍♀ woman getting haircut: medium-light skin tone
1F487 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 💇🏽‍♀️ woman getting haircut: medium skin tone
1F487 1F3FD 200D 2640                      ; minimally-qualified # 💇🏽‍♀ woman getting haircut: medium skin tone
1F487 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 💇🏾‍♀️ woman getting haircut: medium-dark skin tone
1F487 1F3FE 200D 2640                      ; minimally-qualified # 💇🏾‍♀ woman getting haircut: medium-dark skin tone
1F487 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 💇🏿‍♀️ woman getting haircut: dark skin tone
1F487 1F3FF 200D 2640                      ; minimally-qualified # 💇🏿‍♀ woman getting haircut: dark skin tone
1F6B6                                      ; fully-qualified     # 🚶 person walking
1F6B6 1F3FB                                ; fully-qualified     # 🚶🏻 person walking: light skin tone
1F6B6 1F3FC                                ; fully-qualified     # 🚶🏼 person walking: medium-light skin tone
1F6B6 1F3FD                                ; fully-qualified     # 🚶🏽 person walking: medium skin tone
1F6B6 1F3FE                                ; fully-qualified     # 🚶🏾 person walking: medium-dark skin tone
1F6B6 1F3FF                                ; fully-qualified     # 🚶🏿 person walking: dark skin tone
1F6B6 200D 2642 FE0F                       ; fully-qualified     # 🚶‍♂️ man walking
1F6B6 200D 2642                            ; minimally-qualified # 🚶‍♂ man walking
1F6B6 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🚶🏻‍♂️ man walking: light skin tone
1F6B6 1F3FB 200D 2642                      ; minimally-qualified # 🚶🏻‍♂ man walking: light skin tone
1F6B6 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🚶🏼‍♂️ man walking: medium-light skin tone
1F6B6 1F3FC 200D 2642                      ; minimally-qualified # 🚶🏼‍♂ man walking: medium-light skin tone
1F6B6 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🚶🏽‍♂️ man walking: medium skin tone
1F6B6 1F3FD 200D 2642                      ; minimally-qualified # 🚶🏽‍♂ man walking: medium skin tone
1F6B6 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🚶🏾‍♂️ man walking: medium-dark skin tone
1F6B6 1F3FE 200D 2642                      ; minimally-qualified # 🚶🏾‍♂ man walking: medium-dark skin tone
1F6B6 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🚶🏿‍♂️ man walking: dark skin tone
1F6B6 1F3FF 200D 2642                      ; minimally-qualified # 🚶🏿‍♂ man walking: dark skin tone
1F6B6 200D 2640 FE0F                       ; fully-qualified     # 🚶‍♀️ woman walking
1F6B6 200D 2640                            ; minimally-qualified # 🚶‍♀ woman walking
1F6B6 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🚶🏻‍♀️ woman walking: light skin tone
1F6B6 1F3FB 200D 2640                      ; minimally-qualified # 🚶🏻‍♀ woman walking: light skin tone
1F6B6 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🚶🏼‍♀️ woman walking: medium-light skin tone
1F6B6 1F3FC 200D 2640                      ; minimally-qualified # 🚶🏼‍♀ woman walking: medium-light skin tone
1F6B6 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🚶🏽‍♀️ woman walking: medium skin tone
1F6B6 1F3FD 200D 2640                      ; minimally-qualified # 🚶🏽‍♀ woman walking: medium skin tone
1F6B6 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🚶🏾‍♀️ woman walking: medium-dark skin tone
1F6B6 1F3FE 200D 2640                      ; minimally-qualified # 🚶🏾‍♀ woman walking: medium-dark skin tone
1F6B6 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🚶🏿‍♀️ woman walking: dark skin tone
1F6B6 1F3FF 200D 2640                      ; minimally-qualified # 🚶🏿‍♀ woman walking: dark skin tone
1F9CD                                      ; fully-qualified     # 🧍 person standing
```

----------------------------------------

TITLE: Setting Oh My Zsh Theme to Random (Shell)
DESCRIPTION: Configuration to set Oh My Zsh to use a random theme each time a new terminal window is opened.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_8

LANGUAGE: sh
CODE:
```
ZSH_THEME="random" # (...please let it be pie... please be some pie..)
```

----------------------------------------

TITLE: Adding iTerm2 Plugin in Oh My Zsh Configuration - Shell
DESCRIPTION: This snippet demonstrates how to add the iTerm2 plugin to the plugins array in your .zshrc configuration file. To enable the plugin, append 'iterm2' to the plugins array, ensuring that the corresponding plugin functions are loaded when the shell initializes. No external dependencies are required, but Oh My Zsh should be installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/iterm2/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
plugins=(... iterm2)
```

----------------------------------------

TITLE: Unicode Emoji Mapping - Musical Notation
DESCRIPTION: Unicode codepoint mappings for music notation and audio equipment emoji symbols.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_46

LANGUAGE: txt
CODE:
```
# subgroup: music
1F3BC                                      ; fully-qualified     # 🎼 musical score
1F3B5                                      ; fully-qualified     # 🎵 musical note
1F3B6                                      ; fully-qualified     # 🎶 musical notes
```

----------------------------------------

TITLE: Adding Timoni Plugin to Oh My Zsh Configuration
DESCRIPTION: This snippet demonstrates how to add the Timoni plugin to the plugins array in the zshrc file. This enables completion support for Timoni commands in the Oh My Zsh shell environment.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/timoni/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... timoni)
```

----------------------------------------

TITLE: Installing the Arcanist Plugin in ZSH
DESCRIPTION: This snippet shows how to enable the arcanist plugin by adding it to the plugins array in your zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/arcanist/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... arcanist)
```

----------------------------------------

TITLE: Invoking genpass-apple Command
DESCRIPTION: This snippet shows how to directly invoke the genpass-apple generator to create a pronounceable pseudoword passphrase using the 'cvccvc' pattern. Users can specify a number to generate multiple passwords at once.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/genpass/README.md#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
~/.oh-my-zsh/plugins/genpass/genpass-apple 3
```

LANGUAGE: Shell
CODE:
```
% genpass-apple
```

LANGUAGE: Shell
CODE:
```
% genpass-apple 3
```

----------------------------------------

TITLE: Installation from a Forked Repository
DESCRIPTION: Shows how to install Oh My Zsh from a forked repository by setting the REPO, REMOTE, and BRANCH variables. This allows installation from different repository owners or clones hosted on different platforms.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_13

LANGUAGE: sh
CODE:
```
REPO=apjanke/oh-my-zsh BRANCH=edge sh install.sh
```

----------------------------------------

TITLE: Defining Unicode Emoji for Person Frowning Gestures
DESCRIPTION: This snippet defines Unicode codepoints for the 'person frowning' emoji, including variations for different skin tones and genders. It includes both fully-qualified and minimally-qualified versions of the emoji.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_12

LANGUAGE: Unicode
CODE:
```
1F64D                                      ; fully-qualified     # 🙍 person frowning
1F64D 1F3FB                                ; fully-qualified     # 🙍🏻 person frowning: light skin tone
1F64D 1F3FC                                ; fully-qualified     # 🙍🏼 person frowning: medium-light skin tone
1F64D 1F3FD                                ; fully-qualified     # 🙍🏽 person frowning: medium skin tone
1F64D 1F3FE                                ; fully-qualified     # 🙍🏾 person frowning: medium-dark skin tone
1F64D 1F3FF                                ; fully-qualified     # 🙍🏿 person frowning: dark skin tone
1F64D 200D 2642 FE0F                       ; fully-qualified     # 🙍‍♂️ man frowning
1F64D 200D 2642                            ; minimally-qualified # 🙍‍♂ man frowning
1F64D 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🙍🏻‍♂️ man frowning: light skin tone
1F64D 1F3FB 200D 2642                      ; minimally-qualified # 🙍🏻‍♂ man frowning: light skin tone
```

----------------------------------------

TITLE: Defining Hand Finger Partial Emojis in Unicode
DESCRIPTION: A structured list of Unicode codepoints for hand gesture emojis including OK hand, pinching hand, victory hand, crossed fingers, love-you gesture, sign of the horns, and call me hand, with skin tone variations.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_7

LANGUAGE: text
CODE:
```
# subgroup: hand-fingers-partial
1F44C                                      ; fully-qualified     # 👌 OK hand
1F44C 1F3FB                                ; fully-qualified     # 👌🏻 OK hand: light skin tone
1F44C 1F3FC                                ; fully-qualified     # 👌🏼 OK hand: medium-light skin tone
1F44C 1F3FD                                ; fully-qualified     # 👌🏽 OK hand: medium skin tone
1F44C 1F3FE                                ; fully-qualified     # 👌🏾 OK hand: medium-dark skin tone
1F44C 1F3FF                                ; fully-qualified     # 👌🏿 OK hand: dark skin tone
1F90F                                      ; fully-qualified     # 🤏 pinching hand
1F90F 1F3FB                                ; fully-qualified     # 🤏🏻 pinching hand: light skin tone
1F90F 1F3FC                                ; fully-qualified     # 🤏🏼 pinching hand: medium-light skin tone
1F90F 1F3FD                                ; fully-qualified     # 🤏🏽 pinching hand: medium skin tone
1F90F 1F3FE                                ; fully-qualified     # 🤏🏾 pinching hand: medium-dark skin tone
1F90F 1F3FF                                ; fully-qualified     # 🤏🏿 pinching hand: dark skin tone
270C FE0F                                  ; fully-qualified     # ✌️ victory hand
270C                                       ; unqualified         # ✌ victory hand
270C 1F3FB                                 ; fully-qualified     # ✌🏻 victory hand: light skin tone
270C 1F3FC                                 ; fully-qualified     # ✌🏼 victory hand: medium-light skin tone
270C 1F3FD                                 ; fully-qualified     # ✌🏽 victory hand: medium skin tone
270C 1F3FE                                 ; fully-qualified     # ✌🏾 victory hand: medium-dark skin tone
270C 1F3FF                                 ; fully-qualified     # ✌🏿 victory hand: dark skin tone
1F91E                                      ; fully-qualified     # 🤞 crossed fingers
1F91E 1F3FB                                ; fully-qualified     # 🤞🏻 crossed fingers: light skin tone
1F91E 1F3FC                                ; fully-qualified     # 🤞🏼 crossed fingers: medium-light skin tone
1F91E 1F3FD                                ; fully-qualified     # 🤞🏽 crossed fingers: medium skin tone
1F91E 1F3FE                                ; fully-qualified     # 🤞🏾 crossed fingers: medium-dark skin tone
1F91E 1F3FF                                ; fully-qualified     # 🤞🏿 crossed fingers: dark skin tone
1F91F                                      ; fully-qualified     # 🤟 love-you gesture
1F91F 1F3FB                                ; fully-qualified     # 🤟🏻 love-you gesture: light skin tone
1F91F 1F3FC                                ; fully-qualified     # 🤟🏼 love-you gesture: medium-light skin tone
1F91F 1F3FD                                ; fully-qualified     # 🤟🏽 love-you gesture: medium skin tone
1F91F 1F3FE                                ; fully-qualified     # 🤟🏾 love-you gesture: medium-dark skin tone
1F91F 1F3FF                                ; fully-qualified     # 🤟🏿 love-you gesture: dark skin tone
1F918                                      ; fully-qualified     # 🤘 sign of the horns
1F918 1F3FB                                ; fully-qualified     # 🤘🏻 sign of the horns: light skin tone
1F918 1F3FC                                ; fully-qualified     # 🤘🏼 sign of the horns: medium-light skin tone
1F918 1F3FD                                ; fully-qualified     # 🤘🏽 sign of the horns: medium skin tone
1F918 1F3FE                                ; fully-qualified     # 🤘🏾 sign of the horns: medium-dark skin tone
1F918 1F3FF                                ; fully-qualified     # 🤘🏿 sign of the horns: dark skin tone
1F919                                      ; fully-qualified     # 🤙 call me hand
1F919 1F3FB                                ; fully-qualified     # 🤙🏻 call me hand: light skin tone
1F919 1F3FC                                ; fully-qualified     # 🤙🏼 call me hand: medium-light skin tone
1F919 1F3FD                                ; fully-qualified     # 🤙🏽 call me hand: medium skin tone
1F919 1F3FE                                ; fully-qualified     # 🤙🏾 call me hand: medium-dark skin tone
1F919 1F3FF                                ; fully-qualified     # 🤙🏿 call me hand: dark skin tone
```

----------------------------------------

TITLE: Adding SFDX Plugin to Oh My Zsh Configuration in ZSH
DESCRIPTION: This code snippet shows how to enable the sfdx plugin in your Oh My Zsh configuration by adding it to the plugins array in your zshrc file. This allows for Salesforce DX CLI autocompletion functionality.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sfdx/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... sfdx)
```

----------------------------------------

TITLE: Defining Unicode Emoji for Person Pouting Gestures
DESCRIPTION: This snippet defines Unicode codepoints for the 'person pouting' emoji, including variations for different skin tones and genders. It includes both fully-qualified and minimally-qualified versions of the emoji.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_13

LANGUAGE: Unicode
CODE:
```
1F64E                                      ; fully-qualified     # 🙎 person pouting
1F64E 1F3FB                                ; fully-qualified     # 🙎🏻 person pouting: light skin tone
1F64E 1F3FC                                ; fully-qualified     # 🙎🏼 person pouting: medium-light skin tone
1F64E 1F3FD                                ; fully-qualified     # 🙎🏽 person pouting: medium skin tone
1F64E 1F3FE                                ; fully-qualified     # 🙎🏾 person pouting: medium-dark skin tone
1F64E 1F3FF                                ; fully-qualified     # 🙎🏿 person pouting: dark skin tone
1F64E 200D 2642 FE0F                       ; fully-qualified     # 🙎‍♂️ man pouting
1F64E 200D 2642                            ; minimally-qualified # 🙎‍♂ man pouting
1F64E 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🙎🏻‍♂️ man pouting: light skin tone
1F64E 1F3FB 200D 2642                      ; minimally-qualified # 🙎🏻‍♂ man pouting: light skin tone
```

----------------------------------------

TITLE: Installing the swiftpm Plugin in Oh My Zsh
DESCRIPTION: Shows how to add the swiftpm plugin to the Oh My Zsh configuration. Users need to add 'swiftpm' to their plugins array in the .zshrc file to enable this functionality.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/swiftpm/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... swiftpm)
```

----------------------------------------

TITLE: Unicode Code Points for Emoji Characters
DESCRIPTION: Defines the Unicode code point sequences for emoji characters with variations for different skin tones and hair styles. Each line contains the hexadecimal code points and qualification status, followed by the visual representation and description.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_11

LANGUAGE: unicode
CODE:
```
1F471 1F3FE 200D 2640                      ; minimally-qualified # 👱🏾‍♀ woman: medium-dark skin tone, blond hair
1F471 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 👱🏿‍♀️ woman: dark skin tone, blond hair
1F471 1F3FF 200D 2640                      ; minimally-qualified # 👱🏿‍♀ woman: dark skin tone, blond hair
1F469 200D 1F9B0                           ; fully-qualified     # 👩‍🦰 woman: red hair
1F469 1F3FB 200D 1F9B0                     ; fully-qualified     # 👩🏻‍🦰 woman: light skin tone, red hair
1F469 1F3FC 200D 1F9B0                     ; fully-qualified     # 👩🏼‍🦰 woman: medium-light skin tone, red hair
1F469 1F3FD 200D 1F9B0                     ; fully-qualified     # 👩🏽‍🦰 woman: medium skin tone, red hair
1F469 1F3FE 200D 1F9B0                     ; fully-qualified     # 👩🏾‍🦰 woman: medium-dark skin tone, red hair
1F469 1F3FF 200D 1F9B0                     ; fully-qualified     # 👩🏿‍🦰 woman: dark skin tone, red hair
1F469 200D 1F9B1                           ; fully-qualified     # 👩‍🦱 woman: curly hair
1F469 1F3FB 200D 1F9B1                     ; fully-qualified     # 👩🏻‍🦱 woman: light skin tone, curly hair
1F469 1F3FC 200D 1F9B1                     ; fully-qualified     # 👩🏼‍🦱 woman: medium-light skin tone, curly hair
1F469 1F3FD 200D 1F9B1                     ; fully-qualified     # 👩🏽‍🦱 woman: medium skin tone, curly hair
1F469 1F3FE 200D 1F9B1                     ; fully-qualified     # 👩🏾‍🦱 woman: medium-dark skin tone, curly hair
1F469 1F3FF 200D 1F9B1                     ; fully-qualified     # 👩🏿‍🦱 woman: dark skin tone, curly hair
1F469 200D 1F9B3                           ; fully-qualified     # 👩‍🦳 woman: white hair
1F469 1F3FB 200D 1F9B3                     ; fully-qualified     # 👩🏻‍🦳 woman: light skin tone, white hair
1F469 1F3FC 200D 1F9B3                     ; fully-qualified     # 👩🏼‍🦳 woman: medium-light skin tone, white hair
1F469 1F3FD 200D 1F9B3                     ; fully-qualified     # 👩🏽‍🦳 woman: medium skin tone, white hair
1F469 1F3FE 200D 1F9B3                     ; fully-qualified     # 👩🏾‍🦳 woman: medium-dark skin tone, white hair
1F469 1F3FF 200D 1F9B3                     ; fully-qualified     # 👩🏿‍🦳 woman: dark skin tone, white hair
1F469 200D 1F9B2                           ; fully-qualified     # 👩‍🦲 woman: bald
1F469 1F3FB 200D 1F9B2                     ; fully-qualified     # 👩🏻‍🦲 woman: light skin tone, bald
1F469 1F3FC 200D 1F9B2                     ; fully-qualified     # 👩🏼‍🦲 woman: medium-light skin tone, bald
1F469 1F3FD 200D 1F9B2                     ; fully-qualified     # 👩🏽‍🦲 woman: medium skin tone, bald
1F469 1F3FE 200D 1F9B2                     ; fully-qualified     # 👩🏾‍🦲 woman: medium-dark skin tone, bald
1F469 1F3FF 200D 1F9B2                     ; fully-qualified     # 👩🏿‍🦲 woman: dark skin tone, bald
1F9D3                                      ; fully-qualified     # 🧓 older person
1F9D3 1F3FB                                ; fully-qualified     # 🧓🏻 older person: light skin tone
1F9D3 1F3FC                                ; fully-qualified     # 🧓🏼 older person: medium-light skin tone
1F9D3 1F3FD                                ; fully-qualified     # 🧓🏽 older person: medium skin tone
1F9D3 1F3FE                                ; fully-qualified     # 🧓🏾 older person: medium-dark skin tone
1F9D3 1F3FF                                ; fully-qualified     # 🧓🏿 older person: dark skin tone
1F474                                      ; fully-qualified     # 👴 old man
1F474 1F3FB                                ; fully-qualified     # 👴🏻 old man: light skin tone
1F474 1F3FC                                ; fully-qualified     # 👴🏼 old man: medium-light skin tone
1F474 1F3FD                                ; fully-qualified     # 👴🏽 old man: medium skin tone
1F474 1F3FE                                ; fully-qualified     # 👴🏾 old man: medium-dark skin tone
1F474 1F3FF                                ; fully-qualified     # 👴🏿 old man: dark skin tone
1F475                                      ; fully-qualified     # 👵 old woman
1F475 1F3FB                                ; fully-qualified     # 👵🏻 old woman: light skin tone
1F475 1F3FC                                ; fully-qualified     # 👵🏼 old woman: medium-light skin tone
1F475 1F3FD                                ; fully-qualified     # 👵🏽 old woman: medium skin tone
1F475 1F3FE                                ; fully-qualified     # 👵🏾 old woman: medium-dark skin tone
1F475 1F3FF                                ; fully-qualified     # 👵🏿 old woman: dark skin tone
```

----------------------------------------

TITLE: URL Encoding and Decoding Examples in Zsh
DESCRIPTION: These examples demonstrate the usage of the 'urlencode' and 'urldecode' commands provided by the URLTools plugin. The first example encodes a URL, while the second example decodes a previously encoded URL.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/urltools/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
urlencode 'https://github.com/ohmyzsh/ohmyzsh/search?q=urltools&type=Code'
# returns https%3A%2F%2Fgithub.com%2Fohmyzsh%2Fohmyzsh%2Fsearch%3Fq%3Durltools%26type%3DCode

urldecode 'https%3A%2F%2Fgithub.com%2Fohmyzsh%2Fohmyzsh%2Fsearch%3Fq%3Durltools%26type%3DCode'
# returns https://github.com/ohmyzsh/ohmyzsh/search?q=urltools&type=Code
```

----------------------------------------

TITLE: Defining Unicode Sequences for Person-Role Emojis with Skin Tone Variations
DESCRIPTION: This code snippet defines Unicode sequences for emojis representing people in various professional roles (health worker, student, teacher, judge, farmer, cook) with different skin tone modifiers. Each line includes the hexadecimal Unicode sequence, qualification status (fully-qualified or minimally-qualified), and the visual representation with description.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_19

LANGUAGE: unicode
CODE:
```
# subgroup: person-role
1F468 200D 2695 FE0F                       ; fully-qualified     # 👨‍⚕️ man health worker
1F468 200D 2695                            ; minimally-qualified # 👨‍⚕ man health worker
1F468 1F3FB 200D 2695 FE0F                 ; fully-qualified     # 👨🏻‍⚕️ man health worker: light skin tone
1F468 1F3FB 200D 2695                      ; minimally-qualified # 👨🏻‍⚕ man health worker: light skin tone
1F468 1F3FC 200D 2695 FE0F                 ; fully-qualified     # 👨🏼‍⚕️ man health worker: medium-light skin tone
1F468 1F3FC 200D 2695                      ; minimally-qualified # 👨🏼‍⚕ man health worker: medium-light skin tone
1F468 1F3FD 200D 2695 FE0F                 ; fully-qualified     # 👨🏽‍⚕️ man health worker: medium skin tone
1F468 1F3FD 200D 2695                      ; minimally-qualified # 👨🏽‍⚕ man health worker: medium skin tone
1F468 1F3FE 200D 2695 FE0F                 ; fully-qualified     # 👨🏾‍⚕️ man health worker: medium-dark skin tone
1F468 1F3FE 200D 2695                      ; minimally-qualified # 👨🏾‍⚕ man health worker: medium-dark skin tone
1F468 1F3FF 200D 2695 FE0F                 ; fully-qualified     # 👨🏿‍⚕️ man health worker: dark skin tone
1F468 1F3FF 200D 2695                      ; minimally-qualified # 👨🏿‍⚕ man health worker: dark skin tone
1F469 200D 2695 FE0F                       ; fully-qualified     # 👩‍⚕️ woman health worker
1F469 200D 2695                            ; minimally-qualified # 👩‍⚕ woman health worker
1F469 1F3FB 200D 2695 FE0F                 ; fully-qualified     # 👩🏻‍⚕️ woman health worker: light skin tone
1F469 1F3FB 200D 2695                      ; minimally-qualified # 👩🏻‍⚕ woman health worker: light skin tone
1F469 1F3FC 200D 2695 FE0F                 ; fully-qualified     # 👩🏼‍⚕️ woman health worker: medium-light skin tone
1F469 1F3FC 200D 2695                      ; minimally-qualified # 👩🏼‍⚕ woman health worker: medium-light skin tone
1F469 1F3FD 200D 2695 FE0F                 ; fully-qualified     # 👩🏽‍⚕️ woman health worker: medium skin tone
1F469 1F3FD 200D 2695                      ; minimally-qualified # 👩🏽‍⚕ woman health worker: medium skin tone
1F469 1F3FE 200D 2695 FE0F                 ; fully-qualified     # 👩🏾‍⚕️ woman health worker: medium-dark skin tone
1F469 1F3FE 200D 2695                      ; minimally-qualified # 👩🏾‍⚕ woman health worker: medium-dark skin tone
1F469 1F3FF 200D 2695 FE0F                 ; fully-qualified     # 👩🏿‍⚕️ woman health worker: dark skin tone
1F469 1F3FF 200D 2695                      ; minimally-qualified # 👩🏿‍⚕ woman health worker: dark skin tone
1F468 200D 1F393                           ; fully-qualified     # 👨‍🎓 man student
1F468 1F3FB 200D 1F393                     ; fully-qualified     # 👨🏻‍🎓 man student: light skin tone
1F468 1F3FC 200D 1F393                     ; fully-qualified     # 👨🏼‍🎓 man student: medium-light skin tone
1F468 1F3FD 200D 1F393                     ; fully-qualified     # 👨🏽‍🎓 man student: medium skin tone
1F468 1F3FE 200D 1F393                     ; fully-qualified     # 👨🏾‍🎓 man student: medium-dark skin tone
1F468 1F3FF 200D 1F393                     ; fully-qualified     # 👨🏿‍🎓 man student: dark skin tone
1F469 200D 1F393                           ; fully-qualified     # 👩‍🎓 woman student
1F469 1F3FB 200D 1F393                     ; fully-qualified     # 👩🏻‍🎓 woman student: light skin tone
1F469 1F3FC 200D 1F393                     ; fully-qualified     # 👩🏼‍🎓 woman student: medium-light skin tone
1F469 1F3FD 200D 1F393                     ; fully-qualified     # 👩🏽‍🎓 woman student: medium skin tone
1F469 1F3FE 200D 1F393                     ; fully-qualified     # 👩🏾‍🎓 woman student: medium-dark skin tone
1F469 1F3FF 200D 1F393                     ; fully-qualified     # 👩🏿‍🎓 woman student: dark skin tone
1F468 200D 1F3EB                           ; fully-qualified     # 👨‍🏫 man teacher
1F468 1F3FB 200D 1F3EB                     ; fully-qualified     # 👨🏻‍🏫 man teacher: light skin tone
1F468 1F3FC 200D 1F3EB                     ; fully-qualified     # 👨🏼‍🏫 man teacher: medium-light skin tone
1F468 1F3FD 200D 1F3EB                     ; fully-qualified     # 👨🏽‍🏫 man teacher: medium skin tone
1F468 1F3FE 200D 1F3EB                     ; fully-qualified     # 👨🏾‍🏫 man teacher: medium-dark skin tone
1F468 1F3FF 200D 1F3EB                     ; fully-qualified     # 👨🏿‍🏫 man teacher: dark skin tone
1F469 200D 1F3EB                           ; fully-qualified     # 👩‍🏫 woman teacher
1F469 1F3FB 200D 1F3EB                     ; fully-qualified     # 👩🏻‍🏫 woman teacher: light skin tone
1F469 1F3FC 200D 1F3EB                     ; fully-qualified     # 👩🏼‍🏫 woman teacher: medium-light skin tone
1F469 1F3FD 200D 1F3EB                     ; fully-qualified     # 👩🏽‍🏫 woman teacher: medium skin tone
1F469 1F3FE 200D 1F3EB                     ; fully-qualified     # 👩🏾‍🏫 woman teacher: medium-dark skin tone
1F469 1F3FF 200D 1F3EB                     ; fully-qualified     # 👩🏿‍🏫 woman teacher: dark skin tone
1F468 200D 2696 FE0F                       ; fully-qualified     # 👨‍⚖️ man judge
1F468 200D 2696                            ; minimally-qualified # 👨‍⚖ man judge
1F468 1F3FB 200D 2696 FE0F                 ; fully-qualified     # 👨🏻‍⚖️ man judge: light skin tone
1F468 1F3FB 200D 2696                      ; minimally-qualified # 👨🏻‍⚖ man judge: light skin tone
1F468 1F3FC 200D 2696 FE0F                 ; fully-qualified     # 👨🏼‍⚖️ man judge: medium-light skin tone
1F468 1F3FC 200D 2696                      ; minimally-qualified # 👨🏼‍⚖ man judge: medium-light skin tone
1F468 1F3FD 200D 2696 FE0F                 ; fully-qualified     # 👨🏽‍⚖️ man judge: medium skin tone
1F468 1F3FD 200D 2696                      ; minimally-qualified # 👨🏽‍⚖ man judge: medium skin tone
1F468 1F3FE 200D 2696 FE0F                 ; fully-qualified     # 👨🏾‍⚖️ man judge: medium-dark skin tone
1F468 1F3FE 200D 2696                      ; minimally-qualified # 👨🏾‍⚖ man judge: medium-dark skin tone
1F468 1F3FF 200D 2696 FE0F                 ; fully-qualified     # 👨🏿‍⚖️ man judge: dark skin tone
1F468 1F3FF 200D 2696                      ; minimally-qualified # 👨🏿‍⚖ man judge: dark skin tone
1F469 200D 2696 FE0F                       ; fully-qualified     # 👩‍⚖️ woman judge
1F469 200D 2696                            ; minimally-qualified # 👩‍⚖ woman judge
1F469 1F3FB 200D 2696 FE0F                 ; fully-qualified     # 👩🏻‍⚖️ woman judge: light skin tone
1F469 1F3FB 200D 2696                      ; minimally-qualified # 👩🏻‍⚖ woman judge: light skin tone
1F469 1F3FC 200D 2696 FE0F                 ; fully-qualified     # 👩🏼‍⚖️ woman judge: medium-light skin tone
1F469 1F3FC 200D 2696                      ; minimally-qualified # 👩🏼‍⚖ woman judge: medium-light skin tone
1F469 1F3FD 200D 2696 FE0F                 ; fully-qualified     # 👩🏽‍⚖️ woman judge: medium skin tone
1F469 1F3FD 200D 2696                      ; minimally-qualified # 👩🏽‍⚖ woman judge: medium skin tone
1F469 1F3FE 200D 2696 FE0F                 ; fully-qualified     # 👩🏾‍⚖️ woman judge: medium-dark skin tone
1F469 1F3FE 200D 2696                      ; minimally-qualified # 👩🏾‍⚖ woman judge: medium-dark skin tone
1F469 1F3FF 200D 2696 FE0F                 ; fully-qualified     # 👩🏿‍⚖️ woman judge: dark skin tone
1F469 1F3FF 200D 2696                      ; minimally-qualified # 👩🏿‍⚖ woman judge: dark skin tone
1F468 200D 1F33E                           ; fully-qualified     # 👨‍🌾 man farmer
1F468 1F3FB 200D 1F33E                     ; fully-qualified     # 👨🏻‍🌾 man farmer: light skin tone
1F468 1F3FC 200D 1F33E                     ; fully-qualified     # 👨🏼‍🌾 man farmer: medium-light skin tone
1F468 1F3FD 200D 1F33E                     ; fully-qualified     # 👨🏽‍🌾 man farmer: medium skin tone
1F468 1F3FE 200D 1F33E                     ; fully-qualified     # 👨🏾‍🌾 man farmer: medium-dark skin tone
1F468 1F3FF 200D 1F33E                     ; fully-qualified     # 👨🏿‍🌾 man farmer: dark skin tone
1F469 200D 1F33E                           ; fully-qualified     # 👩‍🌾 woman farmer
1F469 1F3FB 200D 1F33E                     ; fully-qualified     # 👩🏻‍🌾 woman farmer: light skin tone
1F469 1F3FC 200D 1F33E                     ; fully-qualified     # 👩🏼‍🌾 woman farmer: medium-light skin tone
1F469 1F3FD 200D 1F33E                     ; fully-qualified     # 👩🏽‍🌾 woman farmer: medium skin tone
1F469 1F3FE 200D 1F33E                     ; fully-qualified     # 👩🏾‍🌾 woman farmer: medium-dark skin tone
1F469 1F3FF 200D 1F33E                     ; fully-qualified     # 👩🏿‍🌾 woman farmer: dark skin tone
1F468 200D 1F373                           ; fully-qualified     # 👨‍🍳 man cook
1F468 1F3FB 200D 1F373                     ; fully-qualified     # 👨🏻‍🍳 man cook: light skin tone
1F468 1F3FC 200D 1F373                     ; fully-qualified     # 👨🏼‍🍳 man cook: medium-light skin tone
1F468 1F3FD 200D 1F373                     ; fully-qualified     # 👨🏽‍🍳 man cook: medium skin tone
1F468 1F3FE 200D 1F373                     ; fully-qualified     # 👨🏾‍🍳 man cook: medium-dark skin tone
1F468 1F3FF 200D 1F373                     ; fully-qualified     # 👨🏿‍🍳 man cook: dark skin tone
1F469 200D 1F373                           ; fully-qualified     # 👩‍🍳 woman cook
1F469 1F3FB 200D 1F373                     ; fully-qualified     # 👩🏻‍🍳 woman cook: light skin tone
1F469 1F3FC 200D 1F373                     ; fully-qualified     # 👩🏼‍🍳 woman cook: medium-light skin tone
1F469 1F3FD 200D 1F373                     ; fully-qualified     # 👩🏽‍🍳 woman cook: medium skin tone
1F469 1F3FE 200D 1F373                     ; fully-qualified     # 👩🏾‍🍳 woman cook: medium-dark skin tone
```

----------------------------------------

TITLE: Time Emoji Unicode Definitions
DESCRIPTION: Unicode code point definitions for time-related emoji including clocks, watches and time indicators
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_42

LANGUAGE: unicode
CODE:
```
231B                                       ; fully-qualified     # ⌛ hourglass done
23F3                                       ; fully-qualified     # ⏳ hourglass not done
231A                                       ; fully-qualified     # ⌚ watch
```

----------------------------------------

TITLE: Applying Skin Tone Modifier to an Emoji in Zsh (Experimental)
DESCRIPTION: Demonstrates the experimental feature of applying a skin tone modifier. It retrieves the base emoji ('waving_hand') from `$emoji` and appends a skin tone variation selector ('5') retrieved from the experimental `$emoji_skintone` associative array. The effectiveness depends on terminal and font support for Unicode 8.0+ features.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_13

LANGUAGE: zsh
CODE:
```
echo $emoji[waving_hand]$emoji_skintone[5]
```

----------------------------------------

TITLE: Defining Unicode Codepoints for Family Emojis
DESCRIPTION: This snippet defines Unicode codepoints for emojis representing various family structures, including different combinations of adults and children. All definitions are fully-qualified.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_33

LANGUAGE: Unicode
CODE:
```
1F46A                                      ; fully-qualified     # 👪 family
1F468 200D 1F469 200D 1F466                ; fully-qualified     # 👨‍👩‍👦 family: man, woman, boy
1F468 200D 1F469 200D 1F467                ; fully-qualified     # 👨‍👩‍👧 family: man, woman, girl
1F468 200D 1F469 200D 1F467 200D 1F466     ; fully-qualified     # 👨‍👩‍👧‍👦 family: man, woman, girl, boy
1F468 200D 1F469 200D 1F466 200D 1F466     ; fully-qualified     # 👨‍👩‍👦‍👦 family: man, woman, boy, boy
1F468 200D 1F469 200D 1F467 200D 1F467     ; fully-qualified     # 👨‍👩‍👧‍👧 family: man, woman, girl, girl
1F468 200D 1F468 200D 1F466                ; fully-qualified     # 👨‍👨‍👦 family: man, man, boy
1F468 200D 1F468 200D 1F467                ; fully-qualified     # 👨‍👨‍👧 family: man, man, girl
1F468 200D 1F468 200D 1F467 200D 1F466     ; fully-qualified     # 👨‍👨‍👧‍👦 family: man, man, girl, boy
1F468 200D 1F468 200D 1F466 200D 1F466     ; fully-qualified     # 👨‍👨‍👦‍👦 family: man, man, boy, boy
1F468 200D 1F468 200D 1F467 200D 1F467     ; fully-qualified     # 👨‍👨‍👧‍👧 family: man, man, girl, girl
1F469 200D 1F469 200D 1F466                ; fully-qualified     # 👩‍👩‍👦 family: woman, woman, boy
1F469 200D 1F469 200D 1F467                ; fully-qualified     # 👩‍👩‍👧 family: woman, woman, girl
1F469 200D 1F469 200D 1F467 200D 1F466     ; fully-qualified     # 👩‍👩‍👧‍👦 family: woman, woman, girl, boy
1F469 200D 1F469 200D 1F466 200D 1F466     ; fully-qualified     # 👩‍👩‍👦‍👦 family: woman, woman, boy, boy
1F469 200D 1F469 200D 1F467 200D 1F467     ; fully-qualified     # 👩‍👩‍👧‍👧 family: woman, woman, girl, girl
1F468 200D 1F466                           ; fully-qualified     # 👨‍👦 family: man, boy
1F468 200D 1F466 200D 1F466                ; fully-qualified     # 👨‍👦‍👦 family: man, boy, boy
1F468 200D 1F467                           ; fully-qualified     # 👨‍👧 family: man, girl
1F468 200D 1F467 200D 1F466                ; fully-qualified     # 👨‍👧‍👦 family: man, girl, boy
1F468 200D 1F467 200D 1F467                ; fully-qualified     # 👨‍👧‍👧 family: man, girl, girl
1F469 200D 1F466                           ; fully-qualified     # 👩‍👦 family: woman, boy
1F469 200D 1F466 200D 1F466                ; fully-qualified     # 👩‍👦‍👦 family: woman, boy, boy
1F469 200D 1F467                           ; fully-qualified     # 👩‍👧 family: woman, girl
1F469 200D 1F467 200D 1F466                ; fully-qualified     # 👩‍👧‍👦 family: woman, girl, boy
1F469 200D 1F467 200D 1F467                ; fully-qualified     # 👩‍👧‍👧 family: woman, girl, girl
```

----------------------------------------

TITLE: Defining AV Symbol Emoji Unicode Characters
DESCRIPTION: This snippet defines Unicode characters for audio-visual control symbols and emojis. It includes both fully-qualified and unqualified versions for various playback and volume control buttons.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_54

LANGUAGE: Unicode
CODE:
```
# subgroup: av-symbol
1F500                                      ; fully-qualified     # 🔀 shuffle tracks button
1F501                                      ; fully-qualified     # 🔁 repeat button
1F502                                      ; fully-qualified     # 🔂 repeat single button
25B6 FE0F                                  ; fully-qualified     # ▶️ play button
25B6                                       ; unqualified         # ▶ play button
23E9                                       ; fully-qualified     # ⏩ fast-forward button
23ED FE0F                                  ; fully-qualified     # ⏭️ next track button
23ED                                       ; unqualified         # ⏭ next track button
23EF FE0F                                  ; fully-qualified     # ⏯️ play or pause button
23EF                                       ; unqualified         # ⏯ play or pause button
25C0 FE0F                                  ; fully-qualified     # ◀️ reverse button
25C0                                       ; unqualified         # ◀ reverse button
23EA                                       ; fully-qualified     # ⏪ fast reverse button
23EE FE0F                                  ; fully-qualified     # ⏮️ last track button
23EE                                       ; unqualified         # ⏮ last track button
1F53C                                      ; fully-qualified     # 🔼 upwards button
23EB                                       ; fully-qualified     # ⏫ fast up button
1F53D                                      ; fully-qualified     # 🔽 downwards button
23EC                                       ; fully-qualified     # ⏬ fast down button
23F8 FE0F                                  ; fully-qualified     # ⏸️ pause button
23F8                                       ; unqualified         # ⏸ pause button
23F9 FE0F                                  ; fully-qualified     # ⏹️ stop button
23F9                                       ; unqualified         # ⏹ stop button
23FA FE0F                                  ; fully-qualified     # ⏺️ record button
23FA                                       ; unqualified         # ⏺ record button
23CF FE0F                                  ; fully-qualified     # ⏏️ eject button
23CF                                       ; unqualified         # ⏏ eject button
1F3A6                                      ; fully-qualified     # 🎦 cinema
1F505                                      ; fully-qualified     # 🔅 dim button
1F506                                      ; fully-qualified     # 🔆 bright button
1F4F6                                      ; fully-qualified     # 📶 antenna bars
1F4F3                                      ; fully-qualified     # 📳 vibration mode
1F4F4                                      ; fully-qualified     # 📴 mobile phone off
```

----------------------------------------

TITLE: Installing SBT Plugin in Oh My Zsh
DESCRIPTION: Shows how to enable the SBT plugin by adding it to the plugins array in the zshrc configuration file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sbt/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... sbt)
```

----------------------------------------

TITLE: MacVim Post-Call Focus Function
DESCRIPTION: Example function definition for bringing MacVim window focus after loading a file using AppleScript.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vim-interaction/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
function postCallVim
{
  osascript -e 'tell application "MacVim" to activate'
}
```

----------------------------------------

TITLE: Defining Unicode Codepoints for Person Symbols
DESCRIPTION: This snippet defines Unicode codepoints for emojis representing person symbols, including speaking head, busts in silhouette, and footprints. It includes both fully-qualified and unqualified versions where applicable.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_34

LANGUAGE: Unicode
CODE:
```
# subgroup: person-symbol
1F5E3 FE0F                                 ; fully-qualified     # 🗣️ speaking head
1F5E3                                      ; unqualified         # 🗣 speaking head
1F464                                      ; fully-qualified     # 👤 bust in silhouette
1F465                                      ; fully-qualified     # 👥 busts in silhouette
1F463                                      ; fully-qualified     # 👣 footprints
```

----------------------------------------

TITLE: Defining Hand-Fingers-Open Emojis (Unicode)
DESCRIPTION: Lists Unicode code points, qualification status, and descriptions for emojis categorized under 'hand-fingers-open'. Includes gestures like 'waving hand', 'raised back of hand', 'hand with fingers splayed', 'raised hand', and 'vulcan salute'. Crucially, it lists the base emoji and its five skin tone modifier variants (light, medium-light, medium, medium-dark, dark). Each line follows the format: <Unicode sequence> ; <qualification> # <description>.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_6

LANGUAGE: plaintext
CODE:
```
# subgroup: hand-fingers-open
1F44B                                      ; fully-qualified     # 👋 waving hand
1F44B 1F3FB                                ; fully-qualified     # 👋🏻 waving hand: light skin tone
1F44B 1F3FC                                ; fully-qualified     # 👋🏼 waving hand: medium-light skin tone
1F44B 1F3FD                                ; fully-qualified     # 👋🏽 waving hand: medium skin tone
1F44B 1F3FE                                ; fully-qualified     # 👋🏾 waving hand: medium-dark skin tone
1F44B 1F3FF                                ; fully-qualified     # 👋🏿 waving hand: dark skin tone
1F91A                                      ; fully-qualified     # 🤚 raised back of hand
1F91A 1F3FB                                ; fully-qualified     # 🤚🏻 raised back of hand: light skin tone
1F91A 1F3FC                                ; fully-qualified     # 🤚🏼 raised back of hand: medium-light skin tone
1F91A 1F3FD                                ; fully-qualified     # 🤚🏽 raised back of hand: medium skin tone
1F91A 1F3FE                                ; fully-qualified     # 🤚🏾 raised back of hand: medium-dark skin tone
1F91A 1F3FF                                ; fully-qualified     # 🤚🏿 raised back of hand: dark skin tone
1F590 FE0F                                 ; fully-qualified     # 🖐️ hand with fingers splayed
1F590                                      ; unqualified         # 🖐 hand with fingers splayed
1F590 1F3FB                                ; fully-qualified     # 🖐🏻 hand with fingers splayed: light skin tone
1F590 1F3FC                                ; fully-qualified     # 🖐🏼 hand with fingers splayed: medium-light skin tone
1F590 1F3FD                                ; fully-qualified     # 🖐🏽 hand with fingers splayed: medium skin tone
1F590 1F3FE                                ; fully-qualified     # 🖐🏾 hand with fingers splayed: medium-dark skin tone
1F590 1F3FF                                ; fully-qualified     # 🖐🏿 hand with fingers splayed: dark skin tone
270B                                       ; fully-qualified     # ✋ raised hand
270B 1F3FB                                 ; fully-qualified     # ✋🏻 raised hand: light skin tone
270B 1F3FC                                 ; fully-qualified     # ✋🏼 raised hand: medium-light skin tone
270B 1F3FD                                 ; fully-qualified     # ✋🏽 raised hand: medium skin tone
270B 1F3FE                                 ; fully-qualified     # ✋🏾 raised hand: medium-dark skin tone
270B 1F3FF                                 ; fully-qualified     # ✋🏿 raised hand: dark skin tone
1F596                                      ; fully-qualified     # 🖖 vulcan salute
1F596 1F3FB                                ; fully-qualified     # 🖖🏻 vulcan salute: light skin tone
1F596 1F3FC                                ; fully-qualified     # 🖖🏼 vulcan salute: medium-light skin tone
1F596 1F3FD                                ; fully-qualified     # 🖖🏽 vulcan salute: medium skin tone
1F596 1F3FE                                ; fully-qualified     # 🖖🏾 vulcan salute: medium-dark skin tone
1F596 1F3FF                                ; fully-qualified     # 🖖🏿 vulcan salute: dark skin tone
```

----------------------------------------

TITLE: Listing Available Emoji Group Names in Zsh
DESCRIPTION: Demonstrates how to list the names (keys) of all defined emoji groups. It uses Zsh parameter expansion (`${(k)...}`) to extract the keys from the `$emoji_groups` associative array provided by the plugin.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_8

LANGUAGE: zsh
CODE:
```
echo ${(k)emoji_groups}
```

----------------------------------------

TITLE: Defining Unicode Sequences for Sports and Activities Emojis
DESCRIPTION: This code block defines Unicode sequences for various sports and activities emojis, including weightlifting, biking, mountain biking, and cartwheeling. Each emoji is presented with different qualifications (fully-qualified, minimally-qualified, unqualified) and includes variations for skin tones and gender-specific versions.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_29

LANGUAGE: Unicode
CODE:
```
1F3CB 1F3FD 200D 2642                      ; minimally-qualified # 🏋🏽‍♂ man lifting weights: medium skin tone
1F3CB 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🏋🏾‍♂️ man lifting weights: medium-dark skin tone
1F3CB 1F3FE 200D 2642                      ; minimally-qualified # 🏋🏾‍♂ man lifting weights: medium-dark skin tone
1F3CB 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🏋🏿‍♂️ man lifting weights: dark skin tone
1F3CB 1F3FF 200D 2642                      ; minimally-qualified # 🏋🏿‍♂ man lifting weights: dark skin tone
1F3CB FE0F 200D 2640 FE0F                  ; fully-qualified     # 🏋️‍♀️ woman lifting weights
1F3CB 200D 2640 FE0F                       ; unqualified         # 🏋‍♀️ woman lifting weights
1F3CB FE0F 200D 2640                       ; unqualified         # 🏋️‍♀ woman lifting weights
1F3CB 200D 2640                            ; unqualified         # 🏋‍♀ woman lifting weights
1F3CB 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🏋🏻‍♀️ woman lifting weights: light skin tone
1F3CB 1F3FB 200D 2640                      ; minimally-qualified # 🏋🏻‍♀ woman lifting weights: light skin tone
1F3CB 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🏋🏼‍♀️ woman lifting weights: medium-light skin tone
1F3CB 1F3FC 200D 2640                      ; minimally-qualified # 🏋🏼‍♀ woman lifting weights: medium-light skin tone
1F3CB 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🏋🏽‍♀️ woman lifting weights: medium skin tone
1F3CB 1F3FD 200D 2640                      ; minimally-qualified # 🏋🏽‍♀ woman lifting weights: medium skin tone
1F3CB 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🏋🏾‍♀️ woman lifting weights: medium-dark skin tone
1F3CB 1F3FE 200D 2640                      ; minimally-qualified # 🏋🏾‍♀ woman lifting weights: medium-dark skin tone
1F3CB 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🏋🏿‍♀️ woman lifting weights: dark skin tone
1F3CB 1F3FF 200D 2640                      ; minimally-qualified # 🏋🏿‍♀ woman lifting weights: dark skin tone
1F6B4                                      ; fully-qualified     # 🚴 person biking
1F6B4 1F3FB                                ; fully-qualified     # 🚴🏻 person biking: light skin tone
1F6B4 1F3FC                                ; fully-qualified     # 🚴🏼 person biking: medium-light skin tone
1F6B4 1F3FD                                ; fully-qualified     # 🚴🏽 person biking: medium skin tone
1F6B4 1F3FE                                ; fully-qualified     # 🚴🏾 person biking: medium-dark skin tone
1F6B4 1F3FF                                ; fully-qualified     # 🚴🏿 person biking: dark skin tone
1F6B4 200D 2642 FE0F                       ; fully-qualified     # 🚴‍♂️ man biking
1F6B4 200D 2642                            ; minimally-qualified # 🚴‍♂ man biking
1F6B4 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🚴🏻‍♂️ man biking: light skin tone
1F6B4 1F3FB 200D 2642                      ; minimally-qualified # 🚴🏻‍♂ man biking: light skin tone
1F6B4 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🚴🏼‍♂️ man biking: medium-light skin tone
1F6B4 1F3FC 200D 2642                      ; minimally-qualified # 🚴🏼‍♂ man biking: medium-light skin tone
1F6B4 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🚴🏽‍♂️ man biking: medium skin tone
1F6B4 1F3FD 200D 2642                      ; minimally-qualified # 🚴🏽‍♂ man biking: medium skin tone
1F6B4 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🚴🏾‍♂️ man biking: medium-dark skin tone
1F6B4 1F3FE 200D 2642                      ; minimally-qualified # 🚴🏾‍♂ man biking: medium-dark skin tone
1F6B4 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🚴🏿‍♂️ man biking: dark skin tone
1F6B4 1F3FF 200D 2642                      ; minimally-qualified # 🚴🏿‍♂ man biking: dark skin tone
1F6B4 200D 2640 FE0F                       ; fully-qualified     # 🚴‍♀️ woman biking
1F6B4 200D 2640                            ; minimally-qualified # 🚴‍♀ woman biking
1F6B4 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🚴🏻‍♀️ woman biking: light skin tone
1F6B4 1F3FB 200D 2640                      ; minimally-qualified # 🚴🏻‍♀ woman biking: light skin tone
1F6B4 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🚴🏼‍♀️ woman biking: medium-light skin tone
1F6B4 1F3FC 200D 2640                      ; minimally-qualified # 🚴🏼‍♀ woman biking: medium-light skin tone
1F6B4 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🚴🏽‍♀️ woman biking: medium skin tone
1F6B4 1F3FD 200D 2640                      ; minimally-qualified # 🚴🏽‍♀ woman biking: medium skin tone
1F6B4 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🚴🏾‍♀️ woman biking: medium-dark skin tone
1F6B4 1F3FE 200D 2640                      ; minimally-qualified # 🚴🏾‍♀ woman biking: medium-dark skin tone
1F6B4 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🚴🏿‍♀️ woman biking: dark skin tone
1F6B4 1F3FF 200D 2640                      ; minimally-qualified # 🚴🏿‍♀ woman biking: dark skin tone
1F6B5                                      ; fully-qualified     # 🚵 person mountain biking
1F6B5 1F3FB                                ; fully-qualified     # 🚵🏻 person mountain biking: light skin tone
1F6B5 1F3FC                                ; fully-qualified     # 🚵🏼 person mountain biking: medium-light skin tone
1F6B5 1F3FD                                ; fully-qualified     # 🚵🏽 person mountain biking: medium skin tone
1F6B5 1F3FE                                ; fully-qualified     # 🚵🏾 person mountain biking: medium-dark skin tone
1F6B5 1F3FF                                ; fully-qualified     # 🚵🏿 person mountain biking: dark skin tone
1F6B5 200D 2642 FE0F                       ; fully-qualified     # 🚵‍♂️ man mountain biking
1F6B5 200D 2642                            ; minimally-qualified # 🚵‍♂ man mountain biking
1F6B5 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🚵🏻‍♂️ man mountain biking: light skin tone
1F6B5 1F3FB 200D 2642                      ; minimally-qualified # 🚵🏻‍♂ man mountain biking: light skin tone
1F6B5 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🚵🏼‍♂️ man mountain biking: medium-light skin tone
1F6B5 1F3FC 200D 2642                      ; minimally-qualified # 🚵🏼‍♂ man mountain biking: medium-light skin tone
1F6B5 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🚵🏽‍♂️ man mountain biking: medium skin tone
1F6B5 1F3FD 200D 2642                      ; minimally-qualified # 🚵🏽‍♂ man mountain biking: medium skin tone
1F6B5 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🚵🏾‍♂️ man mountain biking: medium-dark skin tone
1F6B5 1F3FE 200D 2642                      ; minimally-qualified # 🚵🏾‍♂ man mountain biking: medium-dark skin tone
1F6B5 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🚵🏿‍♂️ man mountain biking: dark skin tone
1F6B5 1F3FF 200D 2642                      ; minimally-qualified # 🚵🏿‍♂ man mountain biking: dark skin tone
1F6B5 200D 2640 FE0F                       ; fully-qualified     # 🚵‍♀️ woman mountain biking
1F6B5 200D 2640                            ; minimally-qualified # 🚵‍♀ woman mountain biking
1F6B5 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🚵🏻‍♀️ woman mountain biking: light skin tone
1F6B5 1F3FB 200D 2640                      ; minimally-qualified # 🚵🏻‍♀ woman mountain biking: light skin tone
1F6B5 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🚵🏼‍♀️ woman mountain biking: medium-light skin tone
1F6B5 1F3FC 200D 2640                      ; minimally-qualified # 🚵🏼‍♀ woman mountain biking: medium-light skin tone
1F6B5 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🚵🏽‍♀️ woman mountain biking: medium skin tone
1F6B5 1F3FD 200D 2640                      ; minimally-qualified # 🚵🏽‍♀ woman mountain biking: medium skin tone
1F6B5 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🚵🏾‍♀️ woman mountain biking: medium-dark skin tone
1F6B5 1F3FE 200D 2640                      ; minimally-qualified # 🚵🏾‍♀ woman mountain biking: medium-dark skin tone
1F6B5 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🚵🏿‍♀️ woman mountain biking: dark skin tone
1F6B5 1F3FF 200D 2640                      ; minimally-qualified # 🚵🏿‍♀ woman mountain biking: dark skin tone
1F938                                      ; fully-qualified     # 🤸 person cartwheeling
1F938 1F3FB                                ; fully-qualified     # 🤸🏻 person cartwheeling: light skin tone
1F938 1F3FC                                ; fully-qualified     # 🤸🏼 person cartwheeling: medium-light skin tone
1F938 1F3FD                                ; fully-qualified     # 🤸🏽 person cartwheeling: medium skin tone
1F938 1F3FE                                ; fully-qualified     # 🤸🏾 person cartwheeling: medium-dark skin tone
1F938 1F3FF                                ; fully-qualified     # 🤸🏿 person cartwheeling: dark skin tone
1F938 200D 2642 FE0F                       ; fully-qualified     # 🤸‍♂️ man cartwheeling
1F938 200D 2642                            ; minimally-qualified # 🤸‍♂ man cartwheeling
1F938 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🤸🏻‍♂️ man cartwheeling: light skin tone
1F938 1F3FB 200D 2642                      ; minimally-qualified # 🤸🏻‍♂ man cartwheeling: light skin tone
1F938 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🤸🏼‍♂️ man cartwheeling: medium-light skin tone
1F938 1F3FC 200D 2642                      ; minimally-qualified # 🤸🏼‍♂ man cartwheeling: medium-light skin tone
1F938 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🤸🏽‍♂️ man cartwheeling: medium skin tone
```

----------------------------------------

TITLE: Setting an external helper for password management in ssh-agent
DESCRIPTION: Configure an external helper program to ask for SSH passwords and possibly store them in the system keychain.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
zstyle :omz:plugins:ssh-agent helper ksshaskpass
```

----------------------------------------

TITLE: Setting up fpath for zsh completion
DESCRIPTION: Configuration line to add to .zshrc for enabling zsh-completion features when not using oh-my-zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_12

LANGUAGE: zsh
CODE:
```
fpath=(~/path/to/wd $fpath)
```

----------------------------------------

TITLE: Defining Face-Negative Emojis (Unicode)
DESCRIPTION: Lists Unicode code points, qualification status, and descriptions for emojis categorized under 'face-negative'. Includes emojis like 'pouting face', 'angry face', 'skull', and variants like 'skull and crossbones'. Each line follows the format: <Unicode sequence> ; <qualification> # <description>.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
# subgroup: face-negative
1F624                                      ; fully-qualified     # 😤 face with steam from nose
1F621                                      ; fully-qualified     # 😡 pouting face
1F620                                      ; fully-qualified     # 😠 angry face
1F92C                                      ; fully-qualified     # 🤬 face with symbols on mouth
1F608                                      ; fully-qualified     # 😈 smiling face with horns
1F47F                                      ; fully-qualified     # 👿 angry face with horns
1F480                                      ; fully-qualified     # 💀 skull
2620 FE0F                                  ; fully-qualified     # ☠️ skull and crossbones
2620                                       ; unqualified         # ☠ skull and crossbones
```

----------------------------------------

TITLE: Shrink-Path Command Output Examples
DESCRIPTION: Table showing the results of calling shrink_path with various options on a sample path.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shrink-path/README.md#2025-04-22_snippet_2

LANGUAGE: plaintext
CODE:
```
Option        Result
<none>        /h/m/f o/ba/q
-l|--last     /h/m/f o/ba/q
-s|--short    /h/m/f/b/q
-t|--tilde    ~/f o/ba/q
-f|--fish     ~/f/b/quux
-g|--glob     /h*/m*/f o*/ba*/q*
-3            /hom/me/f o/bar/quu
-e '$' -3     /hom$/me/f o$/bar/quu$
-q            /h/m/f\ o/ba/q
-g -q         /h*/m*/f\ o*/ba*/q*
-x            /home/me/foo/bar/quux
```

----------------------------------------

TITLE: Adding TextMate Plugin to Oh My Zsh Configuration
DESCRIPTION: This snippet shows how to enable the TextMate plugin in your Oh My Zsh configuration by adding it to the plugins array in your zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/textmate/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... textmate)
```

----------------------------------------

TITLE: Directory Stack Output Display
DESCRIPTION: Example output showing the directory stack structure after navigation commands.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dirhistory/README.md#2025-04-22_snippet_2

LANGUAGE: console
CODE:
```
$ dirs -v
0       /usr/share/doc
1       /usr/share
2       /usr
3       ~
```

----------------------------------------

TITLE: Defining Unicode Sequences for Professional Emoji with Skin Tone Variations
DESCRIPTION: This snippet defines Unicode sequences for emoji representing various professions (pilots, astronauts, firefighters, police officers, detectives) with different skin tone variations. Each line includes the Unicode sequence, qualification status, and a text description of the emoji.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_20

LANGUAGE: Unicode
CODE:
```
1F468 1F3FE 200D 2708                      ; minimally-qualified # 👨🏾‍✈ man pilot: medium-dark skin tone
1F468 1F3FF 200D 2708 FE0F                 ; fully-qualified     # 👨🏿‍✈️ man pilot: dark skin tone
1F468 1F3FF 200D 2708                      ; minimally-qualified # 👨🏿‍✈ man pilot: dark skin tone
1F469 200D 2708 FE0F                       ; fully-qualified     # 👩‍✈️ woman pilot
1F469 200D 2708                            ; minimally-qualified # 👩‍✈ woman pilot
1F469 1F3FB 200D 2708 FE0F                 ; fully-qualified     # 👩🏻‍✈️ woman pilot: light skin tone
1F469 1F3FB 200D 2708                      ; minimally-qualified # 👩🏻‍✈ woman pilot: light skin tone
1F469 1F3FC 200D 2708 FE0F                 ; fully-qualified     # 👩🏼‍✈️ woman pilot: medium-light skin tone
1F469 1F3FC 200D 2708                      ; minimally-qualified # 👩🏼‍✈ woman pilot: medium-light skin tone
1F469 1F3FD 200D 2708 FE0F                 ; fully-qualified     # 👩🏽‍✈️ woman pilot: medium skin tone
1F469 1F3FD 200D 2708                      ; minimally-qualified # 👩🏽‍✈ woman pilot: medium skin tone
1F469 1F3FE 200D 2708 FE0F                 ; fully-qualified     # 👩🏾‍✈️ woman pilot: medium-dark skin tone
1F469 1F3FE 200D 2708                      ; minimally-qualified # 👩🏾‍✈ woman pilot: medium-dark skin tone
1F469 1F3FF 200D 2708 FE0F                 ; fully-qualified     # 👩🏿‍✈️ woman pilot: dark skin tone
1F469 1F3FF 200D 2708                      ; minimally-qualified # 👩🏿‍✈ woman pilot: dark skin tone
1F468 200D 1F680                           ; fully-qualified     # 👨‍🚀 man astronaut
1F468 1F3FB 200D 1F680                     ; fully-qualified     # 👨🏻‍🚀 man astronaut: light skin tone
1F468 1F3FC 200D 1F680                     ; fully-qualified     # 👨🏼‍🚀 man astronaut: medium-light skin tone
1F468 1F3FD 200D 1F680                     ; fully-qualified     # 👨🏽‍🚀 man astronaut: medium skin tone
1F468 1F3FE 200D 1F680                     ; fully-qualified     # 👨🏾‍🚀 man astronaut: medium-dark skin tone
1F468 1F3FF 200D 1F680                     ; fully-qualified     # 👨🏿‍🚀 man astronaut: dark skin tone
1F469 200D 1F680                           ; fully-qualified     # 👩‍🚀 woman astronaut
1F469 1F3FB 200D 1F680                     ; fully-qualified     # 👩🏻‍🚀 woman astronaut: light skin tone
1F469 1F3FC 200D 1F680                     ; fully-qualified     # 👩🏼‍🚀 woman astronaut: medium-light skin tone
1F469 1F3FD 200D 1F680                     ; fully-qualified     # 👩🏽‍🚀 woman astronaut: medium skin tone
1F469 1F3FE 200D 1F680                     ; fully-qualified     # 👩🏾‍🚀 woman astronaut: medium-dark skin tone
1F469 1F3FF 200D 1F680                     ; fully-qualified     # 👩🏿‍🚀 woman astronaut: dark skin tone
1F468 200D 1F692                           ; fully-qualified     # 👨‍🚒 man firefighter
1F468 1F3FB 200D 1F692                     ; fully-qualified     # 👨🏻‍🚒 man firefighter: light skin tone
1F468 1F3FC 200D 1F692                     ; fully-qualified     # 👨🏼‍🚒 man firefighter: medium-light skin tone
1F468 1F3FD 200D 1F692                     ; fully-qualified     # 👨🏽‍🚒 man firefighter: medium skin tone
1F468 1F3FE 200D 1F692                     ; fully-qualified     # 👨🏾‍🚒 man firefighter: medium-dark skin tone
1F468 1F3FF 200D 1F692                     ; fully-qualified     # 👨🏿‍🚒 man firefighter: dark skin tone
1F469 200D 1F692                           ; fully-qualified     # 👩‍🚒 woman firefighter
1F469 1F3FB 200D 1F692                     ; fully-qualified     # 👩🏻‍🚒 woman firefighter: light skin tone
1F469 1F3FC 200D 1F692                     ; fully-qualified     # 👩🏼‍🚒 woman firefighter: medium-light skin tone
1F469 1F3FD 200D 1F692                     ; fully-qualified     # 👩🏽‍🚒 woman firefighter: medium skin tone
1F469 1F3FE 200D 1F692                     ; fully-qualified     # 👩🏾‍🚒 woman firefighter: medium-dark skin tone
1F469 1F3FF 200D 1F692                     ; fully-qualified     # 👩🏿‍🚒 woman firefighter: dark skin tone
1F46E                                      ; fully-qualified     # 👮 police officer
1F46E 1F3FB                                ; fully-qualified     # 👮🏻 police officer: light skin tone
1F46E 1F3FC                                ; fully-qualified     # 👮🏼 police officer: medium-light skin tone
1F46E 1F3FD                                ; fully-qualified     # 👮🏽 police officer: medium skin tone
1F46E 1F3FE                                ; fully-qualified     # 👮🏾 police officer: medium-dark skin tone
1F46E 1F3FF                                ; fully-qualified     # 👮🏿 police officer: dark skin tone
1F46E 200D 2642 FE0F                       ; fully-qualified     # 👮‍♂️ man police officer
1F46E 200D 2642                            ; minimally-qualified # 👮‍♂ man police officer
1F46E 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 👮🏻‍♂️ man police officer: light skin tone
1F46E 1F3FB 200D 2642                      ; minimally-qualified # 👮🏻‍♂ man police officer: light skin tone
1F46E 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 👮🏼‍♂️ man police officer: medium-light skin tone
1F46E 1F3FC 200D 2642                      ; minimally-qualified # 👮🏼‍♂ man police officer: medium-light skin tone
1F46E 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 👮🏽‍♂️ man police officer: medium skin tone
1F46E 1F3FD 200D 2642                      ; minimally-qualified # 👮🏽‍♂ man police officer: medium skin tone
1F46E 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 👮🏾‍♂️ man police officer: medium-dark skin tone
1F46E 1F3FE 200D 2642                      ; minimally-qualified # 👮🏾‍♂ man police officer: medium-dark skin tone
1F46E 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 👮🏿‍♂️ man police officer: dark skin tone
1F46E 1F3FF 200D 2642                      ; minimally-qualified # 👮🏿‍♂ man police officer: dark skin tone
1F46E 200D 2640 FE0F                       ; fully-qualified     # 👮‍♀️ woman police officer
1F46E 200D 2640                            ; minimally-qualified # 👮‍♀ woman police officer
1F46E 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 👮🏻‍♀️ woman police officer: light skin tone
1F46E 1F3FB 200D 2640                      ; minimally-qualified # 👮🏻‍♀ woman police officer: light skin tone
1F46E 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 👮🏼‍♀️ woman police officer: medium-light skin tone
1F46E 1F3FC 200D 2640                      ; minimally-qualified # 👮🏼‍♀ woman police officer: medium-light skin tone
1F46E 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 👮🏽‍♀️ woman police officer: medium skin tone
1F46E 1F3FD 200D 2640                      ; minimally-qualified # 👮🏽‍♀ woman police officer: medium skin tone
1F46E 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 👮🏾‍♀️ woman police officer: medium-dark skin tone
1F46E 1F3FE 200D 2640                      ; minimally-qualified # 👮🏾‍♀ woman police officer: medium-dark skin tone
1F46E 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 👮🏿‍♀️ woman police officer: dark skin tone
1F46E 1F3FF 200D 2640                      ; minimally-qualified # 👮🏿‍♀ woman police officer: dark skin tone
1F575 FE0F                                 ; fully-qualified     # 🕵️ detective
1F575                                      ; unqualified         # 🕵 detective
1F575 1F3FB                                ; fully-qualified     # 🕵🏻 detective: light skin tone
1F575 1F3FC                                ; fully-qualified     # 🕵🏼 detective: medium-light skin tone
1F575 1F3FD                                ; fully-qualified     # 🕵🏽 detective: medium skin tone
1F575 1F3FE                                ; fully-qualified     # 🕵🏾 detective: medium-dark skin tone
1F575 1F3FF                                ; fully-qualified     # 🕵🏿 detective: dark skin tone
1F575 FE0F 200D 2642 FE0F                  ; fully-qualified     # 🕵️‍♂️ man detective
1F575 200D 2642 FE0F                       ; unqualified         # 🕵‍♂️ man detective
1F575 FE0F 200D 2642                       ; unqualified         # 🕵️‍♂ man detective
1F575 200D 2642                            ; unqualified         # 🕵‍♂ man detective
1F575 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🕵🏻‍♂️ man detective: light skin tone
1F575 1F3FB 200D 2642                      ; minimally-qualified # 🕵🏻‍♂ man detective: light skin tone
1F575 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🕵🏼‍♂️ man detective: medium-light skin tone
1F575 1F3FC 200D 2642                      ; minimally-qualified # 🕵🏼‍♂ man detective: medium-light skin tone
1F575 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🕵🏽‍♂️ man detective: medium skin tone
1F575 1F3FD 200D 2642                      ; minimally-qualified # 🕵🏽‍♂ man detective: medium skin tone
1F575 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🕵🏾‍♂️ man detective: medium-dark skin tone
1F575 1F3FE 200D 2642                      ; minimally-qualified # 🕵🏾‍♂ man detective: medium-dark skin tone
1F575 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🕵🏿‍♂️ man detective: dark skin tone
1F575 1F3FF 200D 2642                      ; minimally-qualified # 🕵🏿‍♂ man detective: dark skin tone
1F575 FE0F 200D 2640 FE0F                  ; fully-qualified     # 🕵️‍♀️ woman detective
1F575 200D 2640 FE0F                       ; unqualified         # 🕵‍♀️ woman detective
1F575 FE0F 200D 2640                       ; unqualified         # 🕵️‍♀ woman detective
1F575 200D 2640                            ; unqualified         # 🕵‍♀ woman detective
1F575 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🕵🏻‍♀️ woman detective: light skin tone
```

----------------------------------------

TITLE: Enabling quiet mode for ssh-agent plugin
DESCRIPTION: Silence the output of the ssh-agent plugin to prevent console output.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_8

LANGUAGE: zsh
CODE:
```
zstyle :omz:plugins:ssh-agent quiet yes
```

----------------------------------------

TITLE: Showing the path of a warp point
DESCRIPTION: Command to display the full path of the directory associated with the warp point 'foo'.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_24

LANGUAGE: zsh
CODE:
```
wd path foo
```

----------------------------------------

TITLE: Generating Go Code Documentation Structure with Go Templates
DESCRIPTION: This Go template (`text/template`) processes a data structure, assumed to be available as `.PDoc`, which contains parsed documentation elements of a Go package (Constants, Variables, Functions, Types). It iterates through these elements, printing their names. For types, it also lists associated methods, functions, constants, and variables. The template includes comments indicating the sections for each element type. It requires the `text/template` package in Go and a data structure matching the expected fields (`.PDoc`, `.Consts`, `.Vars`, `.Funcs`, `.Types`, `.Name`, `.Methods`). The output is a plain text representation of the code elements.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/golang/templates/package.txt#2025-04-22_snippet_0

LANGUAGE: gotemplate
CODE:
```
{{with .PDoc}}{{/*

Constants 
---------------------------------------

*/}}{{with .Consts}}{{range .}}{{range .Names}}{{.}} {{end}}{{end}}{{end}}{{/*

Variables
---------------------------------------

*/}}{{with .Vars}}{{range .}}{{range .Names}}{{.}} {{end}}{{end}}{{end}}{{/*

Functions
---------------------------------------

*/}}{{with .Funcs}}{{range .}}{{ .Name }} {{end}}{{end}}{{/*

Types
---------------------------------------

*/}}{{with .Types}}{{range .}}{{ $TypeName := .Name }}{{ $TypeName }} {{/*

*/}}{{range .Methods}}{{ $TypeName }}.{{.Name}} {{end}}{{/*

*/}}{{range .Funcs}}{{.Name}} {{end}}{{/*

*/}}{{range .Consts}}{{range .Names}}{{.}} {{end}}{{end}}{{/*

*/}}{{range .Vars}}{{range .Names}}{{.}} {{end}}{{end}}{{end}}{{end}}{{end}}
```

----------------------------------------

TITLE: Unescaped Rake Command Example
DESCRIPTION: Demonstrates how the plugin allows running rake tasks with arguments using unescaped square brackets.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rake/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
rake namespace:task['argument']
```

----------------------------------------

TITLE: Defining Unicode Sequences for Person Emojis with Variations
DESCRIPTION: This snippet defines Unicode sequences for various person emojis, including different skin tones, genders, and activities. It covers emojis like people in wheelchairs, running, dancing, and in various settings.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_26

LANGUAGE: Unicode
CODE:
```
1F469 1F3FC 200D 1F9BD                     ; fully-qualified     # 👩🏼‍🦽 woman in manual wheelchair: medium-light skin tone
1F469 1F3FD 200D 1F9BD                     ; fully-qualified     # 👩🏽‍🦽 woman in manual wheelchair: medium skin tone
1F469 1F3FE 200D 1F9BD                     ; fully-qualified     # 👩🏾‍🦽 woman in manual wheelchair: medium-dark skin tone
1F469 1F3FF 200D 1F9BD                     ; fully-qualified     # 👩🏿‍🦽 woman in manual wheelchair: dark skin tone
1F3C3                                      ; fully-qualified     # 🏃 person running
1F3C3 1F3FB                                ; fully-qualified     # 🏃🏻 person running: light skin tone
1F3C3 1F3FC                                ; fully-qualified     # 🏃🏼 person running: medium-light skin tone
1F3C3 1F3FD                                ; fully-qualified     # 🏃🏽 person running: medium skin tone
1F3C3 1F3FE                                ; fully-qualified     # 🏃🏾 person running: medium-dark skin tone
1F3C3 1F3FF                                ; fully-qualified     # 🏃🏿 person running: dark skin tone
1F3C3 200D 2642 FE0F                       ; fully-qualified     # 🏃‍♂️ man running
1F3C3 200D 2642                            ; minimally-qualified # 🏃‍♂ man running
1F3C3 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🏃🏻‍♂️ man running: light skin tone
1F3C3 1F3FB 200D 2642                      ; minimally-qualified # 🏃🏻‍♂ man running: light skin tone
1F3C3 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🏃🏼‍♂️ man running: medium-light skin tone
1F3C3 1F3FC 200D 2642                      ; minimally-qualified # 🏃🏼‍♂ man running: medium-light skin tone
1F3C3 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🏃🏽‍♂️ man running: medium skin tone
1F3C3 1F3FD 200D 2642                      ; minimally-qualified # 🏃🏽‍♂ man running: medium skin tone
1F3C3 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🏃🏾‍♂️ man running: medium-dark skin tone
1F3C3 1F3FE 200D 2642                      ; minimally-qualified # 🏃🏾‍♂ man running: medium-dark skin tone
1F3C3 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🏃🏿‍♂️ man running: dark skin tone
1F3C3 1F3FF 200D 2642                      ; minimally-qualified # 🏃🏿‍♂ man running: dark skin tone
1F3C3 200D 2640 FE0F                       ; fully-qualified     # 🏃‍♀️ woman running
1F3C3 200D 2640                            ; minimally-qualified # 🏃‍♀ woman running
1F3C3 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🏃🏻‍♀️ woman running: light skin tone
1F3C3 1F3FB 200D 2640                      ; minimally-qualified # 🏃🏻‍♀ woman running: light skin tone
1F3C3 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🏃🏼‍♀️ woman running: medium-light skin tone
1F3C3 1F3FC 200D 2640                      ; minimally-qualified # 🏃🏼‍♀ woman running: medium-light skin tone
1F3C3 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🏃🏽‍♀️ woman running: medium skin tone
1F3C3 1F3FD 200D 2640                      ; minimally-qualified # 🏃🏽‍♀ woman running: medium skin tone
1F3C3 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🏃🏾‍♀️ woman running: medium-dark skin tone
1F3C3 1F3FE 200D 2640                      ; minimally-qualified # 🏃🏾‍♀ woman running: medium-dark skin tone
1F3C3 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🏃🏿‍♀️ woman running: dark skin tone
1F3C3 1F3FF 200D 2640                      ; minimally-qualified # 🏃🏿‍♀ woman running: dark skin tone
1F483                                      ; fully-qualified     # 💃 woman dancing
1F483 1F3FB                                ; fully-qualified     # 💃🏻 woman dancing: light skin tone
1F483 1F3FC                                ; fully-qualified     # 💃🏼 woman dancing: medium-light skin tone
1F483 1F3FD                                ; fully-qualified     # 💃🏽 woman dancing: medium skin tone
1F483 1F3FE                                ; fully-qualified     # 💃🏾 woman dancing: medium-dark skin tone
1F483 1F3FF                                ; fully-qualified     # 💃🏿 woman dancing: dark skin tone
1F57A                                      ; fully-qualified     # 🕺 man dancing
1F57A 1F3FB                                ; fully-qualified     # 🕺🏻 man dancing: light skin tone
1F57A 1F3FC                                ; fully-qualified     # 🕺🏼 man dancing: medium-light skin tone
1F57A 1F3FD                                ; fully-qualified     # 🕺🏽 man dancing: medium skin tone
1F57A 1F3FE                                ; fully-qualified     # 🕺🏾 man dancing: medium-dark skin tone
1F57A 1F3FF                                ; fully-qualified     # 🕺🏿 man dancing: dark skin tone
1F574 FE0F                                 ; fully-qualified     # 🕴️ man in suit levitating
1F574                                      ; unqualified         # 🕴 man in suit levitating
1F574 1F3FB                                ; fully-qualified     # 🕴🏻 man in suit levitating: light skin tone
1F574 1F3FC                                ; fully-qualified     # 🕴🏼 man in suit levitating: medium-light skin tone
1F574 1F3FD                                ; fully-qualified     # 🕴🏽 man in suit levitating: medium skin tone
1F574 1F3FE                                ; fully-qualified     # 🕴🏾 man in suit levitating: medium-dark skin tone
1F574 1F3FF                                ; fully-qualified     # 🕴🏿 man in suit levitating: dark skin tone
1F46F                                      ; fully-qualified     # 👯 people with bunny ears
1F46F 200D 2642 FE0F                       ; fully-qualified     # 👯‍♂️ men with bunny ears
1F46F 200D 2642                            ; minimally-qualified # 👯‍♂ men with bunny ears
1F46F 200D 2640 FE0F                       ; fully-qualified     # 👯‍♀️ women with bunny ears
1F46F 200D 2640                            ; minimally-qualified # 👯‍♀ women with bunny ears
1F9D6                                      ; fully-qualified     # 🧖 person in steamy room
1F9D6 1F3FB                                ; fully-qualified     # 🧖🏻 person in steamy room: light skin tone
1F9D6 1F3FC                                ; fully-qualified     # 🧖🏼 person in steamy room: medium-light skin tone
1F9D6 1F3FD                                ; fully-qualified     # 🧖🏽 person in steamy room: medium skin tone
1F9D6 1F3FE                                ; fully-qualified     # 🧖🏾 person in steamy room: medium-dark skin tone
1F9D6 1F3FF                                ; fully-qualified     # 🧖🏿 person in steamy room: dark skin tone
1F9D6 200D 2642 FE0F                       ; fully-qualified     # 🧖‍♂️ man in steamy room
1F9D6 200D 2642                            ; minimally-qualified # 🧖‍♂ man in steamy room
1F9D6 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧖🏻‍♂️ man in steamy room: light skin tone
1F9D6 1F3FB 200D 2642                      ; minimally-qualified # 🧖🏻‍♂ man in steamy room: light skin tone
1F9D6 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🧖🏼‍♂️ man in steamy room: medium-light skin tone
1F9D6 1F3FC 200D 2642                      ; minimally-qualified # 🧖🏼‍♂ man in steamy room: medium-light skin tone
1F9D6 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🧖🏽‍♂️ man in steamy room: medium skin tone
1F9D6 1F3FD 200D 2642                      ; minimally-qualified # 🧖🏽‍♂ man in steamy room: medium skin tone
1F9D6 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🧖🏾‍♂️ man in steamy room: medium-dark skin tone
1F9D6 1F3FE 200D 2642                      ; minimally-qualified # 🧖🏾‍♂ man in steamy room: medium-dark skin tone
1F9D6 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🧖🏿‍♂️ man in steamy room: dark skin tone
1F9D6 1F3FF 200D 2642                      ; minimally-qualified # 🧖🏿‍♂ man in steamy room: dark skin tone
1F9D6 200D 2640 FE0F                       ; fully-qualified     # 🧖‍♀️ woman in steamy room
1F9D6 200D 2640                            ; minimally-qualified # 🧖‍♀ woman in steamy room
1F9D6 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🧖🏻‍♀️ woman in steamy room: light skin tone
1F9D6 1F3FB 200D 2640                      ; minimally-qualified # 🧖🏻‍♀ woman in steamy room: light skin tone
1F9D6 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🧖🏼‍♀️ woman in steamy room: medium-light skin tone
1F9D6 1F3FC 200D 2640                      ; minimally-qualified # 🧖🏼‍♀ woman in steamy room: medium-light skin tone
1F9D6 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🧖🏽‍♀️ woman in steamy room: medium skin tone
1F9D6 1F3FD 200D 2640                      ; minimally-qualified # 🧖🏽‍♀ woman in steamy room: medium skin tone
1F9D6 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🧖🏾‍♀️ woman in steamy room: medium-dark skin tone
1F9D6 1F3FE 200D 2640                      ; minimally-qualified # 🧖🏾‍♀ woman in steamy room: medium-dark skin tone
1F9D6 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🧖🏿‍♀️ woman in steamy room: dark skin tone
1F9D6 1F3FF 200D 2640                      ; minimally-qualified # 🧖🏿‍♀ woman in steamy room: dark skin tone
1F9D7                                      ; fully-qualified     # 🧗 person climbing
1F9D7 1F3FB                                ; fully-qualified     # 🧗🏻 person climbing: light skin tone
1F9D7 1F3FC                                ; fully-qualified     # 🧗🏼 person climbing: medium-light skin tone
1F9D7 1F3FD                                ; fully-qualified     # 🧗🏽 person climbing: medium skin tone
1F9D7 1F3FE                                ; fully-qualified     # 🧗🏾 person climbing: medium-dark skin tone
1F9D7 1F3FF                                ; fully-qualified     # 🧗🏿 person climbing: dark skin tone
```

----------------------------------------

TITLE: Enabling agent forwarding support in ssh-agent plugin
DESCRIPTION: Configure the ssh-agent plugin to enable agent forwarding support. This must be placed before the line that sources oh-my-zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
zstyle :omz:plugins:ssh-agent agent-forwarding yes
```

----------------------------------------

TITLE: Using the n-list Function in Zsh
DESCRIPTION: This snippet shows the basic syntax for using the `n-list` function. It takes a list of elements as arguments and presents them in an interactive, selectable list.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_4

LANGUAGE: zsh
CODE:
```
n-list {element1} [element2] ... [elementN]
```

----------------------------------------

TITLE: Loading Oh-my-zsh Plugin with Zinit - Zsh - Shell
DESCRIPTION: Demonstrates how to pull and source a specific Oh-my-zsh plugin (git plugin) using Zinit's snippet command in the user's .zshrc file. Requires Zinit installed and configured. The string OMZ::plugins/git/git.plugin.zsh specifies the plugin path, and this snippet must be placed in the user's initialization file for effect. Inputs are plugin references; output is that plugins are sourced at shell startup.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_8

LANGUAGE: shell
CODE:
```
zinit snippet OMZ::plugins/git/git.plugin.zsh`
```

----------------------------------------

TITLE: Result of Specific Book Name Completion
DESCRIPTION: Shows the result after tab completion is performed on a more specific partial book name.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dnote/README.md#2025-04-22_snippet_6

LANGUAGE: zsh
CODE:
```
$ dnote v javascript
```

----------------------------------------

TITLE: Defining Unicode Codepoints for Animal Emojis
DESCRIPTION: This snippet defines Unicode codepoints for emojis representing various animals, primarily mammals. It includes a wide range of animals from primates to farm animals and wild creatures.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_36

LANGUAGE: Unicode
CODE:
```
# subgroup: animal-mammal
1F435                                      ; fully-qualified     # 🐵 monkey face
1F412                                      ; fully-qualified     # 🐒 monkey
1F98D                                      ; fully-qualified     # 🦍 gorilla
1F9A7                                      ; fully-qualified     # 🦧 orangutan
1F436                                      ; fully-qualified     # 🐶 dog face
1F415                                      ; fully-qualified     # 🐕 dog
1F9AE                                      ; fully-qualified     # 🦮 guide dog
1F415 200D 1F9BA                           ; fully-qualified     # 🐕‍🦺 service dog
1F429                                      ; fully-qualified     # 🐩 poodle
1F43A                                      ; fully-qualified     # 🐺 wolf
1F98A                                      ; fully-qualified     # 🦊 fox
1F99D                                      ; fully-qualified     # 🦝 raccoon
1F431                                      ; fully-qualified     # 🐱 cat face
1F408                                      ; fully-qualified     # 🐈 cat
1F981                                      ; fully-qualified     # 🦁 lion
1F42F                                      ; fully-qualified     # 🐯 tiger face
1F405                                      ; fully-qualified     # 🐅 tiger
1F406                                      ; fully-qualified     # 🐆 leopard
1F434                                      ; fully-qualified     # 🐴 horse face
1F40E                                      ; fully-qualified     # 🐎 horse
1F984                                      ; fully-qualified     # 🦄 unicorn
1F993                                      ; fully-qualified     # 🦓 zebra
1F98C                                      ; fully-qualified     # 🦌 deer
1F42E                                      ; fully-qualified     # 🐮 cow face
1F402                                      ; fully-qualified     # 🐂 ox
1F403                                      ; fully-qualified     # 🐃 water buffalo
1F404                                      ; fully-qualified     # 🐄 cow
1F437                                      ; fully-qualified     # 🐷 pig face
1F416                                      ; fully-qualified     # 🐖 pig
1F417                                      ; fully-qualified     # 🐗 boar
1F43D                                      ; fully-qualified     # 🐽 pig nose
1F40F                                      ; fully-qualified     # 🐏 ram
1F411                                      ; fully-qualified     # 🐑 ewe
1F410                                      ; fully-qualified     # 🐐 goat
1F42A                                      ; fully-qualified     # 🐪 camel
1F42B                                      ; fully-qualified     # 🐫 two-hump camel
1F999                                      ; fully-qualified     # 🦙 llama
1F992                                      ; fully-qualified     # 🦒 giraffe
1F418                                      ; fully-qualified     # 🐘 elephant
1F98F                                      ; fully-qualified     # 🦏 rhinoceros
1F99B                                      ; fully-qualified     # 🦛 hippopotamus
1F42D                                      ; fully-qualified     # 🐭 mouse face
1F401                                      ; fully-qualified     # 🐁 mouse
1F400                                      ; fully-qualified     # 🐀 rat
1F439                                      ; fully-qualified     # 🐹 hamster
1F430                                      ; fully-qualified     # 🐰 rabbit face
1F407                                      ; fully-qualified     # 🐇 rabbit
1F43F FE0F                                 ; fully-qualified     # 🐿️ chipmunk
1F43F                                      ; unqualified         # 🐿 chipmunk
1F994                                      ; fully-qualified     # 🦔 hedgehog
1F987                                      ; fully-qualified     # 🦇 bat
1F43B                                      ; fully-qualified     # 🐻 bear
1F428                                      ; fully-qualified     # 🐨 koala
1F43C                                      ; fully-qualified     # 🐼 panda
1F9A5                                      ; fully-qualified     # 🦥 sloth
1F9A6                                      ; fully-qualified     # 🦦 otter
1F9A8                                      ; fully-qualified     # 🦨 skunk
1F998                                      ; fully-qualified     # 🦘 kangaroo
1F9A1                                      ; fully-qualified     # 🦡 badger
1F43E                                      ; fully-qualified     # 🐾 paw prints
```

----------------------------------------

TITLE: Loading SSH identities from custom paths
DESCRIPTION: Specify absolute paths to SSH identities located outside the default ~/.ssh directory.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_4

LANGUAGE: zsh
CODE:
```
zstyle :omz:plugins:ssh-agent identities ~/.config/ssh/id_rsa ~/.config/ssh/id_rsa2 ~/.config/ssh/id_github
```

----------------------------------------

TITLE: Defining Non-Selectable Entries for n-list in Zsh
DESCRIPTION: This Zsh code demonstrates how to make specific entries in the `n-list` display non-selectable. It involves declaring an array `NLIST_NONSELECTABLE_ELEMENTS` and populating it with the 1-based indices of the entries to disable selection for.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_5

LANGUAGE: zsh
CODE:
```
typeset -a NLIST_NONSELECTABLE_ELEMENTS
NLIST_NONSELECTABLE_ELEMENTS=( 1 )
```

----------------------------------------

TITLE: Integrating Paver Completion in Zsh
DESCRIPTION: This snippet shows how to add the Paver plugin to the Zsh configuration to enable task completion for the Paver command-line tool. It requires Oh My Zsh to be installed. Users should add 'paver' to their plugins array in the zshrc file. The configuration supports automatic caching of Paver tasks and updates them when the 'pavement.py' file changes.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/paver/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... paver)
```

----------------------------------------

TITLE: Demonstrating Basic Dnote Command Completion
DESCRIPTION: Shows how tab completion works for Dnote commands, completing 'a' to 'add' when tab is pressed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dnote/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
$ dnote a(press <TAB> here)
```

----------------------------------------

TITLE: Defining Monkey-Face Emojis (Unicode)
DESCRIPTION: Lists Unicode code points, qualification status, and descriptions for the three 'wise monkey' emojis categorized under 'monkey-face': see-no-evil, hear-no-evil, and speak-no-evil. Each line follows the format: <Unicode sequence> ; <qualification> # <description>.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_4

LANGUAGE: plaintext
CODE:
```
# subgroup: monkey-face
1F648                                      ; fully-qualified     # 🙈 see-no-evil monkey
1F649                                      ; fully-qualified     # 🙉 hear-no-evil monkey
1F64A                                      ; fully-qualified     # 🙊 speak-no-evil monkey
```

----------------------------------------

TITLE: Unicode Emoji Code Point Definitions for Shrugging Gestures
DESCRIPTION: Defines the Unicode code point sequences for shrugging emoji with gender and skin tone modifiers. Each line contains the hex code points, qualification status, and the resulting emoji with description.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_18

LANGUAGE: unicode
CODE:
```
1F937 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🤷🏽‍♂️ man shrugging: medium skin tone
1F937 1F3FD 200D 2642                      ; minimally-qualified # 🤷🏽‍♂ man shrugging: medium skin tone
1F937 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🤷🏾‍♂️ man shrugging: medium-dark skin tone
1F937 1F3FE 200D 2642                      ; minimally-qualified # 🤷🏾‍♂ man shrugging: medium-dark skin tone
1F937 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🤷🏿‍♂️ man shrugging: dark skin tone
1F937 1F3FF 200D 2642                      ; minimally-qualified # 🤷🏿‍♂ man shrugging: dark skin tone
1F937 200D 2640 FE0F                       ; fully-qualified     # 🤷‍♀️ woman shrugging
1F937 200D 2640                            ; minimally-qualified # 🤷‍♀ woman shrugging
1F937 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🤷🏻‍♀️ woman shrugging: light skin tone
1F937 1F3FB 200D 2640                      ; minimally-qualified # 🤷🏻‍♀ woman shrugging: light skin tone
1F937 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🤷🏼‍♀️ woman shrugging: medium-light skin tone
1F937 1F3FC 200D 2640                      ; minimally-qualified # 🤷🏼‍♀ woman shrugging: medium-light skin tone
1F937 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🤷🏽‍♀️ woman shrugging: medium skin tone
1F937 1F3FD 200D 2640                      ; minimally-qualified # 🤷🏽‍♀ woman shrugging: medium skin tone
1F937 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🤷🏾‍♀️ woman shrugging: medium-dark skin tone
1F937 1F3FE 200D 2640                      ; minimally-qualified # 🤷🏾‍♀ woman shrugging: medium-dark skin tone
1F937 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🤷🏿‍♀️ woman shrugging: dark skin tone
1F937 1F3FF 200D 2640                      ; minimally-qualified # 🤷🏿‍♀ woman shrugging: dark skin tone
```

----------------------------------------

TITLE: Colorizing n-list Output Using Zsh Patterns
DESCRIPTION: This Zsh snippet demonstrates how to automatically colorize parts of the `n-list` entries based on Zsh patterns. It sets variables like `NLIST_COLORING_PATTERN` (for the pattern), `NLIST_COLORING_COLOR` (start ANSI code), `NLIST_COLORING_END_COLOR` (end ANSI code), and `NLIST_COLORING_MATCH_MULTIPLE` before calling `n-list`. This example colors numbers blue.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_7

LANGUAGE: zsh
CODE:
```
local NLIST_COLORING_PATTERN="[0-9]##"
local NLIST_COLORING_COLOR=$'\x1b[00;34m'
local NLIST_COLORING_END_COLOR=$'\x1b[0m'
local NLIST_COLORING_MATCH_MULTIPLE=1

n-list "This is a number 123" "This line too has a number: 456"
```

----------------------------------------

TITLE: Toggling Path Shrinking with Zstyle
DESCRIPTION: Commands to toggle path shrinking on and off using zstyle configuration.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shrink-path/README.md#2025-04-22_snippet_5

LANGUAGE: zsh
CODE:
```
# Toggle off path shrinking
zstyle ':prompt:shrink_path' expand true
# Toggle on path shrinking
zstyle -d ':prompt:shrink_path' expand
```

----------------------------------------

TITLE: Defining Zodiac Emoji Unicode Characters
DESCRIPTION: This snippet defines Unicode characters for zodiac sign emojis. All characters in this subgroup are fully-qualified and represent the twelve zodiac signs plus Ophiuchus.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_53

LANGUAGE: Unicode
CODE:
```
# subgroup: zodiac
2648                                       ; fully-qualified     # ♈ Aries
2649                                       ; fully-qualified     # ♉ Taurus
264A                                       ; fully-qualified     # ♊ Gemini
264B                                       ; fully-qualified     # ♋ Cancer
264C                                       ; fully-qualified     # ♌ Leo
264D                                       ; fully-qualified     # ♍ Virgo
264E                                       ; fully-qualified     # ♎ Libra
264F                                       ; fully-qualified     # ♏ Scorpio
2650                                       ; fully-qualified     # ♐ Sagittarius
2651                                       ; fully-qualified     # ♑ Capricorn
2652                                       ; fully-qualified     # ♒ Aquarius
2653                                       ; fully-qualified     # ♓ Pisces
26CE                                       ; fully-qualified     # ⛎ Ophiuchus
```

----------------------------------------

TITLE: Installing wd using Antibody
DESCRIPTION: Configuration code to install the wd plugin using the Antibody plugin manager for zsh in the .zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_2

LANGUAGE: zsh
CODE:
```
antibody bundle mfaerevaag/wd
```

----------------------------------------

TITLE: Unicode Mapping for Religious Place Emoji
DESCRIPTION: Defines Unicode values for religious building emoji including churches, mosques, temples, and shrines. Contains both fully-qualified and unqualified versions for specific emoji.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_38

LANGUAGE: txt
CODE:
```
26EA                                       ; fully-qualified     # ⛪ church
1F54C                                      ; fully-qualified     # 🕌 mosque
1F6D5                                      ; fully-qualified     # 🛕 hindu temple
```

----------------------------------------

TITLE: Configuring Nanoc Plugin in Oh My Zsh (Zsh)
DESCRIPTION: This snippet demonstrates how to add the Nanoc plugin to the list of enabled plugins in your .zshrc file by including \"nanoc\" within the plugins array. No external dependencies are required aside from Oh My Zsh and the Nanoc plugin itself. The key parameter is the plugin name, which must be added to activate command aliases and autocompletion for Nanoc tasks. The expected result is enhanced shell functionality related to Nanoc sites. Be sure Oh My Zsh and the Nanoc plugin are installed in your environment.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nanoc/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... nanoc)
```

----------------------------------------

TITLE: Enabling the nodenv Plugin in Oh My Zsh (Zsh)
DESCRIPTION: Shows how to add the `nodenv` plugin to the `plugins` array within the user's `.zshrc` file. This step activates the nodenv plugin, making its functions available in the Zsh session. Requires Oh My Zsh to be installed.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nodenv/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... nodenv)
```

----------------------------------------

TITLE: Defining Gender Emoji Unicode Characters
DESCRIPTION: This snippet defines Unicode characters for gender symbols. It includes both fully-qualified and unqualified versions of the female and male signs.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_55

LANGUAGE: Unicode
CODE:
```
# subgroup: gender
2640 FE0F                                  ; fully-qualified     # ♀️ female sign
2640                                       ; unqualified         # ♀ female sign
2642 FE0F                                  ; fully-qualified     # ♂️ male sign
2642                                       ; unqualified         # ♂ male sign
```

----------------------------------------

TITLE: Running wd tests
DESCRIPTION: Commands to navigate to the test directory and run the tests script to verify wd functionality using shunit2.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_31

LANGUAGE: zsh
CODE:
```
cd ./test
./tests.sh
```

----------------------------------------

TITLE: Flag Symbols Unicode Mapping
DESCRIPTION: Unicode mappings for flag-related emoji including standard flags, pride flags, and specialized flag variants.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_60

LANGUAGE: plaintext
CODE:
```
1F3C1                                      ; fully-qualified     # 🏁 chequered flag
1F6A9                                      ; fully-qualified     # 🚩 triangular flag
1F38C                                      ; fully-qualified     # 🎌 crossed flags
```

----------------------------------------

TITLE: Enabling Cask Plugin in Oh My Zsh Configuration
DESCRIPTION: This code snippet shows how to enable the Cask plugin in the Oh My Zsh configuration. It demonstrates adding 'cask' to the plugins array in the .zshrc file.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/cask/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... cask)
```

----------------------------------------

TITLE: Initializing Knative CLI Plugin in Zsh
DESCRIPTION: This snippet demonstrates how to enable the Knative CLI plugin for autocompletion in Oh My Zsh. Dependencies include Oh My Zsh and the knative client. To use the plugin, add 'kn' to your zshrc file's plugins array. This setup enhances the command-line experience by providing autocompletions for kn commands.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kn/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... kn)
```

----------------------------------------

TITLE: Listing Fantasy Character Emoji Unicode Codepoints with Variations
DESCRIPTION: This code snippet contains Unicode codepoint sequences for various fantasy character emojis including mages, fairies, vampires, and merpeople. Each line provides the hexadecimal Unicode sequence, qualification status, and the resulting emoji with its description including gender and skin tone variants.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_23

LANGUAGE: Unicode
CODE:
```
1F9D9 200D 2640                            ; minimally-qualified # 🧙‍♀ woman mage
1F9D9 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🧙🏻‍♀️ woman mage: light skin tone
1F9D9 1F3FB 200D 2640                      ; minimally-qualified # 🧙🏻‍♀ woman mage: light skin tone
1F9D9 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🧙🏼‍♀️ woman mage: medium-light skin tone
1F9D9 1F3FC 200D 2640                      ; minimally-qualified # 🧙🏼‍♀ woman mage: medium-light skin tone
1F9D9 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🧙🏽‍♀️ woman mage: medium skin tone
1F9D9 1F3FD 200D 2640                      ; minimally-qualified # 🧙🏽‍♀ woman mage: medium skin tone
1F9D9 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🧙🏾‍♀️ woman mage: medium-dark skin tone
1F9D9 1F3FE 200D 2640                      ; minimally-qualified # 🧙🏾‍♀ woman mage: medium-dark skin tone
1F9D9 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🧙🏿‍♀️ woman mage: dark skin tone
1F9D9 1F3FF 200D 2640                      ; minimally-qualified # 🧙🏿‍♀ woman mage: dark skin tone
1F9DA                                      ; fully-qualified     # 🧚 fairy
1F9DA 1F3FB                                ; fully-qualified     # 🧚🏻 fairy: light skin tone
1F9DA 1F3FC                                ; fully-qualified     # 🧚🏼 fairy: medium-light skin tone
1F9DA 1F3FD                                ; fully-qualified     # 🧚🏽 fairy: medium skin tone
1F9DA 1F3FE                                ; fully-qualified     # 🧚🏾 fairy: medium-dark skin tone
1F9DA 1F3FF                                ; fully-qualified     # 🧚🏿 fairy: dark skin tone
1F9DA 200D 2642 FE0F                       ; fully-qualified     # 🧚‍♂️ man fairy
1F9DA 200D 2642                            ; minimally-qualified # 🧚‍♂ man fairy
1F9DA 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧚🏻‍♂️ man fairy: light skin tone
1F9DA 1F3FB 200D 2642                      ; minimally-qualified # 🧚🏻‍♂ man fairy: light skin tone
1F9DA 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🧚🏼‍♂️ man fairy: medium-light skin tone
1F9DA 1F3FC 200D 2642                      ; minimally-qualified # 🧚🏼‍♂ man fairy: medium-light skin tone
1F9DA 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🧚🏽‍♂️ man fairy: medium skin tone
1F9DA 1F3FD 200D 2642                      ; minimally-qualified # 🧚🏽‍♂ man fairy: medium skin tone
1F9DA 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🧚🏾‍♂️ man fairy: medium-dark skin tone
1F9DA 1F3FE 200D 2642                      ; minimally-qualified # 🧚🏾‍♂ man fairy: medium-dark skin tone
1F9DA 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🧚🏿‍♂️ man fairy: dark skin tone
1F9DA 1F3FF 200D 2642                      ; minimally-qualified # 🧚🏿‍♂ man fairy: dark skin tone
1F9DA 200D 2640 FE0F                       ; fully-qualified     # 🧚‍♀️ woman fairy
1F9DA 200D 2640                            ; minimally-qualified # 🧚‍♀ woman fairy
1F9DA 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🧚🏻‍♀️ woman fairy: light skin tone
1F9DA 1F3FB 200D 2640                      ; minimally-qualified # 🧚🏻‍♀ woman fairy: light skin tone
1F9DA 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🧚🏼‍♀️ woman fairy: medium-light skin tone
1F9DA 1F3FC 200D 2640                      ; minimally-qualified # 🧚🏼‍♀ woman fairy: medium-light skin tone
1F9DA 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🧚🏽‍♀️ woman fairy: medium skin tone
1F9DA 1F3FD 200D 2640                      ; minimally-qualified # 🧚🏽‍♀ woman fairy: medium skin tone
1F9DA 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🧚🏾‍♀️ woman fairy: medium-dark skin tone
1F9DA 1F3FE 200D 2640                      ; minimally-qualified # 🧚🏾‍♀ woman fairy: medium-dark skin tone
1F9DA 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🧚🏿‍♀️ woman fairy: dark skin tone
1F9DA 1F3FF 200D 2640                      ; minimally-qualified # 🧚🏿‍♀ woman fairy: dark skin tone
1F9DB                                      ; fully-qualified     # 🧛 vampire
1F9DB 1F3FB                                ; fully-qualified     # 🧛🏻 vampire: light skin tone
1F9DB 1F3FC                                ; fully-qualified     # 🧛🏼 vampire: medium-light skin tone
1F9DB 1F3FD                                ; fully-qualified     # 🧛🏽 vampire: medium skin tone
1F9DB 1F3FE                                ; fully-qualified     # 🧛🏾 vampire: medium-dark skin tone
1F9DB 1F3FF                                ; fully-qualified     # 🧛🏿 vampire: dark skin tone
1F9DB 200D 2642 FE0F                       ; fully-qualified     # 🧛‍♂️ man vampire
1F9DB 200D 2642                            ; minimally-qualified # 🧛‍♂ man vampire
1F9DB 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧛🏻‍♂️ man vampire: light skin tone
1F9DB 1F3FB 200D 2642                      ; minimally-qualified # 🧛🏻‍♂ man vampire: light skin tone
1F9DB 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🧛🏼‍♂️ man vampire: medium-light skin tone
1F9DB 1F3FC 200D 2642                      ; minimally-qualified # 🧛🏼‍♂ man vampire: medium-light skin tone
1F9DB 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🧛🏽‍♂️ man vampire: medium skin tone
1F9DB 1F3FD 200D 2642                      ; minimally-qualified # 🧛🏽‍♂ man vampire: medium skin tone
1F9DB 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🧛🏾‍♂️ man vampire: medium-dark skin tone
1F9DB 1F3FE 200D 2642                      ; minimally-qualified # 🧛🏾‍♂ man vampire: medium-dark skin tone
1F9DB 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🧛🏿‍♂️ man vampire: dark skin tone
1F9DB 1F3FF 200D 2642                      ; minimally-qualified # 🧛🏿‍♂ man vampire: dark skin tone
1F9DB 200D 2640 FE0F                       ; fully-qualified     # 🧛‍♀️ woman vampire
1F9DB 200D 2640                            ; minimally-qualified # 🧛‍♀ woman vampire
1F9DB 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🧛🏻‍♀️ woman vampire: light skin tone
1F9DB 1F3FB 200D 2640                      ; minimally-qualified # 🧛🏻‍♀ woman vampire: light skin tone
1F9DB 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🧛🏼‍♀️ woman vampire: medium-light skin tone
1F9DB 1F3FC 200D 2640                      ; minimally-qualified # 🧛🏼‍♀ woman vampire: medium-light skin tone
1F9DB 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🧛🏽‍♀️ woman vampire: medium skin tone
1F9DB 1F3FD 200D 2640                      ; minimally-qualified # 🧛🏽‍♀ woman vampire: medium skin tone
1F9DB 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🧛🏾‍♀️ woman vampire: medium-dark skin tone
1F9DB 1F3FE 200D 2640                      ; minimally-qualified # 🧛🏾‍♀ woman vampire: medium-dark skin tone
1F9DB 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🧛🏿‍♀️ woman vampire: dark skin tone
1F9DB 1F3FF 200D 2640                      ; minimally-qualified # 🧛🏿‍♀ woman vampire: dark skin tone
1F9DC                                      ; fully-qualified     # 🧜 merperson
1F9DC 1F3FB                                ; fully-qualified     # 🧜🏻 merperson: light skin tone
1F9DC 1F3FC                                ; fully-qualified     # 🧜🏼 merperson: medium-light skin tone
1F9DC 1F3FD                                ; fully-qualified     # 🧜🏽 merperson: medium skin tone
1F9DC 1F3FE                                ; fully-qualified     # 🧜🏾 merperson: medium-dark skin tone
1F9DC 1F3FF                                ; fully-qualified     # 🧜🏿 merperson: dark skin tone
1F9DC 200D 2642 FE0F                       ; fully-qualified     # 🧜‍♂️ merman
1F9DC 200D 2642                            ; minimally-qualified # 🧜‍♂ merman
1F9DC 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧜🏻‍♂️ merman: light skin tone
1F9DC 1F3FB 200D 2642                      ; minimally-qualified # 🧜🏻‍♂ merman: light skin tone
1F9DC 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🧜🏼‍♂️ merman: medium-light skin tone
1F9DC 1F3FC 200D 2642                      ; minimally-qualified # 🧜🏼‍♂ merman: medium-light skin tone
1F9DC 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🧜🏽‍♂️ merman: medium skin tone
1F9DC 1F3FD 200D 2642                      ; minimally-qualified # 🧜🏽‍♂ merman: medium skin tone
1F9DC 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🧜🏾‍♂️ merman: medium-dark skin tone
1F9DC 1F3FE 200D 2642                      ; minimally-qualified # 🧜🏾‍♂ merman: medium-dark skin tone
1F9DC 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🧜🏿‍♂️ merman: dark skin tone
1F9DC 1F3FF 200D 2642                      ; minimally-qualified # 🧜🏿‍♂ merman: dark skin tone
1F9DC 200D 2640 FE0F                       ; fully-qualified     # 🧜‍♀️ mermaid
1F9DC 200D 2640                            ; minimally-qualified # 🧜‍♀ mermaid
1F9DC 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🧜🏻‍♀️ mermaid: light skin tone
1F9DC 1F3FB 200D 2640                      ; minimally-qualified # 🧜🏻‍♀ mermaid: light skin tone
1F9DC 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🧜🏼‍♀️ mermaid: medium-light skin tone
1F9DC 1F3FC 200D 2640                      ; minimally-qualified # 🧜🏼‍♀ mermaid: medium-light skin tone
1F9DC 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🧜🏽‍♀️ mermaid: medium skin tone
1F9DC 1F3FD 200D 2640                      ; minimally-qualified # 🧜🏽‍♀ mermaid: medium skin tone
1F9DC 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🧜🏾‍♀️ mermaid: medium-dark skin tone
1F9DC 1F3FE 200D 2640                      ; minimally-qualified # 🧜🏾‍♀ mermaid: medium-dark skin tone
```

----------------------------------------

TITLE: Invoking genpass-monkey Command
DESCRIPTION: This snippet demonstrates the use of the genpass-monkey generator, which creates random strings utilizing Crockford's base32 encoding. Users can request multiple passwords by specifying a numeric argument.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/genpass/README.md#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
% genpass-monkey
```

LANGUAGE: Shell
CODE:
```
% genpass-monkey 3
```

----------------------------------------

TITLE: Invoking genpass-xkcd Command
DESCRIPTION: This snippet explains the genpass-xkcd generator, which produces passphrases inspired by the XKCD comic. Each passphrase starts with a digit and consists of words from '/usr/share/dict/words'. Multiple passphrases can be created by providing a number.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/genpass/README.md#2025-04-22_snippet_3

LANGUAGE: Shell
CODE:
```
% genpass-xkcd
```

LANGUAGE: Shell
CODE:
```
% genpass-xkcd 3
```

----------------------------------------

TITLE: Disabling Automatic Virtualenv Activation
DESCRIPTION: Shows how to disable the automatic virtualenv activation behavior by setting the DISABLE_VENV_CD variable before sourcing Oh My Zsh.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/virtualenvwrapper/README.md#2025-04-22_snippet_3

LANGUAGE: zsh
CODE:
```
DISABLE_VENV_CD=1
plugins=(... virtualenvwrapper)
source $ZSH/oh-my-zsh.sh
```

----------------------------------------

TITLE: Defining Unicode Codepoints for Person-Fantasy Emojis
DESCRIPTION: This code block defines Unicode codepoints for fantasy character emojis with their variations including different skin tones and gender combinations. It includes fully-qualified and minimally-qualified versions of each emoji.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_22

LANGUAGE: plaintext
CODE:
```
# subgroup: person-fantasy
1F47C                                      ; fully-qualified     # 👼 baby angel
1F47C 1F3FB                                ; fully-qualified     # 👼🏻 baby angel: light skin tone
1F47C 1F3FC                                ; fully-qualified     # 👼🏼 baby angel: medium-light skin tone
1F47C 1F3FD                                ; fully-qualified     # 👼🏽 baby angel: medium skin tone
1F47C 1F3FE                                ; fully-qualified     # 👼🏾 baby angel: medium-dark skin tone
1F47C 1F3FF                                ; fully-qualified     # 👼🏿 baby angel: dark skin tone
1F385                                      ; fully-qualified     # 🎅 Santa Claus
1F385 1F3FB                                ; fully-qualified     # 🎅🏻 Santa Claus: light skin tone
1F385 1F3FC                                ; fully-qualified     # 🎅🏼 Santa Claus: medium-light skin tone
1F385 1F3FD                                ; fully-qualified     # 🎅🏽 Santa Claus: medium skin tone
1F385 1F3FE                                ; fully-qualified     # 🎅🏾 Santa Claus: medium-dark skin tone
1F385 1F3FF                                ; fully-qualified     # 🎅🏿 Santa Claus: dark skin tone
1F936                                      ; fully-qualified     # 🤶 Mrs. Claus
1F936 1F3FB                                ; fully-qualified     # 🤶🏻 Mrs. Claus: light skin tone
1F936 1F3FC                                ; fully-qualified     # 🤶🏼 Mrs. Claus: medium-light skin tone
1F936 1F3FD                                ; fully-qualified     # 🤶🏽 Mrs. Claus: medium skin tone
1F936 1F3FE                                ; fully-qualified     # 🤶🏾 Mrs. Claus: medium-dark skin tone
1F936 1F3FF                                ; fully-qualified     # 🤶🏿 Mrs. Claus: dark skin tone
1F9B8                                      ; fully-qualified     # 🦸 superhero
1F9B8 1F3FB                                ; fully-qualified     # 🦸🏻 superhero: light skin tone
1F9B8 1F3FC                                ; fully-qualified     # 🦸🏼 superhero: medium-light skin tone
1F9B8 1F3FD                                ; fully-qualified     # 🦸🏽 superhero: medium skin tone
1F9B8 1F3FE                                ; fully-qualified     # 🦸🏾 superhero: medium-dark skin tone
1F9B8 1F3FF                                ; fully-qualified     # 🦸🏿 superhero: dark skin tone
1F9B8 200D 2642 FE0F                       ; fully-qualified     # 🦸‍♂️ man superhero
1F9B8 200D 2642                            ; minimally-qualified # 🦸‍♂ man superhero
1F9B8 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🦸🏻‍♂️ man superhero: light skin tone
1F9B8 1F3FB 200D 2642                      ; minimally-qualified # 🦸🏻‍♂ man superhero: light skin tone
1F9B8 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🦸🏼‍♂️ man superhero: medium-light skin tone
1F9B8 1F3FC 200D 2642                      ; minimally-qualified # 🦸🏼‍♂ man superhero: medium-light skin tone
1F9B8 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🦸🏽‍♂️ man superhero: medium skin tone
1F9B8 1F3FD 200D 2642                      ; minimally-qualified # 🦸🏽‍♂ man superhero: medium skin tone
1F9B8 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🦸🏾‍♂️ man superhero: medium-dark skin tone
1F9B8 1F3FE 200D 2642                      ; minimally-qualified # 🦸🏾‍♂ man superhero: medium-dark skin tone
1F9B8 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🦸🏿‍♂️ man superhero: dark skin tone
1F9B8 1F3FF 200D 2642                      ; minimally-qualified # 🦸🏿‍♂ man superhero: dark skin tone
1F9B8 200D 2640 FE0F                       ; fully-qualified     # 🦸‍♀️ woman superhero
1F9B8 200D 2640                            ; minimally-qualified # 🦸‍♀ woman superhero
1F9B8 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🦸🏻‍♀️ woman superhero: light skin tone
1F9B8 1F3FB 200D 2640                      ; minimally-qualified # 🦸🏻‍♀ woman superhero: light skin tone
1F9B8 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🦸🏼‍♀️ woman superhero: medium-light skin tone
1F9B8 1F3FC 200D 2640                      ; minimally-qualified # 🦸🏼‍♀ woman superhero: medium-light skin tone
1F9B8 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🦸🏽‍♀️ woman superhero: medium skin tone
1F9B8 1F3FD 200D 2640                      ; minimally-qualified # 🦸🏽‍♀ woman superhero: medium skin tone
1F9B8 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🦸🏾‍♀️ woman superhero: medium-dark skin tone
1F9B8 1F3FE 200D 2640                      ; minimally-qualified # 🦸🏾‍♀ woman superhero: medium-dark skin tone
1F9B8 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🦸🏿‍♀️ woman superhero: dark skin tone
1F9B8 1F3FF 200D 2640                      ; minimally-qualified # 🦸🏿‍♀ woman superhero: dark skin tone
1F9B9                                      ; fully-qualified     # 🦹 supervillain
1F9B9 1F3FB                                ; fully-qualified     # 🦹🏻 supervillain: light skin tone
1F9B9 1F3FC                                ; fully-qualified     # 🦹🏼 supervillain: medium-light skin tone
1F9B9 1F3FD                                ; fully-qualified     # 🦹🏽 supervillain: medium skin tone
1F9B9 1F3FE                                ; fully-qualified     # 🦹🏾 supervillain: medium-dark skin tone
1F9B9 1F3FF                                ; fully-qualified     # 🦹🏿 supervillain: dark skin tone
1F9B9 200D 2642 FE0F                       ; fully-qualified     # 🦹‍♂️ man supervillain
1F9B9 200D 2642                            ; minimally-qualified # 🦹‍♂ man supervillain
1F9B9 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🦹🏻‍♂️ man supervillain: light skin tone
1F9B9 1F3FB 200D 2642                      ; minimally-qualified # 🦹🏻‍♂ man supervillain: light skin tone
1F9B9 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🦹🏼‍♂️ man supervillain: medium-light skin tone
1F9B9 1F3FC 200D 2642                      ; minimally-qualified # 🦹🏼‍♂ man supervillain: medium-light skin tone
1F9B9 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🦹🏽‍♂️ man supervillain: medium skin tone
1F9B9 1F3FD 200D 2642                      ; minimally-qualified # 🦹🏽‍♂ man supervillain: medium skin tone
1F9B9 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🦹🏾‍♂️ man supervillain: medium-dark skin tone
1F9B9 1F3FE 200D 2642                      ; minimally-qualified # 🦹🏾‍♂ man supervillain: medium-dark skin tone
1F9B9 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🦹🏿‍♂️ man supervillain: dark skin tone
1F9B9 1F3FF 200D 2642                      ; minimally-qualified # 🦹🏿‍♂ man supervillain: dark skin tone
1F9B9 200D 2640 FE0F                       ; fully-qualified     # 🦹‍♀️ woman supervillain
1F9B9 200D 2640                            ; minimally-qualified # 🦹‍♀ woman supervillain
1F9B9 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🦹🏻‍♀️ woman supervillain: light skin tone
1F9B9 1F3FB 200D 2640                      ; minimally-qualified # 🦹🏻‍♀ woman supervillain: light skin tone
1F9B9 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🦹🏼‍♀️ woman supervillain: medium-light skin tone
1F9B9 1F3FC 200D 2640                      ; minimally-qualified # 🦹🏼‍♀ woman supervillain: medium-light skin tone
1F9B9 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🦹🏽‍♀️ woman supervillain: medium skin tone
1F9B9 1F3FD 200D 2640                      ; minimally-qualified # 🦹🏽‍♀ woman supervillain: medium skin tone
1F9B9 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🦹🏾‍♀️ woman supervillain: medium-dark skin tone
1F9B9 1F3FE 200D 2640                      ; minimally-qualified # 🦹🏾‍♀ woman supervillain: medium-dark skin tone
1F9B9 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🦹🏿‍♀️ woman supervillain: dark skin tone
1F9B9 1F3FF 200D 2640                      ; minimally-qualified # 🦹🏿‍♀ woman supervillain: dark skin tone
1F9D9                                      ; fully-qualified     # 🧙 mage
1F9D9 1F3FB                                ; fully-qualified     # 🧙🏻 mage: light skin tone
1F9D9 1F3FC                                ; fully-qualified     # 🧙🏼 mage: medium-light skin tone
1F9D9 1F3FD                                ; fully-qualified     # 🧙🏽 mage: medium skin tone
1F9D9 1F3FE                                ; fully-qualified     # 🧙🏾 mage: medium-dark skin tone
1F9D9 1F3FF                                ; fully-qualified     # 🧙🏿 mage: dark skin tone
1F9D9 200D 2642 FE0F                       ; fully-qualified     # 🧙‍♂️ man mage
1F9D9 200D 2642                            ; minimally-qualified # 🧙‍♂ man mage
1F9D9 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧙🏻‍♂️ man mage: light skin tone
1F9D9 1F3FB 200D 2642                      ; minimally-qualified # 🧙🏻‍♂ man mage: light skin tone
1F9D9 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🧙🏼‍♂️ man mage: medium-light skin tone
1F9D9 1F3FC 200D 2642                      ; minimally-qualified # 🧙🏼‍♂ man mage: medium-light skin tone
1F9D9 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🧙🏽‍♂️ man mage: medium skin tone
1F9D9 1F3FD 200D 2642                      ; minimally-qualified # 🧙🏽‍♂ man mage: medium skin tone
1F9D9 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🧙🏾‍♂️ man mage: medium-dark skin tone
1F9D9 1F3FE 200D 2642                      ; minimally-qualified # 🧙🏾‍♂ man mage: medium-dark skin tone
1F9D9 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🧙🏿‍♂️ man mage: dark skin tone
1F9D9 1F3FF 200D 2642                      ; minimally-qualified # 🧙🏿‍♂ man mage: dark skin tone
1F9D9 200D 2640 FE0F                       ; fully-qualified     # 🧙‍♀️ woman mage
```

----------------------------------------

TITLE: Example Systemd Prompt Output
DESCRIPTION: Shows how the systemd_prompt_info function would display in the prompt when dhcpd is running and httpd is not, with the custom configuration variables set.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/systemd/README.md#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
[DHCPD: +][HTTPD: X]
```

----------------------------------------

TITLE: Enabling the UV Plugin in Oh My Zsh
DESCRIPTION: Code snippet showing how to add the uv plugin to the plugins array in your zshrc file. This enables the plugin's functionality within your Oh My Zsh environment.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/uv/README.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
plugins=(... uv)
```

----------------------------------------

TITLE: Mapping Unicode Codepoints to Body Part Emojis (Text)
DESCRIPTION: This data block lists Unicode codepoints for body part emojis like biceps, leg, foot, ear, nose, brain, tooth, bone, eyes, tongue, and mouth. It includes fully-qualified codepoints and variations for different skin tones using modifier codepoints (1F3FB to 1F3FF). The format specifies the codepoint(s), qualification status (e.g., 'fully-qualified', 'unqualified'), the rendered emoji, and a textual description.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_9

LANGUAGE: text
CODE:
```
# subgroup: body-parts
1F4AA                                      ; fully-qualified     # 💪 flexed biceps
1F4AA 1F3FB                                ; fully-qualified     # 💪🏻 flexed biceps: light skin tone
1F4AA 1F3FC                                ; fully-qualified     # 💪🏼 flexed biceps: medium-light skin tone
1F4AA 1F3FD                                ; fully-qualified     # 💪🏽 flexed biceps: medium skin tone
1F4AA 1F3FE                                ; fully-qualified     # 💪🏾 flexed biceps: medium-dark skin tone
1F4AA 1F3FF                                ; fully-qualified     # 💪🏿 flexed biceps: dark skin tone
1F9BE                                      ; fully-qualified     # 🦾 mechanical arm
1F9BF                                      ; fully-qualified     # 🦿 mechanical leg
1F9B5                                      ; fully-qualified     # 🦵 leg
1F9B5 1F3FB                                ; fully-qualified     # 🦵🏻 leg: light skin tone
1F9B5 1F3FC                                ; fully-qualified     # 🦵🏼 leg: medium-light skin tone
1F9B5 1F3FD                                ; fully-qualified     # 🦵🏽 leg: medium skin tone
1F9B5 1F3FE                                ; fully-qualified     # 🦵🏾 leg: medium-dark skin tone
1F9B5 1F3FF                                ; fully-qualified     # 🦵🏿 leg: dark skin tone
1F9B6                                      ; fully-qualified     # 🦶 foot
1F9B6 1F3FB                                ; fully-qualified     # 🦶🏻 foot: light skin tone
1F9B6 1F3FC                                ; fully-qualified     # 🦶🏼 foot: medium-light skin tone
1F9B6 1F3FD                                ; fully-qualified     # 🦶🏽 foot: medium skin tone
1F9B6 1F3FE                                ; fully-qualified     # 🦶🏾 foot: medium-dark skin tone
1F9B6 1F3FF                                ; fully-qualified     # 🦶🏿 foot: dark skin tone
1F442                                      ; fully-qualified     # 👂 ear
1F442 1F3FB                                ; fully-qualified     # 👂🏻 ear: light skin tone
1F442 1F3FC                                ; fully-qualified     # 👂🏼 ear: medium-light skin tone
1F442 1F3FD                                ; fully-qualified     # 👂🏽 ear: medium skin tone
1F442 1F3FE                                ; fully-qualified     # 👂🏾 ear: medium-dark skin tone
1F442 1F3FF                                ; fully-qualified     # 👂🏿 ear: dark skin tone
1F9BB                                      ; fully-qualified     # 🦻 ear with hearing aid
1F9BB 1F3FB                                ; fully-qualified     # 🦻🏻 ear with hearing aid: light skin tone
1F9BB 1F3FC                                ; fully-qualified     # 🦻🏼 ear with hearing aid: medium-light skin tone
1F9BB 1F3FD                                ; fully-qualified     # 🦻🏽 ear with hearing aid: medium skin tone
1F9BB 1F3FE                                ; fully-qualified     # 🦻🏾 ear with hearing aid: medium-dark skin tone
1F9BB 1F3FF                                ; fully-qualified     # 🦻🏿 ear with hearing aid: dark skin tone
1F443                                      ; fully-qualified     # 👃 nose
1F443 1F3FB                                ; fully-qualified     # 👃🏻 nose: light skin tone
1F443 1F3FC                                ; fully-qualified     # 👃🏼 nose: medium-light skin tone
1F443 1F3FD                                ; fully-qualified     # 👃🏽 nose: medium skin tone
1F443 1F3FE                                ; fully-qualified     # 👃🏾 nose: medium-dark skin tone
1F443 1F3FF                                ; fully-qualified     # 👃🏿 nose: dark skin tone
1F9E0                                      ; fully-qualified     # 🧠 brain
1F9B7                                      ; fully-qualified     # 🦷 tooth
1F9B4                                      ; fully-qualified     # 🦴 bone
1F440                                      ; fully-qualified     # 👀 eyes
1F441 FE0F                                 ; fully-qualified     # 👁️ eye
1F441                                      ; unqualified         # 👁 eye
1F445                                      ; fully-qualified     # 👅 tongue
1F444                                      ; fully-qualified     # 👄 mouth
```

----------------------------------------

TITLE: Adding Jake Plugin to Oh My Zsh Configuration (Bash)
DESCRIPTION: This Bash snippet shows how to add the `jake-node` plugin to the `plugins` array within the `.zshrc` file. This enables Oh My Zsh's completion features for the Jake JavaScript build tool. The `...` indicates that other existing plugins in the array should remain.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jake-node/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
plugins=(... jake-node)
```

----------------------------------------

TITLE: Defining Single Finger Hand Emojis in Unicode
DESCRIPTION: A structured list of Unicode codepoints for single finger hand gestures including pointing left, right, up, and down, middle finger, and index pointing up, with all skin tone variations.
SOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_8

LANGUAGE: text
CODE:
```
# subgroup: hand-single-finger
1F448                                      ; fully-qualified     # 👈 backhand index pointing left
1F448 1F3FB                                ; fully-qualified     # 👈🏻 backhand index pointing left: light skin tone
1F448 1F3FC                                ; fully-qualified     # 👈🏼 backhand index pointing left: medium-light skin tone
1F448 1F3FD                                ; fully-qualified     # 👈🏽 backhand index pointing left: medium skin tone
1F448 1F3FE                                ; fully-qualified     # 👈🏾 backhand index pointing left: medium-dark skin tone
1F448 1F3FF                                ; fully-qualified     # 👈🏿 backhand index pointing left: dark skin tone
1F449                                      ; fully-qualified     # 👉 backhand index pointing right
1F449 1F3FB                                ; fully-qualified     # 👉🏻 backhand index pointing right: light skin tone
1F449 1F3FC                                ; fully-qualified     # 👉🏼 backhand index pointing right: medium-light skin tone
1F449 1F3FD                                ; fully-qualified     # 👉🏽 backhand index pointing right: medium skin tone
1F449 1F3FE                                ; fully-qualified     # 👉🏾 backhand index pointing right: medium-dark skin tone
1F449 1F3FF                                ; fully-qualified     # 👉🏿 backhand index pointing right: dark skin tone
1F446                                      ; fully-qualified     # 👆 backhand index pointing up
1F446 1F3FB                                ; fully-qualified     # 👆🏻 backhand index pointing up: light skin tone
1F446 1F3FC                                ; fully-qualified     # 👆🏼 backhand index pointing up: medium-light skin tone
1F446 1F3FD                                ; fully-qualified     # 👆🏽 backhand index pointing up: medium skin tone
1F446 1F3FE                                ; fully-qualified     # 👆🏾 backhand index pointing up: medium-dark skin tone
1F446 1F3FF                                ; fully-qualified     # 👆🏿 backhand index pointing up: dark skin tone
1F595                                      ; fully-qualified     # 🖕 middle finger
1F595 1F3FB                                ; fully-qualified     # 🖕🏻 middle finger: light skin tone
1F595 1F3FC                                ; fully-qualified     # 🖕🏼 middle finger: medium-light skin tone
1F595 1F3FD                                ; fully-qualified     # 🖕🏽 middle finger: medium skin tone
1F595 1F3FE                                ; fully-qualified     # 🖕🏾 middle finger: medium-dark skin tone
1F595 1F3FF                                ; fully-qualified     # 🖕🏿 middle finger: dark skin tone
1F447                                      ; fully-qualified     # 👇 backhand index pointing down
1F447 1F3FB                                ; fully-qualified     # 👇🏻 backhand index pointing down: light skin tone
1F447 1F3FC                                ; fully-qualified     # 👇🏼 backhand index pointing down: medium-light skin tone
1F447 1F3FD                                ; fully-qualified     # 👇🏽 backhand index pointing down: medium skin tone
1F447 1F3FE                                ; fully-qualified     # 👇🏾 backhand index pointing down: medium-dark skin tone
1F447 1F3FF                                ; fully-qualified     # 👇🏿 backhand index pointing down: dark skin tone
261D FE0F                                  ; fully-qualified     # ☝️ index pointing up
261D                                       ; unqualified         # ☝ index pointing up
261D 1F3FB                                 ; fully-qualified     # ☝🏻 index pointing up: light skin tone
261D 1F3FC                                 ; fully-qualified     # ☝🏼 index pointing up: medium-light skin tone
261D 1F3FD                                 ; fully-qualified     # ☝🏽 index pointing up: medium skin tone
261D 1F3FE                                 ; fully-qualified     # ☝🏾 index pointing up: medium-dark skin tone
261D 1F3FF                                 ; fully-qualified     # ☝🏿 index pointing up: dark skin tone
```