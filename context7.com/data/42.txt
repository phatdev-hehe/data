TITLE: Running a Specific Profile in Windows Terminal (sh)
DESCRIPTION: Demonstrates how to open a new tab in Windows Terminal using a specific profile name. Shows the explicit `new-tab` command and the implicit form, along with the long (`--profile`) and short (`-p`) parameter forms.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_0

LANGUAGE: sh
CODE:
```
# Runs the user's "Windows Powershell" profile in a new tab (user story 2)
wt new-tab --profile "Windows Powershell"
wt --profile "Windows Powershell"
wt -p "Windows Powershell"
```

----------------------------------------

TITLE: Splitting Panes Vertically in Windows Terminal (sh)
DESCRIPTION: Demonstrates how to start a command (`cmd.exe`), then split the pane vertically using the `split-pane` command with the `-V` flag. Shows how to specify the size percentage (`-% 30`) and run a different command (`wsl.exe`) in the new pane. Includes variations.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_11

LANGUAGE: sh
CODE:
```
# Start cmd.exe, then split it vertically (with the first taking 70% of it's
#  space, and the new pane taking 30%), and run wsl.exe in that pane (user story 13)
wt cmd.exe ; split-pane --target 0 -V -% 30 wsl.exe
wt cmd.exe ; split-pane -% 30 wsl.exe
```

----------------------------------------

TITLE: Defining Key Bindings and Commands in Windows Terminal Settings (JSON)
DESCRIPTION: This JSON snippet defines an array of 'bindings' for Windows Terminal. Each object in the array represents a key binding or a command palette entry, specifying the associated action, keys, name, icon, and potentially nested commands or iteration logic. This configuration allows users to customize keyboard shortcuts and the structure of the command palette.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2046 - Unified keybindings and commands, and synthesized action names.md#_snippet_1

LANGUAGE: json
CODE:
```
"bindings": [
  { "name": "Duplicate Tab", "command": "duplicateTab", "keys": "ctrl+alt+a" },
  { "command": "nextTab", "keys": "ctrl+alt+b" },
  {
    "icon": "...",
    "name": { "key": "NewTabWithProfileRootCommandName" },
    "commands": [
      {
        "iterateOn": "profiles",
        "icon": "${profile.icon}",
        "name": { "key": "NewTabWithProfileCommandName" },
        "command": { "action": "newTab", "profile": "${profile.name}" }
      }
    ]
  },
  {
    "icon": "...",
    "name": "Connect to ssh...",
    "commands": [
      {
        "keys": "ctrl+alt+c",
        "icon": "...",
        "name": "first.com",
        "command": { "action": "newTab", "commandline": "ssh me@first.com" }
      },
      {
        "keys": "ctrl+alt+d",
        "icon": "...",
        "name": "second.com",
        "command": { "action": "newTab", "commandline": "ssh me@second.com" }
      }
    ]
  },
  {
    "keys": "ctrl+alt+e",
    "icon": "...",
    "name": { "key": "SplitPaneWithProfileRootCommandName" },
    "commands": [
      {
        "iterateOn": "profiles",
        "icon": "${profile.icon}",
        "name": { "key": "SplitPaneWithProfileCommandName" },
        "commands": [
          {
            "keys": "ctrl+alt+f",
            "icon": "...",
            "name": { "key": "SplitPaneName" },
            "command": { "action": "splitPane", "profile": "${profile.name}", "split": "automatic" }
          },
          {
            "icon": "...",
            "name": { "key": "SplitPaneVerticalName" },
            "command": { "action": "splitPane", "profile": "${profile.name}", "split": "vertical" }
          },
          {
            "icon": "...",
            "name": { "key": "SplitPaneHorizontalName" },
            "command": { "action": "splitPane", "profile": "${profile.name}", "split": "horizontal" }
          }
        ]
      }
    ]
  }
]
```

----------------------------------------

TITLE: Configuring Cygwin Profile in Windows Terminal (JSON)
DESCRIPTION: Example JSON configuration for adding a Cygwin profile to Windows Terminal settings. It sets the profile name "Cygwin", specifies the command line to launch bash with login and interactive flags, sets the icon path, and sets the starting directory to the Cygwin bin directory to ensure path works correctly. Assumes Cygwin is installed in C:\Cygwin.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/user-docs/ThirdPartyToolProfiles.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "name": "Cygwin",
    "commandline": "C:\\Cygwin\\bin\\bash --login -i",
    "icon": "C:\\Cygwin\\Cygwin.ico",
    "startingDirectory": "C:\\Cygwin\\bin"
}
```

----------------------------------------

TITLE: Alternative Pipe Command to Existing Pane - Shell
DESCRIPTION: Presents a more sensible alternative approach for piping command output. It uses `wt` to execute `man ping` within a new pane (`split-pane`) in window 0 (`-w 0`), and then pipes the output of `man ping` directly to the `cat` command running in that same new pane.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#5000 - Process Model 2.0/#4472 - Windows Terminal Session Management.md#_snippet_6

LANGUAGE: sh
CODE:
```
wt -w 0 split-pane -- man ping > cat
```

----------------------------------------

TITLE: Instantiating WinRT Object (C++)
DESCRIPTION: This C++ snippet shows how a WinRT client process instantiates an object of a registered class. It uses the `create_instance` helper function, providing the class's unique GUID and the desired context (e.g., `CLSCTX_LOCAL_SERVER`) to connect to the server process.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#5000 - Process Model 2.0/#5000 - Process Model 2.0.md#_snippet_1

LANGUAGE: C++
CODE:
```
auto myClass = create_instance<winrt::MyClass>(MyClassGUID, CLSCTX_LOCAL_SERVER);
```

----------------------------------------

TITLE: Configure Inline Command History Suggestion Mode (JSON)
DESCRIPTION: This JSON object defines a command action to activate the suggestions UI in an 'inline' mode. It specifies the 'commandHistory' as the source for suggestions, indicates that the current command line input should be used for filtering (`useCommandline: true`), and enables the inline display mode (`inline: true`), which typically shows the first suggestion as ghost text.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1595 - Suggestions UI/Suggestions-UI.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{ "command": { "action":"suggestions", "source": "commandHistory", "useCommandline": true, "inline": true } }
```

----------------------------------------

TITLE: Opening Multiple Tabs with Different Profiles (sh)
DESCRIPTION: Demonstrates how to open multiple new tabs in a single command line using the semicolon (`;`) delimiter. Each command after the semicolon opens a new tab, potentially with different profiles specified. Shows explicit and implicit `new-tab` and parameter forms.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_8

LANGUAGE: sh
CODE:
```
# open a new tab with the "Windows Powershell" profile, and another with the
#  "cmd" profile (user story 12)
wt new-tab --profile "Windows Powershell" ; new-tab --profile "cmd"
wt --profile "Windows Powershell" ; new-tab --profile "cmd"
wt --profile "Windows Powershell" ; --profile "cmd"
wt --p "Windows Powershell" ; --p "cmd"
```

----------------------------------------

TITLE: Quake Mode Global Summon Action Configuration (JSON)
DESCRIPTION: This JSON object defines the configuration for a 'globalSummon' action specifically tailored to invoke the '_quake' window. It specifies that the window should appear on the current monitor and desktop, target the window named '_quake', toggle its visibility, and have a dropdown animation duration of 0.5 seconds.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#653 - Quake Mode/#653 - Quake Mode.md#_snippet_3

LANGUAGE: json
CODE:
```
{
    "monitor": "toCurrent",
    "desktop": "toCurrent",
    "window": "_quake",
    "toggleVisibility": true,
    "dropdownDuration": 0.5
}
```

----------------------------------------

TITLE: Declare Windows Terminal Settings App Extension (AppxManifest)
DESCRIPTION: This XML snippet shows how to declare an App Extension in an application's appxmanifest file to allow it to provide settings fragments to Windows Terminal. The 'Name' attribute must be 'com.microsoft.windows.terminal.settings'. The 'Id' can be chosen by the app, and 'PublicFolder' specifies the directory containing the 'Fragments' subdirectory with the JSON files.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/Proto extensions-spec.md#_snippet_7

LANGUAGE: XML
CODE:
```
<Package
  ...
  xmlns:uap3="http://schemas.microsoft.com/appx/manifest/uap/windows10/3"
  IgnorableNamespaces="uap uap3 mp">
  ...
    <Applications>
      <Application Id="App" ... >
        ...
        <Extensions>
          ...
          <uap3:Extension Category="windows.appExtension">
            <uap3:AppExtension Name="com.microsoft.windows.terminal.settings"
                               Id="<id>"
                               PublicFolder="Public">
            </uap3:AppExtension>
          </uap3:Extension>
        </Extensions>
      </Application>
    </Applications>
    ...
</Package>
```

----------------------------------------

TITLE: Defining Localized Profile-Specific Commands with iterateOn (JSON)
DESCRIPTION: This JSON configuration defines profile-specific commands using localization keys for the command name. The "iterateOn": "profiles" property triggers the generation of commands for each profile. The name uses a localization key ("key": "...") which is looked up to find a string that may contain placeholders like ${profile.name}, which are then expanded per profile.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2046 - Command Palette.md#_snippet_3

LANGUAGE: json
CODE:
```
    "commands": [
        {
            "iterateOn": "profiles",
            "icon": "${profile.icon}",
            "name": { "key": "NewTabWithProfileCommandName" },
            "command": { "action": "newTab", "profile": "${profile.name}" }
        },
        {
            "iterateOn": "profiles",
            "icon": "${profile.icon}",
            "name": { "key": "NewVerticalSplitWithProfileCommandName" },
            "command": { "action": "splitPane", "split":"vertical", "profile": "${profile.name}" }
        }
    ],
```

----------------------------------------

TITLE: Launching Elevated Process with ShellExecute in C++
DESCRIPTION: This C++ snippet shows how to use the Windows API function `ShellExecute` to launch a new process (`wt.exe`) with elevated privileges. By specifying the `L"runas"` verb, the operating system will prompt the user for administrator consent (UAC) before executing the command `L"-w new new-tab [args...]"`. This method is used to start an elevated instance of the Windows Terminal from an existing, potentially unelevated, process.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#5000 - Process Model 2.0/#1032 - Elevation Quality of Life Improvements.md#_snippet_3

LANGUAGE: C++
CODE:
```
ShellExecute(nullptr,
             L"runas",
             L"wt.exe",
             L"-w new new-tab [args...]",
             nullptr,
             SW_SHOWNORMAL);
```

----------------------------------------

TITLE: Open Settings UI Profiles Page using Format and Page Args JSON
DESCRIPTION: This JSON snippet shows a keybinding command configuration using the `format` argument set to `ui` and the `page` argument set to `profiles` to navigate directly to the Profiles page within the Settings UI, as detailed in Proposition 2.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2557 - Settings Keybinding.md#_snippet_12

LANGUAGE: JSON
CODE:
```
{ "command": { "action": "openSettings", "format": "ui", "page": "profiles" } }
```

----------------------------------------

TITLE: Full Windows Terminal Profile Stub (JSON)
DESCRIPTION: This JSON snippet provides an example of a full profile stub used to define a new profile in Windows Terminal. It includes essential fields like 'guid' and 'name', along with other profile settings. Stubs like this are used to add profiles that do not already exist in the user's settings file.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/Proto extensions-spec.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "profiles": [
        {
            "guid": "{a821ae62-9d4a-3e34-b989-0a998ec283e6}",
            "name": "Cool Profile",
            "commandline": "powershell.exe",
            "antialiasingMode": "aliased",
            "fontWeight": "bold",
            "scrollbarState": "hidden"
        }
    ]
}
```

----------------------------------------

TITLE: Configuring Git Bash (x86) Profile in Windows Terminal (JSON)
DESCRIPTION: Example JSON configuration for adding a Git Bash profile installed in the 32-bit Program Files directory to Windows Terminal settings. It sets the profile name "Git Bash", specifies the command line using the %ProgramFiles(x86)% environment variable, sets the icon path, and sets the starting directory to the user profile. Assumes Git Bash is installed in C:\Program Files (x86)\Git.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/user-docs/ThirdPartyToolProfiles.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{
    "name": "Git Bash",
    "commandline": "%ProgramFiles(x86)%\\Git\\bin\\bash.exe -li",
    "icon": "%ProgramFiles(x86)%\\Git\\mingw32\\share\\git\\git-for-windows.ico",
    "startingDirectory": "%USERPROFILE%"
}
```

----------------------------------------

TITLE: Install Windows Terminal via Winget CLI
DESCRIPTION: Installs the latest stable release of Windows Terminal using the Windows Package Manager (winget) command-line interface. Uses the official package ID `Microsoft.WindowsTerminal` and the `-e` flag for exact matching.
SOURCE: https://github.com/microsoft/terminal/blob/main/README.md#_snippet_1

LANGUAGE: PowerShell
CODE:
```
winget install --id Microsoft.WindowsTerminal -e
```

----------------------------------------

TITLE: New Tab Menu Configuration (Using Action IDs) (JSON)
DESCRIPTION: Configuration example for the new tab menu demonstrating the proposed approach of referencing actions by their unique IDs. This allows the menu to automatically reflect any redefinitions of the referenced actions.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#6899 - Action IDs/#6899 - Action IDs.md#_snippet_6

LANGUAGE: json
CODE:
```
{
    "newTabMenu": [
        { "type":"action", "id": "Terminal.IncreaseFontSize" },
        { "type":"action", "id": "Terminal.DecreaseFontSize" },
        { "type":"action", "id": "Terminal.ResetFontSize" },
        { "type":"profile", "profile": "cmd" },
        { "type":"profile", "profile": "Windows PowerShell" },
        { "type":"separator" },
        {
            "type":"folder",
            "name": "Settings...",
            "icon": "C:\\path\\to\\icon.png",
            "entries":[
                { "type":"action", "id": "Terminal.OpenDefaultSettings" },
                { "type":"action", "id": "Terminal.OpenSettings" },
            ]
        }
    ]
}
```

----------------------------------------

TITLE: Configuring cmder Profile in Windows Terminal (JSON)
DESCRIPTION: Example JSON configuration for adding a cmder profile to Windows Terminal settings. It sets the command line to initialize cmder, specifies the profile name "cmder", sets the icon path, and sets the starting directory to the user profile. Assumes cmder is installed in %CMDER_ROOT%.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/user-docs/ThirdPartyToolProfiles.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "commandline": "cmd.exe /k \"%CMDER_ROOT%\\vendor\\init.bat\"",
    "name": "cmder",
    "icon": "%CMDER_ROOT%\\icons\\cmder.ico",
    "startingDirectory": "%USERPROFILE%"
}
```

----------------------------------------

TITLE: Defining Virtual Destructor for C++ Interface
DESCRIPTION: Demonstrates the required pattern for defining a virtual destructor in a C++ interface. The destructor is declared as pure virtual (`= 0`) within the class definition and then defined inline outside the class. This pattern is crucial for ensuring correct base class destructor calls and preventing segfaults during object destruction.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/virtual-dtors.md#_snippet_0

LANGUAGE: C++
CODE:
```
class IRenderData
{
public:
    virtual ~IRenderData() = 0;
    // methods
};

inline IRenderData::~IRenderData() {}
```

----------------------------------------

TITLE: Configuring Theme for System Light/Dark Mode
DESCRIPTION: This snippet demonstrates how to configure the `theme` property as an object to specify different themes for the system's light and dark modes. It maps the system mode (`light` or `dark`) to the name of a predefined theme.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_18

LANGUAGE: JSONC
CODE:
```
{
    "theme": {
        "light": "my light theme",
        "dark": "my dark theme"
    }
}
```

----------------------------------------

TITLE: Defining Nested Commands in JSON
DESCRIPTION: This JSON structure illustrates the proposed format for defining nested commands. It shows how a root command can contain a 'commands' array for sub-commands, including dynamic iteration over profiles and static definitions for specific actions like SSH connections. Each command can have an icon, name (potentially localized via a key or dynamic), and a command action or a nested list of commands.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2046 - Command Palette.md#_snippet_10

LANGUAGE: JSON
CODE:
```
"commands": [
  {
    "icon": "...",
    "name": { "key": "NewTabWithProfileRootCommandName" },
    "commands": [
      {
        "iterateOn": "profiles",
        "icon": "${profile.icon}",
        "name": { "key": "NewTabWithProfileCommandName" },
        "command": { "action": "newTab", "profile": "${profile.name}" }
      }
    ]
  },
  {
    "icon": "...",
    "name": "Connect to ssh...",
    "commands": [
      {
        "icon": "...",
        "name": "first.com",
        "command": { "action": "newTab", "commandline": "ssh me@first.com" }
      },
      {
        "icon": "...",
        "name": "second.com",
        "command": { "action": "newTab", "commandline": "ssh me@second.com" }
      }
    ]
  },
  {
    "icon": "...",
    "name": { "key": "SplitPaneWithProfileRootCommandName" },
    "commands": [
      {
        "iterateOn": "profiles",
        "icon": "${profile.icon}",
        "name": { "key": "SplitPaneWithProfileCommandName" },
        "commands": [
          {
            "icon": "...",
            "name": { "key": "SplitPaneName" },
            "command": { "action": "splitPane", "profile": "${profile.name}", "split": "automatic" }
          },
          {
            "icon": "...",
            "name": { "key": "SplitPaneVerticalName" },
            "command": { "action": "splitPane", "profile": "${profile.name}", "split": "vertical" }
          },
          {
            "icon": "...",
            "name": { "key": "SplitPaneHorizontalName" },
            "command": { "action": "splitPane", "profile": "${profile.name}", "split": "horizontal" }
          }
        ]
      }
    ]
  }
]
```

----------------------------------------

TITLE: Windows Terminal sendInput Action (Array Input)
DESCRIPTION: This JSON object defines a Windows Terminal command action using `sendInput` with an array of strings. Each string in the array represents a line of the PowerShell script, intended to be sent sequentially with an implicit Enter key press between lines, improving readability and maintainability.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1595 - Suggestions UI/Snippets.md#_snippet_2

LANGUAGE: jsonc
CODE:
```
{
    "command":
    {
        "action": "sendInput",
        "input":
        [
            "$s=Invoke-GitHubGraphQlApi \"query{organization(login:\"Microsoft\"){projectV2(number: 159) { id } } }\"",
            "$tasks = get-GitHubIssue  -Labels \"Issue-Task\" -state open",
            "$bugs = get-GitHubIssue  -Labels \"Issue-Bug\" -state open",
            "$issues = $tasks + $bugs",
            "$issues | ? {$_.labels.Name -NotContains \"Needs-Triage\" } | ? { $_.milestone.title -Ne \"Icebox ❄\" } | ? type -Ne \"PullRequest\" | select -expand node_id | % {",
            "  $resp = Add-GitHubBetaProjectItem -ProjectNodeId $s.organization.projectV2.id -ContentNodeId $_ ;",
            "}",
            ""
        ]
    },
    "name": "Upload to project board",
    "description": "Sync all our issues and bugs that have been triaged and are actually on the backlog to the big-ol project"
}
```

----------------------------------------

TITLE: Configuring Terminal Actions and Profiles for Export and Logging (JSON)
DESCRIPTION: This JSON configuration snippet demonstrates how to define keyboard shortcuts for 'exportBuffer' and 'toggleLogging' actions, including specifying output paths with dynamic variables like ${year}, ${month}, ${date}, and ${profile}. It also shows how to configure logging settings directly within profile definitions, controlling the log file path, append behavior, and automatic logging on profile start.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#642 - Buffer Exporting and Logging/#642 - Buffer Exporting and Logging.md#_snippet_0

LANGUAGE: json
CODE:
```
{
    "actions": [
        { "keys": "f1", "command": "exportBuffer" },
        { "keys": "f2", "command": { "action": "exportBuffer", "path": "c:\\logs\\${year}-${month}-${date}\\{profile}.txt" } },

        { "keys": "f3", "command": "toggleLogging" },
        { "keys": "f4", "command": { "action": "toggleLogging", "path": "c:\\logs\\${profile}.log", "append": true } }
    ],
    "profiles": [
        {
            "name": "foo",
            "logging": {
                "path": "c:\\foo.txt",
                "append": true
            },
            "automaticallyLog": false
        },
        {
            "name": "bar",
            "logging": {
                "path": "c:\\logs\\${date}\\bar.txt",
                "append": false
            },
            "automaticallyLog": true
        }
    ]
}
```

----------------------------------------

TITLE: Full Windows Terminal Settings Example (JSON)
DESCRIPTION: This comprehensive JSON example shows how to combine profile modifications, new profile definitions, and custom color schemes within a single Windows Terminal settings file. It updates an existing profile, creates a new 'Cool Profile', and includes the 'Postmodern Tango Light' color scheme.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/Proto extensions-spec.md#_snippet_6

LANGUAGE: JSON
CODE:
```
{
  "profiles": [
    {
      "updates": "{b453ae62-4e3d-5e58-b989-0a998ec441b8}",
      "fontSize": 16,
      "fontWeight": "thin"
    },
    {
      "guid": "{a821ae62-9d4a-3e34-b989-0a998ec283e6}",
      "name": "Cool Profile",
      "commandline": "powershell.exe",
      "antialiasingMode": "aliased",
      "fontWeight": "bold",
      "scrollbarState": "hidden"
    }
  ],
  "schemes": [
    {
        "name": "Postmodern Tango Light",

        "cursorColor": "#FFFFFF",
        "selectionBackground": "#FFFFFF",

        "background": "#61D6D6",
        "foreground": "#E74856",

        "black" : "#0C0C0C",
        "blue" : "#0037DA",
        "cyan" : "#3A96DD",
        "green" : "#13A10E",
        "purple" : "#881798",
        "red" : "#C50F1F",
        "white" : "#CCCCCC",
        "yellow" : "#C19C00",
        "brightBlack" : "#767676",
        "brightBlue" : "#3B78FF",
        "brightCyan" : "#61D6D6",
        "brightGreen" : "#16C60C",
        "brightPurple" : "#B4009E",
        "brightRed" : "#E74856",
        "brightWhite" : "#F2F2F2",
        "brightYellow" : "#F9F1A5"
    }
  ]
}
```

----------------------------------------

TITLE: Starting Windows Terminal in a Specific Directory (sh)
DESCRIPTION: Explains how to open a new tab in a specified starting directory using the `--startingDirectory` or `-d` parameter. Includes examples with both forward and backslashes in paths.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_6

LANGUAGE: sh
CODE:
```
# Start the default profile in directory "c:/Users/Foo/dev/MyProject" (user story 9)
wt new-tab --startingDirectory "c:/Users/Foo/dev/MyProject"
wt --startingDirectory "c:/Users/Foo/dev/MyProject"
wt -d "c:/Users/Foo/dev/MyProject"
# Windows-style paths work too
wt -d "c:\Users\Foo\dev\MyProject"
```

----------------------------------------

TITLE: Running a Custom Command Line in a New Tab (sh)
DESCRIPTION: Explains how to execute an arbitrary command line (`my-commandline.exe with some args`) within a new Windows Terminal tab. Shows both the explicit `new-tab` command and the implicit form.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_9

LANGUAGE: sh
CODE:
```
# run "my-commandline.exe with some args" in a new tab
wt new-tab my-commandline.exe with some args
wt my-commandline.exe with some args
```

----------------------------------------

TITLE: Example Keybinding Configurations with Arguments - JSON
DESCRIPTION: Illustrates how keybindings are configured in the user settings file using the proposed system. It shows how a single command can perform different actions based on the arguments provided in the 'args' object, replacing the need for multiple distinct commands for similar operations.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1142 - Keybinding Arguments.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
 "keys": ["ctrl+shift+1"], "command": "newTabProfile", "args": { "profileIndex":0 } },
{
 "keys": ["ctrl+shift+2"], "command": "newTabProfile", "args": { "profileIndex":1 } },
// etc...

{
 "keys": ["alt+1"], "command": "switchToTab", "args": { "index":0 } },
{
 "keys": ["alt+2"], "command": "switchToTab", "args": { "index":1 } },
// etc...

{
 "keys": ["alt+shift+down"], "command": "resizePane", "args": { "direction":"down" } },
{
 "keys": ["alt+shift+up"], "command": "resizePane", "args": { "direction":"up" } },
// etc...

{
 "keys": ["alt+down"], "command": "moveFocus", "args": { "direction":"down" } },
{
 "keys": ["alt+up"], "command": "moveFocus", "args": { "direction":"up" } },
// etc...

{
 "keys": ["ctrl+c"], "command": "copy", "args": { "copyWhitespace":true } },
{
 "keys": ["ctrl+shift+c"], "command": "copy", "args": { "copyWhitespace":false } },

{
 "keys": ["ctrl+shift+down"], "command": "scroll", "args": { "numLines":1 } },
{
 "keys": ["ctrl+shift+up"], "command": "scroll", "args": { "numLines":-1 } },

{
 "keys": ["ctrl+alt+1"], "command": "splitProfile", "args": { "orientation":"vertical", "profileIndex": 0 } },
{
 "keys": ["ctrl+alt+shift+1"], "command": "splitProfile", "args": { "orientation":"horizontal", "profileIndex": 0 } },
{
 "keys": ["ctrl+alt+2"], "command": "splitProfile", "args": { "orientation":"vertical", "profileIndex": 1 } },
{
 "keys": ["ctrl+alt+shift+2"], "command": "splitProfile", "args": { "orientation":"horizontal", "profileIndex": 1 } }
// etc...

```

----------------------------------------

TITLE: Defining Default Command Palette Entries - JSON
DESCRIPTION: This JSON array defines the proposed default commands for the command palette. Each object specifies an optional icon (currently null), a localized name key for display, and the action to be executed when the command is selected. Actions can be simple strings or nested objects for more complex operations like splitting panes or adjusting font size.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2046 - Command Palette.md#_snippet_9

LANGUAGE: JSON
CODE:
```
[
    { "icon": null, "name": { "key": "NewTabCommandKey" }, "action": "newTab" },
    { "icon": null, "name": { "key": "DuplicateTabCommandKey" }, "action": "duplicateTab" },
    { "icon": null, "name": { "key": "DuplicatePaneCommandKey" }, "action": { "action": "splitPane", "split":"auto", "splitMode": "duplicate" } },
    { "icon": null, "name": { "key": "SplitHorizontalCommandKey" }, "action": { "action": "splitPane", "split": "horizontal" } },
    { "icon": null, "name": { "key": "SplitVerticalCommandKey" }, "action": { "action": "splitPane", "split": "vertical" } },

    { "icon": null, "name": { "key": "CloseWindowCommandKey" }, "action": "closeWindow" },
    { "icon": null, "name": { "key": "ClosePaneCommandKey" }, "action": "closePane" },

    { "icon": null, "name": { "key": "OpenNewTabDropdownCommandKey" }, "action": "openNewTabDropdown" },
    { "icon": null, "name": { "key": "OpenSettingsCommandKey" }, "action": "openSettings" },

    { "icon": null, "name": { "key": "FindCommandKey" }, "action": "find" },

    { "icon": null, "name": { "key": "NextTabCommandKey" }, "action": "nextTab" },
    { "icon": null, "name": { "key": "PrevTabCommandKey" }, "action": "prevTab" },

    { "icon": null, "name": { "key": "ToggleFullscreenCommandKey" }, "action": "toggleFullscreen" },

    { "icon": null, "name": { "key": "CopyTextCommandKey" }, "action": { "action": "copy", "singleLine": false } },
    { "icon": null, "name": { "key": "PasteCommandKey" }, "action": "paste" },

    { "icon": null, "name": { "key": "IncreaseFontSizeCommandKey" }, "action": { "action": "adjustFontSize", "delta": 1 } },
    { "icon": null, "name": { "key": "DecreaseFontSizeCommandKey" }, "action": { "action": "adjustFontSize", "delta": -1 } },
    { "icon": null, "name": { "key": "ResetFontSizeCommandKey" }, "action": "resetFontSize"  },

    { "icon": null, "name": { "key": "ScrollDownCommandKey" }, "action": "scrollDown" },
    { "icon": null, "name": { "key": "ScrollDownPageCommandKey" }, "action": "scrollDownPage" },
    { "icon": null, "name": { "key": "ScrollUpCommandKey" }, "action": "scrollUp" },
    { "icon": null, "name": { "key": "ScrollUpPageCommandKey" }, "action": "scrollUpPage" }
]
```

----------------------------------------

TITLE: Redefining or Removing a Terminal Action (JSON)
DESCRIPTION: Example showing how a later settings file can redefine an existing action or remove a default action by setting its command to null using its unique ID. This allows users to customize built-in actions.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#6899 - Action IDs/#6899 - Action IDs.md#_snippet_3

LANGUAGE: json
CODE:
```
{ "id": "Terminal.OpenTab", "command":null }
```

----------------------------------------

TITLE: Open Settings UI Color Schemes Page using Format and Page Args JSON
DESCRIPTION: This JSON snippet illustrates a keybinding command configuration using the `format` argument set to `ui` and the `page` argument set to `colorSchemes` to navigate directly to the Color Schemes page within the Settings UI, as described in Proposition 2.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2557 - Settings Keybinding.md#_snippet_13

LANGUAGE: JSON
CODE:
```
{ "command": { "action": "openSettings", "format": "ui", "page": "colorSchemes" } }
```

----------------------------------------

TITLE: Split Pane Command - Windows Terminal
DESCRIPTION: Creates a new pane in the current tab by splitting a target pane horizontally or vertically. Allows specifying the target pane by index, the split direction, and the percentage of space the new pane should occupy. Accepts optional terminal parameters.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_13

LANGUAGE: Command Line
CODE:
```
split-pane [--target,-t target-pane] [-H]|[-V] [--percent,-% split-percentage] [terminal_parameters]
```

----------------------------------------

TITLE: JSON Configuration for newTab Action - JSON
DESCRIPTION: Examples of JSON configurations for the 'newTab' action, demonstrating how multiple arguments and their values are appended to the base generated name in a 'property:value' format.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2046 - Unified keybindings and commands, and synthesized action names.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{ "action":"newTab", "profile": "Hello" }
```

LANGUAGE: JSON
CODE:
```
{ "action":"newTab", "profile": "Hello", "directory":"C:\\", "commandline": "wsl.exe", "title": "Foo" }
```

----------------------------------------

TITLE: Running a Specific Executable in Windows Terminal (sh)
DESCRIPTION: Shows how to run a specific executable (`cmd.exe`) in a new tab using the default profile. This implicitly uses the `new-tab` command.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_1

LANGUAGE: sh
CODE:
```
# Runs the user's default profile in a new tab, running cmd.exe (user story 3)
wt cmd.exe
```

----------------------------------------

TITLE: Default profiles.json Structure (JavaScript/JSON)
DESCRIPTION: Illustrates the initial structure of the Windows Terminal user settings file (`profiles.json`), including default profiles for cmd.exe, PowerShell, and PowerShell Core, along with sections for color schemes and keybindings. It shows how default profiles are represented and how dynamic sources are indicated.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#754 - Cascading Default Settings.md#_snippet_4

LANGUAGE: json
CODE:
```
// To view the default settings, open <path-to-app-package>\defaults.json
{
    "defaultProfile" : "{574e775e-4f2a-5b96-ac1e-a2962a402336}",
    "profiles": [
        {
            // Make changes here to the cmd.exe profile
            "guid": "{6239a42c-1de4-49a3-80bd-e8fdd045185c}"
        },
        {
            // Make changes here to the Windows Powershell profile
            "guid": "{086a83cd-e4ef-418b-89b1-3f6523ff9195}",
        },
        {
            "guid": "{574e775e-4f2a-5b96-ac1e-a2962a402336}",
            "name" : "Powershell Core",
            "source": "{2bde4a90-d05f-401c-9492-e40884ead1d8}",
        }
    ],

    // Add custom color schemes to this array
    "schemes": [],

    // Add any keybinding overrides to this array.
    // To unbind a default keybinding, set the command to "unbound"
    "keybindings": []
}

```

----------------------------------------

TITLE: Creating Multiple Panes and Splits (sh)
DESCRIPTION: Shows a complex example involving multiple commands separated by semicolons. It creates a new tab, splits it vertically, and then splits the second pane horizontally (`-H`) targeting pane 1 (`--target 1` or `-t 1`) to run a specific command (`media.exe`).
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_12

LANGUAGE: sh
CODE:
```
# Create a new window with the default profile, create a vertical split with the
#  default profile, then create a horizontal split in the second pane and run
#  "media.exe" (user story 13)
wt new-tab ; split-pane -V ; split-pane --target 1 -H media.exe
wt new-tab ; split-pane -V ; split-pane -t 1 -H media.exe
```

----------------------------------------

TITLE: Open All Settings Files using Target Arg JSON
DESCRIPTION: This JSON snippet illustrates a keybinding command configuration using the `target` argument set to `allSettingsFiles` to open all relevant settings files in the default text editor, as outlined in Proposition 1.1.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2557 - Settings Keybinding.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{ "command": { "action": "openSettings", "target": "allSettingsFiles" } }
```

----------------------------------------

TITLE: Terminal Parameters - Windows Terminal
DESCRIPTION: Defines a set of optional parameters that can be appended to commands which create new terminal instances (like split-pane). These parameters allow overriding profile settings such as the profile name/GUID, starting directory, or the command line executed.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_17

LANGUAGE: Command Line
CODE:
```
[--profile,-p profile-name] [--startingDirectory,-d starting-directory] [commandline]
```

----------------------------------------

TITLE: Configuring Git Bash Profile in Windows Terminal (JSON)
DESCRIPTION: Example JSON configuration for adding a Git Bash profile to Windows Terminal settings. It sets the profile name "Git Bash", specifies the command line to launch bash with login and interactive flags, sets the icon path, and sets the starting directory to the user profile. Assumes Git Bash is installed in C:\Program Files\Git.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/user-docs/ThirdPartyToolProfiles.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
    "name": "Git Bash",
    "commandline": "C:\\Program Files\\Git\\bin\\bash.exe -li",
    "icon": "C:\\Program Files\\Git\\mingw64\\share\\git\\git-for-windows.ico",
    "startingDirectory": "%USERPROFILE%"
}
```

----------------------------------------

TITLE: PowerShell Script to Sync GitHub Issues to Project Board
DESCRIPTION: This PowerShell script queries GitHub for open issues and bugs, filters them based on labels and milestones, and adds the filtered issues to a specified GitHub Project V2 board using the GitHub GraphQL API and beta project item commands.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1595 - Suggestions UI/Snippets.md#_snippet_0

LANGUAGE: pwsh
CODE:
```
$s=Invoke-GitHubGraphQlApi "query{organization(login:`"Microsoft`"){projectV2(number: 159) { id } } }"

$tasks = get-GitHubIssue  -Labels "Issue-Task" -state open
$bugs = get-GitHubIssue  -Labels "Issue-Bug" -state open
$issues = $tasks + $bugs

$issues | ? {$_.labels.Name -NotContains "Needs-Triage" } | ? { $_.milestone.title -Ne "Icebox ❄" } | ? type -Ne "PullRequest" | select -expand node_id | % {
  $resp = Add-GitHubBetaProjectItem -ProjectNodeId $s.organization.projectV2.id -ContentNodeId $_ ;
}
```

----------------------------------------

TITLE: JSON Configuration for copyText Action - JSON
DESCRIPTION: Examples of JSON configurations for the 'copyText' action, showing how different arguments like 'singleLine' and 'copyFormatting' influence the automatically generated name for display in the Command Palette.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2046 - Unified keybindings and commands, and synthesized action names.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{ "action":"copyText" }
```

LANGUAGE: JSON
CODE:
```
{ "action":"copyText", "singleLine": true }
```

LANGUAGE: JSON
CODE:
```
{ "action":"copyText", "singleLine": false, "copyFormatting": false }
```

LANGUAGE: JSON
CODE:
```
{ "action":"copyText", "singleLine": true, "copyFormatting": true }
```

----------------------------------------

TITLE: Configuring Pane Border Color (Windows Terminal, JSON)
DESCRIPTION: Control the color of the border used to separate panes. This setting applies to the inactive border between panes, helping to visually delineate them.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_9

LANGUAGE: JSON
CODE:
```
"pane.borderColor": "#CCCCCC"
```

----------------------------------------

TITLE: Setting Cmd.exe Prompt for Terminal Marks
DESCRIPTION: Configures the `cmd.exe` prompt string to include escape sequences (`$e]...$e\`) that signal the start and end of the prompt to a terminal emulator, enabling features like automatic prompt marking. This specific sequence includes markers for command start (133;D), prompt start (133;A), and prompt end (133;B).
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#11000 - Marks/Shell-Integration-Marks.md#_snippet_0

LANGUAGE: cmd
CODE:
```
PROMPT $e]133;D$e\$e]133;A$e\$e]9;9;$P$e\%PROMPT%$e]133;B$e\
```

----------------------------------------

TITLE: Configuring Active Pane Border Color (Windows Terminal, JSON)
DESCRIPTION: Control the color of the border surrounding the currently active pane. This helps users easily identify which pane is currently focused and receiving input.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_10

LANGUAGE: JSON
CODE:
```
"pane.activeBorderColor": "#00FF00"
```

----------------------------------------

TITLE: Example Command List JSON for Action Mode
DESCRIPTION: This JSON snippet shows the structure used to define commands for the Windows Terminal command palette's Action Mode. Each object represents a command with properties for an optional icon, the display name, and the action to be performed. This structure is used to populate the list that users can filter and select from.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2046 - Command Palette.md#_snippet_4

LANGUAGE: json
CODE:
```
"commands": [
    { "icon": null, "name": "New Tab", "action": "newTab" },
    { "icon": null, "name": "Close Tab", "action": "closeTab" },
    { "icon": null, "name": "Close Pane", "action": "closePane" },
    { "icon": null, "name": "[-] Split Horizontal", "action": { "action": "splitPane", "split": "horizontal" } },
    { "icon": null, "name": "[ | ] Split Vertical", "action": { "action": "splitPane", "split": "vertical" } },
    { "icon": null, "name": "Next Tab", "action": "nextTab" },
    { "icon": null, "name": "Prev Tab", "action": "prevTab" },
    { "icon": null, "name": "Open Settings", "action": "openSettings" },
    { "icon": null, "name": "Open Media Controls", "action": "openTestPane" }
],
```

----------------------------------------

TITLE: Configuring Tab Row Background Color (Windows Terminal, JSON)
DESCRIPTION: Controls the background color of the tab row. When tabs are enabled in the titlebar, this sets the color of the titlebar area. Note that this setting ignores any alpha channel and always uses 1.0 for opacity.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_6

LANGUAGE: JSON
CODE:
```
"tabRow.background": "#123456"
```

----------------------------------------

TITLE: Configuring Window Application Theme (Windows Terminal, JSON)
DESCRIPTION: If set, this property controls the XAML `RequestedTheme` for the window. Accepted values are "light", "dark", or "system" (default), which follows the system's theme setting. This fundamentally styles UI elements.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_12

LANGUAGE: JSON
CODE:
```
"window.applicationTheme": "system"
```

----------------------------------------

TITLE: Combining Profile and Starting Directory in Windows Terminal (sh)
DESCRIPTION: Shows how to open a new tab using a specific profile and simultaneously set the starting directory using a combination of `--profile`/`-p` and `--startingDirectory`/`-d` parameters.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_7

LANGUAGE: sh
CODE:
```
# Runs the user's "Windows Powershell" profile in a new tab in directory
#  "c:/Users/Foo/dev/MyProject" (user story 2, 9)
wt new-tab --profile "Windows Powershell" --startingDirectory "c:/Users/Foo/dev/MyProject"
wt --profile "Windows Powershell" --startingDirectory "c:/Users/Foo/dev/MyProject"
wt -p "Windows Powershell" -d "c:/Users/Foo/dev/MyProject"
```

----------------------------------------

TITLE: Mapping Keybinding to Action ID (JSON)
DESCRIPTION: Example demonstrating how a keybinding is mapped to a specific action using its ID. This means the keybinding will execute whatever action is currently defined globally for that ID.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#6899 - Action IDs/#6899 - Action IDs.md#_snippet_4

LANGUAGE: json
CODE:
```
{ "keys": "ctrl+alt+x", "id": "Terminal.OpenDefaultSettings" },
```

----------------------------------------

TITLE: Install Windows Terminal MSIX Bundle via PowerShell
DESCRIPTION: Installs the Windows Terminal application from a downloaded .msixbundle file using the Add-AppxPackage cmdlet in PowerShell. Requires specifying the correct version number in the filename. Note the prerequisite for PowerShell 7+ regarding the Appx module.
SOURCE: https://github.com/microsoft/terminal/blob/main/README.md#_snippet_0

LANGUAGE: PowerShell
CODE:
```
# NOTE: If you are using PowerShell 7+, please run
# Import-Module Appx -UseWindowsPowerShell
# before using Add-AppxPackage.

Add-AppxPackage Microsoft.WindowsTerminal_<versionNumber>.msixbundle
```

----------------------------------------

TITLE: Override Default Command (Literal Name)
DESCRIPTION: This JSON snippet demonstrates how a user can override a default command. By providing a command with the same *evaluated* name ("Open New Tab"), the user can change its associated action, in this case, switching from `newTab` to `splitPane`.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2046 - Command Palette.md#_snippet_6

LANGUAGE: JSON
CODE:
```
{ "icon": null, "name": "Open New Tab", "action": "splitPane" },
```

----------------------------------------

TITLE: Updating Git Submodules - Shell
DESCRIPTION: Ensures all necessary git submodules are initialized and updated recursively. This step is required before building the project to fetch dependencies.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/building.md#_snippet_0

LANGUAGE: shell
CODE:
```
git submodule update --init --recursive
```

----------------------------------------

TITLE: Proposed Global Settings JSON Structure
DESCRIPTION: This JSONC snippet outlines the proposed structure for Windows Terminal's global settings, including options for minimizing to tray, always showing the tray icon, and defining global actions with keybindings like 'globalSummon' and 'quakeMode'. It shows the expected types for each property.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#653 - Quake Mode/#653 - Quake Mode.md#_snippet_4

LANGUAGE: jsonc
CODE:
```
{
    "minimizeToTray": bool,
    "alwaysShowTrayIcon": bool,
    "actions": [
        {
            "keys": KeyChord,
            "command": {
                "action": "globalSummon",
                "dropdownDuration": float,
                "toggleVisibility": bool,
                "monitor": "any"|"toCurrent"|"onCurrent"|int,
                "desktop": "any"|"toCurrent"|"onCurrent"
            }
        },
        {
            "keys": KeyChord,
            "command": {
                "action": "quakeMode"
            }
        }
    ]
}
```

----------------------------------------

TITLE: Opening Windows Terminal Settings File (sh)
DESCRIPTION: Demonstrates how to open the Windows Terminal settings file directly without launching a new terminal window.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_4

LANGUAGE: sh
CODE:
```
# open the settings file, without opening the Terminal window (user story 6)
wt open-settings
```

----------------------------------------

TITLE: Defining Elevated Tab Command in Windows Terminal JSONC
DESCRIPTION: This JSONC snippet defines an iterable command within the Windows Terminal configuration. It iterates over available profiles, creating a menu entry for each. When selected, the command executes the `newTab` action for the corresponding profile, explicitly setting the `elevated` property to `true` to request administrator privileges for the new tab.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#5000 - Process Model 2.0/#1032 - Elevation Quality of Life Improvements.md#_snippet_2

LANGUAGE: JSONC
CODE:
```
{
    // New elevated tab...
    "name": { "key": "NewElevatedTabParentCommandName", "icon": "UAC-Shield.png" },
    "commands": [
        {
            "iterateOn": "profiles",
            "icon": "${profile.icon}",
            "name": "${profile.name}",
            "command": { "action": "newTab", "profile": "${profile.name}", "elevated": true }
        }
    ]
},
```

----------------------------------------

TITLE: Configuring Window Background Image (Windows Terminal, JSON)
DESCRIPTION: Specifies a path to an image file to use as the background for the entire content area of the Terminal window, including the space behind the tab row. Additional properties for image sizing and appearance can be configured separately.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_15

LANGUAGE: JSON
CODE:
```
"window.background.image": "C:\\path\\to\\image.png"
```

----------------------------------------

TITLE: Open Settings File for Specific Page (JSON Format) JSON
DESCRIPTION: This JSON snippet demonstrates a keybinding command configuration using the `format` argument set to `json` and the `page` argument set to `colorSchemes`. In this scenario, where a specific page is requested in JSON format, the proposed behavior is to open the main `settings.json` file (or the file containing settings for the requested feature).
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2557 - Settings Keybinding.md#_snippet_14

LANGUAGE: JSON
CODE:
```
{ "command": { "action": "openSettings", "format": "json", "page": "colorSchemes" } }
```

----------------------------------------

TITLE: JSON Configuration for Pane Focus Commands
DESCRIPTION: This JSON array contains example configurations for different pane focus commands proposed for the Microsoft Terminal. It demonstrates how to focus a specific pane by ID, focus the next or previous pane based on MRU or in-order traversal, and explicitly enable or disable a future pane switcher UI.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2871 - Pane Navigation/#2871 - Pane Navigation.md#_snippet_1

LANGUAGE: json
CODE:
```
// Focus pane 1
// - This is sensible, no arguments here
{ "command": { "action": "focusPane", "id": 1 } },

// Focus the next MRU pane
// - Without the switcher, this can only go one pane deep in the MRU stack
// - presumably once there's a pane switcher, it would default to enabled?
{ "command": { "action": "focusNextPane", "order": "mru" } },

// Focus the prev inOrder pane
// - this seems straightforward
{ "command": { "action": "focusPrevPane", "order": "inOrder" } },

// Focus the next pane, in mru order, explicitly disable the switcher
// - The user opted in to only being able to MRU switch one deep. That's fine, that's what they want.
{ "command": { "action": "focusNextPane", "order": "mru", "useSwitcher": false} },

// Focus the prev inOrder pane, explicitly with the switcher
// - Maybe they disabled the switcher globally, but what it on for this action?
{ "command": { "action": "focusPrevPane", "order": "inOrder", "useSwitcher": true } }
```

----------------------------------------

TITLE: Proposal 4: JSON Profile Structure with inheritFrom Property
DESCRIPTION: This JSON snippet demonstrates Proposal 4, which adds an 'inheritFrom' property to individual profile objects. This allows profiles to inherit settings from another profile specified by its GUID, enabling a form of inheritance for default or shared settings.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2325 - Default Profile Settings.md#_snippet_3

LANGUAGE: json
CODE:
```
{
    "$schema": "https://aka.ms/terminal-profiles-schema",
    "defaultProfile": "{61c54bbd-c2c6-5271-96e7-009a87ff44bf}",
    "requestedTheme" : "dark",
    "showTabsInTitlebar" : true,
    "profiles":
    [
        {
            "guid": "{11111111-1111-1111-1111-111111111111}",
            "hidden": true,
            "useAcrylic": true,
            "acrylicOpacity": 0.1,
            "fontFace": "Cascadia Code",
            "fontSize": 10
        },
        {
            "guid": "{61c54bbd-c2c6-5271-96e7-009a87ff44bf}",
            "inheritFrom": "{11111111-1111-1111-1111-111111111111}",
            "name": "Windows PowerShell",
            "commandline": "powershell.exe",
            "hidden": false
        },
        {
            "guid": "{0caa0dad-35be-5f56-a8ff-afceeeaa6101}",
            "inheritFrom": "{11111111-1111-1111-1111-111111111111}",
            "name": "cmd",
            "commandline": "cmd.exe",
            "hidden": false
        },
        {
            "guid": "{0caa0dad-ffff-5f56-a8ff-afceeeaa6101}",
            "inheritFrom": "{0caa0dad-35be-5f56-a8ff-afceeeaa6101}",
            "name": "This is another CMD",
            "commandline": "cmd.exe /c myCoolScript.bat",
            "hidden": false
        }
    ],
    "schemes": [],
    "keybindings": []
}
```

----------------------------------------

TITLE: Configuring Tab Background Color (Windows Terminal, JSON)
DESCRIPTION: Controls the background color of individual tab items. Refer to the documentation section on accepted color formats for valid values. This setting affects the visual appearance of each tab.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_5

LANGUAGE: JSON
CODE:
```
"tab.background": "#000000"
```

----------------------------------------

TITLE: Open Settings UI using Target Arg JSON
DESCRIPTION: This JSON snippet provides a keybinding command configuration using the `target` argument set to `settingsUI` to open the main Settings UI interface, as proposed in Proposition 1.1.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2557 - Settings Keybinding.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{ "command": { "action": "openSettings", "target": "settingsUI" } }
```

----------------------------------------

TITLE: Defining Suggestions UI Command Actions with Different Sources (JSON)
DESCRIPTION: This JSON snippet defines various command actions used to invoke the Suggestions UI in Windows Terminal. Each action specifies the 'suggestions' action type and a 'source' property, which can be a single string or an array of strings, indicating where the suggestions should be retrieved from (e.g., command history, directory history, tasks, local files, or extensions).
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1595 - Suggestions UI/Suggestions-UI.md#_snippet_0

LANGUAGE: JSON
CODE:
```
        { "command": { "action":"suggestions", "source": "commandHistory" } },
        { "command": { "action":"suggestions", "source": "directoryHistory" } },

        { "command": { "action":"suggestions", "source": "tasks" } },
        { "command": { "action":"suggestions", "source": "local" } },

        { "command": { "action":"suggestions", "source": ["local", "tasks", "commandHistory"] } },

        { "command": { "action":"suggestions", "source": "Microsoft.Terminal.Extensions.BufferComplete" } },
```

----------------------------------------

TITLE: Configure Theme for Mica Titlebar (JSON)
DESCRIPTION: This JSON configuration defines a theme that enables the Mica background effect for the entire window and makes the tab row transparent. Setting `window.background.useMica` to `true` activates Mica behind the window, and setting `tabRow.background` to `#00000000` (fully transparent) allows the Mica effect to be visible in the titlebar area.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#10509 - Mica.md#_snippet_0

LANGUAGE: jsonc
CODE:
```
{
    "theme": "My Mica Titlebar Theme",
    "themes": [
        {
            "name": "My Mica Titlebar Theme",
            "window":{
                "background.useMica": true, // Use mica behind the window
            },
            "tabRow":{
              "background": "#00000000", // Make the TabView Transparent
            }
        }
    ]
}
```

----------------------------------------

TITLE: Run Commands in Specific Windows Terminal Window (Shell)
DESCRIPTION: Demonstrates using the `--window` or `-w` parameter with `wt.exe` to execute subsequent commands (like `new-tab` or `split-pane`) within a specified Windows Terminal window identified by its ID (N in this example) or name, instead of creating a new window.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#5000 - Process Model 2.0/#4472 - Windows Terminal Session Management.md#_snippet_0

LANGUAGE: sh
CODE:
```
wt.exe --window N new-tab ; split-pane
```

----------------------------------------

TITLE: Configuring Tab Bottom Corner Radius (Windows Terminal, JSON)
DESCRIPTION: Controls the radius of the bottom corners of the tab items. This setting can be used to alter the appearance of tabs, potentially making them look more like buttons within the tab row.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_2

LANGUAGE: JSON
CODE:
```
"tab.bottomCornerRadius": 0.0
```

----------------------------------------

TITLE: Advanced New Tab Menu Configuration (JSONC)
DESCRIPTION: This JSONC snippet demonstrates a more complex configuration for the new tab menu. It includes specific profiles (`cmd`, `Windows PowerShell`), profiles matched by source (`Microsoft.Terminal.PowerShellCore`, `Microsoft.Terminal.Wsl`, `Microsoft.Terminal.VisualStudio`), folders to group profiles, and finally the remaining profiles. Comments are included to explain parts of the configuration.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1571 - New Tab Menu Customization/#1571 - New Tab Menu Customization.md#_snippet_2

LANGUAGE: jsonc
CODE:
```
{
    "newTabMenu": [
        { "type":"profile", "profile": "cmd" },
        { "type":"profile", "profile": "Windows PowerShell" },
        { "type": "matchProfile", "source": "Microsoft.Terminal.PowerShellCore" }
        {
            "type": "folder",
            "name": "WSL",
            "entries": [ { "type": "matchProfile", "source": "Microsoft.Terminal.Wsl" } ]
        },
        {
            "type": "folder",
            "name": "Visual Studio",
            "entries": [ { "type": "matchProfile", "source": "Microsoft.Terminal.VisualStudio" } ]
        },
        // ... etc for other profile generators
        { "type": "remainingProfiles" }
    ]
}
```

----------------------------------------

TITLE: Define Default Terminal Suggestions Actions (JSON)
DESCRIPTION: Provides a list of default Windows Terminal actions for the Suggestions UI, covering command history, directory history, combined sources (local, tasks, command history), and all sources with different filtering and nesting configurations.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1595 - Suggestions UI/Suggestions-UI.md#_snippet_2

LANGUAGE: json
CODE:
```
{ "command": { "action":"suggestions", "source": "commandHistory", "useCommandline": true } },
{ "command": { "action":"suggestions", "source": "directoryHistory" } },
{ "command": { "action":"suggestions", "source": ["local", "tasks", "commandHistory"], "useCommandline": true, "nesting": "disabled" } },
{ "command": { "action":"suggestions", "source": ["all"], "useCommandline": false, "nesting": "source" } }
```

----------------------------------------

TITLE: Configure Environment with WinGet - PowerShell
DESCRIPTION: Use the WinGet configuration file to automatically set up the development environment, including installing required tools like Visual Studio 2022 Community and other dependencies.
SOURCE: https://github.com/microsoft/terminal/blob/main/README.md#_snippet_6

LANGUAGE: PowerShell
CODE:
```
winget configure .config\configuration.winget
```

----------------------------------------

TITLE: Remove Default Command
DESCRIPTION: This JSON snippet shows how a user can remove a default command from the command palette. By defining a command with the same *evaluated* name ("Open New Tab") and setting its `action` property to `null`, the command will be excluded from the list displayed to the user.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2046 - Command Palette.md#_snippet_7

LANGUAGE: JSON
CODE:
```
{ "icon": null, "name": "Open New Tab", "action": null },
```

----------------------------------------

TITLE: Move Focus Command - Windows Terminal
DESCRIPTION: Moves the focus within the currently active tab in a specified direction. The direction can be 'left', 'right', 'up', or 'down'. If no direction is provided, the focus remains unchanged.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_16

LANGUAGE: Command Line
CODE:
```
move-focus [--direction,-d direction]
```

----------------------------------------

TITLE: Executing Complex wt Command in PowerShell
DESCRIPTION: Demonstrates calling `wt.exe` from PowerShell with a command string containing semicolons, highlighting the need for careful quoting or escaping to prevent PowerShell from interpreting the semicolons as command separators.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_19

LANGUAGE: powershell
CODE:
```
wt.exe ";" split-pane "powershell Write-Output 'Hello World' > foo.txt; type foo.txt"
```

----------------------------------------

TITLE: Defining Profile-Specific Commands with expandOn (JSON)
DESCRIPTION: This JSON configuration defines commands that are automatically generated for each terminal profile. The "expandOn": "profiles" property indicates that the command should be duplicated for every profile. Placeholders like ${profile.name} and ${profile.icon} are replaced with the profile's specific values during processing.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2046 - Command Palette.md#_snippet_2

LANGUAGE: json
CODE:
```
    "commands": [
        {
            "expandOn": "profiles",
            "icon": "${profile.icon}",
            "name": "New Tab with ${profile.name}",
            "command": { "action": "newTab", "profile": "${profile.name}" }
        },
        {
            "expandOn": "profiles",
            "icon": "${profile.icon}",
            "name": "New Vertical Split with ${profile.name}",
            "command": { "action": "splitPane", "split":"vertical", "profile": "${profile.name}" }
        }
    ],
```

----------------------------------------

TITLE: Configuring Microsoft Terminal New Tab Menu (JSON)
DESCRIPTION: This JSON snippet demonstrates the structure of the proposed "newTabMenu" setting in Microsoft Terminal. It shows how to define a custom new tab menu using an array of objects, including profile entries, separators, and nested folders with their own entries, names, and optional icons. This configuration overrides the default behavior of listing all profiles.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1571 - New Tab Menu Customization/#1571 - New Tab Menu Customization.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
    "profiles":{ ... },
    "newTabMenu": [
        { "type":"profile", "profile": "cmd" },
        { "type":"profile", "profile": "Windows PowerShell" },
        { "type":"separator" },
        {
            "type":"folder",
            "name": "ssh",
            "icon": "C:\\path\\to\\icon.png",
            "entries":[
                { "type":"profile", "profile": "Host 1" },
                { "type":"profile", "profile": "8.8.8.8" },
                { "type":"profile", "profile": "Host 2" }
            ]
        },
        { "type":"separator" },
        { "type":"profile", "profile": "Ubuntu-18.04" },
        { "type":"profile", "profile": "Fedora" }
    ]
}
```

----------------------------------------

TITLE: Windows Terminal Windowing Behavior Configuration (JSON)
DESCRIPTION: Illustrates the configuration options for the 'windowingBehavior' setting in the Windows Terminal settings file. This setting controls whether new instances open in an existing window ('useExisting', 'useExistingOnSameDesktop') or always in a new window ('useNew').
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#5000 - Process Model 2.0/#4472 - Windows Terminal Session Management.md#_snippet_2

LANGUAGE: JSON
CODE:
```
"windowingBehavior": "useExisting"
```

LANGUAGE: JSON
CODE:
```
"windowingBehavior": "useExistingOnSameDesktop"
```

LANGUAGE: JSON
CODE:
```
"windowingBehavior": "useNew"
```

----------------------------------------

TITLE: Windows Terminal Command-line Window Naming (Shell)
DESCRIPTION: Demonstrates how to name a new window upon creation using the command line and how to address existing windows by their assigned name or ID using the '-w' flag. Integer names are disallowed to prevent ambiguity with window IDs.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#5000 - Process Model 2.0/#4472 - Windows Terminal Session Management.md#_snippet_1

LANGUAGE: Shell
CODE:
```
wt -w foo nt
```

LANGUAGE: Shell
CODE:
```
wt -w 4 name-window bar
```

LANGUAGE: Shell
CODE:
```
wt -w 2
```

----------------------------------------

TITLE: Open Defaults File using Target Arg JSON
DESCRIPTION: This JSON snippet shows a keybinding command configuration using the `target` argument to open the `defaults.json` file in the default text editor, as suggested in Proposition 1.1.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2557 - Settings Keybinding.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{ "command": { "action": "openSettings", "target": "defaultsFile" } }
```

----------------------------------------

TITLE: Key Binding Argument for Specific Copy Formats (JSON)
DESCRIPTION: This JSON snippet illustrates another key binding argument proposal in settings.json. It allows specifying an array of desired formats (html, rtf, plain) directly within the key binding definition, providing fine-grained control over copied formats for a specific shortcut.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#4191 - Formatted Copy/spec.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{"command": {"action": "copy", "formats": ["html","rtf","plain"]}, "keys": "ctrl+a"}
```

----------------------------------------

TITLE: Default Command Definition (Localized Name)
DESCRIPTION: This JSON snippet shows the structure for defining a default command in the Windows Terminal settings. It uses a localized key ("key": "NewTabCommandName") for the command name, allowing for internationalization. The `action` property specifies the operation performed when the command is invoked.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2046 - Command Palette.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{ "icon": null, "name": { "key": "NewTabCommandName" }, "action": "newTab" },
```

----------------------------------------

TITLE: Example Default Theme Aligned with Edge Browser
DESCRIPTION: This snippet provides an example configuration for a potential default theme named "Edge". It sets the `applicationTheme` to "system" and defines background colors for the tab and tab row, illustrating how a theme might be structured to potentially adapt to system settings or use predefined resources like "accent".
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_20

LANGUAGE: JSONC
CODE:
```
{
    "name": "Edge",
    "window":{
      "applicationTheme": "system"
    },
    "tab": {
      "background": "#whatever-color-edge-is" // Might need a "key:" resource here for light/dark theme switching
    },
    "tabRow":{
      "background": "accent",
    }
},
```

----------------------------------------

TITLE: Open Settings File using Target Arg JSON
DESCRIPTION: This JSON snippet demonstrates how to configure a keybinding command using the `target` argument to open the user's `settings.json` file in their default text editor, as proposed in Proposition 1.1.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2557 - Settings Keybinding.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{ "command": { "action": "openSettings", "target": "settingsFile" } }
```

----------------------------------------

TITLE: Proposed Broadcast Input Actions - JSON
DESCRIPTION: This JSON snippet lists the proposed actions for controlling the scope of broadcast input within Windows Terminal, including toggling broadcast for the window, tab, or a specific pane, and disabling broadcast entirely.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#2634 - Broadcast Input/#2634 - Broadcast Input.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{ "action": "toggleBroadcastInput", "scope": "window" },
{ "action": "toggleBroadcastInput", "scope": "tab" },
{ "action": "toggleBroadcastInput", "scope": "pane" },
{ "action": "disableBroadcastInput" },
```

----------------------------------------

TITLE: Windows Terminal Force New Window Command (Shell)
DESCRIPTION: Shows the command-line argument to force Windows Terminal to open a new window, regardless of the configured 'windowingBehavior' setting.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#5000 - Process Model 2.0/#4472 - Windows Terminal Session Management.md#_snippet_3

LANGUAGE: Shell
CODE:
```
wt -w -1
```

----------------------------------------

TITLE: Example Global Summon and Standard Keybindings in JSON
DESCRIPTION: This snippet demonstrates how global summon actions and standard actions like 'copy' are defined within the same keybindings array in the Windows Terminal settings JSON. It shows the structure including the 'keys' and 'command' properties, and how arguments like 'monitor' are passed to the 'globalSummon' action.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#653 - Quake Mode/#653 - Quake Mode.md#_snippet_0

LANGUAGE: json
CODE:
```
{ "keys": "ctrl+c", "command": { "action": "globalSummon", "monitor": 1 } },
{ "keys": "ctrl+v", "command": { "action": "copy" } },
```

----------------------------------------

TITLE: Build Windows Terminal in Cmd
DESCRIPTION: Build the OpenConsole.sln solution from the command line using Cmd scripts. This sequence runs the razzle.cmd script followed by the bcz command.
SOURCE: https://github.com/microsoft/terminal/blob/main/README.md#_snippet_8

LANGUAGE: Shell
CODE:
```
.\tools\razzle.cmd
bcz
```

----------------------------------------

TITLE: Configure Tab Switcher Keybindings (JSON)
DESCRIPTION: Defines example keybindings in the Windows Terminal settings JSON to open the tab switcher with different display orders. The `displayOrder` argument can be set to `mruOrder` for Most Recently Used order or `inOrder` for the current tab bar order.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1502 - Advanced Tab Switcher/spec.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{"keys": ["ctrl+tab"], "command": {"action": "openTabSwitcher", "anchor":"ctrl", "displayOrder":"mruOrder"}}
{"keys": ["ctrl+shift+p"], "command": {"action": "openTabSwitcher", "anchor":"ctrl", "displayOrder":"inOrder"}}
```

----------------------------------------

TITLE: Configuring Command Palette Mode Prefixes in JSON
DESCRIPTION: This JSON snippet shows the settings used to define prefixes for the command palette's Action mode and Commandline mode. The `commandPaletteActionModePrefix` can be set to an empty string or `null` for no prefix, while `commandPaletteCommandlineModePrefix` is typically set to a character like '>'. Validation is needed to ensure at least one prefix is not null.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2046 - Command Palette.md#_snippet_11

LANGUAGE: JSON
CODE:
```
{
  "commandPaletteActionModePrefix": "", // or null, for no prefix
  "commandPaletteCommandlineModePrefix": ">"
}
```

----------------------------------------

TITLE: Defining Localizable Commands in JSON
DESCRIPTION: This JSON snippet demonstrates how to define commands where the 'name' property uses an object with a 'key' property. This 'key' is used at parse time to look up a localized string from a ResourceDictionary, enabling localization of built-in command names.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2046 - Command Palette.md#_snippet_8

LANGUAGE: JSON
CODE:
```
"commands": [
    { "icon": null, "name": { "key": "NewTabCommandName" }, "action": "newTab" },
    { "icon": null, "name": { "key": "CloseTabCommandKey" }, "action": "closeTab" },
    { "icon": null, "name": { "key": "ClosePaneCommandKey" }, "action": "closePane" },
    { "icon": null, "name": { "key": "SplitHorizontalCommandKey" }, "action": { "action": "splitPane", "split": "horizontal" } },
    { "icon": null, "name": { "key": "SplitVerticalCommandKey" }, "action": { "action": "splitPane", "split": "vertical" } },
    { "icon": null, "name": { "key": "NextTabCommandKey" }, "action": "nextTab" },
    { "icon": null, "name": { "key": "PrevTabCommandKey" }, "action": "prevTab" },
    { "icon": null, "name": { "key": "OpenSettingsCommandKey" }, "action": "openSettings" }
],
```

----------------------------------------

TITLE: Open Defaults File using Format and Page Args JSON
DESCRIPTION: This JSON snippet shows a keybinding command configuration using the `format` argument set to `json` and the `page` argument set to `defaults` to open the `defaults.json` file, as suggested in Proposition 2.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2557 - Settings Keybinding.md#_snippet_9

LANGUAGE: JSON
CODE:
```
{ "command": { "action": "openSettings", "format": "json", "page": "defaults" } }
```

----------------------------------------

TITLE: Building OpenConsole - PowerShell
DESCRIPTION: Imports the OpenConsole build module, sets up the MSBuild development environment, and invokes the build process for the solution. This is the recommended way to build from PowerShell.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/building.md#_snippet_2

LANGUAGE: powershell
CODE:
```
Import-Module .\tools\OpenConsole.psm1
Set-MsBuildDevEnvironment
Invoke-OpenConsoleBuild
```

----------------------------------------

TITLE: Writing UTF8 Text to Console in C++
DESCRIPTION: UTF8 and UTF16 are both widely used text encodings on Windows and it's recommended that both functions are reasonably fast. ConPTY will translate all non-Unicode text to UTF16 for you. You must validate incoming text. It's recommended to replace invalid codepoints with U+FFFD. You don't need to check for broken up codepoints at the start/end of the text, as ConPTY will handle that for you.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_23

LANGUAGE: C++
CODE:
```
HRESULT WriteUTF8([in] boolean raw, [in] CONSRV_UTF8_STRING text);
```

----------------------------------------

TITLE: Checking Buffer Size with CheckedNumeric in C++
DESCRIPTION: This snippet demonstrates the recommended pattern for safely calculating a buffer size using CheckAdd and AssignIfValid. It checks if the sum of 'input', 'padding', and 'kHeaderLength' fits within a 'size_t' and is less than 'kMaxBuffer', handling potential overflow or invalid states gracefully.
SOURCE: https://github.com/microsoft/terminal/blob/main/oss/chromium/base/numerics/README.md#_snippet_8

LANGUAGE: C++
CODE:
```
// Either input or padding (or both) may be arbitrary sizes.
size_t buff_size;
if (!CheckAdd(input, padding, kHeaderLength).AssignIfValid(&buff_size) ||
     buff_size >= kMaxBuffer) {
  // Handle an error...
} else {
  // Do stuff on success...
}
```

----------------------------------------

TITLE: Define Command Settings Schema (JSON)
DESCRIPTION: Specifies the structure for individual command entries within the 'commands' array in the Windows Terminal user settings file. Each command requires a name, an action, and an optional icon source.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2046 - Command Palette.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
    "name": string|object,
    "action": string|object,
    "icon": string
}
```

----------------------------------------

TITLE: Install Windows Terminal via Scoop (PowerShell)
DESCRIPTION: Adds the 'extras' bucket to Scoop and then installs the 'windows-terminal' package. This method is unofficial and requires Scoop to be installed and configured on your system.
SOURCE: https://github.com/microsoft/terminal/blob/main/README.md#_snippet_4

LANGUAGE: powershell
CODE:
```
scoop bucket add extras
scoop install windows-terminal
```

----------------------------------------

TITLE: Example Global Summon Key Bindings (JSON)
DESCRIPTION: This JSON block provides examples of key binding configurations for the `globalSummon` command. It demonstrates how different values for the `monitor` and `desktop` parameters (e.g., "any", "toCurrent", "onCurrent", specific monitor numbers) affect where the terminal window is summoned or created.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#653 - Quake Mode/#653 - Quake Mode.md#_snippet_2

LANGUAGE: JSON
CODE:
```
// Go to the MRU window, wherever it is
{ "keys": "win+1", "command":{ "action":"globalSummon", "monitor":"any", "desktop": "any" } },

// activate the MRU window, and move it to this desktop & this monitor
{ "keys": "win+2", "command":{ "action":"globalSummon", "monitor":"toCurrent", "desktop": "toCurrent" } },
// Since "toCurrent" & "toCurrent" are the default values, just placing a single
// entry here will bind the same behavior:
{ "keys": "win+2", "command": "globalSummon" },

// activate the MRU window on this desktop
{ "keys": "win+3", "command":{ "action":"globalSummon", "monitor":"any", "desktop": "onCurrent" } },

// Activate the MRU window on monitor 2 (from any desktop), and place it on the
// current desktop. If there isn't one on monitor 2, make a new one.
{ "keys": "win+4", "command":{ "action":"globalSummon", "monitor": 2, "desktop": "toCurrent" } },

// Activate the MRU window on monitor 3 (ONLY THIS desktop), or make a new one.
{ "keys": "win+5", "command":{ "action":"globalSummon", "monitor": 3, "desktop": "onCurrent" } },

// Activate the MRU window on this monitor (from any desktop), and place it on
// the current desktop. If there isn't one on this monitor, make a new one.
{ "keys": "win+6", "command":{ "action":"globalSummon", "monitor": "onCurrent", "desktop": "toCurrent" } }
```

----------------------------------------

TITLE: Configuring Anaconda Profile in Windows Terminal (JSON)
DESCRIPTION: Example JSON configuration for adding an Anaconda profile to Windows Terminal settings. It sets the command line to activate the Anaconda environment, specifies the icon path, names the profile "Anaconda3", and sets the starting directory to the user profile. Assumes Anaconda is installed in %USERPROFILE%\Anaconda3.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/user-docs/ThirdPartyToolProfiles.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
    "commandline": "cmd.exe /k \"%USERPROFILE%\\Anaconda3\\Scripts\\activate.bat %USERPROFILE%\\Anaconda3\"",
    "icon": "%USERPROFILE%\\Anaconda3\\Menu\\anaconda-navigator.ico",
    "name": "Anaconda3",
    "startingDirectory": "%USERPROFILE%"
}
```

----------------------------------------

TITLE: Configuring Far Manager Profile in Windows Terminal (JSON)
DESCRIPTION: Example JSON configuration for adding a Far Manager profile to Windows Terminal settings. It sets the profile name "Far", specifies the command line to launch the Far executable, sets the starting directory to the user profile, and disables acrylic effect. Assumes Far is installed in c:\Program Files\Far Manager.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/user-docs/ThirdPartyToolProfiles.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "name": "Far",
    "commandline": "\"c:\\program files\\far manager\\far.exe\"",
    "startingDirectory": "%USERPROFILE%",
    "useAcrylic": false
}
```

----------------------------------------

TITLE: Using setlocal in CMD.exe Batch Scripts
DESCRIPTION: Explains the usage and behavior of the `setlocal` command within CMD.exe batch scripts. It clarifies that `setlocal` is a command processed by the `cmd.exe` engine for a specific script and does not behave like a standard environment variable.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/Niksa.md#_snippet_0

LANGUAGE: Batchfile
CODE:
```
setlocal
```

----------------------------------------

TITLE: Process and Install iTerm2 Schemes for Windows Terminal (PowerShell)
DESCRIPTION: This snippet navigates to the cloned repository, iterates through JSON scheme files in the `windowsterminal` subdirectory, reads and converts each scheme to a JSON object, aggregates them into an array, formats them into a Windows Terminal fragment JSON, creates the target directory if necessary, removes any existing fragment file, and writes the new fragment JSON to the Windows Terminal fragments directory.
SOURCE: https://github.com/microsoft/terminal/blob/main/src/tools/schemes-fragment/import-all-schemes.ipynb#_snippet_1

LANGUAGE: PowerShell
CODE:
```
cd "$env:TEMP\iTerm2-Color-Schemes"

Write-Host "Importing schemes from '$env:TEMP\iTerm2-Color-Schemes'"

# Iterate over all the files in the `windowsterminal` directory

$allSchemesFiles = Get-ChildItem -Path "$env:TEMP\iTerm2-Color-Schemes\windowsterminal" -Filter *.json
Write-host "Found $($allSchemesFiles.Count) schemes"

$allSchemeJsons = @()

$allSchemesFiles | ForEach-Object {

    Write-Host "`r`e[K  Importing $_           " -NoNewline
    $json = Get-Content $_.FullName -Raw | ConvertFrom-Json
    $allSchemeJsons += $json

}
Write-Host ""
Write-Host "Imported json for $($allSchemeJsons.Count) schemes"

# Create a new fragment json in the temp directory with all the schemes added to a "schemes" array

$fragmentJson = @{
    "schemes" = $allSchemeJsons
} | ConvertTo-Json

# Remove the existing fragment json if it exists
$fragmentDir = $env:LOCALAPPDATA + "\Microsoft\Windows Terminal\Fragments\AllColorSchemes"
$fragmentPath = $fragmentDir + "\schemes.json"
if (Test-Path -Path $fragmentPath) {
    Remove-Item -Path $fragmentPath
}
# make sure the directory exists
New-Item -Path $fragmentDir -ItemType Directory -Force

# Write the fragment json to the fragments directory
Write-Output $fragmentJson | Out-File $fragmentPath -Encoding Utf8

write-host "Fragment json written to $fragmentPath"
```

----------------------------------------

TITLE: Example JSON configuration for unfocused appearance
DESCRIPTION: This JSON snippet shows how to define an 'unfocusedAppearance' object within a Windows Terminal profile. It specifies appearance settings like color scheme, cursor style, foreground, and background colors that apply when the terminal pane is not focused.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#3062 - Appearance configuration object for profiles.md#_snippet_0

LANGUAGE: JSON
CODE:
```
"unfocusedAppearance":
{
    "colorScheme": "Campbell",
    "cursorColor": "#888",
    "cursorShape": "emptyBox",
    "foreground": "#C0C0C0",
    "background": "#000000"
}
```

----------------------------------------

TITLE: Configuring Window Background Mica Effect (Windows Terminal, JSON)
DESCRIPTION: A boolean setting that enables or disables the Mica effect for the window background. Refer to the Mica Spec documentation for more detailed information on this visual effect.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_14

LANGUAGE: JSON
CODE:
```
"window.background.useMica": false
```

----------------------------------------

TITLE: Default Command Palette Bindings Configuration
DESCRIPTION: This JSON snippet defines the default command bindings for the Windows Terminal, specifically configuring how commands appear in the Command Palette. It includes nested, iterable commands for opening new tabs with profiles, selecting color schemes, and splitting panes with profiles and different split directions. These configurations allow users to access these actions easily via the Command Palette.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2046 - Unified keybindings and commands, and synthesized action names.md#_snippet_4

LANGUAGE: json
CODE:
```
"bindings": [
  {
    "icon": null,
    "name": { "key": "NewTabWithProfileRootCommandName" },
    "commands": [
      {
        "iterateOn": "profiles",
        "icon": "${profile.icon}",
        "name": "${profile.name}",
        "command": { "action": "newTab", "profile": "${profile.name}" }
      }
    ]
  },
  {
    "icon": null,
    "name": { "key": "SelectColorSchemeRootCommandName" },
    "commands": [
      {
        "iterateOn": "schemes",
        "icon": null,
        "name": "${scheme.name}",
        "command": { "action": "selectColorScheme", "scheme": "${scheme.name}" }
      }
    ]
  },
  {
    "icon": null,
    "name": { "key": "SplitPaneWithProfileRootCommandName" },
    "commands": [
      {
        "iterateOn": "profiles",
        "icon": "${profile.icon}",
        "name": { "key": "SplitPaneWithProfileCommandName" },
        "commands": [
          {
            "icon": null,
            "name": { "key": "SplitPaneName" },
            "command": { "action": "splitPane", "profile": "${profile.name}", "split": "automatic" }
          },
          {
            "icon": null,
            "name": { "key": "SplitPaneVerticalName" },
            "command": { "action": "splitPane", "profile": "${profile.name}", "split": "vertical" }
          },
          {
            "icon": null,
            "name": { "key": "SplitPaneHorizontalName" },
            "command": { "action": "splitPane", "profile": "${profile.name}", "split": "horizontal" }
          }
        ]
      }
    ]
  }
]
```

----------------------------------------

TITLE: Default Keybindings for Selection Update (JS)
DESCRIPTION: These JavaScript objects define the default keybindings for the proposed `updateSelection` action. Each binding maps a key combination (e.g., `shift+left`) to a command object specifying the action (`updateSelection`), direction (`left`, `right`, `up`, `down`), and mode (`char`, `word`, `view`, `buffer`) for moving the selection endpoint when a selection is active.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#4993 - Keyboard Selection/Keyboard-Selection.md#_snippet_0

LANGUAGE: JS
CODE:
```
// Character Selection
{ "command": {"action": "updateSelection", "direction": "left",  "mode": "char" }, "keys": "shift+left" },
{ "command": {"action": "updateSelection", "direction": "right", "mode": "char" }, "keys": "shift+right" },
{ "command": {"action": "updateSelection", "direction": "up",    "mode": "char" }, "keys": "shift+up" },
{ "command": {"action": "updateSelection", "direction": "down",  "mode": "char" }, "keys": "shift+down" },

// Word Selection
{ "command": {"action": "updateSelection", "direction": "left",  "mode": "word" }, "keys": "ctrl+shift+left" },
{ "command": {"action": "updateSelection", "direction": "right", "mode": "word" }, "keys": "ctrl+shift+right" },

// Viewport Selection
{ "command": {"action": "updateSelection", "direction": "left",  "mode": "view" }, "keys": "shift+home" },
{ "command": {"action": "updateSelection", "direction": "right", "mode": "view" }, "keys": "shift+end" },
{ "command": {"action": "updateSelection", "direction": "up",    "mode": "view" }, "keys": "shift+pgup" },
{ "command": {"action": "updateSelection", "direction": "down",  "mode": "view" }, "keys": "shift+pgdn" },

// Buffer Corner Selection
{ "command": {"action": "updateSelection", "direction": "up",    "mode": "buffer" }, "keys": "ctrl+shift+home" },
{ "command": {"action": "updateSelection", "direction": "down",  "mode": "buffer" }, "keys": "ctrl+shift+end" },
```

----------------------------------------

TITLE: Example Windows Terminal Theme Settings
DESCRIPTION: This JSON snippet illustrates how themes are defined and selected within the Windows Terminal settings file. It shows a list of available themes under the 'themes' array and how a specific theme is applied using the 'theme' property.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_0

LANGUAGE: json
CODE:
```
{
    "theme": "My Boxy Theme",
    "themes": [
        {
            "name": "My Boxy Theme",
            "window":{
              "applicationTheme": "dark"
            },
            "tab": {
              "radius": 0,
              "padding": 5,
              "background": "terminalBackground",
              "textColor": "key:SystemAccentColorLight3",
              "icon": "outline",
              "closeButton": "hidden"
            },
            "tabRow":{
              "background": "accent",
              "shadows": false
            }
        },
        {
            "name": "My small light theme",
            "window":{
              "applicationTheme": "light"
            },
            "tab": {
              "background": "#80ff0000",
              "height": 8,
              "icon": "hidden",
              "closeButton": "hover"
            },
            "tabRow":{
              "background": "#ffffffff",
              "acrylicOpacity": 50
            }
        }
    ]
}
```

----------------------------------------

TITLE: Implementing Custom JSON Conversion with ConversionTrait (C++)
DESCRIPTION: Shows how to specialize JsonUtils::ConversionTrait<T> for a user-defined type MyCustomType. The specialization requires implementing FromJson to perform the conversion from Json::Value and CanConvert to check if the conversion is possible.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Json-Utility-API.md#_snippet_3

LANGUAGE: C++
CODE:
```
struct MyCustomType { int val; };

template<>
struct ConversionTrait<MyCustomType>
{
    // This trait converts a string of the format "[0-9]" to a value of type MyCustomType.

    static MyCustomType FromJson(const Json::Value& json)
    {
        return MyCustomType{ json.asString()[0] - '0' };
    }

    static bool CanConvert(const Json::Value& json)
    {
        return json.isString();
    }
};
```

----------------------------------------

TITLE: Example New Profile in User Settings (JSON)
DESCRIPTION: This JSON snippet illustrates how a new profile created from a full profile stub would appear when added to the user's Windows Terminal settings file. It includes the 'guid', 'name', 'hidden' (defaulting to false), and a 'source' field indicating its origin. This shows the minimal representation added to the user's file.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/Proto extensions-spec.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
    "guid": "{a821ae62-9d4a-3e34-b989-0a998ec283e6}",
    "name": "Cool Profile",
    "hidden": "false",
    "source": "local"
}
```

----------------------------------------

TITLE: Configuring Font Features and Axes in Windows Terminal JSON Settings
DESCRIPTION: This JSON snippet shows how to define font settings in the Windows Terminal settings.json file, including specifying the font face and size, and configuring advanced font features (like stylistic sets and ligatures) and axes of variation (like slant) using key-value pairs. It illustrates the proposed structure for customizing font appearance beyond basic settings.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1790 - Font features and axes-spec.md#_snippet_0

LANGUAGE: JSON
CODE:
```
"font": {
    "face": "Cascadia Code",
    "size": 12,
    "features": {
        "ss03": 1,
        "liga": 0
    },
    "axes": {
        "slnt": 20.5
    }
}
```

----------------------------------------

TITLE: Creating XAML Control for Non-Enum Setting (XAML)
DESCRIPTION: Shows how to create a XAML control for a non-enum setting using a `CheckBox`. It demonstrates binding `IsChecked` directly to the setting value via the state object, wrapped in a `ContentPresenter` with appropriate styling.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_17

LANGUAGE: XAML
CODE:
```
<!--AltGr Aliasing-->
<ContentPresenter Style="{StaticResource SettingContainerStyle}">
    <CheckBox x:Uid="Profile_AltGrAliasing"
              IsChecked="{x:Bind State.Profile.AltGrAliasing, Mode=TwoWay}"
              Style="{StaticResource CheckBoxSettingStyle}"/>
</ContentPresenter>
```

----------------------------------------

TITLE: Example JSON Configuration for Initial Position and Launch Mode
DESCRIPTION: This JSON snippet illustrates how to add the 'initialPosition' and 'launchMode' properties to a Windows Terminal profile or settings file to control the window's starting location and size.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1043 - Set the initial position of the Terminal/spec.md#_snippet_0

LANGUAGE: json
CODE:
```
"initialPosition": "500,500",
"launchMode": "default"
```

----------------------------------------

TITLE: Example JSON Representation of Command and Keybinding
DESCRIPTION: Illustrates the current combined representation of a command and its associated keybinding within the Windows Terminal settings JSON file. This format is used for serialization and deserialization of user-defined actions.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/Actions Addendum.md#_snippet_0

LANGUAGE: js
CODE:
```
{ "icon": "path/to/icon.png", "name": "Copy the selected text", "command": "copy", "keys": "ctrl+c" },
```

----------------------------------------

TITLE: Configure Suggestions Action with Commandline Prepopulation (JSON)
DESCRIPTION: Defines a Windows Terminal action that opens the Suggestions UI, sourcing from command history and prepopulating the filter with the current command line input. This requires shell integration to be enabled.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1595 - Suggestions UI/Suggestions-UI.md#_snippet_1

LANGUAGE: json
CODE:
```
{ "command": { "action":"suggestions", "source": "commandHistory", "useCommandline": true } }
```

----------------------------------------

TITLE: Configure Pixel Shader Path in Windows Terminal JSON Settings
DESCRIPTION: Demonstrates how to add the "experimental.pixelShaderPath" setting to a Windows Terminal profile's settings.json file. This setting points the terminal to the location of a compiled HLSL pixel shader file (.hlsl) to be applied to the terminal's rendering.
SOURCE: https://github.com/microsoft/terminal/blob/main/samples/PixelShaders/README.md#_snippet_0

LANGUAGE: JSON
CODE:
```
"experimental.pixelShaderPath": "<path to a .hlsl pixel shader>"
```

LANGUAGE: JSON
CODE:
```
"experimental.pixelShaderPath": "C:\\temp\\invert.hlsl"
```

----------------------------------------

TITLE: Configuring Tab Close Button Visibility (Windows Terminal, JSON)
DESCRIPTION: Controls the visibility of the close button for a tab item. Accepted values are "visible" (always visible, default), "hover" (visible only when the tab is hovered), or "hidden" (always hidden).
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_3

LANGUAGE: JSON
CODE:
```
"tab.closeButton": "visible"
```

----------------------------------------

TITLE: Define Broadcast Input Actions (JSON)
DESCRIPTION: Defines potential JSON action objects for controlling broadcast input scope in Windows Terminal. These actions allow disabling broadcasting or toggling it for different scopes: the entire window, the current tab, or the currently active pane.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#2634 - Broadcast Input/#2634 - Broadcast Input.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "action": "disableBroadcastInput"
},
{
  "action": "toggleBroadcastInput", "scope": "window"
},
{
  "action": "toggleBroadcastInput", "scope": "tab"
},
{
  "action": "toggleBroadcastInput", "scope": "pane"
}
```

----------------------------------------

TITLE: Configuring Tab Corner Radius (Windows Terminal, JSON)
DESCRIPTION: Controls the radius of the corners of the tab items. Accepts a double value. Setting this to 0 results in squared-off corners. While there's no strict maximum, very large values may not be aesthetically pleasing.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_1

LANGUAGE: JSON
CODE:
```
"tab.cornerRadius": 0.0
```

----------------------------------------

TITLE: Focus Tab Command - Windows Terminal
DESCRIPTION: Moves the focus to a specific tab within the Windows Terminal window. The target tab is identified by its index. If no index is provided, it defaults to the first tab (index 0).
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_14

LANGUAGE: Command Line
CODE:
```
focus-tab [--target,-t tab-index]
```

----------------------------------------

TITLE: Open Settings UI Profiles Page using Target Arg JSON
DESCRIPTION: This JSON snippet illustrates a keybinding command configuration using the `target` argument set to `uiProfiles` to navigate directly to the Profiles page within the Settings UI, as detailed in Proposition 1.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2557 - Settings Keybinding.md#_snippet_6

LANGUAGE: JSON
CODE:
```
{ "command": { "action": "openSettings", "target": "uiProfiles" } }
```

----------------------------------------

TITLE: Setting Console Cursor Position C++
DESCRIPTION: Sets the cursor position within the active buffer. Coordinates may be outside the current VT viewport.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_18

LANGUAGE: C++
CODE:
```
HRESULT SetCursorPosition([in] CONSRV_POINT_I32 pos);
```

----------------------------------------

TITLE: Proposal 3: JSON Profile Structure with Defaults Object
DESCRIPTION: This JSON snippet illustrates Proposal 3, where the 'profiles' key becomes an object containing a 'defaults' object for common settings and a 'list' array for individual profiles. This groups default settings explicitly under the 'profiles' object.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2325 - Default Profile Settings.md#_snippet_2

LANGUAGE: json
CODE:
```
{
    "$schema": "https://aka.ms/terminal-profiles-schema",
    "defaultProfile": "{61c54bbd-c2c6-5271-96e7-009a87ff44bf}",
    "requestedTheme" : "dark",
    "showTabsInTitlebar" : true,
    "profiles":
    {
        "defaults": {
            "useAcrylic": true,
            "acrylicOpacity": 0.1,
            "fontFace": "Cascadia Code",
            "fontSize": 10
        },
        "list":[
            {
                "guid": "{61c54bbd-c2c6-5271-96e7-009a87ff44bf}",
                "name": "Windows PowerShell",
                "commandline": "powershell.exe",
                "hidden": false
            },
            {
                "guid": "{0caa0dad-35be-5f56-a8ff-afceeeaa6101}",
                "name": "cmd",
                "commandline": "cmd.exe",
                "hidden": false
            }
        ]
    },
    "schemes": [],
    "keybindings": []
}
```

----------------------------------------

TITLE: Example Windows Terminal Tab State Serialization (JSON)
DESCRIPTION: This JSON object represents a serialized state of Windows Terminal tabs and panes. It demonstrates how different content types (TermControl, SettingsPage) can include specific payload data to facilitate recreating their state when a tab is moved to a new window, such as during a tear-out operation.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#5000 - Process Model 2.0/#5000 - Process Model 2.0.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "tabs": [
    {
      "runtimeTitle": "foo",
      "runtimeColor": null,
      "panes": [
        {
          "split": "horizontal",
          "children": [
            {
              "size": 0.30,
              "contentType": "Microsoft.Terminal.TerminalControl",
              "payload": {
                "contentGuid": "{1-1-1-1}"
              }
            },
            {
              "size": 0.70,
              "contentType": "Microsoft.Terminal.TerminalControl",
              "payload": {
                "contentGuid": "{2-2-2-2}"
              }
            }
          ]
        }
      ]
    },
    {
      "runtimeTitle": null,
      "runtimeColor": null,
      "panes": [
        {
          "size": 1.0,
          "contentType": "Microsoft.Terminal.SettingsPage",
          "payload": {
            "currentPage": "globals"
          }
        }
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Configuring Tab Icon Visibility/Appearance (Windows Terminal, JSON)
DESCRIPTION: Controls the visibility and appearance of the tab icon. Accepted values are "visible" (always visible, full color, default), "outline" (always visible, drawn as a monochrome outline), or "hidden" (icon is hidden).
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_4

LANGUAGE: JSON
CODE:
```
"tab.icon": "visible"
```

----------------------------------------

TITLE: Defining Per-Project Command Snippets in .wt.json (JSON)
DESCRIPTION: Example of a `.wt.json` file structure. This file defines a list of command snippets (`snippets`) that are available based on the current working directory. Each snippet includes an `input` string to send to the shell, a `name` for display, an optional `description`, and an optional `icon`.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1595 - Suggestions UI/Snippets.md#_snippet_3

LANGUAGE: json
CODE:
```
{
    "$version": "1.0.0",
    "snippets":
    [
        {
            "input": "bx",
            "name": "Build project",
            "description": "Build the project in the CWD"
        },
        {
            "input": "bcz",
            "name": "Clean & build solution",
            "icon": "\uE8e6",
            "description": "Start over. Go get your coffee. "
        },
        {
            "input": "nuget push -ApiKey az -source TerminalDependencies %userprofile%\\Downloads" ,
            "name": "Upload package to nuget feed",
            "icon": "\uE898",
            "description": "Go download a .nupkg, put it in ~/Downloads, and use this to push to our private feed."
        }
    ]
}
```

----------------------------------------

TITLE: Displaying Help Text for Windows Terminal (sh)
DESCRIPTION: Provides various ways to display the help text for the `wt` command, including the `help` command and common help flags (`--help`, `-h`, `-?`, `/?`).
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_2

LANGUAGE: sh
CODE:
```
# display the help text (user story 4)
wt help
wt --help
wt -h
wt -?
wt /?
```

----------------------------------------

TITLE: Configuring Tab Row Unfocused Background Color (Windows Terminal, JSON)
DESCRIPTION: Controls the background color of the tab row when the window is unfocused. Like `tabRow.background`, this setting ignores any alpha channel. The default behavior when omitted is currently under consideration.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_7

LANGUAGE: JSON
CODE:
```
"tabRow.unfocusedBackground": "#654321"
```

----------------------------------------

TITLE: Defining Elevated Profile Inheritance in Windows Terminal Configuration
DESCRIPTION: This JSON snippet illustrates a potential configuration approach for Windows Terminal profiles, allowing an elevated version of a profile to inherit settings from a base profile while overriding specific properties like background color and command line.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#5000 - Process Model 2.0/#1032 - Elevation Quality of Life Improvements.md#_snippet_4

LANGUAGE: json
CODE:
```
{
  "name": "foo",
  "background": "#0000ff",
  "commandline": "cmd.exe /k echo I am unelevated"
},
{
  "inheritsFrom": "foo",
  "background": "#ff0000",
  "elevate": true,
  "commandline": "cmd.exe /k echo I am ELEVATED"
}
```

----------------------------------------

TITLE: Demonstrating Non-Sticky Saturation in ClampedNumeric (C++)
DESCRIPTION: Illustrates that the saturation behavior of `ClampedNumeric` is not 'sticky'. When a value saturates (e.g., reaches `INT_MAX`), subsequent operations can still modify the value relative to its current saturated state, rather than remaining permanently saturated.
SOURCE: https://github.com/microsoft/terminal/blob/main/oss/chromium/base/numerics/README.md#_snippet_7

LANGUAGE: C++
CODE:
```
ClampedNumeric<int> value = INT_MAX;
++value;  // value is still INT_MAX, due to saturation.
--value;  // value is now (INT_MAX - 1), because saturation is not sticky.
```

----------------------------------------

TITLE: Initialize Xaml Islands in Test Setup (C++)
DESCRIPTION: Demonstrates how to initialize the Xaml Hosting Manager (`WindowsXamlManager`) and `DesktopWindowXamlSource` within a test class setup method (`TEST_CLASS_SETUP`). This setup is performed once per test class to prepare the environment for using XAML types. It also shows the required private members to hold the initialized objects.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Unittesting-CppWinRT-Xaml.md#_snippet_11

LANGUAGE: C++
CODE:
```

class TabTests
{
    TEST_CLASS_SETUP(ClassSetup)
    {
        winrt::init_apartment(winrt::apartment_type::single_threaded);
        // Initialize the Xaml Hosting Manager
        _manager = winrt::Windows::UI::Xaml::Hosting::WindowsXamlManager::InitializeForCurrentThread();
        _source = winrt::Windows::UI::Xaml::Hosting::DesktopWindowXamlSource{};

        return true;
    }

private:
    winrt::Windows::UI::Xaml::Hosting::WindowsXamlManager _manager{ nullptr };
    winrt::Windows::UI::Xaml::Hosting::DesktopWindowXamlSource _source{ nullptr };
}
```

----------------------------------------

TITLE: Example Keybindings for openNewTabDropdown in Windows Terminal
DESCRIPTION: This JSON snippet defines example keybindings for the `openNewTabDropdown` action in Windows Terminal. It demonstrates how to use the `index` parameter to trigger actions based on the position of items in the new tab menu, such as focusing a folder, performing an action, or opening a specific profile.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1571 - New Tab Menu Customization/#1571 - New Tab Menu Customization.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{
  "bindings":
  [
    { "command": { "action": "openNewTabDropdown", "index": 0 }, "keys": "ctrl+shift+1" },
    { "command": { "action": "openNewTabDropdown", "index": 1 }, "keys": "ctrl+shift+2" },
    { "command": { "action": "openNewTabDropdown", "index": 2 }, "keys": "ctrl+shift+3" },
    { "command": { "action": "openNewTabDropdown", "index": 3 }, "keys": "ctrl+shift+4" }
  ]
}
```

----------------------------------------

TITLE: Registering App Package with Add-AppxPackage (PowerShell)
DESCRIPTION: Registers an app package manifest file using the `Add-AppxPackage` cmdlet. This command is used to attempt deployment outside of Visual Studio and often provides more detailed error information, including an ActivityID for further logging.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/building.md#_snippet_6

LANGUAGE: pwsh
CODE:
```
Add-AppxPackage -register "Z:\dev\public\OpenConsole\src\cascadia\CascadiaPackage\bin\x64\Debug\AppX\AppxManifest.xml"
```

----------------------------------------

TITLE: Releasing Console Alt Buffer C++
DESCRIPTION: Releases a previously created console alternate buffer. This function is guaranteed to be called when the buffer is no longer needed.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_14

LANGUAGE: C++
CODE:
```
HRESULT ReleaseBuffer([in] void* buffer);
```

----------------------------------------

TITLE: Encapsulating Exceptions in C++ Class
DESCRIPTION: Illustrates a C++ class structure designed to contain exception handling within its private implementation, exposing only non-exception-throwing interfaces (like HRESULT return values) publicly. This prevents exceptions from propagating unexpectedly into calling code.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/EXCEPTIONS.md#_snippet_0

LANGUAGE: C++
CODE:
```
class ExceptionsDoNotLeak
{
    public:
    HRESULT SomePublicFunction();
    int iPublic;

    private:
    void _SomePrivateFunction();
    int _iPrivate;
};
```

----------------------------------------

TITLE: Proposed JSON configuration for color scheme switching (Separate Properties)
DESCRIPTION: This JSON snippet shows an alternative configuration format using separate properties, 'colorSchemeLight' and 'colorSchemeDark', to specify the color schemes for each theme mode.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#4066 - Theme-controlled color scheme switch.md#_snippet_1

LANGUAGE: json
CODE:
```
"colorSchemeLight": "BlulocoLight",
    "colorSchemeDark": "BlulocoDark"
```

----------------------------------------

TITLE: Enforcing Compile-Time Parameter Type (C++)
DESCRIPTION: Demonstrates using the `StrictNumeric` template (shown here as `StrictCast`) in function parameters. This enforces a compile-time error if an argument is passed that cannot be represented by the specified `StrictNumeric` type's underlying type, ensuring type safety at compilation.
SOURCE: https://github.com/microsoft/terminal/blob/main/oss/chromium/base/numerics/README.md#_snippet_3

LANGUAGE: C++
CODE:
```
// Throw a compiler error if the size argument cannot be represented by a
// size_t (e.g. passing an int will fail to compile).
bool AllocateBuffer(void** buffer, StrictCast<size_t> size);
```

----------------------------------------

TITLE: Preventing Private References in Item Definition Group (XML)
DESCRIPTION: A troubleshooting step involving adding an <ItemDefinitionGroup> block to the top of a .vcxproj file. This configuration sets the default <Private> property for all <Reference> items to false, preventing referenced .winmd files from being copied into the project's output folder, which can resolve "type already exists" errors.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/creating_a_new_project.md#_snippet_3

LANGUAGE: XML
CODE:
```
<ItemDefinitionGroup>
<Reference>
    <Private>false</Private>
</Reference>
</ItemDefinitionGroup>
```

----------------------------------------

TITLE: Configuring Tab Row Acrylic Opacity (Windows Terminal, JSON)
DESCRIPTION: Optional integer (0-100) representing opacity for an acrylic brush. When provided, the `tabRow.background` color is used with this opacity to create an acrylic effect. When omitted, `tabRow.background` is treated as a solid color.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_8

LANGUAGE: JSON
CODE:
```
"tabRow.acrylicOpacity": 50
```

----------------------------------------

TITLE: Global Summon Action Parameters Definition (JSON)
DESCRIPTION: Defines the structure and possible values for the `monitor` and `desktop` arguments used within the `globalSummon` action configuration in Windows Terminal settings. These parameters allow users to specify criteria for selecting the terminal window and its target location.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#653 - Quake Mode/#653 - Quake Mode.md#_snippet_1

LANGUAGE: JSON
CODE:
```
"monitor": "any"|"toCurrent"|"toMouse"|"onCurrent"|int,
"desktop": "any"|"toCurrent"|"onCurrent"
```

----------------------------------------

TITLE: Toggle Tab Broadcast Input Group - JSON Config
DESCRIPTION: Example JSON configuration for an action that toggles broadcasting input within a specific tab scope and assigns/removes panes from a designated broadcast group (group 1 in this example). This illustrates the potential syntax for managing broadcast groups.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#2634 - Broadcast Input/#2634 - Broadcast Input.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{ "action": "toggleBroadcastInput", "scope": "tab", "group": 1 }
```

----------------------------------------

TITLE: Configuring Pane Border Width (Windows Terminal, JSON)
DESCRIPTION: Control the width of the borders used to separate panes. This setting affects the thickness of the lines drawn between different pane divisions.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_11

LANGUAGE: JSON
CODE:
```
"pane.borderWidth": 1.0
```

----------------------------------------

TITLE: Windows Terminal Architecture Before ConPTY Refactor (Mermaid)
DESCRIPTION: This Mermaid flowchart visualizes the architecture of Windows Terminal and conhost before the proposed refactor, showing how ConPTY acts as an intermediary and the flow of data and control between components like parsers, buffers, renderers, and the VT engine.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
%%{ init: { "flowchart": { "curve": "monotoneX" } } }%%
flowchart TD
    subgraph conhost
        direction LR

        subgraph Server
            server_io[Console API calls]
        end

        subgraph ConPTY
            VtIo
            VtEngine
            ConPTY_output[ConPTY Output]
        end

        conhost_parser[VT parser]
        conhost_buffer[Text Buffer]
        conhost_renderer[Render Thread]
        conhost_atlas[Text Renderer]

        server_io-->conhost_parser
        server_io--scroll, clear, etc.-->VtIo
        conhost_parser--resize, focus-->VtIo
        VtIo--scroll, clear, etc.-->VtEngine
        conhost_parser--unknown escape sequences-->VtEngine
        conhost_buffer--manual flushing-->VtEngine
        conhost_renderer-->VtEngine
        VtEngine-->ConPTY_output
        conhost_buffer--dirty rects-->conhost_renderer
        conhost_parser--dirty rects-->conhost_renderer
        conhost_parser--plain text-->conhost_buffer
        conhost_renderer-->conhost_atlas
        conhost_buffer--ReadBuffer-->server_io
    end

    subgraph wt[Windows Terminal]
        direction LR

        input[ConPTY Input]
        parser[VT parser]
        buffer[Text Buffer]
        renderer[Render Thread]
        atlas[Text Renderer]

        input-->parser
        parser-->buffer
        buffer-->renderer
        renderer-->atlas
        parser-->renderer
    end

    conhost--ConPTY's text pipe across processes-->wt
```

----------------------------------------

TITLE: Global Setting for All Formatting (JSON)
DESCRIPTION: This JSON snippet shows another proposed global setting in settings.json. A boolean value controls whether all available formatting (true) or only plain text (false) is copied. Setting this to true would reverse the default right-click copy behavior.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#4191 - Formatted Copy/spec.md#_snippet_1

LANGUAGE: JSON
CODE:
```
"copyFormatting": true
```

----------------------------------------

TITLE: AppxManifest Dependencies for VCLibs and Microsoft.UI.Xaml (XML)
DESCRIPTION: Shows the Dependencies section in the AppxManifest file, specifically highlighting the PackageDependency entries required for the Visual C++ Runtime Libraries (VCLibs). These dependencies are crucial for loading components like Microsoft.UI.Xaml.dll.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Unittesting-CppWinRT-Xaml.md#_snippet_16

LANGUAGE: XML
CODE:
```
  <Dependencies>
    <TargetDeviceFamily Name="Windows.Universal" MinVersion="10.0.18362.0" MaxVersionTested="10.0.26100.0" />
    <PackageDependency Name="Microsoft.VCLibs.140.00.Debug" MinVersion="14.0.27023.1" Publisher="CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US" />
    <PackageDependency Name="Microsoft.VCLibs.140.00.Debug.UWPDesktop" MinVersion="14.0.27027.1" Publisher="CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US" />
  </Dependencies>
```

----------------------------------------

TITLE: Open Settings UI Globals Page using Target Arg JSON
DESCRIPTION: This JSON snippet shows a keybinding command configuration using the `target` argument set to `uiGlobals` to navigate directly to the Globals page within the Settings UI, as described in Proposition 1.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2557 - Settings Keybinding.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{ "command": { "action": "openSettings", "target": "uiGlobals" } }
```

----------------------------------------

TITLE: User Interaction Flow for Search - Microsoft Terminal
DESCRIPTION: Details the user's interaction steps with the search box, from opening it to performing searches, navigating elements, closing it, and interacting with the terminal while it's open.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#605 - Search/spec.md#_snippet_2

LANGUAGE: Documentation
CODE:
```
1. The user presses <kbd>ctrl+shift+f</kbd> (or user's custom key binding) to open the search box. Focus will move to the TextBox.
2. Search is performed on a XAML TextBox. Once the user presses Enter or click up/down arrow button, the search starts and searched text will be selected. Next search will be performed beginning from the current selection and go towards up/down.
3. The user can choose to search up or down by selecting up arrow or down arrow buttons. The chosen button will be styled to indicate it is selected. If the user does not click the arrows buttons, the default direction is up.
4. The user can choose to do case-sensitive or insensitive match by checking a check box. The default is case-insensitive.
5. If the search box is focused, the user can navigate all the elements on the search box using tab. When selected, pressing Enter is equivalent to clicking.
6. If the user click the "X" button or press <kbd>Esc</kbd>, the search stopped and the search box disappears and focus will move back to Terminal.
7. Once the search box is closed (exiting search mode), the selection will still be there. This coincides with the current VS Code and cmd experience. To get rid of the selection, the user can just click other area of the window.
8. If the user clicks on the terminal when the search box is open, it will draw focus back to the terminal from the search box. The search box will still stay open.
9. The user can interact with the terminal when the search box is open, which means that the user can scroll the terminal content, or input text when the focus is on the terminal control.
10. If the user switches tabs while the search box is open, the focus will be moved back to the terminal.
```

----------------------------------------

TITLE: Example KeyBindings Implementation for Project Cascadia (C#)
DESCRIPTION: Provides a sample structure for a concrete implementation of IKeyBindings, including an enumeration for possible shortcut actions, delegate types for events, and the basic class structure with methods for setting and trying key chords.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/Keybindings-spec.md#_snippet_3

LANGUAGE: csharp
CODE:
```
enum ShortcutAction
{
    CopyText,
    PasteText,
    NewTab,
    NewWindow,
    CloseWindow,
    CloseTab,
    SwitchToTab,
    NextTab,
    PrevTab,
    IncreaseFontSize,
    DecreaseFontSize,
    ...
}
public delegate bool NewTabEvent(object sender);
public delegate bool CloseTabEvent(object sender);
public delegate bool NewWindowEvent(object sender);
public delegate bool CloseWindowEvent(object sender);
public delegate bool CopyEvent(object sender);
public delegate bool PasteEvent(object sender);

class KeyBindings : IKeyBindings
{
    private Dictionary<ShortcutAction, KeyChord?> keyShortcuts;

    public void SetKeyBinding(ShortcutAction action, KeyChord? chord);
    public bool TryKeyChord(KeyChord chord);
}
```

----------------------------------------

TITLE: Converting JSON Values with GetValue (C++)
DESCRIPTION: Demonstrates how to use JsonUtils::GetValue for both reference-filling (populating existing variables) and value-returning scenarios. It handles direct types and std::optional, throwing exceptions on conversion failure.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Json-Utility-API.md#_snippet_0

LANGUAGE: C++
CODE:
```
std::string one;
std::optional<std::string> two;

JsonUtils::GetValue(json, one);
// one is populated or an exception is thrown.

JsonUtils::GetValue(json, two);
// two is populated, nullopt or an exception is thrown

auto three = JsonUtils::GetValue<std::string>(json);
// three is populated or an exception is thrown

auto four = JsonUtils::GetValue<std::optional<std::string>>(json);
// four is populated or nullopt
```

----------------------------------------

TITLE: Debug Specific TAEF Test (Shell)
DESCRIPTION: Run a specific test using `runut` (likely a wrapper for `te.exe`) with the `/waitForDebugger` flag. This pauses the test execution until a debugger is attached to the process.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/TAEF.md#_snippet_5

LANGUAGE: Shell
CODE:
```
runut *Tests.dll /name:TextBufferTests::TestInsertCharacter /waitForDebugger
```

----------------------------------------

TITLE: Retrieving App Package Deployment Logs with Get-AppPackageLog (PowerShell)
DESCRIPTION: Retrieves detailed deployment logs for a specific app package activity using the `Get-AppPackageLog` cmdlet and a provided ActivityID. This helps diagnose the root cause of registration failures reported by `Add-AppxPackage`.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/building.md#_snippet_7

LANGUAGE: pwsh
CODE:
```
Get-AppPackageLog -ActivityID dbf551f1-83d0-0007-43e7-9cded083da01
```

----------------------------------------

TITLE: Copying Dependencies with PostBuildEvent (XML)
DESCRIPTION: Extends the post-build event to copy both the manifest and all necessary dependent C++/WinRT DLLs to the test output directory. This ensures all runtime dependencies are available for the test execution.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Unittesting-CppWinRT-Xaml.md#_snippet_7

LANGUAGE: XML
CODE:
```
<ItemDefinitionGroup>
    <PostBuildEvent>
      <Command>
        echo OutDir=$(OutDir)
        (xcopy /Y &quot;$(SolutionDir)src\cascadia\ut_app\TerminalApp.Unit.Tests.manifest&quot; &quot;$(OutDir)\TerminalApp.Unit.Tests.manifest*&quot; )

        (xcopy /Y &quot;$(OpenConsoleCommonOutDir)\TerminalConnection\TerminalConnection.dll&quot; &quot;$(OutDir)\TerminalConnection.dll*&quot; )
        (xcopy /Y &quot;$(OpenConsoleCommonOutDir)\TerminalSettings\TerminalSettings.dll&quot; &quot;$(OutDir)\TerminalSettings.dll*&quot; )
        (xcopy /Y &quot;$(OpenConsoleCommonOutDir)\TerminalControl\TerminalControl.dll&quot; &quot;$(OutDir)\TerminalControl.dll*&quot; )
      </Command>
    </PostBuildEvent>
  </ItemDefinitionGroup>
```

----------------------------------------

TITLE: Cloning Directed Acyclic Graph (DAG) in Python
DESCRIPTION: Provides a Python function `cloneGraph` implementing a depth-wise recursive algorithm to clone a directed acyclic graph (DAG). It uses a `visited` map to track nodes and ensures that nodes are initialized only once during traversal, suitable for copying structures like the profile inheritance DAG.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/#885 - Terminal Settings Model.md#_snippet_8

LANGUAGE: python
CODE:
```
# Function to clone a graph. To do this, we start
# reading the original graph depth-wise, recursively
# If we encounter an unvisited node in original graph,
# we initialize a new instance of Node for
# cloned graph with key of original node
def cloneGraph(oldSource, newSource, visited):
    clone = None
    if visited[oldSource.key] is False and oldSource.adj is not None:
        for old in oldSource.adj:

            # Below check is for backtracking, so new
            # nodes don't get initialized every time
            if clone is None or(clone is not None and clone.key != old.key):
                clone = Node(old.key, [])
            newSource.adj.append(clone)
            cloneGraph(old, clone, visited)

            # Once, all neighbors for that particular node
            # are created in cloned graph, code backtracks
            # and exits from that node, mark the node as
            # visited in original graph, and traverse the
            # next unvisited
            visited[old.key] = True
    return newSource
```

----------------------------------------

TITLE: Launching New Elevated Tab with wt Command
DESCRIPTION: This command is used internally by Windows Terminal to launch a new tab with elevated privileges. When executed from an unelevated context for a profile configured with "elevate": true, it spawns a new wt process that will run elevated. The [args...] represent optional arguments passed to the new tab.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#5000 - Process Model 2.0/#1032 - Elevation Quality of Life Improvements.md#_snippet_0

LANGUAGE: cmd
CODE:
```
wt new-tab [args...]
```

----------------------------------------

TITLE: Referencing C++/WinRT Static Library in TAEF Test Project XML
DESCRIPTION: Illustrates how to add a reference to a C++/WinRT static library project (.vcxproj) from a TAEF unittest DLL project using a ProjectReference element. This allows the test project to instantiate and test types defined in the static library.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Unittesting-CppWinRT-Xaml.md#_snippet_3

LANGUAGE: xml
CODE:
```
    <ProjectReference Include="$(SolutionDir)\src\cascadia\TerminalApp\lib\TerminalAppLib.vcxproj" />
```

----------------------------------------

TITLE: Manually Linking Static Library in MSBuild XML
DESCRIPTION: Demonstrates how to manually link a static library (.lib) into a Visual Studio project's linker settings by specifying the library directory and the library file name in the AdditionalLibraryDirectories and AdditionalDependencies properties within an ItemDefinitionGroup for the Link task. This is presented as an alternative to ProjectReference.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Unittesting-CppWinRT-Xaml.md#_snippet_1

LANGUAGE: xml
CODE:
```
  <ItemDefinitionGroup>
    <Link>
      <!-- Manually link with the TerminalAppLib.lib we've built. -->
      <AdditionalLibraryDirectories>$(OpenConsoleCommonOutDir)\TerminalAppLib;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>

      <AdditionalDependencies>TerminalAppLib.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
  </ItemDefinitionGroup>
```

----------------------------------------

TITLE: Defining AppKeyBindings and KeyMapping Classes (C++/WinRT)
DESCRIPTION: This C++/WinRT snippet defines the proposed AppKeyBindings and KeyMapping runtime classes. AppKeyBindings retains dispatching responsibility, while the new KeyMapping class handles setting, clearing, and retrieving key bindings, intended for serialization and navigation. It shows the separation of concerns for handling key chords and actions.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/#885 - Terminal Settings Model.md#_snippet_0

LANGUAGE: C++
CODE:
```
namespace TerminalApp
{
    [default_interface] runtimeclass AppKeyBindings : Microsoft.Terminal.TerminalControl.IKeyBindings
    {
        AppKeyBindings();

        // NOTE: It may be possible to move both of these to the constructor instead
        void SetDispatch(ShortcutActionDispatch dispatch);
        void SetKeyMap(KeyMapping keymap);
    }
}

namespace TerminalSettingsModel
{
    [default_interface] runtimeclass KeyMapping
    {
        void SetKeyBinding(ActionAndArgs actionAndArgs, Microsoft.Terminal.TerminalControl.KeyChord chord);
        void ClearKeyBinding(Microsoft.Terminal.TerminalControl.KeyChord chord);

        Microsoft.Terminal.TerminalControl.KeyChord GetKeyBindingForAction(ShortcutAction action);
        Microsoft.Terminal.TerminalControl.KeyChord GetKeyBindingForActionWithArgs(ActionAndArgs actionAndArgs);
    }
}
```

----------------------------------------

TITLE: Defining Console Allocation Structures and Function in C++
DESCRIPTION: This C++ code defines the necessary types for using `AllocConsoleWithOptions`: the `ALLOC_CONSOLE_MODE` and `ALLOC_CONSOLE_RESULT` enums, the `ALLOC_CONSOLE_OPTIONS` struct, and the function signature for `AllocConsoleWithOptions` itself.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#7335 - Console Allocation Policy.md#_snippet_1

LANGUAGE: C++
CODE:
```
// Console Allocation Modes
typedef enum ALLOC_CONSOLE_MODE {
    ALLOC_CONSOLE_MODE_DEFAULT    = 0,
    ALLOC_CONSOLE_MODE_NEW_WINDOW = 1,
    ALLOC_CONSOLE_MODE_NO_WINDOW  = 2
} ALLOC_CONSOLE_MODE;

typedef enum ALLOC_CONSOLE_RESULT {
    ALLOC_CONSOLE_RESULT_NO_CONSOLE       = 0,
    ALLOC_CONSOLE_RESULT_NEW_CONSOLE      = 1,
    ALLOC_CONSOLE_RESULT_EXISTING_CONSOLE = 2
} ALLOC_CONSOLE_RESULT, *PALLOC_CONSOLE_RESULT;

typedef
struct ALLOC_CONSOLE_OPTIONS
{
    ALLOC_CONSOLE_MODE mode;
    BOOL useShowWindow;
    WORD showWindow;
} ALLOC_CONSOLE_OPTIONS, *PALLOC_CONSOLE_OPTIONS;

WINBASEAPI
HRESULT
WINAPI
AllocConsoleWithOptions(_In_opt_ PALLOC_CONSOLE_OPTIONS allocOptions, _Out_opt_ PALLOC_CONSOLE_RESULT result);
```

----------------------------------------

TITLE: Default New Tab Menu Configuration (JSON)
DESCRIPTION: This JSON snippet shows the default configuration for the Windows Terminal new tab menu, which simply lists all remaining profiles. It uses the `remainingProfiles` type to include all profiles not explicitly listed elsewhere.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1571 - New Tab Menu Customization/#1571 - New Tab Menu Customization.md#_snippet_1

LANGUAGE: json
CODE:
```
{
    "newTabMenu": [
        { "type":"remainingProfiles" }
    ]
}
```

----------------------------------------

TITLE: Defining a Windows Terminal Color Scheme (JSON)
DESCRIPTION: This JSON snippet demonstrates the structure for defining a custom color scheme in Windows Terminal settings. It includes the scheme name, cursor and selection colors, background and foreground colors, and definitions for all 16 standard terminal colors.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/Proto extensions-spec.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{
    "schemes": [
        {
            "name": "Postmodern Tango Light",

            "cursorColor": "#FFFFFF",
            "selectionBackground": "#FFFFFF",

            "background": "#61D6D6",
            "foreground": "#E74856",

            "black" : "#0C0C0C",
            "blue" : "#0037DA",
            "cyan" : "#3A96DD",
            "green" : "#13A10E",
            "purple" : "#881798",
            "red" : "#C50F1F",
            "white" : "#CCCCCC",
            "yellow" : "#C19C00",
            "brightBlack" : "#767676",
            "brightBlue" : "#3B78FF",
            "brightCyan" : "#61D6D6",
            "brightGreen" : "#16C60C",
            "brightPurple" : "#B4009E",
            "brightRed" : "#E74856",
            "brightWhite" : "#F2F2F2",
            "brightYellow" : "#F9F1A5"
        }
    ]
}
```

----------------------------------------

TITLE: Mark Prompt Start using ConEmu Sequence
DESCRIPTION: This sequence is specific to ConEmu and instructs the terminal to treat the current cursor position as the start of the prompt. It is particularly useful when customizing the shell prompt (e.g., PS1).
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#11000 - Marks/Shell-Integration-Marks.md#_snippet_2

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC ] 9 ; 12 ST
```

----------------------------------------

TITLE: Get Windows Version in Cmd
DESCRIPTION: Illustrates how to obtain the Windows version string using the `ver` command in the standard Windows Command Prompt (Cmd).
SOURCE: https://github.com/microsoft/terminal/blob/main/CONTRIBUTING.md#_snippet_2

LANGUAGE: Cmd
CODE:
```
C:\> ver

Microsoft Windows [Version 10.0.18900.1001]
```

----------------------------------------

TITLE: Example Quake Mode Settings JSON
DESCRIPTION: This snippet shows a proposed JSON structure for configuring quake mode behavior within the terminal settings, allowing customization of features like hiding on focus lost, focus mode usage, profile selection, and docking side.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#653 - Quake Mode/#653 - Quake Mode.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{
  "quakeMode": {
      "hideOnFocusLost": true,
      "useFocusMode": false,
      "profile": "my quake mode profile" ,
      "quakeModeDockSide": "bottom"
  }
}
```

----------------------------------------

TITLE: Run All TAEF Tests in a DLL (Shell)
DESCRIPTION: Execute all tests contained within a specific test binary (DLL) using the `te.exe` runner. Replace `Console.Unit.Tests.dll` with the name of the desired test binary.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/TAEF.md#_snippet_1

LANGUAGE: Shell
CODE:
```
te.exe Console.Unit.Tests.dll
```

----------------------------------------

TITLE: Displaying Windows Terminal Version Info (sh)
DESCRIPTION: Shows different commands and flags to display the version information for the installed Windows Terminal application.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_5

LANGUAGE: sh
CODE:
```
# Display version info for the Windows Terminal (user story 7)
wt version
wt --version
wt -v
```

----------------------------------------

TITLE: Defining ApplicationState RuntimeClass in IDL
DESCRIPTION: This IDL snippet defines the `ApplicationState` runtime class within the `Microsoft.Terminal.Settings` namespace. It includes a static method `GetForCurrentApplication` to retrieve the state object, a `Clear` method, and properties like `GeneratedProfiles` (a vector of GUIDs) and `ShowCloseOnExitWarning` (a boolean) for storing application state. Changes to this object are intended to be saved automatically.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#8324 - Application State (TSM).md#_snippet_0

LANGUAGE: idl
CODE:
```
namespace Microsoft.Terminal.Settings {
    [default_interface]
    runtimeclass ApplicationState {
        // GetForCurrentApplication will return an object deserialized from state.json.
        static ApplicationState GetForCurrentApplication();

        void Clear();

        IVector<guid> GeneratedProfiles;
        Boolean ShowCloseOnExitWarning;
        // ... further settings ...
    }
}
```

----------------------------------------

TITLE: Set Terminal Mark using OSC 1337
DESCRIPTION: This escape sequence, documented in iTerm2, is used to set a mark at the current cursor position. It is part of the OSC (Operating System Command) sequence family.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#11000 - Marks/Shell-Integration-Marks.md#_snippet_1

LANGUAGE: Terminal Escape Sequence
CODE:
```
OSC 1337 ; SetMark ST
```

----------------------------------------

TITLE: Registering WinRT Class Object (C++)
DESCRIPTION: This C++ snippet demonstrates how a WinRT server registers a class factory for a specific type using `CoRegisterClassObject`. This makes the class available for clients to instantiate across process boundaries, identified by its unique GUID.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#5000 - Process Model 2.0/#5000 - Process Model 2.0.md#_snippet_0

LANGUAGE: C++
CODE:
```
CoRegisterClassObject(MyClassGUID,
                      winrt::make<MyClassFactory>().get(),
                      CLSCTX_LOCAL_SERVER,
                      REGCLS_MULTIPLEUSE,
                      &dwRegistration);
```

----------------------------------------

TITLE: Preventing Duplicate Types in MSBuild ProjectReference XML
DESCRIPTION: Shows how to modify a ProjectReference in a Visual Studio project file (.vcxproj) to prevent issues with duplicate types during the build process, potentially caused by transitive dependencies. This is achieved by setting the Private and CopyLocalSatelliteAssemblies properties to false for the referenced project.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Unittesting-CppWinRT-Xaml.md#_snippet_2

LANGUAGE: xml
CODE:
```
    <ProjectReference Include="$(SolutionDir)src\cascadia\TerminalSettings\TerminalSettings.vcxproj">
      <Private>false</Private>
      <CopyLocalSatelliteAssemblies>false</CopyLocalSatelliteAssemblies>
    </ProjectReference>
```

----------------------------------------

TITLE: Example Azure Cloud Shell Profile in User Settings (JSON)
DESCRIPTION: This JSON snippet shows how the Azure Cloud Shell profile might appear in a user's Windows Terminal settings file before any user modifications. It includes standard fields like 'guid', 'hidden', 'name', and 'source'. This is provided for comparison to illustrate that the modification stub does not alter the user's settings file directly.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/Proto extensions-spec.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "guid": "{b453ae62-4e3d-5e58-b989-0a998ec441b8}",
    "hidden": false,
    "name": "Azure Cloud Shell",
    "source": "Windows.Terminal.Azure"
}
```

----------------------------------------

TITLE: Example wt.exe Command Line with Aliases (Future)
DESCRIPTION: Illustrates how a command line might look using potential future short-form aliases for commands like `new-tab` (`nt`), `split-pane` (`sp`), and `focus-pane` (`fp`) for conciseness.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_27

LANGUAGE: Command Line
CODE:
```
wt ; sp less some-log.txt ; fp -t 0
```

----------------------------------------

TITLE: Toggle Global Broadcast Input - JSON Config
DESCRIPTION: Example JSON configuration for an action that toggles broadcasting input to all panes globally. This is a potential structure for a keybinding or command palette action.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#2634 - Broadcast Input/#2634 - Broadcast Input.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{ "action": "toggleBroadcastInput", "scope": "global" }
```

----------------------------------------

TITLE: Build Debug and Run Specific Unit Tests (Shell)
DESCRIPTION: This command sequence first builds the project in Debug configuration using `bcz dbg`, and then executes specific unit tests using `runut`. The `/name:*<name of test>*` parameter filters the tests run by TAEF.
SOURCE: https://github.com/microsoft/terminal/blob/main/tools/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
bcz dbg && runut /name:*<name of test>*
```

----------------------------------------

TITLE: Checking for Key Presence with GetValueForKey and Optional (C++)
DESCRIPTION: Provides an example of using the value-returning GetValueForKey with std::optional<GUID> to check if a specific key ("guid") exists in the JSON object. The if condition evaluates to true only if the key is present and the value is successfully converted.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Json-Utility-API.md#_snippet_2

LANGUAGE: C++
CODE:
```
if (const auto guid{ GetValueForKey<std::optional<GUID>>(json, "guid") }) 
    // This condition is only true if there was a "guid" member in the provided JSON object.
    // It can be accessed through *guid.
}
```

----------------------------------------

TITLE: Enforcing Compile-Time Type Conversion (C++)
DESCRIPTION: Illustrates the use of `strict_cast`. While generating code identical to `static_cast`, it provides static checks that cause a compilation failure if the destination type cannot represent the full range of the source type, preventing potential runtime issues.
SOURCE: https://github.com/microsoft/terminal/blob/main/oss/chromium/base/numerics/README.md#_snippet_2

LANGUAGE: C++
CODE:
```
// Throw a compiler error if byte_value is changed to an out-of-range-type.
int int_value = strict_cast<int>(byte_value);
```

----------------------------------------

TITLE: Mermaid Diagram: ConPTY Architecture Flow
DESCRIPTION: This Mermaid diagram visualizes the architecture and data flow between the ConPTY static library, ConPTY dynamic library, conhost, and Windows Terminal. It highlights the interaction points, including Console API calls, VT translation, VT parsing, text buffers, and rendering components, showing how the ConPTY API facilitates communication.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_25

LANGUAGE: Mermaid
CODE:
```
flowchart LR
    subgraph ConPTY_lib["ConPTY (static library)"]
        server_io[Console API calls]
        ConPTY_Translation[VT Translation]

        server_io<-->ConPTY_Translation
    end

    subgraph ConPTY["ConPTY (dynamic library)"]
        ConPTY_impl[IApiRoutines impl]
        ConPTY_parser[VT parser]
        ConPTY_buffer[Text Buffer]
        ConPTY_output[ConPTY Output]

        ConPTY_Translation<-->ConPTY_impl
        ConPTY_impl-->ConPTY_parser
        ConPTY_parser-->ConPTY_buffer
        ConPTY_buffer--ReadBuffer-->ConPTY_impl
        ConPTY_impl------>ConPTY_output
    end

    subgraph conhost
        subgraph conhost_Server[Server]
            conhost_server_io[Console API calls]
            conhost_ConPTY_Translation[VT Translation]

            conhost_server_io<-->conhost_ConPTY_Translation
        end

        conhost_impl[IApiRoutines impl]
        conhost_parser[VT parser]
        conhost_buffer[Text Buffer]
        conhost_renderer[Render Thread]
        conhost_atlas[Text Renderer]
        output_new[ConPTY Output]

        conhost_ConPTY_Translation<-->conhost_impl
        conhost_impl-.remains for<br>back compat.....->output_new

        ConPTY_Translation<-->conhost_impl
        conhost_impl-->conhost_parser
        conhost_parser-->conhost_buffer
        conhost_buffer--->conhost_renderer
        conhost_buffer--ReadBuffer-->conhost_impl
        conhost_renderer-->conhost_atlas
    end

    subgraph wt[Windows Terminal]
        impl[IApiRoutines impl]
        parser[VT parser]
        buffer[Text Buffer]
        renderer[Render Thread]
        atlas[Text Renderer]

        ConPTY_Translation<-->impl
        impl-->parser
        parser-->buffer
        buffer--->renderer
        buffer--ReadBuffer-->impl
        renderer-->atlas
    end

    linkStyle 6,7 opacity:0.2
    style conhost_Server opacity:0.2
    style conhost_server_io opacity:0.2
    style conhost_ConPTY_Translation opacity:0.2
```

----------------------------------------

TITLE: Defining Action/Keybinding with IDs in New WT Settings (JSON)
DESCRIPTION: Shows the proposed structure in Windows Terminal settings, separating action definitions (with 'id') in the 'actions' list from keybinding definitions (referencing actions by 'id') in the 'keybindings' list.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#6899 - Action IDs/#6899 - Action IDs.md#_snippet_1

LANGUAGE: JSON
CODE:
```
"actions": [..., { "command": { "action": "splitPane", "split": "right" }, "id": "Terminal.SplitPaneRight" }, ...]

"keybindings": [..., { "keys": "alt+shift+plus", "id": "Terminal.SplitPaneRight" }, ...]
```

----------------------------------------

TITLE: Defining CONSRV_INFO_CHANGE Struct in C++
DESCRIPTION: Represents changes to the console session state. Members are pointers, and a non-null pointer indicates that the corresponding value in CONSRV_INFO has changed. Returning E_INVALIDARG is suggested if a requested change cannot be supported.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_8

LANGUAGE: C++
CODE:
```
struct CONSRV_INFO_CHANGE {
    CONSRV_POINT_I32* bufferSizeInCells;
    CONSRV_POINT_I32* cursorPositionInCells;
    CONSRV_POINT_I32* viewPositionInCells;
    CONSRV_POINT_I32* viewSizeInCells;
    COLORREF* colorTable; // The referenced array is always 16 items large.

    float* cursorHeight;
    boolean* cursorHidden;

    CONSRV_UTF16_STRING* fontName;
    UINT32* fontFamily;
    UINT32* fontWeight;
    CONSRV_POINT_I32* fontSize;
};
```

----------------------------------------

TITLE: Modify Existing Windows Terminal Profile Stub (JSON)
DESCRIPTION: This JSON snippet demonstrates a stub used to modify an existing Windows Terminal profile. It uses the 'updates' field containing the target profile's GUID to identify which profile to modify, applying the specified settings like 'fontSize' and 'fontWeight'. This method is intended for modifying default or dynamically generated profiles.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/Proto extensions-spec.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "profiles": [
        {
            "updates": "{b453ae62-4e3d-5e58-b989-0a998ec441b8}",
            "fontSize": 16,
            "fontWeight": "thin"
        }
    ]
}
```

----------------------------------------

TITLE: Git Pre-commit Hook for XAML Formatting (Shell)
DESCRIPTION: This shell script is intended for use as a Git pre-commit hook (`.git/hooks/pre-commit`). It identifies modified or added `.xaml` files, formats them using `xstyler.exe` (XamlStyler), removes the BOM, converts line endings to DOS format, and stages the updated files. Requires `dotnet tool run xstyler` and `unix2dos`.
SOURCE: https://github.com/microsoft/terminal/blob/main/tools/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
# XAML Styler - xstyler.exe pre-commit Git Hook
# Documentation: https://github.com/Xavalon/XamlStyler/wiki
# Originally from https://github.com/Xavalon/XamlStyler/wiki/Git-Hook

# Define path to xstyler.exe
XSTYLER_PATH="dotnet tool run xstyler --"

# Define path to XAML Styler configuration
XSTYLER_CONFIG="XamlStyler.json"

echo "Running XAML Styler on committed XAML files"
git diff --cached --name-only --diff-filter=ACM  | grep -e '\.xaml$' | \
# Wrap in brackets to preserve variable through loop
{
    files=""
    # Build list of files to pass to xstyler.exe
    while read FILE; do
        if [ "$files" == "" ]; then
            files="$FILE";
        else
            files="$files,$FILE";
        fi
    done

    if [ "$files" != "" ]; then
        # Check if external configuration is specified
        [ -z "$XSTYLER_CONFIG" ] && configParam="" || configParam="-c $XSTYLER_CONFIG"

        # Format XAML files
        $XSTYLER_PATH -f "$files" $configParam

        for i in $(echo $files | sed "s/,/ /g")
        do
            #strip BOM
            sed -i '1s/^\xEF\xBB\xBF//' $i
            unix2dos $i
            # stage updated file
            git add -u $i
        done
    else
        echo "No XAML files detected in commit"
    fi

    exit 0
}
```

----------------------------------------

TITLE: Hiding Default Profile in User Settings (JSON)
DESCRIPTION: This JSON snippet demonstrates how to hide a specific default profile, such as the cmd.exe profile, by adding the `"hidden": true` key-value pair to its entry within the `profiles` array in the user's settings file. This prevents the profile from appearing in the new tab dropdown.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#754 - Cascading Default Settings.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "profiles": [
        {
            // Make changes here to the cmd.exe profile
            "guid": "{6239a42c-1de4-49a3-80bd-e8fdd045185c}",
            "hidden": true
        }
    ]
}
```

----------------------------------------

TITLE: Performing Saturated Type Conversion (C++)
DESCRIPTION: Shows how to use the `saturated_cast` template for arithmetic type conversions. Out-of-bounds source values are clamped to the minimum or maximum value of the destination type. It also handles NaN for floating-point conversions by converting to 0.
SOURCE: https://github.com/microsoft/terminal/blob/main/oss/chromium/base/numerics/README.md#_snippet_1

LANGUAGE: C++
CODE:
```
// Convert from float with saturation to INT_MAX, INT_MIN, or 0 for NaN.
int int_value = saturated_cast<int>(floating_point_value);
```

----------------------------------------

TITLE: Adding Settings Layer to CascadiaSettings (C++)
DESCRIPTION: This C++ snippet defines a proposed method `LayerSettings` within the `CascadiaSettings` runtime class. This method is intended to load settings from a specified file path and layer those settings on top of the existing configuration within the `CascadiaSettings` object. This allows for merging settings from multiple sources, such as extensions or themes.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/#885 - Terminal Settings Model.md#_snippet_9

LANGUAGE: C++
CODE:
```
runtimeclass CascadiaSettings
{
    // Load a settings file, and layer those changes on top of the existing CascadiaSettings
    void LayerSettings(String path);
}
```

----------------------------------------

TITLE: Action Object for Closing Other Tabs (JSON)
DESCRIPTION: This JSON object illustrates a potential future action structure for context menus. It defines the 'closeTabs' action and uses the 'otherThan' property with the '${selectedTab.index}' placeholder to specify that all tabs except the currently selected one should be closed.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1571 - New Tab Menu Customization/#1571 - New Tab Menu Customization.md#_snippet_7

LANGUAGE: JSON
CODE:
```
{ "action": "closeTabs", "otherThan": "${selectedTab.index}" }
```

----------------------------------------

TITLE: Windows KEY_EVENT_RECORD Structure (C++)
DESCRIPTION: Definition of the Windows API structure used to represent keyboard input events. The win32-input-mode aims to encode and transmit the data contained within this structure without loss of fidelity.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#4999 - Improved keyboard handling in Conpty.md#_snippet_1

LANGUAGE: C++
CODE:
```
typedef struct _KEY_EVENT_RECORD {
  BOOL  bKeyDown;
  WORD  wRepeatCount;
  WORD  wVirtualKeyCode;
  WORD  wVirtualScanCode;
  union {
    WCHAR UnicodeChar;
    CHAR  AsciiChar;
  } uChar;
  DWORD dwControlKeyState;
} KEY_EVENT_RECORD;
```

----------------------------------------

TITLE: Expose Profile Setting via WinRT in Profile.idl (IDL)
DESCRIPTION: Defines the interface for the `CloseOnExit` profile setting in the `Profile.idl` file. This exposes the setting to WinRT, allowing it to be accessed and manipulated from other components, including helper methods for checking existence and clearing the value.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_1

LANGUAGE: IDL
CODE:
```
Boolean HasCloseOnExit();
void ClearCloseOnExit();
CloseOnExitMode CloseOnExit;
```

----------------------------------------

TITLE: Inserting Debugger Breakpoint (C++)
DESCRIPTION: Use the DebugBreak() function call in C/C++ code to programmatically trigger a breakpoint, forcing the application to stop and allow a debugger to attach. This is useful for debugging scenarios where launching the application directly under a debugger is difficult, such as with child processes or specific test environments.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/Debugging.md#_snippet_0

LANGUAGE: C++
CODE:
```
DebugBreak()
```

----------------------------------------

TITLE: Installing WinDBG as Post-Mortem Debugger (Shell)
DESCRIPTION: Run this command from an elevated command prompt to register WinDBG as the default post-mortem debugger on the system. This allows WinDBG to automatically launch and attach to processes that crash or explicitly call DebugBreak(). Remember to potentially run this for both x64 and x86 versions of WinDBG on a 64-bit system.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/Debugging.md#_snippet_1

LANGUAGE: Shell
CODE:
```
windbg /I
```

----------------------------------------

TITLE: Importing Common and CppWinRT Build Props (XML)
DESCRIPTION: Shows the required <Import> statements for including common build properties and C++/WinRT specific properties at the beginning and end of a .vcxproj file when creating a new WinRT component DLL. These imports are crucial for setting up the build environment correctly.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/creating_a_new_project.md#_snippet_0

LANGUAGE: XML
CODE:
```
<!-- pre props -->
<Import Project="..\..\..\common.openconsole.props" Condition="'$(OpenConsoleDir)'==''" />
<Import Project="$(OpenConsoleDir)src\cppwinrt.build.pre.props" />

<!-- everything else -->

<!-- post props -->
<Import Project="$(OpenConsoleDir)src\cppwinrt.build.post.props" />
```

----------------------------------------

TITLE: Specifying ActivationContext in TAEF (C++)
DESCRIPTION: Adds the `ActivationContext` property to a TAEF test class definition, specifying the name of the manifest file. This instructs TAEF to use the provided manifest for activating C++/WinRT types during the execution of tests within this class.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Unittesting-CppWinRT-Xaml.md#_snippet_8

LANGUAGE: C++
CODE:
```
class SettingsTests
{
    // Use a custom manifest to ensure that we can activate winrt types from
    // our test. This property will tell taef to manually use this as the
    // sxs manifest during this test class. It includes all the C++/WinRT
    // types we've defined, so if your test is crashing for an unknown
    // reason, make sure it's included in that file.
    BEGIN_TEST_CLASS(SettingsTests)
        TEST_CLASS_PROPERTY(L"ActivationContext", L"TerminalApp.Unit.Tests.manifest")
    END_TEST_CLASS()

    // Other Test code here
}
```

----------------------------------------

TITLE: Writing UTF16 Text to Console in C++
DESCRIPTION: UTF8 and UTF16 are both widely used text encodings on Windows and it's recommended that both functions are reasonably fast. ConPTY will translate all non-Unicode text to UTF16 for you. You must validate incoming text. It's recommended to replace invalid codepoints with U+FFFD. You don't need to check for broken up codepoints at the start/end of the text, as ConPTY will handle that for you.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_24

LANGUAGE: C++
CODE:
```
HRESULT WriteUTF16([in] boolean raw, [in] CONSRV_UTF16_STRING text);
```

----------------------------------------

TITLE: Example of Nested Action Structure in WT Settings (JSON)
DESCRIPTION: Provides an example of a nested action structure used in Windows Terminal settings, such as for iterative commands, noting that top-level IDs are not initially supported for keybinding this structure.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#6899 - Action IDs/#6899 - Action IDs.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
            // Select color scheme...
            "name": { "key": "SetColorSchemeParentCommandName" },
            "commands": [
                {
                    "iterateOn": "schemes",
                    "name": "${scheme.name}",
                    "command": { "action": "setColorScheme", "colorScheme": "${scheme.name}" }
                }
            ]
        }
```

----------------------------------------

TITLE: Example: Attempting Elevated Tab in Unelevated Window
DESCRIPTION: This command line example demonstrates a potential issue when attempting to open an elevated tab (`--elevated`) within an existing unelevated Windows Terminal window specified by its ID (`-w 0`). The problem arises because the elevation mismatch causes a new elevated `wt.exe` process to spawn, which may lose the original `-w 0` context intended to direct the command to a specific window.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#5000 - Process Model 2.0/#4472 - Windows Terminal Session Management.md#_snippet_4

LANGUAGE: Shell
CODE:
```
wt -w 0 new-tab -d . --elevated
```

----------------------------------------

TITLE: Running Multiple Custom Commands with Escaped Semicolon (sh)
DESCRIPTION: Shows how to run one custom command line that includes a literal semicolon (escaped with ``) in the first tab, and then run a completely separate command line in a second tab using the semicolon delimiter.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_10

LANGUAGE: sh
CODE:
```
# run "my-commandline.exe with some args and a ; literal semicolon" in a new
#  tab, and in another tab, run "another.exe running in a second tab"
wt my-commandline.exe with some args and a \; literal semicolon ; new-tab another.exe running in a second tab
```

----------------------------------------

TITLE: Representing Unbound Action in JSON Configuration
DESCRIPTION: Illustrates the JSON structure used to represent an 'unbound' action for a specific key chord. This configuration indicates that the specified key chord should not execute any action and should be removed from consideration in contexts like the command palette.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/Actions Addendum.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
{ "command": "unbound", "keys": "ctrl+c" }
```

----------------------------------------

TITLE: Example New Tab Menu Configuration (JSONC)
DESCRIPTION: Provides an example JSONC configuration for the `newTabMenu` setting, illustrating the use of `matchProfile` to include profiles by source and `remainingProfiles` to include any remaining profiles not explicitly listed.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1571 - New Tab Menu Customization/#1571 - New Tab Menu Customization.md#_snippet_4

LANGUAGE: JSONC
CODE:
```
{
    "newTabMenu": [
        { "type": "matchProfile", "source": "Microsoft.Terminal.Wsl" }
        {
            "type": "folder",
            "name": "WSLs",
            "entries": [ { "type": "matchProfile", "source": "Microsoft.Terminal.Wsl" } ]
        },
        { "type": "remainingProfiles" }
    ]
}
```

----------------------------------------

TITLE: Run wt.exe Commands in a Specific Window (Shell)
DESCRIPTION: Demonstrates how to use the `wt.exe` command with the `--window` argument to execute subsequent commands (like `new-tab` and `split-pane`) within the Windows Terminal window identified by the placeholder ID `N`. The shorthand `-w N` can also be used.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#5000 - Process Model 2.0/#5000 - Process Model 2.0.md#_snippet_2

LANGUAGE: sh
CODE:
```
wt.exe --window N new-tab ; split-pane
```

----------------------------------------

TITLE: Mapping Component to Profile in Cascadia (C#)
DESCRIPTION: This C# class snippet illustrates how Project Cascadia might internally track which terminal component instance is associated with a specific profile GUID. This mapping is crucial for applying updated settings to the correct components when settings change, ensuring that the appropriate profile's settings are applied.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/TerminalSettings-spec.md#_snippet_3

LANGUAGE: csharp
CODE:
```
class CascadiaTerminalInstance
{
    GUID ProfileGuid;
    UWPTerminalComponent component;
}
```

----------------------------------------

TITLE: Defining DLL Exports for WinRT Activation (.def)
DESCRIPTION: Content for a .def file required for a new WinRT Component DLL. It exports DllCanUnloadNow and DllGetActivationFactory, marking them as PRIVATE. WINRT_GetActivationFactory is essential for other projects to activate classes defined within this DLL.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/creating_a_new_project.md#_snippet_2

LANGUAGE: Definition File Syntax
CODE:
```
EXPORTS
DllCanUnloadNow = WINRT_CanUnloadNow                    PRIVATE
DllGetActivationFactory = WINRT_GetActivationFactory    PRIVATE
```

----------------------------------------

TITLE: Defining Proto Extension JSON Structure - JSON
DESCRIPTION: This snippet shows the required top-level structure for the JSON files provided by external programs as proto extensions. It must contain two lists: 'profiles' for profile modifications/additions and 'schemes' for color scheme additions.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/Proto extensions-spec.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
    "profiles": [ modifications and additions of profiles go here ],
    "schemes": [ additions of colour schemes go here ]
}
```

----------------------------------------

TITLE: Windows Terminal sendInput Action (Single String)
DESCRIPTION: This JSON object defines a Windows Terminal command action that uses `sendInput` to execute a multi-line PowerShell script. The entire script is represented as a single string with lines separated by `\r\n` escape sequences, which is less readable.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1595 - Suggestions UI/Snippets.md#_snippet_1

LANGUAGE: jsonc
CODE:
```
{
    "command":
    {
        "action": "sendInput",
        "input": "$s=Invoke-GitHubGraphQlApi \"query{organization(login:\"Microsoft\"){projectV2(number: 159) { id } } }\r\n$tasks = get-GitHubIssue  -Labels \"Issue-Task\" -state open\r\n$bugs = get-GitHubIssue  -Labels \"Issue-Bug\" -state open\r\n$issues = $tasks + $bugs\r\n$issues | ? {$_.labels.Name -NotContains \"Needs-Triage\" } | ? { $_.milestone.title -Ne \"Icebox ❄\" } | ? type -Ne \"PullRequest\" | select -expand node_id | % {\r\n  $resp = Add-GitHubBetaProjectItem -ProjectNodeId $s.organization.projectV2.id -ContentNodeId $_ ;\r\n}"
    },
    "name": "Upload to project board",
    "description": "Sync all our issues and bugs that have been triaged and are actually on the backlog to the big-ol project"
}
```

----------------------------------------

TITLE: Settings Object for Regex Profile Matching (JSON)
DESCRIPTION: This JSON object demonstrates a potential future settings structure for matching profiles based on regular expressions. The 'type' is 'profileMatch', and the 'source' object specifies that the matching should use a 'regex' type with the value '.*wsl.*', intended to match profiles containing 'wsl' in their source.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1571 - New Tab Menu Customization/#1571 - New Tab Menu Customization.md#_snippet_9

LANGUAGE: JSON
CODE:
```
"type": "profileMatch",
"source": { "type": "regex", "value": ".*wsl.*" }
```

----------------------------------------

TITLE: PR Readiness Check Workflow (Shell)
DESCRIPTION: This sequence of commands outlines the recommended workflow before submitting a pull request. It involves building the project (`bcz`), launching the built console (`opencon`), running all tests within the new console (`testcon`), and finally formatting the code (`runformat`). All steps must succeed for the code to be considered ready.
SOURCE: https://github.com/microsoft/terminal/blob/main/tools/README.md#_snippet_3

LANGUAGE: Shell
CODE:
```
bcz
opencon
testcon (in the new console window)
runformat
```

----------------------------------------

TITLE: Defining Event Delegate Types for Keybindings - C#
DESCRIPTION: Defines the C# delegate types that specify the expected arguments for various keybinding actions. These delegates are used internally to represent the parameters required by functions like NewTabWithProfile, SwitchToTab, ResizePane, MoveFocus, CopyText, Scroll, and SplitProfile.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1142 - Keybinding Arguments.md#_snippet_0

LANGUAGE: C#
CODE:
```
    // These events already exist like this:
    delegate void NewTabWithProfileEventArgs(Int32 profileIndex);
    delegate void SwitchToTabEventArgs(Int32 profileIndex);
    delegate void ResizePaneEventArgs(Direction direction);
    delegate void MoveFocusEventArgs(Direction direction);

    // These events either exist in another form or don't exist.
    delegate void CopyTextEventArgs(Boolean copyWhitespace);
    delegate void ScrollEventArgs(Int32 numLines);
    delegate void SplitProfileEventArgs(Orientation splitOrientation, Int32 profileIndex);
```

----------------------------------------

TITLE: Handling Non-Initial new-tab Command in wt.exe
DESCRIPTION: This command line demonstrates a scenario where `new-tab` is not the initial command provided to `wt.exe`. It is used to illustrate the problem of determining the target window or tab for subsequent commands like `split-pane` when not explicitly specified first.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_21

LANGUAGE: sh
CODE:
```
wt.exe split-pane -V ; new-tab
```

----------------------------------------

TITLE: Open Settings UI Globals Page using Format and Page Args JSON
DESCRIPTION: This JSON snippet provides a keybinding command configuration using the `format` argument set to `ui` and the `page` argument set to `globals` to navigate directly to the Globals page within the Settings UI, as described in Proposition 2.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2557 - Settings Keybinding.md#_snippet_11

LANGUAGE: JSON
CODE:
```
{ "command": { "action": "openSettings", "format": "ui", "page": "globals" } }
```

----------------------------------------

TITLE: Requesting Win32 Input Mode (Terminal Sequence)
DESCRIPTION: Sequence used by a client application to enable (`h`) or disable (`l`) the proposed win32-input-mode in the terminal. This mode changes how keyboard input is reported by the terminal.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#4999 - Improved keyboard handling in Conpty.md#_snippet_0

LANGUAGE: Terminal Sequence
CODE:
```
^[ [ ? 9001 h/l
```

----------------------------------------

TITLE: Proposal 2: Using __default__ Profile Object in Profiles List (JSON)
DESCRIPTION: This JSON snippet illustrates an alternative proposal for Windows Terminal settings where a special profile object with the 'guid' "__default__" is included within the 'profiles' array. This object holds the settings that should serve as defaults for other profiles in the list.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2325 - Default Profile Settings.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "$schema": "https://aka.ms/terminal-profiles-schema",
    "defaultProfile": "{61c54bbd-c2c6-5271-96e7-009a87ff44bf}",
    "requestedTheme" : "dark",
    "showTabsInTitlebar" : true,
    "profiles":
    [
        {
            "guid": "__default__",
            "useAcrylic": true,
            "acrylicOpacity": 0.1,
            "fontFace": "Cascadia Code",
            "fontSize": 10
        },
        {
            "guid": "{61c54bbd-c2c6-5271-96e7-009a87ff44bf}",
            "name": "Windows PowerShell",
            "commandline": "powershell.exe",
            "hidden": false
        },
        {
            "guid": "{0caa0dad-35be-5f56-a8ff-afceeeaa6101}",
            "name": "cmd",
            "commandline": "cmd.exe",
            "hidden": false
        }
    ],
    "schemes": [],
    "keybindings": []
}
```

----------------------------------------

TITLE: Adding WinMD Reference in C++/WinRT Static Library Project (XML)
DESCRIPTION: This XML snippet demonstrates how to manually add a reference to another C++/WinRT project's built .winmd file within a .vcxproj file for a static library. This is often necessary when a standard ProjectReference doesn't work correctly. The attributes `Private="false"` and `CopyLocalSatelliteAssemblies="false"` are used to prevent the reference from being propagated upwards, avoiding potential duplicate type definitions.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Unittesting-CppWinRT-Xaml.md#_snippet_0

LANGUAGE: XML
CODE:
```
  <ItemGroup>
    <!-- Manually add references to each of our dependent winmds. Mark them as
    private=false and CopyLocalSatelliteAssemblies=false, so that we don't
    propagate them upwards (which can make referencing this project result in
    duplicate type definitions)-->

    <Reference Include="Microsoft.Terminal.Settings">
      <HintPath>$(OpenConsoleCommonOutDir)\TerminalSettings\Microsoft.Terminal.Settings.winmd</HintPath>
      <IsWinMDFile>true</IsWinMDFile>
      <Private>false</Private>
      <CopyLocalSatelliteAssemblies>false</CopyLocalSatelliteAssemblies>
    </Reference>
  </ItemGroup>
```

----------------------------------------

TITLE: Default Settings File Disclaimer (JSON)
DESCRIPTION: This comment is intended to be placed at the top of the hard-coded default settings file (`defaults.json`) to inform users that the file is auto-generated and should not be modified directly. Custom settings should be placed in `profiles.json`.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#754 - Cascading Default Settings.md#_snippet_0

LANGUAGE: json
CODE:
```
// This is an auto-generated file. Place any modifications to your settings in "profiles.json"
```

----------------------------------------

TITLE: Opening App Repository Package Directory with Sudo (PowerShell)
DESCRIPTION: Opens the specific app package directory in the Windows App Repository using `sudo start`. This is necessary because the directory is typically locked down and requires elevated privileges to access files like `OpenConsoleProxy.dll` for further inspection.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/building.md#_snippet_8

LANGUAGE: pwsh
CODE:
```
sudo start C:\ProgramData\Microsoft\Windows\AppRepository\Packages\WindowsTerminalDev_0.0.1.0_x64__8wekyb3d8bbwe
```

----------------------------------------

TITLE: Example Feature Flag XML Configuration
DESCRIPTION: This XML snippet provides an example structure for defining a feature flag within the `features.xml` file. It shows how to specify the feature's name, description, optional ID, default stage (AlwaysEnabled/AlwaysDisabled), and rules for enabling/disabling based on branch tokens, branding tokens, and release tokens.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/feature_flags.md#_snippet_0

LANGUAGE: xml
CODE:
```
<?xml version="1.0" encoding="utf-8"?>
<featureStaging xmlns="http://microsoft.com/TilFeatureStaging-Schema.xsd">
    <feature>
        <!-- This will produce Feature_XYZ::IsEnabled() and TIL_FEATURE_XYZ_ENABLED (preprocessor) -->
        <name>Feature_XYZ</name>

        <description>Does a cool thing</description>

        <!-- GitHub deliverable number; optional -->
        <id>1234</id>

        <!-- Whether the feature defaults to enabled or disabled -->
        <stage>AlwaysEnabled|AlwaysDisabled</stage>

        <!-- Branch wildcards where the feature should be *DISABLED* -->
        <alwaysDisabledBranchTokens>
            <branchToken>branch/with/wildcard/*</branchToken>
            <!-- ... more branchTokens ... -->
        </alwaysDisabledBranchTokens>

        <!-- Just like alwaysDisabledBranchTokens, but for *ENABLING* the feature. -->
        <alwaysEnabledBranchTokens>
            <branchToken>...</branchToken>
        </alwaysEnabledBranchTokens>

        <!-- Brandings where the feature should be *DISABLED* -->
        <alwaysDisabledBrandingTokens>
            <!-- Valid brandings include Dev, Preview, Release, WindowsInbox -->
            <brandingToken>Release</brandingToken>
            <!-- ... more brandingTokens ... -->
        </alwaysDisabledBrandingTokens>

        <!-- Just like alwaysDisabledBrandingTokens, but for *ENABLING* the feature -->
        <alwaysEnabledBrandingTokens>
            <branchToken>...</branchToken>
        </alwaysEnabledBrandingTokens>

        <!-- Unequivocally disable this feature in Release -->
        <alwaysDisabledReleaseTokens />
    </feature>
</featureStaging>
```

----------------------------------------

TITLE: Launching New Elevated Window with wt Command
DESCRIPTION: This command is used internally by Windows Terminal to launch a new window with elevated privileges. The -w new argument explicitly instructs wt to create a new window instance, overriding default glomming behavior. This is used when launching a profile configured with "elevate": true as a new window from an unelevated context. The [args...] represent optional arguments.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#5000 - Process Model 2.0/#1032 - Elevation Quality of Life Improvements.md#_snippet_1

LANGUAGE: cmd
CODE:
```
wt -w new new-tab [args...]
```

----------------------------------------

TITLE: Configuring Console Allocation Policy in XML Manifest
DESCRIPTION: This XML snippet demonstrates how to include the `consoleAllocationPolicy` field within the `<windowsSettings>` of an application manifest. Setting the value to `detached` prevents the system from automatically allocating a console window for the application unless one is inherited.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#7335 - Console Allocation Policy.md#_snippet_0

LANGUAGE: xml
CODE:
```
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
  <application>
    <windowsSettings>
      <consoleAllocationPolicy xmlns="http://schemas.microsoft.com/SMI/2024/WindowsSettings">detached</consoleAllocationPolicy>
    </windowsSettings>
  </application>
</assembly>
```

----------------------------------------

TITLE: Open Settings UI (General) using Format and Page Args JSON
DESCRIPTION: This JSON snippet illustrates a keybinding command configuration using the `format` argument set to `ui` and the `page` argument set to `settings` to open the main Settings UI interface, as detailed in Proposition 2.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2557 - Settings Keybinding.md#_snippet_10

LANGUAGE: JSON
CODE:
```
{ "command": { "action": "openSettings", "format": "ui", "page": "settings" } }
```

----------------------------------------

TITLE: Executing Generated UI Automation Tests via PowerShell (TE.exe)
DESCRIPTION: Provides the PowerShell command used to clear the console and execute the generated UI Automation text range movement tests using the Test Executor (TE.exe). It filters tests by name and specifies the test DLL.
SOURCE: https://github.com/microsoft/terminal/blob/main/tools/TestTableWriter/README.md#_snippet_0

LANGUAGE: PowerShell
CODE:
```
clear; .\TE.exe /name:*UiaTextRangeTests*GeneratedMovementTests* .\Conhost.Interactivity.Win32.Unit.Tests.dll
```

----------------------------------------

TITLE: Direct Cursor Address - VT52 Command
DESCRIPTION: VT52 escape sequence to move the cursor to a specific row and column. Can likely be implemented using the CursorPosition method, noting different boundary handling rules compared to CUP.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_26

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC Y
```

----------------------------------------

TITLE: Defining WinRT Activation Manifest (XML)
DESCRIPTION: Creates an XML application manifest listing dependent DLLs and the C++/WinRT activatable classes they contain. This manifest is essential for enabling runtime activation of these types within the test environment.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Unittesting-CppWinRT-Xaml.md#_snippet_4

LANGUAGE: XML
CODE:
```
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
  <file name="TerminalSettings.dll" hashalg="SHA1">
    <activatableClass name="Microsoft.Terminal.Settings.KeyChord" threadingModel="both" xmlns="urn:schemas-microsoft-com:winrt.v1"></activatableClass>
    <activatableClass name="Microsoft.Terminal.Settings.TerminalSettings" threadingModel="both" xmlns="urn:schemas-microsoft-com:winrt.v1"></activatableClass>
  </file>
  <file name="TerminalApp.dll" hashalg="SHA1">
    <activatableClass name="TerminalApp.App" threadingModel="both" xmlns="urn:schemas-microsoft-com:winrt.v1"></activatableClass>
    <activatableClass name="TerminalApp.AppKeyBindings" threadingModel="both" xmlns="urn:schemas-microsoft-com:winrt.v1"></activatableClass>
    <activatableClass name="TerminalApp.XamlmetaDataProvider" threadingModel="both" xmlns="urn:schemas-microsoft-com:winrt.v1"></activatableClass>
  </file>
</assembly>
```

----------------------------------------

TITLE: Using Stateful JSON Converter in C++
DESCRIPTION: Demonstrates how to use the `MultiplyingConverter` struct with `JsonUtils::GetValue`. It shows creating a JSON value, instantiating the stateful converter with a base value, and calling `GetValue` to perform the conversion, resulting in the JSON value being multiplied by the converter's base value. Requires the `MultiplyingConverter` struct definition.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Json-Utility-API.md#_snippet_9

LANGUAGE: c++
CODE:
```
Json::Value json{ 66 }; // A JSON value containing the number 66
MultiplyingConverter conv{ 10 };

auto v = JsonUtils::GetValue<int>(json, conv);
// v is equal to 660.
```

----------------------------------------

TITLE: Proposal 1: Using defaultSettings Object in Global Terminal Settings (JSON)
DESCRIPTION: This JSON snippet demonstrates a proposed structure for Windows Terminal settings where a 'defaultSettings' object is placed at the root level. This object contains properties that should be applied as defaults to all profiles listed in the 'profiles' array, unless overridden by a specific profile.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2325 - Default Profile Settings.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
    "$schema": "https://aka.ms/terminal-profiles-schema",
    "defaultProfile": "{61c54bbd-c2c6-5271-96e7-009a87ff44bf}",
    "defaultSettings":
    {
        "useAcrylic": true,
        "acrylicOpacity": 0.1,
        "fontFace": "Cascadia Code",
        "fontSize": 10
    },
    "requestedTheme" : "dark",
    "showTabsInTitlebar" : true,
    "profiles":
    [
        {
            "guid": "{61c54bbd-c2c6-5271-96e7-009a87ff44bf}",
            "name": "Windows PowerShell",
            "commandline": "powershell.exe",
            "hidden": false
        },
        {
            "guid": "{0caa0dad-35be-5f56-a8ff-afceeeaa6101}",
            "name": "cmd",
            "commandline": "cmd.exe",
            "hidden": false
        }
    ],
    "schemes": [],
    "keybindings": []
}
```

----------------------------------------

TITLE: Configuring Window Rounded Corners (Windows Terminal, JSON)
DESCRIPTION: A boolean value that controls whether the window displays with rounded corners on Windows 11. Set to `true` to enable rounded corners, or `false` to disable them.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_13

LANGUAGE: JSON
CODE:
```
"window.roundedCorners": true
```

----------------------------------------

TITLE: Include XAML Hosting Headers (C++)
DESCRIPTION: Includes the necessary headers from the `winrt::Windows` namespace and `windows.ui.xaml.hosting.desktopwindowxamlsource.h` to enable the use of the XAML Hosting API (Xaml Islands) in a C++ project. These headers provide access to types like `WindowsXamlManager` and `DesktopWindowXamlSource`.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Unittesting-CppWinRT-Xaml.md#_snippet_9

LANGUAGE: C++
CODE:
```
#include <winrt/Windows.system.h>
#include <winrt/Windows.Foundation.Collections.h>
#include <winrt/Windows.UI.Xaml.Hosting.h>
#include <windows.ui.xaml.hosting.desktopwindowxamlsource.h>
```

----------------------------------------

TITLE: Settings Object for Regex Profile Matching with Capture Group (JSON)
DESCRIPTION: This JSON object illustrates a potential future settings structure for matching profiles by name using regex with a capture group. The 'type' is 'profileMatch', and the 'name' object specifies a 'regex' type with the value '^ssh: (.*)', intended to match profiles starting with 'ssh: ' and capture the text following it for use in the menu entry name.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1571 - New Tab Menu Customization/#1571 - New Tab Menu Customization.md#_snippet_10

LANGUAGE: JSON
CODE:
```
{
  "type": "profileMatch",
  "name": { "type": "regex", "value": "^ssh: (.*)" }
}
```

----------------------------------------

TITLE: Action Object for Closing Tabs to the Right (JSON)
DESCRIPTION: This JSON object shows a potential future action structure for context menus. It specifies the 'closeTabs' action and uses the 'after' property with the '${selectedTab.index}' placeholder to indicate that all tabs positioned after the currently selected one should be closed.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1571 - New Tab Menu Customization/#1571 - New Tab Menu Customization.md#_snippet_8

LANGUAGE: JSON
CODE:
```
{ "action": "closeTabs", "after": "${selectedTab.index}" }
```

----------------------------------------

TITLE: Run Filtered TAEF Tests by Name (Shell)
DESCRIPTION: Run only tests whose class or method names match a specified pattern using the `/name:` flag with `te.exe`. Wildcard characters (`*`) can be used in the pattern.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/TAEF.md#_snippet_2

LANGUAGE: Shell
CODE:
```
te.exe Console.Unit.Tests.dll /name:*BufferTests*
```

----------------------------------------

TITLE: Registering JSON Flag Mapper in C++
DESCRIPTION: Registers a JSON flag mapper for the `JsonTestFlags` enum using the `JSON_FLAG_MAPPER` macro. It maps string representations ("flagOne", "flagTwo") to their corresponding enum values, enabling conversion from JSON strings/arrays to the enum type. Requires the `JsonTestFlags` enum definition.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Json-Utility-API.md#_snippet_6

LANGUAGE: c++
CODE:
```
JSON_FLAG_MAPPER(JsonTestFlags)
{
    JSON_MAPPINGS(2) = {
        pair_type{ "flagOne", JsonTestFlags::FlagOne },
        pair_type{ "flagTwo", JsonTestFlags::FlagTwo },
    };
};
```

----------------------------------------

TITLE: Extending ITerminalInput Interface with SetKeyBindings (C#)
DESCRIPTION: Adds a method to the ITerminalInput interface allowing the terminal input handler to receive and store the IKeyBindings object provided by the frontend.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/Keybindings-spec.md#_snippet_1

LANGUAGE: csharp
CODE:
```
public interface ITerminalInput
{
    ...
    void SetKeyBindings(IKeyBindings bindings);
    ...
}
```

----------------------------------------

TITLE: Focus Pane Command - Windows Terminal
DESCRIPTION: Moves the focus to a specific pane within the currently active tab. The target pane is identified by its unique index within the tab. If no target is specified, it defaults to the currently focused pane, resulting in no change.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_15

LANGUAGE: Command Line
CODE:
```
focus-pane [--target,-t target-pane]
```

----------------------------------------

TITLE: Proposed Windows Terminal Background Settings (JSONC)
DESCRIPTION: This JSON snippet illustrates a proposed configuration structure for Windows Terminal settings, consolidating window background options like Mica, image, and opacity under a single 'window.background' object within a theme. It also shows how related settings like tab row background and profile opacity might be configured alongside.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#10509 - Mica.md#_snippet_1

LANGUAGE: jsonc
CODE:
```
{
    "theme": "My Background Theme",
    "themes": [
        {
            "name": "My Background Theme",
            "window":{
                "background.useMica": true, // Use mica behind the window
                "background.image": "some/path/to/image", // Use a BG image
                "background.imageOpacity": 25, // Image is mostly transparent
            },
            "tabRow":{
              "background": "#00000000", // Make the TabView Transparent
            }
        }
    ],
    "profiles": {
        "defaults": {
            "opacity": 0 // Panes are all totally transparent
        }
    }
}
```

----------------------------------------

TITLE: Global Setting for Specific Copy Formats (JSON)
DESCRIPTION: This JSON snippet represents a proposed global setting in the Windows Terminal settings.json file. It allows the user to specify an array of desired formats (html, rtf, plain) to be included when copying text.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#4191 - Formatted Copy/spec.md#_snippet_0

LANGUAGE: JSON
CODE:
```
"copyFormats": ["html","rtf","plain"]
```

----------------------------------------

TITLE: Enter Graphics Mode - VT52 Command
DESCRIPTION: VT52 escape sequence to enter graphics character set mode. Can likely use the existing DesignateCharset method with a new VTCharacterSets option.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_20

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC F
```

----------------------------------------

TITLE: Embedding Manifest in vcxproj (XML)
DESCRIPTION: Configures the Visual Studio project file (`vcxproj`) to generate and embed the application manifest into the test DLL during the build process. This links the manifest to the test binary.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Unittesting-CppWinRT-Xaml.md#_snippet_5

LANGUAGE: XML
CODE:
```
<PropertyGroup>
    <GenerateManifest>true</GenerateManifest>
    <EmbedManifest>true</EmbedManifest>
  </PropertyGroup>
  <ItemGroup>
    <Manifest Include="TerminalApp.Unit.Tests.manifest" />
  </ItemGroup>
```

----------------------------------------

TITLE: Updated KeyBinding Event Definitions with ActionArgs (C++/WinRT IDL)
DESCRIPTION: Illustrates the new approach using IActionArgs, ActionEventArgs, and TypedEventHandler for handling keybinding arguments and events, showing how specific argument classes derive from IActionArgs.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1142 - Keybinding Arguments.md#_snippet_3

LANGUAGE: C++/WinRT IDL
CODE:
```
interface IActionArgs { /* Empty */ }

runtimeclass ActionEventArgs
{
    Boolean Handled;
    ActionArgs Args;
}

runtimeclass CopyTextArgs : IActionArgs
{
    Boolean CopyWhitespace;
}

runtimeclass NewTabWithProfileArgs : IActionArgs
{
    Int32 ProfileIndex;
}
runtimeclass NewTabWithProfileEventArgs : NewTabWithProfileArgs, IActionArgs { }

[default_interface]
runtimeclass AppKeyBindings : Microsoft.Terminal.Settings.IKeyBindings
{
    event Windows.Foundation.TypedEventHandler<AppKeyBindings, ActionEventArgs> CopyText;
    event Windows.Foundation.TypedEventHandler<AppKeyBindings, ActionEventArgs> NewTab;
    event Windows.Foundation.TypedEventHandler<AppKeyBindings, ActionEventArgs> NewTabWithProfile;
}
```

----------------------------------------

TITLE: Run Test List via T-Shell
DESCRIPTION: This command uses the `testd` utility within a T-Shell session to automatically deploy necessary packages and dependencies for, and then execute, a specified test list (`Microsoft.Console.TestLab.Desktop.testlist`) on the remote device.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/WindowsTestPasses.md#_snippet_0

LANGUAGE: T-Shell Command
CODE:
```
testd Microsoft.Console.TestLab.Desktop.testlist
```

----------------------------------------

TITLE: Copying Test Dependencies via MSBuild PostBuildEvent (XML)
DESCRIPTION: Configures the MSBuild post-build event to copy necessary files, including the test manifest, AppxManifest, and required DLLs, to the output directory for unit tests. This ensures the test binary can find its dependencies.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Unittesting-CppWinRT-Xaml.md#_snippet_13

LANGUAGE: XML
CODE:
```
  <ItemDefinitionGroup>
    <PostBuildEvent>
      <Command>
        (xcopy /Y &quot;$(SolutionDir)src\cascadia\ut_app\TerminalApp.Unit.Tests.manifest&quot; &quot;$(OutDir)\TerminalApp.Unit.Tests.manifest*&quot; )

        (xcopy /Y &quot;$(SolutionDir)src\cascadia\ut_app\TerminalApp.Unit.Tests.AppxManifest.xml&quot; &quot;$(OutDir)\TerminalApp.Unit.Tests.AppxManifest.xml*&quot; )

        (xcopy /Y &quot;$(OpenConsoleCommonOutDir)\TerminalConnection\TerminalConnection.dll&quot; &quot;$(OutDir)\TerminalConnection.dll*&quot; )
        (xcopy /Y &quot;$(OpenConsoleCommonOutDir)\TerminalSettings\TerminalSettings.dll&quot; &quot;$(OutDir)\TerminalSettings.dll*&quot; )
        (xcopy /Y &quot;$(OpenConsoleCommonOutDir)\TerminalControl\TerminalControl.dll&quot; &quot;$(OutDir)\TerminalControl.dll*&quot; )
      </Command>
    </PostBuildEvent>
  </ItemDefinitionGroup>
```

----------------------------------------

TITLE: Build Debug and Run All Unit Tests (Shell)
DESCRIPTION: This command sequence first builds the project in Debug configuration using `bcz dbg`, and then executes all unit tests using `runut` without any filtering.
SOURCE: https://github.com/microsoft/terminal/blob/main/tools/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
bcz dbg && runut
```

----------------------------------------

TITLE: Creating XAML Control for Enum Setting (XAML)
DESCRIPTION: Demonstrates how to create a XAML control for an enum setting using `RadioButtons`. It shows binding `SelectedItem` to the current value, `ItemsSource` to the list of options, setting the `ItemTemplate`, and applying styles, all wrapped in a `ContentPresenter`.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_16

LANGUAGE: XAML
CODE:
```
<!--Launch Mode-->
<ContentPresenter Style="{StaticResource SettingContainerStyle}">
    <muxc:RadioButtons x:Uid="Globals_LaunchMode"
                       SelectedItem="{x:Bind CurrentLaunchMode, Mode=TwoWay}"
                       ItemsSource="{x:Bind LaunchModeList}"
                       ItemTemplate="{StaticResource EnumRadioButtonTemplate}"
                       Style="{StaticResource RadioButtonsSettingStyle}"/>
</ContentPresenter>
```

----------------------------------------

TITLE: Proposed JSON configuration for color scheme switching (Object)
DESCRIPTION: This JSON snippet shows one potential configuration format where a single 'colorScheme' property contains an object mapping 'light' and 'dark' themes to specific color scheme names.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#4066 - Theme-controlled color scheme switch.md#_snippet_0

LANGUAGE: json
CODE:
```
"colorScheme": {
    "light": "BlulocoLight",
    "dark": "BlulocoDark"
}
```

----------------------------------------

TITLE: Implement New Action (Dispatch & Handle) (C++/IDL)
DESCRIPTION: Illustrates the process of adding functionality for a new action. This involves declaring an event in ShortcutActionDispatch.idl/h, dispatching it in ShortcutActionDispatch.cpp, declaring a handler in TerminalPage.h, registering the handler in TerminalPage.cpp, and implementing the handler logic in AppActionHandlers.cpp.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_11

LANGUAGE: IDL
CODE:
```
// ShortcutActionDispatch.idl
event Windows.Foundation.TypedEventHandler<ShortcutActionDispatch, Microsoft.Terminal.Settings.Model.ActionEventArgs> OpenSettings;
```

LANGUAGE: C++
CODE:
```
// ShortcutActionDispatch.h
TYPED_EVENT(OpenSettings, TerminalApp::ShortcutActionDispatch, Microsoft::Terminal::Settings::Model::ActionEventArgs);
```

LANGUAGE: C++
CODE:
```
// ShortcutActionDispatch.cpp --> DoAction()
// - dispatch the appropriate event
case ShortcutAction::OpenSettings:
{
    _OpenSettingsHandlers(*this, eventArgs);
    break;
}
```

LANGUAGE: C++
CODE:
```
// TerminalPage.h
// - declare the handler
void _HandleOpenSettings(const IInspectable& sender, const Microsoft::Terminal::Settings.Model.ActionEventArgs& args);
```

LANGUAGE: C++
CODE:
```
// TerminalPage.cpp --> _RegisterActionCallbacks()
// - register the handler
_actionDispatch->OpenSettings({ this, &TerminalPage::_HandleOpenSettings });
```

LANGUAGE: C++
CODE:
```
// AppActionHandlers.cpp
// - direct the function to the right place and call a helper function
void TerminalPage::_HandleOpenSettings(const IInspectable& /*sender*/,
                                       const ActionEventArgs& args)
{
    // NOTE: this if-statement can be omitted if the action does not support arguments
    if (const auto& realArgs = args.ActionArgs().try_as<OpenSettingsArgs>())
    {
        _LaunchSettings(realArgs.Target());
        args.Handled(true);
    }
}
```

----------------------------------------

TITLE: Enter Keypad Mode - VT52 Command
DESCRIPTION: VT52 escape sequence to enter application keypad mode (DECKPAM). Can use the existing SetKeypadMode method.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_28

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC =
```

----------------------------------------

TITLE: Listing Windows Terminal Profiles (sh)
DESCRIPTION: Shows the command to output the list of available profiles configured in Windows Terminal.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_3

LANGUAGE: sh
CODE:
```
# output the list of profiles (user story 5)
wt list-profiles
```

----------------------------------------

TITLE: Cursor Left - VT52 Command
DESCRIPTION: VT52 escape sequence to move the cursor left one column. This command is already implemented.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_18

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC D
```

----------------------------------------

TITLE: Defining Core Settings Interfaces (C#)
DESCRIPTION: Defines the basic structure for terminal settings (TerminalSettings) and the interfaces (IComponentSettings, IApplicationSettings) used by different parts of the application to access settings data. These interfaces abstract how settings are stored and retrieved.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/TerminalSettings-spec.md#_snippet_0

LANGUAGE: C#
CODE:
```
public class TerminalSettings
{
    Color DefaultForeground;
    Color DefaultBackground;
    Color[] ColorTable;
    Coord? Dimensions;
    int HistorySize;
    Color CursorColor;
    CursorShape CursorShape;
}

public interface IComponentSettings
{
    TerminalSettings TerminalSettings { get; }
}

public interface IApplicationSettings
{
    IComponentSettings ComponentSettings { get; }
}
```

----------------------------------------

TITLE: Configuring TAEF Test Class for UAP and AppxManifest (C++)
DESCRIPTION: Sets properties for a TAEF test class (TabTests) to specify that it should run as a Universal Windows Platform (UAP) package and use a specific AppxManifest file (TerminalApp.Unit.Tests.AppxManifest.xml) located in the output directory.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Unittesting-CppWinRT-Xaml.md#_snippet_14

LANGUAGE: C++
CODE:
```
    BEGIN_TEST_CLASS(TabTests)
        TEST_CLASS_PROPERTY(L"RunAs", L"UAP")
        TEST_CLASS_PROPERTY(L"UAP:AppXManifest", L"TerminalApp.Unit.Tests.AppxManifest.xml")
    END_TEST_CLASS()
```

----------------------------------------

TITLE: WinRT Interface Design for Monarch and Peasant Classes
DESCRIPTION: This C# code snippet outlines a potential design for WinRT interfaces representing the Monarch and Peasant processes. The Peasant interface includes methods for identification, process information, command execution, and window activation events. The Monarch interface inherits from Peasant and adds methods for managing multiple Peasant instances, checking single-instance mode, and retrieving specific or the most recent Peasant.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#5000 - Process Model 2.0/#5000 - Process Model 2.0.md#_snippet_3

LANGUAGE: C#
CODE:
```
class Peasant
{
    void AssignID(UInt64 id); // Should only be called by the monarch
    UInt64 GetID();
    UInt64 GetPID();
    Boolean ExecuteCommandline(String[] args, String currentDirectory);
    event TypedEventHandler<Object, Object> WindowActivated;
}

class Monarch : Peasant
{
    UInt64 AddPeasant(Peasant peasant);
    Boolean IsInSingleInstanceMode();
    Peasant GetPeasant(UInt64 peasantID);
    Peasant GetMostRecentPeasant();
}
```

----------------------------------------

TITLE: Example: Updating Microsoft.UI.Xaml Nuget Package - Shell (WSL)
DESCRIPTION: A concrete example demonstrating how to use the git grep and sed command to update the version of the Microsoft.UI.Xaml NuGet package from 2.4.0-prerelease.200506002 to 2.5.0-prerelease.200812002.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/building.md#_snippet_5

LANGUAGE: shell
CODE:
```
git grep -z -l Microsoft.UI.Xaml | xargs -0 sed -i -e 's/2.4.0-prerelease.200506002/2.5.0-prerelease.200812002/g'
```

----------------------------------------

TITLE: Defining Stateful JSON Converter Struct in C++
DESCRIPTION: Defines a C++ struct `MultiplyingConverter` that implements a custom conversion interface (`CanConvert`, `FromJson`). This struct demonstrates a stateful converter that can be passed directly to `JsonUtils::GetValue` or `GetValueForKey` for one-off conversions. It multiplies the input JSON integer value by an internal `BaseValue`.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Json-Utility-API.md#_snippet_8

LANGUAGE: c++
CODE:
```
struct MultiplyingConverter {
    int BaseValue;

    bool CanConvert(const Json::Value&) { return true; }

    int FromJson(const Json::Value& value)
    {
        return value.asInt() * BaseValue;
    }
};
```

----------------------------------------

TITLE: Update Windows Terminal via Scoop (PowerShell)
DESCRIPTION: Updates the 'windows-terminal' package to the latest version using the Scoop package manager. This method is unofficial and requires Scoop to be installed.
SOURCE: https://github.com/microsoft/terminal/blob/main/README.md#_snippet_5

LANGUAGE: powershell
CODE:
```
scoop update windows-terminal
```

----------------------------------------

TITLE: Calculating Checked Buffer Size (C++)
DESCRIPTION: Illustrates performing arithmetic operations (`CheckAdd`, `CheckMul`) using `CheckedNumeric` types. The `AssignIfValid` method is used to check if the operation resulted in an invalid state (like overflow). It returns false if invalid, allowing for explicit error handling.
SOURCE: https://github.com/microsoft/terminal/blob/main/oss/chromium/base/numerics/README.md#_snippet_5

LANGUAGE: C++
CODE:
```
// Calculate the buffer size and detect if an overflow occurs.
size_t size;
if (!CheckAdd(kHeaderSize, CheckMul(count, kItemSize)).AssignIfValid(&size)) {
  // Handle an overflow error...
}
```

----------------------------------------

TITLE: Action Object for Closing Selected Tab (JSON)
DESCRIPTION: This JSON object represents a potential future structure for defining actions in context menus. It specifies the 'closeTab' action and uses a placeholder '${selectedTab.index}' to reference the index of the currently selected tab, indicating which tab to close.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1571 - New Tab Menu Customization/#1571 - New Tab Menu Customization.md#_snippet_6

LANGUAGE: JSON
CODE:
```
{ "action": "closeTab", "index": "${selectedTab.index}" }
```

----------------------------------------

TITLE: Running a OneFuzz LibFuzzer Job
DESCRIPTION: This command submits a LibFuzzer job to the OneFuzz platform using a predefined template. It requires specifying the project name, test name, build identifier, target VM pool, and the path to the fuzzer executable.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/fuzzing.md#_snippet_1

LANGUAGE: Shell
CODE:
```
onefuzz template libfuzzer basic <project> <name> <build> <pool> --target_exe <exe_path>
```

----------------------------------------

TITLE: JSON Schema for Suggestions Settings
DESCRIPTION: This schema defines the structure for configuring suggestion-related actions and sources within the settings. It includes definitions for the "OpenSuggestionsAction" object, the "BuiltinSuggestionSource" enum, and the "SuggestionSource" type, detailing properties like filtering, commandline usage, nesting, and available suggestion sources.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1595 - Suggestions UI/Suggestions-UI.md#_snippet_3

LANGUAGE: json
CODE:
```
"OpenSuggestionsAction": {
  "description": "Arguments corresponding to a Open Suggestions Action",
  "allOf": [
    {
      "$ref": "#/$defs/ShortcutAction"
    },
    {
      "properties": {
        "action": {
          "type": "string",
          "const": "suggestions"
        },
        "source": {
          "$ref": "#/$defs/SuggestionSource",
          "description": "Which suggestion sources to filter."
        },
        "useCommandline": {
          "default": false,
          "description": "When set to `true`, the current commandline the user has typed will prepopulate the filter of the Suggestions UI. This requires that the user has enabled shell integration in their shell's config. When set to false, the filter will start empty."
        },
        "nesting": {
          "default": true,
          "description": "When set to `true`, suggestions will follow the provided nesting structure. For Tasks, these will follow the structure of the Command Palette. When set to `false`, no nesting will be used (and all suggestions will be in the top-level menu.",
          "$comment": "This setting is a possible follow-up setting, not required for v1. "
        }
      }
    }
  ]
},
"BuiltinSuggestionSource": {
  "enum": [
    "commandHistory",
    "directoryHistory",
    "tasks",
    "local",
    "all"
  ],
  "type": "string"
},
"SuggestionSource": {
  "default": "all",
  "description": "Either a single suggestion source, or an array of sources to concatenate. Built-in sources include `commandHistory`, `directoryHistory`, `tasks`, and `local`. Extensions may provide additional values. The special value `all` indicates all suggestion sources should be included",
  "$comment": "`tasks` and `local` are sources that would be added by the Tasks feature, as a follow-up",
  "oneOf": [
    {
      "type": [ "string", "null", "BuiltinSuggestionSource" ]
    },
    {
      "type": "array",
      "items": { "type": "BuiltinSuggestionSource" }
    },
    {
      "type": "array",
      "items": { "type": "string" }
    }
  ]
}
```

----------------------------------------

TITLE: Exposing Bindable Enum Setting in IDL (C++)
DESCRIPTION: Declares properties in the IDL file to expose the current value (`CurrentLaunchMode`) and the list of possible values (`LaunchModeList`) for a bindable enum setting in the Windows Terminal Settings UI.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_13

LANGUAGE: C++
CODE:
```
// Expose the current value for the setting
IInspectable CurrentLaunchMode;

// Expose the list of possible values
Windows.Foundation.Collections.IObservableVector<Microsoft.Terminal.Settings.Editor.EnumEntry> LaunchModeList { get; };
```

----------------------------------------

TITLE: Defining Action/Keybinding in Old WT Settings (JSON)
DESCRIPTION: Illustrates the previous method in Windows Terminal settings where action definitions and their keybindings were combined within a single object in the 'actions' list.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#6899 - Action IDs/#6899 - Action IDs.md#_snippet_0

LANGUAGE: JSON
CODE:
```
"actions": [..., { "command": { "action": "splitPane", "split": "right" }, "keys": "alt+shift+plus" }, ...]
```

----------------------------------------

TITLE: Comparing Arbitrary Numeric Types (C++)
DESCRIPTION: Shows how `StrictNumeric` types, created using helpers like `MakeStrictNum`, enable well-defined comparisons between arbitrary arithmetic types. This avoids potential issues or compiler warnings that might arise from standard arithmetic promotion rules during comparisons.
SOURCE: https://github.com/microsoft/terminal/blob/main/oss/chromium/base/numerics/README.md#_snippet_4

LANGUAGE: C++
CODE:
```
bool foo(unsigned value, int upper_bound) {
  // Converting to StrictNumeric allows this comparison to work correctly.
  if (MakeStrictNum(value) >= upper_bound)
    return false;
}
```

----------------------------------------

TITLE: Install Windows Terminal via Chocolatey (PowerShell)
DESCRIPTION: Installs the latest release of Windows Terminal using the Chocolatey package manager. This method is unofficial and requires Chocolatey to be installed and configured on your system.
SOURCE: https://github.com/microsoft/terminal/blob/main/README.md#_snippet_2

LANGUAGE: powershell
CODE:
```
choco install microsoft-windows-terminal
```

----------------------------------------

TITLE: Example TAEF Test Class Structure for XAML Hosting (C++)
DESCRIPTION: Provides the complete structure of a TAEF test class (TabTests) demonstrating how to configure it to run as a UAP package with an AppxManifest, initialize the XAML hosting environment in ClassSetup, and declare a test method.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Unittesting-CppWinRT-Xaml.md#_snippet_15

LANGUAGE: C++
CODE:
```
    class TabTests
    {
        BEGIN_TEST_CLASS(TabTests)
            TEST_CLASS_PROPERTY(L"RunAs", L"UAP")
            TEST_CLASS_PROPERTY(L"UAP:AppXManifest", L"TerminalApp.Unit.Tests.AppxManifest.xml")
        END_TEST_CLASS()

        TEST_METHOD(TryCreateXamlObjects);

        TEST_CLASS_SETUP(ClassSetup)
        {
            winrt::init_apartment(winrt::apartment_type::single_threaded);
            // Initialize the Xaml Hosting Manager
            _manager = winrt::Windows::UI::Xaml::Hosting::WindowsXamlManager::InitializeForCurrentThread();
            _source = winrt::Windows::UI::Xaml::Hosting::DesktopWindowXamlSource{};

            return true;
        }

    private:
        winrt::Windows::UI::Xaml::Hosting::WindowsXamlManager _manager{ nullptr };
        winrt::Windows::UI::Xaml::Hosting::DesktopWindowXamlSource _source{ nullptr };
    };
    void TabTests::TryCreateXamlObjects(){ ... }
```

----------------------------------------

TITLE: Defining KeyChord Structure and IKeyBindings Interface (C#)
DESCRIPTION: Defines the structure representing a key combination (KeyChord) and the interface (IKeyBindings) used by the terminal to check if a given key chord is bound to an action.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/Keybindings-spec.md#_snippet_0

LANGUAGE: csharp
CODE:
```
struct KeyChord
{
    KeyModifiers modifiers;
    int vkey;
}

interface IKeyBindings {
    bool TryKeyChord(KeyChord kc);
}
```

----------------------------------------

TITLE: Define Action Arguments Struct in C++
DESCRIPTION: Defines the `OpenSettingsArgs` struct in `ActionArgs.h`, implementing the runtime class declared in the IDL. It includes property definitions (`Target`), a static key for serialization (`TargetKey`), and methods for name generation, equality checking, JSON deserialization (`FromJson`), and copying.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_8

LANGUAGE: C++
CODE:
```
struct OpenSettingsArgs : public OpenSettingsArgsT<OpenSettingsArgs>
{
    OpenSettingsArgs() = default;

    // adds a getter/setter for your argument, and defines the json key
    WINRT_PROPERTY(SettingsTarget, Target, SettingsTarget::SettingsFile);
    static constexpr std::string_view TargetKey{ "target" };

    public:
        hstring GenerateName() const;

        bool Equals(const IActionArgs& other)
        {
            auto otherAsUs = other.try_as<OpenSettingsArgs>();
            if (otherAsUs)
            {
                return otherAsUs->_Target == _Target;
            }
            return false;
        };

        static FromJsonResult FromJson(const Json::Value& json)
        {
            // LOAD BEARING: Not using make_self here _will_ break you in the future!
            auto args = winrt::make_self<OpenSettingsArgs>();
            JsonUtils::GetValueForKey(json, TargetKey, args->_Target);
            return { *args, {} };
        }

        IActionArgs Copy() const
        {
            auto copy{ winrt::make_self<OpenSettingsArgs>() };
            copy->_Target = _Target;
            return *copy;
        }
};
```

----------------------------------------

TITLE: Define Internal Command Class (C++)
DESCRIPTION: Represents a command internally within the Windows Terminal application. This C++ class holds the command's name, the associated action and arguments, and the source path for its icon.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2046 - Command Palette.md#_snippet_1

LANGUAGE: C++
CODE:
```
class Command
{
    winrt::hstring Name();
    winrt::TerminalApp::ActionAndArgs ActionAndArgs();
    winrt::hstring IconSource();
}
```

----------------------------------------

TITLE: Defining CONSRV_CHAR_INFO Struct in C++
DESCRIPTION: Represents a single character cell in the terminal buffer, binary compatible with the Windows API CHAR_INFO struct. It includes rules for handling wide glyphs, surrogate pairs, and color representation via attributes.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_4

LANGUAGE: C++
CODE:
```
struct CONSRV_CHAR_INFO {
    wchar_t character;
    UINT16 attributes;
};
```

----------------------------------------

TITLE: Example tab.background configurations (proposed)
DESCRIPTION: Proposed JSON structures for the `tab.background` property, exploring options for handling single vs. multiple terminal panes. These examples were discussed but not included in the final specification.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_16

LANGUAGE: JSON
CODE:
```
{"single": "terminalBackground", "multiple": null}
```

LANGUAGE: JSON
CODE:
```
{"single": "terminalBackground", "multiple": "#ff0000"}
```

LANGUAGE: JSON
CODE:
```
[ "terminalBackground", null ]
```

----------------------------------------

TITLE: Undefine GetCurrentTime Macro (C++)
DESCRIPTION: Provides a workaround for a potential compile warning related to `GetCurrentTime` when using XAML Hosting APIs after including `Windows.h`. This preprocessor directive undefines the macro if it exists.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Unittesting-CppWinRT-Xaml.md#_snippet_10

LANGUAGE: C++
CODE:
```
#ifdef GetCurrentTime
#undef GetCurrentTime
#endif
```

----------------------------------------

TITLE: Example AppxManifest for TAEF Packaged Test (XML)
DESCRIPTION: This XML snippet provides a template for an AppxManifest.xml file used to package a test binary for execution within the TAEF framework. It includes necessary elements like Identity, Properties, Dependencies (crucially setting MaxVersionTested above 10.0.18295.0 for XAML Islands), Resources, Applications (with a fixed ID/Executable for TAEF), Capabilities (runFullTrust), and Extensions for WinRT dependencies.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Unittesting-CppWinRT-Xaml.md#_snippet_12

LANGUAGE: XML
CODE:
```
<?xml version="1.0" encoding="utf-8"?>
<Package xmlns:rescap="http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities" xmlns="http://schemas.microsoft.com/appx/manifest/foundation/windows10" xmlns:uap="http://schemas.microsoft.com/appx/manifest/uap/windows10" IgnorableNamespaces="uap">

  <Identity Name="TerminalApp.Unit.Tests.Package"
          ProcessorArchitecture="neutral"
          Publisher="CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US"
          Version="1.0.0.0"
          ResourceId="en-us" />
  <Properties>
    <DisplayName>TerminalApp.Unit.Tests.Package Host Process</DisplayName>
    <PublisherDisplayName>Microsoft Corp.</PublisherDisplayName>
    <Logo>taef.png</Logo>
    <Description>TAEF Packaged Cwa FullTrust Application Host Process</Description>
  </Properties>

  <Dependencies>
    <TargetDeviceFamily Name="Windows.Universal" MinVersion="10.0.18362.0" MaxVersionTested="10.0.26100.0" />
    <PackageDependency Name="Microsoft.VCLibs.140.00.Debug" MinVersion="14.0.27023.1" Publisher="CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US" />
    <PackageDependency Name="Microsoft.VCLibs.140.00.Debug.UWPDesktop" MinVersion="14.0.27027.1" Publisher="CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US" />
  </Dependencies>

  <Resources>
    <Resource Language="en-us" />
  </Resources>

  <Applications>
    <Application Id="TE.ProcessHost" Executable="TE.ProcessHost.exe" EntryPoint="Windows.FullTrustApplication">
      <uap:VisualElements DisplayName="TAEF Packaged Cwa FullTrust Application Host Process" Square150x150Logo="taef.png" Square44x44Logo="taef.png" Description="TAEF Packaged Cwa Application Host Process" BackgroundColor="#222222">
        <uap:SplashScreen Image="taef.png" />
      </uap:VisualElements>
    </Application>
  </Applications>

  <Capabilities>
    <rescap:Capability Name="runFullTrust"/>
  </Capabilities>

  <Extensions>
    <Extension Category="windows.activatableClass.inProcessServer">
      <InProcessServer>
        <Path>TerminalSettings.dll</Path>
        <ActivatableClass ActivatableClassId="Microsoft.Terminal.Settings.TerminalSettings" ThreadingModel="both" />
        <ActivatableClass ActivatableClassId="Microsoft.Terminal.Settings.KeyChord" ThreadingModel="both" />
      </InProcessServer>
    </Extension>
    <!-- More extensions here -->
  </Extensions>
</Package>
```

----------------------------------------

TITLE: Measuring Text Forward for Layout in C++
DESCRIPTION: These two functions are used to layout text for the internal "GNU Readline"-like implementation. `text` is the string to operate on. As with any other method, input validation should be performed. It's preferred to pretend as if invalid codepoints (in particular invalid surrogate pairs) are U+FFFD, because this provides the user with some level of text editing capability. The alternative is to have none at all when facing invalid strings which is strictly worse. `maxClusters` is the maximum amount of "cursor movements" these functions should apply (like when pressing the left/right arrow buttons). `maxColumns` is the maximum amount of columns the functions may iterate over. When the text is "a猫" and `maxColumns` is 2, then the result should be "a", because "猫" doesn't fit anymore. `position` on input contains the current position of the cursor inside `text`, counted in characters from the start of the `text`. On output it's supposed to contain the new cursor position. `position` may be out of bounds and you should clamp it to a valid range first. `columns` on output should contain the number of columns that have been iterated over. The idea is that a `maxClusters = 1` and `maxColumns = inf` can be used to implement left/right cursor movement, while `maxClusters = inf` and `maxColumns = window width` can be used to layout text within the window. You don't need to handle escape characters. These functions will never be called with any present. For robustness against bugs it's however recommended to handle them anyway, in whatever way you wish. If you have no preference, it's recommended to treat them as zero-width characters.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_21

LANGUAGE: C++
CODE:
```
HRESULT MeasureTextForward([in] CONSRV_UTF16_STRING text, [in] DWORD maxClusters, [in] DWORD maxColumns, [in, out] DWORD* position, [out] DWORD* columns);
```

----------------------------------------

TITLE: Generate Command Palette Name & Add Resource (C++/XML)
DESCRIPTION: Maps the `ShortcutAction::OpenSettings` enum to a resource key (`OpenSettingsCommandKey`) in `ActionAndArgs.cpp` to automatically generate a name for the Command Palette. The corresponding display string ('Open settings file') is added to the `Resources.resw` file.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_6

LANGUAGE: C++
CODE:
```
// In ActionAndArgs.cpp GenerateName() --> GeneratedActionNames
{ ShortcutAction::OpenSettings, RS_(L"OpenSettingsCommandKey") },
```

LANGUAGE: XML
CODE:
```
// In Resources.resw for Microsoft.Terminal.Settings.Model.Lib,
// add the generated name
// NOTE: Visual Studio presents the resw file as a table.
//       If you choose to edit the file with a text editor,
//       the code should look something like this...
<data name="OpenSettingsCommandKey" xml:space="preserve">
    <value>Open settings file</value>
</data>
```

----------------------------------------

TITLE: Add Action Serialization Key and Map in C++
DESCRIPTION: Adds a static string view constant for the JSON key (`openSettings`) and maps the `ShortcutAction::OpenSettings` enum value to this key in the `ActionKeyNamesMap` within `ActionAndArgs.cpp`. This enables serialization/deserialization of the action.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_5

LANGUAGE: C++
CODE:
```
// Top of file:
// - Add the serialization key
static constexpr std::string_view OpenSettingsKey{ "openSettings" };

// ActionKeyNamesMap:
// - map the new enum to the json key
{ OpenSettingsKey, ShortcutAction::OpenSettings },
```

----------------------------------------

TITLE: Defining IConsoleServerCallback Interface in C++
DESCRIPTION: Defines the callback interface used by the console server to notify the client of events or state changes. The comment indicates that not all methods need perfect implementation for basic functionality.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_10

LANGUAGE: C++
CODE:
```
interface IConsoleServerCallback : IUnknown {
};
```

----------------------------------------

TITLE: Defining Nullable Setting Struct in C++
DESCRIPTION: Defines a C++ struct `NullableSetting<T>` used for settings that can be explicitly set to null or left unset, providing an alternative to `std::optional<T>`. It includes a `setting` member to hold the value (or nullptr for explicit null) and a boolean `set` to indicate if the user explicitly set the value.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/#885 - Terminal Settings Model.md#_snippet_7

LANGUAGE: c++
CODE:
```
template<typename T>
struct NullableSetting
{
    IReference<T> setting{ nullptr };
    bool set{ false };
};
```

----------------------------------------

TITLE: Registering Argument Completer in PowerShell
DESCRIPTION: Mentions the possibility of using the PowerShell cmdlet `Register-ArgumentCompleter` to enable auto-completion for Windows Terminal arguments within PowerShell.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_26

LANGUAGE: PowerShell
CODE:
```
Register‑ArgumentCompleter
```

----------------------------------------

TITLE: Implement Profile Setting Serialization and Copy Logic (C++)
DESCRIPTION: Adds the necessary C++ code in `Profile.cpp` to handle the serialization, deserialization, and copying of the `CloseOnExit` profile setting. This includes defining the JSON key, copying the setting value, reading from JSON in `LayerJson`, and writing to JSON in `ToJson`.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_2

LANGUAGE: C++
CODE:
```
// Top of file:
// - Add the serialization key
static constexpr std::string_view CloseOnExitKey{ "closeOnExit" };

// CopySettings() or Copy():
// - The setting is exposed in the Settings UI
profile->_CloseOnExit = source->_CloseOnExit;

// LayerJson():
// - get the value from the JSON
JsonUtils::GetValueForKey(json, CloseOnExitKey, _CloseOnExit);

// ToJson():
// - write the value to the JSON
JsonUtils::SetValueForKey(json, CloseOnExitKey, _CloseOnExit);
```

----------------------------------------

TITLE: Defining Console Point Structs in C#
DESCRIPTION: Defines two structs, CONSRV_POINT_I32 and CONSRV_POINT_F32, used to represent 2D coordinates within the console buffer, using 32-bit integers and floating-point numbers respectively. These are part of the preliminary API design for addressing locations.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_2

LANGUAGE: C#
CODE:
```
struct CONSRV_POINT_I32 {
    INT32 x;
    INT32 y;
};

struct CONSRV_POINT_F32 {
    float x;
    float y;
};
```

----------------------------------------

TITLE: Pipe Command Output to Existing Pane - Shell
DESCRIPTION: Demonstrates a potential syntax for piping the output of a command (`man ping`) into a new pane (`split-pane`) within an existing window (window 0, `-w 0`), where the output is then processed by another command (`cat`). This explores the idea of passing stdin/stdout handles to child processes.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#5000 - Process Model 2.0/#4472 - Windows Terminal Session Management.md#_snippet_5

LANGUAGE: sh
CODE:
```
man ping > wt -w 0 split-pane cat
```

----------------------------------------

TITLE: Copying Manifest with PostBuildEvent (XML)
DESCRIPTION: Adds a post-build event to the vcxproj file to copy the generated manifest file to the test output directory. This ensures the manifest is adjacent to the test binary for runtime discovery by TAEF.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Unittesting-CppWinRT-Xaml.md#_snippet_6

LANGUAGE: XML
CODE:
```
<ItemDefinitionGroup>
    <PostBuildEvent>
      <!-- Manually copy the manifest to our outdir, because the test will need
      to find it adjacent to us. -->
      <Command>
        (xcopy /Y &quot;$(OpenConsoleDir)src\cascadia\ut_app\TerminalApp.Unit.Tests.manifest&quot; &quot;$(OutDir)\TerminalApp.Unit.Tests.manifest*&quot; )
      </Command>
    </PostBuildEvent>
  </ItemDefinitionGroup>
```

----------------------------------------

TITLE: Home Key - ANSI Mode
DESCRIPTION: Escape sequence generated for the Home key when the terminal is in ANSI mode.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_0

LANGUAGE: Terminal Escape Sequence
CODE:
```
SS3 2 w
```

----------------------------------------

TITLE: PgUp Key - ANSI Mode
DESCRIPTION: Escape sequence generated for the Page Up key when the terminal is in ANSI mode.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_4

LANGUAGE: Terminal Escape Sequence
CODE:
```
SS3 2 y
```

----------------------------------------

TITLE: Cloning CascadiaSettings Object (C++)
DESCRIPTION: Demonstrates how to create a copy of an existing CascadiaSettings object (settingsSource) by calling its Clone method, assigning the result to settingsClone. This is used by the Settings UI to work on a temporary copy.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/#885 - Terminal Settings Model.md#_snippet_11

LANGUAGE: c++
CODE:
```
settingsClone = settingsSource.Clone()
```

----------------------------------------

TITLE: Change Directory in T-Shell
DESCRIPTION: This command changes the current working directory within the remote T-Shell session to the standard location where test binaries are deployed (`C:\data\test\bin`) by the `testd` utility.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/WindowsTestPasses.md#_snippet_1

LANGUAGE: T-Shell Command
CODE:
```
cdd C:\data\test\bin
```

----------------------------------------

TITLE: Declaring Bindable Enum Setting in Header (C++)
DESCRIPTION: Uses the `GETSET_BINDABLE_ENUM_SETTING` macro in the header file to declare a bindable enum setting. The macro requires the setting name, enum type, how to access the settings model, and the setting name within the model.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_14

LANGUAGE: C++
CODE:
```
// the GETSET_BINDABLE_ENUM_SETTING macro accepts...
// - name: the name of the setting
// - enumType: the type of the setting
// - settingsModelName: how to retrieve the setting (use State() to get access to the settings model)
// - settingNameInModel: the name of the setting in the terminal settings model
GETSET_BINDABLE_ENUM_SETTING(LaunchMode, Model::LaunchMode, State().Settings().GlobalSettings, LaunchMode);
```

----------------------------------------

TITLE: Registering JSON Flag Mapper with All/Clear in C++
DESCRIPTION: Registers a JSON flag mapper for the `JsonTestFlags` enum, including special "never" and "always" mappings using `AllClear` and `AllSet`. This allows representing empty or full sets of flags via specific strings in JSON. Requires the `JsonTestFlags` enum definition.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Json-Utility-API.md#_snippet_7

LANGUAGE: c++
CODE:
```
JSON_FLAG_MAPPER(JsonTestFlags)
{
    JSON_MAPPINGS(4) = {
        pair_type{ "never", AllClear },
        pair_type{ "flagOne", JsonTestFlags::FlagOne },
        pair_type{ "flagTwo", JsonTestFlags::FlagTwo },
        pair_type{ "always", AllSet },
    };
};
```

----------------------------------------

TITLE: Setting User-Defined Value in C++
DESCRIPTION: Provides the setter for the `LaunchMode` setting in `GlobalAppSettings`. It explicitly sets the user-defined value for this setting.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/#885 - Terminal Settings Model.md#_snippet_3

LANGUAGE: c++
CODE:
```
// explicitly set the user-set value
void GlobalAppSettings::LaunchMode(LaunchMode val)
{
    _LaunchMode = val;
}
```

----------------------------------------

TITLE: Implementing SetKeyBindings in Terminal Class (C#)
DESCRIPTION: Shows the signature for the implementation of the SetKeyBindings method within the partial Terminal class, indicating where the key bindings object will be set.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/Keybindings-spec.md#_snippet_2

LANGUAGE: csharp
CODE:
```
partial class Terminal
{
    public void ITerminalInput.SetKeyBindings(IKeyBindings bindings);
}
```

----------------------------------------

TITLE: Declaring Observable Profile Setting in Profiles.idl (C++)
DESCRIPTION: This C++ snippet, found in `Profiles.idl`, declares a profile setting as observable. It uses the `OBSERVABLE_PROJECTED_SETTING` macro, specifying the setting's type (`Microsoft.Terminal.Settings.Model.CloseOnExitMode`) and name (`CloseOnExit`) to make it available for observation in the Settings UI.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_18

LANGUAGE: C++
CODE:
```
// Profiles.idl --> ProfileViewModel
// - this declares the setting as observable using the type and the name of the setting
OBSERVABLE_PROJECTED_SETTING(Microsoft.Terminal.Settings.Model.CloseOnExitMode, CloseOnExit);
```

----------------------------------------

TITLE: Hooking Up KeyBindings with Method Pointer and Args (New)
DESCRIPTION: This snippet demonstrates the updated approach using a method pointer to hook up keybinding actions, allowing the handler method (_OpenNewTab) to receive a sender object and a dedicated arguments object (NewTabEventArgs) containing details like the profile index and the Handled property.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1142 - Keybinding Arguments.md#_snippet_6

LANGUAGE: C++
CODE:
```
    void App::_HookupKeyBindings(TerminalApp::AppKeyBindings bindings) noexcept
    {
        // ...
        bindings.NewTabWithProfile({ this, &App::_OpenNewTab });
    }
    // ...
    void App::_OpenNewTab(const TerminalApp::AppKeyBindings& sender, const NewTabEventArgs& args)
    {
        auto profileIndex = args.ProfileIndex();
        args.Handled(true);
        // ...
    }
```

----------------------------------------

TITLE: Home Key - VT52 Mode
DESCRIPTION: Escape sequence generated for the Home key when the terminal is in VT52 mode.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_1

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC ? w
```

----------------------------------------

TITLE: Up Key - VT52 Mode
DESCRIPTION: Escape sequence generated for the Up arrow key when the terminal is in VT52 mode.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_3

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC ? x
```

----------------------------------------

TITLE: Defining Observable Profile Setting in ProfileViewModel (C++)
DESCRIPTION: This C++ snippet, located in `Profiles.h` within the `ProfileViewModel`, defines a profile setting as observable. It uses the `OBSERVABLE_PROJECTED_SETTING` macro, linking the setting (`CloseOnExit`) to the underlying `_profile` object to enable observation.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_19

LANGUAGE: C++
CODE:
```
// Profiles.h --> ProfileViewModel
// - this defines the setting as observable off of the _profile object
OBSERVABLE_PROJECTED_SETTING(_profile, CloseOnExit);
```

----------------------------------------

TITLE: Defining Dynamic Profile Namespace Method (C++)
DESCRIPTION: Defines a virtual method `GetNamespace` within the `IDynamicProfileGenerator` interface. This method is intended to return a unique string namespace for the profiles generated by a specific dynamic profile generator, which is used to facilitate stable GUID generation.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#754 - Cascading Default Settings.md#_snippet_2

LANGUAGE: C++
CODE:
```
class IDynamicProfileGenerator
{
    ...
    virtual std::wstring GetNamespace() = 0;
    ...
}
```

----------------------------------------

TITLE: Console Delegation Handoff Interface Signature (C++)
DESCRIPTION: This is the proposed method signature for the interface contract between the existing inbox console and an updated console server. It defines the parameters required for the inbox console to hand off the client connection and associated resources to the new server.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#492 - Default Terminal/spec.md#_snippet_0

LANGUAGE: C++
CODE:
```
HRESULT ConsoleEstablishHandoff(HANDLE server, HANDLE driverInputEvent, const PortableConnectMessage* const msg, HANDLE signalPipe, HANDLE inboxProcess, HANDLE* process)
```

----------------------------------------

TITLE: Defining CONSRV_UTF8_STRING Struct in C++
DESCRIPTION: Represents a UTF-8 encoded string with a pointer to the data and its length. This structure is likely used for passing UTF-8 string data between components.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_5

LANGUAGE: C++
CODE:
```
struct CONSRV_UTF8_STRING {
    [size_is(length)] const char* data;
    DWORD length;
};
```

----------------------------------------

TITLE: Default Key Bindings Configuration (JS)
DESCRIPTION: This JavaScript snippet defines a set of default key bindings used in the Windows Terminal configuration. It maps keyboard shortcuts to specific terminal commands like selecting all text, entering copy mode, toggling block selection, and switching selection endpoints.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#4993 - Keyboard Selection/Keyboard-Selection.md#_snippet_1

LANGUAGE: JS
CODE:
```
{ "command": "selectAll", "keys": "ctrl+shift+a" },

// Copy Mode
{ "command": "copyMode", "keys": "ctrl+shift+m" },
{ "command": "toggleBlockSelection" },
{ "command": "switchSelectionEndpoint" },
```

----------------------------------------

TITLE: Declare Profile Setting using INHERITABLE_SETTING Macro (C++)
DESCRIPTION: Declares a new profile setting named `CloseOnExit` of type `CloseOnExitMode` in the `Profile.h` header file. The `INHERITABLE_SETTING` macro handles inheritance logic and sets a default value of `CloseOnExitMode::Graceful`.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_0

LANGUAGE: C++
CODE:
```
INHERITABLE_SETTING(CloseOnExitMode, CloseOnExit, CloseOnExitMode::Graceful)
```

----------------------------------------

TITLE: TerminalSettingsModel API for Settings Inheritance - C++
DESCRIPTION: This C++ code snippet shows the core API methods expected on the TerminalSettingsModel for managing individual setting values within the cascading system. These methods allow checking if a setting has a user-defined value (HasName), clearing it (ClearName), getting its value (Name()), and setting its value (Name(String val)). The actual type and name (String and Name) are placeholders for specific settings.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1564 - Settings UI/cascading-settings.md#_snippet_0

LANGUAGE: C++
CODE:
```
// Note: String and "Name" are replaced for each setting
bool HasName();
void ClearName();
String Name();
void Name(String val);
```

----------------------------------------

TITLE: Referencing a New WinRT Component DLL (XML)
DESCRIPTION: Example of an <Reference> entry in a .vcxproj file (specifically TerminalAppLib.vcxproj) to reference a newly created WinRT Component DLL (Microsoft.Terminal.NewDLL). It specifies the path to the .winmd file and marks it as a WinMD file that should not be copied locally.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/creating_a_new_project.md#_snippet_1

LANGUAGE: XML
CODE:
```
    <Reference Include="Microsoft.Terminal.NewDLL">
      <HintPath>$(OpenConsoleCommonOutDir)\TerminalNewDLL\Microsoft.Terminal.NewDLL.winmd</HintPath>
      <IsWinMDFile>true</IsWinMDFile>
      <Private>false</Private>
      <CopyLocalSatelliteAssemblies>false</CopyLocalSatelliteAssemblies>
    </Reference>
```

----------------------------------------

TITLE: Encoding 'A' (Shift+a) in win32-input-mode and INPUT_RECORD Text
DESCRIPTION: Shows the four input records for typing the capital letter 'A' (which is typically Shift+a), including the Shift down/up and A down/up events. It provides both the `win32-input-mode` sequences and the `INPUT_RECORD` text, highlighting how character information is included.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#4999 - Improved keyboard handling in Conpty.md#_snippet_5

LANGUAGE: win32-input-mode
CODE:
```
^[[16;42;0;1;16;1_
^[[65;30;65;1;16;1_
^[[16;42;0;0;0;1_
^[[65;30;97;0;0;1_
```

LANGUAGE: undefined
CODE:
```
undefined
```

----------------------------------------

TITLE: Clone iTerm2 Color Schemes Repository (PowerShell)
DESCRIPTION: This snippet navigates to the system's temporary directory, removes any existing clone of the iTerm2-Color-Schemes repository, clones the repository with a depth of 1, and then changes the current directory into the newly cloned repository.
SOURCE: https://github.com/microsoft/terminal/blob/main/src/tools/schemes-fragment/import-all-schemes.ipynb#_snippet_0

LANGUAGE: PowerShell
CODE:
```
# Clone the repo into the temp directory

cd "$env:TEMP"
if (Test-Path -Path "$env:TEMP\iTerm2-Color-Schemes") {
    Remove-Item -Recurse -Force "$env:TEMP\iTerm2-Color-Schemes"
}
git clone --depth 1 https://github.com/mbadolato/iTerm2-Color-Schemes.git

cd "$env:TEMP\iTerm2-Color-Schemes"
```

----------------------------------------

TITLE: Defining the ActionMap Runtime Class (C++)
DESCRIPTION: Defines the public interface for the `ActionMap` runtime class, which provides methods to retrieve actions based on key chords or action details, and exposes a map of named commands. It outlines the methods and properties available for querying action data.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/Actions Addendum.md#_snippet_2

LANGUAGE: C++
CODE:
```
runtimeclass ActionMap
{
    ActionAndArgs GetActionByKeyChord(KeyChord keys);

    KeyChord GetKeyBindingForAction(ShortcutAction action);
    KeyChord GetKeyBindingForAction(ShortcutAction action, IActionArgs actionArgs);

    IMapView<String, Command> NameMap { get; };

    // Future Considerations:
    // - [#6899]: Action IDs --> GetActionByID()
}
```

----------------------------------------

TITLE: Creating Child Settings Object in C++
DESCRIPTION: Defines the `CreateChild` function for `GlobalAppSettings`, which creates a new settings object that inherits from the current object by adding it to the child's parent list.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/#885 - Terminal Settings Model.md#_snippet_1

LANGUAGE: c++
CODE:
```
GlobalAppSettings GlobalAppSettings::CreateChild() const
{
    GlobalAppSettings child {};
    child._parents.append(this);
    return child;
}
```

----------------------------------------

TITLE: ActionAndArgs Structure for KeyBinding Map (C++/WinRT IDL)
DESCRIPTION: Defines the ActionAndArgs runtimeclass, which is intended to store both the ShortcutAction type and its associated IActionArgs instance within the keybinding map.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1142 - Keybinding Arguments.md#_snippet_4

LANGUAGE: C++/WinRT IDL
CODE:
```
runtimeclass ActionAndArgs
{
    ShortcutAction Action;
    IActionArgs Args;
}
```

----------------------------------------

TITLE: Defining CONSRV_INFO Struct in C++
DESCRIPTION: Contains the comprehensive state information of the console session, including window handle, titles, buffer and view dimensions, cursor position and appearance, color table, and selection state.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_7

LANGUAGE: C++
CODE:
```
struct CONSRV_INFO {
    // NOTE: msys2 relies on the HWND value to uniquely identify terminal sessions.
    // If we were to hand out the multiplexed terminal window HWND to msys2, it will break. Either we need to
    // create fake windows inside conhost (very bad & buggy) or break msys2 intentionally (also very bad).
    HWND window;
    CONSRV_UTF16_STRING originalWindowTitle;
    CONSRV_UTF16_STRING windowTitle;

    CONSRV_POINT_I32 bufferSizeInCells;
    CONSRV_POINT_I32 cursorPositionInCells;
    CONSRV_POINT_I32 viewPositionInCells;
    CONSRV_POINT_I32 viewSizeInCells;
    CONSRV_POINT_F32 cellSizeInDIP;
    COLORREF colorTable[16];

    CONSRV_POINT_I32 selectionStart;
    CONSRV_POINT_I32 selectionEnd;
    boolean selectionActive;
    boolean selectionRectangular;
    boolean selectionMouseDown;

    float cursorHeight;
    boolean cursorHidden;
};
```

----------------------------------------

TITLE: Get OS Version in PowerShell Core
DESCRIPTION: Demonstrates how to retrieve the operating system version using the `$PSVersionTable.OS` variable in PowerShell Core. This provides the full OS name and build number.
SOURCE: https://github.com/microsoft/terminal/blob/main/CONTRIBUTING.md#_snippet_0

LANGUAGE: PowerShell
CODE:
```
C:\> $PSVersionTable.OS
Microsoft Windows 10.0.18909
```

----------------------------------------

TITLE: Mapping JSON Strings to Enum Values with JSON_ENUM_MAPPER (C++)
DESCRIPTION: Illustrates the usage of the JSON_ENUM_MAPPER macro to define a conversion trait for an enumeration type (CursorStyle). It maps specific JSON string values to corresponding enum members. An exception is thrown if the input string does not match any defined mapping.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Json-Utility-API.md#_snippet_4

LANGUAGE: C++
CODE:
```
JSON_ENUM_MAPPER(CursorStyle)
{
    // pair_type is provided by ENUM_MAPPER.
    JSON_MAPPINGS(5) = {
        pair_type{ "bar", CursorStyle::Bar },
        pair_type{ "vintage", CursorStyle::Vintage },
        pair_type{ "underscore", CursorStyle::Underscore },
        pair_type{ "filledBox", CursorStyle::FilledBox },
        pair_type{ "emptyBox", CursorStyle::EmptyBox }
    };
};
```

----------------------------------------

TITLE: Declare Action Enum in C++ IDL
DESCRIPTION: Declares a new action, `OpenSettings`, within the `ShortcutAction` enum in `KeyMapping.idl`. This enum represents the available actions that can be mapped to shortcuts.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_4

LANGUAGE: C++
CODE:
```
// Add the action to ShortcutAction
enum ShortcutAction
{
    OpenSettings
}
```

----------------------------------------

TITLE: Accessing JSON Object Members with GetValueForKey (C++)
DESCRIPTION: Illustrates using JsonUtils::GetValueForKey to retrieve values associated with specific keys from a JSON object. It supports reference-filling and value-returning modes and handles std::string and std::optional. Assumes the input JSON is an object.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Json-Utility-API.md#_snippet_1

LANGUAGE: C++
CODE:
```
std::string one;
std::optional<std::string> two;

JsonUtils::GetValueForKey(json, "firstKey", one);
// one is populated or unchanged.

JsonUtils::GetValueForKey(json, "secondKey", two);
// two is populated, nullopt or unchanged

auto three = JsonUtils::GetValueForKey<std::string>(json, "thirdKey");
// three is populated or zero-initialized

auto four = JsonUtils::GetValueForKey<std::optional<std::string>>(json, "fourthKey");
// four is populated or nullopt
```

----------------------------------------

TITLE: Get Build Version in Windows PowerShell
DESCRIPTION: Shows how to get the detailed build version information (Major, Minor, Build, Revision) using the `$PSVersionTable.BuildVersion` variable in Windows PowerShell.
SOURCE: https://github.com/microsoft/terminal/blob/main/CONTRIBUTING.md#_snippet_1

LANGUAGE: PowerShell
CODE:
```
C:\> $PSVersionTable.BuildVersion

Major  Minor  Build  Revision
-----  -----  -----  --------
10     0      18912  1001
```

----------------------------------------

TITLE: Setup Development Environment with Razzle
DESCRIPTION: Use this command in a standard CMD environment to set up the necessary development environment, including making the TAEF test runner `te.exe` available via the `%TAEF%` alias.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/TAEF.md#_snippet_0

LANGUAGE: Shell
CODE:
```
.\tools\razzle.cmd
```

----------------------------------------

TITLE: Layering JSON Settings in C++
DESCRIPTION: Shows how `CascadiaSettings::LayerJson` applies settings from a JSON value. It creates a child object for the global settings and layers the JSON onto it, demonstrating how inheritance is used during the loading process.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/#885 - Terminal Settings Model.md#_snippet_6

LANGUAGE: c++
CODE:
```
void CascadiaSettings::LayerJson(const Json::Value& json)
{
    _globals = _globals.CreateChild();
    _globals->LayerJson(json);

    // repeat the same for Profiles...
}
```

----------------------------------------

TITLE: Implementing Cascadia Settings Structures (C#)
DESCRIPTION: Shows the specific C# classes used in Project Cascadia to manage settings, including CascadiaSettings for loading/saving, Profile for per-profile data, GlobalAppSettings for global configuration, and concrete implementations of IApplicationSettings and IComponentSettings for the UWP context.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/TerminalSettings-spec.md#_snippet_1

LANGUAGE: C#
CODE:
```
class CascadiaSettings
{
    void LoadAll();
    void SaveAll();
    GlobalAppSettings Globals;
    List<Profile> Profiles;
    ApplicationSettings ToSettings(GlobalAppSettings globals, Profile profile);
    void Update(ApplicationSettings appSettings, GUID profileID);
}
class Profile
{
    GUID ProfileGuid;
    string Name;
    string Commandline;
    TerminalSettings TerminalSettings;
    string FontFace;
    int FontSize;
    float acrylicTransparency;
    bool useAcrylic;
}
class GlobalAppSettings
{
    GUID defaultProfile;
    Keybindings keybindings;
    bool showScrollbars;
    bool showStatusline;
}

class ApplicationSettings : IApplicationSettings
{
    UWPComponentSettings ComponentSettings;
    Keybindings keybindings;
    bool showStatusline;
}
class UWPComponentSettings : IComponentSettings
{
    Point GetDefaultComponentSize();
    TerminalSettings TerminalSettings;
    string FontFace;
    int FontSize;
    bool showScrollbars;
    float acrylicTransparency;
    bool useAcrylic;
}
```

----------------------------------------

TITLE: Defining C++ Enum for JSON Flags
DESCRIPTION: Defines a C++ enum `JsonTestFlags` using bitfield values, intended for use with JSON flag mapping. Each enumerator represents a distinct flag that can be combined using bitwise OR.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/Json-Utility-API.md#_snippet_5

LANGUAGE: c++
CODE:
```
enum class JsonTestFlags : int
{
    FlagOne = 1 << 0,
    FlagTwo = 1 << 1
};
```

----------------------------------------

TITLE: Add Serialization Mappers for Enum and Flag Types (C++)
DESCRIPTION: Provides examples of how to define JSON mappers for enum and enum flag types in `TerminalSettingsSerializationHelpers.h`. This is necessary for settings that are not primitive types, allowing the serialization and deserialization of their specific values to and from JSON strings.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_3

LANGUAGE: C++
CODE:
```
// For enum values...
JSON_ENUM_MAPPER(::winrt::Microsoft::Terminal::Settings::Model::CloseOnExitMode)
{
    JSON_MAPPINGS(3) = {
        pair_type{ "always", ValueType::Always },
        pair_type{ "graceful", ValueType::Graceful },
        pair_type{ "never", ValueType::Never },
    };
};

// For enum flag values...
JSON_FLAG_MAPPER(::winrt::Microsoft::Terminal::TerminalControl::CopyFormat)
{
    JSON_MAPPINGS(5) = {
        pair_type{ "none", AllClear },
        pair_type{ "html", ValueType::HTML },
        pair_type{ "rtf", ValueType::RTF },
        pair_type{ "all", AllSet },
    };
};
```

----------------------------------------

TITLE: Creating New Console Alt Buffer C++
DESCRIPTION: Requests the creation of a new console alternate buffer. The implementation should allocate and return a pointer to the new buffer.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_13

LANGUAGE: C++
CODE:
```
HRESULT CreateBuffer([out] void** buffer);
```

----------------------------------------

TITLE: Implementing Raster Bars Shader (HLSL)
DESCRIPTION: This HLSL pixel shader implements a retro raster bar effect for the Microsoft Terminal background. It samples the terminal texture, calculates raster bar colors and brightness based on texture coordinates and time, and blends them with the terminal content and a drop shadow. It requires terminal settings like resolution, scale, and time.
SOURCE: https://github.com/microsoft/terminal/blob/main/samples/PixelShaders/README.md#_snippet_2

LANGUAGE: HLSL
CODE:
```
// A minimal pixel shader that shows some raster bars

// The terminal graphics as a texture
Texture2D shaderTexture;
SamplerState samplerState;

// Terminal settings such as the resolution of the texture
cbuffer PixelShaderSettings {
  // The number of seconds since the pixel shader was enabled
  float  Time;
  // UI Scale
  float  Scale;
  // Resolution of the shaderTexture
  float2 Resolution;
  // Background color as rgba
  float4 Background;
};

// A pixel shader is a program that given a texture coordinate (tex) produces a color.
// tex is an x,y tuple that ranges from 0,0 (top left) to 1,1 (bottom right).
// Just ignore the pos parameter.
float4 main(float4 pos : SV_POSITION, float2 tex : TEXCOORD) : SV_TARGET
{
    // Read the color value at the current texture coordinate (tex)
    //  float4 is tuple of 4 floats, rgba
    float4 color = shaderTexture.Sample(samplerState, tex);

    // Read the color value at some offset, will be used as shadow
    float4 ocolor = shaderTexture.Sample(samplerState, tex+2.0*Scale*float2(-1.0, -1.0)/Resolution.y);

    // Thickness of raster
    const float thickness = 0.1;

    float ny = floor(tex.y/thickness);
    float my = tex.y%thickness;
    const float pi = 3.141592654;


    // ny is used to compute the rasterbar base color
    float cola = ny*2.0*pi;
    float3 col = 0.75+0.25*float3(sin(cola*0.111), sin(cola*0.222), sin(cola*0.333));

    // my is used to compute the rasterbar brightness
    //  smoothstep is a great little function: https://en.wikipedia.org/wiki/Smoothstep
    float brightness = 1.0-smoothstep(0.0, thickness*0.5, abs(my - 0.5*thickness));

    float3 rasterColor = col*brightness;

    // lerp(x, y, a) is another very useful function: https://en.wikipedia.org/wiki/Linear_interpolation
    float3 final = rasterColor;
    // Create the drop shadow of the terminal graphics
    //  .w is the alpha channel, 0 is fully transparent and 1 is fully opaque
    final = lerp(final, float(0.0), ocolor.w);
    // Draw the terminal graphics
    final = lerp(final, color.xyz, color.w);

    // Return the final color, set alpha to 1 (ie opaque)
    return float4(final, 1.0);
}
```

----------------------------------------

TITLE: Proposed C++ Definition for Consolidated Command Class
DESCRIPTION: Defines the proposed structure for the `Command` runtime class in C++. This new structure consolidates properties for icon path, name, key binding (`KeyChord`), and the action itself (`ActionAndArgs`), aiming to unify command and keybinding representations.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/Actions Addendum.md#_snippet_1

LANGUAGE: c++
CODE:
```
runtimeclass Command
{
    // The path to the icon (or icon itself, if it's an emoji)
    String IconPath;

    // The associated name. If none is defined, one is auto-generated.
    String Name;

    // The key binding that can be used to invoke this action.
    // NOTE: We're actually holding the KeyChord instead of just the text.
    //       KeyChordText just serializes the relevant keychord
    Microsoft.Terminal.Control.KeyChord Keys;
    String KeyChordText;

    // The action itself.
    ActionAndArgs ActionAndArgs;

    // NOTE: nested and iterable command logic will still be here,
    //       But they are omitted to make this section seem cleaner.

    // Future Considerations:
    // - [#6899]: Action IDs --> add an identifier here
}
```

----------------------------------------

TITLE: Updating Terminal Component Settings (C#)
DESCRIPTION: Illustrates the mechanism for updating settings in a terminal component. The ITerminalComponent interface defines an UpdateSettings method, and the UWPTerminalComponent implementation shows how it recalculates internal state and propagates the update to the core terminal instance.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/TerminalSettings-spec.md#_snippet_2

LANGUAGE: C#
CODE:
```
interface ITerminalComponent
{
    void UpdateSettings(IComponentSettings componentSettings);
}
partial class UWPTerminalComponent : ITerminalComponent
{
    void UpdateSettings(IComponentSettings componentSettings)
    {
        // Recalculate GlyphTypeFace
        // Recalculate rows/cols using current geometry and typeface
        // Update our terminal instance:
        terminal.UpdateSettings(componentSettings.TerminalSettings);
    }
}
```

----------------------------------------

TITLE: Defining Non-Inheritable Observable Setting in ProfileViewModel (C++)
DESCRIPTION: This C++ snippet, found in `Profiles.h` within the `ProfileViewModel`, defines a profile setting as observable using the `PERMANENT_OBSERVABLE_PROJECTED_SETTING` macro. This macro is used specifically for settings that cannot be inherited by other profiles, typically because they lack a `Clear()` function, such as the profile `Guid`.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_20

LANGUAGE: C++
CODE:
```
// Profiles.h --> ProfileViewModel
// - if the setting cannot be inherited by another profile (aka missing the Clear() function), use the following macro instead:
PERMANENT_OBSERVABLE_PROJECTED_SETTING(_profile, Guid);
```

----------------------------------------

TITLE: Checking for User-Defined Value in C++
DESCRIPTION: Provides a method to check if the `LaunchMode` setting has been explicitly set by the user. This is useful for UI components to distinguish between user-set and inherited values.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/#885 - Terminal Settings Model.md#_snippet_4

LANGUAGE: c++
CODE:
```
// check if there is a user-set value
// NOTE: This is important for the Settings UI to identify whether the user explicitly or implicitly set the presented value
bool GlobalAppSettings::HasLaunchMode()
{
    return _LaunchMode.has_value();
}
```

----------------------------------------

TITLE: Clearing User-Defined Value in C++
DESCRIPTION: Provides a method to explicitly unset the user-defined value for `LaunchMode`, causing the setting to revert to its inherited or default value.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/#885 - Terminal Settings Model.md#_snippet_5

LANGUAGE: c++
CODE:
```
// explicitly unset the user-set value (we want the inherited value)
void GlobalAppSettings::ClearLaunchMode()
{
    return _LaunchMode = std::nullopt;
}
```

----------------------------------------

TITLE: Setting Console Server State C++
DESCRIPTION: Applies changes specified in the CONSRV_INFO_CHANGE struct to the active buffer. Non-null members indicate specific state changes to be applied.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_17

LANGUAGE: C++
CODE:
```
HRESULT SetInfo([in] const CONSRV_INFO_CHANGE* info);
```

----------------------------------------

TITLE: Sample HLSL Pixel Shader for Color Inversion
DESCRIPTION: Provides a basic HLSL pixel shader ("Invert.hlsl") designed to invert the colors displayed in the Windows Terminal. It defines necessary textures, samplers, and a constant buffer for terminal settings, then implements the main function to read the texture color, invert its RGB components, and return the modified color.
SOURCE: https://github.com/microsoft/terminal/blob/main/samples/PixelShaders/README.md#_snippet_1

LANGUAGE: HLSL
CODE:
```
// A minimal pixel shader that inverts the colors

// The terminal graphics as a texture
Texture2D shaderTexture;
SamplerState samplerState;

// Terminal settings such as the resolution of the texture
cbuffer PixelShaderSettings {
  // The number of seconds since the pixel shader was enabled
  float  Time;
  // UI Scale
  float  Scale;
  // Resolution of the shaderTexture
  float2 Resolution;
  // Background color as rgba
  float4 Background;
};

// A pixel shader is a program that given a texture coordinate (tex) produces a color.
// tex is an x,y tuple that ranges from 0,0 (top left) to 1,1 (bottom right).
// Just ignore the pos parameter.
float4 main(float4 pos : SV_POSITION, float2 tex : TEXCOORD) : SV_TARGET
{
    // Read the color value at the current texture coordinate (tex)
    //  float4 is tuple of 4 floats, rgba
    float4 color = shaderTexture.Sample(samplerState, tex);

    // Inverts the rgb values (xyz) but don't touch the alpha (w)
    color.xyz = 1.0 - color.xyz;

    // Return the final color
    return color;
}
```

----------------------------------------

TITLE: Initializing Bindable Enum Setting in Implementation (C++)
DESCRIPTION: Uses the `INITIALIZE_BINDABLE_ENUM_SETTING` macro in the implementation file to initialize the bindable enum setting. The macro takes the setting name, enum mappings name, enum type, and resource prefixes for localization.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_15

LANGUAGE: C++
CODE:
```
// Constructor (after InitializeComponent())
// the INITIALIZE_BINDABLE_ENUM_SETTING macro accepts...
// - name: the name of the setting
// - enumMappingsName: the name from the TerminalSettingsModel's EnumMappings
// - enumType: the type for the enum
// - resourceSectionAndType: prefix for the localization
// - resourceProperty: postfix for the localization
INITIALIZE_BINDABLE_ENUM_SETTING(LaunchMode, LaunchMode, LaunchMode, L"Globals_LaunchMode", L"Content");
```

----------------------------------------

TITLE: Defining CascadiaSettings Class (C++)
DESCRIPTION: Defines the CascadiaSettings runtime class used for managing Terminal settings. It includes the Clone method to create a copy and the Save method to compare changes against a source and write them to a specified file path.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/#885 - Terminal Settings Model.md#_snippet_10

LANGUAGE: c++
CODE:
```
runtimeclass CascadiaSettings
{
    // Create a copy of the existing CascadiaSettings
    CascadiaSettings Clone();

    // Compares object to "source" and applies changes to
    // the settings file at "outPath"
    void Save(String outPath);
}
```

----------------------------------------

TITLE: Setting up and Handling Input for Async Suggestions UI (C++)
DESCRIPTION: This C++ snippet shows how the TerminalPage might set up the Suggestions UI for an asynchronous source. It binds the source's input change handler, disables default UI filtering, and sets up a callback for when the source's suggestions change. The `InputChangedHandler` function demonstrates how user input triggers a throttled function to query new results and signals the UI to show a loading state.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1595 - Suggestions UI/Suggestions-UI.md#_snippet_5

LANGUAGE: c++
CODE:
```
TerminalPage::SetUpSuggestionsUI()
{
    const auto& asyncSource{ AsyncSuggestions() };

    suggestionsUI.OnInputChanged({ asyncSource, AsyncSuggestions::InputChangedHandler});
    // In this example, we don't want the UI to filter item based on the input
    // string - the source has already determined the list of relevant matches.
    suggestionsUI.FilterByInput(false);

    asyncSource.SuggestionsChanged([](const auto& newCommands){
        suggestionsUI.Loading(false);
        suggestionsUI.Commands(newCommands);
    });
}

void AsyncSuggestions::InputChangedHandler(FilterChangedArgs args)
{
    // kick off a trailing ThrottledFunc to do a new query
    _loadNewResults->Run(args.NewInputText());
    // If we get another request, we might want to cancel the pending throttled
    // func entirely, and start the timeout fresh. Just so that we only make a
    // query for the final string they type.

    args.RequestLoading(true); // pass a boolean back up in the args, so that
    // the Suggestions UI can clear out the current commands, and start displaying an
    // indeterminate progress wheel.
}
```

----------------------------------------

TITLE: Expose Enum Settings for UI (C++/IDL)
DESCRIPTION: Shows how to expose a map of enum values and their string representations in the Terminal Settings Model's EnumMappings files (IDL, H, CPP). This is necessary for the settings UI to correctly display and interact with enum-based settings.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_12

LANGUAGE: IDL
CODE:
```
// EnumMappings.idl
static Windows.Foundation.Collections.IMap<String, Microsoft.Terminal.Settings.Model.CloseOnExitMode> CloseOnExitMode { get; };
```

LANGUAGE: C++
CODE:
```
// EnumMappings.h
static winrt::Windows::Foundation::Collections::IMap<winrt::hstring, CloseOnExitMode> CloseOnExitMode();
```

LANGUAGE: C++
CODE:
```
// EnumMappings.cpp
// - this macro leverages the json enum mapper in TerminalSettingsSerializationHelper to expose
//   the mapped values across project boundaries
DEFINE_ENUM_MAP(Model::CloseOnExitMode, CloseOnExitMode);
```

----------------------------------------

TITLE: Getting Resolved Setting Value in C++
DESCRIPTION: Provides the getter for the `LaunchMode` setting in `GlobalAppSettings`. It returns the resolved value by checking the user-set value first, then falling back through parent objects and finally to a system default.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/#885 - Terminal Settings Model.md#_snippet_2

LANGUAGE: c++
CODE:
```
// _LaunchMode will now be a std::optional<LaunchMode> instead of a LaunchMode
// - std::nullopt will mean that there is no user-set value
// - otherwise, the value was explicitly set by the user

// returns the resolved value for this setting
LaunchMode GlobalAppSettings::LaunchMode()
{
    // fallback tree:
    //  - user set value
    //  - inherited value
    //  - system set value
    return til::coalesce_value(_LaunchMode, _parents[0].LaunchMode(), _parents[1].LaunchMode(), ..., LaunchMode::DefaultMode);
}
```

----------------------------------------

TITLE: Selecting Panes with tmux Command
DESCRIPTION: Documentation for the `tmux select-pane` command, which allows users to make a specific pane active or modify its style. It supports directional movement, selecting the last active pane, and marking/clearing marked panes. This command serves as inspiration for potential pane navigation features in Windows Terminal.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2871 - Pane Navigation/#2871 - Pane Navigation.md#_snippet_0

LANGUAGE: bash
CODE:
```
select-pane [-DLlMmRU] [-T title] [-t target-pane]

	 Make pane target-pane the active pane in window target-window, or set its
	 style (with -P).  If one of -D, -L, -R, or -U is used, respectively the
	 pane below, to the left, to the right, or above the target pane is used.
	 -l is the same as using the last-pane command.

	 -m and -M are used to set and clear the marked pane.  There is one marked
	 pane at a time, setting a new marked pane clears the last.  The marked pane
	 is the default target for -s to join-pane, swap-pane and swap-window.
```

----------------------------------------

TITLE: Configuring OneFuzz CLI
DESCRIPTION: This command configures the OneFuzz command-line interface with the necessary endpoint, client ID, authority, and tenant domain to connect to the OneFuzz service. Note that this configuration is often pre-set in CI pipelines.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/fuzzing.md#_snippet_0

LANGUAGE: Shell
CODE:
```
onefuzz config --endpoint $(endpoint) --client_id $(client_id) --authority $(authority) --tenant_domain $(tenant_domain)
```

----------------------------------------

TITLE: Defining Action Modification Setters in C++ ActionMap
DESCRIPTION: Defines the setter methods within the `ActionMap` runtime class that are used to modify properties of a `Command` object, such as its key chord, name, icon, or associated action and arguments. These methods ensure that modifications are synchronized between the `ActionMap`'s internal state and the `Command` objects.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/Actions Addendum.md#_snippet_4

LANGUAGE: C++
CODE:
```
runtimeclass ActionMap
{
    void SetKeyChord(Command cmd, KeyChord keys);
    void SetName(Command cmd, String name);
    void SetIcon(Command cmd, String iconPath);
    void SetAction(Command cmd, ShortcutAction action, IActionArgs actionArgs);
}
```

----------------------------------------

TITLE: Declare Terminal Setting with WINRT_PROPERTY (C++)
DESCRIPTION: Demonstrates how to declare and define a terminal setting within the TerminalSettings.h file using the WINRT_PROPERTY macro. This macro automatically generates getter and setter methods for the setting.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_10

LANGUAGE: C++
CODE:
```
// The WINRT_PROPERTY macro declares/defines a getter setter for the setting.
// Like INHERITABLE_SETTING, it takes in a type, name, and defaultValue.
WINRT_PROPERTY(bool, UseAcrylic, false);
```

----------------------------------------

TITLE: Add Argument Parser Map Entry in C++
DESCRIPTION: Adds an entry to the `argParsers` map in `ActionAndArgs.cpp`, associating the `ShortcutAction::OpenSettings` enum with its JSON deserialization function (`OpenSettingsArgs::FromJson`). This allows the system to parse arguments for this action.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/cascadia/AddASetting.md#_snippet_9

LANGUAGE: C++
CODE:
```
// ActionKeyNamesMap --> argParsers
{ ShortcutAction::OpenSettings, OpenSettingsArgs::FromJson },
```

----------------------------------------

TITLE: ColorTool Command Line Usage
DESCRIPTION: Displays the command-line syntax for ColorTool.exe, including basic usage patterns, a description of the utility, details on parameters (<Function>, <Scheme name>, [Option]), available functions (-?, -c, -v, -l, -s, -o), and available options (-q, -e, -d, -b, -x, -t, -a).
SOURCE: https://github.com/microsoft/terminal/blob/main/src/tools/ColorTool/README.md#_snippet_0

LANGUAGE: plain
CODE:
```
Usage:\n    ColorTool.exe <Function>\n    ColorTool.exe [Options] <Scheme name>\n\nColorTool is a utility for helping to set the color palette of the Windows Console.\nBy default, applies the colors in the specified .itermcolors, .json or .ini file to the current console window.\nThis does NOT save the properties automatically. For that, you'll need to open the properties sheet and hit "Ok".\nIncluded should be a `schemes/` directory with a selection of schemes of both formats for examples.\nFeel free to add your own preferred scheme to that directory.\n\nParameters:\n    <Function>   : One and only one of the switches listed in the "Functions" section below.\n    <Scheme name>: The name of a color scheme. ColorTool will try to first load it as an .ini file color scheme\n                   If that fails, it will look for it as a .json file color scheme\n                   If that fails, it will look for it as an .itermcolors file color scheme.\n                   Must be the last parameter passed to ColorTool.\n    [Option]     : One or more of the switches listed in the "Options" section below. Must appear before scheme\n                   name.\n\nFunctions:\n    You may specify only one of the following switches each time you invoke ColorTool. Any additional switches\n    before or after the first one of them will be ignored.\n\n    -?, --help     : Display this help message\n    -c, --current  : Print the color table for the currently applied scheme\n    -v, --version  : Display the version number\n    -l, --location : Displays the full path to the schemes directory\n    -s, --schemes  : Displays all available schemes\n    -o, --output <filename> : output the current color table to a file in .ini format\n\nOptions:\n    You may use these switches before a scheme name.\n\n    -q, --quiet    : Don't print the color table after applying\n    -e, --errors   : Report scheme parsing errors on the console\n    -d, --defaults : Apply the scheme to only the defaults in the registry\n                     By default, the scheme would be applied to the current console instead.\n    -b, --both     : Apply the scheme to both the current console and the defaults.\n                     By default, the scheme would be applied to the current console only.\n    -x, --xterm    : Set the colors using VT sequences. Used for setting the colors in WSL.\n                     Only works in Windows versions >= 17048.\n    -t, --terminal : Output the colors in JSON format for copying into a Windows Terminal settings file.\n    -a, --allcolors: Output extended color table. best for >110 column terminals
```

----------------------------------------

TITLE: Search Process Implementation Details - Microsoft Terminal
DESCRIPTION: Explains the technical steps involved when a user initiates a search, including object creation, focus handling, search algorithm reuse (conhost module), direction, case sensitivity, tab navigation, and closing the box.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#605 - Search/spec.md#_snippet_0

LANGUAGE: Documentation
CODE:
```
1. Once the user press <kbd>ctrl+shift+f</kbd> (or user's custom key binding), a new `SearchBoxControl` object will be created and attached as a child of `TermControl`. Focus will move to the TextBox within the `SearchBoxControl`.
2. Search is performed on a XAML TextBox. Once the user presses Enter or click up/down arrow button, we start to search from the last line of the current viewport or the current selection, and try to find the exact text in the text buffer. The nearest searched one will be selected. Then the search start point will be set to the selected text. The next search will start before or after the previous searched text.
3. We re-use the Search module in conhost. It performs the search in a brute-force approach. Starting from every position in the text buffer, the search algorithm compares the span of the searched string with buffer characters, and if the current buffer text matches the whole string, it will return store the position of the text in the buffer and return. The stored position information will be used for selection.
3. The user can choose to search up or down. Search module realizes this, we just need to set a boolean flag. Default is search up.
4. The user can choose to do case-sensitive or insensitive match. This also realized by Search module by setting a boolean flag. Default is search case-insensitively.
5. Tab navigation is realized by XAML. We just need to set TabNavigation="Cycle" in `SearchBoxControl`.
6. If the user clicks on the "X" button or press <kbd>Esc</kbd>, the search box will disappear and the object will be destructed and detached from the `TermControl` XAML tree. In phase one we do not store any state.
7. We need to guarantee full interaction with the terminal when the search box is open. To achieve this, search box and terminal input should be separated. If the current keyboard focus is on the search box, then keydown events will be handled on "search box level".
```

----------------------------------------

TITLE: Getting Console Server State C++
DESCRIPTION: Retrieves a snapshot of the current terminal and buffer state. The returned pointer must remain valid until the next GetInfo() or Unlock() call, or until the buffer is released.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_16

LANGUAGE: C++
CODE:
```
const CONSRV_INFO* GetInfo();
```

----------------------------------------

TITLE: Exposing GUID Generation Functions to Generators (C++)
DESCRIPTION: Declares two functions, `GetNamespaceGuid` and `GetGuidForName`, that are exposed to dynamic profile generators. `GetNamespaceGuid` allows a generator to retrieve its own namespace GUID, while `GetGuidForName` provides a utility for generating a uuidv5 GUID within the generator's namespace based on a given name key.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#754 - Cascading Default Settings.md#_snippet_3

LANGUAGE: C++
CODE:
```
GUID GetNamespaceGuid(IDynamicProfileGenerator& generator);
GUID GetGuidForName(IDynamicProfileGenerator& generator, std::wstring& name);
```

----------------------------------------

TITLE: Win32 Input Mode Output Sequence Format (Terminal Sequence)
DESCRIPTION: Format of the CSI sequence sent by the terminal to the client when win32-input-mode is enabled. It encodes fields from the KEY_EVENT_RECORD structure: Virtual Key Code (Vk), Scan Code (Sc), Unicode Char (Uc), Key Down state (Kd), Control Key State (Cs), and Repeat Count (Rc).
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#4999 - Improved keyboard handling in Conpty.md#_snippet_2

LANGUAGE: Terminal Sequence Format
CODE:
```
^[ [ Vk ; Sc ; Uc ; Kd ; Cs ; Rc _
```

----------------------------------------

TITLE: Internal Action Storage Maps (C++)
DESCRIPTION: Declares the internal `std::map` members `_KeyMap` and `_ActionMap` used within the `ActionMap` class to store key chord to action ID mappings and action ID to command mappings, respectively. These maps facilitate efficient lookup of actions.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#885 - Terminal Settings Model/Actions Addendum.md#_snippet_3

LANGUAGE: C++
CODE:
```
std::map<KeyChord, InternalActionID> _KeyMap;
std::map<InternalActionID, Command> _ActionMap;
```

----------------------------------------

TITLE: Encoding Ctrl+Alt+A in win32-input-mode and INPUT_RECORD Text
DESCRIPTION: Illustrates the six input records generated for a Ctrl+Alt+A keypress, presenting both the `win32-input-mode` sequences and the `INPUT_RECORD` text format. This includes down and up events for Ctrl, Alt, and A, showing how modifier keys affect the KeyState.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#4999 - Improved keyboard handling in Conpty.md#_snippet_4

LANGUAGE: win32-input-mode
CODE:
```
^[[17;29;0;1;8;1_
^[[18;56;0;1;10;1_
^[[65;30;0;1;10;1_
^[[65;30;0;0;10;1_
^[[18;56;0;0;8;1_
^[[17;29;0;0;0;1_
```

LANGUAGE: INPUT_RECORD text
CODE:
```
Down: 1 Repeat: 1 KeyCode: 0x11 ScanCode: 0x1d Char: \0 (0x0) KeyState: 0x28
Down: 1 Repeat: 1 KeyCode: 0x12 ScanCode: 0x38 Char: \0 (0x0) KeyState: 0x2a
Down: 1 Repeat: 1 KeyCode: 0x41 ScanCode: 0x1e Char: \0 (0x0) KeyState: 0x2a
Down: 0 Repeat: 1 KeyCode: 0x41 ScanCode: 0x1e Char: \0 (0x0) KeyState: 0x2a
Down: 0 Repeat: 1 KeyCode: 0x12 ScanCode: 0x38 Char: \0 (0x0) KeyState: 0x28
Down: 0 Repeat: 1 KeyCode: 0x11 ScanCode: 0x1d Char: \0 (0x0) KeyState: 0x20
```

----------------------------------------

TITLE: Encoding Ctrl+F1 in win32-input-mode and INPUT_RECORD Text
DESCRIPTION: Shows the full sequence of input records generated for a Ctrl+F1 keypress, including both the `win32-input-mode` escape sequences and the corresponding textual representation of the `INPUT_RECORD` structure. This demonstrates the four events (Ctrl down, F1 down, F1 up, Ctrl up) and their parameters.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#4999 - Improved keyboard handling in Conpty.md#_snippet_3

LANGUAGE: win32-input-mode
CODE:
```
^[[17;29;0;1;8;1_
^[[112;59;0;1;8;1_
^[[112;59;0;0;8;1_
^[[17;29;0;0;0;1_
```

LANGUAGE: INPUT_RECORD text
CODE:
```
Down: 1 Repeat: 1 KeyCode: 0x11 ScanCode: 0x1d Char: \0 (0x0) KeyState: 0x28
Down: 1 Repeat: 1 KeyCode: 0x70 ScanCode: 0x3b Char: \0 (0x0) KeyState: 0x28
Down: 0 Repeat: 1 KeyCode: 0x70 ScanCode: 0x3b Char: \0 (0x0) KeyState: 0x28
Down: 0 Repeat: 1 KeyCode: 0x11 ScanCode: 0x1d Char: \0 (0x0) KeyState: 0x20
```

----------------------------------------

TITLE: Defining Keybinding and Command Separately (Old Spec)
DESCRIPTION: This JSON snippet illustrates the previous method for defining actions in the Windows Terminal settings. It shows how the same action ('splitPane' with 'duplicate' mode) had to be defined redundantly in both the 'keybindings' array (with a 'keys' property) and the 'commands' array (with a 'name' property) to function as both a keyboard shortcut and a command palette entry.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2046 - Unified keybindings and commands, and synthesized action names.md#_snippet_0

LANGUAGE: json
CODE:
```
{
    "keybindings": [
        { "keys": [ "ctrl+alt+t" ], "command": { "action": "splitPane", "split":"auto", "splitMode": "duplicate" } }
    ],
    "commands": [
        { "name": "Duplicate Pane", "action": { "action": "splitPane", "split":"auto", "splitMode": "duplicate" }, "icon": null }
    ]
}
```

----------------------------------------

TITLE: Releasing Console Server Lock C++
DESCRIPTION: Releases the synchronization lock acquired by Lock(). This function is called after the atomic operation is complete.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_12

LANGUAGE: C++
CODE:
```
HRESULT Unlock();
```

----------------------------------------

TITLE: New Tab Menu Configuration (Before Action IDs) (JSON)
DESCRIPTION: Configuration example for the new tab menu showing the previous approach where actions were defined directly within the menu structure using the 'command' property, sometimes with nested action objects.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#6899 - Action IDs/#6899 - Action IDs.md#_snippet_5

LANGUAGE: json
CODE:
```
{
    "newTabMenu": [
        { "type":"action", "command": { "action": "adjustFontSize", "delta": 1 }, }
        { "type":"action", "command": { "action": "adjustFontSize", "delta": -1 }, }
        { "type":"action", "command": "resetFontSize", }
        { "type":"profile", "profile": "cmd" },
        { "type":"profile", "profile": "Windows PowerShell" },
        { "type":"separator" },
        {
            "type":"folder",
            "name": "Settings...",
            "icon": "C:\\path\\to\\icon.png",
            "entries":[
                { "type":"action", "command": "openSettings" },
                { "type":"action", "command": { "action": "openSettings", "target": "defaultsFile" } },
            ]
        }
    ]
}
```

----------------------------------------

TITLE: Future wt.exe --elevated Argument
DESCRIPTION: Discusses a potential `--elevated` argument that could be used to request that the Windows Terminal process launch in an elevated context, considered in relation to issue #632.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_24

LANGUAGE: Command Line
CODE:
```
--elevated
```

----------------------------------------

TITLE: Defining IConsoleServer Interface in C++
DESCRIPTION: Defines the interface for the console server, allowing clients to send input. It includes methods for writing keyboard input records and plain text strings in UTF-8 and UTF-16 formats.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_9

LANGUAGE: C++
CODE:
```
interface IConsoleServer : IUnknown {
    // TODO: This interface is incomplete. Among others, a way to launch new application into the server is missing.

    // ConPTY manages stdin as a ring buffer for you. When the terminal has focus, you simply need to write your input.
    // Keyboard input MUST be written via `WriteInputRecords`. The other 2 functions DO NOT parse any VT sequences.
    // They're instead meant either for VT responses (DECRPM, etc.) and for dumping plain text (clipboard, etc.).
    void WriteInputRecords([in] DWORD count, [in, length_is(count)] const INPUT_RECORD* records);
    void WriteInputUTF8([in] CONSRV_UTF8_STRING text);
    void WriteInputUTF16([in] CONSRV_UTF16_STRING text);
};
```

----------------------------------------

TITLE: Setting up Code Formatting - PowerShell
DESCRIPTION: Imports the OpenConsole build module, sets up the MSBuild development environment, and downloads the required clang-format.exe for code formatting in Visual Studio.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/building.md#_snippet_1

LANGUAGE: powershell
CODE:
```
Import-Module .\tools\OpenConsole.psm1
Set-MsBuildDevEnvironment
Get-Format
```

----------------------------------------

TITLE: Updating Locally Versioned Nuget Packages - Shell (WSL)
DESCRIPTION: Uses git grep and sed to find and replace the version number of a specific locally versioned NuGet package across project files. Requires a Unix-like environment such as WSL due to the use of `sed`.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/building.md#_snippet_4

LANGUAGE: shell
CODE:
```
git grep -z -l $PackageName | xargs -0 sed -i -e 's/$OldVersionNumber/$NewVersionNumber/g'
```

----------------------------------------

TITLE: Display TAEF Runner Help (Shell)
DESCRIPTION: Show the embedded help documentation for the `te.exe` test runner, listing available commands and options.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/TAEF.md#_snippet_3

LANGUAGE: Shell
CODE:
```
te.exe /!
```

----------------------------------------

TITLE: Defining CONSRV_UTF16_STRING Struct in C++
DESCRIPTION: Represents a UTF-16 encoded string with a pointer to the data and its length. This structure is likely used for passing UTF-16 string data, potentially for Windows API compatibility.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_6

LANGUAGE: C++
CODE:
```
struct CONSRV_UTF16_STRING {
    [size_is(length)] const wchar_t* data;
    DWORD length;
};
```

----------------------------------------

TITLE: Iterating through Definition Files (PowerShell)
DESCRIPTION: This PowerShell command iterates through all files with the '.def' extension in the current directory and its subdirectories. For each file found, it prints the file path and then executes the 'ansi-color.cmd' script using that definition file as an argument. This is convenient for quickly testing multiple color scheme definitions.
SOURCE: https://github.com/microsoft/terminal/blob/main/src/tools/ansi-color/README.md#_snippet_0

LANGUAGE: PowerShell
CODE:
```
gci -r .\*.def | %{write ($_ | rvpa -r) && .\ansi-color.cmd $_}
```

----------------------------------------

TITLE: Execute Specific Test via T-Shell
DESCRIPTION: This command uses the `execd` utility in T-Shell to run a specific test executable (`te.exe`) with a particular test DLL (`Microsoft.Console.Host.FeatureTests.dll`), filtering the execution to only include tests matching the name pattern `*TestReadFileEcho*` on the remote device.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/WindowsTestPasses.md#_snippet_2

LANGUAGE: T-Shell Command
CODE:
```
execd te.exe Microsoft.Console.Host.FeatureTests.dll /name:*TestReadFileEcho*
```

----------------------------------------

TITLE: Build Windows Terminal in PowerShell
DESCRIPTION: Build the OpenConsole.sln solution from the command line using PowerShell scripts. This involves importing a module, setting up the MSBuild environment, and invoking the build process.
SOURCE: https://github.com/microsoft/terminal/blob/main/README.md#_snippet_7

LANGUAGE: PowerShell
CODE:
```
Import-Module .\tools\OpenConsole.psm1
Set-MsBuildDevEnvironment
Invoke-OpenConsoleBuild
```

----------------------------------------

TITLE: Building OpenConsole - Cmd
DESCRIPTION: Runs the razzle script to set up the build environment and then executes the 'bcz' command to build the project from the command prompt.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/building.md#_snippet_3

LANGUAGE: shell
CODE:
```
.\tools\razzle.cmd
bcz
```

----------------------------------------

TITLE: Activating Console Alt Buffer C++
DESCRIPTION: Switches the active console buffer. A NULL buffer indicates switching back to the main buffer. The `temporary` hint suggests the previous buffer will be reactivated soon.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_15

LANGUAGE: C++
CODE:
```
HRESULT ActivateBuffer([in] void* buffer, [in] boolean temporary);
```

----------------------------------------

TITLE: Synchronizing Console Server Calls C++
DESCRIPTION: Provides a mechanism to synchronize calls to the console server interface. This function is called before any other interface functions.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_11

LANGUAGE: C++
CODE:
```
HRESULT Lock();
```

----------------------------------------

TITLE: Cursor Home - VT52 Command
DESCRIPTION: VT52 escape sequence to move the cursor to the home position (top-left corner). Can likely be implemented using the CursorPosition method.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_25

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC H
```

----------------------------------------

TITLE: Upgrade Windows Terminal via Chocolatey (PowerShell)
DESCRIPTION: Upgrades an existing installation of Windows Terminal to the latest version using the Chocolatey package manager. This method is unofficial and requires Chocolatey to be installed.
SOURCE: https://github.com/microsoft/terminal/blob/main/README.md#_snippet_3

LANGUAGE: powershell
CODE:
```
choco upgrade microsoft-windows-terminal
```

----------------------------------------

TITLE: Using wt.exe with --session Argument (Future)
DESCRIPTION: Illustrates the potential use of a `--session` argument to direct commands to an existing Windows Terminal session or window, requiring a future 'manager' process feature. The examples show attaching commands to a specific session ID.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_22

LANGUAGE: Command Line
CODE:
```
wt --session [some-session-id] [commands]
```

LANGUAGE: Command Line
CODE:
```
wt --session 0 cmd.exe
```

----------------------------------------

TITLE: Numeric Keypad 'Enter' - DECKPAM VT52 Mode
DESCRIPTION: Escape sequence generated for the numeric keypad 'Enter' key when DECKPAM is set and the terminal is in VT52 mode. Active when Num Lock is disabled.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_15

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC ? M
```

----------------------------------------

TITLE: Configuring Visual Studio Debugging for UI Automation Tests (TE.exe Arguments)
DESCRIPTION: Details the command arguments required to configure the Visual Studio debugger for the Interactivity.Win32.Tests.Unit project. These arguments instruct the Test Executor (TE.exe) to run the generated UI Automation tests in-process.
SOURCE: https://github.com/microsoft/terminal/blob/main/tools/TestTableWriter/README.md#_snippet_1

LANGUAGE: Command Line Arguments
CODE:
```
$(TargetPath) /name:*uiatextrange*generated* /inproc
```

----------------------------------------

TITLE: Future wt.exe --file Argument
DESCRIPTION: Explains a potential `--file` or `-f` argument for loading a list of startup commands from a configuration file, enabling reusable terminal configurations. Commands in the file would apply to the same window.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_25

LANGUAGE: Command Line
CODE:
```
--file,-f configuration-file
```

----------------------------------------

TITLE: Setting Console Text Attributes C++
DESCRIPTION: Sets the text attributes for the active buffer, including support for gridline attributes not directly translatable to VT. Includes examples for translating attributes to VT sequences.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_19

LANGUAGE: C++
CODE:
```
HRESULT SetCurrentAttributes([in] UINT16 attributes);
```

LANGUAGE: C
CODE:
```
static const uint8_t lut[] = { 30, 34, 32, 36, 31, 35, 33, 37, 90, 94, 92, 96, 91, 95, 93, 97 };
const auto fg = lut[attributes & 0xf];
const auto bg = lut[(attributes >> 4) & 0xf] + 10;
printf("\x1b[%d;%dm", fg, bg);
```

LANGUAGE: C
CODE:
```
printf("\x1b[39;49");
```

LANGUAGE: C
CODE:
```
printf("\x1b[7m");
```

----------------------------------------

TITLE: Numeric Keypad '-' - DECKPAM VT52 Mode
DESCRIPTION: Escape sequence generated for the numeric keypad '-' key when DECKPAM is set and the terminal is in VT52 mode. Active when Num Lock is disabled.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_11

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC ? m
```

----------------------------------------

TITLE: Run TAEF Tests with PowerShell Module
DESCRIPTION: Import the OpenConsole PowerShell module and use the `Invoke-OpenConsoleTests` cmdlet to run tests. This cmdlet provides additional options for test execution.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/TAEF.md#_snippet_4

LANGUAGE: PowerShell
CODE:
```
Import-Module .\tools\OpenConsole.psm1
Invoke-OpenConsoleTests
```

----------------------------------------

TITLE: Future wt.exe list-sessions Command
DESCRIPTION: Describes a hypothetical `list-sessions` command that would display active Windows Terminal instances and their session IDs, intended to be compatible with the `--session` argument. This is dependent on the future manager process feature.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#607 - Commandline Arguments for the Windows Terminal.md#_snippet_23

LANGUAGE: Command Line
CODE:
```
list-sessions
```

----------------------------------------

TITLE: Reading Console Buffer in C++
DESCRIPTION: Starting from column `pos.x` in row `pos.y`, this reads `count`-many characters and attributes. `pos` and `count` will be clamped such that reads never extend outside of the `CONSRV_INFO::bufferSize`. However, it may still read cells that have never been written to (for instance below the current viewport!). Such reads should not fail. Simply fill the `infos` array with whitespaces and a default attribute of your chosing, but `FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED` is recommended (no other bits set). NOTE that this API should ignore any line renditions (DECDWL, DECDHL), margins (DECSLRM, ...), etc. Reading outside of the "valid" range for a given row should behave exactly like reading below the viewport, as described in the previous paragraph.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_20

LANGUAGE: C++
CODE:
```
HRESULT ReadBuffer([in] CONSRV_POINT_I32 pos, [in] INT32 count, [out, length_is(count)] CONSRV_CHAR_INFO* infos);
```

----------------------------------------

TITLE: Erase to End of Line - VT52 Command
DESCRIPTION: VT52 escape sequence to erase characters from the cursor position to the end of the current line. Can use the existing EraseInLine method.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_24

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC K
```

----------------------------------------

TITLE: Defining ConPTY Handoff Contract - C++
DESCRIPTION: Defines the function signature for the contract used to hand off a console session from the updated console host to a terminal application using ConPTY. This function is responsible for transferring necessary handles for input, output, signaling, session reference, and process monitoring.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#492 - Default Terminal/spec.md#_snippet_1

LANGUAGE: C++
CODE:
```
HRESULT EstablishPtyHandoff(HANDLE in, HANDLE out, HANDLE signal, HANDLE ref, HANDLE server, HANDLE client)
```

----------------------------------------

TITLE: Reverse Line Feed - VT52 Command
DESCRIPTION: VT52 escape sequence to move the cursor up one line, scrolling the screen if necessary. Can use the existing ReverseLineFeed method.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_22

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC I
```

----------------------------------------

TITLE: Cursor Right - VT52 Command
DESCRIPTION: VT52 escape sequence to move the cursor right one column. This command is already implemented.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_19

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC C
```

----------------------------------------

TITLE: Cursor Down - VT52 Command
DESCRIPTION: VT52 escape sequence to move the cursor down one row. This command is already implemented.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_17

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC B
```

----------------------------------------

TITLE: Exit Keypad Mode - VT52 Command
DESCRIPTION: VT52 escape sequence to exit application keypad mode (DECKPAM) and return to normal keypad mode. Can use the existing SetKeypadMode method.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_29

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC >
```

----------------------------------------

TITLE: Up Key - ANSI Mode
DESCRIPTION: Escape sequence generated for the Up arrow key when the terminal is in ANSI mode.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_2

LANGUAGE: Terminal Escape Sequence
CODE:
```
SS3 2 x
```

----------------------------------------

TITLE: Exit Graphics Mode - VT52 Command
DESCRIPTION: VT52 escape sequence to exit graphics character set mode and return to standard characters. Can likely use the existing DesignateCharset method.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_21

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC G
```

----------------------------------------

TITLE: Define Proposed focusPane Action
DESCRIPTION: Defines the signature for a proposed 'focusPane' action, allowing specification of a target pane by ID and an optional directional movement. This design was considered ambiguous.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2871 - Pane Navigation/#2871 - Pane Navigation.md#_snippet_2

LANGUAGE: Configuration
CODE:
```
focusPane(target=id, direction="up|down|left|right|last")
```

----------------------------------------

TITLE: Defining Console Attribute Flags in C++
DESCRIPTION: Defines various bit flags used to represent console cell attributes like foreground/background colors, intensity, wide glyphs, reverse video, and grid lines. These flags are equivalent to classic Windows Console API attributes, some mapping to VT sequences while others are unique. Note that the code is commented out (#if 0).
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_3

LANGUAGE: C++
CODE:
```
#if 0
// These flags are equivalent to the classic 4-bit indexed colors in VT via SGR.
// However, the position of the blue and red bits are swapped.
#define FOREGROUND_BLUE            0x0001 // Text color contains blue.
#define FOREGROUND_GREEN           0x0002 // Text color contains green.
#define FOREGROUND_RED             0x0004 // Text color contains red.
#define FOREGROUND_INTENSITY       0x0008 // Text color is intensified.
#define BACKGROUND_BLUE            0x0010 // Background color contains blue.
#define BACKGROUND_GREEN           0x0020 // Background color contains green.
#define BACKGROUND_RED             0x0040 // Background color contains red.
#define BACKGROUND_INTENSITY       0x0080 // Background color is intensified.

// These two bits are used to represent wide glyphs.
#define COMMON_LVB_LEADING_BYTE    0x0100 // Leading byte.
#define COMMON_LVB_TRAILING_BYTE   0x0200 // Trailing byte.

// This bit is equivalent to the "CSI 7 m" reverse video escape sequence.
#define COMMON_LVB_REVERSE_VIDEO   0x4000 // Reverse foreground and background attribute.

// NOTE: These flags have no equivalent in VT. COMMON_LVB_UNDERSCORE in particular is not the same as a
// "CSI 4 m" underline in VT, despite the name. They're used to give a cell border (= grid) lines.
#define COMMON_LVB_GRID_HORIZONTAL 0x0400 // Top horizontal.
#define COMMON_LVB_GRID_LVERTICAL  0x0800 // Left vertical.
#define COMMON_LVB_GRID_RVERTICAL  0x1000 // Right vertical.
#define COMMON_LVB_UNDERSCORE      0x8000 // Underscore.
#endif
```

----------------------------------------

TITLE: Numeric Keypad '-' - DECKPAM ANSI Mode
DESCRIPTION: Escape sequence generated for the numeric keypad '-' key when DECKPAM is set and the terminal is in ANSI mode. Note: DECKPAM is not currently implemented in ANSI mode.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_10

LANGUAGE: Terminal Escape Sequence
CODE:
```
SS3 m
```

----------------------------------------

TITLE: Alternative Theme Configuration with Brushes (Discarded)
DESCRIPTION: This commented-out snippet shows an alternative, more complex proposal for theme-aware styling using a `brushes` property within the theme definition itself. It allows defining specific color values (`Foo`) that change based on the system's light/dark mode, referenced by keys. This approach was considered but deemed too complicated.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#3327 - Application Theming/#3327 - Application Theming.md#_snippet_19

LANGUAGE: JSONC
CODE:
```
{
    "name": "My theme aware theme",
    "brushes": {
        "light": {
            "Foo": "#ff0000"
        },
        "dark": {
            "Foo": "#00ff00"
        }
    },
    "window.applicationTheme": "system",
    "tabRow.background": "key:Foo",
}
```

----------------------------------------

TITLE: Numeric Keypad '+' - DECKPAM VT52 Mode
DESCRIPTION: Escape sequence generated for the numeric keypad '+' key when DECKPAM is set and the terminal is in VT52 mode. Active when Num Lock is disabled.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_9

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC ? k
```

----------------------------------------

TITLE: Numeric Keypad 'Enter' - DECKPAM ANSI Mode
DESCRIPTION: Escape sequence generated for the numeric keypad 'Enter' key when DECKPAM is set and the terminal is in ANSI mode. Note: DECKPAM is not currently implemented in ANSI mode.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_14

LANGUAGE: Terminal Escape Sequence
CODE:
```
SS3 M
```

----------------------------------------

TITLE: Numeric Keypad '/' - DECKPAM ANSI Mode
DESCRIPTION: Escape sequence generated for the numeric keypad '/' key when DECKPAM is set and the terminal is in ANSI mode. Note: DECKPAM is not currently implemented in ANSI mode.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_12

LANGUAGE: Terminal Escape Sequence
CODE:
```
SS3 o
```

----------------------------------------

TITLE: Comment Suggesting defaults.json Location (JSON)
DESCRIPTION: Provides a comment intended for the user's `profiles.json` file, directing them to the location of the default settings file (`defaults.json`) for reference. This is presented as an alternative UI approach to opening both files simultaneously.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#754 - Cascading Default Settings.md#_snippet_5

LANGUAGE: json
CODE:
```
// To view the default settings, open the defaults.json file in this directory

```

----------------------------------------

TITLE: Numeric Keypad '/' - DECKPAM VT52 Mode
DESCRIPTION: Escape sequence generated for the numeric keypad '/' key when DECKPAM is set and the terminal is in VT52 mode. Active when Num Lock is disabled.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_13

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC ? o
```

----------------------------------------

TITLE: PgUp Key - VT52 Mode
DESCRIPTION: Escape sequence generated for the Page Up key when the terminal is in VT52 mode.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_5

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC ? y
```

----------------------------------------

TITLE: Numeric Keypad '+' - DECKPAM ANSI Mode
DESCRIPTION: Escape sequence generated for the numeric keypad '+' key when DECKPAM is set and the terminal is in ANSI mode. Note: DECKPAM is not currently implemented in ANSI mode.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_8

LANGUAGE: Terminal Escape Sequence
CODE:
```
SS3 k
```

----------------------------------------

TITLE: Erase to End of Display - VT52 Command
DESCRIPTION: VT52 escape sequence to erase characters from the cursor position to the end of the display. Can use the existing EraseInDisplay method.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_23

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC J
```

----------------------------------------

TITLE: Numeric Keypad '*' - DECKPAM VT52 Mode
DESCRIPTION: Escape sequence generated for the numeric keypad '*' key when DECKPAM is set and the terminal is in VT52 mode. Active when Num Lock is disabled.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_7

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC ? j
```

----------------------------------------

TITLE: Cursor Up - VT52 Command
DESCRIPTION: VT52 escape sequence to move the cursor up one row. This command is already implemented.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_16

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC A
```

----------------------------------------

TITLE: Identify - VT52 Command
DESCRIPTION: VT52 escape sequence to request the terminal's identity. The terminal should respond with ESC / Z. This may require a new addition to the AdaptDispatch class.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_27

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC Z
```

----------------------------------------

TITLE: Windows Terminal Architecture After ConPTY Refactor (Mermaid)
DESCRIPTION: This Mermaid flowchart illustrates the proposed new architecture, showing ConPTY split into static and dynamic libraries and how both conhost and Windows Terminal would interact with the ConPTY static library via an IApiRoutines interface, simplifying the overall structure.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#13000 - In-process ConPTY.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
%%{ init: { "flowchart": { "curve": "monotoneX" } } }%%
flowchart LR
    subgraph ConPTY_lib["ConPTY (static library)"]
        server_io[Console API calls]
        ConPTY_Translation[VT Translation]

        server_io<-->ConPTY_Translation
    end

    subgraph ConPTY["ConPTY (dynamic library)"]
        ConPTY_impl[IApiRoutines impl]
        ConPTY_parser[VT parser]
        ConPTY_buffer[Text Buffer]
        ConPTY_output[ConPTY Output]

        ConPTY_Translation<-->ConPTY_impl
        ConPTY_impl-->ConPTY_parser
        ConPTY_parser-->ConPTY_buffer
        ConPTY_buffer--ReadBuffer-->ConPTY_impl
        ConPTY_impl------>ConPTY_output
    end

    subgraph conhost
        conhost_impl[IApiRoutines impl]
        conhost_parser[VT parser]
        conhost_buffer[Text Buffer]
        conhost_renderer[Render Thread]
        conhost_atlas[Text Renderer]

        ConPTY_Translation<-->conhost_impl
        conhost_impl-->conhost_parser
        conhost_parser-->conhost_buffer
        conhost_buffer--->conhost_renderer
        conhost_buffer--ReadBuffer-->conhost_impl
        conhost_renderer-->conhost_atlas
    end

    subgraph wt[Windows Terminal]
        impl[IApiRoutines impl]
        parser[VT parser]
        buffer[Text Buffer]
        renderer[Render Thread]
        atlas[Text Renderer]

        ConPTY_Translation<-->impl
        impl-->parser
        parser-->buffer
        buffer--->renderer
        buffer--ReadBuffer-->impl
        renderer-->atlas
    end
```

----------------------------------------

TITLE: Enter ANSI Mode - VT52 Command
DESCRIPTION: VT52 escape sequence to switch from VT52 mode back to ANSI (VT100) mode. This command is handled in the OutputStateMachineEngine.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_30

LANGUAGE: Terminal Escape Sequence
CODE:
```
ESC <
```

----------------------------------------

TITLE: Proposed Microsoft Terminal Process Hierarchy
DESCRIPTION: Illustrates a potential future multi-process architecture for the Windows Terminal (wt.exe) designed to enhance reliability. It depicts different operational modes (Manager, Frame Host, Tab Host) and how they might interact with console hosts (conhost.exe) and client applications (pwsh.exe, cmd.exe) in a hierarchical structure.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/drafts/#1256 - Tab tearoff.md#_snippet_0

LANGUAGE: Command Prompt
CODE:
```
wt.exe - Manager Mode 
|- wt.exe - Frame Host Mode 
|   |- wt.exe - Tab Host Mode
|   |  |- conhost.exe - ConPTY mode
|   |     |- pwsh.exe - Client application 
|   |- wt.exe - Tab Host Mode
|      |- conhost.exe - ConPTY mode
|         |- cmd.exe - Client application 
|- wt.exe - Frame Host Mode 
    |- wt.exe - Tab Host Mode
       |- conhost.exe - ConPTY mode
          |- pwsh.exe - Client application 
```

----------------------------------------

TITLE: Describe tmux Pane Focus Behavior
DESCRIPTION: Explains how the 'tmux' window manager handles focusing a pane, allowing a target pane to be specified along with a direction to select the final active pane, effectively combining target and directional movement.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#2871 - Pane Navigation/#2871 - Pane Navigation.md#_snippet_3

LANGUAGE: Shell
CODE:
```
Make pane target-pane the active pane ...  If one of -D, -L, -R, or -U is used,
respectively the pane below, to the left, to the right, or above the target pane
is used.
```

----------------------------------------

TITLE: Original KeyBinding Event Definitions (C++/WinRT IDL)
DESCRIPTION: Shows the original delegate-based event definitions and the AppKeyBindings interface before the proposed changes to introduce structured arguments and TypedEventHandler.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1142 - Keybinding Arguments.md#_snippet_2

LANGUAGE: C++/WinRT IDL
CODE:
```
delegate void CopyTextEventArgs();
delegate void NewTabEventArgs();
delegate void NewTabWithProfileEventArgs(Int32 profileIndex);
// ...

[default_interface]
runtimeclass AppKeyBindings : Microsoft.Terminal.Settings.IKeyBindings
{
    event CopyTextEventArgs CopyText;
    event NewTabEventArgs NewTab;
    event NewTabWithProfileEventArgs NewTabWithProfile;
}
```

----------------------------------------

TITLE: Defining Microsoft Terminal Release Schedule with Mermaid
DESCRIPTION: This Mermaid code block defines a Gantt chart visualizing the proposed release schedule for Microsoft Terminal versions 1.14 to 1.18. It details phases like feature development, bug fixing, lockdown, and release milestones with estimated durations and dependencies.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/roadmap-2022.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
gantt
    title Proposed Terminal Releases 1.14-1.18
    dateFormat  YYYY-MM-DD
    axisFormat  %d %b
    section Terminal 1.14
        Lock down & bake        :done, 2022-05-06, 2w
        Release 1.14            :milestone, 2022-05-24
    section Terminal 1.15
        Features                :done, a1, 2022-05-06, 4w
        Bugfix                  :active, a2, after a1  , 1w
        Lock down & bake        :after a2  , 1w
        Release 1.15            :milestone, 2022-06-21, 0
        1.15 becomes Stable     :milestone, after b3, 0
    section Terminal 1.16
        Features                :b1, after a2, 4w
        Bugfix                  :b2, after b1  , 2w
        Lock down & bake        :b3, after b2  , 2w
        Release 1.16            :milestone, after b3, 0
        1.16 becomes Stable     :milestone, after c3, 0
    section Terminal 1.17
        Features                :c1, after b2, 4w
        Bugfix                  :c2, after c1  , 2w
        Lock down & bake        :c3, after c2  , 2w
        Release 1.17            :milestone, after c3, 0
        1.17 becomes Stable     :milestone, after d3, 0
    section Terminal 1.18
        Features                :d1, after c2, 4w
        Bugfix                  :d2, after d1  , 2w
        Lock down & bake        :d3, after d2  , 2w
        Release 1.18            :milestone, after d3, 0
```

----------------------------------------

TITLE: Hooking Up KeyBindings with Lambda (Old)
DESCRIPTION: This snippet illustrates the previous method of hooking up keybinding actions in the App class using a lambda function, passing only the profile index directly to the handler.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#1142 - Keybinding Arguments.md#_snippet_5

LANGUAGE: C++
CODE:
```
    void App::_HookupKeyBindings(TerminalApp::AppKeyBindings bindings) noexcept
    {
        // ...
        bindings.NewTabWithProfile([this](const auto index) { _OpenNewTab({ index }); });
    }
```

----------------------------------------

TITLE: MIT License for PCG Random Number Generation
DESCRIPTION: This snippet contains the MIT License text for the PCG Random Number Generation library. It specifies the permissions and conditions for using and distributing this software.
SOURCE: https://github.com/microsoft/terminal/blob/main/NOTICE.md#_snippet_2

LANGUAGE: text
CODE:
```
Copyright (c) 2014-2017 Melissa O'Neill and PCG Project contributors

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```

----------------------------------------

TITLE: Numeric Keypad '*' - DECKPAM ANSI Mode
DESCRIPTION: Escape sequence generated for the numeric keypad '*' key when DECKPAM is set and the terminal is in ANSI mode. Note: DECKPAM is not currently implemented in ANSI mode.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#976 - VT52 escape sequences.md#_snippet_6

LANGUAGE: Terminal Escape Sequence
CODE:
```
SS3 j
```

----------------------------------------

TITLE: General Unlicense Text
DESCRIPTION: Provides the full text of the Unlicense, a public domain dedication. It allows free use, modification, and distribution without restrictions.
SOURCE: https://github.com/microsoft/terminal/blob/main/NOTICE.md#_snippet_3

LANGUAGE: text
CODE:
```
This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
```

----------------------------------------

TITLE: Check for Control Character Flag in Legacy Output (C++)
DESCRIPTION: This C++ snippet checks if the `C1_CNTRL` flag is set on a character type using the `WI_IsFlagSet` macro. This check was historically part of the 'Far East' specific character processing logic within the legacy `WriteCharsLegacy` function in the Windows Console.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/Niksa.md#_snippet_1

LANGUAGE: C++
CODE:
```
if (WI_IsFlagSet(CharType, C1_CNTRL))
```

----------------------------------------

TITLE: MIT License Text
DESCRIPTION: This snippet provides the full text of the MIT License, which grants broad permissions for use, modification, and distribution, provided the copyright notice and permission notice are included. It also includes a disclaimer of warranties and liability.
SOURCE: https://github.com/microsoft/terminal/blob/main/NOTICE.md#_snippet_7

LANGUAGE: text
CODE:
```
The MIT License

Copyright (c) Microsoft Corporation. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
```

----------------------------------------

TITLE: MIT License for Victor Zverovich Component
DESCRIPTION: This snippet contains the MIT License text for a component developed by Victor Zverovich, used within the project. It grants broad permissions for use, modification, and distribution.
SOURCE: https://github.com/microsoft/terminal/blob/main/NOTICE.md#_snippet_0

LANGUAGE: text
CODE:
```
MIT License

Copyright (c) 2012 - present, Victor Zverovich

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--- Optional exception to the license ---

As an exception, if, as a result of your compiling your source code, portions
of this Software are embedded into a machine-executable object form of such
source code, you may redistribute such embedded portions in such object form
without including the above copyright and permission notices.
```

----------------------------------------

TITLE: Mermaid Gantt Chart for Terminal Releases
DESCRIPTION: This Mermaid code defines a Gantt chart visualizing the proposed release schedule and development phases (features, bugfix, bake time) for Windows Terminal versions 1.18 and 1.19.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/roadmap-2023.md#_snippet_0

LANGUAGE: Mermaid
CODE:
```
gantt
    title Proposed Terminal Releases 1.14-1.18
    dateFormat  YYYY-MM-DD
    axisFormat  %d %b
    section Terminal 1.18
        Lock down & bake        :l18, 2023-05-09  , 2w
        Release 1.18            :milestone, 2023-05-23, 0
        1.18 becomes Stable     :milestone, after l19, 0
    section Terminal 1.19
        Features                :f19, after l18, 10w
        Bugfix                  :b19, after f19  , 4w
        Lock down & bake        :l19, after b19  , 2w
        Release 1.19            :milestone, after l19, 0
```

----------------------------------------

TITLE: Filtering Unique Elements in APL
DESCRIPTION: This APL expression is a common idiom used to extract the unique elements from a vector 'V'. It works by finding the first index of each element in the vector and then using those indices to filter the original vector.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/reference/UTF8-torture-test.txt#_snippet_0

LANGUAGE: APL
CODE:
```
((V⍳V)=⍳⍴V)/V←,V		⌷←⍳→⍴∆∇⊃‾⍎⍕⌈
```

----------------------------------------

TITLE: Oklab Library License (MIT-style)
DESCRIPTION: Provides the full text of the permissive MIT-style license for the Oklab library. It grants broad rights to use, copy, modify, and distribute, requiring inclusion of the copyright and permission notice.
SOURCE: https://github.com/microsoft/terminal/blob/main/NOTICE.md#_snippet_5

LANGUAGE: text
CODE:
```
Copyright (c) 2020 Björn Ottosson
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```

----------------------------------------

TITLE: SearchBoxControl UI/UX Design - Microsoft Terminal
DESCRIPTION: Describes the visual layout and elements of the search box control, including buttons for direction and case sensitivity, the text box, and the rationale for the single-line layout.
SOURCE: https://github.com/microsoft/terminal/blob/main/doc/specs/#605 - Search/spec.md#_snippet_1

LANGUAGE: Documentation
CODE:
```
Above is the `SearchBoxControl` in dark theme and light theme.
  - The two buttons with up/down arrows controls the search direction, Each button will be styled to indicate which search direction is currently selected.
  - The button with a "Aa" icon, if pressed, means that we are searching case-sensitivity.
  - The current style puts all elements - the `X` button, the text box and the search pattern control buttons on one single line. This ensures that the `SearchBoxControl` won't be too high and block terminal text. This is similar with VSCode. Another possible layout style is to put elements in multiple layers. This will occupy more lines, but the search dialog will narrower. Considering that there is not many elements, we do not need multiple layers.
```

----------------------------------------

TITLE: stb Library License (Unlicense)
DESCRIPTION: Provides the full text of the Unlicense for the stb library. It dedicates the software to the public domain, allowing unrestricted use.
SOURCE: https://github.com/microsoft/terminal/blob/main/NOTICE.md#_snippet_4

LANGUAGE: text
CODE:
```
This is free and unencumbered software released into the public domain.
Anyone is free to copy, modify, publish, use, compile, sell, or distribute this
software, either in source code form or as a compiled binary, for any purpose,
commercial or non-commercial, and by any means.
In jurisdictions that recognize copyright laws, the author or authors of this
software dedicate any and all copyright interest in the software to the public
domain. We make this dedication for the benefit of the public at large and to
the detriment of our heirs and successors. We intend this dedication to be an
overt act of relinquishment in perpetuity of all present and future rights to
this software under copyright law.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
```

----------------------------------------

TITLE: MIT License for IntervalTree
DESCRIPTION: This snippet contains the MIT License text for the IntervalTree component by Erik Garrison. It outlines the terms under which the software can be used, copied, and distributed.
SOURCE: https://github.com/microsoft/terminal/blob/main/NOTICE.md#_snippet_1

LANGUAGE: text
CODE:
```
Copyright (c) 2011 Erik Garrison

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```

----------------------------------------

TITLE: ColorBrewer License (Apache 2.0)
DESCRIPTION: Provides the full text of the Apache License, Version 2.0, for the ColorBrewer software and color schemes. It outlines terms for use, distribution, and modification, including requirements for attribution and disclaimer of warranty.
SOURCE: https://github.com/microsoft/terminal/blob/main/NOTICE.md#_snippet_6

LANGUAGE: text
CODE:
```
Apache-Style Software License for ColorBrewer software and ColorBrewer Color Schemes

Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The Pennsylvania State University.

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND, either express or implied. See the License for the
specific language governing permissions and limitations under the License.
```