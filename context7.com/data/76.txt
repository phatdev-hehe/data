TITLE: Running a Bun HTTP Server from CLI
DESCRIPTION: Executes the HTTP server by running the index.ts file directly with Bun, which will transpile TypeScript and start the server on port 3000.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/quickstart.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
$ bun index.ts
Listening on http://localhost:3000 ...
```

----------------------------------------

TITLE: Non-Cryptographic Hashing with Bun.hash
DESCRIPTION: Shows usage of Bun.hash for non-cryptographic hashing using the Wyhash algorithm. It accepts various input types and an optional seed parameter.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/hashing.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
Bun.hash("some data here");
// 11562320457524636935n

const arr = new Uint8Array([1, 2, 3, 4]);

Bun.hash("some data here");
Bun.hash(arr);
Bun.hash(arr.buffer);
Bun.hash(new DataView(arr.buffer));

Bun.hash("some data here", 1234);
// 15724820720172937558n
```

----------------------------------------

TITLE: Generating JUnit XML Test Reports with Bun using Shell Command
DESCRIPTION: Shows how to configure `bun test` to generate a JUnit XML report using the `--reporter=junit` flag and specify the output file path with `--reporter-outfile`. This is useful for integrating test results into CI/CD systems like GitLab that support this format. Standard output remains unaffected.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_6

LANGUAGE: sh
CODE:
```
$ bun test --reporter=junit --reporter-outfile=./bun.xml
```

----------------------------------------

TITLE: Implementing Basic HTTP Server in Bun and Node.js
DESCRIPTION: Comparison of minimal HTTP server implementations that respond with 'Bun!' to all requests. The Bun implementation uses Bun.serve while Node.js uses the http module.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_27

LANGUAGE: typescript
CODE:
```
Bun.serve({
  fetch(req: Request) {
    return new Response("Bun!");
  },
  port: 3000,
});
```

LANGUAGE: typescript
CODE:
```
require("http")
  .createServer((req, res) => res.end("Bun!"))
  .listen(8080);
```

----------------------------------------

TITLE: Basic Redis Operations in Bun
DESCRIPTION: Demonstrates fundamental Redis operations using Bun's native Redis client, including setting and getting keys, incrementing counters, checking key existence, and deleting keys.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/redis.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { redis } from "bun";

// Set a key
await redis.set("greeting", "Hello from Bun!");

// Get a key
const greeting = await redis.get("greeting");
console.log(greeting); // "Hello from Bun!"

// Increment a counter
await redis.set("counter", 0);
await redis.incr("counter");

// Check if a key exists
const exists = await redis.exists("greeting");

// Delete a key
await redis.del("greeting");
```

----------------------------------------

TITLE: Sending Different Message Types (TypeScript)
DESCRIPTION: This snippet showcases the different types of data that can be sent using the `ws.send()` method of a `ServerWebSocket` instance, including strings, ArrayBuffers, and TypedArrays.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/websockets.md#_snippet_3

LANGUAGE: typescript
CODE:
```
ws.send("Hello world"); // string
ws.send(response.arrayBuffer()); // ArrayBuffer
ws.send(new Uint8Array([1, 2, 3])); // TypedArray | DataView
```

----------------------------------------

TITLE: Inheriting stdout from child process to parent in TypeScript
DESCRIPTION: This snippet demonstrates how to pipe the stdout from a child process directly to the parent process's stdout using the 'inherit' option in Bun.spawn(). This allows output to appear directly in the terminal.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/spawn-stdout.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const proc = Bun.spawn(["echo", "hello"], {
  stdout: "inherit",
});
```

----------------------------------------

TITLE: Setting Test Timeout with Bun Test Runner
DESCRIPTION: Shows how to configure test timeout duration using Bun's CLI flag instead of Jest's testTimeout configuration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/migrate-from-jest.md#2025-04-22_snippet_5

LANGUAGE: sh
CODE:
```
$ bun test --timeout 10000
```

----------------------------------------

TITLE: Creating an HTTP Server with Routing in Bun
DESCRIPTION: This snippet demonstrates a complete HTTP server setup using Bun.serve that handles various endpoint types. It includes routes for HTML responses, redirects, file serving, JSON responses, POST request handling for both JSON and form data, and 404 error handling.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/server.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const server = Bun.serve({
  async fetch(req) {
    const path = new URL(req.url).pathname;

    // respond with text/html
    if (path === "/") return new Response("Welcome to Bun!");

    // redirect
    if (path === "/abc") return Response.redirect("/source", 301);

    // send back a file (in this case, *this* file)
    if (path === "/source") return new Response(Bun.file(import.meta.path));

    // respond with JSON
    if (path === "/api") return Response.json({ some: "buns", for: "you" });

    // receive JSON data to a POST request
    if (req.method === "POST" && path === "/api/post") {
      const data = await req.json();
      console.log("Received JSON:", data);
      return Response.json({ success: true, data });
    }

    // receive POST data from a form
    if (req.method === "POST" && path === "/form") {
      const data = await req.formData();
      console.log(data.get("someField"));
      return new Response("Success");
    }

    // 404s
    return new Response("Page not found", { status: 404 });
  },
});

console.log(`Listening on ${server.url}`);

```

----------------------------------------

TITLE: Setting WebSocket Context Data with Cookies in Bun
DESCRIPTION: This snippet shows how to read cookies from the incoming request, use them to retrieve user data, and then set the user data as contextual data on the WebSocket connection.  It assumes the existence of functions `parseCookies` and `getUserFromToken`. The example demonstrates how to access user-specific data within the WebSocket `message` handler for tasks like saving messages to a database.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/websocket/context.md#_snippet_1

LANGUAGE: typescript
CODE:
```
type WebSocketData = {
  createdAt: number;
  token: string;
  userId: string;
};

// TypeScript: specify the type of `data`
Bun.serve<WebSocketData>({
  async fetch(req, server) {
    // use a library to parse cookies
    const cookies = parseCookies(req.headers.get("Cookie"));
    const token = cookies["X-Token"];
    const user = await getUserFromToken(token);

    const upgraded = server.upgrade(req, {
      data: {
        createdAt: Date.now(),
        token: cookies["X-Token"],
        userId: user.id,
      },
    });

    if (upgraded) return undefined;
  },
  websocket: {
    async message(ws, message) {
      // save the message to a database
      await saveMessageToDatabase({
        message: String(message),
        userId: ws.data.userId,
      });
    },
  },
});
```

----------------------------------------

TITLE: Implementing Rate Limiting with Bun Redis Client in TypeScript
DESCRIPTION: This function imposes a request rate limit per IP by storing counters in Redis using Bun's client. It increments a request counter and applies a time window for the rate limit, setting an expiry on first access. The function uses the async Redis API (e.g., incr and expire), requiring a properly configured Redis client instance as a prerequisite. Inputs include the client IP address, maximum allowed requests (default 100), and window duration in seconds (default 3600); the output is an object indicating whether the limit was reached and how many requests remain. Designed for stateless server-side rate limiting in scalable applications, it assumes atomic Redis operations and may require distributed locking or advanced guards for highly concurrent scenarios.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/redis.md#2025-04-22_snippet_14

LANGUAGE: TypeScript
CODE:
```
async function rateLimit(ip, limit = 100, windowSecs = 3600) {
  const key = `ratelimit:${ip}`;

  // Increment counter
  const count = await redis.incr(key);

  // Set expiry if this is the first request in window
  if (count === 1) {
    await redis.expire(key, windowSecs);
  }

  // Check if limit exceeded
  return {
    limited: count > limit,
    remaining: Math.max(0, limit - count),
  };
}
```

----------------------------------------

TITLE: Hot Reloading Server Handlers in Bun
DESCRIPTION: Shows how to update a server's handlers without restarting using the server.reload() method. This allows changing route handlers and the main fetch handler dynamically during development.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_17

LANGUAGE: typescript
CODE:
```
const server = Bun.serve({
  routes: {
    "/api/version": Response.json({ version: "v1" }),
  },
  fetch(req) {
    return new Response("v1");
  },
});

// Update to new handler
server.reload({
  routes: {
    "/api/version": Response.json({ version: "v2" }),
  },
  fetch(req) {
    return new Response("v2");
  },
});
```

----------------------------------------

TITLE: WebSocket Event Handlers (TypeScript)
DESCRIPTION: This snippet shows the available WebSocket event handlers that can be defined within the `websocket` parameter of `Bun.serve`. These handlers include `message`, `open`, `close`, and `drain`, each corresponding to a WebSocket event.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/websockets.md#_snippet_1

LANGUAGE: typescript
CODE:
```
Bun.serve({
  fetch(req, server) {}, // upgrade logic
  websocket: {
    message(ws, message) {}, // a message is received
    open(ws) {}, // a socket is opened
    close(ws, code, message) {}, // a socket is closed
    drain(ws) {}, // the socket is ready to receive more data
  },
});
```

----------------------------------------

TITLE: Implementing a Pub-Sub WebSocket Chat Server in TypeScript with Bun
DESCRIPTION: This code creates a WebSocket server using Bun's native API. It handles user connections, subscribes them to a chat channel, and broadcasts messages to all subscribers. The server manages user join/leave events and message relaying.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/websocket/pubsub.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const server = Bun.serve<{ username: string }>({
  fetch(req, server) {
    const cookies = req.headers.get("cookie");
    const username = getUsernameFromCookies(cookies);
    const success = server.upgrade(req, { data: { username } });
    if (success) return undefined;

    return new Response("Hello world");
  },
  websocket: {
    open(ws) {
      const msg = `${ws.data.username} has entered the chat`;
      ws.subscribe("the-group-chat");
      server.publish("the-group-chat", msg);
    },
    message(ws, message) {
      // the server re-broadcasts incoming messages to everyone
      server.publish("the-group-chat", `${ws.data.username}: ${message}`);
    },
    close(ws) {
      const msg = `${ws.data.username} has left the chat`;
      server.publish("the-group-chat", msg);
      ws.unsubscribe("the-group-chat");
    },
  },
});

console.log(`Listening on ${server.hostname}:${server.port}`);
```

----------------------------------------

TITLE: Implementing WebSocket Server with Bun.serve
DESCRIPTION: Creates a WebSocket server that handles connection upgrades and message processing. The server responds to WebSocket messages with an echo response and serves 'Hello world!' for regular HTTP requests. Uses TypeScript with a generic type parameter for authentication token.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/websocket/simple.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const server = Bun.serve<{ authToken: string }>({
  fetch(req, server) {
    const success = server.upgrade(req);
    if (success) {
      // Bun automatically returns a 101 Switching Protocols
      // if the upgrade succeeds
      return undefined;
    }

    // handle HTTP request normally
    return new Response("Hello world!");
  },
  websocket: {
    // this is called when a message is received
    async message(ws, message) {
      console.log(`Received ${message}`);
      // send back a message
      ws.send(`You said: ${message}`);
    },
  },
});

console.log(`Listening on ${server.hostname}:${server.port}`);
```

----------------------------------------

TITLE: Complex Environment Variable Expansion for Database Connections
DESCRIPTION: Example of using environment variable expansion to construct a database connection string from individual components.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_10

LANGUAGE: txt
CODE:
```
DB_USER=postgres
DB_PASSWORD=secret
DB_HOST=localhost
DB_PORT=5432
DB_URL=postgres://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME
```

----------------------------------------

TITLE: Initializing Drizzle Database with Neon Serverless Driver (TypeScript)
DESCRIPTION: Illustrates connecting Neon Postgres via the Neon serverless driver and wrapping it with Drizzle ORM in a Bun environment. Requires @neondatabase/serverless and drizzle-orm as dependencies, and expects Bun to load environment variables. Exports a configured db instance for reuse.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-drizzle.md#2025-04-22_snippet_2

LANGUAGE: ts
CODE:
```
import { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\n\n// Bun automatically loads the DATABASE_URL from .env.local\n// Refer to: https://bun.sh/docs/runtime/env for more information\nconst sql = neon(process.env.DATABASE_URL!);\n\nexport const db = drizzle(sql);
```

----------------------------------------

TITLE: Password Hashing and Verification in Bun
DESCRIPTION: Demonstrates how to use Bun.password.hash to create a password hash and Bun.password.verify to check if a password matches a hash. This snippet uses the default Argon2 algorithm.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/hashing.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const password = "super-secure-pa$$word";

const hash = await Bun.password.hash(password);
// => $argon2id$v=19$m=65536,t=2,p=1$tFq+9AVr1bfPxQdh6E8DQRhEXg/M/SqYCNu6gVdRRNs$GzJ8PuBi+K+BVojzPfS5mjnC8OpLGtv8KJqF99eP6a4

const isMatch = await Bun.password.verify(password, hash);
// => true
```

----------------------------------------

TITLE: Redis Caching Example in Bun
DESCRIPTION: Demonstrates a caching use case using Bun's Redis client, including fetching data from cache, storing data in cache with expiration, and falling back to database queries.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/redis.md#2025-04-22_snippet_13

LANGUAGE: typescript
CODE:
```
async function getUserWithCache(userId) {
  const cacheKey = `user:${userId}`;

  // Try to get from cache first
  const cachedUser = await redis.get(cacheKey);
  if (cachedUser) {
    return JSON.parse(cachedUser);
  }

  // Not in cache, fetch from database
  const user = await database.getUser(userId);

  // Store in cache for 1 hour
  await redis.set(cacheKey, JSON.stringify(user));
  await redis.expire(cacheKey, 3600);

  return user;
}
```

----------------------------------------

TITLE: Creating a Basic HTTP Server with Bun in TypeScript
DESCRIPTION: This snippet demonstrates how to use Bun.serve() to create a simple HTTP server that listens on port 3000 and responds to all requests with a welcome message. The server is configured with a port and a fetch handler function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/simple.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const server = Bun.serve({
  port: 3000,
  fetch(request) {
    return new Response("Welcome to Bun!");
  },
});

console.log(`Listening on ${server.url}`);
```

----------------------------------------

TITLE: Echoing Messages with ServerWebSocket (TypeScript)
DESCRIPTION: This example demonstrates how to echo back incoming messages to the client using the `ws.send()` method within the `message` event handler. The `ServerWebSocket` instance is passed as the first argument to the handler.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/websockets.md#_snippet_2

LANGUAGE: typescript
CODE:
```
Bun.serve({
  fetch(req, server) {}, // upgrade logic
  websocket: {
    message(ws, message) {
      ws.send(message); // echo back the message
    },
  },
});
```

----------------------------------------

TITLE: Starting a Basic HTTP Server with Bun.serve
DESCRIPTION: A comprehensive example showing how to set up an HTTP server using Bun.serve with various routing approaches including static routes, dynamic routes with parameters, per-HTTP method handlers, wildcards, redirects, and serving static files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
Bun.serve({
  // `routes` requires Bun v1.2.3+
  routes: {
    // Static routes
    "/api/status": new Response("OK"),

    // Dynamic routes
    "/users/:id": req => {
      return new Response(`Hello User ${req.params.id}!`);
    },

    // Per-HTTP method handlers
    "/api/posts": {
      GET: () => new Response("List posts"),
      POST: async req => {
        const body = await req.json();
        return Response.json({ created: true, ...body });
      },
    },

    // Wildcard route for all routes that start with "/api/" and aren't otherwise matched
    "/api/*": Response.json({ message: "Not found" }, { status: 404 }),

    // Redirect from /blog/hello to /blog/hello/world
    "/blog/hello": Response.redirect("/blog/hello/world"),

    // Serve a file by buffering it in memory
    "/favicon.ico": new Response(await Bun.file("./favicon.ico").bytes(), {
      headers: {
        "Content-Type": "image/x-icon",
      },
    }),
  },

  // (optional) fallback for unmatched routes:
  // Required if Bun's version < 1.2.3
  fetch(req) {
    return new Response("Not Found", { status: 404 });
  },
});
```

----------------------------------------

TITLE: Configuring tsconfig.json for Bun Projects
DESCRIPTION: This JSON configuration sets up recommended compiler options for a Bun project, enabling features like top-level await, extensioned or extensionless imports, and JSX support.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/typescript.md#2025-04-22_snippet_1

LANGUAGE: jsonc
CODE:
```
{
  "compilerOptions": {
    // Environment setup & latest features
    "lib": ["ESNext"],
    "target": "ESNext",
    "module": "ESNext",
    "moduleDetection": "force",
    "jsx": "react-jsx",
    "allowJs": true,

    // Bundler mode
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,

    // Best practices
    "strict": true,
    "skipLibCheck": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,

    // Some stricter flags (disabled by default)
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noPropertyAccessFromIndexSignature": false,
  },
}
```

----------------------------------------

TITLE: Replacing Jest Commands with Bun Test
DESCRIPTION: Demonstrates how to replace Jest testing commands with Bun's test runner command.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/migrate-from-jest.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
- $ npx jest
- $ yarn test
+ $ bun test
```

----------------------------------------

TITLE: Specifying SSL/TLS Modes via Connection Strings in Bun SQL Client - TypeScript
DESCRIPTION: Demonstrates initializing the `bun:sql` client using PostgreSQL connection strings where the SSL/TLS mode is specified via the `sslmode` query parameter (e.g., `postgres://.../?sslmode=prefer` or `postgres://.../?sslmode=verify-full`). This provides an alternative to object-based configuration for setting connection security.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_21

LANGUAGE: typescript
CODE:
```
```ts
// Using prefer mode
const sql = new SQL("postgres://user:password@localhost/mydb?sslmode=prefer");

// Using verify-full mode
const sql = new SQL(
  "postgres://user:password@localhost/mydb?sslmode=verify-full",
);
```
```

----------------------------------------

TITLE: Returning Promises in Bun.serve Route Handlers
DESCRIPTION: Example showing how to return a Promise<Response> directly from a route handler, useful for operations that need to be wrapped in a Promise like setTimeout.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { sql, serve } from "bun";

serve({
  routes: {
    "/api/version": () => {
      return new Promise(resolve => {
        setTimeout(async () => {
          const [version] = await sql`SELECT version()`;
          resolve(Response.json(version));
        }, 100);
      });
    },
  },
});
```

----------------------------------------

TITLE: Implementing a Worker Thread in TypeScript
DESCRIPTION: Example of a worker implementation that receives messages from the main thread and responds back. Includes TypeScript declaration to prevent errors.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/workers.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// prevents TS errors
declare var self: Worker;

self.onmessage = (event: MessageEvent) => {
  console.log(event.data);
  postMessage("world");
};
```

----------------------------------------

TITLE: Hot Route Reloading with server.reload()
DESCRIPTION: Example showing how to update routes at runtime without restarting the server, allowing for zero-downtime deployments of new route configurations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
const server = Bun.serve({
  routes: {
    "/api/version": () => Response.json({ version: "1.0.0" }),
  },
});

// Deploy new routes without downtime
server.reload({
  routes: {
    "/api/version": () => Response.json({ version: "2.0.0" }),
  },
});
```

----------------------------------------

TITLE: Seeding the Database with Sample Data using Drizzle ORM (TypeScript)
DESCRIPTION: Populates the `movies` table with sample data using Drizzle's `insert` method. It imports the `db` instance from `./db.ts` and the `schema` definitions from `./schema.ts`. An array of movie objects is provided to the `values` method to insert multiple rows in a single operation. A confirmation message is logged upon completion. Depends on `db.ts`, `schema.ts`, and the `movies` table existing in the database.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/drizzle.md#2025-04-22_snippet_9

LANGUAGE: ts
CODE:
```
#seed.ts
import { db } from "./db";
import * as schema from "./schema";

await db.insert(schema.movies).values([
  {
    title: "The Matrix",
    releaseYear: 1999,
  },
  {
    title: "The Matrix Reloaded",
    releaseYear: 2003,
  },
  {
    title: "The Matrix Revolutions",
    releaseYear: 2003,
  },
]);

console.log(`Seeding complete.`);
```

----------------------------------------

TITLE: Configuring Bun S3Client for MinIO - TypeScript
DESCRIPTION: This snippet illustrates connecting Bun's S3Client to a MinIO server by providing MinIO's endpoint and credentials. Change 'endpoint' to match your MinIO's server URL; do not use 'localhost' in production. Requires the 'bun' module and correct access credentials and bucket name.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_15

LANGUAGE: typescript
CODE:
```
import { S3Client } from \"bun\";

const minio = new S3Client({
  accessKeyId: \"access-key\",
  secretAccessKey: \"secret-key\",
  bucket: \"my-bucket\",

  // Make sure to use the correct endpoint URL
  // It might not be localhost in production!
  endpoint: \"http://localhost:9000\",
});
```

----------------------------------------

TITLE: Attaching Contextual Data to WebSocket (TypeScript)
DESCRIPTION: This snippet shows how to attach contextual data to a new WebSocket connection during the upgrade process using the `data` option in `server.upgrade()`. This data can then be accessed within the WebSocket handlers via the `ws.data` property.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/websockets.md#_snippet_5

LANGUAGE: typescript
CODE:
```
type WebSocketData = {
  createdAt: number;
  channelId: string;
  authToken: string;
};

// TypeScript: specify the type of `data`
Bun.serve<WebSocketData>({
  fetch(req, server) {
    const cookies = new Bun.CookieMap(req.headers.get("cookie")!);

    server.upgrade(req, {
      // this object must conform to WebSocketData
      data: {
        createdAt: Date.now(),
        channelId: new URL(req.url).searchParams.get("channelId"),
        authToken: cookies.get("X-Token"),
      },
    });

    return undefined;
  },
  websocket: {
    // handler called when a message is received
    async message(ws, message) {
      const user = getUserFromToken(ws.data.authToken);

      await saveMessageToDatabase({
        channel: ws.data.channelId,
        message: String(message),
        userId: user.id,
      });
    },
  },
});
```

----------------------------------------

TITLE: Configuring Advanced WebSocket Options in Bun Server
DESCRIPTION: Demonstrates the full range of WebSocket configuration options available in Bun's server, including message size limits, backpressure handling, compression, ping/pong frames, and publish settings.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_26

LANGUAGE: typescript
CODE:
```
Bun.serve({
  websocket: {
    // Maximum message size (in bytes)
    maxPayloadLength: 64 * 1024,

    // Backpressure limit before messages are dropped
    backpressureLimit: 1024 * 1024,

    // Close connection if backpressure limit is hit
    closeOnBackpressureLimit: true,

    // Handler called when backpressure is relieved
    drain(ws) {
      console.log("Backpressure relieved");
    },

    // Enable per-message deflate compression
    perMessageDeflate: {
      compress: true,
      decompress: true,
    },

    // Send ping frames to keep connection alive
    sendPings: true,

    // Handlers for ping/pong frames
    ping(ws, data) {
      console.log("Received ping");
    },
    pong(ws, data) {
      console.log("Received pong");
    },

    // Whether server receives its own published messages
    publishToSelf: false,
  },
});
```

----------------------------------------

TITLE: Setting Request Timeout with AbortSignal in TypeScript
DESCRIPTION: Demonstrates how to set a timeout for a fetch request using AbortSignal.timeout, which will automatically abort the request after the specified time.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
const response = await fetch("http://example.com", {
  signal: AbortSignal.timeout(1000),
});
```

----------------------------------------

TITLE: Filtering Workspace Scripts
DESCRIPTION: Command for filtering and running scripts across multiple workspaces using glob patterns.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/from-npm-install-to-bun-install.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
$ bun --filter 'lib-*' my-script
# instead of:
# npm run --workspace lib-foo --workspace lib-bar my-script
```

----------------------------------------

TITLE: Hot Reloading Static Routes with server.reload()
DESCRIPTION: Demonstrates how to update static routes without restarting the server using server.reload(). This allows for dynamic content updates while the server continues running.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
const server = Bun.serve({
  static: {
    "/api/time": new Response(new Date().toISOString()),
  },

  fetch(req) {
    return new Response("404!");
  },
});

// Update the time every second.
setInterval(() => {
  server.reload({
    static: {
      "/api/time": new Response(new Date().toISOString()),
    },

    fetch(req) {
      return new Response("404!");
    },
  });
}, 1000);
```

----------------------------------------

TITLE: Reading a File and Creating an HTTP Response in Bun
DESCRIPTION: This snippet demonstrates how to read a file from disk using Bun.file() and create an HTTP response from it. The BunFile instance can be passed directly to the Response constructor.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/stream-file.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const path = "/path/to/file.txt";
const file = Bun.file(path);
const resp = new Response(file);
```

----------------------------------------

TITLE: Declaring Package Binaries in package.json for bunx (JSONC)
DESCRIPTION: Shows how to declare a binary executable in an npm package's package.json under the 'bin' field, enabling bunx and other tools to discover and execute it. Requires a valid Node.js project structure. The 'bin' field maps the CLI name ('my-cli') to the script file location ('dist/index.js'). Input is the configuration JSON; output is discovery by bunx/npx/yarn dlx.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bunx.md#2025-04-22_snippet_1

LANGUAGE: jsonc
CODE:
```
{
  // ... other fields
  "name": "my-cli",
  "bin": {
    "my-cli": "dist/index.js"
  }
}
```

----------------------------------------

TITLE: Creating Vite Project with Bun
DESCRIPTION: Initializes a new Vite project using Bun create command, selecting React with TypeScript + SWC template
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/vite.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ bun create vite my-app
✔ Select a framework: › React
✔ Select a variant: › TypeScript + SWC
Scaffolding project in /path/to/my-app...
```

----------------------------------------

TITLE: Installing TypeScript Definitions for Bun
DESCRIPTION: This command installs the TypeScript definitions for Bun's built-in APIs as a development dependency.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/typescript.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun add -d @types/bun # dev dependency
```

----------------------------------------

TITLE: Calling FFI Function with TypedArray Pointer (TypeScript)
DESCRIPTION: Presents a full FFI function call in Bun, showing how to load a dynamic library and call a native function (encode_png) with a TypedArray passed as a pointer. Uses dlopen and FFIType from 'bun:ffi'. Key concepts include symbol mapping, TypedArray-filling, and parameter passing. Inputs are the pixel buffer and dimensions; output is a pointer to encoded data.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/ffi.md#2025-04-22_snippet_14

LANGUAGE: typescript
CODE:
```
import { dlopen, FFIType } from "bun:ffi";

const {
  symbols: { encode_png },
} = dlopen(myLibraryPath, {
  encode_png: {
    // FFIType's can be specified as strings too
    args: ["ptr", "u32", "u32"],
    returns: FFIType.ptr,
  },
});

const pixels = new Uint8ClampedArray(128 * 128 * 4);
pixels.fill(254);
pixels.subarray(0, 32 * 32 * 2).fill(0);

const out = encode_png(
  // pixels will be passed as a pointer
  pixels,

  128,
  128,
);

```

----------------------------------------

TITLE: Decoding ArrayBuffer to String using TextDecoder in TypeScript
DESCRIPTION: This snippet demonstrates how to convert an ArrayBuffer to a string using the standard TextDecoder API in a Bun environment. It first creates an ArrayBuffer, then instantiates a TextDecoder, and finally uses the `decode` method to perform the conversion. This relies on Bun's implementation of the Web-standard TextDecoder API.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/arraybuffer-to-string.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
const buf = new ArrayBuffer(64);
const decoder = new TextDecoder();
const str = decoder.decode(buf);
```

----------------------------------------

TITLE: Monitoring Server Activity with Built-in Counters
DESCRIPTION: Shows how to monitor server activity using the pendingRequests and pendingWebSockets properties. These provide real-time counts of active HTTP requests and WebSocket connections.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_23

LANGUAGE: typescript
CODE:
```
const server = Bun.serve({
  fetch(req, server) {
    return new Response(
      `Active requests: ${server.pendingRequests}\n` +
        `Active WebSockets: ${server.pendingWebSockets}`,
    );
  },
});
```

----------------------------------------

TITLE: Creating an HTTP Server with Bun.serve in TypeScript
DESCRIPTION: This snippet demonstrates how to create a simple HTTP server using Bun's native 'Bun.serve' API. It defines a fetch handler that responds to all requests with a 'Success!' message.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bun-apis.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
Bun.serve({
  fetch(req: Request) {
    return new Response("Success!");
  },
});
```

----------------------------------------

TITLE: Getting Current File Path with import.meta in Bun TypeScript
DESCRIPTION: Shows how to use import.meta.path to get the absolute path of the current module file in Bun. This utility is part of Bun's module-specific utilities provided through the import.meta object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/import-meta-path.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import.meta.path; // => "/a/b/c.ts"
```

----------------------------------------

TITLE: Per-HTTP Method Routing in Bun.serve
DESCRIPTION: Implementation of method-specific handlers for a single route, allowing different logic to be executed based on the HTTP method (GET, POST, PUT, DELETE, etc.) of the incoming request.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
Bun.serve({
  routes: {
    "/api/posts": {
      // Different handlers per method
      GET: () => new Response("List posts"),
      POST: async req => {
        const post = await req.json();
        return Response.json({ id: crypto.randomUUID(), ...post });
      },
      PUT: async req => {
        const updates = await req.json();
        return Response.json({ updated: true, ...updates });
      },
      DELETE: () => new Response(null, { status: 204 }),
    },
  },
});
```

----------------------------------------

TITLE: WebSocket Pub/Sub Implementation (TypeScript)
DESCRIPTION: This snippet showcases Bun's native publish-subscribe API using `ws.subscribe()`, `ws.unsubscribe()`, and `server.publish()`. It implements a simple group chat where users can join, send messages, and leave the chat. The messages are broadcasted to all other subscribers of the topic.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/websockets.md#_snippet_7

LANGUAGE: typescript
CODE:
```
const server = Bun.serve<{ username: string }>({ 
  fetch(req, server) {
    const url = new URL(req.url);
    if (url.pathname === "/chat") {
      console.log(`upgrade!`);
      const username = getUsernameFromReq(req);
      const success = server.upgrade(req, { data: { username } });
      return success
        ? undefined
        : new Response("WebSocket upgrade error", { status: 400 });
    }

    return new Response("Hello world");
  },
  websocket: {
    open(ws) {
      const msg = `${ws.data.username} has entered the chat`;
      ws.subscribe("the-group-chat");
      server.publish("the-group-chat", msg);
    },
    message(ws, message) {
      // this is a group chat
      // so the server re-broadcasts incoming message to everyone
      server.publish("the-group-chat", `${ws.data.username}: ${message}`);
    },
    close(ws) {
      const msg = `${ws.data.username} has left the chat`;
      ws.unsubscribe("the-group-chat");
      server.publish("the-group-chat", msg);
    },
  },
});

console.log(`Listening on ${server.hostname}:${server.port}`);
```

----------------------------------------

TITLE: Creating a TCP Server with Bun.listen()
DESCRIPTION: Creates a TCP server that listens on a specified hostname and port. The socket handlers manage connection events including data reception, connection establishment, closure, drain events, and errors.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/tcp.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
Bun.listen({
  hostname: "localhost",
  port: 8080,
  socket: {
    data(socket, data) {}, // message received from client
    open(socket) {}, // socket opened
    close(socket, error) {}, // socket closed
    drain(socket) {}, // socket ready for more data
    error(socket, error) {}, // error handler
  },
});
```

----------------------------------------

TITLE: Installing Dependencies with Package Filtering using Bun CLI (Bash)
DESCRIPTION: These bash commands demonstrate how to selectively install dependencies in a monorepo using the --filter flag with bun install. Patterns can be used to include or exclude specific workspaces or directories. Key parameters include patterns like '!pkg-c' (exclude), './packages/*' (include all in packages dir), and '!./' (exclude root). Outputs are dependency installations for targeted packages only. Requires Bun to be installed in the project and a monorepo setup with workspaces.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/filter.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# Install dependencies for all workspaces except `pkg-c`
$ bun install --filter '!pkg-c'

# Install dependencies for packages in `./packages` (`pkg-a`, `pkg-b`, `pkg-c`)
$ bun install --filter './packages/*'

# Save as above, but exclude the root package.json
$ bun install --filter --filter '!./' --filter './packages/*'

```

----------------------------------------

TITLE: Writing Different Data Types to ArrayBufferSink
DESCRIPTION: Demonstrates writing different data types to ArrayBufferSink, including strings, typed arrays, and ArrayBuffer. The sink handles conversion appropriately.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/streams.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
sink.write("h");
sink.write(new Uint8Array([101, 108]));
sink.write(Buffer.from("lo").buffer);

sink.end();
```

----------------------------------------

TITLE: Stopping a Bun HTTP Server
DESCRIPTION: Shows how to gracefully stop a Bun server using the server.stop() method. By default, it waits for in-flight requests to complete, but can be forced to immediately terminate all connections by passing true.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_15

LANGUAGE: typescript
CODE:
```
const server = Bun.serve({
  fetch(req) {
    return new Response("Hello!");
  },
});

// Gracefully stop the server (waits for in-flight requests)
await server.stop();

// Force stop and close all active connections
await server.stop(true);
```

----------------------------------------

TITLE: Basic S3 Operations with Bun
DESCRIPTION: Demonstrates basic S3 operations including downloading, uploading, presigning URLs, and deleting files. The example shows how to use Bun's S3 API with environment variables for credentials.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { s3, write, S3Client } from "bun";

// Bun.s3 reads environment variables for credentials
// file() returns a lazy reference to a file on S3
const metadata = s3.file("123.json");

// Download from S3 as JSON
const data = await metadata.json();

// Upload to S3
await write(metadata, JSON.stringify({ name: "John", age: 30 }));

// Presign a URL (synchronous - no network request needed)
const url = metadata.presign({
  acl: "public-read",
  expiresIn: 60 * 60 * 24, // 1 day
});

// Delete the file
await metadata.delete();
```

----------------------------------------

TITLE: Sending a GET Request with fetch in Bun
DESCRIPTION: Demonstrates how to send a simple GET request to a URL using fetch and extract the HTML response text.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/fetch.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const response = await fetch("https://bun.sh");
const html = await response.text(); // HTML string
```

----------------------------------------

TITLE: Server-Side Rendering a React Component with Bun HTTP Server in TypeScript
DESCRIPTION: This TypeScript server snippet uses Bun and React 18+ to server-side render (SSR) a React component in response to HTTP requests. It uses 'renderToReadableStream' from 'react-dom/server' to generate an HTML stream from JSX, serves via Bun's HTTP API on port 4000, and sets the appropriate content-type header. Dependencies are Bun, React 18.3+, and react-dom/server. The handler expects GET requests and streams an HTML document as output. This SSR setup leverages Bun's fast ReadableStream implementation and is suited for scalable, high-performance server-rendered React apps.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/ecosystem/react.md#2025-04-22_snippet_3

LANGUAGE: TypeScript
CODE:
```
import {renderToReadableStream} from 'react-dom/server';

function Component(props: {message: string}) {
  return (
    <body>
      <h1 style={{color: 'red'}}>{props.message}</h1>
    </body>
  );
}

Bun.serve({
  port: 4000,
  async fetch() {
    const stream = await renderToReadableStream(
      <Component message="Hello from server!" />
    );
    return new Response(stream, {
      headers: {'Content-Type': 'text/html'},
    });
  },
});
```

----------------------------------------

TITLE: Basic Password Hashing with Argon2id in Bun.js
DESCRIPTION: Demonstrates the basic usage of Bun.password.hash() function using the default Argon2id algorithm. Returns a secure hash of the provided password string.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/hash-a-password.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const password = "super-secure-pa$$word";

const hash = await Bun.password.hash(password);
// => $argon2id$v=19$m=65536,t=2,p=1$tFq+9AVr1bfPxQdh6E8DQRhEXg/M/...
```

----------------------------------------

TITLE: Initializing and Querying SQLite Database in Bun
DESCRIPTION: This snippet demonstrates how to import the SQLite module, create an in-memory database, and execute a simple query. It showcases the basic usage of Bun's SQLite integration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Database } from "bun:sqlite";

const db = new Database(":memory:");
const query = db.query("select 'Hello world' as message;");
query.get(); // => { message: "Hello world" }
```

----------------------------------------

TITLE: Buffer Operations: Creating and Manipulating Binary Data Buffers (Bun/Node.js, JavaScript/TypeScript)
DESCRIPTION: This snippet demonstrates usage of the Buffer class—a Node.js API available in Bun—for working with binary data. It shows how to create a Buffer from a string, access its length and individual byte values, write data directly via writeUInt8, and convert the buffer to a string. This API is a subclass of Uint8Array and supports additional binary and text encoding/decoding operations. Requires Bun or Node.js environment with Buffer support. Input may be a string or various data sources; output is a Buffer instance whose bytes can be read/written and converted to formatted text.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_15

LANGUAGE: TypeScript
CODE:
```
const buf = Buffer.from("hello world");
// => Buffer(11) [ 104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100 ]

buf.length; // => 11
buf[0]; // => 104, ascii for 'h'
buf.writeUInt8(72, 0); // => ascii for 'H'

console.log(buf.toString());
// => Hello world
```

----------------------------------------

TITLE: Handling File Upload with FormData in Bun
DESCRIPTION: Extended version of the server code that handles the form submission at the '/action' endpoint. It extracts the name and profile picture from the FormData object and saves the uploaded file to disk using Bun.write().
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/file-uploads.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const server = Bun.serve({
  port: 4000,
  async fetch(req) {
    const url = new URL(req.url);

    // return index.html for root path
    if (url.pathname === "/")
      return new Response(Bun.file("index.html"), {
        headers: {
          "Content-Type": "text/html",
        },
      });

   // parse formdata at /action
   if (url.pathname === '/action') {
     const formdata = await req.formData();
     const name = formdata.get('name');
     const profilePicture = formdata.get('profilePicture');
     if (!profilePicture) throw new Error('Must upload a profile picture.');
     // write profilePicture to disk
     await Bun.write('profilePicture.png', profilePicture);
     return new Response("Success");
   }

    return new Response("Not Found", { status: 404 });
  },
});
```

----------------------------------------

TITLE: Executing Basic Transactions with Bun SQL Client in TypeScript
DESCRIPTION: Illustrates performing atomic database operations using `sql.begin`. An async callback function receives a transaction-scoped `sql` instance (`tx`). All queries executed with `tx` within the callback run in a single transaction, which automatically commits if the callback completes successfully or rolls back if any error is thrown.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_16

LANGUAGE: typescript
CODE:
```
```ts
await sql.begin(async tx => {
  // All queries in this function run in a transaction
  await tx`INSERT INTO users (name) VALUES (${ "Alice" })`;
  await tx`UPDATE accounts SET balance = balance - 100 WHERE user_id = 1`;

  // Transaction automatically commits if no errors are thrown
  // Rolls back if any error occurs
});
```
```

----------------------------------------

TITLE: Bun Built-in Modules
DESCRIPTION: Built-in modules providing additional functionality for SQLite database operations, Foreign Function Interface (FFI), DNS operations, and testing capabilities.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/index.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { Database } from "bun:sqlite"  // SQLite operations
import { dlopen } from "bun:ffi"      // FFI functionality
import * as dns from "bun:dns"        // DNS operations
import { test } from "bun:test"       // Testing utilities
```

----------------------------------------

TITLE: Sending a POST Request with JSON Payload in Bun
DESCRIPTION: Shows how to send a POST request with a JSON payload to an API endpoint, including setting the proper Content-Type header and parsing the JSON response.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/fetch.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const response = await fetch("https://bun.sh/api", {
  method: "POST",
  body: JSON.stringify({ message: "Hello from Bun!" }),
  headers: { "Content-Type": "application/json" },
});

const body = await response.json();
```

----------------------------------------

TITLE: Handling Dynamic Route Parameters in FileSystemRouter
DESCRIPTION: Example demonstrating how the router automatically parses URL parameters from dynamic routes (paths with [param] syntax) and includes them in the params property of the match result.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-system-router.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
router.match("/blog/my-cool-post");

// =>
{
  filePath: "/Users/colinmcd94/Documents/bun/fun/pages/blog/[slug].tsx",
  kind: "dynamic",
  name: "/blog/[slug]",
  pathname: "/blog/my-cool-post",
  src: "https://mydomain.com/_next/static/pages/blog/[slug].tsx",
  params: {
    slug: "my-cool-post"
  }
}
```

----------------------------------------

TITLE: Using Bun's Bundler with JavaScript API
DESCRIPTION: This snippet demonstrates how to use Bun's bundler via the JavaScript API. It specifies entry points and an output directory for the bundled files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './build',
});
```

----------------------------------------

TITLE: Managing Session Storage with Bun Redis Client in TypeScript
DESCRIPTION: These functions implement user session creation and retrieval by storing session data in Redis using Bun's TypeScript client. createSession generates a unique session ID, persists user ID and associated data as a Redis hash, and sets a 24-hour expiry. getSession checks for existence and reconstructs the session object by extracting and parsing the hash fields. These snippets require the Bun Redis client, the global crypto object for UUID generation, and JSON-serializable session data. Inputs include the user ID and session data upon creation or a session ID for retrieval; outputs are the new session ID or a session object, or null if expired or missing. The design supports low-latency session persistence, but scalability and security (e.g., session hijacking protections) must be considered for real-world deployments.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/redis.md#2025-04-22_snippet_15

LANGUAGE: TypeScript
CODE:
```
async function createSession(userId, data) {
  const sessionId = crypto.randomUUID();
  const key = `session:${sessionId}`;

  // Store session with expiration
  await redis.hmset(key, [
    "userId",
    userId.toString(),
    "created",
    Date.now().toString(),
    "data",
    JSON.stringify(data),
  ]);
  await redis.expire(key, 86400); // 24 hours

  return sessionId;
}

async function getSession(sessionId) {
  const key = `session:${sessionId}`;

  // Get session data
  const exists = await redis.exists(key);
  if (!exists) return null;

  const [userId, created, data] = await redis.hmget(key, [
    "userId",
    "created",
    "data",
  ]);

  return {
    userId: Number(userId),
    created: Number(created),
    data: JSON.parse(data),
  };
}
```

----------------------------------------

TITLE: Using Static Responses in Bun.serve Routes
DESCRIPTION: Example of using static Response objects directly in routes for optimized, zero-allocation dispatch. Ideal for health checks, redirects, and fixed API responses for improved performance.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
Bun.serve({
  routes: {
    // Health checks
    "/health": new Response("OK"),
    "/ready": new Response("Ready", {
      headers: {
        // Pass custom headers
        "X-Ready": "1",
      },
    }),

    // Redirects
    "/blog": Response.redirect("https://bun.sh/blog"),

    // API responses
    "/api/config": Response.json({
      version: "1.0.0",
      env: "production",
    }),
  },
});
```

----------------------------------------

TITLE: Data Insertion Operations in TypeScript
DESCRIPTION: Shows different methods of inserting data into PostgreSQL using Bun's SQL client, including single row insertion and object-based insertion with automatic field mapping.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { sql } from "bun";

// Basic insert with direct values
const [user] = await sql`
  INSERT INTO users (name, email) 
  VALUES (${name}, ${email})
  RETURNING *
`;

// Using object helper for cleaner syntax
const userData = {
  name: "Alice",
  email: "alice@example.com",
};

const [newUser] = await sql`
  INSERT INTO users ${sql(userData)}
  RETURNING *
`;
```

----------------------------------------

TITLE: Accessing Environment Variables in Bun with TypeScript
DESCRIPTION: Demonstrates how to access environment variables in a Bun application using either Bun.env or process.env. Both methods allow access to the same environment variables that are set in the system or .env files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/set-env.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
Bun.env.API_TOKEN; // => "secret"
process.env.API_TOKEN; // => "secret"
```

----------------------------------------

TITLE: Configuring Bun S3Client for supabase Storage - TypeScript
DESCRIPTION: Shows how to set up Bun's S3Client for supabase storage, specifying the required endpoint (with account ID and '/storage/v1/s3/storage' path), credentials, region, and bucket. Ensure S3 protocol access is enabled in your supabase dashboard and use the informed region value. Requires Bun's S3Client and correct parameters provided by supabase.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_16

LANGUAGE: typescript
CODE:
```
import { S3Client } from \"bun\";

const supabase = new S3Client({
  accessKeyId: \"access-key\",
  secretAccessKey: \"secret-key\",
  bucket: \"my-bucket\",
  region: \"us-west-1\",
  endpoint: \"https://<account-id>.supabase.co/storage/v1/s3/storage\",
});
```

----------------------------------------

TITLE: Reading Output from a Child Process in Bun
DESCRIPTION: Demonstrates how to read the stdout of a spawned child process. This example shows accessing the process stdout as a ReadableStream and converting it to text using the Response API, allowing you to capture the output of the executed command.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/spawn.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const proc = Bun.spawn(["echo", "hello"]);

const output = await new Response(proc.stdout).text();
output; // => "hello"
```

----------------------------------------

TITLE: Configuring Multiple Organization Scopes with Different Authentication Methods in bunfig.toml
DESCRIPTION: This snippet shows different ways to configure private registry access for npm organization scopes using the bunfig.toml configuration file. It demonstrates three authentication methods: direct URL with embedded credentials, separate username/password fields with environment variable support, and token-based authentication.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/registry-scope.md#2025-04-22_snippet_0

LANGUAGE: toml
CODE:
```
[install.scopes]
# as a string
"@myorg1" = "https://username:password@registry.myorg.com/"

# as an object with username/password
# you can reference environment variables
"@myorg2" = {
  username = "myusername",
  password = "$npm_pass",
  url = "https://registry.myorg.com/"
}

# as an object with token
"@myorg3" = { token = "$npm_token", url = "https://registry.myorg.com/" }

```

----------------------------------------

TITLE: Sending Messages with postMessage in Worker Threads
DESCRIPTION: Examples of sending messages between main thread and worker thread using the postMessage API, which uses the HTML Structured Clone Algorithm for object serialization.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/workers.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
// On the worker thread, `postMessage` is automatically "routed" to the parent thread.
postMessage({ hello: "world" });

// On the main thread
worker.postMessage({ hello: "world" });
```

----------------------------------------

TITLE: Defining Non-npm Dependencies in package.json
DESCRIPTION: Example `package.json` demonstrating how Bun supports installing dependencies directly from various sources beyond the npm registry. This includes Git repositories (using different protocols like HTTPS, SSH), GitHub shorthand, remotely hosted tarballs, and aliasing packages using `npm:`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/install.md#2025-04-22_snippet_14

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "dayjs": "git+https://github.com/iamkun/dayjs.git",
    "lodash": "git+ssh://github.com/lodash/lodash.git#4.17.21",
    "moment": "git@github.com:moment/moment.git",
    "zod": "github:colinhacks/zod",
    "react": "https://registry.npmjs.org/react/-/react-18.2.0.tgz",
    "bun-types": "npm:@types/bun"
  }
}
```

----------------------------------------

TITLE: Configuring Default Coverage Reporting in Bun
DESCRIPTION: This snippet shows how to configure Bun to always enable coverage reporting by default. The configuration is added to the bunfig.toml file, setting the coverage option to true under the [test] section.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/coverage.md#2025-04-22_snippet_1

LANGUAGE: toml
CODE:
```
[test]
coverage = true # always enable coverage
```

----------------------------------------

TITLE: Extended Fetch Options in Bun TypeScript
DESCRIPTION: Demonstrates Bun-specific extensions to the fetch API options, including controls for automatic decompression, connection reuse, and debug logging.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_16

LANGUAGE: typescript
CODE:
```
const response = await fetch("http://example.com", {
  // Control automatic response decompression (default: true)
  decompress: true,

  // Disable connection reuse for this request
  keepalive: false,

  // Debug logging level
  verbose: true, // or "curl" for more detailed output
});
```

----------------------------------------

TITLE: Backend Server Setup with Bun
DESCRIPTION: Example backend code that serves an HTML file as a route and handles API requests through the fetch handler.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/fullstack.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import dashboard from "../public/dashboard.html";
import { serve } from "bun";

serve({
  routes: {
    "/": dashboard,
  },

  async fetch(req) {
    // ...api requests
    return new Response("hello world");
  },
});
```

----------------------------------------

TITLE: Converting ReadableStream to ArrayBuffer in TypeScript using Bun
DESCRIPTION: This snippet demonstrates how to use Bun's readableStreamToArrayBuffer utility function to convert a ReadableStream into an ArrayBuffer. This is useful for when you need to work with the binary data from a stream in memory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/streams/to-arraybuffer.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const stream = new ReadableStream();
const buf = await Bun.readableStreamToArrayBuffer(stream);
```

----------------------------------------

TITLE: Redis String Operations in Bun
DESCRIPTION: Demonstrates various string operations using Bun's Redis client, including setting and getting keys, deleting keys, checking existence, and managing key expiration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/redis.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
// Set a key
await redis.set("user:1:name", "Alice");

// Get a key
const name = await redis.get("user:1:name");

// Delete a key
await redis.del("user:1:name");

// Check if a key exists
const exists = await redis.exists("user:1:name");

// Set expiration (in seconds)
await redis.set("session:123", "active");
await redis.expire("session:123", 3600); // expires in 1 hour

// Get time to live (in seconds)
const ttl = await redis.ttl("session:123");
```

----------------------------------------

TITLE: Reading Command Output as Blob in Bun Shell
DESCRIPTION: Demonstrates how to read the output of a command as a Blob using the .blob() method in Bun Shell. This snippet shows executing an echo command and converting its output to a Blob.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_18

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

const result = await $`echo "Hello World!"`.blob();

console.log(result); // Blob(13) { size: 13, type: "text/plain" }
```

----------------------------------------

TITLE: Enabling Lifecycle Scripts for Trusted Dependencies
DESCRIPTION: Shows how to configure `package.json` to allow Bun to execute potentially risky lifecycle scripts (like `postinstall`) for specific dependencies. Add the package name to the `trustedDependencies` array to enable its scripts.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/install.md#2025-04-22_snippet_4

LANGUAGE: json-diff
CODE:
```
  {
    "name": "my-app",
    "version": "1.0.0",
+   "trustedDependencies": ["my-trusted-package"]
  }
```

----------------------------------------

TITLE: Dynamic Table References in TypeScript
DESCRIPTION: Demonstrates safe dynamic table name references using the sql helper function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
// Safely reference tables dynamically
await sql`SELECT * FROM ${sql("users")}`;

// With schema qualification
await sql`SELECT * FROM ${sql("public.users")}`;
```

----------------------------------------

TITLE: Initializing a Bun Project via CLI - Bash
DESCRIPTION: This Bash snippet demonstrates running the interactive bun init command to scaffold a new Bun project. It guides users through naming the package, selecting the entry point, and automatically generates files like package.json, index.ts, tsconfig.json, .gitignore, and README.md. After responding to the prompts or using the -y option to auto-accept defaults, Bun sets up sensible defaults and performs an initial dependency installation using bun install. Dependencies: Bun installed globally. Parameters: optional prompts for package name and entry point, -y flag for non-interactive mode. Input: via terminal prompts or CLI flags. Output: Project files and node modules installed in the current directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/init.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
```bash\n$ bun init\nbun init helps you get started with a minimal project and tries to\nguess sensible defaults. Press ^C anytime to quit.\n\npackage name (quickstart):\nentry point (index.ts):\n\nDone! A package.json file was saved in the current directory.\n + index.ts\n + .gitignore\n + tsconfig.json (for editor auto-complete)\n + README.md\n\nTo get started, run:\n  bun run index.ts\n```
```

----------------------------------------

TITLE: Creating Executables with Bun Build
DESCRIPTION: Creates a standalone executable containing both the application code and the Bun runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_66

LANGUAGE: bash
CODE:
```
$ bun build ./cli.tsx --outfile mycli --compile
$ ./mycli
```

----------------------------------------

TITLE: Listing All Dependencies with Bun
DESCRIPTION: Lists all installed dependencies, including direct and transitive (nth-order) dependencies, using the `--all` flag. This provides a complete view of the entire dependency tree installed in `node_modules`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/pm.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
$ bun pm ls --all
/path/to/project node_modules (135)
├── @eslint-community/eslint-utils@4.4.0
├── @eslint-community/regexpp@4.5.0
├── @eslint/eslintrc@2.0.2
├── @eslint/js@8.38.0
├── @nodelib/fs.scandir@2.1.5
├── @nodelib/fs.stat@2.0.5
├── @nodelib/fs.walk@1.2.8
├── acorn@8.8.2
├── acorn-jsx@5.3.2
├── ajv@6.12.6
├── ansi-regex@5.0.1
├── ...
```

----------------------------------------

TITLE: HTTP Server with Hot Reload State Persistence
DESCRIPTION: A TypeScript HTTP server example that maintains a counter across hot reloads, showing how state persists when using Bun's --hot mode.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/hot.md#2025-04-22_snippet_8

LANGUAGE: ts
CODE:
```
globalThis.count ??= 0;
globalThis.count++;

Bun.serve({
  fetch(req: Request) {
    return new Response(`Reloaded ${globalThis.count} times`);
  },
  port: 3000,
});
```

----------------------------------------

TITLE: Initializing Express HTTP Server on Bun - TypeScript
DESCRIPTION: This TypeScript snippet sets up a basic Express web server that listens on port 8080 and responds to root ("/") GET requests with 'Hello World!'. It demonstrates Bun's compatibility with Express out of the box. Dependencies include the 'express' package; ensure it is installed. The server accepts HTTP requests on localhost:8080 and logs a message when started—there are no authentication or routing constraints, making this suitable for basic demonstrations or as a starting template.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/ecosystem/express.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
import express from "express";

const app = express();
const port = 8080;

app.get("/", (req, res) => {
  res.send("Hello World!");
});

app.listen(port, () => {
  console.log(`Listening on port ${port}...`);
});
```

----------------------------------------

TITLE: Defining a Bun Macro for Fetching and Parsing Meta Tags in TypeScript
DESCRIPTION: This TypeScript async function `extractMetaTags` acts as a Bun macro. It accepts a URL string, uses the built-in `fetch` API to retrieve the content of the URL, and then employs `HTMLRewriter` to parse the HTML response. It specifically looks for the `<title>` tag and `<meta>` tags (with `name`, `property`, or `itemprop` attributes) to extract their content. The function returns an object containing the extracted title and meta tag key-value pairs. This function is intended to be executed at bundle-time when imported as a macro.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/macros.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
export async function extractMetaTags(url: string) {
  const response = await fetch(url);
  const meta = {
    title: "",
  };
  new HTMLRewriter()
    .on("title", {
      text(element) {
        meta.title += element.text;
      },
    })
    .on("meta", {
      element(element) {
        const name =
          element.getAttribute("name") || element.getAttribute("property") || element.getAttribute("itemprop");

        if (name) meta[name] = element.getAttribute("content");
      },
    })
    .transform(response);

  return meta;
}
```

----------------------------------------

TITLE: Using Relative Paths with Bun.file()
DESCRIPTION: This snippet shows how to use relative paths with Bun.file(). Relative paths are resolved relative to the project root, which is the nearest directory containing a package.json file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/read-file/string.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const path = "./file.txt";
const file = Bun.file(path);
```

----------------------------------------

TITLE: Encoding and Decoding Base64 Strings in Bun with btoa and atob
DESCRIPTION: This example demonstrates how to encode a string to base64 using the btoa function and then decode it back using the atob function in Bun. These are Web-standard functions implemented in the Bun runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/base64.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const data = "hello world";
const encoded = btoa(data); // => "aGVsbG8gd29ybGQ="
const decoded = atob(encoded); // => "hello world"
```

----------------------------------------

TITLE: Basic HTTP Request with Fetch in TypeScript
DESCRIPTION: Demonstrates how to send a basic HTTP request using fetch and process the response. It shows how to check the response status and extract the response body as text.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const response = await fetch("http://example.com");

console.log(response.status); // => 200

const text = await response.text(); // or response.json(), response.formData(), etc.
```

----------------------------------------

TITLE: Converting Uint8Array to String using TextDecoder in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to use the Web-standard `TextDecoder` API, available in Bun, to convert a `Uint8Array` (representing binary data, in this case, ASCII codes for "hello") into a JavaScript string. It initializes a `Uint8Array`, creates a `TextDecoder` instance, and then uses the `decode` method to perform the conversion. This relies on the built-in TextDecoder API.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/typedarray-to-string.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
const arr = new Uint8Array([104, 101, 108, 108, 111]);
const decoder = new TextDecoder();
const str = decoder.decode(arr);
// => "hello"
```

----------------------------------------

TITLE: Mapping Query Results to a Class with Bun SQLite (TypeScript)
DESCRIPTION: Uses the .as(Class) method from Bun's SQLite wrapper to map query results directly into instances of a custom class in TypeScript. This attaches class methods and getters to result objects, but skips constructor logic and private fields. Parameters include the database query and a class definition, with expected output being TypeScript instances with both properties and class-defined methods or getters.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_13

LANGUAGE: TypeScript
CODE:
```
class Movie {
  title: string;
  year: number;

  get isMarvel() {
    return this.title.includes("Marvel");
  }
}

const query = db.query("SELECT title, year FROM movies").as(Movie);
const movies = query.all();
const first = query.get();
console.log(movies[0].isMarvel); // => true
console.log(first.isMarvel); // => true

```

----------------------------------------

TITLE: Setting up a Fullstack App with Bun.serve() Routes
DESCRIPTION: A complete example of setting up a fullstack application using Bun.serve() with HTML routes for the frontend and API endpoints for the backend. Shows how to bundle HTML files and handle API requests with SQL integration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/fullstack.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { sql, serve } from "bun";
import dashboard from "./dashboard.html";
import homepage from "./index.html";

const server = serve({
  routes: {
    // ** HTML imports **
    // Bundle & route index.html to "/". This uses HTMLRewriter to scan the HTML for `<script>` and `<link>` tags, run's Bun's JavaScript & CSS bundler on them, transpiles any TypeScript, JSX, and TSX, downlevels CSS with Bun's CSS parser and serves the result.
    "/": homepage,
    // Bundle & route dashboard.html to "/dashboard"
    "/dashboard": dashboard,

    // ** API endpoints ** (Bun v1.2.3+ required)
    "/api/users": {
      async GET(req) {
        const users = await sql`SELECT * FROM users`;
        return Response.json(users);
      },
      async POST(req) {
        const { name, email } = await req.json();
        const [user] =
          await sql`INSERT INTO users (name, email) VALUES (${name}, ${email})`;
        return Response.json(user);
      },
    },
    "/api/users/:id": async req => {
      const { id } = req.params;
      const [user] = await sql`SELECT * FROM users WHERE id = ${id}`;
      return Response.json(user);
    },
  },

  // Enable development mode for:
  // - Detailed error messages
  // - Hot reloading (Bun v1.2.3+ required)
  development: true,

  // Prior to v1.2.3, the `fetch` option was used to handle all API requests. It is now optional.
  // async fetch(req) {
  //   // Return 404 for unmatched routes
  //   return new Response("Not Found", { status: 404 });
  // },
});

console.log(`Listening on ${server.url}`);
```

----------------------------------------

TITLE: Defining a Database Table Schema with Drizzle ORM (TypeScript)
DESCRIPTION: Defines a database table named `movies` using Drizzle ORM's schema definition syntax for SQLite. It imports necessary functions (`sqliteTable`, `text`, `integer`) from `drizzle-orm/sqlite-core` and declares the table structure with columns for `id` (primary key, integer), `title` (text, mapped to SQL column `name`), and `releaseYear` (integer, mapped to SQL column `release_year`). The `movies` schema object is exported for use in migrations and queries.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/drizzle.md#2025-04-22_snippet_4

LANGUAGE: ts
CODE:
```
#schema.ts
import { sqliteTable, text, integer } from "drizzle-orm/sqlite-core";

export const movies = sqliteTable("movies", {
  id: integer("id").primaryKey(),
  title: text("name"),
  releaseYear: integer("release_year"),
});
```

----------------------------------------

TITLE: Basic Command Execution in Bun Shell
DESCRIPTION: Demonstrates how to execute a simple shell command using Bun Shell's $ template literal tag. The example shows running the 'echo' command.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

const response = await fetch("https://example.com");

// Use Response as stdin.
await $`cat < ${response} | wc -c`; // 1256
```

----------------------------------------

TITLE: Redis Numeric Operations in Bun
DESCRIPTION: Shows how to perform numeric operations like incrementing and decrementing counters using Bun's Redis client.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/redis.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
// Set initial value
await redis.set("counter", "0");

// Increment by 1
await redis.incr("counter");

// Decrement by 1
await redis.decr("counter");
```

----------------------------------------

TITLE: Publishing with Access Flag using Bun CLI - Shell
DESCRIPTION: Shows how to publish a package with a specified access level (public or restricted) using the `--access` flag in the Bun CLI. Unscoped packages can only be published as public; attempting otherwise will result in an error. Requires a valid npm package, Bun CLI environment, and proper permissions. The command expects the access level as a parameter and publishes the package with the requested scope.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/publish.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
$ bun publish --access public
```

----------------------------------------

TITLE: Redis URL Formats in Bun
DESCRIPTION: Demonstrates various URL formats supported by Bun's Redis client, including standard Redis URLs, authentication, database selection, TLS connections, and Unix socket connections.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/redis.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
// Standard Redis URL
new RedisClient("redis://localhost:6379");
new RedisClient("redis://localhost:6379");

// With authentication
new RedisClient("redis://username:password@localhost:6379");

// With database number
new RedisClient("redis://localhost:6379/0");

// TLS connections
new RedisClient("rediss://localhost:6379");
new RedisClient("rediss://localhost:6379");
new RedisClient("redis+tls://localhost:6379");
new RedisClient("redis+tls://localhost:6379");

// Unix socket connections
new RedisClient("redis+unix:///path/to/socket");
new RedisClient("redis+unix:///path/to/socket");

// TLS over Unix socket
new RedisClient("redis+tls+unix:///path/to/socket");
new RedisClient("redis+tls+unix:///path/to/socket");
```

----------------------------------------

TITLE: Rendering React component to HTML stream in Bun
DESCRIPTION: Code demonstrating how to render a React component to a ReadableStream for server-side rendering. It imports the renderToReadableStream function from react-dom/server and creates a basic component with a message prop.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/ssr-react.md#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
import { renderToReadableStream } from "react-dom/server";

function Component(props: { message: string }) {
  return (
    <body>
      <h1>{props.message}</h1>
    </body>
  );
}

const stream = await renderToReadableStream(
  <Component message="Hello from server!" />,
);
```

----------------------------------------

TITLE: Creating and Executing Transactions in Bun SQLite (TypeScript)
DESCRIPTION: Shows how to bundle multiple SQL operations atomically using db.transaction() in Bun. The resulting function must be called to execute the transaction, which commits if successful or rolls back on error. Referenced example inserts multiple records into a table inside a single transaction.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_24

LANGUAGE: TypeScript
CODE:
```
const insertCat = db.prepare("INSERT INTO cats (name) VALUES ($name)");
const insertCats = db.transaction(cats => {
  for (const cat of cats) insertCat.run(cat);
});

```

LANGUAGE: TypeScript
CODE:
```
const insert = db.prepare("INSERT INTO cats (name) VALUES ($name)");
const insertCats = db.transaction(cats => {
  for (const cat of cats) insert.run(cat);
  return cats.length;
});

const count = insertCats([
  { $name: "Keanu" },
  { $name: "Salem" },
  { $name: "Crookshanks" },
]);

console.log(`Inserted ${count} cats`);

```

----------------------------------------

TITLE: Setting Azure Artifacts Token in .env File for Bun Install
DESCRIPTION: This snippet demonstrates how to create a .env file to store the Azure Personal Access Token for use with Bun install. The token is assigned to the NPM_PASSWORD environment variable.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/azure-artifacts.md#2025-04-22_snippet_1

LANGUAGE: txt
CODE:
```
NPM_PASSWORD=<paste token here>
```

----------------------------------------

TITLE: Verifying Passwords in Bun.js
DESCRIPTION: Shows how to verify a password against its hash using Bun.password.verify(). The function automatically detects the algorithm and parameters from the hash string.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/hash-a-password.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const password = "super-secure-pa$$word";
const hash = await Bun.password.hash(password);

const isMatch = await Bun.password.verify(password, hash);
// => true
```

----------------------------------------

TITLE: Reading File Contents to Uint8Array using Bun.file() in TypeScript
DESCRIPTION: This snippet demonstrates how to read a file's contents into a Uint8Array using Bun's file API. It creates a BunFile instance from a file path and then uses the .bytes() method to asynchronously read the file contents into a Uint8Array.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/read-file/uint8array.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const path = "/path/to/package.json";
const file = Bun.file(path);

const byteArray = await file.bytes();

byteArray[0]; // first byteArray
byteArray.length; // length of byteArray
```

----------------------------------------

TITLE: Creating an SSR HTTP server with Bun.serve() and React
DESCRIPTION: Implementation of a simple HTTP server using Bun.serve() that renders React components server-side. The server returns the rendered HTML stream with appropriate content type headers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/ssr-react.md#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
Bun.serve({
  async fetch() {
    const stream = await renderToReadableStream(
      <Component message="Hello from server!" />,
    );
    return new Response(stream, {
      headers: { "Content-Type": "text/html" },
    });
  },
});
```

----------------------------------------

TITLE: Writing and Uploading Files to S3
DESCRIPTION: Shows various methods to write or upload files to S3, including writing strings, Buffers, Response objects, and streaming. Also demonstrates setting content types and using Bun.write.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
// Write a string (replacing the file)
await s3file.write("Hello World!");

// Write a Buffer (replacing the file)
await s3file.write(Buffer.from("Hello World!"));

// Write a Response (replacing the file)
await s3file.write(new Response("Hello World!"));

// Write with content type
await s3file.write(JSON.stringify({ name: "John", age: 30 }), {
  type: "application/json",
});

// Write using a writer (streaming)
const writer = s3file.writer({ type: "application/json" });
writer.write("Hello");
writer.write(" World!");
await writer.end();

// Write using Bun.write
await Bun.write(s3file, "Hello World!");
```

----------------------------------------

TITLE: Converting Uint8Array to Blob in TypeScript using Bun
DESCRIPTION: This snippet shows how to create a Blob from a Uint8Array, enabling binary data manipulation in TypeScript environments such as Bun. It demonstrates instantiating a Uint8Array containing ASCII character codes, constructing a Blob from it, then asynchronously extracting the text content to verify correct conversion. No external dependencies are required, but an environment that supports the Blob API, such as Bun or a modern browser, is needed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/typedarray-to-blob.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
const arr = new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0x6f]);
const blob = new Blob([arr]);
console.log(await blob.text());
// => "hello"
```

----------------------------------------

TITLE: Implementing a Basic Static File Server with Bun.serve()
DESCRIPTION: This snippet demonstrates a complete static file server implementation using Bun.serve(). It extracts the pathname from the request URL, reads the corresponding file, and returns it as a response.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/stream-file.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// static file server
Bun.serve({
  async fetch(req) {
    const path = new URL(req.url).pathname;
    const file = Bun.file(path);
    return new Response(file);
  },
});
```

----------------------------------------

TITLE: Defining Test Suites and Cases in TypeScript
DESCRIPTION: Shows how to structure tests using describe blocks and individual test cases with assertions using the expect API.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/run-tests.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
import { test, expect, describe } from "bun:test";

describe("math", () => {
  test("add", () => {
    expect(2 + 2).toEqual(4);
  });

  test("multiply", () => {
    expect(2 * 2).toEqual(4);
  });
});
```

----------------------------------------

TITLE: Browser WebSocket Client Connection (TypeScript)
DESCRIPTION: This snippet demonstrates how to connect to a WebSocket server from a browser using the `WebSocket` API. It creates a new WebSocket instance and listens for incoming messages.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/websockets.md#_snippet_6

LANGUAGE: typescript
CODE:
```
const socket = new WebSocket("ws://localhost:3000/chat");

socket.addEventListener("message", event => {
  console.log(event.data);
})
```

----------------------------------------

TITLE: Running a Sample SQL Query with Neon Driver in Bun - TypeScript
DESCRIPTION: This TypeScript snippet imports the Neon serverless driver, loads the database connection URL from .env.local, and performs a SQL query to retrieve the Postgres server version. Dependencies include the @neondatabase/serverless package, Bun runtime, and a properly configured .env.local file. The main parameter is process.env.DATABASE_URL, and the expected output is the server version string printed to the console. This example demonstrates SQL-over-HTTP usage and requires Bun's support for top-level await.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-serverless-postgres.md#2025-04-22_snippet_2

LANGUAGE: ts
CODE:
```
import { neon } from "@neondatabase/serverless";\n\n// Bun automatically loads the DATABASE_URL from .env.local\n// Refer to: https://bun.sh/docs/runtime/env for more information\nconst sql = neon(process.env.DATABASE_URL);\n\nconst rows = await sql`SELECT version()`;\n\nconsole.log(rows[0].version);
```

----------------------------------------

TITLE: Basic Plugin Structure in TypeScript
DESCRIPTION: Demonstrates the basic structure of a Bun plugin with name and setup function properties.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/plugins.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { plugin, type BunPlugin } from "bun";

const myPlugin: BunPlugin = {
  name: "Custom loader",
  setup(build) {
    // implementation
  },
};

plugin(myPlugin);
```

----------------------------------------

TITLE: Updating Snapshots with Bun CLI
DESCRIPTION: Example of updating existing snapshots using the --update-snapshots flag. This regenerates the snapshot files based on the current test results.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/snapshot.md#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
$ bun test --update-snapshots
bun test v$BUN_LATEST_VERSION (9c68abdb)

test/snap.test.ts:
✓ snapshot [0.86ms]

 1 pass
 0 fail
 snapshots: +1 added  # the snapshot was regenerated
 1 expect() calls
Ran 1 tests across 1 files. [102.00ms]
```

----------------------------------------

TITLE: Listing Available Package.json Scripts with Bun Run
DESCRIPTION: Shows that executing `bun run` without any arguments will list all the scripts defined within the `scripts` section of the project's `package.json` file. It displays the script name and the associated command.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/run.md#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
$ bun run
quickstart scripts:

 bun run clean
   rm -rf dist && echo 'Done.'

 bun run dev
   bun server.ts

2 scripts
```

----------------------------------------

TITLE: Initializing and Using FileSystemRouter for Exact Route Matching
DESCRIPTION: Example of creating a new FileSystemRouter instance with Next.js style configuration and matching an exact route ("/"). The router returns the file path, route kind, name, pathname, and asset source URL.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-system-router.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
const router = new Bun.FileSystemRouter({
  style: "nextjs",
  dir: "./pages",
  origin: "https://mydomain.com",
  assetPrefix: "_next/static/"
});
router.match("/");

// =>
{
  filePath: "/path/to/pages/index.tsx",
  kind: "exact",
  name: "/",
  pathname: "/",
  src: "https://mydomain.com/_next/static/pages/index.tsx"
}
```

----------------------------------------

TITLE: CommonJS Module Import Example
DESCRIPTION: Shows how to use require() to import a module in CommonJS format.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_5

LANGUAGE: ts
CODE:
```
const { hello } = require("./hello");

hello();
```

----------------------------------------

TITLE: Converting Pointer to ArrayBuffer in Bun (TypeScript)
DESCRIPTION: Shows how to convert a pointer value back to an ArrayBuffer using toArrayBuffer from 'bun:ffi'. Allows specifying byteOffset and byteLength for precise memory reads. Needs the pointer value, offset, and length; returns a TypedArray backed by the dereferenced ArrayBuffer. Null-termination behavior applies if length is omitted.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/ffi.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
import { ptr, toArrayBuffer } from "bun:ffi";
let myTypedArray = new Uint8Array(32);
const myPtr = ptr(myTypedArray);

// toArrayBuffer accepts a `byteOffset` and `byteLength`
// if `byteLength` is not provided, it is assumed to be a null-terminated pointer
myTypedArray = new Uint8Array(toArrayBuffer(myPtr, 0, 32), 0, 32);

```

----------------------------------------

TITLE: Initializing WebSocket Client
DESCRIPTION: This code snippet demonstrates how to create a WebSocket client that connects to a WebSocket server using the `ws://` protocol in Bun. It creates a new `WebSocket` object, establishing a connection to the specified URL.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/websockets.md#_snippet_13

LANGUAGE: typescript
CODE:
```
const socket = new WebSocket("ws://localhost:3000");
```

----------------------------------------

TITLE: Working with BuildArtifact Objects
DESCRIPTION: Example showing how to access and work with build outputs, demonstrating how to extract content from build artifacts.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_61

LANGUAGE: typescript
CODE:
```
const build = await Bun.build({
  /* */
});

for (const output of build.outputs) {
  await output.arrayBuffer(); // => ArrayBuffer
  await output.bytes(); // => Uint8Array
  await output.text(); // string
}
```

----------------------------------------

TITLE: Running Bun Tests with Coverage Reporting
DESCRIPTION: This snippet demonstrates how to run Bun tests with the --coverage flag to generate a code coverage report. The report shows the percentage of functions and lines executed, as well as uncovered line numbers for each file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/coverage.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun test --coverage

test.test.ts:
✓ math > add [0.71ms]
✓ math > multiply [0.03ms]
✓ random [0.13ms]
-------------|---------|---------|-------------------
File         | % Funcs | % Lines | Uncovered Line #s
-------------|---------|---------|-------------------
All files    |   66.67 |   77.78 |
 math.ts     |   50.00 |   66.67 |
 random.ts   |   50.00 |   66.67 |
-------------|---------|---------|-------------------

 3 pass
 0 fail
 3 expect() calls
```

----------------------------------------

TITLE: Composing Classes Across Separate CSS Module Files - CSS
DESCRIPTION: This set of snippets demonstrates how to compose a class in one CSS module from a class in another module using the 'composes' property with the 'from' keyword. The first file provides a reusable background style, while the second composes it into a new button style. Dependencies: Bun with CSS modules support. Input: at least two CSS module files; output: composed class with merged, non-conflicting rules across files. Limitation: Behavior is undefined if properties conflict between composed classes.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css_modules.md#2025-04-22_snippet_7

LANGUAGE: css
CODE:
```
/* background.module.css */
.background {
  background-color: blue;
}

/* styles.module.css */
.button {
  composes: background from "./background.module.css";
  color: red;
}

```

----------------------------------------

TITLE: Initializing a Next.js App with a Template using Bun (Shell)
DESCRIPTION: This command demonstrates initializing a Next.js project using a specific starter template provided by Next.js examples. The `--example` flag followed by the template name (e.g., `with-supabase`) instructs `create-next-app` (run via Bun) to use that template.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/nextjs.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
$ bun create next-app --example with-supabase
✔ What is your project named? … my-app
...
```

----------------------------------------

TITLE: Generating Presigned URLs with S3Client.presign
DESCRIPTION: Demonstrates how to generate presigned URLs for S3 objects with expiration times using the S3Client.presign static method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_26

LANGUAGE: typescript
CODE:
```
import { S3Client } from "bun";

const credentials = {
  accessKeyId: "your-access-key",
  secretAccessKey: "your-secret-key",
  bucket: "my-bucket",
  // endpoint: "https://s3.us-east-1.amazonaws.com",
  // endpoint: "https://<account-id>.r2.cloudflarestorage.com", // Cloudflare R2
};

const url = S3Client.presign("my-file.txt", {
  ...credentials,
  expiresIn: 3600,
});
```

----------------------------------------

TITLE: Resolving paths relative to current file in TypeScript
DESCRIPTION: Shows how to resolve paths relative to the directory containing the current file using import.meta.dir with Bun.resolveSync().
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_29

LANGUAGE: typescript
CODE:
```
Bun.resolveSync("./foo.ts", import.meta.dir);
```

----------------------------------------

TITLE: Correctly Placing Bun Flags with Bun Run
DESCRIPTION: Provides examples demonstrating the correct (`bun --watch run dev`) and incorrect (`bun run dev --watch`) placement for Bun-specific flags like `--watch` when running package.json scripts. Flags intended for Bun itself must precede the `run` keyword and the script name.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/run.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
$ bun --watch run dev # ✔️ do this
$ bun run dev --watch # ❌ don't do this
```

----------------------------------------

TITLE: Counting WebSocket Topic Subscribers
DESCRIPTION: Demonstrates how to get the count of subscribers for a WebSocket topic using the server.subscriberCount() method. This is useful for tracking how many clients are subscribed to specific channels.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_24

LANGUAGE: typescript
CODE:
```
const server = Bun.serve({
  fetch(req, server) {
    const chatUsers = server.subscriberCount("chat");
    return new Response(`${chatUsers} users in chat`);
  },
  websocket: {
    message(ws) {
      ws.subscribe("chat");
    },
  },
});
```

----------------------------------------

TITLE: Forcing Script Execution with Bun using --bun Flag
DESCRIPTION: Shows how to use the `--bun` flag with `bun run` to force a script (like the `vite` CLI, which typically uses Node.js via its shebang) to be executed with the Bun runtime instead. This overrides the default behavior dictated by the shebang.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/run.md#2025-04-22_snippet_12

LANGUAGE: bash
CODE:
```
$ bun run --bun vite
```

----------------------------------------

TITLE: Using export default Syntax for Bun HTTP Server in TypeScript
DESCRIPTION: Demonstrates the alternative export default syntax for creating a Bun HTTP server instead of explicitly calling Bun.serve. The server responds with 'Bun!' for all requests and satisfies the Serve type.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_12

LANGUAGE: typescript
CODE:
```
import {type Serve} from "bun";

export default {
  fetch(req) {
    return new Response("Bun!");
  },
} satisfies Serve;
```

----------------------------------------

TITLE: Managing Distributed Transactions (2PC) with Bun SQL Client in TypeScript
DESCRIPTION: Illustrates how to handle distributed transactions using `sql.beginDistributed`, `sql.commitDistributed`, and `sql.rollbackDistributed`. `beginDistributed` starts a transaction with a unique identifier, allowing it to be committed or rolled back later, potentially across different sessions or processes, supporting protocols like Two-Phase Commit (2PC).
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_19

LANGUAGE: typescript
CODE:
```
```ts
// Begin a distributed transaction
await sql.beginDistributed("tx1", async tx => {
  await tx`INSERT INTO users (name) VALUES (${ "Alice" })`;
});

// Later, commit or rollback
await sql.commitDistributed("tx1");
// or
await sql.rollbackDistributed("tx1");
```
```

----------------------------------------

TITLE: Preparing SQLite Queries in Bun
DESCRIPTION: This example demonstrates how to prepare SQL queries using the query() and prepare() methods. It highlights the difference between cached and non-cached prepared statements.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
const query = db.query(`select "Hello world" as message`);

// compile the prepared statement
const query = db.prepare("SELECT * FROM foo WHERE bar = ?");
```

----------------------------------------

TITLE: Basic Test Definition in TypeScript
DESCRIPTION: Demonstrates how to write a basic test using Bun's test framework with the expect assertion
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/writing.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { expect, test } from "bun:test";

test("2 + 2", () => {
  expect(2 + 2).toBe(4);
});
```

----------------------------------------

TITLE: Omitting Specific Dependency Types During Installation
DESCRIPTION: Illustrates using the `--omit` flag to exclude certain types of dependencies during installation. The first example excludes `devDependencies` for the root package and workspaces. The second example installs only `dependencies` by omitting dev, peer, and optional dependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/install.md#2025-04-22_snippet_12

LANGUAGE: bash
CODE:
```
# Exclude "devDependencies" from the installation. This will apply to the
# root package and workspaces if they exist. Transitive dependencies will
# not have "devDependencies".
$ bun install --omit dev

# Install only dependencies from "dependencies"
$ bun install --omit=dev --omit=peer --omit=optional
```

----------------------------------------

TITLE: Executing Basic Shell Commands with Bun Shell
DESCRIPTION: This snippet demonstrates how to import and use the `$` function from the `bun` package to run a simple shell command. The command's output is returned as a string.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/shell.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { $ } from "bun";

await $`echo Hello, world!`; // => "Hello, world!"
```

----------------------------------------

TITLE: Setting Custom Headers with Fetch in TypeScript
DESCRIPTION: Shows how to set custom HTTP headers in a fetch request by passing a headers object in the options.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
const response = await fetch("http://example.com", {
  headers: {
    "X-Custom-Header": "value",
  },
});
```

----------------------------------------

TITLE: Advanced onStart Usage with Asynchronous Operations
DESCRIPTION: Demonstrates advanced usage of onStart callbacks in Bun plugins, including asynchronous operations and multiple plugins. The bundler waits for all onStart callbacks to complete before continuing.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/plugins.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
const result = await Bun.build({
  entrypoints: ["./app.ts"],
  outdir: "./dist",
  sourcemap: "external",
  plugins: [
    {
      name: "Sleep for 10 seconds",
      setup(build) {
        build.onStart(async () => {
          await Bunlog.sleep(10_000);
        });
      },
    },
    {
      name: "Log bundle time to a file",
      setup(build) {
        build.onStart(async () => {
          const now = Date.now();
          await Bun.$`echo ${now} > bundle-time.txt`;
        });
      },
    },
  ],
});
```

----------------------------------------

TITLE: Creating a Streaming HTTP Server with Node.js Streams in Bun
DESCRIPTION: This code snippet demonstrates how to set up a streaming HTTP server using Bun's serve function and Node.js Readable streams. It creates a server on port 3000 that responds with a streamed 'Hello, world!' message. The Response object accepts a Readable stream created from an array of strings.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/stream-node-streams-in-bun.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Readable } from "stream";
import { serve } from "bun";
serve({
  port: 3000,
  fetch(req) {
    return new Response(Readable.from(["Hello, ", "world!"]), {
      headers: { "Content-Type": "text/plain" },
    });
  },
});
```

----------------------------------------

TITLE: Recommended TypeScript Compiler Options for Bun
DESCRIPTION: This JSON configuration provides recommended compiler options for a Bun project, enabling features like top-level await, JSX, and extensioned .ts imports without TypeScript warnings.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/typescript.md#2025-04-22_snippet_2

LANGUAGE: jsonc
CODE:
```
{
  "compilerOptions": {
    // Environment setup & latest features
    "lib": ["ESNext"],
    "target": "ESNext",
    "module": "ESNext",
    "moduleDetection": "force",
    "jsx": "react-jsx",
    "allowJs": true,

    // Bundler mode
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,

    // Best practices
    "strict": true,
    "skipLibCheck": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,

    // Some stricter flags (disabled by default)
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noPropertyAccessFromIndexSignature": false,
  },
}
```

----------------------------------------

TITLE: Defining an HTTP Server with Hono on Bun (TypeScript)
DESCRIPTION: This snippet demonstrates how to initialize an HTTP server using the Hono framework in a Bun environment. It imports the Hono class, sets up a new application instance, and defines a route handler that responds with plain text when the root endpoint ('/') is accessed. The app instance is exported for use by the Bun runtime or other modules. Requires 'hono' npm package and a Bun runtime environment. The input is an HTTP GET request to '/', and the output is a plain text response of 'Hono!'.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/hono.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { Hono } from \"hono\";
const app = new Hono();

app.get(\"/\", c => c.text(\"Hono!\"));

export default app;
```

----------------------------------------

TITLE: HTTPS Request with Fetch in TypeScript
DESCRIPTION: Shows how to send an HTTPS request using fetch, which works the same way as HTTP requests but with secure connections.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const response = await fetch("https://example.com");
```

----------------------------------------

TITLE: Importing CSS in TypeScript
DESCRIPTION: A TypeScript file that imports CSS files. Bun will bundle these CSS files together and generate a separate CSS output file alongside the JavaScript bundle.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/html.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
import "./styles.css";
import "./more-styles.css";
```

----------------------------------------

TITLE: Generating Lockfile Hash with Bun
DESCRIPTION: Computes and prints a hash representing the current state of the `bun.lockb` lockfile. This hash is based on the dependencies and their versions specified in the lockfile.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/pm.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
$ bun pm hash
```

----------------------------------------

TITLE: Buffering External API Responses for Static Routes
DESCRIPTION: Technique to use external API data with static routes by buffering responses in memory first, since static routes don't support streaming response bodies directly.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
const time = await fetch("https://api.example.com/v1/data");
// Buffer the response in memory first.
const blob = await time.blob();

const server = Bun.serve({
  static: {
    "/api/data": new Response(blob),
  },

  fetch(req) {
    return new Response("404!");
  },
});
```

----------------------------------------

TITLE: Configuring Path Remapping in tsconfig.json
DESCRIPTION: Sets up import path aliasing in a tsconfig.json file. This configuration allows mapping 'my-custom-name' to the 'zod' package and creating an '@components' directory alias that points to './src/components/'.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/tsconfig-paths.md#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "paths": {
      "my-custom-name": ["zod"],
      "@components/*": ["./src/components/*"]
    }
  }
}
```

----------------------------------------

TITLE: Connecting to SQLite and Initializing Drizzle ORM in Bun (TypeScript)
DESCRIPTION: Establishes a connection to a SQLite database file named `sqlite.db` using Bun's built-in `Database` class from `bun:sqlite`. It then initializes the Drizzle ORM instance by passing the SQLite connection object to the `drizzle` function from `drizzle-orm/bun-sqlite`. The `db` instance is exported for use in other parts of the application. Depends on `drizzle-orm` and `bun:sqlite`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/drizzle.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
#db.ts
import { drizzle } from "drizzle-orm/bun-sqlite";
import { Database } from "bun:sqlite";

const sqlite = new Database("sqlite.db");
export const db = drizzle(sqlite);
```

----------------------------------------

TITLE: Redis Command Execution and Pipelining in Bun
DESCRIPTION: Shows how to use automatic pipelining and execute raw Redis commands using Bun's Redis client. It also demonstrates how to disable automatic pipelining.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/redis.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
// Commands are automatically pipelined by default
const [infoResult, listResult] = await Promise.all([
  redis.get("user:1:name"),
  redis.get("user:2:email"),
]);
```

LANGUAGE: typescript
CODE:
```
const client = new RedisClient("redis://localhost:6379", {
  enableAutoPipelining: false,
});
```

LANGUAGE: typescript
CODE:
```
// Run any Redis command
const info = await redis.send("INFO", []);

// LPUSH to a list
await redis.send("LPUSH", ["mylist", "value1", "value2"]);

// Get list range
const list = await redis.send("LRANGE", ["mylist", "0", "-1"]);
```

----------------------------------------

TITLE: Streaming Request Body with ReadableStream in TypeScript
DESCRIPTION: Shows how to create and use a ReadableStream for streaming data in a request body, which is useful for uploading large files without loading them entirely into memory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
const stream = new ReadableStream({
  start(controller) {
    controller.enqueue("Hello");
    controller.enqueue(" ");
    controller.enqueue("World");
    controller.close();
  },
});

const response = await fetch("http://example.com", {
  method: "POST",
  body: stream,
});
```

----------------------------------------

TITLE: Reading File Contents in Different Formats
DESCRIPTION: Shows different methods to read file contents using BunFile's Blob interface methods.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-io.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const foo = Bun.file("foo.txt");

await foo.text(); // contents as a string
await foo.stream(); // contents as ReadableStream
await foo.arrayBuffer(); // contents as ArrayBuffer
await foo.bytes(); // contents as Uint8Array
```

----------------------------------------

TITLE: Redis Hash Operations in Bun
DESCRIPTION: Illustrates hash operations using Bun's Redis client, including setting multiple fields, getting multiple fields, and incrementing numeric fields in a hash.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/redis.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
// Set multiple fields in a hash
await redis.hmset("user:123", [
  "name",
  "Alice",
  "email",
  "alice@example.com",
  "active",
  "true",
]);

// Get multiple fields from a hash
const userFields = await redis.hmget("user:123", ["name", "email"]);
console.log(userFields); // ["Alice", "alice@example.com"]

// Increment a numeric field in a hash
await redis.hincrby("user:123", "visits", 1);

// Increment a float field in a hash
await redis.hincrbyfloat("user:123", "score", 1.5);
```

----------------------------------------

TITLE: Listening for SIGINT (CTRL+C) Signal in TypeScript
DESCRIPTION: This code demonstrates how to listen for the SIGINT event which is triggered when a user presses CTRL+C. The event handler logs a message and then explicitly calls process.exit() to terminate the process.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/ctrl-c.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
process.on("SIGINT", () => {
  console.log("Ctrl-C was pressed");
  process.exit();
});
```

----------------------------------------

TITLE: Dynamic WHERE IN Queries in TypeScript
DESCRIPTION: Demonstrates how to construct WHERE IN clauses with arrays and object arrays.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
await sql`SELECT * FROM users WHERE id IN ${sql([1, 2, 3])}`;

const users = [
  { id: 1, name: "Alice" },
  { id: 2, name: "Bob" },
  { id: 3, name: "Charlie" },
];
await sql`SELECT * FROM users WHERE id IN ${sql(users, "id")}`;
```

----------------------------------------

TITLE: Using ES Module Imports with Different File Types
DESCRIPTION: Shows how to use ES module import syntax with various file types including CommonJS.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_9

LANGUAGE: ts
CODE:
```
import { foo } from "./foo"; // extensions are optional
import bar from "./bar.ts";
import { stuff } from "./my-commonjs.cjs";
```

----------------------------------------

TITLE: Plugin Usage with Bun.build
DESCRIPTION: Demonstration of how to use a plugin with Bun's build configuration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/plugins.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
await Bun.build({
  entrypoints: ["./app.ts"],
  outdir: "./out",
  plugins: [myPlugin],
});
```

----------------------------------------

TITLE: Enabling Compression (TypeScript)
DESCRIPTION: This snippet demonstrates how to enable per-message compression for a WebSocket server using the `perMessageDeflate` parameter in the `websocket` configuration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/websockets.md#_snippet_9

LANGUAGE: typescript
CODE:
```
Bun.serve({
  fetch(req, server) {}, // upgrade logic
  websocket: {
    // enable compression and decompression
    perMessageDeflate: true,
  },
});
```

----------------------------------------

TITLE: Installing Prisma dependencies in Bun
DESCRIPTION: Commands to install Prisma CLI as a development dependency and Prisma Client as a regular dependency using Bun's package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/prisma.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ bun add -d prisma
$ bun add @prisma/client
```

----------------------------------------

TITLE: Implementing Snapshot Testing in Bun Tests using TypeScript
DESCRIPTION: Shows a basic example of snapshot testing in Bun using the `toMatchSnapshot` matcher from `bun:test`. When run for the first time, it creates a snapshot file containing the serialized value (in this case, `{ a: 1 }`). Subsequent runs compare the current value against the stored snapshot, failing if they don't match.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_14

LANGUAGE: ts
CODE:
```
// example usage of toMatchSnapshot
import { test, expect } from "bun:test";

test("snapshot", () => {
  expect({ a: 1 }).toMatchSnapshot();
});
```

----------------------------------------

TITLE: Verifying Sentry Integration with a Test Error
DESCRIPTION: Example code that verifies Sentry is working correctly by intentionally triggering an error and capturing it with Sentry. The error is wrapped in a try-catch block and sent to Sentry using captureException.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/sentry.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
setTimeout(() => {
  try {
    foo();
  } catch (e) {
    Sentry.captureException(e);
  }
}, 99);
```

----------------------------------------

TITLE: Reading stdout from a child process as text in TypeScript
DESCRIPTION: This snippet shows how to capture the standard output from a child process spawned with Bun.spawn() by converting the stdout ReadableStream to text using Response. It demonstrates capturing 'echo hello' output.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/spawn-stdout.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const proc = Bun.spawn(["echo", "hello"]);

const output = await new Response(proc.stdout).text();
output; // => "hello"
```

----------------------------------------

TITLE: Encoding and Decoding with Uint8Array: Base64 and Hex (Bun, JavaScript/TypeScript)
DESCRIPTION: This snippet demonstrates Bun's extensions for encoding a Uint8Array to base64 and hexadecimal strings, and decoding from them. The toBase64 and toHex instance methods, and corresponding static fromBase64 and fromHex, enable easy conversions between binary data and encoded strings. This functionality is specific to Bun or JavaScript environments polyfilled with these methods; not standard in all runtimes. The code expects an input Uint8Array or encoded string, and outputs either a string (for encoding) or a Uint8Array (for decoding).
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_13

LANGUAGE: TypeScript
CODE:
```
new Uint8Array([1, 2, 3, 4, 5]).toBase64(); // "AQIDBA=="
Uint8Array.fromBase64("AQIDBA=="); // Uint8Array(4) [1, 2, 3, 4, 5]

new Uint8Array([255, 254, 253, 252, 251]).toHex(); // "fffefdfcfb=="
Uint8Array.fromHex("fffefdfcfb"); // Uint8Array(5) [255, 254, 253, 252, 251]
```

----------------------------------------

TITLE: Using Jest-Compatible Mock Syntax (jest.fn) in Bun Tests
DESCRIPTION: Illustrates the alternative `jest.fn()` syntax for creating mock functions in Bun tests, which is provided for Jest compatibility and behaves identically to `bun:test`'s `mock()` function. The diff highlights changing the import from `mock` to `jest` and using `jest.fn()` instead of `mock()`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_13

LANGUAGE: ts-diff
CODE:
```
- import { test, expect, mock } from "bun:test";
+ import { test, expect, jest } from "bun:test";

- const random = mock(() => Math.random());
+ const random = jest.fn(() => Math.random());
```

----------------------------------------

TITLE: Output Directory Configuration with JavaScript API
DESCRIPTION: Example showing how to specify an output directory when using Bun's bundler with the JavaScript API.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_16

LANGUAGE: typescript
CODE:
```
const result = await Bun.build({
  entrypoints: ['./index.ts'],
  outdir: './out'
});
// => { success: boolean, outputs: BuildArtifact[], logs: BuildMessage[] }
```

----------------------------------------

TITLE: Using Async/Await in Bun.serve Route Handlers
DESCRIPTION: Example demonstrating how to use async/await in route handlers to handle asynchronous operations, like database queries, and return a Promise<Response>.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { sql, serve } from "bun";

serve({
  port: 3001,
  routes: {
    "/api/version": async () => {
      const [version] = await sql`SELECT version()`;
      return Response.json(version);
    },
  },
});
```

----------------------------------------

TITLE: Using and Closing the Connection Pool in Bun SQL Client - TypeScript
DESCRIPTION: Illustrates the automatic connection pooling mechanism: connections are established lazily on first query (`Bun.sql()`), reused (`await sql\`...\``), and multiple connections can be active simultaneously (`Promise.all`). It also shows different ways to explicitly close the connection pool using `sql.close()` with optional timeout parameters for graceful or immediate shutdown.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_23

LANGUAGE: typescript
CODE:
```
```ts
const sql = Bun.sql(); // no connection are created

await sql`...`; // pool is started until max is reached (if possible), first available connection is used
await sql`...`; // previous connection is reused

// two connections are used now at the same time
await Promise.all([
  sql`INSERT INTO users ${sql({ name: "Alice" })}`,
  sql`UPDATE users SET name = ${user.name} WHERE id = ${user.id}`,
]);

await sql.close(); // await all queries to finish and close all connections from the pool
await sql.close({ timeout: 5 }); // wait 5 seconds and close all connections from the pool
await sql.close({ timeout: 0 }); // close all connections from the pool immediately
```
```

----------------------------------------

TITLE: Implementing Basic Discord Bot Logic in TypeScript
DESCRIPTION: Presents a simple Discord bot written in TypeScript using the `discord.js` library. It imports necessary modules (`Client`, `Events`, `GatewayIntentBits`), creates a new client instance with Guild intents, logs a message when the bot is ready (`ClientReady` event), and logs in using the token stored in `process.env.DISCORD_TOKEN`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/discordjs.md#2025-04-22_snippet_4

LANGUAGE: ts
CODE:
```
// import discord.js
import {Client, Events, GatewayIntentBits} from 'discord.js';

// create a new Client instance
const client = new Client({intents: [GatewayIntentBits.Guilds]});

// listen for the client to be ready
client.once(Events.ClientReady, (c) => {
  console.log(`Ready! Logged in as ${c.user.tag}`);
});

// login with the token from .env.local
client.login(process.env.DISCORD_TOKEN);
```

----------------------------------------

TITLE: Setting Environment Variables via Command Line in Linux/macOS
DESCRIPTION: Shows how to set environment variables directly from the command line in Linux or macOS when running a Bun application. This method allows for temporary variable definition for a single execution.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/set-env.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
$ FOO=helloworld bun run dev
```

----------------------------------------

TITLE: Defining and Compiling an Addition Function in Rust
DESCRIPTION: This snippet demonstrates how to create a simple addition function in Rust and compile it as a dynamic library for use with bun:ffi.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/ffi.md#2025-04-22_snippet_2

LANGUAGE: rust
CODE:
```
// add.rs
#[no_mangle]
pub extern "C" fn add(a: i32, b: i32) -> i32 {
    a + b
}
```

LANGUAGE: bash
CODE:
```
$ rustc --crate-type cdylib add.rs
```

----------------------------------------

TITLE: Configuring a proxy server in fetch API (TypeScript)
DESCRIPTION: Demonstrates how to send HTTP requests through a proxy server by adding the proxy option to fetch(). The proxy URL can include authentication credentials and specify either HTTP or HTTPS protocol.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/proxy.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
await fetch("https://example.com", {
  // The URL of the proxy server
  proxy: "https://username:password@proxy.example.com:8080",
});
```

----------------------------------------

TITLE: Configuring Argon2id Parameters in Bun.js
DESCRIPTION: Shows how to customize the Argon2id hashing parameters including memory cost and time cost. These parameters affect the computational intensity of the hashing process.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/hash-a-password.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const password = "super-secure-pa$$word";

// use argon2 (default)
const argonHash = await Bun.password.hash(password, {
  memoryCost: 4, // memory usage in kibibytes
  timeCost: 3, // the number of iterations
});
```

----------------------------------------

TITLE: Creating Basic Mock Function in Bun Test
DESCRIPTION: Shows how to create a simple mock function that wraps Math.random() using the mock utility from bun:test.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/mock-functions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { test, expect, mock } from "bun:test";

const random = mock(() => Math.random());
```

----------------------------------------

TITLE: Conditional Query Construction in TypeScript
DESCRIPTION: Shows how to build dynamic queries with conditional clauses using the sql helper function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
// Optional WHERE clauses
const filterAge = true;
const minAge = 21;
const ageFilter = sql`AND age > ${minAge}`;
await sql`
  SELECT * FROM users
  WHERE active = ${true}
  ${filterAge ? ageFilter : sql``}
`;
```

----------------------------------------

TITLE: Appending File Content Synchronously in TypeScript
DESCRIPTION: Uses fs.appendFileSync to synchronously append data to a file. This blocks the main thread until the operation completes and specifies utf8 encoding.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/append.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
import { appendFileSync } from "node:fs";

appendFileSync("message.txt", "data to append", "utf8");
```

----------------------------------------

TITLE: Writing a Fetch Response to a File using Bun.write()
DESCRIPTION: This snippet fetches data from a URL and saves the response to a local file. It uses Bun.write() to efficiently write the Response object to disk, automatically handling the content type. The first parameter is the destination file path, and the second is the Response object to save.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/response.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const result = await fetch("https://bun.sh");
const path = "./file.txt";
await Bun.write(path, result);
```

----------------------------------------

TITLE: Copying Files
DESCRIPTION: Shows how to copy files using Bun.write.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-io.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
const input = Bun.file("input.txt");
const output = Bun.file("output.txt"); // doesn't exist yet!
await Bun.write(output, input);
```

----------------------------------------

TITLE: Redis Set Operations in Bun
DESCRIPTION: Demonstrates set operations using Bun's Redis client, including adding and removing members, checking membership, retrieving all members, and popping random members.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/redis.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
// Add member to set
await redis.sadd("tags", "javascript");

// Remove member from set
await redis.srem("tags", "javascript");

// Check if member exists in set
const isMember = await redis.sismember("tags", "javascript");

// Get all members of a set
const allTags = await redis.smembers("tags");

// Get a random member
const randomTag = await redis.srandmember("tags");

// Pop (remove and return) a random member
const poppedTag = await redis.spop("tags");
```

----------------------------------------

TITLE: Environment Variable Expansion in .env Files
DESCRIPTION: Demonstrates how Bun automatically expands environment variables referenced within other variable definitions.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_8

LANGUAGE: txt
CODE:
```
FOO=world
BAR=hello$FOO
```

----------------------------------------

TITLE: Running TypeScript Files with Bun CLI
DESCRIPTION: Example showing how to execute a TypeScript file using the Bun CLI, which automatically handles module resolution.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ bun index.ts
Hello world!
```

----------------------------------------

TITLE: Writing Fetch Response Body Directly to File using Bun API in TypeScript
DESCRIPTION: This snippet shows how to use the `Bun.write` function (imported as `write`) to efficiently write the body of a Fetch API `Response` object directly to a file on disk. This is presented as a performant alternative to methods like `response.text()` or `response.arrayBuffer()` when the goal is to save the response content to the filesystem, potentially avoiding buffering the entire response in memory. It requires the `bun` runtime and a `Response` object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_27

LANGUAGE: typescript
CODE:
```
```ts
import { write } from "bun";

await write("output.txt", response);
```
```

----------------------------------------

TITLE: Importing and Using a TOML File in TypeScript with Bun
DESCRIPTION: Demonstrates how to import a TOML file in TypeScript using Bun's native support, accessing the data as a JavaScript object with full type information.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/import-toml.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import data from "./data.toml";

data.name; // => "bun"
data.version; // => "1.0.0"
data.author.name; // => "John Dough"
```

----------------------------------------

TITLE: Using Bun's Bundler with CLI
DESCRIPTION: This snippet shows how to use Bun's bundler through the command line interface, specifying an entry point and output directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ bun build ./index.tsx --outdir ./build
```

----------------------------------------

TITLE: Batching WebSocket Operations with .cork()
DESCRIPTION: This code demonstrates how to use the `cork` method to batch a set of operations on a WebSocket connection.  The `cork` method accepts a callback function that receives the `ServerWebSocket` instance, allowing multiple `send` calls to be grouped together for efficiency.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/websockets.md#_snippet_16

LANGUAGE: typescript
CODE:
```
ws.cork((ws) => {
  ws.send("first");
  ws.send("second");
  ws.send("third");
});
```

----------------------------------------

TITLE: Handling Non-Existent Files
DESCRIPTION: Shows how BunFile handles references to non-existent files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-io.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const notreal = Bun.file("notreal.txt");
notreal.size; // 0
notreal.type; // "text/plain;charset=utf-8"
const exists = await notreal.exists(); // false
```

----------------------------------------

TITLE: Defining Scripts in package.json for Bun
DESCRIPTION: Example `package.json` structure showing how to define named scripts, such as `clean` and `dev`, within the `scripts` object. These scripts associate a name with a shell command that can be executed using `bun run <script>`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/run.md#2025-04-22_snippet_7

LANGUAGE: json
CODE:
```
{
  // ... other fields
  "scripts": {
    "clean": "rm -rf dist && echo 'Done.'",
    "dev": "bun server.ts"
  }
}
```

----------------------------------------

TITLE: Preconnecting to a Host using Bun Fetch API in TypeScript
DESCRIPTION: This snippet shows how to use the `fetch.preconnect` function available in Bun to proactively establish a connection to a specified host. This includes performing the DNS lookup, establishing the TCP socket connection, and completing the TLS handshake early. This is beneficial when a connection to the host is anticipated soon but the request isn't ready yet. It requires the `bun` runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_24

LANGUAGE: typescript
CODE:
```
```ts
import { fetch } from "bun";

fetch.preconnect("https://bun.sh");
```
```

----------------------------------------

TITLE: Iterating Over CookieMap Entries
DESCRIPTION: Various ways to iterate over cookies in a CookieMap, including using for...of loops with entries(), keys(), values(), and the forEach method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
// Iterate over [name, cookie] entries
for (const [name, value] of cookies) {
  console.log(`${name}: ${value}`);
}

// Using entries()
for (const [name, value] of cookies.entries()) {
  console.log(`${name}: ${value}`);
}

// Using keys()
for (const name of cookies.keys()) {
  console.log(name);
}

// Using values()
for (const value of cookies.values()) {
  console.log(value);
}

// Using forEach
cookies.forEach((value, name) => {
  console.log(`${name}: ${value}`);
});
```

----------------------------------------

TITLE: WebSocket Event Listeners
DESCRIPTION: This code adds event listeners to the WebSocket to handle different events such as receiving a message, opening the socket, closing the socket, and handling errors.  Each event listener executes a callback function when the corresponding event occurs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/websockets.md#_snippet_15

LANGUAGE: typescript
CODE:
```
// message is received
socket.addEventListener("message", event => {});

// socket opened
socket.addEventListener("open", event => {});

// socket closed
socket.addEventListener("close", event => {});

// error handler
socket.addEventListener("error", event => {});
```

----------------------------------------

TITLE: Uploading Files with S3Client.prototype.write - TypeScript
DESCRIPTION: Demonstrates using Bun's S3Client 'write' method to upload files to an S3-compatible bucket. Files can be provided as a string or a Response instance. The equivalent usage with the file method is also noted. Requires an S3-compatible endpoint, access credentials, and target bucket.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_19

LANGUAGE: typescript
CODE:
```
const client = new Bun.S3Client({
  accessKeyId: \"your-access-key\",
  secretAccessKey: \"your-secret-key\",
  endpoint: \"https://s3.us-east-1.amazonaws.com\",
  bucket: \"my-bucket\",
});
await client.write(\"my-file.txt\", \"Hello World!\");
await client.write(\"my-file.txt\", new Response(\"Hello World!\"));

// equivalent to
// await client.file(\"my-file.txt\").write(\"Hello World!\");
```

----------------------------------------

TITLE: Using Bun.ArrayBufferSink for Incremental Buffer Construction
DESCRIPTION: Demonstrates the ArrayBufferSink class for efficiently constructing an ArrayBuffer incrementally. This is useful for building binary data of unknown size.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/streams.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
const sink = new Bun.ArrayBufferSink();

sink.write("h");
sink.write("e");
sink.write("l");
sink.write("l");
sink.write("o");

sink.end();
// ArrayBuffer(5) [ 104, 101, 108, 108, 111 ]
```

----------------------------------------

TITLE: Copying a File Using Bun.write() in TypeScript
DESCRIPTION: This snippet demonstrates how to copy a file to another location using Bun's file I/O API. It first creates a BunFile instance from the source path, then uses Bun.write() to create a copy at the destination path.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/file-cp.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const file = Bun.file("/path/to/original.txt");
await Bun.write("/path/to/copy.txt", file);
```

----------------------------------------

TITLE: Setting Coverage Report Directory in Bun Tests
DESCRIPTION: Specifies the directory where coverage reports will be saved. Only works with persistent reporters like lcov.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_15

LANGUAGE: toml
CODE:
```
[test]
coverageDir = "path/to/somewhere"  # default "coverage"
```

----------------------------------------

TITLE: Cryptographic Hashing with Bun.CryptoHasher
DESCRIPTION: Introduces Bun.CryptoHasher for incremental cryptographic hashing. It supports various algorithms and can process different input types.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/hashing.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
const hasher = new Bun.CryptoHasher("sha256");
hasher.update("hello world");
hasher.digest();
// Uint8Array(32) [ <byte>, <byte>, ... ]

const hasher = new Bun.CryptoHasher("sha256");

hasher.update("hello world");
hasher.update(new Uint8Array([1, 2, 3]));
hasher.update(new ArrayBuffer(10));

hasher.update("hello world"); // defaults to utf8
hasher.update("hello world", "hex");
hasher.update("hello world", "base64");
hasher.update("hello world", "latin1");

hasher.digest();
// => Uint8Array(32) [ 185, 77, 39, 185, 147, ... ]

hasher.digest("base64");
// => "uU0nuZNNPgilLlLX2n2r+sSE7+N6U4DukIj3rOLvzek="

hasher.digest("hex");
// => "b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9"

const arr = new Uint8Array(32);

hasher.digest(arr);

console.log(arr);
// => Uint8Array(32) [ 185, 77, 39, 185, 147, ... ]
```

----------------------------------------

TITLE: Creating a Project from npm Package in Bun
DESCRIPTION: Shows how to use 'bun create' to initialize a project from an npm package.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bun-create.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
$ bun create <template> [<destination>]
```

----------------------------------------

TITLE: Setting Chunk Size When Streaming from Blob in TypeScript
DESCRIPTION: This code demonstrates how to set a custom chunk size when streaming binary data from a Blob. It creates a Uint8Array, wraps it in a Blob, and then calls blob.stream() with a chunk size argument of 1024 bytes, thus controlling the granularity of streaming. Dependencies: Blob and ReadableStream. Input: a Uint8Array, custom chunk size. Output: a ReadableStream that yields data in the specified chunk size. Limitation: Blob.stream(chunkSize) may not be supported in all browser environments.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/typedarray-to-readablestream.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const arr = new Uint8Array(64);
const blob = new Blob([arr]);

// set chunk size of 1024 bytes
const stream = blob.stream(1024);
```

----------------------------------------

TITLE: Adding Language-Specific Styles with :lang() Selector - CSS
DESCRIPTION: Shows usage of the enhanced :lang() selector for language-based styling with examples for multiple arguments and Bun's fallback with :is() for broader support. Requires HTML elements to be properly marked with language attributes for selectors to match. Inputs are language lists; outputs are typographic and style variations for each group.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_19

LANGUAGE: css
CODE:
```
/* Typography adjustments for CJK languages */
:lang(zh, ja, ko) {
  line-height: 1.8;
  font-size: 1.05em;
}

/* Different quote styles by language group */
blockquote:lang(fr, it, es, pt) {
  font-style: italic;
}

blockquote:lang(de, nl, da, sv) {
  font-weight: 500;
}
```

LANGUAGE: css
CODE:
```
/* Multiple languages grouped with :is() for better browser support */
:is(:lang(zh), :lang(ja), :lang(ko)) {
  line-height: 1.8;
  font-size: 1.05em;
}

blockquote:is(:lang(fr), :lang(it), :lang(es), :lang(pt)) {
  font-style: italic;
}

blockquote:is(:lang(de), :lang(nl), :lang(da), :lang(sv)) {
  font-weight: 500;
}
```

----------------------------------------

TITLE: Starting the Astro Dev Server with the Bun Runtime
DESCRIPTION: This shell command uses `bunx` with the `--bun` flag to execute the `astro dev` command. This explicitly tells Astro to use the Bun runtime environment for the development server, instead of the default Node.js. The output confirms the server has started and provides the local URL.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/astro.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
$ bunx --bun astro dev
  🚀  astro  v3.1.4 started in 200ms

  ┃ Local    http://localhost:4321/
  ┃ Network  use --host to expose
```

----------------------------------------

TITLE: Using Request Object with Fetch in TypeScript
DESCRIPTION: Demonstrates how to create and use a Request object with the fetch API. The example shows creating a POST request with a text body.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const request = new Request("http://example.com", {
  method: "POST",
  body: "Hello, world!",
});

const response = await fetch(request);
```

----------------------------------------

TITLE: File-Based Queries in TypeScript
DESCRIPTION: Demonstrates how to execute SQL queries from files with optional parameters.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
const result = await sql.file("query.sql", [1, 2, 3]);
```

----------------------------------------

TITLE: Writing Data to S3 Bucket using S3Client.write
DESCRIPTION: Examples of writing different types of data to S3 using S3Client.write static method. Shows string, JSON, fetch response, and public HTML file uploads with ACL settings.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_25

LANGUAGE: typescript
CODE:
```
import { S3Client } from "bun";

const credentials = {
  accessKeyId: "your-access-key",
  secretAccessKey: "your-secret-key",
  bucket: "my-bucket",
  // endpoint: "https://s3.us-east-1.amazonaws.com",
  // endpoint: "https://<account-id>.r2.cloudflarestorage.com", // Cloudflare R2
};

// Write string
await S3Client.write("my-file.txt", "Hello World");

// Write JSON with type
await S3Client.write(
  "data.json",
  JSON.stringify({hello: "world"}),
  {
    ...credentials,
    type: "application/json",
  }
);

// Write from fetch
const res = await fetch("https://example.com/data");
await S3Client.write("data.bin", res, credentials);

// Write with ACL
await S3Client.write("public.html", html, {
  ...credentials,
  acl: "public-read",
  type: "text/html"
});
```

----------------------------------------

TITLE: Creating a Chunked ReadableStream from Uint8Array Using Blob in TypeScript
DESCRIPTION: This snippet demonstrates converting a Uint8Array to a Blob and then using the Blob.stream() method to create a ReadableStream that automatically chunks the data. Dependencies: Blob and ReadableStream web APIs. Input: a Uint8Array. Output: a ReadableStream that streams the Blob's contents in default-sized chunks. This method offers more efficient streaming with better memory usage for large data.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/typedarray-to-readablestream.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const arr = new Uint8Array(64);
const blob = new Blob([arr]);
const stream = blob.stream();
```

----------------------------------------

TITLE: Converting ReadableStream to JSON using Bun
DESCRIPTION: Demonstrates how to convert a ReadableStream instance to JSON format using Bun's readableStreamToJSON utility function. This async operation returns a parsed JSON object from the stream's contents.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/streams/to-json.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const stream = new ReadableStream();
const json = await Bun.readableStreamToJSON(stream);
```

----------------------------------------

TITLE: CSS Modules Implementation
DESCRIPTION: Shows implementation of CSS modules with class name scoping and importing into TSX components.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_27

LANGUAGE: css
CODE:
```
/* styles.module.css */
.button {
  color: red;
}

/* other-styles.module.css */
.button {
  color: blue;
}
```

LANGUAGE: tsx
CODE:
```
import styles from "./styles.module.css";
import otherStyles from "./other-styles.module.css";

export default function App() {
  return (
    <>
      <button className={styles.button}>Red button!</button>
      <button className={otherStyles.button}>Blue button!</button>
    </>
  );
}
```

----------------------------------------

TITLE: Spawning a Basic Child Process in TypeScript with Bun
DESCRIPTION: Demonstrates how to spawn a simple child process using Bun.spawn() and wait for its completion. The example shows creating an echo process and using the await keyword with the proc.exited property to wait until the process finishes execution.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/spawn.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const proc = Bun.spawn(["echo", "hello"]);

// await completion
await proc.exited;
```

----------------------------------------

TITLE: Configuring tag in publishConfig Field - JSON
DESCRIPTION: Shows how to set the default publication tag (here, "next") in `publishConfig` inside `package.json`. This ensures that new publishes use the custom tag unless overridden by a command-line flag. This pattern supports consistent CI/CD tagging workflows in npm packages. Requires a properly filled package.json; the tag will be applied when using `bun publish`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/publish.md#2025-04-22_snippet_5

LANGUAGE: json
CODE:
```
{\n  "publishConfig": {\n    "tag": "next"\n  }\n}
```

----------------------------------------

TITLE: Spawning a Basic Child Process in TypeScript
DESCRIPTION: Demonstrates how to spawn a simple child process using Bun.spawn() and wait for its completion.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const proc = Bun.spawn(["bun", "--version"]);
console.log(await proc.exited); // 0
```

----------------------------------------

TITLE: Running the Bun HTTP Server
DESCRIPTION: Command-line instruction to start the Bun server by running the index.ts file. The server will listen on port 4000 where the form will be accessible.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/file-uploads.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ bun run index.ts
Listening on http://localhost:4000
```

----------------------------------------

TITLE: Configuring SvelteKit Adapter for Bun
DESCRIPTION: Configuration changes required in svelte.config.js to use the Bun adapter for production builds, replacing the default auto adapter with svelte-adapter-bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/sveltekit.md#2025-04-22_snippet_2

LANGUAGE: ts-diff
CODE:
```
- import adapter from "@sveltejs/adapter-auto";
+ import adapter from "svelte-adapter-bun";
  import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

  /** @type {import('@sveltejs/kit').Config} */
  const config = {
  	// Consult https://svelte.dev/docs/kit/integrations#preprocessors
  	// for more information about preprocessors
  	preprocess: vitePreprocess(),
  
  	kit: {
  		// adapter-auto only supports some environments, see https://svelte.dev/docs/kit/adapter-auto for a list.
  		// If your environment is not supported, or you settled on a specific environment, switch out the adapter.
  		// See https://svelte.dev/docs/kit/adapters for more information about adapters.
  		adapter: adapter()
  	}
  };
  
  export default config;
```

----------------------------------------

TITLE: Converting ReadableStream to UTF-8 String in TypeScript
DESCRIPTION: Two approaches for converting a ReadableStream to a UTF-8 string: the standard Response-based method and the optimized Bun utility function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_21

LANGUAGE: typescript
CODE:
```
// with Response
await new Response(stream).text();

// with Bun function
await Bun.readableStreamToText(stream);
```

----------------------------------------

TITLE: Checking File Existence with S3Client.prototype.exists - TypeScript
DESCRIPTION: Shows how to check if a file exists in an S3 bucket using the Bun S3Client 'exists' method. Equivalent usage via client.file().exists() is also included. Requires an instantiated S3Client with proper credentials and bucket.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_21

LANGUAGE: typescript
CODE:
```
const client = new Bun.S3Client({
  accessKeyId: \"your-access-key\",
  secretAccessKey: \"your-secret-key\",
  bucket: \"my-bucket\",
});

const exists = await client.exists(\"my-file.txt\");
// equivalent to
// const exists = await client.file(\"my-file.txt\").exists();
```

----------------------------------------

TITLE: Checking Cookie Expiration with isExpired()
DESCRIPTION: How to check if a cookie has expired using the isExpired() method in different scenarios: expired cookies, valid cookies with maxAge, and session cookies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_13

LANGUAGE: typescript
CODE:
```
// Expired cookie (Date in the past)
const expiredCookie = new Bun.Cookie("name", "value", {
  expires: new Date(Date.now() - 1000),
});
console.log(expiredCookie.isExpired()); // true

// Valid cookie (Using maxAge instead of expires)
const validCookie = new Bun.Cookie("name", "value", {
  maxAge: 3600, // 1 hour in seconds
});
console.log(validCookie.isExpired()); // false

// Session cookie (no expiration)
const sessionCookie = new Bun.Cookie("name", "value");
console.log(sessionCookie.isExpired()); // false
```

----------------------------------------

TITLE: Sending POST Request with Fetch in TypeScript
DESCRIPTION: Shows how to send a POST request by specifying the method and body in the fetch options. The body can be a string or other supported types.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const response = await fetch("http://example.com", {
  method: "POST",
  body: "Hello, world!",
});
```

----------------------------------------

TITLE: 16 ANSI Color Examples in TypeScript
DESCRIPTION: Examples of converting colors to 16 ANSI format using Bun.color() with 'ansi-16' output format
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/color.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
Bun.color("red", "ansi-16"); // "\u001b[38;5;\tm"
Bun.color(0xff0000, "ansi-16"); // "\u001b[38;5;\tm"
Bun.color("#f00", "ansi-16"); // "\u001b[38;5;\tm"
Bun.color("#ff0000", "ansi-16"); // "\u001b[38;5;\tm"
```

----------------------------------------

TITLE: Importing and Applying CSS Modules in React Components - TSX
DESCRIPTION: This snippet demonstrates importing two CSS module files into a TSX (TypeScript React) file and applying the scoped classes to JSX elements. The imported objects provide mappings of the class names to uniquely scoped identifiers. Requires Bun bundler support, React, and TypeScript. Key parameters include the import paths and usage of the 'className' attribute. Expected input files are ".module.css" files, and the output is a React component with styled buttons, each using class names unique to its source module. Constraints: only works with supported frameworks and valid module imports.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css_modules.md#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
import styles from "./styles.module.css";
import otherStyles from "./other-styles.module.css";

export default function App() {
  return (
    <>
      <button className={styles.button}>Red button!</button>
      <button className={otherStyles.button}>Blue button!</button>
    </>
  );
}

```

----------------------------------------

TITLE: Iterating Over Query Results with .iterate() or @@iterator (TypeScript)
DESCRIPTION: Demonstrates how to incrementally retrieve and process rows from a SQLite query using Bun's .iterate() method or JavaScript's iterable protocol. Ideal for handling large datasets to avoid memory overhead, with each loop iteration yielding a single row.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_14

LANGUAGE: TypeScript
CODE:
```
const query = db.query("SELECT * FROM foo");
for (const row of query.iterate()) {
  console.log(row);
}

```

LANGUAGE: TypeScript
CODE:
```
const query = db.query("SELECT * FROM foo");
for (const row of query) {
  console.log(row);
}

```

----------------------------------------

TITLE: Starting Bun with PM2 using Configuration File
DESCRIPTION: Command to start a Bun application using a PM2 configuration file that contains all the necessary settings and environment variables.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/pm2.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
pm2 start pm2.config.js
```

----------------------------------------

TITLE: Accessing Environment Variables Using Bun.env in TypeScript
DESCRIPTION: This snippet shows how to access environment variables using Bun.env, which is an alias of process.env. It provides the same functionality but with Bun-specific syntax.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/read-env.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
Bun.env.API_TOKEN; // => "secret"
```

----------------------------------------

TITLE: Finding Executable Paths with Bun.which in TypeScript
DESCRIPTION: Demonstrates using Bun.which to locate executable files in the system path. Returns the absolute path if found or null if the executable doesn't exist. Examples show looking up common executables like 'sh' and 'bun'.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/which-path-to-executable-bin.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
Bun.which("sh"); // => "/bin/sh"
Bun.which("notfound"); // => null
Bun.which("bun"); // => "/home/user/.bun/bin/bun"
```

----------------------------------------

TITLE: Building with ESM Format - Bun CLI - CLI
DESCRIPTION: Performs the ES Module bundling operation using the Bun CLI. Explicitly sets entrypoint, output directory, and format. For command line use with Bun installed. Produces .js files in ES Module format.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_22

LANGUAGE: CLI
CODE:
```
$ bun build ./index.tsx --outdir ./out --format esm
```

----------------------------------------

TITLE: Specifying Chunk Size When Streaming Buffer Data with Blob.stream() (TypeScript)
DESCRIPTION: This snippet shows how to set a specific chunk size (e.g., 1024 bytes) when streaming Buffer data as a ReadableStream via the Blob API. After wrapping the Buffer in a Blob, blob.stream(1024) is used to emit chunks of the given size. This approach allows fine-grained control over how much data is read per chunk from the stream, making it suitable for large buffers or when a certain chunk size is required for downstream consumers. Key parameters: the chunk size (in bytes) as the stream() argument.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/buffer-to-readablestream.md#2025-04-22_snippet_2

LANGUAGE: TypeScript
CODE:
```
const buf = Buffer.from("hello world");
const blob = new Blob([buf]);

// set chunk size of 1024 bytes
const stream = blob.stream(1024);
```

----------------------------------------

TITLE: Copying File Contents Using BunFile and Bun.write()
DESCRIPTION: This snippet shows how to copy the contents of one file to another using BunFile and Bun.write(). It creates a BunFile instance from an input file and writes its contents to an output file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/blob.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const path = "./out.txt";
const data = Bun.file("./in.txt");

// write the contents of ./in.txt to ./out.txt
await Bun.write(path, data);
```

----------------------------------------

TITLE: Reading Partial Data and Types from S3File - TypeScript
DESCRIPTION: Shows how to use the S3File slice method to read a partial byte range from a remote file, and demonstrates reading that partial as either a Uint8Array or string. Uses direct async method calls. Relies on existing S3File instance and Bun's compatibility with Blob API.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_23

LANGUAGE: typescript
CODE:
```
const partial = s3file.slice(0, 1024);

// Read the partial range as a Uint8Array
const bytes = await partial.bytes();

// Read the partial range as a string
const text = await partial.text();
```

----------------------------------------

TITLE: Converting ReadableStream to Uint8Array via ArrayBuffer in Bun
DESCRIPTION: This snippet demonstrates how to convert a ReadableStream to a Uint8Array by first reading the stream into an ArrayBuffer using Bun.readableStreamToArrayBuffer, then creating a Uint8Array that points to that buffer.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/streams/to-typedarray.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const stream = new ReadableStream();
const buf = await Bun.readableStreamToArrayBuffer(stream);
const uint8 = new Uint8Array(buf);
```

----------------------------------------

TITLE: Specifying Dependency Overrides in package.json
DESCRIPTION: Demonstrates adding an `overrides` field to `package.json`. This mechanism, similar to Yarn's `resolutions`, allows specifying exact versions or version ranges for transitive dependencies (dependencies of your dependencies), ensuring consistent versions across the project.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/install.md#2025-04-22_snippet_8

LANGUAGE: json-diff
CODE:
```
  {
    "name": "my-app",
    "dependencies": {
      "foo": "^2.0.0"
    },
+   "overrides": {
+     "bar": "~4.4.0"
+   }
  }
```

----------------------------------------

TITLE: Creating Project Directory for Bun HTTP Server
DESCRIPTION: Creates a new directory called 'quickstart' and navigates into it to prepare for a Bun project setup.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/quickstart.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ mkdir quickstart
$ cd quickstart
```

----------------------------------------

TITLE: Installing Basic Package Dependencies with Bun
DESCRIPTION: Basic package installation commands using bun add, including version specification and ranges.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/add.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ bun add preact
```

LANGUAGE: bash
CODE:
```
$ bun add zod@3.20.0
$ bun add zod@^3.0.0
$ bun add zod@latest
```

----------------------------------------

TITLE: File Asset Embedding
DESCRIPTION: Examples of embedding and accessing files in compiled Bun applications.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/executables.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import icon from "./icon.png" with { type: "file" };
import { file } from "bun";

export default {
  fetch(req) {
    // Embedded files can be streamed from Response objects
    return new Response(file(icon));
  },
};
```

LANGUAGE: javascript
CODE:
```
import icon from "./icon.png" with { type: "file" };
import { file } from "bun";

const bytes = await file(icon).arrayBuffer();
```

----------------------------------------

TITLE: Streaming Files from a Bun HTTP Server
DESCRIPTION: Shows how to stream a file in a Bun server by returning a Response with a BunFile object as the body. This leverages the sendfile(2) system call for zero-copy file transfers when possible.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_13

LANGUAGE: typescript
CODE:
```
Bun.serve({
  fetch(req) {
    return new Response(Bun.file("./hello.txt"));
  },
});
```

----------------------------------------

TITLE: Reading Data from Pointer Using DataView in Bun (TypeScript)
DESCRIPTION: Illustrates using DataView to read binary data from native memory exposed via pointer, after converting it to ArrayBuffer using toArrayBuffer from 'bun:ffi'. Requires prior acquisition of the pointer. Demonstrates reading multiple bytes and endian consideration; suitable for long-lived pointers. Outputs integer values for each byte read.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/ffi.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
import { toArrayBuffer } from "bun:ffi";
let myDataView = new DataView(toArrayBuffer(myPtr, 0, 32));

console.log(
  myDataView.getUint8(0, true),
  myDataView.getUint8(1, true),
  myDataView.getUint8(2, true),
  myDataView.getUint8(3, true),
);

```

----------------------------------------

TITLE: Building and Running a Remix App in Production with Bun
DESCRIPTION: Shows how to build a Remix application for production using 'bun run build' and then start the production server with 'bun start'. The build command creates optimized assets for production, and the start command serves the application from the built files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/remix.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
$ bun run build
 $ remix build
 info  building... (NODE_ENV=production)
 info  built (158ms)
$ bun start
 $ remix-serve ./build/index.js
 [remix-serve] http://localhost:3000 (http://192.168.86.237:3000)
```

----------------------------------------

TITLE: Piping stderr from a Child Process in Bun
DESCRIPTION: This snippet demonstrates how to spawn a child process with stderr configured as a pipe, making it available as a ReadableStream for further processing. The 'pipe' option redirects the child process's stderr to a stream instead of inheriting the parent's stderr.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/spawn-stderr.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const proc = Bun.spawn(["echo", "hello"], {
  stderr: "pipe",
});
proc.stderr; // => ReadableStream
```

----------------------------------------

TITLE: Brace Expansion in Bun Shell
DESCRIPTION: Shows how to use the $.braces utility for brace expansion in Bun Shell. This function implements simple brace expansion for shell commands, similar to bash.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_19

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

await $.braces(`echo {1,2,3}`);
// => ["echo 1", "echo 2", "echo 3"]
```

----------------------------------------

TITLE: Running a File in Watch Mode with Bun
DESCRIPTION: Shows how to use the `--watch` flag with `bun` (placed immediately after `bun`) to execute a file (`index.tsx`) in watch mode. In this mode, Bun monitors the file and its dependencies for changes and automatically re-runs the script upon detection.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/run.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
$ bun --watch run index.tsx
```

----------------------------------------

TITLE: Writing String to BunFile Object in TypeScript
DESCRIPTION: This snippet illustrates how to use a BunFile object as the destination for Bun.write(). The method will write the data to the file associated with the BunFile path.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/basic.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const path = Bun.file("./file.txt");
await Bun.write(path, "Lorem ipsum");
```

----------------------------------------

TITLE: Creating a Custom HTML Processing Plugin for Bun
DESCRIPTION: A TypeScript example demonstrating how to create a custom plugin that transforms HTML content using Bun's HTMLRewriter. This example converts all HTML tags and text to lowercase before bundling.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/html.md#2025-04-22_snippet_15

LANGUAGE: typescript
CODE:
```
await Bun.build({
  entrypoints: ["./index.html"],
  outdir: "./dist",
  minify: true,

  plugins: [
    {
      // A plugin that makes every HTML tag lowercase
      name: "lowercase-html-plugin",
      setup({ onLoad }) {
        const rewriter = new HTMLRewriter().on("*", {
          element(element) {
            element.tagName = element.tagName.toLowerCase();
          },
          text(element) {
            element.replace(element.text.toLowerCase());
          },
        });

        onLoad({ filter: /\.html$/ }, async args => {
          const html = await Bun.file(args.path).text();

          return {
            // Bun's bundler will scan the HTML for <script> tags, <link rel="stylesheet"> tags, and other assets
            // and bundle them automatically
            contents: rewriter.transform(html),
            loader: "html",
          };
        });
      },
    },
  ],
});
```

----------------------------------------

TITLE: Binding Named Parameters in Bun SQLite Queries (TypeScript)
DESCRIPTION: Illustrates using named parameters in SQL queries by passing an object of key-value pairs to the .all() method in Bun's query interface. Allows dynamic and secure parameter replacement in SELECT queries.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_18

LANGUAGE: TypeScript
CODE:
```
const query = db.query("SELECT * FROM foo WHERE bar = $bar");
const results = query.all({
  $bar: "bar",
});

```

----------------------------------------

TITLE: Using Strict Mode for Parameter Binding in Bun's SQLite
DESCRIPTION: This snippet illustrates how to use strict mode in Bun's SQLite driver to bind parameters without prefixes. It's a feature added in Bun v1.1.14 that changes the behavior of parameter binding.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
import { Database } from "bun:sqlite";

const db = new Database(":memory:", {
  // bind values without prefixes
  strict: true,
});

const query = db.query(`select $message;`);

// strict: true
query.all({ message: "Hello world" });

// strict: false
// query.all({ $message: "Hello world" });
```

----------------------------------------

TITLE: Configuring Bytecode Output in Bun Build (JavaScript)
DESCRIPTION: Generates bytecode for JavaScript/TypeScript entrypoints to improve startup times for large applications. Only works with CommonJS format and Bun target.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_64

LANGUAGE: typescript
CODE:
```
await Bun.build({
  entrypoints: ["./index.tsx"],
  outdir: "./out",
  bytecode: true,
})
```

----------------------------------------

TITLE: Using Custom .env Files with the --env-file Flag
DESCRIPTION: Examples of specifying particular .env files to load using the --env-file command line option in Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_6

LANGUAGE: sh
CODE:
```
$ bun --env-file=.env.1 src/index.ts

$ bun --env-file=.env.abc --env-file=.env.def run build
```

----------------------------------------

TITLE: Accessing Standard Streams
DESCRIPTION: Shows how to access stdin, stdout and stderr as BunFile instances.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-io.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
Bun.stdin; // readonly
Bun.stdout;
Bun.stderr;
```

----------------------------------------

TITLE: Basic Unix Socket GET Request in Bun
DESCRIPTION: Demonstrates how to perform a basic GET request over a unix domain socket using fetch. Uses the docker socket as an example to retrieve server information.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/fetch-unix.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const unix = "/var/run/docker.sock";

const response = await fetch("http://localhost/info", { unix });

const body = await response.json();
console.log(body); // { ... }
```

----------------------------------------

TITLE: Reserving and Releasing Dedicated Connections in Bun SQL Client - TypeScript
DESCRIPTION: Demonstrates how to obtain an exclusive connection from the pool using `await sql.reserve()`. This is useful for operations requiring a dedicated, isolated connection. The connection must be released back to the pool either manually using `reserved.release()` within a `try...finally` block or automatically using a `using` block (leveraging `Symbol.dispose`).
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_24

LANGUAGE: typescript
CODE:
```
```ts
// Get exclusive connection from pool
const reserved = await sql.reserve();

try {
  await reserved`INSERT INTO users (name) VALUES (${ "Alice" })`;
} finally {
  // Important: Release connection back to pool
  reserved.release();
}

// Or using Symbol.dispose
{
  using reserved = await sql.reserve();
  await reserved`SELECT 1`;
} // Automatically released
```
```

----------------------------------------

TITLE: Establishing Redis Connections in Bun
DESCRIPTION: Shows how to create Redis connections using both the default client and a custom client. It also demonstrates how to use environment variables for connection information.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/redis.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { redis, RedisClient } from "bun";

// Using the default client (reads connection info from environment)
// process.env.REDIS_URL is used by default
await redis.set("hello", "world");
const result = await redis.get("hello");

// Creating a custom client
const client = new RedisClient("redis://username:password@localhost:6379");
await client.set("counter", "0");
await client.incr("counter");
```

----------------------------------------

TITLE: Inter-Process Communication (IPC) in Child Process with TypeScript
DESCRIPTION: Demonstrates how to send and receive messages in a Bun child process using IPC.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_12

LANGUAGE: typescript
CODE:
```
process.send("Hello from child as string");
process.send({ message: "Hello from child as object" });

process.on("message", (message) => {
  // print message from parent
  console.log(message);
});
```

----------------------------------------

TITLE: Configuring Minification in Bun
DESCRIPTION: Demonstrates how to enable and configure minification options including whitespace, identifiers, and syntax minification.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_45

LANGUAGE: typescript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './out',
  minify: {
    whitespace: true,
    identifiers: true,
    syntax: true,
  },
})
```

LANGUAGE: bash
CODE:
```
$ bun build ./index.tsx --outdir ./out --minify-whitespace --minify-identifiers --minify-syntax
```

----------------------------------------

TITLE: Accessing ReadableStream from Response in TypeScript
DESCRIPTION: Demonstrates how to directly access and use the ReadableStream object from a fetch response for more control over streaming.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
const response = await fetch("http://example.com");

const stream = response.body;

const reader = stream.getReader();
const { value, done } = await reader.read();
```

----------------------------------------

TITLE: Custom TLS Validation with Fetch in TypeScript
DESCRIPTION: Demonstrates how to implement custom TLS validation logic by providing a checkServerIdentity function in the TLS options.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_14

LANGUAGE: typescript
CODE:
```
await fetch("https://example.com", {
  tls: {
    checkServerIdentity: (hostname, peerCertificate) => {
      // Return an Error if the certificate is invalid
    },
  },
});
```

----------------------------------------

TITLE: Inlining Environment Variables By Prefix - env: "PUBLIC_*" - Bun CLI - CLI
DESCRIPTION: Equivalent prefix-based environment variable inlining using the CLI. Demonstrates use of shell variables and the --env flag. Only variables matching the supplied prefix will be replaced in the bundle output.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_39

LANGUAGE: CLI
CODE:
```
$ FOO=bar BAZ=123 ACME_PUBLIC_URL=https://acme.com bun build ./index.tsx --outdir ./out --env 'ACME_PUBLIC_*'
```

----------------------------------------

TITLE: Enabling Per-Message WebSocket Compression in Bun
DESCRIPTION: Shows how to selectively enable compression for individual WebSocket messages by passing true as the second parameter to the ws.send() method. This allows for more granular control over which messages get compressed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/websocket/compression.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
Bun.serve({
  // ...
  websocket: {
    async message(ws, message) {
      // send a compressed message
      ws.send(message, true);
    },
  },
});
```

----------------------------------------

TITLE: Using bcrypt Algorithm in Bun.js
DESCRIPTION: Demonstrates how to use the bcrypt algorithm instead of the default Argon2id. Shows configuration of the cost parameter which determines the computational complexity.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/hash-a-password.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// use bcrypt
const bcryptHash = await Bun.password.hash(password, {
  algorithm: "bcrypt",
  cost: 4, // number between 4-31
});
```

----------------------------------------

TITLE: Updating package.json for Development Dependencies
DESCRIPTION: This JSON diff illustrates the changes made to the package.json file when adding a development dependency. It shows the addition of the 'zod' package to the devDependencies section.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/add-dev.md#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{
  "devDependencies": {
+   "zod": "^3.0.0"
  }
}
```

----------------------------------------

TITLE: Importing PrismaClient in TypeScript
DESCRIPTION: TypeScript code to import the generated Prisma Client from @prisma/client package. This is the first step to interact with the database in your application.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/prisma.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import {PrismaClient} from "@prisma/client";
```

----------------------------------------

TITLE: Svelte Plugin Implementation
DESCRIPTION: A plugin implementation that enables importing and compiling Svelte components in Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/plugins.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { plugin } from "bun";

await plugin({
  name: "svelte loader",
  async setup(build) {
    const { compile } = await import("svelte/compiler");

    // when a .svelte file is imported...
    build.onLoad({ filter: /\.svelte$/ }, async ({ path }) => {

      // read and compile it with the Svelte compiler
      const file = await Bun.file(path).text();
      const contents = compile(file, {
        filename: path,
        generate: "ssr",
      }).js.code;

      // and return the compiled source code as "js"
      return {
        contents,
        loader: "js",
      };
    });
  },
});
```

----------------------------------------

TITLE: Integrating a Native Plugin into Bun Build Process (TypeScript)
DESCRIPTION: Demonstrates how to configure and use a compiled native NAPI plugin within a Bun build script using `Bun.build()`. It imports the native addon, defines a plugin configuration, and registers the native `onBeforeParse` hook by specifying the NAPI module (`myNativeAddon`), the exported symbol (`replace_foo_with_bar`), and filtering for specific files (`**/*.tsx`).
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/plugins.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
import myNativeAddon from "./my-native-addon";
Bun.build({
  entrypoints: ["./app.tsx"],
  plugins: [
    {
      name: "my-plugin",

      setup(build) {
        build.onBeforeParse(
          {
            namespace: "file",
            filter: "**/*.tsx",
          },
          {
            napiModule: myNativeAddon,
            symbol: "replace_foo_with_bar",
            // external: myNativeAddon.getSharedState()
          },
        );
      },
    },
  ],
});
```

----------------------------------------

TITLE: Basic SQL Queries with Template Literals in TypeScript
DESCRIPTION: Demonstrates basic SELECT queries using Bun's SQL tagged template literals with parameterized values for safe query construction.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { sql } from "bun";

const users = await sql`
  SELECT * FROM users
  WHERE active = ${true}
  LIMIT ${10}
`;

// Select with multiple conditions
const activeUsers = await sql`
  SELECT * 
  FROM users 
  WHERE active = ${true} 
  AND age >= ${18}
`;
```

----------------------------------------

TITLE: Bulk Insert Operations in TypeScript
DESCRIPTION: Demonstrates how to perform bulk insertions using arrays of objects with Bun's SQL client.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const users = [
  { name: "Alice", email: "alice@example.com" },
  { name: "Bob", email: "bob@example.com" },
  { name: "Charlie", email: "charlie@example.com" },
];

await sql`INSERT INTO users ${sql(users)}`;
```

----------------------------------------

TITLE: Configuring Basic TLS for Bun HTTP Server in TypeScript
DESCRIPTION: This snippet shows how to set up basic TLS configuration for a Bun HTTP server. It uses the 'tls' key to specify the certificate and private key files, which are read using Bun.file().
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/tls.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const server = Bun.serve({
  fetch: request => new Response("Welcome to Bun!"),
  tls: {
    cert: Bun.file("cert.pem"),
    key: Bun.file("key.pem"),
  },
});
```

----------------------------------------

TITLE: Compiled Output for LAB/Perceptual Color Spaces - Bun Bundler CSS
DESCRIPTION: Bun generates layered fallbacks for modern color formats: RGB/hex for legacy browsers, P3 for wide-gamut support, and preserves original advanced functions. Output covers all levels of browser support without manual intervention. Applies to color and background properties.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_9

LANGUAGE: css
CODE:
```
.vibrant-element {\n  /* Fallback to closest RGB approximation */\n  color: #ff0f52;\n  /* P3 fallback for browsers with wider gamut support */\n  color: color(display-p3 1 0.12 0.37);\n  /* Original value preserved for browsers that support it */\n  color: lab(55% 78 35);\n\n  background: linear-gradient(to right, #cd4e15, #3887ab);\n  background: linear-gradient(\n    to right,\n    oklch(65% 0.25 10deg),\n    oklch(65% 0.25 250deg)\n  );\n}
```

----------------------------------------

TITLE: Reading Output from Pointer and Writing to File in Bun (TypeScript)
DESCRIPTION: Explains how to consume an FFI-encoded pointer (e.g., PNG data) by converting the pointer to an ArrayBuffer, creating a Uint8Array, and writing it to disk using Bun.write. Assumes the pointer is zero-terminated. Useful for outputting binary data from native code to files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/ffi.md#2025-04-22_snippet_16

LANGUAGE: typescript
CODE:
```
const out = encode_png(
  // pixels will be passed as a pointer
  pixels,

  // dimensions:
  128,
  128,
);

// assuming it is 0-terminated, it can be read like this:
let png = new Uint8Array(toArrayBuffer(out));

// save it to disk:
await Bun.write("out.png", png);

```

----------------------------------------

TITLE: Element Handler Operations in HTMLRewriter
DESCRIPTION: Shows various element handler operations including attribute manipulation, content modification, and element positioning.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/html-rewriter.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
rewriter.on("div.content", {
  // Handle elements
  element(element) {
    element.setAttribute("class", "new-content");
    element.append("<p>New content</p>", { html: true });
  },
  // Handle text nodes
  text(text) {
    text.replace("new text");
  },
  // Handle comments
  comments(comment) {
    comment.remove();
  },
});
```

----------------------------------------

TITLE: Scanning Directory with TypeScript Glob Pattern
DESCRIPTION: Demonstrates how to scan a directory recursively for TypeScript files using Bun's Glob class.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/glob.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Glob } from "bun";

const glob = new Glob("**/*.ts");

// Scans the current working directory and each of its sub-directories recursively
for await (const file of glob.scan(".")) {
  console.log(file); // => "index.ts"
}
```

----------------------------------------

TITLE: Compressing and Decompressing Data with Bun DEFLATE
DESCRIPTION: Shows how to compress a string into a Uint8Array using Bun.deflateSync() and decompress it back using Bun.inflateSync(). The example demonstrates the conversion between string data and compressed binary format.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/deflate.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const data = Buffer.from("Hello, world!");
const compressed = Bun.deflateSync("Hello, world!");
// => Uint8Array

const decompressed = Bun.inflateSync(compressed);
// => Uint8Array
```

----------------------------------------

TITLE: Converting ReadableStream to Array of Numbers in TypeScript
DESCRIPTION: Two approaches for converting a ReadableStream to an array of numbers: the standard Response-based method and the optimized Bun utility function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_22

LANGUAGE: typescript
CODE:
```
// with Response
const arr = await new Response(stream).bytes();
Array.from(arr);

// with Bun function
Array.from(new Uint8Array(Bun.readableStreamToArrayBuffer(stream)));
```

----------------------------------------

TITLE: Installing Tarball Dependencies with Bun
DESCRIPTION: Commands and configuration for installing packages from tarball URLs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/add.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
$ bun add zod@https://registry.npmjs.org/zod/-/zod-3.21.4.tgz
```

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "zod": "https://registry.npmjs.org/zod/-/zod-3.21.4.tgz"
  }
}
```

----------------------------------------

TITLE: IPC Between Bun and Node.js Processes in JavaScript
DESCRIPTION: Shows how to set up IPC between a Bun process and a Node.js process using JSON serialization.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
if (typeof Bun !== "undefined") {
  const prefix = `[bun ${process.versions.bun} 🐇]`;
  const node = Bun.spawn({
    cmd: ["node", __filename],
    ipc({ message }) {
      console.log(message);
      node.send({ message: `${prefix} 👋 hey node` });
      node.kill();
    },
    stdio: ["inherit", "inherit", "inherit"],
    serialization: "json",
  });

  node.send({ message: `${prefix} 👋 hey node` });
} else {
  const prefix = `[node ${process.version}]`;
  process.on("message", ({ message }) => {
    console.log(message);
    process.send({ message: `${prefix} 👋 hey bun` });
  });
}
```

----------------------------------------

TITLE: Initializing an EdgeDB Project and Instance using the CLI
DESCRIPTION: This command initializes a new EdgeDB project in the current directory. It walks the user through steps including instance naming, version selection, and creates project files (`edgedb.toml`, schema dir). Interactive prompts are presented for configuration; output includes confirmation and migration messages. Dependencies: EdgeDB CLI installed. Input: User responses to prompts. Output: Project configuration suitable for starting development.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/edgedb.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
edgedb project init
No `edgedb.toml` found in `/Users/colinmcd94/Documents/bun/fun/examples/my-edgedb-app` or above
Do you want to initialize a new project? [Y/n]
> Y
Specify the name of EdgeDB instance to use with this project [default: my_edgedb_app]:
> my_edgedb_app
Checking EdgeDB versions...
Specify the version of EdgeDB to use with this project [default: x.y]:
> x.y
┌─────────────────────┬────────────────────────────────────────────────────────────────────────┐
│ Project directory   │ /Users/colinmcd94/Documents/bun/fun/examples/my-edgedb-app             │
│ Project config      │ /Users/colinmcd94/Documents/bun/fun/examples/my-edgedb-app/edgedb.toml │
│ Schema dir (empty)  │ /Users/colinmcd94/Documents/bun/fun/examples/my-edgedb-app/dbschema    │
│ Installation method │ portable package                                                       │
│ Version             │ x.y+6d5921b                                                            │
│ Instance name       │ my_edgedb_app                                                          │
└─────────────────────┴────────────────────────────────────────────────────────────────────────┘
Version x.y+6d5921b is already downloaded
Initializing EdgeDB instance...
Applying migrations...
Everything is up to date. Revision initial
Project initialized.
To connect to my_edgedb_app, run `edgedb`
```

----------------------------------------

TITLE: Using Bail Option with Bun Test Runner
DESCRIPTION: Shows how to replace Jest's bail configuration with Bun's CLI flag to stop testing after a certain number of failures.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/migrate-from-jest.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
$ bun test --bail=3
```

----------------------------------------

TITLE: Setting Headers on WebSocket Upgrade (TypeScript)
DESCRIPTION: This example demonstrates how to attach additional headers to the `101 Switching Protocols` response during the WebSocket upgrade process using the `server.upgrade()` method. This can be used to set cookies or other headers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/websockets.md#_snippet_4

LANGUAGE: typescript
CODE:
```
Bun.serve({
  fetch(req, server) {
    const sessionId = await generateSessionId();
    server.upgrade(req, {
      headers: {
        "Set-Cookie": `SessionId=${sessionId}`,
      },
    });
  },
  websocket: {}, // handlers
});
```

----------------------------------------

TITLE: Configuring Bun S3Client for Cloudflare R2 - TypeScript
DESCRIPTION: This snippet demonstrates how to instantiate Bun's S3Client for Cloudflare R2 by specifying the R2 endpoint containing the account ID. It requires the 'bun' package and valid access credentials. The bucket, accessKeyId, and secretAccessKey are passed in, and the endpoint format should match your Cloudflare R2 instance. No region parameter is required for R2 endpoints; ensure access credentials and bucket name are correct for connections.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_13

LANGUAGE: typescript
CODE:
```
import { S3Client } from \"bun\";

// CloudFlare R2
const r2 = new S3Client({
  accessKeyId: \"access-key\",
  secretAccessKey: \"secret-key\",
  bucket: \"my-bucket\",
  endpoint: \"https://<account-id>.r2.cloudflarestorage.com\",
});
```

----------------------------------------

TITLE: Writing a Simple Bun Test in TypeScript
DESCRIPTION: Provides an example TypeScript test file (`math.test.ts`) demonstrating the basic structure of a Bun test using the `test` function and `expect` assertions from the `bun:test` module. This specific test checks if the sum of 2 and 2 equals 4.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
// math.test.ts
import { expect, test } from "bun:test";

test("2 + 2", () => {
  expect(2 + 2).toBe(4);
});
```

----------------------------------------

TITLE: Extracting Social Metadata from Webpages using Bun's HTMLRewriter in TypeScript
DESCRIPTION: This code provides a function that extracts social media metadata (Open Graph tags, Twitter Card tags, and standard HTML elements) from a webpage URL. It defines an interface for social metadata, fetches the page content, and uses Bun's HTMLRewriter to efficiently parse the HTML and extract relevant tags. The function also handles relative image URLs by converting them to absolute URLs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/html-rewriter/extract-social-meta.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface SocialMetadata {
  title?: string;
  description?: string;
  image?: string;
  url?: string;
  siteName?: string;
  type?: string;
}

async function extractSocialMetadata(url: string): Promise<SocialMetadata> {
  const metadata: SocialMetadata = {};
  const response = await fetch(url);

  const rewriter = new HTMLRewriter()
    // Extract Open Graph meta tags
    .on('meta[property^="og:"]', {
      element(el) {
        const property = el.getAttribute("property");
        const content = el.getAttribute("content");
        if (property && content) {
          // Convert "og:image" to "image" etc.
          const key = property.replace("og:", "") as keyof SocialMetadata;
          metadata[key] = content;
        }
      },
    })
    // Extract Twitter Card meta tags as fallback
    .on('meta[name^="twitter:"]', {
      element(el) {
        const name = el.getAttribute("name");
        const content = el.getAttribute("content");
        if (name && content) {
          const key = name.replace("twitter:", "") as keyof SocialMetadata;
          // Only use Twitter Card data if we don't have OG data
          if (!metadata[key]) {
            metadata[key] = content;
          }
        }
      },
    })
    // Fallback to regular meta tags
    .on('meta[name="description"]', {
      element(el) {
        const content = el.getAttribute("content");
        if (content && !metadata.description) {
          metadata.description = content;
        }
      },
    })
    // Fallback to title tag
    .on("title", {
      text(text) {
        if (!metadata.title) {
          metadata.title = text.text;
        }
      },
    });

  // Process the response
  await rewriter.transform(response).blob();

  // Convert relative image URLs to absolute
  if (metadata.image && !metadata.image.startsWith("http")) {
    try {
      metadata.image = new URL(metadata.image, url).href;
    } catch {
      // Keep the original URL if parsing fails
    }
  }

  return metadata;
}

// Example usage
const metadata = await extractSocialMetadata("https://bun.sh");
console.log(metadata);
// {
//   title: "Bun — A fast all-in-one JavaScript runtime",
//   description: "Bundle, transpile, install and run JavaScript & TypeScript projects — all in Bun. Bun is a fast all-in-one JavaScript runtime & toolkit designed for speed, complete with a bundler, test runner, and Node.js-compatible package manager.",
//   image: "https://bun.sh/share.jpg",
//   type: "website",
//   ...
// }
```

----------------------------------------

TITLE: Error Handling in Bun Shell
DESCRIPTION: Demonstrates how to handle errors in Bun Shell commands using try-catch and the ShellError object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

try {
  const output = await $`something-that-may-fail`.text();
  console.log(output);
} catch (err) {
  console.log(`Failed with code ${err.exitCode}`);
  console.log(err.stdout.toString());
  console.log(err.stderr.toString());
}
```

----------------------------------------

TITLE: Generating Set-Cookie Headers from CookieMap
DESCRIPTION: Example of using toSetCookieHeaders() to get Set-Cookie header values from a CookieMap in a Node.js HTTP server context.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
import { createServer } from "node:http";
import { CookieMap } from "bun";

const server = createServer((req, res) => {
  const cookieHeader = req.headers.cookie || "";
  const cookies = new CookieMap(cookieHeader);

  cookies.set("view-count", Number(cookies.get("view-count") || "0") + 1);
  cookies.delete("session");

  res.writeHead(200, {
    "Content-Type": "text/plain",
    "Set-Cookie": cookies.toSetCookieHeaders(),
  });
  res.end(`Found ${cookies.size} cookies`);
});

server.listen(3000, () => {
  console.log("Server running at http://localhost:3000/");
});
```

----------------------------------------

TITLE: Converting Entire ArrayBuffer to Buffer using Buffer.from() (TypeScript)
DESCRIPTION: This snippet demonstrates the basic conversion of a JavaScript `ArrayBuffer` into a Node.js `Buffer`. It initializes an `ArrayBuffer` of 64 bytes and then uses the static `Buffer.from(arrayBuffer)` method to create a new `Buffer` instance that references the same underlying memory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/arraybuffer-to-buffer.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
const arrBuffer = new ArrayBuffer(64);
const nodeBuffer = Buffer.from(arrBuffer);
```

----------------------------------------

TITLE: Configuring Workspaces in package.json
DESCRIPTION: Example `package.json` demonstrating how to define workspaces using the `workspaces` field. This allows Bun to manage dependencies for multiple packages within a monorepo structure, pointing to directories containing sub-packages.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/install.md#2025-04-22_snippet_6

LANGUAGE: json
CODE:
```
{
  "name": "my-app",
  "version": "1.0.0",
  "workspaces": ["packages/*"],
  "dependencies": {
    "preact": "^10.5.13"
  }
}
```

----------------------------------------

TITLE: Creating and Running an Elysia Project with Bun (Bash)
DESCRIPTION: This Bash script demonstrates the commands to initialize a new Elysia project named 'myapp' using `bun create elysia`, navigate into the created project directory, and start the development server using `bun run dev`. These commands require Bun to be installed on the system.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/elysia.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ bun create elysia myapp
$ cd myapp
$ bun run dev
```

----------------------------------------

TITLE: Type-Safe Route Parameters in Bun.serve
DESCRIPTION: Implementation of type-safe route parameters in Bun.serve that provides autocomplete support in TypeScript when accessing request.params. Shows both implicit and explicit type parameter passing.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import type { BunRequest } from "bun";

Bun.serve({
  routes: {
    // TypeScript knows the shape of params when passed as a string literal
    "/orgs/:orgId/repos/:repoId": req => {
      const { orgId, repoId } = req.params;
      return Response.json({ orgId, repoId });
    },

    "/orgs/:orgId/repos/:repoId/settings": (
      // optional: you can explicitly pass a type to BunRequest:
      req: BunRequest<"/orgs/:orgId/repos/:repoId/settings">,
    ) => {
      const { orgId, repoId } = req.params;
      return Response.json({ orgId, repoId });
    },
  },
});
```

----------------------------------------

TITLE: Importing and Using Bun.color Macro in TypeScript
DESCRIPTION: This TypeScript code imports the `color` function from Bun specifically as a macro. It then calls this macro with a CSS hex color (`#f00`) and the format type (`"css"`), logging the result. This code is designed to be processed by the Bun bundler, which will evaluate the macro at build time.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/color.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
```ts#client-side.ts
import { color } from "bun" with { type: "macro" };

console.log(color("#f00", "css"));
```
```

----------------------------------------

TITLE: Using Bun.sleepSync() for Synchronous Delays
DESCRIPTION: Shows how to use Bun.sleepSync() to create blocking synchronous delays in code execution.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
console.log("hello");
Bun.sleepSync(1000); // blocks thread for one second
console.log("hello one second later!");
```

----------------------------------------

TITLE: Building with Code Splitting - Bun CLI - CLI
DESCRIPTION: Shows enabling code splitting with the Bun CLI. Includes splitting flag, causing shared code to be output as separate chunks, reducing duplication. Bun CLI must be available; outputs multiple files in the specified directory if code is shared between entrypoints.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_26

LANGUAGE: CLI
CODE:
```
$ bun build ./index.tsx --outdir ./out --splitting
```

----------------------------------------

TITLE: Creating Bun.Cookie Instances
DESCRIPTION: Different ways to create a Bun.Cookie instance, including basic cookies, cookies with options, parsing from a cookie string, and creating from option objects.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
import { Cookie } from "bun";

// Create a basic cookie
const cookie = new Bun.Cookie("name", "value");

// Create a cookie with options
const secureSessionCookie = new Bun.Cookie("session", "abc123", {
  domain: "example.com",
  path: "/admin",
  expires: new Date(Date.now() + 86400000), // 1 day
  httpOnly: true,
  secure: true,
  sameSite: "strict",
});

// Parse from a cookie string
const parsedCookie = new Bun.Cookie("name=value; Path=/; HttpOnly");

// Create from an options object
const objCookie = new Bun.Cookie({
  name: "theme",
  value: "dark",
  maxAge: 3600,
  secure: true,
});
```

----------------------------------------

TITLE: Converting ReadableStream to TypedArray in TypeScript
DESCRIPTION: Two approaches for converting a ReadableStream to a TypedArray (Int8Array in this example): the standard Response-based method and the optimized Bun utility function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_18

LANGUAGE: typescript
CODE:
```
// with Response
const buf = await new Response(stream).arrayBuffer();
new Int8Array(buf);

// with Bun function
new Int8Array(Bun.readableStreamToArrayBuffer(stream));
```

----------------------------------------

TITLE: Building a Bundle with JavaScript API
DESCRIPTION: This code demonstrates creating a bundle using Bun's JavaScript API, specifying entry points and output directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './out',
})
```

----------------------------------------

TITLE: Running Query Script and Displaying Results (Shell)
DESCRIPTION: Executes the updated `index.ts` script (which now queries the `movies` table) using `bun run`. The output displays an array of JavaScript objects, each representing a row fetched from the `movies` table, including `id`, `title`, and `releaseYear`. Assumes `index.ts` has been updated as per the previous snippet, and the database has been seeded.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/drizzle.md#2025-04-22_snippet_12

LANGUAGE: sh
CODE:
```
$ bun run index.ts
bun run index.ts
[
  {
    id: 1,
    title: "The Matrix",
    releaseYear: 1999
  }, {
    id: 2,
    title: "The Matrix Reloaded",
    releaseYear: 2003
  }, {
    id: 3,
    title: "The Matrix Revolutions",
    releaseYear: 2003
  }
]
```

----------------------------------------

TITLE: Configuring S3Client for AWS S3
DESCRIPTION: Shows how to configure the S3Client specifically for AWS S3, which is the default service. Demonstrates using region or endpoint options for AWS S3.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
import { S3Client } from "bun";

// AWS S3
const s3 = new S3Client({
  accessKeyId: "access-key",
  secretAccessKey: "secret-key",
  bucket: "my-bucket",
  // endpoint: "https://s3.us-east-1.amazonaws.com",
  // region: "us-east-1",
});
```

----------------------------------------

TITLE: Adding a Linked Package to Dependencies - package.json - JSON-Diff
DESCRIPTION: This snippet demonstrates modifying the dependencies in a project's package.json to specify a linked package using Bun's special 'link:' version specifier. The addition triggers Bun to symlink the package from the local registry instead of installing from npm. Dependency: Bun CLI. Key parameters: dependency field, package name, version specifier. Inputs: package.json structure before and after; Output: modified dependencies entry for the linked package.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/link.md#2025-04-22_snippet_2

LANGUAGE: json-diff
CODE:
```
  {\n    "name": "my-app",\n    "version": "1.0.0",\n    "dependencies": {\n+     "cool-pkg": "link:cool-pkg"\n    }\n  }
```

----------------------------------------

TITLE: Reading File to ArrayBuffer with Bun
DESCRIPTION: Demonstrates loading a file into an ArrayBuffer using Bun.file(). The BunFile class extends Blob and provides lazy file reading capabilities in various formats.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/read-file/arraybuffer.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const path = "/path/to/package.json";
const file = Bun.file(path);

const buffer = await file.arrayBuffer();
```

----------------------------------------

TITLE: Executing Code from Stdin with Bun Run -
DESCRIPTION: Demonstrates using `bun run -` to execute JavaScript code piped directly from standard input (stdin) via the `echo` command. This avoids the need to write the code to a temporary file before execution.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/run.md#2025-04-22_snippet_14

LANGUAGE: bash
CODE:
```
$ echo "console.log('Hello')" | bun run -
Hello
```

----------------------------------------

TITLE: Implementing Range Requests for File Streaming in Bun
DESCRIPTION: Demonstrates how to implement HTTP range requests to stream partial file content. This example parses the Range header and uses the slice() method on a BunFile object to return only the requested portion of a file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_14

LANGUAGE: typescript
CODE:
```
Bun.serve({
  fetch(req) {
    // parse `Range` header
    const [start = 0, end = Infinity] = req.headers
      .get("Range") // Range: bytes=0-100
      .split("=") // ["Range: bytes", "0-100"]
      .at(-1) // "0-100"
      .split("-") // ["0", "100"]
      .map(Number); // [0, 100]

    // return a slice of the file
    const bigFile = Bun.file("./big-video.mp4");
    return new Response(bigFile.slice(start, end));
  },
});
```

----------------------------------------

TITLE: Adding Git Dependencies with Various Protocols using Bun
DESCRIPTION: These commands demonstrate different ways to add Git dependencies using Bun, including HTTPS, SSH, and GitHub shorthand. They also show how to specify a particular version or branch.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/add-git.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
$ bun add git+https://github.com/lodash/lodash.git
$ bun add git+ssh://github.com/lodash/lodash.git#4.17.21
$ bun add git@github.com:lodash/lodash.git
$ bun add github:colinhacks/zod
```

----------------------------------------

TITLE: Configuring TypeScript for Bun Projects
DESCRIPTION: TypeScript configuration in tsconfig.json needed for Bun compatibility. This includes setting the module resolution strategy to 'bundler' and enabling ESNext features.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/quickstart.md#2025-04-22_snippet_3

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "lib": ["ESNext"],
    "target": "ESNext",
    "module": "ESNext",
    "moduleDetection": "force",
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,
  }
}
```

----------------------------------------

TITLE: Configuring Azure Artifacts Registry Using Environment Variable for Bun Install
DESCRIPTION: This bash command shows how to set the NPM_CONFIG_REGISTRY environment variable to configure Azure Artifacts without using bunfig.toml. It includes the registry URL with username and password as query parameters.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/azure-artifacts.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
NPM_CONFIG_REGISTRY=https://pkgs.dev.azure.com/my-azure-artifacts-user/_packaging/my-azure-artifacts-user/npm/registry/:username=<USERNAME>:_password=<PASSWORD>
```

----------------------------------------

TITLE: Reading individual bytes from multi-byte values with DataView
DESCRIPTION: Demonstrates how to access individual bytes that make up a multi-byte value previously written to an ArrayBuffer. This shows the flexibility of DataView for working with binary data at different granularities.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_4

LANGUAGE: ts
CODE:
```
console.log(dv.getUint8(1)); // => 2
console.log(dv.getUint8(2)); // => 1
```

----------------------------------------

TITLE: Escaping HTML special characters with Bun.escapeHTML()
DESCRIPTION: Demonstrates how to use Bun.escapeHTML() to safely escape HTML special characters in a string. The function converts characters like quotes, ampersands, and angle brackets to their HTML entity equivalents, making the content safe to include in HTML documents.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/escape-html.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
Bun.escapeHTML("<script>alert('Hello World!')</script>");
// &lt;script&gt;alert(&#x27;Hello World!&#x27;)&lt;&#x2F;script&gt;
```

----------------------------------------

TITLE: Creating an Optimized Direct ReadableStream
DESCRIPTION: Illustrates Bun's optimized direct ReadableStream implementation that avoids unnecessary data copying and queue management. Uses the controller.write method instead of enqueue.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/streams.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const stream = new ReadableStream({
  type: "direct",
  pull(controller) {
    controller.write("hello");
    controller.write("world");
  },
});
```

----------------------------------------

TITLE: Basic Snapshot Testing in TypeScript with Bun
DESCRIPTION: Demonstrates basic snapshot testing using the toMatchSnapshot() matcher. The test compares a string value against a saved snapshot stored in a __snapshots__ directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/snapshots.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { test, expect } from "bun:test";

test("snap", () => {
  expect("foo").toMatchSnapshot();
});
```

----------------------------------------

TITLE: Converting ReadableStream to Blob using Bun utility
DESCRIPTION: This snippet demonstrates how to use Bun's readableStreamToBlob function to convert a ReadableStream instance into a Blob object. The function returns a Promise that resolves to a Blob containing the entire contents of the stream.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/streams/to-blob.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const stream = new ReadableStream();
const blob = await Bun.readableStreamToBlob(stream);
```

----------------------------------------

TITLE: Demonstrating Prop Punning in JSX with Bun and React in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates two syntactic approaches to passing props into JSX components in Bun: the traditional explicit key-value assignment, and the Bun-supported prop punning shorthand for variables with matching prop names. No external dependencies aside from React and Bun's transpiler integration are required. The component expects a 'className' prop, and returns a div with the provided className using both syntaxes. This improves developer ergonomics and code brevity.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/ecosystem/react.md#2025-04-22_snippet_2

LANGUAGE: TypeScript
CODE:
```
function Div(props: {className: string;}) {
  const {className} = props;

  // without punning
  return <div className={className} />;
  // with punning
  return <div {className} />;
}
```

----------------------------------------

TITLE: Converting ReadableStreams with Bun utility functions in TypeScript
DESCRIPTION: Demonstrates Bun's convenience functions for consuming ReadableStream data and converting it to various formats. Shows examples for conversions to ArrayBuffer, Uint8Array, Blob, JSON, text, and more.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_26

LANGUAGE: typescript
CODE:
```
const stream = (await fetch("https://bun.sh")).body;
stream; // => ReadableStream

await Bun.readableStreamToArrayBuffer(stream);
// => ArrayBuffer

await Bun.readableStreamToBytes(stream);
// => Uint8Array

await Bun.readableStreamToBlob(stream);
// => Blob

await Bun.readableStreamToJSON(stream);
// => object

await Bun.readableStreamToText(stream);
// => string

// returns all chunks as an array
await Bun.readableStreamToArray(stream);
// => unknown[]

// returns all chunks as a FormData object (encoded as x-www-form-urlencoded)
await Bun.readableStreamToFormData(stream);

// returns all chunks as a FormData object (encoded as multipart/form-data)
await Bun.readableStreamToFormData(stream, multipartFormBoundary);
```

----------------------------------------

TITLE: Composing Classes Using CSS Modules - CSS
DESCRIPTION: This example demonstrates how to use the 'composes' property in a CSS Module to compose the '.button' class from a separate '.background' class within the same file. Bun will merge the composed class’s styles into the resulting class, allowing style reuse. No dependencies other than Bun's CSS modules support. Inputs: class selectors with 'composes' property; output: merged class definitions. Limitation: 'composes' must precede other properties and be applied only to single class selectors.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css_modules.md#2025-04-22_snippet_4

LANGUAGE: css
CODE:
```
/* styles.module.css */
.button {
  composes: background;
  color: red;
}

.background {
  background-color: blue;
}

```

----------------------------------------

TITLE: Accessing Subset of ArrayBuffer with Uint8Array Offset and Length in TypeScript
DESCRIPTION: Shows how a Uint8Array can be initialized as a view over a subset of an existing ArrayBuffer by specifying the byteOffset and byteLength parameters. The arr.buffer property returns the full ArrayBuffer (64 bytes), while arr.byteOffset and arr.byteLength specify the view's start offset (16 bytes) and length (32 bytes), respectively. This technique is important for managing partial views over binary data, often used in parsing protocols or file formats.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/typedarray-to-arraybuffer.md#2025-04-22_snippet_1

LANGUAGE: TypeScript
CODE:
```
const arr = new Uint8Array(64, 16, 32);
arr.buffer; // => ArrayBuffer(64)
arr.byteOffset; // => 16
arr.byteLength; // => 32
```

----------------------------------------

TITLE: Installing Sentry SDK for Bun
DESCRIPTION: Command to install the Sentry Bun SDK package using Bun's package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/sentry.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun add @sentry/bun
```

----------------------------------------

TITLE: Getting Bytes Written with Bun.write() in TypeScript
DESCRIPTION: This example shows that Bun.write() returns the number of bytes written to disk. It can be useful for confirming the amount of data written or for logging purposes.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/basic.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const path = "./file.txt";
const bytes = await Bun.write(path, "Lorem ipsum");
// => 11
```

----------------------------------------

TITLE: Defining and Logging a React JSX Component with Bun in TypeScript
DESCRIPTION: This TypeScript snippet defines a functional React component that accepts a message prop and renders it inside a styled H1. It demonstrates how JSX files are natively supported and transpiled by Bun, and also logs a React element to the console. Dependencies include Bun and React typings for TypeScript. The component expects a 'message' string prop, and the output displays the serialized JSX element in the Bun runtime, aiding debugging. Input is a single prop; output is the console representation of the JSX element.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/ecosystem/react.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
function Component(props: {message: string}) {
  return (
    <body>
      <h1 style={{color: 'red'}}>{props.message}</h1>
    </body>
  );
}

console.log(<Component message="Hello world!" />);
```

----------------------------------------

TITLE: Utilizing Logical Properties for International Layouts - CSS
DESCRIPTION: Illustrates how to leverage CSS logical properties to create layouts responsive to writing modes and directionality, with examples for both standard syntax and for browser fallback to physical properties. Requires understanding of logical vs. physical properties and may invoke a post-processing step via Bun for legacy browser support.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_17

LANGUAGE: css
CODE:
```
.multilingual-component {
  /* Margin that adapts to writing direction */
  margin-inline-start: 1rem;

  /* Padding that makes sense regardless of text direction */
  padding-block: 1rem 2rem;

  /* Border radius for the starting corner at the top */
  border-start-start-radius: 4px;

  /* Size that respects the writing mode */
  inline-size: 80%;
  block-size: auto;
}
```

LANGUAGE: css
CODE:
```
/* For left-to-right languages */
.multilingual-component:dir(ltr) {
  margin-left: 1rem;
  padding-top: 1rem;
  padding-bottom: 2rem;
  border-top-left-radius: 4px;
  width: 80%;
  height: auto;
}

/* For right-to-left languages */
.multilingual-component:dir(rtl) {
  margin-right: 1rem;
  padding-top: 1rem;
  padding-bottom: 2rem;
  border-top-right-radius: 4px;
  width: 80%;
  height: auto;
}
```

----------------------------------------

TITLE: Running Svelte Tests with Bun
DESCRIPTION: Command to run the Svelte component tests using Bun's test runner, which will use the configured plugin to load and test the Svelte components.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/svelte-test.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
$ bun test
```

----------------------------------------

TITLE: Creating TypedArray from Arrays and Other TypedArrays (JavaScript/TypeScript)
DESCRIPTION: This code demonstrates constructing a new typed array (Uint8Array) from a plain array of numbers, allowing direct byte initialization. It also shows how a new typed array can be created as a copy of another typed array, which duplicates the existing buffer. No external libraries are needed; works wherever TypedArrays are available. The resulting Uint8Arrays contain either the source numbers or a copy of the source array's contents.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_11

LANGUAGE: TypeScript
CODE:
```
// from an array of numbers
const arr1 = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7]);
arr1[0]; // => 0;
arr1[7]; // => 7;

// from another typed array
const arr2 = new Uint8Array(arr);
```

----------------------------------------

TITLE: Creating and Applying EdgeDB Migrations using CLI (Shell)
DESCRIPTION: This shell sequence demonstrates creating an initial database migration based on the schema and then applying it. Output details include file paths and migration summaries. Dependencies: EdgeDB CLI, defined schema. Input: None. Output: Migration file creation and schema applied on database instance.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/edgedb.md#2025-04-22_snippet_7

LANGUAGE: sh
CODE:
```
edgedb migration create
Created /Users/colinmcd94/Documents/bun/fun/examples/my-edgedb-app/dbschema/migrations/00001.edgeql, id: m1uwekrn4ni4qs7ul7hfar4xemm5kkxlpswolcoyqj3xdhweomwjrq
edgedb migrate
Applied m1uwekrn4ni4qs7ul7hfar4xemm5kkxlpswolcoyqj3xdhweomwjrq (00001.edgeql)
```

----------------------------------------

TITLE: Fetching Local Files with file:// Protocol in TypeScript
DESCRIPTION: Demonstrates how to fetch local files using the file:// protocol, which provides a consistent way to read local files using the fetch API.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_18

LANGUAGE: typescript
CODE:
```
const response = await fetch("file:///path/to/file.txt");
const text = await response.text();
```

----------------------------------------

TITLE: Start a WebSocket Server with Bun.serve (TypeScript)
DESCRIPTION: This snippet demonstrates how to start a basic WebSocket server using Bun.serve(). It upgrades incoming HTTP requests to WebSocket connections and returns an error response if the upgrade fails. The websocket handler is initialized as an empty object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/websockets.md#_snippet_0

LANGUAGE: typescript
CODE:
```
Bun.serve({
  fetch(req, server) {
    // upgrade the request to a WebSocket
    if (server.upgrade(req)) {
      return; // do not return a Response
    }
    return new Response("Upgrade failed", { status: 500 });
  },
  websocket: {}, // handlers
});
```

----------------------------------------

TITLE: Simulating a Publish with Dry-Run using Bun CLI - Shell
DESCRIPTION: Uses the `--dry-run` flag to simulate the package publishing process with Bun CLI. This action runs through all packaging steps and outputs what would happen, without actually uploading files to the registry. Useful for validating changes and troubleshooting without affecting registry state. Requires project structure and Bun; outputs indicative process details with no side effects.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/publish.md#2025-04-22_snippet_6

LANGUAGE: sh
CODE:
```
$ bun publish --dry-run
```

----------------------------------------

TITLE: Listing S3 Bucket Objects with S3Client.list
DESCRIPTION: Shows how to list objects in an S3 bucket with pagination and filtering options using S3Client.list static method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_27

LANGUAGE: typescript
CODE:
```
import { S3Client } from "bun";

const credentials = {
  accessKeyId: "your-access-key",
  secretAccessKey: "your-secret-key",
  bucket: "my-bucket",
  // endpoint: "https://s3.us-east-1.amazonaws.com",
  // endpoint: "https://<account-id>.r2.cloudflarestorage.com", // Cloudflare R2
};

// List (up to) 1000 objects in the bucket
const allObjects = await S3Client.list(null, credentials);

// List (up to) 500 objects under `uploads/` prefix, with owner field for each object
const uploads = await S3Client.list({
  prefix: 'uploads/',
  maxKeys: 500,
  fetchOwner: true,
}, credentials);

// Check if more results are available
if (uploads.isTruncated) {
  // List next batch of objects under `uploads/` prefix
  const moreUploads = await S3Client.list({
    prefix: 'uploads/',
    maxKeys: 500,
    startAfter: uploads.contents!.at(-1).key
    fetchOwner: true,
  }, credentials);
}
```

----------------------------------------

TITLE: Declaring a Mongoose Schema and Model - TypeScript
DESCRIPTION: Defines the 'Animal' schema with 'name' and 'sound' fields, both required strings, and declares a 'speak' method for model instances that logs the sound. The snippet requires the 'mongoose' package and TypeScript environment. Inputs include attribute values for 'name' and 'sound', and it outputs a reusable Mongoose model and associated type. Designed for modular reuse by exporting from 'schema.ts'.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/mongoose.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import * as mongoose from 'mongoose';\n\nconst animalSchema = new mongoose.Schema(\n  {\n    name: {type: String, required: true},\n    sound: {type: String, required: true},\n  },\n  {\n    methods: {\n      speak() {\n        console.log(\`${this.sound}!\`);\n      },\n    },\n  }\n);\n\nexport type Animal = mongoose.InferSchemaType<typeof animalSchema>;\nexport const Animal = mongoose.model('Animal', animalSchema);
```

----------------------------------------

TITLE: Sample Input Code for Inline Environment Variables - JavaScript
DESCRIPTION: Shows example JavaScript where process.env values are referenced. These will be replaced by literals when built with env inlining. Input for illustrating environmental variable inlining functionality.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_36

LANGUAGE: JavaScript
CODE:
```
console.log(process.env.FOO);
console.log(process.env.BAZ);
```

----------------------------------------

TITLE: Spawning Multiple Bun HTTP Server Instances as a Cluster
DESCRIPTION: This script creates a cluster by spawning multiple instances of the HTTP server based on the number of CPU cores available. It handles proper process management by setting up event listeners to terminate all spawned processes when the main process exits.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/cluster.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { spawn } from "bun";

const cpus = navigator.hardwareConcurrency; // Number of CPU cores
const buns = new Array(cpus);

for (let i = 0; i < cpus; i++) {
  buns[i] = spawn({
    cmd: ["bun", "./server.ts"],
    stdout: "inherit",
    stderr: "inherit",
    stdin: "inherit",
  });
}

function kill() {
  for (const bun of buns) {
    bun.kill();
  }
}

process.on("SIGINT", kill);
process.on("exit", kill);
```

----------------------------------------

TITLE: Creating SvelteKit Project with Bun
DESCRIPTION: Interactive CLI command to create a new SvelteKit project using the Svelte CLI with Bun as the package manager. Shows the complete initialization process including template selection and TypeScript configuration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/sveltekit.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bunx sv create my-app
┌  Welcome to the Svelte CLI! (v0.5.7)
│
◇  Which template would you like?
│  SvelteKit demo
│
◇  Add type checking with Typescript?
│  Yes, using Typescript syntax
│
◆  Project created
│
◇  What would you like to add to your project?
│  none
│
◇  Which package manager do you want to install dependencies with?
│  bun
│
◇  Successfully installed dependencies
│
◇  Project next steps ─────────────────────────────────────────────────────╮
│                                                                          │
│  1: cd my-app                                                            │
│  2: git init && git add -A && git commit -m "Initial commit" (optional)  │
│  3: bun run dev -- --open                                                │
│                                                                          │
│  To close the dev server, hit Ctrl-C                                     │
│                                                                          │
│  Stuck? Visit us at https://svelte.dev/chat                              │
│                                                                          │
├──────────────────────────────────────────────────────────────────────────╯
│
└  You're all set!
```

----------------------------------------

TITLE: Executing a JavaScript File with Bun Run
DESCRIPTION: Shows the basic command `bun run <filename>` to execute a JavaScript source file (`index.js`) using the Bun runtime. This command is analogous to `node <file>` for Node.js environments.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/run.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ bun run index.js
```

----------------------------------------

TITLE: Forcing Latest Version Update - Bun CLI --latest Flag - Shell
DESCRIPTION: This shell command uses the Bun CLI's --latest flag to update all dependencies to their absolute latest versions, regardless of version constraints in the package.json. Bun and a valid package.json are required. This flag may install versions outside specified version ranges and should be used with caution, as it can introduce breaking changes.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/update.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
$ bun update --latest
```

----------------------------------------

TITLE: Inlining Environment Variables - env: "inline" - Bun JavaScript API - JavaScript
DESCRIPTION: Demonstrates inlining all environment variables into the bundle by converting process.env.* references to their actual values using 'env: "inline"'. Requires setting the necessary environment variables before running the build process. Outputs files where environment variables are hard-coded as strings.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_34

LANGUAGE: JavaScript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './out',
  env: "inline",
})
```

----------------------------------------

TITLE: Sleeping for a Fixed Duration Using Bun.sleep in TypeScript
DESCRIPTION: This snippet demonstrates how to use the Bun.sleep method to pause execution for a specified number of milliseconds. In this example, it creates a 1-second delay.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/sleep.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// sleep for 1 second
await Bun.sleep(1000);
```

----------------------------------------

TITLE: Basic Link Extraction using Bun HTMLRewriter
DESCRIPTION: Demonstrates how to extract all href attributes from anchor tags in a webpage using Bun's HTMLRewriter. The function fetches a URL, processes the HTML content, and collects unique links in a Set.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/html-rewriter/extract-links.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
async function extractLinks(url: string) {
  const links = new Set<string>();
  const response = await fetch(url);

  const rewriter = new HTMLRewriter().on("a[href]", {
    element(el) {
      const href = el.getAttribute("href");
      if (href) {
        links.add(href);
      }
    },
  });

  // Wait for the response to be processed
  await rewriter.transform(response).blob();
  console.log([...links]); // ["https://bun.sh", "/docs", ...]
}

// Extract all links from the Bun website
await extractLinks("https://bun.sh");
```

----------------------------------------

TITLE: Setting Buffer Size for ArrayBufferSink
DESCRIPTION: Shows how to set the highWaterMark option to control the internal buffer size of ArrayBufferSink, which can improve performance for small chunks.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/streams.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
const sink = new Bun.ArrayBufferSink();
sink.start({
  highWaterMark: 1024 * 1024, // 1 MB
});
```

----------------------------------------

TITLE: Reading File Contents as String with Bun.file()
DESCRIPTION: This snippet demonstrates how to use Bun.file() to create a BunFile instance and then read its contents as a string using the .text() method. The BunFile class extends Blob, allowing lazy reading of file content in various formats.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/read-file/string.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const path = "/path/to/file.txt";
const file = Bun.file(path);

const text = await file.text();
// string
```

----------------------------------------

TITLE: Running interactive stdin example in Bun
DESCRIPTION: This shell example shows the output of running the line-by-line stdin reader, demonstrating how it prompts for input and echoes back what the user types in an interactive loop.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/stdin.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
$ bun run index.ts
Type something: hello
You typed: hello
Type something: hello again
You typed: hello again
```

----------------------------------------

TITLE: Writing String Data to File
DESCRIPTION: Example of writing a string to a file using Bun.write.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-io.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
const data = `It was the best of times, it was the worst of times.`;
await Bun.write("output.txt", data);
```

----------------------------------------

TITLE: Accessing Mock Function Call History in Bun Test
DESCRIPTION: Shows how to access the mock function's call history and results through the .mock property, which tracks arguments and return values.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/mock-functions.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { mock } from "bun:test";

const random = mock((multiplier: number) => multiplier * Math.random());

random(2);
random(10);

random.mock.calls;
// [[ 2 ], [ 10 ]]

random.mock.results;
//  [
//    { type: "return", value: 0.6533907460954099 },
//    { type: "return", value: 0.6452713933037312 }
//  ]
```

----------------------------------------

TITLE: Creating a Svelte Loader Plugin for Bun
DESCRIPTION: A plugin that enables loading Svelte components in Bun using the compiler. It configures the environment with happy-dom for testing and handles the compilation of .svelte files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/svelte-test.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { plugin } from "bun";
import { compile } from "svelte/compiler";
import { readFileSync } from "fs";
import { beforeEach, afterEach } from "bun:test";
import { GlobalRegistrator } from "@happy-dom/global-registrator";

beforeEach(async () => {
  await GlobalRegistrator.register();
});

afterEach(async () => {
  await GlobalRegistrator.unregister();
});

plugin({
  name: "svelte loader",
  setup(builder) {
    builder.onLoad({ filter: /\.svelte(\?[^.]+)?$/ }, ({ path }) => {
      try {
        const source = readFileSync(
          path.substring(
            0,
            path.includes("?") ? path.indexOf("?") : path.length
          ),
          "utf-8"
        );

        const result = compile(source, {
          filename: path,
          generate: "client",
          dev: false,
        });

        return {
          contents: result.js.code,
          loader: "js",
        };
      } catch (err) {
        throw new Error(`Failed to compile Svelte component: ${err.message}`);
      }
    });
  },
});
```

----------------------------------------

TITLE: Checking Multiple Workspaces for Outdated Dependencies - Markdown
DESCRIPTION: Shows how to pass multiple '--filter' flags to the terminal directive, simulating a check for outdated dependencies across several workspaces ('@monorepo/types' and '@monorepo/cli') using the 'glob' pattern '{e,t}*'. Useful in large monorepo projects managed by Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/outdated.md#2025-04-22_snippet_6

LANGUAGE: markdown
CODE:
```
{% bunOutdatedTerminal  glob="{e,t}*" displayGlob="--filter @monorepo/types --filter @monorepo/cli" /%}
```

----------------------------------------

TITLE: Piping data to Bun's stdin stream example
DESCRIPTION: This shell example demonstrates how to pipe data into a Bun process that reads from stdin as a stream, showing how the chunked input is processed and displayed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/stdin.md#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
$ echo "hello" | bun run stdin.ts
Chunk: hello
```

----------------------------------------

TITLE: Implementing an interactive addition calculator using Bun's console in TypeScript
DESCRIPTION: Shows a practical example of using Bun's console as an AsyncIterable to create an interactive addition calculator. The program continuously prompts for input, adds the entered number to a running total, and displays the updated count.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/console.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
console.log(`Let's add some numbers!`);
console.write(`Count: 0\n> `);

let count = 0;
for await (const line of console) {
  count += Number(line);
  console.write(`Count: ${count}\n> `);
}
```

----------------------------------------

TITLE: Creating an ArrayBuffer in JavaScript
DESCRIPTION: Creates a new ArrayBuffer with a capacity of 8 bytes. ArrayBuffer is a fundamental data structure that represents a fixed-length binary data buffer in memory, but doesn't provide direct read/write access to its contents.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
// this buffer can store 8 bytes
const buf = new ArrayBuffer(8);
```

----------------------------------------

TITLE: Using bun Shebang in a Script for Bun Runtime (Plain text)
DESCRIPTION: Shows the use of a shebang pointing to 'bun' for scripts that must always run with the Bun runtime. Place this as the first line in an executable file. No further parameters or dependencies are required, apart from having Bun installed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bunx.md#2025-04-22_snippet_7

LANGUAGE: text
CODE:
```
#!/usr/bin/env bun
```

----------------------------------------

TITLE: Configuring Custom JSX Factory and Fragment
DESCRIPTION: Configuration for specifying both custom JSX factory and fragment factory functions, which control how JSX elements and fragments are transformed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_12

LANGUAGE: json
CODE:
```
{
  "jsx": "react",
  "jsxFactory": "myjsx",
  "jsxFragmentFactory": "MyFragment"
}
```

----------------------------------------

TITLE: Plugin Configuration Access
DESCRIPTION: Shows how to read and modify build configuration within a Bun plugin.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/plugins.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
await Bun.build({
  entrypoints: ["./app.ts"],
  outdir: "./dist",
  sourcemap: "external",
  plugins: [
    {
      name: "demo",
      setup(build) {
        console.log(build.config.sourcemap); // "external"

        build.config.minify = true; // enable minification

        // `plugins` is readonly
        console.log(`Number of plugins: ${build.config.plugins.length}`);
      },
    },
  ],
});
```

----------------------------------------

TITLE: Argon2 Hash Format Example in Bun
DESCRIPTION: Demonstrates the PHC format used by Argon2 algorithm in Bun.password.hash. The format includes algorithm, version, memory cost, iterations, parallelism, salt, and hash.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/hashing.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
await Bun.password.hash("hello", {
  algorithm: "argon2id",
});
```

LANGUAGE: sh
CODE:
```
$argon2id$v=19$m=65536,t=2,p=1$xXnlSvPh4ym5KYmxKAuuHVlDvy2QGHBNuI6bJJrRDOs$2YY6M48XmHn+s5NoBaL+ficzXajq2Yj8wut3r0vnrwI
```

----------------------------------------

TITLE: Preconnecting to a Host at Startup using Bun CLI Flag in Shell
DESCRIPTION: This snippet demonstrates how to use the `--fetch-preconnect` command-line flag when running a Bun script. This instructs Bun to preconnect to the specified URL (performing DNS lookup, TCP connection, and TLS handshake) immediately upon application startup. This feature is analogous to `<link rel="preconnect">` in HTML and requires the `bun` CLI. Note: This feature is currently not implemented on Windows.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_25

LANGUAGE: sh
CODE:
```
```sh
$ bun --fetch-preconnect https://bun.sh ./my-script.ts
```
```

----------------------------------------

TITLE: Managing TCP Server Lifecycle
DESCRIPTION: Shows how to control a TCP server after creation, including stopping the server and using unref() to allow the Bun process to exit even if the server is still active.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/tcp.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
const server = Bun.listen({
  /* config*/
});

// stop listening
// parameter determines whether active connections are closed
server.stop(true);

// let Bun process exit even if server is still listening
server.unref();
```

----------------------------------------

TITLE: Running a NPM Package Executable via bunx (Shell - bash)
DESCRIPTION: Demonstrates running an npm package executable ('cowsay') directly with bunx from the CLI. No explicit dependencies are required; bunx will fetch and execute the package as needed. The primary parameter is the command to execute and its arguments—here, the string 'Hello world!'. Output is the result of executing the npm package as a binary in the shell.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bunx.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ bunx cowsay "Hello world!"
```

----------------------------------------

TITLE: Implementing onResolve Callback in Bun Plugin
DESCRIPTION: Example of using the onResolve callback in a Bun plugin. This callback allows custom module resolution logic, such as redirecting imports to different paths.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/plugins.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
import { plugin } from "bun";

plugin({
  name: "onResolve example",
  setup(build) {
    build.onResolve({ filter: /.*/, namespace: "file" }, args => {
      if (args.path.startsWith("images/")) {
        return {
          path: args.path.replace("images/", "./public/images/"),
        };
      }
    });
  },
});
```

----------------------------------------

TITLE: Reading stderr as Text from a Child Process in Bun
DESCRIPTION: This example shows how to capture and read the complete stderr output as text using Bun.readableStreamToText() utility. It waits for the child process to finish and converts the stderr stream to a string, allowing for error checking and handling.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/spawn-stderr.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const proc = Bun.spawn(["echo", "hello"], {
  stderr: "pipe",
});

const errors: string = await Bun.readableStreamToText(proc.stderr);
if (errors) {
  // handle errors
}
```

----------------------------------------

TITLE: Running Scripts with Bun
DESCRIPTION: Examples of running package.json scripts, executables, and JavaScript/TypeScript files using bun command line interface.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/from-npm-install-to-bun-install.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
# Run a package.json script:
$ bun my-script
$ bun run my-script

# Run an executable in node_modules/.bin:
$ bun my-executable # such as tsc, esbuild, etc.
$ bun run my-executable

# Run a JavaScript/TypeScript file:
$ bun ./index.ts
```

----------------------------------------

TITLE: Executing the Database Migration Script using Bun (Shell)
DESCRIPTION: Executes the `migrate.ts` script using `bun run`. This command applies the SQL changes defined in the migration files located in the `./drizzle` directory to the `sqlite.db` database. Assumes `migrate.ts` exists and the `drizzle` directory contains valid migration files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/drizzle.md#2025-04-22_snippet_8

LANGUAGE: sh
CODE:
```
$ bun run migrate.ts
```

----------------------------------------

TITLE: Converting File URLs to Absolute Paths with Bun.fileURLToPath()
DESCRIPTION: Uses Bun.fileURLToPath() to convert a file:// URL to an absolute file path. This utility takes a file URL string as input and returns the corresponding absolute path as a string, which is useful for file system operations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/file-url-to-path.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
Bun.fileURLToPath("file:///path/to/file.txt");
// => "/path/to/file.txt"
```

----------------------------------------

TITLE: Creating Multiple Typed Array Views from a Single ArrayBuffer in TypeScript
DESCRIPTION: Demonstrates creating various typed array instances (Uint8Array, Uint16Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array) that all share and provide different views (interpretations) of the same underlying 64-byte ArrayBuffer.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/arraybuffer-to-typedarray.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
const buffer = new ArrayBuffer(64);

const arr1 = new Uint8Array(buffer);
const arr2 = new Uint16Array(buffer);
const arr3 = new Uint32Array(buffer);
const arr4 = new Float32Array(buffer);
const arr5 = new Float64Array(buffer);
const arr6 = new BigInt64Array(buffer);
const arr7 = new BigUint64Array(buffer);
```

----------------------------------------

TITLE: Basic JSX Syntax with Bun
DESCRIPTION: Example of basic JSX syntax that Bun will transpile. This represents a simple React element creation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/react.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
const element = <h1>Hello, world!</h1>;
```

----------------------------------------

TITLE: Reading stdin as a stream using Bun.stdin in TypeScript
DESCRIPTION: This snippet demonstrates how to read from stdin using Bun.stdin.stream() which provides raw chunk access to input data. It processes input as Uint8Array chunks and converts them to text, without guaranteeing line-by-line splitting.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/stdin.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
for await (const chunk of Bun.stdin.stream()) {
  // chunk is Uint8Array
  // this converts it to text (assumes ASCII encoding)
  const chunkText = Buffer.from(chunk).toString();
  console.log(`Chunk: ${chunkText}`);
}
```

----------------------------------------

TITLE: Setting Max Payload Length (TypeScript)
DESCRIPTION: This example demonstrates how to set the maximum payload length for WebSocket messages using the `maxPayloadLength` parameter. Connections receiving messages larger than the specified length will be closed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/websockets.md#_snippet_12

LANGUAGE: typescript
CODE:
```
Bun.serve({
  fetch(req, server) {}, // upgrade logic
  websocket: {
    maxPayloadLength: 1024 * 1024, // 1 MB

    // ...
  },
});
```

----------------------------------------

TITLE: Command Line Output from Sample Query (Shell Script)
DESCRIPTION: Displays the expected output from running the sample index.ts query script. Output format matches what's printed by console.log in a typical Bun process.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-drizzle.md#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
$ bun run index.ts\n[\n  {\n    text: "hello world",\n  }\n]
```

----------------------------------------

TITLE: Error Snapshot Testing in TypeScript with Bun
DESCRIPTION: Demonstrates how to create snapshots of error messages using toThrowErrorMatchingSnapshot() and toThrowErrorMatchingInlineSnapshot() matchers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/snapshots.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { test, expect } from "bun:test";

test("error snapshot", () => {
  expect(() => {
    throw new Error("Something went wrong");
  }).toThrowErrorMatchingSnapshot();

  expect(() => {
    throw new Error("Another error");
  }).toThrowErrorMatchingInlineSnapshot();
});
```

----------------------------------------

TITLE: LAB and Perceptual Color Spaces in CSS - Bun Bundler
DESCRIPTION: Demonstrates using advanced LAB/LCH/OKLAB/OKLCH color spaces and gradients for improved perceptual color uniformity. Inputs use lab() and oklch() functions. Bun outputs browser- and gamut-compatible fallbacks plus originals for progressive enhancement. No additional dependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_8

LANGUAGE: css
CODE:
```
.vibrant-element {\n  /* A vibrant red that exceeds sRGB gamut boundaries */\n  color: lab(55% 78 35);\n\n  /* A smooth gradient using perceptual color space */\n  background: linear-gradient(\n    to right,\n    oklch(65% 0.25 10deg),\n    oklch(65% 0.25 250deg)\n  );\n}
```

----------------------------------------

TITLE: Using Bun Global in TypeScript
DESCRIPTION: This snippet demonstrates how to use the Bun global in a TypeScript file to log the Bun version.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/typescript.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
console.log(Bun.version);
```

----------------------------------------

TITLE: JSX Component Example in TypeScript
DESCRIPTION: Illustrates a simple React-like component written in TypeScript with JSX syntax. This example shows how Bun supports .tsx files and can handle JSX transpilation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/loaders.md#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
function Component(props: {message: string}) {
  return (
    <body>
      <h1 style={{color: 'red'}}>{props.message}</h1>
    </body>
  );
}

console.log(<Component message="Hello world!" />);
```

----------------------------------------

TITLE: Reading Command Output as JSON in Bun Shell
DESCRIPTION: Demonstrates how to read the output of a command as JSON using the .json() method in Bun Shell. This snippet shows executing an echo command and parsing its output as JSON.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

const result = await $`echo '{"foo": "bar"}'`.json();

console.log(result); // { foo: "bar" }
```

----------------------------------------

TITLE: Redis Client Configuration in Bun
DESCRIPTION: Illustrates how to configure a Redis client in Bun with various connection options, including timeouts, reconnection settings, and TLS options.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/redis.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
const client = new RedisClient("redis://localhost:6379", {
  // Connection timeout in milliseconds (default: 10000)
  connectionTimeout: 5000,

  // Idle timeout in milliseconds (default: 0 = no timeout)
  idleTimeout: 30000,

  // Whether to automatically reconnect on disconnection (default: true)
  autoReconnect: true,

  // Maximum number of reconnection attempts (default: 10)
  maxRetries: 10,

  // Whether to queue commands when disconnected (default: true)
  enableOfflineQueue: true,

  // Whether to automatically pipeline commands (default: true)
  enableAutoPipelining: true,

  // TLS options (default: false)
  tls: true,
  // Alternatively, provide custom TLS config:
  // tls: {
  //   rejectUnauthorized: true,
  //   ca: "path/to/ca.pem",
  //   cert: "path/to/cert.pem",
  //   key: "path/to/key.pem",
  // }
});
```

----------------------------------------

TITLE: Using Synchronous Child Process API in TypeScript
DESCRIPTION: Demonstrates how to use the blocking Bun.spawnSync API to spawn a child process and retrieve its output.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_14

LANGUAGE: typescript
CODE:
```
const proc = Bun.spawnSync(["echo", "hello"]);

console.log(proc.stdout.toString());
// => "hello\n"
```

----------------------------------------

TITLE: Setting proxy via environment variables in Bun
DESCRIPTION: Shows how to configure proxy servers using environment variables. Setting HTTPS_PROXY or HTTP_PROXY environment variables allows all fetch requests to route through the specified proxy server.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/proxy.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
HTTPS_PROXY=https://username:password@proxy.example.com:8080 bun run index.ts
```

----------------------------------------

TITLE: Getting File Metadata with S3Client.stat
DESCRIPTION: Demonstrates how to retrieve metadata including size, etag, and last modified date for an S3 file using S3Client.stat static method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_30

LANGUAGE: typescript
CODE:
```
import { S3Client } from "bun";

const credentials = {
  accessKeyId: "your-access-key",
  secretAccessKey: "your-secret-key",
  bucket: "my-bucket",
  // endpoint: "https://s3.us-east-1.amazonaws.com",
  // endpoint: "https://<account-id>.r2.cloudflarestorage.com", // Cloudflare R2
};

const stat = await S3Client.stat("my-file.txt", credentials);
```

----------------------------------------

TITLE: Configuring drop in Bun Build (JavaScript)
DESCRIPTION: Removes function calls from bundles, such as console.log or debugger statements, including their arguments.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_58

LANGUAGE: typescript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './out',
  drop: ["console", "debugger", "anyIdentifier.or.propertyAccess"],
})
```

----------------------------------------

TITLE: Defining the Movie Type in EdgeDB Schema (ESDL/Text)
DESCRIPTION: This EdgeDB schema snippet defines a `Movie` type within the default module. The type specifies a required string property `title` and an optional (or required, if modified) `releaseYear` of type int64. Dependencies: Valid EdgeDB schema file. Input: None. Output: Used by EdgeDB migrations and introspection to generate database structure. Limitations: Should be placed within `default.esdl`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/edgedb.md#2025-04-22_snippet_6

LANGUAGE: txt
CODE:
```
module default {
  type Movie {
    required title: str;
    releaseYear: int64;
  }
};
```

----------------------------------------

TITLE: Compiled Fallbacks for color() Usage - Bun Bundler CSS
DESCRIPTION: Shows how Bun emits RGB-based fallbacks and progressive enhancement for color() usage. Ensures vivid colors display on new browsers while legacy browsers see close approximations. No dependencies; supports color and background-color properties.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_11

LANGUAGE: css
CODE:
```
.vivid-element {\n  /* RGB fallback first for maximum compatibility */\n  color: #fa1a4c;\n  /* Keep original for browsers that support it */\n  color: color(display-p3 1 0.1 0.3);\n\n  background-color: #6a805d;\n  background-color: color(a98-rgb 0.44 0.5 0.37);\n}
```

----------------------------------------

TITLE: Controlling Transaction Modes in Bun SQLite (TypeScript)
DESCRIPTION: Demonstrates how to specify transaction modes (BEGIN, BEGIN DEFERRED, BEGIN IMMEDIATE, BEGIN EXCLUSIVE) using Bun's transaction function variants, allowing explicit control over when locks are taken and isolation level within SQLite.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_26

LANGUAGE: TypeScript
CODE:
```
insertCats(cats); // uses "BEGIN"
insertCats.deferred(cats); // uses "BEGIN DEFERRED"
insertCats.immediate(cats); // uses "BEGIN IMMEDIATE"
insertCats.exclusive(cats); // uses "BEGIN EXCLUSIVE"

```

----------------------------------------

TITLE: Creating a Buffer View from an ArrayBuffer Slice (TypeScript)
DESCRIPTION: This snippet shows how to create a Node.js `Buffer` that represents only a specific portion (slice) of an existing `ArrayBuffer`. It initializes a 64-byte `ArrayBuffer` and then uses the `Buffer.from(arrayBuffer, byteOffset, length)` overload to create a `Buffer` that views only the first 16 bytes of the original `ArrayBuffer`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/arraybuffer-to-buffer.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
const arrBuffer = new ArrayBuffer(64);
const nodeBuffer = Buffer.from(arrBuffer, 0, 16); // view first 16 bytes
```

----------------------------------------

TITLE: Working with ArrayBuffer properties and slicing
DESCRIPTION: Demonstrates how to check the size of an ArrayBuffer using byteLength property and create a new ArrayBuffer by slicing an existing one. These are the basic operations available directly on ArrayBuffer instances.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
const buf = new ArrayBuffer(8);
buf.byteLength; // => 8

const slice = buf.slice(0, 4); // returns new ArrayBuffer
slice.byteLength; // => 4
```

----------------------------------------

TITLE: Converting DataView to String using TextDecoder (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to convert a DataView instance, assumed to contain ASCII-encoded text, into a JavaScript string. It utilizes the built-in TextDecoder class by creating an instance and calling its `decode` method with the DataView.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/dataview-to-string.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
const dv: DataView = ...;
const decoder = new TextDecoder();
const str = decoder.decode(dv);
```

----------------------------------------

TITLE: Defining Scoped Styles Using CSS Modules - CSS
DESCRIPTION: This snippet shows how to create two distinct CSS Module files, each defining a ".button" class with different color values. The purpose is to demonstrate how CSS Modules scope styles locally to avoid class name collisions. No dependencies or build prerequisites are needed other than Bun's bundler support. Key parameters are the file names and scoped class names. The inputs are CSS selectors with rules, and each file results in a unique identifier mapping for its classes when imported. Ensure to use the ".module.css" extension for Bun to recognize them as CSS modules.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css_modules.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
/* styles.module.css */
.button {
  color: red;
}

/* other-styles.module.css */
.button {
  color: blue;
}

```

----------------------------------------

TITLE: Publishing with Tag using Bun CLI - Shell
DESCRIPTION: Demonstrates publishing a package with a specific tag (e.g., alpha) using the `--tag` flag. Both an explicit and the default tag (latest) will be applied. Useful for version management (like beta/alpha releases) in npm workflows. Requires Bun and configured registry access. The input is a valid project directory, and the result is a published package tagged on the npm registry.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/publish.md#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
$ bun publish --tag alpha
```

----------------------------------------

TITLE: Finalizing and Cleaning Up Query Statements with .finalize() (TypeScript)
DESCRIPTION: Demonstrates explicit resource management by invoking .finalize() on a SQLite Statement object in Bun to free resources. Highlights that finalized statements cannot be reused, which is important for cleanup in performance-sensitive scenarios.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_16

LANGUAGE: TypeScript
CODE:
```
const query = db.query("SELECT title, year FROM movies");
const movies = query.all();
query.finalize();

```

----------------------------------------

TITLE: Enabling BigInt for Large Numbers in Bun SQL Client
DESCRIPTION: Shows how to configure Bun's SQL client to return large numbers as BigInt instead of strings by setting the bigint option to true. This allows working with large integers as native JavaScript BigInt values.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_27

LANGUAGE: typescript
CODE:
```
const sql = new SQL({
  bigint: true,
});

const [{ x }] = await sql`SELECT 9223372036854777 as x`;

console.log(typeof x, x); // "bigint" 9223372036854777n
```

----------------------------------------

TITLE: Setting Timeout and Kill Signal for Child Process in TypeScript
DESCRIPTION: Shows how to set a timeout and specify a kill signal for a child process.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
// Kill the process after 5 seconds
const proc = Bun.spawn({
  cmd: ["sleep", "10"],
  timeout: 5000, // 5 seconds in milliseconds
});

await proc.exited; // Will resolve after 5 seconds

// Kill the process with SIGKILL after 5 seconds
const proc2 = Bun.spawn({
  cmd: ["sleep", "10"],
  timeout: 5000,
  killSignal: "SIGKILL", // Can be string name or signal number
});
```

----------------------------------------

TITLE: Preloading Setup Files for Bun Tests using Bash
DESCRIPTION: Shows how to use the `--preload` flag with `bun test` to execute a setup script (e.g., `./setup.ts` written in TypeScript) before any tests are run. This is commonly used for defining global lifecycle hooks (like `beforeAll`, `afterAll`) or other test environment initializations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_11

LANGUAGE: bash
CODE:
```
$ bun test --preload ./setup.ts
```

----------------------------------------

TITLE: Running Scripts Across Multiple Packages with --filter
DESCRIPTION: Illustrates using the `--filter` argument with `bun run` in a monorepo setup. This example executes `<script>` only in packages whose names match the provided pattern ('ba*'), effectively targeting `bar` and `baz` but excluding `foo` in this scenario.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/run.md#2025-04-22_snippet_13

LANGUAGE: bash
CODE:
```
bun run --filter 'ba*' <script>
```

----------------------------------------

TITLE: Estimating memory usage with estimateShallowMemoryUsageOf in JavaScript
DESCRIPTION: Shows how to estimate the shallow memory usage of JavaScript objects in bytes using the estimateShallowMemoryUsageOf function from bun:jsc. Provides examples with different types of objects.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_31

LANGUAGE: javascript
CODE:
```
import { estimateShallowMemoryUsageOf } from "bun:jsc";

const obj = { foo: "bar" };
const usage = estimateShallowMemoryUsageOf(obj);
console.log(usage); // => 16

const buffer = Buffer.alloc(1024 * 1024);
estimateShallowMemoryUsageOf(buffer);
// => 1048624

const req = new Request("https://bun.sh");
estimateShallowMemoryUsageOf(req);
// => 167

const array = Array(1024).fill({ a: 1 });
// Arrays are usually not stored contiguously in memory, so this will not return a useful value (which isn't a bug).
estimateShallowMemoryUsageOf(array);
// => 16
```

----------------------------------------

TITLE: Adding a Basic Dependency with Bun
DESCRIPTION: Uses the 'bun add' command to add a package as a dependency. By default, this uses the caret (^) range specifier to allow minor and patch version updates.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/add.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun add zod
```

----------------------------------------

TITLE: Streaming Response Body with Async Iterators in TypeScript
DESCRIPTION: Shows how to stream and process a response body using async iterators, allowing you to handle large responses chunk by chunk.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
const response = await fetch("http://example.com");

for await (const chunk of response.body) {
  console.log(chunk);
}
```

----------------------------------------

TITLE: Converting Relative URLs to Absolute URLs with Bun HTMLRewriter
DESCRIPTION: Shows how to extract links from a webpage while converting relative URLs to absolute URLs using the URL constructor. The function handles URL resolution and maintains a collection of unique absolute URLs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/html-rewriter/extract-links.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
async function extractLinksFromURL(url: string) {
  const response = await fetch(url);
  const links = new Set<string>();

  const rewriter = new HTMLRewriter().on("a[href]", {
    element(el) {
      const href = el.getAttribute("href");
      if (href) {
        // Convert relative URLs to absolute
        try {
          const absoluteURL = new URL(href, url).href;
          links.add(absoluteURL);
        } catch {
          links.add(href);
        }
      }
    },
  });

  // Wait for the response to be processed
  await rewriter.transform(response).blob();
  return [...links];
}

const websiteLinks = await extractLinksFromURL("https://example.com");
```

----------------------------------------

TITLE: Creating a Basic ReadableStream in TypeScript
DESCRIPTION: Demonstrates how to create a simple ReadableStream with the standard enqueue pattern. The controller enqueues data chunks and then closes the stream when finished.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/streams.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const stream = new ReadableStream({
  start(controller) {
    controller.enqueue("hello");
    controller.enqueue("world");
    controller.close();
  },
});
```

----------------------------------------

TITLE: Copying Files Efficiently with Bun.js
DESCRIPTION: This snippet demonstrates how to use Bun.file() to create a Blob representing a file, and then use Bun.write() to efficiently copy it. On Linux, this uses the copy_file_range syscall, while on macOS it uses clonefile or fcopyfile.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const blob = Bun.file("input.txt");
await Bun.write("output.txt", blob);
```

----------------------------------------

TITLE: Replacing global with globalThis using --define
DESCRIPTION: This shell command shows how to use --define to replace all instances of 'global' with 'globalThis'.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/define-constant.md#2025-04-22_snippet_7

LANGUAGE: sh
CODE:
```
bun --define global="globalThis" src/index.ts
```

----------------------------------------

TITLE: Using Bun Shell Loader
DESCRIPTION: Shows how to run Bun Shell scripts using the sh loader, which is only available when starting Bun itself.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/loaders.md#2025-04-22_snippet_11

LANGUAGE: sh
CODE:
```
$ bun run ./script.sh
```

----------------------------------------

TITLE: Pipelining Queries within a Transaction using Bun SQL Client in TypeScript
DESCRIPTION: Shows an alternative way to structure transactions using `sql.begin` by returning an array of query promises from the callback. This allows Bun's SQL client to potentially pipeline the execution of these queries within the transaction scope for optimized performance.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_17

LANGUAGE: typescript
CODE:
```
```ts
await sql.begin(async tx => {
  return [
    tx`INSERT INTO users (name) VALUES (${ "Alice" })`,
    tx`UPDATE accounts SET balance = balance - 100 WHERE user_id = 1`,
  ];
});
```
```

----------------------------------------

TITLE: Running initial Prisma migration
DESCRIPTION: Command to generate and run the initial migration for the Prisma schema. This creates the database tables based on the defined models.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/prisma.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
$ bunx prisma migrate dev --name init
Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma
Datasource "db": SQLite database "dev.db" at "file:./dev.db"

SQLite database dev.db created at file:./dev.db

Applying migration `20230928182242_init`

The following migration(s) have been created and applied from new schema changes:

migrations/
  └─ 20230928182242_init/
    └─ migration.sql

Your database is now in sync with your schema.

✔ Generated Prisma Client (v5.3.1) to ./node_modules/@prisma/client in 41ms
```

----------------------------------------

TITLE: Listening for Worker Close Event
DESCRIPTION: Example of listening for the 'close' event, which is emitted when a worker has been terminated. This is a Bun-specific extension not available in browsers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/workers.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
const worker = new Worker(new URL("worker.ts", import.meta.url).href);

worker.addEventListener("close", event => {
  console.log("worker is being closed");
});
```

----------------------------------------

TITLE: Creating a Memory-Optimized Worker with smol Mode
DESCRIPTION: Example of creating a worker with reduced memory usage using the smol option, which sacrifices some performance for lower memory footprint.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/workers.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
const worker = new Worker("./i-am-smol.ts", {
  smol: true,
});
```

----------------------------------------

TITLE: Handling Both BeforeExit and Exit Events in Bun
DESCRIPTION: Shows how to listen for both beforeExit (triggered when the event loop is empty) and exit events. This pattern is useful for performing cleanup operations before the process terminates.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/os-signals.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
process.on("beforeExit", code => {
  console.log(`Event loop is empty!`);
});

process.on("exit", code => {
  console.log(`Process is exiting with code ${code}`);
});
```

----------------------------------------

TITLE: Using Callbacks with JSCallback in FFI
DESCRIPTION: This snippet demonstrates how to use the JSCallback class from bun:ffi to create JavaScript callback functions that can be passed to C/FFI functions. It includes an example of creating a search callback and using it with a native library function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/ffi.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import { dlopen, JSCallback, ptr, CString } from "bun:ffi";

const {
  symbols: { search },
  close,
} = dlopen("libmylib", {
  search: {
    returns: "usize",
    args: ["cstring", "callback"],
  },
});

const searchIterator = new JSCallback(
  (ptr, length) => /hello/.test(new CString(ptr, length)),
  {
    returns: "bool",
    args: ["ptr", "usize"],
  },
);

const str = Buffer.from("wwutwutwutwutwutwutwutwutwutwutut\0", "utf8");
if (search(ptr(str), searchIterator)) {
  // found a match!
}

// Sometime later:
setTimeout(() => {
  searchIterator.close();
  close();
}, 5000);
```

----------------------------------------

TITLE: Using Dynamic Passwords with Bun SQL Client in TypeScript
DESCRIPTION: Demonstrates configuring the `bun:sql` client to use a dynamic password function. This function, which can be async as shown, is called when establishing a connection to retrieve the current password. This is useful for scenarios like rotating credentials or using authentication tokens (e.g., fetching a token via `signer.getAuthToken()`).
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_15

LANGUAGE: typescript
CODE:
```
```ts
import { SQL } from "bun";

const sql = new SQL(url, {
  // Other connection config
  ...
  // Password function for the database user
  password: async () => await signer.getAuthToken(),
});
```
```

----------------------------------------

TITLE: Configuring Color Schemes with light-dark() - CSS
DESCRIPTION: Demonstrates use of the proposed light-dark() CSS color function for seamless theme adaptation between light and dark color schemes, and how Bun's CSS bundler transpiles this to variable-based implementations for wider browser support. Requires CSS variables and may need a bundling step in environments that lack native light-dark() support. Parameters define colors for each scheme and tie into color-scheme property for system integration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_16

LANGUAGE: css
CODE:
```
:root {
  /* Define color scheme support */
  color-scheme: light dark;
}

.themed-component {
  /* Automatically picks the right color based on system preference */
  background-color: light-dark(#ffffff, #121212);
  color: light-dark(#333333, #eeeeee);
  border-color: light-dark(#dddddd, #555555);
}

/* Override system preference when needed */
.light-theme {
  color-scheme: light;
}

.dark-theme {
  color-scheme: dark;
}
```

LANGUAGE: css
CODE:
```
:root {
  --lightningcss-light: initial;
  --lightningcss-dark: ;
  color-scheme: light dark;
}

@media (prefers-color-scheme: dark) {
  :root {
    --lightningcss-light: ;
    --lightningcss-dark: initial;
  }
}

.light-theme {
  --lightningcss-light: initial;
  --lightningcss-dark: ;
  color-scheme: light;
}

.dark-theme {
  --lightningcss-light: ;
  --lightningcss-dark: initial;
  color-scheme: dark;
}

.themed-component {
  background-color: var(--lightningcss-light, #ffffff)
    var(--lightningcss-dark, #121212);
  color: var(--lightningcss-light, #333333) var(--lightningcss-dark, #eeeeee);
  border-color: var(--lightningcss-light, #dddddd)
    var(--lightningcss-dark, #555555);
}
```

----------------------------------------

TITLE: Checking for HMR Availability in Bun
DESCRIPTION: Shows how to check if the HMR API is available in the current environment. This pattern is used to conditionally execute HMR-related code.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/hmr.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
if (import.meta.hot) {
  // HMR APIs are available.
}
```

----------------------------------------

TITLE: Using --define flag in Bun for runtime and build
DESCRIPTION: This snippet shows how to use the --define flag to set NODE_ENV to 'production' for both runtime execution and build process in Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/define-constant.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun --define process.env.NODE_ENV="'production'" src/index.ts # Runtime
$ bun build --define process.env.NODE_ENV="'production'" src/index.ts # Build
```

----------------------------------------

TITLE: Writing to Standard Output
DESCRIPTION: Example of writing file contents to stdout.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-io.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
const input = Bun.file("input.txt");
await Bun.write(Bun.stdout, input);
```

----------------------------------------

TITLE: onResolve Implementation Example
DESCRIPTION: Example of implementing the onResolve lifecycle hook for custom module resolution.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/plugins.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import { plugin } from "bun";

plugin({
  name: "onResolve example",
  setup(build) {
    build.onResolve({ filter: /.*/, namespace: "file" }, args => {
      if (args.path.startsWith("images/")) {
        return {
          path: args.path.replace("images/", "./public/images/"),
        };
      }
    });
  },
});
```

----------------------------------------

TITLE: Configuring Prepared Statements in Bun SQL Client
DESCRIPTION: Shows how to disable the automatic creation of named prepared statements in Bun's SQL client by setting prepare: false in the connection options. This might be necessary when using PGBouncer, debugging query plans, or working with dynamic SQL.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_25

LANGUAGE: typescript
CODE:
```
const sql = new SQL({
  // ... other options ...
  prepare: false, // Disable persisting named prepared statements on the server
});
```

----------------------------------------

TITLE: Configuring Bundler Plugins with bunfig.toml
DESCRIPTION: Configuration for adding bundler plugins to Bun.serve() using the bunfig.toml file. This example adds TailwindCSS support to HTML routes.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/fullstack.md#2025-04-22_snippet_12

LANGUAGE: toml
CODE:
```
[serve.static]
plugins = ["bun-plugin-tailwind"]
```

----------------------------------------

TITLE: Configuring a systemd Service File for Bun Applications
DESCRIPTION: A template service file for running a Bun application as a system service. Includes settings for service type, user permissions, working directory, and restart policies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/systemd.md#2025-04-22_snippet_1

LANGUAGE: ini
CODE:
```
[Unit]
# describe the app
Description=My App
# start the app after the network is available
After=network.target

[Service]
# usually you'll use 'simple'
# one of https://www.freedesktop.org/software/systemd/man/systemd.service.html#Type=
Type=simple
# which user to use when starting the app
User=YOUR_USER
# path to your application's root directory
WorkingDirectory=/home/YOUR_USER/path/to/my-app
# the command to start the app
# requires absolute paths
ExecStart=/home/YOUR_USER/.bun/bin/bun run index.ts
# restart policy
# one of {no|on-success|on-failure|on-abnormal|on-watchdog|on-abort|always}
Restart=always

[Install]
# start the app automatically
WantedBy=multi-user.target
```

----------------------------------------

TITLE: Manually generating Prisma Client
DESCRIPTION: Command to manually regenerate the Prisma Client. This is useful after schema changes when you don't need to run a migration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/prisma.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
$ bunx prisma generate
```

----------------------------------------

TITLE: Using Environment Variables in bunfig.toml for Registry Authentication
DESCRIPTION: This code example shows how to use environment variables in bunfig.toml for private registry authentication. Bun automatically loads environment variables from .env.local, .env.[NODE_ENV], and .env files, making it easy to store sensitive credentials securely.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/registry-scope.md#2025-04-22_snippet_1

LANGUAGE: toml
CODE:
```
[install.scopes]
"@myorg3" = { token = "$npm_token", url = "https://registry.myorg.com/" }
```

----------------------------------------

TITLE: Packing and Publishing a Tarball Separately with Bun CLI - Shell
DESCRIPTION: Illustrates the process of first packing a package into a tarball using `bun pm pack`, then publishing that tarball using `bun publish` with the path to the .tgz file. This workflow allows more control or inspection before publishing and can be used in CI/CD pipelines. When publishing from a tarball, lifecycle scripts are not executed. Requires Bun installation and a valid package structure. Inputs include the current project directory; outputs are the .tgz package file and a registry-published package.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/publish.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
$ bun pm pack\n...\n$ bun publish ./package.tgz
```

----------------------------------------

TITLE: Running Migrations Using drizzle-orm Migrator (TypeScript)
DESCRIPTION: Scripts database schema migrations using Drizzle ORM's migrator library, connecting to the Neon Postgres instance. Iterates through available migrations in the specified folder, handles errors, and offers feedback via logging. Requires a valid db export and the drizzle-orm/neon-http/migrator dependency.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-drizzle.md#2025-04-22_snippet_8

LANGUAGE: ts
CODE:
```
import { db } from './db';\nimport { migrate } from "drizzle-orm/neon-http/migrator";\n\nconst main = async () => {\n  try {\n    await migrate(db, { migrationsFolder: "drizzle" });\n    console.log("Migration completed");\n  } catch (error) {\n    console.error("Error during migration:", error);\n    process.exit(1);\n  }\n};\n\nmain();
```

----------------------------------------

TITLE: Accessing Environment Variables Using process.env in TypeScript
DESCRIPTION: This snippet demonstrates how to access environment variables using the standard process.env object in Bun. In this example, it retrieves the value of API_TOKEN from the environment.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/read-env.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
process.env.API_TOKEN; // => "secret"
```

----------------------------------------

TITLE: Parsing Command-line Arguments with util.parseArgs in TypeScript
DESCRIPTION: Shows how to use the util.parseArgs function to convert raw command-line arguments into a structured object with typed values. This approach defines expected options with their types and handles both named options and positional arguments.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/argv.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { parseArgs } from "util";

const { values, positionals } = parseArgs({
  args: Bun.argv,
  options: {
    flag1: {
      type: 'boolean',
    },
    flag2: {
      type: 'string',
    },
  },
  strict: true,
  allowPositionals: true,
});

console.log(values);
console.log(positionals);
```

----------------------------------------

TITLE: Configuring TLS with Client Certificates in TypeScript
DESCRIPTION: Shows how to use client certificates for TLS authentication in a fetch request by providing key and certificate files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_13

LANGUAGE: typescript
CODE:
```
await fetch("https://example.com", {
  tls: {
    key: Bun.file("/path/to/key.pem"),
    cert: Bun.file("/path/to/cert.pem"),
    // ca: [Bun.file("/path/to/ca.pem")],
  },
});
```

----------------------------------------

TITLE: HTML Form for File Upload with FormData
DESCRIPTION: An HTML form that allows users to input their name and upload a profile picture. The form is configured to submit data to the '/action' endpoint using POST method with 'multipart/form-data' encoding.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/file-uploads.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Form</title>
  </head>
  <body>
    <form action="/action" method="post" enctype="multipart/form-data">
      <input type="text" name="name" placeholder="Name" />
      <input type="file" name="profilePicture" />
      <input type="submit" value="Submit" />
    </form>
  </body>
</html>
```

----------------------------------------

TITLE: Changing Environment Variables for Commands in Bun Shell
DESCRIPTION: Demonstrates how to change environment variables for individual commands or globally using .env() and $.env.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

$.env({ FOO: "bar" });

// the globally-set $FOO
await $`echo $FOO`; // bar

// the locally-set $FOO
await $`echo $FOO`.env({ FOO: "baz" }); // baz
```

----------------------------------------

TITLE: Configuring a Child Process with Options in Bun
DESCRIPTION: Shows how to spawn a child process with configuration options. This example demonstrates setting the working directory, environment variables, and an exit handler function that gets called when the process terminates.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/spawn.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const proc = Bun.spawn(["echo", "Hello, world!"], {
  cwd: "/tmp",
  env: { FOO: "bar" },
  onExit(proc, exitCode, signalCode, error) {
    // exit handler
  },
});
```

----------------------------------------

TITLE: Calling SQLite3 Version Function with FFI in TypeScript
DESCRIPTION: This snippet demonstrates how to use bun:ffi to call the sqlite3_libversion function from the SQLite3 library. It imports necessary functions from bun:ffi, opens the library, defines the function signature, and calls the function to print the SQLite3 version.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/ffi.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { dlopen, FFIType, suffix } from "bun:ffi";

// `suffix` is either "dylib", "so", or "dll" depending on the platform
// you don't have to use "suffix", it's just there for convenience
const path = `libsqlite3.${suffix}`;

const {
  symbols: {
    sqlite3_libversion, // the function to call
  },
} = dlopen(
  path, // a library name or file path
  {
    sqlite3_libversion: {
      // no arguments, returns a string
      args: [],
      returns: FFIType.cstring,
    },
  },
);

console.log(`SQLite 3 version: ${sqlite3_libversion()}`);
```

----------------------------------------

TITLE: Initializing Bun SQL Client with Manual Configuration in TypeScript
DESCRIPTION: Shows how to initialize the `bun:sql` client by providing a configuration object with properties for connection details (URL, hostname, port, database, credentials), pool settings (max connections, timeouts), SSL/TLS options, and connection lifecycle callbacks (`onconnect`, `onclose`). This allows for detailed control over the database connection behavior.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_14

LANGUAGE: typescript
CODE:
```
```ts
import { SQL } from "bun";

const db = new SQL({
  // Required
  url: "postgres://user:pass@localhost:5432/dbname",

  // Optional configuration
  hostname: "localhost",
  port: 5432,
  database: "myapp",
  username: "dbuser",
  password: "secretpass",

  // Connection pool settings
  max: 20, // Maximum connections in pool
  idleTimeout: 30, // Close idle connections after 30s
  maxLifetime: 0, // Connection lifetime in seconds (0 = forever)
  connectionTimeout: 30, // Timeout when establishing new connections

  // SSL/TLS options
  tls: true,
  // tls: {
  //   rejectUnauthorized: true,
  //   requestCert: true,
  //   ca: "path/to/ca.pem",
  //   key: "path/to/key.pem",
  //   cert: "path/to/cert.pem",
  //   checkServerIdentity(hostname, cert) {
  //     ...
  //   },
  // },

  // Callbacks
  onconnect: client => {
    console.log("Connected to database");
  },
  onclose: client => {
    console.log("Connection closed");
  },
});
```
```

----------------------------------------

TITLE: Implementing onLoad Callback in Bun Plugin
DESCRIPTION: Example of using the onLoad callback in a Bun plugin. This callback allows modification of module contents before they are parsed by Bun, such as transforming imports or generating dynamic content.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/plugins.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
import { plugin } from "bun";

plugin({
  name: "env plugin",
  setup(build) {
    build.onLoad({ filter: /env/, namespace: "file" }, args => {
      return {
        contents: `export default ${JSON.stringify(process.env)}`,
        loader: "js",
      };
    });
  },
});
```

----------------------------------------

TITLE: Compressing and decompressing data with gzip in Bun using TypeScript
DESCRIPTION: This snippet demonstrates how to compress a buffer using Bun.gzipSync() and then decompress it using Bun.gunzipSync(). Both functions work with Uint8Array data and return Uint8Array results.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/gzip.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const data = Buffer.from("Hello, world!");
const compressed = Bun.gzipSync(data);
// => Uint8Array

const decompressed = Bun.gunzipSync(compressed);
// => Uint8Array
```

----------------------------------------

TITLE: Importing JSON File in TypeScript using Import Attributes
DESCRIPTION: This snippet shows how to import a JSON file in TypeScript using the Import Attributes syntax. It demonstrates accessing the same properties as in the standard import method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/import-json.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import data from "./package.json" with { type: "json" };

data.name; // => "bun"
data.version; // => "1.0.0"
data.author.name; // => "John Dough"
```

----------------------------------------

TITLE: Writing ReadableStream to a File in TypeScript using Bun.write()
DESCRIPTION: This snippet demonstrates how to write a ReadableStream to disk by first converting it to a Response object. The Bun.write() function is then used to write the Response to a file path.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/stream.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const stream: ReadableStream = ...;
const path = "./file.txt";
const response = new Response(stream);

await Bun.write(path, response);
```

----------------------------------------

TITLE: Converting ArrayBuffer to Typed Array
DESCRIPTION: Shows how to convert an ArrayBuffer into a typed array (Int8Array) for binary data manipulation. The example demonstrates accessing array elements and length properties.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/read-file/arraybuffer.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const buffer = await file.arrayBuffer();
const bytes = new Int8Array(buffer);

bytes[0];
bytes.length;
```

----------------------------------------

TITLE: Running a Simple Query with Drizzle and Neon (TypeScript)
DESCRIPTION: Queries the database using Drizzle ORM with a raw SQL statement, printing results to the console. Demonstrates use of Drizzle's SQL tag and Bun's top-level await. Assumes a valid db export and successful Postgres connection. Outputs query result rows.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-drizzle.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
import { db } from "./db";\nimport { sql } from "drizzle-orm";\n\nconst query = sql`select 'hello world' as text`;\nconst result = await db.execute(query);\nconsole.log(result.rows);
```

----------------------------------------

TITLE: Running the Express Server with Bun (Shell)
DESCRIPTION: Executes the TypeScript server file (`server.ts`) using the Bun runtime. This command starts the HTTP server defined in the script, making it accessible (typically on `localhost:8080` based on the example). Requires Bun to be installed and the `server.ts` file to exist.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/express.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
$ bun server.ts
```

----------------------------------------

TITLE: Implementing onStart Callback in Bun Plugin
DESCRIPTION: Example of using the onStart callback in a Bun plugin. This callback is executed when the bundler starts a new bundle and can be used for initialization tasks.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/plugins.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import { plugin } from "bun";

plugin({
  name: "onStart example",

  setup(build) {
    build.onStart(() => {
      console.log("Bundle started!");
    });
  },
});
```

----------------------------------------

TITLE: Resolving file paths with Bun.resolveSync() in TypeScript
DESCRIPTION: Shows how to resolve file paths or module specifiers using Bun's internal module resolution algorithm. Examples demonstrate resolving relative paths and node modules.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_27

LANGUAGE: typescript
CODE:
```
Bun.resolveSync("./foo.ts", "/path/to/project");
// => "/path/to/project/foo.ts"

Bun.resolveSync("zod", "/path/to/project");
// => "/path/to/project/node_modules/zod/index.ts"
```

----------------------------------------

TITLE: Configuring Postgres Connection String for Neon (Shell Environment Variable)
DESCRIPTION: Shows how to declare a Neon Postgres database connection string in a .env.local file, required by the Neon serverless driver. Expects real credentials for production. Input and output are managed by Bun's dotenv support; constraints require correct URL format and credentials.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-drizzle.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
DATABASE_URL=postgresql://username:password@ep-adj-noun-guid.us-east-1.aws.neon.tech/neondb?sslmode=require
```

----------------------------------------

TITLE: Running TypeScript with Prisma using Bun
DESCRIPTION: Command output showing how to run the TypeScript file with Bun and demonstrates the results of multiple executions. Each run creates a new user and shows the updated count.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/prisma.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
$ bun run index.ts
Created john-0.12802932895402364@example.com
There are 1 users in the database.
$ bun run index.ts
Created john-0.8671308799782803@example.com
There are 2 users in the database.
$ bun run index.ts
Created john-0.4465968383115295@example.com
There are 3 users in the database.
```

----------------------------------------

TITLE: Recursive Directory Reading
DESCRIPTION: Shows how to recursively read directory contents.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-io.md#2025-04-22_snippet_14

LANGUAGE: typescript
CODE:
```
import { readdir } from "node:fs/promises";

// read all the files in the current directory, recursively
const files = await readdir("../", { recursive: true });
```

----------------------------------------

TITLE: Processing Command Output Line by Line with Bun Shell
DESCRIPTION: This snippet demonstrates how to process each line of a command's output separately using the `lines()` method, which returns an async iterable of lines that can be used with a for-await loop.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/shell.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { $ } from "bun";

for await (const line of $`ls -l`.lines()) {
  console.log(line);
}
```

----------------------------------------

TITLE: Publishing with One-Time Password (OTP) using Bun CLI - Shell
DESCRIPTION: Demonstrates providing a one-time password directly in the publish command using the `--otp` flag, bypassing the prompt for interactive input. This is particularly useful in automated workflows and CI environments where manual entry isn't feasible. The command expects a valid 2FA code as a parameter, and, given correct credentials and permissions, publishes the package to the npm registry.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/publish.md#2025-04-22_snippet_8

LANGUAGE: sh
CODE:
```
$ bun publish --otp 123456
```

----------------------------------------

TITLE: Enabling Test Coverage in bunfig.toml
DESCRIPTION: This snippet shows how to enable test coverage by default in bunfig.toml configuration. Setting coverage = true will make Bun always generate coverage reports when running tests.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/coverage.md#2025-04-22_snippet_1

LANGUAGE: toml
CODE:
```
[test]

# always enable coverage
coverage = true
```

----------------------------------------

TITLE: Worker Implementation in Standalone Executable
DESCRIPTION: Example of implementing Web Workers in a compiled Bun application.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/executables.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
console.log("Hello from Bun!");

// Any of these will work:
new Worker("./my-worker.ts");
new Worker(new URL("./my-worker.ts", import.meta.url));
new Worker(new URL("./my-worker.ts", import.meta.url).href);
```

----------------------------------------

TITLE: Configuring Files to Exclude from Docker Build Context
DESCRIPTION: This `.dockerignore` file lists files and directories that should be excluded from the Docker build context. This prevents unnecessary files (like `node_modules`, build artifacts, Git history, environment files, and editor configurations) from being sent to the Docker daemon and included in the image layers, improving build speed and security.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/docker.md#2025-04-22_snippet_1

LANGUAGE: txt
CODE:
```
#.dockerignore
node_modules
Dockerfile*
docker-compose*
.dockerignore
.git
.gitignore
README.md
LICENSE
.vscode
Makefile
helm-charts
.env
.editorconfig
.idea
coverage*
```

----------------------------------------

TITLE: Proxying HTTP Requests with Fetch in TypeScript
DESCRIPTION: Demonstrates how to proxy an HTTP request through a specified proxy server by using the proxy option in fetch.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
const response = await fetch("http://example.com", {
  proxy: "http://proxy.com",
});
```

----------------------------------------

TITLE: Setting HTTP Method for Presigned URLs
DESCRIPTION: Shows how to set the HTTP method for a presigned URL using the method option. This allows for different operations like PUT, DELETE, GET, HEAD, and POST.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
const url = s3file.presign({
  method: "PUT",
  // method: "DELETE",
  // method: "GET",
  // method: "HEAD",
  // method: "POST",
  // method: "PUT",
});
```

----------------------------------------

TITLE: Executing Node.js Spawn Benchmark Script in Bash
DESCRIPTION: Shows the execution and output of a benchmark script (`spawn.node.mjs`) using Node.js (version 18.9.1) on an Apple M1 Max processor. It measures the performance of `spawnSync echo hi` for comparison with Bun, reporting an average time of 1.47 ms per iteration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_16

LANGUAGE: bash
CODE:
```
$ node spawn.node.mjs
cpu: Apple M1 Max
runtime: node v18.9.1 (arm64-darwin)

benchmark              time (avg)             (min … max)       p75       p99      p995
--------------------------------------------------------- -----------------------------
spawnSync echo hi    1.47 ms/iter     (1.14 ms … 2.64 ms)   1.57 ms   2.37 ms   2.52 ms
```

----------------------------------------

TITLE: Configuring NPM Registry in bunfig.toml for Bun Install
DESCRIPTION: This snippet demonstrates various ways to configure the npm registry in bunfig.toml for Bun install. It shows how to set a custom registry URL, add authentication tokens, and use username/password authentication.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/custom-registry.md#2025-04-22_snippet_0

LANGUAGE: toml
CODE:
```
[install]
# set default registry as a string
registry = "https://registry.npmjs.org"

# if needed, set a token
registry = { url = "https://registry.npmjs.org", token = "123456" }

# if needed, set a username/password
registry = "https://username:password@registry.npmjs.org"
```

----------------------------------------

TITLE: Reading Command Output Line-by-Line in Bun Shell
DESCRIPTION: Shows how to read the output of a command line-by-line using the .lines() method in Bun Shell. This snippet demonstrates iterating over the lines of output from an echo command.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

for await (let line of $`echo "Hello World!"`.lines()) {
  console.log(line); // Hello World!
}
```

----------------------------------------

TITLE: Installing specific versions of Bun on Linux/Mac
DESCRIPTION: This snippet demonstrates how to install a specific version of Bun on Linux and Mac using the install script.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/installation.md#2025-04-22_snippet_11

LANGUAGE: bash
CODE:
```
$ curl -fsSL https://bun.sh/install | bash -s "bun-v$BUN_LATEST_VERSION"
```

----------------------------------------

TITLE: Enabling Safe Integer Support for SQLite Queries in Bun (TypeScript)
DESCRIPTION: Uses Bun's Database constructor option safeIntegers: true to return SQLite integer fields as BigInt in JavaScript, preventing loss of precision when dealing with 64-bit integers. Checks for value overflows when binding BigInts exceeding SQLite's 64-bit integer range.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_22

LANGUAGE: TypeScript
CODE:
```
import { Database } from "bun:sqlite";

const db = new Database(":memory:", { safeIntegers: true });
const query = db.query(
  `SELECT ${BigInt(Number.MAX_SAFE_INTEGER) + 102n} as max_int`,
);
const result = query.get();
console.log(result.max_int); // => 9007199254741093n

```

LANGUAGE: TypeScript
CODE:
```
import { Database } from "bun:sqlite";

const db = new Database(":memory:", { safeIntegers: true });
db.run("CREATE TABLE test (id INTEGER PRIMARY KEY, value INTEGER)");

const query = db.query("INSERT INTO test (value) VALUES ($value)");

try {
  query.run({ $value: BigInt(Number.MAX_SAFE_INTEGER) ** 2n });
} catch (e) {
  console.log(e.message); // => BigInt value '81129638414606663681390495662081' is out of range
}

```

----------------------------------------

TITLE: Running Bun Tests in Watch Mode
DESCRIPTION: Command to run Bun tests with the --watch flag to automatically re-run tests when source files change.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/hot.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
$ bun --watch test
```

----------------------------------------

TITLE: Bun's first optimization step: Constant replacement
DESCRIPTION: This diff shows how Bun replaces process.env.NODE_ENV with the string 'production' as the first step of optimization.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/define-constant.md#2025-04-22_snippet_2

LANGUAGE: ts-diff
CODE:
```
+ if ("production" === "production") {
    console.log("Production mode");
  } else {
    console.log("Development mode");
  }
```

----------------------------------------

TITLE: Deleting Directory Recursively with Force Option in TypeScript
DESCRIPTION: This snippet demonstrates how to delete a directory and all its contents using the 'rm' function from node:fs/promises. It uses the recursive and force options to ensure complete deletion without errors.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/delete-directory.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { rm } from "node:fs/promises";

// Delete a directory and all its contents
await rm("path/to/directory", { recursive: true, force: true });
```

----------------------------------------

TITLE: Writing DOM Tests with Bun and Happy DOM
DESCRIPTION: Example test file showing how to write DOM-based tests using Happy DOM's mocked browser APIs
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/happy-dom.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { test, expect } from "bun:test";

test("set button text", () => {
  document.body.innerHTML = `<button>My button</button>`;
  const button = document.querySelector("button");
  expect(button?.innerText).toEqual("My button");
});
```

----------------------------------------

TITLE: Converting a Blob to a String using .text() in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to convert the contents of a `Blob` object into a string. It first creates a `Blob` containing "hello world", then uses the asynchronous `text()` method, which returns a Promise resolving to the string representation of the Blob's content. This is a standard method available on the Blob API.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/blob-to-string.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
const blob = new Blob(["hello world"]);
const str = await blob.text();
// => "hello world"
```

----------------------------------------

TITLE: Using the Shorthand Bun Command for File Execution
DESCRIPTION: Demonstrates the alternative "naked" command syntax (`bun <filename>`) which behaves identically to `bun run <filename>` for executing source files like `index.tsx` and `index.js`. This provides a more concise way to run files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/run.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
$ bun index.tsx
$ bun index.js
```

----------------------------------------

TITLE: Getting Mocked Time with jest.now() in bun:test
DESCRIPTION: Shows how to use jest.now() to retrieve the current mocked timestamp directly when using fake timers, without creating a new Date object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/time.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { test, expect, jest } from "bun:test";

test("get the current mocked time", () => {
  jest.useFakeTimers();
  jest.setSystemTime(new Date("2020-01-01T00:00:00.000Z"));
  
  expect(Date.now()).toBe(1577836800000); // Jan 1, 2020 timestamp
  expect(jest.now()).toBe(1577836800000); // Same value
  
  jest.useRealTimers();
});
```

----------------------------------------

TITLE: Test with Timeout
DESCRIPTION: Demonstrates setting a custom timeout for a test case
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/writing.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import { test } from "bun:test";

test("wat", async () => {
  const data = await slowOperation();
  expect(data).toBe(42);
}, 500);
```

----------------------------------------

TITLE: TypeScript Import Variants
DESCRIPTION: Shows different ways to import modules in TypeScript, including with and without file extensions.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
import { hello } from "./hello";
import { hello } from "./hello.ts"; // this works
```

----------------------------------------

TITLE: Disabling Runtime Transpiler Cache
DESCRIPTION: Command to disable Bun's runtime transpiler cache for environments like Docker or ephemeral filesystems.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_19

LANGUAGE: sh
CODE:
```
BUN_RUNTIME_TRANSPILER_CACHE_PATH=0 bun run dev
```

----------------------------------------

TITLE: Creating a Response with an Async Generator Stream
DESCRIPTION: Demonstrates creating a Response object with an async generator function as the body. This approach enables simple creation of a ReadableStream from asynchronous data sources.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/streams.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const response = new Response(async function* () {
  yield "hello";
  yield "world";
}());

await response.text(); // "helloworld"
```

----------------------------------------

TITLE: Installing Bun Completions Manually
DESCRIPTION: Commands for manually installing Bun shell completions. The first command outputs completions to a file, while the second installs them to a specified directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bun-completions.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
bun completions > path-to-file
```

LANGUAGE: shell
CODE:
```
bun completions /path/to/directory
```

----------------------------------------

TITLE: Defining and Compiling an Addition Function in Zig
DESCRIPTION: This snippet shows how to define a simple addition function in Zig and compile it as a dynamic library. It then demonstrates how to use this library with bun:ffi in TypeScript.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/ffi.md#2025-04-22_snippet_1

LANGUAGE: zig
CODE:
```
// add.zig
pub export fn add(a: i32, b: i32) i32 {
  return a + b;
}
```

LANGUAGE: bash
CODE:
```
$ zig build-lib add.zig -dynamic -OReleaseFast
```

LANGUAGE: typescript
CODE:
```
import { dlopen, FFIType, suffix } from "bun:ffi";
const { i32 } = FFIType;

const path = `libadd.${suffix}`;

const lib = dlopen(path, {
  add: {
    args: [i32, i32],
    returns: i32,
  },
});

console.log(lib.symbols.add(1, 2));
```

----------------------------------------

TITLE: Accepting Multiple Module Updates in Bun HMR
DESCRIPTION: Shows how to accept updates from multiple imported modules using import.meta.hot.accept with an array of module paths and a callback that receives an array of updated modules.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/hmr.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import.meta.hot.accept(["./foo", "./bar"], newModules => {
  // newModules is an array where each item corresponds to the updated module
  // or undefined if that module had a syntax error
});
```

----------------------------------------

TITLE: Installing Bun and Running Basic Commands in GitHub Actions
DESCRIPTION: This workflow example demonstrates how to set up Bun in a GitHub Actions runner and run common Bun commands like install, execute TypeScript files, and run build scripts.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/cicd.md#2025-04-22_snippet_0

LANGUAGE: yaml
CODE:
```
name: my-workflow
jobs:
  my-job:
    name: my-job
    runs-on: ubuntu-latest
    steps:
      # ...
      - uses: actions/checkout@v4
     - uses: oven-sh/setup-bun@v2

      # run any `bun` or `bunx` command
     - run: bun install
     - run: bun index.ts
     - run: bun run build
```

----------------------------------------

TITLE: Creating a Worker from the Main Thread in JavaScript
DESCRIPTION: Example of creating a Worker instance in the main thread and setting up basic communication with postMessage.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/workers.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const worker = new Worker("./worker.ts");

worker.postMessage("hello");
worker.onmessage = event => {
  console.log(event.data);
};
```

----------------------------------------

TITLE: Opening Files in Editor with Bun.openInEditor()
DESCRIPTION: Shows how to use Bun.openInEditor() to open files in the default or specified editor, with options for line and column numbers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
const currentFile = import.meta.url;
Bun.openInEditor(currentFile);
```

LANGUAGE: toml
CODE:
```
[debug]
editor = "code"
```

LANGUAGE: typescript
CODE:
```
Bun.openInEditor(import.meta.url, {
  editor: "vscode", // or "subl"
  line: 10,
  column: 5,
});
```

----------------------------------------

TITLE: Running Specific Test Files in Bun
DESCRIPTION: Demonstrates how to run specific test files by passing a file path pattern to the test command.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/run-tests.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
$ bun test test3
bun test v$BUN_LATEST_VERSION (9c68abdb)

test3.test.js:
✓ add [1.40ms]
✓ multiply [0.03ms]

 2 pass
 0 fail
 2 expect() calls
Ran 2 tests across 1 files. [15.00ms]
```

----------------------------------------

TITLE: Checking Linux Kernel Version in Bash
DESCRIPTION: This command checks the currently running Linux kernel version. Bun recommends version 5.6 or higher for optimal performance, particularly for HTTP requests using io_uring's connect() operation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/install.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# If this returns a version >= 5.6, you don't need to do anything
$ uname -r
```

----------------------------------------

TITLE: Setting Environment Variables Programmatically in Bun
DESCRIPTION: How to set environment variables programmatically by assigning values to process.env properties in TypeScript.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_5

LANGUAGE: ts
CODE:
```
process.env.FOO = "hello";
```

----------------------------------------

TITLE: Querying Movies from EdgeDB with Type-Safe Query Builder (TypeScript)
DESCRIPTION: In this TypeScript snippet, the code imports the generated EdgeQL query builder, constructs a query for all movies (fetching title and releaseYear), runs it, and prints results. Dependencies: EdgeDB client, generated query builder files, migrated schema. Input: None. Output: Array of movie data, printed to console. EdgeQL builder provides typesafety for returned objects.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/edgedb.md#2025-04-22_snippet_12

LANGUAGE: ts
CODE:
```
import { createClient } from "edgedb";
import e from "./dbschema/edgeql-js";

const client = createClient();

const query = e.select(e.Movie, () => ({
  title: true,
  releaseYear: true,
}));

const results = await query.run(client);
console.log(results);

results; // { title: string, releaseYear: number | null }[]
```

----------------------------------------

TITLE: Configuring Bun S3Client for DigitalOcean Spaces - TypeScript
DESCRIPTION: This code sample shows how to connect Bun's S3Client to DigitalOcean Spaces by specifying the Spaces endpoint in the S3Client constructor. It requires DigitalOcean Spaces credentials, bucket name, and the endpoint URL (with region). The region parameter is optional. This sets up the client to target DigitalOcean Spaces for subsequent S3 operations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_14

LANGUAGE: typescript
CODE:
```
import { S3Client } from \"bun\";

const spaces = new S3Client({
  accessKeyId: \"access-key\",
  secretAccessKey: \"secret-key\",
  bucket: \"my-bucket\",
  // region: \"nyc3\",
  endpoint: \"https://<region>.digitaloceanspaces.com\",
});
```

----------------------------------------

TITLE: Accessing Main Script Path in Bun
DESCRIPTION: Shows how to get the absolute path of the entrypoint script using Bun.main and demonstrates its use for determining direct script execution.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
Bun.main;
// /path/to/script.ts
```

LANGUAGE: typescript
CODE:
```
if (import.meta.path === Bun.main) {
  // this script is being directly executed
} else {
  // this file is being imported from another script
}
```

----------------------------------------

TITLE: Transformed JavaScript Output
DESCRIPTION: Shows the resulting vanilla JavaScript code after TSX transformation
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/transpiler.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { __require as require } from "bun:wrap";
import * as JSX from "react/jsx-dev-runtime";
var jsx = require(JSX).jsxDEV;

export default jsx(
  "div",
  {
    children: "hi!",
  },
  undefined,
  false,
  undefined,
  this,
);
```

----------------------------------------

TITLE: Running the SolidStart Development Server
DESCRIPTION: This command starts the SolidStart development server. Two equivalent commands are shown - one using bun run with the dev script, and another using bunx to directly execute solid-start.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/solidstart.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
$ bun run dev
# or, equivalently
$ bunx solid-start dev
```

----------------------------------------

TITLE: Building the Docker Image for the Bun Application in Bash
DESCRIPTION: This command uses `docker build` to create a Docker image from the `Dockerfile` located in the current directory (`.`). The `-t bun-hello-world` flag tags the image with the name `bun-hello-world`. The `--pull` flag ensures that the latest version of the base image (`oven/bun`) is downloaded before building. The output shows the steps involved in the build process.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/docker.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ docker build --pull -t bun-hello-world .
[+] Building 0.9s (21/21) FINISHED
 => [internal] load build definition from Dockerfile                                                                                     0.0s
 => => transferring dockerfile: 37B                                                                                                      0.0s
 => [internal] load .dockerignore                                                                                                        0.0s
 => => transferring context: 35B                                                                                                         0.0s
 => [internal] load metadata for docker.io/oven/bun:1                                                                                    0.8s
 => [auth] oven/bun:pull token for registry-1.docker.io                                                                                  0.0s
 => [base 1/2] FROM docker.io/oven/bun:1@sha256:373265748d3cd3624cb3f3ee6004f45b1fc3edbd07a622aeeec17566d2756997                         0.0s
 => [internal] load build context                                                                                                        0.0s
 => => transferring context: 155B                                                                                                        0.0s
 # ...lots of commands...
 => exporting to image                                                                                                                   0.0s
 => => exporting layers                                                                                                                  0.0s
 => => writing image sha256:360663f7fdcd6f11e8e94761d5592e2e4dfc8d167f034f15cd5a863d5dc093c4                                             0.0s
 => => naming to docker.io/library/bun-hello-world                                                                                       0.0s
```

----------------------------------------

TITLE: Retrieving Child Process Resource Usage in TypeScript
DESCRIPTION: Shows how to get information about a child process's resource usage after it has exited.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
const proc = Bun.spawn(["bun", "--version"]);
await proc.exited;

const usage = proc.resourceUsage();
console.log(`Max memory used: ${usage.maxRSS} bytes`);
console.log(`CPU time (user): ${usage.cpuTime.user} µs`);
console.log(`CPU time (system): ${usage.cpuTime.system} µs`);
```

----------------------------------------

TITLE: Running TypeScript and JSX Files with Bun
DESCRIPTION: Demonstrates how to execute TypeScript and JSX files using Bun's command-line interface. Bun transpiles these files on the fly without performing type checking.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/loaders.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ bun index.js
$ bun index.jsx
$ bun index.ts
$ bun index.tsx
```

----------------------------------------

TITLE: Using DataView to read and write Uint8 values
DESCRIPTION: Creates a DataView for an ArrayBuffer and demonstrates setting and getting an 8-bit unsigned integer at a specific byte offset. DataView provides a low-level interface for manipulating data in an ArrayBuffer.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_2

LANGUAGE: ts
CODE:
```
const buf = new ArrayBuffer(4);
// [0b00000000, 0b00000000, 0b00000000, 0b00000000]

const dv = new DataView(buf);
dv.setUint8(0, 3); // write value 3 at byte offset 0
dv.getUint8(0); // => 3
// [0b00000011, 0b00000000, 0b00000000, 0b00000000]
```

----------------------------------------

TITLE: Creating Directories
DESCRIPTION: Example of recursively creating directories using mkdir.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-io.md#2025-04-22_snippet_15

LANGUAGE: typescript
CODE:
```
import { mkdir } from "node:fs/promises";

await mkdir("path/to/dir", { recursive: true });
```

----------------------------------------

TITLE: JSX Prop Punning Example
DESCRIPTION: An example of Bun's support for 'prop punning' in JSX, which is a shorthand syntax for assigning a variable to a prop with the same name, reducing redundancy in component code.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_24

LANGUAGE: tsx
CODE:
```
function Div(props: {className: string;}) {
  const {className} = props;

  // without punning
  return <div className={className} />;
  // with punning
  return <div {className} />;
}
```

----------------------------------------

TITLE: Initializing Project and Installing Drizzle Dependencies using Bun (Shell)
DESCRIPTION: Initializes a new Bun project using `bun init -y` and installs the necessary Drizzle ORM packages. `drizzle-orm` is added as a runtime dependency, and `drizzle-kit` (the migration tool) is added as a development dependency (`-D`). Requires Bun to be installed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/drizzle.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun init -y
$ bun add drizzle-orm
$ bun add -D drizzle-kit
```

----------------------------------------

TITLE: Creating a ReadableStream from a File in Bun
DESCRIPTION: This snippet demonstrates how to use Bun.file() to create a BunFile instance from a file path and then convert it to a ReadableStream. This allows for lazy and incremental reading of the file content.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/read-file/stream.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const path = "/path/to/package.json";
const file = Bun.file(path);

const stream = file.stream();
```

----------------------------------------

TITLE: Applying Database Migrations with Drizzle ORM in Bun (TypeScript)
DESCRIPTION: This script applies pending database migrations found in the specified folder (`./drizzle`). It first establishes a database connection similar to `db.ts` and then calls the `migrate` function from `drizzle-orm/bun-sqlite/migrator`, passing the Drizzle database instance and the path to the migrations folder. Depends on `drizzle-orm`, `bun:sqlite`, and the existence of the `drizzle` migration folder.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/drizzle.md#2025-04-22_snippet_7

LANGUAGE: ts
CODE:
```
#migrate.ts
import { migrate } from "drizzle-orm/bun-sqlite/migrator";

import { drizzle } from "drizzle-orm/bun-sqlite";
import { Database } from "bun:sqlite";

const sqlite = new Database("sqlite.db");
const db = drizzle(sqlite);
migrate(db, { migrationsFolder: "./drizzle" });
```

----------------------------------------

TITLE: Converting Node.js Readable to Blob using Response in TypeScript
DESCRIPTION: This snippet shows how to create a Blob from a Node.js Readable stream using the Response object in Bun. It imports the Readable class from the 'stream' module, creates a stream from an array of strings, and then uses Response and its blob() method to convert the stream to a Blob.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/streams/node-readable-to-blob.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Readable } from "stream";
const stream = Readable.from(["Hello, ", "world!"]);
const blob = await new Response(stream).blob();
```

----------------------------------------

TITLE: Running a Custom CLI Binary with bunx (Shell - bash)
DESCRIPTION: Demonstrates invoking a user-defined CLI ('my-cli') via bunx, assuming it has been published to npm and declared in package.json. No prior installation is needed; bunx will auto-install if necessary. Input is the CLI executable name; output is determined by the CLI script's logic.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bunx.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
$ bunx my-cli
```

----------------------------------------

TITLE: Running Bun in Watch Mode with a File
DESCRIPTION: Command to run a TypeScript/JSX file with Bun's --watch mode, which will automatically restart the process when any imported files change.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/hot.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ bun --watch index.tsx
```

----------------------------------------

TITLE: Basic CSS Module Composition in the Same File
DESCRIPTION: Demonstrates how to use the 'composes' property to reuse style rules across multiple classes within the same CSS module file. This example shows a button class composing styles from a background class.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_28

LANGUAGE: css
CODE:
```
/* styles.module.css */
.button {
  composes: background;
  color: red;
}

.background {
  background-color: blue;
}
```

----------------------------------------

TITLE: Output of Parsed Command-line Arguments in Bun
DESCRIPTION: Shows the structured output when running a Bun script with parsed command-line arguments using util.parseArgs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/argv.md#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
$ bun run cli.ts --flag1 --flag2 value
{
  flag1: true,
  flag2: "value",
}
[ "/path/to/bun", "/path/to/cli.ts" ]
```

----------------------------------------

TITLE: Consuming ReadableStream Chunks with Async Iteration in Bun
DESCRIPTION: This snippet shows how to consume the chunks of a ReadableStream using an async iterable with a for await loop. Each chunk is a Uint8Array containing a portion of the file's data.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/read-file/stream.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
for await (const chunk of stream) {
  chunk; // => Uint8Array
}
```

----------------------------------------

TITLE: Defining a Node-Compatible CLI Script with Shebang (JavaScript)
DESCRIPTION: Provides a minimal JavaScript executable script with a shebang for Node.js. This file can be targeted by the 'bin' mapping in package.json and will be run via node or via bunx depending on configuration. The shebang tells the OS to use Node to run the script. No dependencies beyond Node.js; outputs 'Hello world!' to stdout.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bunx.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
#!/usr/bin/env node

console.log("Hello world!");
```

----------------------------------------

TITLE: Using Environment Variables in bunfig.toml for NPM Registry Configuration
DESCRIPTION: This snippet shows how to use environment variables in bunfig.toml to configure the npm registry for Bun install. It demonstrates setting the registry URL and using an environment variable for the authentication token.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/custom-registry.md#2025-04-22_snippet_1

LANGUAGE: toml
CODE:
```
[install]
registry = { url = "https://registry.npmjs.org", token = "$npm_token" }
```

----------------------------------------

TITLE: JSX with Custom Import Source - React JSX
DESCRIPTION: Configuration for using a custom JSX import source with the react-jsx transform mode, useful for integrating with libraries like Preact that provide their own JSX runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_16

LANGUAGE: jsonc
CODE:
```
{
  "jsx": "react-jsx",
  "jsxImportSource": "preact",
}
```

----------------------------------------

TITLE: Reading a File to Buffer in Bun using TypeScript
DESCRIPTION: This snippet demonstrates how to read a file into a Buffer in Bun. It first creates a BunFile instance using Bun.file(), then reads the file content as an ArrayBuffer using .arrayBuffer(), and finally converts it to a Buffer using Buffer.from().
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/read-file/buffer.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const path = "/path/to/package.json";
const file = Bun.file(path);

const arrbuf = await file.arrayBuffer();
const buffer = Buffer.from(arrbuf);
```

----------------------------------------

TITLE: Plugin Type Definitions in TypeScript
DESCRIPTION: Type definitions for Bun's plugin system, including PluginBuilder interface and supported loaders.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/plugins.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
type PluginBuilder = {
  onStart(callback: () => void): void;
  onResolve: (
    args: { filter: RegExp; namespace?: string },
    callback: (args: { path: string; importer: string }) => {
      path: string;
      namespace?: string;
    } | void,
  ) => void;
  onLoad: (
    args: { filter: RegExp; namespace?: string },
    defer: () => Promise<void>,
    callback: (args: { path: string }) => {
      loader?: Loader;
      contents?: string;
      exports?: Record<string, any>;
    },
  ) => void;
  config: BuildConfig;
};

type Loader = "js" | "jsx" | "ts" | "tsx" | "css" | "json" | "toml";
```

----------------------------------------

TITLE: Querying Outdated Dependencies with Package Filtering using Bun CLI (Bash)
DESCRIPTION: These bash commands show how to display outdated dependencies for a subset of packages using bun outdated with the --filter flag. This allows querying by package name patterns (e.g. 'pkg-*') or targeting just the root package.json ('./'). Requires Bun and a monorepo configuration. Outputs a report of outdated dependencies for the filtered packages only.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/filter.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
# Display outdated dependencies for workspaces starting with `pkg-`
$ bun outdated --filter 'pkg-*'

# Display outdated dependencies for only the root package.json
$ bun outdated --filter './'

```

----------------------------------------

TITLE: Ensuring Reproducible Installs with Frozen Lockfile
DESCRIPTION: Demonstrates using the `--frozen-lockfile` flag with `bun install`. This ensures that the exact package versions specified in the `bun.lock` file are installed, preventing any updates to the lockfile and exiting with an error if `package.json` conflicts with the lockfile.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/install.md#2025-04-22_snippet_11

LANGUAGE: bash
CODE:
```
$ bun install --frozen-lockfile
```

----------------------------------------

TITLE: Reading from a ReadableStream using for-await Loop
DESCRIPTION: Shows how to consume a ReadableStream chunk by chunk using a for-await loop. This pattern allows processing stream data as it becomes available.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/streams.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
for await (const chunk of stream) {
  console.log(chunk);
  // => "hello"
  // => "world"
}
```

----------------------------------------

TITLE: Redis Error Handling in Bun
DESCRIPTION: Shows how to handle errors thrown by Bun's Redis client, including connection errors and authentication failures.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/redis.md#2025-04-22_snippet_12

LANGUAGE: typescript
CODE:
```
try {
  await redis.get("non-existent-key");
} catch (error) {
  if (error.code === "ERR_REDIS_CONNECTION_CLOSED") {
    console.error("Connection to Redis server was closed");
  } else if (error.code === "ERR_REDIS_AUTHENTICATION_FAILED") {
    console.error("Authentication failed");
  } else {
    console.error("Unexpected error:", error);
  }
}
```

----------------------------------------

TITLE: Creating CookieMap Instances in TypeScript
DESCRIPTION: Different ways to initialize a Bun.CookieMap, including empty maps, from cookie strings, objects, or arrays of name-value pairs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// Empty cookie map
const cookies = new Bun.CookieMap();

// From a cookie string
const cookies1 = new Bun.CookieMap("name=value; foo=bar");

// From an object
const cookies2 = new Bun.CookieMap({
  session: "abc123",
  theme: "dark",
});

// From an array of name/value pairs
const cookies3 = new Bun.CookieMap([
  ["session", "abc123"],
  ["theme", "dark"],
]);
```

----------------------------------------

TITLE: Compiled Output for Nested Media Queries - Bun Bundler CSS
DESCRIPTION: Displays how Bun un-nests media queries from inside selectors to global media rules. Separates @media block and selector for browser consumption. No dependencies. Maintains intended responsive behavior in compatible browsers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
.responsive-element {\n  display: block;\n}\n\n@media (min-width: 768px) {\n  .responsive-element {\n    display: flex;\n  }\n}
```

----------------------------------------

TITLE: Promise-based Directory Watching with fs/promises in Bun
DESCRIPTION: This example uses the fs/promises module with for await...of syntax instead of callbacks to listen for file system changes, providing a more modern approach to handling file events.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/read-file/watch.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { watch } from "fs/promises";

const watcher = watch(import.meta.dir);
for await (const event of watcher) {
  console.log(`Detected ${event.eventType} in ${event.filename}`);
}
```

----------------------------------------

TITLE: Query Execution and Cancellation in TypeScript
DESCRIPTION: Demonstrates how to execute and cancel queries using the execute() and cancel() methods.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_13

LANGUAGE: typescript
CODE:
```
const query = await sql`SELECT * FROM users`.execute();
setTimeout(() => query.cancel(), 100);
await query;
```

----------------------------------------

TITLE: Generating lcov Coverage Reports in Bun
DESCRIPTION: This snippet shows how to configure Bun to generate lcov coverage reports. The lcov format is widely used and compatible with many coverage visualization tools. The report will be saved as lcov.info in the coverage directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/coverage.md#2025-04-22_snippet_7

LANGUAGE: toml
CODE:
```
[test]
coverageReporter = "lcov"
```

----------------------------------------

TITLE: Accessing Typed Environment Variables
DESCRIPTION: Shows how to access environment variables after adding proper TypeScript type definitions.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_18

LANGUAGE: ts
CODE:
```
process.env.AWESOME; // => string
```

----------------------------------------

TITLE: Writing Assertions for Mock Function Behavior in Bun Test
DESCRIPTION: Demonstrates how to write test assertions to verify mock function behavior, including call count, arguments passed, and return values.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/mock-functions.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { test, expect, mock } from "bun:test";

const random = mock((multiplier: number) => multiplier * Math.random());

test("random", async () => {
  const a = random(1);
  const b = random(2);
  const c = random(3);

  expect(random).toHaveBeenCalled();
  expect(random).toHaveBeenCalledTimes(3);
  expect(random.mock.args).toEqual([[1], [2], [3]]);
  expect(random.mock.results[0]).toEqual({ type: "return", value: a });
});
```

----------------------------------------

TITLE: Converting ReadableStream to Array using Bun in TypeScript
DESCRIPTION: This snippet shows how to use the Bun.readableStreamToArray function to convert a ReadableStream into an array of chunks. It creates a new ReadableStream and then uses the utility function to read its contents into an array.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/streams/to-array.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const stream = new ReadableStream();
const str = await Bun.readableStreamToArray(stream);
```

----------------------------------------

TITLE: Converting Blob to ArrayBuffer in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates creating a `Blob` object from a string and then asynchronously converting it into an `ArrayBuffer` using the `arrayBuffer()` method. This is a standard Web API method useful for handling binary data, shown here likely in the context of the Bun runtime. The `await` keyword indicates the asynchronous nature of the operation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/blob-to-arraybuffer.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const blob = new Blob(["hello world"]);
const buf = await blob.arrayBuffer();
```

----------------------------------------

TITLE: Writing String to Relative Path File in TypeScript
DESCRIPTION: This example shows how to write a string to a file using a relative path with Bun.write(). Relative paths are resolved from the project root (nearest directory with a package.json file).
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/basic.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const path = "./file.txt";
await Bun.write(path, "Lorem ipsum");
```

----------------------------------------

TITLE: Running the Bun Program to Output PostgreSQL Version - Shell
DESCRIPTION: This shell snippet illustrates how to execute the main TypeScript script using Bun and the kind of output to expect on success. It assumes index.ts has been implemented as instructed and the Neon Postgres database is accessible. Executing this command prints the Postgres server version to the console, allowing you to verify the connection and query.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-serverless-postgres.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
$ bun ./index.ts\nPostgreSQL 16.2 on x86_64-pc-linux-gnu, compiled by gcc (Debian 10.2.1-6) 10.2.1 20210110, 64-bit
```

----------------------------------------

TITLE: Defining Bun Spawn API Interfaces in TypeScript
DESCRIPTION: Provides TypeScript interface definitions for Bun's process spawning API. It includes the main `Bun` interface methods (`spawn`, `spawnSync`), the `SpawnOptions` namespace with detailed configuration options (like `cwd`, `env`, `stdio`, `onExit`), the `Subprocess` interface for asynchronous processes, the `SyncSubprocess` interface for synchronous processes, the `ResourceUsage` structure, and a `Signal` type listing possible signal names. These types define the shape and behavior of the API, enabling strong typing in applications using Bun's spawning capabilities.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_17

LANGUAGE: typescript
CODE:
```
interface Bun {
  spawn(command: string[], options?: SpawnOptions.OptionsObject): Subprocess;
  spawnSync(
    command: string[],
    options?: SpawnOptions.OptionsObject,
  ): SyncSubprocess;

  spawn(options: { cmd: string[] } & SpawnOptions.OptionsObject): Subprocess;
  spawnSync(
    options: { cmd: string[] } & SpawnOptions.OptionsObject,
  ): SyncSubprocess;
}

namespace SpawnOptions {
  interface OptionsObject {
    cwd?: string;
    env?: Record<string, string | undefined>;
    stdio?: [Writable, Readable, Readable];
    stdin?: Writable;
    stdout?: Readable;
    stderr?: Readable;
    onExit?(
      subprocess: Subprocess,
      exitCode: number | null,
      signalCode: number | null,
      error?: ErrorLike,
    ): void | Promise<void>;
    ipc?(message: any, subprocess: Subprocess): void;
    serialization?: "json" | "advanced";
    windowsHide?: boolean;
    windowsVerbatimArguments?: boolean;
    argv0?: string;
    signal?: AbortSignal;
    timeout?: number;
    killSignal?: string | number;
    maxBuffer?: number;
  }

  type Readable =
    | "pipe"
    | "inherit"
    | "ignore"
    | null // equivalent to "ignore"
    | undefined // to use default
    | BunFile
    | ArrayBufferView
    | number;

  type Writable =
    | "pipe"
    | "inherit"
    | "ignore"
    | null // equivalent to "ignore"
    | undefined // to use default
    | BunFile
    | ArrayBufferView
    | number
    | ReadableStream
    | Blob
    | Response
    | Request;
}

interface Subprocess extends AsyncDisposable {
  readonly stdin: FileSink | number | undefined;
  readonly stdout: ReadableStream<Uint8Array> | number | undefined;
  readonly stderr: ReadableStream<Uint8Array> | number | undefined;
  readonly readable: ReadableStream<Uint8Array> | number | undefined;
  readonly pid: number;
  readonly exited: Promise<number>;
  readonly exitCode: number | null;
  readonly signalCode: NodeJS.Signals | null;
  readonly killed: boolean;

  kill(exitCode?: number | NodeJS.Signals): void;
  ref(): void;
  unref(): void;

  send(message: any): void;
  disconnect(): void;
  resourceUsage(): ResourceUsage | undefined;
}

interface SyncSubprocess {
  stdout: Buffer | undefined;
  stderr: Buffer | undefined;
  exitCode: number;
  success: boolean;
  resourceUsage: ResourceUsage;
  signalCode?: string;
  exitedDueToTimeout?: true;
  pid: number;
}

interface ResourceUsage {
  contextSwitches: {
    voluntary: number;
    involuntary: number;
  };

  cpuTime: {
    user: number;
    system: number;
    total: number;
  };
  maxRSS: number;

  messages: {
    sent: number;
    received: number;
  };
  ops: {
    in: number;
    out: number;
  };
  shmSize: number;
  signalCount: number;
  swapCount: number;
}

type Signal =
  | "SIGABRT"
  | "SIGALRM"
  | "SIGBUS"
  | "SIGCHLD"
  | "SIGCONT"
  | "SIGFPE"
  | "SIGHUP"
  | "SIGILL"
  | "SIGINT"
  | "SIGIO"
  | "SIGIOT"
  | "SIGKILL"
  | "SIGPIPE"
  | "SIGPOLL"
  | "SIGPROF"
  | "SIGPWR"
  | "SIGQUIT"
  | "SIGSEGV"
  | "SIGSTKFLT"
  | "SIGSTOP"
  | "SIGSYS"
  | "SIGTERM"
  | "SIGTRAP"
  | "SIGTSTP"
  | "SIGTTIN"
  | "SIGTTOU"
  | "SIGUNUSED"
  | "SIGURG"
  | "SIGUSR1"
  | "SIGUSR2"
  | "SIGVTALRM"
  | "SIGWINCH"
  | "SIGXCPU"
  | "SIGXFSZ"
  | "SIGBREAK"
  | "SIGLOST"
  | "SIGINFO";
```

----------------------------------------

TITLE: Nesting Selectors with Bun Bundler - CSS
DESCRIPTION: Shows how Bun's CSS bundler transpiles modern nested selectors into flat, browser-compatible CSS. No external dependencies beyond a Bun build or compatible environment. Nested .title and .content elements within .card are compiled to conventional descendant selectors. Inputs: nested selectors; Outputs: flat selectors. Useful for more readable, maintainable CSS authoring.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
/* With nesting */\n.card {\n  background: white;\n  border-radius: 4px;\n\n  .title {\n    font-size: 1.2rem;\n    font-weight: bold;\n  }\n\n  .content {\n    padding: 1rem;\n  }\n}
```

----------------------------------------

TITLE: Directory Structure for Next.js-style Routing
DESCRIPTION: Example of a pages directory structure for Next.js-style routing, showing various file patterns including index files, dynamic routes with [slug] syntax, and catchall routes with [[...catchall]] syntax.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-system-router.md#2025-04-22_snippet_0

LANGUAGE: txt
CODE:
```
pages
├── index.tsx
├── settings.tsx
├── blog
│   ├── [slug].tsx
│   └── index.tsx
└── [[...catchall]].tsx
```

----------------------------------------

TITLE: Quotation Marks in .env Files
DESCRIPTION: Different ways to quote values in .env files, showing that Bun supports double quotes, single quotes, and backticks.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_7

LANGUAGE: txt
CODE:
```
FOO='hello'
FOO="hello"
FOO=`hello`
```

----------------------------------------

TITLE: Compiled Output for Relative Color Syntax - Bun Bundler CSS
DESCRIPTION: Presents the static output for CSS relative color expressions as compiled by Bun. If color values are static, Bun evaluates and outputs numerically-based lch and oklch expressions. Inputs using CSS variables may not be evaluated at build time.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_7

LANGUAGE: css
CODE:
```
.theme-color {\n  --accent: lch(69.32% 58.34 328.37);\n  --subtle-blue: oklch(60.92% 0.112 240.01);\n}
```

----------------------------------------

TITLE: Creating Cookies with Bun.Cookie.from()
DESCRIPTION: Using the factory method Cookie.from() to create a cookie with a name, value, and optional settings.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_17

LANGUAGE: typescript
CODE:
```
const cookie = Bun.Cookie.from("session", "abc123", {
  httpOnly: true,
  secure: true,
  maxAge: 3600,
});
```

----------------------------------------

TITLE: Configuring Discord Bot Token in .env.local
DESCRIPTION: Illustrates setting the Discord bot's private token in a `.env.local` file. Bun automatically loads variables from this file into `process.env`. The example token provided is invalidated and should be replaced with a real one.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/discordjs.md#2025-04-22_snippet_2

LANGUAGE: txt
CODE:
```
DISCORD_TOKEN=NzkyNzE1NDU0MTk2MDg4ODQy.X-hvzA.Ovy4MCQywSkoMRRclStW4xAYK7I
```

----------------------------------------

TITLE: Running a File via Stdin Redirection with Bun Run -
DESCRIPTION: Shows creating a file (`secretly-typescript.js`) containing TypeScript-like code and then executing its contents using input redirection with `bun run -`. Bun treats code passed via stdin as TypeScript with JSX support, regardless of the original file's name or extension.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/run.md#2025-04-22_snippet_15

LANGUAGE: bash
CODE:
```
$ echo "console.log!('This is TypeScript!' as any)" > secretly-typescript.js
$ bun run - < secretly-typescript.js
This is TypeScript!
```

----------------------------------------

TITLE: Importing and Using TypeScript Modules in Bun
DESCRIPTION: Basic example of importing a function from a TypeScript module and using it. Shows how Bun handles relative imports without file extensions.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
import { hello } from "./hello";

hello();
```

----------------------------------------

TITLE: Using spyOn for Function Tracking in Bun Test Framework (TypeScript)
DESCRIPTION: Demonstrates how to use `spyOn()` to track calls to a function without replacing it with a mock. The spy can be used with assertions like `toHaveBeenCalled()` and `toHaveBeenCalledTimes()`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/mocks.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { test, expect, spyOn } from "bun:test";

const ringo = {
  name: "Ringo",
  sayHi() {
    console.log(`Hello I'm ${this.name}`);
  },
};

const spy = spyOn(ringo, "sayHi");

test("spyon", () => {
  expect(spy).toHaveBeenCalledTimes(0);
  ringo.sayHi();
  expect(spy).toHaveBeenCalledTimes(1);
});
```

----------------------------------------

TITLE: Installing shadcn/ui Components with Bun
DESCRIPTION: Demonstrates the command used to install detected shadcn/ui components.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bun-create.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
$ bunx shadcn@canary add accordion button # and any other components
```

----------------------------------------

TITLE: Initializing Bun Project and Directory - Shell Script
DESCRIPTION: Initializes a new directory for the project and sets up the Bun project environment. These commands require Bun to be installed on your machine. No input parameters are required except the intended directory name, and the commands must be run in a shell environment. The output is a new directory with Bun project scaffolding.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/mongoose.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
$ mkdir mongoose-app\n$ cd mongoose-app\n$ bun init
```

----------------------------------------

TITLE: Running JSX Files with Bun
DESCRIPTION: Shows how to run a JSX file using Bun and demonstrates Bun's special logging for JSX to facilitate debugging.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/loaders.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ bun run react.tsx
<Component message="Hello world!" />
```

----------------------------------------

TITLE: Basic Bun Binary Compilation
DESCRIPTION: Basic example of compiling a TypeScript file into a standalone binary executable using Bun's bundler.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/executables.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ bun build ./cli.ts --compile --outfile mycli
```

LANGUAGE: typescript
CODE:
```
console.log("Hello world!");
```

----------------------------------------

TITLE: Starting Next.js Dev Server with Bun Runtime (Shell)
DESCRIPTION: These commands first navigate into the newly created Next.js project directory (`my-app`) and then start the development server. The `bun --bun run dev` command explicitly tells Bun to use its own runtime environment to execute the `dev` script defined in the project's `package.json`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/nextjs.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
$ cd my-app
$ bun --bun run dev
```

----------------------------------------

TITLE: Initializing a Remix App with Bun
DESCRIPTION: Uses the Bun CLI to create a new Remix application. The command walks through the project setup process including specifying the project directory, choosing a template, initializing git, and installing dependencies using Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/remix.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun create remix

 remix   v1.19.3 💿 Let's build a better website...

   dir   Where should we create your new project?
         ./my-app

      ◼  Using basic template See https://remix.run/docs/en/main/guides/templates#templates for more
      ✔  Template copied

   git   Initialize a new git repository?
         Yes

  deps   Install dependencies with bun?
         Yes

      ✔  Dependencies installed

      ✔  Git initialized

  done   That's it!

         Enter your project directory using cd ./my-app
         Check out README.md for development and deploy instructions.
```

----------------------------------------

TITLE: Creating a TCP Client with Bun.connect()
DESCRIPTION: Establishes a connection to a TCP server using Bun.connect(). Includes both the standard socket handlers and client-specific handlers for connection errors, server-initiated closures, and timeouts.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/tcp.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
// The client
const socket = await Bun.connect({
  hostname: "localhost",
  port: 8080,

  socket: {
    data(socket, data) {},
    open(socket) {},
    close(socket, error) {},
    drain(socket) {},
    error(socket, error) {},

    // client-specific handlers
    connectError(socket, error) {}, // connection failed
    end(socket) {}, // connection closed by server
    timeout(socket) {}, // connection timed out
  },
});
```

----------------------------------------

TITLE: Serializable Object Macro Example
DESCRIPTION: Example showing how to return serializable data structures from macros.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/macros.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
export function getObject() {
  return {
    foo: "bar",
    baz: 123,
    array: [ 1, 2, { nested: "value" }],
  };
}
```

----------------------------------------

TITLE: React Component Definition
DESCRIPTION: Simple React component definition in TypeScript JSX (TSX) that will be bundled and served by Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/fullstack.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
export function App() {
  return <div>Hello World</div>;
}
```

----------------------------------------

TITLE: Configuring Coverage Reporters in Bun Tests
DESCRIPTION: Sets the format for coverage reports. The text format is displayed in console, while lcov creates files for CI environments and other tools.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_14

LANGUAGE: toml
CODE:
```
[test]
coverageReporter  = ["text", "lcov"]  # default ["text"]
```

----------------------------------------

TITLE: Sending UDP Datagram
DESCRIPTION: Shows how to send a UDP datagram to a specific destination port and address
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/udp.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
socket.send("Hello, world!", 41234, "127.0.0.1");
```

----------------------------------------

TITLE: Setting Up Bun Preload Configuration
DESCRIPTION: TOML configuration file that tells Bun to preload the Happy DOM setup file before running tests
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/happy-dom.md#2025-04-22_snippet_2

LANGUAGE: toml
CODE:
```
[test]
preload = "./happydom.ts"
```

----------------------------------------

TITLE: Configuring TypeScript Path Mapping
DESCRIPTION: Example tsconfig.json configuration showing how to set up path remapping for import specifiers using TypeScript compiler options.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_18

LANGUAGE: jsonc
CODE:
```
{
  "compilerOptions": {
    "paths": {
      "config": ["./config.ts"],         // map specifier to file
      "components/*": ["components/*"],  // wildcard matching
    }
  }
}
```

----------------------------------------

TITLE: Escaping Environment Variable Expansion
DESCRIPTION: Shows how to escape the $ character to prevent environment variable expansion in .env files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_11

LANGUAGE: txt
CODE:
```
FOO=world
BAR=hello\$FOO
```

----------------------------------------

TITLE: Creating an HTTP Server with Port Reuse in Bun
DESCRIPTION: This code creates an HTTP server using Bun.serve() with the reusePort option enabled to allow multiple processes to listen on the same port. Each server instance generates a unique ID to identify itself in responses.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/cluster.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { serve } from "bun";

const id = Math.random().toString(36).slice(2);

serve({
  port: process.env.PORT || 8080,
  development: false,

  // Share the same port across multiple processes
  // This is the important part!
  reusePort: true,

  async fetch(request) {
    return new Response("Hello from Bun #" + id + "!\n");
  }
});
```

----------------------------------------

TITLE: Defining HTML Structure for Bun Bundler
DESCRIPTION: An HTML entry point file demonstrating how to structure a basic web page with CSS stylesheet and TypeScript module imports that Bun's bundler will process automatically.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/html.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<!doctype html>
<html>
  <head>
    <link rel="stylesheet" href="./styles.css" />
    <script src="./app.ts" type="module"></script>
  </head>
  <body>
    <img src="./logo.png" />
  </body>
</html>
```

----------------------------------------

TITLE: Receiving Messages in Worker and Main Threads
DESCRIPTION: Examples of receiving messages using event listeners or onmessage property in both worker and main threads.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/workers.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
// Worker thread:
self.addEventListener("message", event => {
  console.log(event.data);
});
// or use the setter:
// self.onmessage = fn

// if on the main thread
worker.addEventListener("message", event => {
  console.log(event.data);
});
// or use the setter:
// worker.onmessage = fn
```

----------------------------------------

TITLE: Registering a Local Package as Linkable - Bun CLI - Bash
DESCRIPTION: The snippet demonstrates how to register a local directory as a linkable package using the Bun CLI. It starts with viewing the package.json to confirm the package details, then uses 'bun link' to register the package. Dependencies: Bun CLI must be installed and initial package.json must exist. Key parameters include the package name and path; Inputs: local directory with package.json; Outputs: confirmation of package registration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/link.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ cd /path/to/cool-pkg\n$ cat package.json\n{\n  "name": "cool-pkg",\n  "version": "1.0.0"\n}\n$ bun link\nbun link v1.x (7416672e)\nSuccess! Registered "cool-pkg"\n\nTo use cool-pkg in a project, run:\n  bun link cool-pkg\n\nOr add it in dependencies in your package.json file:\n  "cool-pkg": "link:cool-pkg"
```

----------------------------------------

TITLE: Building for Production with Bun's JavaScript API
DESCRIPTION: A TypeScript example using Bun's JavaScript API to build an HTML-based project for production. This provides more control over the build process including detailed minification options.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/html.md#2025-04-22_snippet_14

LANGUAGE: typescript
CODE:
```
Bun.build({
  entrypoints: ["./index.html"],
  outdir: "./dist",
  minify: {
    whitespace: true,
    identifiers: true,
    syntax: true,
  }
});
```

----------------------------------------

TITLE: Managing External Dependencies in Bun
DESCRIPTION: Shows how to specify external dependencies that should not be included in the final bundle using both wildcard and specific package names.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_46

LANGUAGE: typescript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './out',
  external: ["lodash", "react"], // default: []
})
```

LANGUAGE: bash
CODE:
```
$ bun build ./index.tsx --outdir ./out --external lodash --external react
```

----------------------------------------

TITLE: Setting Detailed Coverage Thresholds
DESCRIPTION: Configures specific coverage thresholds for different metrics (lines, functions, statements) which will cause tests to fail if coverage falls below these thresholds.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/configuration.md#2025-04-22_snippet_5

LANGUAGE: toml
CODE:
```
[test]
# Set specific thresholds for different coverage metrics
coverageThreshold = { lines = 0.9, functions = 0.8, statements = 0.85 }
```

----------------------------------------

TITLE: Basic Plugin Implementation Example
DESCRIPTION: Example of creating a basic Bun plugin with name and setup function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/plugins.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { BunPlugin } from "bun";

const myPlugin: BunPlugin = {
  name: "Custom loader",
  setup(build) {
    // implementation
  },
};
```

----------------------------------------

TITLE: Writing String Data to File Using Bun.write()
DESCRIPTION: This snippet demonstrates how to write a string to a file using Bun.write(). It specifies a file path and writes a simple string to that location.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/blob.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const path = "/path/to/file.txt";
await Bun.write(path, "Lorem ipsum");
```

----------------------------------------

TITLE: Initializing a Next.js App Interactively with Bun (Shell)
DESCRIPTION: This command uses Bun to execute `create-next-app`, scaffolding a new Next.js project. It interactively prompts the user for configuration options such as project name, TypeScript usage, ESLint integration, `src/` directory structure, experimental `app/` directory usage, and import alias configuration. Dependencies are installed automatically.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/nextjs.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun create next-app
✔ What is your project named? … my-app
✔ Would you like to use TypeScript with this project? … No / Yes
✔ Would you like to use ESLint with this project? … No / Yes
✔ Would you like to use `src/` directory with this project? … No / Yes
✔ Would you like to use experimental `app/` directory with this project? … No / Yes
✔ What import alias would you like configured? … @/*
Creating a new Next.js app in /path/to/my-app.
```

----------------------------------------

TITLE: Managing Worker Lifetime with ref() and unref()
DESCRIPTION: Example of toggling between ref and unref to control whether a worker keeps the main process alive.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/workers.md#2025-04-22_snippet_13

LANGUAGE: typescript
CODE:
```
const worker = new Worker(new URL("worker.ts", import.meta.url).href);
worker.unref();
// later...
worker.ref();
```

----------------------------------------

TITLE: Explicit S3Client Instantiation and File Operations - TypeScript
DESCRIPTION: This snippet shows how to explicitly instantiate Bun's S3Client object with custom credentials and endpoints, including support for Cloudflare R2 and MinIO. The sample demonstrates writing to a file, presigning a URL for access, and deleting a file using the S3Client or derived S3File methods. Dependencies include the 'bun' package and appropriate endpoint/credential setup. Input parameters include accessKeyId, secretAccessKey, bucket, and endpoint. File write operations accept a Response object; presigning configures expiration and ACL.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_18

LANGUAGE: typescript
CODE:
```
import { S3Client } from \"bun\";

const client = new S3Client({
  accessKeyId: \"your-access-key\",
  secretAccessKey: \"your-secret-key\",
  bucket: \"my-bucket\",
  // sessionToken: \"...\"
  endpoint: \"https://s3.us-east-1.amazonaws.com\",
  // endpoint: \"https://<account-id>.r2.cloudflarestorage.com\", // Cloudflare R2
  // endpoint: \"http://localhost:9000\", // MinIO
});

// Write using a Response
await file.write(new Response(\"Hello World!\"));

// Presign a URL
const url = file.presign({
  expiresIn: 60 * 60 * 24, // 1 day
  acl: \"public-read\",
});

// Delete the file
await file.delete();
```

----------------------------------------

TITLE: Adding npm Dependencies to a Specific Workspace in Bun
DESCRIPTION: These shell commands demonstrate how to add npm dependencies to a specific workspace in a Bun monorepo. It shows navigating to the workspace directory and using 'bun add' to install a package.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/workspaces.md#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
$ cd packages/stuff-a
$ bun add zod
```

----------------------------------------

TITLE: Handling Child Process Exit in TypeScript
DESCRIPTION: Shows how to use the onExit callback and the exited promise to handle process termination.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
const proc = Bun.spawn(["bun", "--version"], {
  onExit(proc, exitCode, signalCode, error) {
    // exit handler
  },
});

await proc.exited; // resolves when process exit
proc.killed; // boolean — was the process killed?
proc.exitCode; // null | number
proc.signalCode; // null | "SIGABRT" | "SIGALRM" | ...
```

----------------------------------------

TITLE: Loading Node-API Modules with require() in Bun
DESCRIPTION: Demonstrates how to load a .node native module in Bun using the require() function. This is the simplest way to import Node-API modules, identical to how it works in Node.js.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/node-api.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const napi = require("./my-node-module.node");
```

----------------------------------------

TITLE: Clearing All Mocks with mock.clearAllMocks() in Bun Test Framework (TypeScript)
DESCRIPTION: Demonstrates how to use `mock.clearAllMocks()` to reset the state of all mock functions without restoring their original implementation. This is useful for clearing call history between tests.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/mocks.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import { expect, mock, test } from "bun:test";

const random1 = mock(() => Math.random());
const random2 = mock(() => Math.random());

test("clearing all mocks", () => {
  random1();
  random2();
  
  expect(random1).toHaveBeenCalledTimes(1);
  expect(random2).toHaveBeenCalledTimes(1);
  
  mock.clearAllMocks();
  
  expect(random1).toHaveBeenCalledTimes(0);
  expect(random2).toHaveBeenCalledTimes(0);
  
  // Note: implementations are preserved
  expect(typeof random1()).toBe("number");
  expect(typeof random2()).toBe("number");
});
```

----------------------------------------

TITLE: Creating V8 Heap Snapshots in Bun
DESCRIPTION: This snippet demonstrates how to create a V8 heap snapshot to debug memory usage in a Bun application. It imports the v8 module from Node.js and generates a heap snapshot file with an auto-generated name, then logs the path where the snapshot was saved.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/heap-snapshot.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import v8 from "node:v8";

// Creates a heap snapshot file with an auto-generated name
const snapshotPath = v8.writeHeapSnapshot();
console.log(`Heap snapshot written to: ${snapshotPath}`);
```

----------------------------------------

TITLE: Creating a Basic Hono App in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates the creation of a minimal Hono web application. It imports the `Hono` class, instantiates the application, defines a GET route for the root path ('/') that returns the text 'Hono!', and exports the app instance, likely for use with a server runtime like Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/ecosystem/hono.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Hono } from "hono";
const app = new Hono();

app.get("/", c => c.text("Hono!"));

export default app;
```

----------------------------------------

TITLE: Switching SQLite Library for Extension Support on macOS (TypeScript and Bash)
DESCRIPTION: Explains how macOS users can use a Homebrew-installed vanilla SQLite build for extension support, requiring the path to a custom SQLite .dylib file. Bash snippet installs SQLite via Homebrew. Precedes the creation of a Bun Database instance with Database.setCustomSQLite().
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_28

LANGUAGE: Bash
CODE:
```
$ brew install sqlite
$ which sqlite # get path to binary

```

----------------------------------------

TITLE: Configuring Password Hashing Algorithms in Bun
DESCRIPTION: Shows how to configure different hashing algorithms (Argon2 and bcrypt) with custom parameters when using Bun.password.hash.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/hashing.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const password = "super-secure-pa$$word";

// use argon2 (default)
const argonHash = await Bun.password.hash(password, {
  algorithm: "argon2id", // "argon2id" | "argon2i" | "argon2d"
  memoryCost: 4, // memory usage in kibibytes
  timeCost: 3, // the number of iterations
});

// use bcrypt
const bcryptHash = await Bun.password.hash(password, {
  algorithm: "bcrypt",
  cost: 4, // number between 4-31
});
```

----------------------------------------

TITLE: Single Character Glob Pattern Matching
DESCRIPTION: Example of using the '?' glob pattern to match any single character.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/glob.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const glob = new Glob("???.ts");
glob.match("foo.ts"); // => true
glob.match("foobar.ts"); // => false
```

----------------------------------------

TITLE: Listing Untrusted Dependencies with Bun
DESCRIPTION: Lists dependencies currently installed in `node_modules` that contain lifecycle scripts (like `postinstall`) but are not included in the `trustedDependencies` list in `package.json`. By default, Bun blocks these scripts from running unless explicitly trusted.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/pm.md#2025-04-22_snippet_12

LANGUAGE: bash
CODE:
```
$ bun pm untrusted

./node_modules/@biomejs/biome @1.8.3
 » [postinstall]: node scripts/postinstall.js

These dependencies had their lifecycle scripts blocked during install.
```

----------------------------------------

TITLE: Creating a Basic Express HTTP Server (TypeScript)
DESCRIPTION: Defines a simple HTTP server using Express in TypeScript. It imports `express`, creates an application instance, sets up a GET route for the root path ('/') that responds with 'Hello World!', and starts the server listening on port 8080. This code should be saved in a file (e.g., `server.ts`) and requires the `express` package to be installed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/express.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
import express from "express";

const app = express();
const port = 8080;

app.get("/", (req, res) => {
  res.send("Hello World!");
});

app.listen(port, () => {
  console.log(`Listening on port ${port}...`);
});
```

----------------------------------------

TITLE: Capturing Command Output as Text with Bun Shell
DESCRIPTION: This snippet shows how to capture the text output from a shell command using the `text()` method. The command lists files in the current directory with detailed information.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/shell.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { $ } from "bun";

const output = await $`ls -l`.text();
console.log(output);
```

----------------------------------------

TITLE: Configuring Scoped Registry in .npmrc for Bun
DESCRIPTION: Sets a specific registry URL for packages under a particular scope using .npmrc. This allows different scopes to use different registries for package resolution.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/npmrc.md#2025-04-22_snippet_2

LANGUAGE: ini
CODE:
```
@myorg:registry=http://localhost:4873/
```

----------------------------------------

TITLE: Fetching Windows Files with file:// Protocol in TypeScript
DESCRIPTION: Shows how to fetch local files on Windows using the file:// protocol, with automatic path normalization to handle Windows path separators.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_19

LANGUAGE: typescript
CODE:
```
// Both work on Windows
const response = await fetch("file:///C:/path/to/file.txt");
const response2 = await fetch("file:///c:/path\\to/file.txt");
```

----------------------------------------

TITLE: Installing Bun in GitHub Actions Workflow
DESCRIPTION: This snippet shows how to set up Bun in a GitHub Actions workflow and run the 'bun install' command to install dependencies. It uses the official oven-sh/setup-bun action alongside actions/checkout.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/cicd.md#2025-04-22_snippet_0

LANGUAGE: yaml
CODE:
```
name: my-workflow
jobs:
  my-job:
    name: my-job
    runs-on: ubuntu-latest
    steps:
      # ...
      - uses: actions/checkout@v4
     - uses: oven-sh/setup-bun@v2

      # run any `bun` or `bunx` command
     - run: bun install
```

----------------------------------------

TITLE: Syntax for Running Package.json Scripts with Bun
DESCRIPTION: Outlines the general command structure for executing a named script defined in `package.json` using `bun run`. It indicates the positions for optional Bun-specific flags (like `--watch`, `--bun`) and flags intended to be passed to the script itself.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/run.md#2025-04-22_snippet_6

LANGUAGE: sh
CODE:
```
$ bun [bun flags] run <script> [script flags]
```

----------------------------------------

TITLE: Command Substitution in Bun Shell
DESCRIPTION: Demonstrates how to use command substitution to insert the output of one command into another using the $(...) syntax.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

// Prints out the hash of the current commit
await $`echo Hash of current commit: $(git rev-parse HEAD)`;
```

----------------------------------------

TITLE: Using beforeEach and afterEach hooks in Bun tests
DESCRIPTION: Example of using beforeEach and afterEach hooks to perform setup and teardown logic that runs for each individual test. The beforeEach function executes before each test runs, and afterEach executes after each test completes.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/lifecycle.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { beforeEach, afterEach } from "bun:test";

beforeEach(() => {
  console.log("running test.");
});

afterEach(() => {
  console.log("done with test.");
});

// tests...
```

----------------------------------------

TITLE: Adding Workspace Dependencies in Bun Monorepo
DESCRIPTION: This JSON diff shows how to add dependencies between workspaces in a Bun monorepo. It demonstrates adding 'stuff-a' as a dependency of 'stuff-b' using the 'workspace:*' syntax.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/workspaces.md#2025-04-22_snippet_2

LANGUAGE: json-diff
CODE:
```
{
  "name": "stuff-b",
  "dependencies": {
+   "stuff-a": "workspace:*"
  }
}
```

----------------------------------------

TITLE: Deleting Files Using Bun.file() in TypeScript
DESCRIPTION: Shows how to create a BunFile instance and delete a file using the .delete() method. The example demonstrates deleting a file at a specified path using Bun's file API.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/unlink.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const path = "/path/to/file.txt";
const file = Bun.file(path);

await file.delete();
```

----------------------------------------

TITLE: Bundled Output After Bun Macro Execution in TypeScript
DESCRIPTION: This TypeScript code shows the resulting JavaScript bundle after the Bun build process has executed the `extractMetaTags` macro. The original macro import and call are replaced by the actual data fetched and processed at bundle time ('Example Domain', 'width=device-width, initial-scale=1'). The `Head` component is now defined using standard React JSX runtime functions (`jsx`, `jsxs`) with the static data embedded directly. This demonstrates the core principle of Bun macros: executing code at compile time and inlining the results.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/macros.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
import { jsx, jsxs } from "react/jsx-runtime";
export const Head = () => {
  jsxs("head", {
    children: [
      jsx("title", {
        children: "Example Domain",
      }),
      jsx("meta", {
        name: "viewport",
        content: "width=device-width, initial-scale=1",
      }),
    ],
  });
};

export { Head };
```

----------------------------------------

TITLE: Redis Connection Status Monitoring in Bun
DESCRIPTION: Shows how to check the connection status and monitor buffered data for Redis clients in Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/redis.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
// Check if connected
console.log(client.connected); // boolean indicating connection status

// Check amount of data buffered (in bytes)
console.log(client.bufferedAmount);
```

----------------------------------------

TITLE: Capturing Command Output as Text in Bun Shell
DESCRIPTION: Demonstrates how to capture the output of a shell command as a string using the .text() method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

// .text() automatically calls .quiet() for you
const welcome = await $`echo "Hello World!"`.text();

console.log(welcome); // Hello World!\n
```

----------------------------------------

TITLE: Importing HTML Files as Routes in Bun
DESCRIPTION: Shows how to import HTML files to use as routes in a Bun application. HTML imports serve as entrypoints for frontend routes.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/fullstack.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import dashboard from "./dashboard.html";
import homepage from "./index.html";
```

----------------------------------------

TITLE: Configuring Sourcemap Generation in Bun
DESCRIPTION: Examples showing how to configure sourcemap generation using both JavaScript API and CLI. Supports different sourcemap types including linked, external, and inline formats.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_44

LANGUAGE: typescript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './out',
  sourcemap: 'linked', // default 'none'
})
```

LANGUAGE: bash
CODE:
```
$ bun build ./index.tsx --outdir ./out --sourcemap=linked
```

----------------------------------------

TITLE: Output Directory Configuration with CLI
DESCRIPTION: Example showing how to specify an output directory when using Bun's bundler with the CLI.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_17

LANGUAGE: bash
CODE:
```
$ bun build --entrypoints ./index.ts --outdir ./out
# a summary of bundled files will be printed to stdout
```

----------------------------------------

TITLE: Getting Client IP Information in Bun Server
DESCRIPTION: Shows how to retrieve client IP address and port information using the server.requestIP() method. This returns an object with address and port properties for the client connection.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_19

LANGUAGE: typescript
CODE:
```
const server = Bun.serve({
  fetch(req, server) {
    const address = server.requestIP(req);
    if (address) {
      return new Response(
        `Client IP: ${address.address}, Port: ${address.port}`,
      );
    }
    return new Response("Unknown client");
  },
});
```

----------------------------------------

TITLE: Building SvelteKit for Production with Bun
DESCRIPTION: Command to build the SvelteKit application for production using Bun runtime, showing the build process output including module transformation and build completion.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/sveltekit.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
$ bun --bun run build
  $ vite build
  vite v5.4.10 building SSR bundle for production...
  "confetti" is imported from external module "@neoconfetti/svelte" but never used in "src/routes/sverdle/+page.svelte".
  ✓ 130 modules transformed.
  vite v5.4.10 building for production...
  ✓ 148 modules transformed.
  ...
  ✓ built in 231ms
  ...
  ✓ built in 899ms
  
  Run npm run preview to preview your production build locally.
  
  > Using svelte-adapter-bun
    ✔ Start server with: bun ./build/index.js
    ✔ done
```

----------------------------------------

TITLE: Installing discord.js Dependency using Bun
DESCRIPTION: Shows how to add the `discord.js` library to the project using the `bun add` command. This command downloads and installs the package and updates the project's dependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/discordjs.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
$ bun add discord.js
```

----------------------------------------

TITLE: Handling Large Files with Streaming and Multipart Uploads
DESCRIPTION: Shows how to work with large files using Bun's streaming capabilities and automatic multipart uploads. Includes configuration for retries, queue size, and part size.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
// Write a large file
const bigFile = Buffer.alloc(10 * 1024 * 1024); // 10MB
const writer = s3file.writer({
  // Automatically retry on network errors up to 3 times
  retry: 3,

  // Queue up to 10 requests at a time
  queueSize: 10,

  // Upload in 5 MB chunks
  partSize: 5 * 1024 * 1024,
});
for (let i = 0; i < 10; i++) {
  await writer.write(bigFile);
}
await writer.end();
```

----------------------------------------

TITLE: Package.json Changes After Adding a Dependency
DESCRIPTION: Shows the diff of package.json after adding a dependency with bun add. The dependency is added with the caret (^) version range by default.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/add.md#2025-04-22_snippet_1

LANGUAGE: json-diff
CODE:
```
{
  "dependencies": {
+     "zod": "^3.0.0"
  }
}
```

----------------------------------------

TITLE: Installing an Exact Version with Bun
DESCRIPTION: Demonstrates how to pin an exact version of a package using the '--exact' flag, which removes the caret (^) version range specifier.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/add.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
$ bun add zod --exact
```

----------------------------------------

TITLE: Using Remapped Import Paths in TypeScript
DESCRIPTION: Demonstrates how to use the configured path aliases in TypeScript files. The example shows importing from the 'my-custom-name' alias (which points to 'zod') and from the '@components' directory alias.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/tsconfig-paths.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { z } from "my-custom-name"; // imports from "zod"
import { Button } from "@components/Button"; // imports from "./src/components/Button"
```

----------------------------------------

TITLE: Configuring Global Variable Replacement in Bun
DESCRIPTION: Uses the define field to replace global identifiers with constant expressions. Values are parsed as JSON with support for single-quoted strings.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_4

LANGUAGE: toml
CODE:
```
[define]
# Replace any usage of "process.env.bagel" with the string `lox`.
# The values are parsed as JSON, except single-quoted strings are supported and `'undefined'` becomes `undefined` in JS.
# This will probably change in a future release to be just regular TOML instead. It is a holdover from the CLI argument parsing.
"process.env.bagel" = "'lox'"
```

----------------------------------------

TITLE: Configuring global installation behavior in bunfig.toml
DESCRIPTION: TOML configuration for setting global installation directories for packages and binaries.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/index.md#2025-04-22_snippet_4

LANGUAGE: toml
CODE:
```
[install]
# where `bun install --global` installs packages
globalDir = "~/.bun/install/global"

# where globally-installed package bins are linked
globalBinDir = "~/.bun/bin"
```

----------------------------------------

TITLE: Inlining Environment Variables By Prefix - env: "PUBLIC_*" - Bun JavaScript API - JavaScript
DESCRIPTION: Bun.build example inlining only environment variables with a matching prefix (e.g., 'ACME_PUBLIC_*'). This allows selective inlining (useful for public-only variables) while leaving other process.env references untouched. Requires Bun and correctly named environment variables; output bundles have only the matching variables replaced.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_38

LANGUAGE: JavaScript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './out',

  // Inline all env vars that start with "ACME_PUBLIC_"
  env: "ACME_PUBLIC_*",
})
```

----------------------------------------

TITLE: Executing Parameterized SQLite Queries in Bun
DESCRIPTION: This code demonstrates how to execute parameterized SQLite queries in Bun. It shows both named and positional parameter binding techniques.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
const query = db.query(`select $message;`);
query.all({ $message: "Hello world" });
// => [{ message: "Hello world" }]

const query = db.query(`select ?1;`);
query.all("Hello world");
```

----------------------------------------

TITLE: Reading Files with Bun.file()
DESCRIPTION: Creates a BunFile instance for lazy file loading. Demonstrates basic file properties access.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-io.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const foo = Bun.file("foo.txt"); // relative to cwd
foo.size; // number of bytes
foo.type; // MIME type
```

----------------------------------------

TITLE: Accessing Bun.Cookie Properties
DESCRIPTION: Available properties on a Bun.Cookie instance, including name, value, domain, path, expires, security settings, and other cookie attributes.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_12

LANGUAGE: typescript
CODE:
```
cookie.name; // string - Cookie name
cookie.value; // string - Cookie value
cookie.domain; // string | null - Domain scope (null if not specified)
cookie.path; // string - URL path scope (defaults to "/")
cookie.expires; // number | undefined - Expiration timestamp (ms since epoch)
cookie.secure; // boolean - Require HTTPS
cookie.sameSite; // "strict" | "lax" | "none" - SameSite setting
cookie.partitioned; // boolean - Whether the cookie is partitioned (CHIPS)
cookie.maxAge; // number | undefined - Max age in seconds
cookie.httpOnly; // boolean - Accessible only via HTTP (not JavaScript)
```

----------------------------------------

TITLE: Object inspection with Bun.inspect() in TypeScript
DESCRIPTION: Demonstrates how to use Bun.inspect() to serialize objects to strings, similar to console.log() output. Examples show serialization of a simple object and a Uint8Array.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_20

LANGUAGE: typescript
CODE:
```
const obj = { foo: "bar" };
const str = Bun.inspect(obj);
// => '{\nfoo: "bar" \n}'

const arr = new Uint8Array([1, 2, 3]);
const str = Bun.inspect(arr);
// => "Uint8Array(3) [ 1, 2, 3 ]"
```

----------------------------------------

TITLE: Running JavaScript and TypeScript Files with Bun
DESCRIPTION: Examples of how to execute different file types with Bun. Bun natively supports JavaScript, JSX, TypeScript, and TSX files without additional configuration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/index.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ bun index.js
$ bun index.jsx
$ bun index.ts
$ bun index.tsx
```

----------------------------------------

TITLE: Terminating a Worker Forcefully
DESCRIPTION: Example of forcefully terminating a worker using the terminate() method from the main thread.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/workers.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
const worker = new Worker(new URL("worker.ts", import.meta.url).href);

// ...some time later
worker.terminate();
```

----------------------------------------

TITLE: Scaffolding and Running an Elysia Project using Bun CLI
DESCRIPTION: This Bash snippet shows the command-line steps to create a new Elysia project and start its development server using Bun. The `bun create elysia ./myapp` command scaffolds a new project in the `myapp` directory. `cd myapp` navigates into the newly created project directory. Finally, `bun run dev` starts the development server, typically with hot reloading enabled.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/ecosystem/elysia.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
```bash
$ bun create elysia ./myapp
$ cd myapp
$ bun run dev
```
```

----------------------------------------

TITLE: Using Custom Conditions with Bun CLI
DESCRIPTION: Examples of using the --conditions flag with bun build and bun runtime to specify conditions for resolving packages from package.json exports.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_16

LANGUAGE: sh
CODE:
```
# Use it with bun build:
$ bun build --conditions="react-server" --target=bun ./app/foo/route.js

# Use it with bun's runtime:
$ bun --conditions="react-server" ./app/foo/route.js
```

----------------------------------------

TITLE: Restoring Multiple Mocks with mock.restore() in TypeScript
DESCRIPTION: Demonstrates how to use mock.restore() to reset multiple function mocks simultaneously in a Bun test. Shows spying on multiple module functions, implementing mock behaviors, and restoring original implementations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/mocks.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import { expect, mock, spyOn, test } from "bun:test";

import * as fooModule from './foo.ts';
import * as barModule from './bar.ts';
import * as bazModule from './baz.ts';

test('foo, bar, baz', () => {
  const fooSpy = spyOn(fooModule, 'foo');
  const barSpy = spyOn(barModule, 'bar');
  const bazSpy = spyOn(bazModule, 'baz');

  expect(fooSpy).toBe('foo');
  expect(barSpy).toBe('bar');
  expect(bazSpy).toBe('baz');

  fooSpy.mockImplementation(() => 42);
  barSpy.mockImplementation(() => 43);
  bazSpy.mockImplementation(() => 44);

  expect(fooSpy).toBe(42);
  expect(barSpy).toBe(43);
  expect(bazSpy).toBe(44);

  mock.restore();

  expect(fooSpy).toBe('foo');
  expect(barSpy).toBe('bar');
  expect(bazSpy).toBe('baz');
});
```

----------------------------------------

TITLE: Decompressing data with Bun.inflateSync() in TypeScript
DESCRIPTION: Shows how to decompress DEFLATE-compressed data using the INFLATE algorithm. The example demonstrates a complete compression-decompression cycle, recovering the original text.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_19

LANGUAGE: typescript
CODE:
```
const buf = Buffer.from("hello".repeat(100));
const compressed = Bun.deflateSync(buf);

const dec = new TextDecoder();
const decompressed = Bun.inflateSync(compressed);
dec.decode(decompressed);
// => "hellohellohello..."
```

----------------------------------------

TITLE: Configuring S3Client for Google Cloud Storage
DESCRIPTION: Shows how to configure the S3Client to work with Google Cloud Storage by setting the appropriate endpoint. This demonstrates Bun's compatibility with different S3-compatible services.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_12

LANGUAGE: typescript
CODE:
```
import { S3Client } from "bun";

// Google Cloud Storage
const gcs = new S3Client({
  accessKeyId: "access-key",
  secretAccessKey: "secret-key",
  bucket: "my-bucket",
  endpoint: "https://storage.googleapis.com",
});
```

----------------------------------------

TITLE: Valid and Invalid HMR API Usage Patterns in Bun
DESCRIPTION: Shows examples of invalid and valid ways to use the import.meta.hot API in Bun. The API must be called directly without indirection for proper tree-shaking in production.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/hmr.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// INVALID: Assigning `hot` to a variable
const hot = import.meta.hot;
hot.accept();

// INVALID: Assigning `import.meta` to a variable
const meta = import.meta;
meta.hot.accept();
console.log(meta.hot.data);

// INVALID: Passing to a function
doSomething(import.meta.hot.dispose);

// OK: The full phrase "import.meta.hot.<API>" must be called directly:
import.meta.hot.accept();

// OK: `data` can be passed to functions:
doSomething(import.meta.hot.data);
```

----------------------------------------

TITLE: Creating and Using a FileSink in TypeScript
DESCRIPTION: This snippet shows how to create a FileSink instance from a BunFile and use it to write data incrementally to a file. It demonstrates writing multiple strings and flushing the data to disk.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/filesink.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const file = Bun.file("/path/to/file.txt");
const writer = file.writer();

writer.write("lorem");
writer.write("ipsum");
writer.write("dolor");

writer.flush();

// continue writing & flushing
```

----------------------------------------

TITLE: Converting Blob to DataView in TypeScript
DESCRIPTION: This TypeScript snippet creates a Blob containing the string 'hello world', asynchronously retrieves its contents as an ArrayBuffer using the `arrayBuffer()` method, and then initializes a DataView with the resulting buffer. This allows low-level read/write access to the blob's binary data.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/blob-to-dataview.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const blob = new Blob(["hello world"]);
const arr = new DataView(await blob.arrayBuffer());
```

----------------------------------------

TITLE: Configuring Test Root Directory in Bun
DESCRIPTION: Sets the root directory from which Bun runs tests. Default is the current directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_7

LANGUAGE: toml
CODE:
```
[test]
root = "./__tests__"
```

----------------------------------------

TITLE: Converting Bun.Cookie to JSON
DESCRIPTION: How to convert a Bun.Cookie instance to a plain object suitable for JSON serialization using the toJSON() method, which works with JSON.stringify().
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_15

LANGUAGE: typescript
CODE:
```
const cookie = new Bun.Cookie("session", "abc123", {
  secure: true,
  httpOnly: true,
});

const json = cookie.toJSON();
// => {
//   name: "session",
//   value: "abc123",
//   path: "/",
//   secure: true,
//   httpOnly: true,
//   sameSite: "lax",
//   partitioned: false
// }

// Works with JSON.stringify
const jsonString = JSON.stringify(cookie);
```

----------------------------------------

TITLE: Handling Query Parameters with FileSystemRouter
DESCRIPTION: Example showing how the router parses query parameters from the URL and includes them in the query property of the match result.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-system-router.md#2025-04-22_snippet_2

LANGUAGE: ts
CODE:
```
router.match("/settings?foo=bar");

// =>
{
  filePath: "/Users/colinmcd94/Documents/bun/fun/pages/settings.tsx",
  kind: "dynamic",
  name: "/settings",
  pathname: "/settings?foo=bar",
  src: "https://mydomain.com/_next/static/pages/settings.tsx",
  query: {
    foo: "bar"
  }
}
```

----------------------------------------

TITLE: Simple HTTP Server with Auto-Reload Logging
DESCRIPTION: A TypeScript file that creates a simple HTTP server with Bun and logs the timestamp when the server restarts in watch mode.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/hot.md#2025-04-22_snippet_3

LANGUAGE: tsx
CODE:
```
import { serve } from "bun";
console.log("I restarted at:", Date.now());

serve({
  port: 4003,

  fetch(request) {
    return new Response("Sup");
  },
});
```

----------------------------------------

TITLE: Creating Mock Function with Arguments in Bun Test
DESCRIPTION: Demonstrates creating a mock function that accepts parameters, specifically a multiplier for the random value.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/mock-functions.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { test, expect, mock } from "bun:test";

const random = mock((multiplier: number) => multiplier * Math.random());
```

----------------------------------------

TITLE: Async Element Handler Example
DESCRIPTION: Demonstrates how to use async handlers with HTMLRewriter, including handling promises and delayed operations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/html-rewriter.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
rewriter.on("div", {
  async element(element) {
    await Bun.sleep(1000);
    element.setInnerContent("<span>replace</span>", { html: true });
  },
});
```

----------------------------------------

TITLE: Comparing Bun and Node.js Execution Speed
DESCRIPTION: Demonstrates running a JavaScript file (`hello.js`) with both `bun` and `node`, highlighting Bun's significantly faster execution time (5.2ms vs 25.1ms reported on Linux in the example context). This illustrates a key performance benefit of using Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/run.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
bun hello.js
```

LANGUAGE: text
CODE:
```
5.2ms
```

LANGUAGE: bash
CODE:
```
node hello.js
```

LANGUAGE: text
CODE:
```
25.1ms
```

----------------------------------------

TITLE: Configuring S3Client with Explicit Credentials
DESCRIPTION: Shows how to initialize an S3Client with explicit credentials instead of relying on environment variables. The example includes various configuration options for different S3-compatible services.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { S3Client } from "bun";

const client = new S3Client({
  accessKeyId: "your-access-key",
  secretAccessKey: "your-secret-key",
  bucket: "my-bucket",
  // sessionToken: "..."
  // acl: "public-read",
  // endpoint: "https://s3.us-east-1.amazonaws.com",
  // endpoint: "https://<account-id>.r2.cloudflarestorage.com", // Cloudflare R2
  // endpoint: "https://<region>.digitaloceanspaces.com", // DigitalOcean Spaces
  // endpoint: "http://localhost:9000", // MinIO
});

// Bun.s3 is a global singleton that is equivalent to `new Bun.S3Client()`
```

----------------------------------------

TITLE: Dynamic Updates in TypeScript
DESCRIPTION: Shows how to perform dynamic updates using object properties and column selection.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
await sql`UPDATE users SET ${sql(user, "name", "email")} WHERE id = ${user.id}`;
// uses all keys from the object to update the row
await sql`UPDATE users SET ${sql(user)} WHERE id = ${user.id}`;
```

----------------------------------------

TITLE: Installing Bun on macOS/Linux using curl
DESCRIPTION: This snippet shows how to install Bun on macOS, Linux, and WSL using curl. It also demonstrates how to install a specific version of Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/installation.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ curl -fsSL https://bun.sh/install | bash # for macOS, Linux, and WSL
# to install a specific version
$ curl -fsSL https://bun.sh/install | bash -s "bun-v$BUN_LATEST_VERSION"
```

----------------------------------------

TITLE: Applying Styles Based on Text Direction with :dir() - CSS
DESCRIPTION: Explains styling according to text direction using the :dir() pseudo-class and demonstrates Bun's fallback mechanism using :lang() selectors. Dependencies include text direction being set via markup or inherited, and fallback relies on correct language code mapping for accurate results. Typical usage targets bidirectional/cross-lingual UI adjustments.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_18

LANGUAGE: css
CODE:
```
/* Apply different styles based on text direction */
.nav-arrow:dir(ltr) {
  transform: rotate(0deg);
}

.nav-arrow:dir(rtl) {
  transform: rotate(180deg);
}

/* Position elements based on text flow */
.sidebar:dir(ltr) {
  border-right: 1px solid #ddd;
}

.sidebar:dir(rtl) {
  border-left: 1px solid #ddd;
}
```

LANGUAGE: css
CODE:
```
/* Converted to use language-based selectors as fallback */
.nav-arrow:lang(en, fr, de, es, it, pt, nl) {
  transform: rotate(0deg);
}

.nav-arrow:lang(ar, he, fa, ur) {
  transform: rotate(180deg);
}

.sidebar:lang(en, fr, de, es, it, pt, nl) {
  border-right: 1px solid #ddd;
}

.sidebar:lang(ar, he, fa, ur) {
  border-left: 1px solid #ddd;
}
```

----------------------------------------

TITLE: Passing Arguments and Flags to bunx Executables (Shell - bash)
DESCRIPTION: Illustrates passing additional command-line flags and arguments ('--foo bar') through bunx to a package binary. The executable will receive these flags as process.argv entries. No special prerequisites beyond a compatible cli package and bun runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bunx.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
$ bunx my-cli --foo bar
```

----------------------------------------

TITLE: Initializing Bun Project with Drizzle and Neon Dependencies (Shell Script)
DESCRIPTION: Demonstrates the shell commands necessary to set up a new Bun project with Drizzle ORM and the Neon serverless Postgres driver, including developer dependencies for Drizzle migrations. Assumes Bun is installed and available in the system PATH. No input parameters; produces a project directory with required dependencies installed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-drizzle.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ mkdir bun-drizzle-neon\n$ cd bun-drizzle-neon\n$ bun init -y\n$ bun add drizzle-orm @neondatabase/serverless\n$ bun add -D drizzle-kit
```

----------------------------------------

TITLE: Setting Cookies in Bun Server Responses
DESCRIPTION: Shows how to set cookies in HTTP responses using the cookies.set() method. The example demonstrates setting cookies with various options including maxAge, httpOnly, secure, and path.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_21

LANGUAGE: typescript
CODE:
```
Bun.serve({
  routes: {
    "/login": req => {
      const cookies = req.cookies;

      // Set a cookie with various options
      cookies.set("user_id", "12345", {
        maxAge: 60 * 60 * 24 * 7, // 1 week
        httpOnly: true,
        secure: true,
        path: "/",
      });

      // Add a theme preference cookie
      cookies.set("theme", "dark");

      // Modified cookies from the request are automatically applied to the response
      return new Response("Login successful");
    },
  },
});
```

----------------------------------------

TITLE: Running a Bun TypeScript file from the command line
DESCRIPTION: Demonstrates how to execute a Bun TypeScript file (adder.ts) from the command line and shows the expected interactive output. This snippet illustrates the usage of the previously defined addition calculator.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/console.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ bun adder.ts
Let's add some numbers!
Count: 0
> 5
Count: 5
> 5
Count: 10
> 5
Count: 15
```

----------------------------------------

TITLE: Creating a Blob from a Buffer in Bun (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to initialize a `Blob` object using a Node.js `Buffer`. First, a `Buffer` is created from the string 'hello'. Then, this `Buffer` is passed inside an array to the `Blob` constructor to create a new `Blob` instance. This leverages Bun's support for standard Web APIs like `Blob` and Node.js APIs like `Buffer`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/buffer-to-blob.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
```ts
const buf = Buffer.from("hello");
const blob = new Blob([buf]);
```
```

----------------------------------------

TITLE: Appending File Content Using Promise-Based API in TypeScript
DESCRIPTION: Uses the promise-based fs.appendFile from node:fs/promises to asynchronously append string data to a file. This will create the file if it doesn't exist.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/append.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
import { appendFile } from "node:fs/promises";

await appendFile("message.txt", "data to append");
```

----------------------------------------

TITLE: Defining the Bun Application Docker Build Process in Dockerfile
DESCRIPTION: This multi-stage Dockerfile defines the steps to build a container image for a Bun application. It starts from the official `oven/bun` base image, installs dependencies separately for development and production to optimize caching and final image size, copies application code, optionally runs tests and builds, and configures the final image to run the application on port 3000.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/docker.md#2025-04-22_snippet_0

LANGUAGE: dockerfile
CODE:
```
# use the official Bun image
# see all versions at https://hub.docker.com/r/oven/bun/tags
FROM oven/bun:1 AS base
WORKDIR /usr/src/app

# install dependencies into temp directory
# this will cache them and speed up future builds
FROM base AS install
RUN mkdir -p /temp/dev
COPY package.json bun.lock /temp/dev/
RUN cd /temp/dev && bun install --frozen-lockfile

# install with --production (exclude devDependencies)
RUN mkdir -p /temp/prod
COPY package.json bun.lock /temp/prod/
RUN cd /temp/prod && bun install --frozen-lockfile --production

# copy node_modules from temp directory
# then copy all (non-ignored) project files into the image
FROM base AS prerelease
COPY --from=install /temp/dev/node_modules node_modules
COPY . .

# [optional] tests & build
ENV NODE_ENV=production
RUN bun test
RUN bun run build

# copy production dependencies and source code into final image
FROM base AS release
COPY --from=install /temp/prod/node_modules node_modules
COPY --from=prerelease /usr/src/app/index.ts .
COPY --from=prerelease /usr/src/app/package.json .

# run the app
USER bun
EXPOSE 3000/tcp
ENTRYPOINT [ "bun", "run", "index.ts" ]
```

----------------------------------------

TITLE: Querying Database Table using Drizzle Query Builder (TypeScript)
DESCRIPTION: Demonstrates how to query data from the `movies` table using Drizzle's query builder API. It imports the `schema` and `db` instance. The `db.select().from(schema.movies)` statement constructs and executes a query to select all columns from the `movies` table. The retrieved results are then logged to the console. Depends on `db.ts`, `schema.ts`, and the `movies` table containing data.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/drizzle.md#2025-04-22_snippet_11

LANGUAGE: ts
CODE:
```
#index.ts
import * as schema from "./schema";
import { db } from "./db";

const result = await db.select().from(schema.movies);
console.log(result);
```

----------------------------------------

TITLE: Converting Node.js Readable Stream to JSON using Response in Bun
DESCRIPTION: This code demonstrates how to convert a Node.js Readable stream containing JSON data into a JavaScript object in Bun. It creates a Readable stream from a JSON string, then uses the Response constructor and its json() method to parse the stream data.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/streams/node-readable-to-json.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Readable } from "stream";
const stream = Readable.from([JSON.stringify({ hello: "world" })]);
const json = await new Response(stream).json();
console.log(json); // { hello: "world" }
```

----------------------------------------

TITLE: Compiled Output for Modern Color Notation - Bun Bundler CSS
DESCRIPTION: Shows how Bun transpiles modern notations to widely supported formats: comma-separated rgb(), explicit rgba() for alpha, and rgba() equivalents for hex+alpha. This achieves comprehensive browser compatibility while supporting modern authoring.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_15

LANGUAGE: css
CODE:
```
.modern-styling {\n  /* Converted to comma format for older browsers */\n  color: rgb(50, 100, 200);\n\n  /* Alpha channels handled appropriately */\n  border-color: rgba(100, 50, 200, 0.75);\n\n  /* Hex+alpha converted to rgba when needed */\n  background-color: rgba(0, 170, 255, 0.5);\n\n  box-shadow: 0 5px 10px rgba(38, 115, 153, 0.4);\n}
```

----------------------------------------

TITLE: Synchronous Code Transformation Example
DESCRIPTION: Demonstrates synchronous transformation of TSX code to vanilla JavaScript using transformSync method
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/transpiler.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
const transpiler = new Bun.Transpiler({
  loader: 'tsx',
});

const code = `
import * as whatever from "./whatever.ts"
export function Home(props: {title: string}){
  return <p>{props.title}</p>;
}`;

const result = transpiler.transformSync(code);
```

----------------------------------------

TITLE: Element Manipulation Operations
DESCRIPTION: Comprehensive example of element manipulation methods including attribute operations, content modification, and position handling.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/html-rewriter.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
rewriter.on("div", {
  element(el) {
    // Attributes
    el.setAttribute("class", "new-class").setAttribute("data-id", "123");

    const classAttr = el.getAttribute("class"); // "new-class"
    const hasId = el.hasAttribute("id"); // boolean
    el.removeAttribute("class");

    // Content manipulation
    el.setInnerContent("New content"); // Escapes HTML by default
    el.setInnerContent("<p>HTML content</p>", { html: true }); // Parses HTML
    el.setInnerContent(""); // Clear content

    // Position manipulation
    el.before("Content before")
      .after("Content after")
      .prepend("First child")
      .append("Last child");

    // HTML content insertion
    el.before("<span>before</span>", { html: true })
      .after("<span>after</span>", { html: true })
      .prepend("<span>first</span>", { html: true })
      .append("<span>last</span>", { html: true });

    // Removal
    el.remove(); // Remove element and contents
    el.removeAndKeepContent(); // Remove only the element tags

    // Properties
    console.log(el.tagName); // Lowercase tag name
    console.log(el.namespaceURI); // Element's namespace URI
    console.log(el.selfClosing); // Whether element is self-closing (e.g. <div />)
    console.log(el.canHaveContent); // Whether element can contain content (false for void elements like <br>)
    console.log(el.removed); // Whether element was removed

    // Attributes iteration
    for (const [name, value] of el.attributes) {
      console.log(name, value);
    }

    // End tag handling
    el.onEndTag(endTag => {
      endTag.before("Before end tag");
      endTag.after("After end tag");
      endTag.remove(); // Remove the end tag
      console.log(endTag.name); // Tag name in lowercase
    });
  },
});
```

----------------------------------------

TITLE: Initializing a Bun Project
DESCRIPTION: Runs the 'bun init' command to scaffold a new project, accepting default settings. This creates basic files including index.ts, tsconfig.json, and package.json.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/quickstart.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ bun init
bun init helps you get started with a minimal project and tries to
guess sensible defaults. Press ^C anytime to quit.

package name (quickstart):
entry point (index.ts):

Done! A package.json file was saved in the current directory.
 + index.ts
 + .gitignore
 + tsconfig.json (for editor auto-complete)
 + README.md

To get started, run:
  bun run index.ts
```

----------------------------------------

TITLE: Detecting Main Thread vs Worker Context
DESCRIPTION: Example of using Bun.isMainThread to conditionally execute code based on whether it's running in the main thread or a worker thread.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/workers.md#2025-04-22_snippet_16

LANGUAGE: typescript
CODE:
```
if (Bun.isMainThread) {
  console.log("I'm the main thread");
} else {
  console.log("I'm in a worker");
}
```

----------------------------------------

TITLE: Running a Qwik Development Server with Bun
DESCRIPTION: This command starts the Qwik development server using Bun. It runs Vite in SSR mode and provides local development URL and other helpful information.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/qwik.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
$ bun run dev
  $ vite--mode ssr

  VITE v4.4.7  ready in 1190 ms

  ➜  Local:   http://localhost:5173/
  ➜  Network: use --host to expose
  ➜  press h to show help
```

----------------------------------------

TITLE: Using setSystemTime with Lifecycle Hooks in Bun Tests
DESCRIPTION: This snippet shows how to use setSystemTime in conjunction with the beforeAll lifecycle hook to create a deterministic testing environment with a fixed date for all tests in the suite.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/mock-clock.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { test, expect, beforeAll, setSystemTime } from "bun:test";

beforeAll(() => {
  const date = new Date("1999-01-01T00:00:00.000Z");
  setSystemTime(date); // it's now January 1, 1999
});

// tests...
```

----------------------------------------

TITLE: Configuring Bun to Preload the Svelte Plugin
DESCRIPTION: TOML configuration for bunfig.toml that tells Bun to preload the Svelte loader plugin before running tests, enabling support for Svelte components.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/svelte-test.md#2025-04-22_snippet_2

LANGUAGE: toml
CODE:
```
[test]
# Tell Bun to load this plugin before your tests run
preload = ["./svelte-loader.js"]

# This also works:
# test.preload = ["./svelte-loader.js"]
```

----------------------------------------

TITLE: Updating All Dependencies - Bun CLI - Shell
DESCRIPTION: This shell snippet demonstrates how to update all project dependencies to the latest versions that satisfy the ranges specified in the package.json, using the Bun CLI. Requires Bun to be installed and a valid package.json file in the project directory. The command updates all dependencies listed, respecting any version constraints; no parameters are needed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/update.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun update
```

----------------------------------------

TITLE: Getting TypedArray Pointer and Calling FFI ('Hardmode') (TypeScript)
DESCRIPTION: Demonstrates manually obtaining a pointer to a TypedArray using ptr from 'bun:ffi' and explicitly passing it to an FFI function. Examples include both pointer extraction and FFI invocation with precise buffer control. Useful for advanced scenarios where direct pointer manipulation or offset is necessary.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/ffi.md#2025-04-22_snippet_15

LANGUAGE: typescript
CODE:
```
import { dlopen, FFIType, ptr } from "bun:ffi";

const {
  symbols: { encode_png },
} = dlopen(myLibraryPath, {
  encode_png: {
    // FFIType's can be specified as strings too
    args: ["ptr", "u32", "u32"],
    returns: FFIType.ptr,
  },
});

const pixels = new Uint8ClampedArray(128 * 128 * 4);
pixels.fill(254);

// this returns a number! not a BigInt!
const myPtr = ptr(pixels);

const out = encode_png(
  myPtr,

  // dimensions:
  128,
  128,
);

```

----------------------------------------

TITLE: Importing Aliased Package in TypeScript
DESCRIPTION: Demonstrates how to import and use the aliased package in TypeScript code, showing that the package can be referenced using the custom name while maintaining its original functionality.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/npm-alias.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { z } from "my-custom-name";

z.string();
```

----------------------------------------

TITLE: Forcing Bun's Runtime Using the --bun Flag in bunx (Shell - bash)
DESCRIPTION: Shows how to force bunx to use Bun's own runtime for a package executable instead of the runtime specified in the file's shebang. The '--bun' flag must precede the executable name. Suitable for overriding default shebang handling. Input is the '--bun' flag and executable name; output depends on the CLI logic.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bunx.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
$ bunx --bun my-cli
```

----------------------------------------

TITLE: Piping Commands in Bun Shell
DESCRIPTION: Shows how to pipe the output of one command to another using the | operator in Bun Shell.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

const result = await $`echo "Hello World!" | wc -w`.text();

console.log(result); // 2\n
```

----------------------------------------

TITLE: Appending File Content Using Callback-Based API in TypeScript
DESCRIPTION: Uses the callback-based fs.appendFile from node:fs to asynchronously append string data to a file. Includes error handling in the callback function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/append.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
import { appendFile } from "node:fs";

appendFile("message.txt", "data to append", err => {
  if (err) throw err;
  console.log('The "data to append" was appended to file!');
});
```

----------------------------------------

TITLE: Incremental File Writing with FileSink
DESCRIPTION: Examples of using FileSink for incremental file writing and configuration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-io.md#2025-04-22_snippet_12

LANGUAGE: typescript
CODE:
```
const file = Bun.file("output.txt");
const writer = file.writer();

writer.write("it was the best of times\n");
writer.write("it was the worst of times\n");
```

----------------------------------------

TITLE: Packing a Workspace with Bun
DESCRIPTION: Creates a compressed tarball (`.tgz`) file from the current workspace's contents, similar to `npm pack`. This is useful for publishing or distributing the package. Various options allow customization of the output and process.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/pm.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ bun pm pack
```

----------------------------------------

TITLE: Importing Tailwind CSS in a CSS File
DESCRIPTION: CSS example showing how to import Tailwind CSS using the @import directive, which will be processed by Bun's bundler using the Tailwind plugin.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/html.md#2025-04-22_snippet_11

LANGUAGE: css
CODE:
```
/* Import TailwindCSS in your CSS */
@import "tailwindcss";
```

----------------------------------------

TITLE: Importing TailwindCSS in Component CSS
DESCRIPTION: Shows how TailwindCSS is imported in the component's CSS file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bun-create.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
@import "tailwindcss";
```

----------------------------------------

TITLE: Cleanup with dispose() Method in Bun HMR
DESCRIPTION: Shows how to use import.meta.hot.dispose to clean up side effects before a module is replaced. This callback runs just before the module is replaced with another copy.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/hmr.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
const sideEffect = setupSideEffect();

import.meta.hot.dispose(() => {
  sideEffect.cleanup();
});
```

----------------------------------------

TITLE: Writing DOM Tests with Bun and Happy DOM
DESCRIPTION: Example test file showing how to write DOM tests using Bun's test runner with Happy DOM. The test creates a button element and verifies its text content.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/dom.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import {test, expect} from 'bun:test';

test('dom test', () => {
  document.body.innerHTML = `<button>My button</button>`;
  const button = document.querySelector('button');
  expect(button?.innerText).toEqual('My button');
});
```

----------------------------------------

TITLE: Installing Packages with Bun
DESCRIPTION: Installs the figlet package for ASCII art generation and its type declarations for TypeScript support using Bun's package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/quickstart.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
$ bun add figlet
$ bun add -d @types/figlet # TypeScript users only
```

----------------------------------------

TITLE: Using toArrayBuffer with Custom Deallocator (TypeScript)
DESCRIPTION: Demonstrates calling toArrayBuffer from 'bun:ffi' with an explicit deallocation callback and optional context pointer. Headings explain both the context-aware and context-less usage forms. Inputs include pointers, offsets, lengths, deallocator context, and callback function. Ensures native memory is cleaned up appropriately when buffers are GC'ed in JS.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/ffi.md#2025-04-22_snippet_13

LANGUAGE: typescript
CODE:
```
import { toArrayBuffer } from "bun:ffi";

// with a deallocatorContext:
toArrayBuffer(
  bytes,
  byteOffset,

  byteLength,

  // this is an optional pointer to a callback
  deallocatorContext,

  // this is a pointer to a function
  jsTypedArrayBytesDeallocator,
);

// without a deallocatorContext:
toArrayBuffer(
  bytes,
  byteOffset,

  byteLength,

  // this is a pointer to a function
  jsTypedArrayBytesDeallocator,
);

```

----------------------------------------

TITLE: Using CookieMap in Bun HTTP Server
DESCRIPTION: Example showing how to access, check, and set cookies in a Bun HTTP server route handler. The cookies property on the request object is an instance of CookieMap that allows manipulation of cookies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const server = Bun.serve({
  routes: {
    "/": req => {
      // Access request cookies
      const cookies = req.cookies;

      // Get a specific cookie
      const sessionCookie = cookies.get("session");
      if (sessionCookie != null) {
        console.log(sessionCookie);
      }

      // Check if a cookie exists
      if (cookies.has("theme")) {
        // ...
      }

      // Set a cookie, it will be automatically applied to the response
      cookies.set("visited", "true");

      return new Response("Hello");
    },
  },
});

console.log("Server listening at: " + server.url);
```

----------------------------------------

TITLE: SQLite Database Integration
DESCRIPTION: Examples of using SQLite databases in compiled Bun applications, including embedded databases.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/executables.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import db from "./my.db" with { type: "sqlite" };

console.log(db.query("select * from users LIMIT 1").get());
```

LANGUAGE: javascript
CODE:
```
import myEmbeddedDb from "./my.db" with { type: "sqlite", embed: "true" };

console.log(myEmbeddedDb.query("select * from users LIMIT 1").get());
```

----------------------------------------

TITLE: Converting Blob to Uint8Array using Bun - TypeScript
DESCRIPTION: This code snippet demonstrates how to convert the binary data stored in a Blob object into a Uint8Array in TypeScript. It first creates a new Blob containing the string 'hello world', then reads its contents as an ArrayBuffer asynchronously, and finally constructs a Uint8Array from the resulting buffer. Requires a runtime supporting the standard Blob API (such as browsers or Bun). The blob must be readable and calling arrayBuffer() returns a promise; awaiting it provides the input for the Uint8Array constructor. The resulting Uint8Array contains the raw bytes of the original Blob.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/blob-to-typedarray.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
const blob = new Blob(["hello world"]);
const arr = new Uint8Array(await blob.arrayBuffer());
```

----------------------------------------

TITLE: Installing Tailwind CSS Plugin for Bun
DESCRIPTION: A bash command to install the Tailwind CSS plugin for Bun's bundler, which enables automatic processing of Tailwind CSS directives.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/html.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
# Or any npm client
$ bun install --dev bun-plugin-tailwind
```

----------------------------------------

TITLE: Re-running Tests Multiple Times with Bun Test Runner in Shell
DESCRIPTION: This command uses the --rerun-each flag to run each test 10 times in the Bun test runner. This approach is particularly useful for detecting flaky or non-deterministic tests that may not fail consistently.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/rerun-each.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
# re-run each test 10 times
$ bun test --rerun-each 10
```

----------------------------------------

TITLE: Converting Node.js Readable to ArrayBuffer using Bun Response
DESCRIPTION: Creates a Readable stream from string chunks and converts it to an ArrayBuffer using Bun's Response object. The method leverages Bun's built-in Response API to handle stream conversion efficiently.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/streams/node-readable-to-arraybuffer.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Readable } from "stream";
const stream = Readable.from(["Hello, ", "world!"]);
const buf = await new Response(stream).arrayBuffer();
```

----------------------------------------

TITLE: Disabling Sourcemap Usage for Coverage Analysis
DESCRIPTION: Opts out of using sourcemaps for coverage analysis, which can be useful for debugging coverage issues but may lead to confusing results due to code transpilation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/configuration.md#2025-04-22_snippet_6

LANGUAGE: toml
CODE:
```
[test]
coverageIgnoreSourcemaps = true  # Don't use sourcemaps for coverage analysis
```

----------------------------------------

TITLE: Hot Reloading Handlers for a TCP Server
DESCRIPTION: Updates the event handlers for all active sockets on a server without interrupting connections. This allows for dynamically changing behavior of a running server.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/tcp.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
const server = Bun.listen({ /* config */ })

// reloads handlers for all active server-side sockets
server.reload({
  socket: {
    data(){
      // new 'data' handler
    }
  }
})
```

----------------------------------------

TITLE: Bun Core API References
DESCRIPTION: List of core Bun APIs including HTTP server (Bun.serve), file operations (Bun.file, Bun.write), process management (Bun.spawn), TCP networking (Bun.listen), transpilation (Bun.Transpiler), routing (Bun.FileSystemRouter), HTML manipulation (HTMLRewriter), and various utilities.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/index.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
Bun.serve          // HTTP server
Bun.file           // File operations
Bun.write          // File writing
Bun.spawn          // Process spawning
Bun.spawnSync      // Synchronous process spawning
Bun.listen         // TCP server
Bun.connect        // TCP client
Bun.Transpiler     // Code transpilation
Bun.FileSystemRouter // File-based routing
HTMLRewriter       // HTML manipulation
Bun.peek           // Memory inspection
Bun.which          // Path resolution
```

----------------------------------------

TITLE: Configuring Bun Bundler with YAML Plugin
DESCRIPTION: TypeScript code snippet showing how to use the YAML plugin with Bun's bundler by adding it to the plugins array in the build configuration.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-plugin-yaml/README.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
import yamlPlugin from "bun-plugin-yaml";

await Bun.build({
  entrypoints: ["./index.tsx"],
  // other config

  plugins: [yamlPlugin()],
});
```

----------------------------------------

TITLE: Deleting an S3File Object - TypeScript
DESCRIPTION: Demonstrates deleting a file from S3 using an S3File object's delete method. The snippet also references the unlink method as an equivalent alternative. Assumes an existing and accessible S3File instance.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_24

LANGUAGE: typescript
CODE:
```
await s3file.delete();
// await s3File.unlink();
```

----------------------------------------

TITLE: Creating a .env File for Bun Applications
DESCRIPTION: Example of a .env file structure for setting environment variables in Bun. This file defines key-value pairs where each line represents an environment variable and its value.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/set-env.md#2025-04-22_snippet_1

LANGUAGE: txt
CODE:
```
FOO=hello
BAR=world
```

----------------------------------------

TITLE: Scaffolding a Hono Project with Bun Template (Shell)
DESCRIPTION: This snippet provides shell commands for generating a new Hono project using Bun's project scaffolding tool. It guides the user through running 'bun create hono myapp', selecting the 'bun' template, navigating into the created directory, and installing dependencies. The process requires the 'bun' runtime and internet access to clone templates. Inputs include user selections in the interactive CLI and outputs are a new project folder with all dependencies installed. Some commands are interactive and rely on available templates.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/hono.md#2025-04-22_snippet_1

LANGUAGE: Shell
CODE:
```
$ bun create hono myapp
✔ Which template do you want to use? › bun
cloned honojs/starter#main to /path/to/myapp
✔ Copied project files
$ cd myapp
$ bun install
```

----------------------------------------

TITLE: Peeking Promise Results with Bun.peek()
DESCRIPTION: Demonstrates how to use Bun.peek() to read a promise's result without await or .then, and how to check promise status with peek.status().
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import { peek } from "bun";

const promise = Promise.resolve("hi");

// no await!
const result = peek(promise);
console.log(result); // "hi"
```

LANGUAGE: typescript
CODE:
```
import { peek } from "bun";
import { expect, test } from "bun:test";

test("peek", () => {
  const promise = Promise.resolve(true);

  // no await necessary!
  expect(peek(promise)).toBe(true);

  // if we peek again, it returns the same value
  const again = peek(promise);
  expect(again).toBe(true);

  // if we peek a non-promise, it returns the value
  const value = peek(42);
  expect(value).toBe(42);

  // if we peek a pending promise, it returns the promise again
  const pending = new Promise(() => {});
  expect(peek(pending)).toBe(pending);

  // If we peek a rejected promise, it:
  // - returns the error
  // - does not mark the promise as handled
  const rejected = Promise.reject(
    new Error("Successfully tested promise rejection"),
  );
  expect(peek(rejected).message).toBe("Successfully tested promise rejection");
});
```

LANGUAGE: typescript
CODE:
```
import { peek } from "bun";
import { expect, test } from "bun:test";

test("peek.status", () => {
  const promise = Promise.resolve(true);
  expect(peek.status(promise)).toBe("fulfilled");

  const pending = new Promise(() => {});
  expect(peek.status(pending)).toBe("pending");

  const rejected = Promise.reject(new Error("oh nooo"));
  expect(peek.status(rejected)).toBe("rejected");
});
```

----------------------------------------

TITLE: Running Production Server with Bun
DESCRIPTION: Command to start the application in production mode using Bun runtime
SOURCE: https://github.com/oven-sh/bun/blob/main/src/cli/init/README2.default.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
bun start
```

----------------------------------------

TITLE: Resource Management with prune() Method in Bun HMR
DESCRIPTION: Demonstrates using import.meta.hot.prune to clean up resources when a module's imports are removed. This example shows managing a WebSocket connection across HMR updates.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/hmr.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
import { something } from "./something";

// Initialize or re-use a WebSocket connection
export const ws = (import.meta.hot.data.ws ??= new WebSocket(location.origin));

// If the module's import is removed, clean up the WebSocket connection.
import.meta.hot.prune(() => {
  ws.close();
});
```

----------------------------------------

TITLE: Using import.meta.resolve for module resolution
DESCRIPTION: Example of using import.meta.resolve to resolve a module specifier to a URL, equivalent to import.meta.resolve in browsers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/import-meta.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import.meta.resolve("zod");
// => "file:///path/to/project/node_modules/zod/index.ts"
```

----------------------------------------

TITLE: Configuring Cache Behavior in Bun
DESCRIPTION: Settings to control cache directory location and behavior, including options to disable cache and manifest resolution.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_30

LANGUAGE: toml
CODE:
```
[install.cache]

# the directory to use for the cache
dir = "~/.bun/install/cache"

# when true, don't load from the global cache.
# Bun may still write to node_modules/.cache
disable = false

# when true, always resolve the latest versions from the registry
disableManifest = false
```

----------------------------------------

TITLE: Creating a Basic HTTP Server with Bun.serve
DESCRIPTION: Implements a simple HTTP server using Bun's built-in serve API. The server listens on port 3000 and responds with 'Bun!' to all requests.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/quickstart.md#2025-04-22_snippet_2

LANGUAGE: ts
CODE:
```
const server = Bun.serve({
  port: 3000,
  fetch(req) {
    return new Response("Bun!");
  },
});

console.log(`Listening on http://localhost:${server.port} ...`);
```

----------------------------------------

TITLE: Testing a Svelte Component with Bun Test
DESCRIPTION: A test case that demonstrates how to import and test a Svelte component using Bun's test runner and @testing-library/svelte. It checks component state before and after events.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/svelte-test.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import { test, expect } from "bun:test";
import { render, fireEvent } from "@testing-library/svelte";
import Counter from "./Counter.svelte";

test("Counter increments when clicked", async () => {
  const { getByText, component } = render(Counter);
  const button = getByText("+1");

  // Initial state
  expect(component.$$.ctx[0]).toBe(0); // initialCount is the first prop

  // Click the increment button
  await fireEvent.click(button);

  // Check the new state
  expect(component.$$.ctx[0]).toBe(1);
});
```

----------------------------------------

TITLE: Creating HTTP Server for File Upload in Bun
DESCRIPTION: Initial setup of a Bun HTTP server that serves an HTML form for file uploads. The server listens on port 4000 and serves an index.html file at the root path.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/file-uploads.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const server = Bun.serve({
  port: 4000,
  async fetch(req) {
    const url = new URL(req.url);

    // return index.html for root path
    if (url.pathname === "/")
      return new Response(Bun.file("index.html"), {
        headers: {
          "Content-Type": "text/html",
        },
      });

    return new Response("Not Found", { status: 404 });
  },
});

console.log(`Listening on http://localhost:${server.port}`);
```

----------------------------------------

TITLE: Accessing Expanded Environment Variables
DESCRIPTION: Shows how to access environment variables that have been expanded based on other variables.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_9

LANGUAGE: ts
CODE:
```
process.env.BAR; // => "helloworld"
```

----------------------------------------

TITLE: Streaming HTTP Response with AsyncIterable Object in Bun
DESCRIPTION: Demonstrates creating a streaming HTTP server using an object that implements the Symbol.asyncIterator protocol as the Response body. This approach uses an object literal with an async generator method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/stream-iterator.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
Bun.serve({
  port: 3000,
  fetch(req) {
    return new Response(
      {
        [Symbol.asyncIterator]: async function* () {
          yield "Hello, ";
          await Bun.sleep(100);
          yield "world!";
        },
      },
      { headers: { "Content-Type": "text/plain" } },
    );
  },
});
```

----------------------------------------

TITLE: Batch UDP Packet Sending
DESCRIPTION: Demonstrates how to send multiple UDP packets in a single operation using sendMany()
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/udp.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
const socket = await Bun.udpSocket({})
// sends 'Hello' to 127.0.0.1:41234, and 'foo' to 1.1.1.1:53 in a single operation
socket.sendMany(['Hello', 41234, '127.0.0.1', 'foo', 53, '1.1.1.1'])
```

LANGUAGE: typescript
CODE:
```
const socket = await Bun.udpSocket({
  connect: {
    port: 41234,
    hostname: 'localhost',
  }
});
socket.sendMany(['foo', 'bar', 'baz']);
```

----------------------------------------

TITLE: Redis Connection Event Handling in Bun
DESCRIPTION: Demonstrates how to register and handle connection events for Redis clients in Bun, including connect and close events.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/redis.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
const client = new RedisClient();

// Called when successfully connected to Redis server
client.onconnect = () => {
  console.log("Connected to Redis server");
};

// Called when disconnected from Redis server
client.onclose = error => {
  console.error("Disconnected from Redis server:", error);
};

// Manually connect/disconnect
await client.connect();
client.close();
```

----------------------------------------

TITLE: Redirecting Output to JavaScript Objects in Bun Shell
DESCRIPTION: Shows how to redirect the output of a shell command to a JavaScript Buffer object using the > operator.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

const buffer = Buffer.alloc(100);
await $`echo "Hello World!" > ${buffer}`;

console.log(buffer.toString()); // Hello World!\n
```

----------------------------------------

TITLE: Setting Environment Variables in Bun Shell
DESCRIPTION: Shows how to set environment variables for shell commands in Bun Shell, including using string interpolation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

const foo = "bar123";

await $`FOO=${foo + "456"} bun -e 'console.log(process.env.FOO)'`; // bar123456\n
```

----------------------------------------

TITLE: CSS Output with Hashed Asset References
DESCRIPTION: The resulting CSS after Bun has processed asset references, showing how paths are rewritten to include content hashes for cache busting.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/html.md#2025-04-22_snippet_6

LANGUAGE: css
CODE:
```
body {
  background-image: url("./logo-[ABC123].png");
}
```

----------------------------------------

TITLE: Integrating Bun Tests into GitHub Actions Workflow using YAML
DESCRIPTION: Provides a YAML configuration snippet for a GitHub Actions workflow. It demonstrates the steps required to check out the code, install Bun using the `oven-sh/setup-bun` action, install project dependencies (optional), and finally execute the tests using `bun test`. Bun automatically detects GitHub Actions and emits annotations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_5

LANGUAGE: yaml
CODE:
```
jobs:
  build:
    name: build-app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install bun
        uses: oven-sh/setup-bun@v2
      - name: Install dependencies # (assuming your project has dependencies)
        run: bun install # You can use npm/yarn/pnpm instead if you prefer
      - name: Run tests
        run: bun test
```

----------------------------------------

TITLE: Event Handling with on() Method in Bun HMR
DESCRIPTION: Shows how to listen for HMR runtime events using import.meta.hot.on, which lets you execute code at specific points in the HMR lifecycle.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/hmr.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
import.meta.hot.on("bun:beforeUpdate", () => {
  console.log("before a hot update");
});
```

----------------------------------------

TITLE: Streaming Buffer Data in Chunks Using Blob.stream() (TypeScript)
DESCRIPTION: This example illustrates how to convert a Buffer to a ReadableStream that streams data in smaller chunks, by first wrapping the Buffer in a Blob and then invoking blob.stream(). This method leverages the Blob API, which is available in Bun and Web environments, and can handle larger data efficiently by splitting it into manageable pieces. The resulting ReadableStream emits the Buffer's content incrementally, reducing memory pressure during streaming.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/buffer-to-readablestream.md#2025-04-22_snippet_1

LANGUAGE: TypeScript
CODE:
```
const buf = Buffer.from("hello world");
const blob = new Blob([buf]);
const stream = blob.stream();
```

----------------------------------------

TITLE: Text File Import Example
DESCRIPTION: Example of importing a text file in a bundle, which will be included as a string.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
import contents from "./file.txt";
console.log(contents); // => "Hello, world!"
```

----------------------------------------

TITLE: Running a Bun Script from package.json
DESCRIPTION: Executes the 'start' script defined in package.json using 'bun run start', which in turn runs index.ts with Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/quickstart.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
$ bun run start
  $ bun run index.ts
  Listening on http://localhost:3000 ...
```

----------------------------------------

TITLE: Using 'using' Statement with SQLite in Bun
DESCRIPTION: This example demonstrates the use of the 'using' statement to ensure proper closure of a database connection. It automatically closes the connection when exiting the block.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import { Database } from "bun:sqlite";

{
  using db = new Database("mydb.sqlite");
  using query = db.query("select 'Hello world' as message;");
  console.log(query.get()); // => { message: "Hello world" }
}
```

----------------------------------------

TITLE: Optimized Socket Writing Pattern
DESCRIPTION: Shows a more efficient approach to writing data to a socket by combining multiple characters into a single write operation, reducing syscall overhead and improving performance.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/tcp.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
socket.write("hello");
```

----------------------------------------

TITLE: Using .lines() on Completed Command in Bun Shell
DESCRIPTION: Illustrates how to use the .lines() method on a completed command in Bun Shell. This snippet shows searching for a specific term in a file using cat and grep, then iterating over the results.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_17

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

const search = "bun";

for await (let line of $`cat list.txt | grep ${search}`.lines()) {
  console.log(line);
}
```

----------------------------------------

TITLE: Updating Dependencies with Bun
DESCRIPTION: Commands for updating single or multiple dependencies, including options for version control and latest updates.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/from-npm-install-to-bun-install.md#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
# Update a single dependency
$ bun update @types/bun

# Update all dependencies
$ bun update

# Ignore semver, update to the latest version
$ bun update @types/bun --latest

# Update a dependency to a specific version
$ bun update @types/bun@$BUN_LATEST_VERSION

# Update all dependencies to the latest versions
$ bun update --latest
```

----------------------------------------

TITLE: Creating Lazy References to S3 Files
DESCRIPTION: Shows how to create a lazy reference to a file on S3 using the S3Client's file method. This operation is synchronous and doesn't perform any network requests until needed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// A lazy reference to a file on S3
const s3file: S3File = client.file("123.json");
```

----------------------------------------

TITLE: Environment Variables Plugin Example
DESCRIPTION: Example of implementing a plugin that exports environment variables using onLoad.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/plugins.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import { plugin } from "bun";

const envPlugin: BunPlugin = {
  name: "env plugin",
  setup(build) {
    build.onLoad({ filter: /env/, namespace: "file" }, args => {
      return {
        contents: `export default ${JSON.stringify(process.env)}`,
        loader: "js",
      };
    });
  },
};

Bun.build({
  entrypoints: ["./app.ts"],
  outdir: "./dist",
  plugins: [envPlugin],
});
```

----------------------------------------

TITLE: Creating File References
DESCRIPTION: Demonstrates creating file references using file descriptors and URLs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-io.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
Bun.file(1234);
Bun.file(new URL(import.meta.url)); // reference to the current file
```

----------------------------------------

TITLE: Seeding the Movie Table in EdgeDB with the JavaScript Client (TypeScript)
DESCRIPTION: This TypeScript snippet connects to the EdgeDB project, constructs a bulk insert EdgeQL query for movies, and executes it using the EdgeDB JS client. It uses the `.execute()` method for inserting multiple movie records efficiently via the `for` expression. Dependencies: `edgedb` client, valid connection settings, Bun environment. Inputs: Array of movie objects. Outputs: None (console log upon completion, process exit). Limitations: Assumes EdgeDB instance is running and schema is migrated.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/edgedb.md#2025-04-22_snippet_9

LANGUAGE: ts
CODE:
```
import { createClient } from "edgedb";

const client = createClient();

const INSERT_MOVIE = `
  with movies := <array<tuple<title: str, year: int64>>>$movies
  for movie in array_unpack(movies) union (
    insert Movie {
      title := movie.title,
      releaseYear := movie.year,
    }
  )
`;

const movies = [
  { title: "The Matrix", year: 1999 },
  { title: "The Matrix Reloaded", year: 2003 },
  { title: "The Matrix Revolutions", year: 2003 },
];

await client.execute(INSERT_MOVIE, { movies });

console.log(`Seeding complete.`);
process.exit();
```

----------------------------------------

TITLE: Running Bun tests with coverage reporting
DESCRIPTION: Command to run Bun tests with the --coverage flag to generate a coverage report showing function and line coverage percentages for each file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/coverage-threshold.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun test --coverage

test.test.ts:
✓ math > add [0.71ms]
✓ math > multiply [0.03ms]
✓ random [0.13ms]
-------------|---------|---------|-------------------
File         | % Funcs | % Lines | Uncovered Line #s
-------------|---------|---------|-------------------
All files    |   66.67 |   77.78 |
 math.ts     |   50.00 |   66.67 |
 random.ts   |   50.00 |   66.67 |
-------------|---------|---------|-------------------

 3 pass
 0 fail
 3 expect() calls
```

----------------------------------------

TITLE: Running Tests in Specific Directory with Bun Test
DESCRIPTION: Example showing how to run all test files within the 'utils' directory by using a path filter.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/discovery.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ bun test utils
```

----------------------------------------

TITLE: Querying Inserted Author Records with Drizzle ORM (TypeScript)
DESCRIPTION: Demonstrates querying all rows from the authors table using Drizzle ORM's select API, with the result printed to the console. Assumes previous seeding of table and a valid db/schema import; result is an array of author objects.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-drizzle.md#2025-04-22_snippet_12

LANGUAGE: ts
CODE:
```
import * as schema from "./schema";\nimport { db } from "./db";\n\nconst result = await db.select().from(schema.authors);\nconsole.log(result);
```

----------------------------------------

TITLE: Writing and reading Uint16 values with DataView
DESCRIPTION: Shows how to write a 16-bit unsigned integer (which uses 2 bytes) to an ArrayBuffer using DataView. The example demonstrates the byte-level representation of the value 513 (2*256 + 1).
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
dv.setUint16(1, 513);
// [0b00000011, 0b00000010, 0b00000001, 0b00000000]

console.log(dv.getUint16(1)); // => 513
```

----------------------------------------

TITLE: Manual Buffering with ArrayBufferSink
DESCRIPTION: Implements a manual buffering solution using Bun's ArrayBufferSink to efficiently collect multiple small writes before sending them to a socket in a single operation, with handling for backpressure.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/tcp.md#2025-04-22_snippet_12

LANGUAGE: typescript
CODE:
```
import { ArrayBufferSink } from "bun";

const sink = new ArrayBufferSink();
sink.start({ stream: true, highWaterMark: 1024 });

sink.write("h");
sink.write("e");
sink.write("l");
sink.write("l");
sink.write("o");

queueMicrotask(() => {
  const data = sink.flush();
  const wrote = socket.write(data);
  if (wrote < data.byteLength) {
    // put it back in the sink if the socket is full
    sink.write(data.subarray(wrote));
  }
});
```

----------------------------------------

TITLE: Running Bun from Pull Request
DESCRIPTION: Downloads a release build from a specified GitHub pull request using `bunx bun-pr`, adding it to the PATH with a PR-specific name for testing.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_21

LANGUAGE: sh
CODE:
```
bunx bun-pr <pr-number>
bunx bun-pr <branch-name>
bunx bun-pr "https://github.com/oven-sh/bun/pull/1234566"
```

----------------------------------------

TITLE: Executing Bun Tests using Bash
DESCRIPTION: Shows the basic command to run all tests in the current project using the Bun test runner. It recursively searches the working directory for files matching specific patterns (*.test.*, *_test.*, *.spec.*, *_spec.*) and executes them.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ bun test
```

----------------------------------------

TITLE: Using AbortSignal with Child Process in TypeScript
DESCRIPTION: Demonstrates how to abort a child process using an AbortSignal.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
const controller = new AbortController();
const { signal } = controller;

const proc = Bun.spawn({
  cmd: ["sleep", "100"],
  signal,
});

// Later, to abort the process:
controller.abort();
```

----------------------------------------

TITLE: Converting ReadableStream to Buffer in TypeScript
DESCRIPTION: Two approaches for converting a ReadableStream to a Buffer: the standard Response-based method and the optimized Bun utility function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_20

LANGUAGE: typescript
CODE:
```
// with Response
const buf = await new Response(stream).arrayBuffer();
Buffer.from(buf);

// with Bun function
Buffer.from(Bun.readableStreamToArrayBuffer(stream));
```

----------------------------------------

TITLE: Importing Text Files in TypeScript
DESCRIPTION: Demonstrates how to import text files as strings in TypeScript using Bun. This feature allows direct import of text file contents.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/loaders.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
import text from "./text.txt";
console.log(text);
// => "Hello world!"
```

LANGUAGE: txt
CODE:
```
Hello world!
```

----------------------------------------

TITLE: Using Bun.inspect for Syntax-Highlighted Error Previews
DESCRIPTION: Demonstrates how to use Bun.inspect() to generate a syntax-highlighted source code preview for an error, which helps with debugging by showing the exact location where an error occurred.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/debugger.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
// Create an error
const err = new Error("Something went wrong");
console.log(Bun.inspect(err, { colors: true }));
```

----------------------------------------

TITLE: Killing and Detaching Child Processes in TypeScript
DESCRIPTION: Demonstrates how to kill a child process and detach it from the parent process.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
const proc = Bun.spawn(["bun", "--version"]);
proc.kill();
proc.killed; // true

proc.kill(15); // specify a signal code
proc.kill("SIGTERM"); // specify a signal name

const proc2 = Bun.spawn(["bun", "--version"]);
proc2.unref();
```

----------------------------------------

TITLE: Importing JSON in TypeScript
DESCRIPTION: Shows how to import JSON files directly in TypeScript. During bundling, the JSON is inlined as a JavaScript object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/loaders.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
import pkg from "./package.json";
pkg.name; // => "my-package"
```

----------------------------------------

TITLE: Running Dev Server with Bun Script
DESCRIPTION: Starts the development server using the updated package.json script
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/vite.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
bun run dev
```

----------------------------------------

TITLE: Handling Process Exit Event in Bun
DESCRIPTION: Demonstrates how to listen for the process exit event, which is triggered when the process is about to exit. The callback receives the exit code as a parameter.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/os-signals.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
process.on("exit", code => {
  console.log(`Process exited with code ${code}`);
});
```

----------------------------------------

TITLE: Configuring Custom File Loaders in Bun
DESCRIPTION: Maps file extensions to specific loaders, allowing Bun to handle custom file types. This example treats .bagel files as TSX files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_5

LANGUAGE: toml
CODE:
```
[loader]
# when a .bagel file is imported, treat it like a tsx file
".bagel" = "tsx"
```

----------------------------------------

TITLE: Configuring Test Discovery Root Directory
DESCRIPTION: Sets a specific root directory for test discovery, limiting test scanning to a particular directory instead of the entire project.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/configuration.md#2025-04-22_snippet_1

LANGUAGE: toml
CODE:
```
[test]
root = "src"  # Only scan for tests in the src directory
```

----------------------------------------

TITLE: Writing Different Data Types to FileSink in TypeScript
DESCRIPTION: This snippet demonstrates how to write different types of data to a FileSink, including strings, Buffer objects, and Uint8Array. It shows the flexibility of the .write() method in accepting various data formats.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/filesink.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
w.write("hello");
w.write(Buffer.from("there"));
w.write(new Uint8Array([0, 255, 128]));
writer.flush();
```

----------------------------------------

TITLE: Creating entitlements.plist for JavaScript engine permissions
DESCRIPTION: Defines a macOS entitlements file with special permissions required for JavaScript engines to function properly, including JIT compilation, unsigned executable memory, and dynamic library loading.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/codesign-macos-executable.md#2025-04-22_snippet_2

LANGUAGE: xml
CODE:
```
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>com.apple.security.cs.allow-jit</key>
    <true/>
    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
    <true/>
    <key>com.apple.security.cs.disable-executable-page-protection</key>
    <true/>
    <key>com.apple.security.cs.allow-dyld-environment-variables</key>
    <true/>
    <key>com.apple.security.cs.disable-library-validation</key>
    <true/>
</dict>
</plist>
```

----------------------------------------

TITLE: Dashboard HTML Template for React Integration
DESCRIPTION: HTML template that serves as the container for a React application. The script tag references a TypeScript/React file that will be bundled by Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/fullstack.md#2025-04-22_snippet_8

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
  <head>
    <title>Dashboard</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="../src/frontend.tsx"></script>
  </body>
</html>
```

----------------------------------------

TITLE: Error Handling in Bun.serve
DESCRIPTION: Implementation of structured error handling in Bun.serve with automatic error catching in routes and a global error handler for consistent error responses.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
Bun.serve({
  routes: {
    // Errors are caught automatically
    "/api/risky": () => {
      throw new Error("Something went wrong");
    },
  },
  // Global error handler
  error(error) {
    console.error(error);
    return new Response(`Internal Error: ${error.message}`, {
      status: 500,
      headers: {
        "Content-Type": "text/plain",
      },
    });
  },
});
```

----------------------------------------

TITLE: Configuring Trusted Dependencies for Lifecycle Scripts in Bun
DESCRIPTION: This diff shows how to add a package to the trustedDependencies array in package.json, allowing Bun to execute its lifecycle scripts.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/lifecycle.md#2025-04-22_snippet_1

LANGUAGE: json-diff
CODE:
```
  {
    "name": "my-app",
    "version": "1.0.0",
+   "trustedDependencies": ["node-sass"]
  }
```

----------------------------------------

TITLE: Creating TypedArray from ArrayBuffer Slice with Byte Offset and Length (JavaScript/TypeScript)
DESCRIPTION: This code demonstrates creating a typed array (Uint32Array) that views only a specific slice of an ArrayBuffer. By passing both byteOffset and length to the constructor, you can select a valid region of the buffer, avoiding errors triggered by incompatible buffer sizes. Comments illustrate how the underlying bytes map onto array elements. No external dependencies; works in Node.js, Bun, or browsers with ES2015+ support. Provides both the exact byte offset and logical length available from the resulting TypedArray.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_9

LANGUAGE: TypeScript
CODE:
```
// create typed array from ArrayBuffer slice
const buf = new ArrayBuffer(10);
const arr = new Uint32Array(buf, 0, 2);

/*
  buf    _ _ _ _ _ _ _ _ _ _    10 bytes
  arr   [_______,_______]       2 4-byte elements
*/

arr.byteOffset; // 0
arr.length; // 2
```

----------------------------------------

TITLE: Error Handling in HTMLRewriter
DESCRIPTION: Example of proper error handling for HTMLRewriter operations including try-catch block usage.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/html-rewriter.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
try {
  const result = rewriter.transform(input);
  // Process result
} catch (error) {
  console.error("HTMLRewriter error:", error);
}
```

----------------------------------------

TITLE: Automatic Content-Type Detection for Files in Bun HTTP Responses
DESCRIPTION: This snippet shows how Bun automatically detects and sets the appropriate Content-Type header based on the file extension. Different file types result in different content type headers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/stream-file.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
new Response(Bun.file("./package.json")).headers.get("Content-Type");
// => application/json;charset=utf-8

new Response(Bun.file("./test.txt")).headers.get("Content-Type");
// => text/plain;charset=utf-8

new Response(Bun.file("./index.tsx")).headers.get("Content-Type");
// => text/javascript;charset=utf-8

new Response(Bun.file("./img.png")).headers.get("Content-Type");
// => image/png
```

----------------------------------------

TITLE: Configuring Test Root Directory in bunfig.toml
DESCRIPTION: Specify a custom root directory for test discovery by adding a [test] section to your bunfig.toml configuration file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/discovery.md#2025-04-22_snippet_5

LANGUAGE: toml
CODE:
```
[test]
root = "src"  # Only scan for tests in the src directory
```

----------------------------------------

TITLE: Custom object inspection with Bun.inspect.custom in TypeScript
DESCRIPTION: Shows how to customize object inspection by implementing the Bun.inspect.custom symbol method. This allows control over how objects are displayed when using console.log() or Bun.inspect().
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_21

LANGUAGE: typescript
CODE:
```
class Foo {
  [Bun.inspect.custom]() {
    return "foo";
  }
}

const foo = new Foo();
console.log(foo); // => "foo"
```

----------------------------------------

TITLE: Configuring Minification Options in Bun.build using TypeScript
DESCRIPTION: This TypeScript snippet demonstrates configuring minification in `Bun.build`. The `minify` option can be set to `true` to enable all minification types (identifiers, syntax, whitespace). Alternatively, it can be an object to selectively enable or disable specific minification aspects.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/vs-esbuild.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
```ts
await Bun.build({
  entrypoints: ['./index.tsx'],
  // enable all minification
  minify: true

  // granular options
  minify: {
    identifiers: true,
    syntax: true,
    whitespace: true
  }
})
```
```

----------------------------------------

TITLE: Resetting System Time in bun:test
DESCRIPTION: Demonstrates how to reset the system time to the real time by calling setSystemTime without arguments after previously setting a mock time.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/time.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { setSystemTime, expect, test } from "bun:test";

test("it was 2020, for a moment.", () => {
  // Set it to something!
  setSystemTime(new Date("2020-01-01T00:00:00.000Z"));
  expect(new Date().getFullYear()).toBe(2020);

  // reset it!
  setSystemTime();

  expect(new Date().getFullYear()).toBeGreaterThan(2020);
});
```

----------------------------------------

TITLE: Configuring Happy DOM Global Registration
DESCRIPTION: TypeScript setup file that registers Happy DOM's mocked browser APIs in the global scope
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/happy-dom.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { GlobalRegistrator } from "@happy-dom/global-registrator";

GlobalRegistrator.register();
```

----------------------------------------

TITLE: Setting Port Access Permissions for Non-Root Users
DESCRIPTION: Command to grant Bun permission to bind to privileged ports (80, 443) when running as a non-root user.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/systemd.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ sudo setcap CAP_NET_BIND_SERVICE=+eip ~/.bun/bin/bun
```

----------------------------------------

TITLE: Writing Byte Arrays
DESCRIPTION: Demonstrates writing encoded byte arrays to files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-io.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
const encoder = new TextEncoder();
const data = encoder.encode("datadatadata"); // Uint8Array
await Bun.write("output.txt", data);
```

----------------------------------------

TITLE: Using Shebang with Bun Runtime
DESCRIPTION: Commands for forcing bun runtime instead of node when executing scripts with shebangs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/from-npm-install-to-bun-install.md#2025-04-22_snippet_7

LANGUAGE: sh
CODE:
```
# Force using Bun's runtime instead of node
$ bun --bun my-script

# This also works:
$ bun run --bun my-script
```

----------------------------------------

TITLE: Building with ESM Format - Bun JavaScript API - JavaScript
DESCRIPTION: Configures Bun.build to output ES Module-formatted bundles, using explicit format 'esm'. Supports top-level await, import.meta, and is optimal for modern browsers or environments supporting ES Modules. Requires specifying entry file(s) and output directory. Outputs files in ES Module format.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_21

LANGUAGE: JavaScript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './out',
  format: "esm",
})
```

----------------------------------------

TITLE: Configuring test preloads in bunfig.toml
DESCRIPTION: Configuration of test preload files in bunfig.toml. This allows you to specify files that should be automatically preloaded when running tests, without having to specify the --preload flag each time.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/lifecycle.md#2025-04-22_snippet_5

LANGUAGE: toml
CODE:
```
[test]
preload = ["./setup.ts"]
```

----------------------------------------

TITLE: Virtual Module Plugin Example
DESCRIPTION: Demonstrates how to create virtual modules at runtime using Bun's plugin API.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/plugins.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { plugin } from "bun";

plugin({
  name: "my-virtual-module",

  setup(build) {
    build.module(
      // The specifier, which can be any string - except a built-in, such as "buffer"
      "my-transpiled-virtual-module",
      // The callback to run when the module is imported or required for the first time
      () => {
        return {
          contents: "console.log('hello world!')",
          loader: "js",
        };
      },
    );

    build.module("my-object-virtual-module", () => {
      return {
        exports: {
          foo: "bar",
        },
        loader: "object",
      };
    });
  },
});
```

----------------------------------------

TITLE: DNS Prefetch with Fetch Example
DESCRIPTION: Demonstrates a practical usage of dns.prefetch before making an HTTP request with fetch(). By prefetching the DNS entry, the subsequent fetch call can avoid the initial DNS lookup delay.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/dns.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import {dns} from "bun";

dns.prefetch("bun.sh", 443);
//
// ... sometime later ...
await fetch("https://bun.sh");
```

----------------------------------------

TITLE: Executing a Raw SQL Query with Drizzle in Bun (TypeScript)
DESCRIPTION: Demonstrates executing a simple raw SQL query using Drizzle's `sql` template tag helper and the `db.get` method. It imports the initialized `db` instance from `./db.ts` and executes a query to select the string "hello world". The result, typed as an object with a `text` property, is then logged to the console. Depends on the `db` instance from `db.ts`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/drizzle.md#2025-04-22_snippet_2

LANGUAGE: ts
CODE:
```
#index.ts
import { db } from "./db";
import { sql } from "drizzle-orm";

const query = sql`select \"hello world\" as text`;
const result = db.get<{ text: string }>(query);
console.log(result);
```

----------------------------------------

TITLE: Converting Uint8Array to Buffer using Buffer.from() (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates creating a Node.js `Buffer` instance from a `Uint8Array`. It uses the static `Buffer.from()` method, which accepts the `Uint8Array` (`arr`) as input and returns a new `Buffer` (`buf`) containing the same binary data. This conversion is useful when needing access to the additional methods provided by the `Buffer` class compared to a standard `Uint8Array`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/typedarray-to-buffer.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
```ts
const arr: Uint8Array = ...
const buf = Buffer.from(arr);
```
```

----------------------------------------

TITLE: Hot Reload Counter Example in TypeScript
DESCRIPTION: A TypeScript file that demonstrates hot reloading by tracking the number of times it has been reloaded while preserving global state between reloads.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/hot.md#2025-04-22_snippet_6

LANGUAGE: ts
CODE:
```
// make TypeScript happy
declare global {
  var count: number;
}

globalThis.count ??= 0;
console.log(`Reloaded ${globalThis.count} times`);
globalThis.count++;

// prevent `bun run` from exiting
setInterval(function () {}, 1000000);
```

----------------------------------------

TITLE: Async Test Definition
DESCRIPTION: Example of writing an async test using async/await syntax
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/writing.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { expect, test } from "bun:test";

test("2 * 2", async () => {
  const result = await Promise.resolve(2 * 2);
  expect(result).toEqual(4);
});
```

----------------------------------------

TITLE: Verifying Code Signature of a macOS Executable using Shell
DESCRIPTION: This shell command uses the `codesign` utility with the `-vvv --verify` flags to check the validity of the code signature applied to a macOS executable (`./myapp`). Successful verification confirms the executable is properly signed and satisfies its designated requirements.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/executables.md#2025-04-22_snippet_11

LANGUAGE: sh
CODE:
```
$ codesign -vvv --verify ./myapp
./myapp: valid on disk
./myapp: satisfies its Designated Requirement
```

----------------------------------------

TITLE: Installing bun-plugin-svelte with Bun
DESCRIPTION: Command to install bun-plugin-svelte as a development dependency using Bun package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-plugin-svelte/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun add -D bun-plugin-svelte
```

----------------------------------------

TITLE: Converting CookieMap to JSON
DESCRIPTION: How to convert a CookieMap to a serializable format using the toJSON() method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
const json = cookies.toJSON();
```

----------------------------------------

TITLE: Installing Happy DOM Dependencies
DESCRIPTION: Command to install Happy DOM global registrator package as a dev dependency.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/testing-library.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
bun add -D @happy-dom/global-registrator
```

----------------------------------------

TITLE: Converting ReadableStream to DataView in TypeScript
DESCRIPTION: Two approaches for converting a ReadableStream to a DataView: the standard Response-based method and the optimized Bun utility function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_19

LANGUAGE: typescript
CODE:
```
// with Response
const buf = await new Response(stream).arrayBuffer();
new DataView(buf);

// with Bun function
new DataView(Bun.readableStreamToArrayBuffer(stream));
```

----------------------------------------

TITLE: Preparing a Package for Patching with Bun
DESCRIPTION: This snippet demonstrates different ways to prepare a package for patching using the `bun patch` command. It shows how to specify a package by name, version, or path.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/patch.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# you can supply the package name
$ bun patch react

# ...and a precise version in case multiple versions are installed
$ bun patch react@17.0.2

# or the path to the package
$ bun patch node_modules/react
```

----------------------------------------

TITLE: Mixed Import and Require Usage
DESCRIPTION: Demonstrates how Bun allows using both import and require in the same file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_10

LANGUAGE: ts
CODE:
```
import { stuff } from "./my-commonjs.cjs";
import Stuff from "./my-commonjs.cjs";
const myStuff = require("./my-commonjs.cjs");
```

----------------------------------------

TITLE: Resolving paths relative to current locations in TypeScript
DESCRIPTION: Demonstrates techniques for resolving paths relative to the current working directory or current file using Bun.resolveSync(). Shows different approaches for getting context-aware path resolution.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_28

LANGUAGE: typescript
CODE:
```
Bun.resolveSync("./foo.ts", process.cwd());
Bun.resolveSync("./foo.ts", "/path/to/project");
```

----------------------------------------

TITLE: Installing EdgeDB JS Client and Codegen CLI, Creating Seed File (Shell)
DESCRIPTION: This snippet installs the EdgeDB JavaScript client and the `@edgedb/generate` CLI as dev dependencies using Bun, then creates a new `seed.ts` file. Dependencies: Bun. Input: None. Output: Project is set up for interacting with EdgeDB from JavaScript and for generating typed query builders.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/edgedb.md#2025-04-22_snippet_8

LANGUAGE: sh
CODE:
```
bun add edgedb
bun add -D @edgedb/generate
touch seed.ts
```

----------------------------------------

TITLE: Setting Environment Variables via Command Line on Linux/macOS
DESCRIPTION: How to set environment variables from the command line when running Bun applications on Unix-based systems.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
$ FOO=helloworld bun run dev
```

----------------------------------------

TITLE: Running Bun in Hot Reload Mode
DESCRIPTION: Command to run a TypeScript server file with Bun's --hot mode, which performs soft reloads when files change without restarting the process.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/hot.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
$ bun --hot server.ts
```

----------------------------------------

TITLE: Attaching Data to Sockets with Generic Types
DESCRIPTION: Shows how to associate custom data with a socket connection using TypeScript generics. The example attaches a session ID in the open handler and later references it when responding to data events.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/tcp.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
type SocketData = { sessionId: string };

Bun.listen<SocketData>({
  hostname: "localhost",
  port: 8080,
  socket: {
    data(socket, data) {
      socket.write(`${socket.data.sessionId}: ack`);
    },
    open(socket) {
      socket.data = { sessionId: "abcd" };
    },
  },
});
```

----------------------------------------

TITLE: Creating an Unreferenced Worker with Constructor Options
DESCRIPTION: Example of creating a worker that doesn't keep the main process alive by setting ref: false in the constructor options.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/workers.md#2025-04-22_snippet_14

LANGUAGE: typescript
CODE:
```
const worker = new Worker(new URL("worker.ts", import.meta.url).href, {
  ref: false,
});
```

----------------------------------------

TITLE: Installing Git dependencies with Bun
DESCRIPTION: Command to install a dependency from a Git repository using Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/index.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
$ bun install git@github.com:moment/moment.git
```

----------------------------------------

TITLE: Optimized File Operations using Bun.file and Bun.write
DESCRIPTION: Demonstrates Bun's optimized file operations using Bun.file to create a lazily-loaded Blob and Bun.write for efficient file copying using system-specific optimizations like copy_file_range on Linux or clonefile on macOS.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/benchmarks.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
const blob = Bun.file("input.txt");
await Bun.write("output.txt", blob);
```

----------------------------------------

TITLE: JSON Import Example
DESCRIPTION: Example of importing a JSON file in a bundle, which will be parsed and included as a JavaScript object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
import pkg from "./package.json";
pkg.name; // => "my-package"
```

----------------------------------------

TITLE: Child Process IPC Communication
DESCRIPTION: Shows how the child process can communicate with its parent using process.send() and process.on('message'). Compatible with Node.js child_process.fork() API.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/ipc.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
process.send("Hello from child as string");
process.send({ message: "Hello from child as object" });

process.on("message", (message) => {
  // print message from parent
  console.log(message);
});
```

----------------------------------------

TITLE: Using Bun's Bundler in Watch Mode
DESCRIPTION: This command runs Bun's bundler in watch mode, which automatically rebuilds when source files change.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
$ bun build ./index.tsx --outdir ./out --watch
```

----------------------------------------

TITLE: Creating SQLite Database if Not Exists
DESCRIPTION: This example demonstrates how to create a new SQLite database file if it doesn't already exist. It uses the 'create' option in the Database constructor.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { Database } from "bun:sqlite";
const db = new Database("mydb.sqlite", { create: true });
```

----------------------------------------

TITLE: Configuring loader in Bun Build (JavaScript)
DESCRIPTION: Maps file extensions to built-in loader types, customizing how specific file types are processed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_52

LANGUAGE: typescript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './out',
  loader: {
    ".png": "dataurl",
    ".txt": "file",
  },
})
```

----------------------------------------

TITLE: Setting Registry-Specific Authentication in bunfig.toml for Bun
DESCRIPTION: Configures registry authentication using the install.scopes section in bunfig.toml, providing URL, username, and password fields. This is the Bun-specific equivalent to the registry-specific authentication in .npmrc.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/npmrc.md#2025-04-22_snippet_5

LANGUAGE: toml
CODE:
```
[install.scopes]
myorg = { url = "http://localhost:4873/", username = "myusername", password = "$NPM_PASSWORD" }
```

----------------------------------------

TITLE: Initializing TypedArray from ArrayBuffer (JavaScript/TypeScript)
DESCRIPTION: This example shows how to create a typed array, specifically a Uint8Array, from a pre-allocated ArrayBuffer. The first elements are then set, with the rest automatically initialized to zero. The code demonstrates direct construction and assignment, and highlights that all elements start as zero, emphasizing predictable buffer initialization. This approach is dependencies-free and works with any JavaScript or TypeScript environment supporting TypedArrays. Outputs a newly constructed Uint8Array with user-specified and zero-filled elements.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_7

LANGUAGE: TypeScript
CODE:
```
// create typed array from ArrayBuffer
const buf = new ArrayBuffer(10);
const arr = new Uint8Array(buf);

arr[0] = 30;
arr[1] = 60;

// all elements are initialized to zero
console.log(arr); // => Uint8Array(10) [ 30, 60, 0, 0, 0, 0, 0, 0, 0, 0 ];
```

----------------------------------------

TITLE: Sample Output Code After Inline Environment Variables - JavaScript
DESCRIPTION: Represents the result of building with env: 'inline': process.env references have been replaced by actual values from environment variables at build time. Used as a didactic illustration for the environment variable inlining feature.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_37

LANGUAGE: JavaScript
CODE:
```
console.log("bar");
console.log("123");
```

----------------------------------------

TITLE: Installing Bun Dependencies (Ubuntu/Debian)
DESCRIPTION: Installs the necessary dependencies for building Bun on Ubuntu or Debian-based systems using apt. It includes compilers, build tools, and libraries required for the project.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_1

LANGUAGE: bash
CODE:
```
$ sudo apt install curl wget lsb-release software-properties-common cargo ccache cmake git golang libtool ninja-build pkg-config rustc ruby-full xz-utils
```

----------------------------------------

TITLE: Running the Database Seeding Script (Shell Script)
DESCRIPTION: Shows the Bun shell command for running the seed script and the expected console output upon completion. Input: seed.ts script; output: success message on successful seeding.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-drizzle.md#2025-04-22_snippet_11

LANGUAGE: sh
CODE:
```
$ bun run seed.ts\nSeeding completed
```

----------------------------------------

TITLE: Printing All Environment Variables Using Bun CLI
DESCRIPTION: This shell command demonstrates how to print all currently-set environment variables to the command line for debugging purposes using the 'bun --print process.env' command.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/read-env.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
$ bun --print process.env
BAZ=stuff
FOOBAR=aaaaaa
<lots more lines>
```

----------------------------------------

TITLE: Writing File Contents to stdout in Bun with TypeScript
DESCRIPTION: This code reads a file from a specified path and writes its contents to standard output using Bun's file I/O API. It demonstrates how Bun exposes stdout as a BunFile that can be used as a destination for Bun.write(), similar to the Unix 'cat' command functionality.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/cat.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const path = "/path/to/file.txt";
const file = Bun.file(path);
await Bun.write(Bun.stdout, file);
```

----------------------------------------

TITLE: Output After Prefix Based Inlining - JavaScript
DESCRIPTION: Shows the bundle output code where only the environment variable with the public prefix has been inlined, while others remain as process.env references. Demonstrates partial inlining capability.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_42

LANGUAGE: JavaScript
CODE:
```
console.log(process.env.FOO);
console.log("https://acme.com");
console.log(process.env.BAZ);
```

----------------------------------------

TITLE: Configuring Test Preload Scripts in Bun
DESCRIPTION: Specifies scripts to run before executing tests with bun test. Useful for test setup and initialization.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_8

LANGUAGE: toml
CODE:
```
[test]
preload = ["./setup.ts"]
```

----------------------------------------

TITLE: JSX Import Source Pragma Example
DESCRIPTION: Example of using the JSX import source pragma to set the JSX import source on a per-file basis rather than in configuration. The pragma is a special comment that overrides the compiler setting.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_22

LANGUAGE: ts
CODE:
```
// @jsxImportSource preact
```

----------------------------------------

TITLE: HTML with TailwindCSS Import
DESCRIPTION: HTML file example showing how to import TailwindCSS for use with the bun-plugin-tailwind plugin.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/fullstack.md#2025-04-22_snippet_13

LANGUAGE: html
CODE:
```
<!doctype html>
<html>
  <head>
    <title>Home</title>
    <link rel="stylesheet" href="tailwindcss" />
  </head>
  <body>
    <!-- the rest of your HTML... -->
  </body>
</html>
```

----------------------------------------

TITLE: Configuring Bun to Preload Happy DOM with bunfig.toml
DESCRIPTION: TOML configuration for Bun that preloads the Happy DOM setup file before running tests.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/dom.md#2025-04-22_snippet_2

LANGUAGE: toml
CODE:
```
[test]
preload = "./happydom.ts"
```

----------------------------------------

TITLE: Running the Discord Bot using Bun
DESCRIPTION: Shows the command `bun run bot.ts` used to execute the TypeScript bot file (`bot.ts`). It also displays example console output indicating the bot has successfully initialized and logged in.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/discordjs.md#2025-04-22_snippet_5

LANGUAGE: sh
CODE:
```
$ bun run bot.ts
Ready! Logged in as my-bot#1234
```

----------------------------------------

TITLE: Structuring an HTML Entry Point for Single Page Applications
DESCRIPTION: An HTML template for a React or other client-side routing SPA that renders into a root div element. Bun will automatically handle the TypeScript/JSX transpilation and bundling.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/html.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<!doctype html>
<html>
  <head>
    <title>My SPA</title>
    <script src="./app.tsx" type="module"></script>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>
```

----------------------------------------

TITLE: Creating UDP Socket in Bun
DESCRIPTION: Demonstrates how to create and bind a UDP socket with optional port specification using Bun.udpSocket()
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/udp.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const socket = await Bun.udpSocket({})
console.log(socket.port); // assigned by the operating system
```

LANGUAGE: typescript
CODE:
```
const socket = await Bun.udpSocket({
  port: 41234
})
console.log(socket.port); // 41234
```

----------------------------------------

TITLE: Configuring Max Simultaneous HTTP Requests using Environment Variable in Shell
DESCRIPTION: This snippet illustrates how to adjust the maximum number of simultaneous `fetch` requests allowed by Bun using the `BUN_CONFIG_MAX_HTTP_REQUESTS` environment variable. By default, Bun limits this to 256 to improve stability and encourage connection reuse. Setting this variable allows overriding the default limit when running a Bun script. Requires the `bun` CLI and a shell environment.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_26

LANGUAGE: sh
CODE:
```
```sh
$ BUN_CONFIG_MAX_HTTP_REQUESTS=512 bun ./my-script.ts
```
```

----------------------------------------

TITLE: JSX Pretty Printing Example
DESCRIPTION: An example demonstrating Bun's special JSX pretty-printing for console.log, which makes debugging component trees easier by showing a more readable representation of JSX components.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_23

LANGUAGE: tsx
CODE:
```
import { Stack, UserCard } from "./components";

console.log(
  <Stack>
    <UserCard name="Dom" bio="Street racer and Corona lover" />
    <UserCard name="Jakob" bio="Super spy and Dom's secret brother" />
  </Stack>
);
```

----------------------------------------

TITLE: Converting a Uint8Array to a Regular Array in TypeScript
DESCRIPTION: This snippet illustrates converting the contents of an ArrayBuffer (viewed as a Uint8Array) into a regular array of numbers using Array.from(). This is useful when operations require JavaScript Arrays instead of TypedArrays. No dependencies are needed; key parameters are the original buffer and the conversion target. Input is a Uint8Array; output is an array of numbers, with possible performance considerations when converting large buffers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/arraybuffer-to-array.md#2025-04-22_snippet_1

LANGUAGE: TypeScript
CODE:
```
const buf = new ArrayBuffer(64);
const uintArr = new Uint8Array(buf);
const regularArr = Array.from(uintArr);
// number[]
```

----------------------------------------

TITLE: Defining a Basic Elysia HTTP Server (TypeScript)
DESCRIPTION: This TypeScript code initializes a new Elysia application using `new Elysia()`. It defines a GET route for the root path ('/') that returns the string 'Hello Elysia' when requested. Finally, it starts the HTTP server, making it listen for incoming requests on port 8080. A confirmation message is logged to the console indicating the server is running and on which port.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/elysia.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// server.ts
import { Elysia } from 'elysia'

const app = new Elysia()
	.get('/', () => 'Hello Elysia')
	.listen(8080)

console.log(`\ud83e\udd8a Elysia is running at on port ${app.server?.port}...`)
```

----------------------------------------

TITLE: Disabling Content Hashing for Embedded Assets in Bun Build (Shell)
DESCRIPTION: This shell command demonstrates how to compile a Bun application (`./index.ts`) into a standalone executable while preventing the default behavior of adding a content hash to embedded asset filenames. The `--asset-naming="[name].[ext]"` flag ensures original filenames are preserved.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/executables.md#2025-04-22_snippet_7

LANGUAGE: sh
CODE:
```
$ bun build --compile --asset-naming="[name].[ext]" ./index.ts
```

----------------------------------------

TITLE: Running the Remix Development Server with Bun
DESCRIPTION: Demonstrates how to start the Remix development server by running the 'bun run dev' command. This command starts the dev server which runs on http://localhost:3000. Note that Node.js is used under the hood to run the actual server.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/remix.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
$ cd my-app
$ bun run dev
  $ remix dev

  💿  remix dev

  info  building...
  info  built (263ms)
  Remix App Server started at http://localhost:3000 (http://172.20.0.143:3000)
```

----------------------------------------

TITLE: Configuring Bun Install with bunfig.toml
DESCRIPTION: TOML configuration file for bun install showing various settings including scoped packages, registry configuration, installation options, and cache settings.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bun-install.md#2025-04-22_snippet_0

LANGUAGE: toml
CODE:
```
# Using scoped packages with bun install
[install.scopes]

"@mybigcompany" = { token = "123456", url = "https://registry.mybigcompany.com" }
mybigcompany2 = { token = "123456" }
mybigcompany3 = { token = "$npm_config_token" }
mybigcompany4 = { username = "myusername", password = "$npm_config_password", url = "https://registry.yarnpkg.com/" }
mybigcompany5 = "https://username:password@registry.yarnpkg.com/"
mybigcompany6 = "https://:$NPM_CONFIG_TOKEN@registry.yarnpkg.com/"

[install]
registry = "https://registry.yarnpkg.com/"
production = false
saveTextLockfile = false
frozenLockfile = false
dryRun = true
optional = true
dev = true
peer = true
concurrentScripts = 16
globalDir = "~/.bun/install/global"
globalBinDir = "~/.bun/bin"

[install.cache]
dir = "~/.bun/install/cache"
disable = false
disableManifest = false

[install.lockfile]
print = "yarn"
save = true
```

----------------------------------------

TITLE: Using CSS Math Functions
DESCRIPTION: Demonstrates usage of CSS mathematical functions including clamp, round, trigonometric and exponential functions for dynamic styling. Shows how Bun optimizes these expressions at build time.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_22

LANGUAGE: css
CODE:
```
.dynamic-sizing {
  width: clamp(200px, 50%, 800px);
  padding: round(14.8px, 5px);
  transform: rotate(calc(sin(45deg) * 50deg));
  --scale-factor: pow(1.25, 3);
  font-size: calc(16px * var(--scale-factor));
}
```

LANGUAGE: css
CODE:
```
.dynamic-sizing {
  width: clamp(200px, 50%, 800px);
  padding: 15px;
  transform: rotate(35.36deg);
  --scale-factor: 1.953125;
  font-size: calc(16px * var(--scale-factor));
}
```

----------------------------------------

TITLE: Embedding SQLite Database in Bundle
DESCRIPTION: Shows how to embed a SQLite database into the bundle using the embed attribute, useful for standalone executables.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/loaders.md#2025-04-22_snippet_9

LANGUAGE: ts
CODE:
```
// embed the database into the bundle
import db from "./my.db" with { type: "sqlite", embed: "true" };
```

----------------------------------------

TITLE: Converting ReadableStream to Text using Bun
DESCRIPTION: Demonstrates the usage of Bun.readableStreamToText() utility function to convert a ReadableStream instance into a string. The function returns a Promise that resolves to the stream's contents as a string.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/streams/to-string.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const stream = new ReadableStream();
const str = await Bun.readableStreamToText(stream);
```

----------------------------------------

TITLE: Setting Time Zone via Command Line in Bun (Shell)
DESCRIPTION: This command demonstrates how to set the time zone when running a Bun command from the command line. It sets the TZ environment variable before executing the 'bun run dev' command.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/timezone.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
$ TZ=America/New_York bun run dev
```

----------------------------------------

TITLE: Getting All Query Results as Arrays with .values() (TypeScript)
DESCRIPTION: Uses Bun's query.values() to obtain all matching rows as arrays of column values, rather than objects. Demonstrates usage with both named parameters and positional arguments, returning JavaScript arrays with records.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_15

LANGUAGE: TypeScript
CODE:
```
const query = db.query(`select $message;`);
query.values({ $message: "Hello world" });

query.values(2);
// [
//   [ "Iron Man", 2008 ],
//   [ "The Avengers", 2012 ],
//   [ "Ant-Man: Quantumania", 2023 ],
// ]

```

----------------------------------------

TITLE: Replacing global identifiers with --define
DESCRIPTION: This shell command demonstrates how to use --define to replace all instances of 'window' with 'undefined'.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/define-constant.md#2025-04-22_snippet_5

LANGUAGE: sh
CODE:
```
bun --define window="undefined" src/index.ts
```

----------------------------------------

TITLE: Setting Time Zone Programmatically in Bun (TypeScript)
DESCRIPTION: This snippet shows how to programmatically set the default time zone for a Bun process by setting the TZ environment variable. This affects the time zone for the entire process lifetime.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/timezone.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
process.env.TZ = "America/New_York";
```

----------------------------------------

TITLE: Using BuildArtifact with HTTP Responses
DESCRIPTION: Example showing how to use build artifacts directly in HTTP responses with proper content-type headers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_62

LANGUAGE: typescript
CODE:
```
const build = await Bun.build({
  /* */
});

const artifact = build.outputs[0];

// Content-Type header is automatically set
return new Response(artifact);
```

----------------------------------------

TITLE: Updating a Specific Dependency - Bun CLI - Shell
DESCRIPTION: This shell snippet shows how to update a single specified dependency to its latest version that satisfies the version range in the package.json, using the Bun CLI. Requires Bun and a valid package.json. The [package] argument should be replaced with the dependency name (e.g., react, lodash); only the targeted package will be updated.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/update.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
$ bun update [package]
```

----------------------------------------

TITLE: Converting ReadableStream to Uint8Array in TypeScript
DESCRIPTION: Two approaches for converting a ReadableStream to a Uint8Array: the standard Response-based method and the optimized Bun utility function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_17

LANGUAGE: typescript
CODE:
```
// with Response
new Response(stream).bytes();

// with Bun function
Bun.readableStreamToBytes(stream);
```

----------------------------------------

TITLE: Creating a Worker with a Single Preloaded Module
DESCRIPTION: Example of creating a Worker with a single string passed to the preload option instead of an array.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/workers.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
const worker = new Worker("./worker.ts", {
  preload: "./load-sentry.js",
});
```

----------------------------------------

TITLE: TypeScript Experimental Decorators Example
DESCRIPTION: Implementation of a logging decorator using TypeScript's experimental decorators syntax.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/typescript.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// Simple logging decorator
function log(target: any, propertyKey: string, descriptor: PropertyDescriptor) {
  const originalMethod = descriptor.value;

  descriptor.value = function(...args: any[]) {
    console.log(`Calling ${propertyKey} with:`, args);
    return originalMethod.apply(this, args);
  };
}

class Example {
  @log
  greet(name: string) {
    return `Hello ${name}!`;
  }
}

// Usage
const example = new Example();
example.greet("world"); // Logs: "Calling greet with: ['world']"
```

----------------------------------------

TITLE: Configuring banner in Bun Build (CLI)
DESCRIPTION: Command-line interface for adding text at the beginning of bundled files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_55

LANGUAGE: bash
CODE:
```
$ bun build ./index.tsx --outdir ./out --banner "\"use client\";"
```

----------------------------------------

TITLE: Performance-Optimized Handler Pattern in Bun
DESCRIPTION: Demonstrates Bun's approach to socket handlers, which declares handlers once per server instead of per socket to reduce garbage collection pressure and memory usage in performance-sensitive applications.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/tcp.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
Bun.listen({
  hostname: "localhost",
  port: 8080,
  socket: {
    open(socket) {},
    data(socket, data) {},
    drain(socket) {},
    close(socket, error) {},
    error(socket, error) {},
  },
});
```

----------------------------------------

TITLE: Reading Child Process Output in TypeScript
DESCRIPTION: Demonstrates how to read the output of a child process using the stdout property.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
const proc = Bun.spawn(["bun", "--version"]);
const text = await new Response(proc.stdout).text();
console.log(text); // => "$BUN_LATEST_VERSION"
```

----------------------------------------

TITLE: Deleting Cookies with CookieMap.delete()
DESCRIPTION: How to remove cookies from a CookieMap using the delete() method, either by name or with domain and path options.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
// Delete by name using default domain and path.
cookies.delete("session");

// Delete with domain/path options.
cookies.delete({
  name: "session",
  domain: "example.com",
  path: "/admin",
});
```

----------------------------------------

TITLE: Splitting a ReadableStream in TypeScript
DESCRIPTION: A method to split a ReadableStream into two independent streams that can be consumed separately.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_25

LANGUAGE: typescript
CODE:
```
const [a, b] = stream.tee();
```

----------------------------------------

TITLE: Transformed TypeScript code after property replacement
DESCRIPTION: This TypeScript snippet shows the result of the --define transformation, where console.write is replaced with console.log.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/define-constant.md#2025-04-22_snippet_13

LANGUAGE: ts
CODE:
```
console.log("Hello, world!");
```

----------------------------------------

TITLE: Package.json Changes for Optional Dependencies
DESCRIPTION: Diff showing how package.json is modified when adding an optional dependency. The package gets added to the optionalDependencies section with its version number.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/add-optional.md#2025-04-22_snippet_1

LANGUAGE: json-diff
CODE:
```
{
  "optionalDependencies": {
+   "zod": "^3.0.0"
  }
}
```

----------------------------------------

TITLE: Running the Hono Development Server with Bun (Shell)
DESCRIPTION: This shell snippet shows the command to start the development server for a Hono project using Bun. By executing 'bun run dev' within the project directory, the HTTP server will launch and start listening for incoming requests. Requires the Bun runtime, an installed Hono project, and the presence of a 'dev' script in the project's package configuration. Input is the shell command, and the output is the running development server, typically accessible at 'localhost:3000'.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/hono.md#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
$ bun run dev
```

----------------------------------------

TITLE: Setting Cookies with CookieMap.set()
DESCRIPTION: Different ways to set cookies using CookieMap.set() method, including by name-value pair, using options object, or with a Cookie instance.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
// Set by name and value
cookies.set("session", "abc123");

// Set using options object
cookies.set({
  name: "theme",
  value: "dark",
  maxAge: 3600,
  secure: true,
});

// Set using Cookie instance
const cookie = new Bun.Cookie("visited", "true");
cookies.set(cookie);
```

----------------------------------------

TITLE: Configuring Scoped Registries in Bun
DESCRIPTION: Sets different registries for specific npm scopes with various authentication methods. Supports environment variables with $variable notation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_28

LANGUAGE: toml
CODE:
```
[install.scopes]
# registry as string
myorg = "https://username:password@registry.myorg.com/"

# registry with username/password
# you can reference environment variables
myorg = { username = "myusername", password = "$npm_password", url = "https://registry.myorg.com/" }

# registry with token
myorg = { token = "$npm_token", url = "https://registry.myorg.com/" }
```

----------------------------------------

TITLE: Listing Embedded Files in Bun using JavaScript
DESCRIPTION: This snippet demonstrates how to access the list of files embedded within a Bun executable compiled with `--compile`. It imports an image file as an embedded asset and then uses `Bun.embeddedFiles` to access the array of embedded file blobs, logging the name of the first file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/executables.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
import "./icon.png" with { type: "file" };
import { embeddedFiles } from "bun";

console.log(embeddedFiles[0].name); // `icon-${hash}.png`
```

----------------------------------------

TITLE: HTML Imports with Bun.serve for Single Page Applications
DESCRIPTION: Using HTML imports with Bun.serve to integrate client-side single-page applications. Leverages Bun's bundler functionality for a complete frontend development solution.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
import myReactSinglePageApp from "./index.html";

Bun.serve({
  routes: {
    "/": myReactSinglePageApp,
  },
});
```

----------------------------------------

TITLE: Initializing ArrayBuffer and Accessing Data with Uint8Array in TypeScript
DESCRIPTION: This example demonstrates how to create an ArrayBuffer of 64 bytes and view its contents using a Uint8Array. The Uint8Array allows indexed access and shows that the buffer is initialized to zeros. No external dependencies are required. The main parameter is the buffer size; outputs include the array length and default value at index 0.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/arraybuffer-to-array.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
const buf = new ArrayBuffer(64);
const arr = new Uint8Array(buf);
arr.length; // 64
arr[0]; // 0 (instantiated with all zeros)
```

----------------------------------------

TITLE: Enabling WAL Mode for SQLite in Bun
DESCRIPTION: This snippet shows how to enable Write-Ahead Logging (WAL) mode for a SQLite database in Bun. WAL mode can significantly improve performance, especially in concurrent read/write scenarios.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
db.exec("PRAGMA journal_mode = WAL;");
```

----------------------------------------

TITLE: Wildcard Character Glob Pattern
DESCRIPTION: Example of using the '*' glob pattern to match multiple characters except path separators.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/glob.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
const glob = new Glob("*.ts");
glob.match("index.ts"); // => true
glob.match("src/index.ts"); // => false
```

----------------------------------------

TITLE: Enabling Verbose Debugging for Fetch in TypeScript
DESCRIPTION: Demonstrates how to enable verbose debug logging for fetch requests, which prints request and response headers to the terminal for debugging purposes.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_22

LANGUAGE: typescript
CODE:
```
const response = await fetch("http://example.com", {
  verbose: true,
});
```

----------------------------------------

TITLE: Running Shell Scripts with Bun Shell
DESCRIPTION: Demonstrates how to use Bun Shell to run simple shell scripts with a .sh extension. This allows for cross-platform shell scripting using Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_22

LANGUAGE: sh
CODE:
```
echo "Hello World! pwd=$(pwd)"
```

----------------------------------------

TITLE: Inline Snapshot Testing in TypeScript with Bun
DESCRIPTION: Example of inline snapshot testing where the snapshot is stored directly in the test file. Shows how the test file is automatically updated with the snapshot after first run.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/snapshots.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { test, expect } from "bun:test";

test("inline snapshot", () => {
  // First run: snapshot will be inserted automatically
  expect({ hello: "world" }).toMatchInlineSnapshot();

  // After first run, the test file will be updated to:
  // expect({ hello: "world" }).toMatchInlineSnapshot(`
  //   {
  //     "hello": "world",
  //   }
  // `);
});
```

----------------------------------------

TITLE: Adding Bun to PATH on Linux/Mac
DESCRIPTION: This snippet shows how to add Bun to the PATH environment variable on Linux and Mac for different shells.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/installation.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
# add to ~/.zshrc
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
```

LANGUAGE: bash
CODE:
```
# add to ~/.bashrc
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
```

LANGUAGE: sh
CODE:
```
# add to ~/.config/fish/config.fish
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
```

----------------------------------------

TITLE: Creating and Using Mocks in Bun Test Framework (TypeScript)
DESCRIPTION: Demonstrates how to create a mock function using the `mock` function from 'bun:test', and how to use it in a test case with expectations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/mocks.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { test, expect, mock } from "bun:test";
const random = mock(() => Math.random());

test("random", async () => {
  const val = random();
  expect(val).toBeGreaterThan(0);
  expect(random).toHaveBeenCalled();
  expect(random).toHaveBeenCalledTimes(1);
});
```

----------------------------------------

TITLE: Building Production Bundle with Bun
DESCRIPTION: Builds the production-ready application bundle using Vite with Bun runtime
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/vite.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
$ bunx --bun vite build
```

----------------------------------------

TITLE: Module Mocking with mock.module() in Bun Test Framework (TypeScript)
DESCRIPTION: Shows how to use `mock.module()` to override the behavior of a module. This function supports both `import` and `require` syntax for module importing.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/mocks.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import { test, expect, mock } from "bun:test";

mock.module("./module", () => {
  return {
    foo: "bar",
  };
});

test("mock.module", async () => {
  const esm = await import("./module");
  expect(esm.foo).toBe("bar");

  const cjs = require("./module");
  expect(cjs.foo).toBe("bar");
});
```

----------------------------------------

TITLE: Configuring Development Dependencies in Bun Install
DESCRIPTION: Controls whether development dependencies are installed during bun install. Default is true.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_17

LANGUAGE: toml
CODE:
```
[install]
dev = true
```

----------------------------------------

TITLE: Basic database operations with Prisma in Bun
DESCRIPTION: TypeScript code that demonstrates creating a new user and counting users in the database using Prisma Client. The example shows how to perform basic CRUD operations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/prisma.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// create a new user
await prisma.user.create({
  data: {
    name: "John Dough",
    email: `john-${Math.random()}@example.com`,
  },
});

// count the number of users
const count = await prisma.user.count();
console.log(`There are ${count} users in the database.`);
```

----------------------------------------

TITLE: Creating a Worker from a File Object
DESCRIPTION: Example of creating a Worker from a File object with a filename to indicate the file type for proper processing of TypeScript.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/workers.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
const file = new File(
  [
    `
  self.onmessage = (event: MessageEvent) => postMessage(event.data)`,
  ],
  "worker.ts",
);
const url = URL.createObjectURL(file);
const worker = new Worker(url);
```

----------------------------------------

TITLE: Deleting S3 Files with S3Client.delete
DESCRIPTION: Shows how to delete files from S3 using S3Client.delete static method and its alias S3Client.unlink.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_31

LANGUAGE: typescript
CODE:
```
import { S3Client } from "bun";

const credentials = {
  accessKeyId: "your-access-key",
  secretAccessKey: "your-secret-key",
  bucket: "my-bucket",
  // endpoint: "https://s3.us-east-1.amazonaws.com",
};

await S3Client.delete("my-file.txt", credentials);
// equivalent to
// await new S3Client(credentials).delete("my-file.txt");

// S3Client.unlink is alias of S3Client.delete
await S3Client.unlink("my-file.txt", credentials);
```

----------------------------------------

TITLE: Importing SQLite Databases in TypeScript
DESCRIPTION: Demonstrates how to import SQLite databases directly in TypeScript using the sqlite loader. Includes options for embedding the database into the bundle.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/loaders.md#2025-04-22_snippet_8

LANGUAGE: ts
CODE:
```
import db from "./my.db" with { type: "sqlite" };
```

----------------------------------------

TITLE: Building with Plugins - Bun JavaScript API - JavaScript
DESCRIPTION: Illustrates the use of the plugins array in Bun.build for extending the bundler's capabilities. No plugins are included in this stub, developers can specify custom plugins as required. Dependencies: Bun and any desired plugin modules. Plugins can manipulate the bundling process.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_33

LANGUAGE: JavaScript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './out',
  plugins: [/* ... */],
})
```

----------------------------------------

TITLE: Importing a file that uses Bun.main
DESCRIPTION: This example demonstrates importing another TypeScript file (foo.ts) that uses Bun.main. When this file is executed, Bun.main will refer to the path of index.ts, not foo.ts.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/main.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import "./foo.ts";
```

----------------------------------------

TITLE: Installing Dev Dependencies with Bun
DESCRIPTION: Commands for adding development dependencies using the --dev flag or its aliases.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/add.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ bun add --dev @types/react
$ bun add -d @types/react
```

----------------------------------------

TITLE: Configuring Entry, Asset, and Chunk Naming in Bun.build using TypeScript
DESCRIPTION: This TypeScript snippet illustrates two ways to configure output file naming in `Bun.build`. Setting `naming` to a string (`"[name].[ext]"`) acts as a shorthand for `entryNames`. Alternatively, `naming` can be an object allowing granular control over `entry`, `asset`, and `chunk` file naming templates. The `[ext]` placeholder is mandatory in these templates.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/vs-esbuild.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
```ts
Bun.build({
  entrypoints: ["./index.tsx"],
  // when string, this is equivalent to entryNames
  naming: "[name].[ext]",

  // granular naming options
  naming: {
    entry: "[name].[ext]",
    asset: "[name].[ext]",
    chunk: "[name].[ext]",
  },
});
```
```

----------------------------------------

TITLE: Enabling Memory-Saving Mode for Test Runner
DESCRIPTION: Enables the smol memory-saving mode for the test runner to reduce memory usage during test execution.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/configuration.md#2025-04-22_snippet_3

LANGUAGE: toml
CODE:
```
[test]
smol = true  # Reduce memory usage during test runs
```

----------------------------------------

TITLE: Configuring Shell Settings for Bun Run
DESCRIPTION: Settings to specify which shell to use when running package.json scripts via bun run or bun command.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_32

LANGUAGE: toml
CODE:
```
[run]
# default outside of Windows
shell = "system"
```

LANGUAGE: toml
CODE:
```
[run]
# default on Windows
shell = "bun"
```

----------------------------------------

TITLE: Basic HMR Acceptance in Bun
DESCRIPTION: Shows how to indicate that a module can be hot-replaced using the accept() method without arguments. This creates a hot-reloading boundary for all imported modules.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/hmr.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { getCount } from "./foo.ts";

console.log("count is ", getCount());

import.meta.hot.accept();

export function getNegativeCount() {
  return -getCount();
}
```

----------------------------------------

TITLE: Negation Glob Pattern
DESCRIPTION: Example of using the negation operator in glob patterns.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/glob.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
const glob = new Glob("!index.ts");
glob.match("index.ts"); // => false
glob.match("foo.ts"); // => true
```

----------------------------------------

TITLE: EdgeDB Schema File Structure (Text Tree)
DESCRIPTION: This snippet provides an overview of the default EdgeDB schema directory structure created during project initialization. It shows the presence of the main schema file (`default.esdl`) and the migrations directory. Input: None. Output: Text representation for user orientation—no executable code.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/edgedb.md#2025-04-22_snippet_5

LANGUAGE: txt
CODE:
```
dbschema
├── default.esdl
└── migrations
```

----------------------------------------

TITLE: Configuring publicPath in Bun Build (CLI)
DESCRIPTION: Command-line interface for setting a prefix for import paths in bundled code.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_49

LANGUAGE: bash
CODE:
```
$ bun build ./index.tsx --outdir ./out --public-path https://cdn.example.com/
```

----------------------------------------

TITLE: Referencing Tailwind CSS in HTML
DESCRIPTION: HTML example showing how to reference Tailwind CSS in an HTML file using a link tag, which Bun will process using the Tailwind plugin.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/html.md#2025-04-22_snippet_10

LANGUAGE: html
CODE:
```
<!-- Reference TailwindCSS in your HTML -->
<link rel="stylesheet" href="tailwindcss" />
```

----------------------------------------

TITLE: Initializing WebSocket Client with Custom Headers
DESCRIPTION: This snippet shows how to create a WebSocket client and set custom headers in the constructor. This is a Bun-specific extension of the WebSocket standard and will not work in browsers. The headers are included in the WebSocket upgrade request.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/websockets.md#_snippet_14

LANGUAGE: typescript
CODE:
```
const socket = new WebSocket("ws://localhost:3000", {
  headers: {
    // custom headers
  },
});
```

----------------------------------------

TITLE: Building with Target Option - Bun JavaScript API - JavaScript
DESCRIPTION: Demonstrates how to use the Bun.build JavaScript API to specify the build target for the bundle (in this case, 'browser'). This configures module resolution and optimization behaviors for the intended execution environment. The core parameters include entrypoints (source files), outdir (output directory), and target (environment type). Requires Bun to be installed and available as an import; outputs bundled files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_19

LANGUAGE: JavaScript
CODE:
```
await Bun.build({
  entrypoints: ['./index.ts'],
  outdir: './out',
  target: 'browser', // default
})
```

----------------------------------------

TITLE: Installing Specific Versions or Tags with Bun
DESCRIPTION: Shows how to install a specific version or a distribution tag of a package using the @ notation in the bun add command.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/add.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
$ bun add zod@3.0.0
$ bun add zod@next
```

----------------------------------------

TITLE: Importing JSON and TOML Files in TypeScript
DESCRIPTION: Shows how to directly import JSON and TOML files in TypeScript using Bun. The contents are loaded and returned as JavaScript objects.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/loaders.md#2025-04-22_snippet_4

LANGUAGE: ts
CODE:
```
import pkg from "./package.json";
import data from "./data.toml";
```

----------------------------------------

TITLE: Inspecting CSS Module Class Name Mappings - TSX
DESCRIPTION: This snippet shows how to log the objects returned when importing CSS module files into a TSX/JSX module. The output illustrates mapping from original class names to their unique identifier strings to avoid collisions. Requires Bun bundler, TypeScript (or JavaScript), and appropriate CSS module imports. Input: module import statements; output: objects containing unique class name mappings. There are no special limitations, but meaningful output depends upon the CSS file content and correct setup.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css_modules.md#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
import styles from "./styles.module.css";
import otherStyles from "./other-styles.module.css";

console.log(styles);
console.log(otherStyles);

```

----------------------------------------

TITLE: Installing Dependencies for All Workspaces in Bun
DESCRIPTION: This shell command installs dependencies for all workspaces in a Bun monorepo project. It should be run from the project root after adding or updating dependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/workspaces.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
$ bun install
```

----------------------------------------

TITLE: Custom Plugin Configuration in bunfig.toml
DESCRIPTION: Configuration for adding custom bundler plugins to Bun.serve() using the bunfig.toml file, referencing a local plugin implementation file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/fullstack.md#2025-04-22_snippet_15

LANGUAGE: toml
CODE:
```
[serve.static]
plugins = ["./my-plugin-implementation.ts"]
```

----------------------------------------

TITLE: Column Selection for Insertion in TypeScript
DESCRIPTION: Shows how to selectively insert specific columns from an object using the sql helper function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const user = {
  name: "Alice",
  email: "alice@example.com",
  age: 25,
};

await sql`INSERT INTO users ${sql(user, "name", "email")}`;
```

----------------------------------------

TITLE: Trusting Specific Dependencies with Bun
DESCRIPTION: Executes the lifecycle scripts for the specified untrusted dependency names and adds them to the `trustedDependencies` array in the project's `package.json`. The `--all` flag can be used to trust all currently untrusted dependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/pm.md#2025-04-22_snippet_13

LANGUAGE: bash
CODE:
```
$ bun pm trust <names>
```

----------------------------------------

TITLE: Nested Selectors Compiled Output with Bun Bundler - CSS
DESCRIPTION: Presents the browser-ready, compiled output for nested selectors as generated by Bun's CSS bundler. No dependencies aside from the Bun toolchain. Translates nested selectors to explicit descendant selectors, preserving styling intent for universal browser support.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
/* Compiled output */\n.card {\n  background: white;\n  border-radius: 4px;\n}\n\n.card .title {\n  font-size: 1.2rem;\n  font-weight: bold;\n}\n\n.card .content {\n  padding: 1rem;\n}
```

----------------------------------------

TITLE: Initializing a SolidStart Project with Bun
DESCRIPTION: This command uses Bun's create command to initialize a new SolidStart project. It prompts for template selection, server-side rendering preference, and TypeScript usage options.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/solidstart.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun create solid my-app
create-solid version 0.2.31

Welcome to the SolidStart setup wizard!

There are definitely bugs and some feature might not work yet.
If you encounter an issue, have a look at
https://github.com/solidjs/solid-start/issues and open a new one,
if it is not already tracked.

✔ Which template do you want to use? › todomvc
✔ Server Side Rendering? … yes
✔ Use TypeScript? … yes
cloned solidjs/solid-start#main to /path/to/my-app/.solid-start
✔ Copied project files
```

----------------------------------------

TITLE: Pretty-printing BuildArtifact Objects
DESCRIPTION: Example of how Bun provides a neat debug representation of build artifacts when logged to the console.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_63

LANGUAGE: typescript
CODE:
```
// build.ts
const build = await Bun.build({/* */});

const artifact = build.outputs[0];
console.log(artifact);
```

----------------------------------------

TITLE: Filtering Tests by Name Pattern
DESCRIPTION: Example of using the -t flag to filter and run only specific tests matching a name pattern.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/run-tests.md#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
$ bun test -t add
bun test v$BUN_LATEST_VERSION (9c68abdb)

test.test.js:
✓ add [1.79ms]
» multiply

test2.test.js:
✓ add [2.30ms]
» multiply

test3.test.js:
✓ add [0.32ms]
» multiply

 3 pass
 3 skip
 0 fail
 3 expect() calls
Ran 6 tests across 3 files. [59.00ms]
```

----------------------------------------

TITLE: Prefetching DNS Entries in Bun
DESCRIPTION: Shows how to use the experimental dns.prefetch API to prefetch DNS entries for improved performance. This is useful when you know you'll need to connect to a host in the near future.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/dns.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import {dns} from "bun";

dns.prefetch("my.database-host.com", 5432);
```

----------------------------------------

TITLE: Scoping hooks to a test file in Bun
DESCRIPTION: Example of defining beforeAll at the file level to run setup once before all tests in the file. This pattern allows setup to be applied to all tests in the file, including those in different describe blocks.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/lifecycle.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { describe, beforeAll } from "bun:test";

beforeAll(() => {
  // setup
});

describe("test group", () => {
  // tests...
});
```

----------------------------------------

TITLE: Creating a Worker from a Blob URL
DESCRIPTION: Example of creating a Worker from a Blob URL, which allows creating workers from string content instead of files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/workers.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
const blob = new Blob(
  [
    `
  self.onmessage = (event: MessageEvent) => postMessage(event.data)`,
  ],
  {
    type: "application/typescript",
  },
);
const url = URL.createObjectURL(blob);
const worker = new Worker(url);
```

----------------------------------------

TITLE: Ending FileSink Operations in TypeScript
DESCRIPTION: This snippet demonstrates how to properly end FileSink operations by calling the .end() method. This method auto-flushes the buffer and closes the file, ensuring all data is written.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/filesink.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
writer.end();
```

----------------------------------------

TITLE: Workspace Configuration in package.json
DESCRIPTION: JSON configuration for setting up workspaces in a project's package.json file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/from-npm-install-to-bun-install.md#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
{
  "name": "my-app",
  "workspaces": ["packages/*", "apps/*"]
}
```

----------------------------------------

TITLE: Importing and Using 'bun' Module Types in TypeScript
DESCRIPTION: This snippet shows how to import and use types, interfaces, and functions declared in the 'bun' module. It demonstrates both importing from 'bun' and using the global Bun object.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-types/authoring.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { type MyInterface, type MyType, myFunction } from "bun";

const myInterface: MyInterface = {};
const myType: MyType = "cool";
myFunction();
```

LANGUAGE: typescript
CODE:
```
const myInterface: Bun.MyInterface = {};
const myType: Bun.MyType = "cool";
Bun.myFunction();
```

----------------------------------------

TITLE: Executing Schema-Modifying SQLite Queries in Bun
DESCRIPTION: This example shows how to execute schema-modifying queries in SQLite using Bun. It demonstrates the use of the run() method and how to access the lastInsertRowid and changes properties.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_12

LANGUAGE: typescript
CODE:
```
const query = db.query(`create table foo;`);
query.run();
// {
//   lastInsertRowid: 0,
//   changes: 0,
// }
```

----------------------------------------

TITLE: Document-Level Handlers in HTMLRewriter
DESCRIPTION: Example of document-level event handlers including doctype, text, comments, and document end handling.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/html-rewriter.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
rewriter.onDocument({
  // Handle doctype
  doctype(doctype) {
    console.log(doctype.name); // "html"
    console.log(doctype.publicId); // public identifier if present
    console.log(doctype.systemId); // system identifier if present
  },
  // Handle text nodes
  text(text) {
    console.log(text.text);
  },
  // Handle comments
  comments(comment) {
    console.log(comment.text);
  },
  // Handle document end
  end(end) {
    end.append("<!-- Footer -->", { html: true });
  },
});
```

----------------------------------------

TITLE: Package Import Example
DESCRIPTION: Shows how to import a package from node_modules using a bare specifier.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_11

LANGUAGE: ts
CODE:
```
import { stuff } from "foo";
```

----------------------------------------

TITLE: Cross-platform Environment Variables in package.json Scripts
DESCRIPTION: Example of setting environment variables in package.json scripts, which automatically uses bun shell for cross-platform compatibility.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_4

LANGUAGE: json
CODE:
```
"scripts": {
  "dev": "NODE_ENV=development bun --watch app.ts",
}
```

----------------------------------------

TITLE: Importing SQLite Databases in TypeScript
DESCRIPTION: Illustrates how to directly import SQLite databases in TypeScript using Bun. The database is automatically loaded and a Database object is returned.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/loaders.md#2025-04-22_snippet_6

LANGUAGE: ts
CODE:
```
import db from "./my.db" with { type: "sqlite" };
console.log(db.query("select * from users LIMIT 1").get());
```

----------------------------------------

TITLE: TypeScript Decorator Metadata Example
DESCRIPTION: Example showing the usage of decorator metadata with reflect-metadata in TypeScript.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/typescript.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import "reflect-metadata";

class User {
  id: number;
  name: string;
}

function Injectable(target: Function) {
  // Get metadata about constructor parameters
  const params = Reflect.getMetadata("design:paramtypes", target);
  console.log("Dependencies:", params); // [User]
}

@Injectable
class UserService {
  constructor(private user: User) {}
}

// Creates new UserService instance with dependencies
const container = new UserService(new User());
```

----------------------------------------

TITLE: Override Loader Type Example
DESCRIPTION: Shows how to override the default loader when transforming code
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/transpiler.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
transpiler.transformSync("<div>hi!</div>", "tsx");
```

----------------------------------------

TITLE: CommonJS Module Example
DESCRIPTION: Example of a CommonJS module that imports another module and exports it.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_8

LANGUAGE: ts
CODE:
```
// my-commonjs.cjs
const stuff = require("./stuff");
module.exports = { stuff };
```

----------------------------------------

TITLE: Creating Response Objects from S3Files for Redirects
DESCRIPTION: Shows how to create a Response object from an S3File to automatically redirect users to a presigned URL. This avoids downloading the file to the server and then sending it to the client.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
const response = new Response(s3file);
console.log(response);
```

----------------------------------------

TITLE: Basic package.json without overrides in Bun
DESCRIPTION: A basic package.json file showing a project with a single dependency on "foo". This is the starting point before adding any overrides or resolutions for metadependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/overrides.md#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{
  "name": "my-app",
  "dependencies": {
    "foo": "^2.0.0"
  }
}
```

----------------------------------------

TITLE: Setting Basic WebSocket Context Data in Bun
DESCRIPTION: This snippet demonstrates how to set basic contextual data (a socketId) on a WebSocket connection during the upgrade process using `Bun.serve()` and `server.upgrade()`. The data is then accessed within the `message` handler of the WebSocket to log the received message and the socket ID.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/websocket/context.md#_snippet_0

LANGUAGE: typescript
CODE:
```
Bun.serve<{ socketId: number }>({
  fetch(req, server) {
    const success = server.upgrade(req, {
      data: {
        socketId: Math.random(),
      },
    });
    if (success) return undefined;

    // handle HTTP request normally
    // ...
  },
  websocket: {
    // define websocket handlers
    async message(ws, message) {
      // the contextual data is available as the `data` property
      // on the WebSocket instance
      console.log(`Received ${message} from ${ws.data.socketId}}`);
    },
  },
});
```

----------------------------------------

TITLE: Checking test exit code when coverage threshold is not met
DESCRIPTION: Shell commands showing how to check the exit code of bun test, which will be non-zero (1) if coverage thresholds are not met.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/coverage-threshold.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
$ bun test --coverage
<test output>
$ echo $?
1 # this is the exit code of the previous command
```

----------------------------------------

TITLE: TOML Conversion in Bundler
DESCRIPTION: Demonstrates how a TOML file gets converted when used as an entrypoint in the bundler. The TOML is transformed into a JavaScript module with a default export.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/loaders.md#2025-04-22_snippet_4

LANGUAGE: toml
CODE:
```
name = "John Doe"
age = 35
email = "johndoe@example.com"
```

LANGUAGE: js
CODE:
```
export default {
  name: "John Doe",
  age: 35,
  email: "johndoe@example.com"
}
```

----------------------------------------

TITLE: Using Bun in a GitHub Actions Workflow
DESCRIPTION: Example GitHub Actions workflow demonstrating how to use the official `oven-sh/setup-bun` action to install Bun in a CI/CD pipeline. The subsequent steps use `bun install` to install dependencies and `bun run build` to execute a build script.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/install.md#2025-04-22_snippet_16

LANGUAGE: yaml
CODE:
```
#.github/workflows/release.yml
name: bun-types
jobs:
  build:
    name: build-app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install bun
        uses: oven-sh/setup-bun@v2
      - name: Install dependencies
        run: bun install
      - name: Build app
        run: bun run build
```

----------------------------------------

TITLE: Using expect.assertions() in TypeScript
DESCRIPTION: Demonstrates how to use expect.assertions() to verify that a specific number of assertions are called during a test. This helps ensure all assertions run, especially in complex async code with multiple code paths.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/writing.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
test("exactly two assertions", () => {
  expect.assertions(2); // Will fail if not exactly 2 assertions are called

  expect(1 + 1).toBe(2);
  expect("hello").toContain("ell");
});
```

----------------------------------------

TITLE: Accessing Current Directory Path with import.meta.dir in Bun TypeScript
DESCRIPTION: This snippet demonstrates how to get the directory path of the current file using Bun's import.meta.dir property. The property returns the directory path of the file where it's used, without the filename itself.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/import-meta-dir.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import.meta.dir; // => "/a/b"
```

----------------------------------------

TITLE: Running Bun Test with Coverage Reporting via CLI
DESCRIPTION: This example shows how to run Bun's test runner with coverage reporting enabled using the --coverage flag. The output displays function and line coverage percentages for all files, along with line numbers of uncovered code.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/coverage.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
$ bun test --coverage
-------------|---------|---------|-------------------
File         | % Funcs | % Lines | Uncovered Line #s
-------------|---------|---------|-------------------
All files    |   38.89 |   42.11 |
 index-0.ts  |   33.33 |   36.84 | 10-15,19-24
 index-1.ts  |   33.33 |   36.84 | 10-15,19-24
 index-10.ts |   33.33 |   36.84 | 10-15,19-24
 index-2.ts  |   33.33 |   36.84 | 10-15,19-24
 index-3.ts  |   33.33 |   36.84 | 10-15,19-24
 index-4.ts  |   33.33 |   36.84 | 10-15,19-24
 index-5.ts  |   33.33 |   36.84 | 10-15,19-24
 index-6.ts  |   33.33 |   36.84 | 10-15,19-24
 index-7.ts  |   33.33 |   36.84 | 10-15,19-24
 index-8.ts  |   33.33 |   36.84 | 10-15,19-24
 index-9.ts  |   33.33 |   36.84 | 10-15,19-24
 index.ts    |  100.00 |  100.00 |
-------------|---------|---------|-------------------
```

----------------------------------------

TITLE: Linking a Registered Package into Another Project - Bun CLI - Bash
DESCRIPTION: This snippet shows how to link a previously registered local package into another project's node_modules using the Bun CLI. After changing to the target project directory, 'bun link cool-pkg' creates a symlink to the registered package. Dependencies: Bun CLI, previously registered package. Key parameter: package name; Input: Target project directory; Output: symlink in node_modules, making the local package available.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/link.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ cd /path/to/my-app\n$ bun link cool-pkg
```

----------------------------------------

TITLE: Listing Installed Packages
DESCRIPTION: Commands for listing installed packages, including options for viewing all dependencies or just top-level ones.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/from-npm-install-to-bun-install.md#2025-04-22_snippet_5

LANGUAGE: sh
CODE:
```
# List top-level installed packages:
$ bun pm ls
my-pkg node_modules (781)
├── @types/node@20.16.5
├── @types/react@18.3.8
├── @types/react-dom@18.3.0
├── eslint@8.57.1
├── eslint-config-next@14.2.8

# List all installed packages:
$ bun pm ls -a
my-pkg node_modules
├── @alloc/quick-lru@5.2.0
├── @isaacs/cliui@8.0.2
│   └── strip-ansi@7.1.0
│       └── ansi-regex@6.1.0
├── @jridgewell/gen-mapping@0.3.5
├── @jridgewell/resolve-uri@3.1.2
...
```

----------------------------------------

TITLE: Using Symbol.asyncIterator with Response
DESCRIPTION: Shows how to use Symbol.asyncIterator directly to create a Response with a ReadableStream. This provides an alternative syntax for creating stream-based responses.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/streams.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
const response = new Response({
  [Symbol.asyncIterator]: async function* () {
    yield "hello";
    yield "world";
  },
});

await response.text(); // "helloworld"
```

----------------------------------------

TITLE: Directory Structure Example After Code Splitting - Text
DESCRIPTION: Displays the generated directory structure after a build with code splitting is enabled, including entrypoints and generated chunk files. Useful for understanding the output structure and file naming conventions (e.g., content hash in chunk file names).
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_32

LANGUAGE: Text
CODE:
```
.
├── entry-a.tsx
├── entry-b.tsx
├── shared.tsx
└── out
    ├── entry-a.js
    ├── entry-b.js
    └── chunk-2fce6291bf86559d.js

```

----------------------------------------

TITLE: Defining Bun Build API Interfaces in TypeScript
DESCRIPTION: This code snippet defines the main interfaces and types for the Bun build API, including BuildConfig, BuildOutput, and related structures. It covers various build options such as entrypoints, output format, code splitting, and minification.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_70

LANGUAGE: typescript
CODE:
```
interface Bun {
  build(options: BuildOptions): Promise<BuildOutput>;
}

interface BuildConfig {
  entrypoints: string[]; // list of file path
  outdir?: string; // output directory
  target?: Target; // default: "browser"
  /**
   * Output module format. Top-level await is only supported for `"esm"`.
   *
   * Can be:
   * - `"esm"`
   * - `"cjs"` (**experimental**)
   * - `"iife"` (**experimental**)
   *
   * @default "esm"
   */
  format?: "esm" | "cjs" | "iife";
  naming?:
    | string
    | {
        chunk?: string;
        entry?: string;
        asset?: string;
      };
  root?: string; // project root
  splitting?: boolean; // default true, enable code splitting
  plugins?: BunPlugin[];
  external?: string[];
  packages?: "bundle" | "external";
  publicPath?: string;
  define?: Record<string, string>;
  loader?: { [k in string]: Loader };
  sourcemap?: "none" | "linked" | "inline" | "external" | "linked" | boolean; // default: "none", true -> "inline"
  /**
   * package.json `exports` conditions used when resolving imports
   *
   * Equivalent to `--conditions` in `bun build` or `bun run`.
   *
   * https://nodejs.org/api/packages.html#exports
   */
  conditions?: Array<string> | string;

  /**
   * Controls how environment variables are handled during bundling.
   *
   * Can be one of:
   * - `"inline"`: Injects environment variables into the bundled output by converting `process.env.FOO`
   *   references to string literals containing the actual environment variable values
   * - `"disable"`: Disables environment variable injection entirely
   * - A string ending in `*`: Inlines environment variables that match the given prefix.
   *   For example, `"MY_PUBLIC_*"` will only include env vars starting with "MY_PUBLIC_"
   */
  env?: "inline" | "disable" | `${string}*`;
  minify?:
    | boolean
    | {
        whitespace?: boolean;
        syntax?: boolean;
        identifiers?: boolean;
      };
  /**
   * Ignore dead code elimination/tree-shaking annotations such as @__PURE__ and package.json
   * "sideEffects" fields. This should only be used as a temporary workaround for incorrect
   * annotations in libraries.
   */
  ignoreDCEAnnotations?: boolean;
  /**
   * Force emitting @__PURE__ annotations even if minify.whitespace is true.
   */
  emitDCEAnnotations?: boolean;

  /**
   * Generate bytecode for the output. This can dramatically improve cold
   * start times, but will make the final output larger and slightly increase
   * memory usage.
   *
   * Bytecode is currently only supported for CommonJS (`format: "cjs"`).
   *
   * Must be `target: "bun"`
   * @default false
   */
  bytecode?: boolean;
  /**
   * Add a banner to the bundled code such as "use client";
   */
  banner?: string;
  /**
   * Add a footer to the bundled code such as a comment block like
   *
   * `// made with bun!`
   */
  footer?: string;

  /**
   * Drop function calls to matching property accesses.
   */
  drop?: string[];

  /**
   * When set to `true`, the returned promise rejects with an AggregateError when a build failure happens.
   * When set to `false`, the `success` property of the returned object will be `false` when a build failure happens.
   *
   * This defaults to `false` in Bun 1.1 and will change to `true` in Bun 1.2
   * as most usage of `Bun.build` forgets to check for errors.
   */
  throw?: boolean;
}

interface BuildOutput {
  outputs: BuildArtifact[];
  success: boolean;
  logs: Array<BuildMessage | ResolveMessage>;
}

interface BuildArtifact extends Blob {
  path: string;
  loader: Loader;
  hash: string | null;
  kind: "entry-point" | "chunk" | "asset" | "sourcemap" | "bytecode";
  sourcemap: BuildArtifact | null;
}

type Loader =
  | "js"
  | "jsx"
  | "ts"
  | "tsx"
  | "json"
  | "toml"
  | "file"
  | "napi"
  | "wasm"
  | "text";

interface BuildOutput {
  outputs: BuildArtifact[];
  success: boolean;
  logs: Array<BuildMessage | ResolveMessage>;
}

declare class ResolveMessage {
  readonly name: "ResolveMessage";
  readonly position: Position | null;
  readonly code: string;
  readonly message: string;
  readonly referrer: string;
  readonly specifier: string;
  readonly importKind:
    | "entry_point"
    | "stmt"
    | "require"
    | "import"
    | "dynamic"
    | "require_resolve"
    | "at"
    | "at_conditional"
    | "url"
    | "internal";
  readonly level: "error" | "warning" | "info" | "debug" | "verbose";

  toString(): string;
}
```

----------------------------------------

TITLE: Converting Blob to ReadableStream using Bun in TypeScript
DESCRIPTION: This snippet demonstrates how to instantiate a Blob from string data and convert it to a ReadableStream by calling the .stream() method. It requires the Blob class from the Web API and is compatible with Bun and modern browser environments supporting Blobs. The variable blob stores the binary data, and the returned stream can be consumed for reading or processing data as a stream. The function returns a Promise resolving to a ReadableStream of the Blob's contents. Limitations may include environment compatibility if Blob or ReadableStream are not available.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/blob-to-stream.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
const blob = new Blob(["hello world"]);
const stream = await blob.stream();
```

----------------------------------------

TITLE: Installing Bun on Windows using npm
DESCRIPTION: This snippet demonstrates how to install Bun globally on Windows using npm.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/installation.md#2025-04-22_snippet_5

LANGUAGE: powershell
CODE:
```
> npm install -g bun # the last `npm` command you'll ever need
```

----------------------------------------

TITLE: Configuring Dependencies in Workspace package.json
DESCRIPTION: Shows how to configure dependencies in a workspace's package.json file, referencing other packages in the monorepo.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/workspaces.md#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
{
  "name": "pkg-a",
  "version": "1.0.0",
  "dependencies": {
    "pkg-b": "workspace:*"
  }
}
```

----------------------------------------

TITLE: Finding Executable Paths with Bun.which()
DESCRIPTION: Demonstrates how to use Bun.which() to find the path of an executable, with options for custom PATH and working directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
const ls = Bun.which("ls");
console.log(ls); // "/usr/bin/ls"
```

LANGUAGE: typescript
CODE:
```
const ls = Bun.which("ls", {
  PATH: "/usr/local/bin:/usr/bin:/bin",
});
console.log(ls); // "/usr/bin/ls"
```

LANGUAGE: typescript
CODE:
```
const ls = Bun.which("ls", {
  cwd: "/tmp",
  PATH: "",
});

console.log(ls); // null
```

----------------------------------------

TITLE: Configuring Tailwind CSS Plugin in bunfig.toml
DESCRIPTION: TOML configuration for adding the Tailwind CSS plugin to Bun's static server configuration in the bunfig.toml file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/html.md#2025-04-22_snippet_9

LANGUAGE: toml
CODE:
```
[serve.static]
plugins = ["bun-plugin-tailwind"]
```

----------------------------------------

TITLE: Implementing Non-HTTP Event Handler for Bun Lambda Function
DESCRIPTION: Example of a Bun Lambda function that handles non-HTTP events (e.g., S3, SQS, EventBridge), demonstrating how to access the event payload from the Request body.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-lambda/README.md#2025-04-22_snippet_2

LANGUAGE: ts
CODE:
```
export default {
  async fetch(request: Request): Promise<Response> {
    const event = await request.json();
    // ...
    return new Response();
  },
};
```

----------------------------------------

TITLE: Compiling and Running C Code from JavaScript
DESCRIPTION: Example of importing a C function using the cc function from bun:ffi and calling it from JavaScript.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cc.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
import { cc } from "bun:ffi";
import source from "./hello.c" with { type: "file" };

const {
  symbols: { hello },
} = cc({
  source,
  symbols: {
    hello: {
      args: [],
      returns: "int",
    },
  },
});

console.log("What is the answer to the universe?", hello());
```

----------------------------------------

TITLE: Using Headers Object with Fetch in TypeScript
DESCRIPTION: Demonstrates how to use the Headers object to set HTTP headers for a fetch request, providing an alternative to using a plain object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
const headers = new Headers();
headers.append("X-Custom-Header", "value");

const response = await fetch("http://example.com", {
  headers,
});
```

----------------------------------------

TITLE: Finding macOS code signing identities
DESCRIPTION: Lists all available code signing identities on macOS using the security command. These identities are required for signing applications to bypass Gatekeeper warnings.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/codesign-macos-executable.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
$ security find-identity -v -p codesigning
1. XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX "Developer ID Application: Your Name (ZZZZZZZZZZ)"
   1 valid identities found
```

----------------------------------------

TITLE: Configuring Exact Versions in Bun Install
DESCRIPTION: Controls whether exact versions are used in package.json instead of caret ranges. Default is false.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_20

LANGUAGE: toml
CODE:
```
[install]
exact = false
```

----------------------------------------

TITLE: Running the WebSocket Chat Client
DESCRIPTION: Command to run the client script that connects multiple clients to the WebSocket server. The script works in any of the three JavaScript runtimes (Bun, Node.js, or Deno).
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/websocket-server/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
node ./chat-client.mjs
```

----------------------------------------

TITLE: Running a Bun TypeScript Script and Expected Output (Shell)
DESCRIPTION: Executes the `index.ts` script using the `bun run` command. The expected output shows the result of the SQL query performed in `index.ts`, confirming the database connection and query execution work correctly. Assumes `index.ts` and `db.ts` exist as previously defined.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/drizzle.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
$ bun run index.ts
{
  text: "hello world"
}
```

----------------------------------------

TITLE: Implementing Counter Component with React Hooks
DESCRIPTION: A React functional component that implements a counter with increment/decrement buttons. Uses useState hook to manage state and includes debug logging. The counter changes by steps of 2 and renders with styling classes.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/integration/next-pages/src/Counter2.txt#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { useState } from "react";

export function Counter() {
  console.log('counter b loaded');

  const [count, setCount] = useState(0);

  function increment() {
    setCount(count + 2);
  }

  function decrement() {
    setCount(count - 2);
  }

  return (
    <div id="counter-fixture" className="rounded-br-full">
      <p>Count B: {count}</p>
      <button className="inc" onClick={increment}>
        +
      </button>
      <button className="dec" onClick={decrement}>
        -
      </button>
    </div>
  );
}
```

----------------------------------------

TITLE: Running Express Server in Bun Runtime
DESCRIPTION: Command to start the Express.js server using the Bun JavaScript runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/express/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
bun ./express.mjs
```

----------------------------------------

TITLE: Creating a systemd Service File
DESCRIPTION: Commands to navigate to the systemd directory and create a new service file for a Bun application.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/systemd.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ cd /lib/systemd/system
$ touch my-app.service
```

----------------------------------------

TITLE: Using Unix Domain Sockets with Fetch in TypeScript
DESCRIPTION: Demonstrates how to use a Unix domain socket for a fetch request, which is useful for communicating with local services without using TCP/IP.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_12

LANGUAGE: typescript
CODE:
```
const response = await fetch("https://hostname/a/path", {
  unix: "/var/run/path/to/unix.sock",
  method: "POST",
  body: JSON.stringify({ message: "Hello from Bun!" }),
  headers: {
    "Content-Type": "application/json",
  },
});
```

----------------------------------------

TITLE: Creating a Partial Typed Array View (Slice) from an ArrayBuffer in TypeScript
DESCRIPTION: Illustrates creating a Uint8Array that views only a specific portion of the underlying ArrayBuffer. It initializes a 64-byte buffer and creates a view covering only the first 16 bytes by specifying the byte offset (0) and length (16) in the constructor.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/arraybuffer-to-typedarray.md#2025-04-22_snippet_2

LANGUAGE: ts
CODE:
```
const buffer = new ArrayBuffer(64);
const arr = new Uint8Array(buffer, 0, 16); // view first 16 bytes
```

----------------------------------------

TITLE: Command Line Output for Select Query Returning Authors (Shell Script)
DESCRIPTION: Displays output for running the select query script, showing the resulting array of author objects with their properties. Assumes data previously inserted with seed.ts.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-drizzle.md#2025-04-22_snippet_13

LANGUAGE: sh
CODE:
```
$ bun run index.ts\n[\n  {\n    id: 1,\n    name: "J.R.R. Tolkien",\n    bio: "The creator of Middle-earth and author of The Lord of the Rings.",\n    createdAt: 2024-05-11T10:28:46.029Z,\n  }, {\n    id: 2,\n    name: "George R.R. Martin",\n    bio: "The author of the epic fantasy series A Song of Ice and Fire.",\n    createdAt: 2024-05-11T10:28:46.029Z,\n  }, {\n    id: 3,\n    name: "J.K. Rowling",\n    bio: "The creator of the Harry Potter series.",\n    createdAt: 2024-05-11T10:28:46.029Z,\n  }\n]
```

----------------------------------------

TITLE: Using the Shorthand Bun Command for Package Script Execution
DESCRIPTION: Illustrates running a `package.json` script (`dev`) using the shorter `bun dev` command as an alternative to `bun run dev`. This shorthand works unless a built-in Bun command shares the same name (e.g., `bun install`), in which case the explicit `bun run <script>` syntax is required.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/run.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
$ bun run dev
```

----------------------------------------

TITLE: Install Bun Natively
DESCRIPTION: This command downloads and executes the Bun installation script directly from the bun.sh website.  It uses curl to fetch the script and bash to execute it, installing Bun on the system.  This is the recommended installation method.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_5

LANGUAGE: bash
CODE:
```
$ curl -fsSL https://bun.sh/install | bash
```

----------------------------------------

TITLE: Custom Argument Processing in Commander.js
DESCRIPTION: Shows how to implement custom processing for command arguments. The example defines a function to parse integers that gets applied to the arguments before they reach the action handler.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_17

LANGUAGE: javascript
CODE:
```
program
  .command('add')
  .argument('<first>', 'integer argument', myParseInt)
  .argument('[second]', 'integer argument', myParseInt, 1000)
  .action((first, second) => {
    console.log(`${first} + ${second} = ${first + second}`);
  })
;
```

----------------------------------------

TITLE: Configuring Input Stream for Child Process in TypeScript
DESCRIPTION: Demonstrates how to configure the input stream of a child process using a fetched file as stdin.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const proc = Bun.spawn(["cat"], {
  stdin: await fetch(
    "https://raw.githubusercontent.com/oven-sh/bun/main/examples/hashing.js",
  ),
});

const text = await new Response(proc.stdout).text();
console.log(text); // "const input = "hello world".repeat(400); ..."
```

----------------------------------------

TITLE: Code Signing a macOS Executable with JIT Entitlements using Shell
DESCRIPTION: This shell command demonstrates how to code sign a macOS executable (`./myapp`) while applying specific entitlements from a `.plist` file (`entitlements.plist`). This is typically used to grant JIT permissions required by the application. Replace `XXXXXXXXXX` with your signing identity.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/executables.md#2025-04-22_snippet_10

LANGUAGE: sh
CODE:
```
$ codesign --deep --force -vvvv --sign "XXXXXXXXXX" --entitlements entitlements.plist ./myapp
```

----------------------------------------

TITLE: UDP Connection Setup
DESCRIPTION: Example of establishing a UDP connection between client and server for single-peer communication
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/udp.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const server = await Bun.udpSocket({
  socket: {
    data(socket, buf, port, addr) {
      console.log(`message from ${addr}:${port}:`)
      console.log(buf.toString());
    } 
  }
})
const client = await Bun.udpSocket({
  connect: {
    port: server.port,
    hostname: '127.0.0.1',
  }
});

client.send("Hello");
```

----------------------------------------

TITLE: Installing Happy DOM Global Registrator with Bun
DESCRIPTION: Command to install the Happy DOM global registrator package as a development dependency using Bun's package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/dom.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ bun add -d @happy-dom/global-registrator
```

----------------------------------------

TITLE: Bundled Output HTML from Bun
DESCRIPTION: The transformed HTML after Bun's bundling process, showing how scripts and stylesheets are combined and hashed for efficient delivery.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/fullstack.md#2025-04-22_snippet_5

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
  <head>
    <title>Home</title>
    <link rel="stylesheet" href="/index-[hash].css" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/index-[hash].js"></script>
  </body>
</html>
```

----------------------------------------

TITLE: String Escaping in Bun Shell
DESCRIPTION: Demonstrates the use of $.escape utility for escaping strings in Bun Shell. This function exposes Bun Shell's escaping logic, allowing users to manually escape special characters in strings.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_20

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

console.log($.escape('$(foo) `bar` "baz"'));
// => \$(foo) \`bar\` \"baz\"
```

----------------------------------------

TITLE: Using Data URLs with Fetch in TypeScript
DESCRIPTION: Demonstrates how to use data URLs with fetch to retrieve inline content without making a network request.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_20

LANGUAGE: typescript
CODE:
```
const response = await fetch("data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==");
const text = await response.text(); // "Hello, World!"
```

----------------------------------------

TITLE: Install Bun Dependencies on macOS (Homebrew)
DESCRIPTION: This command installs the necessary dependencies for building Bun on macOS using Homebrew.  Dependencies include build tools, languages, and libraries required by Bun. Ensure Homebrew is installed before running this command.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ brew install automake ccache cmake coreutils gnu-sed go icu4c libiconv libtool ninja pkg-config rust ruby
```

----------------------------------------

TITLE: Replacing values with JSON using --define
DESCRIPTION: This shell command demonstrates how to use --define to replace a variable with a JSON object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/define-constant.md#2025-04-22_snippet_8

LANGUAGE: sh
CODE:
```
bun --define AWS='{"ACCESS_KEY":"abc","SECRET_KEY":"def"}' src/index.ts
```

----------------------------------------

TITLE: Enabling colors in Bun.inspect.table() in TypeScript
DESCRIPTION: Demonstrates how to enable ANSI colors in table output from Bun.inspect.table() by passing the colors option. This makes the output more visually distinct when viewed in compatible terminals.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_24

LANGUAGE: typescript
CODE:
```
console.log(
  Bun.inspect.table(
    [
      { a: 1, b: 2, c: 3 },
      { a: 4, b: 5, c: 6 },
    ],
    {
      colors: true,
    },
  ),
);
```

----------------------------------------

TITLE: Sample Query Results Structure with Positional Parameters (TypeScript)
DESCRIPTION: Shows the expected object result of a query using numbered positional parameters, demonstrating the mapping of positional inputs to output fields.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_21

LANGUAGE: TypeScript
CODE:
```
[
  {
    "?1": "hello",
    "?2": "goodbye"
  }
]

```

----------------------------------------

TITLE: Importing Native Addons in TypeScript
DESCRIPTION: Shows how to import native addons (.node files) directly in TypeScript runtime. In the bundler, these files are handled by the file loader.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/loaders.md#2025-04-22_snippet_7

LANGUAGE: ts
CODE:
```
import addon from "./addon.node";
console.log(addon);
```

----------------------------------------

TITLE: Running Migration Script and Expected Output (Shell Script)
DESCRIPTION: Executes the migration script via Bun and shows success output. Input: migrate.ts file; output: confirmation log if migration succeeds.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-drizzle.md#2025-04-22_snippet_9

LANGUAGE: sh
CODE:
```
$ bun run migrate.ts\nMigration completed
```

----------------------------------------

TITLE: Importing TOML in TypeScript
DESCRIPTION: Shows how to import TOML files directly in TypeScript using Bun's native TOML parser. Includes an example of using import attributes for custom TOML files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/loaders.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
import config from "./bunfig.toml";
config.logLevel; // => "debug"

// via import attribute:
// import myCustomTOML from './my.config' with {type: "toml"};
```

----------------------------------------

TITLE: Running WebSocket Chat Server in Deno
DESCRIPTION: Command to start the WebSocket chat server using Deno's built-in Deno.serve functionality with all permissions enabled.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/websocket-server/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
deno run -A ./chat-server.deno.mjs
```

----------------------------------------

TITLE: Compressing data with Bun.gzipSync() in TypeScript
DESCRIPTION: Demonstrates how to compress a Uint8Array using zlib's GZIP algorithm. The example shows compressing a buffer containing repeated text, resulting in significant size reduction.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_15

LANGUAGE: typescript
CODE:
```
const buf = Buffer.from("hello".repeat(100)); // Buffer extends Uint8Array
const compressed = Bun.gzipSync(buf);

buf; // => Uint8Array(500)
compressed; // => Uint8Array(30)
```

----------------------------------------

TITLE: Using Thread-Safe Callbacks with JSCallback in FFI
DESCRIPTION: This snippet shows how to create a thread-safe callback using the JSCallback class from bun:ffi. It demonstrates the usage of the optional 'threadsafe' parameter when creating a callback.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/ffi.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
const searchIterator = new JSCallback(
  (ptr, length) => /hello/.test(new CString(ptr, length)),
  {
    returns: "bool",
    args: ["ptr", "usize"],
    threadsafe: true, // Optional. Defaults to `false`
  },
);
```

----------------------------------------

TITLE: Using Bun.sleep() for Asynchronous Delays
DESCRIPTION: Demonstrates how to use Bun.sleep() to create asynchronous delays in code execution, supporting both millisecond and Date inputs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
console.log("hello");
await Bun.sleep(1000);
console.log("hello one second later!");
```

LANGUAGE: typescript
CODE:
```
const oneSecondInFuture = new Date(Date.now() + 1000);

console.log("hello");
await Bun.sleep(oneSecondInFuture);
console.log("hello one second later!");
```

----------------------------------------

TITLE: Running the Bun Application Docker Container in Shell
DESCRIPTION: This command uses `docker run` to start a new container from the `bun-hello-world` image created previously. The `-d` flag runs the container in detached mode (in the background), and `-p 3000:3000` maps port 3000 on the host machine to port 3000 inside the container. The command outputs the unique ID of the newly created container.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/docker.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
$ docker run -d -p 3000:3000 bun-hello-world
7f03e212a15ede8644379bce11a13589f563d3909a9640446c5bbefce993678d
```

----------------------------------------

TITLE: Running Specific Test File with Bun Test
DESCRIPTION: Execute a single test file by specifying its exact path with './' or '/' prefix to distinguish it from filter patterns.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/discovery.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ bun test ./test/specific-file.test.ts
```

----------------------------------------

TITLE: Bun Server TypeScript Interface Definitions
DESCRIPTION: Comprehensive TypeScript interface definitions for Bun's server implementation, including WebSocket handling, TLS configuration, and server management methods.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_28

LANGUAGE: typescript
CODE:
```
interface Server extends Disposable {
  /**
   * Stop the server from accepting new connections.
   * @param closeActiveConnections If true, immediately terminates all connections
   * @returns Promise that resolves when the server has stopped
   */
  stop(closeActiveConnections?: boolean): Promise<void>;

  /**
   * Update handlers without restarting the server.
   * Only fetch and error handlers can be updated.
   */
  reload(options: Serve): void;

  /**
   * Make a request to the running server.
   * Useful for testing or internal routing.
   */
  fetch(request: Request | string): Response | Promise<Response>;

  /**
   * Upgrade an HTTP request to a WebSocket connection.
   * @returns true if upgrade successful, false if failed
   */
  upgrade<T = undefined>(
    request: Request,
    options?: {
      headers?: Bun.HeadersInit;
      data?: T;
    },
  ): boolean;

  /**
   * Publish a message to all WebSocket clients subscribed to a topic.
   * @returns Bytes sent, 0 if dropped, -1 if backpressure applied
   */
  publish(
    topic: string,
    data: string | ArrayBufferView | ArrayBuffer | SharedArrayBuffer,
    compress?: boolean,
  ): ServerWebSocketSendStatus;

  /**
   * Get count of WebSocket clients subscribed to a topic.
   */
  subscriberCount(topic: string): number;

  /**
   * Get client IP address and port.
   * @returns null for closed requests or Unix sockets
   */
  requestIP(request: Request): SocketAddress | null;

  /**
   * Set custom idle timeout for a request.
   * @param seconds Timeout in seconds, 0 to disable
   */
  timeout(request: Request, seconds: number): void;

  /**
   * Keep process alive while server is running.
   */
  ref(): void;

  /**
   * Allow process to exit if server is only thing running.
   */
  unref(): void;

  /** Number of in-flight HTTP requests */
  readonly pendingRequests: number;

  /** Number of active WebSocket connections */
  readonly pendingWebSockets: number;

  /** Server URL including protocol, hostname and port */
  readonly url: URL;

  /** Port server is listening on */
  readonly port: number;

  /** Hostname server is bound to */
  readonly hostname: string;

  /** Whether server is in development mode */
  readonly development: boolean;

  /** Server instance identifier */
  readonly id: string;
}

interface WebSocketHandler<T = undefined> {
  /** Maximum WebSocket message size in bytes */
  maxPayloadLength?: number;

  /** Bytes of queued messages before applying backpressure */
  backpressureLimit?: number;

  /** Whether to close connection when backpressure limit hit */
  closeOnBackpressureLimit?: boolean;

  /** Called when backpressure is relieved */
  drain?(ws: ServerWebSocket<T>): void | Promise<void>;

  /** Seconds before idle timeout */
  idleTimeout?: number;

  /** Enable per-message deflate compression */
  perMessageDeflate?:
    | boolean
    | {
        compress?: WebSocketCompressor | boolean;
        decompress?: WebSocketCompressor | boolean;
      };

  /** Send ping frames to keep connection alive */
  sendPings?: boolean;

  /** Whether server receives its own published messages */
  publishToSelf?: boolean;

  /** Called when connection opened */
  open?(ws: ServerWebSocket<T>): void | Promise<void>;

  /** Called when message received */
  message(
    ws: ServerWebSocket<T>,
    message: string | Buffer,
  ): void | Promise<void>;

  /** Called when connection closed */
  close?(
    ws: ServerWebSocket<T>,
    code: number,
    reason: string,
  ): void | Promise<void>;

  /** Called when ping frame received */
  ping?(ws: ServerWebSocket<T>, data: Buffer): void | Promise<void>;

  /** Called when pong frame received */
  pong?(ws: ServerWebSocket<T>, data: Buffer): void | Promise<void>;
}

interface TLSOptions {
  /** Certificate authority chain */
  ca?: string | Buffer | BunFile | Array<string | Buffer | BunFile>;

  /** Server certificate */
  cert?: string | Buffer | BunFile | Array<string | Buffer | BunFile>;

  /** Path to DH parameters file */
  dhParamsFile?: string;

  /** Private key */
  key?: string | Buffer | BunFile | Array<string | Buffer | BunFile>;

  /** Reduce TLS memory usage */
  lowMemoryMode?: boolean;

  /** Private key passphrase */
  passphrase?: string;

  /** OpenSSL options flags */
  secureOptions?: number;

  /** Server name for SNI */
  serverName?: string;
}
```

----------------------------------------

TITLE: RGB Array Format Examples in TypeScript
DESCRIPTION: Examples of converting colors to RGB array format using Bun.color() with '[rgba]' and '[rgb]' output formats
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/color.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
Bun.color("hsl(0, 0%, 50%)", "[rgba]"); // [128, 128, 128, 255]
Bun.color("red", "[rgba]"); // [255, 0, 0, 255]
Bun.color(0xff0000, "[rgba]"); // [255, 0, 0, 255]
Bun.color({ r: 255, g: 0, b: 0 }, "[rgba]"); // [255, 0, 0, 255]
Bun.color([255, 0, 0], "[rgba]"); // [255, 0, 0, 255]
```

----------------------------------------

TITLE: Using 'bun' Types in Ambient Declarations
DESCRIPTION: This snippet demonstrates how to use types from the 'bun' module within ambient declarations. It shows two equivalent ways of referencing a type from the 'bun' module.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-types/authoring.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// These are equivalent
type A = import("bun").MyType;
type A = Bun.MyType;
```

----------------------------------------

TITLE: Scoping hooks to a describe block in Bun tests
DESCRIPTION: Example of using beforeAll hook scoped to a specific describe block. This allows setup logic to be executed once before all tests in that specific test group, limiting the scope of the setup to just those tests.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/lifecycle.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { describe, beforeAll } from "bun:test";

describe("test group", () => {
  beforeAll(() => {
    // setup
  });

  // tests...
});
```

----------------------------------------

TITLE: Setting breakpoints using bun-inspector-protocol in TypeScript
DESCRIPTION: TypeScript code demonstrating how to set breakpoints by URL, with custom actions, and how to remove breakpoints using the Debugger domain of the inspector protocol.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-inspector-protocol/README.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
// Set a breakpoint by URL
const { breakpointId } = await inspector.send("Debugger.setBreakpointByUrl", {
  lineNumber: 42,
  url: "/app/foo.ts",
  condition: "x > 5", // Optional condition
});

// Set a breakpoint with custom actions
await inspector.send("Debugger.setBreakpoint", {
  location: { scriptId: "123", lineNumber: 10 },
  options: {
    condition: "count > 5",
    actions: [
      { type: "log", data: "Breakpoint hit!" },
      { type: "evaluate", data: "console.log('Custom breakpoint action')" },
    ],
    autoContinue: true,
  },
});

// Remove a breakpoint
await inspector.send("Debugger.removeBreakpoint", { breakpointId });
```

----------------------------------------

TITLE: Installing Bun Dependencies (Fedora)
DESCRIPTION: Installs the necessary dependencies for building Bun on Fedora using dnf. Includes compilers, build tools, and essential libraries for the project.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_3

LANGUAGE: bash
CODE:
```
$ sudo dnf install cargo ccache cmake git golang libtool ninja-build pkg-config rustc ruby libatomic-static libstdc++-static sed unzip which libicu-devel 'perl(Math::BigInt)'
```

----------------------------------------

TITLE: Handling Error Logs in Bun Build
DESCRIPTION: Example showing how to handle build errors with try/catch blocks and access detailed error information.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_67

LANGUAGE: typescript
CODE:
```
try {
  const result = await Bun.build({
    entrypoints: ["./index.tsx"],
    outdir: "./out",
  });
} catch (e) {
  // TypeScript does not allow annotations on the catch clause
  const error = e as AggregateError;
  console.error("Build Failed");

  // Example: Using the built-in formatter
  console.error(error);

  // Example: Serializing the failure as a JSON string.
  console.error(JSON.stringify(error, null, 2));
}
```

----------------------------------------

TITLE: Configuring Custom JSX Factory
DESCRIPTION: Configuration for specifying a custom JSX factory function using the jsxFactory option. This is useful for libraries like Preact that use a different function name for JSX creation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_10

LANGUAGE: json
CODE:
```
{
  "jsx": "react",
  "jsxFactory": "h"
}
```

----------------------------------------

TITLE: Printing Environment Variables for Debugging
DESCRIPTION: Command to print all environment variables to the console for debugging purposes.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_15

LANGUAGE: sh
CODE:
```
$ bun --print process.env
BAZ=stuff
FOOBAR=aaaaaa
<lots more lines>
```

----------------------------------------

TITLE: Initializing a Bun project for Prisma
DESCRIPTION: Commands to create a new directory and initialize it as a Bun project. This sets up the basic structure needed for a Bun application with Prisma.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/prisma.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ mkdir prisma-app
$ cd prisma-app
$ bun init
```

----------------------------------------

TITLE: Multiple Ways to Provide TLS Certificates
DESCRIPTION: Demonstrates various methods to supply TLS key and certificate data, including using BunFile, Buffer, string, or arrays of these types for certificate chains.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/tcp.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
Bun.listen({
  // ...
  tls: {
    // BunFile
    key: Bun.file("./key.pem"),
    // Buffer
    key: fs.readFileSync("./key.pem"),
    // string
    key: fs.readFileSync("./key.pem", "utf8"),
    // array of above
    key: [Bun.file("./key1.pem"), Bun.file("./key2.pem")],
  },
});
```

----------------------------------------

TITLE: Exporting a TypeScript Function
DESCRIPTION: Shows how to export a function from a TypeScript module that can be imported by other files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
export function hello() {
  console.log("Hello world!");
}
```

----------------------------------------

TITLE: Enabling TLS for a TCP Client
DESCRIPTION: Configures a TCP client to require TLS encryption when connecting to a server by setting the tls option to true.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/tcp.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
// The client
const socket = await Bun.connect({
  // ... config
  tls: true,
});
```

----------------------------------------

TITLE: Setting Custom MIME Types
DESCRIPTION: Example of setting custom MIME types when creating a BunFile instance.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-io.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
const notreal = Bun.file("notreal.json", { type: "application/json" });
notreal.type; // => "application/json;charset=utf-8"
```

----------------------------------------

TITLE: Generating Drizzle Migration Files (Shell Script)
DESCRIPTION: Runs drizzle-kit from the command line to analyze schema.ts and produce SQL migration files suitable for initializing or migrating the database; supports specifying dialect and folder output. Assumes Bun and Drizzle dependencies are installed. No input except via command-line flags.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-drizzle.md#2025-04-22_snippet_6

LANGUAGE: sh
CODE:
```
$ bunx drizzle-kit generate --dialect postgresql --schema ./schema.ts --out ./drizzle
```

----------------------------------------

TITLE: Installing Bun using Homebrew
DESCRIPTION: This snippet shows how to install Bun on macOS and Linux using Homebrew.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/installation.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ brew install oven-sh/bun/bun # for macOS and Linux
```

----------------------------------------

TITLE: Implementing Static File Serving with StricJS
DESCRIPTION: Enhanced server implementation that includes both a basic route and static file serving from a public directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/stric.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { dir } from '@stricjs/utils';

export default new Router()
  .get('/', () => new Response('Hi'))
  .get('/*', dir('./public'));
```

----------------------------------------

TITLE: Installing Git Dependencies with Bun
DESCRIPTION: Commands and configuration for installing packages from Git repositories using various protocols.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/add.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
$ bun add git@github.com:moment/moment.git
```

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "dayjs": "git+https://github.com/iamkun/dayjs.git",
    "lodash": "git+ssh://github.com/lodash/lodash.git#4.17.21",
    "moment": "git@github.com:moment/moment.git",
    "zod": "github:colinhacks/zod"
  }
}
```

----------------------------------------

TITLE: Creating a Snapshot Test in TypeScript with Bun Test Runner
DESCRIPTION: Basic example of a snapshot test using Bun's test runner. The test creates a snapshot of a simple object which will be saved to the __snapshots__ directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/snapshot.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { test, expect } from "bun:test";

test("snapshot", () => {
  expect({ foo: "bar" }).toMatchSnapshot();
});
```

----------------------------------------

TITLE: Recursive Directory Glob Pattern
DESCRIPTION: Example of using '**' glob pattern to match files in any subdirectory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/glob.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
const glob = new Glob("**/*.ts");
glob.match("index.ts"); // => true
glob.match("src/index.ts"); // => true
glob.match("src/index.js"); // => false
```

----------------------------------------

TITLE: Demonstrating Time Zone Effect on Date Objects in Bun (TypeScript)
DESCRIPTION: This snippet illustrates how setting the TZ environment variable affects Date instances in Bun. It shows the difference in hours returned by getHours() before and after setting the time zone.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/timezone.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
new Date().getHours(); // => 18

process.env.TZ = "America/New_York";

new Date().getHours(); // => 21
```

----------------------------------------

TITLE: Committing Package Patches with Bun
DESCRIPTION: This snippet shows how to commit changes made to a patched package using `bun patch --commit`. It demonstrates specifying the package by path, name and version, as well as customizing the patch directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/patch.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
# you can supply the path to the patched package
$ bun patch --commit node_modules/react

# ... or the package name and optionally the version
$ bun patch --commit react@17.0.2

# choose the directory to store the patch files
$ bun patch --commit react --patches-dir=mypatches

# `patch-commit` is available for compatibility with pnpm
$ bun patch-commit react
```

----------------------------------------

TITLE: Upgrading Bun
DESCRIPTION: This snippet shows how to upgrade Bun to the latest version and how to upgrade to the latest canary build.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/installation.md#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
$ bun upgrade

$ bun upgrade --canary
```

----------------------------------------

TITLE: Bun Plugin Macro Implementation Example
DESCRIPTION: Internal implementation example of how the bun macro wraps plugin code
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-native-plugin-rs/README.md#2025-04-22_snippet_2

LANGUAGE: rust
CODE:
```
pub extern "C" fn replace_foo_with_bar(
  args: *const bun_native_plugin::sys::OnBeforeParseArguments,
  result: *mut bun_native_plugin::sys::OnBeforeParseResult,
) {
  // The actual code you wrote is inlined here
  fn __replace_foo_with_bar(handle: &mut OnBeforeParse) -> Result<()> {
    // Fetch the input source code.
    let input_source_code = handle.input_source_code()?;

    // Get the Loader for the file
    let loader = handle.output_loader();


    let output_source_code = input_source_code.replace("foo", "bar");

    handle.set_output_source_code(output_source_code, BunLoader::BUN_LOADER_JSX);

    Ok(())
  }

  let args = unsafe { &*args };

  let mut handle = OnBeforeParse::from_raw(args, result) {
    Ok(handle) => handle,
    Err(_) => {
      return;
    }
  };

  if let Err(e) = __replace_fo_with_bar(&handle) {
    handle.log_err(&e.to_string());
  }
}
```

----------------------------------------

TITLE: Controlling Process Lifecycle with server.ref() and server.unref()
DESCRIPTION: Demonstrates how to control whether the server keeps the Bun process alive using ref() and unref() methods. Using unref() allows the process to exit if the server is the only thing running.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_16

LANGUAGE: typescript
CODE:
```
// Don't keep process alive if server is the only thing running
server.unref();

// Restore default behavior - keep process alive
server.ref();
```

----------------------------------------

TITLE: Defining Neon Postgres Connection String in Environment File - Shell
DESCRIPTION: This snippet shows how to define the Neon Postgres connection string as an environment variable in a .env.local file. The DATABASE_URL variable provides connection credentials for the Neon serverless Postgres instance. Replace 'username', 'password', and database details with your actual Neon credentials. This environment variable will later be loaded automatically by Bun during runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-serverless-postgres.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
DATABASE_URL=postgresql://username:password@ep-adj-noun-guid.us-east-1.aws.neon.tech/neondb?sslmode=require
```

----------------------------------------

TITLE: JSX Transformation with 'react' Option
DESCRIPTION: Configuration for transforming JSX using the 'react' option, which uses React.createElement for transpilation. This is the traditional React JSX transformation approach.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsx": "react"
}
```

----------------------------------------

TITLE: C Implementation using N-API for Object Creation
DESCRIPTION: C code that creates and returns a JavaScript object using N-API functions.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cc.md#2025-04-22_snippet_5

LANGUAGE: c
CODE:
```
#include <node/node_api.h>

napi_value hello(napi_env env) {
  napi_value result;
  napi_create_object(env, &result);
  return result;
}
```

----------------------------------------

TITLE: Enhancing the HTTP Server with Figlet ASCII Art
DESCRIPTION: Updates the server code to use the figlet package to convert 'Bun!' into ASCII art and return it as the response body.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/quickstart.md#2025-04-22_snippet_8

LANGUAGE: ts-diff
CODE:
```
+ import figlet from "figlet";

  const server = Bun.serve({
    port: 3000,
    fetch(req) {
+     const body = figlet.textSync("Bun!");
+     return new Response(body);
-     return new Response("Bun!");
    },
  });
```

----------------------------------------

TITLE: Configuring Trusted Dependencies
DESCRIPTION: JSON configuration for specifying trusted dependencies that are allowed to run lifecycle scripts.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/add.md#2025-04-22_snippet_7

LANGUAGE: json
CODE:
```
{
    "name": "my-app",
    "version": "1.0.0",
    "trustedDependencies": ["my-trusted-package"]
}
```

----------------------------------------

TITLE: Manual Script Execution in Monorepo Packages using Bash
DESCRIPTION: This example demonstrates the typical manual approach for running scripts in separate monorepo packages by changing into each package's directory and running the desired command. Each terminal session handles one package. This method is contrasted with Bun's --filter automation. Requires separate terminal instances.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/filter.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
cd packages/api
bun dev

# in another terminal
cd packages/frontend
bun dev

```

----------------------------------------

TITLE: Building Bun Runtime
DESCRIPTION: Commands for building Bun from source using ninja build system.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/building-windows.md#2025-04-22_snippet_5

LANGUAGE: powershell
CODE:
```
bun run build

# after the initial `bun run build` you can use the following to build
ninja -Cbuild/debug
```

----------------------------------------

TITLE: Setting a single coverage threshold in bunfig.toml
DESCRIPTION: Configuration in bunfig.toml to set a single threshold value (90%) for both line-level and function-level code coverage.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/coverage-threshold.md#2025-04-22_snippet_1

LANGUAGE: toml
CODE:
```
[test]
# to require 90% line-level and function-level coverage
coverageThreshold = 0.9
```

----------------------------------------

TITLE: Package.json Dependency Update
DESCRIPTION: Shows the resulting change in package.json after adding a tarball dependency, demonstrating how the URL is stored in the dependencies object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/add-tarball.md#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{
  "dependencies": {
   "zod": "https://registry.npmjs.org/zod/-/zod-3.21.4.tgz"
  }
}
```

----------------------------------------

TITLE: Basic Command Line Argument Parsing
DESCRIPTION: Example showing basic usage of Commander.js to parse command line arguments with options for separator and first item limit
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
const { program } = require('commander');

program
  .option('--first')
  .option('-s, --separator <char>');

program.parse();

const options = program.opts();
const limit = options.first ? 1 : undefined;
console.log(program.args[0].split(options.separator, limit));
```

----------------------------------------

TITLE: Node.js Test Directory Structure Table in Markdown
DESCRIPTION: A markdown table documenting the various test directories in Node.js core, including whether they run in CI and their specific purposes. The table covers specialized test categories like addon tests, async hooks, benchmarks, and various other testing scenarios.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
| Directory        | Runs on CI | Purpose                                                                                                       |
| ---------------- | ---------- | ------------------------------------------------------------------------------------------------------------- |
| `abort`          | Yes        | Tests that use `--abort-on-uncaught-exception` and other cases where we want to avoid generating a core file. |
| `addons`         | Yes        | Tests for [addon][] functionality along with some tests that require an addon.                                |
| `async-hooks`    | Yes        | Tests for [async\_hooks][async_hooks] functionality.                                                          |
| `benchmark`      | Yes        | Test minimal functionality of benchmarks.                                                                     |
| `cctest`         | Yes        | C++ tests that are run as part of the build process.                                                          |
| `code-cache`     | No         | Tests for a Node.js binary compiled with V8 code cache.                                                       |
| `common`         | _N/A_      | Common modules shared among many tests.[^1]                                                                   |
| `doctool`        | Yes        | Tests for the documentation generator.                                                                        |
| `es-module`      | Yes        | Test ESM module loading.                                                                                      |
| `fixtures`       | _N/A_      | Test fixtures used in various tests throughout the test suite.                                                |
| `internet`       | No         | Tests that make real outbound network connections.[^2]                                                        |
| `js-native-api`  | Yes        | Tests for Node.js-agnostic [Node-API][] functionality.                                                        |
| `known_issues`   | Yes        | Tests reproducing known issues within the system.[^3]                                                         |
| `message`        | Yes        | Tests for messages that are output for various conditions                                                     |
| `node-api`       | Yes        | Tests for Node.js-specific [Node-API][] functionality.                                                        |
| `parallel`       | Yes        | Various tests that are able to be run in parallel.                                                            |
| `pseudo-tty`     | Yes        | Tests that require stdin/stdout/stderr to be a TTY.                                                           |
| `pummel`         | No         | Various tests for various modules / system functionality operating under load.                                |
| `sequential`     | Yes        | Various tests that must not run in parallel.                                                                  |
| `testpy`         | _N/A_      | Test configuration utility used by various test suites.                                                       |
| `tick-processor` | No         | Tests for the V8 tick processor integration.[^4]                                                              |
| `v8-updates`     | No         | Tests for V8 performance integration.                                                                         |
```

----------------------------------------

TITLE: Importing with Explicit Loader in TypeScript
DESCRIPTION: Demonstrates how to explicitly specify which loader to use through the import attribute syntax, overriding the default loader determined by file extension.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/loaders.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
import my_toml from "./my_file" with { loader: "toml" };
```

----------------------------------------

TITLE: Running WebSocket Chat Server in Node.js
DESCRIPTION: Command to start the WebSocket chat server using Node.js with the 'ws' package.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/websocket-server/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
node ./chat-server.node.mjs
```

----------------------------------------

TITLE: JSX Output with 'react' Option
DESCRIPTION: Transpiled output of JSX when using the 'react' option, showing how JSX is converted to createElement function calls that import from the react package.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_3

LANGUAGE: tsx
CODE:
```
import { createElement } from "react";
createElement("Box", { width: 5 }, "Hello");
```

----------------------------------------

TITLE: Using Error.captureStackTrace for Custom Stack Trace Capture
DESCRIPTION: Shows how to use Error.captureStackTrace to capture a stack trace at a specific point in code, which is useful for determining where an error originated in complex asynchronous code or callbacks.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/debugger.md#2025-04-22_snippet_6

LANGUAGE: ts
CODE:
```
const fn = () => {
  function myInner() {
    throw err;
  }

  try {
    myInner();
  } catch (err) {
    console.log(err.stack);
    console.log("");
    console.log("-- captureStackTrace --");
    console.log("");
    Error.captureStackTrace(err, fn);
    console.log(err.stack);
  }
};

fn();
```

----------------------------------------

TITLE: Basic JSX Syntax Example for Transformation
DESCRIPTION: A simple JSX example used to demonstrate how different JSX transformation options affect the output. Shows a basic Box component with a width prop and text content.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
<Box width={5}>Hello</Box>
```

----------------------------------------

TITLE: Running DOM Tests with Bun
DESCRIPTION: Example output of running DOM tests using Bun's test runner with Happy DOM integration
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/happy-dom.md#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
$ bun test

dom.test.ts:
✓ set button text [0.82ms]

 1 pass
 0 fail
 1 expect() calls
Ran 1 tests across 1 files. 1 total [125.00ms]
```

----------------------------------------

TITLE: Installing bun-plugin-yaml with Bun
DESCRIPTION: Command to install the bun-plugin-yaml as a development dependency using Bun package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-plugin-yaml/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
bun add bun-plugin-yaml -d
```

----------------------------------------

TITLE: YAML Plugin Implementation
DESCRIPTION: A complete implementation of a plugin that adds support for importing YAML files in Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/plugins.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { plugin } from "bun";

await plugin({
  name: "YAML",
  async setup(build) {
    const { load } = await import("js-yaml");

    // when a .yaml file is imported...
    build.onLoad({ filter: /\.(yaml|yml)$/ }, async (args) => {

      // read and parse the file
      const text = await Bun.file(args.path).text();
      const exports = load(text) as Record<string, any>;

      // and returns it as a module
      return {
        exports,
        loader: "object", // special loader for JS objects
      };
    });
  },
});
```

----------------------------------------

TITLE: Converting ReadableStream to Blob in TypeScript
DESCRIPTION: A method for converting a ReadableStream to a Blob using the Response object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_24

LANGUAGE: typescript
CODE:
```
new Response(stream).blob();
```

----------------------------------------

TITLE: Setting GCC 11 as Default Compiler
DESCRIPTION: These commands set GCC 11 and G++ 11 as the default compilers using `update-alternatives`. This ensures that Clang uses the correct GCC version with C++20 support.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_31

LANGUAGE: bash
CODE:
```
$ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100
$ sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100
```

----------------------------------------

TITLE: TypedArray Array Methods and Limitations in JavaScript/TypeScript
DESCRIPTION: This example highlights the subset of Array methods supported by TypedArrays, using Uint8Array as an example. Functions like filter, map, reduce, forEach, every, find, includes, and indexOf behave similarly to standard arrays, but methods that would mutate the array's length (push, pop, etc.) are absent due to fixed buffer sizing. No dependencies; intended to be run in environments with TypedArray support. Inputs are standard TypedArrays and functions; outputs depend on each operation (new TypedArrays, scalar results, or console output).
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_12

LANGUAGE: TypeScript
CODE:
```
const arr = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7]);

// supports common array methods
arr.filter(n => n > 128); // Uint8Array(1) [255]
arr.map(n => n * 2); // Uint8Array(8) [0, 2, 4, 6, 8, 10, 12, 14]
arr.reduce((acc, n) => acc + n, 0); // 28
arr.forEach(n => console.log(n)); // 0 1 2 3 4 5 6 7
arr.every(n => n < 10); // true
arr.find(n => n > 5); // 6
arr.includes(5); // true
arr.indexOf(5); // 5
```

----------------------------------------

TITLE: Defining Bun Plugin Types in TypeScript
DESCRIPTION: TypeScript definitions for Bun's plugin system, including the PluginBuilder interface and Loader type. These types define the structure and capabilities of Bun plugins.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/plugins.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
namespace Bun {
  function plugin(plugin: {
    name: string;
    setup: (build: PluginBuilder) => void;
  }): void;
}

type PluginBuilder = {
  onStart(callback: () => void): void;
  onResolve: (
    args: { filter: RegExp; namespace?: string },
    callback: (args: { path: string; importer: string }) => {
      path: string;
      namespace?: string;
    } | void,
  ) => void;
  onLoad: (
    args: { filter: RegExp; namespace?: string },
    callback: (args: { path: string }) => {
      loader?: Loader;
      contents?: string;
      exports?: Record<string, any>;
    },
  ) => void;
  config: BuildConfig;
};

type Loader = "js" | "jsx" | "ts" | "tsx" | "css" | "json" | "toml" | "object";
```

----------------------------------------

TITLE: Converting Node.js Readable to Uint8Array using Bun's Response
DESCRIPTION: This snippet demonstrates how to convert a Node.js Readable stream to a Uint8Array using Bun. It creates a Readable stream, wraps it in a Response object, and then uses the bytes() method to read the stream into a Uint8Array.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/streams/node-readable-to-uint8array.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Readable } from "stream";
const stream = Readable.from(["Hello, ", "world!"]);
const buf = await new Response(stream).bytes();
```

----------------------------------------

TITLE: Binding Positional Parameters in Bun SQLite Queries (TypeScript)
DESCRIPTION: Demonstrates use of positional parameters (?1, ?2) in SQL queries with Bun by passing arguments directly to .all(). The resulting objects have keys matching the positional placeholders.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_20

LANGUAGE: TypeScript
CODE:
```
const query = db.query("SELECT ?1, ?2");
const results = query.all("hello", "goodbye");

```

----------------------------------------

TITLE: Installing With Yarn Lockfile Support in Bun (CLI)
DESCRIPTION: Installs dependencies and generates both bun.lock and a Yarn lockfile by using the --yarn flag.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/lockfile.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ bun install --yarn
```

----------------------------------------

TITLE: Resetting the System Clock in Bun Tests
DESCRIPTION: This example shows how to reset the system clock back to the actual time by calling setSystemTime without any arguments.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/mock-clock.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { test, expect, beforeAll, setSystemTime } from "bun:test";

setSystemTime(); // reset to actual time
```

----------------------------------------

TITLE: Setting Environment Variables via Command Line in Windows
DESCRIPTION: Demonstrates how to set environment variables in Windows using both CMD and PowerShell when running a Bun application. Each shell requires a different syntax for setting temporary environment variables.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/set-env.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
# Using CMD
$ set FOO=helloworld && bun run dev

# Using PowerShell
$ $env:FOO="helloworld"; bun run dev
```

----------------------------------------

TITLE: Installing Global Packages with Bun
DESCRIPTION: Illustrates how to install a package globally using `bun install` with the `-g` or `--global` flag. This is typically used for command-line tools, demonstrated here by installing and running the `cowsay` package.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/install.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
$ bun install --global cowsay # or `bun install -g cowsay`
$ cowsay "Bun!"
 ______
< Bun! >
 ------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
```

----------------------------------------

TITLE: Example Directory Structure for Bun Test Filtering
DESCRIPTION: Shows an example directory structure containing multiple `.test.ts` files, including some within a subdirectory (`foo`). This structure is used as context for the subsequent commented-out examples demonstrating how test filtering works with `bun test`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_16

LANGUAGE: text
CODE:
```
.
├── a.test.ts
├── b.test.ts
├── c.test.ts
└── foo
    ├── a.test.ts
    └── b.test.ts
```

----------------------------------------

TITLE: Setting Up TypeScript Type Declarations
DESCRIPTION: TypeScript declaration file to extend Bun's matcher types with Testing Library matchers using declaration merging.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/testing-library.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import { TestingLibraryMatchers } from '@testing-library/jest-dom/matchers';
import { Matchers, AsymmetricMatchers } from 'bun:test';

declare module 'bun:test' {
  interface Matchers<T>
    extends TestingLibraryMatchers<typeof expect.stringContaining, T> {}
  interface AsymmetricMatchers extends TestingLibraryMatchers {}
}
```

----------------------------------------

TITLE: Using validateContent from report module
DESCRIPTION: Validates the schema of a diagnostic report content, which can be provided as a JSON string, parsed object, or result of process.report.getReport(). Throws an exception if validation fails.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_19

LANGUAGE: JavaScript
CODE:
```
validateContent(report)
```

----------------------------------------

TITLE: Adding Bun Native Plugin Crate Dependency (Bash/Cargo)
DESCRIPTION: Adds the `bun-native-plugin` Rust crate as a dependency to the Cargo project using the `cargo add` command. This crate provides macros and utilities specifically for building Bun native plugins in Rust.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/plugins.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
cargo add bun-native-plugin
```

----------------------------------------

TITLE: Loading SQLite Database via ES Module Import
DESCRIPTION: This code demonstrates how to load a SQLite database using ES module import syntax in Bun. It provides a convenient way to import and use a database file directly.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import db from "./mydb.sqlite" with { "type": "sqlite" };

console.log(db.query("select * from users LIMIT 1").get());
```

----------------------------------------

TITLE: Configuring Peer Dependencies in Bun Install
DESCRIPTION: Controls whether peer dependencies are installed during bun install. Default is true.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_18

LANGUAGE: toml
CODE:
```
[install]
peer = true
```

----------------------------------------

TITLE: Building with Code Splitting - Bun JavaScript API - JavaScript
DESCRIPTION: Demonstrates disabling code splitting using Bun.build in JavaScript. Sets 'splitting' parameter to false, thereby putting all code into one bundle per entrypoint. Requires the Bun runtime and code source files. Useful when code splitting is not desired for a project.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_25

LANGUAGE: JavaScript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './out',
  splitting: false, // default
})
```

----------------------------------------

TITLE: Running Bun Tests in Watch Mode
DESCRIPTION: Command to run Bun tests in watch mode, which automatically re-runs tests when file changes are detected. This watches all files imported in test files and provides quick feedback during development.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/hot.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun test --watch
```

----------------------------------------

TITLE: Configuring JSX in Bun
DESCRIPTION: Controls how Bun handles JSX syntax, including factory functions, fragments, and import sources. These settings can alternatively be configured in tsconfig.json.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_1

LANGUAGE: toml
CODE:
```
jsx = "react"
jsxFactory = "h"
jsxFragment = "Fragment"
jsxImportSource = "react"
```

----------------------------------------

TITLE: Configuring Bun Install Behavior in bunfig.toml
DESCRIPTION: Shows the default configuration options for `bun install` within the `bunfig.toml` file. These settings control aspects like whether to install optional/dev/peer dependencies, enable production mode, save a text lockfile, use a frozen lockfile, perform a dry run, and set the concurrency limit for scripts.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/install.md#2025-04-22_snippet_15

LANGUAGE: toml
CODE:
```
[install]

# whether to install optionalDependencies
optional = true

# whether to install devDependencies
dev = true

# whether to install peerDependencies
peer = true

# equivalent to `--production` flag
production = false

# equivalent to `--save-text-lockfile` flag
saveTextLockfile = false

# equivalent to `--frozen-lockfile` flag
frozenLockfile = false

# equivalent to `--dry-run` flag
dryRun = false

# equivalent to `--concurrent-scripts` flag
concurrentScripts = 16 # (cpu count or GOMAXPROCS) x2
```

----------------------------------------

TITLE: Installing Peer Dependencies with Bun
DESCRIPTION: Command for adding peer dependencies using the --peer flag.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/add.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
$ bun add --peer @types/bun
```

----------------------------------------

TITLE: Creating a ReadableStream from Uint8Array Using ReadableStream Constructor in TypeScript
DESCRIPTION: This snippet shows a naive approach to producing a ReadableStream by directly enqueuing a Uint8Array into the stream using its controller. The entire array is provided as a single chunk, immediately closing the stream afterward. No dependencies are required beyond the built-in ReadableStream and Uint8Array. Inputs: a Uint8Array. Outputs: a ReadableStream containing one chunk. Limitation: does not stream in smaller parts and may use excess memory with large arrays.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/typedarray-to-readablestream.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const arr = new Uint8Array(64);
const stream = new ReadableStream({
  start(controller) {
    controller.enqueue(arr);
    controller.close();
  },
});
```

----------------------------------------

TITLE: Executing Various File Types (JS, JSX, TS, TSX) with Bun Run
DESCRIPTION: Illustrates that `bun run` can directly execute JavaScript (`.js`), JSX (`.jsx`), TypeScript (`.ts`), and TSX (`.tsx`) files without requiring explicit pre-compilation steps. Bun's fast native transpiler handles this on the fly.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/run.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ bun run index.js
$ bun run index.jsx
$ bun run index.ts
$ bun run index.tsx
```

----------------------------------------

TITLE: Basic Auto-Installation Example in TypeScript
DESCRIPTION: A simple example showing how Bun auto-installs a package when imported without prior installation. The first run will download and cache the latest version, and subsequent runs will use the cached version.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/autoimport.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { foo } from "foo"; // install `latest` version

foo();
```

----------------------------------------

TITLE: Installing Happy DOM Package
DESCRIPTION: Command to install the Happy DOM global registrator package as a dev dependency
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/happy-dom.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun add -d @happy-dom/global-registrator
```

----------------------------------------

TITLE: Listening for Worker Open Event in TypeScript
DESCRIPTION: Example of using the 'open' event listener to detect when a worker is ready to receive messages, which is a Bun-specific extension not available in browsers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/workers.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
const worker = new Worker(new URL("worker.ts", import.meta.url).href);

worker.addEventListener("open", () => {
  console.log("worker is ready");
});
```

----------------------------------------

TITLE: Matching String Against Glob Pattern
DESCRIPTION: Shows how to match a string against a glob pattern using Bun's Glob class.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/glob.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { Glob } from "bun";

const glob = new Glob("*.ts");

glob.match("index.ts"); // => true
glob.match("index.js"); // => false
```

----------------------------------------

TITLE: Generating SQL Migrations using Drizzle Kit CLI (Shell)
DESCRIPTION: Uses the `drizzle-kit` CLI tool via `bunx` to automatically generate SQL migration files. The command specifies the database dialect (`sqlite`) and the path to the schema definition file (`./schema.ts`). This command analyzes the schema and creates necessary SQL files to update the database structure. Requires `drizzle-kit` to be installed and `schema.ts` to exist.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/drizzle.md#2025-04-22_snippet_5

LANGUAGE: sh
CODE:
```
$ bunx drizzle-kit generate --dialect sqlite --schema ./schema.ts
```

----------------------------------------

TITLE: Adding Mongoose as a Dependency - Shell Script
DESCRIPTION: Installs the Mongoose library into the Bun project using the Bun package manager. Requires that you have created a project directory and run 'bun init' previously. The command has no required inputs and will update the project's dependencies, enabling the use of Mongoose within your TypeScript/Bun project.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/mongoose.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
$ bun add mongoose
```

----------------------------------------

TITLE: Configuring define in Bun Build (CLI)
DESCRIPTION: Command-line interface for replacing global identifiers with custom values at build time.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_51

LANGUAGE: bash
CODE:
```
$ bun build ./index.tsx --outdir ./out --define 'STRING="value"' --define "nested.boolean=true"
```

----------------------------------------

TITLE: Implementing onResolve and onLoad Hooks in a Bun Plugin using TypeScript
DESCRIPTION: This TypeScript snippet shows how to use the `onResolve` and `onLoad` hooks within the `setup` method of a Bun plugin. These hooks allow intercepting module resolution and content loading respectively. Each hook takes filter options and a callback function that receives arguments and returns results specific to that hook.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/vs-esbuild.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
```ts
import type { BunPlugin } from "bun";
const myPlugin: BunPlugin = {
  name: "my-plugin",
  setup(builder) {
    builder.onResolve(
      {
        /* onResolve.options */
      },
      args => {
        return {
          /* onResolve.results */
        };
      },
    );
    builder.onLoad(
      {
        /* onLoad.options */
      },
      args => {
        return {
          /* onLoad.results */
        };
      },
    );
  },
};
```
```

----------------------------------------

TITLE: Filtering Outdated Dependencies by Workspace Globs - Markdown
DESCRIPTION: Demonstrates filtering by passing a workspace glob pattern (e.g., '@monorepo/{types,cli}') to restrict the outdated check to several related packages. This leverages Bun’s workspace glob filtering mechanism implemented via custom Markdown components.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/outdated.md#2025-04-22_snippet_7

LANGUAGE: markdown
CODE:
```
{% bunOutdatedTerminal  glob="{e,t}*" displayGlob="--filter='@monorepo/{types,cli}'" /%}
```

----------------------------------------

TITLE: Generating EdgeQL TypeScript Query Builders using Codegen (Shell)
DESCRIPTION: This command uses Bun to execute the `@edgedb/generate` tool, which introspects the current EdgeDB schema and generates a typed EdgeQL query builder for JavaScript/TypeScript. The process checks for an existing tsconfig and optionally updates .gitignore. Dependencies: Bun, @edgedb/generate, EdgeDB running with migrated schema. Input: User response for .gitignore update. Output: TypeScript files for type-safe querying.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/edgedb.md#2025-04-22_snippet_11

LANGUAGE: sh
CODE:
```
bunx @edgedb/generate edgeql-js
Generating query builder...
Detected tsconfig.json, generating TypeScript files.
   To override this, use the --target flag.
   Run `npx @edgedb/generate --help` for full options.
Introspecting database schema...
Writing files to ./dbschema/edgeql-js
Generation complete! 🤘
Checking the generated query builder into version control
is not recommended. Would you like to update .gitignore to ignore
the query builder directory? The following line will be added:

   dbschema/edgeql-js

[y/n] (leave blank for "y")
> y
```

----------------------------------------

TITLE: Testing EdgeDB Instance with REPL and Simple Query (Shell)
DESCRIPTION: This snippet shows how to use the EdgeDB REPL to connect to the running database and issue a simple arithmetic query (`select 1 + 1;`). It serves as a basic connectivity and database health check after initialization. Dependencies: EdgeDB instance running. Input: EdgeQL command. Output: Query result printed in the REPL.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/edgedb.md#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
edgedb
edgedb> select 1 + 1;
2
edgedb> \quit
```

----------------------------------------

TITLE: Configuring TailwindCSS Plugin in bunfig.toml
DESCRIPTION: Demonstrates the configuration added to bunfig.toml for using the TailwindCSS plugin with Bun.serve().
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bun-create.md#2025-04-22_snippet_2

LANGUAGE: toml
CODE:
```
[serve.static]
plugins = ["bun-plugin-tailwind"]
```

----------------------------------------

TITLE: Closing SQLite Database Connection in Bun
DESCRIPTION: This snippet shows two ways to close a SQLite database connection in Bun: one that allows existing queries to finish, and another that throws an error if there are pending queries.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
const db = new Database();
// ... do stuff
db.close(false);

const db = new Database();
// ... do stuff
db.close(true);
```

----------------------------------------

TITLE: Setting Timezone at Runtime in bun:test
DESCRIPTION: Shows how to dynamically change timezones during test execution by modifying process.env.TZ, which affects both Date objects and Intl.DateTimeFormat operations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/time.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import { test, expect } from "bun:test";

test("Welcome to California!", () => {
  process.env.TZ = "America/Los_Angeles";
  expect(new Date().getTimezoneOffset()).toBe(420);
  expect(new Intl.DateTimeFormat().resolvedOptions().timeZone).toBe(
    "America/Los_Angeles",
  );
});

test("Welcome to New York!", () => {
  // Unlike in Jest, you can set the timezone multiple times at runtime and it will work.
  process.env.TZ = "America/New_York";
  expect(new Date().getTimezoneOffset()).toBe(240);
  expect(new Intl.DateTimeFormat().resolvedOptions().timeZone).toBe(
    "America/New_York",
  );
});
```

----------------------------------------

TITLE: Installing LLVM 19 (Arch)
DESCRIPTION: Installs LLVM, Clang, and LLD on Arch Linux using pacman. This provides the necessary compiler and linker tools for building Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_10

LANGUAGE: bash
CODE:
```
$ sudo pacman -S llvm clang lld
```

----------------------------------------

TITLE: Basic .env File Structure in Bun
DESCRIPTION: A simple example of an .env file showing environment variable definitions that Bun automatically loads.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_0

LANGUAGE: txt
CODE:
```
FOO=hello
BAR=world
```

----------------------------------------

TITLE: Enabling Code Coverage in Bun Tests
DESCRIPTION: Activates coverage reporting for Bun tests. Can be overridden with the --coverage CLI flag.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_10

LANGUAGE: toml
CODE:
```
[test]
coverage = false
```

----------------------------------------

TITLE: Builtin Function Registration in C++
DESCRIPTION: Demonstrates how to register a builtin function in C++ using the code generator pattern. Shows integration between TypeScript functions and the JSC virtual machine.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/js/README.md#2025-04-22_snippet_2

LANGUAGE: cpp
CODE:
```
object->putDirectBuiltinFunction(\n  vm,\n  globalObject,\n  identifier,\n  // ReadableStream.ts, `function readableStreamToJSON()`\n  // This returns a FunctionExecutable* (extends JSCell*, but not JSFunction*).\n  readableStreamReadableStreamToJSONCodeGenerator(vm),\n  JSC::PropertyAttribute::DontDelete | 0\n);
```

----------------------------------------

TITLE: Checking Bun installation version
DESCRIPTION: This snippet demonstrates how to check the installed version of Bun and view the precise commit of the installation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/installation.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
$ bun --version
1.x.y

$ bun --revision
1.x.y+b7982ac13189
```

----------------------------------------

TITLE: Installing Bun Dependencies (macOS)
DESCRIPTION: Installs required dependencies for Bun development on macOS using Homebrew. This includes build tools, compilers, and other essential libraries.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ brew install automake ccache cmake coreutils gnu-sed go icu4c libiconv libtool ninja pkg-config rust ruby
```

----------------------------------------

TITLE: Configuring FileSink Buffer Size in TypeScript
DESCRIPTION: This snippet shows how to configure the buffer size of a FileSink using the highWaterMark option. It sets the buffer size to 1MB, which determines when the FileSink will auto-flush.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/filesink.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const file = Bun.file("/path/to/file.txt");
const writer = file.writer({ highWaterMark: 1024 * 1024 }); // 1MB
```

----------------------------------------

TITLE: Test File Pattern Configuration in Bun
DESCRIPTION: Defines the file patterns that Bun's test runner will automatically detect and execute tests from.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/run-tests.md#2025-04-22_snippet_0

LANGUAGE: txt
CODE:
```
*.test.{js|jsx|ts|tsx}
*_test.{js|jsx|ts|tsx}
*.spec.{js|jsx|ts|tsx}
*_spec.{js|jsx|ts|tsx}
```

----------------------------------------

TITLE: Error Handling When Creating TypedArrays with Incompatible Buffer Sizes (JavaScript/TypeScript)
DESCRIPTION: This snippet illustrates a common error when instantiating a typed array (Uint32Array) from an ArrayBuffer whose length isn't a multiple of the element size. Uint32Array requires 4-byte alignment, so initializing from a 10-byte buffer throws a RangeError. Demonstrates importance of buffer length validation, and is relevant for applications performing direct memory manipulations. No dependencies are required other than a modern JavaScript/TypeScript runtime; throws an exception if the byte length is incompatible.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_8

LANGUAGE: TypeScript
CODE:
```
const buf = new ArrayBuffer(10);
const arr = new Uint32Array(buf);
//          ^  RangeError: ArrayBuffer length minus the byteOffset
//             is not a multiple of the element size
```

----------------------------------------

TITLE: Running Performance Analysis Script for Bun Project
DESCRIPTION: A bash command that executes a Node.js script called read-frames.js with environment variables set for the Bun project and a sleep interval of 8 seconds.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/hot-module-reloading/css-stress-test/bun.latest.8ms.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
SLEEP_INTERVAL=8 PROJECT=bun node read-frames.js
```

----------------------------------------

TITLE: Returning String from C to JavaScript using N-API
DESCRIPTION: Example showing how to create and return a string from C to JavaScript using N-API functions.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cc.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
import { cc } from "bun:ffi";
import source from "./hello.c" with { type: "file" };

const {
  symbols: { hello },
} = cc({
  source,
  symbols: {
    hello: {
      args: ["napi_env"],
      returns: "napi_value",
    },
  },
});

const result = hello();
```

----------------------------------------

TITLE: Starting Vite Dev Server with Bun
DESCRIPTION: Launches Vite development server using Bun runtime instead of Node.js with the --bun flag
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/vite.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
bunx --bun vite
```

----------------------------------------

TITLE: JSX Fragment Output with Custom Configuration
DESCRIPTION: Shows how JSX fragments are transpiled when using custom factory and fragment settings, demonstrating the transformation of fragment syntax to function calls.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_13

LANGUAGE: tsx
CODE:
```
// input
<>Hello</>;

// output
import { myjsx, MyFragment } from "react";
myjsx(MyFragment, null, "Hello");
```

----------------------------------------

TITLE: Generated JavaScript Output After Bun Color Macro Processing
DESCRIPTION: This JavaScript code shows the result after bundling the TypeScript source with `bun build`. The `import` statement and the `color` macro call have been removed, and the `console.log` now directly contains the string literal `"red"`, which is the computed result of `color("#f00", "css")` evaluated at bundle time.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/color.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
```js
// client-side.ts
console.log("red");
```
```

----------------------------------------

TITLE: Running Bun HTTP Benchmarks with load testing tool
DESCRIPTION: Command for measuring HTTP server performance using http_load_test, relevant to the benchmarks showing Bun's impressive request handling capabilities of up to 260,000 requests per second.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/benchmarks.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ ./http_load_test  20 127.0.0.1 3000
```

----------------------------------------

TITLE: Equivalent Expanded CSS After Composition - CSS
DESCRIPTION: This snippet represents the equivalent CSS output if the 'composes' logic were manually applied, flattening the composed rules together. It's meant to illustrate how multiple classes' properties result in a single expanded definition. There are no dependencies or actual transformation, and the input is straightforward CSS selectors; output is explicit merged rules. Limitation: For demonstration only; actual output depends on Bun's CSS module transformation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css_modules.md#2025-04-22_snippet_5

LANGUAGE: css
CODE:
```
.button {
  background-color: blue;
  color: red;
}

.background {
  background-color: blue;
}

```

----------------------------------------

TITLE: Configuring Bun Debugger in launch.json for Visual Studio Code
DESCRIPTION: This snippet shows how to configure the launch.json file to debug JavaScript and TypeScript files using Bun in Visual Studio Code. It includes settings for launching and attaching to Bun processes.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-vscode/README.md#2025-04-22_snippet_0

LANGUAGE: jsonc
CODE:
```
{
  "version": "0.2.0",
  "configurations": [
    {
      "type": "bun",
      "request": "launch",
      "name": "Debug Bun",
      "program": "${file}",
      "args": [],
      "cwd": "${workspaceFolder}",
      "env": {},
      "strictEnv": false,
      "watchMode": false,
      "stopOnEntry": false,
      "noDebug": false,
      "runtime": "bun",
      "runtimeArgs": []
    },
    {
      "type": "bun",
      "request": "attach",
      "name": "Attach to Bun",
      "url": "ws://localhost:6499/"
    }
  ]
}
```

----------------------------------------

TITLE: Configuring Bytecode Output in Bun Build (CLI)
DESCRIPTION: Command-line interface for generating bytecode to improve application startup times.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_65

LANGUAGE: bash
CODE:
```
$ bun build ./index.tsx --outdir ./out --bytecode
```

----------------------------------------

TITLE: Starting Bun with PM2 using --interpreter Option
DESCRIPTION: Command to start a Bun application as a daemon process using PM2's --interpreter flag to specify the Bun binary path.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/pm2.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pm2 start --interpreter ~/.bun/bin/bun index.ts
```

----------------------------------------

TITLE: Macro Import Usage Example
DESCRIPTION: Demonstrates how to import and use a macro function using import attributes syntax.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/macros.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { random } from './random.ts' with { type: 'macro' };

console.log(`Your random number is ${random()}`);
```

----------------------------------------

TITLE: Running Bun Debug Build
DESCRIPTION: Runs the debug build of Bun located at `./build/debug/bun-debug` and prints the version number.  This verifies that the build process was successful.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_17

LANGUAGE: bash
CODE:
```
$ build/debug/bun-debug --version
```

----------------------------------------

TITLE: Running DOM Tests with Bun Test Command
DESCRIPTION: Example output from running a DOM test with Bun's test runner, showing successful execution of a simple DOM test.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/dom.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
$ bun test
bun test v$BUN_LATEST_VERSION

dom.test.ts:
✓ dom test [0.82ms]

 1 pass
 0 fail
 1 expect() calls
Ran 1 tests across 1 files. 1 total [125.00ms]
```

----------------------------------------

TITLE: Excluding Test Files from Coverage Reports
DESCRIPTION: Configures the coverage reporter to skip test files (such as *.test.ts) when generating coverage reports.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/configuration.md#2025-04-22_snippet_4

LANGUAGE: toml
CODE:
```
[test]
coverageSkipTestFiles = true  # Exclude test files from coverage reports
```

----------------------------------------

TITLE: Configuring Coverage Reporters in bunfig.toml
DESCRIPTION: This configuration shows how to specify coverage reporters and output directory in bunfig.toml. You can choose between text (console output) and lcov (file-based) reporters and set a custom directory for coverage reports.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/coverage.md#2025-04-22_snippet_6

LANGUAGE: toml
CODE:
```
[test]
coverageReporter  = ["text", "lcov"]  # default ["text"]
coverageDir = "path/to/somewhere"  # default "coverage"
```

----------------------------------------

TITLE: Marking Peer Dependencies as Optional
DESCRIPTION: Demonstrates how to mark peer dependencies as optional in package.json using the peerDependenciesMeta field, which affects how bun install will handle these dependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/add-peer.md#2025-04-22_snippet_2

LANGUAGE: json-diff
CODE:
```
{
  "peerDependencies": {
    "@types/bun": "^$BUN_LATEST_VERSION"
  },
  "peerDependenciesMeta": {
+   "@types/bun": {
+     "optional": true
+   }
  }

}
```

----------------------------------------

TITLE: Advanced Argument Configuration with Argument Class
DESCRIPTION: Demonstrates advanced argument configuration by explicitly using the Argument class. This allows for additional features like specifying choices for arguments and setting default values with descriptions.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
program
  .addArgument(new commander.Argument('<drink-size>', 'drink cup size').choices(['small', 'medium', 'large']))
  .addArgument(new commander.Argument('[timeout]', 'timeout in seconds').default(60, 'one minute'))
```

----------------------------------------

TITLE: Package.json with Conditional Subpath Exports
DESCRIPTION: Shows how to configure both subpath exports and conditional exports together.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_14

LANGUAGE: json
CODE:
```
{
  "name": "foo",
  "exports": {
    ".": {
      "import": "./index.mjs",
      "require": "./index.js"
    }
  }
}
```

----------------------------------------

TITLE: Deep Equality Checking with Bun.deepEquals()
DESCRIPTION: Demonstrates how to use Bun.deepEquals() for recursive object comparison, including strict mode for more precise equality checks.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
const foo = { a: 1, b: 2, c: { d: 3 } };

// true
Bun.deepEquals(foo, { a: 1, b: 2, c: { d: 3 } });

// false
Bun.deepEquals(foo, { a: 1, b: 2, c: { d: 4 } });
```

LANGUAGE: typescript
CODE:
```
const a = { entries: [1, 2] };
const b = { entries: [1, 2], extra: undefined };

Bun.deepEquals(a, b); // => true
Bun.deepEquals(a, b, true); // => false
```

LANGUAGE: typescript
CODE:
```
// undefined values
Bun.deepEquals({}, { a: undefined }, true); // false

// undefined in arrays
Bun.deepEquals(["asdf"], ["asdf", undefined], true); // false

// sparse arrays
Bun.deepEquals([, 1], [undefined, 1], true); // false

// object literals vs instances w/ same properties
class Foo {
  a = 1;
}
Bun.deepEquals(new Foo(), { a: 1 }, true); // false
```

----------------------------------------

TITLE: Converting ArrayBuffer to Blob Using TypeScript
DESCRIPTION: This snippet demonstrates how to construct a Blob object from a 64-byte ArrayBuffer in TypeScript. It requires no external dependencies, relying solely on the Web API. The ArrayBuffer is wrapped in an array as a 'chunk' and passed to the Blob constructor. The created Blob can then be manipulated or sent across web APIs that support binary data. The result is a Blob with unspecified MIME type.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/arraybuffer-to-blob.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
const buf = new ArrayBuffer(64);
const blob = new Blob([buf]);
```

----------------------------------------

TITLE: Running Bun Tests in Watch Mode
DESCRIPTION: This command runs Bun tests in watch mode, which automatically restarts the test process when file changes are detected. It's useful for continuous testing during development.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/watch-mode.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun test --watch
```

----------------------------------------

TITLE: Cleaning Up File Watchers on Process Termination in Bun
DESCRIPTION: This snippet demonstrates how to properly close a file watcher when the process receives a SIGINT signal (Ctrl-C), ensuring clean termination of the watching process.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/read-file/watch.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { watch } from "fs";

const watcher = watch(import.meta.dir, (event, filename) => {
  console.log(`Detected ${event} in ${filename}`);
});

process.on("SIGINT", () => {
  // close watcher when Ctrl-C is pressed
  console.log("Closing watcher...");
  watcher.close();

  process.exit(0);
});
```

----------------------------------------

TITLE: Configuring drop in Bun Build (CLI)
DESCRIPTION: Command-line interface for removing function calls from bundles.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_59

LANGUAGE: bash
CODE:
```
$ bun build ./index.tsx --outdir ./out --drop=console --drop=debugger --drop=anyIdentifier.or.propertyAccess
```

----------------------------------------

TITLE: Using JSX Component in TypeScript React with Bun
DESCRIPTION: A simple TypeScript React component example showing JSX syntax that Bun can transpile natively. The component takes a message prop and renders it inside an h1 element with red styling.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
function Component(props: {message: string}) {
  return (
    <body>
      <h1 style={{color: 'red'}}>{props.message}</h1>
    </body>
  );
}

console.log(<Component message="Hello world!" />);
```

----------------------------------------

TITLE: Starting the Expo App
DESCRIPTION: Command to start the Expo app using npx, which runs the expo start script.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/integration/expo-app/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx expo start
```

----------------------------------------

TITLE: Setting up Bun Lambda Layer with Git and Bun CLI
DESCRIPTION: Commands to clone the Bun repository, set up sparse checkout for the bun-lambda package, and publish the layer using Bun CLI.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-lambda/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
git clone --filter=blob:none --sparse https://github.com/oven-sh/bun.git
git -C bun sparse-checkout set packages/bun-lambda
cd bun/packages/bun-lambda
bun install
bun run publish-layer
```

----------------------------------------

TITLE: Writing to stdout in Bun without trailing newline
DESCRIPTION: Shows how to write directly to stdout in Bun using console.write without adding a trailing newline, which works with both strings and typed arrays.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/benchmarks.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
// no trailing newline
// works with strings and typed arrays
console.write("Hello World!");
```

----------------------------------------

TITLE: Configuring access in publishConfig Field - JSON
DESCRIPTION: Presents a sample `package.json` section that configures the access level (here, "restricted") in the `publishConfig` field. This method allows persistent configuration of access level for publishes, which can be overridden on the command line. Requires package.json to be set up in the project root. This configuration is picked up automatically by Bun when publishing.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/publish.md#2025-04-22_snippet_3

LANGUAGE: json
CODE:
```
{\n  "publishConfig": {\n    "access": "restricted"\n  }\n}
```

----------------------------------------

TITLE: Compiler Flags Configuration in cc
DESCRIPTION: Type definition and example for passing compiler flags to TinyCC through the cc function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cc.md#2025-04-22_snippet_9

LANGUAGE: ts
CODE:
```
type Flags = string | string[];
```

----------------------------------------

TITLE: Spelling Suggestion Output Example in Commander.js
DESCRIPTION: This shows the console output when a user makes a typing error in an option, displaying the error message with a suggestion for the correct spelling.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_29

LANGUAGE: text
CODE:
```
$ pizza --hepl
error: unknown option '--hepl'
(Did you mean --help?)
```

----------------------------------------

TITLE: Writing to stdout using Bun.write in TypeScript
DESCRIPTION: Shows how to write to stdout using Bun.write() with Bun.stdout as the destination. This method provides more advanced control over stdout operations and is asynchronous.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/stdout.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await Bun.write(Bun.stdout, "Lorem ipsum");
```

----------------------------------------

TITLE: Prefetching DNS Entries using Bun DNS API in TypeScript
DESCRIPTION: This snippet demonstrates how to use the `dns.prefetch` function from Bun's `dns` module to initiate a DNS lookup for a specified host ahead of time. This can help reduce latency when an actual connection to the host is made later, as the DNS resolution step might already be completed and cached. It requires the `bun` runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_23

LANGUAGE: typescript
CODE:
```
```ts
import { dns } from "bun";

dns.prefetch("bun.sh");
```
```

----------------------------------------

TITLE: React Application Entry Point
DESCRIPTION: This is a simple React application entry point that imports ReactDOM and a component, then renders the component to the DOM.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
import * as ReactDOM from 'react-dom/client';
import {Component} from "./Component"

const root = ReactDOM.createRoot(document.getElementById('root')!);
root.render(<Component message="Sup!" />)
```

----------------------------------------

TITLE: Configuring SSL/TLS Modes in Bun SQL Client (Object Configuration) - TypeScript
DESCRIPTION: Shows how to set the desired SSL/TLS connection mode (e.g., 'disable', 'require', 'verify-full') using the `ssl` property within the configuration object passed to the `SQL` constructor. This controls whether and how SSL/TLS encryption and certificate verification are used for the database connection.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_20

LANGUAGE: typescript
CODE:
```
```ts
const sql = new SQL({
  hostname: "localhost",
  username: "user",
  password: "password",
  ssl: "disable", // | "prefer" | "require" | "verify-ca" | "verify-full"
});
```
```

----------------------------------------

TITLE: Filtering Bun Tests by Name using Shell Command
DESCRIPTION: Shows how to filter tests based on their names using the `--test-name-pattern` (or `-t`) flag. This command will execute only the tests or test suites whose names contain the specified string (e.g., "addition").
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
# run all tests or test suites with "addition" in the name
$ bun test --test-name-pattern addition
```

----------------------------------------

TITLE: Testing NODE_ENV Environment Variable in Bun Test Runner (TypeScript)
DESCRIPTION: This snippet demonstrates how to test that the NODE_ENV environment variable is automatically set to 'test' when running tests with Bun. It uses the `bun:test` module for assertions.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/runtime-behavior.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { test, expect } from "bun:test";

test("NODE_ENV is set to test", () => {
  expect(process.env.NODE_ENV).toBe("test");
});
```

----------------------------------------

TITLE: Type Definition for Bun.embeddedFiles in TypeScript
DESCRIPTION: This snippet shows the TypeScript type definition for the `Bun.embeddedFiles` property. It indicates that `Bun.embeddedFiles` returns an array of `Blob` objects, allowing access to properties like size and content of each embedded file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/executables.md#2025-04-22_snippet_6

LANGUAGE: ts
CODE:
```
embeddedFiles: Blob[]
```

----------------------------------------

TITLE: Converting Buffer to ArrayBuffer with Node.js in TypeScript
DESCRIPTION: This snippet demonstrates how to allocate a Node.js Buffer of 64 bytes and then access its underlying ArrayBuffer by referencing the 'buffer' property. This is useful for interoperability between APIs expecting ArrayBuffer and those using Node.js Buffer. There are no external dependencies beyond Node.js built-in modules. The key parameter is the Buffer length (64), and the output is the underlying ArrayBuffer instance extracted from the Buffer. It is important to note that modifications to the Buffer and its ArrayBuffer may be interrelated depending on slicing and views.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/buffer-to-arraybuffer.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
const nodeBuf = Buffer.alloc(64);
const arrBuf = nodeBuf.buffer;
```

----------------------------------------

TITLE: Installing Dependencies and Running Bun Scripts
DESCRIPTION: This snippet demonstrates how to install project dependencies using npm and run various scripts using Bun. It includes commands for running FFI, logging, gzip, async, and SQLite scripts. Additionally, it shows how to use a custom Bun binary version.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install

bun run ffi
bun run log
bun run gzip
bun run async
bun run sqlite

# to use custom version of bun/deno/node binary
BUN=path/to/bun bun run ffi
# or edit .env file
```

----------------------------------------

TITLE: Simple Cat Command Implementation
DESCRIPTION: 3-line implementation of Linux cat command using Bun APIs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-io.md#2025-04-22_snippet_16

LANGUAGE: typescript
CODE:
```
// Usage
// $ bun ./cat.ts ./path-to-file

import { resolve } from "path";

const path = resolve(process.argv.at(-1));
await Bun.write(Bun.stdout, Bun.file(path));
```

----------------------------------------

TITLE: Transpiler Interface Definition
DESCRIPTION: Complete TypeScript interface definition for the Bun.Transpiler class and its options
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/transpiler.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
type Loader = "jsx" | "js" | "ts" | "tsx";

interface TranspilerOptions {
  define?: Record<string, string>,
  loader?: Loader,
  target?: "browser" | "bun" | "node",
  tsconfig?: string | TSConfig,
  macro?: MacroMap,
  exports?: {
      eliminate?: string[];
      replace?: Record<string, string>;
  },
  trimUnusedImports?: boolean,
  minifyWhitespace?: boolean,
  inline?: boolean,
}

interface MacroMap {
  [packagePath: string]: {
    [importItemName: string]: string,
  },
}

class Bun.Transpiler {
  constructor(options: TranspilerOptions)

  transform(code: string, loader?: Loader): Promise<string>
  transformSync(code: string, loader?: Loader): string

  scan(code: string): {exports: string[], imports: Import}
  scanImports(code: string): Import[]
}

const transpiler = new Bun.Transpiler({ loader: "jsx" });
```

----------------------------------------

TITLE: Creating a PM2 Configuration File for Bun
DESCRIPTION: A PM2 configuration file that specifies Bun as the interpreter for running a TypeScript application. It includes environment configuration to ensure the Bun binary is in the PATH.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/pm2.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  name: "app", // Name of your application
  script: "index.ts", // Entry point of your application
  interpreter: "bun", // Bun interpreter
  env: {
    PATH: `${process.env.HOME}/.bun/bin:${process.env.PATH}`, // Add "~/.bun/bin/bun" to PATH
  }
};
```

----------------------------------------

TITLE: TypeScript Path Mapping Usage Example
DESCRIPTION: Demonstration of using path mapped imports in TypeScript with Bun runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/typescript.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { foo } from "data";
console.log(foo); // => "Hello world!"
```

LANGUAGE: typescript
CODE:
```
export const foo = "Hello world!"
```

----------------------------------------

TITLE: Configuring Scoped Registry in bunfig.toml for Bun
DESCRIPTION: Sets a specific registry URL for packages under a particular scope using the install.scopes option in bunfig.toml. This is the Bun-specific equivalent to the scoped registry configuration in .npmrc.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/npmrc.md#2025-04-22_snippet_3

LANGUAGE: toml
CODE:
```
[install.scopes]
myorg = "http://localhost:4873/"
```

----------------------------------------

TITLE: Executing bun unlink Command in Bash
DESCRIPTION: This snippet demonstrates navigating into a local package directory (`/path/to/cool-pkg`) using the `cd` command and then running the `bun unlink` command with the Bun CLI. The output shows the Bun version and a commit hash, indicating the successful execution of the unlink operation, which removes the symbolic link for the local package.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/unlink.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ cd /path/to/cool-pkg
$ bun unlink
bun unlink v1.x (7416672e)
```

----------------------------------------

TITLE: Generating Test File for Upload Benchmark in Bash
DESCRIPTION: Command to generate a test file (default 'hello.txt') for the upload benchmark using the Bun runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/stream-file-upload-client/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
bun generate-file.js
```

----------------------------------------

TITLE: Creating a Simple Bun Web Server for Debugging
DESCRIPTION: A minimal TypeScript example of a Bun web server that responds with "Hello, world!" and logs the request URL. This server will be used to demonstrate debugging capabilities.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/web-debugger.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
Bun.serve({
  fetch(req){
    console.log(req.url);
    return new Response("Hello, world!");
  }
})
```

----------------------------------------

TITLE: Setting Blob MIME Type Explicitly Using TypeScript
DESCRIPTION: This snippet illustrates how to create a Blob from an ArrayBuffer and specify its MIME type in TypeScript. The Blob constructor is provided with the ArrayBuffer and a configuration object that sets the 'type' parameter to 'application/octet-stream'. This ensures that the resulting Blob advertises the appropriate type, which can be accessed via the blob.type property. Useful for uploading or transferring binary data where Content-Type must be explicit.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/arraybuffer-to-blob.md#2025-04-22_snippet_1

LANGUAGE: TypeScript
CODE:
```
const buf = new ArrayBuffer(64);
const blob = new Blob([buf], { type: "application/octet-stream" });
blob.type; // => "application/octet-stream"
```

----------------------------------------

TITLE: Checking Service Status
DESCRIPTION: Command to check the status of a running Bun service with example output showing service details, PID, memory usage, and more.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/systemd.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
$ sudo systemctl status my-app
● my-app.service - My App
     Loaded: loaded (/lib/systemd/system/my-app.service; enabled; preset: enabled)
     Active: active (running) since Thu 2023-10-12 11:34:08 UTC; 1h 8min ago
   Main PID: 309641 (bun)
      Tasks: 3 (limit: 503)
     Memory: 40.9M
        CPU: 1.093s
     CGroup: /system.slice/my-app.service
             └─309641 /home/YOUR_USER/.bun/bin/bun run /home/YOUR_USER/application/index.ts
```

----------------------------------------

TITLE: Cloning a GitHub Repository for Bun App Deployment
DESCRIPTION: Commands to clone a GitHub repository named 'myapp' into a local directory and change into that directory for further operations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/render.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ git clone git@github.com:my-github-username/myapp.git
$ cd myapp
```

----------------------------------------

TITLE: Build Release Version of Bun
DESCRIPTION: This command executes the `build:release` script to compile a release build of Bun.  The release build is optimized for performance and is located in the `./build/release` directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_19

LANGUAGE: bash
CODE:
```
$ bun run build:release
```

----------------------------------------

TITLE: FileSystemRouter API Reference
DESCRIPTION: Complete TypeScript interface definition for the FileSystemRouter class, including constructor parameters and methods. Shows the expected input and output types for all operations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-system-router.md#2025-04-22_snippet_6

LANGUAGE: ts
CODE:
```
interface Bun {
  class FileSystemRouter {
    constructor(params: {
      dir: string;
      style: "nextjs";
      origin?: string;
      assetPrefix?: string;
      fileExtensions?: string[];
    });

    reload(): void;

    match(path: string | Request | Response): {
      filePath: string;
      kind: "exact" | "catch-all" | "optional-catch-all" | "dynamic";
      name: string;
      pathname: string;
      src: string;
      params?: Record<string, string>;
      query?: Record<string, string>;
    } | null
  }
}
```

----------------------------------------

TITLE: Setting Up Compilers and SDKs for Bun Project
DESCRIPTION: Configures compilers and SDKs based on the host system, including Mac SDK, LLVM, and Ccache.
SOURCE: https://github.com/oven-sh/bun/blob/main/CMakeLists.txt#2025-04-22_snippet_3

LANGUAGE: CMake
CODE:
```
if(CMAKE_HOST_APPLE)
  include(SetupMacSDK)
endif()
include(SetupLLVM)
include(SetupCcache)
```

----------------------------------------

TITLE: Implementing an `onBeforeParse` Native Plugin Hook in Rust
DESCRIPTION: Defines a Rust function `replace_foo_with_bar` that implements the `onBeforeParse` lifecycle hook for a Bun native plugin. It uses the `bun_native_plugin` crate and its `#[bun]` macro to handle boilerplate. The function reads the input source code, replaces all occurrences of 'foo' with 'bar', and sets the modified code as the output along with the JSX loader.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/plugins.md#2025-04-22_snippet_10

LANGUAGE: rust
CODE:
```
use bun_native_plugin::{define_bun_plugin, OnBeforeParse, bun, Result, anyhow, BunLoader};
use napi_derive::napi;

/// Define the plugin and its name
define_bun_plugin!("replace-foo-with-bar");

/// Here we'll implement `onBeforeParse` with code that replaces all occurrences of
/// `foo` with `bar`.
///
/// We use the #[bun] macro to generate some of the boilerplate code.
///
/// The argument of the function (`handle: &mut OnBeforeParse`) tells
/// the macro that this function implements the `onBeforeParse` hook.
#[bun]
pub fn replace_foo_with_bar(handle: &mut OnBeforeParse) -> Result<()> {
  // Fetch the input source code.
  let input_source_code = handle.input_source_code()?;

  // Get the Loader for the file
  let loader = handle.output_loader();


  let output_source_code = input_source_code.replace("foo", "bar");

  handle.set_output_source_code(output_source_code, BunLoader::BUN_LOADER_JSX);

  Ok(())
}
```

----------------------------------------

TITLE: ESM Module Import
DESCRIPTION: Imports the Node.js built-in URL module using ECMAScript Modules (ESM) syntax. Uses the 'node:' protocol prefix for explicit Node.js core module import.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/document_with_esm_and_cjs_code_snippet.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import 'node:url';
```

----------------------------------------

TITLE: Saving HTTP Responses to Files in Bun
DESCRIPTION: Example showing how to fetch content from a website and save it directly to a file using Bun.write. The code demonstrates Bun's ability to work with Response objects by automatically converting them to Blobs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/benchmarks.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
// Eventually, this will stream the response to disk but today it buffers
await Bun.write("index.html", await fetch("https://example.com"));
```

----------------------------------------

TITLE: Installing Express with Bun Package Manager
DESCRIPTION: Command to add the Express.js framework as a dependency using Bun's package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/render.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
$ bun add express
```

----------------------------------------

TITLE: Deleting Cookies in Bun Server
DESCRIPTION: Demonstrates how to delete cookies using the cookies.delete() method. When a cookie is deleted, it becomes a Set-Cookie header on the response with maxAge set to 0 and an empty value.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_22

LANGUAGE: typescript
CODE:
```
Bun.serve({
  routes: {
    "/logout": req => {
      // Delete the user_id cookie
      req.cookies.delete("user_id", {
        path: "/",
      });

      return new Response("Logged out successfully");
    },
  },
});
```

----------------------------------------

TITLE: Rebuilding JSC
DESCRIPTION: Rebuilds JSC after an initial build. This is faster than a full `make jsc-debug`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_27

LANGUAGE: bash
CODE:
```
$ cmake --build vendor/WebKit/WebKitBuild/Debug --target jsc && rm vendor/WebKit/WebKitBuild/Debug/JavaScriptCore/DerivedSources/inspector/InspectorProtocolObjects.h
```

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the application locally for development and testing purposes.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/integration/next-pages/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Detecting Bun Runtime using Process Versions
DESCRIPTION: Alternative method to detect Bun runtime by checking process.versions.bun. This approach works in TypeScript environments without requiring bun-types to be globally installed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/detect-bun.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
if (process.versions.bun) {
  // this code will only run when the file is run with Bun
}
```

----------------------------------------

TITLE: Running Test Files in Bun
DESCRIPTION: Shows various ways to execute test files in Bun, including direct execution and using the test runner. Some tests require the bun test command due to node:test module shimming.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/parallel/needs-test/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
bun <filename>
```

LANGUAGE: shell
CODE:
```
bun test <filename>
```

----------------------------------------

TITLE: Default Console Output Example in Bun Test
DESCRIPTION: Shows the default human-readable console output format when running tests with Bun in a color-supporting terminal.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/reporters.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
test/package-json-lint.test.ts:
✓ test/package.json [0.88ms]
✓ test/js/third_party/grpc-js/package.json [0.18ms]
✓ test/js/third_party/svelte/package.json [0.21ms]
✓ test/js/third_party/express/package.json [1.05ms]

 4 pass
 0 fail
 4 expect() calls
Ran 4 tests in 1.44ms
```

----------------------------------------

TITLE: Type Signature for Native `onBeforeParse` Hook (TypeScript)
DESCRIPTION: Provides the TypeScript type signature for the `onBeforeParse` method when configuring a native plugin callback. It shows the expected arguments: filtering options (`filter`, `namespace`) and the callback configuration specifying the NAPI module (`napiModule`), the exported symbol (`symbol`), and optional external data (`external`). This hook runs before parsing and must be thread-safe.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/plugins.md#2025-04-22_snippet_12

LANGUAGE: typescript
CODE:
```
onBeforeParse(
  args: { filter: RegExp; namespace?: string },
  callback: { napiModule: NapiModule; symbol: string; external?: unknown },
): void;
```

----------------------------------------

TITLE: JSX Transformation with 'react-jsxdev' Option
DESCRIPTION: Configuration for transforming JSX using the 'react-jsxdev' option, which is similar to 'react-jsx' but includes additional parameters for development debugging.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_6

LANGUAGE: json
CODE:
```
{
  "jsx": "react-jsxdev"
}
```

----------------------------------------

TITLE: Plugin State Usage in JavaScript
DESCRIPTION: Example of using plugin state management from JavaScript
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-native-plugin-rs/README.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
const napiModule = require("path/to/napi_module.node");
const pluginState = napiModule.createPluginState();

const result = await Bun.build({
  entrypoints: ["index.ts"],
  plugins: [
    {
      name: "replace-foo-with-bar",
      setup(build) {
        build.onBeforeParse(
          { filter: /\.ts/ },
          {
            napiModule,
            symbol: "on_before_parse_plugin_impl",
            // pass our NAPI external which contains our plugin state here
            external: pluginState,
          },
        );
      },
    },
  ],
});

console.log("Total `foo`s encountered: ", pluginState.getFooCount());
```

----------------------------------------

TITLE: Installing Bun on Windows using Scoop
DESCRIPTION: This snippet shows how to install Bun on Windows using the Scoop package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/installation.md#2025-04-22_snippet_6

LANGUAGE: powershell
CODE:
```
> scoop install bun
```

----------------------------------------

TITLE: Declaring 'bun' Module Types in TypeScript
DESCRIPTION: This snippet demonstrates how to declare types, interfaces, and functions for the 'bun' module using the 'declare module' syntax. It shows how to define both types/interfaces and runtime values.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-types/authoring.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
declare module "bun" {
  // Your types go here
  interface MyInterface {
    // ...
  }

  type MyType = string | number;

  function myFunction(): void;
}
```

----------------------------------------

TITLE: Creating Happy DOM Registrator Setup File in TypeScript
DESCRIPTION: TypeScript file that registers Happy DOM's global browser APIs to make them available in the global scope for testing.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/dom.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { GlobalRegistrator } from "@happy-dom/global-registrator";

GlobalRegistrator.register();
```

----------------------------------------

TITLE: Running File Upload Benchmark in Deno Environment
DESCRIPTION: Command to execute the file upload benchmark using the Deno runtime with all permissions enabled.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/stream-file-upload-client/README.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
deno run -A stream-file-deno.js
```

----------------------------------------

TITLE: Defining Function Variants in TypeScript for Bun Bindings
DESCRIPTION: Demonstrates how to define multiple variants (overloads) of a function using the 'variants' property in the binding definition. This allows for different argument types and return types for the same function name.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/bindgen.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { t, fn } from 'bindgen';

export const action = fn({
  variants: [
    {
      args: {
        a: t.i32,
      },
      ret: t.i32,
    },
    {
      args: {
        a: t.DOMString,
      },
      ret: t.DOMString,
    },
  ]
});
```

----------------------------------------

TITLE: Printing Expanded SQL with toString() on Statements (TypeScript)
DESCRIPTION: Shows how calling toString() on a Statement instance in Bun yields the bound, expanded SQL string for easier debugging. Each subsequent call after .run binds, displays a new expanded query. Requires importing Database from 'bun:sqlite' and using named parameters or direct values.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_17

LANGUAGE: TypeScript
CODE:
```
import { Database } from "bun:sqlite";

// setup
const query = db.query("SELECT $param;");

console.log(query.toString()); // => "SELECT NULL"

query.run(42);
console.log(query.toString()); // => "SELECT 42"

query.run(365);
console.log(query.toString()); // => "SELECT 365"

```

----------------------------------------

TITLE: Serializing and Deserializing SQLite Database in Bun
DESCRIPTION: This code snippet shows how to serialize a SQLite database to a Uint8Array and then deserialize it back into a database object. This is useful for database backups or transfers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
const olddb = new Database("mydb.sqlite");
const contents = olddb.serialize(); // => Uint8Array
const newdb = Database.deserialize(contents);
```

----------------------------------------

TITLE: Enabling Compression for Individual Messages (TypeScript)
DESCRIPTION: This example shows how to enable compression for individual messages by passing a boolean as the second argument to the `ws.send()` method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/websockets.md#_snippet_10

LANGUAGE: typescript
CODE:
```
ws.send("Hello world", true);
```

----------------------------------------

TITLE: Simple CSS File for Import
DESCRIPTION: A basic CSS file that defines styles for the body element, which will be imported by another CSS file and bundled by Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/html.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
body {
  background-color: red;
}
```

----------------------------------------

TITLE: 24-bit ANSI Color Examples in TypeScript
DESCRIPTION: Examples of converting colors to 24-bit ANSI format (16 million colors) using Bun.color() with 'ansi-16m' output format
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/color.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
Bun.color("red", "ansi-16m"); // "\x1b[38;2;255;0;0m"
Bun.color(0xff0000, "ansi-16m"); // "\x1b[38;2;255;0;0m"
Bun.color("#f00", "ansi-16m"); // "\x1b[38;2;255;0;0m"
Bun.color("#ff0000", "ansi-16m"); // "\x1b[38;2;255;0;0m"
```

----------------------------------------

TITLE: Using findReports from report module
DESCRIPTION: Finds diagnostic report files in a specified directory for a given process ID. Returns an array of report file names that match the process ID.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_17

LANGUAGE: JavaScript
CODE:
```
findReports(pid, dir)
```

----------------------------------------

TITLE: Using Function Pointers with CFunction in FFI
DESCRIPTION: This snippet shows how to use the CFunction class from bun:ffi to call function pointers from JavaScript. It demonstrates defining a single function and multiple functions using linkSymbols.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/ffi.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import { CFunction } from "bun:ffi";

let myNativeLibraryGetVersion = /* somehow, you got this pointer */

const getVersion = new CFunction({
  returns: "cstring",
  args: [],
  ptr: myNativeLibraryGetVersion,
});
getVersion();
```

LANGUAGE: typescript
CODE:
```
import { linkSymbols } from "bun:ffi";

// getVersionPtrs defined elsewhere
const [majorPtr, minorPtr, patchPtr] = getVersionPtrs();

const lib = linkSymbols({
  // Unlike with dlopen(), the names here can be whatever you want
  getMajor: {
    returns: "cstring",
    args: [],

    // Since this doesn't use dlsym(), you have to provide a valid ptr
    // That ptr could be a number or a bigint
    // An invalid pointer will crash your program.
    ptr: majorPtr,
  },
  getMinor: {
    returns: "cstring",
    args: [],
    ptr: minorPtr,
  },
  getPatch: {
    returns: "cstring",
    args: [],
    ptr: patchPtr,
  },
});

const [major, minor, patch] = [
  lib.symbols.getMajor(),
  lib.symbols.getMinor(),
  lib.symbols.getPatch(),
];
```

----------------------------------------

TITLE: Running a TypeScript File with Bun Watch Mode
DESCRIPTION: Example command to run a specific TypeScript file (watchy.tsx) with Bun's --watch mode for automatic reloading.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/hot.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ bun run --watch watchy.tsx
```

----------------------------------------

TITLE: Converting ReadableStream to ArrayBuffer in TypeScript
DESCRIPTION: Two approaches for converting a ReadableStream to an ArrayBuffer: the standard Response-based method and the optimized Bun utility function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_16

LANGUAGE: typescript
CODE:
```
// with Response
new Response(stream).arrayBuffer();

// with Bun function
Bun.readableStreamToArrayBuffer(stream);
```

----------------------------------------

TITLE: Filtering Workspace Dependency Installation
DESCRIPTION: Shows how to use the `--filter` flag with `bun install` in a monorepo context. This allows installing dependencies only for a specific subset of workspaces, either by excluding packages or targeting specific package paths.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/install.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
# Install dependencies for all workspaces except `pkg-c`
$ bun install --filter '!pkg-c'

# Install dependencies for only `pkg-a` in `./packages/pkg-a`
$ bun install --filter './packages/pkg-a'
```

----------------------------------------

TITLE: Deleting Files with S3Client.prototype.delete - TypeScript
DESCRIPTION: Provides an example of deleting a file from an S3 bucket using Bun's S3Client 'delete' method. Shows both direct usage and the equivalent client.file().delete() form. It expects valid credentials and bucket configuration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_20

LANGUAGE: typescript
CODE:
```
const client = new Bun.S3Client({
  accessKeyId: \"your-access-key\",
  secretAccessKey: \"your-secret-key\",
  bucket: \"my-bucket\",
});

await client.delete(\"my-file.txt\");
// equivalent to
// await client.file(\"my-file.txt\").delete();
```

----------------------------------------

TITLE: Defining SVG Chevron Icon for Dropdown
DESCRIPTION: This SVG snippet defines a downward-pointing chevron icon. It's used within a <summary> element, likely indicating a dropdown menu associated with the 'Pricing' navigation link. The icon uses a path element to draw the shape and has styling attributes like fill set to 'none'.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_2

LANGUAGE: svg
CODE:
```
<svg x="0px" y="0px" viewBox="0 0 14 8" xml:space="preserve" fill="none" class="icon-chevon-down-mktg position-absolute position-lg-relative">
                       <path d="M1,1l6.2,6L13,1"></path>
                    </svg>
```

----------------------------------------

TITLE: Defining a GET route in µWebSockets
DESCRIPTION: This snippet demonstrates how to create a simple GET route in µWebSockets that responds with 'Hello World!'. It showcases the basic structure of route handling and response sending.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-uws/misc/READMORE.md#2025-04-22_snippet_0

LANGUAGE: c++
CODE:
```
uWS::App().get("/hello", [](auto *res, auto *req) {
    res->end("Hello World!");
});
```

----------------------------------------

TITLE: Configuring Lockfile Generation in Bun
DESCRIPTION: Configuration for lockfile generation settings, including options to enable/disable lockfile creation and specify alternative lockfile formats.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_31

LANGUAGE: toml
CODE:
```
[install.lockfile]
save = true
```

LANGUAGE: toml
CODE:
```
[install.lockfile]
print = "yarn"
```

----------------------------------------

TITLE: Upgrading Bun using curl install script
DESCRIPTION: This command downloads and executes the Bun installation script, which can be used to upgrade an existing Bun installation or perform a fresh install.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bun-upgrade.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ curl https://bun.sh/install | bash
```

----------------------------------------

TITLE: Configuring Node to Bun Auto-aliasing
DESCRIPTION: Configuration to automatically alias node commands to bun, with example shell commands demonstrating the behavior.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_33

LANGUAGE: toml
CODE:
```
[run]
# equivalent to `bun --bun` for all `bun run` commands
bun = true
```

LANGUAGE: sh
CODE:
```
$ bun --bun which node # /path/to/bun
$ bun which node # /path/to/node
```

----------------------------------------

TITLE: Testing Buffer Stream Processing in Bun
DESCRIPTION: Test case that creates a 1MB buffer filled with sequential numbers, spawns 5 Bun processes to process the buffer through stdin, and verifies the output matches the input. Uses Bun's $ API for process spawning and includes buffer manipulation and Promise handling.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/regression/issue/09041/09041-fixture-test.txt#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";
import {join } from 'path';
test("09041", async () => {
  const buffer = Buffer.alloc(1024 * 1024);
  let i = 0;
  while (i < 1024 * 1024) {
    i += buffer.write(Number(i).toString(10), i);
  }
  const buns = Array.from(
    { length: 5 },
    () => $`${process.argv0} run ${join(import.meta.dir, "09041-fixture.mjs")} < ${buffer}`,
  );

  const runs = await Promise.all(buns);
  for (let i = 0; i < runs.length; i++) {
    const run = runs[i];
    expect(run.exitCode).toBe(0);
    expect(run.stdout).toHaveLength(1024 * 1024);
    expect(run.stdout).toEqual(buffer);
  }
}, 30000);
```

----------------------------------------

TITLE: Grouping Selectors with :is() for Readability and Fallbacks - CSS
DESCRIPTION: Demonstrates the :is() pseudo-class for grouping selectors to reduce repetition, and how Bun provides vendor-prefixed fallbacks (-webkit-any, -moz-any) for legacy browser compatibility. Requires awareness of specificity differences and may need review if vendor-prefixed selector limitations affect intent. Inputs are selector groups; output is cleaner and more maintainable CSS.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_20

LANGUAGE: css
CODE:
```
/* Instead of writing these separately */
/* 
.article h1,
.article h2,
.article h3 {
  margin-top: 1.5em;
}
*/

/* You can write this */
.article :is(h1, h2, h3) {
  margin-top: 1.5em;
}

/* Complex example with multiple groups */
:is(header, main, footer) :is(h1, h2, .title) {
  font-family: "Heading Font", sans-serif;
}
```

LANGUAGE: css
CODE:
```
/* Fallback using -webkit-any */
.article :-webkit-any(h1, h2, h3) {
  margin-top: 1.5em;
}

/* Fallback using -moz-any */
.article :-moz-any(h1, h2, h3) {
  margin-top: 1.5em;
}

/* Original preserved for modern browsers */
.article :is(h1, h2, h3) {
  margin-top: 1.5em;
}

/* Complex example with fallbacks */
:-webkit-any(header, main, footer) :-webkit-any(h1, h2, .title) {
  font-family: "Heading Font", sans-serif;
}

:-moz-any(header, main, footer) :-moz-any(h1, h2, .title) {
  font-family: "Heading Font", sans-serif;
}

:is(header, main, footer) :is(h1, h2, .title) {
  font-family: "Heading Font", sans-serif;
}
```

----------------------------------------

TITLE: Setting Custom Request Timeouts in Bun Server
DESCRIPTION: Demonstrates how to set a custom idle timeout for individual requests using the server.timeout() method. This is useful for long-running requests that might exceed the default timeout.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_18

LANGUAGE: typescript
CODE:
```
const server = Bun.serve({
  fetch(req, server) {
    // Set 60 second timeout for this request
    server.timeout(req, 60);

    // If they take longer than 60 seconds to send the body, the request will be aborted
    await req.text();

    return new Response("Done!");
  },
});
```

----------------------------------------

TITLE: Adjusting Concurrent Lifecycle Scripts
DESCRIPTION: Illustrates how to use the `--concurrent-scripts` flag with `bun install` to control the maximum number of lifecycle scripts that can run in parallel. The default is twice the CPU count or GOMAXPROCS.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/install.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
$ bun install --concurrent-scripts 5
```

----------------------------------------

TITLE: Aborting Bun Test Runs After Failures using Shell Command
DESCRIPTION: Shows how to use the `--bail` flag to stop the test run immediately after a certain number of test failures. The first command bails after 1 failure (which is the default behavior if no number is specified), and the second command bails after 10 failures. This is useful in CI environments to save resources.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_9

LANGUAGE: sh
CODE:
```
# bail after 1 failure
$ bun test --bail

# bail after 10 failure
$ bun test --bail=10
```

----------------------------------------

TITLE: Clearing Bun Module Cache
DESCRIPTION: Removes all contents from Bun's global module cache directory. This can be useful to resolve caching issues or free up disk space, but will cause subsequent installs to re-download packages.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/pm.md#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
$ bun pm cache rm
```

----------------------------------------

TITLE: Additional Non-Cryptographic Hashing Algorithms in Bun
DESCRIPTION: Demonstrates the use of various non-cryptographic hashing algorithms available in Bun.hash, including wyhash, crc32, adler32, cityHash, xxHash, and murmur hash variants.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/hashing.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
Bun.hash.wyhash("data", 1234); // equivalent to Bun.hash()
Bun.hash.crc32("data", 1234);
Bun.hash.adler32("data", 1234);
Bun.hash.cityHash32("data", 1234);
Bun.hash.cityHash64("data", 1234);
Bun.hash.xxHash32("data", 1234);
Bun.hash.xxHash64("data", 1234);
Bun.hash.xxHash3("data", 1234);
Bun.hash.murmur32v3("data", 1234);
Bun.hash.murmur32v2("data", 1234);
Bun.hash.murmur64v2("data", 1234);
```

----------------------------------------

TITLE: Comparing Versions with Bun.semver.order in TypeScript
DESCRIPTION: This snippet illustrates the usage of Bun.semver.order function to compare versions. It shows how to use the function for individual comparisons and for sorting an array of versions.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/semver.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { semver } from "bun";

semver.order("1.0.0", "1.0.0"); // 0
semver.order("1.0.0", "1.0.1"); // -1
semver.order("1.0.1", "1.0.0"); // 1

const unsorted = ["1.0.0", "1.0.1", "1.0.0-alpha", "1.0.0-beta", "1.0.0-rc"];
unsorted.sort(semver.order); // ["1.0.0-alpha", "1.0.0-beta", "1.0.0-rc", "1.0.0", "1.0.1"]
console.log(unsorted);
```

----------------------------------------

TITLE: Creating a Uint8Array View for an ArrayBuffer in TypeScript
DESCRIPTION: This snippet initializes a 64-byte ArrayBuffer and then creates a Uint8Array. The Uint8Array acts as a view into the ArrayBuffer's data, allowing access to the underlying bytes as unsigned 8-bit integers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/arraybuffer-to-typedarray.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
const buffer = new ArrayBuffer(64);
const arr = new Uint8Array(buffer);
```

----------------------------------------

TITLE: Example Node.js Shebang in CLI Scripts
DESCRIPTION: Displays a common shebang (`#!/usr/bin/env node`) found at the beginning of JavaScript CLI tool scripts. This line instructs the operating system's shell to execute the script using the Node.js interpreter by default.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/run.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
#!/usr/bin/env node

// do stuff
```

----------------------------------------

TITLE: Enabling Watch Mode for Bun Tests using Bash
DESCRIPTION: Demonstrates how to run `bun test` in watch mode using the `--watch` flag. This command will monitor test files and related source files for changes and automatically re-run the relevant tests upon detection.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
$ bun test --watch
```

----------------------------------------

TITLE: Filtering properties in Bun.inspect.table() in TypeScript
DESCRIPTION: Shows how to display only selected properties when formatting tabular data with Bun.inspect.table(). The example demonstrates filtering to show only specific columns.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_23

LANGUAGE: typescript
CODE:
```
console.log(
  Bun.inspect.table(
    [
      { a: 1, b: 2, c: 3 },
      { a: 4, b: 5, c: 6 },
    ],
    ["a", "c"],
  ),
);
//
// ┌───┬───┬───┐
// │   │ a │ c │
// ├───┼───┼───┤
// │ 0 │ 1 │ 3 │
// │ 1 │ 4 │ 6 │
// └───┴───┴───┘
```

----------------------------------------

TITLE: Updating Package.json Scripts for Bun
DESCRIPTION: Modifies package.json to use Bun runtime for Vite development server
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/vite.md#2025-04-22_snippet_3

LANGUAGE: json
CODE:
```
  "scripts": {
-   "dev": "vite",
+   "dev": "bunx --bun vite",
    "build": "vite build",
    "serve": "vite preview"
  },
  // ...
```

----------------------------------------

TITLE: Installing React Dependency with Bun
DESCRIPTION: Command to install React as a dependency using Bun's package manager. This is necessary since the transpiled JSX code requires React to run.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/react.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ bun install react
```

----------------------------------------

TITLE: Adding Git Attributes for Bun Lockfile
DESCRIPTION: This snippet shows the Git attributes configuration needed to handle Bun's binary lockfile. It specifies that .lockb files should be treated as binary and use a custom diff driver named 'lockb'.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/git-diff-bun-lockfile.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
*.lockb binary diff=lockb
```

----------------------------------------

TITLE: Configuring Default NPM Registry in Bun
DESCRIPTION: Shows different ways to configure the default NPM registry in bunfig.toml, including basic URL configuration, token-based authentication, and username/password authentication.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/registries.md#2025-04-22_snippet_0

LANGUAGE: toml
CODE:
```
[install]
# set default registry as a string
registry = "https://registry.npmjs.org"
# set a token
registry = { url = "https://registry.npmjs.org", token = "123456" }
# set a username/password
registry = "https://username:password@registry.npmjs.org"
```

----------------------------------------

TITLE: Configuring bunfig.toml for YAML Plugin Preload
DESCRIPTION: TOML configuration to preload the YAML plugin registration file in bunfig.toml.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-plugin-yaml/README.md#2025-04-22_snippet_4

LANGUAGE: toml
CODE:
```
preload = ["./yaml.ts"]
```

----------------------------------------

TITLE: Custom Option Processing in JavaScript
DESCRIPTION: Implements custom processing functions for command line options including type conversion, value accumulation, and custom parsing of comma-separated lists.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
function myParseInt(value, dummyPrevious) {
  const parsedValue = parseInt(value, 10);
  if (isNaN(parsedValue)) {
    throw new commander.InvalidArgumentError('Not a number.');
  }
  return parsedValue;
}

function increaseVerbosity(dummyValue, previous) {
  return previous + 1;
}

function collect(value, previous) {
  return previous.concat([value]);
}

function commaSeparatedList(value, dummyPrevious) {
  return value.split(',');
}

program
  .option('-f, --float <number>', 'float argument', parseFloat)
  .option('-i, --integer <number>', 'integer argument', myParseInt)
  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)
  .option('-c, --collect <value>', 'repeatable value', collect, [])
  .option('-l, --list <items>', 'comma separated list', commaSeparatedList);
```

----------------------------------------

TITLE: Code Signing a macOS Executable using Shell
DESCRIPTION: This shell command shows how to use the `codesign` utility on macOS to sign a standalone executable (`./myapp`) created with Bun. Signing the executable helps avoid Gatekeeper warnings when running the application. Replace `XXXXXXXXXX` with your signing identity.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/executables.md#2025-04-22_snippet_8

LANGUAGE: sh
CODE:
```
$ codesign --deep --force -vvvv --sign "XXXXXXXXXX" ./myapp
```

----------------------------------------

TITLE: HWB (Hue-Whiteness-Blackness) Color Model in CSS - Bun Bundler
DESCRIPTION: Highlights the use of HWB color notation to simplify creation of tints and shades. HWB makes color variants more intuitive. Bun transpiles these to hex RGB values for browser-wide support. Inputs use HWB, outputs are auto-computed RGB.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_12

LANGUAGE: css
CODE:
```
.easy-theming {\n  /* Pure cyan with no white or black added */\n  --primary: hwb(180 0% 0%);\n\n  /* Same hue, but with 20% white added (tint) */\n  --primary-light: hwb(180 20% 0%);\n\n  /* Same hue, but with 30% black added (shade) */\n  --primary-dark: hwb(180 0% 30%);\n\n  /* Muted version with both white and black added */\n  --primary-muted: hwb(180 30% 20%);\n}
```

----------------------------------------

TITLE: Initializing Bun Transpiler
DESCRIPTION: Creates a new instance of Bun's transpiler with specified loader type for handling different file formats
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/transpiler.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const transpiler = new Bun.Transpiler({
  loader: "tsx", // "js | "jsx" | "ts" | "tsx"
});
```

----------------------------------------

TITLE: Displaying CSS HMR Performance Metrics
DESCRIPTION: This output shows the analysis results of CSS HMR frame times. It includes percentile breakdowns of frame times and the proportion of rendered frames.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/hot-module-reloading/css-stress-test/next.latest.24ms.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
next
 --------------------------------------------------
 CSS HMR FRAME TIME

 50th percentile: 310.1ms 
 75th percentile: 360.3ms 
 90th percentile: 461.6ms 
 95th percentile: 660.4ms 
 99th percentile: 1009.9ms 
 Rendered frames: 78 / 1024 (8%)
```

----------------------------------------

TITLE: Linking Bun Executable
DESCRIPTION: Links the Zig and C++ object files to create the final Bun executable. Designed to run on a separate machine from the compilation stages to enable parallel building.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/internals/build-process-for-ci.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
cd tmp3

cmake $BUN_REPO \
  -G Ninja \
  -DCMAKE_BUILD_TYPE=Release \
  -DBUN_LINK_ONLY=1 \
  -DBUN_ZIG_OBJ_DIR="/path/to/bun-zig-dir" \
  -DBUN_CPP_ARCHIVE="/path/to/bun-cpp-objects.a"

ninja

# optional:
#   -DBUN_DEPS_OUT_DIR=... custom deps dir, use this to cache the built deps between rebuilds
#   -DWEBKIT_DIR=... same thing, but it's probably fast enough to pull from github releases

# -> bun
# -> bun-profile
# -> bun.dSYM/
```

----------------------------------------

TITLE: Defining JSON Content in package.json
DESCRIPTION: This snippet shows the content of a package.json file with basic project information including name, version, and author details.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/import-json.md#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "bun",
  "version": "1.0.0",
  "author": {
    "name": "John Dough",
    "email": "john@dough.com"
  }
}
```

----------------------------------------

TITLE: Set LLVM 19 Path on Arch Linux
DESCRIPTION: This command sets the PATH environment variable to include the directory containing LLVM 19 binaries on Arch Linux.  This ensures the correct LLVM version is used. It requires `llvm19` to be installed.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_15

LANGUAGE: bash
CODE:
```
$ export PATH="$PATH:/usr/lib/llvm19/bin"
```

----------------------------------------

TITLE: Using hasEnoughSpace from tmpdir module
DESCRIPTION: Checks if the file system has enough available space for a file of the specified size in bytes. Returns a boolean indicating if sufficient space is likely available.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_27

LANGUAGE: JavaScript
CODE:
```
hasEnoughSpace(size)
```

----------------------------------------

TITLE: Configuring Artifactory Registry in bunfig.toml
DESCRIPTION: TOML configuration for connecting Bun package manager to JFrog Artifactory npm registry. Requires replacing MY_SUBDOMAIN with your Artifactory subdomain and MY_TOKEN with your authentication token.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/jfrog-artifactory.md#2025-04-22_snippet_0

LANGUAGE: toml
CODE:
```
[install.registry]
url = "https://MY_SUBDOMAIN.jfrog.io/artifactory/api/npm/npm/_auth=MY_TOKEN"
# Bun v1.0.3+ supports using an environment variable here
# url = "$NPM_CONFIG_REGISTRY"
```

----------------------------------------

TITLE: Setting Log Level in Bun
DESCRIPTION: Configures the logging verbosity in Bun. Can be set to debug, warn, or error.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_3

LANGUAGE: toml
CODE:
```
logLevel = "debug" # "debug" | "warn" | "error"
```

----------------------------------------

TITLE: Reverting to latest stable Bun version
DESCRIPTION: This command upgrades Bun to the latest stable published version, which is useful for reverting from a canary build to a stable release.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bun-upgrade.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ bun upgrade
```

----------------------------------------

TITLE: Implementing Negatable Boolean Options in JavaScript
DESCRIPTION: Demonstrates how to create command line options with negatable boolean flags and optional values using Commander.js. Shows handling of sauce and cheese options with their negative counterparts.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
program
  .option('--no-sauce', 'Remove sauce')
  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')
  .option('--no-cheese', 'plain with no cheese')
  .parse();

const options = program.opts();
const sauceStr = options.sauce ? 'sauce' : 'no sauce';
const cheeseStr = (options.cheese === false) ? 'no cheese' : `${options.cheese} cheese`;
console.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);
```

----------------------------------------

TITLE: Installing Dependencies with Bun
DESCRIPTION: Changes to project directory and installs project dependencies using Bun package manager
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/vite.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
cd my-app
bun install
```

----------------------------------------

TITLE: Starting Next.js Dev Server with Node.js via Bun (Shell)
DESCRIPTION: These commands navigate into the project directory and start the Next.js development server. By running `bun run dev` without the `--bun` flag, Bun acts as a task runner, executing the `dev` script using the environment specified in the script's shebang or the system's default (typically Node.js).
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/nextjs.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
$ cd my-app
$ bun run dev
```

----------------------------------------

TITLE: Compiled RGB Output for HWB Colors - Bun Bundler CSS
DESCRIPTION: Displays the Bun-transpiled RGB equivalents for HWB-defined custom properties. Supports automatically generating hex colors for all HWB values, aiding in theming and consistency. No other dependencies or constraints.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_13

LANGUAGE: css
CODE:
```
.easy-theming {\n  --primary: #00ffff;\n  --primary-light: #33ffff;\n  --primary-dark: #00b3b3;\n  --primary-muted: #339999;\n}
```

----------------------------------------

TITLE: Handling Large Numbers in Bun SQL Client
DESCRIPTION: Demonstrates how Bun's SQL client automatically handles large numbers that exceed the range of 53-bit integers by returning them as strings. This prevents precision loss with very large numbers like 9223372036854777.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_26

LANGUAGE: typescript
CODE:
```
import { sql } from "bun";

const [{ x, y }] = await sql`SELECT 9223372036854777 as x, 12345 as y`;

console.log(typeof x, x); // "string" "9223372036854777"
console.log(typeof y, y); // "number" 12345
```

----------------------------------------

TITLE: Spawning Child Process with IPC in Bun
DESCRIPTION: Basic example of spawning a child process with IPC handler in Bun. Shows how to create a child process and set up an IPC message handler.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/ipc.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const child = Bun.spawn(["bun", "child.ts"], {
  ipc(message) {
    /**
     * The message received from the sub process
     **/
  },
});
```

----------------------------------------

TITLE: Common Bun CLI Commands
DESCRIPTION: Shows the main CLI commands for Bun's built-in tools including test runner, script runner, package manager, and package execution.
SOURCE: https://github.com/oven-sh/bun/blob/main/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
bun test
bun run start
bun install <pkg>
bunx cowsay 'Hello, world!'
```

----------------------------------------

TITLE: Cleaning and Building JSC after WebKit Merge in Bash
DESCRIPTION: Removes the existing `WebKitBuild` directory to ensure a clean build environment. Then, it changes the current directory back to the root of the Bun project (four levels up from `src/bun.js/WebKit`) and runs the `make` command with the `jsc-build-mac-compile` target to build the JavaScriptCore component for macOS using the updated WebKit source.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/contributing/upgrading-webkit.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
# You might have to run this multiple times.
$ rm -rf WebKitBuild

# Go to Bun's directory! Not WebKit.
cd ../../../../
make jsc-build-mac-compile
```

----------------------------------------

TITLE: Using createCommand() Factory Function in Commander.js
DESCRIPTION: This demonstrates how to use the createCommand() factory function to create a new command instead of using the new operator. It's exported and can be used as a method.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_40

LANGUAGE: javascript
CODE:
```
const { createCommand } = require('commander');
const program = createCommand();
```

----------------------------------------

TITLE: Configuring Happy DOM Setup
DESCRIPTION: TypeScript setup file to register Happy DOM global registrator for browser environment simulation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/testing-library.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { GlobalRegistrator } from '@happy-dom/global-registrator';

GlobalRegistrator.register();
```

----------------------------------------

TITLE: Basic Bun Build Test Example
DESCRIPTION: Demonstrates a basic bundler test using itBundled, defining input files and expected output. It also shows how to run the bundle and check its output.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/bundler/expectBundled.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
itBundled("default/SimpleES6", {
  files: {
    "/entry.js": /* js */ `
      import { fn } from './foo';
      console.log(fn());
    `,
    "/foo.js": /* js */ `
      export function fn() {
        return 123
      }
    `,
  },
  run: {
    stdout: "123",
  },
});
```

----------------------------------------

TITLE: Make a Debug Build of JavaScriptCore (JSC)
DESCRIPTION: This command creates a debug build of JavaScriptCore (JSC). The build artifacts will be placed in `./vendor/WebKit/WebKitBuild/Debug`. After an initial run, subsequent builds can be done more efficiently using the following cmake command.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_25

LANGUAGE: bash
CODE:
```
# Make a debug build of JSC. This will output build artifacts in ./vendor/WebKit/WebKitBuild/Debug
# Optionally, you can use `make jsc` for a release build
$ make jsc-debug && rm vendor/WebKit/WebKitBuild/Debug/JavaScriptCore/DerivedSources/inspector/InspectorProtocolObjects.h
```

----------------------------------------

TITLE: Converting a Node.js Readable stream to a string using Response in Bun
DESCRIPTION: This code demonstrates how to convert a Node.js Readable stream to a string by wrapping it in a Response object and using the text() method. It creates a simple stream from a buffer containing "Hello, world!" and then extracts its text content.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/streams/node-readable-to-string.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Readable } from "stream";
const stream = Readable.from([Buffer.from("Hello, world!")]);
const text = await new Response(stream).text();
console.log(text); // "Hello, world!"
```

----------------------------------------

TITLE: Adding npm overrides to package.json in Bun
DESCRIPTION: Example of adding npm's "overrides" field to package.json to pin a metadependency version. This allows specifying a version range for the dependency "bar" which is not directly referenced in the project but is a dependency of "foo".
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/overrides.md#2025-04-22_snippet_0

LANGUAGE: json-diff
CODE:
```
  {
    "name": "my-app",
    "dependencies": {
      "foo": "^2.0.0"
    },
+   "overrides": {
+     "bar": "~4.4.0"
+   }
  }
```

----------------------------------------

TITLE: Using a Bun Macro at Bundle-Time in a TypeScript React Component
DESCRIPTION: This TypeScript code demonstrates importing and using the `extractMetaTags` function as a Bun macro within a React component. The import statement uses `with { type: 'macro' }` to designate `extractMetaTags` for bundle-time execution. The macro is called with "https://example.com", and its return value (`headTags`) is captured. An assertion checks the title at compile time. The extracted data is then used to render the `<head>` element of a React component (`Head`), embedding the fetched data directly into the component's definition.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/macros.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
import { extractMetaTags } from './meta.ts' with { type: 'macro' };

export const Head = () => {
  const headTags = extractMetaTags("https://example.com");

  if (headTags.title !== "Example Domain") {
    throw new Error("Expected title to be 'Example Domain'");
  }

  return <head>
    <title>{headTags.title}</title>
    <meta name="viewport" content={headTags.viewport} />
  </head>;
};
```

----------------------------------------

TITLE: Filtering Outdated Dependencies by Package Names - Markdown
DESCRIPTION: Shows a Bun CLI terminal directive configured to display outdated status for specific dependencies. The snippet filters for packages matching 'eslint-plugin-security', 'eslint-plugin-sonarjs', and the glob 'eslint-plugin-*'. This allows targeted checking in large projects. Requires a Bun project containing those dependencies to function as intended. This is a custom Markdown component, not an executable command.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/outdated.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
{% bunOutdatedTerminal displayGlob="eslint-plugin-security eslint-plugin-sonarjs" glob="eslint-plugin-*"  /%}
```

----------------------------------------

TITLE: Transforming Image Elements with HTMLRewriter in TypeScript
DESCRIPTION: Example showing how to use HTMLRewriter to replace all image sources with a specific URL and wrap them in anchor tags. Demonstrates element manipulation and attribute modification.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/html-rewriter.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// Replace all images with a rickroll
const rewriter = new HTMLRewriter().on("img", {
  element(img) {
    // Famous rickroll video thumbnail
    img.setAttribute(
      "src",
      "https://img.youtube.com/vi/dQw4w9WgXcQ/maxresdefault.jpg",
    );

    // Wrap the image in a link to the video
    img.before(
      '<a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ" target="_blank">',
      { html: true },
    );
    img.after("</a>", { html: true });

    // Add some fun alt text
    img.setAttribute("alt", "Definitely not a rickroll");
  },
});

// An example HTML document
const html = `
<html>
<body>
  <img src="/cat.jpg">
  <img src="dog.png">
  <img src="https://example.com/bird.webp">
</body>
</html>
`;

const result = rewriter.transform(html);
console.log(result);
```

----------------------------------------

TITLE: Installing @types/bun Package with Bun
DESCRIPTION: Command to install the '@types/bun' npm package using Bun package manager. This package provides TypeScript type definitions for Bun's JavaScript runtime APIs.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-types/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
bun add -D @types/bun
```

----------------------------------------

TITLE: JSX Transformation with 'react-jsx' Option
DESCRIPTION: Configuration for transforming JSX using the 'react-jsx' option, which uses the newer JSX transform introduced in React 17 that doesn't require importing React in every file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_4

LANGUAGE: json
CODE:
```
{
  "jsx": "react-jsx"
}
```

----------------------------------------

TITLE: Importing Tailwind CSS in TypeScript
DESCRIPTION: TypeScript example showing how to import Tailwind CSS directly in a JavaScript/TypeScript file, which Bun will process using the Tailwind plugin.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/html.md#2025-04-22_snippet_12

LANGUAGE: typescript
CODE:
```
/* Import TailwindCSS in your JavaScript */
import "tailwindcss";
```

----------------------------------------

TITLE: Using color-mix() in Modern CSS - Bun Bundler
DESCRIPTION: Demonstrates authoring with the color-mix() CSS function, using ratios to blend colors for background and hover states. No additional dependencies. Key parameters define color spaces and blend ratios. Bun evaluates and outputs static color values compatible with all major browsers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_4

LANGUAGE: css
CODE:
```
.button {\n  /* Mix blue and red in the RGB color space with a 30/70 proportion */\n  background-color: color-mix(in srgb, blue 30%, red);\n\n  /* Create a lighter variant for hover state */\n  &:hover {\n    background-color: color-mix(in srgb, blue 30%, red, white 20%);\n  }\n}
```

----------------------------------------

TITLE: Configuring Global Package Directory in Bun
DESCRIPTION: Sets the directory where globally installed packages are stored.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_25

LANGUAGE: toml
CODE:
```
[install]
# where `bun install --global` installs packages
globalDir = "~/.bun/install/global"
```

----------------------------------------

TITLE: ArrayBufferSink API Reference
DESCRIPTION: Comprehensive TypeScript interface definition for Bun's ArrayBufferSink class, showing all available methods and configuration options for working with binary data.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/streams.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
/**
 * Fast incremental writer that becomes an `ArrayBuffer` on end().
 */
export class ArrayBufferSink {
  constructor();

  start(options?: {
    asUint8Array?: boolean;
    /**
     * Preallocate an internal buffer of this size
     * This can significantly improve performance when the chunk size is small
     */
    highWaterMark?: number;
    /**
     * On {@link ArrayBufferSink.flush}, return the written data as a `Uint8Array`.
     * Writes will restart from the beginning of the buffer.
     */
    stream?: boolean;
  }): void;

  write(
    chunk: string | ArrayBufferView | ArrayBuffer | SharedArrayBuffer,
  ): number;
  /**
   * Flush the internal buffer
   *
   * If {@link ArrayBufferSink.start} was passed a `stream` option, this will return a `ArrayBuffer`
   * If {@link ArrayBufferSink.start} was passed a `stream` option and `asUint8Array`, this will return a `Uint8Array`
   * Otherwise, this will return the number of bytes written since the last flush
   *
   * This API might change later to separate Uint8ArraySink and ArrayBufferSink
   */
  flush(): number | Uint8Array | ArrayBuffer;
  end(): ArrayBuffer | Uint8Array;
}
```

----------------------------------------

TITLE: Version Specifier Usage in TypeScript Imports
DESCRIPTION: Examples showing how to specify exact versions, npm tags, or semver ranges directly in import statements to override the default version resolution algorithm.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/autoimport.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { z } from "zod@3.0.0"; // specific version
import { z } from "zod@next"; // npm tag
import { z } from "zod@^3.20.0"; // semver range
```

----------------------------------------

TITLE: Building Bun
DESCRIPTION: Builds the Bun project by running the `build` script defined in the package.json. This command compiles the code and creates the necessary binaries.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_16

LANGUAGE: bash
CODE:
```
$ bun run build
```

----------------------------------------

TITLE: Corking HTTP Responses in C++ with µWebSockets
DESCRIPTION: Demonstrates how to use corking to efficiently send HTTP responses. Corking ensures multiple send operations are combined into a single, efficient syscall.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-uws/misc/READMORE.md#2025-04-22_snippet_1

LANGUAGE: c++
CODE:
```
res->cork([]() {
    res->end("This Http response will be properly corked and efficient in all cases");
});
```

----------------------------------------

TITLE: Configuring Bun Test with bunfig.toml Basic Structure
DESCRIPTION: The basic structure for configuring bun test in a bunfig.toml file, where test-specific options are placed under the [test] section.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/configuration.md#2025-04-22_snippet_0

LANGUAGE: toml
CODE:
```
[test]
# Options go here
```

----------------------------------------

TITLE: Benchmarking Package Managers with Lockfile in Online Mode
DESCRIPTION: This command uses hyperfine to compare the installation performance of Bun, pnpm, Yarn, and npm with existing lockfiles in online mode. It clears node_modules before each run, performs one warmup run, and executes 3 timed runs for each package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/install/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ hyperfine --prepare 'rm -rf node_modules' --warmup 1 --runs 3 'bun install' 'pnpm install' 'yarn' 'npm install'
```

----------------------------------------

TITLE: OpenSSL Certificate Database Records
DESCRIPTION: Database index entries showing four valid SSL certificates issued for NodeJS test agents (agent8 and agent9) with their expiry dates and distinguished names.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/keys/fake-startcom-root-database.txt#2025-04-22_snippet_0

LANGUAGE: text
CODE:
```
V	22920830184221Z		01	unknown	/C=US/ST=CA/L=SF/O=NODEJS/OU=agent8/CN=localhost
V	22920830184221Z		02	unknown	/C=US/ST=CA/L=SF/O=NODEJS/OU=agent9/CN=localhost
V	22960617144652Z		03	unknown	/C=US/ST=CA/L=SF/O=NODEJS/OU=agent8/CN=localhost
V	22960617144653Z		04	unknown	/C=US/ST=CA/L=SF/O=NODEJS/OU=agent9/CN=localhost
```

----------------------------------------

TITLE: Strict Mode Comparisons with Bun.deepEquals in TypeScript
DESCRIPTION: Illustrates the use of strict mode in Bun.deepEquals() by passing true as the third argument. This mode is used internally by expect().toStrictEqual() in Bun's test runner and handles undefined values, sparse arrays, and object instances differently.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/deep-equals.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// undefined values
Bun.deepEquals({}, { a: undefined }, true); // false

// undefined in arrays
Bun.deepEquals(["asdf"], ["asdf", undefined], true); // false

// sparse arrays
Bun.deepEquals([, 1], [undefined, 1], true); // false

// object literals vs instances w/ same properties
class Foo {
  a = 1;
}
Bun.deepEquals(new Foo(), { a: 1 }, true); // false
```

----------------------------------------

TITLE: Installing NPM Package with Alias using Bun CLI
DESCRIPTION: Shows how to install the 'zod' package under a custom alias name 'my-custom-name' using Bun's package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/npm-alias.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun add my-custom-name@npm:zod
```

----------------------------------------

TITLE: Installing Project Dependencies with Bun
DESCRIPTION: Executes the `bun install` command to install all dependencies (`dependencies`, `devDependencies`, `optionalDependencies`, and `peerDependencies`) listed in the project's `package.json` file. It also runs lifecycle scripts (`{pre|post}install`, `{pre|post}prepare`) defined in the root `package.json` and generates a `bun.lock` lockfile.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/install.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ bun install
```

----------------------------------------

TITLE: Debugging JSX Components with Bun
DESCRIPTION: Example showing Bun's special JSX component logging for easier debugging. Running a TSX file with Bun will display the component structure in the console.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/react.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
$ bun run log-my-component.tsx
<Component message="Hello world!" />
```

----------------------------------------

TITLE: Configuring Preload Scripts in Bun
DESCRIPTION: Sets up preload scripts to run before executing a file or script with bun run. This can be used to register plugins.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_0

LANGUAGE: toml
CODE:
```
# scripts to run before `bun run`-ning a file or script
# register plugins by adding them to this list
preload = ["./preload.ts"]
```

----------------------------------------

TITLE: Reloading the FileSystemRouter
DESCRIPTION: Example of how to reload the router to re-scan the directory for changes to the file system, which is necessary if files are added or removed after initialization.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-system-router.md#2025-04-22_snippet_5

LANGUAGE: ts
CODE:
```
router.reload();
```

----------------------------------------

TITLE: Double Position Gradients
DESCRIPTION: Shows usage of double position gradient syntax for creating hard color stops and how Bun converts it to traditional gradient syntax.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_25

LANGUAGE: css
CODE:
```
.striped-background {
  background: linear-gradient(
    to right,
    yellow 0%,
    green 20%,
    green 30%,
    red 30%,
    red 70%,
    blue 70%,
    blue 100%
  );
}

.progress-bar {
  background: linear-gradient(
    to right,
    #4caf50 0% 25%,
    #ffc107 25% 50%,
    #2196f3 50% 75%,
    #9c27b0 75% 100%
  );
}
```

----------------------------------------

TITLE: File Loader for Media Assets in TypeScript
DESCRIPTION: Demonstrates using the file loader to import unrecognized file types like SVG. In runtime it provides an absolute path, while in the bundler it copies the file to the output directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/loaders.md#2025-04-22_snippet_12

LANGUAGE: ts
CODE:
```
import logo from "./logo.svg";
console.log(logo);
```

----------------------------------------

TITLE: Defining API Schema for Zig Function in TypeScript
DESCRIPTION: Shows how to define the API schema for a Zig function using a .bind.ts file. This schema describes the function signature, including argument types and return type, which will be used by the bindings generator.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/bindgen.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { t, fn } from 'bindgen';

export const add = fn({
  args: {
    global: t.globalObject,
    a: t.i32,
    b: t.i32.default(1),
  },
  ret: t.i32,
});
```

----------------------------------------

TITLE: Configuring Child Process Options in TypeScript
DESCRIPTION: Shows how to configure a child process with custom working directory, environment variables, and an exit handler.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const proc = Bun.spawn(["bun", "--version"], {
  cwd: "./path/to/subdir", // specify a working directory
  env: { ...process.env, FOO: "bar" }, // specify environment variables
  onExit(proc, exitCode, signalCode, error) {
    // exit handler
  },
});

proc.pid; // process ID of subprocess
```

----------------------------------------

TITLE: Running Bun Tests with Bail After Multiple Failures
DESCRIPTION: This command demonstrates how to use the --bail flag with a numeric value to set a threshold for failures before stopping the test execution. In this example, the test run will continue until 10 failures occur.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/bail.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
# bail after 10 failures
$ bun test --bail=10
```

----------------------------------------

TITLE: Configuring publicPath in Bun Build (JavaScript)
DESCRIPTION: Sets a prefix to be appended to import paths in bundled code, useful for assets imported via URL.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_48

LANGUAGE: typescript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './out',
  publicPath: 'https://cdn.example.com/', // default is undefined
})
```

----------------------------------------

TITLE: Adding GitHub Repository as Dependency with Bun
DESCRIPTION: This command adds the Lodash library directly from its GitHub repository as a project dependency using Bun's package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/add-git.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun add github:lodash/lodash
```

----------------------------------------

TITLE: Running Tests in Vitest Environment
DESCRIPTION: Command to run the test file using Vitest with the --run flag to execute the tests once.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/expect-to-equal/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
./node_modules/.bin/vitest --run expect-to-equal.vitest.test.js
```

----------------------------------------

TITLE: Installing packages with Bun while generating a Yarn-compatible lockfile
DESCRIPTION: Uses the --yarn flag with 'bun install' to generate both a Bun lockfile and a Yarn-compatible yarn.lock file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/yarnlock.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun install --yarn
```

----------------------------------------

TITLE: Updating tsconfig.json for YAML Imports
DESCRIPTION: JSON diff showing the addition of bun-plugin-yaml to the types array in tsconfig.json to avoid import errors in TypeScript.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-plugin-yaml/README.md#2025-04-22_snippet_5

LANGUAGE: json
CODE:
```
  {
    "compilerOptions": {
      "types": [
        // other packages, e.g. "bun-types",
+       "bun-plugin-yaml"
      ]
    }
  }
```

----------------------------------------

TITLE: Checking File Existence using Bun.file() in TypeScript
DESCRIPTION: This snippet demonstrates how to use the Bun.file() function to create a BunFile instance and then check if the file exists using the .exists() method. It uses an asynchronous operation to determine file existence.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/read-file/exists.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const path = "/path/to/package.json";
const file = Bun.file(path);

await file.exists(); // boolean;
```

----------------------------------------

TITLE: Quiet Command Execution in Bun Shell
DESCRIPTION: Shows how to execute a shell command without printing the output to stdout using the .quiet() method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

await $`echo "Hello World!"`.quiet(); // No output
```

----------------------------------------

TITLE: Creating Basic HTTP Server with Stric Router in TypeScript
DESCRIPTION: This snippet demonstrates setting up a minimal web server using the `@stricjs/router` package. It imports the `Router`, creates a new router instance, defines a GET route for the root path ('/'), and returns a simple 'Hi' text response. The router is exported as the default fetch handler, intended to be served by Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/ecosystem/stric.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Router } from '@stricjs/router';

// Export the fetch handler and serve with Bun
export default new Router()
  // Return 'Hi' on every request
  .get('/', () => new Response('Hi'));
```

----------------------------------------

TITLE: Detecting Bun Runtime using Global Object
DESCRIPTION: Check for the existence of the global Bun object to determine if code is running in Bun environment. This is the recommended approach but requires bun-types for TypeScript support.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/detect-bun.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
if (typeof Bun !== "undefined") {
  // this code will only run when the file is run with Bun
}
```

----------------------------------------

TITLE: Installing Bun Dependencies
DESCRIPTION: Installs all dependencies required for building Bun. Can optionally specify an output directory for the dependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/internals/build-process-for-ci.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
BUN_DEPS_OUT_DIR="/optional/out/dir" bash ./scripts/all-dependencies.sh
```

----------------------------------------

TITLE: Check Bun Version
DESCRIPTION: This command executes the debug build of Bun and prints its version number.  It verifies that the build process was successful and that the `bun-debug` executable is working correctly.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_17

LANGUAGE: bash
CODE:
```
$ build/debug/bun-debug --version
```

----------------------------------------

TITLE: Working with remote objects in TypeScript
DESCRIPTION: TypeScript code showing how to use the remoteObjectToString utility to convert remote object references to string representations when evaluating expressions.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-inspector-protocol/README.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import { remoteObjectToString } from "bun-inspector-protocol";

const result = await inspector.send("Runtime.evaluate", {
  expression: "{ a: 1, b: { c: 'hello' } }",
});

console.log(remoteObjectToString(result.result, true));
// Output: {a: 1, b: {c: "hello"}}
```

----------------------------------------

TITLE: Reading stdin lines using console as AsyncIterable in TypeScript
DESCRIPTION: Demonstrates how to use the console object as an AsyncIterable to sequentially read lines from process.stdin in Bun. This allows for easy implementation of interactive command-line programs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/console.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
for await (const line of console) {
  console.log(line);
}
```

----------------------------------------

TITLE: TOML Import Example
DESCRIPTION: Example of importing a TOML file in a bundle, which will be parsed and included as a JavaScript object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
import config from "./bunfig.toml";
config.logLevel; // => "debug"
```

----------------------------------------

TITLE: Running Development Server
DESCRIPTION: Command to start the development server which runs the app in development mode, accessible at http://localhost:5173.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/third_party/pnpm/install_fixture/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Installing a newer Linux kernel for Ubuntu 20.04
DESCRIPTION: Commands to check the current kernel version and install the Ubuntu hardware enablement kernel for better compatibility with Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/index.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# If this returns a version >= 5.6, you don't need to do anything
uname -r

# Install the official Ubuntu hardware enablement kernel
sudo apt install --install-recommends linux-generic-hwe-20.04
```

----------------------------------------

TITLE: Accessing ArrayBuffer from Uint8Array Instance in TypeScript
DESCRIPTION: Demonstrates how to create a Uint8Array and access its underlying ArrayBuffer using the buffer property. No external dependencies are required. The arr variable initializes a 64-byte array, and arr.buffer returns the backing ArrayBuffer instance of equal byte length. This pattern is essential for operations requiring conversion or data transfer involving raw binary buffers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/typedarray-to-arraybuffer.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
const arr = new Uint8Array(64);
arr.buffer; // => ArrayBuffer(64)
```

----------------------------------------

TITLE: Example entitlements.plist for macOS JIT Permissions (XML)
DESCRIPTION: This XML snippet provides an example `entitlements.plist` file for macOS. It includes keys necessary to grant JIT (Just-In-Time compilation) permissions to a code-signed executable, which might be required for certain Node.js compatibility features or dynamic code execution within Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/executables.md#2025-04-22_snippet_9

LANGUAGE: xml
CODE:
```
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>com.apple.security.cs.allow-jit</key>
    <true/>
    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
    <true/>
    <key>com.apple.security.cs.disable-executable-page-protection</key>
    <true/>
    <key>com.apple.security.cs.allow-dyld-environment-variables</key>
    <true/>
    <key>com.apple.security.cs.disable-library-validation</key>
    <true/>
</dict>
</plist>
```

----------------------------------------

TITLE: Install Bun using Homebrew
DESCRIPTION: This command installs Bun using Homebrew on macOS.  It first taps the `oven-sh/bun` repository and then installs the `bun` package.  Homebrew must be installed before running these commands.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_7

LANGUAGE: bash
CODE:
```
$ brew tap oven-sh/bun
$ brew install bun
```

----------------------------------------

TITLE: Alternative Ways to Access Environment Variables in Bun
DESCRIPTION: Shows Bun-specific alternatives to process.env for accessing environment variables via Bun.env and import.meta.env.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_14

LANGUAGE: ts
CODE:
```
Bun.env.API_TOKEN; // => "secret"
import.meta.env.API_TOKEN; // => "secret"
```

----------------------------------------

TITLE: Configuring DNS Cache TTL with Environment Variables
DESCRIPTION: Shows how to configure the Time-To-Live (TTL) for DNS cache entries using the BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS environment variable. The default TTL is 30 seconds.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/dns.md#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS=5 bun run my-script.ts
```

----------------------------------------

TITLE: Install Bun Dependencies on Ubuntu/Debian
DESCRIPTION: This command installs the required dependencies for building Bun on Ubuntu or Debian systems using apt. It includes compilers, build tools, and other necessary libraries.  The command uses `sudo` for root privileges.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_1

LANGUAGE: bash
CODE:
```
$ sudo apt install curl wget lsb-release software-properties-common cargo ccache cmake git golang libtool ninja-build pkg-config rustc ruby-full xz-utils
```

----------------------------------------

TITLE: Decoding Base64-encoded Password in Browser Console for Azure Artifacts
DESCRIPTION: This JavaScript snippet can be used in a browser console to decode a base64-encoded password, which may be necessary when transitioning from npm to Bun with Azure Artifacts.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/azure-artifacts.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
atob("<base64-encoded password>");
```

----------------------------------------

TITLE: Benchmarking String Width Performance - Bun - JavaScript
DESCRIPTION: This benchmark output compares the execution time for Bun.stringWidth processing a 500-character ASCII string versus the npm string-width implementation. It shows dramatic speed improvements using Bun. Inputs refer to strings passed within the benchmark script; outputs are performance statistics. The code presumes an installed benchmarking setup and relevant CPU/runtime environment.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_10

LANGUAGE: JavaScript
CODE:
```
❯ bun string-width.mjs
cpu: 13th Gen Intel(R) Core(TM) i9-13900
runtime: bun 1.0.29 (x64-linux)

benchmark                                          time (avg)             (min … max)       p75       p99      p995
------------------------------------------------------------------------------------- -----------------------------
Bun.stringWidth     500 chars ascii              37.09 ns/iter   (36.77 ns … 41.11 ns)  37.07 ns  38.84 ns  38.99 ns

❯ node string-width.mjs

benchmark                                          time (avg)             (min … max)       p75       p99      p995
------------------------------------------------------------------------------------- -----------------------------
npm/string-width    500 chars ascii             249,710 ns/iter (239,970 ns … 293,180 ns) 250,930 ns  276,700 ns 281,450 ns
```

----------------------------------------

TITLE: Printing a Yarn-compatible lockfile to the console
DESCRIPTION: Runs the Bun lockfile (bun.lockb) through Bun to output its contents in Yarn-compatible format to the console without writing to disk.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/yarnlock.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
$ bun bun.lockb
# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1
# bun ./bun.lockb --hash: 9BFBF11D86084AAB-9418b03ff880c569-390CE6459EACEC9A...

abab@^2.0.6:
  version "2.0.6"
  resolved "https://registry.npmjs.org/abab/-/abab-2.0.6.tgz"
  integrity sha512-j2afSsaIENvHZN2B8GOpF566vZ5WVk5opAiMTvWgaQT8DkbOqsTfvNAvH...
```

----------------------------------------

TITLE: Inefficient Socket Writing Pattern
DESCRIPTION: Demonstrates a suboptimal pattern for writing data to a socket, where each character is sent in separate write operations, causing performance degradation due to lack of built-in buffering.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/tcp.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
socket.write("h");
socket.write("e");
socket.write("l");
socket.write("l");
socket.write("o");
```

----------------------------------------

TITLE: Cross-platform Environment Variable Setting with Bun Shell
DESCRIPTION: A cross-platform approach to setting environment variables using bun shell, which works consistently across operating systems.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
$ bun exec 'FOO=helloworld bun run dev'
```

----------------------------------------

TITLE: Configuring CA Certificates in Bun
DESCRIPTION: Configuration options for specifying CA certificates either as a string or file path in the install section of bunfig.toml.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_29

LANGUAGE: toml
CODE:
```
[install]
# The CA certificate as a string
ca = "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----"

# A path to a CA certificate file. The file can contain multiple certificates.
cafile = "path/to/cafile"
```

----------------------------------------

TITLE: Running Bun Project
DESCRIPTION: Command to execute the project using Bun runtime with a configurable entry point
SOURCE: https://github.com/oven-sh/bun/blob/main/src/cli/init/README.default.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
bun run {[entryPoint]s}
```

----------------------------------------

TITLE: Building and Publishing Bun Lambda Layer with Custom Options
DESCRIPTION: Examples of using the build-layer and publish-layer scripts with custom options for architecture, release version, output path, and AWS region.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-lambda/README.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
bun run build-layer -- \
  --arch x64 \
  --release canary \
  --output /path/to/layer.zip
```

LANGUAGE: sh
CODE:
```
bun run publish-layer -- \
  --arch aarch64 \
  --release latest \
  --output /path/to/layer.zip \
  --region us-east-1
```

----------------------------------------

TITLE: Inserting Sample Author Data into Neon Postgres (TypeScript)
DESCRIPTION: Implements a seeding script in TypeScript that batch-inserts multiple author records using Drizzle's insert API. Relies on an existing authors table schema and a configured db export. Handles execution flow, error handling, and confirmation logging; on failure, process exits with non-zero status.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-drizzle.md#2025-04-22_snippet_10

LANGUAGE: ts
CODE:
```
import { db } from "./db";\nimport * as schema from "./schema";\n\nasync function seed() {\n  await db.insert(schema.authors).values([\n    {\n      name: "J.R.R. Tolkien",\n      bio: "The creator of Middle-earth and author of The Lord of the Rings.",\n    },\n    {\n      name: "George R.R. Martin",\n      bio: "The author of the epic fantasy series A Song of Ice and Fire.",\n    },\n    {\n      name: "J.K. Rowling",\n      bio: "The creator of the Harry Potter series.",\n    },\n  ]);\n}\n\nasync function main() {\n  try {\n    await seed();\n    console.log("Seeding completed");\n  } catch (error) {\n    console.error("Error during seeding:", error);\n    process.exit(1);\n  }\n}\n\nmain();
```

----------------------------------------

TITLE: Enabling a Bun Service for Automatic Startup
DESCRIPTION: Command to enable the systemd service so it starts automatically on system boot.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/systemd.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
$ sudo systemctl enable my-app
```

----------------------------------------

TITLE: JSX Output with Custom Import Source - React JSX Dev
DESCRIPTION: Transpiled output when using a custom import source with react-jsxdev, showing how the jsxDEV function is imported from the specified package's jsx-dev-runtime module.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_19

LANGUAGE: tsx
CODE:
```
// /jsx-runtime is automatically appended
import { jsxDEV } from "preact/jsx-dev-runtime";
jsxDEV(
  "Box",
  { width: 5, children: "Hello" },
  undefined,
  false,
  undefined,
  this,
);
```

----------------------------------------

TITLE: Handling SIGINT Signal in Bun
DESCRIPTION: Shows how to listen for the SIGINT (interrupt) signal using process.on(). This is commonly triggered when a user presses Ctrl+C in the terminal.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/os-signals.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
process.on("SIGINT", () => {
  console.log("Received SIGINT");
});
```

----------------------------------------

TITLE: Styling Example Domain Page with CSS
DESCRIPTION: This CSS snippet defines the styling for the example domain page, including background colors, font styles, layout, and responsive design for smaller screens.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/bun/io/fetch.js.txt#2025-04-22_snippet_1

LANGUAGE: CSS
CODE:
```
body {
    background-color: #f0f0f2;
    margin: 0;
    padding: 0;
    font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
    
}
div {
    width: 600px;
    margin: 5em auto;
    padding: 2em;
    background-color: #fdfdff;
    border-radius: 0.5em;
    box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);
}
a:link, a:visited {
    color: #38488f;
    text-decoration: none;
}
@media (max-width: 700px) {
    div {
        margin: 0 auto;
        width: auto;
    }
}
```

----------------------------------------

TITLE: Example TypeScript code for environment check
DESCRIPTION: This TypeScript snippet demonstrates a conditional statement that checks the NODE_ENV value, which will be optimized by Bun's --define flag.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/define-constant.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
if (process.env.NODE_ENV === "production") {
  console.log("Production mode");
} else {
  console.log("Development mode");
}
```

----------------------------------------

TITLE: Running Bun Tests with Todo Items (Shell)
DESCRIPTION: This snippet demonstrates the output of running bun test when there are todo tests. It shows how todo tests are counted separately from passed and failed tests.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/todo-tests.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
$ bun test

test.test.ts:
✓ add [0.03ms]
✓ multiply [0.02ms]
✎ unimplemented feature

 2 pass
 1 todo
 0 fail
 2 expect() calls
Ran 3 tests across 1 files. [74.00ms]
```

----------------------------------------

TITLE: Creating a Simple Counter Svelte Component
DESCRIPTION: A basic Svelte component that implements a counter with an increment button. It accepts an initialCount prop and maintains its own state.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/svelte-test.md#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<script>
  export let initialCount = 0;
  let count = initialCount;
</script>

<button on:click={() => (count += 1)}>+1</button>
```

----------------------------------------

TITLE: Adding packages with Bun
DESCRIPTION: Commands to add packages using Bun, including specifying versions, adding dev dependencies, optional dependencies, peer dependencies, and global installation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/index.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
$ bun add preact
$ bun add zod@3.20.0
$ bun add zod@^3.0.0
$ bun add zod@latest
$ bun add --dev @types/react
$ bun add -d @types/react
$ bun add --optional lodash
$ bun add --peer @types/bun
$ bun add --global cowsay # or `bun add -g cowsay`
$ cowsay "Bun!"
```

----------------------------------------

TITLE: Adding Trusted Dependencies to package.json
DESCRIPTION: This snippet shows how to modify the package.json file to include a trustedDependencies array, which allows Bun to execute lifecycle scripts for specific packages.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/trusted.md#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
  {
    "name": "my-app",
    "version": "1.0.0",
+   "trustedDependencies": ["my-trusted-package"]
  }
```

----------------------------------------

TITLE: Using import.meta properties in Bun
DESCRIPTION: Examples of various import.meta properties implemented in Bun, including directory and file information, main module detection, and module resolution.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/import-meta.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import.meta.dir;   // => "/path/to/project"
import.meta.file;  // => "file.ts"
import.meta.path;  // => "/path/to/project/file.ts"
import.meta.url;   // => "file:///path/to/project/file.ts"

import.meta.main;  // `true` if this file is directly executed by `bun run`
                   // `false` otherwise

import.meta.resolve("zod"); // => "file:///path/to/project/node_modules/zod/index.js"
```

----------------------------------------

TITLE: Registering YAML Plugin for Runtime Use
DESCRIPTION: TypeScript code to register the YAML plugin for runtime use in a separate file.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-plugin-yaml/README.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
// yaml.ts
import yamlPlugin from "bun-plugin-yaml";

Bun.plugin(yamlPlugin());
```

----------------------------------------

TITLE: Running a Nuxt Development Server with Bun Runtime
DESCRIPTION: This demonstrates how to start the Nuxt development server using Bun as the runtime. The --bun flag forces the server to use Bun instead of the default Node.js runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/nuxt.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
$ cd my-nuxt-app
$ bun --bun run dev
 $ nuxt dev
Nuxi 3.6.5
Nuxt 3.6.5 with Nitro 2.5.2
  > Local:    http://localhost:3000/
  > Network:  http://192.168.0.21:3000/
  > Network:  http://[fd8a:d31d:481c:4883:1c64:3d90:9f83:d8a2]:3000/

✔ Nuxt DevTools is enabled v0.8.0 (experimental)
ℹ Vite client warmed up in 547ms
✔ Nitro built in 244 ms
```

----------------------------------------

TITLE: Custom HTML Style Function Implementation
DESCRIPTION: Implementation of a custom stylize function that converts inspection output to HTML with color styling.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/js/internal/util/README.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
function stylizeWithHTML(str, styleType) {
  const style = inspect.styles[styleType];
  if (style !== undefined) {
    return `<span style="color:${style};">${str}</span>`;
  }
  return str;
}
```

----------------------------------------

TITLE: Complex onStart Example with Multiple Plugins
DESCRIPTION: Advanced example showing multiple plugins using onStart with async operations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/plugins.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
const result = await Bun.build({
  entrypoints: ["./app.ts"],
  outdir: "./dist",
  sourcemap: "external",
  plugins: [
    {
      name: "Sleep for 10 seconds",
      setup(build) {
        build.onStart(async () => {
          await Bunlog.sleep(10_000);
        });
      },
    },
    {
      name: "Log bundle time to a file",
      setup(build) {
        build.onStart(async () => {
          const now = Date.now();
          await Bun.$`echo ${now} > bundle-time.txt`;
        });
      },
    },
  ],
});
```

----------------------------------------

TITLE: Command Line Argument Processing and Compression Logic in C
DESCRIPTION: Processes command line arguments for compression settings and executes either compression or decompression based on flags. Handles both file-based and stream-based operations with support for different output modes and binary file handling.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/zlib.test.txt#2025-04-22_snippet_9

LANGUAGE: C
CODE:
```
    while (argc > 0) {
      if (strcmp(*argv, "-c") == 0)
        copyout = 1;
      else if (strcmp(*argv, "-d") == 0)
        uncompr = 1;
      else if (strcmp(*argv, "-f") == 0)
        outmode[3] = 'f';
      else if (strcmp(*argv, "-h") == 0)
        outmode[3] = 'h';
      else if (strcmp(*argv, "-r") == 0)
        outmode[3] = 'R';
      else if ((*argv)[0] == '-' && (*argv)[1] >= '1' && (*argv)[1] <= '9' &&
               (*argv)[2] == 0)
        outmode[2] = (*argv)[1];
      else
        break;
      argc--, argv++;
    }
    if (outmode[3] == ' ')
        outmode[3] = 0;
    if (argc == 0) {
        SET_BINARY_MODE(stdin);
        SET_BINARY_MODE(stdout);
        if (uncompr) {
            file = gzdopen(fileno(stdin), "rb");
            if (file == NULL) error("can't gzdopen stdin");
            gz_uncompress(file, stdout);
        } else {
            file = gzdopen(fileno(stdout), outmode);
            if (file == NULL) error("can't gzdopen stdout");
            gz_compress(stdin, file);
        }
    } else {
        if (copyout) {
            SET_BINARY_MODE(stdout);
        }
        do {
            if (uncompr) {
                if (copyout) {
                    file = gzopen(*argv, "rb");
                    if (file == NULL)
                        fprintf(stderr, "%s: can't gzopen %s\n", prog, *argv);
                    else
                        gz_uncompress(file, stdout);
                } else {
                    file_uncompress(*argv);
                }
            } else {
                if (copyout) {
                    FILE * in = fopen(*argv, "rb");

                    if (in == NULL) {
                        perror(*argv);
                    } else {
                        file = gzdopen(fileno(stdout), outmode);
                        if (file == NULL) error("can't gzdopen stdout");

                        gz_compress(in, file);
                    }

                } else {
                    file_compress(*argv, outmode);
                }
            }
        } while (argv++, --argc);
    }
    return 0;
}
```

----------------------------------------

TITLE: Running Next.js CSS HMR Frame Analysis
DESCRIPTION: Shell command to execute a Node.js script that measures CSS Hot Module Replacement frame timing metrics. Uses environment variables SLEEP_INTERVAL and PROJECT to configure the analysis.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/hot-module-reloading/css-stress-test/next.latest.16ms.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
SLEEP_INTERVAL=16 PROJECT=next node read-frames.js
```

----------------------------------------

TITLE: Executing a Specific Bun Test File using Bash
DESCRIPTION: Illustrates how to run a single, specific test file using `bun test` by providing its exact path. The path must start with `./` or `/` to distinguish it from a general filter name.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
$ bun test ./test/specific-file.test.ts
```

----------------------------------------

TITLE: Test Structure with Nested Describe Blocks
DESCRIPTION: Example of a test structure with nested describe blocks that demonstrates how test names are concatenated for matching with --test-name-pattern.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/discovery.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
describe("Math", () => {
  describe("operations", () => {
    test("should add correctly", () => {
      // ...
    });
  });
});
```

----------------------------------------

TITLE: Initializing a Qwik Application with Bun
DESCRIPTION: This command initializes a new Qwik application using Bun's create command. The interactive prompt guides you through project creation, including project location, starter template selection, and dependency installation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/qwik.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun create qwik

      ............
    .::: :--------:.
   .::::  .:-------:.
  .:::::.   .:-------.
  ::::::.     .:------.
 ::::::.        :-----:
 ::::::.       .:-----.
  :::::::.     .-----.
   ::::::::..   ---:.
    .:::::::::. :-:.
     .:::::::::::::
             ...::::


┌  Let's create a  Qwik App  ✨ (v1.2.10)
│
◇  Where would you like to create your new project? (Use '.' or './' for current directory)
│  ./my-app
│
●  Creating new project in  /path/to/my-app  ... 🐇
│
◇  Select a starter
│  Basic App
│
◇  Would you like to install bun dependencies?
│  Yes
│
◇  Initialize a new git repository?
│  No
│
◇  Finishing the install. Wanna hear a joke?
│  Yes
│
○  ────────────────────────────────────────────────────────╮
│                                                          │
│  How do you know if there's an elephant under your bed?  │
│  Your head hits the ceiling!                             │
│                                                          │
├──────────────────────────────────────────────────────────╯
│
◇  App Created 🐰
│
◇  Installed bun dependencies 📋
│
○  Result ─────────────────────────────────────────────╮
│                                                      │
│  Success!  Project created in my-app directory       │
│                                                      │
│  Integrations? Add Netlify, Cloudflare, Tailwind...  │
│  bun qwik add                                        │
│                                                      │
│  Relevant docs:                                      │
│  https://qwik.builder.io/docs/getting-started/       │
│                                                      │
│  Questions? Start the conversation at:               │
│  https://qwik.builder.io/chat                        │
│  https://twitter.com/QwikDev                         │
│                                                      │
│  Presentations, Podcasts and Videos:                 │
│  https://qwik.builder.io/media/                      │
│                                                      │
│  Next steps:                                         │
│  cd my-app                                           │
│  bun start                                           │
│                                                      │
│                                                      │
├──────────────────────────────────────────────────────╯
│
└  Happy coding! 🎉
```

----------------------------------------

TITLE: Building with Code Splitting Enabled - Bun JavaScript API - JavaScript
DESCRIPTION: Bundling multiple entrypoints with code splitting enabled using Bun.build. When 'splitting' is set to true and multiple entry files are specified, Bun will generate shared chunks for duplicated imports. Requires source TypeScript files and Bun runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_30

LANGUAGE: JavaScript
CODE:
```
await Bun.build({
  entrypoints: ['./entry-a.ts', './entry-b.ts'],
  outdir: './out',
  splitting: true,
})
```

----------------------------------------

TITLE: Configuring Lockfile Format in Bun Install
DESCRIPTION: Controls whether a text-based bun.lock file is generated instead of a binary bun.lockb file. Default is true since Bun v1.2.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_21

LANGUAGE: toml
CODE:
```
[install]
saveTextLockfile = false
```

----------------------------------------

TITLE: Running Tests with Skipped Test in Bun Test Runner (Shell)
DESCRIPTION: This example shows the terminal output when running bun test with a skipped test. The skipped test is marked with a » symbol in the output, and the summary shows the count of passed, skipped, and failed tests.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/skip-tests.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
$ bun test

test.test.ts:
✓ add [0.03ms]
✓ multiply [0.02ms]
» unimplemented feature

 2 pass
 1 skip
 0 fail
 2 expect() calls
Ran 3 tests across 1 files. [74.00ms]
```

----------------------------------------

TITLE: Creating Basic HTTP Server with StricJS Router
DESCRIPTION: Implementation of a simple HTTP server with a single route that responds with 'Hi'.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/stric.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { Router } from '@stricjs/router';

export default new Router()
  .get('/', () => new Response('Hi'));
```

----------------------------------------

TITLE: JUnit XML Reporter Command Usage
DESCRIPTION: Command to generate a JUnit XML report while running tests with Bun, specifying the output file location.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/reporters.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
$ bun test --reporter=junit --reporter-outfile=./junit.xml
```

----------------------------------------

TITLE: Compiling Bun C++ Objects
DESCRIPTION: Builds the C++ object files archive (bun-cpp-objects.a). WebKit will be automatically downloaded from GitHub releases if WEBKIT_DIR is not specified.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/internals/build-process-for-ci.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
cd tmp2

cmake $BUN_REPO \
  -G Ninja \
  -DCMAKE_BUILD_TYPE=Release \
  -DBUN_CPP_ONLY=1 \

bash compile-cpp-only.sh
# -> bun-cpp-objects.a
```

----------------------------------------

TITLE: Basic Bundling Command Comparison
DESCRIPTION: Shows the basic bundling commands for both esbuild and Bun. Demonstrates how Bun eliminates the need for the --bundle flag since it bundles by default.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/vs-esbuild.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ esbuild <entrypoint> --outdir=out --bundle
$ bun build <entrypoint> --outdir=out
```

----------------------------------------

TITLE: JavaScript Iterator Examples
DESCRIPTION: Examples of Set and Map iterators with various value types
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/web/console/console-log.expected.txt#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
SetIterator { 
  1,
  "123",
  {
    a: [],
    str: "123123132",
    nr: 3453,
  },
}
MapIterator { 
  "key",
  "key_2",
}
```

----------------------------------------

TITLE: Cross-Platform Compilation Commands
DESCRIPTION: Commands for cross-compiling Bun applications to different platforms and architectures.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/executables.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
bun build --compile --target=bun-linux-x64 ./index.ts --outfile myapp

# To support CPUs from before 2013, use the baseline version (nehalem)
bun build --compile --target=bun-linux-x64-baseline ./index.ts --outfile myapp

# To explicitly only support CPUs from 2013 and later, use the modern version (haswell)
# modern is faster, but baseline is more compatible.
bun build --compile --target=bun-linux-x64-modern ./index.ts --outfile myapp
```

----------------------------------------

TITLE: Setting Coverage Thresholds in Bun Tests
DESCRIPTION: Configures minimum code coverage requirements. Tests will fail if coverage falls below these thresholds.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_11

LANGUAGE: toml
CODE:
```
[test]

# to require 90% line-level and function-level coverage
coverageThreshold = 0.9
```

----------------------------------------

TITLE: Using require() with Various File Types
DESCRIPTION: Demonstrates how Bun's require() function works with different file types, including TypeScript and ES modules.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_7

LANGUAGE: ts
CODE:
```
const { foo } = require("./foo"); // extensions are optional
const { bar } = require("./bar.mjs");
const { baz } = require("./baz.tsx");
```

----------------------------------------

TITLE: Opening SQLite Database in Read-only Mode
DESCRIPTION: This code snippet shows how to open an existing SQLite database in read-only mode using Bun's SQLite driver. It's useful for scenarios where you want to prevent modifications to the database.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { Database } from "bun:sqlite";
const db = new Database("mydb.sqlite", { readonly: true });
```

----------------------------------------

TITLE: Creating GitHub Site Search Form with Jump-To Functionality
DESCRIPTION: This HTML form implements the site search functionality within the GitHub header. It includes an input field for the search query, hidden fields for CSRF protection and search type, and various data attributes (like `data-scoped-search-url`, `data-unscoped-search-url`, `data-jump-to-suggestions-path`) likely used by JavaScript to handle scoped/unscoped search and fetch jump-to suggestions. The form uses specific JS-hook classes (`js-site-search-form`, `js-jump-to-field`, etc.) indicating JavaScript interaction.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<form class="js-site-search-form" role="search" aria-label="Site" data-scope-type="Repository" data-scope-id="160065385" data-scoped-search-url="/botika/v_escape/search" data-unscoped-search-url="/search" action="/botika/v_escape/search" accept-charset="UTF-8" method="get">
      <label class="form-control input-sm header-search-wrapper p-0 header-search-wrapper-jump-to position-relative d-flex flex-justify-between flex-items-center js-chromeless-input-container">
        <input type="text"
          class="form-control input-sm header-search-input jump-to-field js-jump-to-field js-site-search-focus js-site-search-field is-clearable"
          data-hotkey="s,/"
          name="q"
          value=""
          placeholder="Search"
          data-unscoped-placeholder="Search GitHub"
          data-scoped-placeholder="Search"
          autocapitalize="off"
          aria-autocomplete="list"
          aria-controls="jump-to-results"
          aria-label="Search"
          data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations"
          spellcheck="false"
          autocomplete="off"
          >
          <input type="hidden" data-csrf="true" class="js-data-jump-to-suggestions-path-csrf" value="vKvP+D+4NCzX873rdBPQncGQKRIiBOU93ZQS3ExTZoHR0yCFhfS+l0IREjyzakp+ttbODprvr/e20THRVRrY7w==" />
          <input type="hidden" class="js-site-search-type-field" name="type" >
            <img src="https://github.githubassets.com/images/search-key-slash.svg" alt="" class="mr-2 header-search-key-slash">

            <div class="Box position-absolute overflow-hidden d-none jump-to-suggestions js-jump-to-suggestions-container">
              
<ul class="d-none js-jump-to-suggestions-template-container">
  

<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-suggestion" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg height="16" width="16" class="octicon octicon-repo flex-shrink-0 js-jump-to-octicon-repo d-none" title="Repository" aria-label="Repository" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z"></path></svg>
      <svg height="16" width="16" class="octicon octicon-project flex-shrink-0 js-jump-to-octicon-project d-none" title="Project" aria-label="Project" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M1.75 0A1.75 1.75 0 000 1.75v12.5C0 15.216.784 16 1.75 16h12.5A1.75 1.75 0 0016 14.25V1.75A1.75 1.75 0 0014.25 0H1.75zM1.5 1.75a.25.25 0 01.25-.25h12.5a.25.25 0 01.25.25v12.5a.25.25 0 01-.25.25H1.75a.25.25 0 01-.25-.25V1.75zM11.75 3a.75.75 0 00-.75.75v7.5a.75.75 0 001.5 0v-7.5a.75.75 0 00-.75-.75zm-8.25.75a.75.75 0 011.5 0v5.5a.75.75 0 01-1.5 0v-5.5zM8 3a.75.75 0 00-.75.75v3.5a.75.75 0 001.5 0v-3.5A.75.75 0 008 3z"></path></svg>
      <svg height="16" width="16" class="octicon octicon-search flex-shrink-0 js-jump-to-octicon-search d-none" title="Search" aria-label="Search" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M11.5 7a4.499 4.499 0 11-8.998 0A4.499 4.499 0 0111.5 7zm-.82 4.74a6 6 0 111.06-1.06l3.04 3.04a.75.75 0 11-1.06 1.06l-3.04-3.04z"></path></svg>
    </div>

    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
    </div>

    <div class="border rounded-1 flex-shrink-0 bg-gray px-1 text-gray-light ml-1 f6 d-none js-jump-to-badge-search">
      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this repository">
        In this repository
      </span>
      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
        All GitHub
      </span>
      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>

    <div aria-hidden="true" class="border rounded-1 flex-shrink-0 bg-gray px-1 text-gray-light ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
      Jump to
      <span class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>
  </a>
</li>

</ul>

<ul class="d-none js-jump-to-no-results-template-container">
  <li class="d-flex flex-justify-center flex-items-center f5 d-none js-jump-to-suggestion p-2">
    <span class="text-gray">No suggested jump to results</span>
  </li>
</ul>

<ul id="jump-to-results" role="listbox" class="p-0 m-0 js-navigation-container jump-to-suggestions-results-container js-jump-to-suggestions-results-container">
  

<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-scoped-search d-none" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg height="16" width="16" class="octicon octicon-repo flex-shrink-0 js-jump-to-octicon-repo d-none" title="Repository" aria-label="Repository" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z"></path></svg>

```

----------------------------------------

TITLE: Setting Per-Test Timeout for Bun Tests using Bash
DESCRIPTION: Demonstrates the usage of the `--timeout` flag to set a maximum execution time in milliseconds for each individual test. If a test exceeds this duration (default is 5000ms), it will be marked as failed. The example sets the timeout to 20ms.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
# default value is 5000
$ bun test --timeout 20
```

----------------------------------------

TITLE: Installing Testing Library Dependencies
DESCRIPTION: Commands to install Testing Library packages for React, DOM, and Jest-DOM matchers as dev dependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/testing-library.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
bun add -D @testing-library/react @testing-library/dom @testing-library/jest-dom
```

----------------------------------------

TITLE: Using Symlink Backend with Node.js
DESCRIPTION: Command-line example showing how to install packages with Bun's symlink backend and run Node.js with preserve-symlinks flag to properly resolve node_modules of dependencies when using symlinks.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/cache.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ bun install --backend symlink
$ node --preserve-symlinks ./foo.js
```

----------------------------------------

TITLE: Setting up Prettier Configuration for Bun Project
DESCRIPTION: This snippet configures Prettier for the Bun project. It sets various formatting options including tab width, quote style, and specific file overrides.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/fs/writeFileSync.txt#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{
  "tabWidth": 2,
  "useTabs": false,
  "singleQuote": false,
  "trailingComma": "es5",
  "semi": true,
  "overrides": [
    {
      "files": "*.md",
      "options": {
        "embeddedLanguageFormatting": "off"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Set LLVM 19 Path on macOS (Homebrew)
DESCRIPTION: This command sets the PATH environment variable to include the directory containing Clang 19 installed by Homebrew. This ensures that Clang 19 is used by Bun's build process.  It works for bash. Fish and zsh require slightly different syntax.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_14

LANGUAGE: bash
CODE:
```
$ export PATH="$(brew --prefix llvm@19)/bin:$PATH"
```

----------------------------------------

TITLE: Setting Numeric Configuration Value
DESCRIPTION: A simple numeric value setting of 0, likely representing a configuration flag, counter, or initialization value.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/snippets/reload/timestamp.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
0
```

----------------------------------------

TITLE: Skipping Tests with test.skip in Bun Test Runner (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the test.skip function to mark a test as skipped in the Bun test runner. The test will not be executed when running the test suite.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/skip-tests.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { test } from "bun:test";

test.skip("unimplemented feature", () => {
  expect(Bun.isAwesome()).toBe(true);
});
```

----------------------------------------

TITLE: Defining SVG Repository Icon for Search Suggestions
DESCRIPTION: This SVG snippet defines the standard GitHub repository icon. It is embedded within the search suggestions template (`js-jump-to-suggestions-template-container`) and also within the scoped search results list (`js-jump-to-scoped-search`), intended to visually represent repository results in the jump-to dropdown. It uses a path element with `fill-rule="evenodd"`.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_4

LANGUAGE: svg
CODE:
```
<svg height="16" width="16" class="octicon octicon-repo flex-shrink-0 js-jump-to-octicon-repo d-none" title="Repository" aria-label="Repository" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z"></path></svg>
```

----------------------------------------

TITLE: Variadic Command Line Options in JavaScript
DESCRIPTION: Shows implementation of variadic options that can accept multiple values, with different ways to specify and parse multiple arguments.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
program
  .option('-n, --number <numbers...>', 'specify numbers')
  .option('-l, --letter [letters...]', 'specify letters');

program.parse();

console.log('Options: ', program.opts());
console.log('Remaining arguments: ', program.args);
```

----------------------------------------

TITLE: Using getTestCases from process-exit-code-test-cases module
DESCRIPTION: Retrieves test cases for testing process exit codes. Takes a boolean parameter to adjust test cases for worker threads and returns an array of test case objects with functions, expected exit codes, and error patterns.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_16

LANGUAGE: JavaScript
CODE:
```
getTestCases(isWorker)
```

----------------------------------------

TITLE: Syntax-Highlighted Error Output Example
DESCRIPTION: Shows the output format of Bun's syntax-highlighted error preview, which includes the source code with a pointer to the error location, the error message, and the stack trace.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/debugger.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
1 | // Create an error
2 | const err = new Error("Something went wrong");
                ^
error: Something went wrong
      at file.js:2:13
```

----------------------------------------

TITLE: Loading GitHub Repository-Specific Bootstrap Scripts
DESCRIPTION: HTML script tags that load the main repository-specific JavaScript functionality for GitHub. These scripts provide core functionality for the repository page and general GitHub interface features.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_23

LANGUAGE: HTML
CODE:
```
<script crossorigin="anonymous" async="async" integrity="sha512-p3q8Em7BEbMxbnKAdDPxkwfjFMVoK6dlp3wfacnA+tE5miXMdKF3+t8Rq+5IRbscjHfTuoqR/QHafo683zgUUg==" type="application/javascript" src="https://github.githubassets.com/assets/repositories-bootstrap-a77abc12.js"></script>
<script crossorigin="anonymous" async="async" integrity="sha512-g7kJtGog/arl2FcMYjpQ96dSinG2snUOeV6psKXQQQQPZ8x/0VPpEUb4GvR89O7uQOy1yhYVXBA6lEvLzOSlb5A==" type="application/javascript" src="https://github.githubassets.com/assets/github-bootstrap-83b909b4.js"></script>
```

----------------------------------------

TITLE: Setting System Time in bun:test
DESCRIPTION: Demonstrates how to change the system time for tests using setSystemTime from bun:test. This affects all Date operations within the test scope.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/time.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { setSystemTime, beforeAll, test, expect } from "bun:test";

beforeAll(() => {
  setSystemTime(new Date("2020-01-01T00:00:00.000Z"));
});

test("it is 2020", () => {
  expect(new Date().getFullYear()).toBe(2020);
});
```

----------------------------------------

TITLE: Creating Mock Functions in Bun Tests using TypeScript
DESCRIPTION: Provides a TypeScript code snippet demonstrating how to create a mock function using `mock` from the `bun:test` module. The example mocks `Math.random` and includes assertions using `expect` to check if the mock was called and how many times. Mocks created this way are automatically reset between tests.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_12

LANGUAGE: ts
CODE:
```
import { test, expect, mock } from "bun:test";
const random = mock(() => Math.random());

test("random", () => {
  const val = random();
  expect(val).toBeGreaterThan(0);
  expect(random).toHaveBeenCalled();
  expect(random).toHaveBeenCalledTimes(1);
});
```

----------------------------------------

TITLE: Reading Directories with node:fs
DESCRIPTION: Example of reading directory contents using Node.js fs module.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-io.md#2025-04-22_snippet_13

LANGUAGE: typescript
CODE:
```
import { readdir } from "node:fs/promises";

// read all the files in the current directory
const files = await readdir(import.meta.dir);
```

----------------------------------------

TITLE: Configuring Bun Extension Settings in settings.json for Visual Studio Code
DESCRIPTION: This snippet demonstrates how to configure the settings.json file to customize the behavior of the Bun extension in Visual Studio Code. It includes settings for the Bun runtime path, debug terminal options, and test file patterns.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-vscode/README.md#2025-04-22_snippet_1

LANGUAGE: jsonc
CODE:
```
{
  "bun.runtime": "/path/to/bun",
  "bun.debugTerminal.enabled": true,
  "bun.debugTerminal.stopOnEntry": false,
  "bun.test.filePattern": "**/*{.test.,.spec.,_test_,_spec_}{js,ts,tsx,jsx,mts,cts}"
}
```

----------------------------------------

TITLE: Basic JavaScript Data Types
DESCRIPTION: Examples of primitive data types including numbers, strings, booleans, null, undefined and symbols
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/web/console/console-log.expected.txt#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
{
  a: "",
}
Hello World!
0
-0
123
-123
123.567
-123.567
true
false
null
undefined
Infinity
-Infinity
Symbol(Symbol Description)
```

----------------------------------------

TITLE: Compiled Output for color-mix() Usage - Bun Bundler CSS
DESCRIPTION: Shows static colors generated by Bun's bundler for color-mix() expressions. Inputs must use static values (not CSS variables) to guarantee build-time computation. Output: hex and expanded selectors for .button and hover states. Ensures compatibility and consistent appearance.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_5

LANGUAGE: css
CODE:
```
.button {\n  /* Computed to the exact resulting color */\n  background-color: #b31a1a;\n}\n\n.button:hover {\n  background-color: #c54747;\n}
```

----------------------------------------

TITLE: Rebuild JavaScriptCore (JSC)
DESCRIPTION: After an initial `make jsc-debug`, this command rebuilds JavaScriptCore more efficiently. This command uses `cmake` to build the `jsc` target. The build artifacts will be placed in `./vendor/WebKit/WebKitBuild/Debug`.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_26

LANGUAGE: bash
CODE:
```
# After an initial run of `make jsc-debug`, you can rebuild JSC with:
$ cmake --build vendor/WebKit/WebKitBuild/Debug --target jsc && rm vendor/WebKit/WebKitBuild/Debug/JavaScriptCore/DerivedSources/inspector/InspectorProtocolObjects.h
```

----------------------------------------

TITLE: Implementing Basic HTTP Server with Event Loop in C++
DESCRIPTION: Demonstrates setting up a basic HTTP server using uWS::App with a GET route handler and event loop implementation. Shows fallthrough behavior and proper error handling when server fails to start.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-uws/misc/READMORE.md#2025-04-22_snippet_4

LANGUAGE: c++
CODE:
```
int main() {
    uWS::App().get("/*", [](auto *res, auto *req) {
        res->end("Hello World!");
    }).listen(9001, [](auto *listenSocket) {
        if (listenSocket) {
            std::cout << "Listening for connections..." << std::endl;
        }
    }).run();

    std::cout << "Shoot! We failed to listen and the App fell through, exiting now!" << std::endl;
}
```

----------------------------------------

TITLE: TypeScript Type for Environment Variables
DESCRIPTION: Shows the default TypeScript type assigned to environment variables in Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_16

LANGUAGE: ts
CODE:
```
Bun.env.whatever;
// string | undefined
```

----------------------------------------

TITLE: Handling Variadic Arguments in Commander.js
DESCRIPTION: Demonstrates how to use variadic arguments (multiple arguments captured as an array) in a command. The last argument can be made variadic by appending ... to its name.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
program
  .version('0.1.0')
  .command('rmdir')
  .argument('<dirs...>')
  .action(function (dirs) {
    dirs.forEach((dir) => {
      console.log('rmdir %s', dir);
    });
  });
```

----------------------------------------

TITLE: Installing Ubuntu HWE Kernel in Bash
DESCRIPTION: This command installs the official Ubuntu hardware enablement (HWE) kernel for Ubuntu 20.04. This is recommended if the current kernel version is below 5.6 to ensure better performance with Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/install.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
# Install the official Ubuntu hardware enablement kernel
$ sudo apt install --install-recommends linux-generic-hwe-20.04
```

----------------------------------------

TITLE: Redirecting Input from JavaScript Objects in Bun Shell
DESCRIPTION: Demonstrates how to use a JavaScript Response object as input for a shell command using the < operator.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

const response = new Response("hello i am a response body");

const result = await $`cat < ${response}`.text();

console.log(result); // hello i am a response body
```

----------------------------------------

TITLE: Installing Dependencies for Express Server
DESCRIPTION: Command to install the necessary dependencies for the Express.js hello world server using Bun package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/express/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
bun install
```

----------------------------------------

TITLE: Checking if a file is the entrypoint using import.meta.main in TypeScript with Bun
DESCRIPTION: This snippet demonstrates how to use import.meta.main to determine if the current file is being directly executed with 'bun run' or if it's being imported by another file. This is useful for creating modules that can be both imported and run as standalone scripts.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/entrypoint.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
if (import.meta.main) {
  // this file is directly executed with `bun run`
} else {
  // this file is being imported by another file
}
```

----------------------------------------

TITLE: GitHub Header Navigation Markup in HTML
DESCRIPTION: HTML code for GitHub's primary navigation header displayed to logged-out users. The navigation includes dropdown menus for 'Why GitHub?' and 'Explore' sections, along with links to Team and Enterprise pages. The responsive design adjusts for different screen sizes.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_1

LANGUAGE: HTML
CODE:
```
data-ga-click="Sign up, click to sign up for account, ref_page:/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show;ref_cta:Sign up;ref_loc:header logged out">
                Sign&nbsp;up
              </a>

          <button class="btn-link d-lg-none mt-1 js-details-target" type="button" aria-label="Toggle navigation" aria-expanded="false">
            <svg height="24" class="octicon octicon-three-bars text-white" viewBox="0 0 16 16" version="1.1" width="24" aria-hidden="true"><path fill-rule="evenodd" d="M1 2.75A.75.75 0 011.75 2h12.5a.75.75 0 110 1.5H1.75A.75.75 0 011 2.75zm0 5A.75.75 0 011.75 7h12.5a.75.75 0 110 1.5H1.75A.75.75 0 011 7.75zM1.75 12a.75.75 0 100 1.5h12.5a.75.75 0 100-1.5H1.75z"></path></svg>
          </button>
        </div>
    </div>

    <div class="HeaderMenu HeaderMenu--logged-out position-fixed top-0 right-0 bottom-0 height-fit position-lg-relative d-lg-flex flex-justify-between flex-items-center flex-auto">
      <div class="d-flex d-lg-none flex-justify-end border-bottom bg-gray-light p-3">
        <button class="btn-link js-details-target" type="button" aria-label="Toggle navigation" aria-expanded="false">
          <svg height="24" class="octicon octicon-x text-gray" viewBox="0 0 24 24" version="1.1" width="24" aria-hidden="true"><path fill-rule="evenodd" d="M5.72 5.72a.75.75 0 011.06 0L12 10.94l5.22-5.22a.75.75 0 111.06 1.06L13.06 12l5.22 5.22a.75.75 0 11-1.06 1.06L12 13.06l-5.22 5.22a.75.75 0 01-1.06-1.06L10.94 12 5.72 6.78a.75.75 0 010-1.06z"></path></svg>
        </button>
      </div>

        <nav class="mt-0 px-3 px-lg-0 mb-5 mb-lg-0" aria-label="Global">
          <ul class="d-lg-flex list-style-none">
              <li class="d-block d-lg-flex flex-lg-nowrap flex-lg-items-center border-bottom border-lg-bottom-0 mr-0 mr-lg-3 edge-item-fix position-relative flex-wrap flex-justify-between d-flex flex-items-center ">
                <details class="HeaderMenu-details details-overlay details-reset width-full">
                  <summary class="HeaderMenu-summary HeaderMenu-link px-0 py-3 border-0 no-wrap d-block d-lg-inline-block">
                    Why GitHub?
                    <svg x="0px" y="0px" viewBox="0 0 14 8" xml:space="preserve" fill="none" class="icon-chevon-down-mktg position-absolute position-lg-relative">
                      <path d="M1,1l6.2,6L13,1"></path>
                    </svg>
                  </summary>
                  <div class="dropdown-menu flex-auto rounded-1 bg-white px-0 mt-0 pb-4 p-lg-4 position-relative position-lg-absolute left-0 left-lg-n4">
                    <a href="/features" class="py-2 lh-condensed-ultra d-block link-gray-dark no-underline h5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Features">Features <span class="Bump-link-symbol float-right text-normal text-gray-light">&rarr;</span></a>
                    <ul class="list-style-none f5 pb-3">
                      <li class="edge-item-fix"><a href="/features/code-review/" class="py-2 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to Code review">Code review</a></li>
                      <li class="edge-item-fix"><a href="/features/project-management/" class="py-2 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to Project management">Project management</a></li>
                      <li class="edge-item-fix"><a href="/features/integrations" class="py-2 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to Integrations">Integrations</a></li>
                      <li class="edge-item-fix"><a href="/features/actions" class="py-2 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to Actions">Actions</a></li>
                      <li class="edge-item-fix"><a href="/features/packages" class="py-2 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to GitHub Packages">Packages</a></li>
                      <li class="edge-item-fix"><a href="/features/security" class="py-2 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to Security">Security</a></li>
                      <li class="edge-item-fix"><a href="/features#team-management" class="py-2 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to Team management">Team management</a></li>
                      <li class="edge-item-fix"><a href="/features#hosting" class="py-2 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to Code hosting">Hosting</a></li>
                      <li class="edge-item-fix hide-xl"><a href="/mobile" class="py-2 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to Mobile">Mobile</a></li>
                    </ul>

                    <ul class="list-style-none mb-0 border-lg-top pt-lg-3">
                      <li class="edge-item-fix"><a href="/customer-stories" class="py-2 lh-condensed-ultra d-block no-underline link-gray-dark no-underline h5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Customer stories">Customer stories <span class="Bump-link-symbol float-right text-normal text-gray-light">&rarr;</span></a></li>
                      <li class="edge-item-fix"><a href="/security" class="py-2 lh-condensed-ultra d-block no-underline link-gray-dark no-underline h5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Security">Security <span class="Bump-link-symbol float-right text-normal text-gray-light">&rarr;</span></a></li>
                    </ul>
                  </div>
                </details>
              </li>
              <li class="border-bottom border-lg-bottom-0 mr-0 mr-lg-3">
                <a href="/team" class="HeaderMenu-link no-underline py-3 d-block d-lg-inline-block" data-ga-click="(Logged out) Header, go to Team">Team</a>
              </li>
              <li class="border-bottom border-lg-bottom-0 mr-0 mr-lg-3">
                <a href="/enterprise" class="HeaderMenu-link no-underline py-3 d-block d-lg-inline-block" data-ga-click="(Logged out) Header, go to Enterprise">Enterprise</a>
              </li>

              <li class="d-block d-lg-flex flex-lg-nowrap flex-lg-items-center border-bottom border-lg-bottom-0 mr-0 mr-lg-3 edge-item-fix position-relative flex-wrap flex-justify-between d-flex flex-items-center ">
                <details class="HeaderMenu-details details-overlay details-reset width-full">
                  <summary class="HeaderMenu-summary HeaderMenu-link px-0 py-3 border-0 no-wrap d-block d-lg-inline-block">
                    Explore
                    <svg x="0px" y="0px" viewBox="0 0 14 8" xml:space="preserve" fill="none" class="icon-chevon-down-mktg position-absolute position-lg-relative">
                      <path d="M1,1l6.2,6L13,1"></path>
                    </svg>
                  </summary>

                  <div class="dropdown-menu flex-auto rounded-1 bg-white px-0 pt-2 pb-0 mt-0 pb-4 p-lg-4 position-relative position-lg-absolute left-0 left-lg-n4">
                    <ul class="list-style-none mb-3">
                      <li class="edge-item-fix"><a href="/explore" class="py-2 lh-condensed-ultra d-block link-gray-dark no-underline h5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Explore">Explore GitHub <span class="Bump-link-symbol float-right text-normal text-gray-light">&rarr;</span></a></li>
                    </ul>

                    <h4 class="text-gray-light text-normal text-mono f5 mb-2 border-lg-top pt-lg-3">Learn &amp; contribute</h4>
                    <ul class="list-style-none mb-3">
                      <li class="edge-item-fix"><a href="/topics" class="py-2 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to Topics">Topics</a></li>
                        <li class="edge-item-fix"><a href="/collections" class="py-2 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to Collections">Collections</a></li>
                      <li class="edge-item-fix"><a href="/trending" class="py-2 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to Trending">Trending</a></li>
                      <li class="edge-item-fix"><a href="https://lab.github.com/" class="py-2 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to Learning lab">Learning Lab</a></li>
                      <li class="edge-item-fix"><a href="https://opensource.guide" class="py-2 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to Open source guides">Open source guides</a></li>
                    </ul>

                    <h4 class="text-gray-light text-normal text-mono f5 mb-2 border-lg-top pt-lg-3">Connect with others</h4>
                    <ul class="list-style-none mb-0">
                      <li class="edge-item-fix"><a href="https://github.com/events" class="py-2 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to Events">Events</a></li>
                      <li class="edge-item-fix"><a href="https://github.community" class="py-2 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to Community forum">Community forum</a></li>
                      <li class="edge-item-fix"><a href="https://education.github.com" class="py-2 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to GitHub Education">GitHub Education</a></li>
                      <li class="edge-item-fix"><a href="https://stars.github.com" class="py-2 pb-0 lh-condensed-ultra d-block link-gray no-underline f5" data-ga-click="(Logged out) Header, go to GitHub Stars Program">GitHub Stars program</a></li>
```

----------------------------------------

TITLE: Configuring Root package.json for Workspaces in Bun
DESCRIPTION: This snippet shows how to set up the root package.json file for a monorepo using Bun's workspaces feature. It declares the project as private and specifies the workspace locations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/workspaces.md#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "my-monorepo",
  "private": true,
  "workspaces": [
    "packages/*"
  ]
}
```

----------------------------------------

TITLE: Integrating MDX Addon with Bun Build System
DESCRIPTION: Example of using the MDX native addon with Bun.build() to process MDX files. Demonstrates plugin configuration, build settings, and output directory specification.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-build-mdx-rs/README.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { build } from "bun";
import mdx from "./index.js";

// TODO: This needs to be prebuilt for the current platform
// Probably use a napi-rs template for this
import addon from "./target/release/libmdx_bun.dylib" with { type: "file" };

const results = await build({
  entrypoints: ["./hello.jsx"],
  plugins: [mdx({ addon })],
  minify: true,
  outdir: "./dist",
  define: {
    "process.env.NODE_ENV": JSON.stringify("production"),
  },
});

console.log(results);
```

----------------------------------------

TITLE: Using Bun.main to get the absolute path in a TypeScript file
DESCRIPTION: This example shows how to access the Bun.main property to retrieve the absolute path to the current entrypoint file. The property returns the path of the file that was directly executed by the bun runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/main.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
console.log(Bun.main);
```

----------------------------------------

TITLE: Removing Dependencies with Bun CLI - Bash
DESCRIPTION: This snippet illustrates how to remove a specified package (e.g., 'ts-node') from a project using the Bun command-line interface. It requires that Bun is installed and initialized in your project. The key parameter is the package name following 'bun remove', and the expected result is that the specified package as well as its references are removed from your project's dependencies. No output is shown unless run in a shell; there are no unique limitations except the package must exist in your dependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/remove.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ bun remove ts-node
```

----------------------------------------

TITLE: Fetching from Blob URLs in TypeScript
DESCRIPTION: Shows how to fetch content from Blob URLs created with URL.createObjectURL(), which is useful for accessing blob data through the fetch API.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_21

LANGUAGE: typescript
CODE:
```
const blob = new Blob(["Hello, World!"], { type: "text/plain" });
const url = URL.createObjectURL(blob);
const response = await fetch(url);
```

----------------------------------------

TITLE: Initializing a Bun Project
DESCRIPTION: This command initializes a new Bun project, which generates a tsconfig.json file with the recommended compiler options.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/typescript.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
$ bun init
```

----------------------------------------

TITLE: Adding Development Dependencies using Bun CLI
DESCRIPTION: This snippet shows how to use the Bun CLI to add a development dependency. It demonstrates two equivalent commands: the full form and a shorthand version.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/add-dev.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun add zod --dev
$ bun add zod -d # shorthand
```

----------------------------------------

TITLE: Compiling Bun Zig Object
DESCRIPTION: Builds the Zig object file (bun-zig.o) which doesn't depend on WebKit or other submodule dependencies. Can be cross-compiled and only requires bun install to be run beforehand.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/internals/build-process-for-ci.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
BUN_REPO=/path/to/oven-sh/bun

cd tmp1

cmake $BUN_REPO \
  -G Ninja \
  -DCMAKE_BUILD_TYPE=Release \
  -DCPU_TARGET="native" \
  -DZIG_TARGET="native" \
  -DBUN_ZIG_OBJ_DIR="./build"

ninja ./build/bun-zig.o
# -> bun-zig.o
```

----------------------------------------

TITLE: Configuring ArrayBufferSink to Return Uint8Array
DESCRIPTION: Shows how to configure ArrayBufferSink to return data as a Uint8Array instead of the default ArrayBuffer, using the asUint8Array option.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/streams.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
const sink = new Bun.ArrayBufferSink();
sink.start({
  asUint8Array: true
});

sink.write("h");
sink.write("e");
sink.write("l");
sink.write("l");
sink.write("o");

sink.end();
// Uint8Array(5) [ 104, 101, 108, 108, 111 ]
```

----------------------------------------

TITLE: Converting ReadableStream to Array of Chunks in TypeScript
DESCRIPTION: A Bun utility function for resolving a ReadableStream to an array of its chunks, where each chunk may be a string, typed array, or ArrayBuffer.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_23

LANGUAGE: typescript
CODE:
```
// with Bun function
Bun.readableStreamToArray(stream);
```

----------------------------------------

TITLE: Builtin Module Export Example in TypeScript
DESCRIPTION: Shows how to export functionality from builtin modules using a combination of require and export default. The exports are preprocessed into properties on the default export object.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/js/README.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const fs = require("fs"); // load another builtin module\n\nexport default {\n  hello: 2,\n  world: 3,\n};
```

----------------------------------------

TITLE: Resetting Expo Project to Blank State
DESCRIPTION: Command to reset the project, moving starter code to app-example directory and creating a blank app directory for fresh development.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/integration/expo-app/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npm run reset-project
```

----------------------------------------

TITLE: Publishing a Package with Bun CLI - Shell
DESCRIPTION: Demonstrates publishing an npm package from the current working directory using the Bun CLI. The command automatically packs all relevant files, strips workspace protocols from package.json, and pushes the tarball to the configured registry. Outputs details on the packaging process and the result of the publish action. Requires Bun to be installed, and appropriate credentials configured in bunfig.toml or .npmrc files. The expected input is a properly structured project directory, and the output is a published package available in the specified npm registry.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/publish.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
## Publishing the package from the current working directory\n$ bun publish\n\n## Output\nbun publish v$BUN_LATEST_VERSION (ca7428e9)\n\npacked 203B package.json\npacked 224B README.md\npacked 30B index.ts\npacked 0.64KB tsconfig.json\n\nTotal files: 4\nShasum: 79e2b4377b63f4de38dc7ea6e5e9dbee08311a69\nIntegrity: sha512-6QSNlDdSwyG/+(...)X6wXHriDWr6fA==\nUnpacked size: 1.1KB\nPacked size: 0.76KB\nTag: latest\nAccess: default\nRegistry: http://localhost:4873/\n\n + publish-1@1.0.0
```

----------------------------------------

TITLE: Serializing Cookies to Set-Cookie Headers
DESCRIPTION: How to convert a Bun.Cookie instance to a Set-Cookie header string using serialize() or toString() methods. Both methods return the same format.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_14

LANGUAGE: typescript
CODE:
```
const cookie = new Bun.Cookie("session", "abc123", {
  domain: "example.com",
  path: "/admin",
  expires: new Date(Date.now() + 86400000),
  secure: true,
  httpOnly: true,
  sameSite: "strict",
});

console.log(cookie.serialize());
// => "session=abc123; Domain=example.com; Path=/admin; Expires=Sun, 19 Mar 2025 15:03:26 GMT; Secure; HttpOnly; SameSite=strict"
console.log(cookie.toString());
// => "session=abc123; Domain=example.com; Path=/admin; Expires=Sun, 19 Mar 2025 15:03:26 GMT; Secure; HttpOnly; SameSite=strict"
```

----------------------------------------

TITLE: Switching from Jest Imports to Bun Test Imports
DESCRIPTION: Shows how to replace Jest's @jest/globals imports with Bun's native test imports for a cleaner implementation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/migrate-from-jest.md#2025-04-22_snippet_1

LANGUAGE: ts-diff
CODE:
```
- import {test, expect} from "@jest/globals";
+ import {test, expect} from "bun:test";
```

----------------------------------------

TITLE: Deleting Files
DESCRIPTION: Demonstrates how to delete files using the delete() method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-io.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
await Bun.file("logs.json").delete()
```

----------------------------------------

TITLE: Writing Tests with Testing Library
DESCRIPTION: Example test file demonstrating usage of Testing Library with Bun's test runner to test React components.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/testing-library.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import { test, expect } from 'bun:test';
import { screen, render } from '@testing-library/react';
import { MyComponent } from './myComponent';

test('Can use Testing Library', () => {
  render(MyComponent);
  const myComponent = screen.getByTestId('my-component');
  expect(myComponent).toBeInTheDocument();
})
```

----------------------------------------

TITLE: Initializing a New Bun Project (Project Directory Setup) using Shell
DESCRIPTION: This shell sequence creates a new directory for the application, navigates into it, and initializes a Bun project with default settings (non-interactive, via -y). Dependencies: Bun installed. Input: Project directory name. Output: New directory with Bun project configuration, ready for further development.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/edgedb.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
mkdir my-edgedb-app
cd my-edgedb-app
bun init -y
```

----------------------------------------

TITLE: Installing React packages with Bun
DESCRIPTION: How to install React and React DOM packages using Bun's package manager. These packages are required for server-side rendering React components.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/ssr-react.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
# Any package manager can be used
$ bun add react react-dom
```

----------------------------------------

TITLE: Using 'this' Context in Action Handlers
DESCRIPTION: Shows how to access command information using 'this' inside an action handler. This approach uses function expressions (not arrow functions) to access the command context directly.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_19

LANGUAGE: javascript
CODE:
```
program
  .command('serve')
  .argument('<script>')
  .option('-p, --port <number>', 'port number', 80)
  .action(function() {
    console.error('Run script %s on port %s', this.args[0], this.opts().port);
  });
```

----------------------------------------

TITLE: Matching Routes from Request Objects
DESCRIPTION: Example showing how to use the match method with Request objects instead of URL strings. The router will extract the URL from the Request object to resolve the route.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-system-router.md#2025-04-22_snippet_4

LANGUAGE: ts
CODE:
```
router.match(new Request("https://example.com/blog/my-cool-post"));
```

----------------------------------------

TITLE: Defining Constants and Macros for Minigzip in C
DESCRIPTION: Sets up constants and macros used throughout the minigzip implementation, including buffer sizes and suffix definitions.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/zlib.test.txt#2025-04-22_snippet_4

LANGUAGE: C
CODE:
```
#ifndef GZ_SUFFIX
#  define GZ_SUFFIX ".gz"
#endif
#define SUFFIX_LEN (sizeof(GZ_SUFFIX)-1)

#define BUFLEN      16384
#define MAX_NAME_LEN 1024

#ifdef MAXSEG_64K
#  define local static
   /* Needed for systems with limitation on stack size. */
#else
#  define local
#endif
```

----------------------------------------

TITLE: Synchronous Password Hashing and Verification in Bun
DESCRIPTION: Demonstrates the use of synchronous versions of password hashing and verification functions in Bun. These functions are computationally expensive and may impact application performance.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/hashing.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const password = "super-secure-pa$$word";

const hash = Bun.password.hashSync(password, {
  /* config */
});

const isMatch = Bun.password.verifySync(password, hash);
// => true
```

----------------------------------------

TITLE: Defining SVG Search Icon for Search Suggestions
DESCRIPTION: This SVG snippet defines the standard GitHub search (magnifying glass) icon. It is embedded within the search suggestions template (`js-jump-to-suggestions-template-container`), intended to visually represent general search actions or results in the jump-to dropdown. It uses a path element with `fill-rule="evenodd"`.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_6

LANGUAGE: svg
CODE:
```
<svg height="16" width="16" class="octicon octicon-search flex-shrink-0 js-jump-to-octicon-search d-none" title="Search" aria-label="Search" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M11.5 7a4.499 4.499 0 11-8.998 0A4.499 4.499 0 0111.5 7zm-.82 4.74a6 6 0 111.06-1.06l3.04 3.04a.75.75 0 11-1.06 1.06l-3.04-3.04z"></path></svg>
```

----------------------------------------

TITLE: Configuring NPM Registry in Bun
DESCRIPTION: Sets the default npm registry URL and authentication details for package installation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_27

LANGUAGE: toml
CODE:
```
[install]
# set default registry as a string
registry = "https://registry.npmjs.org"
# set a token
registry = { url = "https://registry.npmjs.org", token = "123456" }
# set a username/password
registry = "https://username:password@registry.npmjs.org"
```

----------------------------------------

TITLE: Retrieving Cookies with CookieMap.get()
DESCRIPTION: How to retrieve a cookie by name using the get() method on CookieMap. Returns the cookie value or null if the cookie doesn't exist.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// Get by name
const cookie = cookies.get("session");

if (cookie != null) {
  console.log(cookie);
}
```

----------------------------------------

TITLE: Running Bun CSS HMR Frame Time Analysis Script
DESCRIPTION: This command executes a Node.js script named 'read-frames.js' that analyzes the frame times for CSS Hot Module Replacement in Bun. It sets environment variables SLEEP_INTERVAL to 24 and PROJECT to 'bun'.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/hot-module-reloading/css-stress-test/bun.latest.24ms.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
SLEEP_INTERVAL=24 PROJECT=bun node read-frames.js
```

----------------------------------------

TITLE: Dead Code Elimination Macro Example
DESCRIPTION: Example of a macro function used for dead code elimination during bundling.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/macros.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
export function returnFalse() {
  return false;
}
```

----------------------------------------

TITLE: Starting WebSocket Server in C++ with µWebSockets
DESCRIPTION: Demonstrates how to start listening for WebSocket connections on a specified port. The callback provides a pointer to the listen socket if successful.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-uws/misc/READMORE.md#2025-04-22_snippet_3

LANGUAGE: c++
CODE:
```
App.listen(port, [](auto *listenSocket) {
    /* listenSocket is either nullptr or us_listen_socket */
})
```

----------------------------------------

TITLE: Unsafe Raw SQL Queries in TypeScript
DESCRIPTION: Shows how to execute raw SQL queries using the unsafe method (use with caution).
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_12

LANGUAGE: typescript
CODE:
```
// Multiple commands without parameters
const result = await sql.unsafe(`
  SELECT ${userColumns} FROM users;
  SELECT ${accountColumns} FROM accounts;
`);

// Using parameters (only one command is allowed)
const result = await sql.unsafe(
  "SELECT " + dangerous + " FROM users WHERE id = $1",
  [id],
);
```

----------------------------------------

TITLE: Configuring Connection Pool Settings in Bun SQL Client - TypeScript
DESCRIPTION: Shows how to customize the built-in connection pool behavior by setting parameters like maximum connections (`max`), idle timeout (`idleTimeout`), maximum connection lifetime (`maxLifetime`), and connection timeout (`connectionTimeout`) in the `SQL` constructor options when initializing the client.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_22

LANGUAGE: typescript
CODE:
```
```ts
const db = new SQL({
  // Pool configuration
  max: 20, // Maximum 20 concurrent connections
  idleTimeout: 30, // Close idle connections after 30s
  maxLifetime: 3600, // Max connection lifetime 1 hour
  connectionTimeout: 10, // Connection timeout 10s
});
```
```

----------------------------------------

TITLE: Clearing Bun Install Cache
DESCRIPTION: Command to delete the bun install cache directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bun-install.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ rm -rf ~/.bun/install/cache
```

----------------------------------------

TITLE: Setting Up Garbage Collection Tracking in Node.js Tests
DESCRIPTION: Example showing how to use the onGC module to track garbage collection of objects. This installs a listener that will be called when the target object is garbage collected, useful for testing memory management behavior.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
require('../common');
const { onGC } = require('../common/gc');

onGC({}, { ongc() { console.log('collected'); } });
```

----------------------------------------

TITLE: Installing Postject via NPM
DESCRIPTION: Command to install Postject globally using npm package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/postject/README.markdown#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npm i -g postject
```

----------------------------------------

TITLE: Plugin State Access in Rust Implementation
DESCRIPTION: Example of accessing plugin state from within the native plugin implementation
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-native-plugin-rs/README.md#2025-04-22_snippet_6

LANGUAGE: rust
CODE:
```
#[bun]
pub fn on_before_parse_plugin_impl(handle: &mut OnBeforeParse) {
    // This operation is only safe if you pass in an external when registering the plugin.
    // If you don't, this could lead to a segfault or access of undefined memory.
  let plugin_state: &PluginState =
     unsafe { handle.external().and_then(|state| state.ok_or(Error::Unknown))? };


  // Fetch our source code again
  let input_source_code = handle.input_source_code()?;

  // Count the number of `foo`s and add it to our state
  let foo_count = source_code.matches("foo").count() as u32;
  plugin_state.foo_count.fetch_add(foo_count, std::sync::atomic::Ordering::Relaxed);
}
```

----------------------------------------

TITLE: ANSI Color Format Examples in TypeScript
DESCRIPTION: Examples of converting various color formats to ANSI escape codes for terminal output using Bun.color() with 'ansi' output format
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/color.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
Bun.color("red", "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color(0xff0000, "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color("#f00", "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color("#ff0000", "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color("rgb(255, 0, 0)", "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color("rgba(255, 0, 0, 1)", "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color("hsl(0, 100%, 50%)", "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color("hsla(0, 100%, 50%, 1)", "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color({ r: 255, g: 0, b: 0 }, "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color({ r: 255, g: 0, b: 0, a: 1 }, "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color([255, 0, 0], "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color([255, 0, 0, 255], "ansi"); // "\u001b[38;2;255;0;0m"
```

----------------------------------------

TITLE: Running WebKit Source Map Tests
DESCRIPTION: Instructions for checking out WebKit and running source map tests using command line tools.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/test426/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
cd <webkit-directory>
git am <this-repo>/webkit/0001-Add-harness-for-source-map-spec-tests.patch
Tools/Scripts/build-webkit
Tools/Scripts/run-webkit-tests LayoutTests/inspector/model/source-map-spec.html
```

----------------------------------------

TITLE: External Package Flag Comparison
DESCRIPTION: Shows how to mark packages as external in both bundlers. esbuild uses a colon syntax while Bun uses a simpler space-separated syntax.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/vs-esbuild.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ esbuild --external:react
$ bun build --external react
```

----------------------------------------

TITLE: Installing dependencies with Bun
DESCRIPTION: Various commands to install dependencies using Bun, including production mode, frozen lockfile, and omitting specific dependency types.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/index.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ bun install
$ bun install --production
$ bun install --frozen-lockfile
# Disable devDependencies and optionalDependencies
$ bun install --omit=dev --omit=optional
$ bun install --dry-run
$ bun install --lockfile-only
$ bun install --verbose # debug logging
$ bun install --silent  # no logging
```

----------------------------------------

TITLE: Defining ArrowJS UI Component for Stric PageRouter in TypeScript
DESCRIPTION: This snippet shows how to define a UI component using `@stricjs/arrow`. The `render` function utilizes the `html` template literal helper from `@stricjs/arrow/utils` to define the component's structure (a paragraph element containing 'Hi'). The `path` export specifies the URL path ('/') where this component should be rendered when used with a Stric `PageRouter`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/ecosystem/stric.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { html } from '@stricjs/arrow/utils';

// Code inside this function can use web APIs
export function render() {
  // Render a <p> element with text 'Hi'
  html`<p>Hi</p>`;
};

// Set the path to handle
export const path = '/';
```

----------------------------------------

TITLE: Testing HTML Escaping with Long Strings in Rust
DESCRIPTION: A test suite for HTML escaping functionality that verifies proper escaping of HTML characters in long text strings. The code includes multiple assertions to verify string concatenation, repetition, and HTML character escaping.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_14

LANGUAGE: rust
CODE:
```
.join("")
.repeat(1024)
.as_ref()
)
.to_string(),
[string_long, &escaped.repeat(13)].join("").repeat(1024)
);
assert_eq!(
    HTMLEscape::from([string_long, "<", string_long].join("").as_ref()).to_string(),
    [string_long, "&lt;", string_long].join("")
);
assert_eq!(
    HTMLEscape::from(
        [string_long, "<", string_long, escapes, string_long,]
            .join("")
            .as_ref()
    )
    .to_string(),
    [string_long, "&lt;", string_long, escaped, string_long,].join("")
);

let string_long = r#"
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris consequat tellus sit
    amet ornare fermentum. Etiam nec erat ante. In at metus a orci mollis scelerisque.
    Sed eget ultrices turpis, at sollicitudin erat. Integer hendrerit nec magna quis
    venenatis. Vivamus non dolor hendrerit, vulputate velit sed, varius nunc. Quisque
    in pharetra mi. Sed ullamcorper nibh malesuada commodo porttitor. Ut scelerisque
    sodales felis quis dignissim. Morbi aliquam finibus justo, sit amet consectetur
    mauris efficitur sit amet. Donec posuere turpis felis, eu lacinia magna accumsan
    quis. Fusce egestas lacus vel fermentum tincidunt. Phasellus a nulla eget lectus
    placerat commodo at eget nisl. Fusce cursus dui quis purus accumsan auctor.
    Donec iaculis felis quis metus consectetur porttitor.
<p>
    Etiam nibh mi, <b>accumsan</b> quis purus sed, posuere fermentum lorem. In pulvinar porta
    maximus. Fusce tincidunt lacinia tellus sit amet tincidunt. Aliquam lacus est, pulvinar
    non metus a, <b>facilisis</b> ultrices quam. Nulla feugiat leo in cursus eleifend. Suspendisse
    eget nisi ac justo sagittis interdum id a ipsum. Nulla mauris justo, scelerisque ac
```

----------------------------------------

TITLE: Install Bun Dependencies on openSUSE Tumbleweed
DESCRIPTION: This command installs the dependencies for building Bun on openSUSE Tumbleweed using zypper. It includes compilers, build tools, and Rust.  `sudo` provides root privileges, and `rustup` manages Rust toolchains.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_4

LANGUAGE: bash
CODE:
```
$ sudo zypper install go cmake ninja automake git icu rustup && rustup toolchain install stable
```

----------------------------------------

TITLE: Drawing Bun.js Logo in ASCII Art
DESCRIPTION: Text-based artistic representation of the Bun.js logo using ASCII characters to create a bun-shaped design with circular patterns and decorative elements.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/bun/util/text-loader-fixture-text-file.backslashes.txt#2025-04-22_snippet_0

LANGUAGE: ascii-art
CODE:
```
           .---------.            
       .--'   o   .   `--.        
     .'@  @@@@@@    .   . `.      
  .'   . @@@@@@@@ @@@@@@     `.   
 / @@o    @@@@@@.  @@@@    O  @\  
 |@@@              @@@@@@    @@|  
/ @@@@   `.-.     @@@@@@@@    @@\ 
|@ @@               @@@@@@ @@   | 
\     @@    @   .()  @@   @@@@  / 
 |         @@@        @@@  @@  |  
 \  .  @@  @\  .     .  @@   o /  
  `.  @@@@  _\ /    .      o .'   
     `.     / |      o    .'      
       `--./   .      .--'        
           `---------'       
```

----------------------------------------

TITLE: Platform-Specific Includes and Definitions in C
DESCRIPTION: Defines platform-specific includes and macros for Windows, MSDOS, OS2, and other systems.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/zlib.test.txt#2025-04-22_snippet_1

LANGUAGE: C
CODE:
```
#if defined(MSDOS) || defined(OS2) || defined(WIN32) || defined(__CYGWIN__)
#  include <fcntl.h>
#  include <io.h>
#  ifdef UNDER_CE
#    include <stdlib.h>
#  endif
#  define SET_BINARY_MODE(file) setmode(fileno(file), O_BINARY)
#else
#  define SET_BINARY_MODE(file)
#endif

#if defined(_MSC_VER) && _MSC_VER < 1900
#  define snprintf _snprintf
#endif
```

----------------------------------------

TITLE: HTML Processing Example with Bundler
DESCRIPTION: Demonstrates how the HTML loader processes an HTML file, bundling and hashing referenced assets like scripts, stylesheets, and images while preserving external URLs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/loaders.md#2025-04-22_snippet_10

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
  <body>
    <img src="./image.jpg" alt="Local image">
    <img src="https://example.com/image.jpg" alt="External image">
    <script type="module" src="./script.js"></script>
  </body>
</html>
```

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
  <body>
    <img src="./image-HASHED.jpg" alt="Local image">
    <img src="https://example.com/image.jpg" alt="External image">
    <script type="module" src="./output-ALSO-HASHED.js"></script>
  </body>
</html>
```

----------------------------------------

TITLE: Network Socket Operations (us_socket_t) Implementation in C
DESCRIPTION: Core socket operations including writing data, managing timers, and handling connection state. Supports both SSL and non-SSL connections.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-usockets/misc/manual.md#2025-04-22_snippet_2

LANGUAGE: c
CODE:
```
WIN32_EXPORT int us_socket_write(int ssl, struct us_socket_t *s, const char *data, int length, int msg_more);

WIN32_EXPORT void us_socket_timeout(int ssl, struct us_socket_t *s, unsigned int seconds);

WIN32_EXPORT void *us_socket_ext(int ssl, struct us_socket_t *s);

/* Additional socket functions... */
```

----------------------------------------

TITLE: JSX Fragment Pragma Example
DESCRIPTION: Example of using the JSX fragment pragma to set the JSX fragment factory on a per-file basis rather than in configuration. The pragma is a special comment that overrides the compiler setting.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_21

LANGUAGE: ts
CODE:
```
// @jsxFrag MyFragment
```

----------------------------------------

TITLE: Declaring Various String Types in Rust with HTML Escaping Examples
DESCRIPTION: This code snippet demonstrates different string declaration patterns in Rust, including multi-line strings with HTML content, escaped strings, and raw strings. It also includes assertions to verify HTML escape handling functionality.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_16

LANGUAGE: rust
CODE:
```
let string_long_escaped = "\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris consequat tellus sit\n    amet ornare fermentum. Etiam nec erat ante. In at metus a orci mollis scelerisque.\n    Sed eget ultrices turpis, at sollicitudin erat. Integer hendrerit nec magna quis\n    venenatis. Vivamus non dolor hendrerit, vulputate velit sed, varius nunc. Quisque\n    in pharetra mi. Sed ullamcorper nibh malesuada commodo porttitor. Ut scelerisque\n    sodales felis quis dignissim. Morbi aliquam finibus justo, sit amet consectetur\n    mauris efficitur sit amet. Donec posuere turpis felis, eu lacinia magna accumsan\n    quis. Fusce egestas lacus vel fermentum tincidunt. Phasellus a nulla eget lectus\n    placerat commodo at eget nisl. Fusce cursus dui quis purus accumsan auctor.\n    Donec iaculis felis quis metus consectetur porttitor.\n&lt;p&gt;\n    Etiam nibh mi, &lt;b&gt;accumsan&lt;&#x2f;b&gt; quis purus sed, posuere fermentum lorem. In pulvinar porta\n    maximus. Fusce tincidunt lacinia tellus sit amet tincidunt. Aliquam lacus est, pulvinar\n    non metus a, &lt;b&gt;facilisis&lt;&#x2f;b&gt; ultrices quam. Nulla feugiat leo in cursus eleifend. Suspendisse\n    eget nisi ac justo sagittis interdum id a ipsum. Nulla mauris justo, scelerisque ac\n    rutrum vitae, consequat vel ex.\n&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;&lt;&#x2f;p&gt;\n&lt;p&gt;\n    Sed sollicitudin &lt;b&gt;sem&lt;&#x2f;b&gt; mauris, at rutrum nibh egestas vel. Ut eu nisi tellus. Praesent dignissim\n    orci elementum, mattis turpis eget, maximus ante. Suspendisse luctus eu felis a tempor. Morbi\n    ac risus vitae sem molestie ullamcorper. Curabitur ligula augue, sollicitudin quis maximus vel,\n    facilisis sed nibh. Aenean auctor magna sem, id rutrum metus convallis quis. Nullam non arcu\n    dictum, lobortis erat quis, rhoncus est. Suspendisse venenatis, mi sed venenatis vehicula,\n    tortor dolor egestas lectus, et efficitur turpis odio non augue. Integer velit sapien, dictum\n    non egestas vitae, hendrerit sed quam. Phasellus a nunc eu erat varius imperdiet. Etiam id\n    sollicitudin turpis, vitae molestie orci. Quisque ornare magna quis metus rhoncus commodo.\n    Phasellus non mauris velit.\n&lt;&#x2f;p&gt;\n&lt;p&gt;\n    Etiam dictum tellus ipsum, nec varius quam ornare vel. Cras vehicula diam nec sollicitudin\n    ultricies. Pellentesque rhoncus sagittis nisl id facilisis. Nunc viverra convallis risus ut\n    luctus. Aliquam vestibulum &lt;b&gt;efficitur massa&lt;&#x2f;b&gt;, id tempus nisi posuere a. Aliquam scelerisque\n    elit justo. Nullam a ante felis. Cras vitae lorem eu nisi feugiat hendrerit. Maecenas vitae\n    suscipit leo, lacinia dignissim lacus. Sed eget volutpat mi. In eu bibendum neque. Pellentesque\n    finibus velit a fermentum rhoncus. Maecenas leo purus, eleifend eu lacus a, condimentum sagittis\n    justo.\n&lt;&#x2f;p&gt;";
    let string_short = "Lorem ipsum dolor sit amet,<foo>bar&foo\"bar\\foo/bar";
    let string_short_escaped =
        "Lorem ipsum dolor sit amet,&lt;foo&gt;bar&amp;foo&quot;bar\\foo&#x2f;bar";
    let no_escape = "Lorem ipsum dolor sit amet,";
    let no_escape_long = r#"
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin scelerisque eu urna in aliquet.
Phasellus ac nulla a urna sagittis consequat id quis est. Nullam eu ex eget erat accumsan dictum
ac lobortis urna. Etiam fermentum ut quam at dignissim. Curabitur vestibulum luctus tellus, sit
amet lobortis augue tempor faucibus. Nullam sed felis eget odio elementum euismod in sit amet massa.
Vestibulum sagittis purus sit amet eros auctor, sit amet pharetra purus dapibus. Donec ornare metus
vel dictum porta. Etiam ut nisl nisi. Nullam rutrum porttitor mi. Donec aliquam ac ipsum eget
hendrerit. Cras faucibus, eros ut pharetra imperdiet, est tellus aliquet felis, eget convallis
lacus ipsum eget quam. Vivamus orci lorem, maximus ac mi eget, bibendum vulputate massa. In
vestibulum dui hendrerit, vestibulum lacus sit amet, posuere erat. Vivamus euismod massa diam,
vulputate euismod lectus vestibulum nec. Donec sit amet massa magna. Nunc ipsum nulla, euismod
quis lacus at, gravida maximus elit. Duis tristique, nisl nullam.
    "#;

    assert_eq!(HTMLEscape::from(no_escape).to_string(), no_escape);
    assert_eq!(HTMLEscape::from(no_escape_long).to_string(), no_escape_long);
```

----------------------------------------

TITLE: Replacing properties with --define
DESCRIPTION: This shell command shows how to use --define to replace a property (console.write) with another property (console.log).
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/define-constant.md#2025-04-22_snippet_11

LANGUAGE: sh
CODE:
```
bun --define console.write=console.log src/index.ts
```

----------------------------------------

TITLE: Connecting to Bun Inspect Process using WebKit Web Inspector
DESCRIPTION: This snippet demonstrates two methods to connect the WebKit Web Inspector to a Bun process running in inspect mode. It shows how to use URL parameters or navigate to a specific path to establish the connection.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-inspector-frontend/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
- Set `?ws=hostname:port` to connect to a `bun --inspect`'d process.
- Navigate to `/inspect/hostname:port`
```

----------------------------------------

TITLE: Running Bun Build Tests with Environment Variables
DESCRIPTION: Explains how to run Bun build tests using environment variables to control test behavior and specify which tests to run.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/bundler/expectBundled.md#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
$ ./run-single-bundler-test.sh default/ExportMissingES6
$ ./run-single-bundler-test.sh default/ExportMissingES6 e
```

----------------------------------------

TITLE: UDP Backpressure Handling
DESCRIPTION: Shows how to handle backpressure in UDP communications using the drain event handler
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/udp.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
const socket = await Bun.udpSocket({
  socket: {
    drain(socket) {
      // continue sending data
    }
  }
});
```

----------------------------------------

TITLE: Node.js N-API Core Functions
DESCRIPTION: Core N-API function declarations for creating and managing JavaScript values, objects, and references in native code.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/symbols.txt#2025-04-22_snippet_1

LANGUAGE: C++
CODE:
```
_napi_create_array
_napi_create_object
_napi_create_function
_napi_create_string_utf8
_napi_create_buffer
```

----------------------------------------

TITLE: GZIP Compression Utilities in C
DESCRIPTION: Helper functions for file compression and decompression including error handling and file management utilities.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/zlib.test.txt#2025-04-22_snippet_8

LANGUAGE: C
CODE:
```
void gz_compress(in, out)
    FILE   *in;
    gzFile out;
{
    local char buf[BUFLEN];
    int len;
    int err;

    for (;;) {
        len = (int)fread(buf, 1, sizeof(buf), in);
        if (ferror(in)) {
            perror("fread");
            exit(1);
        }
        if (len == 0) break;

        if (gzwrite(out, buf, (unsigned)len) != len) error(gzerror(out, &err));
    }
    fclose(in);
    if (gzclose(out) != Z_OK) error("failed gzclose");
}
```

----------------------------------------

TITLE: Execute Bun From PR Build
DESCRIPTION: This command executes a Bun build that was downloaded from a GitHub pull request using the `bun-pr` package.  The build is named `bun-${pr-number}`.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_21

LANGUAGE: sh
CODE:
```
bun-${pr-number} --version
```

----------------------------------------

TITLE: Running Snapshot Tests with Bun CLI
DESCRIPTION: Example of running the snapshot test for the first time. Bun will create the snapshot file and display information about the added snapshot in the test output.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/snapshot.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
$ bun test test/snap
bun test v$BUN_LATEST_VERSION (9c68abdb)

test/snap.test.ts:
✓ snapshot [1.48ms]

 1 pass
 0 fail
 snapshots: +1 added
 1 expect() calls
Ran 1 tests across 1 files. [82.00ms]
```

----------------------------------------

TITLE: Instantiating TypedArray with Explicit Length (JavaScript/TypeScript)
DESCRIPTION: This snippet shows how to create a TypedArray, specifically a Uint8Array, by specifying a length directly without allocating an ArrayBuffer first. All elements start at zero. Useful for quick byte array allocations with predictable sizes. No dependencies; requires browser or Node.js/Bun environment with TypedArray support. Outputs a Uint8Array of the specified size, initialized to zeros.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_10

LANGUAGE: TypeScript
CODE:
```
const arr2 = new Uint8Array(5);

// all elements are initialized to zero
// => Uint8Array(5) [0, 0, 0, 0, 0]
```

----------------------------------------

TITLE: Fhqwhgads Class Constructor
DESCRIPTION: Creates a new instance of the Fhqwhgads class
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/doc_with_backticks_in_headings.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
new Fhqwhgads()
```

----------------------------------------

TITLE: Code Scanning Example
DESCRIPTION: Shows how to scan source code to analyze imports and exports
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/transpiler.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
const transpiler = new Bun.Transpiler({
  loader: 'tsx',
});

const code = `
import React from 'react';
import type {ReactNode} from 'react';
const val = require('./cjs.js')
import('./loader');

export const name = "hello";
`;

const result = transpiler.scan(code);
```

----------------------------------------

TITLE: Set GCC 11 as Default Compiler
DESCRIPTION: These commands use the `update-alternatives` tool to set GCC 11 as the default C compiler (`gcc`) and C++ compiler (`g++`). This ensures that the system uses GCC 11 when compiling C and C++ code.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_29

LANGUAGE: bash
CODE:
```
$ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100
$ sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100
```

----------------------------------------

TITLE: Accepting Specific Module Updates in Bun HMR
DESCRIPTION: Shows how to accept updates from a specific imported module using import.meta.hot.accept with a module path and callback.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/hmr.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import { count } from "./foo";

import.meta.hot.accept("./foo", () => {
  if (!newModule) return;

  console.log("updated: count is now ", count);
});
```

----------------------------------------

TITLE: Complex Character Range Glob Pattern
DESCRIPTION: Advanced example of using character ranges and negation in glob patterns.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/glob.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
const glob = new Glob("ba[a-z][0-9][^4-9].ts");
glob.match("bar01.ts"); // => true
glob.match("baz83.ts"); // => true
glob.match("bat22.ts"); // => true
glob.match("bat24.ts"); // => false
glob.match("ba0a8.ts"); // => false
```

----------------------------------------

TITLE: Bun.Cookie Constructor Signatures
DESCRIPTION: The different constructor signatures available for creating Bun.Cookie instances, including basic name/value, with options, from cookie string, or from a cookie object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
// Basic constructor with name/value
new Bun.Cookie(name: string, value: string);

// Constructor with name, value, and options
new Bun.Cookie(name: string, value: string, options: CookieInit);

// Constructor from cookie string
new Bun.Cookie(cookieString: string);

// Constructor from cookie object
new Bun.Cookie(options: CookieInit);
```

----------------------------------------

TITLE: Adding an Optional Dependency with Bun
DESCRIPTION: Command to add a package as an optional dependency using Bun's package manager. The --optional flag designates the package to be added to optionalDependencies in package.json.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/add-optional.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun add zod --optional
```

----------------------------------------

TITLE: Retrieving MIME Types from Files using Bun.file()
DESCRIPTION: This snippet demonstrates how to get the MIME type of different file types using Bun.file() to create a BunFile instance and access its .type property. The BunFile class extends Blob, which provides the MIME type functionality.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/read-file/mime.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const file = Bun.file("./package.json");
file.type; // application/json

const file = Bun.file("./index.html");
file.type; // text/html

const file = Bun.file("./image.png");
file.type; // image/png
```

----------------------------------------

TITLE: Initializing Prisma with SQLite
DESCRIPTION: Command to initialize Prisma with SQLite as the database provider. This generates the initial schema file and project structure.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/prisma.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ bunx prisma init --datasource-provider sqlite
```

----------------------------------------

TITLE: Setting Custom SQLite Library Path for Bun (TypeScript)
DESCRIPTION: Invokes Database.setCustomSQLite() in Bun before instantiating any Database objects, pointing Bun to a specific SQLite dynamic library. Ensures compatibility with extensions on macOS where the default SQLite doesn't support them.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_29

LANGUAGE: TypeScript
CODE:
```
import { Database } from "bun:sqlite";

Database.setCustomSQLite("/path/to/libsqlite.dylib");

const db = new Database();
db.loadExtension("myext");

```

----------------------------------------

TITLE: Install LLVM on openSUSE Tumbleweed
DESCRIPTION: This command installs Clang 19, LLD 19, and LLVM 19 on openSUSE Tumbleweed using zypper. These packages are essential for building Bun. `sudo` provides the necessary root privileges.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_12

LANGUAGE: bash
CODE:
```
$ sudo zypper install clang19 lld19 llvm19
```

----------------------------------------

TITLE: Installing Dependencies with Bun
DESCRIPTION: Command to install project dependencies using Bun package manager
SOURCE: https://github.com/oven-sh/bun/blob/main/src/cli/init/README.default.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
bun install
```

----------------------------------------

TITLE: Configuring ESLint for Bun Project
DESCRIPTION: This snippet sets up ESLint configuration for the Bun project. It extends recommended configurations, specifies the environment, and defines custom rules for code linting.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/fs/writeFileSync.txt#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
module.exports = {
  root: true,
  extends: [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier",
  ],
  parser: "@typescript-eslint/parser",
  plugins: ["@typescript-eslint"],
  env: {
    browser: true,
    es2021: true,
    node: true,
  },
  rules: {
    "@typescript-eslint/no-unused-vars": [
      "error",
      { argsIgnorePattern: "^_", varsIgnorePattern: "^_" },
    ],
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/ban-ts-comment": "off",
  },
};
```

----------------------------------------

TITLE: Install LLVM on Arch Linux
DESCRIPTION: This command installs LLVM, Clang, and LLD on Arch Linux using pacman. These are required for building Bun. `sudo` is required to install the packages with root privileges.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_10

LANGUAGE: bash
CODE:
```
$ sudo pacman -S llvm clang lld
```

----------------------------------------

TITLE: Using jest.fn() for Mocking in Bun Test Framework (TypeScript)
DESCRIPTION: Shows an alternative way to create mocks using `jest.fn()` function, which behaves identically to the `mock` function in Bun's test framework.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/mocks.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { test, expect, jest } from "bun:test";
const random = jest.fn(() => Math.random());

test("random", async () => {
  const val = random();
  expect(val).toBeGreaterThan(0);
  expect(random).toHaveBeenCalled();
  expect(random).toHaveBeenCalledTimes(1);
});
```

----------------------------------------

TITLE: Network Request Debugging with Bun
DESCRIPTION: Example showing how to enable verbose fetch logging in Bun using environment variables to print network requests as curl commands.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/debugger.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
process.env.BUN_CONFIG_VERBOSE_FETCH = "curl";

await fetch("https://example.com", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
  },
  body: JSON.stringify({ foo: "bar" }),
});
```

----------------------------------------

TITLE: Running WebSocket Chat Server in Bun
DESCRIPTION: Command to start the WebSocket chat server using Bun's built-in Bun.serve functionality.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/websocket-server/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
bun ./chat-server.bun.js
```

----------------------------------------

TITLE: Configuring Optional Dependencies in Bun Install
DESCRIPTION: Controls whether optional dependencies are installed during bun install. Default is true.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_16

LANGUAGE: toml
CODE:
```
[install]
optional = true
```

----------------------------------------

TITLE: Running the Seed Script with Bun (Shell)
DESCRIPTION: This shell command runs the previously created `seed.ts` script using Bun. Output is 'Seeding complete.' if data is successfully inserted. Dependencies: Bun, seed script, database running. Input: None. Output: Console logs confirming completion.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/edgedb.md#2025-04-22_snippet_10

LANGUAGE: sh
CODE:
```
bun run seed.ts
Seeding complete.
```

----------------------------------------

TITLE: Handling DataView bounds errors
DESCRIPTION: Shows the error that occurs when attempting to write data beyond the capacity of the underlying ArrayBuffer. In this case, trying to write a Float64 (8 bytes) to a 4-byte buffer causes a RangeError.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_5

LANGUAGE: ts
CODE:
```
dv.setFloat64(0, 3.1415);
// ^ RangeError: Out of bounds access
```

----------------------------------------

TITLE: Postject CLI Usage Example
DESCRIPTION: Command-line interface help output showing available options and arguments for injecting resources into executables.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/postject/README.markdown#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
$ postject -h
Usage: postject [options] <filename> <resource_name> <resource>

Inject arbitrary read-only resources into an executable for use at runtime

Arguments:
  filename                             The executable to inject into
  resource_name                        The resource name to use (section name on Mach-O and ELF, resource name for PE)
  resource                             The resource to inject

Options:
  --macho-segment-name <segment_name>  Name for the Mach-O segment (default: "__POSTJECT")
  --output-api-header                  Output the API header to stdout
  --overwrite                          Overwrite the resource if it already exists
  -h, --help                           display help for command
```

----------------------------------------

TITLE: Setting Up a Bun Project for Neon Serverless Postgres - Shell
DESCRIPTION: This snippet demonstrates the series of shell commands needed to create a new Bun project and install the Neon serverless Postgres driver as a dependency. Prerequisites include Bun installed globally on your system and network access to npm packages. Running these commands will initialize the project directory, set up a Bun project, and add the required Neon driver. The commands should be executed in a Unix-like shell environment.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-serverless-postgres.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ mkdir bun-neon-postgres\n$ cd bun-neon-postgres\n$ bun init -y\n$ bun add @neondatabase/serverless
```

----------------------------------------

TITLE: Type Definition for Bun.stringWidth API - Bun - TypeScript
DESCRIPTION: This type definition outlines the interface for Bun.stringWidth. It defines options to count ANSI escape codes and handle ambiguous emoji width, with detailed documentation for each parameter and return type. This assists in providing strong typing and improved autocompletion when using the Bun API in TypeScript environments.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_12

LANGUAGE: TypeScript
CODE:
```
namespace Bun {
  export function stringWidth(
    /**
     * The string to measure
     */
    input: string,
    options?: {
      /**
       * If `true`, count ANSI escape codes as part of the string width. If `false`, ANSI escape codes are ignored when calculating the string width.
       *
       * @default false
       */
      countAnsiEscapeCodes?: boolean;
      /**
       * When it's ambiugous and `true`, count emoji as 1 characters wide. If `false`, emoji are counted as 2 character wide.
       *
       * @default true
       */
      ambiguousIsNarrow?: boolean;
    },
  ): number;
}
```

----------------------------------------

TITLE: Basic HTML Document Structure with Meta Tags
DESCRIPTION: HTML document setup with proper DOCTYPE, meta tags for character encoding, content type and viewport settings.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/web/streams/fetch.js.txt#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<!doctype html>
<html>
<head>
    <title>Example Domain</title>

    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
```

----------------------------------------

TITLE: Running Scripts in Multiple Packages via --filter with Bun CLI (Bash)
DESCRIPTION: Shows how to use bun with the --filter flag to run the same script across multiple packages in a monorepo from a single terminal session. Patterns can target one, some, or all packages (e.g. '*'), running the command in parallel. Requires that each targeted package has the specified script. Inputs are <pattern> and <script>; outputs are parallel terminal UIs for each package invocation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/filter.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
bun --filter <pattern> <script>

```

----------------------------------------

TITLE: Checking Outdated Packages with Glob Pattern - Markdown
DESCRIPTION: This snippet uses a terminal directive to check for outdated dependencies matching the glob 'eslint*'. The 'displayGlob' property is set to a shell-escaped pattern for improved documentation clarity. The snippet depends on Bun's documentation rendering system and a project with matching dependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/outdated.md#2025-04-22_snippet_2

LANGUAGE: markdown
CODE:
```
{% bunOutdatedTerminal displayGlob="'eslint*'" glob="eslint*"  /%}
```

----------------------------------------

TITLE: Customizing Help Option in Commander.js
DESCRIPTION: This example shows how to modify the default help option flags and description. You can change the flags and text or pass false to disable the built-in help option.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_34

LANGUAGE: javascript
CODE:
```
program
  .helpOption('-e, --HELP', 'read more information');
```

----------------------------------------

TITLE: Package.json with Subpath Exports
DESCRIPTION: Shows how to configure package.json to export specific subpaths.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_13

LANGUAGE: jsonc
CODE:
```
{
  "name": "foo",
  "exports": {
    ".": "./index.js"
  }
}
```

----------------------------------------

TITLE: Zlib Compression Options Type Definition in TypeScript
DESCRIPTION: Defines the configuration options available for zlib compression algorithms in Bun. Options include compression level, memory allocation, window size, and strategy selection to fine-tune compression behavior.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_16

LANGUAGE: typescript
CODE:
```
export type ZlibCompressionOptions = {
  /**
   * The compression level to use. Must be between `-1` and `9`.
   * - A value of `-1` uses the default compression level (Currently `6`)
   * - A value of `0` gives no compression
   * - A value of `1` gives least compression, fastest speed
   * - A value of `9` gives best compression, slowest speed
   */
  level?: -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
  /**
   * How much memory should be allocated for the internal compression state.
   *
   * A value of `1` uses minimum memory but is slow and reduces compression ratio.
   *
   * A value of `9` uses maximum memory for optimal speed. The default is `8`.
   */
  memLevel?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
  /**
   * The base 2 logarithm of the window size (the size of the history buffer).
   *
   * Larger values of this parameter result in better compression at the expense of memory usage.
   *
   * The following value ranges are supported:
   * - `9..15`: The output will have a zlib header and footer (Deflate)
   * - `-9..-15`: The output will **not** have a zlib header or footer (Raw Deflate)
   * - `25..31` (16+`9..15`): The output will have a gzip header and footer (gzip)
   *
   * The gzip header will have no file name, no extra data, no comment, no modification time (set to zero) and no header CRC.
   */
  windowBits?:
    | -9
    | -10
    | -11
    | -12
    | -13
    | -14
    | -15
    | 9
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 25
    | 26
    | 27
    | 28
    | 29
    | 30
    | 31;
  /**
   * Tunes the compression algorithm.
   *
   * - `Z_DEFAULT_STRATEGY`: For normal data **(Default)**
   * - `Z_FILTERED`: For data produced by a filter or predictor
   * - `Z_HUFFMAN_ONLY`: Force Huffman encoding only (no string match)
   * - `Z_RLE`: Limit match distances to one (run-length encoding)
   * - `Z_FIXED` prevents the use of dynamic Huffman codes
   *
   * `Z_RLE` is designed to be almost as fast as `Z_HUFFMAN_ONLY`, but give better compression for PNG image data.
   *
   * `Z_FILTERED` forces more Huffman coding and less string matching, it is
   * somewhat intermediate between `Z_DEFAULT_STRATEGY` and `Z_HUFFMAN_ONLY`.
   * Filtered data consists mostly of small values with a somewhat random distribution.
   */
  strategy?: number;
};
```

----------------------------------------

TITLE: Recursive Directory Watching in Bun
DESCRIPTION: This snippet shows how to recursively watch a directory and its subdirectories for changes by using the recursive option with fs.watch.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/read-file/watch.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { watch } from "fs";

const watcher = watch(
  import.meta.dir,
  { recursive: true },
  (event, filename) => {
    console.log(`Detected ${event} in ${filename}`);
  },
);
```

----------------------------------------

TITLE: Building a Bundle with CLI
DESCRIPTION: This command uses Bun's CLI to create a bundle from an entry point and write it to an output directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
$ bun build ./index.tsx --outdir ./out
```

----------------------------------------

TITLE: Rendering Button Component in MDX with JSX
DESCRIPTION: This snippet demonstrates how to include a JSX component (Button) directly within MDX content. The component includes an onClick handler that displays an alert when clicked.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-build-mdx-rs/input/page2.mdx#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Button onClick={() => alert("Hello!")}>Click me</Button>
```

----------------------------------------

TITLE: Installing Bun Runtime
DESCRIPTION: Downloads and executes the Bun installation script using PowerShell's Invoke-RestMethod.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/building-windows.md#2025-04-22_snippet_1

LANGUAGE: powershell
CODE:
```
irm bun.sh/install.ps1 | iex
```

----------------------------------------

TITLE: BuildOutput Interface Definition
DESCRIPTION: TypeScript interface defining the structure of Bun build outputs, including artifacts and metadata.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_60

LANGUAGE: typescript
CODE:
```
interface BuildOutput {
  outputs: BuildArtifact[];
  success: boolean;
  logs: Array<object>; // see docs for details
}

interface BuildArtifact extends Blob {
  kind: "entry-point" | "chunk" | "asset" | "sourcemap";
  path: string;
  loader: Loader;
  hash: string | null;
  sourcemap: BuildArtifact | null;
}
```

----------------------------------------

TITLE: Cloning WebKit
DESCRIPTION: Clones WebKit into the `vendor/WebKit` directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_24

LANGUAGE: bash
CODE:
```
$ git clone https://github.com/oven-sh/WebKit vendor/WebKit
```

----------------------------------------

TITLE: Importing Test Utilities for Bun Build Tests
DESCRIPTION: Shows how to import the necessary test utilities for writing Bun build tests, including itBundled and testForFile functions.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/bundler/expectBundled.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { itBundled, testForFile } from "./expectBundled";
var { describe, test, expect } = testForFile(import.meta.path);
```

----------------------------------------

TITLE: Simple C Function Implementation
DESCRIPTION: A basic C function that returns an integer value of 42.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cc.md#2025-04-22_snippet_1

LANGUAGE: c
CODE:
```
int hello() {
  return 42;
}
```

----------------------------------------

TITLE: Bun's final optimization: Dead code elimination
DESCRIPTION: This snippet shows the final result of Bun's optimization process, where unreachable code is eliminated.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/define-constant.md#2025-04-22_snippet_4

LANGUAGE: ts
CODE:
```
console.log("Production mode");
```

----------------------------------------

TITLE: GZIP Read/Write Operations Implementation in C
DESCRIPTION: Implementation of gzwrite() and gzread() functions for compressed data streaming with error handling and buffer management.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/zlib.test.txt#2025-04-22_snippet_7

LANGUAGE: C
CODE:
```
int gzwrite(gz, buf, len)
    gzFile gz;
    const void *buf;
    unsigned len;
{
    z_stream *strm;
    unsigned char out[BUFLEN];

    if (gz == NULL || !gz->write)
        return 0;
    strm = &(gz->strm);
    strm->next_in = (void *)buf;
    strm->avail_in = len;
    do {
        strm->next_out = out;
        strm->avail_out = BUFLEN;
        (void)deflate(strm, Z_NO_FLUSH);
        fwrite(out, 1, BUFLEN - strm->avail_out, gz->file);
    } while (strm->avail_out == 0);
    return len;
}
```

----------------------------------------

TITLE: Initializing and Serving Stric Application with PageRouter in TypeScript
DESCRIPTION: This snippet demonstrates initializing and running a Stric web application using `PageRouter` from `@stricjs/arrow`. It creates a `PageRouter` instance, which automatically discovers and routes requests to page components (like the one potentially defined in `src/App.ts` based on the exported `path`), and then calls the `serve()` method to start the web server using Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/ecosystem/stric.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { PageRouter } from '@stricjs/arrow';

// Create a page router, build and serve directly
new PageRouter().serve();
```

----------------------------------------

TITLE: JavaScript Object and Array Examples
DESCRIPTION: Examples showing different object and array formats including nested objects, circular references and sparse arrays
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/web/console/console-log.expected.txt#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
[
  {}, {}, {}, {}
]
{
  level1: {
    level2: {
      level3: [Object ...],
    },
  },
}
```

----------------------------------------

TITLE: Running Bun with Hot Reload and Observing Results
DESCRIPTION: Example output of running a TypeScript file with Bun's --hot mode, showing the incrementing reload counter.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/hot.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
$ bun --hot index.ts
Reloaded 1 times
Reloaded 2 times
Reloaded 3 times
```

----------------------------------------

TITLE: Property: fullName
DESCRIPTION: Property accessor on the Fhqwhgads class
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/doc_with_backticks_in_headings.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
Fqhqwhgads.fullName
```

----------------------------------------

TITLE: Deprecation Metadata in YAML
DESCRIPTION: YAML metadata block showing both feature addition and deprecation version information
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/doc_with_yaml.md#2025-04-22_snippet_2

LANGUAGE: yaml
CODE:
```
added: v1.0.0
deprecated: v2.0.0
```

----------------------------------------

TITLE: Memory Management Functions Implementation in C
DESCRIPTION: Custom memory allocation and deallocation functions that wrap calloc() and free(). These functions are used as callbacks for the zlib compression stream.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/zlib.test.txt#2025-04-22_snippet_5

LANGUAGE: C
CODE:
```
void *myalloc(q, n, m)
    void *q;
    unsigned n, m;
{
    (void)q;
    return calloc(n, m);
}

void myfree(q, p)
    void *q, *p;
{
    (void)q;
    free(p);
}
```

----------------------------------------

TITLE: Asset Import Example Input
DESCRIPTION: Example of importing an SVG file as an asset, which will be treated as an external file by the bundler.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_12

LANGUAGE: typescript
CODE:
```
// bundle entrypoint
import logo from "./logo.svg";
console.log(logo);
```

----------------------------------------

TITLE: Using Life Cycle Hooks in Commander.js
DESCRIPTION: Demonstrates how to add hooks for command life cycle events. This example adds a preAction hook that logs debugging information when the --trace option is enabled.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_22

LANGUAGE: javascript
CODE:
```
program
  .option('-t, --trace', 'display trace statements for commands')
  .hook('preAction', (thisCommand, actionCommand) => {
    if (thisCommand.opts().trace) {
      console.log(`About to call action handler for subcommand: ${actionCommand.name()}`);
      console.log('arguments: %O', actionCommand.args);
      console.log('options: %o', actionCommand.opts());
    }
  });
```

----------------------------------------

TITLE: CSS with TailwindCSS Import
DESCRIPTION: CSS file example showing how to import TailwindCSS for use with the bun-plugin-tailwind plugin.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/fullstack.md#2025-04-22_snippet_14

LANGUAGE: css
CODE:
```
@import "tailwindcss";
```

----------------------------------------

TITLE: Running WASI Binaries with Bun
DESCRIPTION: Demonstrates how to run WebAssembly System Interface (WASI) binaries using Bun. This feature is experimental and based on wasi-js.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/loaders.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
$ bun ./my-wasm-app.wasm
# if the filename doesn't end with ".wasm"
$ bun run ./my-wasm-app.whatever
```

----------------------------------------

TITLE: Defining Array Configurations in TOML
DESCRIPTION: This snippet creates array configurations with multiple entries and nested structures.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/bun/resolve/toml/toml-fixture.toml.txt#2025-04-22_snippet_6

LANGUAGE: toml
CODE:
```
[[array]]
entry_one = "one"
entry_two = "two"

[[array]]
entry_one = "three"

[[array.nested]]
entry_one = "four"
```

----------------------------------------

TITLE: Optional Value Boolean Options in JavaScript
DESCRIPTION: Shows how to implement an option that can be used both as a boolean flag and with an optional value argument using Commander.js.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
program
  .option('-c, --cheese [type]', 'Add cheese with optional type');

program.parse(process.argv);

const options = program.opts();
if (options.cheese === undefined) console.log('no cheese');
else if (options.cheese === true) console.log('add cheese');
else console.log(`add cheese type ${options.cheese}`);
```

----------------------------------------

TITLE: Configuring banner in Bun Build (JavaScript)
DESCRIPTION: Adds text at the beginning of bundled files, useful for directives like "use client" or license comments.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_54

LANGUAGE: typescript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './out',
  banner: '"use client";'
})
```

----------------------------------------

TITLE: Building with Code Splitting Enabled - Bun CLI - CLI
DESCRIPTION: Demonstrates CLI-based bundling with multiple entrypoints and code splitting explicitly enabled, which will output shared code chunks. Requires Bun installed and multiple entry files present. The outdir will contain result files for each entrypoint as well as shared chunks.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_31

LANGUAGE: CLI
CODE:
```
$ bun build ./entry-a.ts ./entry-b.ts --outdir ./out --splitting
```

----------------------------------------

TITLE: Configuring Global Git Diff for Bun Lockfile
DESCRIPTION: These commands configure Git globally to use Bun for generating human-readable diffs of .lockb files. It sets the textconv command to 'bun' and marks the diff as binary, applying to all repositories.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/git-diff-bun-lockfile.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
$ git config --global diff.lockb.textconv bun
$ git config --global diff.lockb.binary true
```

----------------------------------------

TITLE: Creating Basic HTTP Server with node:http on Bun - TypeScript
DESCRIPTION: This TypeScript code snippet demonstrates creating a simple HTTP server using the core 'node:http' module, showcasing Bun's support for Node.js core APIs. The server writes 'Hello World!' to all incoming connections and closes the response. No external dependencies are required beyond Bun's built-in Node.js compatibility. The server listens on port 8080, responds identically to all requests, and is well-suited for learning or minimalist server prototypes.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/ecosystem/express.md#2025-04-22_snippet_1

LANGUAGE: TypeScript
CODE:
```
import * as http from "node:http";

http
  .createServer(function (req, res) {
    res.write("Hello World!");
    res.end();
  })
  .listen(8080);
```

----------------------------------------

TITLE: Filtering Bun Tests by File Path using Bash
DESCRIPTION: Demonstrates how to filter which test files are executed by providing one or more positional arguments (filters) to the `bun test` command. Any test file whose path contains one of the provided filter strings will be run. Glob patterns are not supported.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ bun test <filter> <filter> ...
```

----------------------------------------

TITLE: Configuring define in Bun Build (JavaScript)
DESCRIPTION: Replaces global identifiers at build time with custom values, where keys are identifiers and values are JSON strings.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_50

LANGUAGE: typescript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './out',
  define: {
    STRING: JSON.stringify("value"),
    "nested.boolean": "true",
  },
})
```

----------------------------------------

TITLE: Accessing Escaped Environment Variables
DESCRIPTION: Demonstrates how escaped environment variable references appear in the code when accessed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_12

LANGUAGE: ts
CODE:
```
process.env.BAR; // => "hello$FOO"
```

----------------------------------------

TITLE: Running tests with preloaded setup in Bun
DESCRIPTION: Command to run Bun tests with a preloaded setup file. The --preload flag loads and executes the specified file before any tests are run, allowing for global test configuration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/lifecycle.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
$ bun test --preload ./setup.ts
```

----------------------------------------

TITLE: Relative Color Syntax in CSS - Bun Bundler
DESCRIPTION: Shows usage of relative color syntax such as lch(from ...) and oklch(from ...) for deriving variants from base colors or CSS variables. No dependencies. Bun computes values at build-time when CSS variables are not used, outputting static color values.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_6

LANGUAGE: css
CODE:
```
.theme-color {\n  /* Start with a base color and increase lightness by 15% */\n  --accent: lch(from purple calc(l + 15%) c h);\n\n  /* Take our brand blue and make a desaturated version */\n  --subtle-blue: oklch(from var(--brand-blue) l calc(c * 0.8) h);\n}
```

----------------------------------------

TITLE: USample Output From CSS Module Import - TypeScript
DESCRIPTION: This TypeScript snippet illustrates the expected runtime structure of the imported CSS modules. The objects map each class name to a unique identifier as generated by Bun. There are no dependencies as this is sample output for documentation purposes. Input: CSS module imports with specifically scoped class names. Output: JavaScript objects showing the mapping. Limitation: shown strings like 'button_123' are placeholders; actual values depend on Bun's hashing.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css_modules.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
{
  button: "button_123";
}

{
  button: "button_456";
}

```

----------------------------------------

TITLE: Specifying Bundle Packages in TOML
DESCRIPTION: This snippet defines bundle packages for the project, enabling @emotion/react.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/bun/resolve/toml/toml-fixture.toml.txt#2025-04-22_snippet_3

LANGUAGE: toml
CODE:
```
[bundle.packages]
"@emotion/react" = true
```

----------------------------------------

TITLE: Inlining Environment Variables - env: "inline" - Bun CLI - CLI
DESCRIPTION: Accomplishes the same environment variable inlining via the Bun CLI. Supports standard UNIX-style environment variable assignment preceding the CLI invocation. Outputs bundled files with values inlined.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_35

LANGUAGE: CLI
CODE:
```
$ FOO=bar BAZ=123 bun build ./index.tsx --outdir ./out --env inline
```

----------------------------------------

TITLE: Building and Running Chrome DevTools Tests
DESCRIPTION: Commands for building Chrome DevTools and running the test suite.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/test426/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
autoninja -C out/Default
npm run auto-unittest
git apply <path to .patch file>
```

----------------------------------------

TITLE: Using parse() and parseAsync() in Commander.js
DESCRIPTION: This shows different ways to use the parse() method with various source conventions. You can use process.argv, implicit detection, or specify custom arguments with a source type.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_38

LANGUAGE: javascript
CODE:
```
program.parse(process.argv); // Explicit, node conventions
program.parse(); // Implicit, and auto-detect electron
program.parse(['-f', 'filename'], { from: 'user' });
```

----------------------------------------

TITLE: Platform-Specific Definitions for VMS and RISCOS in C
DESCRIPTION: Defines platform-specific macros and functions for VMS and RISCOS systems.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/zlib.test.txt#2025-04-22_snippet_2

LANGUAGE: C
CODE:
```
#ifdef VMS
#  define unlink delete
#  define GZ_SUFFIX "-gz"
#endif
#ifdef RISCOS
#  define unlink remove
#  define GZ_SUFFIX "-gz"
#  define fileno(file) file->__file
#endif
#if defined(__MWERKS__) && __dest_os != __be_os && __dest_os != __win32_os
#  include <unix.h> /* for fileno */
#endif
```

----------------------------------------

TITLE: Configuring .gitignore to Exclude Sensitive Files
DESCRIPTION: Provides an example `.gitignore` file content to prevent `node_modules` and the sensitive `.env.local` file (containing the bot token) from being committed to version control.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/discordjs.md#2025-04-22_snippet_3

LANGUAGE: txt
CODE:
```
node_modules
.env.local
```

----------------------------------------

TITLE: Running Bun with Hot Reload
DESCRIPTION: Command line instruction for running a TypeScript file with hot reloading enabled using Bun's --hot flag. When enabled, Bun will re-run the file whenever any module or file changes.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/hot.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun --hot run index.ts
```

----------------------------------------

TITLE: onStart Lifecycle Hook Implementation
DESCRIPTION: Example of implementing the onStart lifecycle hook in a Bun plugin.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/plugins.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { plugin } from "bun";

plugin({
  name: "onStart example",

  setup(build) {
    build.onStart(() => {
      console.log("Bundle started!");
    });
  },
});
```

----------------------------------------

TITLE: Nesting Media Queries with Bun Bundler - CSS
DESCRIPTION: Illustrates modern CSS nesting of @media queries inside selectors and how Bun's bundler expands them. No dependencies. Key input is a media query nested inside a class selector; output is a separate media rule targeting the selector. Enables DRY media queries without repetition.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
.responsive-element {\n  display: block;\n\n  @media (min-width: 768px) {\n    display: flex;\n  }\n}
```

----------------------------------------

TITLE: Migrating Lockfiles with Bun
DESCRIPTION: Attempts to convert an existing lockfile from another package manager (e.g., `package-lock.json`, `yarn.lock`) into Bun's native `bun.lockb` format. This command only performs the conversion and does not install any dependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/pm.md#2025-04-22_snippet_11

LANGUAGE: bash
CODE:
```
$ bun pm migrate
```

----------------------------------------

TITLE: Sample Dependencies Configuration - package.json - JSON
DESCRIPTION: This JSON snippet provides an example of a package.json dependencies section where the react package is set to accept any ^17.0.2 version. This structure is required by Bun and similar package managers to determine which versions can be installed or updated. The dependencies object maps package names to semantic version ranges.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/update.md#2025-04-22_snippet_3

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "react": "^17.0.2"
  }
}
```

----------------------------------------

TITLE: Basic Version Metadata in YAML
DESCRIPTION: YAML metadata block indicating feature addition in version 1.0.0
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/doc_with_yaml.md#2025-04-22_snippet_0

LANGUAGE: yaml
CODE:
```
added: v1.0.0
```

----------------------------------------

TITLE: Streaming HTTP Response with Async Generator Function in Bun
DESCRIPTION: Creates an HTTP server that streams data to clients using an async generator function as the Response body. The generator yields string parts and a TypedArray with delays between chunks.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/stream-iterator.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
Bun.serve({
  port: 3000,
  fetch(req) {
    return new Response(
      // An async generator function
      async function* () {
        yield "Hello, ";
        await Bun.sleep(100);
        yield "world!";

        // you can also yield a TypedArray or Buffer
        yield new Uint8Array(["\n".charCodeAt(0)]);
      },
      { headers: { "Content-Type": "text/plain" } },
    );
  },
});
```

----------------------------------------

TITLE: Checking Clang-19 in PATH
DESCRIPTION: Checks if clang-19 is available in the system's PATH environment variable. This ensures that the correct Clang version is accessible during the build process.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_13

LANGUAGE: bash
CODE:
```
$ which clang-19
```

----------------------------------------

TITLE: C Implementation using N-API for String Creation
DESCRIPTION: C code that uses N-API to create and return a UTF-8 string to JavaScript.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cc.md#2025-04-22_snippet_4

LANGUAGE: c
CODE:
```
#include <node/node_api.h>

napi_value hello(napi_env env) {
  napi_value result;
  napi_create_string_utf8(env, "Hello, Napi!", NAPI_AUTO_LENGTH, &result);
  return result;
}
```

----------------------------------------

TITLE: Creating a ReadableStream from Buffer using the ReadableStream Constructor (TypeScript)
DESCRIPTION: This snippet demonstrates a naive approach for converting a Node.js Buffer into a ReadableStream by directly enqueuing the entire buffer as a single chunk. Dependencies include Buffer (built-in Node.js/Bun), and the standard ReadableStream API. The start function enqueues the full buffer and closes the stream immediately; this method is best suited for small buffers, as larger ones will not benefit from streaming in incremental chunks. The output is a ReadableStream that delivers the complete Buffer content in one piece.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/buffer-to-readablestream.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
const buf = Buffer.from("hello world");
const stream = new ReadableStream({
  start(controller) {
    controller.enqueue(buf);
    controller.close();
  },
});
```

----------------------------------------

TITLE: GitHub Session Alert Notification Component
DESCRIPTION: HTML for a session notification flash message that alerts users when their session state has changed. The component includes two different messages: one for when a user has signed in from another tab, and another for when they've signed out.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_19

LANGUAGE: HTML
CODE:
```
<div class="js-stale-session-flash flash flash-warn flash-banner" hidden>
  <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z"></path></svg>
  <span class="js-stale-session-flash-signed-in" hidden>You signed in with another tab or window. <a href="">Reload</a> to refresh your session.</span>
  <span class="js-stale-session-flash-signed-out" hidden>You signed out in another tab or window. <a href="">Reload</a> to refresh your session.</span>
</div>
```

----------------------------------------

TITLE: Source Definition in cc Configuration
DESCRIPTION: Example and type definition for the source parameter in the cc function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cc.md#2025-04-22_snippet_8

LANGUAGE: ts
CODE:
```
type Source = string | URL | BunFile;

cc({
  source: "hello.c",
  symbols: {
    hello: {
      args: [],
      returns: "int",
    },
  },
});
```

----------------------------------------

TITLE: Using fileURL from tmpdir module
DESCRIPTION: Resolves a sequence of paths into an absolute URL in the temporary directory. Returns the URL of the temporary directory with trailing slash when called without arguments.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_24

LANGUAGE: JavaScript
CODE:
```
fileURL([...paths])
```

----------------------------------------

TITLE: Building for Production with Bun CLI
DESCRIPTION: A bash command to build an HTML-based project for production using Bun's CLI. This creates optimized bundles with minification and outputs to a specified directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/html.md#2025-04-22_snippet_13

LANGUAGE: bash
CODE:
```
$ bun build ./index.html --minify --outdir=dist
```

----------------------------------------

TITLE: Configuring Auto-Install Behavior in Bun
DESCRIPTION: Controls when Bun automatically installs missing dependencies during execution.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_22

LANGUAGE: toml
CODE:
```
[install]
auto = "auto"
```

----------------------------------------

TITLE: Configuring Development Settings in TOML
DESCRIPTION: This snippet sets various development-related options, including nested key-value pairs and numeric values.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/bun/resolve/toml/toml-fixture.toml.txt#2025-04-22_snippet_5

LANGUAGE: toml
CODE:
```
[dev]
foo = 123
"foo.bar" = "baz"
"abba.baba" = "baba"
dabba = -123
doo = 123.456
one.two.three = 4
```

----------------------------------------

TITLE: Markdown Heading and Text
DESCRIPTION: Basic markdown file with a heading labeled 'foobar' and a statement about existence and linking.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/doc_inc_2.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# foobar

I exist and am being linked to.
```

----------------------------------------

TITLE: Including Required Headers in C
DESCRIPTION: Includes necessary standard and system-specific headers for the minigzip implementation.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/zlib.test.txt#2025-04-22_snippet_0

LANGUAGE: C
CODE:
```
#include "zlib.h"
#include <stdio.h>

#ifdef STDC
#  include <string.h>
#  include <stdlib.h>
#endif

#ifdef USE_MMAP
#  include <sys/types.h>
#  include <sys/mman.h>
#  include <sys/stat.h>
#endif
```

----------------------------------------

TITLE: Error.captureStackTrace Output Example
DESCRIPTION: Shows the difference in stack traces before and after using Error.captureStackTrace. The second stack trace starts at the point specified by the second argument to Error.captureStackTrace.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/debugger.md#2025-04-22_snippet_7

LANGUAGE: sh
CODE:
```
Error: here!
    at myInner (file.js:4:15)
    at fn (file.js:8:5)
    at module code (file.js:17:1)
    at moduleEvaluation (native)
    at moduleEvaluation (native)
    at <anonymous> (native)

-- captureStackTrace --

Error: here!
    at module code (file.js:17:1)
    at moduleEvaluation (native)
    at moduleEvaluation (native)
    at <anonymous> (native)
```

----------------------------------------

TITLE: Running a Bun Script with Command-line Arguments
DESCRIPTION: Demonstrates the output of running a Bun script with various command-line arguments.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/argv.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
$ bun run cli.ts --flag1 --flag2 value
[ '/path/to/bun', '/path/to/cli.ts', '--flag1', '--flag2', 'value' ]
```

----------------------------------------

TITLE: Filtering Outdated Dependencies by Workspace - Markdown
DESCRIPTION: Utilizes the Bun CLI terminal directive to restrict the outdated check to dependencies found within a specific workspace (here, '@monorepo/types') and those matching the 't*' glob. The 'filter' property allows for scoped checks in monorepo environments using Bun workspaces.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/outdated.md#2025-04-22_snippet_5

LANGUAGE: markdown
CODE:
```
{% bunOutdatedTerminal  glob="t*" filter="@monorepo/types"  /%}
```

----------------------------------------

TITLE: Running Debug Builds with bun bd
DESCRIPTION: Executes a debug build of Bun using the `bd` script defined in package.json, allowing specific files or tests to be run and built. The output is only printed if the build process fails.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_19

LANGUAGE: sh
CODE:
```
$ bun bd <args>
$ bun bd test foo.test.ts
$ bun bd ./foo.ts
```

----------------------------------------

TITLE: Configuring Help Display in Commander.js
DESCRIPTION: This example shows how to configure the Help class behavior using configureHelp() method. Here it enables sorting of subcommands and customizes the subcommand term format.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_36

LANGUAGE: javascript
CODE:
```
program.configureHelp({
  sortSubcommands: true,
  subcommandTerm: (cmd) => cmd.name() // Just show the name, instead of short usage.
});
```

----------------------------------------

TITLE: GitHub Watch Button SVG Icon
DESCRIPTION: SVG icon markup for the repository watch button showing an eye symbol
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_9

LANGUAGE: SVG
CODE:
```
<svg height="16" class="octicon octicon-eye" viewBox="0 0 16 16" version="1.1" width="16" aria-hidden="true"><path fill-rule="evenodd" d="M1.679 7.932c.412-.621 1.242-1.75 2.366-2.717C5.175 4.242 6.527 3.5 8 3.5c1.473 0 2.824.742 3.955 1.715 1.124.967 1.954 2.096 2.366 2.717a.119.119 0 010 .136c-.412.621-1.242 1.75-2.366 2.717C10.825 11.758 9.473 12.5 8 12.5c-1.473 0-2.824-.742-3.955-1.715C2.92 9.818 2.09 8.69 1.679 8.068a.119.119 0 010-.136zM8 2c-1.981 0-3.67.992-4.933 2.078C1.797 5.169.88 6.423.43 7.1a1.619 1.619 0 000 1.798c.45.678 1.367 1.932 2.637 3.024C4.329 13.008 6.019 14 8 14c1.981 0 3.67-.992 4.933-2.078 1.27-1.091 2.187-2.345 2.637-3.023a1.619 1.619 0 000-1.798c-.45-.678-1.367-1.932-2.637-3.023C11.671 2.992 9.981 2 8 2zm0 8a2 2 0 100-4 2 2 0 000 4z"></path></svg>
```

----------------------------------------

TITLE: Building with Target Option - Bun CLI - CLI
DESCRIPTION: Shows how to perform the same build as above using the Bun CLI. Sets entrypoints, output directory, and target. This variant is for shell/command line usage, requiring Bun to be installed globally. Outputs the bundle to the specified directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_20

LANGUAGE: CLI
CODE:
```
$ bun build --entrypoints ./index.ts --outdir ./out --target browser
```

----------------------------------------

TITLE: Rebuilding Bun Bindings with Parallelism in Bash
DESCRIPTION: Runs the `make bindings` command from the Bun project root, using the `-j10` flag to potentially accelerate the process by utilizing up to 10 parallel jobs. This step rebuilds Bun's language bindings against the newly updated WebKit/JSC. Any compile errors encountered during this phase indicate necessary manual code adjustments in Bun's bindings to align with WebKit API changes.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/contributing/upgrading-webkit.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
# It will take awhile if you don't pass -j here
make bindings -j10
```

----------------------------------------

TITLE: Clone WebKit Repository
DESCRIPTION: This command clones the WebKit repository into the `./vendor/WebKit` directory. WebKit is not cloned by default. This requires `git` to be installed.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_23

LANGUAGE: bash
CODE:
```
# Clone WebKit into ./vendor/WebKit
$ git clone https://github.com/oven-sh/WebKit vendor/WebKit
```

----------------------------------------

TITLE: Running a Bun Fullstack Application
DESCRIPTION: Command to run a Bun fullstack application from the terminal.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/fullstack.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ bun run app.ts
```

----------------------------------------

TITLE: Drizzle Migration Directory Structure (Directory Tree)
DESCRIPTION: Shows the layout and contents of the generated drizzle migrations folder, including SQL migration files and metadata subdirectory. Output is illustrative for the file system state after migration generation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-drizzle.md#2025-04-22_snippet_7

LANGUAGE: txt
CODE:
```
drizzle\n├── 0000_aspiring_post.sql\n└── meta\n    ├── 0000_snapshot.json\n    └── _journal.json
```

----------------------------------------

TITLE: Package.json Changes for Peer Dependencies
DESCRIPTION: Shows how the package.json file is updated when adding a peer dependency, with the package being added to the peerDependencies section.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/add-peer.md#2025-04-22_snippet_1

LANGUAGE: json-diff
CODE:
```
{
  "peerDependencies": {
+   "@types/bun": "^$BUN_LATEST_VERSION"
  }
}
```

----------------------------------------

TITLE: Adding LLVM 19 to PATH (macOS)
DESCRIPTION: Adds the LLVM 19 binary directory to the PATH environment variable on macOS using Homebrew. This makes Clang-19 accessible from the command line.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_14

LANGUAGE: bash
CODE:
```
$ export PATH="$(brew --prefix llvm@19)/bin:$PATH"
```

----------------------------------------

TITLE: Referencing bun-mdx-rs Binary Package
DESCRIPTION: Package identifier for the x86_64-unknown-linux-gnu binary version of bun-mdx-rs
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-build-mdx-rs/npm/linux-x64-gnu/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
bun-mdx-rs-linux-x64-gnu
```

----------------------------------------

TITLE: Creating HTTP/2 Frame for Testing in Node.js
DESCRIPTION: Example showing how to create a base HTTP/2 Frame instance with specified parameters and write it to a socket. The Frame class serializes the HTTP/2 frame header into a Buffer.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
// length is a 24-bit unsigned integer
// type is an 8-bit unsigned integer identifying the frame type
// flags is an 8-bit unsigned integer containing the flag bits
// id is the 32-bit stream identifier, if any.
const frame = new http2.Frame(length, type, flags, id);

// Write the frame data to a socket
socket.write(frame.data);
```

----------------------------------------

TITLE: Canceling Request with AbortController in TypeScript
DESCRIPTION: Shows how to manually cancel a fetch request using an AbortController, which provides more control over when to abort the request.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
const controller = new AbortController();

const response = await fetch("http://example.com", {
  signal: controller.signal,
});

controller.abort();
```

----------------------------------------

TITLE: Re-installing Dependencies After Adding Trust
DESCRIPTION: This shell command sequence demonstrates how to perform a fresh installation of dependencies after adding a trusted dependency, ensuring proper installation and execution of lifecycle scripts.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/trusted.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
$ rm -rf node_modules
$ rm bun.lock
$ bun install
```

----------------------------------------

TITLE: Running Bun Tests with --todo Flag (Shell)
DESCRIPTION: This snippet shows the output of running bun test with the --todo flag, which executes todo tests and expects them to fail. If a todo test passes, it's considered a failure and returns a non-zero exit code.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/todo-tests.md#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
$ bun test --todo
my.test.ts:
✗ unimplemented feature
  ^ this test is marked as todo but passes. Remove `.todo` or check that test is correct.

 0 pass
 1 fail
 1 expect() calls
$ echo $?
1 # this is the exit code of the previous command
```

----------------------------------------

TITLE: Configuring SQLite3 Static Library Build with CMake
DESCRIPTION: Configures SQLite3 as a static library with extended features enabled through compiler definitions. Sets minimum CMake version, defines project parameters, and configures build targets with specific compile definitions. Includes Windows-specific compilation flags.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/bun.js/bindings/sqlite/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.28)
project(sqlite3 C)

add_library(sqlite3 STATIC sqlite3.c)
target_include_directories(sqlite3 PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_compile_definitions(sqlite3 PRIVATE
  "SQLITE_ENABLE_COLUMN_METADATA="
  "SQLITE_MAX_VARIABLE_NUMBER=250000"
  "SQLITE_ENABLE_RTREE=1"
  "SQLITE_ENABLE_FTS3=1"
  "SQLITE_ENABLE_FTS3_PARENTHESIS=1"
  "SQLITE_ENABLE_FTS5=1"
  "SQLITE_ENABLE_JSON1=1"
  "SQLITE_ENABLE_MATH_FUNCTIONS=1"
)

if(WIN32)
  target_compile_options(sqlite3 PRIVATE /MT /U_DLL)
endif()
```

----------------------------------------

TITLE: Route Precedence in Bun.serve
DESCRIPTION: Example illustrating the order of route matching in Bun.serve, from most specific (exact routes) to least specific (global catch-all), demonstrating the route resolution hierarchy.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
Bun.serve({
  routes: {
    // Most specific first
    "/api/users/me": () => new Response("Current user"),
    "/api/users/:id": req => new Response(`User ${req.params.id}`),
    "/api/*": () => new Response("API catch-all"),
    "/*": () => new Response("Global catch-all"),
  },
});
```

----------------------------------------

TITLE: Using maxBuffer with spawnSync in TypeScript
DESCRIPTION: Demonstrates how to limit the maximum output of a synchronous child process.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
// KIll 'yes' after it emits over 100 bytes of output
const result = Bun.spawnSync({
  cmd: ["yes"], // or ["bun", "exec", "yes"] on windows
  maxBuffer: 100,
});
// process exits
```

----------------------------------------

TITLE: Installing Express Dependency with Bun (Shell)
DESCRIPTION: Adds the Express.js framework as a project dependency using the `bun add` command. This command downloads and installs the `express` package, making it available for use in the project. Requires the Bun runtime to be installed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/express.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun add express
```

----------------------------------------

TITLE: Define Flag Usage Comparison
DESCRIPTION: Demonstrates the syntax difference in using the --define flag between esbuild and Bun. esbuild uses a colon separator while Bun uses a space.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/vs-esbuild.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ esbuild --define:foo=bar
$ bun build --define foo=bar
```

----------------------------------------

TITLE: Modern Media Query Range Syntax
DESCRIPTION: Shows modern range syntax for media queries using comparison operators and how Bun converts them to traditional min/max syntax for browser compatibility.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_23

LANGUAGE: css
CODE:
```
@media (width >= 768px) {
  .container {
    max-width: 720px;
  }
}

@media (768px <= width <= 1199px) {
  .sidebar {
    display: flex;
  }
}

@media (width > 320px) and (width < 768px) {
  .mobile-only {
    display: block;
  }
}
```

LANGUAGE: css
CODE:
```
@media (min-width: 768px) {
  .container {
    max-width: 720px;
  }
}

@media (min-width: 768px) and (max-width: 1199px) {
  .sidebar {
    display: flex;
  }
}

@media (min-width: 321px) and (max-width: 767px) {
  .mobile-only {
    display: block;
  }
}
```

----------------------------------------

TITLE: Setting Idle Timeout (TypeScript)
DESCRIPTION: This snippet configures the idle timeout for WebSocket connections using the `idleTimeout` parameter.  The connection will be closed after the specified duration of inactivity.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/websockets.md#_snippet_11

LANGUAGE: typescript
CODE:
```
Bun.serve({
  fetch(req, server) {}, // upgrade logic
  websocket: {
    idleTimeout: 60, // 60 seconds

    // ...
  },
});
```

----------------------------------------

TITLE: Resolving Domain Names with node:dns in TypeScript
DESCRIPTION: Demonstrates how to use the node:dns module in Bun to resolve domain names. This example shows resolving IPv4 addresses for a domain with TTL information.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/dns.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import * as dns from "node:dns";

const addrs = await dns.promises.resolve4("bun.sh", { ttl: true });
console.log(addrs);
// => [{ address: "172.67.161.226", family: 4, ttl: 0 }, ...]
```

----------------------------------------

TITLE: Using Fake HTTP/2 Response Headers in Node.js Tests
DESCRIPTION: Example showing how to use predefined fake HTTP/2 response headers (kFakeResponseHeaders) as the payload for an HTTP/2 HEADERS frame. This creates a minimal but valid HTTP/2 response for testing purposes.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
const frame = new http2.HeadersFrame(1, http2.kFakeResponseHeaders, 0, true);

socket.write(frame.data);
```

----------------------------------------

TITLE: CSS Styles for Bun Application
DESCRIPTION: Example CSS styles that will be processed and bundled by Bun when referenced in HTML files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/fullstack.md#2025-04-22_snippet_9

LANGUAGE: css
CODE:
```
body {
  background-color: red;
}
```

----------------------------------------

TITLE: Excluding Patterns with Enhanced :not() Syntax and Fallbacks - CSS
DESCRIPTION: Explains exclusion of element types using the modern :not() selector with multiple arguments, and provides Bun's transpilation using :is() and vendor-prefixed fallbacks for legacy browsers. May require vendor-prefixed selectors or further fallback logic for strict compatibility. Key parameters are exclusion selectors; output is selective application of styles for UI refinement.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_21

LANGUAGE: css
CODE:
```
/* Select all buttons except primary and secondary variants */
button:not(.primary, .secondary) {
  background-color: #f5f5f5;
  border: 1px solid #ddd;
}

/* Apply styles to all headings except those inside sidebars or footers */
h2:not(.sidebar *, footer *) {
  margin-top: 2em;
}
```

LANGUAGE: css
CODE:
```
/* Converted to use :not with :is() for compatibility */
button:not(:is(.primary, .secondary)) {
  background-color: #f5f5f5;
  border: 1px solid #ddd;
}

h2:not(:is(.sidebar *, footer *)) {
  margin-top: 2em;
}
```

LANGUAGE: css
CODE:
```
/* Even more fallbacks for maximum compatibility */
button:not(:-webkit-any(.primary, .secondary)) {
  background-color: #f5f5f5;
  border: 1px solid #ddd;
}

button:not(:-moz-any(.primary, .secondary)) {
  background-color: #f5f5f5;
  border: 1px solid #ddd;
}

button:not(:is(.primary, .secondary)) {
  background-color: #f5f5f5;
  border: 1px solid #ddd;
}
```

----------------------------------------

TITLE: Installing Optional Dependencies with Bun
DESCRIPTION: Command for adding optional dependencies using the --optional flag.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/add.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ bun add --optional lodash
```

----------------------------------------

TITLE: Adding TypeScript DOM Type References to Tests
DESCRIPTION: TypeScript code showing how to add a triple-slash directive for DOM types to resolve TypeScript errors when using DOM APIs in test files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/dom.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
/// <reference lib="dom" />

import {test, expect} from 'bun:test';

test('dom test', () => {
  document.body.innerHTML = `<button>My button</button>`;
  const button = document.querySelector('button');
  expect(button?.innerText).toEqual('My button');
});
```

----------------------------------------

TITLE: Configuring Package Handling in Bun
DESCRIPTION: Examples of controlling how package dependencies are handled during bundling, with options for bundling or treating as external.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_47

LANGUAGE: typescript
CODE:
```
await Bun.build({
  entrypoints: ['./index.ts'],
  packages: 'external',
})
```

LANGUAGE: bash
CODE:
```
$ bun build ./index.ts --packages external
```

----------------------------------------

TITLE: CommonJS Module Export Example
DESCRIPTION: Example of exporting a function using CommonJS module syntax with module.exports.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_6

LANGUAGE: ts
CODE:
```
function hello() {
  console.log("Hello world!");
}

exports.hello = hello;
```

----------------------------------------

TITLE: Enabling Development Mode in Bun.serve()
DESCRIPTION: Shows how to enable development mode in Bun.serve() to get features like source maps, disabled minification, and dynamic rebundling.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/fullstack.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
import homepage from "./index.html";
import dashboard from "./dashboard.html";

Bun.serve({
  routes: {
    "/": homepage,
    "/dashboard": dashboard,
  }

+ development: true,

  fetch(req) {
    // ... api requests
  },
});
```

----------------------------------------

TITLE: JSX Transformation with 'preserve' Option
DESCRIPTION: Configuration for transforming JSX using the 'preserve' option, which keeps JSX syntax as-is without transpilation. Note that this option is not currently supported by Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_8

LANGUAGE: json
CODE:
```
{
  "jsx": "preserve"
}
```

----------------------------------------

TITLE: Using ArrayBufferSink in Streaming Mode
DESCRIPTION: Shows how to use ArrayBufferSink in streaming mode, allowing continuous writing and periodic flushing of contents. This is useful for buffering stream data.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/streams.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
const sink = new Bun.ArrayBufferSink();
sink.start({
  stream: true,
});

sink.write("h");
sink.write("e");
sink.write("l");
sink.flush();
// ArrayBuffer(5) [ 104, 101, 108 ]

sink.write("l");
sink.write("o");
sink.flush();
// ArrayBuffer(5) [ 108, 111 ]
```

----------------------------------------

TITLE: Configuring Dry Run Mode in Bun Install
DESCRIPTION: When enabled, bun install will simulate installation without actually installing dependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_24

LANGUAGE: toml
CODE:
```
[install]
dryRun = false
```

----------------------------------------

TITLE: Shell Output Demonstration
DESCRIPTION: Terminal output showing the result of executing the JavaScript code that calls the C function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cc.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
$ bun hello.js
What is the answer to the universe? 42
```

----------------------------------------

TITLE: Library Linking with cc Configuration
DESCRIPTION: Configuration example showing how to link external libraries with the C code.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cc.md#2025-04-22_snippet_6

LANGUAGE: ts
CODE:
```
type Library = string[];

cc({
  source: "hello.c",
  library: ["sqlite3"],
});
```

----------------------------------------

TITLE: Using refresh from tmpdir module
DESCRIPTION: Deletes and recreates the testing temporary directory. When useSpawn is true, this action is performed using child_process.spawnSync. Adds a listener to clean up on process exit.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_25

LANGUAGE: JavaScript
CODE:
```
refresh(useSpawn)
```

----------------------------------------

TITLE: Displaying Bun Cache Path
DESCRIPTION: Prints the filesystem path to the directory where Bun stores its global cache of downloaded package tarballs and metadata. This cache speeds up subsequent installs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/pm.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
$ bun pm cache
```

----------------------------------------

TITLE: Running Bun with Debugging Enabled
DESCRIPTION: Command to start a Bun application with the `--inspect` flag, which enables the WebKit Inspector Protocol debugging interface. This creates a WebSocket server that debugging tools can connect to.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/web-debugger.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
$ bun --inspect server.ts
------------------ Bun Inspector ------------------
Listening at:
  ws://localhost:6499/0tqxs9exrgrm

Inspect in browser:
  https://debug.bun.sh/#localhost:6499/0tqxs9exrgrm
------------------ Bun Inspector ------------------
```

----------------------------------------

TITLE: Installing Bun canary build
DESCRIPTION: This command upgrades Bun to the latest canary build, which is generated on every commit. Canary builds are experimental and may contain unstable features.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bun-upgrade.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ bun upgrade --canary
```

----------------------------------------

TITLE: Displaying Bun JavaScript Runtime Information in Markdown
DESCRIPTION: This Markdown snippet introduces Bun, a fast all-in-one JavaScript runtime, and provides a link to its website. It also includes a note about baseline builds for machines without AVX2 support.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-release/npm/@oven/bun-windows-x64-baseline/README.md#2025-04-22_snippet_0

LANGUAGE: Markdown
CODE:
```
# Bun

This is the Windows x64 binary for Bun, a fast all-in-one JavaScript runtime. https://bun.sh

_Note: "Baseline" builds are for machines that do not support [AVX2](https://en.wikipedia.org/wiki/Advanced_Vector_Extensions) instructions._
```

----------------------------------------

TITLE: Including Bun Build Target
DESCRIPTION: Includes the CMake module for building the Bun target.
SOURCE: https://github.com/oven-sh/bun/blob/main/CMakeLists.txt#2025-04-22_snippet_6

LANGUAGE: CMake
CODE:
```
include(BuildBun)
```

----------------------------------------

TITLE: Handling Warning Logs in Bun Build
DESCRIPTION: Example showing how to access and process warning logs from successful builds.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_69

LANGUAGE: typescript
CODE:
```
const result = await Bun.build({
  entrypoints: ["./index.tsx"],
  outdir: "./out",
});

if (result.logs.length > 0) {
  console.warn("Build succeeded with warnings:");
  for (const message of result.logs) {
    // Bun will pretty print the message object
    console.warn(message);
  }
}
```

----------------------------------------

TITLE: Building Postject from Source
DESCRIPTION: Command to build the Postject project, which outputs the build artifacts to the dist directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/postject/README.markdown#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
$ npm run build
```

----------------------------------------

TITLE: JSX with Default Import Source
DESCRIPTION: Configuration demonstrating the default behavior when jsxImportSource is not explicitly defined. The jsx or jsxDEV functions will be imported from React by default.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_14

LANGUAGE: jsonc
CODE:
```
{
  "jsx": "react",
  // jsxImportSource is not defined
  // default to "react"
}
```

----------------------------------------

TITLE: Registering WebSocket Routes in C++ with µWebSockets
DESCRIPTION: Shows how to register WebSocket routes with various handlers for different events such as upgrade, open, message, drain, ping, pong, and close. It also demonstrates setting WebSocket options.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-uws/misc/READMORE.md#2025-04-22_snippet_2

LANGUAGE: c++
CODE:
```
uWS::App().ws<PerSocketData>("/*", {
    /* Settings */
    .compression = uWS::SHARED_COMPRESSOR,
    .maxPayloadLength = 16 * 1024,
    .idleTimeout = 10,
    /* Handlers */
    .upgrade = [](auto *res, auto *req, auto *context) {
        /* You may read from req only here, and COPY whatever you need into your PerSocketData.
         * See UpgradeSync and UpgradeAsync examples. */
    },
    .open = [](auto *ws) {

    },
    .message = [](auto *ws, std::string_view message, uWS::OpCode opCode) {
        ws->send(message, opCode);
    },
    .drain = [](auto *ws) {
        /* Check getBufferedAmount here */
    },
    .ping = [](auto *ws) {

    },
    .pong = [](auto *ws) {

    },
    .close = [](auto *ws, int code, std::string_view message) {

    }
});
```

----------------------------------------

TITLE: JSX with Custom Import Source - React JSX Dev
DESCRIPTION: Configuration for using a custom JSX import source with the react-jsxdev transform mode, combining development-mode JSX features with a custom library.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_18

LANGUAGE: jsonc
CODE:
```
{
  "jsx": "react-jsxdev",
  "jsxImportSource": "preact",
}
```

----------------------------------------

TITLE: Custom Usage Help Output in Commander.js
DESCRIPTION: This shows the formatted help output after customizing the usage description. It displays the program name followed by the custom usage pattern.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_32

LANGUAGE: text
CODE:
```
Usage: my-command [global options] command
```

----------------------------------------

TITLE: Programmatic Usage of Postject with Node.js
DESCRIPTION: JavaScript example showing how to use Postject programmatically to inject a buffer into an executable.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/postject/README.markdown#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
const { inject } = require('postject');

await inject('a.out', 'lol', Buffer.from('Hello, world!'));
```

----------------------------------------

TITLE: Package Name Reference in Markdown
DESCRIPTION: Displays the package name for the Linux ARM64 MUSL binary build of bun-mdx-rs using markdown formatting.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-build-mdx-rs/npm/linux-arm64-musl/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# `bun-mdx-rs-linux-arm64-musl`
```

----------------------------------------

TITLE: Reloading systemd After Service Updates
DESCRIPTION: Command to reload the systemd daemon after modifying service files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/systemd.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
$ sudo systemctl daemon-reload
```

----------------------------------------

TITLE: Providing an Implementation for Todo Test in Bun (TypeScript)
DESCRIPTION: This snippet shows how to provide an optional implementation for a todo test. The implementation will not run unless the --todo flag is used.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/todo-tests.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { test, expect } from "bun:test";

test.todo("unimplemented feature", () => {
  expect(Bun.isAwesome()).toBe(true);
});
```

----------------------------------------

TITLE: Performing a Dry Run Installation
DESCRIPTION: Shows how to use the `--dry-run` flag with `bun install`. This command simulates the installation process, showing what would happen without actually downloading or installing any packages or modifying the `node_modules` directory or lockfile.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/install.md#2025-04-22_snippet_13

LANGUAGE: bash
CODE:
```
$ bun install --dry-run
```

----------------------------------------

TITLE: Converting Buffer to String using Node.js Buffer in TypeScript
DESCRIPTION: This snippet demonstrates how to convert a Buffer to a string using the .toString() method in TypeScript. It requires Node.js or Bun as the runtime, with access to the Buffer class. The example constructs a buffer from the string \"hello\", then decodes the buffer back to a string using the default encoding (utf8). Inputs are the original UTF-8 string, and the output is the string representation of the buffer.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/buffer-to-string.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
const buf = Buffer.from("hello");
const str = buf.toString();
// => "hello"
```

----------------------------------------

TITLE: Adding LLVM 19 to PATH (Arch)
DESCRIPTION: Adds the LLVM 19 binary directory to the PATH environment variable on Arch Linux. This makes Clang-19 accessible from the command line.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_15

LANGUAGE: bash
CODE:
```
$ export PATH="$PATH:/usr/lib/llvm19/bin"
```

----------------------------------------

TITLE: HTML Template for Running Bundle
DESCRIPTION: A minimal HTML file to load the bundled JavaScript file in a browser, providing an element with id 'root' for React to render into.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_7

LANGUAGE: html
CODE:
```
<html>
  <body>
    <div id="root"></div>
    <script type="module" src="/index.js"></script>
  </body>
</html>
```

----------------------------------------

TITLE: Updating Snapshots in Bun Tests using Shell Command
DESCRIPTION: Demonstrates the command `bun test --update-snapshots`. This command is used to regenerate and overwrite existing snapshot files when the expected output of a test using `toMatchSnapshot` has intentionally changed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_15

LANGUAGE: sh
CODE:
```
$ bun test --update-snapshots
```

----------------------------------------

TITLE: Invalid Uses of 'composes' in CSS Modules - CSS
DESCRIPTION: This snippet illustrates invalid usages of the 'composes' keyword in CSS Modules, such as applying it to an ID selector or to combined class selectors. Bun and the CSS Modules spec require 'composes' to appear only on simple class selectors. No dependencies except for correct CSS Module syntax checking. Input: CSS selectors with 'composes'; output: will cause bundler errors or warnings. Constraint: Only simple class selectors are valid targets for 'composes'.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css_modules.md#2025-04-22_snippet_6

LANGUAGE: css
CODE:
```
#button {
  /* Invalid! `#button` is not a class selector */
  composes: background;
}

.button,
.button-secondary {
  /* Invalid! `.button, .button-secondary` is not a simple selector */
  composes: background;
}

```

----------------------------------------

TITLE: Specifying Bun Version in GitHub Actions
DESCRIPTION: This workflow snippet shows how to specify a particular version of Bun to install in your GitHub Actions runner using the bun-version parameter. You can specify exact versions, 'latest', 'canary', or a specific commit SHA.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/cicd.md#2025-04-22_snippet_1

LANGUAGE: yaml
CODE:
```
name: my-workflow
jobs:
  my-job:
    name: my-job
    runs-on: ubuntu-latest
    steps:
      # ...
      - uses: oven-sh/setup-bun@v2
       with:
         bun-version: 1.2.0 # or "latest", "canary", <sha>
```

----------------------------------------

TITLE: TypeScript to JavaScript Compatibility
DESCRIPTION: Demonstrates how Bun supports importing TypeScript files using .js extensions for TypeScript's ES module compatibility.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_4

LANGUAGE: ts
CODE:
```
import { hello } from "./hello";
import { hello } from "./hello.ts"; // this works
import { hello } from "./hello.js"; // this also works
```

----------------------------------------

TITLE: Error Output Example in Commander.js
DESCRIPTION: This shows the console output when an unknown option is used after configuring showHelpAfterError with a custom message. It displays the error and additional help information.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_27

LANGUAGE: text
CODE:
```
$ pizza --unknown
error: unknown option '--unknown'
(add --help for additional information)
```

----------------------------------------

TITLE: Initializing Project Directory using Bun Shell Commands
DESCRIPTION: Demonstrates creating a project directory (`my-bot`), navigating into it, and initializing a Bun project using `bun init`. This sets up the basic file structure and configuration for a Bun application.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/discordjs.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ mkdir my-bot
$ cd my-bot
$ bun init
```

----------------------------------------

TITLE: Presigning URLs for S3 Objects
DESCRIPTION: Demonstrates how to generate presigned URLs for S3 objects, allowing secure temporary access for uploads or downloads without exposing credentials. Shows default behavior and custom configurations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import { s3 } from "bun";

// Generate a presigned URL that expires in 24 hours (default)
const download = s3.presign("my-file.txt"); // GET, text/plain, expires in 24 hours

const upload = s3.presign("my-file", {
  expiresIn: 3600, // 1 hour
  method: "PUT",
  type: "application/json", // No extension for inferring, so we can specify the content type to be JSON
});

// You can call .presign() if on a file reference, but avoid doing so
// unless you already have a reference (to avoid memory usage).
const myFile = s3.file("my-file.txt");
const presignedFile = myFile.presign({
  expiresIn: 3600, // 1 hour
});
```

----------------------------------------

TITLE: Displaying Default Trusted Dependencies with Bun
DESCRIPTION: Prints the list of dependencies that Bun trusts by default to run lifecycle scripts without explicit configuration. This list is maintained by the Bun team.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/pm.md#2025-04-22_snippet_14

LANGUAGE: bash
CODE:
```
$ bun pm default-trusted
```

----------------------------------------

TITLE: Configuring Asset Naming in Bun.build using TypeScript
DESCRIPTION: This TypeScript snippet demonstrates configuring the naming convention for asset files generated by `Bun.build`. It uses the `naming` object with the `asset` key set to a template string `"[name].[ext]"`. The `[ext]` placeholder must be explicitly included in Bun's naming templates.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/vs-esbuild.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
```ts
Bun.build({
  entrypoints: ["./index.tsx"],
  naming: {
    asset: "[name].[ext]",
  },
});
```
```

----------------------------------------

TITLE: Configuring Bun HTTP Server
DESCRIPTION: Basic setup of a Bun HTTP server using Bun.serve(). When run with hot reloading, the fetch handler will automatically reload when source files change without restarting the process.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/hot.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
Bun.serve({
  port: 3000,
  fetch(req) {
    return new Response("Hello world");
  },
});
```

----------------------------------------

TITLE: SQLite Database and Statement Classes Reference in Bun
DESCRIPTION: Comprehensive type definitions for the Database and Statement classes in Bun's SQLite implementation, including constructor options, query methods, and utility functions.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_31

LANGUAGE: typescript
CODE:
```
class Database {
  constructor(
    filename: string,
    options?:
      | number
      | {
          readonly?: boolean;
          create?: boolean;
          readwrite?: boolean;
        },
  );

  query<Params, ReturnType>(sql: string): Statement<Params, ReturnType>;
  run(
    sql: string,
    params?: SQLQueryBindings,
  ): { lastInsertRowid: number; changes: number };
  exec = this.run;
}

class Statement<Params, ReturnType> {
  all(params: Params): ReturnType[];
  get(params: Params): ReturnType | undefined;
  run(params: Params): {
    lastInsertRowid: number;
    changes: number;
  };
  values(params: Params): unknown[][];

  finalize(): void; // destroy statement and clean up resources
  toString(): string; // serialize to SQL

  columnNames: string[]; // the column names of the result set
  paramsCount: number; // the number of parameters expected by the statement
  native: any; // the native object representing the statement

  as(Class: new () => ReturnType): this;
}

type SQLQueryBindings =
  | string
  | bigint
  | TypedArray
  | number
  | boolean
  | null
  | Record<string, string | bigint | TypedArray | number | boolean | null>;
```

----------------------------------------

TITLE: JSX Output with 'react-jsxdev' Option
DESCRIPTION: Transpiled output of JSX when using the 'react-jsxdev' option, showing the development version of JSX transform with additional parameters for debugging.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_7

LANGUAGE: tsx
CODE:
```
import { jsxDEV } from "react/jsx-dev-runtime";
jsxDEV(
  "Box",
  { width: 5, children: "Hello" },
  undefined,
  false,
  undefined,
  this,
);
```

----------------------------------------

TITLE: Publishing with Auth Type (2FA) using Bun CLI - Shell
DESCRIPTION: Provides an example of specifying the authentication type for 2FA-enabled npm accounts with the `--auth-type` flag. Bun CLI can use either 'web' or 'legacy' modes. During publishing, you are prompted to supply a one-time password if required. This command is useful for accommodating various registry auth flows in CI/CD and interactive sessions.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/publish.md#2025-04-22_snippet_7

LANGUAGE: sh
CODE:
```
$ bun publish --auth-type legacy\n...\nThis operation requires a one-time password.\nEnter OTP: 123456\n...
```

----------------------------------------

TITLE: Displaying Help After Errors in Commander.js
DESCRIPTION: This example shows how to configure Commander.js to show help information or a custom message after encountering a usage error, making the CLI more user-friendly.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_26

LANGUAGE: javascript
CODE:
```
program.showHelpAfterError();
// or
program.showHelpAfterError('(add --help for additional information)');
```

----------------------------------------

TITLE: Installing EdgeDB CLI on Linux/macOS using Shell
DESCRIPTION: This shell command uses curl to download and run the official EdgeDB installer script for Linux/macOS systems via a secure HTTPS connection. Dependency: curl. Input: None. Output: Installs the EdgeDB CLI, which is needed for managing projects, migrations, and database instances. The script should be run in a terminal with sufficient permissions.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/edgedb.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
curl --proto '=https' --tlsv1.2 -sSf https://sh.edgedb.com | sh
```

----------------------------------------

TITLE: Installing Dependencies with Bun
DESCRIPTION: Command to install project dependencies using Bun package manager
SOURCE: https://github.com/oven-sh/bun/blob/main/src/cli/init/README2.default.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
bun install
```

----------------------------------------

TITLE: Decoupling Worker Lifetime from Main Process with unref()
DESCRIPTION: Example of using worker.unref() to prevent a worker from keeping the main process alive, a Bun-specific extension similar to Node.js worker_threads.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/workers.md#2025-04-22_snippet_12

LANGUAGE: typescript
CODE:
```
const worker = new Worker(new URL("worker.ts", import.meta.url).href);
worker.unref();
```

----------------------------------------

TITLE: Reading Data from Pointer Using read Utility in Bun (TypeScript)
DESCRIPTION: Shows how to read data directly from native memory using the read utility from 'bun:ffi'. This example fetches four consecutive unsigned 8-bit integers from a pointer at specific offsets. Ideal for short-lived pointers due to performance. Outputs are raw values read from memory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/ffi.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
import { read } from "bun:ffi";

console.log(
  // ptr, byteOffset
  read.u8(myPtr, 0),
  read.u8(myPtr, 1),
  read.u8(myPtr, 2),
  read.u8(myPtr, 3),
);

```

----------------------------------------

TITLE: CSS HMR Performance Metrics Output for Bun
DESCRIPTION: Output displaying the performance metrics for CSS Hot Module Reload in Bun. Shows frame timing percentiles and the percentage of successfully rendered frames out of total frames.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/hot-module-reloading/css-stress-test/bun.latest.16ms.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
bun
 --------------------------------------------------
 CSS HMR FRAME TIME

 50th percentile: 22.2ms 
 75th percentile: 23.9ms 
 90th percentile: 25.3ms 
 95th percentile: 43.6ms 
 99th percentile: 49.1ms 
 Rendered frames: 922 / 1024 (90%)
```

----------------------------------------

TITLE: Uninstalling Bun
DESCRIPTION: This snippet provides commands for uninstalling Bun from different platforms and installation methods.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/installation.md#2025-04-22_snippet_13

LANGUAGE: bash
CODE:
```
$ rm -rf ~/.bun # for macOS, Linux, and WSL
```

LANGUAGE: powershell
CODE:
```
> powershell -c ~\.bun\uninstall.ps1
```

LANGUAGE: powershell
CODE:
```
> scoop uninstall bun
```

LANGUAGE: bash
CODE:
```
$ npm uninstall -g bun
```

LANGUAGE: bash
CODE:
```
$ brew uninstall bun
```

----------------------------------------

TITLE: Configuring TypeScript Experimental Decorators
DESCRIPTION: tsconfig.json configuration for enabling experimental decorators support in Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/typescript.md#2025-04-22_snippet_3

LANGUAGE: jsonc
CODE:
```
{
  "compilerOptions": {
    // ... rest of your config
    "experimentalDecorators": true,
  },
}
```

----------------------------------------

TITLE: Interpreting Benchmark Results in Shell Output
DESCRIPTION: Example of the time command output format used in the benchmark results. It shows the real, user, and system time taken by each bundler.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/bundle/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
real <number>
user <number>
sys <number>
```

----------------------------------------

TITLE: Platform-specific Backend Commands for Bun Install
DESCRIPTION: Various commands showing how to use different installation backends (hardlink, clonefile, copyfile, symlink) with bun install.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bun-install.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
$ rm -rf node_modules
$ bun install --backend hardlink

$ rm -rf node_modules
$ bun install --backend clonefile

$ rm -rf node_modules
$ bun install --backend clonefile_each_dir

$ rm -rf node_modules
$ bun install --backend copyfile

$ rm -rf node_modules
$ bun install --backend symlink
$ node --preserve-symlinks ./my-file.js
```

----------------------------------------

TITLE: Creating a Basic Elysia HTTP Server in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates the minimal setup for an Elysia web server. It imports the `Elysia` class, creates an application instance, defines a GET route for the root path ('/') that returns 'Hello Elysia', starts the HTTP server listening on port 8080, and logs a confirmation message to the console indicating the server is running.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/ecosystem/elysia.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
```ts#server.ts
import { Elysia } from 'elysia'

const app = new Elysia()
	.get('/', () => 'Hello Elysia')
	.listen(8080)

console.log(`🦊 Elysia is running at on port ${app.server.port}...`)
```
```

----------------------------------------

TITLE: Demonstrating a Critical Security Bug in C++ Server Code
DESCRIPTION: This code snippet shows a server implementation with a critical security bug that is hard to trigger. It uses epoll for event handling and recv for receiving data, but contains a vulnerability related to buffer handling.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-uws/fuzzing/libEpollFuzzer/README.md#2025-04-22_snippet_0

LANGUAGE: c++
CODE:
```
int epfd = epoll_create1();

int lsfd = listen(asdasdasd);

int ready_fd = epoll_wait(epfd, lalalala);

for (all ready fds)

int length = recv(buf, 24234234);

//copy from 0 and length
```

----------------------------------------

TITLE: Customizing Usage Description in Commander.js
DESCRIPTION: This code shows how to customize the usage description that appears in the first line of help text. It sets both the program name and usage pattern.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_31

LANGUAGE: javascript
CODE:
```
program
  .name("my-command")
  .usage("[global options] command")
```

----------------------------------------

TITLE: Comment Operations in HTMLRewriter
DESCRIPTION: Examples of comment manipulation operations including content modification and positioning.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/html-rewriter.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
rewriter.on("*", {
  comments(comment) {
    // Content
    console.log(comment.text); // Comment text
    comment.text = "New comment text"; // Set comment text
    console.log(comment.removed); // Whether comment was removed

    // Manipulation
    comment
      .before("Before comment")
      .after("After comment")
      .replace("New comment")
      .remove();

    // HTML content insertion
    comment
      .before("<span>before</span>", { html: true })
      .after("<span>after</span>", { html: true })
      .replace("<span>replace</span>", { html: true });
  },
});
```

----------------------------------------

TITLE: Structuring GitHub Repository Navigation Elements in HTML
DESCRIPTION: This snippet shows the HTML structure for repository navigation elements including search suggestions, avatar placeholders, and jump-to functionality. It uses classes for styling and JavaScript interactions.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_8

LANGUAGE: HTML
CODE:
```
<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-global-search d-none" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg height="16" width="16" class="octicon octicon-repo flex-shrink-0 js-jump-to-octicon-repo d-none" title="Repository" aria-label="Repository" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z"></path></svg>
      <svg height="16" width="16" class="octicon octicon-project flex-shrink-0 js-jump-to-octicon-project d-none" title="Project" aria-label="Project" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M1.75 0A1.75 1.75 0 000 1.75v12.5C0 15.216.784 16 1.75 16h12.5A1.75 1.75 0 0016 14.25V1.75A1.75 1.75 0 0014.25 0H1.75zM1.5 1.75a.25.25 0 01.25-.25h12.5a.25.25 0 01.25.25v12.5a.25.25 0 01-.25.25H1.75a.25.25 0 01-.25-.25V1.75zM11.75 3a.75.75 0 00-.75.75v7.5a.75.75 0 001.5 0v-7.5a.75.75 0 00-.75-.75zm-8.25.75a.75.75 0 011.5 0v5.5a.75.75 0 01-1.5 0v-5.5zM8 3a.75.75 0 00-.75.75v3.5a.75.75 0 001.5 0v-3.5A.75.75 0 008 3z"></path></svg>
      <svg height="16" width="16" class="octicon octicon-search flex-shrink-0 js-jump-to-octicon-search d-none" title="Search" aria-label="Search" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M11.5 7a4.499 4.499 0 11-8.998 0A4.499 4.499 0 0111.5 7zm-.82 4.74a6 6 0 111.06-1.06l3.04 3.04a.75.75 0 11-1.06 1.06l-3.04-3.04z"></path></svg>
    </div>

    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
    </div>

    <div class="border rounded-1 flex-shrink-0 bg-gray px-1 text-gray-light ml-1 f6 d-none js-jump-to-badge-search">
      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this repository">
        In this repository
      </span>
      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
        All GitHub
      </span>
      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>

    <div aria-hidden="true" class="border rounded-1 flex-shrink-0 bg-gray px-1 text-gray-light ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
      Jump to
      <span class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>
  </a>
</li>
```

----------------------------------------

TITLE: Defining Package Dependencies with Lifecycle Scripts in package.json
DESCRIPTION: This snippet shows a basic package.json file with a dependency on node-sass, which typically uses a postinstall script to build native binaries.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/lifecycle.md#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "my-app",
  "version": "1.0.0",
  "dependencies": {
    "node-sass": "^6.0.1"
  }
}
```

----------------------------------------

TITLE: Running Frame Analysis Script for Next.js CSS HMR
DESCRIPTION: This command executes a Node.js script to analyze CSS Hot Module Replacement frame times for a Next.js project. It sets environment variables for sleep interval and project name before running the script.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/hot-module-reloading/css-stress-test/next.latest.32ms.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
SLEEP_INTERVAL=32 PROJECT=next node read-frames.js
```

----------------------------------------

TITLE: Serializing and deserializing data with bun:jsc in JavaScript
DESCRIPTION: Demonstrates how to serialize JavaScript values to ArrayBuffer and deserialize them back using the bun:jsc module. Uses the HTML Structured Clone Algorithm internally, similar to structuredClone and postMessage.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_30

LANGUAGE: javascript
CODE:
```
import { serialize, deserialize } from "bun:jsc";

const buf = serialize({ foo: "bar" });
const obj = deserialize(buf);
console.log(obj); // => { foo: "bar" }
```

----------------------------------------

TITLE: Disabling TLS Validation in Fetch Requests in TypeScript
DESCRIPTION: Shows how to disable TLS certificate validation for fetch requests, which can be useful for development with self-signed certificates but should be used with caution.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_15

LANGUAGE: typescript
CODE:
```
await fetch("https://example.com", {
  tls: {
    rejectUnauthorized: false,
  },
});
```

----------------------------------------

TITLE: Configuring Default Error Handling in Bun Shell
DESCRIPTION: Demonstrates how to configure the default error handling behavior for all shell commands using $.nothrow() or $.throws().
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";
// shell promises will not throw, meaning you will have to
// check for `exitCode` manually on every shell command.
$.nothrow(); // equivalent to $.throws(false)

// default behavior, non-zero exit codes will throw an error
$.throws(true);

// alias for $.nothrow()
$.throws(false);

await $`something-that-may-fail`; // No exception thrown
```

----------------------------------------

TITLE: Loading GitHub Feature-Specific JavaScript Modules
DESCRIPTION: HTML script tags for loading specific JavaScript feature modules used by GitHub. Each script has integrity hashes for security and is loaded asynchronously. The modules include functionality for contributions graphs, drag-and-drop, image cropping, and other GitHub features.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_22

LANGUAGE: HTML
CODE:
```
<script crossorigin="anonymous" async="async" integrity="sha512-CNroxNfy/sSm19XW3hVvtu9w1gQPr27RegkaFEjXOuehR/1UXv33/Ev89R7Kn8av4FjGT+akvqqciARZJAWErQ==" type="application/javascript" src="https://github.githubassets.com/assets/behaviors-bootstrap-08dae8c4.js"></script>

<script crossorigin="anonymous" async="async" integrity="sha512-NqTqgekwk460TqY5fnqcpQSWPHLK1qsbqM7LJI5BqHR6pm1rYOIUnuqP6w3s6EpoiNdh/YRo7amc5UDIRPF27A==" type="application/javascript" data-module-id="./contributions-spider-graph.js" data-src="https://github.githubassets.com/assets/contributions-spider-graph-36a4ea81.js"></script>
<script crossorigin="anonymous" async="async" integrity="sha512-rX/efcwdoSNLAclubTNEJumykN9y6jxJ67d9t5HdgpyLlKHsKfVf1AHFLD5M+8NaP5ndpQJQ4gGDilVrpEHbfQ==" type="application/javascript" data-module-id="./drag-drop.js" data-src="https://github.githubassets.com/assets/drag-drop-ad7fde7d.js"></script>
<script crossorigin="anonymous" async="async" integrity="sha512-iLuC2weaJqL9mYAud2WDWjhd8cJe8dXVxw2KhCH2Rnj6WJvTzlZRmvTtL09wNWX6nRze/TDaQ7gq7BFLchaDYg==" type="application/javascript" data-module-id="./image-crop-element-loader.js" data-src="https://github.githubassets.com/assets/image-crop-element-loader-88bb82db.js"></script>
<script crossorigin="anonymous" async="async" integrity="sha512-QCuZvSssZHjgPkecs0OO0wA6748zjgY+CIWgc4awUkoaN30LxvwbTD5o/jmUDpz2W8l8ASv6VsznbFcoaiNm8Q==" type="application/javascript" data-module-id="./jump-to.js" data-src="https://github.githubassets.com/assets/jump-to-402b99bd.js"></script>
<script crossorigin="anonymous" async="async" integrity="sha512-HzWUeLy0p20M4Lc3+EerTwy/VaH3vMuKLvhFJr0PsJfKXnsD9oy5SfashhxStUirglhYZUB4fLYQRM1uzrFyNg==" type="application/javascript" data-module-id="./profile-pins-element.js" data-src="https://github.githubassets.com/assets/profile-pins-element-1f359478.js"></script>
<script crossorigin="anonymous" async="async" integrity="sha512-qECv/jhsvLFN77eGNu0cjMR2+zvAlLyhQVTnmayJc5OLZoxMLjQZxZW1hK/dhcYro6Wec/aiF21HYf2N5OilYQ==" type="application/javascript" data-module-id="./randomColor.js" data-src="https://github.githubassets.com/assets/randomColor-a840affe.js"></script>
<script crossorigin="anonymous" async="async" integrity="sha512-vK7rRnsAi4qcmC2HqCfPyEBZgIMWb6Azyb1PJxgL1FtEFMydK//dsnuLdVx+RaPGg71Z58ossFXqkLWgMevvdw==" type="application/javascript" data-module-id="./sortable-behavior.js" data-src="https://github.githubassets.com/assets/sortable-behavior-bcaeeb46.js"></script>
<script crossorigin="anonymous" async="async" integrity="sha512-mHqsE5aQq7fAmmLd0epHBJK8rn8DOVnjW2YQOT8wvsN1oLrypw0cDFmwXPDwbMghHyo4kKiOtVJ/kEsEzwwibw==" type="application/javascript" data-module-id="./tweetsodium.js" data-src="https://github.githubassets.com/assets/tweetsodium-987aac13.js"></script>
<script crossorigin="anonymous" async="async" integrity="sha512-64NrdGoMwn8rfUeO96KKyLg7IBjky08csy2744g8171VK6RtKaXQgjEDLxktmgoepKjK+8AuUyLTCQsu2Z1rfA==" type="application/javascript" data-module-id="./user-status-submit.js" data-src="https://github.githubassets.com/assets/user-status-submit-eb836b74.js"></script>
```

----------------------------------------

TITLE: Setting Coverage Thresholds in bunfig.toml
DESCRIPTION: This snippet shows how to set coverage thresholds in bunfig.toml. You can specify a single threshold for all metrics or set different thresholds for lines, functions, and statements. Tests will fail if coverage is below these thresholds.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/coverage.md#2025-04-22_snippet_3

LANGUAGE: toml
CODE:
```
[test]

# to require 90% line-level and function-level coverage
coverageThreshold = 0.9

# to set different thresholds for lines and functions
coverageThreshold = { lines = 0.9, functions = 0.9, statements = 0.9 }
```

----------------------------------------

TITLE: TypeScript Interface Merging for Environment Variables
DESCRIPTION: How to use TypeScript interface merging to add type definitions for environment variables.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_17

LANGUAGE: ts
CODE:
```
declare module "bun" {
  interface Env {
    AWESOME: string;
  }
}
```

----------------------------------------

TITLE: Fetching from S3 Buckets in TypeScript
DESCRIPTION: Shows how to fetch objects from Amazon S3 buckets using the s3:// protocol, with options for providing AWS credentials explicitly.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/fetch.md#2025-04-22_snippet_17

LANGUAGE: typescript
CODE:
```
// Using environment variables for credentials
const response = await fetch("s3://my-bucket/path/to/object");

// Or passing credentials explicitly
const response = await fetch("s3://my-bucket/path/to/object", {
  s3: {
    accessKeyId: "YOUR_ACCESS_KEY",
    secretAccessKey: "YOUR_SECRET_KEY",
    region: "us-east-1",
  },
});
```

----------------------------------------

TITLE: Defining Cookie Types and Classes in TypeScript
DESCRIPTION: This TypeScript snippet defines interfaces (`CookieInit`, `CookieStoreDeleteOptions`, `CookieStoreGetOptions`, `CookieSameSite`) specifying the structure for cookie attributes and options for store operations. It also defines the `Cookie` class to represent and manipulate individual HTTP cookies, including parsing, serialization, and expiration checks. Additionally, it defines the `CookieMap` class, an iterable collection for managing multiple cookies, providing methods for setting, getting, deleting, and converting cookies to Set-Cookie headers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_18

LANGUAGE: typescript
CODE:
```
```ts
interface CookieInit {
  name?: string;
  value?: string;
  domain?: string;
  /** Defaults to '/'. To allow the browser to set the path, use an empty string. */
  path?: string;
  expires?: number | Date | string;
  secure?: boolean;
  /** Defaults to `lax`. */
  sameSite?: CookieSameSite;
  httpOnly?: boolean;
  partitioned?: boolean;
  maxAge?: number;
}

interface CookieStoreDeleteOptions {
  name: string;
  domain?: string | null;
  path?: string;
}

interface CookieStoreGetOptions {
  name?: string;
  url?: string;
}

type CookieSameSite = "strict" | "lax" | "none";

class Cookie {
  constructor(name: string, value: string, options?: CookieInit);
  constructor(cookieString: string);
  constructor(cookieObject?: CookieInit);

  readonly name: string;
  value: string;
  domain?: string;
  path: string;
  expires?: Date;
  secure: boolean;
  sameSite: CookieSameSite;
  partitioned: boolean;
  maxAge?: number;
  httpOnly: boolean;

  isExpired(): boolean;

  serialize(): string;
  toString(): string;
  toJSON(): CookieInit;

  static parse(cookieString: string): Cookie;
  static from(name: string, value: string, options?: CookieInit): Cookie;
}

class CookieMap implements Iterable<[string, string]> {
  constructor(init?: string[][] | Record<string, string> | string);

  get(name: string): string | null;

  toSetCookieHeaders(): string[];

  has(name: string): boolean;
  set(name: string, value: string, options?: CookieInit): void;
  set(options: CookieInit): void;
  delete(name: string): void;
  delete(options: CookieStoreDeleteOptions): void;
  delete(name: string, options: Omit<CookieStoreDeleteOptions, "name">): void;
  toJSON(): Record<string, string>;

  readonly size: number;

  entries(): IterableIterator<[string, string]>;
  keys(): IterableIterator<string>;
  values(): IterableIterator<string>;
  forEach(callback: (value: string, key: string, map: CookieMap) => void): void;
  [Symbol.iterator](): IterableIterator<[string, string]>;
}
```
```

----------------------------------------

TITLE: Unix Socket POST Request with JSON Data in Bun
DESCRIPTION: Shows how to send a POST request with JSON data over a unix domain socket using fetch. Includes setting content type headers and formatting request body.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/fetch-unix.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const response = await fetch("https://hostname/a/path", {
  unix: "/var/run/path/to/unix.sock",
  method: "POST",
  body: JSON.stringify({ message: "Hello from Bun!" }),
  headers: {
    "Content-Type": "application/json",
  },
});

const body = await response.json();
```

----------------------------------------

TITLE: Connecting to inspector via WebSocket in TypeScript
DESCRIPTION: TypeScript code demonstrating how to create an inspector client, connect to the debugger, enable the Runtime domain, and execute code in the target context using WebSocketInspector.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-inspector-protocol/README.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { WebSocketInspector } from "bun-inspector-protocol";

// Create a new inspector client
const inspector = new WebSocketInspector("ws://localhost:9229/ws");

// Listen for connection events
inspector.on("Inspector.connected", () => {
  console.log("Connected to debugger!");
});

inspector.on("Inspector.error", error => {
  console.error("Inspector error:", error);
});

// Connect to the debugger
await inspector.start();

// Enable the Runtime domain
await inspector.send("Runtime.enable");

// Execute some code in the target context
const result = await inspector.send("Runtime.evaluate", {
  expression: "2 + 2",
  returnByValue: true,
});

console.log("Evaluation result:", result.result.value); // 4

// Close the connection
inspector.close();
```

----------------------------------------

TITLE: Optimized TypeScript code after JSON replacement
DESCRIPTION: This TypeScript snippet shows the result of the --define transformation, where the AWS.ACCESS_KEY is replaced with its value.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/define-constant.md#2025-04-22_snippet_10

LANGUAGE: ts
CODE:
```
console.log("abc");
```

----------------------------------------

TITLE: Adding a Peer Dependency with Bun CLI
DESCRIPTION: Command to add a package as a peer dependency using the --peer flag in Bun package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/add-peer.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun add @types/bun --peer
```

----------------------------------------

TITLE: JSX Output with 'react-jsx' Option
DESCRIPTION: Transpiled output of JSX when using the 'react-jsx' option, showing how JSX is converted to jsx function calls that import from react/jsx-runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_5

LANGUAGE: tsx
CODE:
```
import { jsx } from "react/jsx-runtime";
jsx("Box", { width: 5 }, "Hello");
```

----------------------------------------

TITLE: Generating UUID v7 with Bun.randomUUIDv7()
DESCRIPTION: Shows how to generate UUID v7 using Bun.randomUUIDv7(), including different encoding options and timestamp specification.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import { randomUUIDv7 } from "bun";

const id = randomUUIDv7();
// => "0192ce11-26d5-7dc3-9305-1426de888c5a"
```

LANGUAGE: typescript
CODE:
```
namespace Bun {
  function randomUUIDv7(
    encoding?: "hex" | "base64" | "base64url" = "hex",
    timestamp?: number = Date.now(),
  ): string;
  /**
   * If you pass "buffer", you get a 16-byte buffer instead of a string.
   */
  function randomUUIDv7(
    encoding: "buffer",
    timestamp?: number = Date.now(),
  ): Buffer;

  // If you only pass a timestamp, you get a hex string
  function randomUUIDv7(timestamp?: number = Date.now()): string;
}
```

LANGUAGE: typescript
CODE:
```
const buffer = Bun.randomUUIDv7("buffer");
```

LANGUAGE: typescript
CODE:
```
const base64 = Bun.randomUUIDv7("base64");
const base64url = Bun.randomUUIDv7("base64url");
```

----------------------------------------

TITLE: Using Strict Mode in Bun's SQLite Driver
DESCRIPTION: This snippet illustrates the usage of strict mode in Bun's SQLite driver. It shows how strict mode affects parameter binding and error handling in queries.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { Database } from "bun:sqlite";

const strict = new Database(
  ":memory:",
  { strict: true }
);

// throws error because of the typo:
const query = strict
  .query("SELECT $message;")
  .all({ message: "Hello world" });

const notStrict = new Database(
  ":memory:"
);
// does not throw error:
notStrict
  .query("SELECT $message;")
  .all({ message: "Hello world" });
```

----------------------------------------

TITLE: Numeric Color Format Examples in TypeScript
DESCRIPTION: Examples of converting colors to numeric format using Bun.color() with 'number' output format
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/color.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
Bun.color("red", "number"); // 16711680
Bun.color(0xff0000, "number"); // 16711680
Bun.color({ r: 255, g: 0, b: 0 }, "number"); // 16711680
Bun.color([255, 0, 0], "number"); // 16711680
Bun.color("rgb(255, 0, 0)", "number"); // 16711680
Bun.color("rgba(255, 0, 0, 1)", "number"); // 16711680
Bun.color("hsl(0, 100%, 50%)", "number"); // 16711680
Bun.color("hsla(0, 100%, 50%, 1)", "number"); // 16711680
```

----------------------------------------

TITLE: Disabling Lifecycle Scripts in Bun Installation
DESCRIPTION: This command demonstrates how to use the --ignore-scripts flag with bun install to disable all lifecycle scripts during package installation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/lifecycle.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ bun install --ignore-scripts
```

----------------------------------------

TITLE: Setting Cache Directories in TOML
DESCRIPTION: This snippet configures cache directories for the project, including paths with special characters.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/bun/resolve/toml/toml-fixture.toml.txt#2025-04-22_snippet_4

LANGUAGE: toml
CODE:
```
[install.cache]
dir = "C:\\Windows\\System32"
dir2 = "C:\\Windows\\System32\\🏳️‍🌈"
```

----------------------------------------

TITLE: Listing Top-Level Dependencies with Bun
DESCRIPTION: Lists the directly installed dependencies specified in the project's `package.json` along with their resolved versions. It does not include transitive dependencies (dependencies of dependencies).
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/pm.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
$ bun pm ls
/path/to/project node_modules (135)
├── eslint@8.38.0
├── react@18.2.0
├── react-dom@18.2.0
├── typescript@5.0.4
└── zod@3.21.4
```

----------------------------------------

TITLE: Enabling Coverage Reporting with Bun Test
DESCRIPTION: Demonstrates how to use Bun's coverage flag to collect test coverage information, replacing Jest's collectCoverage configuration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/migrate-from-jest.md#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
$ bun test --coverage
```

----------------------------------------

TITLE: Starting SvelteKit Development Server with Bun
DESCRIPTION: Command to start the SvelteKit development server using Bun runtime, showing the server initialization and local development URL.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/sveltekit.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
$ cd my-app
$ bun --bun run dev
  $ vite dev
  Forced re-optimization of dependencies
  
    VITE v5.4.10  ready in 424 ms
  
    ➜  Local:   http://localhost:5173/
    ➜  Network: use --host to expose
    ➜  press h + enter to show help
```

----------------------------------------

TITLE: Git Commit Hash Macro Implementation
DESCRIPTION: Macro function that embeds the current Git commit hash during bundle-time.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/macros.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
export function getGitCommitHash() {
  const {stdout} = Bun.spawnSync({
    cmd: ["git", "rev-parse", "HEAD"],
    stdout: "pipe",
  });

  return stdout.toString();
}
```

----------------------------------------

TITLE: Configuring footer in Bun Build (CLI)
DESCRIPTION: Command-line interface for adding text at the end of bundled files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_57

LANGUAGE: bash
CODE:
```
$ bun build ./index.tsx --outdir ./out --footer="// built with love in SF"
```

----------------------------------------

TITLE: Configuring Bun.build with SveltePlugin
DESCRIPTION: TypeScript code to configure Bun.build for bundling Svelte components, including plugin options and build settings.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-plugin-svelte/README.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
// build.ts
// to use: bun run build.ts
import { SveltePlugin } from "bun-plugin-svelte"; // NOTE: not published to npm yet

Bun.build({
  entrypoints: ["src/index.ts"],
  outdir: "dist",
  target: "browser",
  sourcemap: true, // sourcemaps not yet supported
  plugins: [
    SveltePlugin({
      development: true, // turn off for prod builds. Defaults to false
    }),
  ],
});
```

----------------------------------------

TITLE: Linking to bun test Documentation in Markdown
DESCRIPTION: This snippet demonstrates how to create a Markdown link to the 'bun test' command documentation in the official Bun documentation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/test.md#2025-04-22_snippet_0

LANGUAGE: Markdown
CODE:
```
[`bun test`](https://bun.sh/docs/cli/test)
```

----------------------------------------

TITLE: Running a JSX/TSX React Component with Bun from the Command Line in Bash
DESCRIPTION: This Bash command demonstrates how to execute a React TSX file using Bun from the command line. Bun's runtime recognizes and transpiles JSX/TSX files natively, and provides enhanced console output for JSX elements. No external dependencies except Bun are required. The command takes a file with React code as input and prints the JSX element tree rendering to stdout.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/ecosystem/react.md#2025-04-22_snippet_1

LANGUAGE: Bash
CODE:
```
$ bun run react.tsx
<Component message="Hello world!" />
```

----------------------------------------

TITLE: Windows CE Error Handling Functions in C
DESCRIPTION: Implements custom error handling functions for Windows CE, including strwinerror and pwinerror.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/zlib.test.txt#2025-04-22_snippet_3

LANGUAGE: C
CODE:
```
#if defined(UNDER_CE)
#  include <windows.h>
#  define perror(s) pwinerror(s)

static char *strwinerror (error)
     DWORD error;
{
    static char buf[1024];
    // ... (function implementation)
}

static void pwinerror (s)
    const char *s;
{
    // ... (function implementation)
}

#endif /* UNDER_CE */
```

----------------------------------------

TITLE: Text Operations in HTMLRewriter
DESCRIPTION: Examples of text manipulation operations including content modification and HTML insertion.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/html-rewriter.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
rewriter.on("p", {
  text(text) {
    // Content
    console.log(text.text); // Text content
    console.log(text.lastInTextNode); // Whether this is the last chunk
    console.log(text.removed); // Whether text was removed

    // Manipulation
    text.before("Before text").after("After text").replace("New text").remove();

    // HTML content insertion
    text
      .before("<span>before</span>", { html: true })
      .after("<span>after</span>", { html: true })
      .replace("<span>replace</span>", { html: true });
  },
});
```

----------------------------------------

TITLE: Benchmarking Express Server with Oha
DESCRIPTION: Command to benchmark the Express.js server using Oha, sending 500,000 requests with the Accept-Encoding header set to identity to prevent response compression.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/express/README.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
oha http://localhost:3000 -n 500000 -H "Accept-Encoding: identity"
```

----------------------------------------

TITLE: Detailed Benchmark Suite for String Width - Bun and npm - JavaScript
DESCRIPTION: This extended benchmark table provides performance measurements for Bun.stringWidth and npm string-width on diverse string inputs (ASCII, emoji, ANSI, and combinations) at various lengths. It underscores performance differences, highlighting Bun's efficiencies in various scenarios. The code is intended as output from running a benchmarking script and is not meant for direct execution as code.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_11

LANGUAGE: JavaScript
CODE:
```
❯ bun string-width.mjs
cpu: 13th Gen Intel(R) Core(TM) i9-13900
runtime: bun 1.0.29 (x64-linux)

benchmark                                          time (avg)             (min … max)       p75       p99      p995
------------------------------------------------------------------------------------- -----------------------------
Bun.stringWidth      5 chars ascii              16.45 ns/iter   (16.27 ns … 19.71 ns)  16.48 ns  16.93 ns  17.21 ns
Bun.stringWidth     50 chars ascii              19.42 ns/iter   (18.61 ns … 27.85 ns)  19.35 ns   21.7 ns  22.31 ns
Bun.stringWidth    500 chars ascii              37.09 ns/iter   (36.77 ns … 41.11 ns)  37.07 ns  38.84 ns  38.99 ns
Bun.stringWidth  5,000 chars ascii              216.9 ns/iter  (215.8 ns … 228.54 ns) 216.23 ns 228.52 ns 228.53 ns
Bun.stringWidth 25,000 chars ascii               1.01 µs/iter     (1.01 µs … 1.01 µs)   1.01 µs   1.01 µs   1.01 µs
Bun.stringWidth      7 chars ascii+emoji         54.2 ns/iter   (53.36 ns … 58.19 ns)  54.23 ns  57.55 ns  57.94 ns
Bun.stringWidth     70 chars ascii+emoji       354.26 ns/iter (350.51 ns … 363.96 ns) 355.93 ns 363.11 ns 363.96 ns
Bun.stringWidth    700 chars ascii+emoji          3.3 µs/iter      (3.27 µs … 3.4 µs)    3.3 µs    3.4 µs    3.4 µs
Bun.stringWidth  7,000 chars ascii+emoji        32.69 µs/iter   (32.22 µs … 45.27 µs)   32.7 µs  34.57 µs  34.68 µs
Bun.stringWidth 35,000 chars ascii+emoji       163.35 µs/iter (161.17 µs … 170.79 µs) 163.82 µs 169.66 µs 169.93 µs
Bun.stringWidth      8 chars ansi+emoji         66.15 ns/iter   (65.17 ns … 69.97 ns)  66.12 ns   69.8 ns  69.87 ns
Bun.stringWidth     80 chars ansi+emoji        492.95 ns/iter  (488.05 ns … 499.5 ns)  494.8 ns 498.58 ns  499.5 ns
Bun.stringWidth    800 chars ansi+emoji          4.73 µs/iter     (4.71 µs … 4.88 µs)   4.72 µs   4.88 µs   4.88 µs
Bun.stringWidth  8,000 chars ansi+emoji         47.02 µs/iter   (46.37 µs … 67.44 µs)  46.96 µs  49.57 µs  49.63 µs
Bun.stringWidth 40,000 chars ansi+emoji        234.45 µs/iter (231.78 µs … 240.98 µs) 234.92 µs 236.34 µs 236.62 µs
Bun.stringWidth     19 chars ansi+emoji+ascii  135.46 ns/iter (133.67 ns … 143.26 ns) 135.32 ns 142.55 ns 142.77 ns
Bun.stringWidth    190 chars ansi+emoji+ascii    1.17 µs/iter     (1.16 µs … 1.17 µs)   1.17 µs   1.17 µs   1.17 µs
Bun.stringWidth  1,900 chars ansi+emoji+ascii   11.45 µs/iter   (11.26 µs … 20.41 µs)  11.45 µs  12.08 µs  12.11 µs
Bun.stringWidth 19,000 chars ansi+emoji+ascii  114.06 µs/iter (112.86 µs … 120.06 µs) 114.25 µs 115.86 µs 116.15 µs
Bun.stringWidth 95,000 chars ansi+emoji+ascii  572.69 µs/iter (565.52 µs … 607.22 µs) 572.45 µs 604.86 µs 605.21 µs
```

LANGUAGE: JavaScript
CODE:
```
❯ node string-width.mjs
cpu: 13th Gen Intel(R) Core(TM) i9-13900
runtime: node v21.4.0 (x64-linux)

benchmark                                           time (avg)             (min … max)       p75       p99      p995
-------------------------------------------------------------------------------------- -----------------------------
npm/string-width      5 chars ascii               3.19 µs/iter     (3.13 µs … 3.48 µs)   3.25 µs   3.48 µs   3.48 µs
npm/string-width     50 chars ascii              20.09 µs/iter  (18.93 µs … 435.06 µs)  19.49 µs  21.89 µs  22.59 µs
npm/string-width    500 chars ascii             249.71 µs/iter (239.97 µs … 293.18 µs) 250.93 µs  276.7 µs 281.45 µs
npm/string-width  5,000 chars ascii               6.69 ms/iter     (6.58 ms … 6.76 ms)   6.72 ms   6.76 ms   6.76 ms
npm/string-width 25,000 chars ascii             139.57 ms/iter (137.17 ms … 143.28 ms) 140.49 ms 143.28 ms 143.28 ms
npm/string-width      7 chars ascii+emoji          3.7 µs/iter     (3.62 µs … 3.94 µs)   3.73 µs   3.94 µs   3.94 µs
npm/string-width     70 chars ascii+emoji        23.93 µs/iter   (22.44 µs … 331.2 µs)  23.15 µs  25.98 µs   30.2 µs
npm/string-width    700 chars ascii+emoji       251.65 µs/iter (237.78 µs … 444.69 µs) 252.92 µs 325.89 µs 354.08 µs
npm/string-width  7,000 chars ascii+emoji         4.95 ms/iter     (4.82 ms … 5.19 ms)      5 ms   5.04 ms   5.19 ms
npm/string-width 35,000 chars ascii+emoji        96.93 ms/iter  (94.39 ms … 102.58 ms)  97.68 ms 102.58 ms 102.58 ms
npm/string-width      8 chars ansi+emoji          3.92 µs/iter     (3.45 µs … 4.57 µs)   4.09 µs   4.57 µs   4.57 µs
npm/string-width     80 chars ansi+emoji         24.46 µs/iter     (22.87 µs … 4.2 ms)  23.54 µs  25.89 µs  27.41 µs
npm/string-width    800 chars ansi+emoji        259.62 µs/iter (246.76 µs … 480.12 µs) 258.65 µs 349.84 µs 372.55 µs
npm/string-width  8,000 chars ansi+emoji          5.46 ms/iter     (5.41 ms … 5.57 ms)   5.48 ms   5.55 ms   5.57 ms
npm/string-width 40,000 chars ansi+emoji        108.91 ms/iter  (107.55 ms … 109.5 ms) 109.25 ms  109.5 ms  109.5 ms
npm/string-width     19 chars ansi+emoji+ascii    6.53 µs/iter     (6.35 µs … 6.75 µs)   6.54 µs   6.75 µs   6.75 µs
npm/string-width    190 chars ansi+emoji+ascii   55.52 µs/iter  (52.59 µs … 352.73 µs)  54.19 µs  80.77 µs 167.21 µs
npm/string-width  1,900 chars ansi+emoji+ascii  701.71 µs/iter (653.94 µs … 893.78 µs)  715.3 µs 855.37 µs  872.9 µs
npm/string-width 19,000 chars ansi+emoji+ascii   27.19 ms/iter   (26.89 ms … 27.41 ms)  27.28 ms  27.41 ms  27.41 ms
npm/string-width 95,000 chars ansi+emoji+ascii     3.68 s/iter        (3.66 s … 3.7 s)    3.69 s     3.7 s     3.7 s
```

----------------------------------------

TITLE: React Component Definition
DESCRIPTION: A simple React component that renders a message passed as a prop.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_3

LANGUAGE: tsx
CODE:
```
export function Component(props: {message: string}) {
  return <p>{props.message}</p>
}
```

----------------------------------------

TITLE: Installing WebKit Build Dependencies
DESCRIPTION: Installs additional packages required for building WebKit locally using Scoop package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/building-windows.md#2025-04-22_snippet_4

LANGUAGE: powershell
CODE:
```
scoop install make cygwin python
```

----------------------------------------

TITLE: Configuring footer in Bun Build (JavaScript)
DESCRIPTION: Adds text at the end of bundled files, useful for license footers or other notes.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_56

LANGUAGE: typescript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './out',
  footer: '// built with love in SF'
})
```

----------------------------------------

TITLE: Accessing CookieMap Size Property
DESCRIPTION: How to get the number of cookies in a CookieMap using the size property.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
console.log(cookies.size); // Number of cookies
```

----------------------------------------

TITLE: Asset Import Example Output
DESCRIPTION: The resulting output code after bundling an asset import, showing how the asset path is resolved.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_13

LANGUAGE: typescript
CODE:
```
// bundled output
var logo = "./logo-ab237dfe.svg";
console.log(logo);
```

----------------------------------------

TITLE: JSX Output with 'preserve' Option
DESCRIPTION: Transpiled output when using the 'preserve' option, showing that JSX would be left untransformed. This option is not currently supported by Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_9

LANGUAGE: tsx
CODE:
```
// JSX is not transpiled
// "preserve" is not supported by Bun currently
<Box width={5}>Hello</Box>
```

----------------------------------------

TITLE: Disabling Error Throwing in Bun Shell
DESCRIPTION: Shows how to disable automatic error throwing for non-zero exit codes using .nothrow() and manually check the exit code.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

const { stdout, stderr, exitCode } = await $`something-that-may-fail`
  .nothrow()
  .quiet();

if (exitCode !== 0) {
  console.log(`Non-zero exit code ${exitCode}`);
}

console.log(stdout);
console.log(stderr);
```

----------------------------------------

TITLE: Executing the Database Seeding Script and Output (Shell)
DESCRIPTION: Executes the `seed.ts` script using `bun run` to insert the sample movie data into the database. The output `Seeding complete.` confirms the script ran successfully. Assumes `seed.ts`, `db.ts`, and `schema.ts` exist, and the database schema has been migrated.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/drizzle.md#2025-04-22_snippet_10

LANGUAGE: sh
CODE:
```
$ bun run seed.ts
Seeding complete.
```

----------------------------------------

TITLE: Listing Running Docker Containers in Shell
DESCRIPTION: This command uses `docker ps` to list all currently running Docker containers on the host machine. The output includes information such as the container ID, the image it's based on, the command being run, creation time, status, exposed ports, and assigned names.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/docker.md#2025-04-22_snippet_5

LANGUAGE: sh
CODE:
```
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
7f03e212a15e        bun-hello-world     "bun run index.ts"       2 minutes ago       Up 2 minutes        0.0.0.0:3000->3000/tcp   flamboyant_cerf
```

----------------------------------------

TITLE: Converting file:// URL to Absolute Path - Bun - TypeScript
DESCRIPTION: This snippet shows how to use Bun.fileURLToPath to convert a file:// URL into an absolute filesystem path. It demonstrates input as a URL instance and output as a string path. Bun must be available in the environment. The function is ideal for interoperability between URL-based and file-based APIs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_13

LANGUAGE: TypeScript
CODE:
```
const path = Bun.fileURLToPath(new URL("file:///foo/bar.txt"));
console.log(path); // "/foo/bar.txt"
```

----------------------------------------

TITLE: Updating Snapshots via CLI Command
DESCRIPTION: Command line example showing how to regenerate snapshots using the --update-snapshots flag and its output
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/update-snapshots.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
$ bun test --update-snapshots
bun test v$BUN_LATEST_VERSION (9c68abdb)

test/snap.test.ts:
✓ snapshot [0.86ms]

 1 pass
 0 fail
 snapshots: +1 added # the snapshot was regenerated
 1 expect() calls
Ran 1 tests across 1 files. [102.00ms]
```

----------------------------------------

TITLE: Setting Default Registry in bunfig.toml for Bun
DESCRIPTION: Configures the default NPM registry URL in bunfig.toml using the install.registry option. This is the Bun-specific equivalent to the registry option in .npmrc.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/npmrc.md#2025-04-22_snippet_1

LANGUAGE: toml
CODE:
```
install.registry = "http://localhost:4873/"
```

----------------------------------------

TITLE: Creating global test setup and teardown in Bun
DESCRIPTION: Implementation of global beforeAll and afterAll hooks in a separate setup file. These hooks will run once at the beginning and end of the entire test suite, providing a way to set up and tear down resources needed for all tests.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/lifecycle.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { beforeAll, afterAll } from "bun:test";

beforeAll(() => {
  // global setup
});

afterAll(() => {
  // global teardown
});
```

----------------------------------------

TITLE: Bundling TypeScript with Bun CLI
DESCRIPTION: This shell command utilizes the Bun command-line interface (`bun build`) to compile and bundle the specified TypeScript file (`./client-side.ts`). During this build process, Bun evaluates any imported macros, such as `Bun.color`, replacing them with their computed values in the output file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/color.md#2025-04-22_snippet_10

LANGUAGE: shell
CODE:
```
```sh
bun build ./client-side.ts
```
```

----------------------------------------

TITLE: Package.json with Legacy Module Fields
DESCRIPTION: Shows fallback package.json configuration using module and main fields.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_15

LANGUAGE: json
CODE:
```
{
  "name": "foo",
  "module": "./index.js",
  "main": "./index.js"
}
```

----------------------------------------

TITLE: Referencing Local Assets in CSS
DESCRIPTION: A CSS example showing how to reference local image assets using the url() function. Bun will automatically copy and hash these assets in the output directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/html.md#2025-04-22_snippet_5

LANGUAGE: css
CODE:
```
body {
  background-image: url("./logo.png");
}
```

----------------------------------------

TITLE: Changing Working Directory in Bun Shell
DESCRIPTION: Shows how to change the working directory for individual commands or globally using .cwd() and $.cwd.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

$.cwd("/tmp");

// the globally-set working directory
await $`pwd`; // /tmp

// the locally-set working directory
await $`pwd`.cwd("/"); // /
```

----------------------------------------

TITLE: Checking Out Specific WebKit Commit in Bash
DESCRIPTION: Navigates into the `src/bun.js/WebKit` directory within the Bun project's fork of WebKit and checks out a specific commit hash represented by the `$COMMIT` variable. This is a preliminary step before merging upstream changes.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/contributing/upgrading-webkit.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ cd src/bun.js/WebKit # In the WebKit directory! not bun
$ git checkout $COMMIT
```

----------------------------------------

TITLE: Installing Required Dependencies for Svelte Testing with Bun
DESCRIPTION: Command to install testing libraries for Svelte components, including testing-library/svelte, svelte v4, and happy-dom global registrator.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/svelte-test.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ bun add @testing-library/svelte svelte@4 @happy-dom/global-registrator
```

----------------------------------------

TITLE: Export Shared Constant - shared.ts - TypeScript
DESCRIPTION: Defines and exports a shared constant, meant to demonstrate code splitting when imported by multiple entrypoint files. No further dependencies; output is the exported 'shared' constant.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_29

LANGUAGE: TypeScript
CODE:
```
export const shared = 'shared';
```

----------------------------------------

TITLE: Implementing React Counter Component with useState Hook
DESCRIPTION: A React functional component that implements a counter with increment and decrement buttons. Uses useState hook for state management and includes styling classes for visual presentation. The counter displays the current count value and provides + and - buttons for interaction.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/integration/next-pages/src/Counter1.txt#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { useState } from "react";

export function Counter() {
  console.log('counter a');
  
  const [count, setCount] = useState(0);

  function increment() {
    setCount(count + 1);
  }

  function decrement() {
    setCount(count - 1);
  }

  return (
    <div id="counter-fixture" className="rounded-bl-full">
      <p>Count A: {count}</p>
      <button className="inc" onClick={increment}>
        +
      </button>
      <button className="dec" onClick={decrement}>
        -
      </button>
    </div>
  );
}
```

----------------------------------------

TITLE: Test.Each Implementation
DESCRIPTION: Shows how to implement parameterized tests using test.each
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/writing.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
const cases = [
  [1, 2, 3],
  [3, 4, 7],
];

test.each(cases)("%p + %p should be %p", (a, b, expected) => {
  expect(a + b).toBe(expected);
});
```

----------------------------------------

TITLE: Using Command-Line Filters with Bun Test
DESCRIPTION: Pass positional arguments to filter which test files to run based on substring matching of file paths.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/discovery.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ bun test <filter> <filter> ...
```

----------------------------------------

TITLE: Converting Buffer to String with Encoding and Byte Range using Node.js Buffer in TypeScript
DESCRIPTION: This snippet shows how to convert a Buffer to a string using the .toString() method, specifying the encoding ('utf8') and a byte range within the buffer. It is written in TypeScript and depends on the Buffer API, available in Node.js/Bun. The buffer is created from the string \"hello world!\", and only the first five bytes are decoded as a UTF-8 string. The key parameters are encoding (default: 'utf8'), start, and end indices. The output is the substring extracted from the buffer, which may be limited by the specified range.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/buffer-to-string.md#2025-04-22_snippet_1

LANGUAGE: TypeScript
CODE:
```
const buf = Buffer.from("hello world!");
const str = buf.toString("utf8", 0, 5);
// => "hello"
```

----------------------------------------

TITLE: Running a File with Reduced Memory Usage using --smol
DESCRIPTION: Demonstrates the use of the `--smol` flag (`bun --smol run index.tsx`) to execute a script while optimizing for lower memory consumption. This makes the garbage collector run more frequently, which can be beneficial in memory-constrained environments but may slightly reduce performance.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/run.md#2025-04-22_snippet_16

LANGUAGE: bash
CODE:
```
$ bun --smol run index.tsx
```

----------------------------------------

TITLE: Creating a Simple Express Server with Bun
DESCRIPTION: TypeScript code for a basic Express HTTP server that listens on the specified port (defaulting to 3001 if no PORT environment variable is set) and returns 'Hello World!' for the root route.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/render.md#2025-04-22_snippet_2

LANGUAGE: ts
CODE:
```
import express from "express";

const app = express();
const port = process.env.PORT || 3001;

app.get("/", (req, res) => {
  res.send("Hello World!");
});

app.listen(port, () => {
  console.log(`Listening on port ${port}...`);
});
```

----------------------------------------

TITLE: Defining MDX Rust Binary Name for Linux MUSL
DESCRIPTION: Package identifier for the MUSL binary build of bun-mdx-rs targeting Linux x64 architecture.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-build-mdx-rs/npm/linux-x64-musl/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
bun-mdx-rs-linux-x64-musl
```

----------------------------------------

TITLE: Displaying SSL Session Parameters Certificate
DESCRIPTION: Base64 encoded SSL session parameters containing certificate data including public key, issuer details, and validity period. The certificate appears to be for Internet Widgits Pty Ltd with a validity period from 2010 to 2013.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/tls-session-ticket.txt#2025-04-22_snippet_0

LANGUAGE: SSL
CODE:
```
-----BEGIN SSL SESSION PARAMETERS-----\nMIID2wIBAQICAwEEAgA1BCAMjLe+70uBSPGvybkTnPVUMwdbdtVbkMIXf8L5M8Kl\nVAQwog+Afs00cnYUcgD1BQewJyxX1e561oRuDTpy7BHABC1hC7hxTaul+pwv+cBx\n8D72oQYCBFFQF3OiBAICASyjggNhMIIDXTCCAkWgAwIBAgIJAMUSOvlaeyQHMA0G\nCSqGSIb3DQEBBQUAMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRl\nMSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwHhcNMTAxMTE2MDkz\nMjQ5WhcNMTMxMTE1MDkzMjQ5WjBFMQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29t\nZS1TdGF0ZTEhMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjAN\nBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAz+LXZOjcQCJq3+ZKUFabj71oo/ex\n/XsBcFqtBThjjTw9CVEVwfPQQp4XwtPiB204vnYXwQ1/R2NdTQqCZu47l79LssL/\nu2a5Y9+0NEU3nQA5qdt+1FAE0c5oexPimXOrR3GWfKz7PmZ2O0117IeCUUXPG5U8\numhDe/4mDF4ZNJiKc404WthquTqgS7rLQZHhZ6D0EnGnOkzlmxJMYPNHSOY1/6iv\ndNUUcC87awNEA3lgfhy25IyBK3QJc+aYKNTbt70Lery3bu2wWLFGtmNiGlQTS4Js\nxImRsECTI727ObS7/FWAQsqW+COL0Sa5BuMFrFIpjPrEe0ih7vRRbdmXRwIDAQAB\no1AwTjAdBgNVHQ4EFgQUDnV4d6mDtOnluLoCjkUHTX/n4agwHwYDVR0jBBgwFoAU\nDnV4d6mDtOnluLoCjkUHTX/n4agwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQUF\nAAOCAQEAFwV4MQfTo+qMv9JMiynoIEiqfOz4RgtmBqRnXUffcjS2dhc7/z+FPZnM\n79Kej8eLHoVfxCyWRHFlzm93vEdvwxOCrD13EDOi08OOZfxWyIlCa6Bg8cMAKqQz\nd2OvQOWqlRWBTThBJIhWflU33izXQn5GdmYqhfpc+9ZHHGhvXNydtRQkdxVK2dZN\nzLBvBlLlRmtoClU7xm3A+/5dddePAQHEPtyFlUw49VYtZ3ru6KqPms7MKvcRhYLs\ny9rwSfuuniMlx4d0bDR7TOkw0QQSA0N8MGQRQpzl4mw4jLzyM5d5QtuGBh2P6hPG\na0YQxtI3RPT/p6ENzzBiAKXiSfzox6QCBAClAwIBEg==\n-----END SSL SESSION PARAMETERS-----
```

----------------------------------------

TITLE: Escaped Character Glob Pattern
DESCRIPTION: Example of escaping special characters in glob patterns.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/glob.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
const glob = new Glob("\\!index.ts");
glob.match("!index.ts"); // => true
glob.match("index.ts"); // => false
```

----------------------------------------

TITLE: Next.js CSS Hot Reload Performance Metrics
DESCRIPTION: Performance metrics showing frame time percentiles and rendered frame statistics for Next.js v11.1.2 CSS hot reloading with 16ms save intervals.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/hot-module-reloading/css-stress-test/README.md#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
 Next.js v11.1.2
 Saving every 16ms

 Frame time:
 50th percentile: 312ms
 75th percentile: 337.6ms
 90th percentile: 387.7ms
 95th percentile: 446.9ms
 99th percentile: 591.7ms
 Rendered frames: 64 / 1024 (6%)
```

----------------------------------------

TITLE: Instance Method: everybody.to()
DESCRIPTION: Instance method that takes a limit parameter
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/doc_with_backticks_in_headings.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
everybody.to(limit)
```

----------------------------------------

TITLE: Transpiled JSX Output in TypeScript
DESCRIPTION: Shows how Bun internally transpiles JSX syntax into vanilla JavaScript by importing from React's JSX runtime and creating elements using the jsx function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/react.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// jsxDEV
import { jsx } from "react/jsx-dev-runtime";

const element = jsx("h1", { children: "Hello, world!" });
```

----------------------------------------

TITLE: GitHub Star Button SVG Icon
DESCRIPTION: SVG icon markup for the repository star button showing a star symbol
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_10

LANGUAGE: SVG
CODE:
```
<svg vertical_align="text_bottom" height="16" class="octicon octicon-star v-align-text-bottom" viewBox="0 0 16 16" version="1.1" width="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 .25a.75.75 0 01.673.418l1.882 3.815 4.21.612a.75.75 0 01.416 1.279l-3.046 2.97.719 4.192a.75.75 0 01-1.088.791L8 12.347l-3.766 1.98a.75.75 0 01-1.088-.79l.72-4.194L.818 6.374a.75.75 0 01.416-1.28l4.21-.611L7.327.668A.75.75 0 018 .25zm0 2.445L6.615 5.5a.75.75 0 01-.564.41l-3.097.45 2.24 2.184a.75.75 0 01.216.664l-.528 3.084 2.769-1.456a.75.75 0 01.698 0l2.77 1.456-.53-3.084a.75.75 0 01.216-.664l2.24-2.183-3.096-.45a.75.75 0 01-.564-.41L8 2.694v.001z"></path></svg>
```

----------------------------------------

TITLE: Checking Cookie Existence with CookieMap.has()
DESCRIPTION: How to check if a cookie with a given name exists in a CookieMap using the has() method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
// Check if cookie exists
if (cookies.has("session")) {
  // Cookie exists
}
```

----------------------------------------

TITLE: Printing Local Project Bin Path with Bun
DESCRIPTION: Displays the absolute path to the `node_modules/.bin` directory within the current Bun project. This directory contains executable scripts installed by dependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/pm.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ bun pm bin
/path/to/current/project/node_modules/.bin
```

----------------------------------------

TITLE: Stopping a Running Docker Container in Shell
DESCRIPTION: This command uses `docker stop` followed by the container ID to gracefully stop a running Docker container. Replace `7f03e...` with the actual ID of the container you want to stop, which can be obtained from the `docker run` command output or by using `docker ps`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/docker.md#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
$ docker stop 7f03e212a15ede8644379bce11a13589f563d3909a9640446c5bbefce993678d
```

----------------------------------------

TITLE: Creating a React Project from Component in Bun
DESCRIPTION: Demonstrates how to use 'bun create' to generate a new React project from an existing component file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bun-create.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ bun create ./MyComponent.jsx # .tsx also supported
```

----------------------------------------

TITLE: Generating and Saving Heap Snapshot in Bun
DESCRIPTION: This snippet illustrates how to generate a heap snapshot using the 'bun:jsc' module and save it to a file. The snapshot can be used for detailed memory analysis in tools like Safari or WebKit GTK developer tools.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/benchmarking.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { generateHeapSnapshot } from "bun";

const snapshot = generateHeapSnapshot();
await Bun.write("heap.json", JSON.stringify(snapshot, null, 2));
```

----------------------------------------

TITLE: Adding a Start Script to package.json
DESCRIPTION: Modifies package.json to include a 'start' script that runs the index.ts file, allowing the server to be started with 'bun run start'.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/quickstart.md#2025-04-22_snippet_5

LANGUAGE: json-diff
CODE:
```
  {
    "name": "quickstart",
    "module": "index.ts",
    "type": "module",
+   "scripts": {
+     "start": "bun run index.ts"
+   },
    "devDependencies": {
      "@types/bun": "latest"
    }
  }
```

----------------------------------------

TITLE: Entrypoints Configuration with JavaScript API
DESCRIPTION: Example of configuring entrypoints in Bun's bundler using the JavaScript API. The result includes build success status, outputs, and logs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_14

LANGUAGE: typescript
CODE:
```
const result = await Bun.build({
  entrypoints: ["./index.ts"],
});
// => { success: boolean, outputs: BuildArtifact[], logs: BuildMessage[] }
```

----------------------------------------

TITLE: Configuring Bun S3Client for S3 Virtual Hosted-Style Endpoints - TypeScript
DESCRIPTION: Demonstrates instantiating Bun's S3Client for S3 Virtual Hosted-Style endpoints by setting the 'virtualHostedStyle' option to true. Shows variants for AWS S3, custom endpoints, and Cloudflare R2 with bucket in the subdomain. For AWS, omitting 'endpoint' lets Bun infer it from region and bucket; an explicit endpoint overrides this. Requires proper credentials and matching endpoint/bucket configuration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_17

LANGUAGE: typescript
CODE:
```
import { S3Client } from \"bun\";

// AWS S3 endpoint inferred from region and bucket
const s3 = new S3Client({
  accessKeyId: \"access-key\",
  secretAccessKey: \"secret-key\",
  bucket: \"my-bucket\",
  virtualHostedStyle: true,
  // endpoint: \"https://my-bucket.s3.us-east-1.amazonaws.com\",
  // region: \"us-east-1\",
});

// AWS S3
const s3WithEndpoint = new S3Client({
  accessKeyId: \"access-key\",
  secretAccessKey: \"secret-key\",
  endpoint: \"https://<bucket-name>.s3.<region>.amazonaws.com\",
  virtualHostedStyle: true,
});

// Cloudflare R2
const r2WithEndpoint = new S3Client({
  accessKeyId: \"access-key\",
  secretAccessKey: \"secret-key\",
  endpoint: \"https://<bucket-name>.<account-id>.r2.cloudflarestorage.com\",
  virtualHostedStyle: true,
});
```

----------------------------------------

TITLE: Setting Up Chrome DevTools Testing Environment
DESCRIPTION: Commands for setting up and configuring Chrome DevTools frontend for testing source maps.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/test426/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
gclient config https://chromium.googlesource.com/devtools/devtools-frontend --unmanaged
cd devtools-frontend
gclient sync
gn gen out/Default
```

----------------------------------------

TITLE: Running WebAssembly (WASM) Files with Bun
DESCRIPTION: Examples showing how to execute WebAssembly files using Bun's experimental WASI support. Bun can run .wasm files directly or use the 'run' command for files with other extensions.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/index.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ bun ./my-wasm-app.wasm
# if the filename doesn't end with ".wasm"
$ bun run ./my-wasm-app.whatever
```

----------------------------------------

TITLE: CommonJS Module Wrapper Implementation
DESCRIPTION: Example of how Bun internally wraps CommonJS modules to provide compatibility with the module system.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_19

LANGUAGE: js
CODE:
```
(function (module, exports, require) {
  // transpiled module
})(module, exports, require);
```

----------------------------------------

TITLE: Reading Command Output as Text in Bun Shell
DESCRIPTION: Demonstrates how to read the output of a shell command as a string using the .text() method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

const result = await $`echo "Hello World!"`.text();

console.log(result); // Hello World!\n
```

----------------------------------------

TITLE: Converting Absolute Path to File URL using Bun.pathToFileURL()
DESCRIPTION: Shows how to convert an absolute filesystem path to a file:// URL using Bun's built-in utility function. The function takes an absolute path string as input and returns a URL string with the file:// protocol.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/path-to-file-url.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
Bun.pathToFileURL("/path/to/file.txt");
// => "file:///path/to/file.txt"
```

----------------------------------------

TITLE: Decoding Base64-encoded Password Using Command Line for Azure Artifacts
DESCRIPTION: This bash command demonstrates how to decode a base64-encoded password using the base64 command-line tool. It's noted that this method may save the password in terminal history, which is not recommended for security reasons.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/azure-artifacts.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
echo "base64-encoded-password" | base64 --decode
```

----------------------------------------

TITLE: Installing Bun on Windows using PowerShell
DESCRIPTION: This snippet shows how to install Bun on Windows using PowerShell.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/installation.md#2025-04-22_snippet_4

LANGUAGE: powershell
CODE:
```
> powershell -c "irm bun.sh/install.ps1|iex"
```

----------------------------------------

TITLE: Plugin State Management in Rust
DESCRIPTION: Implementation of plugin state management using NAPI External type
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-native-plugin-rs/README.md#2025-04-22_snippet_4

LANGUAGE: rust
CODE:
```
struct PluginState {
  foo_count: std::sync::atomic::AtomicU32,
}

#[napi]
pub fn create_plugin_state() -> External<PluginState> {
  let external = External::new(PluginState {
    foo_count: 0,
  });

  external
}


#[napi]
pub fn get_foo_count(plugin_state: External<PluginState>) -> u32 {
  let plugin_state: &PluginState = &plugin_state;
  plugin_state.foo_count.load(std::sync::atomic::Ordering::Relaxed)
}
```

----------------------------------------

TITLE: Setting separate line and function coverage thresholds
DESCRIPTION: Configuration in bunfig.toml to set different thresholds for line-level (50%) and function-level (70%) code coverage.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/coverage-threshold.md#2025-04-22_snippet_3

LANGUAGE: toml
CODE:
```
[test]
# to set different thresholds for lines and functions
coverageThreshold = { lines = 0.5, functions = 0.7 }
```

----------------------------------------

TITLE: Setting Up DOM Testing Environment with Bun and Happy-DOM
DESCRIPTION: Configuration for setting up a browser-like environment for tests using happy-dom as an alternative to jsdom. Requires creating a happy-dom.ts file to inject browser APIs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/migrate-from-jest.md#2025-04-22_snippet_2

LANGUAGE: toml
CODE:
```
[test]
preload = ["./happy-dom.ts"]
```

----------------------------------------

TITLE: Importing Tarball Package
DESCRIPTION: Example of importing the installed package in TypeScript code, showing that it can be used like any normal package dependency.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/add-tarball.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { z } from "zod";
```

----------------------------------------

TITLE: JSX Factory Pragma Example
DESCRIPTION: Example of using the JSX factory pragma to set the JSX factory function on a per-file basis rather than in configuration. The pragma is a special comment that overrides the compiler setting.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_20

LANGUAGE: ts
CODE:
```
// @jsx h
```

----------------------------------------

TITLE: Appending File Content with Encoding Specification in JavaScript
DESCRIPTION: Demonstrates how to specify the encoding (utf8) when appending data to a file using the callback-based fs.appendFile function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/append.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
import { appendFile } from "node:fs";

appendFile("message.txt", "data to append", "utf8", callback);
```

----------------------------------------

TITLE: Setting Registry-Specific Authentication in .npmrc for Bun
DESCRIPTION: Configures authentication options for a specific registry in .npmrc. Support includes authentication tokens, username/password combinations, and base64-encoded auth strings. Environment variables can be used with ${...} syntax.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/npmrc.md#2025-04-22_snippet_4

LANGUAGE: ini
CODE:
```
# set an auth token for the registry
# ${...} is a placeholder for environment variables
//http://localhost:4873/:_authToken=${NPM_TOKEN}


# or you could set a username and password
# note that the password is base64 encoded
//http://localhost:4873/:username=myusername

//http://localhost:4873/:_password=${NPM_PASSWORD}

# or use _auth, which is your username and password
# combined into a single string, which is then base 64 encoded
//http://localhost:4873/:_auth=${NPM_AUTH}
```

----------------------------------------

TITLE: Setting Program Name in Commander.js
DESCRIPTION: This example demonstrates how to explicitly set the program name that appears in help text. This can be done using the name() method or in the Command constructor.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_30

LANGUAGE: javascript
CODE:
```
program.name('pizza');
const pm = new Command('pm');
```

----------------------------------------

TITLE: Check Clang Version
DESCRIPTION: This command checks the version of Clang installed on the system. The output indicates the location of the clang-19 executable. This confirms that Clang 19 is installed and available.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_13

LANGUAGE: bash
CODE:
```
$ which clang-19
```

----------------------------------------

TITLE: Configuring Yarn Lockfile Support in Bun
DESCRIPTION: Configuration for bunfig.toml to automatically generate a Yarn lockfile alongside bun.lock when running bun install.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/lockfile.md#2025-04-22_snippet_3

LANGUAGE: toml
CODE:
```
[install.lockfile]
# whether to save a non-Bun lockfile alongside bun.lock
# only "yarn" is supported
print = "yarn"
```

----------------------------------------

TITLE: Accessing Mock Function Properties in Bun Test Framework (TypeScript)
DESCRIPTION: Illustrates how to access and use additional properties of mock functions, such as `mock.calls` and `mock.results`, which provide information about function calls and their results.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/mocks.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { mock } from "bun:test";
const random = mock((multiplier: number) => multiplier * Math.random());

random(2);
random(10);

random.mock.calls;
// [[ 2 ], [ 10 ]]

random.mock.results;
//  [
//    { type: "return", value: 0.6533907460954099 },
//    { type: "return", value: 0.6452713933037312 }
//  ]
```

----------------------------------------

TITLE: Writing HTTP Response to File
DESCRIPTION: Shows how to save an HTTP response body to a file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file-io.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
const response = await fetch("https://bun.sh");
await Bun.write("index.html", response);
```

----------------------------------------

TITLE: Formatting tabular data with Bun.inspect.table() in TypeScript
DESCRIPTION: Demonstrates how to use Bun.inspect.table() to format tabular data as a string. Similar to console.table() but returns a string instead of printing to the console.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_22

LANGUAGE: typescript
CODE:
```
console.log(
  Bun.inspect.table([
    { a: 1, b: 2, c: 3 },
    { a: 4, b: 5, c: 6 },
    { a: 7, b: 8, c: 9 },
  ]),
);
//
// ┌───┬───┬───┬───┐
// │   │ a │ b │ c │
// ├───┼───┼───┼───┤
// │ 0 │ 1 │ 2 │ 3 │
// │ 1 │ 4 │ 5 │ 6 │
// │ 2 │ 7 │ 8 │ 9 │
// └───┴───┴───┴───┘
```

----------------------------------------

TITLE: Encoding and Decoding Text as Bytes Using TextEncoder and TextDecoder (JavaScript/TypeScript)
DESCRIPTION: This snippet shows how the global TextEncoder and TextDecoder classes are used for UTF-8 string and binary data conversion. With TextEncoder, a string is encoded as a Uint8Array, and with TextDecoder, those bytes are decoded back to a string. This is standard in modern browsers and JavaScript runtimes. Inputs are plain text strings and Uint8Arrays; outputs are the encoded byte arrays and decoded strings, respectively.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_14

LANGUAGE: TypeScript
CODE:
```
const encoder = new TextEncoder();
const bytes = encoder.encode("hello world");
// => Uint8Array(11) [ 104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100 ]

const decoder = new TextDecoder();
const text = decoder.decode(bytes);
// => hello world
```

----------------------------------------

TITLE: CSS Module Composition from Separate Files
DESCRIPTION: Shows how to compose styles from a separate CSS module file by specifying the file path in the composes property. This enables modular style organization across multiple files.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_31

LANGUAGE: css
CODE:
```
/* background.module.css */
.background {
  background-color: blue;
}

/* styles.module.css */
.button {
  composes: background from "./background.module.css";
  color: red;
}
```

----------------------------------------

TITLE: Receiving UDP Datagrams
DESCRIPTION: Implementation of UDP server and client with data callback handler for receiving packets
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/udp.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const server = await Bun.udpSocket({
  socket: {
    data(socket, buf, port, addr) {
      console.log(`message from ${addr}:${port}:`)
      console.log(buf.toString());
    } 
  }
})

const client = await Bun.udpSocket({});
client.send("Hello!", server.port, "127.0.0.1");
```

----------------------------------------

TITLE: Configuring Global Binary Directory in Bun
DESCRIPTION: Sets the directory where binaries from globally installed packages are linked.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_26

LANGUAGE: toml
CODE:
```
# where globally-installed package bins are linked
globalBinDir = "~/.bun/bin"
```

----------------------------------------

TITLE: Importing JSON File in TypeScript using Standard Import
DESCRIPTION: This snippet demonstrates how to import a JSON file in TypeScript using the standard import syntax. It shows how to access various properties of the imported JSON data.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/import-json.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import data from "./package.json";

data.name; // => "bun"
data.version; // => "1.0.0"
data.author.name; // => "John Dough"
```

----------------------------------------

TITLE: Configuring Workspaces in Root package.json
DESCRIPTION: Demonstrates how to configure workspaces in the root package.json file of a monorepo project.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/workspaces.md#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{
  "name": "my-project",
  "version": "1.0.0",
  "workspaces": ["packages/*"],
  "devDependencies": {
    "example-package-in-monorepo": "workspace:*"
  }
}
```

----------------------------------------

TITLE: Installing EdgeDB CLI on Windows using PowerShell
DESCRIPTION: This PowerShell command uses Invoke-WebRequest (iwr) and Invoke-Expression (iex) to retrieve and execute the official EdgeDB installer script for Windows. Dependency: PowerShell 5.0+, internet connection. Input: None. Output: Installs the EdgeDB CLI for project and database management on Windows systems.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/edgedb.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
iwr https://ps1.edgedb.com -useb | iex
```

----------------------------------------

TITLE: Setting Test Timeout in Bun Test Runner
DESCRIPTION: Demonstrates how to set a custom timeout duration for test execution using the --timeout flag. The timeout value is specified in milliseconds and defaults to 5000ms (5 seconds). Tests that exceed the specified timeout will be marked as failed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/timeout.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun test --timeout 3000 # 3 seconds
```

----------------------------------------

TITLE: Basic Bun Package Management Commands
DESCRIPTION: Basic commands for installing, adding, and removing dependencies using bun package manager. Shows equivalents of common npm commands.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/from-npm-install-to-bun-install.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# It only takes one command to migrate
$ bun i

# To add dependencies:
$ bun i @types/bun

# To add devDependencies:
$ bun i -d @types/bun

# To remove a dependency:
$ bun rm @types/bun
```

----------------------------------------

TITLE: HMAC with Bun.CryptoHasher
DESCRIPTION: Shows how to use Bun.CryptoHasher for HMAC (Hash-based Message Authentication Code) computation. It supports a subset of cryptographic algorithms and has some usage restrictions.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/hashing.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
const hasher = new Bun.CryptoHasher("sha256", "secret-key");
hasher.update("hello world");
console.log(hasher.digest("hex"));
// => "095d5a21fe6d0646db223fdf3de6436bb8dfb2fab0b51677ecf6441fcf5f2a67"

const hasher = new Bun.CryptoHasher("sha256", "secret-key");
hasher.update("hello world");

const copy = hasher.copy();
copy.update("!");
console.log(copy.digest("hex"));
// => "3840176c3d8923f59ac402b7550404b28ab11cb0ef1fa199130a5c37864b5497"

console.log(hasher.digest("hex"));
// => "095d5a21fe6d0646db223fdf3de6436bb8dfb2fab0b51677ecf6441fcf5f2a67"
```

----------------------------------------

TITLE: Enabling Global WebSocket Compression in Bun using permessage-deflate
DESCRIPTION: Demonstrates how to enable per-message compression for all WebSocket messages using the permessage-deflate extension. This is configured through the perMessageDeflate parameter in the websocket configuration object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/websocket/compression.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
Bun.serve({
  // ...
  websocket: {
    // enable compression
    perMessageDeflate: true,
  },
});
```

----------------------------------------

TITLE: GitHub Site Details Dialog Template
DESCRIPTION: HTML template for a modal dialog component used throughout GitHub's interface. This reusable template includes a close button, loading spinner, and structural elements for displaying content in an overlay dialog box.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_20

LANGUAGE: HTML
CODE:
```
<template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default text-gray-dark hx_rsm" open>
    <summary role="button" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog>
        <svg class="octicon octicon-x" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z"></path></svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>
```

----------------------------------------

TITLE: Installing Bun using Docker
DESCRIPTION: This snippet demonstrates how to pull and run the Bun Docker image.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/installation.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
$ docker pull oven/bun
$ docker run --rm --init --ulimit memlock=-1:-1 oven/bun
```

----------------------------------------

TITLE: Demonstrating Comment Syntax in Bun-flavored TOML
DESCRIPTION: Shows how comments can be written using both '#' and ';' in Bun-flavored TOML, which is compatible with INI file syntax.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bun-flavored-toml.md#2025-04-22_snippet_0

LANGUAGE: ini
CODE:
```
# This is a comment
; This is also a comment
```

----------------------------------------

TITLE: Capturing Command Output as Buffers in Bun Shell
DESCRIPTION: Shows how to capture both stdout and stderr of a shell command as Buffer objects.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

const { stdout, stderr } = await $`echo "Hello!"`.quiet();

console.log(stdout); // Buffer(7) [ 72, 101, 108, 108, 111, 33, 10 ]
console.log(stderr); // Buffer(0) []
```

----------------------------------------

TITLE: Setting a Specific System Time in Bun Tests
DESCRIPTION: This example demonstrates how to set the system time to a specific date (January 1, 1999) in a Bun test and verify the new date components with expectations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/mock-clock.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { test, expect, setSystemTime } from "bun:test";

test("party like it's 1999", () => {
  const date = new Date("1999-01-01T00:00:00.000Z");
  setSystemTime(date); // it's now January 1, 1999

  const now = new Date();
  expect(now.getFullYear()).toBe(1999);
  expect(now.getMonth()).toBe(0);
  expect(now.getDate()).toBe(1);
});
```

----------------------------------------

TITLE: Compressing data with Bun.deflateSync() in TypeScript
DESCRIPTION: Demonstrates using the DEFLATE algorithm to compress data. This example shows compressing a buffer containing repeated text, showing the size difference before and after compression.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_18

LANGUAGE: typescript
CODE:
```
const buf = Buffer.from("hello".repeat(100));
const compressed = Bun.deflateSync(buf);

buf; // => Uint8Array(25)
compressed; // => Uint8Array(10)
```

----------------------------------------

TITLE: Running Next.js CSS HMR Analysis Script
DESCRIPTION: This command executes a Node.js script to analyze CSS HMR frame times for a Next.js project. It sets environment variables for sleep interval and project name before running the script.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/hot-module-reloading/css-stress-test/next.latest.24ms.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
SLEEP_INTERVAL=24 PROJECT=next node read-frames.js
```

----------------------------------------

TITLE: Advanced color() Function Usage in CSS - Bun Bundler
DESCRIPTION: Utilizes the color() function with explicit color spaces (display-p3, a98-rgb) to access wide gamuts. Bun provides RGB fallbacks for compatibility. Inputs support creative color choices; outputs guarantee older browser support. No dependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_10

LANGUAGE: css
CODE:
```
.vivid-element {\n  /* Using the Display P3 color space for wider gamut colors */\n  color: color(display-p3 1 0.1 0.3);\n\n  /* Using A98 RGB color space */\n  background-color: color(a98-rgb 0.44 0.5 0.37);\n}
```

----------------------------------------

TITLE: Disabling Safe Integers and Returning Truncated Number Values (TypeScript)
DESCRIPTION: Sets safeIntegers: false (default) in Bun's Database, resulting in SQLite integer fields being returned as regular JavaScript numbers. Precision will be truncated beyond 53 bits for large integers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_23

LANGUAGE: TypeScript
CODE:
```
import { Database } from "bun:sqlite";

const db = new Database(":memory:", { safeIntegers: false });
const query = db.query(
  `SELECT ${BigInt(Number.MAX_SAFE_INTEGER) + 102n} as max_int`,
);
const result = query.get();
console.log(result.max_int); // => 9007199254741092

```

----------------------------------------

TITLE: Using Vitest Compatibility Features in Bun Tests
DESCRIPTION: Shows how to use Bun's Vitest compatibility layer through the vi global object. Demonstrates creating mock functions and accessing Vitest-compatible APIs like vi.fn, vi.spyOn, and vi.mock.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/mocks.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
import { test, expect } from "bun:test";

// Using the 'vi' alias similar to Vitest
test("vitest compatibility", () => {
  const mockFn = vi.fn(() => 42);
  
  mockFn();
  expect(mockFn).toHaveBeenCalled();
  
  // The following functions are available on the vi object:
  // vi.fn
  // vi.spyOn
  // vi.mock
  // vi.restoreAllMocks
  // vi.clearAllMocks
});
```

----------------------------------------

TITLE: Running Tests in Jest Environment
DESCRIPTION: Command to run the test file using Jest with Node.js experimental VM modules enabled.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/expect-to-equal/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
# If you remove the import the performance doesn't change much
NODE_OPTIONS="--experimental-vm-modules" ./node_modules/.bin/jest expect-to-equal.test.js
```

----------------------------------------

TITLE: Getting Process Uptime in Nanoseconds with Bun
DESCRIPTION: This snippet demonstrates how to use Bun.nanoseconds() to retrieve the total number of nanoseconds the bun process has been alive. This is useful for precise timing measurements in applications.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/nanoseconds.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
Bun.nanoseconds();
```

----------------------------------------

TITLE: Entrypoints Configuration with CLI
DESCRIPTION: Example of configuring entrypoints in Bun's bundler using the CLI. Without an outdir, the bundle is printed to stdout.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_15

LANGUAGE: bash
CODE:
```
$ bun build --entrypoints ./index.ts
# the bundle will be printed to stdout
# <bundled code>
```

----------------------------------------

TITLE: Configuring Scoped Private Registries in Bun
DESCRIPTION: Demonstrates how to configure organization-specific private registries with different authentication methods including direct URL with credentials, separate username/password, and token-based authentication. Supports environment variable references.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/registries.md#2025-04-22_snippet_1

LANGUAGE: toml
CODE:
```
[install.scopes]
# registry as string
"@myorg1" = "https://username:password@registry.myorg.com/"

# registry with username/password
# you can reference environment variables
"@myorg2" = { username = "myusername", password = "$NPM_PASS", url = "https://registry.myorg.com/" }

# registry with token
"@myorg3" = { token = "$npm_token", url = "https://registry.myorg.com/" }
```

----------------------------------------

TITLE: Adding npm overrides to package.json in Bun (second example)
DESCRIPTION: Another example of adding npm's "overrides" field to package.json to control the version of a metadependency. This demonstrates how to specify that "bar" should use version "~4.4.0" even if a newer version is available.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/overrides.md#2025-04-22_snippet_2

LANGUAGE: json-diff
CODE:
```
  {
    "name": "my-app",
    "dependencies": {
      "foo": "^2.0.0"
    },
+   "overrides": {
+     "bar": "~4.4.0"
+   }
  }
```

----------------------------------------

TITLE: Accessing Raw Command-line Arguments with Bun.argv in TypeScript
DESCRIPTION: A simple example showing how to access the raw command-line arguments array using Bun.argv.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/argv.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
console.log(Bun.argv);
```

----------------------------------------

TITLE: Equivalent setTimeout Implementation in TypeScript
DESCRIPTION: This snippet shows the equivalent implementation of the sleep functionality using setTimeout. It creates a Promise that resolves after the specified delay, mimicking the behavior of Bun.sleep.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/sleep.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await new Promise(resolve => setTimeout(resolve, ms));
```

----------------------------------------

TITLE: Getting Bun Version in TypeScript
DESCRIPTION: Retrieves the current semantic version of Bun installation. Returns a string in semver format.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/version.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
Bun.version; // => "$BUN_LATEST_VERSION"
```

----------------------------------------

TITLE: Connecting to MongoDB and Using the Animal Model - TypeScript
DESCRIPTION: Connects to a local MongoDB instance, creates and saves a new 'Animal', fetches all animals, invokes an instance method, and disconnects. Requires the 'mongoose' NPM package, a running MongoDB instance at 'mongodb://127.0.0.1:27017/mongoose-app', and the 'Animal' model defined elsewhere. Accepts no arguments directly, relies on connecting to database, creates an object with 'name' and 'sound', and demonstrates the model's static and instance methods. Outputs to the console and modifies database state.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/mongoose.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import * as mongoose from 'mongoose';\nimport {Animal} from './schema';\n\n// connect to database\nawait mongoose.connect('mongodb://127.0.0.1:27017/mongoose-app');\n\n// create new Animal\nconst cow = new Animal({\n  name: 'Cow',\n  sound: 'Moo',\n});\nawait cow.save(); // saves to the database\n\n// read all Animals\nconst animals = await Animal.find();\nanimals[0].speak(); // logs \"Moo!\"\n\n// disconnect\nawait mongoose.disconnect();
```

----------------------------------------

TITLE: Configuring Frozen Lockfile in Bun Install
DESCRIPTION: When enabled, bun install will not update the lockfile and will error if package.json doesn't match the lockfile.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_23

LANGUAGE: toml
CODE:
```
[install]
frozenLockfile = false
```

----------------------------------------

TITLE: Configuring Production Mode in Bun Install
DESCRIPTION: When enabled, devDependencies will not be installed. Can be overridden with --production CLI flag.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_19

LANGUAGE: toml
CODE:
```
[install]
production = false
```

----------------------------------------

TITLE: Configuring bunfig.toml for Svelte Plugin
DESCRIPTION: TOML configuration to register bun-plugin-svelte in the Bun configuration file for use with the Fullstack Dev Server.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-plugin-svelte/README.md#2025-04-22_snippet_1

LANGUAGE: toml
CODE:
```
[serve.static]
plugins = ["bun-plugin-svelte"]
```

----------------------------------------

TITLE: Publishing Messages to WebSocket Subscribers
DESCRIPTION: Shows how to publish messages to all WebSocket clients subscribed to a topic using the server.publish() method. The method returns the number of bytes sent, 0 if dropped, or -1 if backpressure was applied.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_25

LANGUAGE: typescript
CODE:
```
const server = Bun.serve({
  websocket: {
    message(ws) {
      // Publish to all "chat" subscribers
      server.publish("chat", "Hello everyone!");
    },
  },

  fetch(req) {
    // ...
  },
});
```

----------------------------------------

TITLE: React Server-Side Rendering in Bun
DESCRIPTION: Example of server-side rendering React components in Bun using react-dom/server's renderToReadableStream. This demonstrates how Bun can be used to build React-based web applications with dynamic content.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/benchmarks.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { renderToReadableStream } from "react-dom/server";

const dt = new Intl.DateTimeFormat();

export default {
  port: 3000,
  async fetch(request: Request) {
    return new Response(
      await renderToReadableStream(
        <html>
          <head>
            <title>Hello World</title>
          </head>
          <body>
            <h1>Hello from React!</h1>
            <p>The date is {dt.format(new Date())}</p>
          </body>
        </html>,
      ),
    );
  },
};
```

----------------------------------------

TITLE: Non-Color Terminal Console Output Example in Bun Test
DESCRIPTION: Demonstrates the console output format when running tests in a terminal that doesn't support colors, using ASCII characters instead of Unicode symbols.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/reporters.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
test/package-json-lint.test.ts:
(pass) test/package.json [0.48ms]
(pass) test/js/third_party/grpc-js/package.json [0.10ms]
(pass) test/js/third_party/svelte/package.json [0.04ms]
(pass) test/js/third_party/express/package.json [0.04ms]

 4 pass
 0 fail
 4 expect() calls
Ran 4 tests across 1 files. [0.66ms]
```

----------------------------------------

TITLE: Demonstrating Unhandled Error Detection in Bun Test Runner (TypeScript)
DESCRIPTION: This code snippet illustrates how Bun's test runner handles unhandled errors that occur outside of test cases. It shows that even if all tests pass, an unhandled error will cause the test run to fail with a non-zero exit code.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/runtime-behavior.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { test } from "bun:test";

test("test 1", () => {
  // This test passes
});

// This error happens outside any test
setTimeout(() => {
  throw new Error("Unhandled error");
}, 0);

test("test 2", () => {
  // This test also passes
});

// The test run will still fail with a non-zero exit code
// because of the unhandled error
```

----------------------------------------

TITLE: CSS Color Format Examples in TypeScript
DESCRIPTION: Examples of converting various color formats to CSS string representation using Bun.color() with 'css' output format
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/color.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
Bun.color("red", "css"); // "red"
Bun.color(0xff0000, "css"); // "#f000"
Bun.color("#f00", "css"); // "red"
Bun.color("#ff0000", "css"); // "red"
Bun.color("rgb(255, 0, 0)", "css"); // "red"
Bun.color("rgba(255, 0, 0, 1)", "css"); // "red"
Bun.color("hsl(0, 100%, 50%)", "css"); // "red"
Bun.color("hsla(0, 100%, 50%, 1)", "css"); // "red"
Bun.color({ r: 255, g: 0, b: 0 }, "css"); // "red"
Bun.color({ r: 255, g: 0, b: 0, a: 1 }, "css"); // "red"
Bun.color([255, 0, 0], "css"); // "red"
Bun.color([255, 0, 0, 255], "css"); // "red"
```

----------------------------------------

TITLE: Initializing an Astro Project with Bun
DESCRIPTION: This shell command uses `bun create astro` to scaffold a new Astro project. The `create-astro` package detects `bunx` and automatically uses `bun` for installing dependencies. The command interactively guides the user through project setup options.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/astro.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun create astro
╭─────╮  Houston:
│ ◠ ◡ ◠  We're glad to have you on board.
╰─────╯

 astro   v3.1.4 Launch sequence initiated.

   dir   Where should we create your new project?
         ./fumbling-field

  tmpl   How would you like to start your new project?
         Use blog template
      ✔  Template copied

  deps   Install dependencies?
         Yes
      ✔  Dependencies installed

    ts   Do you plan to write TypeScript?
         Yes

   use   How strict should TypeScript be?
         Strict
      ✔  TypeScript customized

   git   Initialize a new git repository?
         Yes
      ✔  Git initialized

  next   Liftoff confirmed. Explore your project!

         Enter your project directory using cd ./fumbling-field
         Run `bun run dev` to start the dev server. CTRL+C to stop.
         Add frameworks like react or tailwind using astro add.

         Stuck? Join us at https://astro.build/chat

╭─────╮  Houston:
│ ◠ ◡ ◠  Good luck out there, astronaut! 🚀
╰─────╯
```

----------------------------------------

TITLE: GZIP File Structure and Open Functions in C
DESCRIPTION: Definition of GZIP file structure and implementations of gzopen(), gzdopen(), and gz_open() functions for initializing compression streams.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/zlib.test.txt#2025-04-22_snippet_6

LANGUAGE: C
CODE:
```
typedef struct gzFile_s {
    FILE *file;
    int write;
    int err;
    char *msg;
    z_stream strm;
} *gzFile;

gzFile gzopen(path, mode)
const char *path;
const char *mode;
{
    return gz_open(path, -1, mode);
}

gzFile gzdopen(fd, mode)
int fd;
const char *mode;
{
    return gz_open(NULL, fd, mode);
}
```

----------------------------------------

TITLE: Code signing and verifying the executable
DESCRIPTION: Uses the macOS codesign utility to sign the compiled executable with the specified identity and entitlements, then verifies the signature to ensure it was applied correctly.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/codesign-macos-executable.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
$ codesign --entitlements entitlements.plist -vvvv --deep --sign "XXXXXXXXXX" ./myapp --force
$ codesign -vvv --verify ./myapp
```

----------------------------------------

TITLE: Starting Development Server with Bun
DESCRIPTION: Command to start a development server for local development using Bun
SOURCE: https://github.com/oven-sh/bun/blob/main/src/cli/init/README2.default.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
bun dev
```

----------------------------------------

TITLE: Writing String to Absolute Path File in TypeScript
DESCRIPTION: This snippet demonstrates how to write a string to a file at an absolute path using Bun.write(). The first argument is the destination path, and the second is the string data to write.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/basic.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const path = "/path/to/file.txt";
await Bun.write(path, "Lorem ipsum");
```

----------------------------------------

TITLE: Enabling Small Memory Mode in Bun
DESCRIPTION: Enables 'smol' mode which reduces memory usage at the cost of performance. Useful for resource-constrained environments.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_2

LANGUAGE: toml
CODE:
```
# Reduce memory usage at the cost of performance
smol = true
```

----------------------------------------

TITLE: Displaying Monorepo Directory Structure
DESCRIPTION: Shows the typical directory structure of a monorepo project using the tree command.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/workspaces.md#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
tree
<root>
├── README.md
├── bun.lock
├── package.json
├── tsconfig.json
└── packages
    ├── pkg-a
    │   ├── index.ts
    │   ├── package.json
    │   └── tsconfig.json
    ├── pkg-b
    │   ├── index.ts
    │   ├── package.json
    │   └── tsconfig.json
    └── pkg-c
        ├── index.ts
        ├── package.json
        └── tsconfig.json
```

----------------------------------------

TITLE: Enabling TLS for a TCP Server
DESCRIPTION: Configures a TLS-enabled TCP server by providing key and certificate files. The TLS configuration requires key and cert fields that can be loaded from files using Bun.file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/tcp.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
Bun.listen({
  hostname: "localhost",
  port: 8080,
  socket: {
    data(socket, data) {},
  },
  tls: {
    // can be string, BunFile, TypedArray, Buffer, or array thereof
    key: Bun.file("./key.pem"),
    cert: Bun.file("./cert.pem"),
  },
});
```

----------------------------------------

TITLE: Implementing a High-Performance 'cat' Clone in Bun
DESCRIPTION: JavaScript implementation of 'cat' command in Bun that runs 2x faster than GNU cat for large files on Linux. It uses Bun's file and stdout APIs for efficient file reading and output.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/benchmarks.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
// cat.js
import { resolve } from "path";
import { write, stdout, file, argv } from "bun";

const path = resolve(argv.at(-1));

await write(
  // stdout is a Blob
  stdout,
  // file(path) returns a Blob - https://developer.mozilla.org/en-US/docs/Web/API/Blob
  file(path),
);
```

----------------------------------------

TITLE: Reading and Parsing JSON File with Bun in TypeScript
DESCRIPTION: This snippet demonstrates how to use Bun.file() to read a JSON file, parse its contents into a JavaScript object, and check the MIME type of the file. It uses the .json() method of the BunFile instance to parse the contents.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/read-file/json.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const path = "/path/to/package.json";
const file = Bun.file(path);

const contents = await file.json();
// { name: "my-package" }

file.type; // => "application/json;charset=utf-8";
```

----------------------------------------

TITLE: Deleting Directory with Error Handling in TypeScript
DESCRIPTION: This snippet shows how to delete a directory using the 'rm' function with error handling. It checks if the directory exists and logs a message if it doesn't, otherwise it throws any other errors encountered during deletion.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/delete-directory.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
try {
  await rm("path/to/directory", { recursive: true });
} catch (error) {
  if (error.code === "ENOENT") {
    console.log("Directory doesn't exist");
  } else {
    throw error;
  }
}
```

----------------------------------------

TITLE: Adding Bun to PATH on Windows
DESCRIPTION: This snippet demonstrates how to add Bun to the PATH environment variable on Windows using PowerShell.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/installation.md#2025-04-22_snippet_9

LANGUAGE: powershell
CODE:
```
[System.Environment]::SetEnvironmentVariable(
    "Path",
    [System.Environment]::GetEnvironmentVariable("Path", "User") + ";$env:USERPROFILE\.bun\bin",
    [System.EnvironmentVariableTarget]::User
)
```

----------------------------------------

TITLE: Initializing Sentry in a Bun Application
DESCRIPTION: Code to initialize the Sentry SDK with project-specific DSN and configuration options. Includes performance monitoring setup with a tracesSampleRate that determines what percentage of transactions are sent to Sentry.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/sentry.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import * as Sentry from "@sentry/bun";

// Ensure to call this before importing any other modules!
Sentry.init({
  dsn: "__SENTRY_DSN__",

  // Add Performance Monitoring by setting tracesSampleRate
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
});
```

----------------------------------------

TITLE: Filtering Bun Tests by Partial Name using Bash (Commented Example)
DESCRIPTION: A commented-out example demonstrating how running `bun test a` would execute both `a.test.ts` files (one in the root, one in `foo/`) based on the previously shown directory structure. This illustrates filtering by a common part of the filename.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_17

LANGUAGE: bash
CODE:
```
$ bun test a
```

----------------------------------------

TITLE: Running the Application with Bun - Bash
DESCRIPTION: Executes the main TypeScript file using Bun's runtime, demonstrating how to run your codebase. Assumes that the project and TypeScript code are set up as instructed earlier. Outputs results and logging to the console.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/mongoose.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
$ bun run index.ts\nMoo!
```

----------------------------------------

TITLE: Filtering Bun Tests by Directory Name using Bash (Commented Example)
DESCRIPTION: A commented-out example showing how running `bun test foo` would execute all test files located within the `foo` directory (`foo/a.test.ts` and `foo/b.test.ts`) based on the previously shown directory structure. This illustrates filtering by directory path component.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_18

LANGUAGE: bash
CODE:
```
$ bun test foo
```

----------------------------------------

TITLE: Scaffolding and Running a Hono Project with Bun (Bash)
DESCRIPTION: These Bash commands illustrate the process of scaffolding a new Hono project named 'myapp' using the Bun runtime's create command with the 'hono' template. It then navigates into the newly created project directory and starts the application server using the `bun run start` command. This sequence requires the Bun runtime to be installed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/ecosystem/hono.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ bun create hono ./myapp
$ cd myapp
$ bun run start
```

----------------------------------------

TITLE: Importing Text Files in TypeScript
DESCRIPTION: Shows how to import text files directly in TypeScript. The file contents are read and returned as a string. Also demonstrates importing HTML as text using the type attribute.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/loaders.md#2025-04-22_snippet_5

LANGUAGE: ts
CODE:
```
import contents from "./file.txt";
console.log(contents); // => "Hello, world!"

// To import an html file as text
// The "type' attribute can be used to override the default loader.
import html from "./index.html" with { type: "text" };
```

----------------------------------------

TITLE: Import Tracking Plugin with Defer
DESCRIPTION: Advanced plugin example demonstrating usage of defer() to track and report unused exports.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/plugins.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
import { plugin } from "bun";

plugin({
  name: "track imports",
  setup(build) {
    const transpiler = new Bun.Transpiler();

    let trackedImports: Record<string, number> = {};

    build.onLoad({ filter: /\.ts/ }, async ({ path }) => {
      const contents = await Bun.file(path).arrayBuffer();

      const imports = transpiler.scanImports(contents);

      for (const i of imports) {
        trackedImports[i.path] = (trackedImports[i.path] || 0) + 1;
      }

      return undefined;
    });

    build.onLoad({ filter: /stats\.json/ }, async ({ defer }) => {
      await defer();

      return {
        contents: `export default ${JSON.stringify(trackedImports)}`,
        loader: "json",
      };
    });
  },
});
```

----------------------------------------

TITLE: Running TypeScript and JSX with Bun CLI
DESCRIPTION: Demonstrates how to use the Bun CLI to run TypeScript and JSX files directly, showcasing out-of-the-box support for these file types.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/index.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ bun run index.tsx  # TS and JSX supported out of the box
```

----------------------------------------

TITLE: Setting ACLs for Presigned URLs
DESCRIPTION: Shows how to set Access Control Lists (ACLs) on presigned URLs to control who can access the objects in S3. The example demonstrates setting public-read access with an expiration time.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
const url = s3file.presign({
  acl: "public-read",
  expiresIn: 3600,
});
```

----------------------------------------

TITLE: Displaying NPM Username with Bun
DESCRIPTION: Prints the npm username associated with the currently authenticated session. Requires the user to be logged in via `bunx npm login` and have credentials stored in either `bunfig.toml` or an `.npmrc` file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/pm.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
$ bun pm whoami
```

----------------------------------------

TITLE: Configuring TailwindCSS Dependencies in package.json
DESCRIPTION: Shows the automatically added dependencies for TailwindCSS when detected in a React component.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bun-create.md#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "tailwindcss": "^4",
    "bun-plugin-tailwind": "latest"
  }
}
```

----------------------------------------

TITLE: Asynchronous Code Transformation
DESCRIPTION: Demonstrates asynchronous code transformation using the transform method
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/transpiler.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
const transpiler = new Bun.Transpiler({ loader: "jsx" });
const result = await transpiler.transform("<div>hi!</div>");
console.log(result);
```

----------------------------------------

TITLE: Raw Buffer Result Format Query in TypeScript
DESCRIPTION: Shows how to get query results as raw Buffer objects using the raw() method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
const rows = await sql`SELECT * FROM users`.raw();
console.log(rows);
```

----------------------------------------

TITLE: Snapshot Directory Structure
DESCRIPTION: Shows the file structure of the test directory after running the snapshot test. The __snapshots__ directory contains a .snap file for each test file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/snapshot.md#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
test
├── __snapshots__
│   └── snap.test.ts.snap
└── snap.test.ts
```

----------------------------------------

TITLE: Benchmarking Package Managers without Lockfile in Offline Mode
DESCRIPTION: This command benchmarks installation performance without lockfiles in offline mode. It removes existing lockfiles before each run and uses hyperfine to compare Bun, pnpm, Yarn, and npm with appropriate offline flags.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/install/README.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
$ hyperfine --prepare 'rm -rf node_modules' --warmup 1 'rm bun.lock && bun install' 'rm pnpm-lock.yaml && pnpm install --prefer-offline' 'rm yarn.lock && yarn --offline' 'rm package-lock.json && npm install --prefer-offline'
```

----------------------------------------

TITLE: Updating package.json with Git Dependency
DESCRIPTION: This JSON diff shows how the package.json file is updated after adding a Git dependency. It adds the Lodash library using the GitHub shorthand notation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/add-git.md#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{
  "dependencies": {
+   "lodash": "github:lodash/lodash"
  }
}
```

----------------------------------------

TITLE: Installing Dependencies for SolidStart Project
DESCRIPTION: After project initialization, this command navigates to the project directory and uses Bun to install all required dependencies for the SolidStart application.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/solidstart.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
$ cd my-app
$ bun install
```

----------------------------------------

TITLE: Build Bun
DESCRIPTION: This command builds Bun after cloning the repository. It runs the `build` script defined in the `package.json` file, which handles cloning submodules and building dependencies. The script may take a while to execute.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_16

LANGUAGE: bash
CODE:
```
$ bun run build
```

----------------------------------------

TITLE: Configuring Bun Preload Scripts
DESCRIPTION: TOML configuration in bunfig.toml to specify preload scripts for test setup.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/testing-library.md#2025-04-22_snippet_4

LANGUAGE: toml
CODE:
```
[test]
preload = ["./happydom.ts", "./testing-library.ts"]
```

----------------------------------------

TITLE: Configuring Azure Artifacts Registry in bunfig.toml for Bun Install
DESCRIPTION: This snippet shows how to set up the bunfig.toml file to configure Bun for use with Azure Artifacts npm registry. It includes settings for the registry URL, username, and password (using an environment variable).
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/azure-artifacts.md#2025-04-22_snippet_0

LANGUAGE: toml
CODE:
```
[install.registry]
url = "https://pkgs.dev.azure.com/my-azure-artifacts-user/_packaging/my-azure-artifacts-user/npm/registry"
username = "my-azure-artifacts-user"
# Bun v1.0.3+ supports using an environment variable here
password = "$NPM_PASSWORD"
```

----------------------------------------

TITLE: Writing Fetched Content to File with Bun.js
DESCRIPTION: This example shows how to use Bun.write() with a Response object from a fetch operation. It automatically converts the Response to a Blob. Currently, it buffers the response, but future implementations may stream the response directly to disk.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/file.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
// Eventually, this will stream the response to disk but today it buffers
await Bun.write("index.html", await fetch("https://example.com"));
```

----------------------------------------

TITLE: Using dispose() Method for HMR Cleanup in Bun
DESCRIPTION: Demonstrates how to use the dispose() method, which registers a callback function that runs when a module is about to be replaced. The entire function call is removed in production builds.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/hmr.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// This entire function call will be removed in production!
import.meta.hot.dispose(() => {
  console.log("dispose");
});
```

----------------------------------------

TITLE: Defining a User model in Prisma schema
DESCRIPTION: Prisma schema definition that adds a User model with id, email, and name fields. The schema includes appropriate field types and constraints.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/prisma.md#2025-04-22_snippet_3

LANGUAGE: prisma
CODE:
```
  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
  }

+ model User {
+   id    Int     @id @default(autoincrement())
+   email String  @unique
+   name  String?
+ }
```

----------------------------------------

TITLE: Importing HTML File as Text in TypeScript with Bun
DESCRIPTION: This snippet shows how to import an HTML file as text in Bun using TypeScript. It uses the 'type: "text"' attribute in the import statement to treat the HTML file as plain text. The imported content can then be used as a string in the code.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/import-html.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import html from "./file.html" with { type: "text" };

console.log(html); // <!DOCTYPE html><html><head>...
```

----------------------------------------

TITLE: Executing Bun Tests with Immediate Bail on Failure
DESCRIPTION: This command runs Bun tests with the --bail flag, which stops the test execution immediately after the first failure. This is particularly useful in continuous integration environments where you want to abort as soon as possible after a failure.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/bail.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun test --bail
```

----------------------------------------

TITLE: Retrieving Current File Name with import.meta in Bun TypeScript
DESCRIPTION: This snippet demonstrates how to use import.meta.file to get the name of the current file in a Bun project. When executed in a file located at /a/b/c.ts, it returns just the base file name 'c.ts' without the path.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/import-meta-file.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import.meta.file; // => "c.ts"
```

----------------------------------------

TITLE: Common systemd Service Management Commands
DESCRIPTION: A cheatsheet of frequently used systemd commands for managing Bun service lifecycle, including reloading, enabling, disabling, starting, stopping, and restarting services.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/systemd.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
$ sudo systemctl daemon-reload # tell systemd that some files got changed
$ sudo systemctl enable my-app # enable the app (to allow auto-start)
$ sudo systemctl disable my-app # disable the app (turns off auto-start)
$ sudo systemctl start my-app # start the app if is stopped
$ sudo systemctl stop my-app # stop the app
$ sudo systemctl restart my-app # restart the app
```

----------------------------------------

TITLE: Defining String Enumerations in TypeScript for Bun Bindings
DESCRIPTION: Shows how to create a string enumeration type using t.stringEnum and use it in a function definition. This example defines a Formatter enum and uses it in the fmtString function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/bindgen.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
export const Formatter = t.stringEnum(
  "highlight-javascript",
  "escape-powershell",
);

export const fmtString = fn({
  args: {
    global: t.globalObject,
    code: t.UTF8String,
    formatter: Formatter,
  },
  ret: t.DOMString,
});
```

----------------------------------------

TITLE: Reading Cookies in Bun Server Requests
DESCRIPTION: Demonstrates how to read cookies from incoming HTTP requests using the cookies property on the BunRequest object. The example accesses user_id and theme cookies with fallback values.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/http.md#2025-04-22_snippet_20

LANGUAGE: typescript
CODE:
```
Bun.serve({
  routes: {
    "/profile": req => {
      // Access cookies from the request
      const userId = req.cookies.get("user_id");
      const theme = req.cookies.get("theme") || "light";

      return Response.json({
        userId,
        theme,
        message: "Profile page",
      });
    },
  },
});
```

----------------------------------------

TITLE: Measuring JavaScript Heap Statistics in Bun
DESCRIPTION: This snippet demonstrates how to use the 'bun:jsc' module to measure and log JavaScript heap statistics in Bun. It imports the heapStats function and logs the result, providing detailed information about memory usage and object counts.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/benchmarking.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { heapStats } from "bun:jsc";
console.log(heapStats());
```

----------------------------------------

TITLE: Getting DNS Cache Statistics in Bun
DESCRIPTION: Shows how to use the experimental dns.getCacheStats API to retrieve information about the DNS cache, including hits, misses, size, and error counts.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/dns.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import {dns} from "bun";

const stats = dns.getCacheStats();
console.log(stats);
// => { cacheHitsCompleted: 0, cacheHitsInflight: 0, cacheMisses: 0, size: 0, errors: 0, totalCount: 0 }
```

----------------------------------------

TITLE: Loading SQLite Extensions with Bun (TypeScript)
DESCRIPTION: Shows how to use db.loadExtension() in Bun's SQLite API to dynamically load a named extension, expanding SQLite's built-in capabilities. Useful for custom SQL functions or modules packaged as shared libraries.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_27

LANGUAGE: TypeScript
CODE:
```
import { Database } from "bun:sqlite";

const db = new Database();
db.loadExtension("myext");

```

----------------------------------------

TITLE: Installing Tarball Package with Bun CLI
DESCRIPTION: Command to install a specific version of zod package using its tarball URL via Bun package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/add-tarball.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun add zod@https://registry.npmjs.org/zod/-/zod-3.21.4.tgz
```

----------------------------------------

TITLE: TypeScript Declaration for Worker Self Reference
DESCRIPTION: A TypeScript declaration to prevent type errors when using the 'self' keyword in a worker context.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/workers.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
declare var self: Worker;
```

----------------------------------------

TITLE: Deleting Files using Bun.file API in TypeScript
DESCRIPTION: This snippet demonstrates how to delete a file using Bun's file system API and then verify the deletion by checking if the file still exists. The code uses the `Bun.file()` method to create a file reference and then calls the `delete()` method to remove the file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/delete-file.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// Delete a file
const file = Bun.file("path/to/file.txt");
await file.delete();

// Now the file doesn't exist
const exists = await file.exists();
// => false
```

----------------------------------------

TITLE: Setting Timezone with Environment Variable for bun:test
DESCRIPTION: Demonstrates how to set the timezone for tests by passing the TZ environment variable to the bun test command in the shell.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/time.md#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
TZ=America/Los_Angeles bun test
```

----------------------------------------

TITLE: Directory Structure Created by Drizzle Kit Migration Generation (Text)
DESCRIPTION: Illustrates the typical directory structure generated by the `drizzle-kit generate` command. It includes a `drizzle` directory containing the SQL migration file (e.g., `0000_ordinary_beyonder.sql`) and a `meta` subdirectory with metadata files (`0000_snapshot.json`, `_journal.json`) used by Drizzle Kit.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/drizzle.md#2025-04-22_snippet_6

LANGUAGE: txt
CODE:
```
drizzle
├── 0000_ordinary_beyonder.sql
└── meta
    ├── 0000_snapshot.json
    └── _journal.json
```

----------------------------------------

TITLE: Customizing Stack Traces with Error.prepareStackTrace
DESCRIPTION: Demonstrates how to use Error.prepareStackTrace to customize the formatting of stack traces in Bun. This example shows how to extract only the filenames from the stack trace.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/debugger.md#2025-04-22_snippet_5

LANGUAGE: ts
CODE:
```
Error.prepareStackTrace = (err, stack) => {
  return stack.map(callSite => {
    return callSite.getFileName();
  });
};

const err = new Error("Something went wrong");
console.log(err.stack);
// [ "error.js" ]
```

----------------------------------------

TITLE: Writing Spy Assertions in Bun Tests
DESCRIPTION: Shows how to write test assertions using the created spy to verify method call counts and arguments. Includes checking call counts and examining mock call arguments.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/spy-on.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { test, expect, spyOn } from "bun:test";

const leo = {
  name: "Leonardo",
  sayHi(thing: string) {
    console.log(`Sup I'm ${this.name} and I like ${thing}`);
  },
};

const spy = spyOn(leo, "sayHi");

test("turtles", ()=>{
  expect(spy).toHaveBeenCalledTimes(0);
  leo.sayHi("pizza");
  expect(spy).toHaveBeenCalledTimes(1);
  expect(spy.mock.calls).toEqual([[ "pizza" ]]);
})
```

----------------------------------------

TITLE: Responsive CSS Styling
DESCRIPTION: CSS styles defining page layout, typography, and responsive design. Includes styling for body, div containers, links, and mobile media queries.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/web/streams/fetch.js.txt#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
body {
        background-color: #f0f0f2;
        margin: 0;
        padding: 0;
        font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
        
    }
    div {
        width: 600px;
        margin: 5em auto;
        padding: 2em;
        background-color: #fdfdff;
        border-radius: 0.5em;
        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);
    }
    a:link, a:visited {
        color: #38488f;
        text-decoration: none;
    }
    @media (max-width: 700px) {
        div {
            margin: 0 auto;
            width: auto;
        }
    }
```

----------------------------------------

TITLE: Building Bun with Local JSC Build (bun run)
DESCRIPTION: This command builds Bun in the `./build/debug-local` directory instead of `./build/debug`. It requires modifications to `src/js/builtins.d.ts`, `.clangd` config, `build.zig`, and `.vscode/launch.json` to reflect this new directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_28

LANGUAGE: bash
CODE:
```
$ bun run build:local
```

----------------------------------------

TITLE: Excluding Test Files from Coverage
DESCRIPTION: This configuration shows how to exclude test files from coverage reports. Setting coverageSkipTestFiles to true will exclude files matching test patterns (like *.test.ts or *_spec.js) from coverage calculations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/coverage.md#2025-04-22_snippet_4

LANGUAGE: toml
CODE:
```
[test]
coverageSkipTestFiles = true   # default false
```

----------------------------------------

TITLE: Installing TypeScript Declarations for Bun using npm
DESCRIPTION: This command installs the TypeScript definitions for Bun's built-in APIs as a development dependency in your project.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/typescript.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun add -d @types/bun # dev dependency
```

----------------------------------------

TITLE: Install Bun using npm
DESCRIPTION: This command installs Bun globally using npm, the Node.js package manager. It requires Node.js and npm to be installed.  The `-g` flag installs Bun globally, making it available in the system's PATH.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_6

LANGUAGE: bash
CODE:
```
$ npm install -g bun
```

----------------------------------------

TITLE: Setting up NAPI-RS Project with Bun
DESCRIPTION: Commands to initialize a new NAPI-RS project and add the bun-native-plugin crate
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-native-plugin-rs/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
bun add -g @napi-rs/cli
napi new

```

LANGUAGE: bash
CODE:
```
cargo add bun-native-plugin
```

----------------------------------------

TITLE: Reading stdin line-by-line using console as AsyncIterable in TypeScript
DESCRIPTION: This snippet demonstrates how to create an interactive command-line prompt that reads user input line-by-line using the console object as an AsyncIterable. It continuously prompts the user for input and echoes back what they typed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/stdin.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const prompt = "Type something: ";
process.stdout.write(prompt);
for await (const line of console) {
  console.log(`You typed: ${line}`);
  process.stdout.write(prompt);
}
```

----------------------------------------

TITLE: Processing Build Artifacts
DESCRIPTION: Example showing how to process build artifacts when not specifying an output directory. Build artifacts can be treated as blobs, used in responses, or manually written to disk.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_18

LANGUAGE: typescript
CODE:
```
const result = await Bun.build({
  entrypoints: ["./index.ts"],
});

for (const res of result.outputs) {
  // Can be consumed as blobs
  await res.text();

  // Bun will set Content-Type and Etag headers
  new Response(res);

  // Can be written manually, but you should use `outdir` in this case.
  Bun.write(path.join("out", res.path), res);
}
```

----------------------------------------

TITLE: Installing GCC 11
DESCRIPTION: This command installs GCC 11 and G++ 11 from the system's package manager (APT). It's a prerequisite for resolving 'span' file not found errors on Ubuntu.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_30

LANGUAGE: bash
CODE:
```
$ sudo apt install gcc-11 g++-11
```

----------------------------------------

TITLE: Controlling Stream Flow with Async Generator Yield
DESCRIPTION: Demonstrates advanced control of a ReadableStream using an async generator, where the yield operation returns the stream controller for more granular handling.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/streams.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
const response = new Response({
  [Symbol.asyncIterator]: async function* () {
    const controller = yield "hello";
    await controller.end();
  },
});

await response.text(); // "hello"
```

----------------------------------------

TITLE: Configuring Cache Behavior in bunfig.toml
DESCRIPTION: Configuration options for Bun's package cache behavior in bunfig.toml, including the cache directory location, ability to disable the global cache, and manifest resolution settings.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/cache.md#2025-04-22_snippet_0

LANGUAGE: toml
CODE:
```
[install.cache]
# the directory to use for the cache
dir = "~/.bun/install/cache"

# when true, don't load from the global cache.
# Bun may still write to node_modules/.cache
disable = false

# when true, always resolve the latest versions from the registry
disableManifest = false
```

----------------------------------------

TITLE: Running All Tests with Bun Test Runner
DESCRIPTION: Example output of running all tests using 'bun test' command, showing test execution across multiple files with timing information.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/run-tests.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
$ bun test
bun test v$BUN_LATEST_VERSION (9c68abdb)

test.test.js:
✓ add [0.87ms]
✓ multiply [0.02ms]

test2.test.js:
✓ add [0.72ms]
✓ multiply [0.01ms]

test3.test.js:
✓ add [0.54ms]
✓ multiply [0.01ms]

 6 pass
 0 fail
 6 expect() calls
Ran 6 tests across 3 files. [9.00ms]
```

----------------------------------------

TITLE: Controlling Bun Install Logging Verbosity
DESCRIPTION: Demonstrates how to adjust the logging output during `bun install`. The `--verbose` flag enables detailed debug logging, while the `--silent` flag suppresses all logging output.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/install.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
$ bun install --verbose # debug logging
$ bun install --silent  # no logging
```

----------------------------------------

TITLE: Rerunning Bun Tests Multiple Times using Shell Command
DESCRIPTION: Illustrates how to use the `--rerun-each` flag to execute each test a specified number of times. This command reruns each test 100 times, which can help identify flaky or non-deterministic test failures.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/test.md#2025-04-22_snippet_8

LANGUAGE: sh
CODE:
```
$ bun test --rerun-each 100
```

----------------------------------------

TITLE: Importing HTTP/2 Testing Utilities in Node.js
DESCRIPTION: Example of importing the HTTP/2 testing utilities module which provides tools for creating mock HTTP/2 frames for testing HTTP/2 endpoints.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
const http2 = require('../common/http2');
```

----------------------------------------

TITLE: Setting Expiration for Presigned URLs
DESCRIPTION: Demonstrates how to set an expiration time for presigned URLs using the expiresIn option. The example also shows how to set an ACL and HTTP method for the presigned URL.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
const url = s3file.presign({
  // Seconds
  expiresIn: 3600, // 1 hour

  // access control list
  acl: "public-read",

  // HTTP method
  method: "PUT",
});
```

----------------------------------------

TITLE: Test with Done Callback
DESCRIPTION: Shows how to use the done callback pattern for async tests
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/writing.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { expect, test } from "bun:test";

test("2 * 2", done => {
  Promise.resolve(2 * 2).then(result => {
    expect(result).toEqual(4);
    done();
  });
});
```

----------------------------------------

TITLE: Configuring loader in Bun Build (CLI)
DESCRIPTION: Command-line interface for mapping file extensions to loader types for custom file processing.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_53

LANGUAGE: bash
CODE:
```
$ bun build ./index.tsx --outdir ./out --loader .png:dataurl --loader .txt:file
```

----------------------------------------

TITLE: Running Scripts in Workspace Packages Without cd using Bun Run --filter (Bash)
DESCRIPTION: Illustrates usage of bun run with --filter to execute scripts in workspace packages irrespective of the current working directory. The example runs 'myscript' from src/bar in the src/foo workspace, as long as foo is part of the workspace. This leverages workspace configuration in Bun, requiring proper package.json settings.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/filter.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
# Packages
# src/foo
# src/bar

# in src/bar: runs myscript in src/foo, no need to cd!
bun run --filter foo myscript

```

----------------------------------------

TITLE: TypedArray Memory Deallocator Callback Signature (C)
DESCRIPTION: Defines the expected C callback signature for freeing TypedArray memory from native code, used when passing deallocation logic to toArrayBuffer or toBuffer. Arguments are a pointer to the memory and an optional context. This function is called when the JavaScript object is garbage collected.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/ffi.md#2025-04-22_snippet_12

LANGUAGE: c
CODE:
```
typedef void (*JSTypedArrayBytesDeallocator)(void *bytes, void *deallocatorContext);
```

----------------------------------------

TITLE: Converting TypedArray to Pointer in Bun (TypeScript)
DESCRIPTION: Demonstrates how to convert a TypedArray (e.g., Uint8Array) into a pointer value using the ptr utility from 'bun:ffi'. Requires Bun's FFI module. The function receives a TypedArray and returns a number representing the pointer. Inputs are the array; output is a pointer usable in subsequent FFI calls.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/ffi.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
import { ptr } from "bun:ffi";
let myTypedArray = new Uint8Array(32);
const myPtr = ptr(myTypedArray);

```

----------------------------------------

TITLE: Installing Bun (npm)
DESCRIPTION: Installs Bun globally using npm, the Node.js package manager. This makes Bun available from the command line.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_6

LANGUAGE: bash
CODE:
```
$ npm install -g bun
```

----------------------------------------

TITLE: Example Entry Point Import - entry-b.ts - TypeScript
DESCRIPTION: Another entrypoint, identical in function to entry-a.ts, showing multiple files importing the same shared module for code splitting demonstration. Expects './shared.ts' in the same directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_28

LANGUAGE: TypeScript
CODE:
```
import { shared } from './shared.ts';
```

----------------------------------------

TITLE: CSS Property Shorthands
DESCRIPTION: Demonstrates modern CSS shorthand properties and how Bun converts them to longhand equivalents for broader browser support.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_24

LANGUAGE: css
CODE:
```
.flex-container {
  place-items: center start;
  place-content: space-between center;
}

.grid-item {
  place-self: end center;
}

.content-box {
  overflow: hidden auto;
}

.fancy-link {
  text-decoration: underline dotted blue 2px;
}

.component {
  display: inline flex;
}
```

LANGUAGE: css
CODE:
```
.flex-container {
  align-items: center;
  justify-items: start;
  align-content: space-between;
  justify-content: center;
}

.grid-item {
  align-self: end;
  justify-self: center;
}

.content-box {
  overflow-x: hidden;
  overflow-y: auto;
}

.fancy-link {
  text-decoration-line: underline;
  text-decoration-style: dotted;
  text-decoration-color: blue;
  text-decoration-thickness: 2px;
}

.component {
  display: inline-flex;
}
```

----------------------------------------

TITLE: Configuring Chunk Naming in Bun.build using TypeScript
DESCRIPTION: This TypeScript snippet shows how to configure the naming template for code chunks generated during the build process using `Bun.build`. It utilizes the `naming` object with the `chunk` key set to `"[name].[ext]"`. Similar to asset naming, the `[ext]` part is required in the template.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/vs-esbuild.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
```ts
Bun.build({
  entrypoints: ["./index.tsx"],
  naming: {
    chunk: "[name].[ext]",
  },
});
```
```

----------------------------------------

TITLE: Checking File Existence with S3Client.exists
DESCRIPTION: Examples of checking if a file exists in S3 using both S3Client.exists static method and S3File instance method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_28

LANGUAGE: typescript
CODE:
```
import { S3Client } from "bun";

const credentials = {
  accessKeyId: "your-access-key",
  secretAccessKey: "your-secret-key",
  bucket: "my-bucket",
  // endpoint: "https://s3.us-east-1.amazonaws.com",
  // endpoint: "https://<account-id>.r2.cloudflarestorage.com", // Cloudflare R2
};

const exists = await S3Client.exists("my-file.txt", credentials);
```

----------------------------------------

TITLE: Array Result Format Query in TypeScript
DESCRIPTION: Demonstrates how to retrieve query results as arrays using the values() method instead of objects.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
const rows = await sql`SELECT * FROM users`.values();
console.log(rows);
```

----------------------------------------

TITLE: bcrypt Hash Format Example in Bun
DESCRIPTION: Illustrates the Modular Crypt Format used by bcrypt algorithm in Bun.password.hash. The format includes algorithm identifier, rounds, salt, and hash.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/hashing.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
await Bun.password.hash("hello", {
  algorithm: "bcrypt",
});
```

LANGUAGE: sh
CODE:
```
$2b$10$Lyj9kHYZtiyfxh2G60TEfeqs7xkkGiEFFDi3iJGc50ZG/XJ1sxIFi;
```

----------------------------------------

TITLE: Configuring Test Coverage in bunfig.toml
DESCRIPTION: This example demonstrates how to configure test coverage to exclude test files from the coverage report. Setting coverageSkipTestFiles to true will omit test files from coverage calculations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/coverage.md#2025-04-22_snippet_2

LANGUAGE: toml
CODE:
```
[test]
coverageSkipTestFiles = true       # default false
```

----------------------------------------

TITLE: Bun Install TypeScript Type Definitions
DESCRIPTION: TypeScript interface definitions for bunfig.toml configuration options, including install settings, registry configuration, cache settings, and lockfile options.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bun-install.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
export interface Root {
  install: Install;
}

export interface Install {
  scopes: Scopes;
  registry: Registry;
  production: boolean;
  saveTextLockfile: boolean;
  frozenLockfile: boolean;
  dryRun: boolean;
  optional: boolean;
  dev: boolean;
  peer: boolean;
  globalDir: string;
  globalBinDir: string;
  cache: Cache;
  lockfile: Lockfile;
  logLevel: "debug" | "error" | "warn";
}

type Registry =
  | string
  | {
      url?: string;
      token?: string;
      username?: string;
      password?: string;
    };

type Scopes = Record<string, Registry>;

export interface Cache {
  dir: string;
  disable: boolean;
  disableManifest: boolean;
}

export interface Lockfile {
  print?: "yarn";
  save: boolean;
}
```

----------------------------------------

TITLE: Character Set Glob Pattern
DESCRIPTION: Example of using character sets and ranges in glob patterns.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/glob.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
const glob = new Glob("ba[rz].ts");
glob.match("bar.ts"); // => true
glob.match("baz.ts"); // => true
glob.match("bat.ts"); // => false
```

----------------------------------------

TITLE: Filtering Tests by Name with Bun Test
DESCRIPTION: Use the -t/--test-name-pattern flag to filter tests by their names using regex patterns rather than file paths.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/discovery.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
# run all tests with "addition" in the name
$ bun test --test-name-pattern addition
```

----------------------------------------

TITLE: Configuring Bun to generate Yarn lockfiles by default
DESCRIPTION: Sets up bunfig.toml to automatically generate a Yarn-compatible lockfile with every install operation without needing to use the --yarn flag.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/yarnlock.md#2025-04-22_snippet_1

LANGUAGE: toml
CODE:
```
[install.lockfile]
print = "yarn"
```

----------------------------------------

TITLE: Initializing NAPI Project for Bun Native Plugin (Bash)
DESCRIPTION: Initializes a new Node API (NAPI) project using the `@napi-rs/cli`. This setup is the first step in creating a native plugin for Bun, providing the necessary boilerplate for a Rust-based NAPI module.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/plugins.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
bun add -g @napi-rs/cli
napi new
```

----------------------------------------

TITLE: Running Benchmark in Bun
DESCRIPTION: Command to execute the benchmark script using the Bun JavaScript runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/postgres/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
bun ./index.mjs
```

----------------------------------------

TITLE: Creating and Manipulating TypedArrays in JavaScript/TypeScript
DESCRIPTION: This snippet demonstrates initializing an ArrayBuffer and using the Uint8Array typed array to interpret and modify its bytes. It shows that contents are zero-initialized, numeric assignments behave like arrays (with out-of-bounds assignments being a no-op), and that Uint8Array provides a fixed-sized, view-based interface. Requires no dependencies beyond the standard JavaScript or TypeScript runtime; intended for environments supporting ES2015 (or later) TypedArray APIs. The code accepts a generic ArrayBuffer and outputs a Uint8Array view, with values accessed/modified via indices; assigning outside bounds has no effect.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/binary-data.md#2025-04-22_snippet_6

LANGUAGE: TypeScript
CODE:
```
const buffer = new ArrayBuffer(3);
const arr = new Uint8Array(buffer);

// contents are initialized to zero
console.log(arr); // Uint8Array(3) [0, 0, 0]

// assign values like an array
arr[0] = 0;
arr[1] = 10;
arr[2] = 255;
arr[3] = 255; // no-op, out of bounds
```

----------------------------------------

TITLE: Comparing Objects with Bun.deepEquals in TypeScript
DESCRIPTION: Demonstrates basic usage of Bun.deepEquals() to compare two objects with nested structures. This function is used internally by expect().toEqual() in Bun's test runner.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/deep-equals.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const a = { a: 1, b: 2, c: { d: 3 } };
const b = { a: 1, b: 2, c: { d: 3 } };

Bun.deepEquals(a, b); // true
```

----------------------------------------

TITLE: Committing and Pushing Bun Application Files to GitHub
DESCRIPTION: Git commands to stage the necessary files (app.ts, bun.lock, and package.json), commit the changes with a descriptive message, and push the commits to the main branch on GitHub.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/render.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
$ git add app.ts bun.lock package.json
$ git commit -m "Create simple Express app"
$ git push origin main
```

----------------------------------------

TITLE: State Preservation Between HMR Updates in Bun
DESCRIPTION: Demonstrates using import.meta.hot.data to maintain state between module instances during hot replacement. This example shows how to persist a React root between updates.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/hmr.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
import { createRoot } from "react-dom/client";
import { App } from "./app";

const root = import.meta.hot.data.root ??= createRoot(elem);
root.render(<App />); // re-use an existing root
```

----------------------------------------

TITLE: Structuring a Monorepo Project with Workspaces in Bun
DESCRIPTION: This snippet illustrates the directory structure of a monorepo project using Bun's workspaces. It shows the root package.json, node_modules, and individual package directories.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/workspaces.md#2025-04-22_snippet_1

LANGUAGE: txt
CODE:
```
.
├── package.json
├── node_modules
└── packages
    ├── stuff-a
    │   └── package.json
    └── stuff-b
        └── package.json
```

----------------------------------------

TITLE: Using Fake HTTP/2 Request Headers in Node.js Tests
DESCRIPTION: Example demonstrating how to use predefined fake HTTP/2 request headers (kFakeRequestHeaders) as the payload for an HTTP/2 HEADERS frame. This creates a minimal but valid HTTP/2 request for testing purposes.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
const frame = new http2.HeadersFrame(1, http2.kFakeRequestHeaders, 0, true);

socket.write(frame.data);
```

----------------------------------------

TITLE: Installing Bun
DESCRIPTION: Various installation methods for Bun including curl install script, Windows PowerShell, npm, Homebrew, and Docker.
SOURCE: https://github.com/oven-sh/bun/blob/main/README.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
# with install script (recommended)
curl -fsSL https://bun.sh/install | bash

# on windows
powershell -c "irm bun.sh/install.ps1 | iex"

# with npm
npm install -g bun

# with Homebrew
brew tap oven-sh/bun
brew install bun

# with Docker
docker pull oven/bun
docker run --rm --init --ulimit memlock=-1:-1 oven/bun
```

----------------------------------------

TITLE: Install LLVM on Fedora
DESCRIPTION: This command installs LLVM, Clang, and LLD development libraries on Fedora using dnf.  These are required for building Bun.  The command requires `sudo` for root privileges.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_11

LANGUAGE: bash
CODE:
```
$ sudo dnf install llvm clang lld-devel
```

----------------------------------------

TITLE: Running Tests Against Existing Snapshots
DESCRIPTION: Example of running the test again after a snapshot has been created. Bun compares the current value with the stored snapshot.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/snapshot.md#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
$ bun test
bun test v$BUN_LATEST_VERSION (9c68abdb)

test/snap.test.ts:
✓ snapshot [1.05ms]

 1 pass
 0 fail
 1 snapshots, 1 expect() calls
Ran 1 tests across 1 files. [101.00ms]
```

----------------------------------------

TITLE: Hex Color Format Examples in TypeScript
DESCRIPTION: Examples of converting colors to hexadecimal format using Bun.color() with 'hex' and 'HEX' output formats
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/color.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
Bun.color("hsl(0, 0%, 50%)", "hex"); // "#808080"
Bun.color("red", "hex"); // "#ff0000"
Bun.color(0xff0000, "hex"); // "#ff0000"
Bun.color({ r: 255, g: 0, b: 0 }, "hex"); // "#ff0000"
Bun.color([255, 0, 0], "hex"); // "#ff0000"
```

----------------------------------------

TITLE: Environment Variable Example: Shell Setup - Bash
DESCRIPTION: Shows how to set multiple environment variables in a Bash shell, preparing for a build with env inlining. Demonstrates required shell commands for reproducing CLI inlining behavior.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_40

LANGUAGE: Bash
CODE:
```
$ FOO=bar BAZ=123 ACME_PUBLIC_URL=https://acme.com
```

----------------------------------------

TITLE: Installing Production Dependencies Only
DESCRIPTION: Shows how to perform a production installation using the `--production` flag. This command installs only the packages listed under `dependencies` in `package.json`, omitting `devDependencies` and `optionalDependencies`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/install.md#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
$ bun install --production
```

----------------------------------------

TITLE: Creating a TOML Configuration File
DESCRIPTION: Example of a TOML configuration file containing project metadata including name, version, and author information.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/import-toml.md#2025-04-22_snippet_0

LANGUAGE: toml
CODE:
```
name = "bun"
version = "1.0.0"

[author]
name = "John Dough"
email = "john@dough.com"
```

----------------------------------------

TITLE: Running the Type-Safe Query Script with Bun (Shell)
DESCRIPTION: This shell command runs the main index script using Bun, outputting the queried movies as an array of objects from the database. Dependencies: Bun, type-safe query builder, EdgeDB instance running, migrated schema. Input: None. Output: Prints movies to the console in structured format.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/edgedb.md#2025-04-22_snippet_13

LANGUAGE: sh
CODE:
```
bun run index.ts
[
  {
    title: "The Matrix",
    releaseYear: 1999
  }, {
    title: "The Matrix Reloaded",
    releaseYear: 2003
  }, {
    title: "The Matrix Revolutions",
    releaseYear: 2003
  }
]
```

----------------------------------------

TITLE: Preprocessor Definitions Configuration in cc
DESCRIPTION: Example showing how to define preprocessor macros for C compilation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cc.md#2025-04-22_snippet_10

LANGUAGE: ts
CODE:
```
type Defines = Record<string, string>;

cc({
  source: "hello.c",
  define: {
    "NDEBUG": "1",
  },
});
```

----------------------------------------

TITLE: Installing Bun Dependencies (openSUSE Tumbleweed)
DESCRIPTION: Installs dependencies required for Bun development on openSUSE Tumbleweed using zypper. This includes compilers, build tools, and essential libraries.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_4

LANGUAGE: bash
CODE:
```
$ sudo zypper install go cmake ninja automake git icu rustup && rustup toolchain install stable
```

----------------------------------------

TITLE: Reading Environment Variables via process.env
DESCRIPTION: The standard way to read environment variables in Bun through the process.env object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_13

LANGUAGE: ts
CODE:
```
process.env.API_TOKEN; // => "secret"
```

----------------------------------------

TITLE: Configuring HTML Routes in Bun.serve()
DESCRIPTION: Setting up HTML routes in the Bun.serve() configuration to handle frontend routes along with API requests in the fetch handler.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/fullstack.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
Bun.serve({
  routes: {
    "/": homepage,
    "/dashboard": dashboard,
  }

  fetch(req) {
    // ... api requests
  },
});
```

----------------------------------------

TITLE: Basic Bun Server Setup for Debugging
DESCRIPTION: Simple web server implementation in TypeScript using Bun.serve() that logs request URLs and returns a hello world response.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/debugger.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
Bun.serve({
  fetch(req){
    console.log(req.url);
    return new Response("Hello, world!");
  }
})
```

----------------------------------------

TITLE: Connecting to inspector via Socket for local debugging in TypeScript
DESCRIPTION: TypeScript code showing how to create an inspector client using NodeSocketInspector for local debugging via a Unix/TCP socket connection.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-inspector-protocol/README.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { NodeSocketInspector } from "bun-inspector-protocol";
import { Socket } from "node:net";

// Create a socket connection
const socket = new Socket();
socket.connect("/path/to/debug/socket");

// Create a new inspector client
const inspector = new NodeSocketInspector(socket);

// Set up event listeners and use the API as with WebSocketInspector
inspector.on("Inspector.connected", () => {
  console.log("Connected to debugger via socket!");
});

await inspector.start();
// Use the same API as WebSocketInspector from here...
```

----------------------------------------

TITLE: Version Option Implementation in JavaScript
DESCRIPTION: Shows how to add version handling to a command line program with customizable flags and description.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
program.version('0.0.1');

program.version('0.0.1', '-v, --vers', 'output the current version');
```

----------------------------------------

TITLE: Checking Outdated @types Packages - Markdown
DESCRIPTION: Employs the Bun CLI terminal directive to identify outdated packages within the '@types/*' namespace. The snippet illustrates the use of globbing for TypeScript types packages, aiding users managing DefinitelyTyped dependencies. The directive is valid in Bun's Markdown documentation and operates on Bun’s internal rendering.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/outdated.md#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
{% bunOutdatedTerminal displayGlob="'@types/*'" glob="@types/*"  /%}
```

----------------------------------------

TITLE: Configuring Sourcemap Handling for Coverage
DESCRIPTION: This snippet shows how to configure sourcemap handling for coverage reporting. By default, Bun uses sourcemaps for mapping coverage data back to original source code. Setting coverageIgnoreSourcemaps to true disables this behavior.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/coverage.md#2025-04-22_snippet_5

LANGUAGE: toml
CODE:
```
[test]
coverageIgnoreSourcemaps = true   # default false
```

----------------------------------------

TITLE: Printing Global Bin Path with Bun
DESCRIPTION: Displays the absolute path to Bun's global binary directory using the `-g` flag. This is typically where globally installed packages place their executables (`$HOME/.bun/bin`).
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/pm.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ bun pm bin -g
<$HOME>/.bun/bin
```

----------------------------------------

TITLE: Installing bun-inspector-protocol using package managers
DESCRIPTION: Commands for installing the bun-inspector-protocol library using various package managers including Bun, npm, yarn, and pnpm.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-inspector-protocol/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
bun add bun-inspector-protocol
# npm install bun-inspector-protocol
# yarn add bun-inspector-protocol
# pnpm add bun-inspector-protocol
```

----------------------------------------

TITLE: Converting Absolute Path to file:// URL - Bun - TypeScript
DESCRIPTION: This snippet illustrates the use of Bun.pathToFileURL for converting an absolute path string into a file:// URL object. The function is helpful for adapting file paths for APIs that require URL objects. Bun must be installed for this API, and the output is a file URL string or object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_14

LANGUAGE: TypeScript
CODE:
```
const url = Bun.pathToFileURL("/foo/bar.txt");
console.log(url); // "file:///foo/bar.txt"
```

----------------------------------------

TITLE: Using Savepoints for Partial Rollbacks in Bun SQL Transactions (TypeScript)
DESCRIPTION: Demonstrates creating savepoints within a transaction using `tx.savepoint`. This allows defining a block of operations inside the savepoint's async callback (`sp`) that can be rolled back by throwing an error, without affecting the entire surrounding transaction. The main transaction can continue even if the savepoint is rolled back.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_18

LANGUAGE: typescript
CODE:
```
```ts
await sql.begin(async tx => {
  await tx`INSERT INTO users (name) VALUES (${ "Alice" })`;

  await tx.savepoint(async sp => {
    // This part can be rolled back separately
    await sp`UPDATE users SET status = 'active'`;
    if (someCondition) {
      throw new Error("Rollback to savepoint");
    }
  });

  // Continue with transaction even if savepoint rolled back
  await tx`INSERT INTO audit_log (action) VALUES ('user_created')`;
});
```
```

----------------------------------------

TITLE: Running Bun Test Suite
DESCRIPTION: Commands for setting up and running the Bun test suite using the internal test package.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/building-windows.md#2025-04-22_snippet_7

LANGUAGE: powershell
CODE:
```
# Setup
bun i --cwd packages\bun-internal-test

# Run the entire test suite with reporter
# the package.json script "test" uses "build/debug/bun-debug.exe" by default
bun run test

# Run an individual test file:
bun-debug test node\fs
bun-debug test "C:\bun\test\js\bun\resolve\import-meta.test.js"
```

----------------------------------------

TITLE: Text File Conversion in Bundler
DESCRIPTION: Demonstrates how a text file gets converted when used as an entrypoint in the bundler. The text content is transformed into a JavaScript module with a default export.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/loaders.md#2025-04-22_snippet_6

LANGUAGE: txt
CODE:
```
Hello, world!
```

LANGUAGE: js
CODE:
```
export default "Hello, world!";
```

----------------------------------------

TITLE: Building with CJS Format - Bun CLI - CLI
DESCRIPTION: Performs a build with CommonJS format using the command line interface. Requires specifying the entry file, output directory, and format. Outputs CommonJS modules compatible with Bun and Node.js when the used APIs are supported.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_24

LANGUAGE: CLI
CODE:
```
$ bun build ./index.tsx --outdir ./out --format cjs
```

----------------------------------------

TITLE: Example JavaScript code for client-side detection
DESCRIPTION: This JavaScript snippet shows a common pattern for detecting client-side code, which can be affected by the window replacement.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/define-constant.md#2025-04-22_snippet_6

LANGUAGE: js
CODE:
```
if (typeof window !== "undefined") {
  console.log("Client-side code");
} else {
  console.log("Server-side code");
}
```

----------------------------------------

TITLE: Managing Redis Connection Lifecycle in Bun
DESCRIPTION: Illustrates automatic and manual connection management for Redis clients in Bun, including connecting, executing commands, and closing connections.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/redis.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// No connection is made until a command is executed
const client = new RedisClient();

// First command initiates the connection
await client.set("key", "value");

// Connection remains open for subsequent commands
await client.get("key");

// Explicitly close the connection when done
client.close();
```

LANGUAGE: typescript
CODE:
```
const client = new RedisClient();

// Explicitly connect
await client.connect();

// Run commands
await client.set("key", "value");

// Disconnect when done
client.close();
```

----------------------------------------

TITLE: Setting Description and Summary in Commander.js
DESCRIPTION: This demonstrates how to set both a detailed description and a shorter summary for a command. The summary is displayed when the command is listed as a subcommand.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_33

LANGUAGE: javascript
CODE:
```
program
  .command("duplicate")
  .summary("make a copy")
  .description(`Make a copy of the current project.
This may require additional disk space.
  `);
```

----------------------------------------

TITLE: Loading Node-API Modules with process.dlopen() in Bun
DESCRIPTION: Shows the alternative method of loading a .node native module in Bun using process.dlopen(). This method gives more control over the module loading process by explicitly creating the module object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/node-api.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
let mod = { exports: {} };
process.dlopen(mod, "./my-node-module.node");
```

----------------------------------------

TITLE: Displaying CSS HMR Frame Time Statistics for Bun
DESCRIPTION: This output shows the results of the CSS HMR frame time analysis for the Bun project. It displays frame time statistics at different percentiles and the percentage of rendered frames.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/hot-module-reloading/css-stress-test/bun.latest.32ms.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
bun
 --------------------------------------------------
 CSS HMR FRAME TIME

 50th percentile: 40.7ms 
 75th percentile: 42.3ms 
 90th percentile: 43.5ms 
 95th percentile: 76.4ms 
 99th percentile: 118.8ms 
 Rendered frames: 958 / 1024 (94%)
```

----------------------------------------

TITLE: Installing LLVM 19 (Ubuntu/Debian)
DESCRIPTION: Installs LLVM 19 on Ubuntu/Debian using the official LLVM apt repository. Downloads and executes an installation script for the specified LLVM version.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_9

LANGUAGE: bash
CODE:
```
$ # LLVM has an automatic installation script that is compatible with all versions of Ubuntu
$ wget https://apt.llvm.org/llvm.sh -O - | sudo bash -s -- 19 all
```

----------------------------------------

TITLE: BuildMessage and ResolveMessage Class Definitions
DESCRIPTION: TypeScript classes defining the structure of build and resolve error messages used in Bun's build system.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_68

LANGUAGE: typescript
CODE:
```
class BuildMessage {
  name: string;
  position?: Position;
  message: string;
  level: "error" | "warning" | "info" | "debug" | "verbose";
}

class ResolveMessage extends BuildMessage {
  code: string;
  referrer: string;
  specifier: string;
  importKind: ImportKind;
}
```

----------------------------------------

TITLE: Creating Package Tarballs
DESCRIPTION: Command and output example for creating a package tarball using bun package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/from-npm-install-to-bun-install.md#2025-04-22_snippet_6

LANGUAGE: sh
CODE:
```
# Create a tarball
$ bun pm pack

Total files: 46
Shasum: 2ee19b6f0c6b001358449ca0eadead703f326216
Integrity: sha512-ZV0lzWTEkGAMz[...]Gl4f8lA9sl97g==
Unpacked size: 0.41MB
Packed size: 117.50KB
```

----------------------------------------

TITLE: Basic Directory Watching with fs.watch in Bun
DESCRIPTION: This snippet demonstrates how to watch for file system changes in the current directory using the fs.watch function. This implementation is shallow and won't detect changes in subdirectories.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/read-file/watch.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { watch } from "fs";

const watcher = watch(import.meta.dir, (event, filename) => {
  console.log(`Detected ${event} in ${filename}`);
});
```

----------------------------------------

TITLE: Displaying CSS HMR Frame Time Performance Metrics
DESCRIPTION: Output from the analysis script showing frame time performance metrics for CSS Hot Module Replacement in Bun. It includes percentile statistics (50th, 75th, 90th, 95th, 99th) and the percentage of rendered frames.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/hot-module-reloading/css-stress-test/bun.latest.24ms.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
bun
 --------------------------------------------------
 CSS HMR FRAME TIME

 50th percentile: 33.4ms 
 75th percentile: 34.5ms 
 90th percentile: 35.8ms 
 95th percentile: 65.5ms 
 99th percentile: 87.9ms 
 Rendered frames: 937 / 1024 (92%)
```

----------------------------------------

TITLE: Disabling Environment Variable Injection - JavaScript
DESCRIPTION: Shows bundle output where environment variable injection has been disabled. Used for security or to prevent any replacement of process.env references during bundling. All process.env references remain in the output.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_43

LANGUAGE: JavaScript
CODE:
```
console.log(process.env.FOO);
console.log(process.env.BAZ);
```

----------------------------------------

TITLE: Starting StricJS Development Server
DESCRIPTION: Command to run the server in watch mode for development.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/stric.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
$ bun --watch run index.ts
```

----------------------------------------

TITLE: Test Suite Definition with Describe
DESCRIPTION: Shows how to group related tests into a test suite using describe blocks
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/writing.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { expect, test, describe } from "bun:test";

describe("arithmetic", () => {
  test("2 + 2", () => {
    expect(2 + 2).toBe(4);
  });

  test("2 * 2", () => {
    expect(2 * 2).toBe(4);
  });
});
```

----------------------------------------

TITLE: Specifying tarball dependencies in package.json
DESCRIPTION: JSON configuration showing how to specify a tarball dependency in the package.json file using a direct URL to the .tgz file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/index.md#2025-04-22_snippet_8

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "zod": "https://registry.npmjs.org/zod/-/zod-3.21.4.tgz"
  }
}
```

----------------------------------------

TITLE: Setting Detailed Coverage Thresholds in Bun Tests
DESCRIPTION: Configures different thresholds for line, function, and statement coverage in Bun tests.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_12

LANGUAGE: toml
CODE:
```
[test]
coverageThreshold = { line = 0.7, function = 0.8, statement = 0.9 }
```

----------------------------------------

TITLE: Setting PowerShell Execution Policy
DESCRIPTION: Configures PowerShell to allow running unverified scripts by setting the execution policy to Unrestricted for the current user.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/building-windows.md#2025-04-22_snippet_0

LANGUAGE: powershell
CODE:
```
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted
```

----------------------------------------

TITLE: Example Index HTML File for Bun Bundling
DESCRIPTION: An example HTML file that will be processed by Bun's bundler. Bun will bundle scripts and stylesheets referenced in the HTML file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/fullstack.md#2025-04-22_snippet_4

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
  <head>
    <title>Home</title>
    <link rel="stylesheet" href="./reset.css" />
    <link rel="stylesheet" href="./styles.css" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="./sentry-and-preloads.ts"></script>
    <script type="module" src="./my-app.tsx"></script>
  </body>
</html>
```

----------------------------------------

TITLE: ASCII Art Output from Figlet in Bun Server
DESCRIPTION: The ASCII art representation of 'Bun!' generated by the figlet package and displayed when accessing the HTTP server.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/quickstart.md#2025-04-22_snippet_9

LANGUAGE: txt
CODE:
```
  ____              _
 | __ ) _   _ _ __ | |
 |  _ \| | | | '_ \| |
 | |_) | |_| | | | |_|
 |____/ \__,_|_| |_(_)
```

----------------------------------------

TITLE: Excluding @types Packages from Outdated Check - Markdown
DESCRIPTION: Demonstrates use of a custom Markdown directive to exclude all '@types/*' dependencies from being checked as outdated. The exclusion is specified by the negated glob pattern '!@types/*' passed to the 'glob' argument. This requires a workspace with '@types' dependencies to observe its effect.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/outdated.md#2025-04-22_snippet_4

LANGUAGE: markdown
CODE:
```
{% bunOutdatedTerminal displayGlob="'!@types/*'" glob="!@types/*"  /%}
```

----------------------------------------

TITLE: Installing Commander Package
DESCRIPTION: NPM command to install the Commander.js package
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npm install commander
```

----------------------------------------

TITLE: Publishing Messages to All Subscribers (TypeScript)
DESCRIPTION: This example illustrates how to publish messages to all subscribers of a topic, including the socket that initiated the publish, using `server.publish()`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/websockets.md#_snippet_8

LANGUAGE: typescript
CODE:
```
const server = Bun.serve({
  websocket: {
    // ...
  },
});

// listen for some external event
server.publish("the-group-chat", "Hello world");
```

----------------------------------------

TITLE: Creating a Project from GitHub Repo in Bun
DESCRIPTION: Demonstrates using 'bun create' to clone and set up a project from a GitHub repository.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bun-create.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
$ bun create <user>/<repo>
$ bun create github.com/<user>/<repo>
```

----------------------------------------

TITLE: Illustrating Standard TOML Comment Syntax
DESCRIPTION: Demonstrates the standard TOML comment syntax using only the '#' character to start comments.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bun-flavored-toml.md#2025-04-22_snippet_1

LANGUAGE: toml
CODE:
```
# This is a comment
```

----------------------------------------

TITLE: Configuring Install Scopes for Multiple Companies in TOML
DESCRIPTION: This snippet sets up install scopes for different companies, specifying tokens and URLs for package registries.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/bun/resolve/toml/toml-fixture.toml.txt#2025-04-22_snippet_2

LANGUAGE: toml
CODE:
```
[install.scopes]
"@mybigcompany2" = { "token" = "123456", "url" = "https://registry.mybigcompany.com" }
"@mybigcompany3" = { "token" = "123456", "url" = "https://registry.mybigcompany.com", "three" = 4 }

[install.scopes."@mybigcompany"]
token = "123456"
url = "https://registry.mybigcompany.com"
```

----------------------------------------

TITLE: Writing to stdout using console.log in TypeScript
DESCRIPTION: Demonstrates the basic usage of console.log to write to stdout. The function automatically appends a line break at the end of the printed data.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/write-file/stdout.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
console.log("Lorem ipsum");
```

----------------------------------------

TITLE: Testing Module Exports with Bun Build
DESCRIPTION: Shows how to test module exports using runtimeFiles in a Bun build test, including importing the bundled output and checking its contents.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/bundler/expectBundled.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
itBundled("importstar/ExportSelfES6", {
  files: {
    "/entry.js": /* js */ `
      export const foo = 123
      export * from './entry'
    `,
  },
  format: "esm",
  runtimeFiles: {
    "/test.js": /* js */ `
      import * as foo from './out.js'
      console.log(JSON.stringify(foo));
    `,
  },
  run: {
    file: "/test.js",
    stdout: '{"foo":123}',
  },
});
```

----------------------------------------

TITLE: JSON Conversion in Bundler
DESCRIPTION: Demonstrates how a JSON file gets converted when used as an entrypoint in the bundler. The JSON is transformed into a JavaScript module with a default export.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/loaders.md#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
{
  "name": "John Doe",
  "age": 35,
  "email": "johndoe@example.com"
}
```

LANGUAGE: js
CODE:
```
export default {
  name: "John Doe",
  age: 35,
  email: "johndoe@example.com"
}
```

----------------------------------------

TITLE: Spawning a Bun process with inspector attached
DESCRIPTION: Command to start a Bun process with the inspector attached using the --inspect-wait flag, and a command to extract the WebSocket URL from the output.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-inspector-protocol/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
bun --inspect-wait my-script.ts
```

LANGUAGE: bash
CODE:
```
bun --inspect-wait my-script.ts 2>&1 | grep -o '\sws://.*$'
```

----------------------------------------

TITLE: CSS Selector Examples for HTMLRewriter
DESCRIPTION: Comprehensive examples of supported CSS selectors including tag, class, ID, attribute, combinator, and pseudo-class selectors.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/html-rewriter.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
// Tag selectors
rewriter.on("p", handler);

// Class selectors
rewriter.on("p.red", handler);

// ID selectors
rewriter.on("h1#header", handler);

// Attribute selectors
rewriter.on("p[data-test]", handler); // Has attribute
rewriter.on('p[data-test="one"]', handler); // Exact match
rewriter.on('p[data-test="one" i]', handler); // Case-insensitive
rewriter.on('p[data-test="one" s]', handler); // Case-sensitive
rewriter.on('p[data-test~="two"]', handler); // Word match
rewriter.on('p[data-test^="a"]', handler); // Starts with
rewriter.on('p[data-test$="1"]', handler); // Ends with
rewriter.on('p[data-test*="b"]', handler); // Contains
rewriter.on('p[data-test|="a"]', handler); // Dash-separated

// Combinators
rewriter.on("div span", handler); // Descendant
rewriter.on("div > span", handler); // Direct child

// Pseudo-classes
rewriter.on("p:nth-child(2)", handler);
rewriter.on("p:first-child", handler);
rewriter.on("p:nth-of-type(2)", handler);
rewriter.on("p:first-of-type", handler);
rewriter.on("p:not(:first-child)", handler);

// Universal selector
rewriter.on("*", handler);
```

----------------------------------------

TITLE: Getting File Size with S3Client.size
DESCRIPTION: Shows how to retrieve the size of an S3 file without downloading it using S3Client.size static method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_29

LANGUAGE: typescript
CODE:
```
import { S3Client } from "bun";

const credentials = {
  accessKeyId: "your-access-key",
  secretAccessKey: "your-secret-key",
  bucket: "my-bucket",
  // endpoint: "https://s3.us-east-1.amazonaws.com",
  // endpoint: "https://<account-id>.r2.cloudflarestorage.com", // Cloudflare R2
};

const bytes = await S3Client.size("my-file.txt", credentials);
```

----------------------------------------

TITLE: High-precision timing with Bun.nanoseconds() in TypeScript
DESCRIPTION: Shows how to use Bun.nanoseconds() to get high-precision timing information. Returns the number of nanoseconds since the current process started, useful for benchmarking.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_25

LANGUAGE: typescript
CODE:
```
Bun.nanoseconds();
// => 7288958
```

----------------------------------------

TITLE: Sending Different Data Types via IPC
DESCRIPTION: Examples of sending different data types through IPC channels using JSC serialize API, supporting transferrable types like strings and objects.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/ipc.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
// send a string
process.send("Hello from child as string");

// send an object
process.send({ message: "Hello from child as object" });
```

----------------------------------------

TITLE: Installing Dependencies for Specific Workspaces
DESCRIPTION: Demonstrates how to use the --filter flag with bun install to install dependencies for specific workspaces in a monorepo.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/workspaces.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
# Install dependencies for all workspaces starting with `pkg-` except for `pkg-c`
$ bun install --filter "pkg-*" --filter "!pkg-c"

# Paths can also be used. This is equivalent to the command above.
$ bun install --filter "./packages/pkg-*" --filter "!pkg-c" # or --filter "!./packages/pkg-c"
```

----------------------------------------

TITLE: Inter-Process Communication (IPC) in Parent Process with TypeScript
DESCRIPTION: Shows how to set up IPC in the parent process to communicate with a Bun child process.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
const childProc = Bun.spawn(["bun", "child.ts"], {
  ipc(message, childProc) {
    /**
     * The message received from the sub process
     **/
    childProc.send("Respond to child")
  },
});

childProc.send("I am your father"); // The parent can send messages to the child as well
```

----------------------------------------

TITLE: Running CSS HMR Performance Measurement Script for Bun
DESCRIPTION: Command to execute a Node.js script that reads and analyzes frame time data for CSS Hot Module Reload in Bun. It sets the SLEEP_INTERVAL environment variable to 16 and the PROJECT environment variable to 'bun'.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/hot-module-reloading/css-stress-test/bun.latest.16ms.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
SLEEP_INTERVAL=16 PROJECT=bun node read-frames.js
```

----------------------------------------

TITLE: Creating a Worker with Preloaded Modules
DESCRIPTION: Example of creating a Worker with the preload option to load modules before the worker starts, useful for initialization code like loading monitoring tools.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/workers.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
const worker = new Worker("./worker.ts", {
  preload: ["./load-sentry.js"],
});
```

----------------------------------------

TITLE: Package.json with Exports Conditions
DESCRIPTION: Example package.json showing how to configure export conditions for different environments.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_12

LANGUAGE: jsonc
CODE:
```
{
  "name": "foo",
  "exports": {
    "bun": "./index.js",
    "node": "./index.js",
    "require": "./index.js", // if importer is CommonJS
    "import": "./index.mjs", // if importer is ES module
    "default": "./index.js"
  }
}
```

----------------------------------------

TITLE: Converting Uint8Array to DataView with TypeScript
DESCRIPTION: This snippet shows how to create a DataView using the buffer, byteOffset, and byteLength of an existing Uint8Array. It allows random-access reading and writing of various binary formats on the same data as the original Uint8Array. Dependencies include ES2015+ JavaScript support; required parameters are a Uint8Array instance (arr). The output is a DataView instance (dv) referencing the same bytes. This method works for any subarray and preserves the original offset and length.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/typedarray-to-dataview.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
const arr: Uint8Array = ...
const dv = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
```

----------------------------------------

TITLE: Sample Query Results Structure (JSON)
DESCRIPTION: Displays an example JSON structure of results returned from a query with named parameters, illustrating the shape and content of a Bun query response.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_19

LANGUAGE: JSON
CODE:
```
[
  { "$bar": "bar" }
]

```

----------------------------------------

TITLE: Generated Snapshot File Content in JavaScript
DESCRIPTION: Example of the generated snapshot file content. The snapshot file is a JavaScript file that exports a serialized version of the value used in the test.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/snapshot.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot 1`] = `
{
  "foo": "bar",
}
`;
```

----------------------------------------

TITLE: Marking a Test as Todo in Bun Test Runner (TypeScript)
DESCRIPTION: This snippet shows how to use test.todo to mark a test for future implementation without providing an actual test function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/todo-tests.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { test, expect } from "bun:test";

// write this later
test.todo("unimplemented feature");
```

----------------------------------------

TITLE: JSX Output with Custom Factory
DESCRIPTION: Transpiled output when using a custom JSX factory, showing how the specified function name is used instead of createElement in the transformed code.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_11

LANGUAGE: tsx
CODE:
```
import { h } from "react";
h("Box", { width: 5 }, "Hello");
```

----------------------------------------

TITLE: Configuring JUnit Reporter Output Path
DESCRIPTION: Specifies the output file path for JUnit XML reports when using the JUnit test reporter.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/configuration.md#2025-04-22_snippet_2

LANGUAGE: toml
CODE:
```
[test.reporter]
junit = "path/to/junit.xml"  # Output path for JUnit XML report
```

----------------------------------------

TITLE: Building Bun with Dynamic libatomic Linking
DESCRIPTION: This command builds Bun with dynamic linking for `libatomic`. It is used if the system does not have a static `libatomic` library available. It uses `bun run build` with the `-DUSE_STATIC_LIBATOMIC=OFF` flag.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_34

LANGUAGE: bash
CODE:
```
$ bun run build -DUSE_STATIC_LIBATOMIC=OFF
```

----------------------------------------

TITLE: Building with CJS Format - Bun JavaScript API - JavaScript
DESCRIPTION: Builds a CommonJS-format bundle using the Bun.build JavaScript API. Sets entrypoints, output directory, and format 'cjs'. Target defaults to 'node' for CJS. Allows use in both Bun and Node.js if APIs are supported by both. Requires JavaScript/TypeScript source files and Bun installed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_23

LANGUAGE: JavaScript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './out',
  format: "cjs",
})
```

----------------------------------------

TITLE: Overriding Default CA List for Bun HTTP Server TLS in TypeScript
DESCRIPTION: This snippet demonstrates how to override the default Mozilla-curated list of trusted root CAs when configuring TLS for a Bun HTTP server. It uses the 'ca' property to specify an array of custom CA certificates.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/http/tls.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const server = Bun.serve({
  fetch: request => new Response("Welcome to Bun!"),
  tls: {
    cert: Bun.file("cert.pem"),
    key: Bun.file("key.pem"),
    ca: [Bun.file("ca1.pem"), Bun.file("ca2.pem")],
  },
});
```

----------------------------------------

TITLE: Contributing to bun-plugin-yaml
DESCRIPTION: Bash commands for setting up the project and running tests when contributing to the bun-plugin-yaml project.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-plugin-yaml/README.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
$ bun install # project setup
$ bun test # run tests
```

----------------------------------------

TITLE: Using CString for String Handling in FFI
DESCRIPTION: This snippet demonstrates how to use the CString class from bun:ffi to handle C-style strings in JavaScript. It shows conversion from null-terminated string pointers and pointers with known length to JavaScript strings.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/ffi.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
const myString = new CString(ptr);

// With known length
const myString = new CString(ptr, 0, byteLength);

my_library_free(myString.ptr);

// this is safe because myString is a clone
console.log(myString);
```

----------------------------------------

TITLE: Output Bundle Example
DESCRIPTION: An example of the output JavaScript bundle that includes the React component and initialization code, representing what Bun generates after bundling.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
// ...
// ~20k lines of code
// including the contents of `react-dom/client` and all its dependencies
// this is where the $jsxDEV and $createRoot functions are defined


// Component.tsx
function Component(props) {
  return $jsxDEV("p", {
    children: props.message
  }, undefined, false, undefined, this);
}

// index.tsx
var rootNode = document.getElementById("root");
var root = $createRoot(rootNode);
root.render($jsxDEV(Component, {
  message: "Sup!"
}, undefined, false, undefined, this));
```

----------------------------------------

TITLE: Defining and Compiling an Addition Function in C++
DESCRIPTION: This snippet shows how to create a simple addition function in C++ and compile it as a dynamic library for use with bun:ffi.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/ffi.md#2025-04-22_snippet_3

LANGUAGE: cpp
CODE:
```
#include <cstdint>

extern "C" int32_t add(int32_t a, int32_t b) {
    return a + b;
}
```

LANGUAGE: bash
CODE:
```
$ zig build-lib add.cpp -dynamic -lc -lc++
```

----------------------------------------

TITLE: Running Bun Release Commands
DESCRIPTION: Commands for building and publishing Bun release assets to npm. Supports building latest release, specific release versions, and optional publishing with dry-run capability.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-release/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
bun run npm # build assets for the latest release
bun run npm -- <release> # build assets for the provided release
bun run npm -- <release> [dry-run|publish] # build and publish assets to npm
```

----------------------------------------

TITLE: HTMLRewriter Input Types Example
DESCRIPTION: Demonstrates different input types that HTMLRewriter can handle, including Response, string, ArrayBuffer, Blob, and File.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/html-rewriter.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// From Response
rewriter.transform(new Response("<div>content</div>"));

// From string
rewriter.transform("<div>content</div>");

// From ArrayBuffer
rewriter.transform(new TextEncoder().encode("<div>content</div>").buffer);

// From Blob
rewriter.transform(new Blob(["<div>content</div>"]));

// From File
rewriter.transform(Bun.file("index.html"));
```

----------------------------------------

TITLE: Executing a Defined Package.json Script with Bun Run
DESCRIPTION: Demonstrates executing the `clean` script (defined as `rm -rf dist && echo 'Done.'` in the example `package.json`) using the `bun run clean` command. The output shows the underlying shell command being executed and its console output.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/run.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
$ bun run clean
 $ rm -rf dist && echo 'Done.'
 Cleaning...
 Done.
```

----------------------------------------

TITLE: Installing Bun via npm
DESCRIPTION: This command installs Bun globally using npm. It allows users to install Bun on their system for use across multiple projects.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-release/npm/bun/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npm install -g bun
```

----------------------------------------

TITLE: CommonJS Module Import
DESCRIPTION: Imports the Node.js built-in path module using CommonJS require() syntax. Demonstrates the traditional Node.js module import pattern.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/document_with_esm_and_cjs_code_snippet.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
require('path');
```

----------------------------------------

TITLE: Hot Reloading Handlers for a TCP Client
DESCRIPTION: Updates the event handlers for a client socket without disconnecting, allowing for dynamic behavior changes in a connected client.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/tcp.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
const socket = await Bun.connect({ /* config */ })
socket.reload({
  data(){
    // new 'data' handler
  }
})
```

----------------------------------------

TITLE: Example TypeScript code using AWS object
DESCRIPTION: This TypeScript snippet shows how the AWS object would be used before the --define transformation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/define-constant.md#2025-04-22_snippet_9

LANGUAGE: ts
CODE:
```
console.log(AWS.ACCESS_KEY); // => "abc"
```

----------------------------------------

TITLE: Listing String Escape Characters in Bun-flavored TOML
DESCRIPTION: Provides a comprehensive list of string escape characters supported in Bun-flavored TOML, including additional sequences for better JavaScript compatibility and standard TOML escape sequences.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bun-flavored-toml.md#2025-04-22_snippet_2

LANGUAGE: toml
CODE:
```
# Bun-flavored TOML extras
\x{XX}     - ASCII           (U+00XX)
\u{x+}     - unicode         (U+0000000X) - (U+XXXXXXXX)
\v         - vertical tab

# Regular TOML
\b         - backspace       (U+0008)
\t         - tab             (U+0009)
\n         - linefeed        (U+000A)
\f         - form feed       (U+000C)
\r         - carriage return (U+000D)
\"         - quote           (U+0022)
\\         - backslash       (U+005C)
\uXXXX     - unicode         (U+XXXX)
\UXXXXXXXX - unicode         (U+XXXXXXXX)
```

----------------------------------------

TITLE: Package.json Export Conditions Configuration
DESCRIPTION: Configuration example showing how to set up export conditions for macro packages.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/macros.md#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
{
  "name": "my-package",
  "exports": {
    "import": "./index.js",
    "require": "./index.js",
    "default": "./index.js",
    "macro": "./index.macro.js"
  }
}
```

----------------------------------------

TITLE: Setting Environment Variables via Command Line on Windows
DESCRIPTION: Windows-specific commands for setting environment variables when running Bun applications using CMD or PowerShell.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/env.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
# Using CMD
$ set FOO=helloworld && bun run dev

# Using PowerShell
$ $env:FOO="helloworld"; bun run dev
```

----------------------------------------

TITLE: Creating Snapshot Test in TypeScript with Bun
DESCRIPTION: Example showing how to write a basic snapshot test using Bun's test runner with the .toMatchSnapshot() assertion
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/update-snapshots.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { test, expect } from "bun:test";

test("snapshot", () => {
  expect({ foo: "bar" }).toMatchSnapshot();
});
```

----------------------------------------

TITLE: Importing JSON and TOML Files in TypeScript
DESCRIPTION: Demonstrates how to import JSON and TOML configuration files in a TypeScript environment. Bun automatically loads these files as JavaScript objects.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/index.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
import pkg from "./package.json";
import bunfig from "./bunfig.toml";
```

----------------------------------------

TITLE: Global Package Installation
DESCRIPTION: Commands for installing and running packages globally using bun package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/from-npm-install-to-bun-install.md#2025-04-22_snippet_8

LANGUAGE: sh
CODE:
```
# Install a package globally
$ bun i -g eslint

# Run a globally-installed package without the `bun run` prefix
$ eslint --init
```

----------------------------------------

TITLE: Implementing Commands with Action Handlers in JavaScript
DESCRIPTION: Demonstrates how to create commands using .command() with action handlers. This snippet shows how to define a command with required and optional arguments, then implement its functionality through an action handler.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
// Command implemented using action handler (description is supplied separately to `.command`)
// Returns new command for configuring.
program
  .command('clone <source> [destination]')
  .description('clone a repository into a newly created directory')
  .action((source, destination) => {
    console.log('clone command called');
  });

// Command implemented using stand-alone executable file, indicated by adding description as second parameter to `.command`.
// Returns `this` for adding more commands.
program
  .command('start <service>', 'start named service')
  .command('stop [service]', 'stop named service, or all if no name supplied');

// Command prepared separately.
// Returns `this` for adding more commands.
program
  .addCommand(build.makeBuildCommand());
```

----------------------------------------

TITLE: Generating Lockfile Without Installing in Bun
DESCRIPTION: Creates a bun.lock file without installing dependencies to node_modules using the --lockfile-only flag. This will still populate the global install cache with registry metadata and git/tarball dependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/lockfile.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ bun install --lockfile-only
```

----------------------------------------

TITLE: Using fileControl API for WAL Mode Configuration in Bun SQLite
DESCRIPTION: Demonstrates how to use the fileControl method to configure SQLite to prevent WAL (Write-Ahead Logging) files from persisting after the database is closed.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_30

LANGUAGE: typescript
CODE:
```
import { Database, constants } from "bun:sqlite";

const db = new Database();
// Ensure WAL mode is NOT persistent
// this prevents wal files from lingering after the database is closed
db.fileControl(constants.SQLITE_FCNTL_PERSIST_WAL, 0);
```

----------------------------------------

TITLE: ES Module Import
DESCRIPTION: Shows importing the URL module using ES Modules import syntax with the node: protocol prefix. This is the modern JavaScript module import method.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/document_with_cjs_and_esm_code_snippet.md#2025-04-22_snippet_1

LANGUAGE: mjs
CODE:
```
import 'node:url';
```

----------------------------------------

TITLE: Building Bun Release
DESCRIPTION: Compiles a release build of Bun using the `build:release` script defined in package.json. The output binaries are located in `./build/release/`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_20

LANGUAGE: bash
CODE:
```
$ bun run build:release
```

----------------------------------------

TITLE: Memory profiling with bun-inspector-protocol in TypeScript
DESCRIPTION: TypeScript code showing how to perform memory profiling using the Heap domain, including starting heap tracking, listening for garbage collection events, and obtaining a heap snapshot.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-inspector-protocol/README.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
// Start heap tracking
await inspector.send("Heap.enable");
await inspector.send("Heap.startTracking");

// Listen for GC events
inspector.on("Heap.garbageCollected", ({ collection }) => {
  console.log(
    `GC completed: ${collection.type} (${collection.endTime - collection.startTime}ms)`,
  );
});

// ... perform operations to analyze ...

// Get heap snapshot
const { snapshotData } = await inspector.send("Heap.stopTracking");
// Process snapshotData to find memory leaks
```

----------------------------------------

TITLE: Demonstrating Buffer as Uint8Array - TypeScript
DESCRIPTION: This TypeScript snippet creates a Buffer of length 64 using Buffer.alloc and checks if it is an instance of Uint8Array using the instanceof operator. No conversion method is required, as Buffer already inherits all Uint8Array functionalities. The only prerequisite is a Node.js environment with the buffer module available, and the expected output is true if buf is a Uint8Array. Limitations: The demonstration relies on Node.js' Buffer class; it does not cover environments lacking Buffer support.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/binary/buffer-to-typedarray.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
const buf = Buffer.alloc(64);\nbuf instanceof Uint8Array; // => true
```

----------------------------------------

TITLE: Manually Starting a Bun Service
DESCRIPTION: Command to start the Bun service without rebooting the system.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/systemd.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
$ sudo systemctl start my-app
```

----------------------------------------

TITLE: CommonJS Module Import
DESCRIPTION: Demonstrates importing the path module using CommonJS require() syntax. This is the traditional Node.js module import method.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/document_with_cjs_and_esm_code_snippet.md#2025-04-22_snippet_0

LANGUAGE: cjs
CODE:
```
require('path');
```

----------------------------------------

TITLE: Implementing JSX Button Component in MDX
DESCRIPTION: This code snippet demonstrates how to embed a JSX Button component directly in MDX content with an onClick event handler that displays an alert.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-build-mdx-rs/input/page3.mdx#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Button onClick={() => alert("Hello!")}>Click me</Button>
```

----------------------------------------

TITLE: Running PR Build
DESCRIPTION: Example of running a bun build downloaded from a PR, showing its version.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_22

LANGUAGE: sh
CODE:
```
bun-1234566 --version
```

----------------------------------------

TITLE: Converting ReadableStream to Buffer using Bun
DESCRIPTION: This code demonstrates how to convert a ReadableStream to a Buffer in two steps: first using Bun.readableStreamToArrayBuffer to convert the stream to an ArrayBuffer, then using Buffer.from to create a Node.js Buffer that points to the ArrayBuffer. This is useful for interfacing between Web API streams and Node.js buffer-based APIs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/streams/to-buffer.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const stream = new ReadableStream();
const arrBuf = await Bun.readableStreamToArrayBuffer(stream);
const nodeBuf = Buffer.from(arrBuf);
```

----------------------------------------

TITLE: Run Debug Build with Bun
DESCRIPTION: This command uses the `bun bd` script to compile and run a debug build of Bun. It simplifies running debug builds with specified arguments, suppressing output unless the build fails.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_18

LANGUAGE: sh
CODE:
```
$ bun bd <args>
$ bun bd test foo.test.ts
$ bun bd ./foo.ts
```

----------------------------------------

TITLE: Overriding Exit Behavior in Commander.js
DESCRIPTION: Demonstrates how to override Commander's default process.exit behavior to implement custom error handling. This approach uses try/catch to capture CommanderError objects thrown when errors occur during parsing.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_42

LANGUAGE: javascript
CODE:
```
program.exitOverride();

try {
  program.parse(process.argv);
} catch (err) {
  // custom processing...
}
```

----------------------------------------

TITLE: Accessing Bun Version and Revision in TypeScript
DESCRIPTION: Demonstrates how to retrieve the Bun version and git revision using Bun.version and Bun.revision properties.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
Bun.version;
// => "0.6.4"
```

LANGUAGE: typescript
CODE:
```
Bun.revision;
// => "f02561530fda1ee9396f51c8bc99b38716e38296"
```

----------------------------------------

TITLE: Simple Query Mode in TypeScript
DESCRIPTION: Shows how to execute multiple statements in a single query using the simple() method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sql.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
// Multiple statements in one query
await sql`
  SELECT 1;
  SELECT 2;
`.simple();
```

----------------------------------------

TITLE: Checking Version Compatibility with Bun.semver.satisfies in TypeScript
DESCRIPTION: This snippet demonstrates the usage of Bun.semver.satisfies function to check if a given version satisfies a specified range. It shows various examples with different version ranges and compatibility scenarios.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/semver.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { semver } from "bun";

semver.satisfies("1.0.0", "^1.0.0"); // true
semver.satisfies("1.0.0", "^1.0.1"); // false
semver.satisfies("1.0.0", "~1.0.0"); // true
semver.satisfies("1.0.0", "~1.0.1"); // false
semver.satisfies("1.0.0", "1.0.0"); // true
semver.satisfies("1.0.0", "1.0.1"); // false
semver.satisfies("1.0.1", "1.0.0"); // false
semver.satisfies("1.0.0", "1.0.x"); // true
semver.satisfies("1.0.0", "1.x.x"); // true
semver.satisfies("1.0.0", "x.x.x"); // true
semver.satisfies("1.0.0", "1.0.0 - 2.0.0"); // true
semver.satisfies("1.0.0", "1.0.0 - 1.0.1"); // true
```

----------------------------------------

TITLE: Shell commands demonstrating Bun.main output
DESCRIPTION: These shell commands show how Bun.main returns different values based on which file is executed with 'bun run'. The output is the absolute path to the file specified in the command.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/main.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
$ bun run index.ts
/path/to/index.ts
$ bun run foo.ts
/path/to/foo.ts
```

----------------------------------------

TITLE: Configuring Command Arguments in Commander.js
DESCRIPTION: Shows how to define command arguments using .argument() method. The example includes specifying required and optional arguments with descriptions and default values, then accessing them in the action handler.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
program
  .version('0.1.0')
  .argument('<username>', 'user to login')
  .argument('[password]', 'password for user, if required', 'no password given')
  .action((username, password) => {
    console.log('username:', username);
    console.log('password:', password);
  });
```

----------------------------------------

TITLE: Writing Tests in TypeScript using Bun's Test API
DESCRIPTION: An example of how to write tests in TypeScript using Bun's test API. It demonstrates importing test functions, describing a test suite, and writing an asynchronous test case.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/README.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { describe, test, expect } from "bun:test";
import { gcTick } from "harness";

describe("TextEncoder", () => {
  test("can encode a string", async () => {
    const encoder = new TextEncoder();
    const actual = encoder.encode("bun");
    await gcTick();
    expect(actual).toBe(new Uint8Array([0x62, 0x75, 0x6E]));
  });
});
```

----------------------------------------

TITLE: Using Exact Version Installation with Bun
DESCRIPTION: Commands and configuration for installing exact package versions rather than version ranges.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/add.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
$ bun add react --exact
$ bun add react -E
```

LANGUAGE: jsonc
CODE:
```
{
  "dependencies": {
    // without --exact
    "react": "^18.2.0", // this matches >= 18.2.0 < 19.0.0

    // with --exact
    "react": "18.2.0" // this matches only 18.2.0 exactly
  }
}
```

----------------------------------------

TITLE: JUnit Reporter Configuration in bunfig.toml
DESCRIPTION: Configuration example for setting up JUnit XML reporting in the bunfig.toml configuration file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/reporters.md#2025-04-22_snippet_3

LANGUAGE: toml
CODE:
```
[test.reporter]
junit = "path/to/junit.xml"  # Output path for JUnit XML report
```

----------------------------------------

TITLE: Defining Macros for React-Relay in TOML
DESCRIPTION: This snippet defines a macro for React-Relay, specifying the path to the macro file.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/bun/resolve/toml/toml-fixture.toml.txt#2025-04-22_snippet_1

LANGUAGE: toml
CODE:
```
[macros]
react-relay = { "graphql" = "node_modules/bun-macro-relay/bun-macro-relay.tsx" }
```

----------------------------------------

TITLE: Disabling Telemetry in Bun
DESCRIPTION: Controls whether Bun records analytics data like bundle timings and feature usage. By default telemetry is enabled.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_6

LANGUAGE: toml
CODE:
```
telemetry = false
```

----------------------------------------

TITLE: Excluding Test Files from Coverage Reports in Bun
DESCRIPTION: Controls whether test files themselves should be included in coverage statistics. Default is false.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_13

LANGUAGE: toml
CODE:
```
[test]
coverageSkipTestFiles = false
```

----------------------------------------

TITLE: Parsing Cookie Strings with Bun.Cookie.parse()
DESCRIPTION: How to parse a cookie string into a Bun.Cookie instance using the static Cookie.parse() method.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cookie.md#2025-04-22_snippet_16

LANGUAGE: typescript
CODE:
```
const cookie = Bun.Cookie.parse("name=value; Path=/; Secure; SameSite=Lax");

console.log(cookie.name); // "name"
console.log(cookie.value); // "value"
console.log(cookie.path); // "/"
console.log(cookie.secure); // true
console.log(cookie.sameSite); // "lax"
```

----------------------------------------

TITLE: Installing specific versions of Bun on Windows
DESCRIPTION: This snippet shows how to install a specific version of Bun on Windows using PowerShell.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/installation.md#2025-04-22_snippet_12

LANGUAGE: powershell
CODE:
```
$ iex "& {$(irm https://bun.sh/install.ps1)} -Version $BUN_LATEST_VERSION"
```

----------------------------------------

TITLE: Configuring TypeScript Path Mapping in Bun
DESCRIPTION: Example of path mapping configuration in tsconfig.json to customize module resolution behavior.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/typescript.md#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "baseUrl": "./src",
    "paths": {
      "data": ["./data.ts"]
    }
  }
}
```

----------------------------------------

TITLE: Testing HTML String Escaping in Rust
DESCRIPTION: A series of test assertions that verify the HTMLEscape struct's functionality for escaping special HTML characters. Tests include empty strings, single special characters, mixed content, and repeated patterns of various lengths.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_12

LANGUAGE: rust
CODE:
```
let issue = "<".repeat(31);
assert_eq!(
    HTMLEscape::from(issue.as_ref()).to_string(),
    "&lt;".repeat(31)
);

assert_eq!(HTMLEscape::from(empty).to_string(), empty);
assert_eq!(HTMLEscape::from("").to_string(), "");
assert_eq!(HTMLEscape::from("<&>").to_string(), "&lt;&amp;&gt;");
assert_eq!(HTMLEscape::from("bar&").to_string(), "bar&amp;");
assert_eq!(HTMLEscape::from("<foo").to_string(), "&lt;foo");
assert_eq!(HTMLEscape::from("bar&h").to_string(), "bar&amp;h");
assert_eq!(
    HTMLEscape::from("// my <html> is \"unsafe\" & should be 'escaped'").to_string(),
    "&#x2f;&#x2f; my &lt;html&gt; is &quot;unsafe&quot; &amp; should be &#x27;escaped&#x27;"
);
assert_eq!(
    HTMLEscape::from("<".repeat(16).as_ref()).to_string(),
    "&lt;".repeat(16)
);
assert_eq!(
    HTMLEscape::from("<".repeat(32).as_ref()).to_string(),
    "&lt;".repeat(32)
);
assert_eq!(
    HTMLEscape::from("<".repeat(64).as_ref()).to_string(),
    "&lt;".repeat(64)
);
assert_eq!(
    HTMLEscape::from("<".repeat(128).as_ref()).to_string(),
    "&lt;".repeat(128)
);
```

----------------------------------------

TITLE: Simple Random Number Macro Function
DESCRIPTION: Basic example of a macro function that returns a random number during bundle-time.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/macros.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export function random() {
  return Math.random();
}
```

----------------------------------------

TITLE: GitHub Popover Hovercard Component
DESCRIPTION: HTML for GitHub's hovercard popover component that displays additional information when hovering over various elements throughout the site. The popover is positioned absolutely and contains a message box with shadow effects.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_21

LANGUAGE: HTML
CODE:
```
<div class="Popover js-hovercard-content position-absolute" style="display: none; outline: none;" tabindex="0">
  <div class="Popover-message Popover-message--bottom-left Popover-message--large Box box-shadow-large" style="width:360px;">
  </div>
</div>
```

----------------------------------------

TITLE: Configuring Global Installation Settings
DESCRIPTION: TOML configuration for specifying global installation directories in Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/add.md#2025-04-22_snippet_6

LANGUAGE: toml
CODE:
```
[install]
# where `bun add --global` installs packages
globalDir = "~/.bun/install/global"

# where globally-installed package bins are linked
globalBinDir = "~/.bun/bin"
```

----------------------------------------

TITLE: Installing LLVM 19 (Fedora)
DESCRIPTION: Installs LLVM, Clang, and LLD development packages on Fedora using dnf. This provides the necessary compiler and linker tools for building Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_11

LANGUAGE: bash
CODE:
```
$ sudo dnf install llvm clang lld-devel
```

----------------------------------------

TITLE: Script profiling with bun-inspector-protocol in TypeScript
DESCRIPTION: TypeScript code demonstrating how to perform script profiling using the ScriptProfiler domain, including starting tracking with sampling, listening for profiling updates, and processing collected stack traces.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-inspector-protocol/README.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
// Start script profiling with sampling
await inspector.send("ScriptProfiler.startTracking", { includeSamples: true });

// Listen for profiling updates
inspector.on("ScriptProfiler.trackingUpdate", event => {
  console.log("Profiling event:", event);
});

// Stop profiling to get complete data
inspector.on("ScriptProfiler.trackingComplete", data => {
  if (data.samples) {
    // Process stack traces
    console.log(`Collected ${data.samples.stackTraces.length} stack traces`);
  }
});

await inspector.send("ScriptProfiler.stopTracking");
```

----------------------------------------

TITLE: Installing LLVM 19 (openSUSE Tumbleweed)
DESCRIPTION: Installs LLVM 19, Clang 19, and LLD 19 on openSUSE Tumbleweed using zypper. This provides the necessary compiler and linker tools for building Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_12

LANGUAGE: bash
CODE:
```
$ sudo zypper install clang19 lld19 llvm19
```

----------------------------------------

TITLE: Modern Color Notation and Alpha in CSS - Bun Bundler
DESCRIPTION: Uses modern, concise color syntaxes such as space-separated rgb/hsl and hex with alpha, simplifying writing and maintenance. Bun rewrites these into legacy comma-separated or alpha-friendly formats for old browser support, outputting rgba().
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_14

LANGUAGE: css
CODE:
```
.modern-styling {\n  /* Space-separated RGB notation (no commas) */\n  color: rgb(50 100 200);\n\n  /* Space-separated RGB with alpha */\n  border-color: rgba(100 50 200 / 75%);\n\n  /* Hex with alpha channel (8 digits) */\n  background-color: #00aaff80;\n\n  /* HSL with simplified notation */\n  box-shadow: 0 5px 10px hsl(200 50% 30% / 40%);\n}
```

----------------------------------------

TITLE: Running Bun Tests via CLI
DESCRIPTION: Examples of how to run tests using Bun's built-in test command. It demonstrates running all tests, tests in a specific directory, and a single test file.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
bun test # Run all tests
bun test js/bun # Only run tests in a directory
bun test sqlite.test.ts # Only run a specific test
```

----------------------------------------

TITLE: Benchmarking Package Managers with Lockfile in Offline Mode
DESCRIPTION: This command benchmarks the installation performance of package managers in offline mode, using existing lockfiles. It uses hyperfine to compare Bun, pnpm, Yarn, and npm, with appropriate offline flags for each except Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/install/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
$ hyperfine --prepare 'rm -rf node_modules' --runs 1 'bun install' 'pnpm install --prefer-offline' 'yarn --offline' 'npm install --prefer-offline'
```

----------------------------------------

TITLE: Printing Lockfile Hash Input String with Bun
DESCRIPTION: Prints the raw string data that Bun uses as input to generate the lockfile hash. This can be useful for debugging or understanding how the hash is derived.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/pm.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
$ bun pm hash-string
```

----------------------------------------

TITLE: Updating Snapshots Command in Bun
DESCRIPTION: Command line instruction for regenerating snapshot files in Bun using the --update-snapshots flag.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/snapshots.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ bun test --update-snapshots
```

----------------------------------------

TITLE: Displaying Custom Error Messages in Commander.js
DESCRIPTION: Examples of using Commander's error method to display custom error messages with optional exit codes and error codes. This allows for customized error handling while still leveraging Commander's built-in error display mechanism.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_41

LANGUAGE: javascript
CODE:
```
program.error('Password must be longer than four characters');
program.error('Custom processing has failed', { exitCode: 2, code: 'my.custom.error' });
```

----------------------------------------

TITLE: Adding Yarn resolutions to package.json in Bun
DESCRIPTION: Example of adding Yarn's "resolutions" field to package.json. This is Yarn's alternative to npm's "overrides" and serves the same purpose - pinning the version of "bar" to "~4.4.0" for compatibility or security reasons.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/overrides.md#2025-04-22_snippet_3

LANGUAGE: json-diff
CODE:
```
  {
    "name": "my-app",
    "dependencies": {
      "foo": "^2.0.0"
    },
+   "resolutions": {
+     "bar": "~4.4.0"
+   }
  }
```

----------------------------------------

TITLE: Glob Class Interface Definition
DESCRIPTION: Defines the TypeScript interface for Bun's Glob class including scan methods and options.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/glob.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
class Glob {
  scan(root: string | ScanOptions): AsyncIterable<string>;
  scanSync(root: string | ScanOptions): Iterable<string>;

  match(path: string): boolean;
}

interface ScanOptions {
  /**
   * The root directory to start matching from. Defaults to `process.cwd()`
   */
  cwd?: string;

  /**
   * Allow patterns to match entries that begin with a period (`.`).
   *
   * @default false
   */
  dot?: boolean;

  /**
   * Return the absolute path for entries.
   *
   * @default false
   */
  absolute?: boolean;

  /**
   * Indicates whether to traverse descendants of symbolic link directories.
   *
   * @default false
   */
  followSymlinks?: boolean;

  /**
   * Throw an error when symbolic link is broken
   *
   * @default false
   */
  throwErrorOnBrokenSymlink?: boolean;

  /**
   * Return only files.
   *
   * @default true
   */
  onlyFiles?: boolean;
}
```

----------------------------------------

TITLE: Defining Multiple Arguments Using .arguments() Method
DESCRIPTION: Shows a shorthand for defining multiple arguments at once using the .arguments() method, though this approach doesn't allow for adding descriptions to the arguments.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
program
  .arguments('<username> <password>');
```

----------------------------------------

TITLE: Measuring String Width in Terminal - Bun - TypeScript
DESCRIPTION: This snippet demonstrates using Bun.stringWidth to determine the terminal column width of various strings, including those with ANSI escape codes. The function optionally counts ANSI codes and supports options for emoji width. No dependencies other than Bun are required. Inputs are strings (with optional configuration); outputs are numeric widths.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_9

LANGUAGE: TypeScript
CODE:
```
Bun.stringWidth("hello"); // => 5
Bun.stringWidth("\u001b[31mhello\u001b[0m"); // => 5
Bun.stringWidth("\u001b[31mhello\u001b[0m", { countAnsiEscapeCodes: true }); // => 12
```

----------------------------------------

TITLE: Executing Bun Spawn Benchmark Script in Bash
DESCRIPTION: Shows the execution and output of a benchmark script (`spawn.mjs`) using Bun (version 1.x) on an Apple M1 Max processor. It measures the performance of `spawnSync echo hi`, reporting an average time of 888.14 µs per iteration.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_15

LANGUAGE: bash
CODE:
```
$ bun spawn.mjs
cpu: Apple M1 Max
runtime: bun 1.x (arm64-darwin)

benchmark              time (avg)             (min … max)       p75       p99      p995
--------------------------------------------------------- -----------------------------
spawnSync echo hi  888.14 µs/iter    (821.83 µs … 1.2 ms) 905.92 µs      1 ms   1.03 ms
```

----------------------------------------

TITLE: Running Bun Debug Binary
DESCRIPTION: Example of how to run `bun-debug` in the terminal after adding `./build/debug` to the `$PATH`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_18

LANGUAGE: sh
CODE:
```
$ bun-debug
```

----------------------------------------

TITLE: System UI Font Implementation
DESCRIPTION: Demonstrates usage of system-ui font family and how Bun expands it to a comprehensive cross-platform font stack.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_26

LANGUAGE: css
CODE:
```
.native-interface {
  font-family: system-ui;
}

.fallback-aware {
  font-family: system-ui, sans-serif;
}
```

LANGUAGE: css
CODE:
```
.native-interface {
  font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Noto Sans", Ubuntu, Cantarell, "Helvetica Neue";
}

.fallback-aware {
  font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Noto Sans", Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
}
```

----------------------------------------

TITLE: Installing Dependencies Without Creating Lockfile in Bun
DESCRIPTION: Installs dependencies without creating or updating a lockfile by using the --no-save flag.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/lockfile.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ bun install --no-save
```

----------------------------------------

TITLE: Running CSS HMR Frame Time Measurement Script for Next.js
DESCRIPTION: This command executes a Node.js script to measure CSS Hot Module Replacement (HMR) frame times in a Next.js project. It sets environment variables for sleep interval and project name before running the script.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/hot-module-reloading/css-stress-test/next.latest.8ms.txt#2025-04-22_snippet_0

LANGUAGE: Shell
CODE:
```
SLEEP_INTERVAL=8 PROJECT=next node read-frames.js
```

----------------------------------------

TITLE: Configuring Bun install behavior in bunfig.toml
DESCRIPTION: TOML configuration for setting default behavior of 'bun install', including handling of different dependency types and various installation options.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/index.md#2025-04-22_snippet_2

LANGUAGE: toml
CODE:
```
[install]

# whether to install optionalDependencies
optional = true

# whether to install devDependencies
dev = true

# whether to install peerDependencies
peer = true

# equivalent to `--production` flag
production = false

# equivalent to `--save-text-lockfile` flag
saveTextLockfile = false

# equivalent to `--frozen-lockfile` flag
frozenLockfile = false

# equivalent to `--dry-run` flag
dryRun = false

# equivalent to `--concurrent-scripts` flag
concurrentScripts = 16 # (cpu count or GOMAXPROCS) x2
```

----------------------------------------

TITLE: Bun CLI Commands for Various Operations
DESCRIPTION: Showcases various Bun CLI commands for common operations such as running scripts, installing packages, building projects, running tests, and executing packages.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/index.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ bun run start                 # run the `start` script
$ bun install <pkg>             # install a package
$ bun build ./index.tsx         # bundle a project for browsers
$ bun test                      # run tests
$ bunx cowsay 'Hello, world!'   # execute a package
```

----------------------------------------

TITLE: Loader Configuration Comparison
DESCRIPTION: Illustrates the difference in loader configuration syntax between esbuild and Bun. Shows how to set up SVG files to use the text loader.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/vs-esbuild.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
$ esbuild app.ts --bundle --loader:.svg=text
$ bun build app.ts --loader .svg:text
```

----------------------------------------

TITLE: Upgrading Bun
DESCRIPTION: Commands for upgrading Bun to the latest stable version or canary build.
SOURCE: https://github.com/oven-sh/bun/blob/main/README.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
bun upgrade

bun upgrade --canary
```

----------------------------------------

TITLE: Configuring Testing Library Setup
DESCRIPTION: TypeScript setup file to extend Bun's expect function with Testing Library matchers and configure cleanup after each test.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/testing-library.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { afterEach, expect } from 'bun:test';
import { cleanup } from '@testing-library/react';
import * as matchers from '@testing-library/jest-dom/matchers';

expect.extend(matchers);

// Optional: cleans up `render` after each test
afterEach(() => {
  cleanup();
});
```

----------------------------------------

TITLE: Getting Bun Git Revision in TypeScript
DESCRIPTION: Retrieves the git commit hash of the oven-sh/bun repository that was used to compile the current Bun binary. Returns a full SHA-1 hash as a string.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/util/version.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
Bun.revision; // => "49231b2cb9aa48497ab966fc0bb6b742dacc4994"
```

----------------------------------------

TITLE: Bun's second optimization step: Constant folding
DESCRIPTION: This diff demonstrates Bun's constant folding optimization, where the equality check is replaced with a boolean true.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/define-constant.md#2025-04-22_snippet_3

LANGUAGE: ts-diff
CODE:
```
+ if (true) {
    console.log("Production mode");
  } else {
    console.log("Development mode");
  }
```

----------------------------------------

TITLE: Installing Global Packages with Bun
DESCRIPTION: Commands for installing packages globally and example output of a globally installed package.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/add.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
$ bun add --global cowsay # or `bun add -g cowsay`
$ cowsay "Bun!"
 ______
< Bun! >
 ------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
```

----------------------------------------

TITLE: Hijacking and Redirecting Stdout in Node.js Tests
DESCRIPTION: Example showing how to temporarily redirect and capture stdout output using the hijackstdio module. The hijacked listener receives data written to console.log, and stdout can be restored to its original state afterward.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
const { hijackStdout, restoreStdout } = require('../common/hijackstdio');

hijackStdout((data) => {
  /* Do something with data */
  restoreStdout();
});

console.log('this is sent to the hijacked listener');
```

----------------------------------------

TITLE: Configuring Package Management for Bun Project
DESCRIPTION: This snippet defines the package management configuration for the Bun project. It specifies the package manager (bun), private status, and workspaces.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/fs/writeFileSync.txt#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{
  "packageManager": "bun@1.0.26",
  "private": true,
  "workspaces": [
    "bench",
    "packages/*"
  ]
}
```

----------------------------------------

TITLE: Defining a Basic Bun Plugin Structure in TypeScript
DESCRIPTION: This TypeScript snippet defines the basic structure for a Bun plugin. It imports the `BunPlugin` type and defines a constant `myPlugin` with a `name` and a `setup` function. The `setup` function receives a `builder` object used to hook into the build process.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/vs-esbuild.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
```ts
import type { BunPlugin } from "bun";

const myPlugin: BunPlugin = {
  name: "my-plugin",
  setup(builder) {
    // define plugin
  },
};
```
```

----------------------------------------

TITLE: Starting Bun Dev Server for Svelte
DESCRIPTION: Command to start the Bun development server with Svelte plugin integration.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-plugin-svelte/README.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
$ bun index.html
```

----------------------------------------

TITLE: Configuring Test Memory Mode in Bun
DESCRIPTION: Enables small memory mode specifically for the test runner. Reduces memory usage at the cost of performance.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_9

LANGUAGE: toml
CODE:
```
[test]
smol = true
```

----------------------------------------

TITLE: Writing Regression Tests for GitHub Issues
DESCRIPTION: An example of writing a regression test for a specific GitHub issue. It demonstrates testing regex functionality with non-Latin1 characters.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/README.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// test/regression/issue/02005.test.ts

import { it, expect } from "bun:test";

it("regex literal should work with non-latin1", () => {
  const text = "这是一段要替换的文字";
  expect(text.replace(new RegExp("要替换"), "")).toBe("这是一段的文字");
  expect(text.replace(/要替换/, "")).toBe("这是一段的文字");
});
```

----------------------------------------

TITLE: Using Raw Strings in Bun Shell Commands
DESCRIPTION: Shows how to use raw strings in Bun Shell commands to prevent automatic escaping. This is done by wrapping the string in a { raw: 'str' } object.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/shell.md#2025-04-22_snippet_21

LANGUAGE: javascript
CODE:
```
import { $ } from "bun";

await $`echo ${{ raw: '$(foo) `bar` "baz"' }}`;
// => bun: command not found: foo
// => bun: command not found: bar
// => baz
```

----------------------------------------

TITLE: Decompressing data with Bun.gunzipSync() in TypeScript
DESCRIPTION: Shows how to decompress a previously compressed Uint8Array using zlib's GUNZIP algorithm. The example demonstrates the full compression and decompression cycle, recovering the original text.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/utils.md#2025-04-22_snippet_17

LANGUAGE: typescript
CODE:
```
const buf = Buffer.from("hello".repeat(100)); // Buffer extends Uint8Array
const compressed = Bun.gzipSync(buf);

const dec = new TextDecoder();
const uncompressed = Bun.gunzipSync(compressed);
dec.decode(uncompressed);
// => "hellohellohello..."
```

----------------------------------------

TITLE: Installing Development Dependencies with Scoop
DESCRIPTION: Installs Scoop package manager and required development tools including Node.js, Go, Rust, NASM, Ruby, Perl, Ccache and LLVM.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/building-windows.md#2025-04-22_snippet_3

LANGUAGE: powershell
CODE:
```
irm https://get.scoop.sh | iex
scoop install nodejs-lts go rust nasm ruby perl ccache
# scoop seems to be buggy if you install llvm and the rest at the same time
scoop install llvm@19.1.7
```

----------------------------------------

TITLE: Setting Default Registry in .npmrc for Bun
DESCRIPTION: Sets the default NPM registry URL in .npmrc configuration file. This determines where Bun will look to resolve packages. The default is npm's official registry at https://registry.npmjs.org/.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/npmrc.md#2025-04-22_snippet_0

LANGUAGE: ini
CODE:
```
registry=http://localhost:4873/
```

----------------------------------------

TITLE: Installing Bun using npm
DESCRIPTION: This snippet demonstrates how to install Bun globally using npm.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/installation.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ npm install -g bun # the last `npm` command you'll ever need
```

----------------------------------------

TITLE: Install Xcode Command Line Tools
DESCRIPTION: This command installs the Xcode Command Line Tools, which provide essential development tools and libraries for macOS. It's required to resolve errors related to missing system libraries during compilation.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_31

LANGUAGE: bash
CODE:
```
$ xcode-select --install
```

----------------------------------------

TITLE: Using escapePOSIXShell Template Literal for Shell Command Escaping
DESCRIPTION: Demonstrates how to use the escapePOSIXShell tagged template literal function to safely escape shell commands for cross-platform compatibility. Shows both basic usage and advanced options with environment variables.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const { escapePOSIXShell } = require('../common');
const fixtures = require('../common/fixtures');
const { execSync } = require('node:child_process');
const origin = fixtures.path('origin');
const destination = fixtures.path('destination');

execSync(...escapePOSIXShell`cp "${origin}" "${destination}"`);

// When you need to specify specific options, and/or additional env variables:
const [cmd, opts] = escapePOSIXShell`cp "${origin}" "${destination}"`;
console.log(typeof cmd === 'string'); // true
console.log(opts === undefined || typeof opts.env === 'object'); // true
execSync(cmd, { ...opts, stdio: 'ignore' });
execSync(cmd, { stdio: 'ignore', env: { ...opts?.env, KEY: 'value' } });
```

----------------------------------------

TITLE: Running Benchmark in Node.js
DESCRIPTION: Command to execute the benchmark script using the Node.js runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/postgres/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
node index.mjs
```

----------------------------------------

TITLE: Creating a Method Spy in Bun Tests
DESCRIPTION: Demonstrates how to create a basic spy on an object's method using Bun's spyOn utility. Shows setup of a test object and creation of a spy to track method calls.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/spy-on.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { test, expect, spyOn } from "bun:test";

const leo = {
  name: "Leonardo",
  sayHi(thing: string) {
    console.log(`Sup I'm ${this.name} and I like ${thing}`);
  },
};

const spy = spyOn(leo, "sayHi");
```

----------------------------------------

TITLE: Rendering Button Component in MDX with onClick Handler
DESCRIPTION: A JSX Button component with an onClick handler that displays an alert. This demonstrates how React components can be embedded directly within MDX content.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-build-mdx-rs/input/page1.mdx#2025-04-22_snippet_0

LANGUAGE: JSX
CODE:
```
<Button onClick={() => alert("Hello!")}>Click me</Button>
```

----------------------------------------

TITLE: Configuring Bun Project Version and Options
DESCRIPTION: Parses the package.json file for version information, sets up project options, and configures compiler flags.
SOURCE: https://github.com/oven-sh/bun/blob/main/CMakeLists.txt#2025-04-22_snippet_4

LANGUAGE: CMake
CODE:
```
parse_package_json(VERSION_VARIABLE DEFAULT_VERSION)
optionx(VERSION STRING "The version of Bun" DEFAULT ${DEFAULT_VERSION})
project(Bun VERSION ${VERSION})
include(Options)
include(CompilerFlags)
```

----------------------------------------

TITLE: Reinstalling ccache (macOS)
DESCRIPTION: These commands reinstall ccache using Homebrew. It resolves issues with ccache conflicting with building TinyCC on macOS.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_35

LANGUAGE: bash
CODE:
```
brew uninstall ccache
brew install ccache
```

----------------------------------------

TITLE: Installing Visual Studio with WinGet
DESCRIPTION: Installs Visual Studio Community 2022 with C++ desktop development workload and Git using WinGet package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/building-windows.md#2025-04-22_snippet_2

LANGUAGE: powershell
CODE:
```
winget install "Visual Studio Community 2022" --override "--add Microsoft.VisualStudio.Workload.NativeDesktop Microsoft.VisualStudio.Component.Git " -s msstore
```

----------------------------------------

TITLE: Equivalent CSS Without Composition
DESCRIPTION: Shows the equivalent CSS that would be generated from the composition example. This demonstrates how the composes property effectively copies properties from one class to another.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_29

LANGUAGE: css
CODE:
```
.button {
  background-color: blue;
  color: red;
}

.background {
  background-color: blue;
}
```

----------------------------------------

TITLE: Running Bun Tests in Watch Mode
DESCRIPTION: Command to run Bun tests in --watch mode, which will automatically re-run tests when any imported files change.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/hot.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ bun --watch test
```

----------------------------------------

TITLE: Incremental Writing to Child Process Input Stream in TypeScript
DESCRIPTION: Shows how to incrementally write to a child process's input stream using the 'pipe' option.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/spawn.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const proc = Bun.spawn(["cat"], {
  stdin: "pipe", // return a FileSink for writing
});

// enqueue string data
proc.stdin.write("hello");

// enqueue binary data
const enc = new TextEncoder();
proc.stdin.write(enc.encode(" world!"));

// send buffered data
proc.stdin.flush();

// close the input stream
proc.stdin.end();
```

----------------------------------------

TITLE: Showing Bun 'outdated' Command Usage Example - Markdown
DESCRIPTION: This snippet uses a special Markdown directive to embed the usage for the 'outdated' command of Bun CLI. It likely renders the CLI help or summary within the documentation. Relies on Bun's custom Markdown rendering pipeline.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/outdated.md#2025-04-22_snippet_8

LANGUAGE: markdown
CODE:
```
{% bunCLIUsage command="outdated" /%}
```

----------------------------------------

TITLE: Running Express Server in Node.js Runtime
DESCRIPTION: Command to start the Express.js server using the Node.js runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/express/README.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
node ./express.mjs
```

----------------------------------------

TITLE: Verifying App Functionality with Different Package Managers
DESCRIPTION: These commands demonstrate how to start the development server using different package managers (Bun, npm, Yarn, pnpm) to verify that the app is working correctly after installation.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/install/README.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
$ bun run dev
$ npm run dev
$ yarn dev
$ pnpm dev
```

----------------------------------------

TITLE: Using s3:// Protocol with fetch and Bun.file
DESCRIPTION: Examples of using the s3:// protocol with fetch and Bun.file for seamless integration with S3 storage.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_32

LANGUAGE: typescript
CODE:
```
const response = await fetch("s3://my-bucket/my-file.txt", {
  s3: {
    accessKeyId: "your-access-key",
    secretAccessKey: "your-secret-key",
    endpoint: "https://s3.us-east-1.amazonaws.com",
  },
  headers: {
    "range": "bytes=0-1023",
  },
});
```

----------------------------------------

TITLE: Event Loop Management (us_loop_t) Implementation in C
DESCRIPTION: Core event loop functionality for managing thread resources and callbacks. Provides creation, destruction, execution and thread-safe wakeup capabilities.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-usockets/misc/manual.md#2025-04-22_snippet_0

LANGUAGE: c
CODE:
```
WIN32_EXPORT struct us_loop_t *us_create_loop(void *hint, void (*wakeup_cb)(struct us_loop_t *loop), void (*pre_cb)(struct us_loop_t *loop), void (*post_cb)(struct us_loop_t *loop), unsigned int ext_size);

WIN32_EXPORT void us_loop_free(struct us_loop_t *loop);

WIN32_EXPORT void *us_loop_ext(struct us_loop_t *loop);

WIN32_EXPORT void us_loop_run(struct us_loop_t *loop);

WIN32_EXPORT void us_wakeup_loop(struct us_loop_t *loop);

WIN32_EXPORT void us_loop_integrate(struct us_loop_t *loop);

WIN32_EXPORT long long us_loop_iteration_number(struct us_loop_t *loop);
```

----------------------------------------

TITLE: Configuring Build Conditions Programmatically
DESCRIPTION: Example of using conditions programmatically with Bun.build API to specify package resolution conditions.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/modules.md#2025-04-22_snippet_17

LANGUAGE: js
CODE:
```
await Bun.build({
  conditions: ["react-server"],
  target: "bun",
  entryPoints: ["./app/foo/route.js"],
});
```

----------------------------------------

TITLE: Pattern Set Glob Matching
DESCRIPTION: Example of using pattern sets with multiple options in glob patterns.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/glob.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
const glob = new Glob("{a,b,c}.ts");
glob.match("a.ts"); // => true
glob.match("b.ts"); // => true
glob.match("c.ts"); // => true
glob.match("d.ts"); // => false
```

----------------------------------------

TITLE: Reading from Standard Input in Bun
DESCRIPTION: A simple TypeScript example showing how to read input from standard input (stdin) in Bun using the console object with an async iterator.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/benchmarks.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
for await (const line of console) {
  // line of text from stdin
  console.log(line);
}
```

----------------------------------------

TITLE: Displaying Benchmark Results in Markdown Table
DESCRIPTION: A markdown table showing the 'real' time results of the benchmark for each bundler, as run on a 16-inch M1 Macbook Pro.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/bundle/README.md#2025-04-22_snippet_2

LANGUAGE: markdown
CODE:
```
| Bundler | Time   |
| ------- | ------ |
| Bun     | 0.17s  |
| esbuild | 0.33s  |
| Rollup  | 18.82s |
| Webpack | 26.21  |
| Parcel  | 17.95s |
```

----------------------------------------

TITLE: Implementing Bun Plugin in Rust
DESCRIPTION: Example of implementing an onBeforeParse hook in Rust that replaces 'foo' with 'bar' in source code
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-native-plugin-rs/README.md#2025-04-22_snippet_1

LANGUAGE: rust
CODE:
```
use bun_native_plugin::{define_bun_plugin, OnBeforeParse, bun, Result, anyhow, BunLoader};
use napi_derive::napi;

/// Define the plugin and its name
define_bun_plugin!("replace-foo-with-bar");

/// Here we'll implement `onBeforeParse` with code that replaces all occurrences of
/// `foo` with `bar`.
///
/// We use the #[bun] macro to generate some of the boilerplate code.
///
/// The argument of the function (`handle: &mut OnBeforeParse`) tells
/// the macro that this function implements the `onBeforeParse` hook.
#[bun]
pub fn replace_foo_with_bar(handle: &mut OnBeforeParse) -> Result<()> {
  // Fetch the input source code.
  let input_source_code = handle.input_source_code()?;

  // Get the Loader for the file
  let loader = handle.output_loader();


  let output_source_code = input_source_code.replace("foo", "bar");

  handle.set_output_source_code(output_source_code, BunLoader::BUN_LOADER_JSX);

  Ok(())
}
```

----------------------------------------

TITLE: Custom Checks with onAfterBundle in Bun Build Tests
DESCRIPTION: Shows how to use the onAfterBundle callback to perform custom checks on the bundled output, such as verifying that certain keywords have been replaced.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/bundler/expectBundled.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
itBundled("default/ThisOutsideFunctionRenamedToExports", {
  files: {
    "/entry.js": /* js */ `
      console.log(this)
      console.log((x = this) => this)
      console.log({x: this})
      console.log(class extends this.foo {})
      console.log(class { [this.foo] })
      console.log(class { [this.foo]() {} })
      console.log(class { static [this.foo] })
      console.log(class { static [this.foo]() {} })
    `,
  },
  onAfterBundle(api) {
    if (api.readFile("/out.js").includes("this")) {
      throw new Error("All cases of `this` should have been rewritten to `exports`");
    }
  },
});
```

----------------------------------------

TITLE: Running File Upload Benchmark in Node.js Environment
DESCRIPTION: Command to execute the file upload benchmark using the Node.js runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/stream-file-upload-client/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
node stream-file-node.mjs
```

----------------------------------------

TITLE: Reading Files from S3 in Various Formats
DESCRIPTION: Demonstrates different methods to read files from S3, including as text, JSON, ArrayBuffer, slices, and streams. These methods are similar to the fetch Response and Blob APIs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
// Read an S3File as text
const text = await s3file.text();

// Read an S3File as JSON
const json = await s3file.json();

// Read an S3File as an ArrayBuffer
const buffer = await s3file.arrayBuffer();

// Get only the first 1024 bytes
const partial = await s3file.slice(0, 1024).text();

// Stream the file
const stream = s3file.stream();
for await (const chunk of stream) {
  console.log(chunk);
}
```

----------------------------------------

TITLE: Building for Production
DESCRIPTION: Command to create a production build in the dist folder, with optimized bundling and minification for best performance.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/third_party/pnpm/install_fixture/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npm run build
```

----------------------------------------

TITLE: Installing Dependencies with Package Managers
DESCRIPTION: Command to install project dependencies using npm, pnpm, or yarn package managers.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/third_party/pnpm/install_fixture/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ npm install # or pnpm install or yarn install
```

----------------------------------------

TITLE: Install LLVM 19 on Ubuntu/Debian
DESCRIPTION: This command uses the LLVM automatic installation script to install LLVM version 19 on Ubuntu or Debian systems. It downloads and executes the script, which installs the specified version.  The script requires `sudo` privileges.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_9

LANGUAGE: bash
CODE:
```
$ # LLVM has an automatic installation script that is compatible with all versions of Ubuntu
$ wget https://apt.llvm.org/llvm.sh -O - | sudo bash -s -- 19 all
```

----------------------------------------

TITLE: Reading Basic Text Content
DESCRIPTION: A simple text file containing a greeting message showing input file read functionality
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/wasi/subdir/input_link.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
hello from input.txt
```

----------------------------------------

TITLE: S3File Interface Definition - TypeScript
DESCRIPTION: Defines the S3File interface extending Blob, documenting available methods for partial reads, existence check, unlink/delete, presign, reading as text/json/bytes, streaming, writing, and getting statistics. S3File methods support both synchronous and asynchronous usage; network-related methods are async. The interface informs advanced users about available operations and method signatures when interacting with S3 objects via Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/s3.md#2025-04-22_snippet_22

LANGUAGE: typescript
CODE:
```
interface S3File extends Blob {
  slice(start: number, end?: number): S3File;
  exists(): Promise<boolean>;
  unlink(): Promise<void>;
  presign(options: S3Options): string;
  text(): Promise<string>;
  json(): Promise<any>;
  bytes(): Promise<Uint8Array>;
  arrayBuffer(): Promise<ArrayBuffer>;
  stream(options: S3Options): ReadableStream;
  write(
    data:
      | string
      | Uint8Array
      | ArrayBuffer
      | Blob
      | ReadableStream
      | Response
      | Request,
    options?: BlobPropertyBag,
  ): Promise<number>;

  exists(options?: S3Options): Promise<boolean>;
  unlink(options?: S3Options): Promise<void>;
  delete(options?: S3Options): Promise<void>;
  presign(options?: S3Options): string;

  stat(options?: S3Options): Promise<S3Stat>;
  /**
   * Size is not synchronously available because it requires a network request.
   *
   * @deprecated Use `stat()` instead.
   */
  size: NaN;

  // ... more omitted for brevity
}
```

----------------------------------------

TITLE: Creating Buffer from Array - Static Method Definition
DESCRIPTION: Static method signature for Buffer.from() that accepts an array parameter and converts it to a buffer. The method takes an array as input and returns a new Buffer instance.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/order_of_end_tags_5873.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
static method: Buffer.from(array)
```

----------------------------------------

TITLE: Disabling Spelling Suggestions After Errors in Commander.js
DESCRIPTION: This code demonstrates how to disable the automatic spelling suggestion feature that appears after a user enters an unknown command or option.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_28

LANGUAGE: javascript
CODE:
```
program.showSuggestionAfterError(false);
```

----------------------------------------

TITLE: Verifying Bun Installation
DESCRIPTION: Checks the Bun installation by displaying the version revision number.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/building-windows.md#2025-04-22_snippet_6

LANGUAGE: powershell
CODE:
```
.\build\debug\bun-debug.exe --revision
```

----------------------------------------

TITLE: Declaring Internal Types for 'bun' Module
DESCRIPTION: This snippet shows how to declare internal types that shouldn't be exposed to users. It uses the __internal namespace to encapsulate these types within the 'bun' module declaration.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-types/authoring.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
declare module "bun" {
  namespace __internal {
    interface MyInternalType {
      // ...
    }
  }
}
```

----------------------------------------

TITLE: Running TypeScript with Bun CLI
DESCRIPTION: Demonstrates the basic usage of Bun runtime to execute TypeScript/JSX files directly without additional configuration.
SOURCE: https://github.com/oven-sh/bun/blob/main/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
bun run index.tsx
```

----------------------------------------

TITLE: Automated Help Output for Commander.js Applications
DESCRIPTION: Shows the console output of the automated help generated by Commander.js. The help is based on the command structure, options, and descriptions defined in the application.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_23

LANGUAGE: console
CODE:
```
$ node ./examples/pizza --help
Usage: pizza [options]

An application for pizza ordering

Options:
  -p, --peppers        Add peppers
  -c, --cheese <type>  Add the specified type of cheese (default: "marble")
  -C, --no-cheese      You do not want any cheese
  -h, --help           display help for command
```

----------------------------------------

TITLE: Including CMake Modules for Bun Project
DESCRIPTION: Includes necessary CMake modules for policies and global settings.
SOURCE: https://github.com/oven-sh/bun/blob/main/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: CMake
CODE:
```
include(Policies)
include(Globals)
```

----------------------------------------

TITLE: Initializing a Nuxt Application with Bun
DESCRIPTION: This command initializes a new Nuxt application using the official nuxi CLI tool and selects Bun as the package manager. It creates the project structure and installs all required dependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/nuxt.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
$ bunx nuxi init my-nuxt-app
✔ Which package manager would you like to use?
bun
◐ Installing dependencies...
bun install v$BUN_LATEST_VERSION (16b4bf34)
 + @nuxt/devtools@0.8.2
 + nuxt@3.7.0
 785 packages installed [2.67s]
✔ Installation completed.
✔ Types generated in .nuxt
✨ Nuxt project has been created with the v3 template. Next steps:
 › cd my-nuxt-app
 › Start development server with bun run dev
```

----------------------------------------

TITLE: Example Entry Point Import - entry-a.ts - TypeScript
DESCRIPTION: Represents a TypeScript entrypoint file importing a shared module. This example helps illustrate how code splitting works when multiple entrypoints import common dependencies. No external dependencies other than './shared.ts'. Expects './shared.ts' in the same directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_27

LANGUAGE: TypeScript
CODE:
```
import { shared } from './shared.ts';
```

----------------------------------------

TITLE: Incorrect Placement of --bun Flag with bunx (Shell - bash)
DESCRIPTION: Demonstrates an incorrect usage of bunx where the '--bun' flag is placed after the executable name, causing it to be passed as an argument to the CLI instead of affecting bunx behavior. Useful for highlighting command syntax constraints.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bunx.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
$ bunx my-cli --bun
```

----------------------------------------

TITLE: Example TypeScript code before property replacement
DESCRIPTION: This TypeScript snippet shows the use of console.write before the --define transformation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/define-constant.md#2025-04-22_snippet_12

LANGUAGE: ts
CODE:
```
console.write("Hello, world!");
```

----------------------------------------

TITLE: Implementing HTTP Event Handler for Bun Lambda Function
DESCRIPTION: Example of a Bun Lambda function that handles HTTP events from API Gateway, demonstrating the use of Request and Response objects.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-lambda/README.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
export default {
  async fetch(request: Request): Promise<Response> {
    console.log(request.headers.get("x-amzn-function-arn"));
    // ...
    return new Response("Hello from Lambda!", {
      status: 200,
      headers: {
        "Content-Type": "text/plain",
      },
    });
  },
};
```

----------------------------------------

TITLE: Using globalThis in Bun Build Tests
DESCRIPTION: Demonstrates how to use globalThis to define additional variables for testing in a Bun build scenario, particularly useful for testing minified bundles.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/bundler/expectBundled.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
itBundled("default/MinifiedBundleEndingWithImportantSemicolon", {
  files: {
    "/entry.js": `while(foo()); // This semicolon must not be stripped`,
    "/test.js": /* js */ `
      let i = 0;
      globalThis.foo = () => {
        console.log(i++);
        return i === 1;
      };
      await import('./out.js')
    `,
  },
  minifyWhitespace: true,
  format: "iife",
  run: {
    file: "/test.js",
    stdout: "0\n1",
  },
});
```

----------------------------------------

TITLE: Basic HTML Page Structure with CSS Styling
DESCRIPTION: Complete HTML template including responsive CSS styles for a simple example domain page. Features a centered content div with shadow effects and mobile-responsive layout.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/web/fetch/fetch.js.txt#2025-04-22_snippet_0

LANGUAGE: HTML
CODE:
```
<!doctype html>
<html>
<head>
    <title>Example Domain</title>

    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type="text/css">
    body {
        background-color: #f0f0f2;
        margin: 0;
        padding: 0;
        font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
        
    }
    div {
        width: 600px;
        margin: 5em auto;
        padding: 2em;
        background-color: #fdfdff;
        border-radius: 0.5em;
        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);
    }
    a:link, a:visited {
        color: #38488f;
        text-decoration: none;
    }
    @media (max-width: 700px) {
        div {
            margin: 0 auto;
            width: auto;
        }
    }
    </style>    
</head>

<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.</p>
    <p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>
```

----------------------------------------

TITLE: Implementing a Simple Addition Function in Zig for Bun
DESCRIPTION: Demonstrates how to implement a simple addition function in Zig that can be exposed to JavaScript through Bun's binding system. The function handles integer overflow and throws an error if it occurs.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/bindgen.md#2025-04-22_snippet_0

LANGUAGE: zig
CODE:
```
pub fn add(global: *JSC.JSGlobalObject, a: i32, b: i32) !i32 {
    return std.math.add(i32, a, b) catch {
        // Binding functions can return `error.OutOfMemory` and `error.JSError`.
        // Others like `error.Overflow` from `std.math.add` must be converted.
        // Remember to be descriptive.
        return global.throwPretty("Integer overflow while adding", .{});
    };
}

const gen = bun.gen.math; // "math" being this file's basename

const std = @import("std");
const bun = @import("bun");
const JSC = bun.JSC;
```

----------------------------------------

TITLE: Self-signed Certificate Files for HTTPS Testing
DESCRIPTION: A collection of certificate files and configuration used for testing HTTPS functionality in Bun, specifically focusing on certificates without keyCertSign bit. The test verifies that Bun handles these certificates correctly without crashing.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/keys/selfsigned-no-keycertsign/README.md#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
cert.pem - Self-signed certificate without keyCertSign bit
key.pem - Private key for the certificate
cert.conf - Certificate configuration file
https_renew_cert.sh - Script to generate new certificates
```

----------------------------------------

TITLE: Advanced Option Configuration in JavaScript
DESCRIPTION: Demonstrates advanced option configurations including hidden options, defaults, choices, environment variables, and option conflicts using the Option class.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
program
  .addOption(new Option('-s, --secret').hideHelp())
  .addOption(new Option('-t, --timeout <delay>', 'timeout in seconds').default(60, 'one minute'))
  .addOption(new Option('-d, --drink <size>', 'drink size').choices(['small', 'medium', 'large']))
  .addOption(new Option('-p, --port <number>', 'port number').env('PORT'))
  .addOption(new Option('--donate [amount]', 'optional donation in dollars').preset('20').argParser(parseFloat))
  .addOption(new Option('--disable-server', 'disables the server').conflicts('port'))
  .addOption(new Option('--free-drink', 'small drink included free ').implies({ drink: 'small' }));
```

----------------------------------------

TITLE: Using tick function from tick module
DESCRIPTION: Calls a callback function after a specified number of event loop ticks. Takes the number of ticks and a callback function as parameters.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_22

LANGUAGE: JavaScript
CODE:
```
tick(x, cb)
```

----------------------------------------

TITLE: Defining SVG Project Icon for Search Suggestions
DESCRIPTION: This SVG snippet defines the standard GitHub project icon. It is embedded within the search suggestions template (`js-jump-to-suggestions-template-container`), intended to visually represent project results in the jump-to dropdown. It uses path elements with `fill-rule="evenodd"` to draw the board-like icon.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_5

LANGUAGE: svg
CODE:
```
<svg height="16" width="16" class="octicon octicon-project flex-shrink-0 js-jump-to-octicon-project d-none" title="Project" aria-label="Project" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M1.75 0A1.75 1.75 0 000 1.75v12.5C0 15.216.784 16 1.75 16h12.5A1.75 1.75 0 0016 14.25V1.75A1.75 1.75 0 0014.25 0H1.75zM1.5 1.75a.25.25 0 01.25-.25h12.5a.25.25 0 01.25.25v12.5a.25.25 0 01-.25.25H1.75a.25.25 0 01-.25-.25V1.75zM11.75 3a.75.75 0 00-.75.75v7.5a.75.75 0 001.5 0v-7.5a.75.75 0 00-.75-.75zm-8.25.75a.75.75 0 011.5 0v5.5a.75.75 0 01-1.5 0v-5.5zM8 3a.75.75 0 00-.75.75v3.5a.75.75 0 001.5 0v-3.5A.75.75 0 008 3z"></path></svg>
```

----------------------------------------

TITLE: Options Configuration Example
DESCRIPTION: Example showing how to configure common option types including boolean flags and value options
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
program
  .option('-d, --debug', 'output extra debugging')
  .option('-s, --small', 'small pizza size')
  .option('-p, --pizza-type <type>', 'flavour of pizza');

program.parse(process.argv);

const options = program.opts();
if (options.debug) console.log(options);
console.log('pizza details:');
if (options.small) console.log('- small pizza size');
if (options.pizzaType) console.log(`- ${options.pizzaType}`);
```

----------------------------------------

TITLE: JSX Output with Custom Import Source - React JSX
DESCRIPTION: Transpiled output when using a custom import source with react-jsx, showing how the jsx function is imported from the specified package's jsx-runtime module.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_17

LANGUAGE: tsx
CODE:
```
import { jsx } from "preact/jsx-runtime";
jsx("Box", { width: 5, children: "Hello" });
```

----------------------------------------

TITLE: Customizing Help Command in Commander.js
DESCRIPTION: This demonstrates how to customize the implicit help command that is automatically added when a command has subcommands. You can specify custom name and description.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_35

LANGUAGE: javascript
CODE:
```
program.addHelpCommand('assist [command]', 'show assistance');
```

----------------------------------------

TITLE: Bun CSS Hot Reload Performance Metrics
DESCRIPTION: Performance metrics showing frame time percentiles and rendered frame statistics for Bun v0.0.34 CSS hot reloading with 16ms save intervals.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/hot-module-reloading/css-stress-test/README.md#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
 bun v0.0.34
 Saving every 16ms

 Frame time:
 50th percentile: 22.2ms
 75th percentile: 23.9ms
 90th percentile: 25.3ms
 95th percentile: 43.6ms
 99th percentile: 49.1ms
 Rendered frames: 922 / 1024 (90%)
```

----------------------------------------

TITLE: RGBA Object Format Examples in TypeScript
DESCRIPTION: Examples of converting colors to RGBA object format using Bun.color() with '{rgba}' and '{rgb}' output formats
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/color.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
Bun.color("hsl(0, 0%, 50%)", "{rgba}"); // { r: 128, g: 128, b: 128, a: 1 }
Bun.color("red", "{rgba}"); // { r: 255, g: 0, b: 0, a: 1 }
Bun.color(0xff0000, "{rgba}"); // { r: 255, g: 0, b: 0, a: 1 }
Bun.color({ r: 255, g: 0, b: 0 }, "{rgba}"); // { r: 255, g: 0, b: 0, a: 1 }
Bun.color([255, 0, 0], "{rgba}"); // { r: 255, g: 0, b: 0, a: 1 }
```

----------------------------------------

TITLE: Installing Dependencies for Expo App
DESCRIPTION: Command to install the necessary dependencies for the Expo app project using npm.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/integration/expo-app/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Help Output Example in Commander.js
DESCRIPTION: This shows the formatted help output that results from the custom help text example. It displays the usage, options, and the custom example call text added after the built-in help.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_25

LANGUAGE: text
CODE:
```
Usage: custom-help [options]

Options:
  -f, --foo   enable some foo
  -h, --help  display help for command

Example call:
  $ custom-help --help
```

----------------------------------------

TITLE: Merging Upstream WebKit Changes in Bash
DESCRIPTION: Merges the `main` branch from the remote named `upstream` into the current branch of the local WebKit fork. Includes a commented command `git fetch --unshallow` to resolve potential issues with unrelated git histories before retrying the merge.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/contributing/upgrading-webkit.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ git merge upstream main
# If you get an error saying histories are unrelated, run this and try again:
$ git fetch --unshallow
```

----------------------------------------

TITLE: Creating a Simple HTTP Server in Bun with TypeScript
DESCRIPTION: A minimal HTTP server implementation in Bun.js that returns "Hello World" for any request. This server demonstrates Bun's HTTP capabilities which can handle 160,000-260,000 requests per second depending on hardware.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/benchmarks.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// http.ts
export default {
  port: 3000,
  fetch(request: Request) {
    return new Response("Hello World");
  },
};

// bun ./http.ts
```

----------------------------------------

TITLE: Countdown Module Usage Example
DESCRIPTION: Shows how to use the Countdown module for managing asynchronous operations that need to complete before performing a final action.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
const Countdown = require('../common/countdown');

function doSomething() {
  console.log('.');
}

const countdown = new Countdown(2, doSomething);
countdown.dec();
countdown.dec();
```

----------------------------------------

TITLE: Generating RSA Key and Certificate using OpenSSL and Node.js
DESCRIPTION: This snippet demonstrates the process of creating a test certificate for TLS DNS altname testing. It includes OpenSSL commands for key generation and Node.js usage for certificate creation.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/0-dns/README.md#2025-04-22_snippet_0

LANGUAGE: console
CODE:
```
$ openssl genrsa -out 0-dns-key.pem 2048
Generating RSA private key, 2048 bit long modulus
...................+++
..............................................................................................+++
e is 65537 (0x10001)
$ openssl rsa -in 0-dns-key.pem -RSAPublicKey_out -outform der -out 0-dns-rsapub.der
writing RSA key
$ npm install
0-dns@1.0.0 /home/github/node/test/fixtures/0-dns
+-- asn1.js@4.9.1
| +-- bn.js@4.11.6
| +-- inherits@2.0.3
| `-- minimalistic-assert@1.0.0
`-- asn1.js-rfc5280@1.2.2

$ node ./createCert.js
$ openssl x509 -text -in 0-dns-cert.pem
(You can not see evil.example.com in subjectAltName field)
```

----------------------------------------

TITLE: Running 'bun outdated' Via Terminal Directive - Markdown
DESCRIPTION: Displays the usage of the `bun outdated` command via a custom terminal directive. This directive is expected to render the result of running the command in the project’s terminal, showing a table of outdated dependencies with columns for current, update, and latest versions. Dependencies include Bun CLI and a properly initialized Bun project workspace. Visible inputs are empty, showing a generic list. The output is not actual code but a terminal widget placeholder embedded in Markdown.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/outdated.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
{% bunOutdatedTerminal displayGlob="" filter="" glob="" /%}
```

----------------------------------------

TITLE: Building Bun Project
DESCRIPTION: Command to build the Bun project after making changes to the type definitions. This step is necessary when contributing new type definitions.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-types/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
bun build
```

----------------------------------------

TITLE: Configuring Basic Settings in TOML for Bun Project
DESCRIPTION: This snippet sets up basic configuration options for a Bun project, including the framework, origin URL, and an inline array.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/bun/resolve/toml/toml-fixture.toml.txt#2025-04-22_snippet_0

LANGUAGE: toml
CODE:
```
framework = "next"
origin = "http://localhost:5000"
inline.array = [1234, 4, 5, 6]
```

----------------------------------------

TITLE: Update APT and Install GCC 11
DESCRIPTION: These commands update the APT package lists and install GCC version 11, along with its corresponding C++ compiler. This is a necessary step for resolving issues related to missing C++20 features on Ubuntu systems where the default GCC version is older.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_28

LANGUAGE: bash
CODE:
```
$ sudo apt update
$ sudo apt install gcc-11 g++-11
# If the above command fails with `Unable to locate package gcc-11` we need
# to add the APT repository
$ sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
# Now run `apt install` again
$ sudo apt install gcc-11 g++-11
```

----------------------------------------

TITLE: Initializing CMake Configuration for Bun Project
DESCRIPTION: Sets up the initial CMake configuration for the Bun project, including minimum required version and module paths.
SOURCE: https://github.com/oven-sh/bun/blob/main/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.24)
message(STATUS "Configuring Bun")

list(APPEND CMAKE_MODULE_PATH
  ${CMAKE_SOURCE_DIR}/cmake
  ${CMAKE_SOURCE_DIR}/cmake/targets
  ${CMAKE_SOURCE_DIR}/cmake/tools
  ${CMAKE_SOURCE_DIR}/cmake/analysis
  ${CMAKE_SOURCE_DIR}/cmake/scripts
)
```

----------------------------------------

TITLE: Running File Upload Benchmark in Bun Environment
DESCRIPTION: Command to execute the file upload benchmark using the Bun JavaScript runtime.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/stream-file-upload-client/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
bun stream-file-bun.js
```

----------------------------------------

TITLE: Required Command Line Options in JavaScript
DESCRIPTION: Demonstrates how to create mandatory command line options that must have a value using Commander.js's requiredOption method.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
program
  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');

program.parse();
```

----------------------------------------

TITLE: Compiling JavaScript to a standalone executable with Bun
DESCRIPTION: Creates a single-file executable from a JavaScript or TypeScript entry point using Bun's build command with the --compile flag.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/runtime/codesign-macos-executable.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ bun build --compile ./path/to/entry.ts --outfile myapp
```

----------------------------------------

TITLE: OpenSSL Certificate Revocation Entries
DESCRIPTION: SSL certificate revocation list entries showing revoked certificate status (R), expiration dates, serial numbers and subject distinguished names. These entries are specifically for Node.js agent certificates issued to ry@tinyclouds.org.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/keys/ca2-database.txt#2025-04-22_snippet_0

LANGUAGE: text
CODE:
```
R	22920830184220Z	181116184220Z	91F006636069F29A	unknown	/C=US/ST=CA/L=SF/O=Joyent/OU=Node.js/CN=agent4/emailAddress=ry@tinyclouds.org
R	22960617144651Z	220903144651Z	91F006636069F29E	unknown	/C=US/ST=CA/L=SF/O=Joyent/OU=Node.js/CN=agent4/emailAddress=ry@tinyclouds.org
R	22980611225844Z	240827225844Z	783006FA8D75BD4E95045EE3EC02EE0609D042C2	unknown	/C=US/ST=CA/L=SF/O=Joyent/OU=Node.js/CN=agent4/emailAddress=ry@tinyclouds.org
```

----------------------------------------

TITLE: Adding Custom Help Text in Commander.js
DESCRIPTION: This example demonstrates how to add custom help text to be displayed along with the built-in help using the addHelpText method. The example adds text after the built-in help display.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_24

LANGUAGE: javascript
CODE:
```
program
  .option('-f, --foo', 'enable some foo');

program.addHelpText('after', `

Example call:
  $ custom-help --help`);
```

----------------------------------------

TITLE: Installing pkg-config (macOS)
DESCRIPTION: This command installs `pkg-config` using Homebrew on macOS. It resolves compilation errors related to `libarchive`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_32

LANGUAGE: bash
CODE:
```
$ brew install pkg-config
```

----------------------------------------

TITLE: Creating HTTP/2 SETTINGS Frame for Testing in Node.js
DESCRIPTION: Example showing how to create an empty HTTP/2 SETTINGS frame with an optional ACK flag. This creates a serialized settings frame that can be written to a socket for testing HTTP/2 implementations.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
// ack is a boolean indicating whether or not to set the ACK flag.
const frame = new http2.SettingsFrame(ack);

socket.write(frame.data);
```

----------------------------------------

TITLE: Using expectWarning for Testing Warning Messages
DESCRIPTION: Shows various ways to use the expectWarning function to test warning messages, including deprecation warnings and custom warning codes. Demonstrates different validation patterns for single and multiple warnings.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
const { expectWarning } = require('../common');

expectWarning('Warning', 'Foobar is really bad');

expectWarning('DeprecationWarning', 'Foobar is deprecated', 'DEP0XXX');

expectWarning('DeprecationWarning', [
  'Foobar is deprecated', 'DEP0XXX',
]);

expectWarning('DeprecationWarning', [
  ['Foobar is deprecated', 'DEP0XXX'],
  ['Baz is also deprecated', 'DEP0XX2'],
]);

expectWarning('DeprecationWarning', {
  DEP0XXX: 'Foobar is deprecated',
  DEP0XX2: 'Baz is also deprecated',
});

expectWarning({
  DeprecationWarning: {
    DEP0XXX: 'Foobar is deprecated',
    DEP0XX1: 'Baz is also deprecated',
  },
  Warning: [
    ['Multiple array entries are fine', 'SpecialWarningCode'],
    ['No code is also fine'],
  ],
  SingleEntry: ['This will also work', 'WarningCode'],
  SingleString: 'Single string entries without code will also work',
});
```

----------------------------------------

TITLE: React Frontend Setup with Bun
DESCRIPTION: Client-side code for setting up a React application that will be bundled with Bun. Shows initialization of React DOM and rendering the App component.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/fullstack.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
import "./styles.css";
import { createRoot } from "react-dom/client";
import { App } from "./app.tsx";

document.addEventListener("DOMContentLoaded", () => {
  const root = createRoot(document.getElementById("root"));
  root.render(<App />);
});
```

----------------------------------------

TITLE: Timer Management (us_timer_t) Implementation in C
DESCRIPTION: High-precision timer implementation for efficient event scheduling. Uses a single timer per event loop for improved performance.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-usockets/misc/manual.md#2025-04-22_snippet_3

LANGUAGE: c
CODE:
```
WIN32_EXPORT struct us_timer_t *us_create_timer(struct us_loop_t *loop, int fallthrough, unsigned int ext_size);

WIN32_EXPORT void *us_timer_ext(struct us_timer_t *timer);

WIN32_EXPORT void us_timer_close(struct us_timer_t *timer);

WIN32_EXPORT void us_timer_set(struct us_timer_t *timer, void (*cb)(struct us_timer_t *t), int ms, int repeat_ms);

WIN32_EXPORT struct us_loop_t *us_timer_loop(struct us_timer_t *t);
```

----------------------------------------

TITLE: Configuring Local Git Diff for Bun Lockfile
DESCRIPTION: These commands configure Git locally to use Bun for generating human-readable diffs of .lockb files. It sets the textconv command to 'bun' and marks the diff as binary.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/git-diff-bun-lockfile.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
$ git config diff.lockb.textconv bun
$ git config diff.lockb.binary true
```

----------------------------------------

TITLE: Using Jest-compatible Timer Functions in bun:test
DESCRIPTION: Shows how to use Jest's useFakeTimers and useRealTimers compatibility layer in bun:test, highlighting the differences in implementation between Jest and Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/test/time.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
test("just like in jest", () => {
  jest.useFakeTimers();
  jest.setSystemTime(new Date("2020-01-01T00:00:00.000Z"));
  expect(new Date().getFullYear()).toBe(2020);
  jest.useRealTimers();
  expect(new Date().getFullYear()).toBeGreaterThan(2020);
});

test("unlike in jest", () => {
  const OriginalDate = Date;
  jest.useFakeTimers();
  if (typeof Bun === "undefined") {
    // In Jest, the Date constructor changes
    // That can cause all sorts of bugs because suddenly Date !== Date before the test.
    expect(Date).not.toBe(OriginalDate);
    expect(Date.now).not.toBe(OriginalDate.now);
  } else {
    // In bun:test, Date constructor does not change when you useFakeTimers
    expect(Date).toBe(OriginalDate);
    expect(Date.now).toBe(OriginalDate.now);
  }
});
```

----------------------------------------

TITLE: Installing Dependencies with Bun
DESCRIPTION: Command to install the project dependencies using Bun package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/expect-to-equal/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
bun install
```

----------------------------------------

TITLE: Building MDX Native Addon with Cargo
DESCRIPTION: Command to build the native MDX addon module in release mode using Cargo.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-build-mdx-rs/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
cargo build --release
```

----------------------------------------

TITLE: Running Node.js Server for Upload Benchmark in Bash
DESCRIPTION: Command to start a Node.js server that will receive the test file uploads during the benchmark.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/stream-file-upload-client/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
node server-node.mjs
```

----------------------------------------

TITLE: Install Bun Dependencies on Arch Linux
DESCRIPTION: This command installs the dependencies required for building Bun on Arch Linux using pacman.  It includes base development tools, compilers, and required libraries.  `sudo` is used to gain root privileges for installation.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_2

LANGUAGE: bash
CODE:
```
$ sudo pacman -S base-devel ccache cmake git go libiconv libtool make ninja pkg-config python rust sed unzip ruby
```

----------------------------------------

TITLE: Nested Transactions and Savepoints in Bun SQLite (TypeScript)
DESCRIPTION: Illustrates how transaction functions in Bun can be nested, with inner transactions becoming savepoints transparently. Full setup includes table creation and insertion logic, demonstrating atomic multi-table operations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/sqlite.md#2025-04-22_snippet_25

LANGUAGE: TypeScript
CODE:
```
// setup
import { Database } from "bun:sqlite";
const db = Database.open(":memory:");
db.run(
  "CREATE TABLE expenses (id INTEGER PRIMARY KEY AUTOINCREMENT, note TEXT, dollars INTEGER);",
);
db.run(
  "CREATE TABLE cats (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT UNIQUE, age INTEGER)",
);
const insertExpense = db.prepare(
  "INSERT INTO expenses (note, dollars) VALUES (?, ?)",
);
const insert = db.prepare("INSERT INTO cats (name, age) VALUES ($name, $age)");
const insertCats = db.transaction(cats => {
  for (const cat of cats) insert.run(cat);
});

const adopt = db.transaction(cats => {
  insertExpense.run("adoption fees", 20);
  insertCats(cats); // nested transaction
});

adopt([
  { $name: "Joey", $age: 2 },
  { $name: "Sally", $age: 4 },
  { $name: "Junior", $age: 1 },
]);

```

----------------------------------------

TITLE: Updating APT Repository for GCC
DESCRIPTION: This command adds the Ubuntu Toolchain PPA repository, which contains newer versions of GCC, including GCC 11. This is necessary if the default repositories do not have GCC 11 available.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_29

LANGUAGE: bash
CODE:
```
$ sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
```

----------------------------------------

TITLE: CSS Output After Bundling
DESCRIPTION: The resulting CSS after Bun has processed and bundled the CSS files. The imported styles are included first, followed by the styles from the main file.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/html.md#2025-04-22_snippet_4

LANGUAGE: css
CODE:
```
body {
  background-color: red;
}

.container {
  background-color: blue;
}
```

----------------------------------------

TITLE: Run Bun with Valgrind
DESCRIPTION: This command runs Bun with Valgrind to detect memory issues.  It uses specific Valgrind options, including `--fair-sched=try` and `--track-origins=yes`.  Valgrind is slow and may report spurious errors, particularly with JavaScriptCore.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_22

LANGUAGE: bash
CODE:
```
$ valgrind --fair-sched=try --track-origins=yes bun-debug <args>
```

----------------------------------------

TITLE: Install pkg-config on macOS
DESCRIPTION: This command installs the `pkg-config` utility using Homebrew on macOS. `pkg-config` is used to retrieve information about installed libraries, which is necessary for compiling `libarchive`.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_30

LANGUAGE: bash
CODE:
```
$ brew install pkg-config
```

----------------------------------------

TITLE: ArrayStream Implementation Example
DESCRIPTION: Demonstrates the usage of ArrayStream module to create a simple stream that pushes elements from an array, useful for mock streaming in tests.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
const ArrayStream = require('../common/arraystream');
const stream = new ArrayStream();
stream.run(['a', 'b', 'c']);
```

----------------------------------------

TITLE: Styling Example Domain Page with CSS
DESCRIPTION: Defines the CSS styles for the example domain page, including responsive design for different screen sizes.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/bun/http/fetch.js.txt#2025-04-22_snippet_1

LANGUAGE: CSS
CODE:
```
body {
    background-color: #f0f0f2;
    margin: 0;
    padding: 0;
    font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
    
}
div {
    width: 600px;
    margin: 5em auto;
    padding: 2em;
    background-color: #fdfdff;
    border-radius: 0.5em;
    box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);
}
a:link, a:visited {
    color: #38488f;
    text-decoration: none;
}
@media (max-width: 700px) {
    div {
        margin: 0 auto;
        width: auto;
    }
}
```

----------------------------------------

TITLE: Invalid CSS Module Composition Examples
DESCRIPTION: Demonstrates invalid uses of the 'composes' property, including using it with ID selectors instead of class selectors and using it with compound selectors rather than simple class selectors.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/css.md#2025-04-22_snippet_30

LANGUAGE: css
CODE:
```
#button {
  /* Invalid! `#button` is not a class selector */
  composes: background;
}

.button,
.button-secondary {
  /* Invalid! `.button, .button-secondary` is not a simple selector */
  composes: background;
}
```

----------------------------------------

TITLE: Running Express Server in Deno Runtime
DESCRIPTION: Command to start the Express.js server using the Deno runtime with all permissions enabled.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/express/README.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
deno run -A ./express.mjs
```

----------------------------------------

TITLE: Making JSC Debug
DESCRIPTION: Makes a debug build of JavaScriptCore (JSC).  It's suggested to remove `InspectorProtocolObjects.h`.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_26

LANGUAGE: bash
CODE:
```
$ make jsc-debug && rm vendor/WebKit/WebKitBuild/Debug/JavaScriptCore/DerivedSources/inspector/InspectorProtocolObjects.h
```

----------------------------------------

TITLE: Creating a CSS File with Imports
DESCRIPTION: A CSS file that imports another CSS file using the @import statement. Bun will automatically bundle these files together, resolving the imports and maintaining the cascade order.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/html.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
@import "./abc.css";

.container {
  background-color: blue;
}
```

----------------------------------------

TITLE: Bun Debugging Command Examples
DESCRIPTION: Various command line examples showing how to start Bun with different debugging flags and port configurations.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/debugger.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
$ bun --inspect=4000 server.ts
$ bun --inspect=localhost:4000 server.ts
$ bun --inspect=localhost:4000/prefix server.ts
```

----------------------------------------

TITLE: Configuring Analysis Tools for Bun Project
DESCRIPTION: Sets up various code analysis tools like Clang Format, Clang Tidy, Zig Format, and Prettier if analysis is enabled.
SOURCE: https://github.com/oven-sh/bun/blob/main/CMakeLists.txt#2025-04-22_snippet_7

LANGUAGE: CMake
CODE:
```
if(ENABLE_ANALYSIS)
  include(RunClangFormat)
  include(RunClangTidy)
  include(RunZigFormat)
  include(RunPrettier)
endif()
```

----------------------------------------

TITLE: Demonstrating ECMAScript Modules in HTML with JavaScript
DESCRIPTION: This example shows a basic setup of a web page using ECMAScript modules. It includes an HTML file that loads a JavaScript module, which in turn imports another module. This demonstrates the native module import/export system in modern browsers.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/intro.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<html>
  <head>
    <script type="module" src="/index.js" ></script>
  </head>
</html>
```

LANGUAGE: javascript
CODE:
```
import {sayHello} from "./hello.js";

sayHello();
```

LANGUAGE: javascript
CODE:
```
export function sayHello() {
  console.log("Hello, world!");
}
```

----------------------------------------

TITLE: Displaying Bun Project Information in Markdown
DESCRIPTION: This snippet presents the project name 'Bun' as a main heading and provides a brief description of the Linux x64 binary along with a link to the official website.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-release/npm/@oven/bun-linux-x64/README.md#2025-04-22_snippet_0

LANGUAGE: Markdown
CODE:
```
# Bun

This is the Linux x64 binary for Bun, a fast all-in-one JavaScript runtime. https://bun.sh
```

----------------------------------------

TITLE: Defining a Database Schema for Authors Table (TypeScript)
DESCRIPTION: Defines an 'authors' table schema in Drizzle ORM using pg-core primitives, with columns for id, name, bio, and createdAt timestamp. Requires drizzle-orm/pg-core dependency. Output is an exported schema object for use in Drizzle queries and migrations. Handles default values, nullability, and primary key constraints.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/neon-drizzle.md#2025-04-22_snippet_5

LANGUAGE: ts
CODE:
```
import { pgTable, integer, serial, text, timestamp } from "drizzle-orm/pg-core";\n\nexport const authors = pgTable("authors", {\n  id: serial("id").primaryKey(),\n  name: text("name").notNull(),\n  bio: text("bio"),\n  createdAt: timestamp("created_at").notNull().defaultNow(),\n});
```

----------------------------------------

TITLE: Installing Xcode Command Line Tools (macOS)
DESCRIPTION: This command installs the Xcode Command Line Tools on macOS. It resolves `library not found for -lSystem` errors during compilation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_33

LANGUAGE: bash
CODE:
```
$ xcode-select --install
```

----------------------------------------

TITLE: Snapshot File Structure in Project
DESCRIPTION: Directory structure showing how snapshot files are organized alongside test files in the __snapshots__ directory
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/test/update-snapshots.md#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
test
├── __snapshots__
│   └── snap.test.ts.snap
└── snap.test.ts
```

----------------------------------------

TITLE: Specifying Git dependencies in package.json
DESCRIPTION: JSON configuration showing various ways to specify Git dependencies in the package.json file, including different protocols and repositories.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/index.md#2025-04-22_snippet_7

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "dayjs": "git+https://github.com/iamkun/dayjs.git",
    "lodash": "git+ssh://github.com/lodash/lodash.git#4.17.21",
    "moment": "git@github.com:moment/moment.git",
    "zod": "github:colinhacks/zod"
  }
}
```

----------------------------------------

TITLE: Action Handler with Options and Command Object Access
DESCRIPTION: Demonstrates an action handler that receives command arguments, options, and the command object itself. This provides access to all the parsed information and the command context.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_18

LANGUAGE: javascript
CODE:
```
program
  .argument('<name>')
  .option('-t, --title <honorific>', 'title to use before name')
  .option('-d, --debug', 'display some debugging')
  .action((name, options, command) => {
    if (options.debug) {
      console.error('Called %s with options %o', command.name(), options);
    }
    const title = options.title ? `${options.title} ` : '';
    console.log(`Thank-you ${title}${name}`);
  });
```

----------------------------------------

TITLE: Defining ZigGlobalObject Lookup Table for Bun Runtime
DESCRIPTION: This code snippet defines a lookup table for the ZigGlobalObject in the Bun JavaScript runtime. It maps JavaScript global functions and objects to their C++ implementations and specifies their attributes.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/bun.js/bindings/ZigGlobalObject.lut.txt#2025-04-22_snippet_0

LANGUAGE: C++
CODE:
```
/* Source for ZigGlobalObject.lut.h
@begin bunGlobalObjectTable
  addEventListener                jsFunctionAddEventListener                           Function 2
  alert                           WebCore__alert                                       Function 1
  atob                            functionATOB                                         Function 1
  btoa                            functionBTOA                                         Function 1
  clearImmediate                  functionClearImmediate                               Function 1
  clearInterval                   functionClearInterval                                Function 1
  clearTimeout                    functionClearTimeout                                 Function 1
  confirm                         WebCore__confirm                                     Function 1
  dispatchEvent                   jsFunctionDispatchEvent                              Function 1
  fetch                           constructBunFetchObject                              PropertyCallback
  postMessage                     jsFunctionPostMessage                                Function 1
  prompt                          WebCore__prompt                                      Function 1
  queueMicrotask                  functionQueueMicrotask                               Function 2
  removeEventListener             jsFunctionRemoveEventListener                        Function 2
  reportError                     functionReportError                                  Function 1
  setImmediate                    functionSetImmediate                                 Function 1
  setInterval                     functionSetInterval                                  Function 1
  setTimeout                      functionSetTimeout                                   Function 1
  structuredClone                 functionStructuredClone                              Function 2
  
  global                          GlobalObject_getGlobalThis                           PropertyCallback
  
  Bun                             GlobalObject::m_bunObject                            CellProperty|DontDelete|ReadOnly
  File                            GlobalObject::m_JSDOMFileConstructor                 CellProperty
  crypto                          GlobalObject::m_cryptoObject                         CellProperty
  navigator                       GlobalObject::m_navigatorObject                      CellProperty
  performance                     GlobalObject::m_performanceObject                    CellProperty
  process                         GlobalObject::m_processObject                        CellProperty

  Blob                            GlobalObject::m_JSBlob                               ClassStructure
  Buffer                          GlobalObject::m_JSBufferClassStructure               ClassStructure
  BuildError                      GlobalObject::m_JSBuildMessage                       ClassStructure
  BuildMessage                    GlobalObject::m_JSBuildMessage                       ClassStructure
  Crypto                          GlobalObject::m_JSCrypto                             ClassStructure
  HTMLRewriter                    GlobalObject::m_JSHTMLRewriter                       ClassStructure
  Request                         GlobalObject::m_JSRequest                            ClassStructure
  ResolveError                    GlobalObject::m_JSResolveMessage                     ClassStructure
  ResolveMessage                  GlobalObject::m_JSResolveMessage                     ClassStructure
  Response                        GlobalObject::m_JSResponse                           ClassStructure
  TextDecoder                     GlobalObject::m_JSTextDecoder                        ClassStructure

  AbortController                 AbortControllerConstructorCallback                   PropertyCallback
  AbortSignal                     AbortSignalConstructorCallback                       PropertyCallback
  BroadcastChannel                BroadcastChannelConstructorCallback                  PropertyCallback
  ByteLengthQueuingStrategy       ByteLengthQueuingStrategyConstructorCallback         PropertyCallback
  CloseEvent                      CloseEventConstructorCallback                        PropertyCallback
  CountQueuingStrategy            CountQueuingStrategyConstructorCallback              PropertyCallback
  CryptoKey                       CryptoKeyConstructorCallback                         PropertyCallback
  CustomEvent                     CustomEventConstructorCallback                       PropertyCallback
  DOMException                    DOMExceptionConstructorCallback                      PropertyCallback
  ErrorEvent                      ErrorEventConstructorCallback                        PropertyCallback
  Event                           EventConstructorCallback                             PropertyCallback
  EventTarget                     EventTargetConstructorCallback                       PropertyCallback
  FormData                        DOMFormDataConstructorCallback                       PropertyCallback
  Headers                         FetchHeadersConstructorCallback                      PropertyCallback
  MessageChannel                  MessageChannelConstructorCallback                    PropertyCallback
  MessageEvent                    MessageEventConstructorCallback                      PropertyCallback
  MessagePort                     MessagePortConstructorCallback                       PropertyCallback
  Performance                     PerformanceConstructorCallback                       PropertyCallback
  PerformanceEntry                PerformanceEntryConstructorCallback                  PropertyCallback
  PerformanceMark                 PerformanceMarkConstructorCallback                   PropertyCallback
  PerformanceMeasure              PerformanceMeasureConstructorCallback                PropertyCallback
  PerformanceObserver             PerformanceObserverConstructorCallback               PropertyCallback
  PerformanceObserverEntryList    PerformanceObserverEntryListConstructorCallback      PropertyCallback
  PerformanceResourceTiming       PerformanceResourceTimingConstructorCallback         PropertyCallback
  PerformanceServerTiming         PerformanceServerTimingConstructorCallback           PropertyCallback
  PerformanceTiming               PerformanceTimingConstructorCallback                 PropertyCallback
  ReadableByteStreamController    ReadableByteStreamControllerConstructorCallback      PropertyCallback
  ReadableStream                  ReadableStreamConstructorCallback                    PropertyCallback
  ReadableStreamBYOBReader        ReadableStreamBYOBReaderConstructorCallback          PropertyCallback
  ReadableStreamBYOBRequest       ReadableStreamBYOBRequestConstructorCallback         PropertyCallback
  ReadableStreamDefaultController ReadableStreamDefaultControllerConstructorCallback   PropertyCallback
  ReadableStreamDefaultReader     ReadableStreamDefaultReaderConstructorCallback       PropertyCallback
  SubtleCrypto                    SubtleCryptoConstructorCallback                      PropertyCallback
  TextDecoderStream               TextDecoderStreamConstructorCallback                 PropertyCallback
  TextEncoder                     TextEncoderConstructorCallback                       PropertyCallback
  TextEncoderStream               TextEncoderStreamConstructorCallback                 PropertyCallback
  TransformStream                 TransformStreamConstructorCallback                   PropertyCallback
  TransformStreamDefaultController TransformStreamDefaultControllerConstructorCallback PropertyCallback
  URL                             DOMURLConstructorCallback                            DontEnum|PropertyCallback
  URLSearchParams                 URLSearchParamsConstructorCallback                   DontEnum|PropertyCallback
  WebSocket                       WebSocketConstructorCallback                         PropertyCallback
  Worker                          WorkerConstructorCallback                            PropertyCallback
  WritableStream                  WritableStreamConstructorCallback                    PropertyCallback
  WritableStreamDefaultController WritableStreamDefaultControllerConstructorCallback   PropertyCallback
  WritableStreamDefaultWriter     WritableStreamDefaultWriterConstructorCallback       PropertyCallback
@end
*/
```

----------------------------------------

TITLE: V8 Handle Scope Management Functions
DESCRIPTION: Function signatures for managing V8 handle scopes, which control the lifetime of JavaScript object references.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/symbols.txt#2025-04-22_snippet_0

LANGUAGE: C++
CODE:
```
__ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm
__ZN2v811HandleScopeC1EPNS_7IsolateE
__ZN2v811HandleScopeD1Ev
__ZN2v811HandleScopeD2Ev
```

----------------------------------------

TITLE: Printing Stored Lockfile Hash with Bun
DESCRIPTION: Retrieves and prints the hash value that is currently stored within the `bun.lockb` lockfile itself. This may differ from the hash generated by `bun pm hash` if the lockfile has been modified since it was last generated.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/pm.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
$ bun pm hash-print
```

----------------------------------------

TITLE: Build Bun with Local JSC
DESCRIPTION: This command initiates the build process for Bun using the local JSC build configuration. It compiles the necessary components and places the output in the `./build/debug-local` directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_27

LANGUAGE: bash
CODE:
```
$ bun run build:local
```

----------------------------------------

TITLE: Using skipIfSingleExecutableIsNotSupported from SEA module
DESCRIPTION: Skips the rest of the tests if Single Executable Application functionality is not supported in the current configuration.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_20

LANGUAGE: JavaScript
CODE:
```
skipIfSingleExecutableIsNotSupported()
```

----------------------------------------

TITLE: Using validate from report module
DESCRIPTION: Validates the schema of a diagnostic report file at the specified filepath. Throws an exception if the report fails validation.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_18

LANGUAGE: JavaScript
CODE:
```
validate(filepath)
```

----------------------------------------

TITLE: Builtin Variable Access Using $ Prefix in TypeScript
DESCRIPTION: Demonstrates how to use the $ prefix to access private properties, JSC intrinsics, and internal variables in Bun's module system. The $ prefix provides access to tamper-proof versions of globals and prototype values.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/js/README.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// Many globals have private versions which are impossible for the user to\n// tamper with. Though, these global variables are auto-prefixed by the bundler.\nconst hello = $Array.from(...);\n\n// Similar situation with prototype values. These aren't autoprefixed since it depends on type.\nsomething.$then(...);\nmap.$set(...);\n\n// Internal variables we define\n$requireMap.$has("elysia");\n\n// JSC engine intrinsics. These usually translate directly to bytecode instructions.\nconst arr = $newArrayWithSize(5);\n// A side effect of this is that using an intrinsic incorrectly like\n// this will fail to parse and cause a segfault.\nconsole.log($getInternalField)
```

----------------------------------------

TITLE: JSX Output with Default Import Source
DESCRIPTION: Transpiled output showing the default import source behavior, where the jsx function is imported from React's jsx-runtime module.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/jsx.md#2025-04-22_snippet_15

LANGUAGE: tsx
CODE:
```
import { jsx } from "react/jsx-runtime";
jsx("Box", { width: 5, children: "Hello" });
```

----------------------------------------

TITLE: Setting Up Build Tools for Bun Project
DESCRIPTION: Includes CMake modules for setting up various build tools and dependencies like Git, Buildkite, Bun, Esbuild, Zig, and Rust.
SOURCE: https://github.com/oven-sh/bun/blob/main/CMakeLists.txt#2025-04-22_snippet_5

LANGUAGE: CMake
CODE:
```
include(SetupGit)
include(SetupBuildkite)
include(SetupBun)
include(SetupEsbuild)
include(SetupZig)
include(SetupRust)
```

----------------------------------------

TITLE: Reinstall ccache on macOS
DESCRIPTION: These commands uninstall and then reinstall `ccache` using Homebrew on macOS.  This is intended to resolve conflicts between `ccache` and the TinyCC build process.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_33

LANGUAGE: bash
CODE:
```
brew uninstall ccache
brew install ccache
```

----------------------------------------

TITLE: Rebuilding Bun with modified JavaScriptCore
DESCRIPTION: Instructions for rebuilding Bun with custom changes to JavaScriptCore in compliance with LGPL-2 requirements. The commands initialize git submodules, compile JavaScriptCore, and build Bun with the modifications.
SOURCE: https://github.com/oven-sh/bun/blob/main/LICENSE.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
git submodule update --init --recursive
make jsc
zig build
```

----------------------------------------

TITLE: Structuring HTML for Example Domain Page
DESCRIPTION: Defines the basic HTML structure for the example domain page, including metadata, title, and body content.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/bun/http/fetch.js.txt#2025-04-22_snippet_0

LANGUAGE: HTML
CODE:
```
<!doctype html>
<html>
<head>
    <title>Example Domain</title>

    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type="text/css">
    </style>    
</head>

<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.</p>
    <p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>
```

----------------------------------------

TITLE: Configuring TLS Verification for Windows Hosts
DESCRIPTION: Disables TLS certificate verification on Windows hosts to work around GitHub download issues.
SOURCE: https://github.com/oven-sh/bun/blob/main/CMakeLists.txt#2025-04-22_snippet_2

LANGUAGE: CMake
CODE:
```
if (CMAKE_HOST_WIN32)
  # Workaround for TLS certificate verification issue on Windows when downloading from GitHub
  # Remove this once we've bumped the CI machines build image
  set(CMAKE_TLS_VERIFY 0)
endif()
```

----------------------------------------

TITLE: Build Bun with Dynamic libatomic Linking
DESCRIPTION: This command builds Bun with dynamic linking for `libatomic`.  It's used when building on distributions without a static `libatomic` library.  Note that the resulting binary may not be portable.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_32

LANGUAGE: bash
CODE:
```
$ bun run build -DUSE_STATIC_LIBATOMIC=OFF
```

----------------------------------------

TITLE: Testing HTMLEscape String Transformations in Rust
DESCRIPTION: A series of tests that verify HTMLEscape's handling of repeated '<' characters and their conversion to '&lt;', testing various string lengths including edge cases at 128-byte boundaries. The tests also verify handling of long strings and concatenated escape sequences.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_13

LANGUAGE: Rust
CODE:
```
assert_eq!(HTMLEscape::from("<".repeat(1024).as_ref()).to_string(), "&lt;".repeat(1024));

assert_eq!(HTMLEscape::from("<".repeat(129).as_ref()).to_string(), "&lt;".repeat(129));

assert_eq!(HTMLEscape::from("<".repeat(128 * 2 - 1).as_ref()).to_string(), "&lt;".repeat(128 * 2 - 1));

assert_eq!(HTMLEscape::from("<".repeat(128 * 8 - 1).as_ref()).to_string(), "&lt;".repeat(128 * 8 - 1));

assert_eq!(HTMLEscape::from(string_long).to_string(), string_long);

assert_eq!(HTMLEscape::from([string_long, "<"].join("").as_ref()).to_string(), [string_long, "&lt;"].join(""));

assert_eq!(HTMLEscape::from(["<", string_long].join("").as_ref()).to_string(), ["&lt;", string_long].join(""));

assert_eq!(HTMLEscape::from(escapes.repeat(1024).as_ref()).to_string(), escaped.repeat(1024));
```

----------------------------------------

TITLE: Two-way IPC Communication in Parent Process
DESCRIPTION: Demonstrates bidirectional communication between parent and child processes, showing how to send messages to the child and handle responses.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/process/ipc.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const childProc = Bun.spawn(["bun", "child.ts"], {
  ipc(message, childProc) {
    /**
     * The message received from the sub process
     **/
    childProc.send("Respond to child")
  },
});

childProc.send("I am your father"); // The parent can send messages to the child as well
```

----------------------------------------

TITLE: Installing LLVM 19 (macOS)
DESCRIPTION: Installs LLVM version 19, which is required by Bun, using Homebrew. This ensures the correct LLVM version is available for building Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_8

LANGUAGE: bash
CODE:
```
$ brew install llvm@19
```

----------------------------------------

TITLE: HTML Document Structure with GitHub Meta Tags
DESCRIPTION: HTML template containing DNS prefetch directives, GitHub repository metadata, OpenGraph tags, stylesheet links and other head elements required for GitHub repository pages
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_0

LANGUAGE: HTML
CODE:
```
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
  <link rel="dns-prefetch" href="https://github.githubassets.com">
  <link rel="dns-prefetch" href="https://avatars0.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars1.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars2.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars3.githubusercontent.com">
  <link rel="dns-prefetch" href="https://github-cloud.s3.amazonaws.com">
  <link rel="dns-prefetch" href="https://user-images.githubusercontent.com/">
```

----------------------------------------

TITLE: Installing Dependencies with Bun
DESCRIPTION: Command to install dependencies using Bun package manager.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/postgres/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
bun install
```

----------------------------------------

TITLE: Complete CLI Program with Subcommands
DESCRIPTION: More complex example demonstrating a CLI utility with subcommands, arguments, and options using Commander.js
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
const { Command } = require('commander');
const program = new Command();

program
  .name('string-util')
  .description('CLI to some JavaScript string utilities')
  .version('0.8.0');

program.command('split')
  .description('Split a string into substrings and display as an array')
  .argument('<string>', 'string to split')
  .option('--first', 'display just the first substring')
  .option('-s, --separator <char>', 'separator character', ',')
  .action((str, options) => {
    const limit = options.first ? 1 : undefined;
    console.log(str.split(options.separator, limit));
  });

program.parse();
```

----------------------------------------

TITLE: Generating UV POSIX Stubs in Bun
DESCRIPTION: Command to run the Bun script that generates UV POSIX stubs based on the updated symbol list and configuration files.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/bun.js/bindings/libuv/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
bun uv-posix-stubs
```

----------------------------------------

TITLE: Installing Bun Dependencies (Arch)
DESCRIPTION: Installs dependencies needed to build Bun on Arch Linux using pacman. This includes development tools, compilers, and essential libraries.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_2

LANGUAGE: bash
CODE:
```
$ sudo pacman -S base-devel ccache cmake git go libiconv libtool make ninja pkg-config python rust sed unzip ruby
```

----------------------------------------

TITLE: Removing packages with Bun
DESCRIPTION: Command to remove a dependency using Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/install/index.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
$ bun remove preact
```

----------------------------------------

TITLE: Process Working Directory Command Example
DESCRIPTION: Shows how to use the pwdCommand utility to spawn a process with platform-normalized pwd command options.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
const common = require('../common');
const { spawn } = require('node:child_process');

spawn(...common.pwdCommand, { stdio: ['pipe'] });
```

----------------------------------------

TITLE: Importing YAML Data in TypeScript
DESCRIPTION: Example of importing data from a YAML file in a TypeScript React component after configuring the YAML plugin.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-plugin-yaml/README.md#2025-04-22_snippet_2

LANGUAGE: ts
CODE:
```
import data from "./data.yaml";

export function Component() {
  return <div>{data.name}</div>;
}
```

----------------------------------------

TITLE: Executing CSS HMR Frame Time Analysis for Bun Project
DESCRIPTION: This command runs a Node.js script to analyze CSS Hot Module Replacement frame times for the Bun project. It sets environment variables for sleep interval and project name before executing the script.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/hot-module-reloading/css-stress-test/bun.latest.32ms.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
SLEEP_INTERVAL=32 PROJECT=bun node read-frames.js
```

----------------------------------------

TITLE: 256 ANSI Color Examples in TypeScript
DESCRIPTION: Examples of converting colors to 256 ANSI format using Bun.color() with 'ansi-256' output format
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/color.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
Bun.color("red", "ansi-256"); // "\u001b[38;5;196m"
Bun.color(0xff0000, "ansi-256"); // "\u001b[38;5;196m"
Bun.color("#f00", "ansi-256"); // "\u001b[38;5;196m"
Bun.color("#ff0000", "ansi-256"); // "\u001b[38;5;196m"
```

----------------------------------------

TITLE: Special Characters and Emoji Examples
DESCRIPTION: Text samples showing hello repetition, copyright symbol (©), and UTF-16 emoji (😀) handling.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/third_party/body-parser/text.txt#2025-04-22_snippet_0

LANGUAGE: text
CODE:
```
hello hello
copyright symbols: ©
My UTF-16 string is 😀
```

----------------------------------------

TITLE: Running Tests in Bun Environment
DESCRIPTION: Command to run the test file specifically with Bun test runner, avoiding the Vitest implementation.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/expect-to-equal/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
# so it doesn't run the vitest one
bun test expect-to-equal.test.js
```

----------------------------------------

TITLE: Symbol Definition Type in cc Configuration
DESCRIPTION: TypeScript type definition for the symbols configuration in the cc function.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/api/cc.md#2025-04-22_snippet_7

LANGUAGE: ts
CODE:
```
type Symbols = {
  [key: string]: {
    args: FFIType[];
    returns: FFIType;
  };
};
```

----------------------------------------

TITLE: Configuring Silent Mode for Bun Run
DESCRIPTION: Settings to suppress command reporting output when using bun run, with examples showing the difference in output behavior.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/bunfig.md#2025-04-22_snippet_34

LANGUAGE: toml
CODE:
```
[run]
silent = true
```

LANGUAGE: sh
CODE:
```
$ bun run dev
> $ echo "Running \"dev\"..."
Running "dev"...

$ bun run dev
Running "dev"...
```

----------------------------------------

TITLE: Forcing Garbage Collection in Bun
DESCRIPTION: This code snippet shows how to manually trigger garbage collection in Bun using the Bun.gc() function. It demonstrates both synchronous and asynchronous garbage collection methods.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/benchmarking.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
Bun.gc(true); // synchronous
Bun.gc(false); // asynchronous
```

----------------------------------------

TITLE: File System Mutation Prevention Example in MJS
DESCRIPTION: Demonstrates how to use mustNotMutateObjectDeep to prevent mutation of objects during file operations while still allowing controlled mutations through the original reference.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_2

LANGUAGE: mjs
CODE:
```
import { open } from 'node:fs/promises';
import { mustNotMutateObjectDeep } from '../common/index.mjs';

const _mutableOptions = { length: 4, position: 8 };
const options = mustNotMutateObjectDeep(_mutableOptions);

// In filehandle.read or filehandle.write, attempt to mutate options will throw
// In the test code, options can still be mutated via _mutableOptions
const fh = await open('/path/to/file', 'r+');
const { buffer } = await fh.read(options);
_mutableOptions.position = 4;
await fh.write(buffer, options);

// Inline usage
const stats = await fh.stat(mustNotMutateObjectDeep({ bigint: true }));
console.log(stats.size);
```

----------------------------------------

TITLE: Creating HTTP/2 HEADERS Frame for Testing in Node.js
DESCRIPTION: Example demonstrating how to create an HTTP/2 HEADERS frame with a specified stream ID, payload, padding length, and end-of-stream flag. The frame can then be written to a socket for testing HTTP/2 implementations.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
// id is the 32-bit stream identifier
// payload is a Buffer containing the HEADERS payload (see either
// http2.kFakeRequestHeaders or http2.kFakeResponseHeaders).
// padlen is an 8-bit integer giving the number of padding bytes to include
// final is a boolean indicating whether the End-of-stream flag should be set,
// defaults to false.
const frame = new http2.HeadersFrame(id, payload, padlen, final);

socket.write(frame.data);
```

----------------------------------------

TITLE: Implementing JSX Button Component in MDX
DESCRIPTION: A simple Button component used directly in MDX that shows an alert message when clicked. This demonstrates how JSX components can be embedded within MDX content.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-build-mdx-rs/input/page4.mdx#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<Button onClick={() => alert("Hello!")}>Click me</Button>
```

----------------------------------------

TITLE: Upgrading Bun to the latest version
DESCRIPTION: This command upgrades an existing Bun installation to the latest available version. It ensures users have access to the most recent features and improvements.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-release/npm/bun/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
bun upgrade
```

----------------------------------------

TITLE: Async Action Handlers in Commander.js
DESCRIPTION: Demonstrates how to use async action handlers with Commander.js. When using async handlers, .parseAsync() must be used instead of .parse() to properly handle promises.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_20

LANGUAGE: javascript
CODE:
```
async function run() { /* code goes here */ }

async function main() {
  program
    .command('run')
    .action(run);
  await program.parseAsync(process.argv);
}
```

----------------------------------------

TITLE: Testing HTML Escaping in Rust
DESCRIPTION: This code snippet contains unit tests for the HTMLEscape struct's functionality. It tests the escaping of short and long strings, as well as repeated versions, ensuring the correct HTML entities are produced.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_17

LANGUAGE: Rust
CODE:
```
assert_eq!(
    HTMLEscape::from(string_short).to_string(),
    string_short_escaped
);
assert_eq!(
    HTMLEscape::from(string_short.repeat(1024).as_ref()).to_string(),
    string_short_escaped.repeat(1024)
);
assert_eq!(
    HTMLEscape::from(string_long).to_string(),
    string_long_escaped
);
```

----------------------------------------

TITLE: Package Name Reference in Markdown
DESCRIPTION: Shows the package name formatting using Markdown inline code blocks.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-build-mdx-rs/npm/linux-arm64-gnu/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
`bun-mdx-rs-linux-arm64-gnu`
```

LANGUAGE: markdown
CODE:
```
`bun-mdx-rs`
```

----------------------------------------

TITLE: Installing Bun (Homebrew)
DESCRIPTION: Installs Bun using Homebrew, a package manager for macOS. It adds the oven-sh/bun tap and then installs Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_7

LANGUAGE: bash
CODE:
```
$ brew tap oven-sh/bun
$ brew install bun
```

----------------------------------------

TITLE: Rendering SVG Icons for GitHub UI in HTML
DESCRIPTION: This snippet defines SVG icons used in the GitHub user interface for project, search, and repository navigation. It includes path definitions for each icon shape.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_7

LANGUAGE: HTML
CODE:
```
<svg height="16" width="16" class="octicon octicon-project flex-shrink-0 js-jump-to-octicon-project d-none" title="Project" aria-label="Project" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M1.75 0A1.75 1.75 0 000 1.75v12.5C0 15.216.784 16 1.75 16h12.5A1.75 1.75 0 0016 14.25V1.75A1.75 1.75 0 0014.25 0H1.75zM1.5 1.75a.25.25 0 01.25-.25h12.5a.25.25 0 01.25.25v12.5a.25.25 0 01-.25.25H1.75a.25.25 0 01-.25-.25V1.75zM11.75 3a.75.75 0 00-.75.75v7.5a.75.75 0 001.5 0v-7.5a.75.75 0 00-.75-.75zm-8.25.75a.75.75 0 011.5 0v5.5a.75.75 0 01-1.5 0v-5.5zM8 3a.75.75 0 00-.75.75v3.5a.75.75 0 001.5 0v-3.5A.75.75 0 008 3z"></path></svg>
```

----------------------------------------

TITLE: Demonstrating Node.js Module Import in Bun Build
DESCRIPTION: This snippet shows an example of importing the 'zlib' module, which triggers Bun to load a browser polyfill for compatibility when using 'bun build --target=browser'.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/node-fallbacks/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
For example, if you import `zlib`, the `node-fallbacks/zlib.js` file will be loaded.
```

----------------------------------------

TITLE: Run Bun from a Pull Request
DESCRIPTION: This command downloads and runs a release build of Bun from a specified pull request. It uses `bunx bun-pr` to fetch the build and adds it to the PATH. Requires `gh` CLI for authentication with GitHub.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_20

LANGUAGE: sh
CODE:
```
bunx bun-pr <pr-number>
bunx bun-pr <branch-name>
bunx bun-pr "https://github.com/oven-sh/bun/pull/1234566"
```

----------------------------------------

TITLE: Building TinyCC Library and Dependencies
DESCRIPTION: Creates the TinyCC static library and sets up custom commands for generating necessary files. It also configures include directories for the library.
SOURCE: https://github.com/oven-sh/bun/blob/main/patches/tinycc/CMakeLists.txt#2025-04-22_snippet_3

LANGUAGE: CMake
CODE:
```
add_executable(c2str.exe conftest.c)
target_compile_options(c2str.exe PRIVATE -DC2STR)

add_custom_command(
  TARGET
    c2str.exe POST_BUILD
  COMMAND
    c2str.exe include/tccdefs.h tccdefs_.h
  WORKING_DIRECTORY
    ${CMAKE_CURRENT_SOURCE_DIR}
)

add_library(tcc STATIC ${TCC_SOURCES})

add_custom_command(
  TARGET
    tcc PRE_BUILD
  COMMAND
    ${CMAKE_COMMAND} -E touch config.h
  WORKING_DIRECTORY
    ${CMAKE_CURRENT_SOURCE_DIR}
)

add_dependencies(tcc c2str.exe)

target_include_directories(tcc PUBLIC 
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_SOURCE_DIR}/include
)
```

----------------------------------------

TITLE: Main Content HTML Structure
DESCRIPTION: HTML content structure containing a heading, paragraphs, and a link, wrapped in a styled div container.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/web/streams/fetch.js.txt#2025-04-22_snippet_2

LANGUAGE: html
CODE:
```
<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.</p>
    <p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
```

----------------------------------------

TITLE: Install Bun Dependencies on Fedora
DESCRIPTION: This command installs the necessary dependencies for building Bun on Fedora using dnf.  It includes compilers, build tools, and other libraries required by Bun.  `sudo` is used for root privileges.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_3

LANGUAGE: bash
CODE:
```
$ sudo dnf install cargo ccache cmake git golang libtool ninja-build pkg-config rustc ruby libatomic-static libstdc++-static sed unzip which libicu-devel 'perl(Math::BigInt)'
```

----------------------------------------

TITLE: Using Integer Attributes in TypeScript for Bun Bindings
DESCRIPTION: Demonstrates the use of various integer attributes like enforceRange, clamp, and validate* functions to customize the behavior of integer parameters in function bindings. These attributes help in range checking and type validation.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/bindgen.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import { t, fn } from "bindgen";

export const add = fn({
  args: {
    global: t.globalObject,
    // enforce in i32 range
    a: t.i32.enforceRange(),
    // clamp to u16 range
    b: t.u16,
    // enforce in arbitrary range, with a default if not provided
    c: t.i32.enforceRange(0, 1000).default(5),
    // clamp to arbitrary range, or null
    d: t.u16.clamp(0, 10).optional,
  },
  ret: t.i32,
});

export const add = fn({
  args: {
    global: t.globalObject,
    // throw if not given a number
    a: t.f64.validateNumber(),
    // valid in i32 range
    a: t.i32.validateInt32(),
    // f64 within safe integer range
    b: t.f64.validateInteger(),
    // f64 in given range
    c: t.f64.validateNumber(-10000, 10000),
  },
  ret: t.i32,
});
```

----------------------------------------

TITLE: Label Output Test Series
DESCRIPTION: Set of console output tests showing how different JavaScript data types are logged with timing information in milliseconds. Tests cover primitive types, objects, arrays, dates and special values.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/web/console/console-timeLog.expected.txt#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
[0.00ms] label
[0.06ms] label Hello World!
[0.09ms] label a %s b c d
[0.11ms] label 0 -0 123 -123 123.567 -123.567 Infinity -Infinity
[0.14ms] label true false
[0.15ms] label null undefined
[0.17ms] label Symbol(Symbol Description)
[0.22ms] label 2000-06-27T02:24:34.304Z
[0.29ms] label [ 123, 456, 789 ]
[0.34ms] label {
  name: "foo",
}
[0.37ms] label {
  a: 123,
  b: 456,
  c: 789,
}
[0.39ms] label
```

----------------------------------------

TITLE: Accessing tmpdir path property
DESCRIPTION: Provides the realpath of the testing temporary directory as a string property.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_23

LANGUAGE: JavaScript
CODE:
```
tmpdir.path
```

----------------------------------------

TITLE: Specifying Bun Version in GitHub Actions Workflow
DESCRIPTION: This snippet demonstrates how to set a specific version of Bun to install in a GitHub Actions workflow using the 'with' parameter of the setup-bun action. You can specify 'latest' or 'canary' versions.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/install/cicd.md#2025-04-22_snippet_1

LANGUAGE: yaml
CODE:
```
name: my-workflow
jobs:
  my-job:
    name: my-job
    runs-on: ubuntu-latest
    steps:
      # ...
      - uses: oven-sh/setup-bun@v2
       with:
         version: "latest" # or "canary"
```

----------------------------------------

TITLE: Adding Custom Event Listeners in Commander.js
DESCRIPTION: This example demonstrates how to execute custom actions by listening to command and option events. It sets an environment variable when the verbose option is used.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_37

LANGUAGE: javascript
CODE:
```
program.on('option:verbose', function () {
  process.env.VERBOSE = this.opts().verbose;
});
```

----------------------------------------

TITLE: Static Method: again()
DESCRIPTION: Static method on the Fhqwhgads class
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/doc_with_backticks_in_headings.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
Fhqwhgads.again()
```

----------------------------------------

TITLE: libuv Async I/O Functions
DESCRIPTION: Function signatures from libuv library for handling asynchronous I/O operations and system calls.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/symbols.txt#2025-04-22_snippet_2

LANGUAGE: C++
CODE:
```
_uv_async_init
_uv_async_send
_uv_fs_open
_uv_fs_read
_uv_fs_write
_uv_run
```

----------------------------------------

TITLE: Converting ReadableStream directly to Uint8Array in Bun
DESCRIPTION: This snippet shows how to convert a ReadableStream directly to a Uint8Array using Bun's convenience method readableStreamToBytes, which simplifies the conversion process into a single function call.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/streams/to-typedarray.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const stream = new ReadableStream();
const uint8 = await Bun.readableStreamToBytes(stream);
```

----------------------------------------

TITLE: Building Bun with Custom JavaScriptCore Changes
DESCRIPTION: Commands to rebuild Bun with modified JavaScriptCore library. This process involves updating submodules, compiling JavaScriptCore, and building Bun with the changes.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/licensing.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
git submodule update --init --recursive
make jsc
zig build
```

----------------------------------------

TITLE: Event Polling (us_poll_t) Implementation in C
DESCRIPTION: Low-level event polling interface for managing file descriptors and event types. Provides the foundation for socket operations.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-usockets/misc/manual.md#2025-04-22_snippet_4

LANGUAGE: c
CODE:
```
WIN32_EXPORT struct us_poll_t *us_create_poll(struct us_loop_t *loop, int fallthrough, unsigned int ext_size);

WIN32_EXPORT void us_poll_free(struct us_poll_t *p, struct us_loop_t *loop);

WIN32_EXPORT void us_poll_init(struct us_poll_t *p, LIBUS_SOCKET_DESCRIPTOR fd, int poll_type);

/* Additional polling functions... */
```

----------------------------------------

TITLE: Configuring Output Handling in Commander.js
DESCRIPTION: Shows how to customize Commander's output behavior by configuring custom write routines and error formatting. This example adds prefixes to standard output and error streams, and displays error messages in red using ANSI escape codes.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_43

LANGUAGE: javascript
CODE:
```
function errorColor(str) {
  // Add ANSI escape codes to display text in red.
  return `\x1b[31m${str}\x1b[0m`;
}

program
  .configureOutput({
    // Visibly override write routines as example!
    writeOut: (str) => process.stdout.write(`[OUT] ${str}`),
    writeErr: (str) => process.stdout.write(`[ERR] ${str}`),
    // Highlight errors in color.
    outputError: (str, write) => write(errorColor(str))
  });
```

----------------------------------------

TITLE: Running Valgrind with Bun
DESCRIPTION: Runs Bun with Valgrind to detect memory issues.  `--fair-sched=try` is important to avoid hanging when running multithreaded code.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_23

LANGUAGE: bash
CODE:
```
$ valgrind --fair-sched=try --track-origins=yes bun-debug <args>
```

----------------------------------------

TITLE: Sample Input for Prefix Inlining - index.tsx - TypeScript
DESCRIPTION: TypeScript example file referencing several process.env variables, both matching and not matching the public prefix, to show how Bun selectively replaces them during bundling. Useful to compare with output when environment prefix inlining is enabled.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/index.md#2025-04-22_snippet_41

LANGUAGE: TypeScript
CODE:
```
console.log(process.env.FOO);
console.log(process.env.ACME_PUBLIC_URL);
console.log(process.env.BAZ);
```

----------------------------------------

TITLE: Complex Version and Changes Metadata in YAML
DESCRIPTION: YAML metadata block showing multiple version additions and detailed change information including PR links and descriptions
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/doc_with_yaml.md#2025-04-22_snippet_1

LANGUAGE: yaml
CODE:
```
added:
  - v5.3.0
  - v4.2.0
changes:
  - version: v4.2.0
    pr-url: https://github.com/nodejs/node/pull/3276
    description: The `error` parameter can now be an arrow function.
```

----------------------------------------

TITLE: Extracting libuv Symbols using llvm-nm
DESCRIPTION: Command to extract libuv symbols from the compiled dylib file using llvm-nm. The output is redirected to a text file for further processing.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/bun.js/bindings/libuv/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
llvm-nm -g libuv.dylib | grep _uv &> symbols.txt
```

----------------------------------------

TITLE: Configuring Local Template in package.json
DESCRIPTION: Shows how to define pre- and post-install scripts for a local Bun template in package.json.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/cli/bun-create.md#2025-04-22_snippet_7

LANGUAGE: json
CODE:
```
{
  "name": "@bun-examples/simplereact",
  "version": "0.0.1",
  "main": "index.js",
  "dependencies": {
    "react": "^17.0.2",
    "react-dom": "^17.0.2"
  },
  "bun-create": {
    "preinstall": "echo 'Installing...'",
    "postinstall": ["echo 'Done!'"],
    "start": "bun run echo 'Hello world!'"
  }
}
```

----------------------------------------

TITLE: Documentation Version Header in Markdown
DESCRIPTION: A markdown header file indicating documentation version information using HTML comments. The file specifies that this documentation was introduced in version 8.4.0.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/altdocs.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# ALTDOCS
<!--introduced_in=v8.4.0-->
```

----------------------------------------

TITLE: Configuring Stand-alone Executable Subcommands
DESCRIPTION: Shows how to set up stand-alone executable subcommands where each subcommand is implemented as a separate executable file. This is useful for organizing complex CLI applications.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_21

LANGUAGE: javascript
CODE:
```
program
  .name('pm')
  .version('0.1.0')
  .command('install [name]', 'install one or more packages')
  .command('search [query]', 'search with optional query')
  .command('update', 'update installed packages', { executableFile: 'myUpdateSubCommand' })
  .command('list', 'list packages installed', { isDefault: true });

program.parse(process.argv);
```

----------------------------------------

TITLE: Using generateSEA from SEA module
DESCRIPTION: Copies a source executable to a target executable, injects a SEA blob, and signs it if necessary. Can either skip tests or throw errors on failure based on the verifyWorkflow parameter.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_21

LANGUAGE: JavaScript
CODE:
```
generateSEA(targetExecutable, sourceExecutable, seaBlob, verifyWorkflow)
```

----------------------------------------

TITLE: Running Postject Tests
DESCRIPTION: Command to execute the test suite for Postject.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/postject/README.markdown#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
$ npm test
```

----------------------------------------

TITLE: Configuring TinyCC Source Files
DESCRIPTION: Defines the list of source files for TinyCC, including architecture-specific files for ARM64 and x86_64. It also adds platform-specific files for macOS and Windows.
SOURCE: https://github.com/oven-sh/bun/blob/main/patches/tinycc/CMakeLists.txt#2025-04-22_snippet_2

LANGUAGE: CMake
CODE:
```
set(TCC_SOURCES
  libtcc.c
  tccpp.c
  tccgen.c
  tccdbg.c
  tccelf.c
  tccasm.c
  tccrun.c
)

if(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64|aarch64|ARM64")
  list(APPEND TCC_SOURCES
    arm64-gen.c
    arm64-link.c
    arm64-asm.c
  )
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64|x64|amd64|AMD64")
  list(APPEND TCC_SOURCES
    x86_64-gen.c
    x86_64-link.c
    i386-asm.c
  )
else()
  message(FATAL_ERROR "Unsupported architecture: ${CMAKE_SYSTEM_PROCESSOR}")
endif()

if(APPLE)
  list(APPEND TCC_SOURCES tccmacho.c)
endif()

if(WIN32)
  list(APPEND TCC_SOURCES tccpe.c)
endif()
```

----------------------------------------

TITLE: Using resolve from tmpdir module
DESCRIPTION: Resolves a sequence of paths into an absolute path in the temporary directory. Useful for creating file paths within the test directory.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_26

LANGUAGE: JavaScript
CODE:
```
resolve([...paths])
```

----------------------------------------

TITLE: Configuring TypeScript Decorator Metadata
DESCRIPTION: tsconfig.json configuration for enabling decorator metadata emission in Bun.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/runtime/typescript.md#2025-04-22_snippet_5

LANGUAGE: jsonc
CODE:
```
{
  "compilerOptions": {
    // ... rest of your config
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
  },
}
```

----------------------------------------

TITLE: HTML Output Example for Object Inspection
DESCRIPTION: Example of HTML output generated when inspecting a simple object with custom styling.
SOURCE: https://github.com/oven-sh/bun/blob/main/src/js/internal/util/README.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
{ a: <span style="color:yellow;">1</span> }
```

----------------------------------------

TITLE: Loading GitHub Frontend Scripts in HTML
DESCRIPTION: A collection of script tags that load various JavaScript modules for GitHub's frontend functionality. These scripts handle features like user contributions graphs, drag-and-drop functionality, image cropping, navigation jumping, profile pins, and user status updates.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_18

LANGUAGE: HTML
CODE:
```
<script crossorigin="anonymous" async="async" integrity="sha512-0iFuD53Djy/XZAyvqoEIC7zd0eAUgPgftnE6yDTV+Gme6rmZsIlqEI5m56nc2Ixyvc8ssQv78V3wicOJPW3snQ==" type="application/javascript" src="https://github.githubassets.com/assets/vendor-d2216e0f.js"></script>
<script crossorigin="anonymous" async="async" integrity="sha512-cI+iNNYxkqpDGV8Rui9ouSfFLhI6a/qURXvV8tK1LPu8Ni1tYwJpUSgX6bM1psf5b2YUuhkmyqaWuxzS8m3qtQ==" type="application/javascript" src="https://github.githubassets.com/assets/frameworks-708fa234.js"></script>
```

----------------------------------------

TITLE: Using HTTP/2 Client Connection Preamble in Node.js Tests
DESCRIPTION: Example demonstrating how to send the required HTTP/2 client connection preamble bytes (kClientMagic) to a socket. This is necessary when establishing an HTTP/2 connection for testing purposes.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
socket.write(http2.kClientMagic);
```

----------------------------------------

TITLE: Event handling with bun-inspector-protocol in TypeScript
DESCRIPTION: TypeScript code demonstrating how to listen for various events emitted by the inspector, including script parsing, breakpoint hits, and console messages.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-inspector-protocol/README.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
// Listen for specific protocol events
inspector.on("Debugger.scriptParsed", params => {
  console.log("Script parsed:", params.url);
});

// Listen for breakpoint hits
inspector.on("Debugger.paused", params => {
  console.log("Execution paused at:", params.callFrames[0].location);
});

// Listen for console messages
inspector.on("Runtime.consoleAPICalled", params => {
  console.log(
    "Console message:",
    params.args
      .map(arg =>
        // Use the included utility to format objects
        remoteObjectToString(arg, true),
      )
      .join(" "),
  );
});
```

----------------------------------------

TITLE: Install LLVM 19 on macOS (Homebrew)
DESCRIPTION: This command installs LLVM version 19 using Homebrew on macOS. LLVM 19 is required by Bun. Make sure Homebrew is properly installed and configured before running this command.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_8

LANGUAGE: bash
CODE:
```
$ brew install llvm@19
```

----------------------------------------

TITLE: Defining Binary Architecture for bun-mdx-rs in Markdown
DESCRIPTION: This snippet specifies the architecture and platform for the bun-mdx-rs binary. It indicates that this is the Windows x64 (MSVC) version of the binary.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-build-mdx-rs/npm/win32-x64-msvc/README.md#2025-04-22_snippet_0

LANGUAGE: Markdown
CODE:
```
# `bun-mdx-rs-win32-x64-msvc`

This is the **x86_64-pc-windows-msvc** binary for `bun-mdx-rs`
```

----------------------------------------

TITLE: Default Option Values
DESCRIPTION: Example demonstrating how to set default values for command line options
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
program
  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');

program.parse();

console.log(`cheese: ${program.opts().cheese}`);
```

----------------------------------------

TITLE: Initializing StricJS Project with Bun
DESCRIPTION: Commands to create a new project directory, initialize a Bun project, and install StricJS dependencies.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/guides/ecosystem/stric.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ mkdir myapp
$ cd myapp
$ bun init
$ bun add @stricjs/router @stricjs/utils
```

----------------------------------------

TITLE: Installing Bun (Native)
DESCRIPTION: Installs Bun using the native installation script from bun.sh. It downloads and executes a script to install Bun on the system.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_5

LANGUAGE: bash
CODE:
```
$ curl -fsSL https://bun.sh/install | bash
```

----------------------------------------

TITLE: Validating Heap Snapshot Nodes in Node.js Tests
DESCRIPTION: Example demonstrating how to use the heap dump checker to validate occurrences of specific node types in a heap snapshot. This shows validating TLSWRAP nodes and their expected children structure.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/napi/node-napi-tests/test/common/README.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
validateSnapshotNodes('TLSWRAP', [
  {
    children: [
      { name: 'enc_out' },
      { name: 'enc_in' },
      { name: 'TLSWrap' },
    ],
  },
]);
```

----------------------------------------

TITLE: Checkout WebKit Commit
DESCRIPTION: This command checks out a specific commit hash in the WebKit repository. The commit hash should match the value of `WEBKIT_VERSION` in `cmake/tools/SetupWebKit.cmake` in the main Bun repository.
SOURCE: https://github.com/oven-sh/bun/blob/main/CONTRIBUTING.md#_snippet_24

LANGUAGE: bash
CODE:
```
# Check out the commit hash specified in `set(WEBKIT_VERSION <commit_hash>)` in cmake/tools/SetupWebKit.cmake
$ git -C vendor/WebKit checkout <commit_hash>
```

----------------------------------------

TITLE: Running Bundler Benchmark Script in Shell
DESCRIPTION: Shell commands to execute the bundler benchmark script. It sets the execute permission on the script file and then runs it.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/bundle/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
$ chmod +x run-bench.sh
$ ./run-bench.sh
```

----------------------------------------

TITLE: HTML Lorem Ipsum Text with Paragraph Tags
DESCRIPTION: HTML markup containing multiple paragraphs of Lorem Ipsum text with some basic bold tags for text formatting.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_15

LANGUAGE: HTML
CODE:
```
    rutrum vitae, consequat vel ex.
</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>
<p>
    Sed sollicitudin <b>sem</b> mauris, at rutrum nibh egestas vel. Ut eu nisi tellus. Praesent dignissim
    orci elementum, mattis turpis eget, maximus ante. Suspendisse luctus eu felis a tempor. Morbi
    ac risus vitae sem molestie ullamcorper. Curabitur ligula augue, sollicitudin quis maximus vel,
    facilisis sed nibh. Aenean auctor magna sem, id rutrum metus convallis quis. Nullam non arcu
    dictum, lobortis erat quis, rhoncus est. Suspendisse venenatis, mi sed venenatis vehicula,
    tortor dolor egestas lectus, et efficitur turpis odio non augue. Integer velit sapien, dictum
    non egestas vitae, hendrerit sed quam. Phasellus a nunc eu erat varius imperdiet. Etiam id
    sollicitudin turpis, vitae molestie orci. Quisque ornare magna quis metus rhoncus commodo.
    Phasellus non mauris velit.
</p>
<p>
    Etiam dictum tellus ipsum, nec varius quam ornare vel. Cras vehicula diam nec sollicitudin
    ultricies. Pellentesque rhoncus sagittis nisl id facilisis. Nunc viverra convallis risus ut
    luctus. Aliquam vestibulum <b>efficitur massa</b>, id tempus nisi posuere a. Aliquam scelerisque
    elit justo. Nullam a ante felis. Cras vitae lorem eu nisi feugiat hendrerit. Maecenas vitae
    suscipit leo, lacinia dignissim lacus. Sed eget volutpat mi. In eu bibendum neque. Pellentesque
    finibus velit a fermentum rhoncus. Maecenas leo purus, eleifend eu lacus a, condimentum sagittis
    justo.
</p>
```

----------------------------------------

TITLE: Checking out WebKit Commit
DESCRIPTION: Checks out a specific commit hash in the cloned WebKit repository.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/project/contributing.md#_snippet_25

LANGUAGE: bash
CODE:
```
$ git -C vendor/WebKit checkout <commit_hash>
```

----------------------------------------

TITLE: Adding Triple-Slash Directive for New Type Definition File
DESCRIPTION: Example of how to add a triple-slash directive in the index.d.ts file to include a new type definition file. This is part of the contribution process for adding new type definitions to the bun-types package.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-types/README.md#2025-04-22_snippet_1

LANGUAGE: diff
CODE:
```
+ /// <reference path="./newfile.d.ts" />
```

----------------------------------------

TITLE: Running Benchmark in Deno
DESCRIPTION: Command to execute the benchmark script using the Deno runtime with all permissions.
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/postgres/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
deno run -A index.mjs
```

----------------------------------------

TITLE: Registering Bun Plugin in JavaScript
DESCRIPTION: Example of registering and using the compiled native plugin in a Bun build configuration
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-native-plugin-rs/README.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
const result = await Bun.build({
  entrypoints: ["index.ts"],
  plugins: [
    {
      name: "replace-foo-with-bar",
      setup(build) {
        const napiModule = require("path/to/napi_module.node");

        // Register the `onBeforeParse` hook to run on all `.ts` files.
        // We tell it to use function we implemented inside of our `lib.rs` code.
        build.onBeforeParse(
          { filter: /\.ts/ },
          { napiModule, symbol: "replace_foo_with_bar" },
        );
      },
    },
  ],
});
```

----------------------------------------

TITLE: Configuring TinyCC Compile Definitions
DESCRIPTION: Adds compile definitions for TinyCC, including platform-specific definitions for macOS and Windows. It also reads the TCC version from a file and optionally includes the Git hash.
SOURCE: https://github.com/oven-sh/bun/blob/main/patches/tinycc/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: CMake
CODE:
```
add_compile_definitions(
  CONFIG_TCC_PREDEFS
  ONE_SOURCE=0
  TCC_LIBTCC1="\\0"
)

if(APPLE)
  add_compile_definitions(
    TCC_TARGET_MACHO
    CONFIG_CODESIGN
    CONFIG_NEW_MACHO
    CONFIG_USR_INCLUDE=\"${CMAKE_OSX_SYSROOT}\"
  )
endif()

if(WIN32)
  add_compile_definitions(
    CONFIG_WIN32
    CONFIG_TCCDIR=\"${CMAKE_CURRENT_SOURCE_DIR}/win32\"
  )
endif()

file(READ ${CMAKE_CURRENT_SOURCE_DIR}/VERSION TCC_VERSION)

add_compile_definitions(TCC_VERSION=\"${TCC_VERSION}\")

execute_process(
  COMMAND git rev-parse --short HEAD
  OUTPUT_VARIABLE TCC_GITHASH
  OUTPUT_STRIP_TRAILING_WHITESPACE
  ERROR_QUIET
)

if(TCC_GITHASH)
  add_compile_definitions(TCC_GITHASH=\"${TCC_GITHASH}\")
endif()
```

----------------------------------------

TITLE: Initializing TinyCC Project with CMake
DESCRIPTION: Sets up the CMake project for TinyCC, including version, language, and build type. It also configures compiler options and definitions based on the compiler and platform.
SOURCE: https://github.com/oven-sh/bun/blob/main/patches/tinycc/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.10)
project(tinycc VERSION 0.9.28 LANGUAGES C)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Debug)
endif()

set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED ON)

if(WIN32)
  set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
endif()

add_compile_options(-Wall)

if(NOT CMAKE_C_COMPILER_ID MATCHES "tcc")
  add_compile_options(
    -fno-strict-aliasing
    -Wdeclaration-after-statement
    -Wpointer-sign
    -Wsign-compare
    -Wunused-result
    -Wformat-truncation
  )
endif()

if(CMAKE_C_COMPILER_ID MATCHES "GNU")
  add_compile_options(
    -fheinous-gnu-extensions
    -Wno-string-plus-int
    -Wno-deprecated-declarations
  )
endif()
```

----------------------------------------

TITLE: Socket Context Management (us_socket_context_t) Implementation in C
DESCRIPTION: Socket context implementation for managing groups of network sockets with shared behaviors. Handles SSL options, callbacks, and socket lifecycle management.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-usockets/misc/manual.md#2025-04-22_snippet_1

LANGUAGE: c
CODE:
```
struct us_socket_context_options_t {
    const char *key_file_name;
    const char *cert_file_name;
    const char *passphrase;
    const char *dh_params_file_name;
    const char *ca_file_name;
    const char *ssl_ciphers;
    int ssl_prefer_low_memory_usage;
};

WIN32_EXPORT struct us_socket_context_t *us_create_socket_context(int ssl, struct us_loop_t *loop, int ext_size, struct us_socket_context_options_t options);

/* Additional socket context functions... */
```

----------------------------------------

TITLE: Using Legacy Options as Properties in Commander.js
DESCRIPTION: This example demonstrates how to revert to the pre-Commander 7 behavior of storing options as properties on the command object using storeOptionsAsProperties().
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-22_snippet_39

LANGUAGE: javascript
CODE:
```
program
  .storeOptionsAsProperties()
  .option('-d, --debug')
  .action((commandAndOptions) => {
    if (commandAndOptions.debug) {
      console.error(`Called ${commandAndOptions.name()}`);
    }
  });
```

----------------------------------------

TITLE: HMR Acceptance with Callback in Bun
DESCRIPTION: Demonstrates using import.meta.hot.accept with a callback that receives the updated module when hot replacement occurs. This allows custom handling of module updates.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/bundler/hmr.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
export const count = 0;

import.meta.hot.accept(newModule => {
  if (newModule) {
    // newModule is undefined when SyntaxError happened
    console.log("updated: count is now ", newModule.count);
  }
});
```

----------------------------------------

TITLE: Verifying JSC Build Success in Bash
DESCRIPTION: Executes the JavaScriptCore (JSC) command-line interface binary located in the build output directory (`src/bun.js/WebKit/WebKitBuild/Release/bin/jsc`) with the `--help` option. This command is used to verify that the JSC build completed successfully and the resulting binary is executable and functional, indicated by it printing help options.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/contributing/upgrading-webkit.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
src/bun.js/WebKit/WebKitBuild/Release/bin/jsc --help
```

----------------------------------------

TITLE: GitHub Fork Button SVG Icon
DESCRIPTION: SVG icon markup for the repository fork button showing a fork symbol
SOURCE: https://github.com/oven-sh/bun/blob/main/bench/snippets/_fixture.txt#2025-04-22_snippet_11

LANGUAGE: SVG
CODE:
```
<svg class="octicon octicon-repo-forked" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5 3.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm0 2.122a2.25 2.25 0 10-1.5 0v.878A2.25 2.25 0 005.75 8.5h1.5v2.128a2.251 2.251 0 101.5 0V8.5h1.5a2.25 2.25 0 002.25-2.25v-.878a2.25 2.25 0 10-1.5 0v.878a.75.75 0 01-.75.75h-4.5A.75.75 0 015 6.25v-.878zm3.75 7.378a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm3-8.75a.75.75 0 100-1.5.75.75 0 000 1.5z"></path></svg>
```

----------------------------------------

TITLE: Cleaning Bindings and Regenerating Headers in Bash
DESCRIPTION: Executes the `make` command with multiple targets: `clean-bindings`, `headers`, and `builtins` from the Bun project root directory. This step cleans previously generated language bindings, regenerates necessary header files (likely for C++/Zig interop based on the updated JSC), and processes built-in components, preparing for the subsequent update of Bun's specific bindings.
SOURCE: https://github.com/oven-sh/bun/blob/main/docs/contributing/upgrading-webkit.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
make clean-bindings headers builtins
```

----------------------------------------

TITLE: Running Node.js Application from Command Line
DESCRIPTION: Basic command line syntax for executing a Node.js application file. Uses options flag for additional configuration parameters.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/document_with_links.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
node [options] index.js
```

----------------------------------------

TITLE: Specifying Version Number in Text
DESCRIPTION: A plain text version number specification indicating the target version 2024b.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/tz-version.txt#2025-04-22_snippet_0

LANGUAGE: text
CODE:
```
2024b
```

----------------------------------------

TITLE: Writing Hello Heading in Markdown
DESCRIPTION: A level 1 markdown heading that displays 'Hello'
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/node/test/fixtures/copy/kitchen-sink/a/c/README2.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# Hello
```

----------------------------------------

TITLE: Describing Bun Binary in Markdown
DESCRIPTION: A brief Markdown description of the Bun binary for Linux ARM64, including a link to the official website. This snippet provides basic information about the binary distribution and its purpose.
SOURCE: https://github.com/oven-sh/bun/blob/main/packages/bun-release/npm/@oven/bun-linux-aarch64/README.md#2025-04-22_snippet_0

LANGUAGE: Markdown
CODE:
```
# Bun

This is the Linux arm64 binary for Bun, a fast all-in-one JavaScript runtime. https://bun.sh
```

----------------------------------------

TITLE: Defining HTML Structure for Example Domain Page
DESCRIPTION: This snippet outlines the basic HTML structure for the example domain page, including the doctype declaration, html, head, and body tags.
SOURCE: https://github.com/oven-sh/bun/blob/main/test/js/bun/io/fetch.js.txt#2025-04-22_snippet_0

LANGUAGE: HTML
CODE:
```
<!doctype html>
<html>
<head>
    <title>Example Domain</title>

    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type="text/css">
    <!-- CSS styles here -->
    </style>    
</head>

<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.</p>
    <p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>
```